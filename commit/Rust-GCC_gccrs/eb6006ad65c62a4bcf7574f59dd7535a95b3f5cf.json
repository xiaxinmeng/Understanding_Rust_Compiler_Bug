{"sha": "eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWI2MDA2YWQ2NWM2MmE0YmNmNzU3NGY1OWRkNzUzNWE5NWIzZjVjZg==", "commit": {"author": {"name": "Renlin Li", "email": "renlin.li@arm.com", "date": "2014-01-29T13:46:39Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-01-29T13:46:39Z"}, "message": "[ARM] Add -march=armv7ve\n\ngcc/\n2014-01-29  Renlin Li  <Renlin.Li@arm.com>\n\n\t* config/arm/arm-arches.def (ARM_ARCH): Add armv7ve arch.\n\t* config/arm/arm.c (FL_FOR_ARCH7VE): New.\n\t(arm_file_start): Generate correct asm header for armv7ve.\n\t* config/arm/bpabi.h: Add multilib support for armv7ve.\n\t* config/arm/driver-arm.c: Change the architectures of cortex-a7\n\tand cortex-a15 to armv7ve.\n\t* config/arm/t-aprofile: Add multilib support for armv7ve.\n\t* doc/invoke.texi: Document -march=armv7ve.\n\ngcc/testsuite/\n2014-01-29  Renlin Li  <Renlin.Li@arm.com>\n\n\t* gcc.target/arm/ftest-armv7ve-arm.c: New.\n\t* gcc.target/arm/ftest-armv7ve-thumb.c: New.\n\t* lib/target-supports.exp: New armfunc, armflag and armdef for armv7ve.\n\nFrom-SVN: r207237", "tree": {"sha": "a183d0aa6a07912cf77c431c52d4a91d51d4bb66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a183d0aa6a07912cf77c431c52d4a91d51d4bb66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/comments", "author": null, "committer": null, "parents": [{"sha": "dc9e1b866ba338e7d1c52433e271cfd0d8d2c76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc9e1b866ba338e7d1c52433e271cfd0d8d2c76f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc9e1b866ba338e7d1c52433e271cfd0d8d2c76f"}], "stats": {"total": 224, "additions": 170, "deletions": 54}, "files": [{"sha": "13bc6613a49677279841567d4c39b1a31656b725", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -1,3 +1,14 @@\n+2014-01-29  Renlin Li  <Renlin.Li@arm.com>\n+\n+\t* config/arm/arm-arches.def (ARM_ARCH): Add armv7ve arch.\n+\t* config/arm/arm.c (FL_FOR_ARCH7VE): New.\n+\t(arm_file_start): Generate correct asm header for armv7ve.\n+\t* config/arm/bpabi.h: Add multilib support for armv7ve.\n+\t* config/arm/driver-arm.c: Change the architectures of cortex-a7\n+\tand cortex-a15 to armv7ve.\n+\t* config/arm/t-aprofile: Add multilib support for armv7ve.\n+\t* doc/invoke.texi: Document -march=armv7ve.\n+\n 2014-01-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58742"}, {"sha": "9adb791db60b49070c26682cc8361c53943ea533", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -50,6 +50,7 @@ ARM_ARCH(\"armv6-m\", cortexm1,\t6M,\t\t\t      FL_FOR_ARCH6M)\n ARM_ARCH(\"armv6s-m\", cortexm1,\t6M,\t\t\t      FL_FOR_ARCH6M)\n ARM_ARCH(\"armv7\",   cortexa8,\t7,   FL_CO_PROC |\t      FL_FOR_ARCH7)\n ARM_ARCH(\"armv7-a\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7A)\n+ARM_ARCH(\"armv7ve\", cortexa8,\t7A,  FL_CO_PROC |\t      FL_FOR_ARCH7VE)\n ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)"}, {"sha": "825407feae3295a78ab2e0a741127239e57e0e34", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -764,11 +764,11 @@ static int thumb_call_reg_needed;\n #define FL_FOR_ARCH6M\t(FL_FOR_ARCH6 & ~FL_NOTM)\n #define FL_FOR_ARCH7\t((FL_FOR_ARCH6T2 & ~FL_NOTM) | FL_ARCH7)\n #define FL_FOR_ARCH7A\t(FL_FOR_ARCH7 | FL_NOTM | FL_ARCH6K)\n+#define FL_FOR_ARCH7VE\t(FL_FOR_ARCH7A | FL_THUMB_DIV | FL_ARM_DIV)\n #define FL_FOR_ARCH7R\t(FL_FOR_ARCH7A | FL_THUMB_DIV)\n #define FL_FOR_ARCH7M\t(FL_FOR_ARCH7 | FL_THUMB_DIV)\n #define FL_FOR_ARCH7EM  (FL_FOR_ARCH7M | FL_ARCH7EM)\n-#define FL_FOR_ARCH8A\t(FL_FOR_ARCH7 | FL_ARCH6K | FL_ARCH8 | FL_THUMB_DIV \\\n-\t\t\t | FL_ARM_DIV | FL_NOTM)\n+#define FL_FOR_ARCH8A\t(FL_FOR_ARCH7VE | FL_ARCH8)\n \n /* The bits in this mask specify which\n    instructions we are allowed to generate.  */\n@@ -27859,20 +27859,34 @@ arm_file_start (void)\n       const char *fpu_name;\n       if (arm_selected_arch)\n         {\n-          const char* pos = strchr (arm_selected_arch->name, '+');\n-\t  if (pos)\n+\t  /* armv7ve doesn't support any extensions.  */\n+\t  if (strcmp (arm_selected_arch->name, \"armv7ve\") == 0)\n \t    {\n-\t      char buf[15];\n-\t      gcc_assert (strlen (arm_selected_arch->name)\n-\t                  <= sizeof (buf) / sizeof (*pos));\n-\t      strncpy (buf, arm_selected_arch->name,\n-\t                    (pos - arm_selected_arch->name) * sizeof (*pos));\n-\t      buf[pos - arm_selected_arch->name] = '\\0';\n-\t      asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", buf);\n-\t      asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", pos + 1);\n+\t      /* Keep backward compatability for assemblers\n+\t\t which don't support armv7ve.  */\n+\t      asm_fprintf (asm_out_file, \"\\t.arch armv7-a\\n\");\n+\t      asm_fprintf (asm_out_file, \"\\t.arch_extension virt\\n\");\n+\t      asm_fprintf (asm_out_file, \"\\t.arch_extension idiv\\n\");\n+\t      asm_fprintf (asm_out_file, \"\\t.arch_extension sec\\n\");\n+\t      asm_fprintf (asm_out_file, \"\\t.arch_extension mp\\n\");\n \t    }\n \t  else\n-\t    asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_arch->name);\n+\t    {\n+\t      const char* pos = strchr (arm_selected_arch->name, '+');\n+\t      if (pos)\n+\t\t{\n+\t\t  char buf[15];\n+\t\t  gcc_assert (strlen (arm_selected_arch->name)\n+\t\t\t      <= sizeof (buf) / sizeof (*pos));\n+\t\t  strncpy (buf, arm_selected_arch->name,\n+\t\t\t\t(pos - arm_selected_arch->name) * sizeof (*pos));\n+\t\t  buf[pos - arm_selected_arch->name] = '\\0';\n+\t\t  asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", buf);\n+\t\t  asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", pos + 1);\n+\t\t}\n+\t      else\n+\t\tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_arch->name);\n+\t    }\n         }\n       else if (strncmp (arm_selected_cpu->name, \"generic\", 7) == 0)\n \tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_cpu->name + 8);"}, {"sha": "bc223f8e30039236a050e7b9528589617e8495bf", "filename": "gcc/config/arm/bpabi.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Fbpabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Fbpabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fbpabi.h?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -66,6 +66,7 @@\n    |mcpu=cortex-a57\t\t\t\t\t\\\n    |mcpu=cortex-a57.cortex-a53\t\t\t\t\\\n    |mcpu=generic-armv7-a                                \\\n+   |march=armv7ve\t                                \\\n    |march=armv7-m|mcpu=cortex-m3                        \\\n    |march=armv7e-m|mcpu=cortex-m4                       \\\n    |march=armv6-m|mcpu=cortex-m0                        \\\n@@ -83,6 +84,7 @@\n    |mcpu=cortex-a57.cortex-a53\t\t\t\t\\\n    |mcpu=marvell-pj4\t\t\t\t\t\\\n    |mcpu=generic-armv7-a                                \\\n+   |march=armv7ve\t                                \\\n    |march=armv7-m|mcpu=cortex-m3                        \\\n    |march=armv7e-m|mcpu=cortex-m4                       \\\n    |march=armv6-m|mcpu=cortex-m0                        \\"}, {"sha": "6d9c4174c967b48a00cfd6faca4b6b077816b370", "filename": "gcc/config/arm/driver-arm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Fdriver-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fdriver-arm.c?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -37,11 +37,11 @@ static struct vendor_cpu arm_cpu_table[] = {\n     {\"0xb56\", \"armv6t2\", \"arm1156t2-s\"},\n     {\"0xb76\", \"armv6zk\", \"arm1176jz-s\"},\n     {\"0xc05\", \"armv7-a\", \"cortex-a5\"},\n-    {\"0xc07\", \"armv7-a\", \"cortex-a7\"},\n+    {\"0xc07\", \"armv7ve\", \"cortex-a7\"},\n     {\"0xc08\", \"armv7-a\", \"cortex-a8\"},\n     {\"0xc09\", \"armv7-a\", \"cortex-a9\"},\n-    {\"0xc0d\", \"armv7-a\", \"cortex-a12\"},\n-    {\"0xc0f\", \"armv7-a\", \"cortex-a15\"},\n+    {\"0xc0d\", \"armv7ve\", \"cortex-a12\"},\n+    {\"0xc0f\", \"armv7ve\", \"cortex-a15\"},\n     {\"0xc14\", \"armv7-r\", \"cortex-r4\"},\n     {\"0xc15\", \"armv7-r\", \"cortex-r5\"},\n     {\"0xc20\", \"armv6-m\", \"cortex-m0\"},"}, {"sha": "b968711c16c76c23f1f5d7eb73bc1b44bd3cc7fe", "filename": "gcc/config/arm/t-aprofile", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Ft-aprofile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fconfig%2Farm%2Ft-aprofile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-aprofile?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -37,12 +37,10 @@ MULTILIB_REUSE\t     =\n #        NEON-VFPV4 (simdvfpv4), NEON for ARMv8 (simdv8), or None (.).\n #   Float-abi: Soft (.), softfp (softfp), or hard (hardfp).\n \n-# We use the option -mcpu=cortex-a7 because we do not yet have march=armv7ve\n-# or march=armv7a+virt as a command line option for the compiler.\n MULTILIB_OPTIONS       += mthumb\n MULTILIB_DIRNAMES      += thumb\n \n-MULTILIB_OPTIONS       += march=armv7-a/mcpu=cortex-a7/march=armv8-a\n+MULTILIB_OPTIONS       += march=armv7-a/march=armv7ve/march=armv8-a\n MULTILIB_DIRNAMES      += v7-a v7ve v8-a\n \n MULTILIB_OPTIONS       += mfpu=vfpv3-d16/mfpu=neon/mfpu=vfpv4-d16/mfpu=neon-vfpv4/mfpu=neon-fp-armv8\n@@ -64,27 +62,27 @@ MULTILIB_EXCEPTIONS    += mfpu=*\n MULTILIB_EXCEPTIONS    += mthumb/mfloat-abi=*\n MULTILIB_EXCEPTIONS    += mthumb/mfpu=*\n MULTILIB_EXCEPTIONS    += *march=armv7-a/mfloat-abi=*\n-MULTILIB_EXCEPTIONS    += *mcpu=cortex-a7/mfloat-abi=*\n+MULTILIB_EXCEPTIONS    += *march=armv7ve/mfloat-abi=*\n MULTILIB_EXCEPTIONS    += *march=armv8-a/mfloat-abi=*\n \n # Ensure the correct FPU variants apply to the correct base architectures.\n-MULTILIB_EXCEPTIONS    += *mcpu=cortex-a7/*mfpu=vfpv3-d16*\n-MULTILIB_EXCEPTIONS    += *mcpu=cortex-a7/*mfpu=neon/*\n+MULTILIB_EXCEPTIONS    += *march=armv7ve/*mfpu=vfpv3-d16*\n+MULTILIB_EXCEPTIONS    += *march=armv7ve/*mfpu=neon/*\n MULTILIB_EXCEPTIONS    += *march=armv8-a/*mfpu=vfpv3-d16*\n MULTILIB_EXCEPTIONS    += *march=armv8-a/*mfpu=neon/*\n MULTILIB_EXCEPTIONS    += *march=armv7-a/*mfpu=vfpv4-d16*\n MULTILIB_EXCEPTIONS    += *march=armv7-a/*mfpu=neon-vfpv4*\n MULTILIB_EXCEPTIONS    += *march=armv8-a/*mfpu=vfpv4-d16*\n MULTILIB_EXCEPTIONS    += *march=armv8-a/*mfpu=neon-vfpv4*\n MULTILIB_EXCEPTIONS    += *march=armv7-a/*mfpu=neon-fp-armv8*\n-MULTILIB_EXCEPTIONS    += *mcpu=cortex-a7/*mfpu=neon-fp-armv8*\n+MULTILIB_EXCEPTIONS    += *march=armv7ve/*mfpu=neon-fp-armv8*\n \n # CPU Matches\n MULTILIB_MATCHES       += march?armv7-a=mcpu?cortex-a8\n MULTILIB_MATCHES       += march?armv7-a=mcpu?cortex-a9\n MULTILIB_MATCHES       += march?armv7-a=mcpu?cortex-a5\n-MULTILIB_MATCHES       += mcpu?cortex-a7=mcpu?cortex-a15=mcpu?cortex-a12\n-MULTILIB_MATCHES       += mcpu?cortex-a7=mcpu?cortex-a15.cortex-a7\n+MULTILIB_MATCHES       += march?armv7ve=mcpu?cortex-a15=mcpu?cortex-a12\n+MULTILIB_MATCHES       += march?armv7ve=mcpu?cortex-a15.cortex-a7\n MULTILIB_MATCHES       += march?armv8-a=mcpu?cortex-a53\n MULTILIB_MATCHES       += march?armv8-a=mcpu?cortex-a57\n MULTILIB_MATCHES       += march?armv8-a=mcpu?cortex-a57.cortex-a53\n@@ -105,8 +103,8 @@ MULTILIB_MATCHES       += mfpu?neon-fp-armv8=mfpu?crypto-neon-fp-armv8\n # This applies to any similar combination at the v7ve and v8-a arch\n # levels.\n \n-MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mcpu.cortex-a7/mfpu.vfpv3-d16/mfloat-abi.hard\n-MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=mcpu.cortex-a7/mfpu.vfpv3-d16/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv7ve/mfpu.vfpv3-d16/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=march.armv7ve/mfpu.vfpv3-d16/mfloat-abi.softfp\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv8-a/mfpu.vfpv3-d16/mfloat-abi.hard\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=march.armv8-a/mfpu.vfpv3-d16/mfloat-abi.softfp\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv7-a/mfpu.vfpv4-d16/mfloat-abi.hard\n@@ -117,8 +115,8 @@ MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=march.armv7\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=march.armv7-a/mfpu.vfpv4/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.hard=mcpu.cortex-a7/mfpu.neon/mfloat-abi.hard\n-MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.softfp=mcpu.cortex-a7/mfpu.neon/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.hard=march.armv7ve/mfpu.neon/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.softfp=march.armv7ve/mfpu.neon/mfloat-abi.softfp\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.hard=march.armv8-a/mfpu.neon/mfloat-abi.hard\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.softfp=march.armv8-a/mfpu.neon/mfloat-abi.softfp\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.hard=march.armv7-a/mfpu.neon-vfpv4/mfloat-abi.hard\n@@ -127,25 +125,25 @@ MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.hard=march.armv7-a/mf\n MULTILIB_REUSE\t      += march.armv7-a/mfpu.neon/mfloat-abi.softfp=march.armv7-a/mfpu.neon-fp-armv8/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=mcpu.cortex-a7/mfpu.fp-armv8/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=mcpu.cortex-a7/mfpu.fp-armv8/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=march.armv8-a/mfpu.vfpv4/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=march.armv8-a/mfpu.vfpv4/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=march.armv7ve/mfpu.fp-armv8/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=march.armv7ve/mfpu.fp-armv8/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=march.armv8-a/mfpu.vfpv4/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=march.armv8-a/mfpu.vfpv4/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.hard=march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.softfp=march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.hard=mcpu.cortex-a7/mfpu.neon-fp-armv8/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.softfp=mcpu.cortex-a7/mfpu.neon-fp-armv8/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.hard=march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.softfp=march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.hard=march.armv7ve/mfpu.neon-fp-armv8/mfloat-abi.hard\n+MULTILIB_REUSE\t      += march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.softfp=march.armv7ve/mfpu.neon-fp-armv8/mfloat-abi.softfp\n \n \n \n # And again for mthumb.\n \n-MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mthumb/mcpu.cortex-a7/mfpu.vfpv3-d16/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=mthumb/mcpu.cortex-a7/mfpu.vfpv3-d16/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mthumb/march.armv7ve/mfpu.vfpv3-d16/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=mthumb/march.armv7ve/mfpu.vfpv3-d16/mfloat-abi.softfp\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.vfpv3-d16/mfloat-abi.hard\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.vfpv3-d16/mfloat-abi.softfp\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mthumb/march.armv7-a/mfpu.vfpv4-d16/mfloat-abi.hard\n@@ -156,8 +154,8 @@ MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.hard=mthu\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.vfpv3-d16/mfloat-abi.softfp=mthumb/march.armv7-a/mfpu.vfpv4/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.hard=mthumb/mcpu.cortex-a7/mfpu.neon/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.softfp=mthumb/mcpu.cortex-a7/mfpu.neon/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.hard=mthumb/march.armv7ve/mfpu.neon/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.softfp=mthumb/march.armv7ve/mfpu.neon/mfloat-abi.softfp\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.neon/mfloat-abi.hard\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.neon/mfloat-abi.softfp\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.hard=mthumb/march.armv7-a/mfpu.neon-vfpv4/mfloat-abi.hard\n@@ -166,15 +164,15 @@ MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.hard=mthumb/ma\n MULTILIB_REUSE\t      += mthumb/march.armv7-a/mfpu.neon/mfloat-abi.softfp=mthumb/march.armv7-a/mfpu.neon-fp-armv8/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/mcpu.cortex-a7/mfpu.fp-armv8/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/mcpu.cortex-a7/mfpu.fp-armv8/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.vfpv4/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.vfpv4/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/march.armv7ve/mfpu.fp-armv8/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/march.armv7ve/mfpu.fp-armv8/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.vfpv4/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.vfpv4/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.vfpv4-d16/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.vfpv4-d16/mfloat-abi.softfp\n \n \n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.softfp\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.hard=mthumb/mcpu.cortex-a7/mfpu.neon-fp-armv8/mfloat-abi.hard\n-MULTILIB_REUSE\t      += mthumb/mcpu.cortex-a7/mfpu.neon-vfpv4/mfloat-abi.softfp=mthumb/mcpu.cortex-a7/mfpu.neon-fp-armv8/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.hard=mthumb/march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.softfp=mthumb/march.armv8-a/mfpu.neon-vfpv4/mfloat-abi.softfp\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.hard=mthumb/march.armv7ve/mfpu.neon-fp-armv8/mfloat-abi.hard\n+MULTILIB_REUSE\t      += mthumb/march.armv7ve/mfpu.neon-vfpv4/mfloat-abi.softfp=mthumb/march.armv7ve/mfpu.neon-fp-armv8/mfloat-abi.softfp"}, {"sha": "268abf680653cde90e4fe0e0adb9a4bd6042e559", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -12301,10 +12301,13 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv5}, @samp{armv5t}, @samp{armv5e}, @samp{armv5te},\n @samp{armv6}, @samp{armv6j},\n @samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n-@samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m},\n+@samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m}, @samp{armv7ve},\n @samp{armv8-a}, @samp{armv8-a+crc},\n @samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n \n+@option{-march=armv7ve} is the armv7-a architecture with virtualization\n+extensions.\n+\n @option{-march=armv8-a+crc} enables code generation for the ARMv8-A\n architecture together with the optional CRC32 extensions.\n "}, {"sha": "15ea8c7da2e6d35f6178b2f1962300ad93a6dd69", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -1,3 +1,9 @@\n+2014-01-29  Renlin Li  <Renlin.Li@arm.com>\n+\n+\t* gcc.target/arm/ftest-armv7ve-arm.c: New.\n+\t* gcc.target/arm/ftest-armv7ve-thumb.c: New.\n+\t* lib/target-supports.exp: New armfunc, armflag and armdef for armv7ve.\n+\n 2014-01-29  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58702"}, {"sha": "3cf987ccc87aeaa3d75b7075114f5bea885e1e06", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7ve-arm.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-arm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-arm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-arm.c?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-march=*\" } { \"-march=armv7ve\" } } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-mthumb\" } { \"\" } } */\n+/* { dg-options \"-marm\" } */\n+/* { dg-add-options arm_arch_v7ve } */\n+\n+#define NEED_ARM_ARCH\n+#define VALUE_ARM_ARCH 7\n+\n+#define NEED_ARM_ARCH_ISA_ARM\n+#define VALUE_ARM_ARCH_ISA_ARM 1\n+\n+#define NEED_ARM_ARCH_ISA_THUMB\n+#define VALUE_ARM_ARCH_ISA_THUMB 2\n+\n+#define NEED_ARM_ARCH_PROFILE\n+#define VALUE_ARM_ARCH_PROFILE 'A'\n+\n+#define NEED_ARM_FEATURE_UNALIGNED\n+#define VALUE_ARM_FEATURE_UNALIGNED 1\n+\n+#define NEED_ARM_FEATURE_LDREX\n+#define VALUE_ARM_FEATURE_LDREX 15\n+\n+#define NEED_ARM_FEATURE_CLZ\n+#define VALUE_ARM_FEATURE_CLZ 1\n+\n+#define NEED_ARM_FEATURE_DSP\n+#define VALUE_ARM_FEATURE_DSP 1\n+\n+#define NEED_ARM_FEATURE_SIMD32\n+#define VALUE_ARM_FEATURE_SIMD32 1\n+\n+#define NEED_ARM_FEATURE_QBIT\n+#define VALUE_ARM_FEATURE_QBIT 1\n+\n+#define NEED_ARM_FEATURE_SAT\n+#define VALUE_ARM_FEATURE_SAT 1\n+\n+#include \"ftest-support.h\""}, {"sha": "0d6b4322133f3d7347d6273ac8f5645fd5d74794", "filename": "gcc/testsuite/gcc.target/arm/ftest-armv7ve-thumb.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-thumb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-thumb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fftest-armv7ve-thumb.c?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do compile } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-march=*\" } { \"-march=armv7ve\" } } */\n+/* { dg-skip-if \"avoid conflicting multilib options\" { *-*-* } { \"-marm\" } { \"\" } } */\n+/* { dg-options \"-mthumb\" } */\n+/* { dg-add-options arm_arch_v7ve } */\n+\n+#define NEED_ARM_ARCH\n+#define VALUE_ARM_ARCH 7\n+\n+#define NEED_ARM_ARCH_ISA_ARM\n+#define VALUE_ARM_ARCH_ISA_ARM 1\n+\n+#define NEED_ARM_ARCH_ISA_THUMB\n+#define VALUE_ARM_ARCH_ISA_THUMB 2\n+\n+#define NEED_ARM_ARCH_PROFILE\n+#define VALUE_ARM_ARCH_PROFILE 'A'\n+\n+#define NEED_ARM_FEATURE_UNALIGNED\n+#define VALUE_ARM_FEATURE_UNALIGNED 1\n+\n+#define NEED_ARM_FEATURE_LDREX\n+#define VALUE_ARM_FEATURE_LDREX 15\n+\n+#define NEED_ARM_FEATURE_CLZ\n+#define VALUE_ARM_FEATURE_CLZ 1\n+\n+#define NEED_ARM_FEATURE_DSP\n+#define VALUE_ARM_FEATURE_DSP 1\n+\n+#define NEED_ARM_FEATURE_SIMD32\n+#define VALUE_ARM_FEATURE_SIMD32 1\n+\n+#define NEED_ARM_FEATURE_QBIT\n+#define VALUE_ARM_FEATURE_QBIT 1\n+\n+#define NEED_ARM_FEATURE_SAT\n+#define VALUE_ARM_FEATURE_SAT 1\n+\n+#include \"ftest-support.h\""}, {"sha": "b1c397c221bcf693ef08eec3a982483a8abd3a6e", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=eb6006ad65c62a4bcf7574f59dd7535a95b3f5cf", "patch": "@@ -2630,6 +2630,7 @@ foreach { armfunc armflag armdef } { v4 \"-march=armv4 -marm\" __ARM_ARCH_4__\n \t\t\t\t     v6z \"-march=armv6z\" __ARM_ARCH_6Z__\n \t\t\t\t     v6m \"-march=armv6-m -mthumb\" __ARM_ARCH_6M__\n \t\t\t\t     v7a \"-march=armv7-a\" __ARM_ARCH_7A__\n+\t\t\t\t     v7ve \"-march=armv7ve\" __ARM_ARCH_7A__\n \t\t\t\t     v7r \"-march=armv7-r\" __ARM_ARCH_7R__\n \t\t\t\t     v7m \"-march=armv7-m -mthumb\" __ARM_ARCH_7M__\n \t\t\t\t     v7em \"-march=armv7e-m -mthumb\" __ARM_ARCH_7EM__"}]}