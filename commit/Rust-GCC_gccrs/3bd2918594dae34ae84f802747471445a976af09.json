{"sha": "3bd2918594dae34ae84f802747471445a976af09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JkMjkxODU5NGRhZTM0YWU4NGY4MDI3NDc0NzE0NDVhOTc2YWYwOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:20:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:20:26Z"}, "message": "Remove global call sets: cselib.c\n\ncselib_invalidate_regno is a no-op if REG_VALUES (i) is null,\nso we can check that first.  Then, if we know what mode the register\ncurrently has, we can check whether it's clobbered in that mode.\n\nUsing GET_MODE (values->elt->val_rtx) to get the mode of the last\nset is taken from cselib_reg_set_mode.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* cselib.c (cselib_process_insn): If we know what mode a\n\tregister was set in, check whether it is clobbered in that\n\tmode by a call.  Only fall back to reg_raw_mode if that fails.\n\nFrom-SVN: r276318", "tree": {"sha": "ca5d15ff0518498b4c9e3377092a5b4309696c3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5d15ff0518498b4c9e3377092a5b4309696c3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bd2918594dae34ae84f802747471445a976af09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd2918594dae34ae84f802747471445a976af09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bd2918594dae34ae84f802747471445a976af09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bd2918594dae34ae84f802747471445a976af09/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "311b62ce0310876fbffeeaab0b50707242b3e663", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/311b62ce0310876fbffeeaab0b50707242b3e663", "html_url": "https://github.com/Rust-GCC/gccrs/commit/311b62ce0310876fbffeeaab0b50707242b3e663"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "5440a339ca6b729b57b9f7669fead10ea3c0a0e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd2918594dae34ae84f802747471445a976af09/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd2918594dae34ae84f802747471445a976af09/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3bd2918594dae34ae84f802747471445a976af09", "patch": "@@ -1,3 +1,9 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* cselib.c (cselib_process_insn): If we know what mode a\n+\tregister was set in, check whether it is clobbered in that\n+\tmode by a call.  Only fall back to reg_raw_mode if that fails.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* cse.c: Include regs.h and function-abi.h."}, {"sha": "36f649de79ccd86149b68ca99f1479d223c027aa", "filename": "gcc/cselib.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bd2918594dae34ae84f802747471445a976af09/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bd2918594dae34ae84f802747471445a976af09/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=3bd2918594dae34ae84f802747471445a976af09", "patch": "@@ -2768,12 +2768,24 @@ cselib_process_insn (rtx_insn *insn)\n     {\n       function_abi callee_abi = insn_callee_abi (insn);\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (call_used_or_fixed_reg_p (i)\n-\t    || (REG_VALUES (i) && REG_VALUES (i)->elt\n-\t\t&& (targetm.hard_regno_call_part_clobbered\n-\t\t    (callee_abi.id (), i,\n-\t\t     GET_MODE (REG_VALUES (i)->elt->val_rtx)))))\n-\t  cselib_invalidate_regno (i, reg_raw_mode[i]);\n+\tif (elt_list *values = REG_VALUES (i))\n+\t  {\n+\t    /* If we know what mode the value was set in, check whether\n+\t       it is still available after the call in that mode.  If we\n+\t       don't know the mode, we have to check for the worst-case\n+\t       scenario instead.  */\n+\t    if (values->elt)\n+\t      {\n+\t\tmachine_mode mode = GET_MODE (values->elt->val_rtx);\n+\t\tif (callee_abi.clobbers_reg_p (mode, i))\n+\t\t  cselib_invalidate_regno (i, mode);\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (callee_abi.clobbers_at_least_part_of_reg_p (i))\n+\t\t  cselib_invalidate_regno (i, reg_raw_mode[i]);\n+\t      }\n+\t  }\n \n       /* Since it is not clear how cselib is going to be used, be\n \t conservative here and treat looping pure or const functions"}]}