{"sha": "2e5f8203d26bec30f790dbde5058e224521b27cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU1ZjgyMDNkMjZiZWMzMGY3OTBkYmRlNTA1OGUyMjQ1MjFiMjdjYg==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2016-11-24T18:16:55Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2016-11-24T18:16:55Z"}, "message": "[Patch libgcc AArch64 12/17] Enable hfmode soft-float conversions and truncations\n\ngcc/\n\n\t* config/aarch64/aarch64-c.c (aarch64_scalar_mode_supported_p): New.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n\nlibgcc/\n\n\t* config/aarch64/sfp-machine.h (_FP_NANFRAC_H): Define.\n\t(_FP_NANSIGN_H): Likewise.\n\t* config/aarch64/t-softfp (softfp_extensions): Add hftf.\n\t(softfp_truncations): Add tfhf.\n\t(softfp_extras): Add required conversion functions.\n\nFrom-SVN: r242844", "tree": {"sha": "a66c03cfab0387c16ab8e09044dc5dcdda4715cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a66c03cfab0387c16ab8e09044dc5dcdda4715cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e5f8203d26bec30f790dbde5058e224521b27cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5f8203d26bec30f790dbde5058e224521b27cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e5f8203d26bec30f790dbde5058e224521b27cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e5f8203d26bec30f790dbde5058e224521b27cb/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bf1e3646d150a0fcb542c918ad381f9aee583633", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf1e3646d150a0fcb542c918ad381f9aee583633", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf1e3646d150a0fcb542c918ad381f9aee583633"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "b088f7cd930eb0b425d0dc6696a18ec7a8a1e0a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5f8203d26bec30f790dbde5058e224521b27cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5f8203d26bec30f790dbde5058e224521b27cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2e5f8203d26bec30f790dbde5058e224521b27cb", "patch": "@@ -1,3 +1,8 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/aarch64-c.c (aarch64_scalar_mode_supported_p): New.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n+\n 2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64.md (<optab>sihf2): Convert to expand."}, {"sha": "f0e10d7cbe3c79caf1ce5a26f77ab66e5fb2f0be", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5f8203d26bec30f790dbde5058e224521b27cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5f8203d26bec30f790dbde5058e224521b27cb/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=2e5f8203d26bec30f790dbde5058e224521b27cb", "patch": "@@ -14265,6 +14265,17 @@ aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n     }\n }\n \n+/* Implement TARGET_SCALAR_MODE_SUPPORTED_P - return TRUE\n+   if MODE is HFmode, and punt to the generic implementation otherwise.  */\n+\n+static bool\n+aarch64_scalar_mode_supported_p (machine_mode mode)\n+{\n+  return (mode == HFmode\n+\t  ? true\n+\t  : default_scalar_mode_supported_p (mode));\n+}\n+\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST aarch64_address_cost\n \n@@ -14475,6 +14486,9 @@ aarch64_optab_supported_p (int op, machine_mode mode1, machine_mode,\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS aarch64_rtx_costs_wrapper\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P aarch64_scalar_mode_supported_p\n+\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE aarch64_sched_issue_rate\n "}, {"sha": "592fd3a245c0d2d28eb3dd3194d20eab5f7e2bc6", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=2e5f8203d26bec30f790dbde5058e224521b27cb", "patch": "@@ -1,3 +1,11 @@\n+2016-11-24  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/sfp-machine.h (_FP_NANFRAC_H): Define.\n+\t(_FP_NANSIGN_H): Likewise.\n+\t* config/aarch64/t-softfp (softfp_extensions): Add hftf.\n+\t(softfp_truncations): Add tfhf.\n+\t(softfp_extras): Add required conversion functions.\n+\n 2016-11-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \t    Matthew Wahab  <matthew.wahab@arm.com>\n "}, {"sha": "da154ddbe6acf473929beec3ff7b881362cf3867", "filename": "libgcc/config/aarch64/sfp-machine.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Fsfp-machine.h?ref=2e5f8203d26bec30f790dbde5058e224521b27cb", "patch": "@@ -42,9 +42,11 @@ typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n \n #define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n \n+#define _FP_NANFRAC_H\t\t((_FP_QNANBIT_H << 1) - 1)\n #define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n #define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1)\n #define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1\n+#define _FP_NANSIGN_H\t\t0\n #define _FP_NANSIGN_S\t\t0\n #define _FP_NANSIGN_D\t\t0\n #define _FP_NANSIGN_Q\t\t0"}, {"sha": "c4ce0dc0097579cb699e99decfd82eee7b96e6d7", "filename": "libgcc/config/aarch64/t-softfp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e5f8203d26bec30f790dbde5058e224521b27cb/libgcc%2Fconfig%2Faarch64%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Faarch64%2Ft-softfp?ref=2e5f8203d26bec30f790dbde5058e224521b27cb", "patch": "@@ -1,8 +1,9 @@\n softfp_float_modes := tf\n softfp_int_modes := si di ti\n-softfp_extensions := sftf dftf\n-softfp_truncations := tfsf tfdf\n+softfp_extensions := sftf dftf hftf\n+softfp_truncations := tfsf tfdf tfhf\n softfp_exclude_libgcc2 := n\n+softfp_extras := fixhfti fixunshfti floattihf floatuntihf\n \n TARGET_LIBGCC2_CFLAGS += -Wno-missing-prototypes\n "}]}