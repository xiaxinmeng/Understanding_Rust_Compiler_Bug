{"sha": "6f79f4d1d6c6e3dcb0231404969882726d31a50c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3OWY0ZDFkNmM2ZTNkY2IwMjMxNDA0OTY5ODgyNzI2ZDMxYTUwYw==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-08-27T12:07:43Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-08-27T12:07:43Z"}, "message": "re PR fortran/41093 (memory leaks with gfc_namespace)\n\n2012-08-27  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/41093\n        * gfortran.h (gfc_common_head): Add \"int refs\".\n        * match.c (gfc_match_common): Increment refs.\n        * resolve.c (resolve_symbol): Only increment formal_ns->refs\n        if formal_ns is not sym->ns.\n        * symbol.c (gfc_free_symbol): Only free formal_ns if\n        if formal_ns is not sym->ns. Free common_block if refs is one.\n        (gfc_release_symbol): Release formal_ns only if the\n        symbol is not ENTRY of a module.\n        * decl.c (get_proc_name): Don't increment gfc_current_ns->refs.\n        * parse.c (parse_interface): Incement proc_unit->refs++ for\n        proc-pointer result variables.\n        * module.c (mio_symbol): Don't increase sym->refs for its\n        use in sym->formal_ns->proc_name.\n\nFrom-SVN: r190710", "tree": {"sha": "35954802481b336b7827eb81f61dda5ed4be17f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35954802481b336b7827eb81f61dda5ed4be17f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f79f4d1d6c6e3dcb0231404969882726d31a50c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f79f4d1d6c6e3dcb0231404969882726d31a50c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f79f4d1d6c6e3dcb0231404969882726d31a50c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f79f4d1d6c6e3dcb0231404969882726d31a50c/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d6368551e85cac41df6df4234d865918b693319", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d6368551e85cac41df6df4234d865918b693319", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d6368551e85cac41df6df4234d865918b693319"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "b6600735ef45facbe147e31659bced8a89b2c41f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -1,3 +1,20 @@\n+2012-08-27  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/41093\n+\t* gfortran.h (gfc_common_head): Add \"int refs\".\n+\t* match.c (gfc_match_common): Increment refs.\n+\t* resolve.c (resolve_symbol): Only increment formal_ns->refs\n+\tif formal_ns is not sym->ns.\n+\t* symbol.c (gfc_free_symbol): Only free formal_ns if\n+\tif formal_ns is not sym->ns. Free common_block if refs is one.\n+\t(gfc_release_symbol): Release formal_ns only if the\n+\tsymbol is not ENTRY of a module.\n+\t* decl.c (get_proc_name): Don't increment gfc_current_ns->refs.\n+\t* parse.c (parse_interface): Incement proc_unit->refs++ for\n+\tproc-pointer result variables.\n+\t* module.c (mio_symbol): Don't increase sym->refs for its\n+\tuse in sym->formal_ns->proc_name.\n+\n 2012-08-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/54370"}, {"sha": "efd21dc7ec713b06c93c2746d1f0cd243e1a954f", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -891,7 +891,6 @@ get_proc_name (const char *name, gfc_symbol **result, bool module_fcn_entry)\n     return rc;\n \n   sym = *result;\n-  gfc_current_ns->refs++;\n \n   if (sym && !sym->gfc_new && gfc_current_state () != COMP_INTERFACE)\n     {"}, {"sha": "d67d57b7b137325cc67f0f30a27249f00c94f34a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -1266,6 +1266,7 @@ typedef struct gfc_common_head\n   struct gfc_symbol *head;\n   const char* binding_label;\n   int is_bind_c;\n+  int refs;\n }\n gfc_common_head;\n "}, {"sha": "4c713a5d6cb83edd988855abc7000e7ad43d19a4", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -4398,6 +4398,7 @@ gfc_match_common (void)\n \n           /* Store a ref to the common block for error checking.  */\n           sym->common_block = t;\n+          sym->common_block->refs++;\n           \n           /* See if we know the current common block is bind(c), and if\n              so, then see if we can check if the symbol is (which it'll"}, {"sha": "bfd8b01ea09af0e33c307bcf232c8328af36bd0f", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -3807,10 +3807,7 @@ mio_symbol (gfc_symbol *sym)\n     {\n       mio_namespace_ref (&sym->formal_ns);\n       if (sym->formal_ns)\n-\t{\n-\t  sym->formal_ns->proc_name = sym;\n-\t  sym->refs++;\n-\t}\n+\tsym->formal_ns->proc_name = sym;\n     }\n \n   /* Save/restore common block links.  */"}, {"sha": "5c5d38176c370fdb5a17e2738c1923ff18087657", "filename": "gcc/fortran/parse.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fparse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fparse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fparse.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -2363,7 +2363,6 @@ parse_interface (void)\n   gfc_interface_info save;\n   gfc_state_data s1, s2;\n   gfc_statement st;\n-  locus proc_locus;\n \n   accept_statement (ST_INTERFACE);\n \n@@ -2452,7 +2451,9 @@ parse_interface (void)\n   accept_statement (st);\n   prog_unit = gfc_new_block;\n   prog_unit->formal_ns = gfc_current_ns;\n-  proc_locus = gfc_current_locus;\n+  if (prog_unit == prog_unit->formal_ns->proc_name\n+      && prog_unit->ns != prog_unit->formal_ns)\n+    prog_unit->refs++;\n \n decl:\n   /* Read data declaration statements.  */\n@@ -2493,7 +2494,8 @@ parse_interface (void)\n \t&& strcmp (current_interface.ns->proc_name->name,\n \t\t   prog_unit->name) == 0)\n     gfc_error (\"INTERFACE procedure '%s' at %L has the same name as the \"\n-\t       \"enclosing procedure\", prog_unit->name, &proc_locus);\n+\t       \"enclosing procedure\", prog_unit->name,\n+\t       &current_interface.ns->proc_name->declared_at);\n \n   goto loop;\n "}, {"sha": "63b730c6e3b2456774c058f651031a061baca2c6", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -13086,7 +13086,8 @@ resolve_symbol (gfc_symbol *sym)\n       if (formal)\n \t{\n \t  sym->formal_ns = formal->sym->ns;\n-\t  sym->formal_ns->refs++;\n+          if (sym->ns != formal->sym->ns)\n+\t    sym->formal_ns->refs++;\n \t}\n     }\n "}, {"sha": "4d030b76fc1ed85addc93a35aa12dccfbfd4390a", "filename": "gcc/fortran/symbol.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fsymbol.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f79f4d1d6c6e3dcb0231404969882726d31a50c/gcc%2Ffortran%2Fsymbol.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsymbol.c?ref=6f79f4d1d6c6e3dcb0231404969882726d31a50c", "patch": "@@ -2511,7 +2511,8 @@ gfc_free_symbol (gfc_symbol *sym)\n \n   gfc_free_namelist (sym->namelist);\n \n-  gfc_free_namespace (sym->formal_ns);\n+  if (sym->ns != sym->formal_ns)\n+    gfc_free_namespace (sym->formal_ns);\n \n   if (!sym->attr.generic_copy)\n     gfc_free_interface (sym->generic);\n@@ -2520,6 +2521,13 @@ gfc_free_symbol (gfc_symbol *sym)\n \n   gfc_free_namespace (sym->f2k_derived);\n \n+  if (sym->common_block && sym->common_block->name[0] != '\\0')\n+    { \n+      sym->common_block->refs--; \n+      if (sym->common_block->refs == 0)\n+\tfree (sym->common_block);\n+    }\n+\n   free (sym);\n }\n \n@@ -2532,7 +2540,8 @@ gfc_release_symbol (gfc_symbol *sym)\n   if (sym == NULL)\n     return;\n \n-  if (sym->formal_ns != NULL && sym->refs == 2)\n+  if (sym->formal_ns != NULL && sym->refs == 2 && sym->formal_ns != sym->ns\n+      && (!sym->attr.entry || !sym->module))\n     {\n       /* As formal_ns contains a reference to sym, delete formal_ns just\n \t before the deletion of sym.  */"}]}