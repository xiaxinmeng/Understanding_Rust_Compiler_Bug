{"sha": "3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ViNWU1NGE0YTUwZjNlN2MzOWExZjU0MzVmOWQ0ZWVkYjI2YmIzNw==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-05T07:03:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-05T07:03:49Z"}, "message": "[Ada] Stabilization of Elaboration order v4.0\n\nThis patch introduces several changes to the new elaboration order\nmechanism:\n\n   * Instantiations processed in the context of invocation graph\n     encoding now yield a relation which is later transformed into an\n     invocation edge. This ensures that the unit where the instantiation\n     resides properly depends on the unit where the body of the generic\n     is.\n\n   * The diagnostics of cycles that involve invocation edges now use a\n     set to avoid infinite recursion when visiting paths that represent\n     recursive code.\n\n   * Various diagnostics that suggest the use of switches have been\n     updated to indicate which tool the switches apply to.\n\n   * Bindo can now output the dependencies of various units that specify\n     why a predecessor unit must be elaborated prior to a successor\n     unit. This functionality implements binder switch -e (output\n     complete list of elaboration order dependencies).\n\n   * The output of the elaboration order is now identical to that\n     emitted by Binde.\n\n   * The nature of the invocation graph encoding is now recorded in the\n     ALI record rather than the Unit record of a unit. This ensures that\n     both the spec and body share the same encoding kind.\n\n   * A section on debugging elaboration order issues is now available in\n     Bindo.\n\n2019-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* ali.adb (For_Each_Invocation_Construct,\n\tFor_Each_Invocation_Relation): New version.\n\t(Scan_ALI): Initialize field Invocation_Graph_Encoding.\n\t(Set_Invocation_Graph_Encoding): Update the setting of the\n\tinvocation graph encoding.\n\t* ali.ads: Move field Invocation_Graph_Encoding from Unit_Record\n\tto ALI_Record because the encoding applies to the whole ALI,\n\trather than one of the units (spec or body) for which the ALI\n\tfile was created.\n\t(For_Each_Invocation_Construct, For_Each_Invocation_Relation):\n\tNew version.\n\t* bindo.adb: Update the section on switches.  Complete the\n\tsection of debugging elaboration order issues.\n\t(Find_Elaboration_Order): Prepare the routine for the switch\n\tfrom the old to the new elaboration order mechanism.\n\t* bindo-diagnostics.adb (Find_And_Output_Invocation_Paths):\n\tManage a visited set used by Visit_Vertex.\n\t(Output_All_Cycles_Suggestions,\n\tOutput_Dynamic_Model_Suggestions): Clarify the nature of the\n\tsuggested switch.\n\t(Output_Elaborate_Body_Transition): Update the diagnostic to\n\temit a better message.\n\t(Output_Forced_Suggestions, Output_Full_Encoding_Suggestions):\n\tClarify the nature of the suggested switch.\n\t(Visit_Vertex): Update the parameter profile to add a set of\n\tinvokers visited during the transition. This set prevents\n\tinfinite exploration of the graph in case the invocations are\n\trecursive.\n\t* bindo-elaborators.adb: Add a use clause for\n\tBindo.Writers.Dependency_Writers.\n\t(Elaborate_Units_Common): Output the library graph after it has\n\tbeen augmented with invocation edges. Output just the components\n\tinstead of outputting the whole library graph again.\n\t(Elaborate_Units_Dynamic, Elaborate_Units_Static): Output the\n\tdependencies as expressed in the library graph.\n\t* bindo-units.adb (Invocation_Graph_Encoding): Update the\n\textraction of the invocation graph encoding.\n\t* bindo-writers.adb: Add with and use clauses for Binderr and\n\tButil.\n\t(palgc, plgc): New debug routine.\n\t(Write_Components): Moved to the spec. Add a header for the\n\toutput.\n\t(Write_Dependencies, Write_Dependencies_Of_Vertex,\n\tWrite_Dependency_Edge): New routine.\n\t(Write_Elaboration_Order): Update the logic to follow the format\n\tof Binde's order output.\n\t(Write_Library_Graph): Do not output the components every time\n\tthe graph is written.\n\t(Write_Unit): Output the invocation graph encoding of the unit.\n\tOutput the invocation constructs and relations for the unit\n\tonly.\n\t* bindo-writers.ads (Write_Components): Moved from the body.\n\t(Write_Dependencies): New routine.\n\t* bindusg.adb: Prepare the routine for the switch from the old\n\tto the new elaboration order mechanism.\n\t* debug.adb: Binder switch -d_O is now not associated with any\n\tfunctionality.\n\t* einfo.adb (Is_Elaboration_Target): The attribute applies to\n\tpackages, as specified by the comment on the attribute usage.\n\t* opt.ads: Add a global flag which controls the choice between\n\tthe new and the legacy elaboration order mechanism.\n\t* sem_elab.adb: Add Package_Target to type Target_Kind.\n\t(Build_Elaborate_Body_Procedure, Build_Elaborate_Procedure,\n\tBuild_Elaborate_Spec_Procedure, Check_Elaboration_Scenarios,\n\tCheck_SPARK_Model_In_Effect): Use Main_Unit_Entity to obtain the\n\tentity of the main unit.\n\t(Create_Package_Rep): New routine.\n\t(Create_Target_Rep): Add processing for packages.\n\t(Declaration_Placement_Of_Node, Has_Prior_Elaboration): Use\n\tMain_Unit_Entity to obtain the entity of the main\n\t unit.\n\t(Invocation_Graph_Recording_OK): Prepare the routine for the\n\tswitch from the old to the new elaboration order mechanism.\n\t(Main_Unit_Entity): New routine.\n\t(Meet_Elaboration_Requirement,\n\tProcess_Conditional_ABE_Variable_Reference): Use\n\tMain_Unit_Entity to obtain the entity of the main unit.\n\t(Process_Invocation_Instantiation): New routine.\n\t(Process_Invocation_Scenario): Add processing for\n\tinstantiations.\n\t* switch-b.adb (Scan_Binder_Switches): Prepare the routine for\n\tthe switch from the old to the new elaboration order mechanism.\n\nFrom-SVN: r273128", "tree": {"sha": "0059e2f40ae4c4b8daa60a2fe8f51826dcf58cdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0059e2f40ae4c4b8daa60a2fe8f51826dcf58cdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2ff7c604377c1220702aeb4c4b63ed76e56aa577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ff7c604377c1220702aeb4c4b63ed76e56aa577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ff7c604377c1220702aeb4c4b63ed76e56aa577"}], "stats": {"total": 854, "additions": 765, "deletions": 89}, "files": [{"sha": "6f04f775ac65066c2f7d9f56ac88f886cc8aa622", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -1,3 +1,88 @@\n+2019-07-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* ali.adb (For_Each_Invocation_Construct,\n+\tFor_Each_Invocation_Relation): New version.\n+\t(Scan_ALI): Initialize field Invocation_Graph_Encoding.\n+\t(Set_Invocation_Graph_Encoding): Update the setting of the\n+\tinvocation graph encoding.\n+\t* ali.ads: Move field Invocation_Graph_Encoding from Unit_Record\n+\tto ALI_Record because the encoding applies to the whole ALI,\n+\trather than one of the units (spec or body) for which the ALI\n+\tfile was created.\n+\t(For_Each_Invocation_Construct, For_Each_Invocation_Relation):\n+\tNew version.\n+\t* bindo.adb: Update the section on switches.  Complete the\n+\tsection of debugging elaboration order issues.\n+\t(Find_Elaboration_Order): Prepare the routine for the switch\n+\tfrom the old to the new elaboration order mechanism.\n+\t* bindo-diagnostics.adb (Find_And_Output_Invocation_Paths):\n+\tManage a visited set used by Visit_Vertex.\n+\t(Output_All_Cycles_Suggestions,\n+\tOutput_Dynamic_Model_Suggestions): Clarify the nature of the\n+\tsuggested switch.\n+\t(Output_Elaborate_Body_Transition): Update the diagnostic to\n+\temit a better message.\n+\t(Output_Forced_Suggestions, Output_Full_Encoding_Suggestions):\n+\tClarify the nature of the suggested switch.\n+\t(Visit_Vertex): Update the parameter profile to add a set of\n+\tinvokers visited during the transition. This set prevents\n+\tinfinite exploration of the graph in case the invocations are\n+\trecursive.\n+\t* bindo-elaborators.adb: Add a use clause for\n+\tBindo.Writers.Dependency_Writers.\n+\t(Elaborate_Units_Common): Output the library graph after it has\n+\tbeen augmented with invocation edges. Output just the components\n+\tinstead of outputting the whole library graph again.\n+\t(Elaborate_Units_Dynamic, Elaborate_Units_Static): Output the\n+\tdependencies as expressed in the library graph.\n+\t* bindo-units.adb (Invocation_Graph_Encoding): Update the\n+\textraction of the invocation graph encoding.\n+\t* bindo-writers.adb: Add with and use clauses for Binderr and\n+\tButil.\n+\t(palgc, plgc): New debug routine.\n+\t(Write_Components): Moved to the spec. Add a header for the\n+\toutput.\n+\t(Write_Dependencies, Write_Dependencies_Of_Vertex,\n+\tWrite_Dependency_Edge): New routine.\n+\t(Write_Elaboration_Order): Update the logic to follow the format\n+\tof Binde's order output.\n+\t(Write_Library_Graph): Do not output the components every time\n+\tthe graph is written.\n+\t(Write_Unit): Output the invocation graph encoding of the unit.\n+\tOutput the invocation constructs and relations for the unit\n+\tonly.\n+\t* bindo-writers.ads (Write_Components): Moved from the body.\n+\t(Write_Dependencies): New routine.\n+\t* bindusg.adb: Prepare the routine for the switch from the old\n+\tto the new elaboration order mechanism.\n+\t* debug.adb: Binder switch -d_O is now not associated with any\n+\tfunctionality.\n+\t* einfo.adb (Is_Elaboration_Target): The attribute applies to\n+\tpackages, as specified by the comment on the attribute usage.\n+\t* opt.ads: Add a global flag which controls the choice between\n+\tthe new and the legacy elaboration order mechanism.\n+\t* sem_elab.adb: Add Package_Target to type Target_Kind.\n+\t(Build_Elaborate_Body_Procedure, Build_Elaborate_Procedure,\n+\tBuild_Elaborate_Spec_Procedure, Check_Elaboration_Scenarios,\n+\tCheck_SPARK_Model_In_Effect): Use Main_Unit_Entity to obtain the\n+\tentity of the main unit.\n+\t(Create_Package_Rep): New routine.\n+\t(Create_Target_Rep): Add processing for packages.\n+\t(Declaration_Placement_Of_Node, Has_Prior_Elaboration): Use\n+\tMain_Unit_Entity to obtain the entity of the main\n+\t unit.\n+\t(Invocation_Graph_Recording_OK): Prepare the routine for the\n+\tswitch from the old to the new elaboration order mechanism.\n+\t(Main_Unit_Entity): New routine.\n+\t(Meet_Elaboration_Requirement,\n+\tProcess_Conditional_ABE_Variable_Reference): Use\n+\tMain_Unit_Entity to obtain the entity of the main unit.\n+\t(Process_Invocation_Instantiation): New routine.\n+\t(Process_Invocation_Scenario): Add processing for\n+\tinstantiations.\n+\t* switch-b.adb (Scan_Binder_Switches): Prepare the routine for\n+\tthe switch from the old to the new elaboration order mechanism.\n+\n 2019-07-05  Joffrey Huguet  <huguet@adacore.com>\n \n \t* libgnat/a-textio.adb: Add abstract state refinment."}, {"sha": "feea73f010f9bf2d580112e8073cd288a0b0f393", "filename": "gcc/ada/ali.adb", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fali.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fali.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -510,6 +510,27 @@ package body ALI is\n       end loop;\n    end For_Each_Invocation_Construct;\n \n+   -----------------------------------\n+   -- For_Each_Invocation_Construct --\n+   -----------------------------------\n+\n+   procedure For_Each_Invocation_Construct\n+     (U_Id      : Unit_Id;\n+      Processor : Invocation_Construct_Processor_Ptr)\n+   is\n+      pragma Assert (Present (U_Id));\n+      pragma Assert (Processor /= null);\n+\n+      U_Rec : Unit_Record renames Units.Table (U_Id);\n+\n+   begin\n+      for IC_Id in U_Rec.First_Invocation_Construct ..\n+                   U_Rec.Last_Invocation_Construct\n+      loop\n+         Processor.all (IC_Id);\n+      end loop;\n+   end For_Each_Invocation_Construct;\n+\n    ----------------------------------\n    -- For_Each_Invocation_Relation --\n    ----------------------------------\n@@ -527,6 +548,27 @@ package body ALI is\n       end loop;\n    end For_Each_Invocation_Relation;\n \n+   ----------------------------------\n+   -- For_Each_Invocation_Relation --\n+   ----------------------------------\n+\n+   procedure For_Each_Invocation_Relation\n+     (U_Id      : Unit_Id;\n+      Processor : Invocation_Relation_Processor_Ptr)\n+   is\n+      pragma Assert (Present (U_Id));\n+      pragma Assert (Processor /= null);\n+\n+      U_Rec : Unit_Record renames Units.Table (U_Id);\n+\n+   begin\n+      for IR_Id in U_Rec.First_Invocation_Relation ..\n+                   U_Rec.Last_Invocation_Relation\n+      loop\n+         Processor.all (IR_Id);\n+      end loop;\n+   end For_Each_Invocation_Relation;\n+\n    ----------\n    -- Hash --\n    ----------\n@@ -1831,6 +1873,7 @@ package body ALI is\n         First_Specific_Dispatching   => Specific_Dispatching.Last + 1,\n         First_Unit                   => No_Unit_Id,\n         GNATprove_Mode               => False,\n+        Invocation_Graph_Encoding    => No_Encoding,\n         Last_Interrupt_State         => Interrupt_States.Last,\n         Last_Sdep                    => No_Sdep_Id,\n         Last_Specific_Dispatching    => Specific_Dispatching.Last,\n@@ -3807,9 +3850,10 @@ package body ALI is\n       if Update_Units then\n          declare\n             Curr_Unit : Unit_Record renames Units.Table (Units.Last);\n+            Curr_ALI  : ALIs_Record renames ALIs.Table  (Curr_Unit.My_ALI);\n \n          begin\n-            Curr_Unit.Invocation_Graph_Encoding := Kind;\n+            Curr_ALI.Invocation_Graph_Encoding := Kind;\n          end;\n       end if;\n    end Set_Invocation_Graph_Encoding;"}, {"sha": "3fa527e3d841eaefda31cad6f010b16fd6e233bf", "filename": "gcc/ada/ali.ads", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fali.ads?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -273,6 +273,11 @@ package ALI is\n       --  Last_Specific_Dispatching = First_Specific_Dispatching - 1. That\n       --  is why the 'Base reference is there, it can be one less than the\n       --  lower bound of the subtype. Not set if 'S' appears in Ignore_Lines.\n+\n+      Invocation_Graph_Encoding : Invocation_Graph_Encoding_Kind;\n+      --  The encoding format used to capture information about the invocation\n+      --  constructs and relations within the corresponding ALI file of this\n+      --  unit.\n    end record;\n \n    No_Main_Priority : constant Int := -1;\n@@ -382,11 +387,6 @@ package ALI is\n       Last_Arg : Arg_Id;\n       --  Id of last args table entry for this file\n \n-      Invocation_Graph_Encoding : Invocation_Graph_Encoding_Kind;\n-      --  The encoding format used to capture information about the invocation\n-      --  constructs and relations within the corresponding ALI file of this\n-      --  unit.\n-\n       First_Invocation_Construct : Invocation_Construct_Id;\n       --  Id of the first invocation construct for this unit\n \n@@ -1271,13 +1271,25 @@ package ALI is\n    pragma Inline (For_Each_Invocation_Construct);\n    --  Invoke Processor on each invocation construct\n \n+   procedure For_Each_Invocation_Construct\n+     (U_Id      : Unit_Id;\n+      Processor : Invocation_Construct_Processor_Ptr);\n+   pragma Inline (For_Each_Invocation_Construct);\n+   --  Invoke Processor on each invocation construct of unit U_Id\n+\n    type Invocation_Relation_Processor_Ptr is\n      access procedure (IR_Id : Invocation_Relation_Id);\n \n    procedure For_Each_Invocation_Relation\n      (Processor : Invocation_Relation_Processor_Ptr);\n    pragma Inline (For_Each_Invocation_Relation);\n-   --  Invoker Processor on each invocation relation\n+   --  Invoke Processor on each invocation relation\n+\n+   procedure For_Each_Invocation_Relation\n+     (U_Id      : Unit_Id;\n+      Processor : Invocation_Relation_Processor_Ptr);\n+   pragma Inline (For_Each_Invocation_Relation);\n+   --  Invoke Processor on each invocation relation of unit U_Id\n \n    function Invocation_Construct_Kind_To_Code\n      (Kind : Invocation_Construct_Kind) return Character;"}, {"sha": "0c9da46506301b9e2cba9614418b7fbf4b018678", "filename": "gcc/ada/bindo-diagnostics.adb", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-diagnostics.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-diagnostics.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-diagnostics.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -247,15 +247,17 @@ package body Bindo.Diagnostics is\n       Last_Vertex       : Library_Graph_Vertex_Id;\n       Elaborated_Vertex : Library_Graph_Vertex_Id;\n       End_Vertex        : Library_Graph_Vertex_Id;\n+      Visited_Invokers  : IGV_Sets.Membership_Set;\n       Path              : IGE_Lists.Doubly_Linked_List;\n       Path_Id           : in out Nat);\n    pragma Inline (Visit_Vertex);\n    --  Visit invocation graph vertex Invoker that resides in library graph\n    --  vertex Invoker_Vertex as part of a DFS traversal. Last_Vertex denotes\n    --  the previous vertex in the traversal. Elaborated_Vertex is the vertex\n    --  whose elaboration started the traversal. End_Vertex is the vertex that\n-   --  terminates the traversal. All edges along the path are recorded in Path.\n-   --  Path_Id is the id of the path.\n+   --  terminates the traversal. Visited_Invoker is the set of all invokers\n+   --  visited so far. All edges along the path are recorded in Path. Path_Id\n+   --  is the id of the path.\n \n    -------------------------\n    -- Diagnose_All_Cycles --\n@@ -411,6 +413,7 @@ package body Bindo.Diagnostics is\n    is\n       Path    : IGE_Lists.Doubly_Linked_List;\n       Path_Id : Nat;\n+      Visited : IGV_Sets.Membership_Set;\n \n    begin\n       pragma Assert (Present (Inv_Graph));\n@@ -429,6 +432,7 @@ package body Bindo.Diagnostics is\n \n       Path    := IGE_Lists.Create;\n       Path_Id := 1;\n+      Visited := IGV_Sets.Create (Number_Of_Vertices (Inv_Graph));\n \n       --  Start a DFS traversal over the invocation graph, in an attempt to\n       --  reach Destination from Source. The actual start of the path is the\n@@ -447,10 +451,12 @@ package body Bindo.Diagnostics is\n          Last_Vertex       => Source,\n          Elaborated_Vertex => Source,\n          End_Vertex        => Destination,\n+         Visited_Invokers  => Visited,\n          Path              => Path,\n          Path_Id           => Path_Id);\n \n       IGE_Lists.Destroy (Path);\n+      IGV_Sets.Destroy  (Visited);\n    end Find_And_Output_Invocation_Paths;\n \n    ---------------------------\n@@ -511,7 +517,7 @@ package body Bindo.Diagnostics is\n \n       if Number_Of_Cycles (G) > 1 and then not Debug_Flag_Underscore_CC then\n          Error_Msg_Info\n-           (\"    diagnose all circularities (-d_C)\");\n+           (\"    diagnose all circularities (binder switch -d_C)\");\n       end if;\n    end Output_All_Cycles_Suggestions;\n \n@@ -535,7 +541,7 @@ package body Bindo.Diagnostics is\n         and then not Is_Dynamically_Elaborated (G)\n       then\n          Error_Msg_Info\n-           (\"    use the dynamic elaboration model (-gnatE)\");\n+           (\"    use the dynamic elaboration model (compiler switch -gnatE)\");\n       end if;\n    end Output_Dynamic_Model_Suggestions;\n \n@@ -665,17 +671,21 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Expected_Destination));\n \n       --  The actual and expected destination vertices match, and denote the\n-      --  spec of a unit subject to pragma Elaborate_Body. There is no need to\n-      --  mention the pragma because it does not affect the path of the cycle.\n-      --  Treat the edge as a regular with edge.\n+      --  spec or body of a unit subject to pragma Elaborate_Body. There is no\n+      --  need to mention the pragma because it does not affect the path of the\n+      --  cycle. Treat the edge as a regular with edge.\n       --\n       --               Actual_Destination\n       --    Source --> spec Elaborate_Body -->\n       --               Expected_Destination\n+      --\n+      --               spec Elaborate_Body\n+      --\n+      --               Actual_Destination\n+      --    Source --> body -->\n+      --               Expected_Destination\n \n       if Actual_Destination = Expected_Destination then\n-         pragma Assert (Is_Spec (G, Actual_Destination));\n-\n          Error_Msg_Unit_1 := Name (G, Source);\n          Error_Msg_Unit_2 := Name (G, Actual_Destination);\n          Error_Msg_Info\n@@ -698,14 +708,18 @@ package body Bindo.Diagnostics is\n          pragma Assert\n            (Proper_Body (G, Actual_Destination) = Expected_Destination);\n \n+         Error_Msg_Unit_1 := Name (G, Source);\n+         Error_Msg_Unit_2 := Name (G, Actual_Destination);\n+         Error_Msg_Info\n+           (\"    unit $ has with clause for unit $\");\n+\n          Error_Msg_Unit_1 := Name (G, Actual_Destination);\n          Error_Msg_Info\n            (\"    unit $ is subject to pragma Elaborate_Body\");\n \n-         Error_Msg_Unit_1 := Name (G, Source);\n-         Error_Msg_Unit_2 := Name (G, Expected_Destination);\n+         Error_Msg_Unit_1 := Name (G, Expected_Destination);\n          Error_Msg_Info\n-           (\"    unit $ has with clause for unit $\");\n+           (\"    unit $ is in the closure of pragma Elaborate_Body\");\n       end if;\n    end Output_Elaborate_Body_Transition;\n \n@@ -832,8 +846,10 @@ package body Bindo.Diagnostics is\n       Error_Msg_Unit_1 := Name (G, Succ);\n       Error_Msg_Unit_2 := Name (G, Pred);\n       Error_Msg_Info\n-        (\"    remove the dependency of unit $ on unit $ from argument of -f \"\n-         & \"switch\");\n+        (\"    remove the dependency of unit $ on unit $ from the argument of \"\n+         & \"switch -f\");\n+      Error_Msg_Info\n+        (\"    remove switch -f\");\n    end Output_Forced_Suggestions;\n \n    ------------------------------\n@@ -950,7 +966,8 @@ package body Bindo.Diagnostics is\n \n          if Invocation_Graph_Encoding (G, Succ) /= Full_Path_Encoding then\n             Error_Msg_Info\n-              (\"    use detailed invocation information (-gnatd_F)\");\n+              (\"    use detailed invocation information (compiler switch \"\n+               & \"-gnatd_F)\");\n          end if;\n       end if;\n    end Output_Full_Encoding_Suggestions;\n@@ -1410,6 +1427,7 @@ package body Bindo.Diagnostics is\n       Last_Vertex       : Library_Graph_Vertex_Id;\n       Elaborated_Vertex : Library_Graph_Vertex_Id;\n       End_Vertex        : Library_Graph_Vertex_Id;\n+      Visited_Invokers  : IGV_Sets.Membership_Set;\n       Path              : IGE_Lists.Doubly_Linked_List;\n       Path_Id           : in out Nat)\n    is\n@@ -1425,6 +1443,7 @@ package body Bindo.Diagnostics is\n       pragma Assert (Present (Last_Vertex));\n       pragma Assert (Present (Elaborated_Vertex));\n       pragma Assert (Present (End_Vertex));\n+      pragma Assert (IGV_Sets.Present (Visited_Invokers));\n       pragma Assert (IGE_Lists.Present (Path));\n \n       --  The current invocation vertex resides within the end library vertex.\n@@ -1444,7 +1463,14 @@ package body Bindo.Diagnostics is\n       --  Otherwise extend the search for the end library vertex via all edges\n       --  to targets.\n \n-      else\n+      elsif not IGV_Sets.Contains (Visited_Invokers, Invoker) then\n+\n+         --  Prepare for invoker backtracking\n+\n+         IGV_Sets.Insert (Visited_Invokers, Invoker);\n+\n+         --  Extend the search via all edges to targets\n+\n          Iter := Iterate_Edges_To_Targets (Inv_Graph, Invoker);\n          while Has_Next (Iter) loop\n             Next (Iter, Edge);\n@@ -1466,13 +1492,18 @@ package body Bindo.Diagnostics is\n                Last_Vertex       => Invoker_Vertex,\n                Elaborated_Vertex => Elaborated_Vertex,\n                End_Vertex        => End_Vertex,\n+               Visited_Invokers  => Visited_Invokers,\n                Path              => Path,\n                Path_Id           => Path_Id);\n \n             --  Backtrack the edge\n \n             IGE_Lists.Delete_Last (Path);\n          end loop;\n+\n+         --  Backtrack the invoker\n+\n+         IGV_Sets.Delete (Visited_Invokers, Invoker);\n       end if;\n    end Visit_Vertex;\n "}, {"sha": "762198bd69131e9591258f5fe4b7c79a567b3d3b", "filename": "gcc/ada/bindo-elaborators.adb", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-elaborators.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-elaborators.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-elaborators.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -52,6 +52,7 @@ use  Bindo.Validators.Library_Graph_Validators;\n with Bindo.Writers;\n use  Bindo.Writers;\n use  Bindo.Writers.ALI_Writers;\n+use  Bindo.Writers.Dependency_Writers;\n use  Bindo.Writers.Elaboration_Order_Writers;\n use  Bindo.Writers.Invocation_Graph_Writers;\n use  Bindo.Writers.Library_Graph_Writers;\n@@ -695,12 +696,13 @@ package body Bindo.Elaborators is\n          --  to a unit that result in extra edges within the library graph.\n \n          Augment_Library_Graph (Inv_Graph, Lib_Graph);\n+         Write_Library_Graph (Lib_Graph);\n \n          --  Create and output the component graph by collapsing all library\n          --  items into library units and traversing the library graph.\n \n-         Find_Components     (Lib_Graph);\n-         Write_Library_Graph (Lib_Graph);\n+         Find_Components  (Lib_Graph);\n+         Write_Components (Lib_Graph);\n \n          --  Traverse the library graph to determine the elaboration order of\n          --  units.\n@@ -742,6 +744,11 @@ package body Bindo.Elaborators is\n          if Status = Order_OK then\n             Order := Mix_Order;\n \n+            --  Output the dependencies of vertices when switch -e (output\n+            --  complete list of elaboration order dependencies) is active.\n+\n+            Write_Dependencies (Mix_Lib_Graph);\n+\n          --  The library graph contains an Elaborate_All circularity. There is\n          --  no point in re-elaborating the units without the information from\n          --  the invocation graph because the circularity will persist.\n@@ -774,6 +781,11 @@ package body Bindo.Elaborators is\n             if Status = Order_OK then\n                Order := Dyn_Order;\n \n+               --  Output the dependencies of vertices when switch -e (output\n+               --  complete list of elaboration order dependencies) is active.\n+\n+               Write_Dependencies (Dyn_Lib_Graph);\n+\n             --  Otherwise the library graph contains a circularity without the\n             --  extra information provided by the invocation graph. Diagnose\n             --  the circularity.\n@@ -820,9 +832,16 @@ package body Bindo.Elaborators is\n             Order         => Order,\n             Status        => Status);\n \n-         --  The augmented library graph contains a circularity\n+         --  The elaboration order is satisfactory. Output the dependencies of\n+         --  vertices when switch -e (output complete list of elaboration order\n+         --  dependencies) is active.\n \n-         if Status /= Order_OK then\n+         if Status = Order_OK then\n+            Write_Dependencies (Lib_Graph);\n+\n+         --  Otherwise the augmented library graph contains a circularity\n+\n+         else\n             Diagnose_Circularities\n               (Inv_Graph => Inv_Graph,\n                Lib_Graph => Lib_Graph);"}, {"sha": "05b52507f66ba7155d35394f83639e591b596be7", "filename": "gcc/ada/bindo-units.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-units.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-units.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-units.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -243,9 +243,10 @@ package body Bindo.Units is\n       pragma Assert (Present (U_Id));\n \n       U_Rec : Unit_Record renames ALI.Units.Table (U_Id);\n+      U_ALI : ALIs_Record renames ALI.ALIs.Table  (U_Rec.My_ALI);\n \n    begin\n-      return U_Rec.Invocation_Graph_Encoding;\n+      return U_ALI.Invocation_Graph_Encoding;\n    end Invocation_Graph_Encoding;\n \n    -------------------------------"}, {"sha": "a3b45fce76627140b9e70ed156d743368da0732e", "filename": "gcc/ada/bindo-writers.adb", "status": "modified", "additions": 248, "deletions": 29, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-writers.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-writers.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-writers.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -23,10 +23,12 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Debug;  use Debug;\n-with Fname;  use Fname;\n-with Opt;    use Opt;\n-with Output; use Output;\n+with Binderr; use Binderr;\n+with Butil;   use Butil;\n+with Debug;   use Debug;\n+with Fname;   use Fname;\n+with Opt;     use Opt;\n+with Output;  use Output;\n \n with Bindo.Units;\n use  Bindo.Units;\n@@ -271,10 +273,19 @@ package body Bindo.Writers is\n          Write_Int (Int (U_Rec.Last_Invocation_Relation));\n          Write_Str (\")\");\n          Write_Eol;\n+\n+         Write_Str (\"  Invocation_Graph_Encoding = \");\n+         Write_Str (Invocation_Graph_Encoding (U_Id)'Img);\n+         Write_Eol;\n          Write_Eol;\n \n-         For_Each_Invocation_Construct (Write_Invocation_Construct'Access);\n-         For_Each_Invocation_Relation  (Write_Invocation_Relation'Access);\n+         For_Each_Invocation_Construct\n+           (U_Id      => U_Id,\n+            Processor => Write_Invocation_Construct'Access);\n+\n+         For_Each_Invocation_Relation\n+           (U_Id      => U_Id,\n+            Processor => Write_Invocation_Relation'Access);\n       end Write_Unit;\n \n       -----------------------\n@@ -323,6 +334,18 @@ package body Bindo.Writers is\n       pragma Inline (Write_Cyclic_Edge);\n       --  Write cyclic edge Edge of library graph G to standard\n \n+      -----------\n+      -- Debug --\n+      -----------\n+\n+      procedure palgc (G : Library_Graph) renames Write_Cycles;\n+      pragma Unreferenced (palgc);\n+\n+      procedure plgc\n+        (G     : Library_Graph;\n+         Cycle : Library_Graph_Cycle_Id) renames Write_Cycle;\n+      pragma Unreferenced (plgc);\n+\n       -----------------\n       -- Write_Cycle --\n       -----------------\n@@ -425,6 +448,178 @@ package body Bindo.Writers is\n       end Write_Cyclic_Edge;\n    end Cycle_Writers;\n \n+   ------------------------\n+   -- Dependency_Writers --\n+   ------------------------\n+\n+   package body Dependency_Writers is\n+\n+      -----------------------\n+      -- Local subprograms --\n+      -----------------------\n+\n+      procedure Write_Dependencies_Of_Vertex\n+        (G      : Library_Graph;\n+         Vertex : Library_Graph_Vertex_Id);\n+      pragma Inline (Write_Dependencies_Of_Vertex);\n+      --  Write the dependencies of vertex Vertex of library graph G to\n+      --  standard output.\n+\n+      procedure Write_Dependency_Edge\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id);\n+      pragma Inline (Write_Dependency_Edge);\n+      --  Write the dependency described by edge Edge of library graph G to\n+      --  standard output.\n+\n+      ------------------------\n+      -- Write_Dependencies --\n+      ------------------------\n+\n+      procedure Write_Dependencies (G : Library_Graph) is\n+         Use_Formatting : constant Boolean := not Zero_Formatting;\n+\n+         Iter   : Library_Graphs.All_Vertex_Iterator;\n+         Vertex : Library_Graph_Vertex_Id;\n+\n+      begin\n+         pragma Assert (Present (G));\n+\n+         --  Nothing to do when switch -e (output complete list of elaboration\n+         --  order dependencies) is not in effect.\n+\n+         if not Elab_Dependency_Output then\n+            return;\n+         end if;\n+\n+         if Use_Formatting then\n+            Write_Eol;\n+            Write_Line (\"ELABORATION ORDER DEPENDENCIES\");\n+            Write_Eol;\n+         end if;\n+\n+         Info_Prefix_Suppress := True;\n+\n+         Iter := Iterate_All_Vertices (G);\n+         while Has_Next (Iter) loop\n+            Next (Iter, Vertex);\n+\n+            Write_Dependencies_Of_Vertex (G, Vertex);\n+         end loop;\n+\n+         Info_Prefix_Suppress := False;\n+\n+         if Use_Formatting then\n+            Write_Eol;\n+         end if;\n+      end Write_Dependencies;\n+\n+      ----------------------------------\n+      -- Write_Dependencies_Of_Vertex --\n+      ----------------------------------\n+\n+      procedure Write_Dependencies_Of_Vertex\n+        (G      : Library_Graph;\n+         Vertex : Library_Graph_Vertex_Id)\n+      is\n+         Edge : Library_Graph_Edge_Id;\n+         Iter : Edges_To_Successors_Iterator;\n+\n+      begin\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Vertex));\n+\n+         --  Nothing to do for internal and predefined units\n+\n+         if Is_Internal_Unit (G, Vertex)\n+           or else Is_Predefined_Unit (G, Vertex)\n+         then\n+            return;\n+         end if;\n+\n+         Iter := Iterate_Edges_To_Successors (G, Vertex);\n+         while Has_Next (Iter) loop\n+            Next (Iter, Edge);\n+\n+            Write_Dependency_Edge (G, Edge);\n+         end loop;\n+      end Write_Dependencies_Of_Vertex;\n+\n+      ---------------------------\n+      -- Write_Dependency_Edge --\n+      ---------------------------\n+\n+      procedure Write_Dependency_Edge\n+        (G    : Library_Graph;\n+         Edge : Library_Graph_Edge_Id)\n+      is\n+         pragma Assert (Present (G));\n+         pragma Assert (Present (Edge));\n+\n+         Pred : constant Library_Graph_Vertex_Id := Predecessor (G, Edge);\n+         Succ : constant Library_Graph_Vertex_Id := Successor   (G, Edge);\n+\n+      begin\n+         --  Nothing to do for internal and predefined units\n+\n+         if Is_Internal_Unit (G, Succ)\n+           or else Is_Predefined_Unit (G, Succ)\n+         then\n+            return;\n+         end if;\n+\n+         Error_Msg_Unit_1 := Name (G, Pred);\n+         Error_Msg_Unit_2 := Name (G, Succ);\n+         Error_Msg_Output\n+           (Msg  => \"   unit $ must be elaborated before unit $\",\n+            Info => True);\n+\n+         Error_Msg_Unit_1 := Name (G, Succ);\n+         Error_Msg_Unit_2 := Name (G, Pred);\n+\n+         if Is_Elaborate_All_Edge (G, Edge) then\n+            Error_Msg_Output\n+              (Msg  =>\n+                 \"     reason: unit $ has with clause and pragma \"\n+                 & \"Elaborate_All for unit $\",\n+               Info => True);\n+\n+         elsif Is_Elaborate_Body_Edge (G, Edge) then\n+            Error_Msg_Output\n+              (Msg  => \"     reason: unit $ has with clause for unit $\",\n+               Info => True);\n+\n+         elsif Is_Elaborate_Edge (G, Edge) then\n+            Error_Msg_Output\n+              (Msg  =>\n+                 \"     reason: unit $ has with clause and pragma Elaborate \"\n+                 & \"for unit $\",\n+               Info => True);\n+\n+         elsif Is_Forced_Edge (G, Edge) then\n+            Error_Msg_Output\n+              (Msg  =>\n+                 \"     reason: unit $ has a dependency on unit $ forced by -f \"\n+                 & \"switch\",\n+               Info => True);\n+\n+         elsif Is_Invocation_Edge (G, Edge) then\n+            Error_Msg_Output\n+              (Msg  =>\n+                 \"     reason: unit $ invokes a construct of unit $ at \"\n+                 & \"elaboration time\",\n+               Info => True);\n+\n+         else\n+            pragma Assert (Is_With_Edge (G, Edge));\n+\n+            Error_Msg_Output\n+              (Msg  => \"     reason: unit $ has with clause for unit $\",\n+               Info => True);\n+         end if;\n+      end Write_Dependency_Edge;\n+   end Dependency_Writers;\n+\n    -------------------------------\n    -- Elaboration_Order_Writers --\n    -------------------------------\n@@ -448,39 +643,44 @@ package body Bindo.Writers is\n       -----------------------------\n \n       procedure Write_Elaboration_Order (Order : Unit_Id_Table) is\n+         Use_Formatting : constant Boolean := not Zero_Formatting;\n+\n       begin\n-         --  Nothing to do when switch -d_O (output elaboration order) is not\n-         --  in effect.\n+         --  Nothing to do when switch -l (output chosen elaboration order) is\n+         --  not in effect.\n \n-         if not Debug_Flag_Underscore_OO then\n+         if not Elab_Order_Output then\n             return;\n          end if;\n \n-         Write_Str (\"Elaboration Order\");\n-         Write_Eol;\n-         Write_Eol;\n+         if Use_Formatting then\n+            Write_Eol;\n+            Write_Str (\"ELABORATION ORDER\");\n+            Write_Eol;\n+         end if;\n \n          Write_Units (Order);\n \n-         Write_Eol;\n-         Write_Str (\"Elaboration Order end\");\n-         Write_Eol;\n-\n-         Write_Eol;\n+         if Use_Formatting then\n+            Write_Eol;\n+         end if;\n       end Write_Elaboration_Order;\n \n       ----------------\n       -- Write_Unit --\n       ----------------\n \n       procedure Write_Unit (U_Id : Unit_Id) is\n+         Use_Formatting : constant Boolean := not Zero_Formatting;\n+\n       begin\n          pragma Assert (Present (U_Id));\n \n-         Write_Str  (\"unit (U_Id_\");\n-         Write_Int  (Int (U_Id));\n-         Write_Str  (\") name = \");\n-         Write_Name (Name (U_Id));\n+         if Use_Formatting then\n+            Write_Str (\"   \");\n+         end if;\n+\n+         Write_Unit_Name (Name (U_Id));\n          Write_Eol;\n       end Write_Unit;\n \n@@ -825,10 +1025,6 @@ package body Bindo.Writers is\n       --  Write all vertices of component Comp of library graph G to standard\n       --  output.\n \n-      procedure Write_Components (G : Library_Graph);\n-      pragma Inline (Write_Components);\n-      --  Write all components of library graph G to standard output\n-\n       procedure Write_Edges_To_Successors\n         (G      : Library_Graph;\n          Vertex : Library_Graph_Vertex_Id);\n@@ -942,7 +1138,22 @@ package body Bindo.Writers is\n          Iter : Component_Iterator;\n \n       begin\n+         --  Nothing to do when switch -d_L (output library item graph) is not\n+         --  in effect.\n+\n+         if not Debug_Flag_Underscore_LL then\n+            return;\n+         end if;\n+\n+         Write_Str (\"Library Graph components\");\n+         Write_Eol;\n+         Write_Eol;\n+\n          if Num_Of_Comps > 0 then\n+            Write_Str (\"Components: \");\n+            Write_Num (Int (Num_Of_Comps));\n+            Write_Eol;\n+\n             Iter := Iterate_Components (G);\n             while Has_Next (Iter) loop\n                Next (Iter, Comp);\n@@ -952,6 +1163,11 @@ package body Bindo.Writers is\n          else\n             Write_Eol;\n          end if;\n+\n+         Write_Str (\"Library Graph components end\");\n+         Write_Eol;\n+\n+         Write_Eol;\n       end Write_Components;\n \n       -------------------------------\n@@ -1009,7 +1225,6 @@ package body Bindo.Writers is\n \n          Write_Statistics (G);\n          Write_Library_Graph_Vertices (G);\n-         Write_Components (G);\n \n          Write_Str (\"Library Graph end\");\n          Write_Eol;\n@@ -1231,10 +1446,12 @@ package body Bindo.Writers is\n       ---------------------\n \n       procedure Write_File_Name (Nam : File_Name_Type) is\n+         Use_Formatting : constant Boolean := not Zero_Formatting;\n+\n       begin\n          pragma Assert (Present (Nam));\n \n-         if not Zero_Formatting then\n+         if Use_Formatting then\n             Write_Str (\"   \");\n          end if;\n \n@@ -1296,6 +1513,8 @@ package body Bindo.Writers is\n       ------------------------\n \n       procedure Write_Unit_Closure (Order : Unit_Id_Table) is\n+         Use_Formatting : constant Boolean := not Zero_Formatting;\n+\n          Set : Membership_Set;\n \n       begin\n@@ -1306,7 +1525,7 @@ package body Bindo.Writers is\n             return;\n          end if;\n \n-         if not Zero_Formatting then\n+         if Use_Formatting then\n             Write_Eol;\n             Write_Line (\"REFERENCED SOURCES\");\n          end if;\n@@ -1320,7 +1539,7 @@ package body Bindo.Writers is\n \n          Destroy (Set);\n \n-         if not Zero_Formatting then\n+         if Use_Formatting then\n             Write_Eol;\n          end if;\n       end Write_Unit_Closure;"}, {"sha": "ff6b9b3b6602a0702b7f45a7b05b3dfd338fe411", "filename": "gcc/ada/bindo-writers.ads", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-writers.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo-writers.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo-writers.ads?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -91,6 +91,17 @@ package Bindo.Writers is\n \n    end Cycle_Writers;\n \n+   ------------------------\n+   -- Dependency_Writers --\n+   ------------------------\n+\n+   package Dependency_Writers is\n+      procedure Write_Dependencies (G : Library_Graph);\n+      --  Write all elaboration dependencies of the units represented by\n+      --  vertices of library graph G.\n+\n+   end Dependency_Writers;\n+\n    -------------------------------\n    -- Elaboration_Order_Writers --\n    -------------------------------\n@@ -116,6 +127,9 @@ package Bindo.Writers is\n    ---------------------------\n \n    package Library_Graph_Writers is\n+      procedure Write_Components (G : Library_Graph);\n+      --  Write all components of library graph G to standard output\n+\n       procedure Write_Library_Graph (G : Library_Graph);\n       --  Write library graph G to standard output\n "}, {"sha": "b3106adfb25373656c527e60bfd852bb29ea1870", "filename": "gcc/ada/bindo.adb", "status": "modified", "additions": 144, "deletions": 14, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindo.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -32,10 +32,10 @@ use  Bindo.Elaborators;\n package body Bindo is\n \n    ---------------------------------\n-   -- Elaboration order mechanism --\n+   -- Elaboration-order mechanism --\n    ---------------------------------\n \n-   --  The elaboration order (EO) mechanism implemented in this unit and its\n+   --  The elaboration-order (EO) mechanism implemented in this unit and its\n    --  children has the following objectives:\n    --\n    --    * Find an ordering of all library items (historically referred to as\n@@ -272,7 +272,7 @@ package body Bindo is\n    --          whose elaboration cannot be guaranteed.\n    --\n    --        - A detailed traceback of the cycle, showcasing the transition\n-   --          between units, along with any other elaboration order-related\n+   --          between units, along with any other elaboration-order-related\n    --          information.\n    --\n    --        - A set of suggestions on how to break the cycle considering the\n@@ -308,31 +308,140 @@ package body Bindo is\n    --\n    --        GNATbind utilizes the new bindo elaboration order\n    --\n-   --  -d_O  Output elaboration order\n-   --\n-   --        GNATbind outputs the elaboration order in text format to standard\n-   --        output.\n-   --\n    --  -d_P  Output cycle paths\n    --\n    --        GNATbind output the cycle paths in text format to standard output\n    --\n-   --  -d_T  Output elaboration order trace information\n+   --  -d_T  Output elaboration-order trace information\n    --\n-   --        GNATbind outputs trace information on elaboration order and cycle\n+   --        GNATbind outputs trace information on elaboration-order and cycle-\n    --        detection activities to standard output.\n    --\n    --  -d_V  Validate bindo cycles, graphs, and order\n    --\n    --        GNATbind validates the invocation graph, library graph along with\n    --        its cycles, and elaboration order by detecting inconsistencies and\n    --        producing error reports.\n+   --\n+   --  -e    Output complete list of elaboration-order dependencies\n+   --\n+   --        GNATbind outputs the dependencies between units to standard\n+   --        output.\n+   --\n+   --  -f    Force elaboration order from given file\n+   --\n+   --        GNATbind applies an additional set of edges to the library graph.\n+   --        The edges are read from a file specified by the argument of the\n+   --        flag.\n+   --\n+   --  -H    Legacy elaboration-order model enabled\n+   --\n+   --        GNATbind uses the library-graph and heuristics-based elaboration-\n+   --        order model.\n+   --\n+   --  -l    Output chosen elaboration order\n+   --\n+   --        GNATbind outputs the elaboration order in text format to standard\n+   --        output.\n+   --\n+   --  -p    Pessimistic (worst-case) elaboration order\n+   --\n+   --        This switch is not used in Bindo and its children.\n \n    ----------------------------------------\n-   -- Debugging elaboration order issues --\n+   -- Debugging elaboration-order issues --\n    ----------------------------------------\n \n-   --  ??? more on this later\n+   --  Prior to debugging elaboration-order-related issues, enable all relevant\n+   --  debug flags to collect as much information as possible. Depending on the\n+   --  number of files in the bind, Bindo may emit anywhere between several MBs\n+   --  to several hundred MBs of data to standard output. The switches are:\n+   --\n+   --    -d_A -d_C -d_I -d_L -d_P -d_T -d_V\n+   --\n+   --  Bindo offers several debugging routines that can be invoked from gdb.\n+   --  Those are defined in the body of Bindo.Writers, in sections denoted by\n+   --  header Debug. For quick reference, the routines are:\n+   --\n+   --    palgc  --  print all library-graph cycles\n+   --    pau    --  print all units\n+   --    pc     --  print component\n+   --    pige   --  print invocation-graph edge\n+   --    pigv   --  print invocation-graph vertex\n+   --    plgc   --  print library-graph cycle\n+   --    plge   --  print library-graph edge\n+   --    plgv   --  print library-graph vertex\n+   --    pu     --  print units\n+   --\n+   --  * Invalid elaboration order\n+   --\n+   --    The elaboration order is invalid when:\n+   --\n+   --      - A unit that requires elaboration is missing from the order\n+   --      - A unit that does not require elaboration is present in the order\n+   --\n+   --    Examine the output of the elaboration algorithm available via switch\n+   --    -d_T to determine how the related units were included in or excluded\n+   --    from the order. Determine whether the library graph contains all the\n+   --    relevant edges for those units.\n+   --\n+   --    Units and routines of interest:\n+   --      Bindo.Elaborators\n+   --      Elaborate_Library_Graph\n+   --      Elaborate_Units_Common\n+   --      Elaborate_Units_Dynamic\n+   --      Elaborate_Units_Static\n+   --\n+   --  * Invalid invocation graph\n+   --\n+   --    The invocation graph is invalid when:\n+   --\n+   --      - An edge lacks an attribute\n+   --      - A vertex lacks an attribute\n+   --\n+   --    Find the malformed edge or vertex and determine which attribute is\n+   --    missing. Examine the contents of the invocation-related ALI tables\n+   --    available via switch -d_A. If the invocation construct or relation\n+   --    is missing, verify the ALI file. If the ALI lacks all the relevant\n+   --    information, then Sem_Elab most likely failed to discover a valid\n+   --    elaboration path.\n+   --\n+   --    Units and routines of interest:\n+   --      Bindo.Builders\n+   --      Bindo.Graphs\n+   --      Add_Edge\n+   --      Add_Vertex\n+   --      Build_Invocation_Graph\n+   --\n+   --  * Invalid library graph\n+   --\n+   --    The library graph is invalid when:\n+   --\n+   --      - An edge lacks an attribute\n+   --      - A vertex lacks an attribute\n+   --\n+   --    Find the malformed edge or vertex and determine which attribute is\n+   --    missing.\n+   --\n+   --    Units and routines of interest:\n+   --      Bindo.Builders\n+   --      Bindo.Graphs\n+   --      Add_Edge\n+   --      Add_Vertex\n+   --      Build_Library_Graph\n+   --\n+   --  * Invalid library-graph cycle\n+   --\n+   --    A library-graph cycle is invalid when:\n+   --\n+   --      - It lacks enough edges to form a circuit\n+   --      - At least one edge in the circuit is repeated\n+   --\n+   --    Find the malformed cycle and determine which attribute is missing.\n+   --\n+   --    Units and routines of interest:\n+   --      Bindo.Graphs\n+   --      Find_Cycles\n \n    ----------------------------\n    -- Find_Elaboration_Order --\n@@ -343,15 +452,36 @@ package body Bindo is\n       Main_Lib_File : File_Name_Type)\n    is\n    begin\n-      --  Use the invocation and library graph-based elaboration order when\n+      --  ??? Enable the following code when switching from the old to the new\n+      --  elaboration-order mechanism.\n+\n+      --  Use the library graph and heuristic-based elaboration order when\n+      --  switch -H (legacy elaboration-order mode enabled).\n+\n+      --  if Legacy_Elaboration_Order then\n+      --     Binde.Find_Elab_Order (Order, Main_Lib_File);\n+\n+      --  Otherwise use the invocation and library-graph-based elaboration\n+      --  order.\n+\n+      --  else\n+      --     Invocation_And_Library_Graph_Elaborators.Elaborate_Units\n+      --       (Order         => Order,\n+      --        Main_Lib_File => Main_Lib_File);\n+      --  end if;\n+\n+      --  ??? Remove the following code when switching from the old to the new\n+      --  elaboration-order mechanism.\n+\n+      --  Use the invocation and library-graph-based elaboration order when\n       --  switch -d_N (new bindo order) is in effect.\n \n       if Debug_Flag_Underscore_NN then\n          Invocation_And_Library_Graph_Elaborators.Elaborate_Units\n            (Order         => Order,\n             Main_Lib_File => Main_Lib_File);\n \n-      --  Otherwise use the library graph and heuristic-based elaboration\n+      --  Otherwise use the library-graph and heuristic-based elaboration\n       --  order.\n \n       else"}, {"sha": "a4a97395672b31bf216ebad3b40b60a0b1d0dfad", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -143,6 +143,14 @@ package body Bindusg is\n       Write_Line\n         (\"  -h        Output this usage (help) information\");\n \n+      --  ??? Enable the following code when switching from the old to the new\n+      --  elaboration-order mechanism.\n+\n+      --  Line for -H switch\n+\n+      --  Write_Line\n+      --    (\"  -H        Legacy elaboration-order model enabled\");\n+\n       --  Lines for -I switch\n \n       Write_Line"}, {"sha": "da4bea1fec404e635dde3f0cdeb59db7f9815015", "filename": "gcc/ada/debug.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fdebug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fdebug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdebug.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -389,7 +389,7 @@ package body Debug is\n    --  d_L  Output library graph\n    --  d_M\n    --  d_N  New bindo order\n-   --  d_O  Output elaboration order\n+   --  d_O\n    --  d_P  Output cycle paths\n    --  d_Q\n    --  d_R\n@@ -1155,8 +1155,6 @@ package body Debug is\n \n    --  d_N  GNATBIND utilizes the elaboration order provided by bindo\n \n-   --  d_O  GNATBIND outputs the elaboration order of units to standard output\n-\n    --  d_P  GNATBIND outputs the cycle paths to standard output\n \n    --  d_T  GNATBIND outputs trace information of elaboration order and cycle"}, {"sha": "5fba0fa772b9275ef1ccac1c551eb3796c47fb22", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -8127,7 +8127,7 @@ package body Einfo is\n    function Is_Elaboration_Target (Id : Entity_Id) return Boolean is\n    begin\n       return\n-        Ekind_In (Id, E_Constant, E_Variable)\n+        Ekind_In (Id, E_Constant, E_Package, E_Variable)\n           or else Is_Entry        (Id)\n           or else Is_Generic_Unit (Id)\n           or else Is_Subprogram   (Id)"}, {"sha": "0b62af8b6969e1b9929977d4395d4431451cd29e", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -947,6 +947,11 @@ package Opt is\n    --  Set to True when the pre-18.x access-before-elaboration model is to be\n    --  used. Modified by use of -gnatH.\n \n+   Legacy_Elaboration_Order : Boolean := False;\n+   --  GNATBIND\n+   --  Set to True when the pre-20.x elaboration-order model is to be used.\n+   --  Modified by use of -H.\n+\n    Link_Only : Boolean := False;\n    --  GNATMAKE, GPRBUILD\n    --  Set to True to skip compile and bind steps (except when Bind_Only is"}, {"sha": "8612428635c4af7ebab783c71ad605176ec2644d", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 115, "deletions": 14, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -788,6 +788,9 @@ package body Sem_Elab is\n      (Generic_Target,\n       --  A generic unit being instantiated\n \n+      Package_Target,\n+      --  The package form of an instantiation\n+\n       Subprogram_Target,\n       --  An entry, operator, or subprogram being invoked, or aliased through\n       --  'Access or 'Unrestricted_Access.\n@@ -2046,6 +2049,10 @@ package body Sem_Elab is\n    pragma Inline (Is_Same_Unit);\n    --  Determine whether entities Unit_1 and Unit_2 denote the same unit\n \n+   function Main_Unit_Entity return Entity_Id;\n+   pragma Inline (Main_Unit_Entity);\n+   --  Return the entity of the main unit\n+\n    function Non_Private_View (Typ : Entity_Id) return Entity_Id;\n    pragma Inline (Non_Private_View);\n    --  Return the full view of private type Typ if available, otherwise return\n@@ -3955,7 +3962,7 @@ package body Sem_Elab is\n       --  Elaboration_Checks which appears on the initial declaration of the\n       --  main unit.\n \n-      Install_Elaboration_Model (Unit_Entity (Cunit_Entity (Main_Unit)));\n+      Install_Elaboration_Model (Unit_Entity (Main_Unit_Entity));\n \n       --  Examine the context of the main unit and record all units with prior\n       --  elaboration with respect to it.\n@@ -6344,7 +6351,7 @@ package body Sem_Elab is\n          --  because diagnostics on reads are relevant only for external\n          --  variables.\n \n-         if Is_Same_Unit (Unit_Id, Cunit_Entity (Main_Unit)) then\n+         if Is_Same_Unit (Unit_Id, Main_Unit_Entity) then\n             null;\n \n          --  Nothing to do when the variable is already initialized. Note that\n@@ -8163,7 +8170,7 @@ package body Sem_Elab is\n          --       body of A elaborated  <--  problem\n          --\n          --    The generation of an implicit pragma Elaborate_All (B) ensures\n-         --    that the elaboration order mechanism will not pick the above\n+         --    that the elaboration-order mechanism will not pick the above\n          --    order.\n          --\n          --    An implicit Elaborate is NOT generated when the unit is subject\n@@ -8502,10 +8509,9 @@ package body Sem_Elab is\n          Elab_Body_OK : Boolean := False;\n          Same_Unit_OK : Boolean := False) return Boolean\n       is\n-         EA_Id : constant Elaboration_Attributes_Id :=\n-                   Elaboration_Attributes_Of (Unit_Id);\n-\n-         Main_Id   : constant Entity_Id := Cunit_Entity (Main_Unit);\n+         EA_Id     : constant Elaboration_Attributes_Id :=\n+                       Elaboration_Attributes_Of (Unit_Id);\n+         Main_Id   : constant Entity_Id := Main_Unit_Entity;\n          Unit_Prag : constant Node_Id   := Elab_Pragma (EA_Id);\n          Unit_With : constant Node_Id   := With_Clause (EA_Id);\n \n@@ -8575,7 +8581,7 @@ package body Sem_Elab is\n       is\n          pragma Assert (Nam_In (Req_Nam, Name_Elaborate, Name_Elaborate_All));\n \n-         Main_Id : constant Entity_Id := Cunit_Entity (Main_Unit);\n+         Main_Id : constant Entity_Id := Main_Unit_Entity;\n          Unit_Id : constant Entity_Id := Find_Top_Unit (Targ_Id);\n \n          procedure Elaboration_Requirement_Error;\n@@ -10356,6 +10362,11 @@ package body Sem_Elab is\n       pragma Inline (Create_Instantiation_Rep);\n       --  Create the representation of instantiation Inst\n \n+      function Create_Package_Rep\n+        (Pack_Id : Entity_Id) return Target_Rep_Record;\n+      pragma Inline (Create_Package_Rep);\n+      --  Create the representation of package Pack_Id\n+\n       function Create_Protected_Entry_Rep\n         (PE_Id : Entity_Id) return Target_Rep_Record;\n       pragma Inline (Create_Protected_Entry_Rep);\n@@ -10624,6 +10635,26 @@ package body Sem_Elab is\n          return Rec;\n       end Create_Instantiation_Rep;\n \n+      ------------------------\n+      -- Create_Package_Rep --\n+      ------------------------\n+\n+      function Create_Package_Rep\n+        (Pack_Id : Entity_Id) return Target_Rep_Record\n+      is\n+         Rec : Target_Rep_Record;\n+\n+      begin\n+         Rec.Kind := Package_Target;\n+\n+         Spec_And_Body_From_Entity\n+           (Id        => Pack_Id,\n+            Body_Decl => Rec.Body_Decl,\n+            Spec_Decl => Rec.Spec_Decl);\n+\n+         return Rec;\n+      end Create_Package_Rep;\n+\n       --------------------------------\n       -- Create_Protected_Entry_Rep --\n       --------------------------------\n@@ -10846,6 +10877,9 @@ package body Sem_Elab is\n          then\n             Rec := Create_Subprogram_Rep (Id);\n \n+         elsif Ekind (Id) = E_Package then\n+            Rec := Create_Package_Rep (Id);\n+\n          else\n             pragma Assert (False);\n             return Rec;\n@@ -11622,6 +11656,14 @@ package body Sem_Elab is\n       --  Process invocation call scenario Call with representation Call_Rep.\n       --  In_State is the current state of the Processing phase.\n \n+      procedure Process_Invocation_Instantiation\n+        (Inst     : Node_Id;\n+         Inst_Rep : Scenario_Rep_Id;\n+         In_State : Processing_In_State);\n+      pragma Inline (Process_Invocation_Instantiation);\n+      --  Process invocation instantiation scenario Inst with representation\n+      --  Inst_Rep. In_State is the current state of the Processing phase.\n+\n       procedure Process_Invocation_Scenario\n         (N        : Node_Id;\n          In_State : Processing_In_State);\n@@ -11767,7 +11809,7 @@ package body Sem_Elab is\n          end if;\n \n          Spec_And_Body_From_Entity\n-           (Id        => Cunit_Entity (Main_Unit),\n+           (Id        => Main_Unit_Entity,\n             Body_Decl => Body_Decl,\n             Spec_Decl => Spec_Decl);\n \n@@ -11799,7 +11841,7 @@ package body Sem_Elab is\n \n          Set_Ekind (Proc_Id, E_Procedure);\n          Set_Etype (Proc_Id, Standard_Void_Type);\n-         Set_Scope (Proc_Id, Unique_Entity (Cunit_Entity (Main_Unit)));\n+         Set_Scope (Proc_Id, Unique_Entity (Main_Unit_Entity));\n \n          --  Create a dummy declaration for the elaboration procedure. The\n          --  declaration does not need to be syntactically legal, but must\n@@ -11830,7 +11872,7 @@ package body Sem_Elab is\n          end if;\n \n          Spec_And_Body_From_Entity\n-           (Id        => Cunit_Entity (Main_Unit),\n+           (Id        => Main_Unit_Entity,\n             Body_Decl => Body_Decl,\n             Spec_Decl => Spec_Decl);\n \n@@ -11995,7 +12037,7 @@ package body Sem_Elab is\n          function Declaration_Placement_Of_Node\n            (N : Node_Id) return Declaration_Placement_Kind\n          is\n-            Main_Unit_Id : constant Entity_Id := Cunit_Entity (Main_Unit);\n+            Main_Unit_Id : constant Entity_Id := Main_Unit_Entity;\n             N_Unit_Id    : constant Entity_Id := Find_Top_Unit (N);\n \n          begin\n@@ -12150,6 +12192,9 @@ package body Sem_Elab is\n          Main_Cunit : constant Node_Id := Cunit (Main_Unit);\n \n       begin\n+         --  ??? Remove the following use of the debug flag when switching from\n+         --  the old to the new elaboration-order mechanism.\n+\n          --  Nothing to do when switch -gnatd_G (encode invocation graph in ALI\n          --  files) is not in effect.\n \n@@ -12458,6 +12503,43 @@ package body Sem_Elab is\n          end if;\n       end Process_Invocation_Call;\n \n+      --------------------------------------\n+      -- Process_Invocation_Instantiation --\n+      --------------------------------------\n+\n+      procedure Process_Invocation_Instantiation\n+        (Inst     : Node_Id;\n+         Inst_Rep : Scenario_Rep_Id;\n+         In_State : Processing_In_State)\n+      is\n+         pragma Unreferenced (Inst);\n+\n+         Gen_Id : constant Entity_Id := Target (Inst_Rep);\n+\n+      begin\n+         --  Nothing to do when the generic appears within an internal unit\n+\n+         if In_Internal_Unit (Gen_Id) then\n+            return;\n+         end if;\n+\n+         --  The generic being instantiated resides within an external unit\n+         --\n+         --      Main unit         External unit\n+         --    +-----------+      +-------------+\n+         --    |           |      |             |\n+         --    |  Start ------------> Generic   |\n+         --    |           |      |             |\n+         --    +-----------+      +-------------+\n+         --\n+         --  Record the invocation path which originates from Start and reaches\n+         --  the generic.\n+\n+         if not In_Extended_Main_Code_Unit (Gen_Id) then\n+            Record_Invocation_Path (In_State);\n+         end if;\n+      end Process_Invocation_Instantiation;\n+\n       ---------------------------------\n       -- Process_Invocation_Scenario --\n       ---------------------------------\n@@ -12503,6 +12585,14 @@ package body Sem_Elab is\n                      In_State  => In_State);\n                end if;\n             end if;\n+\n+         --  Instantiation\n+\n+         elsif Is_Suitable_Instantiation (Scen) then\n+            Process_Invocation_Instantiation\n+              (Inst     => Scen,\n+               Inst_Rep => Scenario_Representation_Of (Scen, In_State),\n+               In_State => In_State);\n          end if;\n \n          --  Remove the current scenario from the stack of active scenarios\n@@ -13589,6 +13679,18 @@ package body Sem_Elab is\n       end if;\n    end Kill_Elaboration_Scenario;\n \n+   ----------------------\n+   -- Main_Unit_Entity --\n+   ----------------------\n+\n+   function Main_Unit_Entity return Entity_Id is\n+   begin\n+      --  Note that Cunit_Entity (Main_Unit) is not reliable in the presence of\n+      --  generic bodies and may return an outdated entity.\n+\n+      return Defining_Entity (Unit (Cunit (Main_Unit)));\n+   end Main_Unit_Entity;\n+\n    ----------------------\n    -- Non_Private_View --\n    ----------------------\n@@ -15026,8 +15128,7 @@ package body Sem_Elab is\n       --  emitted multiple times.\n \n       procedure Check_SPARK_Model_In_Effect is\n-         Spec_Id : constant Entity_Id :=\n-                     Unique_Entity (Cunit_Entity (Main_Unit));\n+         Spec_Id : constant Entity_Id := Unique_Entity (Main_Unit_Entity);\n \n       begin\n          --  Do not emit the warning multiple times as this creates useless"}, {"sha": "eefd225f5398324b22bef10e5f691c32b5a0f7fd", "filename": "gcc/ada/switch-b.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fswitch-b.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37/gcc%2Fada%2Fswitch-b.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-b.adb?ref=3eb5e54a4a50f3e7c39a1f5435f9d4eedb26bb37", "patch": "@@ -353,6 +353,15 @@ package body Switch.B is\n             Ptr := Ptr + 1;\n             Usage_Requested := True;\n \n+         --  ??? Enable the following code when switching from the old to the\n+         --  new elaboration-order mechanism.\n+\n+         --  Processing for H switch\n+\n+         --  when 'H' =>\n+         --     Ptr := Ptr + 1;\n+         --     Legacy_Elaboration_Order := True;\n+\n          --  Processing for i switch\n \n          when 'i' =>"}]}