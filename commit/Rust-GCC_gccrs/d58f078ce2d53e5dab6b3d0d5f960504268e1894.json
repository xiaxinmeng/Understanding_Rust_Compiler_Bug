{"sha": "d58f078ce2d53e5dab6b3d0d5f960504268e1894", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDU4ZjA3OGNlMmQ1M2U1ZGFiNmIzZDBkNWY5NjA1MDQyNjhlMTg5NA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-08-12T07:21:51Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-08-12T17:06:24Z"}, "message": "ipa: fix bit CPP when combined with IPA bit CP\n\nAs mentioned in the PR, let's consider the following example:\n\nint\n__attribute__((noinline))\nfoo(int arg)\n{\n  if (arg == 3)\n    return 1;\n  if (arg == 4)\n    return 123;\n\n  __builtin_unreachable ();\n}\n\nduring WPA we find all calls of the function\n(yes the call with value 5 is UBSAN):\n\n  Node: foo/0:\n    param [0]: 5 [loc_time: 4, loc_size: 2, prop_time: 0, prop_size: 0]\n               3 [loc_time: 3, loc_size: 3, prop_time: 0, prop_size: 0]\n         ctxs: VARIABLE\n         Bits: value = 0x5, mask = 0x6\n\nin LTRANS we have the following VRP info:\n\n  # RANGE [3, 3] NONZERO 3\n\nwhen we AND masks in get_default_value we end up with 6 & 3 = 2 (0x010).\nThat means the only second (least significant bit) is unknown and\nvalue (5 = 0x101) & ~mask gives us either 7 (0x111) or 5 (0x101).\n\nThat's why if (arg_2(D) == 3) gets optimized to false.\n\ngcc/ChangeLog:\n\n\tPR ipa/96482\n\t* ipa-cp.c (ipcp_bits_lattice::meet_with_1): Drop value bits\n\tfor bits that are unknown.\n\t(ipcp_bits_lattice::set_to_constant): Likewise.\n\t* tree-ssa-ccp.c (get_default_value): Add sanity check that\n\tIPA CP bit info has all bits set to zero in bits that\n\tare unknown.\n\ngcc/testsuite/ChangeLog:\n\n\tPR ipa/96482\n\t* gcc.dg/ipa/pr96482.c: New test.", "tree": {"sha": "5fc6580370471a4936b7b104d673aa0b8211d47a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5fc6580370471a4936b7b104d673aa0b8211d47a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d58f078ce2d53e5dab6b3d0d5f960504268e1894", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58f078ce2d53e5dab6b3d0d5f960504268e1894", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d58f078ce2d53e5dab6b3d0d5f960504268e1894", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d58f078ce2d53e5dab6b3d0d5f960504268e1894/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b418ccb358e428091fb9c6020fd10be5ae40a17a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b418ccb358e428091fb9c6020fd10be5ae40a17a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b418ccb358e428091fb9c6020fd10be5ae40a17a"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "2b21280d91995e724228b6ba30c360922708bf20", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=d58f078ce2d53e5dab6b3d0d5f960504268e1894", "patch": "@@ -1011,7 +1011,7 @@ ipcp_bits_lattice::set_to_constant (widest_int value, widest_int mask)\n {\n   gcc_assert (top_p ());\n   m_lattice_val = IPA_BITS_CONSTANT;\n-  m_value = value;\n+  m_value = wi::bit_and (wi::bit_not (mask), value);\n   m_mask = mask;\n   return true;\n }\n@@ -1048,6 +1048,7 @@ ipcp_bits_lattice::meet_with_1 (widest_int value, widest_int mask,\n \n   widest_int old_mask = m_mask;\n   m_mask = (m_mask | mask) | (m_value ^ value);\n+  m_value &= value;\n \n   if (wi::sext (m_mask, precision) == -1)\n     return set_to_bottom ();"}, {"sha": "68ead798d280f9f547ec4d2745bed68cbf8f5e75", "filename": "gcc/testsuite/gcc.dg/ipa/pr96482.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96482.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96482.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fipa%2Fpr96482.c?ref=d58f078ce2d53e5dab6b3d0d5f960504268e1894", "patch": "@@ -0,0 +1,44 @@\n+/* PR ipa/96482 */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -flto\"  } */\n+/* { dg-require-effective-target lto } */\n+\n+int\n+__attribute__((noinline))\n+foo(int arg)\n+{\n+  if (arg == 3)\n+    return 1;\n+  if (arg == 4)\n+    return 123;\n+\n+  __builtin_unreachable ();\n+}\n+\n+int\n+__attribute__((noinline))\n+baz(int x)\n+{\n+  if (x != 0)\n+    return foo(3); /* called */\n+\n+  return 1;\n+}\n+\n+int\n+__attribute__((noinline))\n+bar(int x)\n+{\n+  if (x == 0)\n+    return foo(5); /* not executed */\n+\n+  return 1;\n+}\n+\n+int main(int argc, char **argv)\n+{\n+  if (bar(argc) != baz(argc))\n+    __builtin_abort ();\n+\n+  return 0;\n+}"}, {"sha": "65dffe06530153bd7e1d9f5324780ce576234600", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d58f078ce2d53e5dab6b3d0d5f960504268e1894/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=d58f078ce2d53e5dab6b3d0d5f960504268e1894", "patch": "@@ -306,6 +306,9 @@ get_default_value (tree var)\n \t\t{\n \t\t  val.lattice_val = CONSTANT;\n \t\t  val.value = value;\n+\t\t  widest_int ipa_value = wi::to_widest (value);\n+\t\t  /* Unknown bits from IPA CP must be equal to zero.  */\n+\t\t  gcc_assert (wi::bit_and (ipa_value, mask) == 0);\n \t\t  val.mask = mask;\n \t\t  if (nonzero_bits != -1)\n \t\t    val.mask &= extend_mask (nonzero_bits,"}]}