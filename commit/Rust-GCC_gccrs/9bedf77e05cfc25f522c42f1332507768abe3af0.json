{"sha": "9bedf77e05cfc25f522c42f1332507768abe3af0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWJlZGY3N2UwNWNmYzI1ZjUyMmM0MmYxMzMyNTA3NzY4YWJlM2FmMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-06-22T03:54:49Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-06-22T18:06:17Z"}, "message": "Require moves in Token constructors\n\nThis avoids some string copies by changing the Token constructors to\nrequire any std::string argument to be transferred via std::move.", "tree": {"sha": "72e152a743485508530901b3e3b56b2b34e18673", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72e152a743485508530901b3e3b56b2b34e18673"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9bedf77e05cfc25f522c42f1332507768abe3af0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bedf77e05cfc25f522c42f1332507768abe3af0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9bedf77e05cfc25f522c42f1332507768abe3af0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9bedf77e05cfc25f522c42f1332507768abe3af0/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ebfb4d4222d252673ce1afff5a7264e332b3b13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ebfb4d4222d252673ce1afff5a7264e332b3b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ebfb4d4222d252673ce1afff5a7264e332b3b13"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "b320401e3bb342a78ac7c5ae599499b9678fed51", "filename": "gcc/rust/lex/rust-lex.cc", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bedf77e05cfc25f522c42f1332507768abe3af0/gcc%2Frust%2Flex%2Frust-lex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bedf77e05cfc25f522c42f1332507768abe3af0/gcc%2Frust%2Flex%2Frust-lex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-lex.cc?ref=9bedf77e05cfc25f522c42f1332507768abe3af0", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2020 Free Software Foundation, Inc.\n+// Copyright (C) 2020, 2021 Free Software Foundation, Inc.\n \n // This file is part of GCC.\n \n@@ -1436,7 +1436,7 @@ Lexer::parse_byte_string (Location loc)\n \n   str.shrink_to_fit ();\n \n-  return Token::make_byte_string (loc, str);\n+  return Token::make_byte_string (loc, std::move (str));\n }\n \n // Parses a raw byte string.\n@@ -1509,7 +1509,7 @@ Lexer::parse_raw_byte_string (Location loc)\n \n   str.shrink_to_fit ();\n \n-  return Token::make_byte_string (loc, str);\n+  return Token::make_byte_string (loc, std::move (str));\n }\n \n // Parses a raw identifier.\n@@ -1559,7 +1559,7 @@ Lexer::parse_raw_identifier (Location loc)\n     {\n       str.shrink_to_fit ();\n \n-      return Token::make_identifier (loc, str);\n+      return Token::make_identifier (loc, std::move (str));\n     }\n }\n \n@@ -1623,7 +1623,7 @@ Lexer::parse_string (Location loc)\n     }\n \n   str.shrink_to_fit ();\n-  return Token::make_string (loc, str);\n+  return Token::make_string (loc, std::move (str));\n }\n \n // Parses an identifier or keyword.\n@@ -1659,7 +1659,7 @@ Lexer::parse_identifier_or_keyword (Location loc)\n \n   TokenId keyword = classify_keyword (str);\n   if (keyword == IDENTIFIER)\n-    return Token::make_identifier (loc, str);\n+    return Token::make_identifier (loc, std::move (str));\n   else\n     return Token::make (keyword, loc);\n }\n@@ -1736,7 +1736,7 @@ Lexer::parse_raw_string (Location loc, int initial_hash_count)\n \n   str.shrink_to_fit ();\n \n-  return Token::make_string (loc, str);\n+  return Token::make_string (loc, std::move (str));\n }\n \n template <typename IsDigitFunc>\n@@ -1797,7 +1797,7 @@ Lexer::parse_non_decimal_int_literal (Location loc, IsDigitFunc is_digit_func,\n \t\t\t\t\t\t : \"<insert unknown base>\")));\n       return nullptr;\n     }\n-  return Token::make_int (loc, existent_str, type_hint);\n+  return Token::make_int (loc, std::move (existent_str), type_hint);\n }\n \n // Parses a hex, binary or octal int literal.\n@@ -1889,7 +1889,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n       current_column += length;\n \n       str.shrink_to_fit ();\n-      return Token::make_float (loc, str, type_hint);\n+      return Token::make_float (loc, std::move (str), type_hint);\n     }\n   else if (current_char == '.' && check_valid_float_dot_end (peek_input (1)))\n     {\n@@ -1909,7 +1909,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n       current_column += length;\n \n       str.shrink_to_fit ();\n-      return Token::make_float (loc, str, CORETYPE_UNKNOWN);\n+      return Token::make_float (loc, std::move (str), CORETYPE_UNKNOWN);\n     }\n   else if (current_char == 'E' || current_char == 'e')\n     {\n@@ -1938,7 +1938,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n       current_column += length;\n \n       str.shrink_to_fit ();\n-      return Token::make_float (loc, str, type_hint);\n+      return Token::make_float (loc, std::move (str), type_hint);\n     }\n   else\n     {\n@@ -1952,7 +1952,7 @@ Lexer::parse_decimal_int_or_float (Location loc)\n       current_column += length;\n \n       str.shrink_to_fit ();\n-      return Token::make_int (loc, str, type_hint);\n+      return Token::make_int (loc, std::move (str), type_hint);\n     }\n }\n \n@@ -2026,7 +2026,7 @@ Lexer::parse_char_or_lifetime (Location loc)\n \t  current_column += length;\n \n \t  str.shrink_to_fit ();\n-\t  return Token::make_lifetime (loc, str);\n+\t  return Token::make_lifetime (loc, std::move (str));\n \t}\n       else\n \t{"}, {"sha": "e8d5519e22a0758a6bceb1cff9bdaacdfe3e4762", "filename": "gcc/rust/lex/rust-token.h", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9bedf77e05cfc25f522c42f1332507768abe3af0/gcc%2Frust%2Flex%2Frust-token.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9bedf77e05cfc25f522c42f1332507768abe3af0/gcc%2Frust%2Flex%2Frust-token.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flex%2Frust-token.h?ref=9bedf77e05cfc25f522c42f1332507768abe3af0", "patch": "@@ -262,9 +262,9 @@ class Token\n   {}\n \n   // Token constructor from token id, location, and a string.\n-  Token (TokenId token_id, Location location, const std::string &paramStr)\n-    : token_id (token_id), locus (location), str (new std::string (paramStr)),\n-      type_hint (CORETYPE_UNKNOWN)\n+  Token (TokenId token_id, Location location, std::string &&paramStr)\n+    : token_id (token_id), locus (location),\n+      str (new std::string (std::move (paramStr))), type_hint (CORETYPE_UNKNOWN)\n   {}\n \n   // Token constructor from token id, location, and a char.\n@@ -281,10 +281,10 @@ class Token\n   {}\n \n   // Token constructor from token id, location, a string, and type hint.\n-  Token (TokenId token_id, Location location, const std::string &paramStr,\n+  Token (TokenId token_id, Location location, std::string &&paramStr,\n \t PrimitiveCoreType parType)\n-    : token_id (token_id), locus (location), str (new std::string (paramStr)),\n-      type_hint (parType)\n+    : token_id (token_id), locus (location),\n+      str (new std::string (std::move (paramStr))), type_hint (parType)\n   {}\n \n public:\n@@ -311,34 +311,37 @@ class Token\n   }\n \n   // Makes and returns a new TokenPtr of type IDENTIFIER.\n-  static TokenPtr make_identifier (Location locus, const std::string &str)\n+  static TokenPtr make_identifier (Location locus, std::string &&str)\n   {\n     // return std::make_shared<Token> (IDENTIFIER, locus, str);\n-    return TokenPtr (new Token (IDENTIFIER, locus, str));\n+    return TokenPtr (new Token (IDENTIFIER, locus, std::move (str)));\n   }\n \n   // Makes and returns a new TokenPtr of type INT_LITERAL.\n-  static TokenPtr make_int (Location locus, const std::string &str,\n+  static TokenPtr make_int (Location locus, std::string &&str,\n \t\t\t    PrimitiveCoreType type_hint = CORETYPE_UNKNOWN)\n   {\n     // return std::make_shared<Token> (INT_LITERAL, locus, str, type_hint);\n-    return TokenPtr (new Token (INT_LITERAL, locus, str, type_hint));\n+    return TokenPtr (\n+      new Token (INT_LITERAL, locus, std::move (str), type_hint));\n   }\n \n   // Makes and returns a new TokenPtr of type FLOAT_LITERAL.\n-  static TokenPtr make_float (Location locus, const std::string &str,\n+  static TokenPtr make_float (Location locus, std::string &&str,\n \t\t\t      PrimitiveCoreType type_hint = CORETYPE_UNKNOWN)\n   {\n     // return std::make_shared<Token> (FLOAT_LITERAL, locus, str, type_hint);\n-    return TokenPtr (new Token (FLOAT_LITERAL, locus, str, type_hint));\n+    return TokenPtr (\n+      new Token (FLOAT_LITERAL, locus, std::move (str), type_hint));\n   }\n \n   // Makes and returns a new TokenPtr of type STRING_LITERAL.\n-  static TokenPtr make_string (Location locus, const std::string &str)\n+  static TokenPtr make_string (Location locus, std::string &&str)\n   {\n     // return std::make_shared<Token> (STRING_LITERAL, locus, str,\n     // CORETYPE_STR);\n-    return TokenPtr (new Token (STRING_LITERAL, locus, str, CORETYPE_STR));\n+    return TokenPtr (\n+      new Token (STRING_LITERAL, locus, std::move (str), CORETYPE_STR));\n   }\n \n   // Makes and returns a new TokenPtr of type CHAR_LITERAL.\n@@ -356,17 +359,17 @@ class Token\n   }\n \n   // Makes and returns a new TokenPtr of type BYTE_STRING_LITERAL (fix).\n-  static TokenPtr make_byte_string (Location locus, const std::string &str)\n+  static TokenPtr make_byte_string (Location locus, std::string &&str)\n   {\n     // return std::make_shared<Token> (BYTE_STRING_LITERAL, locus, str);\n-    return TokenPtr (new Token (BYTE_STRING_LITERAL, locus, str));\n+    return TokenPtr (new Token (BYTE_STRING_LITERAL, locus, std::move (str)));\n   }\n \n   // Makes and returns a new TokenPtr of type LIFETIME.\n-  static TokenPtr make_lifetime (Location locus, const std::string &str)\n+  static TokenPtr make_lifetime (Location locus, std::string &&str)\n   {\n     // return std::make_shared<Token> (LIFETIME, locus, str);\n-    return TokenPtr (new Token (LIFETIME, locus, str));\n+    return TokenPtr (new Token (LIFETIME, locus, std::move (str)));\n   }\n \n   // Gets id of the token."}]}