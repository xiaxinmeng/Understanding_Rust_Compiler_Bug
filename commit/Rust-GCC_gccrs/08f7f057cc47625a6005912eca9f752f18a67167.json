{"sha": "08f7f057cc47625a6005912eca9f752f18a67167", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmN2YwNTdjYzQ3NjI1YTYwMDU5MTJlY2E5Zjc1MmYxOGE2NzE2Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2001-12-15T00:53:44Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2001-12-15T00:53:44Z"}, "message": "cfgcleanup.c (flow_find_cross_jump): Replace tests for note by active_insn_p; count conditional jump as instruction.\n\n\t* cfgcleanup.c (flow_find_cross_jump): Replace tests for note\n\tby active_insn_p; count conditional jump as instruction.\n\nFrom-SVN: r48022", "tree": {"sha": "5b6cb99d81c2d3b5f62712aa4a7879120688ebfb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b6cb99d81c2d3b5f62712aa4a7879120688ebfb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f7f057cc47625a6005912eca9f752f18a67167", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f7f057cc47625a6005912eca9f752f18a67167", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f7f057cc47625a6005912eca9f752f18a67167", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f7f057cc47625a6005912eca9f752f18a67167/comments", "author": null, "committer": null, "parents": [{"sha": "aa28f076d609e79d8cc4d235bbb9679f2a08c9fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa28f076d609e79d8cc4d235bbb9679f2a08c9fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa28f076d609e79d8cc4d235bbb9679f2a08c9fe"}], "stats": {"total": 28, "additions": 21, "deletions": 7}, "files": [{"sha": "14fd691451f7adbae85dff05ffb7687ce9585be1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f7f057cc47625a6005912eca9f752f18a67167/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f7f057cc47625a6005912eca9f752f18a67167/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=08f7f057cc47625a6005912eca9f752f18a67167", "patch": "@@ -1,3 +1,8 @@\n+Sat Dec 15 01:39:12 CET 2001  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfgcleanup.c (flow_find_cross_jump): Replace tests for note\n+\tby active_insn_p; count conditional jump as instruction.\n+\n 2001-12-14  DJ Delorie  <dj@redhat.com>\n \t    Danny Smith  <dannysmith@users.sourceforge.net>\n "}, {"sha": "2f0115323a8ec33aff9913c468f6548aba5552fb", "filename": "gcc/cfgcleanup.c", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f7f057cc47625a6005912eca9f752f18a67167/gcc%2Fcfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f7f057cc47625a6005912eca9f752f18a67167/gcc%2Fcfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgcleanup.c?ref=08f7f057cc47625a6005912eca9f752f18a67167", "patch": "@@ -670,21 +670,30 @@ flow_find_cross_jump (mode, bb1, bb2, f1, f2)\n      need to be compared for equivalence, which we'll do below.  */\n \n   i1 = bb1->end;\n+  last1 = afterlast1 = last2 = afterlast2 = NULL_RTX;\n   if (onlyjump_p (i1)\n       || (returnjump_p (i1) && !side_effects_p (PATTERN (i1))))\n-    i1 = PREV_INSN (i1);\n+    {\n+      last1 = i1;\n+      /* Count everything except for unconditional jump as insn.  */\n+      if (!simplejump_p (i1) && !returnjump_p (i1))\n+\tninsns++;\n+      i1 = PREV_INSN (i1);\n+    }\n   i2 = bb2->end;\n   if (onlyjump_p (i2)\n       || (returnjump_p (i2) && !side_effects_p (PATTERN (i2))))\n-    i2 = PREV_INSN (i2);\n+    {\n+      last2 = i2;\n+      i2 = PREV_INSN (i2);\n+    }\n \n-  last1 = afterlast1 = last2 = afterlast2 = NULL_RTX;\n   while (true)\n     {\n       /* Ignore notes.  */\n-      while ((GET_CODE (i1) == NOTE && i1 != bb1->head))\n+      while (!active_insn_p (i1) && i1 != bb1->head)\n \ti1 = PREV_INSN (i1);\n-      while ((GET_CODE (i2) == NOTE && i2 != bb2->head))\n+      while (!active_insn_p (i2) && i2 != bb2->head)\n \ti2 = PREV_INSN (i2);\n \n       if (i1 == bb1->head || i2 == bb2->head)\n@@ -735,11 +744,11 @@ flow_find_cross_jump (mode, bb1, bb2, f1, f2)\n      Two, it keeps line number notes as matched as may be.  */\n   if (ninsns)\n     {\n-      while (last1 != bb1->head && GET_CODE (PREV_INSN (last1)) == NOTE)\n+      while (last1 != bb1->head && !active_insn_p (PREV_INSN (last1)))\n \tlast1 = PREV_INSN (last1);\n       if (last1 != bb1->head && GET_CODE (PREV_INSN (last1)) == CODE_LABEL)\n \tlast1 = PREV_INSN (last1);\n-      while (last2 != bb2->head && GET_CODE (PREV_INSN (last2)) == NOTE)\n+      while (last2 != bb2->head && !active_insn_p (PREV_INSN (last2)))\n \tlast2 = PREV_INSN (last2);\n       if (last2 != bb2->head && GET_CODE (PREV_INSN (last2)) == CODE_LABEL)\n \tlast2 = PREV_INSN (last2);"}]}