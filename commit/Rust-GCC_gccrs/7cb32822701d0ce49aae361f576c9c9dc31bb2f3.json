{"sha": "7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2NiMzI4MjI3MDFkMGNlNDlhYWUzNjFmNTc2YzljOWRjMzFiYjJmMw==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-03-31T22:32:05Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-03-31T22:32:05Z"}, "message": "diagnostic.c (print_error_function): Remove.\n\n\t* diagnostic.c (print_error_function): Remove.\n\t(default_print_error_function): Rename.\n\t(report_error_function): Update.\n\t* diagnostic.h (print_error_function): Remove.\n\t(default_print_error_function): Remove.\n\t* langhooks-def.h (struct diagnostic_context): Predeclare.\n\t(lhd_print_error_function, LANG_HOOKS_PRINT_ERROR_FUNCTION): New.\n\t(LANG_HOOKS_INITIALIZER): Update.\n\t* langhooks.h (struct diagnostic context): Predeclare.\n\t(struct lang_hooks): New hook.\ncp:\n\t* Make-lang.in (error.o): Update.\n\t* cp-lang.c (LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n\t* cp-tree.h (struct diagnostic_context): Predeclare.\n\t(cxx_print_error_function): New.\n\t* error.c: Include langhooks-def.h.\n\t(lang_print_error_function): Rename.  Update.\n\t(init_error): Don't set hook.\nf:\n\t* com.c (lang_print_error_function): Rename.\n\t(LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n\t(ffe_init): Don't set hook.\njava:\n\t* lang.c (LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n\t(java_dummy_print): Remove.\n\t(lang_print_error): Rename.  Exit early if inhibiting output.\n\t(inhibit_error_printing_function): New.\n\t(java_init): Don't set hook.\n\t(lang_init_source): Use new boolean.\n\nFrom-SVN: r51672", "tree": {"sha": "095a8c71baa85e6ccb7e9e788b0e115460d44314", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/095a8c71baa85e6ccb7e9e788b0e115460d44314"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/comments", "author": null, "committer": null, "parents": [{"sha": "1db02437806fb3155563914b496e26d7a8edfa65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1db02437806fb3155563914b496e26d7a8edfa65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1db02437806fb3155563914b496e26d7a8edfa65"}], "stats": {"total": 140, "additions": 89, "deletions": 51}, "files": [{"sha": "7dc14c0894b1d5c610b4bf8e99e4b4ff0e4b4560", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -1,3 +1,16 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* diagnostic.c (print_error_function): Remove.\n+\t(default_print_error_function): Rename.\n+\t(report_error_function): Update.\n+\t* diagnostic.h (print_error_function): Remove.\n+\t(default_print_error_function): Remove.\n+\t* langhooks-def.h (struct diagnostic_context): Predeclare.\n+\t(lhd_print_error_function, LANG_HOOKS_PRINT_ERROR_FUNCTION): New.\n+\t(LANG_HOOKS_INITIALIZER): Update.\n+\t* langhooks.h (struct diagnostic context): Predeclare.\n+\t(struct lang_hooks): New hook.\n+\n 2002-03-31  Franz Sirl  <Franz.Sirl-kernel@lauterbach.com>\n \n \t* config/rs6000/rs6000.h (RS6000_PIC_OFFSET_TABLE_REGNUM): New."}, {"sha": "46bb356939515a60b1e55cc08ad65c30205442bd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -1,3 +1,13 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Make-lang.in (error.o): Update.\n+\t* cp-lang.c (LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n+\t* cp-tree.h (struct diagnostic_context): Predeclare.\n+\t(cxx_print_error_function): New.\n+\t* error.c: Include langhooks-def.h.\n+\t(lang_print_error_function): Rename.  Update.\n+\t(init_error): Don't set hook.\n+\n 2002-03-29  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):"}, {"sha": "6db4e4c70d0e51b729064970762eb290fa4159d3", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -282,7 +282,8 @@ cp/expr.o: cp/expr.c $(CXX_TREE_H) $(RTL_H) flags.h $(EXPR_H) toplev.h \\\n   except.h $(TM_P_H)\n cp/pt.o: cp/pt.c $(CXX_TREE_H) cp/decl.h cp/parse.h cp/lex.h toplev.h \\\n   $(GGC_H) $(RTL_H) except.h tree-inline.h\n-cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h flags.h real.h\n+cp/error.o: cp/error.c $(CXX_TREE_H) toplev.h diagnostic.h flags.h real.h \\\n+  langhooks-def.h\n cp/repo.o: cp/repo.c $(CXX_TREE_H) toplev.h $(GGC_H) diagnostic.h\n cp/semantics.o: cp/semantics.c $(CXX_TREE_H) cp/lex.h except.h toplev.h \\\n   flags.h $(GGC_H) debug.h output.h $(RTL_H) $(TIMEVAR_H) $(EXPR_H) \\"}, {"sha": "31ee285753e112cb3e1459697608e6a41f357ce1", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -77,6 +77,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_PRINT_IDENTIFIER cxx_print_identifier\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tcxx_printable_name\n+#undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n+#define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n #undef LANG_HOOKS_SET_YYDEBUG\n #define LANG_HOOKS_SET_YYDEBUG cxx_set_yydebug\n "}, {"sha": "b7aab09d3139da2d2ad1d8aef7b8ead7be34f45f", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -34,6 +34,8 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"c-common.h\"\n \n+struct diagnostic_context;\n+\n /* Usage of TREE_LANG_FLAG_?:\n    0: BINFO_MARKED (BINFO nodes).\n       IDENTIFIER_MARKED (IDENTIFIER_NODEs)\n@@ -3626,6 +3628,8 @@ extern void cxx_print_xnode\t\t\tPARAMS ((FILE *, tree, int));\n extern void cxx_print_decl\t\t\tPARAMS ((FILE *, tree, int));\n extern void cxx_print_type\t\t\tPARAMS ((FILE *, tree, int));\n extern void cxx_print_identifier\t\tPARAMS ((FILE *, tree, int));\n+extern void cxx_print_error_function\tPARAMS ((struct diagnostic_context *,\n+\t\t\t\t\t\t const char *));\n extern void cxx_set_yydebug\t\t\tPARAMS ((int));\n extern void build_self_reference\t\tPARAMS ((void));\n extern int same_signature_p\t\t\tPARAMS ((tree, tree));"}, {"sha": "499f726b012243993eba47c7107667639cbe2a11", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -28,6 +28,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"flags.h\"\n #include \"diagnostic.h\"\n+#include \"langhooks-def.h\"\n \n enum pad { none, before, after };\n \n@@ -104,8 +105,6 @@ static void dump_scope PARAMS ((tree, int));\n static void dump_template_parms PARAMS ((tree, int, int));\n \n static const char *function_category PARAMS ((tree));\n-static void lang_print_error_function PARAMS ((diagnostic_context *,\n-                                               const char *));\n static void maybe_print_instantiation_context PARAMS ((output_buffer *));\n static void print_instantiation_full_context PARAMS ((output_buffer *));\n static void print_instantiation_partial_context PARAMS ((output_buffer *, tree,\n@@ -125,7 +124,6 @@ static tree locate_error PARAMS ((const char *, va_list));\n void\n init_error ()\n {\n-  print_error_function = lang_print_error_function;\n   diagnostic_starter (global_dc) = cp_diagnostic_starter;\n   diagnostic_finalizer (global_dc) = cp_diagnostic_finalizer;\n   diagnostic_format_decoder (global_dc) = cp_printer;\n@@ -2375,14 +2373,15 @@ cv_to_string (p, v)\n   return output_finalize_message (scratch_buffer);\n }\n \n-static void\n-lang_print_error_function (context, file)\n+/* Langhook for print_error_function.  */\n+void\n+cxx_print_error_function (context, file)\n      diagnostic_context *context;\n      const char *file;\n {\n   output_state os;\n \n-  default_print_error_function (context, file);\n+  lhd_print_error_function (context, file);\n   os = output_buffer_state (context);\n   output_set_prefix ((output_buffer *)context, file);\n   maybe_print_instantiation_context ((output_buffer *)context);"}, {"sha": "15a614e62150f4e6503bc04656f8d2426e7ddafa", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -113,12 +113,6 @@ static tree last_error_function = NULL;\n /* Used to detect when input_file_stack has changed since last described.  */\n static int last_error_tick;\n \n-/* Called by report_error_function to print out function name.\n-   Default may be overridden by language front-ends.  */\n-\n-void (*print_error_function) PARAMS ((diagnostic_context *, const char *))\n-     = default_print_error_function;\n-\n /* Prevent recursion into the error handler.  */\n static int diagnostic_lock;\n \n@@ -1087,7 +1081,7 @@ announce_function (decl)\n    an error.  */\n \n void\n-default_print_error_function (context, file)\n+lhd_print_error_function (context, file)\n      diagnostic_context *context;\n      const char *file;\n {\n@@ -1130,7 +1124,7 @@ report_error_function (file)\n   const char *file ATTRIBUTE_UNUSED;\n {\n   report_problematic_module ((output_buffer *) global_dc);\n-  (*print_error_function) (global_dc, input_filename);\n+  (*lang_hooks.print_error_function) (global_dc, input_filename);\n }\n \n void"}, {"sha": "360b64bfa47661eab62e22b49ddb1ae5b41daf20", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -310,12 +310,4 @@ extern int error_function_changed\tPARAMS ((void));\n extern void record_last_error_function\tPARAMS ((void));\n extern void report_problematic_module\tPARAMS ((output_buffer *));     \n \n-/* Called by report_error_function to print out function name.\n- * Default may be overridden by language front-ends.  */\n-extern void (*print_error_function) PARAMS ((diagnostic_context *,\n-                                             const char *));\n-\n-extern void default_print_error_function PARAMS ((diagnostic_context *,\n-                                                  const char *));\n-\n #endif /* ! GCC_DIAGNOSTIC_H */"}, {"sha": "9719baa2f65cdafcccaff906f6e70a51f701e9fb", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -1,3 +1,9 @@\n+Sun Mar 31 23:50:22 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* com.c (lang_print_error_function): Rename.\n+\t(LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n+\t(ffe_init): Don't set hook.\n+\n Fri Mar 29 21:59:15 2002  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* com.c (LANG_HOOKS_TYPE_FOR_MODE, LANG_HOOKS_TYPE_FOR_SIZE):"}, {"sha": "d51fad32995caba8e0080f66af78247d237dab01", "filename": "gcc/f/com.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -367,6 +367,7 @@ static int duplicate_decls (tree newdecl, tree olddecl);\n static void finish_decl (tree decl, tree init, bool is_top_level);\n static void finish_function (int nested);\n static const char *ffe_printable_name (tree decl, int v);\n+static void ffe_print_error_function (diagnostic_context *, const char *);\n static tree lookup_name_current_level (tree name);\n static struct binding_level *make_binding_level (void);\n static void pop_f_function_context (void);\n@@ -13655,8 +13656,8 @@ ffe_printable_name (tree decl, int v)\n    an error.  */\n \n static void\n-lang_print_error_function (diagnostic_context *context __attribute__((unused)),\n-                           const char *file)\n+ffe_print_error_function (diagnostic_context *context __attribute__((unused)),\n+\t\t\t  const char *file)\n {\n   static ffeglobal last_g = NULL;\n   static ffesymbol last_s = NULL;\n@@ -14227,6 +14228,8 @@ static void ffe_mark_tree (tree);\n #define LANG_HOOKS_PRINT_IDENTIFIER\tffe_print_identifier\n #undef  LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tffe_printable_name\n+#undef  LANG_HOOKS_PRINT_ERROR_FUNCTION\n+#define LANG_HOOKS_PRINT_ERROR_FUNCTION ffe_print_error_function\n #undef  LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE\tffe_type_for_mode\n #undef  LANG_HOOKS_TYPE_FOR_SIZE\n@@ -14293,7 +14296,6 @@ ffe_init (filename)\n #endif\n \n   ffecom_init_decl_processing ();\n-  print_error_function = lang_print_error_function;\n \n   /* If the file is output from cpp, it should contain a first line\n      `# 1 \"real-filename\"', and the current design of gcc (toplev.c"}, {"sha": "a7776f1952a7d4c204f52bac6d10f36de5d46073", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -1,3 +1,12 @@\n+2002-03-31  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* lang.c (LANG_HOOKS_PRINT_ERROR_FUNCTION): Redefine.\n+\t(java_dummy_print): Remove.\n+\t(lang_print_error): Rename.  Exit early if inhibiting output.\n+\t(inhibit_error_printing_function): New.\n+\t(java_init): Don't set hook.\n+\t(lang_init_source): Use new boolean.\n+\n 2002-03-29  Martin Kahlert  <martin.kahlert@infineon.com>\n \n \t* parse.y (do_resolve_class): Fix infinite recursion."}, {"sha": "b56eea4ab167f796d234c9ab72d5a520846380e3", "filename": "gcc/java/lang.c", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -54,8 +54,8 @@ static void java_init_options PARAMS ((void));\n static int java_decode_option PARAMS ((int, char **));\n static void put_decl_string PARAMS ((const char *, int));\n static void put_decl_node PARAMS ((tree));\n-static void java_dummy_print PARAMS ((diagnostic_context *, const char *));\n-static void lang_print_error PARAMS ((diagnostic_context *, const char *));\n+static void java_print_error_function PARAMS ((diagnostic_context *,\n+\t\t\t\t\t       const char *));\n static int process_option_with_no PARAMS ((const char *,\n \t\t\t\t\t   const struct string_option *,\n \t\t\t\t\t   int));\n@@ -101,6 +101,10 @@ const char *const tree_code_name[] = {\n };\n #undef DEFTREECODE\n \n+/* Used to avoid printing error messages with bogus function\n+   prototypes.  Starts out false.  */\n+static bool inhibit_error_function_printing;\n+\n int compiling_from_source;\n \n char * resource_name;\n@@ -231,6 +235,8 @@ static int dependency_tracking = 0;\n #define LANG_HOOKS_DUP_LANG_SPECIFIC_DECL java_dup_lang_specific_decl\n #undef LANG_HOOKS_DECL_PRINTABLE_NAME\n #define LANG_HOOKS_DECL_PRINTABLE_NAME lang_printable_name\n+#undef LANG_HOOKS_PRINT_ERROR_FUNCTION\n+#define LANG_HOOKS_PRINT_ERROR_FUNCTION\tjava_print_error_function\n #undef LANG_HOOKS_TYPE_FOR_MODE\n #define LANG_HOOKS_TYPE_FOR_MODE java_type_for_mode\n #undef LANG_HOOKS_TYPE_FOR_SIZE\n@@ -516,8 +522,6 @@ java_init (filename)\n   jcf_path_init ();\n   jcf_path_seal (version_flag);\n \n-  print_error_function = lang_print_error;\n-\n   java_init_decl_processing ();\n \n   using_eh_for_cleanups ();\n@@ -643,7 +647,7 @@ put_decl_node (node)\n /* Return a user-friendly name for DECL.\n    The resulting string is only valid until the next call.\n    The value of the hook decl_printable_name is this function,\n-   which is also called directly by lang_print_error. */\n+   which is also called directly by java_print_error_function. */\n \n const char *\n lang_printable_name (decl, v)\n@@ -672,10 +676,10 @@ lang_printable_name_wls (decl, v)\n }\n \n /* Print on stderr the current class and method context.  This function\n-   is the value of the hook print_error_function, called from toplev.c. */\n+   is the value of the hook print_error_function. */\n \n static void\n-lang_print_error (context, file)\n+java_print_error_function (context, file)\n      diagnostic_context *context __attribute__((__unused__));\n      const char *file;\n {\n@@ -692,6 +696,10 @@ lang_print_error (context, file)\n       initialized_p = 1;\n     }\n \n+  /* Don't print error messages with bogus function prototypes.  */\n+  if (inhibit_error_function_printing)\n+    return;\n+\n   if (current_function_decl != NULL\n       && DECL_CONTEXT (current_function_decl) != last_error_function_context)\n     {\n@@ -723,31 +731,17 @@ lang_print_error (context, file)\n \n }\n \n-/* This doesn't do anything on purpose. It's used to satisfy the\n-   print_error_function hook we don't print error messages with bogus\n-   function prototypes.  */\n-\n-static void\n-java_dummy_print (c, s)\n-     diagnostic_context *c __attribute__ ((__unused__));\n-     const char *s __attribute__ ((__unused__));\n-{\n-}\n-\n /* Called to install the PRINT_ERROR_FUNCTION hook differently\n    according to LEVEL. LEVEL is 1 during early parsing, when function\n-   prototypes aren't fully resolved. print_error_function is set so it\n-   doesn't print incomplete function prototypes. When LEVEL is 2,\n-   function prototypes are fully resolved and can be printed when\n+   prototypes aren't fully resolved. java_print_error_function is set\n+   so it doesn't print incomplete function prototypes. When LEVEL is\n+   2, function prototypes are fully resolved and can be printed when\n    reporting errors.  */\n \n void lang_init_source (level)\n      int level;\n {\n-  if (level == 1)\n-    print_error_function = java_dummy_print;\n-  else \n-    print_error_function = lang_print_error;\n+  inhibit_error_function_printing = (level == 1);\n }\n \n static void"}, {"sha": "8ffd2a8af37bb3846f42eb564b3241e07d7d211e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -22,6 +22,8 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_LANG_HOOKS_DEF_H\n #define GCC_LANG_HOOKS_DEF_H\n \n+struct diagnostic_context;\n+\n /* Provide a hook routine for alias sets that always returns 1.  This is\n    used by languages that haven't deal with alias sets yet.  */\n extern HOST_WIDE_INT hook_get_alias_set_0\tPARAMS ((tree));\n@@ -50,6 +52,8 @@ extern void lhd_print_tree_nothing PARAMS ((FILE *, tree, int));\n extern const char *lhd_decl_printable_name PARAMS ((tree, int));\n extern void lhd_set_yydebug PARAMS ((int));\n extern rtx lhd_expand_expr PARAMS ((tree, rtx, enum machine_mode, int));\n+extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n+\t\t\t\t\t      const char *));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -93,6 +97,7 @@ tree lhd_tree_inlining_convert_parm_for_inlining PARAMS ((tree, tree, tree));\n #define LANG_HOOKS_PRINT_DECL\t\tlhd_print_tree_nothing\n #define LANG_HOOKS_PRINT_TYPE\t\tlhd_print_tree_nothing\n #define LANG_HOOKS_PRINT_IDENTIFIER\tlhd_print_tree_nothing\n+#define LANG_HOOKS_PRINT_ERROR_FUNCTION lhd_print_error_function\n #define LANG_HOOKS_DECL_PRINTABLE_NAME\tlhd_decl_printable_name\n #define LANG_HOOKS_SET_YYDEBUG\t\tlhd_set_yydebug\n \n@@ -202,6 +207,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_PRINT_TYPE, \\\n   LANG_HOOKS_PRINT_IDENTIFIER, \\\n   LANG_HOOKS_DECL_PRINTABLE_NAME, \\\n+  LANG_HOOKS_PRINT_ERROR_FUNCTION, \\\n   LANG_HOOKS_SET_YYDEBUG, \\\n   LANG_HOOKS_TREE_INLINING_INITIALIZER, \\\n   LANG_HOOKS_TREE_DUMP_INITIALIZER, \\"}, {"sha": "e0aad78212180bae285b45f7aae1389e7bacc990", "filename": "gcc/langhooks.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7cb32822701d0ce49aae361f576c9c9dc31bb2f3/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=7cb32822701d0ce49aae361f576c9c9dc31bb2f3", "patch": "@@ -23,6 +23,8 @@ Boston, MA 02111-1307, USA.  */\n \n /* This file should be #include-d after tree.h.  */\n \n+struct diagnostic_context;\n+\n /* A print hook for print_tree ().  */\n typedef void (*lang_print_tree_hook) PARAMS ((FILE *, tree, int indent));\n \n@@ -239,6 +241,10 @@ struct lang_hooks\n      types in C++.  */\n   const char *(*decl_printable_name) PARAMS ((tree decl, int verbosity));\n \n+  /* Called by report_error_function to print out function name.  */\n+  void (*print_error_function) PARAMS ((struct diagnostic_context *,\n+\t\t\t\t\tconst char *));\n+\n   /* Set yydebug for bison-based parsers, when -dy is given on the\n      command line.  By default, if the parameter is non-zero, prints a\n      warning that the front end does not use such a parser.  */"}]}