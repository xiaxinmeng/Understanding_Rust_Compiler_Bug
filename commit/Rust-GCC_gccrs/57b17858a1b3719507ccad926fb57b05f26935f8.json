{"sha": "57b17858a1b3719507ccad926fb57b05f26935f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiMTc4NThhMWIzNzE5NTA3Y2NhZDkyNmZiNTdiMDVmMjY5MzVmOA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-01-22T16:48:27Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-08T17:24:39Z"}, "message": "c++: cross-module __cxa_atexit use [PR 98531]\n\nThe compiler's use of lazily-declared library functions must insert\nsaid functions into a symbol table, so that they can be correctly\nmerged across TUs at the module-level.  We have too many different\nways of declaring such library functions.  This fixes __cxa_atexit (or\nits system-specific variations), pushing (or merging) the decl into\nthe appropriate namespace.  Because we're pushing a lazy builtin,\ncheck_redeclaration_exception_specification needed a tweak to allow a\nsuch a builtin's eh spec to differ from what the user may have already\ndeclared. (I suspect no all headers declare atexit as noexcept.)\n\nWe can't test the -fno-use-cxa-atexit path with modules, as that\nrequires a followup patch to a closely related piece (which also\naffects cxa_atexit targets in other circumstances).\n\n\tPR c++/98531\n\tgcc/cp/\n\t* cp-tree.h (push_abi_namespace, pop_abi_namespace): Declare.\n\t* decl.c (push_abi_namespace, pop_abi_namespace): Moved\n\tfrom rtti.c, add default namespace arg.\n\t(check_redeclaration_exception_specification): Allow a lazy\n\tbuiltin's eh spec to differ from an lready-declared user\n\tdeclaration.\n\t(declare_global_var): Use push/pop_abi_namespace.\n\t(get_atexit_node): Push the fndecl into a namespace.\n\t* rtti.c (push_abi_namespace, pop_abi_namespace): Moved to\n\tdecl.c.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr98531-1.h: New.\n\t* g++.dg/modules/pr98531-1_a.H: New.\n\t* g++.dg/modules/pr98531-1_b.C: New.\n\t* g++.dg/abi/pr98531-1.C: New.\n\t* g++.dg/abi/pr98531-2.C: New.\n\t* g++.dg/abi/pr98531-3.C: New.\n\t* g++.dg/abi/pr98531-4.C: New.", "tree": {"sha": "96f2880edc112c71b8d86723b5e9adae1621d2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/96f2880edc112c71b8d86723b5e9adae1621d2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b17858a1b3719507ccad926fb57b05f26935f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b17858a1b3719507ccad926fb57b05f26935f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b17858a1b3719507ccad926fb57b05f26935f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b17858a1b3719507ccad926fb57b05f26935f8/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "432b9f610dfb8a1c995c4752fe7b452cb1cd793b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/432b9f610dfb8a1c995c4752fe7b452cb1cd793b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/432b9f610dfb8a1c995c4752fe7b452cb1cd793b"}], "stats": {"total": 195, "additions": 167, "deletions": 28}, "files": [{"sha": "4ed3936ade27435f02a41958476b4524d8fbaeec", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -193,7 +193,9 @@ enum cp_tree_index\n \n     CPTI_MODULE_HWM,\n     /* Nodes after here change during compilation, or should not be in\n-       the module's global tree table.  */\n+       the module's global tree table.  Such nodes must be locatable\n+       via name lookup or type-construction, as those are the only\n+       cross-TU matching capabilities remaining.  */\n \n     /* We must find these via the global namespace.  */\n     CPTI_STD,\n@@ -6625,6 +6627,9 @@ extern tree make_typename_type\t\t\t(tree, tree, enum tag_types, tsubst_flags_t);\n extern tree build_typename_type\t\t\t(tree, tree, tree, tag_types);\n extern tree make_unbound_class_template\t\t(tree, tree, tree, tsubst_flags_t);\n extern tree make_unbound_class_template_raw\t(tree, tree, tree);\n+extern unsigned push_abi_namespace\t\t(tree node = abi_node);\n+extern void pop_abi_namespace\t\t\t(unsigned flags,\n+\t\t\t\t\t\t tree node = abi_node);\n extern tree build_library_fn_ptr\t\t(const char *, tree, int);\n extern tree build_cp_library_fn_ptr\t\t(const char *, tree, int);\n extern tree push_library_fn\t\t\t(tree, tree, tree, int);"}, {"sha": "4ddee2160165ec4ed406ee4d7832a998a6d578bc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -1209,7 +1209,8 @@ check_redeclaration_exception_specification (tree new_decl,\n      all declarations, including the definition and an explicit\n      specialization, of that function shall have an\n      exception-specification with the same set of type-ids.  */\n-  if (! DECL_IS_UNDECLARED_BUILTIN (old_decl)\n+  if (!DECL_IS_UNDECLARED_BUILTIN (old_decl)\n+      && !DECL_IS_UNDECLARED_BUILTIN (new_decl)\n       && !comp_except_specs (new_exceptions, old_exceptions, ce_normal))\n     {\n       const char *const msg\n@@ -4696,6 +4697,30 @@ cxx_init_decl_processing (void)\n     using_eh_for_cleanups ();\n }\n \n+/* Enter an abi node in global-module context.  returns a cookie to\n+   give to pop_abi_namespace.  */\n+\n+unsigned\n+push_abi_namespace (tree node)\n+{\n+  push_nested_namespace (node);\n+  push_visibility (\"default\", 2);\n+  unsigned flags = module_kind;\n+  module_kind = 0;\n+  return flags;\n+}\n+\n+/* Pop an abi namespace, FLAGS is the cookie push_abi_namespace gave\n+   you.  */\n+\n+void\n+pop_abi_namespace (unsigned flags, tree node)\n+{\n+  module_kind = flags;\n+  pop_visibility (2);\n+  pop_nested_namespace (node);\n+}\n+\n /* Create the VAR_DECL for __FUNCTION__ etc. ID is the name to give\n    the decl, LOC is the location to give the decl, NAME is the\n    initialization string and TYPE_DEP indicates whether NAME depended\n@@ -8687,21 +8712,19 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n static tree\n declare_global_var (tree name, tree type)\n {\n-  tree decl;\n-\n-  push_to_top_level ();\n-  decl = build_decl (input_location, VAR_DECL, name, type);\n+  auto cookie = push_abi_namespace (global_namespace);\n+  tree decl = build_decl (input_location, VAR_DECL, name, type);\n   TREE_PUBLIC (decl) = 1;\n   DECL_EXTERNAL (decl) = 1;\n   DECL_ARTIFICIAL (decl) = 1;\n-  DECL_CONTEXT (decl) = FROB_CONTEXT (global_namespace);\n+  DECL_CONTEXT (decl) = FROB_CONTEXT (current_namespace);\n   /* If the user has explicitly declared this variable (perhaps\n      because the code we are compiling is part of a low-level runtime\n      library), then it is possible that our declaration will be merged\n      with theirs by pushdecl.  */\n   decl = pushdecl (decl);\n   cp_finish_decl (decl, NULL_TREE, false, NULL_TREE, 0);\n-  pop_from_top_level ();\n+  pop_abi_namespace (cookie, global_namespace);\n \n   return decl;\n }\n@@ -8746,6 +8769,7 @@ get_atexit_node (void)\n   tree fn_ptr_type;\n   const char *name;\n   bool use_aeabi_atexit;\n+  tree ctx = global_namespace;\n \n   if (atexit_node)\n     return atexit_node;\n@@ -8780,10 +8804,23 @@ get_atexit_node (void)\n       fn_type = build_function_type_list (integer_type_node,\n \t\t\t\t\t  argtype0, argtype1, argtype2,\n \t\t\t\t\t  NULL_TREE);\n+      /* ... which needs noexcept.  */\n+      fn_type = build_exception_variant (fn_type, noexcept_true_spec);\n       if (use_aeabi_atexit)\n-\tname = \"__aeabi_atexit\";\n+\t{\n+\t  name = \"__aeabi_atexit\";\n+\t  push_to_top_level ();\n+\t  int n = push_namespace (get_identifier (\"__aeabiv1\"), false);\n+\t  ctx = current_namespace;\n+\t  while (n--)\n+\t    pop_namespace ();\n+\t  pop_from_top_level ();\n+\t}\n       else\n-\tname = \"__cxa_atexit\";\n+\t{\n+\t  name = \"__cxa_atexit\";\n+\t  ctx = abi_node;\n+\t}\n     }\n   else\n     {\n@@ -8797,12 +8834,23 @@ get_atexit_node (void)\n       /* Build the final atexit type.  */\n       fn_type = build_function_type_list (integer_type_node,\n \t\t\t\t\t  fn_ptr_type, NULL_TREE);\n+      /* ... which needs noexcept.  */\n+      fn_type = build_exception_variant (fn_type, noexcept_true_spec);\n       name = \"atexit\";\n     }\n \n   /* Now, build the function declaration.  */\n   push_lang_context (lang_name_c);\n+  auto cookie = push_abi_namespace (ctx);\n   atexit_fndecl = build_library_fn_ptr (name, fn_type, ECF_LEAF | ECF_NOTHROW);\n+  DECL_CONTEXT (atexit_fndecl) = FROB_CONTEXT (current_namespace);\n+  /* Install as hidden builtin so we're (a) more relaxed about\n+    exception spec matching and (b) will not give a confusing location\n+    in diagnostic and (c) won't magically appear in user-visible name\n+    lookups.  */\n+  DECL_SOURCE_LOCATION (atexit_fndecl) = BUILTINS_LOCATION;\n+  atexit_fndecl = pushdecl (atexit_fndecl, /*hiding=*/true);\n+  pop_abi_namespace (cookie, ctx);\n   mark_used (atexit_fndecl);\n   pop_lang_context ();\n   atexit_node = decay_conversion (atexit_fndecl, tf_warning_or_error);"}, {"sha": "b41d95469c6d17532e2172c3d8b68a14fcd73fd6", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -143,24 +143,6 @@ static bool typeinfo_in_lib_p (tree);\n \n static int doing_runtime = 0;\n \f\n-static unsigned\n-push_abi_namespace (void)\n-{\n-  push_nested_namespace (abi_node);\n-  push_visibility (\"default\", 2);\n-  unsigned flags = module_kind;\n-  module_kind = 0;\n-  return flags;\n-}\n-\n-static void\n-pop_abi_namespace (unsigned flags)\n-{\n-  module_kind = flags;\n-  pop_visibility (2);\n-  pop_nested_namespace (abi_node);\n-}\n-\n /* Declare language defined type_info type and a pointer to const\n    type_info.  This is incomplete here, and will be completed when\n    the user #includes <typeinfo>.  There are language defined"}, {"sha": "dc9ad99fccfff3f8865a9412ee728c458497640e", "filename": "gcc/testsuite/g++.dg/abi/pr98531-1.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-1.C?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+// PR 98531  Making __cxa_atexit (or atexit) more visible means it\n+// must be consistent with the std library's declarations\n+\n+struct C\n+{\n+  ~C () noexcept;\n+  C () noexcept;\n+};\n+\n+C &frob ()\n+{\n+  static C c; // Requires atexit functionality\n+\n+  return c;\n+}\n+\n+// Make sure this agrees with what we introduced above\n+#include <cxxabi.h>\n+#include <cstdlib>"}, {"sha": "4bdf9b9ca0fab6fb72a68b1799317663ff658bea", "filename": "gcc/testsuite/g++.dg/abi/pr98531-2.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-2.C?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,20 @@\n+// { dg-do compile { target c++11 } }\n+// PR 98531  Making __cxa_atexit (or atexit) more visible means it\n+// must be consistent with the std library's declarations\n+\n+// Make sure this agrees with what we introduce below\n+#include <cxxabi.h>\n+#include <cstdlib>\n+\n+struct C\n+{\n+  ~C () noexcept;\n+  C () noexcept;\n+};\n+\n+C &frob ()\n+{\n+  static C c; // Requires atexit functionality\n+\n+  return c;\n+}"}, {"sha": "de6129dc80839ec0f1415c4b6faf3e2a780c4fcf", "filename": "gcc/testsuite/g++.dg/abi/pr98531-3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-3.C?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,21 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fno-use-cxa-atexit }\n+// PR 98531  Making __cxa_atexit (or atexit) more visible means it\n+// must be consistent with the std library's declarations\n+\n+extern \"C\" int atexit (void (*) (void));\n+\n+struct C\n+{\n+  ~C () noexcept;\n+  C () noexcept;\n+};\n+\n+C &frob ()\n+{\n+  static C c; // Requires atexit functionality\n+\n+  return c;\n+}\n+\n+"}, {"sha": "ec64ee07a17be8510179ce217e4875b825f3b858", "filename": "gcc/testsuite/g++.dg/abi/pr98531-4.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fpr98531-4.C?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,19 @@\n+// { dg-do compile { target c++11 } }\n+// { dg-additional-options -fno-use-cxa-atexit }\n+// PR 98531  Making __cxa_atexit (or atexit) more visible means it\n+// must be consistent with the std library's declarations\n+\n+struct C\n+{\n+  ~C () noexcept;\n+  C () noexcept;\n+};\n+\n+C &frob ()\n+{\n+  static C c; // Requires atexit functionality\n+\n+  return c;\n+}\n+\n+extern \"C\" int atexit (void (*) (void));"}, {"sha": "62d4c1d1f902ce2ba118f187293950ac164829e0", "filename": "gcc/testsuite/g++.dg/modules/pr98531-1.h", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1.h?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,13 @@\n+\n+struct __waiters\n+{\n+  __waiters() noexcept;\n+  ~__waiters () noexcept;\n+\n+  static __waiters &_S_for()\n+  {\n+    static __waiters w;\n+    \n+    return w;\n+  }\n+};"}, {"sha": "cbd2090b4c1d632f3f59e6beb8cbc2e8c07814ce", "filename": "gcc/testsuite/g++.dg/modules/pr98531-1_a.H", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_a.H?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,6 @@\n+// { dg-require-cxa-atexit \"\" }\n+// { dg-additional-options \"-fmodule-header -fuse-cxa-atexit\" }\n+// PR c++ 98531  no-context __cxa_atexit\n+// { dg-module-cmi {} }\n+\n+#include \"pr98531-1.h\""}, {"sha": "096cdc8c08a3df53308ade58b6e186057461bed9", "filename": "gcc/testsuite/g++.dg/modules/pr98531-1_b.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b17858a1b3719507ccad926fb57b05f26935f8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr98531-1_b.C?ref=57b17858a1b3719507ccad926fb57b05f26935f8", "patch": "@@ -0,0 +1,5 @@\n+// { dg-require-cxa-atexit \"\" }\n+// { dg-additional-options \"-fmodules-ts -fno-module-lazy -fuse-cxa-atexit\" }\n+\n+#include \"pr98531-1.h\"\n+import \"pr98531-1_a.H\";"}]}