{"sha": "7606e68f7bb875c16efb0831ecfd7526a962b77e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYwNmU2OGY3YmI4NzVjMTZlZmIwODMxZWNmZDc1MjZhOTYyYjc3ZQ==", "commit": {"author": {"name": "Stan Shebs", "email": "shebs@apple.com", "date": "2002-09-13T03:44:54Z"}, "committer": {"name": "Stan Shebs", "email": "shebs@gcc.gnu.org", "date": "2002-09-13T03:44:54Z"}, "message": "target.h (struct gcc_target): New field terminate_dw2_eh_frame_info.\n\n        * target.h (struct gcc_target): New field\n        terminate_dw2_eh_frame_info.\n        * target-def.h (TARGET_TERMINATE_DW2_EH_FRAME_INFO): Define.\n        (TARGET_INITIALIZER): Add it.\n        * dwarf2out.c (output_call_frame_info): Use target hook.\n        * dwarf2asm.c (dw2_asm_output_delta): Use macro\n        ASM_OUTPUT_DWARF_DELTA if defined.\n        * doc/tm.texi (TARGET_TERMINATE_DW2_EH_FRAME_INFO): Document.\n        (ASM_OUTPUT_DWARF_DELTA): Ditto.\n        (ASM_OUTPUT_DWARF_OFFSET): Ditto.\n        (ASM_OUTPUT_DWARF_PCREL): Ditto.\n        * config.gcc (i[34567]86-*-darwin*): Define extra_parts.\n        (powerpc-*-darwin*): Ditto.\n        * crtstuff.c [OBJECT_FORMAT_MACHO]: Update the Mach-O bits\n        to work correctly for Darwin.\n        * config/darwin.h (OBJECT_FORMAT_MACHO): Define.\n        (STARTFILE_SPEC): Add crtbegin.o.\n        (ENDFILE_SPEC): Define.\n        (EXTRA_SECTION_FUNCTIONS): Put gcc_except_tab in data segment.\n        (ASM_PREFERRED_EH_DATA_FORMAT): Handle more cases.\n        (ASM_OUTPUT_DWARF_DELTA): Define.\n        (TARGET_TERMINATE_DW2_EH_FRAME_INFO): Define.\n        * config/darwin.c (darwin_asm_output_dwarf_delta): New function.\n\nFrom-SVN: r57089", "tree": {"sha": "9d8b83093127fbc3b7a523ef893b097ff59eb9b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8b83093127fbc3b7a523ef893b097ff59eb9b5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7606e68f7bb875c16efb0831ecfd7526a962b77e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606e68f7bb875c16efb0831ecfd7526a962b77e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7606e68f7bb875c16efb0831ecfd7526a962b77e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7606e68f7bb875c16efb0831ecfd7526a962b77e/comments", "author": null, "committer": null, "parents": [{"sha": "20b71b177f96921842390ddd9b6e46e45a62451f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20b71b177f96921842390ddd9b6e46e45a62451f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20b71b177f96921842390ddd9b6e46e45a62451f"}], "stats": {"total": 229, "additions": 177, "deletions": 52}, "files": [{"sha": "a5bdc1d005962ff16a226d9931ff729f770de5a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -1,3 +1,29 @@\n+2002-09-12  Stan Shebs  <shebs@apple.com>\n+\n+\t* target.h (struct gcc_target): New field\n+\tterminate_dw2_eh_frame_info.\n+\t* target-def.h (TARGET_TERMINATE_DW2_EH_FRAME_INFO): Define.\n+\t(TARGET_INITIALIZER): Add it.\n+\t* dwarf2out.c (output_call_frame_info): Use target hook.\n+\t* dwarf2asm.c (dw2_asm_output_delta): Use macro\n+\tASM_OUTPUT_DWARF_DELTA if defined.\n+\t* doc/tm.texi (TARGET_TERMINATE_DW2_EH_FRAME_INFO): Document.\n+\t(ASM_OUTPUT_DWARF_DELTA): Ditto.\n+\t(ASM_OUTPUT_DWARF_OFFSET): Ditto.\n+\t(ASM_OUTPUT_DWARF_PCREL): Ditto.\n+\t* config.gcc (i[34567]86-*-darwin*): Define extra_parts.\n+\t(powerpc-*-darwin*): Ditto.\n+\t* crtstuff.c [OBJECT_FORMAT_MACHO]: Update the Mach-O bits\n+\tto work correctly for Darwin.\n+\t* config/darwin.h (OBJECT_FORMAT_MACHO): Define.\n+\t(STARTFILE_SPEC): Add crtbegin.o.\n+\t(ENDFILE_SPEC): Define.\n+\t(EXTRA_SECTION_FUNCTIONS): Put gcc_except_tab in data segment.\n+\t(ASM_PREFERRED_EH_DATA_FORMAT): Handle more cases.\n+\t(ASM_OUTPUT_DWARF_DELTA): Define.\n+\t(TARGET_TERMINATE_DW2_EH_FRAME_INFO): Define.\n+\t* config/darwin.c (darwin_asm_output_dwarf_delta): New function.\n+\n 2002-09-13  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_emit_load_toc_table): Remove \"if\""}, {"sha": "e7bdc16607846da0481f68ee5f447a06b3d255e0", "filename": "gcc/config.gcc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -980,6 +980,7 @@ i[34567]86-*-darwin*)\n \ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n \tc_target_objs=\"darwin-c.o\"\n \tcxx_target_objs=\"darwin-c.o\"\n+\textra_parts=\"crtbegin.o crtend.o\"\n \t# Darwin linker does collect2 functionality\n \tuse_collect2=no\n \t;;\n@@ -1946,6 +1947,7 @@ powerpc-*-darwin*)\n \ttarget_gtfiles=\"\\$(srcdir)/config/darwin.c\"\n \tc_target_objs=\"darwin-c.o\"\n \tcxx_target_objs=\"darwin-c.o\"\n+\textra_parts=\"crtbegin.o crtend.o\"\n \t# Darwin linker does collect2 functionality\n \tuse_collect2=no\n \textra_headers=altivec.h"}, {"sha": "670a57aa3d86580864385f1cd563120c291c5a4d", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -1275,5 +1275,34 @@ darwin_globalize_label (stream, name)\n     default_globalize_label (stream, name);\n }\n \n+/* Output a difference of two labels that will be an assembly time\n+   constant if the two labels are local.  (.long lab1-lab2 will be\n+   very different if lab1 is at the boundary between two sections; it\n+   will be relocated according to the second section, not the first,\n+   so one ends up with a difference between labels in different\n+   sections, which is bad in the dwarf2 eh context for instance.)  */\n+\n+static int darwin_dwarf_label_counter;\n+\n+void\n+darwin_asm_output_dwarf_delta (file, size, lab1, lab2)\n+     FILE *file;\n+     int size ATTRIBUTE_UNUSED;\n+     const char *lab1, *lab2;\n+{\n+  const char *p = lab1 + (lab1[0] == '*');\n+  int islocaldiff = (p[0] == 'L');\n+\n+  if (islocaldiff)\n+    fprintf (file, \"\\t.set L$set$%d,\", darwin_dwarf_label_counter);\n+  else\n+    fprintf (file, \"\\t%s\\t\", \".long\");\n+  assemble_name (file, lab1);\n+  fprintf (file, \"-\");\n+  assemble_name (file, lab2);\n+  if (islocaldiff)\n+    fprintf (file, \"\\n\\t.long L$set$%d\", darwin_dwarf_label_counter++);\n+}\n+\n #include \"gt-darwin.h\"\n "}, {"sha": "0c327b93b3071152063af1b528c2e6aa0ce8a20c", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -35,6 +35,12 @@ Boston, MA 02111-1307, USA.  */\n    leave it undefined and expect system builders to set configure args\n    correctly.  */\n \n+/* One of Darwin's NeXT legacies is the Mach-O format, which is partly\n+   like a.out and partly like COFF, with additional features like\n+   multi-architecture binary support.  */\n+\n+#define OBJECT_FORMAT_MACHO\n+\n /* Suppress g++ attempt to link in the math library automatically.\n    (Some Darwin versions have a libm, but they seem to cause problems\n    for C++ executables.)  */\n@@ -92,8 +98,12 @@ Boston, MA 02111-1307, USA.  */\n \n #undef\tSTARTFILE_SPEC\n #define STARTFILE_SPEC  \\\n-  \"%{pg:%{static:-lgcrt0.o}%{!static:-lgcrt1.o}} \\\n-    %{!pg:%{static:-lcrt0.o}%{!static:-lcrt1.o}}\"\n+  \"%{pg:%{static:-lgcrt0.o}%{!static:-lgcrt1.o -lcrtbegin.o}} \\\n+    %{!pg:%{static:-lcrt0.o}%{!static:-lcrt1.o -lcrtbegin.o}}\"\n+\n+#undef\tENDFILE_SPEC\n+#define ENDFILE_SPEC \\\n+  \"-lcrtend.o\"\n \n #undef\tDOLLARS_IN_IDENTIFIERS\n #define DOLLARS_IN_IDENTIFIERS 2\n@@ -131,7 +141,6 @@ do { text_section ();\t\t\t\t\t\t\t\\\n #define TARGET_ASM_CONSTRUCTOR  machopic_asm_out_constructor\n #define TARGET_ASM_DESTRUCTOR   machopic_asm_out_destructor\n \n-\n /* Don't output a .file directive.  That is only used by the assembler for\n    error reporting.  */\n \n@@ -425,7 +434,7 @@ SECTION_FUNCTION (machopic_picsymbol_stub_section,\t\\\n \t\t\".picsymbol_stub\", 0)      \t\t\\\n SECTION_FUNCTION (darwin_exception_section,\t\t\\\n \t\tin_darwin_exception,\t\t\t\\\n-\t\t\".section __TEXT,__gcc_except_tab\", 0)\t\\\n+\t\t\".section __DATA,__gcc_except_tab\", 0)\t\\\n SECTION_FUNCTION (darwin_eh_frame_section,\t\t\\\n \t\tin_darwin_eh_frame,\t\t\t\\\n \t\t\".section __TEXT,__eh_frame\", 0)\t\\\n@@ -597,7 +606,14 @@ enum machopic_addr_class {\n   \n #undef ASM_PREFERRED_EH_DATA_FORMAT\n #define ASM_PREFERRED_EH_DATA_FORMAT(CODE,GLOBAL)  \\\n-  (((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n+  (((CODE) == 2 && (GLOBAL) == 1) \\\n+   ? (DW_EH_PE_pcrel | DW_EH_PE_indirect) : \\\n+     ((CODE) == 1 || (GLOBAL) == 0) ? DW_EH_PE_pcrel : DW_EH_PE_absptr)\n+\n+#define ASM_OUTPUT_DWARF_DELTA(FILE,SIZE,LABEL1,LABEL2)  \\\n+  darwin_asm_output_dwarf_delta (FILE, SIZE, LABEL1, LABEL2)\n+\n+#define TARGET_TERMINATE_DW2_EH_FRAME_INFO false\n \n #define DARWIN_REGISTER_TARGET_PRAGMAS(PFILE)\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "125e236ee9c6cea6241fa7717de8aa0bff969b25", "filename": "gcc/crtstuff.c", "status": "modified", "additions": 58, "deletions": 42, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fcrtstuff.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fcrtstuff.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcrtstuff.c?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -545,64 +545,80 @@ __do_global_ctors (void)\n \n #else  /* OBJECT_FORMAT_MACHO */\n \n-/* For Mach-O format executables, we assume that the system's runtime is\n-   smart enough to handle constructors and destructors, but doesn't have\n-   an init section (if it can't even handle constructors/destructors\n-   you should be using INVOKE__main, not crtstuff). All we need to do\n-   is install/deinstall the frame information for exceptions. We do this\n-   by putting a constructor in crtbegin.o and a destructor in crtend.o.\n-\n-   crtend.o also puts in the terminating zero in the frame information\n-   segment.  */\n-\n-/* The crtstuff for other object formats use the symbol __EH_FRAME_BEGIN__\n-   to figure out the start of the exception frame, but here we use\n-   getsectbynamefromheader to find this value. Either method would work,\n-   but this method avoids creating any global symbols, which seems\n-   cleaner.  */\n-\n-#include <mach-o/ldsyms.h>\n-extern const struct section *\n-  getsectbynamefromheader (const struct mach_header *,\n-\t\t\t   const char *, const char *);\n+/* Crt stuff for Mach-O (NeXT and Darwin).\n+\n+   The theory of this is that each dynamically-loadable module,\n+   including the main program itself, must have been positioned by\n+   dyld before any frame info can be registered.  So we set up the\n+   registration functions as dyld hooks, using a \"preregistration\"\n+   function that is called directly from the system crt1.o.  */\n \n #ifdef CRT_BEGIN\n \n-static void __reg_frame_ctor (void) __attribute__ ((constructor));\n+/* Homemade decls substituting for getsect.h and dyld.h, so cross\n+   compilation works.  */\n+struct mach_header;\n+extern char *getsectdatafromheader (struct mach_header *, const char *,\n+\t\t\t\t    const char *, unsigned long *);\n+extern void _dyld_register_func_for_add_image\n+  (void (*) (struct mach_header *, unsigned long));\n+extern void _dyld_register_func_for_remove_image\n+  (void (*) (struct mach_header *, unsigned long));\n+\n+extern void __darwin_gcc3_preregister_frame_info (void);\n \n static void\n-__reg_frame_ctor (void)\n+unwind_dyld_add_image_hook (struct mach_header *mh,\n+\t\t\t    unsigned long vm_slide)\n {\n-  static struct object object;\n-  const struct section *eh_frame;\n+  unsigned long sz;\n+  char *fde;\n \n-  eh_frame = getsectbynamefromheader (&_mh_execute_header,\n-\t\t\t\t      \"__TEXT\", \"__eh_frame\");\n-  __register_frame_info ((void *) eh_frame->addr, &object);\n-}\n-\n-#elif defined(CRT_END)\n+  fde = getsectdatafromheader (mh, \"__TEXT\", \"__eh_frame\", &sz);\n+  if (fde)\n+    {\n+      struct object *ob = (struct object *) malloc (sizeof (struct object));\n \n-static void __dereg_frame_dtor (void) __attribute__ ((destructor));\n+      __register_frame_info (fde + vm_slide, ob);\n+    }\n+}\n \n static void\n-__dereg_frame_dtor (void)\n+unwind_dyld_remove_image_hook (struct mach_header *mh,\n+\t\t\t       unsigned long vm_slide)\n {\n-  const struct section *eh_frame;\n+  unsigned long sz;\n+  char *fde;\n+\n+  fde = getsectdatafromheader (mh, \"__TEXT\", \"__eh_frame\", &sz);\n \n-  eh_frame = getsectbynamefromheader (&_mh_execute_header,\n-\t\t\t\t      \"__TEXT\", \"__eh_frame\");\n-  __deregister_frame_info ((void *) eh_frame->addr);\n+  if (fde)\n+    __deregister_frame_info (fde + vm_slide);\n }\n \n-/* Terminate the frame section with a final zero.  */\n-STATIC int __FRAME_END__[]\n-     __attribute__ ((unused, mode(SI), section(EH_FRAME_SECTION_NAME),\n-\t\t     aligned(4)))\n-     = { 0 };\n+/* Call this routine from the system crt1.o.  The call is standard in\n+   Darwin 6.x (Mac OS X 10.2) and later; for earlier systems, you\n+   would need to modify crt.c in the Csu project.  (This isn't great,\n+   but other alternatives run afoul of linker semantics.  This\n+   function is declared as common and tested before being called, so\n+   that programs compiled by older GCCs still link and run.)  */\n+\n+void\n+__darwin_gcc3_preregister_frame_info ()\n+{\n+  _dyld_register_func_for_add_image (unwind_dyld_add_image_hook);\n+  _dyld_register_func_for_remove_image (unwind_dyld_remove_image_hook);\n+}\n+\n+#elif defined(CRT_END) /* ! CRT_BEGIN */\n+\n+/* Install a single zero word at the end of the __eh_frame section.  */\n+\n+asm (\".section __TEXT,__eh_frame\");\n+asm (\".long 0\");\n \n #else /* ! CRT_BEGIN && ! CRT_END */\n #error \"One of CRT_BEGIN or CRT_END must be defined.\"\n #endif\n \n-#endif /* OBJECT_FORMAT_MACHO */\n+#endif  /* OBJECT_FORMAT_MACHO  */"}, {"sha": "f324982cde4bed758c0937b5dc9d2f6bca07798e", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -7501,6 +7501,13 @@ is a function that outputs a standard GAS section directive, if\n directive followed by a synthetic label.\n @end deftypefn\n \n+@deftypevar {Target Hook} bool TARGET_TERMINATE_DW2_EH_FRAME_INFO\n+Contains the value true if the target should add a zero word onto the\n+end of a Dwarf-2 frame info section when used for exception handling.\n+Default value is false if @code{EH_FRAME_SECTION_NAME} is defined, and\n+true otherwise.\n+@end deftypevar\n+\n @node Alignment Output\n @subsection Assembler Commands for Alignment\n \n@@ -8034,6 +8041,22 @@ Define this macro to be a nonzero value if the assembler can generate Dwarf 2\n line debug info sections.  This will result in much more compact line number\n tables, and hence is desirable if it works.\n \n+@findex ASM_OUTPUT_DWARF_DELTA\n+@item ASM_OUTPUT_DWARF_DELTA (@var{stream}, @var{size}, @var{label1}, @var{label2})\n+A C statement to issue assembly directives that create a difference\n+between the two given labels, using an integer of the given size.\n+\n+@findex ASM_OUTPUT_DWARF_OFFSET\n+@item ASM_OUTPUT_DWARF_OFFSET (@var{stream}, @var{size}, @var{label})\n+A C statement to issue assembly directives that create a\n+section-relative reference to the given label, using an integer of the\n+given size.\n+\n+@findex ASM_OUTPUT_DWARF_PCREL\n+@item ASM_OUTPUT_DWARF_PCREL (@var{stream}, @var{size}, @var{label})\n+A C statement to issue assembly directives that create a self-relative\n+reference to the given label, using an integer of the given size.\n+\n @findex PUT_SDB_@dots{}\n @item PUT_SDB_@dots{}\n Define these macros to override the assembler syntax for the special"}, {"sha": "b80e7c3398f7fcd1e3008cdcb631e529550c8c09", "filename": "gcc/dwarf2asm.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdwarf2asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdwarf2asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2asm.c?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -104,11 +104,14 @@ dw2_asm_output_delta VPARAMS ((int size, const char *lab1, const char *lab2,\n   VA_FIXEDARG (ap, const char *, lab2);\n   VA_FIXEDARG (ap, const char *, comment);\n \n+#ifdef ASM_OUTPUT_DWARF_DELTA\n+  ASM_OUTPUT_DWARF_DELTA (asm_out_file, size, lab1, lab2);\n+#else\n   dw2_assemble_integer (size,\n \t\t\tgen_rtx_MINUS (Pmode,\n \t\t\t\t       gen_rtx_SYMBOL_REF (Pmode, lab1),\n \t\t\t\t       gen_rtx_SYMBOL_REF (Pmode, lab2)));\n-\n+#endif\n   if (flag_debug_asm && comment)\n     {\n       fprintf (asm_out_file, \"\\t%s \", ASM_COMMENT_START);"}, {"sha": "f5503d48d653e56d4800aa7b95f33fdbbdecf595", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -2043,10 +2043,8 @@ output_call_frame_info (for_eh)\n       ASM_OUTPUT_LABEL (asm_out_file, l2);\n     }\n \n-#ifndef EH_FRAME_SECTION_NAME\n-  if (for_eh)\n+  if (for_eh && targetm.terminate_dw2_eh_frame_info)\n     dw2_asm_output_data (4, 0, \"End of Table\");\n-#endif\n #ifdef MIPS_DEBUGGING_INFO\n   /* Work around Irix 6 assembler bug whereby labels at the end of a section\n      get a value of 0.  Putting .align 0 after the label fixes it.  */"}, {"sha": "fbb75f0257f0447bf7ab9f4552d1382d83ac09d1", "filename": "gcc/target-def.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -126,6 +126,14 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_HAVE_SRODATA_SECTION false\n #endif\n \n+#ifndef TARGET_TERMINATE_DW2_EH_FRAME_INFO\n+#ifdef EH_FRAME_SECTION_NAME\n+#define TARGET_TERMINATE_DW2_EH_FRAME_INFO false\n+#else\n+#define TARGET_TERMINATE_DW2_EH_FRAME_INFO true\n+#endif\n+#endif\n+\n #ifndef TARGET_ASM_EXCEPTION_SECTION\n #define TARGET_ASM_EXCEPTION_SECTION default_exception_section\n #endif\n@@ -266,7 +274,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_HAVE_TLS,\t\t\t\t\\\n-  TARGET_HAVE_SRODATA_SECTION\t\t\t\\\n+  TARGET_HAVE_SRODATA_SECTION,\t\t\t\\\n+  TARGET_TERMINATE_DW2_EH_FRAME_INFO\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "2cc950421ffeb6c33ad5e5d891a3e24a08c49abf", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7606e68f7bb875c16efb0831ecfd7526a962b77e/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=7606e68f7bb875c16efb0831ecfd7526a962b77e", "patch": "@@ -269,6 +269,9 @@ struct gcc_target\n \n   /* True if a small readonly data section is supported.  */\n   bool have_srodata_section;\n+\n+  /* True if EH frame info sections should be zero-terminated.  */\n+  bool terminate_dw2_eh_frame_info;\n };\n \n extern struct gcc_target targetm;"}]}