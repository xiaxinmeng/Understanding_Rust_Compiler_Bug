{"sha": "d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhhMGQxM2U0ZmFkNzUyYjNjM2Q5ZmYzZjk3YjAzNDA3YmY4YzcyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-04T21:21:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-04T21:21:02Z"}, "message": "call.c (build_conditional_expr): Never fold in unevaluated context.\n\n\t* call.c (build_conditional_expr): Never fold in unevaluated context.\n\t* tree.c (build_aggr_init_expr): Propagate TREE_NOTHROW.\n\t* semantics.c (simplify_aggr_init_expr): Likewise.\n\t* typeck.c (merge_types): Call merge_exception_specifiers.\n\t* decl.c (duplicate_decls): Check DECL_SOURCE_LOCATION rather than\n\tDECL_ANTICIPATED for preferring new type.\n\nFrom-SVN: r160296", "tree": {"sha": "500e4c05021ec336143ffa832ff59b30fe09dc33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/500e4c05021ec336143ffa832ff59b30fe09dc33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bdc6b402f90bde66ba88df483f4f8758f656f840", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc6b402f90bde66ba88df483f4f8758f656f840", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc6b402f90bde66ba88df483f4f8758f656f840"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "190406e0828f45cabbf978dd62e9143d17e58407", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -1,3 +1,12 @@\n+2010-06-04  Jason Merrill  <jason@redhat.com>\n+\n+\t* call.c (build_conditional_expr): Never fold in unevaluated context.\n+\t* tree.c (build_aggr_init_expr): Propagate TREE_NOTHROW.\n+\t* semantics.c (simplify_aggr_init_expr): Likewise.\n+\t* typeck.c (merge_types): Call merge_exception_specifiers.\n+\t* decl.c (duplicate_decls): Check DECL_SOURCE_LOCATION rather than\n+\tDECL_ANTICIPATED for preferring new type.\n+\n 2010-06-04  Joseph Myers  <joseph@codesourcery.com>\n \n \t* g++spec.c (lang_specific_driver): Use GCC-specific formats in"}, {"sha": "03d188bab2e6a6d4ee627fcdd17b0b957d9dd56f", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -3631,7 +3631,6 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n   tree arg2_type;\n   tree arg3_type;\n   tree result = NULL_TREE;\n-  tree result_save;\n   tree result_type = NULL_TREE;\n   bool lvalue_p = true;\n   struct z_candidate *candidates = 0;\n@@ -4020,12 +4019,10 @@ build_conditional_expr (tree arg1, tree arg2, tree arg3,\n     }\n \n  valid_operands:\n-  result_save = build3 (COND_EXPR, result_type, arg1, arg2, arg3);\n-  result = fold_if_not_in_template (result_save);\n-\n-  if (cp_unevaluated_operand && TREE_CODE (result) == CALL_EXPR)\n-    /* Avoid folding to a CALL_EXPR within decltype (c++/42013).  */\n-    result = result_save;\n+  result = build3 (COND_EXPR, result_type, arg1, arg2, arg3);\n+  if (!cp_unevaluated_operand)\n+    /* Avoid folding within decltype (c++/42013) and noexcept.  */\n+    result = fold_if_not_in_template (result);\n \n   /* We can't use result_type below, as fold might have returned a\n      throw_expr.  */"}, {"sha": "82182623e95b84e8c7d499dd4f733547eec5d5a2", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -1286,7 +1286,7 @@ duplicate_decls (tree newdecl, tree olddecl, bool newdecl_is_friend)\n       /* Even if the types match, prefer the new declarations type for\n \t built-ins which have not been explicitly declared, for\n \t exception lists, etc...  */\n-      else if (DECL_ANTICIPATED (olddecl))\n+      else if (DECL_SOURCE_LOCATION (olddecl) == BUILTINS_LOCATION)\n \t{\n \t  tree type = TREE_TYPE (newdecl);\n \t  tree attribs = (*targetm.merge_type_attributes)"}, {"sha": "2d02690a71773bf6d51ce676260ccee818252fa0", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -3255,6 +3255,7 @@ simplify_aggr_init_expr (tree *tp)\n \t\t\t\t    fn,\n \t\t\t\t    aggr_init_expr_nargs (aggr_init_expr),\n \t\t\t\t    AGGR_INIT_EXPR_ARGP (aggr_init_expr));\n+  TREE_NOTHROW (call_expr) = TREE_NOTHROW (aggr_init_expr);\n \n   if (style == ctor)\n     {"}, {"sha": "c4b9dd5b5fb7bb3b422b3c24b839812a1790e34c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -418,6 +418,7 @@ build_aggr_init_expr (tree type, tree init)\n \t\t\t\t      AGGR_INIT_EXPR_ARGP (init));\n       TREE_SIDE_EFFECTS (rval) = 1;\n       AGGR_INIT_VIA_CTOR_P (rval) = is_ctor;\n+      TREE_NOTHROW (rval) = TREE_NOTHROW (init);\n     }\n   else\n     rval = init;"}, {"sha": "a00908e5c3813957490e7c6381583f168993df53", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=d8a0d13e4fad752b3c3d9ff3f97b03407bf8c726", "patch": "@@ -829,26 +829,17 @@ merge_types (tree t1, tree t2)\n \n \t/* Simple way if one arg fails to specify argument types.  */\n \tif (p1 == NULL_TREE || TREE_VALUE (p1) == void_type_node)\n-\t  {\n-\t    parms = p2;\n-\t    raises = TYPE_RAISES_EXCEPTIONS (t2);\n-\t  }\n+\t  parms = p2;\n \telse if (p2 == NULL_TREE || TREE_VALUE (p2) == void_type_node)\n-\t  {\n-\t    parms = p1;\n-\t    raises = TYPE_RAISES_EXCEPTIONS (t1);\n-\t  }\n+\t  parms = p1;\n \telse\n-\t  {\n-\t    parms = commonparms (p1, p2);\n-\t    /* In cases where we're merging a real declaration with a\n-\t       built-in declaration, t1 is the real one.  */\n-\t    raises = TYPE_RAISES_EXCEPTIONS (t1);\n-\t  }\n+\t  parms = commonparms (p1, p2);\n \n \trval = build_function_type (valtype, parms);\n \tgcc_assert (type_memfn_quals (t1) == type_memfn_quals (t2));\n \trval = apply_memfn_quals (rval, type_memfn_quals (t1));\n+\traises = merge_exception_specifiers (TYPE_RAISES_EXCEPTIONS (t1),\n+\t\t\t\t\t     TYPE_RAISES_EXCEPTIONS (t2));\n \tt1 = build_exception_variant (rval, raises);\n \tbreak;\n       }\n@@ -858,7 +849,8 @@ merge_types (tree t1, tree t2)\n \t/* Get this value the long way, since TYPE_METHOD_BASETYPE\n \t   is just the main variant of this.  */\n \ttree basetype = TREE_TYPE (TREE_VALUE (TYPE_ARG_TYPES (t2)));\n-\ttree raises = TYPE_RAISES_EXCEPTIONS (t1);\n+\ttree raises = merge_exception_specifiers (TYPE_RAISES_EXCEPTIONS (t1),\n+\t\t\t\t\t\t  TYPE_RAISES_EXCEPTIONS (t2));\n \ttree t3;\n \n \t/* If this was a member function type, get back to the"}]}