{"sha": "c736294d9bc448674212ca95b255d28fabb71d5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzczNjI5NGQ5YmM0NDg2NzQyMTJjYTk1YjI1NWQyOGZhYmI3MWQ1Zg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2010-06-18T09:09:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-18T09:09:40Z"}, "message": "exp_disp.adb, [...]: Minor reformatting\n\n2010-06-18  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_disp.adb, sem_ch12.adb: Minor reformatting\n\nFrom-SVN: r160967", "tree": {"sha": "4b8901be7a8884235856cb89c74415d38554758a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b8901be7a8884235856cb89c74415d38554758a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c736294d9bc448674212ca95b255d28fabb71d5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c736294d9bc448674212ca95b255d28fabb71d5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c736294d9bc448674212ca95b255d28fabb71d5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c736294d9bc448674212ca95b255d28fabb71d5f/comments", "author": null, "committer": null, "parents": [{"sha": "22cb89b5d64658ab1f9835ff42981e895bbe2dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22cb89b5d64658ab1f9835ff42981e895bbe2dab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22cb89b5d64658ab1f9835ff42981e895bbe2dab"}], "stats": {"total": 91, "additions": 51, "deletions": 40}, "files": [{"sha": "f53ba64bd79b8328a55fa922e039b529aa979437", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=c736294d9bc448674212ca95b255d28fabb71d5f", "patch": "@@ -1,3 +1,7 @@\n+2010-06-18  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_disp.adb, sem_ch12.adb: Minor reformatting\n+\n 2010-06-18  Ed Schonberg  <schonberg@adacore.com>\n \n \t* exp_util.adb (Make_Subtype_From_Expr): If the unconstrained type is"}, {"sha": "717d9739ae4dd01ee074f27bffc91c842058777a", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=c736294d9bc448674212ca95b255d28fabb71d5f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1546,8 +1546,8 @@ package body Exp_Disp is\n             Ftyp := Base_Type (Etype (Target_Formal));\n          end if;\n \n-         --  For concurrent types, the relevant info is on the corresponding_\n-         --  record type.\n+         --  For concurrent types, the relevant information is found in the\n+         --  Corresponding_Record_Type, rather than the type entity itself.\n \n          if Is_Concurrent_Type (Ftyp) then\n             Ftyp := Corresponding_Record_Type (Ftyp);\n@@ -3520,7 +3520,7 @@ package body Exp_Disp is\n            and then not Is_Frozen (Typ)\n          then\n             Error_Msg_Sloc := Sloc (Subp);\n-            Error_Msg_NE\n+            Error_Msg_NE -- CODEFIX???\n               (\"declaration must appear after completion of type &\", N, Typ);\n             Error_Msg_NE\n               (\"\\which is an untagged type in the profile of\"\n@@ -7350,7 +7350,7 @@ package body Exp_Disp is\n                  and then\n                not Is_TSS (Prim, TSS_Stream_Output)\n             then\n-               Error_Msg_NE\n+               Error_Msg_NE -- CODEFIX???\n                  (\"abstract inherited private operation&\" &\n                   \" must be overridden (RM 3.9.3(10))\",\n                  Parent (Typ), Prim);\n@@ -7364,11 +7364,11 @@ package body Exp_Disp is\n \n       if Is_Controlled (Typ) then\n          if not Finalized then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"controlled type has no explicit Finalize method?\", Typ);\n \n          elsif not Adjusted then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"controlled type has no explicit Adjust method?\", Typ);\n          end if;\n       end if;"}, {"sha": "483b4162eda5a1c2b9a3ae63dd79abde61b06699", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 40, "deletions": 33, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c736294d9bc448674212ca95b255d28fabb71d5f/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=c736294d9bc448674212ca95b255d28fabb71d5f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1144,7 +1144,8 @@ package body Sem_Ch12 is\n                Others_Present := True;\n \n                if Present (Next (Actual)) then\n-                  Error_Msg_N (\"others must be last association\", Actual);\n+                  Error_Msg_N -- CODEFIX???\n+                    (\"others must be last association\", Actual);\n                end if;\n \n                --  This subprogram is used both for formal packages and for\n@@ -1834,11 +1835,11 @@ package body Sem_Ch12 is\n \n          if Null_Exclusion_Present (N) then\n             if not Is_Access_Type (T) then\n-               Error_Msg_N\n+               Error_Msg_N -- CODEFIX???\n                  (\"null exclusion can only apply to an access type\", N);\n \n             elsif Can_Never_Be_Null (T) then\n-               Error_Msg_NE\n+               Error_Msg_NE -- CODEFIX???\n                  (\"`NOT NULL` not allowed (& already excludes null)\",\n                     N, T);\n             end if;\n@@ -4088,7 +4089,7 @@ package body Sem_Ch12 is\n         and then Ekind (Gen_Unit) /= E_Generic_Procedure\n       then\n          if Ekind (Gen_Unit) = E_Generic_Function then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot instantiate generic function as procedure\", Gen_Id);\n          else\n             Error_Msg_N\n@@ -4099,7 +4100,7 @@ package body Sem_Ch12 is\n         and then Ekind (Gen_Unit) /= E_Generic_Function\n       then\n          if Ekind (Gen_Unit) = E_Generic_Procedure then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot instantiate generic procedure as function\", Gen_Id);\n          else\n             Error_Msg_N\n@@ -4227,7 +4228,8 @@ package body Sem_Ch12 is\n                   then\n                      Error_Msg_NE (\"access parameter& is controlling,\",\n                        N, Formal);\n-                     Error_Msg_NE (\"\\corresponding parameter of & must be\"\n+                     Error_Msg_NE -- CODEFIX???\n+                       (\"\\corresponding parameter of & must be\"\n                        & \" explicitly null-excluding\", N, Gen_Id);\n                   end if;\n \n@@ -5043,7 +5045,7 @@ package body Sem_Ch12 is\n                   if Is_Child_Unit (E)\n                     and then not Is_Visible_Child_Unit (E)\n                   then\n-                     Error_Msg_NE\n+                     Error_Msg_NE -- CODEFIX???\n                        (\"generic child unit& is not visible\", Gen_Id, E);\n                   end if;\n \n@@ -8354,14 +8356,14 @@ package body Sem_Ch12 is\n          if Is_Atomic_Object (Actual)\n            and then not Is_Atomic (Orig_Ftyp)\n          then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot instantiate non-atomic formal object \" &\n                \"with atomic actual\", Actual);\n \n          elsif Is_Volatile_Object (Actual)\n            and then not Is_Volatile (Orig_Ftyp)\n          then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot instantiate non-volatile formal object \" &\n                \"with volatile actual\", Actual);\n          end if;\n@@ -8528,7 +8530,7 @@ package body Sem_Ch12 is\n         and then Has_Null_Exclusion (Analyzed_Formal)\n       then\n          Error_Msg_Sloc := Sloc (Analyzed_Formal);\n-         Error_Msg_N\n+         Error_Msg_N -- CODEFIX???\n            (\"actual must exclude null to match generic formal#\", Actual);\n       end if;\n \n@@ -9212,21 +9214,23 @@ package body Sem_Ch12 is\n \n          if Is_Access_Constant (A_Gen_T) then\n             if not Is_Access_Constant (Act_T) then\n-               Error_Msg_N\n+               Error_Msg_N -- CODEFIX???\n                  (\"actual type must be access-to-constant type\", Actual);\n                Abandon_Instantiation (Actual);\n             end if;\n          else\n             if Is_Access_Constant (Act_T) then\n-               Error_Msg_N\n+               Error_Msg_N -- CODEFIX???\n                  (\"actual type must be access-to-variable type\", Actual);\n                Abandon_Instantiation (Actual);\n \n             elsif Ekind (A_Gen_T) = E_General_Access_Type\n               and then Ekind (Base_Type (Act_T)) /= E_General_Access_Type\n             then\n-               Error_Msg_N (\"actual must be general access type!\", Actual);\n-               Error_Msg_NE (\"add ALL to }!\", Actual, Act_T);\n+               Error_Msg_N -- CODEFIX\n+                 (\"actual must be general access type!\", Actual);\n+               Error_Msg_NE -- CODEFIX\n+                 (\"add ALL to }!\", Actual, Act_T);\n                Abandon_Instantiation (Actual);\n             end if;\n          end if;\n@@ -9266,7 +9270,7 @@ package body Sem_Ch12 is\n          --  Ada 2005: null-exclusion indicators of the two types must agree\n \n          if Can_Never_Be_Null (A_Gen_T) /=  Can_Never_Be_Null (Act_T) then\n-            Error_Msg_NE\n+            Error_Msg_NE -- CODEFIX???\n               (\"non null exclusion of actual and formal & do not match\",\n                  Actual, Gen_T);\n          end if;\n@@ -9388,7 +9392,7 @@ package body Sem_Ch12 is\n          if Has_Aliased_Components (A_Gen_T)\n            and then not Has_Aliased_Components (Act_T)\n          then\n-            Error_Msg_NE\n+            Error_Msg_NE -- CODEFIX???\n               (\"actual must have aliased components to match formal type &\",\n                Actual, Gen_T);\n          end if;\n@@ -9577,15 +9581,15 @@ package body Sem_Ch12 is\n          --  Perform atomic/volatile checks (RM C.6(12))\n \n          if Is_Atomic (Act_T) and then not Is_Atomic (Ancestor) then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot have atomic actual type for non-atomic formal type\",\n                Actual);\n \n          elsif Is_Volatile (Act_T)\n            and then not Is_Volatile (Ancestor)\n            and then Is_By_Reference_Type (Ancestor)\n          then\n-            Error_Msg_N\n+            Error_Msg_N -- CODEFIX???\n               (\"cannot have volatile actual type for non-volatile formal type\",\n                Actual);\n          end if;\n@@ -9940,7 +9944,7 @@ package body Sem_Ch12 is\n            and then not Is_Limited_Type (A_Gen_T)\n            and then False\n          then\n-            Error_Msg_NE\n+            Error_Msg_NE -- CODEFIX???\n               (\"actual for non-limited & cannot be a limited type\", Actual,\n                Gen_T);\n             Explain_Limited_Type (Act_T, Actual);\n@@ -9988,7 +9992,7 @@ package body Sem_Ch12 is\n          if Is_Limited_Type (Act_T)\n            and then not Is_Limited_Type (A_Gen_T)\n          then\n-            Error_Msg_NE\n+            Error_Msg_NE -- CODEFIX???\n               (\"actual for non-limited & cannot be a limited type\", Actual,\n                Gen_T);\n             Explain_Limited_Type (Act_T, Actual);\n@@ -12207,11 +12211,11 @@ package body Sem_Ch12 is\n                   --  idea to have this flag set properly.\n \n                   if Nkind (N) = N_Pragma\n-                    and  then\n-                      (Pragma_Name (N) = Name_Assert\n-                        or else Pragma_Name (N) = Name_Check\n-                        or else Pragma_Name (N) = Name_Precondition\n-                        or else Pragma_Name (N) = Name_Postcondition)\n+                    and then\n+                      (Pragma_Name (N) = Name_Assert       or else\n+                       Pragma_Name (N) = Name_Check        or else\n+                       Pragma_Name (N) = Name_Precondition or else\n+                       Pragma_Name (N) = Name_Postcondition)\n                     and then Present (Associated_Node (Pragma_Identifier (N)))\n                   then\n                      Set_Pragma_Enabled (N,\n@@ -12300,19 +12304,22 @@ package body Sem_Ch12 is\n       Act_Unit : Entity_Id)\n    is\n    begin\n-      --  Regardless of the current mode, predefined units are analyzed in\n-      --  the most current Ada mode, and earlier version Ada checks do not\n-      --  apply to predefined units. Nothing needs to be done for non-internal\n-      --  units. These are always analyzed in the current mode.\n+      --  Regardless of the current mode, predefined units are analyzed in the\n+      --  most current Ada mode, and earlier version Ada checks do not apply\n+      --  to predefined units. Nothing needs to be done for non-internal units.\n+      --  These are always analyzed in the current mode.\n \n       if Is_Internal_File_Name\n-          (Fname => Unit_File_Name (Get_Source_Unit (Gen_Unit)),\n-           Renamings_Included => True)\n+           (Fname              => Unit_File_Name (Get_Source_Unit (Gen_Unit)),\n+            Renamings_Included => True)\n       then\n          Set_Opt_Config_Switches (True, Current_Sem_Unit = Main_Unit);\n       end if;\n \n-      Current_Instantiated_Parent := (Gen_Unit, Act_Unit, Assoc_Null);\n+      Current_Instantiated_Parent :=\n+        (Gen_Id         => Gen_Unit,\n+         Act_Id         => Act_Unit,\n+         Next_In_HTable => Assoc_Null);\n    end Set_Instance_Env;\n \n    -----------------"}]}