{"sha": "63686e099bfd0e3e89789942f20a05a750541d6b", "node_id": "C_kwDOANBUbNoAKDYzNjg2ZTA5OWJmZDBlM2U4OTc4OTk0MmYyMGEwNWE3NTA1NDFkNmI", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-25T17:25:16Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-01-29T14:17:44Z"}, "message": "Refactor Mangling API crate name should be part of the CanonicalPath\n\nThe CanonicalPath of an item such as a function at the moment does not\ncontain the associated crate name but it will eventually. This also updates\nthe legacy mangling to be even more conformant.\n\nQualified paths such as:\n\n<A as B> are meant to actually start with _$LT$ and spaces are $u20$.", "tree": {"sha": "5150be96332c50c00b934e3c51b32223d3dbe392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5150be96332c50c00b934e3c51b32223d3dbe392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63686e099bfd0e3e89789942f20a05a750541d6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63686e099bfd0e3e89789942f20a05a750541d6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63686e099bfd0e3e89789942f20a05a750541d6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63686e099bfd0e3e89789942f20a05a750541d6b/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375d8b5900725ef7076b51509e570373c379259d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/375d8b5900725ef7076b51509e570373c379259d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/375d8b5900725ef7076b51509e570373c379259d"}], "stats": {"total": 80, "additions": 50, "deletions": 30}, "files": [{"sha": "46f88b314dcd2c00d57c8e138650c72ac4fdc0d0", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=63686e099bfd0e3e89789942f20a05a750541d6b", "patch": "@@ -304,7 +304,7 @@ class Context\n   std::string mangle_item (const TyTy::BaseType *ty,\n \t\t\t   const Resolver::CanonicalPath &path) const\n   {\n-    return mangler.mangle_item (ty, path, mappings->get_current_crate_name ());\n+    return mangler.mangle_item (ty, path);\n   }\n \n private:"}, {"sha": "2c864888964083d0d915ea7da9f25e4cde95264d", "filename": "gcc/rust/backend/rust-mangle.cc", "status": "modified", "additions": 48, "deletions": 27, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-mangle.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.cc?ref=63686e099bfd0e3e89789942f20a05a750541d6b", "patch": "@@ -9,6 +9,9 @@ static const std::string kMangledSymbolDelim = \"E\";\n static const std::string kMangledGenericDelim = \"$C$\";\n static const std::string kMangledSubstBegin = \"$LT$\";\n static const std::string kMangledSubstEnd = \"$GT$\";\n+static const std::string kMangledSpace = \"$u20$\";\n+static const std::string kMangledRef = \"$RF$\";\n+static const std::string kQualPathBegin = \"_\" + kMangledSubstBegin;\n \n namespace Rust {\n namespace Compile {\n@@ -22,17 +25,35 @@ legacy_mangle_name (const std::string &name)\n   //  <&T as core::fmt::Debug>::fmt:\n   //  _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6dac924c0051eef7E\n   // replace all white space with $ and & with RF\n-\n+  //\n+  // <example::Bar as example::A>::fooA:\n+  // _ZN43_$LT$example..Bar$u20$as$u20$example..A$GT$4fooA17hfc615fa76c7db7a0E:\n+  //\n+  // example::Foo<T>::new:\n+  // _ZN7example12Foo$LT$T$GT$3new17h9a2aacb7fd783515E:\n   std::string buffer;\n-  for (const auto &c : name)\n+  for (size_t i = 0; i < name.size (); i++)\n     {\n       std::string m;\n+      char c = name.at (i);\n+\n       if (c == ' ')\n-\tm = \"$\";\n+\tm = kMangledSpace;\n       else if (c == '&')\n-\tm = \"RF\";\n-      else if (c == '<' || c == '>')\n-\tm = \"..\";\n+\tm = kMangledRef;\n+      else if (i == 0 && c == '<')\n+\tm = kQualPathBegin;\n+      else if (c == '<')\n+\tm = kMangledSubstBegin;\n+      else if (c == '>')\n+\tm = kMangledSubstEnd;\n+      else if (c == ':')\n+\t{\n+\t  rust_assert (i + 1 < name.size ());\n+\t  rust_assert (name.at (i + 1) == ':');\n+\t  i++;\n+\t  m = \"..\";\n+\t}\n       else\n \tm.push_back (c);\n \n@@ -46,10 +67,11 @@ static std::string\n legacy_mangle_canonical_path (const Resolver::CanonicalPath &path)\n {\n   std::string buffer;\n-  path.iterate_segs ([&] (const Resolver::CanonicalPath &p) -> bool {\n-    buffer += legacy_mangle_name (p.get ());\n-    return true;\n-  });\n+  for (size_t i = 0; i < path.size (); i++)\n+    {\n+      auto &seg = path.get_seg_at (i);\n+      buffer += legacy_mangle_name (seg.second);\n+    }\n   return buffer;\n }\n \n@@ -150,7 +172,8 @@ v0_simple_type_prefix (const TyTy::BaseType *ty)\n // Add an underscore-terminated base62 integer to the mangling string.\n // This corresponds to the `<base-62-number>` grammar in the v0 mangling RFC:\n //  - 0 is encoded as \"_\"\n-//  - any other value is encoded as itself minus one in base 62, followed by \"_\"\n+//  - any other value is encoded as itself minus one in base 62, followed by\n+//  \"_\"\n static void\n v0_add_integer_62 (std::string &mangled, uint64_t x)\n {\n@@ -188,11 +211,11 @@ v0_add_identifier (std::string &mangled, const std::string &identifier)\n {\n   // FIXME: gccrs cannot handle unicode identifiers yet, so we never have to\n   // create mangling for unicode values for now. However, this is handled\n-  // by the v0 mangling scheme. The grammar for unicode identifier is contained\n-  // in <undisambiguated-identifier>, right under the <identifier> one. If the\n-  // identifier contains unicode values, then an extra \"u\" needs to be added\n-  // to the mangling string and `punycode` must be used to encode the\n-  // characters.\n+  // by the v0 mangling scheme. The grammar for unicode identifier is\n+  // contained in <undisambiguated-identifier>, right under the <identifier>\n+  // one. If the identifier contains unicode values, then an extra \"u\" needs\n+  // to be added to the mangling string and `punycode` must be used to encode\n+  // the characters.\n \n   mangled += std::to_string (identifier.size ());\n \n@@ -217,41 +240,39 @@ v0_type_prefix (const TyTy::BaseType *ty)\n \n static std::string\n legacy_mangle_item (const TyTy::BaseType *ty,\n-\t\t    const Resolver::CanonicalPath &path,\n-\t\t    const std::string &crate_name)\n+\t\t    const Resolver::CanonicalPath &path)\n {\n   const std::string hash = legacy_hash (ty->as_string ());\n   const std::string hash_sig = legacy_mangle_name (hash);\n \n-  return kMangledSymbolPrefix + legacy_mangle_name (crate_name)\n-\t + legacy_mangle_canonical_path (path) + hash_sig + kMangledSymbolDelim;\n+  return kMangledSymbolPrefix + legacy_mangle_canonical_path (path) + hash_sig\n+\t + kMangledSymbolDelim;\n }\n \n static std::string\n-v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path,\n-\t\tconst std::string &crate_name)\n+v0_mangle_item (const TyTy::BaseType *ty, const Resolver::CanonicalPath &path)\n {\n   std::string mangled;\n \n   // FIXME: Add real algorithm once all pieces are implemented\n   auto ty_prefix = v0_type_prefix (ty);\n-  v0_add_identifier (mangled, crate_name);\n+  // crate name must be assumed to be part of the canonical path\n+  // v0_add_identifier (mangled, crate_name);\n   v0_add_disambiguator (mangled, 62);\n \n   gcc_unreachable ();\n }\n \n std::string\n Mangler::mangle_item (const TyTy::BaseType *ty,\n-\t\t      const Resolver::CanonicalPath &path,\n-\t\t      const std::string &crate_name) const\n+\t\t      const Resolver::CanonicalPath &path) const\n {\n   switch (version)\n     {\n     case Mangler::MangleVersion::LEGACY:\n-      return legacy_mangle_item (ty, path, crate_name);\n+      return legacy_mangle_item (ty, path);\n     case Mangler::MangleVersion::V0:\n-      return v0_mangle_item (ty, path, crate_name);\n+      return v0_mangle_item (ty, path);\n     default:\n       gcc_unreachable ();\n     }"}, {"sha": "03e1dc622a1eed7d73226b67e3d9b2cff8a25572", "filename": "gcc/rust/backend/rust-mangle.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-mangle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63686e099bfd0e3e89789942f20a05a750541d6b/gcc%2Frust%2Fbackend%2Frust-mangle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-mangle.h?ref=63686e099bfd0e3e89789942f20a05a750541d6b", "patch": "@@ -34,8 +34,7 @@ class Mangler\n \n   // this needs to support Legacy and V0 see github #429 or #305\n   std::string mangle_item (const TyTy::BaseType *ty,\n-\t\t\t   const Resolver::CanonicalPath &path,\n-\t\t\t   const std::string &crate_name) const;\n+\t\t\t   const Resolver::CanonicalPath &path) const;\n \n   static void set_mangling (int frust_mangling_value)\n   {"}]}