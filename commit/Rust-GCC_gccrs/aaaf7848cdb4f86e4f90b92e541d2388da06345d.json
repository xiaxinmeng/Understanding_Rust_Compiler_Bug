{"sha": "aaaf7848cdb4f86e4f90b92e541d2388da06345d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWFhZjc4NDhjZGI0Zjg2ZTRmOTBiOTJlNTQxZDIzODhkYTA2MzQ1ZA==", "commit": {"author": {"name": "Donn Terry", "email": "donnte@microsoft.com", "date": "2000-07-08T06:21:13Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-07-08T06:21:13Z"}, "message": "cppinit.c (print_help): split overlong line into ISO C89 maximum chunks.\n\n2000-07-03  Donn Terry  (donnte@microsoft.com)\n\n\t* cppinit.c (print_help): split overlong line into ISO C89\n\tmaximum chunks.\n\nFrom-SVN: r34922", "tree": {"sha": "13163489443aa33df1fbfee464872f6d1f44f105", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13163489443aa33df1fbfee464872f6d1f44f105"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aaaf7848cdb4f86e4f90b92e541d2388da06345d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaf7848cdb4f86e4f90b92e541d2388da06345d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaaf7848cdb4f86e4f90b92e541d2388da06345d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaaf7848cdb4f86e4f90b92e541d2388da06345d/comments", "author": null, "committer": null, "parents": [{"sha": "629d4b4db8204ee836367f683e5450015ee4034d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/629d4b4db8204ee836367f683e5450015ee4034d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/629d4b4db8204ee836367f683e5450015ee4034d"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "5048c23e1db24833ae9276f3a221399ecbb27c6c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaf7848cdb4f86e4f90b92e541d2388da06345d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaf7848cdb4f86e4f90b92e541d2388da06345d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aaaf7848cdb4f86e4f90b92e541d2388da06345d", "patch": "@@ -1,3 +1,8 @@\n+2000-07-03  Donn Terry  (donnte@microsoft.com)\n+\n+\t* cppinit.c (print_help): split overlong line into ISO C89\n+\tmaximum chunks.\n+\n 2000-07-07  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* cppexp.c: Update all code for new lexer interface."}, {"sha": "f8dedee6566b590c0548ac7bc514e2ca9eaf10dc", "filename": "gcc/cppinit.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aaaf7848cdb4f86e4f90b92e541d2388da06345d/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aaaf7848cdb4f86e4f90b92e541d2388da06345d/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=aaaf7848cdb4f86e4f90b92e541d2388da06345d", "patch": "@@ -1692,6 +1692,8 @@ static void\n print_help ()\n {\n   fprintf (stderr, _(\"Usage: %s [switches] input output\\n\"), progname);\n+  /* To keep the lines from getting too long for some compilers, limit\n+     to about 500 characters (6 lines) per chunk. */\n   fputs (_(\"\\\n Switches:\\n\\\n   -include <file>           Include the contents of <file> before other files\\n\\\n@@ -1700,25 +1702,33 @@ Switches:\\n\\\n   -iwithprefix <dir>        Add <dir> to the end of the system include path\\n\\\n   -iwithprefixbefore <dir>  Add <dir> to the end of the main include path\\n\\\n   -isystem <dir>            Add <dir> to the start of the system include path\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -idirafter <dir>          Add <dir> to the end of the system include path\\n\\\n   -I <dir>                  Add <dir> to the end of the main include path\\n\\\n   -I-                       Fine-grained include path control; see info docs\\n\\\n   -nostdinc                 Do not search system include directories\\n\\\n                              (dirs specified with -isystem will still be used)\\n\\\n   -nostdinc++               Do not search system include directories for C++\\n\\\n   -o <file>                 Put output into <file>\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -pedantic                 Issue all warnings demanded by strict ISO C\\n\\\n   -pedantic-errors          Issue -pedantic warnings as errors instead\\n\\\n   -traditional              Follow K&R pre-processor behaviour\\n\\\n   -trigraphs                Support ISO C trigraphs\\n\\\n   -lang-c                   Assume that the input sources are in C\\n\\\n   -lang-c89                 Assume that the input sources are in C89\\n\\\n   -lang-c++                 Assume that the input sources are in C++\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -lang-objc                Assume that the input sources are in ObjectiveC\\n\\\n   -lang-objc++              Assume that the input sources are in ObjectiveC++\\n\\\n   -lang-asm                 Assume that the input sources are in assembler\\n\\\n   -lang-fortran\t\t    Assume that the input sources are in Fortran\\n\\\n   -lang-chill               Assume that the input sources are in Chill\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -std=<std name>           Specify the conformance standard; one of:\\n\\\n                             gnu89, gnu99, c89, c99, iso9899:1990,\\n\\\n                             iso9899:199409, iso9899:1999\\n\\\n@@ -1727,38 +1737,50 @@ Switches:\\n\\\n   -Wtrigraphs               Warn if trigraphs are encountered\\n\\\n   -Wno-trigraphs            Do not warn about trigraphs\\n\\\n   -Wcomment{s}              Warn if one comment starts inside another\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -Wno-comment{s}           Do not warn about comments\\n\\\n   -Wtraditional             Warn if a macro argument is/would be turned into\\n\\\n                              a string if -traditional is specified\\n\\\n   -Wno-traditional          Do not warn about stringification\\n\\\n   -Wundef                   Warn if an undefined macro is used by #if\\n\\\n   -Wno-undef                Do not warn about testing undefined macros\\n\\\n   -Wimport                  Warn about the use of the #import directive\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -Wno-import               Do not warn about the use of #import\\n\\\n   -Werror                   Treat all warnings as errors\\n\\\n   -Wno-error                Do not treat warnings as errors\\n\\\n   -Wall                     Enable all preprocessor warnings\\n\\\n   -M                        Generate make dependencies\\n\\\n   -MM                       As -M, but ignore system header files\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -MD                       As -M, but put output in a .d file\\n\\\n   -MMD                      As -MD, but ignore system header files\\n\\\n   -MG                       Treat missing header file as generated files\\n\\\n   -g3                       Include #define and #undef directives in the output\\n\\\n   -D<macro>                 Define a <macro> with string '1' as its value\\n\\\n   -D<macro>=<val>           Define a <macro> with <val> as its value\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -A<question> (<answer>)   Assert the <answer> to <question>\\n\\\n   -A-<question> (<answer>)  Disable the <answer> to <question>\\n\\\n   -U<macro>                 Undefine <macro> \\n\\\n   -v                        Display the version number\\n\\\n   -H                        Print the name of header files as they are used\\n\\\n   -C                        Do not discard comments\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -dM                       Display a list of macro definitions active at end\\n\\\n   -dD                       Preserve macro definitions in output\\n\\\n   -dN                       As -dD except that only the names are preserved\\n\\\n   -dI                       Include #include directives in the output\\n\\\n   -ftabstop=<number>        Distance between tab stops for column reporting\\n\\\n   -P                        Do not generate #line directives\\n\\\n   -$                        Do not allow '$' in identifiers\\n\\\n+\"), stdout);\n+  fputs (_(\"\\\n   -remap                    Remap file names when including files.\\n\\\n   --version                 Display version information\\n\\\n   -h or --help              Display this information\\n\\"}]}