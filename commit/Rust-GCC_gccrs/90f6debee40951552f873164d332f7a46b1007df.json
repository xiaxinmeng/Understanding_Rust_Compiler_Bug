{"sha": "90f6debee40951552f873164d332f7a46b1007df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBmNmRlYmVlNDA5NTE1NTJmODczMTY0ZDMzMmY3YTQ2YjEwMDdkZg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-12-18T23:53:15Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-12-18T23:53:15Z"}, "message": "re PR c++/64105 (ICE: in strip_typedefs, at cp/tree.c:1326)\n\n\tPR c++/64105\n\t* parser.c (cp_parser_simple_type_specifier): Make auto parameter\n\tbefore -std=c++14 an error.\n\nFrom-SVN: r218879", "tree": {"sha": "e70297ceaaaf71027af512f84629eaa652d6ad21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e70297ceaaaf71027af512f84629eaa652d6ad21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90f6debee40951552f873164d332f7a46b1007df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f6debee40951552f873164d332f7a46b1007df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90f6debee40951552f873164d332f7a46b1007df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90f6debee40951552f873164d332f7a46b1007df/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18d27358a51ac42c918be18eff0d24ba0b1ef52a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18d27358a51ac42c918be18eff0d24ba0b1ef52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18d27358a51ac42c918be18eff0d24ba0b1ef52a"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "823f086422996beac727a1d044f5e3ed15101515", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f6debee40951552f873164d332f7a46b1007df/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f6debee40951552f873164d332f7a46b1007df/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90f6debee40951552f873164d332f7a46b1007df", "patch": "@@ -1,5 +1,9 @@\n 2014-12-18  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/64105\n+\t* parser.c (cp_parser_simple_type_specifier): Make auto parameter\n+\tbefore -std=c++14 an error.\n+\n \tPR c++/64352\n \t* pt.c (tsubst_copy_and_build): Pass complain to mark_used.\n "}, {"sha": "8ff16ed770c409b00dd561a06394d0b88d3f92c2", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f6debee40951552f873164d332f7a46b1007df/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f6debee40951552f873164d332f7a46b1007df/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=90f6debee40951552f873164d332f7a46b1007df", "patch": "@@ -14862,23 +14862,26 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       maybe_warn_cpp0x (CPP0X_AUTO);\n       if (parser->auto_is_implicit_function_template_parm_p)\n \t{\n-\t  type = synthesize_implicit_template_parm (parser);\n+\t  if (cxx_dialect >= cxx14)\n+\t    type = synthesize_implicit_template_parm (parser);\n+\t  else\n+\t    type = error_mark_node;\n \n \t  if (current_class_type && LAMBDA_TYPE_P (current_class_type))\n \t    {\n \t      if (cxx_dialect < cxx14)\n-\t\tpedwarn (location_of (type), 0,\n+\t\terror_at (token->location,\n \t\t\t \"use of %<auto%> in lambda parameter declaration \"\n \t\t\t \"only available with \"\n \t\t\t \"-std=c++14 or -std=gnu++14\");\n \t    }\n \t  else if (cxx_dialect < cxx14)\n-\t    pedwarn (location_of (type), 0,\n+\t    error_at (token->location,\n \t\t     \"use of %<auto%> in parameter declaration \"\n \t\t     \"only available with \"\n \t\t     \"-std=c++14 or -std=gnu++14\");\n \t  else\n-\t    pedwarn (location_of (type), OPT_Wpedantic,\n+\t    pedwarn (token->location, OPT_Wpedantic,\n \t\t     \"ISO C++ forbids use of %<auto%> in parameter \"\n \t\t     \"declaration\");\n \t}\n@@ -14971,6 +14974,9 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n       /* Consume the token.  */\n       cp_lexer_consume_token (parser->lexer);\n \n+      if (type == error_mark_node)\n+\treturn error_mark_node;\n+\n       /* There is no valid C++ program where a non-template type is\n \t followed by a \"<\".  That usually indicates that the user thought\n \t that the type was a template.  */"}, {"sha": "2808aa6c190ef62d75a4db416b4500a336c26e7d", "filename": "gcc/testsuite/g++.dg/cpp1y/lambda-generic-variadic2.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90f6debee40951552f873164d332f7a46b1007df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90f6debee40951552f873164d332f7a46b1007df/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Flambda-generic-variadic2.C?ref=90f6debee40951552f873164d332f7a46b1007df", "patch": "@@ -0,0 +1,22 @@\n+// PR c++/64105\n+// This test was ICEing on pre-C++14 mode.\n+\n+#include <functional>\n+\n+using F = std::function<void(void)>;\n+\n+struct X\n+{\n+  template <typename T>\n+  static void f(T t)\n+  {\n+    g(t);\n+  }\n+\n+  static void g(F) {}\n+};\n+\n+int main()\n+{\n+  X::f([](auto... xs){});\t// { dg-error \"\" \"\" { target { ! cxx14 } } }\n+};"}]}