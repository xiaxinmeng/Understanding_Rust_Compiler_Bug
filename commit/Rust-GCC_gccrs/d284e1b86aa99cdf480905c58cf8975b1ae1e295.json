{"sha": "d284e1b86aa99cdf480905c58cf8975b1ae1e295", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI4NGUxYjg2YWE5OWNkZjQ4MDkwNWM1OGNmODk3NWIxYWUxZTI5NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2014-06-27T13:29:09Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2014-06-27T13:29:09Z"}, "message": "re PR ipa/61160 (wrong code with -O3 (or ICE: verify_cgraph_node failed: edge points to wrong declaration))\n\n2014-06-27  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/61160\n\t* cgraphclones.c (duplicate_thunk_for_node): Removed parameter\n\targs_to_skip, use those from node instead.  Copy args_to_skip and\n\tcombined_args_to_skip from node to the new thunk.\n\t(redirect_edge_duplicating_thunks): Removed parameter args_to_skip.\n\t(cgraph_create_virtual_clone): Moved computation of\n\tcombined_args_to_skip...\n\t(cgraph_clone_node): ...here, simplify it to bitmap_ior..\n\ntestsuite/\n\t* g++.dg/ipa/pr61160-2.C: New test.\n\t* g++.dg/ipa/pr61160-3.C: Likewise.\n\nFrom-SVN: r212071", "tree": {"sha": "c0bd394c08c89edcf557da88c5a1221a5d610703", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0bd394c08c89edcf557da88c5a1221a5d610703"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d284e1b86aa99cdf480905c58cf8975b1ae1e295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d284e1b86aa99cdf480905c58cf8975b1ae1e295", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d284e1b86aa99cdf480905c58cf8975b1ae1e295", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d284e1b86aa99cdf480905c58cf8975b1ae1e295/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f012c1abe0935f4136352b7e5fbb862179be42ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f012c1abe0935f4136352b7e5fbb862179be42ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f012c1abe0935f4136352b7e5fbb862179be42ed"}], "stats": {"total": 163, "additions": 123, "deletions": 40}, "files": [{"sha": "befe89ce2f0f11bd6de65e6097a286c5ceed5126", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d284e1b86aa99cdf480905c58cf8975b1ae1e295", "patch": "@@ -1,3 +1,14 @@\n+2014-06-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/61160\n+\t* cgraphclones.c (duplicate_thunk_for_node): Removed parameter\n+\targs_to_skip, use those from node instead.  Copy args_to_skip and\n+\tcombined_args_to_skip from node to the new thunk.\n+\t(redirect_edge_duplicating_thunks): Removed parameter args_to_skip.\n+\t(cgraph_create_virtual_clone): Moved computation of\n+\tcombined_args_to_skip...\n+\t(cgraph_clone_node): ...here, simplify it to bitmap_ior..\n+\n 2014-06-27  trevor Saunders  <tsaunders@mozilla.com>\n \n \t* config/i386/winnt.c (i386_pe_section_type_flags): Remove"}, {"sha": "2e7dc9060b7c92950dc081b39049863c00ccf3e4", "filename": "gcc/cgraphclones.c", "status": "modified", "additions": 26, "deletions": 40, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Fcgraphclones.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Fcgraphclones.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphclones.c?ref=d284e1b86aa99cdf480905c58cf8975b1ae1e295", "patch": "@@ -301,14 +301,13 @@ set_new_clone_decl_and_node_flags (cgraph_node *new_node)\n    thunk is this_adjusting but we are removing this parameter.  */\n \n static cgraph_node *\n-duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node,\n-\t\t\t  bitmap args_to_skip)\n+duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node)\n {\n   cgraph_node *new_thunk, *thunk_of;\n   thunk_of = cgraph_function_or_thunk_node (thunk->callees->callee);\n \n   if (thunk_of->thunk.thunk_p)\n-    node = duplicate_thunk_for_node (thunk_of, node, args_to_skip);\n+    node = duplicate_thunk_for_node (thunk_of, node);\n \n   struct cgraph_edge *cs;\n   for (cs = node->callers; cs; cs = cs->next_caller)\n@@ -320,17 +319,18 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node,\n       return cs->caller;\n \n   tree new_decl;\n-  if (!args_to_skip)\n+  if (!node->clone.args_to_skip)\n     new_decl = copy_node (thunk->decl);\n   else\n     {\n       /* We do not need to duplicate this_adjusting thunks if we have removed\n \t this.  */\n       if (thunk->thunk.this_adjusting\n-\t  && bitmap_bit_p (args_to_skip, 0))\n+\t  && bitmap_bit_p (node->clone.args_to_skip, 0))\n \treturn node;\n \n-      new_decl = build_function_decl_skip_args (thunk->decl, args_to_skip,\n+      new_decl = build_function_decl_skip_args (thunk->decl,\n+\t\t\t\t\t\tnode->clone.args_to_skip,\n \t\t\t\t\t\tfalse);\n     }\n   gcc_checking_assert (!DECL_STRUCT_FUNCTION (new_decl));\n@@ -347,6 +347,8 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node,\n   new_thunk->thunk = thunk->thunk;\n   new_thunk->unique_name = in_lto_p;\n   new_thunk->former_clone_of = thunk->decl;\n+  new_thunk->clone.args_to_skip = node->clone.args_to_skip;\n+  new_thunk->clone.combined_args_to_skip = node->clone.combined_args_to_skip;\n \n   struct cgraph_edge *e = cgraph_create_edge (new_thunk, node, NULL, 0,\n \t\t\t\t\t      CGRAPH_FREQ_BASE);\n@@ -363,12 +365,11 @@ duplicate_thunk_for_node (cgraph_node *thunk, cgraph_node *node,\n    chain.  */\n \n void\n-redirect_edge_duplicating_thunks (struct cgraph_edge *e, struct cgraph_node *n,\n-\t\t\t\t  bitmap args_to_skip)\n+redirect_edge_duplicating_thunks (struct cgraph_edge *e, struct cgraph_node *n)\n {\n   cgraph_node *orig_to = cgraph_function_or_thunk_node (e->callee);\n   if (orig_to->thunk.thunk_p)\n-    n = duplicate_thunk_for_node (orig_to, n, args_to_skip);\n+    n = duplicate_thunk_for_node (orig_to, n);\n \n   cgraph_redirect_edge_callee (e, n);\n }\n@@ -421,9 +422,21 @@ cgraph_clone_node (struct cgraph_node *n, tree decl, gcov_type count, int freq,\n   new_node->rtl = n->rtl;\n   new_node->count = count;\n   new_node->frequency = n->frequency;\n-  new_node->clone = n->clone;\n-  new_node->clone.tree_map = NULL;\n   new_node->tp_first_run = n->tp_first_run;\n+\n+  new_node->clone.tree_map = NULL;\n+  new_node->clone.args_to_skip = args_to_skip;\n+  if (!args_to_skip)\n+    new_node->clone.combined_args_to_skip = n->clone.combined_args_to_skip;\n+  else if (n->clone.combined_args_to_skip)\n+    {\n+      new_node->clone.combined_args_to_skip = BITMAP_GGC_ALLOC ();\n+      bitmap_ior (new_node->clone.combined_args_to_skip,\n+\t\t  n->clone.combined_args_to_skip, args_to_skip);\n+    }\n+  else\n+    new_node->clone.combined_args_to_skip = args_to_skip;\n+\n   if (n->count)\n     {\n       if (new_node->count > n->count)\n@@ -448,10 +461,9 @@ cgraph_clone_node (struct cgraph_node *n, tree decl, gcov_type count, int freq,\n       if (!e->callee\n \t  || DECL_BUILT_IN_CLASS (e->callee->decl) != BUILT_IN_NORMAL\n \t  || DECL_FUNCTION_CODE (e->callee->decl) != BUILT_IN_UNREACHABLE)\n-        redirect_edge_duplicating_thunks (e, new_node, args_to_skip);\n+        redirect_edge_duplicating_thunks (e, new_node);\n     }\n \n-\n   for (e = n->callees;e; e=e->next_callee)\n     cgraph_clone_edge (e, new_node, e->call_stmt, e->lto_stmt_uid,\n \t\t       count_scale, freq, update_original);\n@@ -558,7 +570,6 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n      ABI support for this.  */\n   set_new_clone_decl_and_node_flags (new_node);\n   new_node->clone.tree_map = tree_map;\n-  new_node->clone.args_to_skip = args_to_skip;\n \n   /* Clones of global symbols or symbols with unique names are unique.  */\n   if ((TREE_PUBLIC (old_decl)\n@@ -569,32 +580,7 @@ cgraph_create_virtual_clone (struct cgraph_node *old_node,\n     new_node->unique_name = true;\n   FOR_EACH_VEC_SAFE_ELT (tree_map, i, map)\n     new_node->maybe_add_reference (map->new_tree, IPA_REF_ADDR, NULL);\n-  if (!args_to_skip)\n-    new_node->clone.combined_args_to_skip = old_node->clone.combined_args_to_skip;\n-  else if (old_node->clone.combined_args_to_skip)\n-    {\n-      int newi = 0, oldi = 0;\n-      tree arg;\n-      bitmap new_args_to_skip = BITMAP_GGC_ALLOC ();\n-      struct cgraph_node *orig_node;\n-      for (orig_node = old_node; orig_node->clone_of; orig_node = orig_node->clone_of)\n-        ;\n-      for (arg = DECL_ARGUMENTS (orig_node->decl);\n-\t   arg; arg = DECL_CHAIN (arg), oldi++)\n-\t{\n-\t  if (bitmap_bit_p (old_node->clone.combined_args_to_skip, oldi))\n-\t    {\n-\t      bitmap_set_bit (new_args_to_skip, oldi);\n-\t      continue;\n-\t    }\n-\t  if (bitmap_bit_p (args_to_skip, newi))\n-\t    bitmap_set_bit (new_args_to_skip, oldi);\n-\t  newi++;\n-\t}\n-      new_node->clone.combined_args_to_skip = new_args_to_skip;\n-    }\n-  else\n-    new_node->clone.combined_args_to_skip = args_to_skip;\n+\n   if (old_node->ipa_transforms_to_apply.exists ())\n     new_node->ipa_transforms_to_apply\n       = old_node->ipa_transforms_to_apply.copy ();"}, {"sha": "04d08b5a034cc3df46034f01fab920501a76685b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d284e1b86aa99cdf480905c58cf8975b1ae1e295", "patch": "@@ -1,3 +1,9 @@\n+2014-06-27  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR ipa/61160\n+\t* g++.dg/ipa/pr61160-2.C: New test.\n+\t* g++.dg/ipa/pr61160-3.C: Likewise.\n+\n 2014-06-27  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/57233"}, {"sha": "1011bd1efab538834eb8cf5250d70bc4a5e441de", "filename": "gcc/testsuite/g++.dg/ipa/pr61160-2.C", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-2.C?ref=d284e1b86aa99cdf480905c58cf8975b1ae1e295", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --param ipa-cp-eval-threshold=1\"  } */\n+\n+extern \"C\" void abort (void);\n+\n+struct CBase {\n+  virtual void BaseFunc () {}\n+};\n+\n+struct MMixin {\n+  virtual void * MixinFunc (int, void *) = 0;\n+};\n+\n+struct CExample: CBase, public MMixin\n+{\n+  int stuff, magic, more_stuff;\n+\n+  CExample ()\n+  {\n+    stuff = 0;\n+    magic = 0xbeef;\n+    more_stuff = 0;\n+  }\n+  void *MixinFunc (int arg, void *arg2)\n+  {\n+    if (arg != 1 || arg2)\n+      return 0;\n+    if (magic != 0xbeef)\n+      abort();\n+    return this;\n+  }\n+};\n+\n+void *test (MMixin & anExample)\n+{\n+  return anExample.MixinFunc (1, 0);\n+}\n+\n+int main ()\n+{\n+  CExample c;\n+  return (test (c) != &c);\n+}"}, {"sha": "8184ec2cd3d65e0e667486d4768f26d986fbede7", "filename": "gcc/testsuite/g++.dg/ipa/pr61160-3.C", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d284e1b86aa99cdf480905c58cf8975b1ae1e295/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr61160-3.C?ref=d284e1b86aa99cdf480905c58cf8975b1ae1e295", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\"  } */\n+\n+struct A {\n+  void *p;\n+  A (void *q) : p (q) {}\n+  A (const A &) : p () {}\n+};\n+\n+struct CBase {\n+  virtual void BaseFunc () {}\n+};\n+\n+struct MMixin {\n+  virtual A MixinFunc (int, A) = 0;\n+};\n+\n+struct CExample: CBase, public MMixin\n+{\n+  A MixinFunc (int arg, A arg2)\n+  {\n+    if (arg != 1 || arg2.p)\n+      return 0;\n+    return this;\n+  }\n+};\n+\n+void *test (MMixin & anExample)\n+{\n+  return anExample.MixinFunc (1, (0)).p;\n+}\n+\n+int main ()\n+{\n+  CExample c;\n+  return (test (c) != &c);\n+}"}]}