{"sha": "14782c8123ea7e55723cfc4fc30d726cd94851dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ3ODJjODEyM2VhN2U1NTcyM2NmYzRmYzMwZDcyNmNkOTQ4NTFkYw==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T10:19:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T10:21:19Z"}, "message": "[ARM][GCC][4/x]: MVE ACLE vector interleaving store intrinsics.\n\nThis patch supports MVE ACLE intrinsics vst4q_s8, vst4q_s16, vst4q_s32, vst4q_u8, vst4q_u16, vst4q_u32, vst4q_f16 and vst4q_f32.\n\nIn this patch arm_mve_builtins.def file is added to the source code in which the builtins for MVE ACLE intrinsics are defined using builtin qualifiers.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (CF): Define mve_builtin_data.\n\t(VAR1): Define.\n\t(ARM_BUILTIN_MVE_PATTERN_START): Define.\n\t(arm_init_mve_builtins): Define function.\n\t(arm_init_builtins): Add TARGET_HAVE_MVE check.\n\t(arm_expand_builtin_1): Check the range of fcode.\n\t(arm_expand_mve_builtin): Define function to expand MVE builtins.\n\t(arm_expand_builtin): Check the range of fcode.\n\t* config/arm/arm_mve.h (__ARM_FEATURE_MVE): Define MVE floating point\n\ttypes.\n\t(__ARM_MVE_PRESERVE_USER_NAMESPACE): Define to protect user namespace.\n\t(vst4q_s8): Define macro.\n\t(vst4q_s16): Likewise.\n\t(vst4q_s32): Likewise.\n\t(vst4q_u8): Likewise.\n\t(vst4q_u16): Likewise.\n\t(vst4q_u32): Likewise.\n\t(vst4q_f16): Likewise.\n\t(vst4q_f32): Likewise.\n\t(__arm_vst4q_s8): Define inline builtin.\n\t(__arm_vst4q_s16): Likewise.\n\t(__arm_vst4q_s32): Likewise.\n\t(__arm_vst4q_u8): Likewise.\n\t(__arm_vst4q_u16): Likewise.\n\t(__arm_vst4q_u32): Likewise.\n\t(__arm_vst4q_f16): Likewise.\n\t(__arm_vst4q_f32): Likewise.\n\t(__ARM_mve_typeid): Define macro with MVE types.\n\t(__ARM_mve_coerce): Define macro with _Generic feature.\n\t(vst4q): Define polymorphic variant for different vst4q builtins.\n\t* config/arm/arm_mve_builtins.def: New file.\n\t* config/arm/iterators.md (VSTRUCT): Modify to allow XI and OI\n\tmodes in MVE.\n\t* config/arm/mve.md (MVE_VLD_ST): Define iterator.\n\t(unspec): Define unspec.\n\t(mve_vst4q<mode>): Define RTL pattern.\n\t* config/arm/neon.md (mov<mode>): Modify expand to allow XI and OI\n\tmodes in MVE.\n\t(neon_mov<mode>): Modify RTL define_insn to allow XI and OI modes\n\tin MVE.\n\t(define_split): Allow OI mode split for MVE after reload.\n\t(define_split): Allow XI mode split for MVE after reload.\n\t* config/arm/t-arm (arm.o): Add entry for arm_mve_builtins.def.\n\t(arm-builtins.o): Likewise.\n\n2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Mihail Ionescu  <mihail.ionescu@arm.com>\n\t    Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vst4q_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vst4q_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vst4q_u8.c: Likewise.", "tree": {"sha": "78f265dbdab5b49ebf495aefd5765c9d0ca910fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/78f265dbdab5b49ebf495aefd5765c9d0ca910fe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14782c8123ea7e55723cfc4fc30d726cd94851dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14782c8123ea7e55723cfc4fc30d726cd94851dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14782c8123ea7e55723cfc4fc30d726cd94851dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14782c8123ea7e55723cfc4fc30d726cd94851dc/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "994d48620621fa33d32018be5fb70042e38546d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/994d48620621fa33d32018be5fb70042e38546d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/994d48620621fa33d32018be5fb70042e38546d5"}], "stats": {"total": 839, "additions": 829, "deletions": 10}, "files": [{"sha": "21afda74470b7e92a9219cacf911d94d34eb95a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -1,3 +1,52 @@\n+2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (CF): Define mve_builtin_data.\n+\t(VAR1): Define.\n+\t(ARM_BUILTIN_MVE_PATTERN_START): Define.\n+\t(arm_init_mve_builtins): Define function.\n+\t(arm_init_builtins): Add TARGET_HAVE_MVE check.\n+\t(arm_expand_builtin_1): Check the range of fcode.\n+\t(arm_expand_mve_builtin): Define function to expand MVE builtins.\n+\t(arm_expand_builtin): Check the range of fcode.\n+\t* config/arm/arm_mve.h (__ARM_FEATURE_MVE): Define MVE floating point\n+\ttypes.\n+\t(__ARM_MVE_PRESERVE_USER_NAMESPACE): Define to protect user namespace.\n+\t(vst4q_s8): Define macro.\n+\t(vst4q_s16): Likewise.\n+\t(vst4q_s32): Likewise.\n+\t(vst4q_u8): Likewise.\n+\t(vst4q_u16): Likewise.\n+\t(vst4q_u32): Likewise.\n+\t(vst4q_f16): Likewise.\n+\t(vst4q_f32): Likewise.\n+\t(__arm_vst4q_s8): Define inline builtin.\n+\t(__arm_vst4q_s16): Likewise.\n+\t(__arm_vst4q_s32): Likewise.\n+\t(__arm_vst4q_u8): Likewise.\n+\t(__arm_vst4q_u16): Likewise.\n+\t(__arm_vst4q_u32): Likewise.\n+\t(__arm_vst4q_f16): Likewise.\n+\t(__arm_vst4q_f32): Likewise.\n+\t(__ARM_mve_typeid): Define macro with MVE types.\n+\t(__ARM_mve_coerce): Define macro with _Generic feature.\n+\t(vst4q): Define polymorphic variant for different vst4q builtins.\n+\t* config/arm/arm_mve_builtins.def: New file.\n+\t* config/arm/iterators.md (VSTRUCT): Modify to allow XI and OI\n+\tmodes in MVE.\n+\t* config/arm/mve.md (MVE_VLD_ST): Define iterator.\n+\t(unspec): Define unspec.\n+\t(mve_vst4q<mode>): Define RTL pattern.\n+\t* config/arm/neon.md (mov<mode>): Modify expand to allow XI and OI\n+\tmodes in MVE.\n+\t(neon_mov<mode>): Modify RTL define_insn to allow XI and OI modes\n+\tin MVE.\n+\t(define_split): Allow OI mode split for MVE after reload.\n+\t(define_split): Allow XI mode split for MVE after reload.\n+\t* config/arm/t-arm (arm.o): Add entry for arm_mve_builtins.def.\n+\t(arm-builtins.o): Likewise.\n+\n 2020-03-17  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* c-typeck.c (process_init_element): Handle constructor_type with"}, {"sha": "2f1b1258c13132b9174f3421e8a75a62de24da39", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 64, "deletions": 3, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -431,6 +431,13 @@ static arm_builtin_datum neon_builtin_data[] =\n #include \"arm_neon_builtins.def\"\n };\n \n+#undef CF\n+#define CF(N,X) CODE_FOR_mve_##N##X\n+static arm_builtin_datum mve_builtin_data[] =\n+{\n+#include \"arm_mve_builtins.def\"\n+};\n+\n #undef CF\n #undef VAR1\n #define VAR1(T, N, A) \\\n@@ -736,6 +743,13 @@ enum arm_builtins\n \n #include \"arm_acle_builtins.def\"\n \n+  ARM_BUILTIN_MVE_BASE,\n+\n+#undef VAR1\n+#define VAR1(T, N, X) \\\n+  ARM_BUILTIN_MVE_##N##X,\n+#include \"arm_mve_builtins.def\"\n+\n   ARM_BUILTIN_MAX\n };\n \n@@ -745,6 +759,9 @@ enum arm_builtins\n #define ARM_BUILTIN_NEON_PATTERN_START \\\n   (ARM_BUILTIN_NEON_BASE + 1)\n \n+#define ARM_BUILTIN_MVE_PATTERN_START \\\n+  (ARM_BUILTIN_MVE_BASE + 1)\n+\n #define ARM_BUILTIN_ACLE_PATTERN_START \\\n   (ARM_BUILTIN_ACLE_BASE + 1)\n \n@@ -1278,6 +1295,22 @@ arm_init_acle_builtins (void)\n     }\n }\n \n+/* Set up all the MVE builtins mentioned in arm_mve_builtins.def file.  */\n+static void\n+arm_init_mve_builtins (void)\n+{\n+  volatile unsigned int i, fcode = ARM_BUILTIN_MVE_PATTERN_START;\n+\n+  arm_init_simd_builtin_scalar_types ();\n+  arm_init_simd_builtin_types ();\n+\n+  for (i = 0; i < ARRAY_SIZE (mve_builtin_data); i++, fcode++)\n+    {\n+      arm_builtin_datum *d = &mve_builtin_data[i];\n+      arm_init_builtin (fcode, d, \"__builtin_mve\");\n+    }\n+}\n+\n /* Set up all the NEON builtins, even builtins for instructions that are not\n    in the current target ISA to allow the user to compile particular modules\n    with different target specific options that differ from the command line\n@@ -2022,8 +2055,10 @@ arm_init_builtins (void)\n       = add_builtin_function (\"__builtin_arm_lane_check\", lane_check_fpr,\n \t\t\t      ARM_BUILTIN_SIMD_LANE_CHECK, BUILT_IN_MD,\n \t\t\t      NULL, NULL_TREE);\n-\n-      arm_init_neon_builtins ();\n+      if (TARGET_HAVE_MVE)\n+\tarm_init_mve_builtins ();\n+      else\n+\tarm_init_neon_builtins ();\n       arm_init_vfp_builtins ();\n       arm_init_crypto_builtins ();\n     }\n@@ -2567,10 +2602,14 @@ arm_expand_builtin_1 (int fcode, tree exp, rtx target,\n   int is_void = 0;\n   int k;\n   bool neon = false;\n+  bool mve = false;\n \n   if (IN_RANGE (fcode, ARM_BUILTIN_VFP_BASE, ARM_BUILTIN_ACLE_BASE - 1))\n     neon = true;\n \n+  if (IN_RANGE (fcode, ARM_BUILTIN_MVE_BASE, ARM_BUILTIN_MAX - 1))\n+    mve = true;\n+\n   is_void = !!(d->qualifiers[0] & qualifier_void);\n \n   num_args += is_void;\n@@ -2612,7 +2651,7 @@ arm_expand_builtin_1 (int fcode, tree exp, rtx target,\n \t}\n       else if (d->qualifiers[qualifiers_k] & qualifier_pointer)\n \t{\n-\t  if (neon)\n+\t  if (neon || mve)\n \t    args[k] = ARG_BUILTIN_NEON_MEMORY;\n \t  else\n \t    args[k] = ARG_BUILTIN_MEMORY;\n@@ -2662,6 +2701,26 @@ arm_expand_acle_builtin (int fcode, tree exp, rtx target)\n   return arm_expand_builtin_1 (fcode, exp, target, d);\n }\n \n+/* Expand an MVE builtin, i.e. those registered only if their respective target\n+   constraints are met.  This check happens within arm_expand_builtin.  */\n+\n+static rtx\n+arm_expand_mve_builtin (int fcode, tree exp, rtx target)\n+{\n+  if (fcode >= ARM_BUILTIN_MVE_BASE && !TARGET_HAVE_MVE)\n+  {\n+    fatal_error (input_location,\n+\t\t\"You must enable MVE instructions\"\n+\t\t\" to use these intrinsics\");\n+    return const0_rtx;\n+  }\n+\n+  arm_builtin_datum *d\n+    = &mve_builtin_data[fcode - ARM_BUILTIN_MVE_PATTERN_START];\n+\n+  return arm_expand_builtin_1 (fcode, exp, target, d);\n+}\n+\n /* Expand a Neon builtin, i.e. those registered only if TARGET_NEON holds.\n    Most of these are \"special\" because they don't have symbolic\n    constants defined per-instruction or per instruction-variant.  Instead, the\n@@ -2755,6 +2814,8 @@ arm_expand_builtin (tree exp,\n       /* Don't generate any RTL.  */\n       return const0_rtx;\n     }\n+  if (fcode >= ARM_BUILTIN_MVE_BASE)\n+    return arm_expand_mve_builtin (fcode, exp, target);\n \n   if (fcode >= ARM_BUILTIN_ACLE_BASE)\n     return arm_expand_acle_builtin (fcode, exp, target);"}, {"sha": "807a0d289c104ca210305a08b0c1ddfb9fe995b6", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 331, "deletions": 0, "changes": 331, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -42,6 +42,13 @@ typedef __simd128_float16_t float16x8_t;\n typedef __simd128_float32_t float32x4_t;\n #endif\n \n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+typedef struct { float16x8_t val[2]; } float16x8x2_t;\n+typedef struct { float16x8_t val[4]; } float16x8x4_t;\n+typedef struct { float32x4_t val[2]; } float32x4x2_t;\n+typedef struct { float32x4_t val[4]; } float32x4x4_t;\n+#endif\n+\n typedef uint16_t mve_pred16_t;\n typedef __simd128_uint8_t uint8x16_t;\n typedef __simd128_uint16_t uint16x8_t;\n@@ -52,6 +59,330 @@ typedef __simd128_int16_t int16x8_t;\n typedef __simd128_int32_t int32x4_t;\n typedef __simd128_int64_t int64x2_t;\n \n+typedef struct { int16x8_t val[2]; } int16x8x2_t;\n+typedef struct { int16x8_t val[4]; } int16x8x4_t;\n+typedef struct { int32x4_t val[2]; } int32x4x2_t;\n+typedef struct { int32x4_t val[4]; } int32x4x4_t;\n+typedef struct { int8x16_t val[2]; } int8x16x2_t;\n+typedef struct { int8x16_t val[4]; } int8x16x4_t;\n+typedef struct { uint16x8_t val[2]; } uint16x8x2_t;\n+typedef struct { uint16x8_t val[4]; } uint16x8x4_t;\n+typedef struct { uint32x4_t val[2]; } uint32x4x2_t;\n+typedef struct { uint32x4_t val[4]; } uint32x4x4_t;\n+typedef struct { uint8x16_t val[2]; } uint8x16x2_t;\n+typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n+\n+#ifndef __ARM_MVE_PRESERVE_USER_NAMESPACE\n+#define vst4q_s8( __addr, __value) __arm_vst4q_s8( __addr, __value)\n+#define vst4q_s16( __addr, __value) __arm_vst4q_s16( __addr, __value)\n+#define vst4q_s32( __addr, __value) __arm_vst4q_s32( __addr, __value)\n+#define vst4q_u8( __addr, __value) __arm_vst4q_u8( __addr, __value)\n+#define vst4q_u16( __addr, __value) __arm_vst4q_u16( __addr, __value)\n+#define vst4q_u32( __addr, __value) __arm_vst4q_u32( __addr, __value)\n+#define vst4q_f16( __addr, __value) __arm_vst4q_f16( __addr, __value)\n+#define vst4q_f32( __addr, __value) __arm_vst4q_f32( __addr, __value)\n+#endif\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_s8 (int8_t * __addr, int8x16x4_t __value)\n+{\n+  union { int8x16x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv16qi ((__builtin_neon_qi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_s16 (int16_t * __addr, int16x8x4_t __value)\n+{\n+  union { int16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv8hi ((__builtin_neon_hi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_s32 (int32_t * __addr, int32x4x4_t __value)\n+{\n+  union { int32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_u8 (uint8_t * __addr, uint8x16x4_t __value)\n+{\n+  union { uint8x16x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv16qi ((__builtin_neon_qi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_u16 (uint16_t * __addr, uint16x8x4_t __value)\n+{\n+  union { uint16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv8hi ((__builtin_neon_hi *) __addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_u32 (uint32_t * __addr, uint32x4x4_t __value)\n+{\n+  union { uint32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n+}\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_f16 (float16_t * __addr, float16x8x4_t __value)\n+{\n+  union { float16x8x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv8hf (__addr, __rv.__o);\n+}\n+\n+__extension__ extern __inline void\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vst4q_f32 (float32_t * __addr, float32x4x4_t __value)\n+{\n+  union { float32x4x4_t __i; __builtin_neon_xi __o; } __rv;\n+  __rv.__i = __value;\n+  __builtin_mve_vst4qv4sf (__addr, __rv.__o);\n+}\n+\n+#endif\n+\n+enum {\n+    __ARM_mve_type_float16_t = 1,\n+    __ARM_mve_type_float16_t_ptr,\n+    __ARM_mve_type_float16_t_const_ptr,\n+    __ARM_mve_type_float16x8_t,\n+    __ARM_mve_type_float16x8x2_t,\n+    __ARM_mve_type_float16x8x4_t,\n+    __ARM_mve_type_float32_t,\n+    __ARM_mve_type_float32_t_ptr,\n+    __ARM_mve_type_float32_t_const_ptr,\n+    __ARM_mve_type_float32x4_t,\n+    __ARM_mve_type_float32x4x2_t,\n+    __ARM_mve_type_float32x4x4_t,\n+    __ARM_mve_type_int16_t,\n+    __ARM_mve_type_int16_t_ptr,\n+    __ARM_mve_type_int16_t_const_ptr,\n+    __ARM_mve_type_int16x8_t,\n+    __ARM_mve_type_int16x8x2_t,\n+    __ARM_mve_type_int16x8x4_t,\n+    __ARM_mve_type_int32_t,\n+    __ARM_mve_type_int32_t_ptr,\n+    __ARM_mve_type_int32_t_const_ptr,\n+    __ARM_mve_type_int32x4_t,\n+    __ARM_mve_type_int32x4x2_t,\n+    __ARM_mve_type_int32x4x4_t,\n+    __ARM_mve_type_int64_t,\n+    __ARM_mve_type_int64_t_ptr,\n+    __ARM_mve_type_int64_t_const_ptr,\n+    __ARM_mve_type_int64x2_t,\n+    __ARM_mve_type_int8_t,\n+    __ARM_mve_type_int8_t_ptr,\n+    __ARM_mve_type_int8_t_const_ptr,\n+    __ARM_mve_type_int8x16_t,\n+    __ARM_mve_type_int8x16x2_t,\n+    __ARM_mve_type_int8x16x4_t,\n+    __ARM_mve_type_uint16_t,\n+    __ARM_mve_type_uint16_t_ptr,\n+    __ARM_mve_type_uint16_t_const_ptr,\n+    __ARM_mve_type_uint16x8_t,\n+    __ARM_mve_type_uint16x8x2_t,\n+    __ARM_mve_type_uint16x8x4_t,\n+    __ARM_mve_type_uint32_t,\n+    __ARM_mve_type_uint32_t_ptr,\n+    __ARM_mve_type_uint32_t_const_ptr,\n+    __ARM_mve_type_uint32x4_t,\n+    __ARM_mve_type_uint32x4x2_t,\n+    __ARM_mve_type_uint32x4x4_t,\n+    __ARM_mve_type_uint64_t,\n+    __ARM_mve_type_uint64_t_ptr,\n+    __ARM_mve_type_uint64_t_const_ptr,\n+    __ARM_mve_type_uint64x2_t,\n+    __ARM_mve_type_uint8_t,\n+    __ARM_mve_type_uint8_t_ptr,\n+    __ARM_mve_type_uint8_t_const_ptr,\n+    __ARM_mve_type_uint8x16_t,\n+    __ARM_mve_type_uint8x16x2_t,\n+    __ARM_mve_type_uint8x16x4_t,\n+    __ARM_mve_unsupported_type\n+};\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+#define __ARM_mve_typeid(x) _Generic(x, \\\n+    float16_t: __ARM_mve_type_float16_t, \\\n+    float16_t *: __ARM_mve_type_float16_t_ptr, \\\n+    float16_t const *: __ARM_mve_type_float16_t_const_ptr, \\\n+    float16x8_t: __ARM_mve_type_float16x8_t, \\\n+    float16x8x2_t: __ARM_mve_type_float16x8x2_t, \\\n+    float16x8x4_t: __ARM_mve_type_float16x8x4_t, \\\n+    float32_t: __ARM_mve_type_float32_t, \\\n+    float32_t *: __ARM_mve_type_float32_t_ptr, \\\n+    float32_t const *: __ARM_mve_type_float32_t_const_ptr, \\\n+    float32x4_t: __ARM_mve_type_float32x4_t, \\\n+    float32x4x2_t: __ARM_mve_type_float32x4x2_t, \\\n+    float32x4x4_t: __ARM_mve_type_float32x4x4_t, \\\n+    int16_t: __ARM_mve_type_int16_t, \\\n+    int16_t *: __ARM_mve_type_int16_t_ptr, \\\n+    int16_t const *: __ARM_mve_type_int16_t_const_ptr, \\\n+    int16x8_t: __ARM_mve_type_int16x8_t, \\\n+    int16x8x2_t: __ARM_mve_type_int16x8x2_t, \\\n+    int16x8x4_t: __ARM_mve_type_int16x8x4_t, \\\n+    int32_t: __ARM_mve_type_int32_t, \\\n+    int32_t *: __ARM_mve_type_int32_t_ptr, \\\n+    int32_t const *: __ARM_mve_type_int32_t_const_ptr, \\\n+    int32x4_t: __ARM_mve_type_int32x4_t, \\\n+    int32x4x2_t: __ARM_mve_type_int32x4x2_t, \\\n+    int32x4x4_t: __ARM_mve_type_int32x4x4_t, \\\n+    int64_t: __ARM_mve_type_int64_t, \\\n+    int64_t *: __ARM_mve_type_int64_t_ptr, \\\n+    int64_t const *: __ARM_mve_type_int64_t_const_ptr, \\\n+    int64x2_t: __ARM_mve_type_int64x2_t, \\\n+    int8_t: __ARM_mve_type_int8_t, \\\n+    int8_t *: __ARM_mve_type_int8_t_ptr, \\\n+    int8_t const *: __ARM_mve_type_int8_t_const_ptr, \\\n+    int8x16_t: __ARM_mve_type_int8x16_t, \\\n+    int8x16x2_t: __ARM_mve_type_int8x16x2_t, \\\n+    int8x16x4_t: __ARM_mve_type_int8x16x4_t, \\\n+    uint16_t: __ARM_mve_type_uint16_t, \\\n+    uint16_t *: __ARM_mve_type_uint16_t_ptr, \\\n+    uint16_t const *: __ARM_mve_type_uint16_t_const_ptr, \\\n+    uint16x8_t: __ARM_mve_type_uint16x8_t, \\\n+    uint16x8x2_t: __ARM_mve_type_uint16x8x2_t, \\\n+    uint16x8x4_t: __ARM_mve_type_uint16x8x4_t, \\\n+    uint32_t: __ARM_mve_type_uint32_t, \\\n+    uint32_t *: __ARM_mve_type_uint32_t_ptr, \\\n+    uint32_t const *: __ARM_mve_type_uint32_t_const_ptr, \\\n+    uint32x4_t: __ARM_mve_type_uint32x4_t, \\\n+    uint32x4x2_t: __ARM_mve_type_uint32x4x2_t, \\\n+    uint32x4x4_t: __ARM_mve_type_uint32x4x4_t, \\\n+    uint64_t: __ARM_mve_type_uint64_t, \\\n+    uint64_t *: __ARM_mve_type_uint64_t_ptr, \\\n+    uint64_t const *: __ARM_mve_type_uint64_t_const_ptr, \\\n+    uint64x2_t: __ARM_mve_type_uint64x2_t, \\\n+    uint8_t: __ARM_mve_type_uint8_t, \\\n+    uint8_t *: __ARM_mve_type_uint8_t_ptr, \\\n+    uint8_t const *: __ARM_mve_type_uint8_t_const_ptr, \\\n+    uint8x16_t: __ARM_mve_type_uint8x16_t, \\\n+    uint8x16x2_t: __ARM_mve_type_uint8x16x2_t, \\\n+    uint8x16x4_t: __ARM_mve_type_uint8x16x4_t, \\\n+    default: _Generic(x, \\\n+\tsigned char: __ARM_mve_type_int8_t, \\\n+\tshort: __ARM_mve_type_int16_t, \\\n+\tint: __ARM_mve_type_int32_t, \\\n+\tlong: __ARM_mve_type_int32_t, \\\n+\tlong long: __ARM_mve_type_int64_t, \\\n+\tunsigned char: __ARM_mve_type_uint8_t, \\\n+\tunsigned short: __ARM_mve_type_uint16_t, \\\n+\tunsigned int: __ARM_mve_type_uint32_t, \\\n+\tunsigned long: __ARM_mve_type_uint32_t, \\\n+\tunsigned long long: __ARM_mve_type_uint64_t, \\\n+\tdefault: __ARM_mve_unsupported_type))\n+#else\n+#define __ARM_mve_typeid(x) _Generic(x, \\\n+    int16_t: __ARM_mve_type_int16_t, \\\n+    int16_t *: __ARM_mve_type_int16_t_ptr, \\\n+    int16_t const *: __ARM_mve_type_int16_t_const_ptr, \\\n+    int16x8_t: __ARM_mve_type_int16x8_t, \\\n+    int16x8x2_t: __ARM_mve_type_int16x8x2_t, \\\n+    int16x8x4_t: __ARM_mve_type_int16x8x4_t, \\\n+    int32_t: __ARM_mve_type_int32_t, \\\n+    int32_t *: __ARM_mve_type_int32_t_ptr, \\\n+    int32_t const *: __ARM_mve_type_int32_t_const_ptr, \\\n+    int32x4_t: __ARM_mve_type_int32x4_t, \\\n+    int32x4x2_t: __ARM_mve_type_int32x4x2_t, \\\n+    int32x4x4_t: __ARM_mve_type_int32x4x4_t, \\\n+    int64_t: __ARM_mve_type_int64_t, \\\n+    int64_t *: __ARM_mve_type_int64_t_ptr, \\\n+    int64_t const *: __ARM_mve_type_int64_t_const_ptr, \\\n+    int64x2_t: __ARM_mve_type_int64x2_t, \\\n+    int8_t: __ARM_mve_type_int8_t, \\\n+    int8_t *: __ARM_mve_type_int8_t_ptr, \\\n+    int8_t const *: __ARM_mve_type_int8_t_const_ptr, \\\n+    int8x16_t: __ARM_mve_type_int8x16_t, \\\n+    int8x16x2_t: __ARM_mve_type_int8x16x2_t, \\\n+    int8x16x4_t: __ARM_mve_type_int8x16x4_t, \\\n+    uint16_t: __ARM_mve_type_uint16_t, \\\n+    uint16_t *: __ARM_mve_type_uint16_t_ptr, \\\n+    uint16_t const *: __ARM_mve_type_uint16_t_const_ptr, \\\n+    uint16x8_t: __ARM_mve_type_uint16x8_t, \\\n+    uint16x8x2_t: __ARM_mve_type_uint16x8x2_t, \\\n+    uint16x8x4_t: __ARM_mve_type_uint16x8x4_t, \\\n+    uint32_t: __ARM_mve_type_uint32_t, \\\n+    uint32_t *: __ARM_mve_type_uint32_t_ptr, \\\n+    uint32_t const *: __ARM_mve_type_uint32_t_const_ptr, \\\n+    uint32x4_t: __ARM_mve_type_uint32x4_t, \\\n+    uint32x4x2_t: __ARM_mve_type_uint32x4x2_t, \\\n+    uint32x4x4_t: __ARM_mve_type_uint32x4x4_t, \\\n+    uint64_t: __ARM_mve_type_uint64_t, \\\n+    uint64_t *: __ARM_mve_type_uint64_t_ptr, \\\n+    uint64_t const *: __ARM_mve_type_uint64_t_const_ptr, \\\n+    uint64x2_t: __ARM_mve_type_uint64x2_t, \\\n+    uint8_t: __ARM_mve_type_uint8_t, \\\n+    uint8_t *: __ARM_mve_type_uint8_t_ptr, \\\n+    uint8_t const *: __ARM_mve_type_uint8_t_const_ptr, \\\n+    uint8x16_t: __ARM_mve_type_uint8x16_t, \\\n+    uint8x16x2_t: __ARM_mve_type_uint8x16x2_t, \\\n+    uint8x16x4_t: __ARM_mve_type_uint8x16x4_t, \\\n+    default: _Generic(x, \\\n+\tsigned char: __ARM_mve_type_int8_t, \\\n+\tshort: __ARM_mve_type_int16_t, \\\n+\tint: __ARM_mve_type_int32_t, \\\n+\tlong: __ARM_mve_type_int32_t, \\\n+\tlong long: __ARM_mve_type_int64_t, \\\n+\tunsigned char: __ARM_mve_type_uint8_t, \\\n+\tunsigned short: __ARM_mve_type_uint16_t, \\\n+\tunsigned int: __ARM_mve_type_uint32_t, \\\n+\tunsigned long: __ARM_mve_type_uint32_t, \\\n+\tunsigned long long: __ARM_mve_type_uint64_t, \\\n+\tdefault: __ARM_mve_unsupported_type))\n+#endif /* MVE Floating point.  */\n+\n+extern void *__ARM_undef;\n+#define __ARM_mve_coerce(param, type) \\\n+    _Generic(param, type: param, default: *(type *)__ARM_undef)\n+\n+#if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n+\n+#define vst4q(p0,p1) __arm_vst4q(p0,p1)\n+#define __arm_vst4q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16x4_t]: __arm_vst4q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16x4_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8x4_t]: __arm_vst4q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8x4_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4x4_t]: __arm_vst4q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16x4_t]: __arm_vst4q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x4_t]: __arm_vst4q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x4_t]: __arm_vst4q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x4_t)), \\\n+  int (*)[__ARM_mve_type_float16_t_ptr][__ARM_mve_type_float16x8x4_t]: __arm_vst4q_f16 (__ARM_mve_coerce(__p0, float16_t *), __ARM_mve_coerce(__p1, float16x8x4_t)), \\\n+  int (*)[__ARM_mve_type_float32_t_ptr][__ARM_mve_type_float32x4x4_t]: __arm_vst4q_f32 (__ARM_mve_coerce(__p0, float32_t *), __ARM_mve_coerce(__p1, float32x4x4_t)));})\n+\n+#else /* MVE Interger.  */\n+\n+#define vst4q(p0,p1) __arm_vst4q(p0,p1)\n+#define __arm_vst4q(p0,p1) ({ __typeof(p0) __p0 = (p0); \\\n+  __typeof(p1) __p1 = (p1); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)][__ARM_mve_typeid(__p1)])0, \\\n+  int (*)[__ARM_mve_type_int8_t_ptr][__ARM_mve_type_int8x16x4_t]: __arm_vst4q_s8 (__ARM_mve_coerce(__p0, int8_t *), __ARM_mve_coerce(__p1, int8x16x4_t)), \\\n+  int (*)[__ARM_mve_type_int16_t_ptr][__ARM_mve_type_int16x8x4_t]: __arm_vst4q_s16 (__ARM_mve_coerce(__p0, int16_t *), __ARM_mve_coerce(__p1, int16x8x4_t)), \\\n+  int (*)[__ARM_mve_type_int32_t_ptr][__ARM_mve_type_int32x4x4_t]: __arm_vst4q_s32 (__ARM_mve_coerce(__p0, int32_t *), __ARM_mve_coerce(__p1, int32x4x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8_t_ptr][__ARM_mve_type_uint8x16x4_t]: __arm_vst4q_u8 (__ARM_mve_coerce(__p0, uint8_t *), __ARM_mve_coerce(__p1, uint8x16x4_t)), \\\n+  int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x4_t]: __arm_vst4q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x4_t)), \\\n+  int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x4_t]: __arm_vst4q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x4_t)));})\n+\n+#endif /* MVE Floating point.  */\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "4a7e4d06f0af1e639788848041133a800b183e83", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,21 @@\n+/*  MVE builtin definitions for Arm.\n+    Copyright  (C) 2019-2020 Free Software Foundation, Inc.\n+    Contributed by Arm.\n+\n+    This file is part of GCC.\n+\n+    GCC is free software; you can redistribute it and/or modify it\n+    under the terms of the GNU General Public License as published\n+    by the Free Software Foundation; either version 3, or (at your\n+    option) any later version.\n+\n+    GCC is distributed in the hope that it will be useful, but WITHOUT\n+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+    License for more details.\n+\n+    You should have received a copy of the GNU General Public License\n+    along with GCC; see the file COPYING3.  If not see\n+    <http://www.gnu.org/licenses/>.  */\n+\n+VAR5 (STORE1, vst4q, v16qi, v8hi, v4si, v8hf, v4sf)"}, {"sha": "5c1a11bf7dee7590d668e7ec5e3b068789b3b3db", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -131,7 +131,8 @@\n (define_mode_iterator VQXMOV [V16QI V8HI V8HF V8BF V4SI V4SF V2DI TI])\n \n ;; Opaque structure types wider than TImode.\n-(define_mode_iterator VSTRUCT [EI OI CI XI])\n+(define_mode_iterator VSTRUCT [(EI \"!TARGET_HAVE_MVE\") OI\n+\t\t\t       (CI \"!TARGET_HAVE_MVE\") XI])\n \n ;; Opaque structure types used in table lookups (except vtbl1/vtbx1).\n (define_mode_iterator VTAB [TI EI OI])"}, {"sha": "b41deb078e6ec09a9c3fff7a84aa30e525a2aae8", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -17,9 +17,12 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.\n \n-(define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n (define_mode_attr V_sz_elem2 [(V16QI \"s8\") (V8HI \"u16\") (V4SI \"u32\")\n \t\t\t      (V2DI \"u64\")])\n+(define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n+(define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n+\n+(define_c_enum \"unspec\" [VST4Q])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -83,3 +86,37 @@\n }\n   [(set_attr \"length\" \"4,4\")\n    (set_attr \"type\" \"mve_move,mve_move\")])\n+\n+;;\n+;; [vst4q])\n+;;\n+(define_insn \"mve_vst4q<mode>\"\n+  [(set (match_operand:XI 0 \"neon_struct_operand\" \"=Um\")\n+\t(unspec:XI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n+\t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n+\t VST4Q))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+{\n+   rtx ops[6];\n+   int regno = REGNO (operands[1]);\n+   ops[0] = gen_rtx_REG (TImode, regno);\n+   ops[1] = gen_rtx_REG (TImode, regno+4);\n+   ops[2] = gen_rtx_REG (TImode, regno+8);\n+   ops[3] = gen_rtx_REG (TImode, regno+12);\n+   rtx reg  = operands[0];\n+   while (reg && !REG_P (reg))\n+    reg = XEXP (reg, 0);\n+   gcc_assert (REG_P (reg));\n+   ops[4] = reg;\n+   ops[5] = operands[0];\n+   /* Here in first three instructions data is stored to ops[4]'s location but\n+      in the fourth instruction data is stored to operands[0], this is to\n+      support the writeback.  */\n+   output_asm_insn (\"vst40.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vst41.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vst42.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, [%4]\\n\\t\"\n+\t\t    \"vst43.<V_sz_elem>\\t{%q0, %q1, %q2, %q3}, %5\", ops);\n+   return \"\";\n+}\n+  [(set_attr \"length\" \"16\")])"}, {"sha": "fbfeef233f38831a5cb256622625879d15209431", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -149,7 +149,7 @@\n (define_expand \"mov<mode>\"\n   [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\")\n \t(match_operand:VSTRUCT 1 \"general_operand\"))]\n-  \"TARGET_NEON\"\n+  \"TARGET_NEON || TARGET_HAVE_MVE\"\n {\n   gcc_checking_assert (aligned_operand (operands[0], <MODE>mode));\n   gcc_checking_assert (aligned_operand (operands[1], <MODE>mode));\n@@ -181,7 +181,7 @@\n (define_insn \"*neon_mov<mode>\"\n   [(set (match_operand:VSTRUCT 0 \"nonimmediate_operand\"\t\"=w,Ut,w\")\n \t(match_operand:VSTRUCT 1 \"general_operand\"\t\" w,w, Ut\"))]\n-  \"TARGET_NEON\n+  \"(TARGET_NEON || TARGET_HAVE_MVE)\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n {\n@@ -217,7 +217,7 @@\n (define_split\n   [(set (match_operand:OI 0 \"s_register_operand\" \"\")\n \t(match_operand:OI 1 \"s_register_operand\" \"\"))]\n-  \"TARGET_NEON && reload_completed\"\n+  \"(TARGET_NEON || TARGET_HAVE_MVE)&& reload_completed\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))]\n {\n@@ -258,7 +258,7 @@\n (define_split\n   [(set (match_operand:XI 0 \"s_register_operand\" \"\")\n \t(match_operand:XI 1 \"s_register_operand\" \"\"))]\n-  \"TARGET_NEON && reload_completed\"\n+  \"(TARGET_NEON || TARGET_HAVE_MVE) && reload_completed\"\n   [(set (match_dup 0) (match_dup 1))\n    (set (match_dup 2) (match_dup 3))\n    (set (match_dup 4) (match_dup 5))"}, {"sha": "1f7f169731301edc1f275342ad7a0eb46407f6e4", "filename": "gcc/config/arm/t-arm", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Ft-arm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Fconfig%2Farm%2Ft-arm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-arm?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -137,7 +137,8 @@ arm.o: $(srcdir)/config/arm/arm.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n   arm-cpu-data.h \\\n   $(srcdir)/config/arm/arm-protos.h \\\n   $(srcdir)/config/arm/arm_neon_builtins.def \\\n-  $(srcdir)/config/arm/arm_vfp_builtins.def\n+  $(srcdir)/config/arm/arm_vfp_builtins.def \\\n+  $(srcdir)/config/arm/arm_mve_builtins.def\n \n arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n   $(SYSTEM_H) coretypes.h $(TM_H) \\\n@@ -147,6 +148,7 @@ arm-builtins.o: $(srcdir)/config/arm/arm-builtins.c $(CONFIG_H) \\\n   $(srcdir)/config/arm/arm_acle_builtins.def \\\n   $(srcdir)/config/arm/arm_neon_builtins.def \\\n   $(srcdir)/config/arm/arm_vfp_builtins.def \\\n+  $(srcdir)/config/arm/arm_mve_builtins.def \\\n   $(srcdir)/config/arm/arm-simd-builtin-types.def\n \t$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(srcdir)/config/arm/arm-builtins.c"}, {"sha": "24272017f80665e3924e90509a2941f083b9046c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -1,3 +1,16 @@\n+2020-03-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vst4q_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vst4q_u8.c: Likewise.\n+\n 2020-03-17  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/94185"}, {"sha": "8516cfa832b03b4e8713aef8fc1cbabdf62c13f5", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_f16.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f16.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float16_t * addr, float16x8x4_t value)\n+{\n+  vst4q_f16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo1 (float16_t * addr, float16x8x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo2 (float16_t * addr, float16x8x4_t value)\n+{\n+  vst4q_f16 (addr, value);\n+  addr += 32;\n+  vst4q_f16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.16\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "c8b327259ff44d3d56377e0f15a03719792e534c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_f32.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_f32.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (float32_t * addr, float32x4x4_t value)\n+{\n+  vst4q_f32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo1 (float32_t * addr, float32x4x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo2 (float32_t * addr, float32x4x4_t value)\n+{\n+  vst4q_f32 (addr, value);\n+  addr += 16;\n+  vst4q_f32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.32\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "d06947d04d828f0bdf831dbef13b3a8ebb70c75a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_s16.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s16.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int16_t * addr, int16x8x4_t value)\n+{\n+  vst4q_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo1 (int16_t * addr, int16x8x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo2 (int16_t * addr, int16x8x4_t value)\n+{\n+  vst4q_s16 (addr, value);\n+  addr += 32;\n+  vst4q_s16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.16\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "5dc6835ef847032ce3a7d2c538f53eaec38dd0ca", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_s32.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s32.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int32_t * addr, int32x4x4_t value)\n+{\n+  vst4q_s32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo1 (int32_t * addr, int32x4x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo2 (int32_t * addr, int32x4x4_t value)\n+{\n+  vst4q_s32 (addr, value);\n+  addr += 16;\n+  vst4q_s32 (addr, value); \n+}\n+\n+/* { dg-final { scan-assembler {vst43.32\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "a3cb53e229236dc2f3355ef8622a6c99a9b9f3da", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_s8.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_s8.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (int8_t * addr, int8x16x4_t value)\n+{\n+  vst4q_s8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.8\"  }  } */\n+\n+void\n+foo1 (int8_t * addr, int8x16x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.8\"  }  } */\n+\n+void\n+foo2 (int8_t * addr, int8x16x4_t value)\n+{\n+  vst4q_s8 (addr, value);\n+  addr += 16*4;\n+  vst4q_s8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.8\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "87dd4bfc0624c8340f522dde3ca6818266d7cde0", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_u16.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u16.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint16_t * addr, uint16x8x4_t value)\n+{\n+  vst4q_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo1 (uint16_t * addr, uint16x8x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.16\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.16\"  }  } */\n+\n+void\n+foo2 (uint16_t * addr, uint16x8x4_t value)\n+{\n+  vst4q_u16 (addr, value);\n+  addr += 32;\n+  vst4q_u16 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.16\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "943aa0266a7da619295e3e30fe99c011c1b7184e", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_u32.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u32.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint32_t * addr, uint32x4x4_t value)\n+{\n+  vst4q_u32 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo1 (uint32_t * addr, uint32x4x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.32\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.32\"  }  } */\n+\n+void\n+foo2 (uint32_t * addr, uint32x4x4_t value)\n+{\n+  vst4q_u32 (addr, value);\n+  addr += 16;\n+  vst4q_u32 (addr, value); \n+}\n+\n+/* { dg-final { scan-assembler {vst43.32\\s\\{.*\\}, \\[.*\\]!}  }  } */"}, {"sha": "c8dcc97087c6f3b795fa26337b97a802e5e13c44", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vst4q_u8.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14782c8123ea7e55723cfc4fc30d726cd94851dc/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvst4q_u8.c?ref=14782c8123ea7e55723cfc4fc30d726cd94851dc", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+void\n+foo (uint8_t * addr, uint8x16x4_t value)\n+{\n+  vst4q_u8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.8\"  }  } */\n+\n+void\n+foo1 (uint8_t * addr, uint8x16x4_t value)\n+{\n+  vst4q (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler \"vst40.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst41.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst42.8\"  }  } */\n+/* { dg-final { scan-assembler \"vst43.8\"  }  } */\n+\n+void\n+foo2 (uint8_t * addr, uint8x16x4_t value)\n+{\n+  vst4q_u8 (addr, value);\n+  addr += 16*4;\n+  vst4q_u8 (addr, value);\n+}\n+\n+/* { dg-final { scan-assembler {vst43.8\\s\\{.*\\}, \\[.*\\]!}  }  } */"}]}