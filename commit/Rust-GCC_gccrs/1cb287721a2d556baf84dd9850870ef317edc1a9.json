{"sha": "1cb287721a2d556baf84dd9850870ef317edc1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNiMjg3NzIxYTJkNTU2YmFmODRkZDk4NTA4NzBlZjMxN2VkYzFhOQ==", "commit": {"author": {"name": "Aditya Kumar", "email": "aditya.k7@samsung.com", "date": "2015-12-24T16:41:57Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-24T16:41:57Z"}, "message": "Use const-ref instead of values for sese_l passed to functions.\n\ngcc/ChangeLog:\n\n2015-12-24  hiraditya  <hiraditya@msn.com>\n\n        * graphite-sese-to-poly.c (build_loop_iteration_domains): Use ref instead of value.\n        * sese.c (invariant_in_sese_p_rec): Use const ref instead of value.\n        (scalar_evolution_in_region): Same\n        * sese.h (bb_in_region): Same\n        (bb_in_sese_p): Same.\n        (stmt_in_sese_p): Same.\n        (defined_in_sese_p): Same.\n        (loop_in_sese_p): Same.\n\nFrom-SVN: r231947", "tree": {"sha": "81518d888ddc03ee3062d88b582ab57231044c67", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/81518d888ddc03ee3062d88b582ab57231044c67"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cb287721a2d556baf84dd9850870ef317edc1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb287721a2d556baf84dd9850870ef317edc1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cb287721a2d556baf84dd9850870ef317edc1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cb287721a2d556baf84dd9850870ef317edc1a9/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "402cab17fd7775cf392b1464df86ca3cc445accf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/402cab17fd7775cf392b1464df86ca3cc445accf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/402cab17fd7775cf392b1464df86ca3cc445accf"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "dfd46d992824bce2ffadbd288ed8401e6e99d9e0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1cb287721a2d556baf84dd9850870ef317edc1a9", "patch": "@@ -1,3 +1,14 @@\n+2015-12-24  Aditya Kumar  <aditya.k7@samsung.com>\n+\n+\t* graphite-sese-to-poly.c (build_loop_iteration_domains): Use ref instead of value.\n+\t* sese.c (invariant_in_sese_p_rec): Use const ref instead of value.\n+\t(scalar_evolution_in_region): Same\n+\t* sese.h (bb_in_region): Same\n+\t(bb_in_sese_p): Same.\n+\t(stmt_in_sese_p): Same.\n+\t(defined_in_sese_p): Same.\n+\t(loop_in_sese_p): Same.\n+\n 2015-12-24  Aditya Kumar  <aditya.k7@samsung.com>\n \n \t* graphite-scop-detection.c"}, {"sha": "a7fd5d9b918e9ea892cb5fdf367faabc507314f7", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=1cb287721a2d556baf84dd9850870ef317edc1a9", "patch": "@@ -465,7 +465,7 @@ build_loop_iteration_domains (scop_p scop, struct loop *loop,\n {\n \n   tree nb_iters = number_of_latch_executions (loop);\n-  sese_l region = scop->scop_info->region;\n+  const sese_l& region = scop->scop_info->region;\n   gcc_assert (loop_in_sese_p (loop, region));\n \n   isl_set *inner = isl_set_copy (outer);"}, {"sha": "b0f54dea1aecea56e2ac4ab882e24ff7f19a43ec", "filename": "gcc/sese.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fsese.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fsese.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.c?ref=1cb287721a2d556baf84dd9850870ef317edc1a9", "patch": "@@ -523,7 +523,7 @@ set_ifsese_condition (ifsese if_region, tree condition)\n    when T depends on memory that may change in REGION.  */\n \n bool\n-invariant_in_sese_p_rec (tree t, sese_l &region, bool *has_vdefs)\n+invariant_in_sese_p_rec (tree t, const sese_l &region, bool *has_vdefs)\n {\n   if (!defined_in_sese_p (t, region))\n     return true;\n@@ -596,7 +596,7 @@ scev_analyzable_p (tree def, sese_l &region)\n    is not defined in the REGION is considered a parameter.  */\n \n tree\n-scalar_evolution_in_region (sese_l &region, loop_p loop, tree t)\n+scalar_evolution_in_region (const sese_l &region, loop_p loop, tree t)\n {\n   gimple *def;\n   struct loop *def_loop;"}, {"sha": "99df3542f800bfa7047b8a21544d3c8922f1c207", "filename": "gcc/sese.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cb287721a2d556baf84dd9850870ef317edc1a9/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=1cb287721a2d556baf84dd9850870ef317edc1a9", "patch": "@@ -109,9 +109,9 @@ extern void free_sese_info (sese_info_p);\n extern void sese_insert_phis_for_liveouts (sese_info_p, basic_block, edge, edge);\n extern void build_sese_loop_nests (sese_info_p);\n extern struct loop *outermost_loop_in_sese (sese_l &, basic_block);\n-extern tree scalar_evolution_in_region (sese_l &, loop_p, tree);\n+extern tree scalar_evolution_in_region (const sese_l &, loop_p, tree);\n extern bool scev_analyzable_p (tree, sese_l &);\n-extern bool invariant_in_sese_p_rec (tree, sese_l &, bool *);\n+extern bool invariant_in_sese_p_rec (tree, const sese_l &, bool *);\n \n /* Check that SESE contains LOOP.  */\n \n@@ -133,7 +133,7 @@ sese_nb_params (sese_info_p region)\n    EXIT blocks.  */\n \n static inline bool\n-bb_in_region (basic_block bb, basic_block entry, basic_block exit)\n+bb_in_region (const_basic_block bb, const_basic_block entry, const_basic_block exit)\n {\n   /* FIXME: PR67842.  */\n #if 0\n@@ -158,15 +158,15 @@ bb_in_region (basic_block bb, basic_block entry, basic_block exit)\n    EXIT blocks.  */\n \n static inline bool\n-bb_in_sese_p (basic_block bb, sese_l &r)\n+bb_in_sese_p (basic_block bb, const sese_l &r)\n {\n   return bb_in_region (bb, r.entry->dest, r.exit->dest);\n }\n \n /* Returns true when STMT is defined in REGION.  */\n \n static inline bool\n-stmt_in_sese_p (gimple *stmt, sese_l &r)\n+stmt_in_sese_p (gimple *stmt, const sese_l &r)\n {\n   basic_block bb = gimple_bb (stmt);\n   return bb && bb_in_sese_p (bb, r);\n@@ -175,15 +175,15 @@ stmt_in_sese_p (gimple *stmt, sese_l &r)\n /* Returns true when NAME is defined in REGION.  */\n \n static inline bool\n-defined_in_sese_p (tree name, sese_l &r)\n+defined_in_sese_p (tree name, const sese_l &r)\n {\n   return stmt_in_sese_p (SSA_NAME_DEF_STMT (name), r);\n }\n \n /* Returns true when LOOP is in REGION.  */\n \n static inline bool\n-loop_in_sese_p (struct loop *loop, sese_l &region)\n+loop_in_sese_p (struct loop *loop, const sese_l &region)\n {\n   return (bb_in_sese_p (loop->header, region)\n \t  && bb_in_sese_p (loop->latch, region));"}]}