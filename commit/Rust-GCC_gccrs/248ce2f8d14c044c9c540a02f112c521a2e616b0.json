{"sha": "248ce2f8d14c044c9c540a02f112c521a2e616b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ4Y2UyZjhkMTRjMDQ0YzljNTQwYTAyZjExMmM1MjFhMmU2MTZiMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-07-12T19:59:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-07-12T19:59:31Z"}, "message": "re PR c++/44907 (SFINAE vs ambiguous base (the real one ;))\n\n/cp\n2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44907\n\t* call.c (build_temp): Add tsubst_flags_t complain parameter;\n\tadjust build_special_member_call call, pass complain.\n\t(convert_like_real): Adjust build_temp call, pass complain.\n\n/testsuite\n2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/44907\n\t* g++.dg/template/sfinae19.C: New.\n\t* g++.dg/template/sfinae20.C: Likewise.\n\nFrom-SVN: r162113", "tree": {"sha": "549fbd7f45b4c2063e6078f170a0a31b1abddd5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549fbd7f45b4c2063e6078f170a0a31b1abddd5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/248ce2f8d14c044c9c540a02f112c521a2e616b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248ce2f8d14c044c9c540a02f112c521a2e616b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/248ce2f8d14c044c9c540a02f112c521a2e616b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/248ce2f8d14c044c9c540a02f112c521a2e616b0/comments", "author": null, "committer": null, "parents": [{"sha": "ac9b0eeae0cd0d51908039aae35d1dff6a1486aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac9b0eeae0cd0d51908039aae35d1dff6a1486aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac9b0eeae0cd0d51908039aae35d1dff6a1486aa"}], "stats": {"total": 110, "additions": 106, "deletions": 4}, "files": [{"sha": "27061ada6fa886097b4495e969fcbca079dac394", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=248ce2f8d14c044c9c540a02f112c521a2e616b0", "patch": "@@ -1,3 +1,10 @@\n+2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44907\n+\t* call.c (build_temp): Add tsubst_flags_t complain parameter;\n+\tadjust build_special_member_call call, pass complain.\n+\t(convert_like_real): Adjust build_temp call, pass complain.\n+\n 2010-07-09  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43120"}, {"sha": "ca34a6c9afc2ff1b11f777b6d0dff30381052d2e", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=248ce2f8d14c044c9c540a02f112c521a2e616b0", "patch": "@@ -204,7 +204,7 @@ static void add_candidates (tree, tree, const VEC(tree,gc) *, tree, tree, bool,\n \t\t\t    tree, tree, int, struct z_candidate **);\n static conversion *merge_conversion_sequences (conversion *, conversion *);\n static bool magic_varargs_p (tree);\n-static tree build_temp (tree, tree, int, diagnostic_t *);\n+static tree build_temp (tree, tree, int, diagnostic_t *, tsubst_flags_t);\n \n /* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n    NAME can take many forms...  */\n@@ -4851,15 +4851,15 @@ enforce_access (tree basetype_path, tree decl, tree diag_decl)\n \n static tree\n build_temp (tree expr, tree type, int flags,\n-\t    diagnostic_t *diagnostic_kind)\n+\t    diagnostic_t *diagnostic_kind, tsubst_flags_t complain)\n {\n   int savew, savee;\n   VEC(tree,gc) *args;\n \n   savew = warningcount, savee = errorcount;\n   args = make_tree_vector_single (expr);\n   expr = build_special_member_call (NULL_TREE, complete_ctor_identifier,\n-\t\t\t\t    &args, type, flags, tf_warning_or_error);\n+\t\t\t\t    &args, type, flags, complain);\n   release_tree_vector (args);\n   if (warningcount > savew)\n     *diagnostic_kind = DK_WARNING;\n@@ -5132,7 +5132,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t   conversion (i.e. the second step of copy-initialization), so\n \t   don't allow any more.  */\n \tflags |= LOOKUP_NO_CONVERSION;\n-      expr = build_temp (expr, totype, flags, &diag_kind);\n+      expr = build_temp (expr, totype, flags, &diag_kind, complain);\n       if (diag_kind && fn)\n \t{\n \t  if ((complain & tf_error))"}, {"sha": "f9870585d2bb842593ab9c8b92a40eb6d1b3a552", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=248ce2f8d14c044c9c540a02f112c521a2e616b0", "patch": "@@ -1,3 +1,9 @@\n+2010-07-12  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/44907\n+\t* g++.dg/template/sfinae19.C: New.\n+\t* g++.dg/template/sfinae20.C: Likewise.\n+\n 2010-07-12  Jie Zhang  <jie@codesourcery.com>\n \n \t* gcc.target/arm/interrupt-1.c: New test."}, {"sha": "59be183feb5b89dfaa89f1a07784cd127613836b", "filename": "gcc/testsuite/g++.dg/template/sfinae19.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae19.C?ref=248ce2f8d14c044c9c540a02f112c521a2e616b0", "patch": "@@ -0,0 +1,44 @@\n+// PR c++/44907\n+\n+struct A { };\n+\n+struct B\n+: public A { };\n+\n+struct C\n+: public A { };\n+\n+struct D\n+: public B, public C { };\n+\n+template<bool, typename T = void> struct enable_if { typedef T type; };\n+template<typename T> struct enable_if<false, T> { };\n+\n+template<typename From, typename To>\n+  class mini_is_convertible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename To1>\n+      static void test_aux(To1);\n+\n+    template<typename To1, typename From1>\n+      static typename\n+      enable_if<(sizeof(test_aux<To1>(From1()), 1) > 0), one>::type\n+      test(int);\n+\n+    template<typename, typename>\n+      static two test(...);\n+\n+    public:\n+      static const bool value = sizeof(test<To, From>(0)) == 1;\n+  }; \n+\n+template<typename From, typename To>\n+  const bool mini_is_convertible<From, To>::value;\n+\n+int Test1[mini_is_convertible<D*, A*>::value ? -1 : 1]; \n+int Test2[mini_is_convertible<A*, D*>::value ? -1 : 1];\n+int Test3[mini_is_convertible<D, A>::value ? -1 : 1]; \n+int Test4[mini_is_convertible<A, D>::value ? -1 : 1];"}, {"sha": "9767bc02984fb500eabe201ced3b1daf22404104", "filename": "gcc/testsuite/g++.dg/template/sfinae20.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/248ce2f8d14c044c9c540a02f112c521a2e616b0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fsfinae20.C?ref=248ce2f8d14c044c9c540a02f112c521a2e616b0", "patch": "@@ -0,0 +1,45 @@\n+// PR c++/44907\n+// { dg-options \"-std=c++0x\" }\n+\n+#include <utility>\n+\n+struct A { };\n+\n+struct B\n+: public A { };\n+\n+struct C\n+: public A { };\n+\n+struct D\n+: public B, public C { };\n+\n+template<typename From, typename To>\n+  class mini_is_convertible\n+  {\n+    typedef char one;\n+    typedef struct { char arr[2]; } two;\n+\n+    template<typename To1>\n+      static void test_aux(To1);\n+\n+    template<typename To1, typename From1>\n+      static decltype(test_aux<To1>(std::declval<From1>()), one())\n+      test(int);\n+\n+    template<typename, typename>\n+      static two test(...);\n+\n+    public:\n+      static const bool value = sizeof(test<To, From>(0)) == 1;\n+  }; \n+\n+template<typename From, typename To>\n+  const bool mini_is_convertible<From, To>::value;\n+\n+static_assert (!mini_is_convertible<D*, A*>::value, \"\");\n+static_assert (!mini_is_convertible<A*, D*>::value, \"\");\n+static_assert (!mini_is_convertible<D&, A&>::value, \"\");\n+static_assert (!mini_is_convertible<A&, D&>::value, \"\");\n+static_assert (!mini_is_convertible<D, A>::value, \"\");\n+static_assert (!mini_is_convertible<A, D>::value, \"\");"}]}