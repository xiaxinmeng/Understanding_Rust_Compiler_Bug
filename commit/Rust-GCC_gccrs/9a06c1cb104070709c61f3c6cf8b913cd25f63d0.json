{"sha": "9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwNmMxY2IxMDQwNzA3MDljNjFmM2M2Y2Y4YjkxM2NkMjVmNjNkMA==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-02-14T19:46:08Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2005-02-14T19:46:08Z"}, "message": "re PR tree-optimization/19853 (incorrect vops after exposing a new global variable)\n\n\n\tPR tree-optimization/19853\n\t* tree-dfa.c (add_referenced_var): Always examine DECL_INITIAL.\n\n\ntestsuite/ChangeLog\n\n\tPR tree-optimization/19853\n\t* gcc.c-torture/compile/pr19853.c: New test.\n\nFrom-SVN: r95040", "tree": {"sha": "a3ef055a4893e717fddea59759b20cf8a3e9b9f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ef055a4893e717fddea59759b20cf8a3e9b9f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/comments", "author": null, "committer": null, "parents": [{"sha": "f769035f7cca45e5236f797864183e18f8c27b58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f769035f7cca45e5236f797864183e18f8c27b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f769035f7cca45e5236f797864183e18f8c27b58"}], "stats": {"total": 41, "additions": 35, "deletions": 6}, "files": [{"sha": "e20036f273ab3e7efd9e8dcb62d4f9288af0542a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "patch": "@@ -1,3 +1,8 @@\n+2005-02-14  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/19853\n+\t* tree-dfa.c (add_referenced_var): Always examine DECL_INITIAL.\n+\n 2005-02-14  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* passes.c (rest_of_handle_loop_optimize): Remove calls to\n@@ -9,7 +14,7 @@\n \tswapping commutative operands.\n \n 2005-02-14  Sebastian Pop  <pop@cri.ensmp.fr>\n-        \n+\n \t* lambda-code.c (lambda_loopnest_to_gcc_loopnest, perfect_nestify):\n \tUse standard_iv_increment_position for computing the bsi position\n \tfor create_iv.\n@@ -19,9 +24,10 @@\n 2005-02-13  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR target/17428\n-\t* cfgrtl.c (safe_insert_insn_on_edge): Avoid extending life range of hard\n-\tregisters.\n-\t* value-prof.c (insn_prefetch_values_to_profile): Only scan normal insns.\n+\t* cfgrtl.c (safe_insert_insn_on_edge): Avoid extending\n+\tlife range of hard registers.\n+\t* value-prof.c (insn_prefetch_values_to_profile): Only\n+\tscan normal insns.\n \n \t* value-prof.c (rtl_find_values_to_profile): Do not look for values to\n \tprofile in libcalls."}, {"sha": "308cbe981b32922a8299091078ff794efd6704c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "patch": "@@ -1,3 +1,8 @@\n+2005-02-14  Diego Novillo  <dnovillo@redhat.com>\n+\n+\tPR tree-optimization/19853\n+\t* gcc.c-torture/compile/pr19853.c: New test.\n+\n 2005-02-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/19608"}, {"sha": "f7fdf49bcfd1507f5a432ec09f7beece6873a38b", "filename": "gcc/testsuite/gcc.c-torture/compile/pr19853.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19853.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19853.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr19853.c?ref=9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "patch": "@@ -0,0 +1,19 @@\n+struct test { int *x; } global_test;\n+int global_int;\n+\n+int flag;\n+\n+void test (char *dummy)\n+{\n+  static const struct test const_test = { &global_int };\n+  struct test local_test;\n+\n+  int i;\n+  for (i = 0; i < 1; i++)\n+    *dummy = 0;\n+  if (flag)\n+    __builtin_memset (dummy, 0, 16);\n+\n+  local_test = const_test;\n+  global_test = local_test;\n+}"}, {"sha": "0d07ded7a436220e78db6a47339399cb7bf5dc25", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a06c1cb104070709c61f3c6cf8b913cd25f63d0/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=9a06c1cb104070709c61f3c6cf8b913cd25f63d0", "patch": "@@ -901,8 +901,7 @@ add_referenced_var (tree var, struct walk_state *walk_state)\n       /* Scan DECL_INITIAL for pointer variables as they may contain\n \t address arithmetic referencing the address of other\n \t variables.  */\n-      if (DECL_INITIAL (var)\n-\t  && POINTER_TYPE_P (TREE_TYPE (var)))\n+      if (DECL_INITIAL (var))\n       \twalk_tree (&DECL_INITIAL (var), find_vars_r, walk_state, 0);\n     }\n }"}]}