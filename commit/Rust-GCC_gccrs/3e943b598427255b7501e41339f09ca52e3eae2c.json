{"sha": "3e943b598427255b7501e41339f09ca52e3eae2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2U5NDNiNTk4NDI3MjU1Yjc1MDFlNDEzMzlmMDljYTUyZTNlYWUyYw==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1996-10-24T00:40:58Z"}, "message": "sh.md (movdf_k, [...]): new alternative for pc-relative load.\n\n        * sh.md (movdf_k, movsf_i, movsf_ie): new alternative for\n        pc-relative load.\n        (movsf_ieq): new define_insn with matching define_split.\n        (movsf): use it where appropriate.\n        (consttable_sf, consttable_df): new define_insns.\n\nFrom-SVN: r13022", "tree": {"sha": "51a3bd7a5da79d335b042bec21f6f65ea742be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51a3bd7a5da79d335b042bec21f6f65ea742be8c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e943b598427255b7501e41339f09ca52e3eae2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e943b598427255b7501e41339f09ca52e3eae2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e943b598427255b7501e41339f09ca52e3eae2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e943b598427255b7501e41339f09ca52e3eae2c/comments", "author": null, "committer": null, "parents": [{"sha": "e577c183dd7e2cb4d14a79abba53353534f5f74d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e577c183dd7e2cb4d14a79abba53353534f5f74d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e577c183dd7e2cb4d14a79abba53353534f5f74d"}], "stats": {"total": 95, "additions": 83, "deletions": 12}, "files": [{"sha": "76d0a5b724e8db69f5b08f84c80db865aa145840", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 83, "deletions": 12, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e943b598427255b7501e41339f09ca52e3eae2c/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e943b598427255b7501e41339f09ca52e3eae2c/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=3e943b598427255b7501e41339f09ca52e3eae2c", "patch": "@@ -1654,13 +1654,13 @@\n ;; ??? This should be a define expand.\n \n (define_insn \"movdf_k\"\n-  [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,m\")\n-\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,m,r\"))]\n+  [(set (match_operand:DF 0 \"general_movdst_operand\" \"=r,r,r,m\")\n+\t(match_operand:DF 1 \"general_movsrc_operand\" \"r,FQ,m,r\"))]\n   \"arith_reg_operand (operands[0], DFmode)\n    || arith_reg_operand (operands[1], DFmode)\"\n   \"* return output_movedouble (insn, operands, DFmode);\"\n   [(set_attr \"length\" \"4\")\n-   (set_attr \"type\" \"move,load,store\")])\n+   (set_attr \"type\" \"move,pcload,load,store\")])\n \n ;; If the output is a register and the input is memory or a register, we have\n ;; to be careful and see which word needs to be loaded first.  \n@@ -1771,8 +1771,8 @@\n   \"{ if (prepare_move_operands (operands, DFmode)) DONE; }\")\n \n (define_insn \"movsf_i\"\n-  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,m,l,r\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,I,m,r,r,l\"))]\n+  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=r,r,r,r,m,l,r\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"r,I,FQ,m,r,r,l\"))]\n   \"\n    ! TARGET_SH3E &&\n    (arith_reg_operand (operands[0], SFmode)\n@@ -1782,13 +1782,14 @@\n \tmov\t%1,%0\n \tmov.l\t%1,%0\n \tmov.l\t%1,%0\n+\tmov.l\t%1,%0\n \tlds\t%1,%0\n \tsts\t%1,%0\"\n-  [(set_attr \"type\" \"move,move,load,store,move,move\")])\n+  [(set_attr \"type\" \"move,move,pcload,load,store,move,move\")])\n \n (define_insn \"movsf_ie\"\n-  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f,r,f,f,f,m,r,m,!r,!f\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\"  \"f,r,G,H,m,f,m,r,f,r\"))]\n+  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f,r,f,f,f,m,r,r,m,!r,!f\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"f,r,G,H,m,f,FQ,m,r,f,r\"))]\n   \"TARGET_SH3E\n    && (arith_reg_operand (operands[0], SFmode)\n        || arith_reg_operand (operands[1], SFmode))\"\n@@ -1801,16 +1802,56 @@\n \tfmov.s\t%1,%0\n \tmov.l\t%1,%0\n \tmov.l\t%1,%0\n+\tmov.l\t%1,%0\n \tflds\t%1,fpul\\;sts\tfpul,%0\n \tlds\t%1,fpul\\;fsts\tfpul,%0\"\n-  [(set_attr \"type\" \"move,move,fp,fp,load,store,load,store,move,fp\")\n-   (set_attr \"length\" \"*,*,*,*,*,*,*,*,4,4\")])\n+  [(set_attr \"type\" \"move,move,fp,fp,load,store,pcload,load,store,move,fp\")\n+   (set_attr \"length\" \"*,*,*,*,*,*,*,*,*,4,4\")])\n+\n+(define_insn \"movsf_ieq\"\n+  [(set (match_operand:SF 0 \"general_movdst_operand\" \"=f\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"FQ\"))\n+   (clobber (reg:SI 0))]\n+  \"TARGET_SH3E\n+   && (arith_reg_operand (operands[0], SFmode)\n+       || arith_reg_operand (operands[1], SFmode))\"\n+  \"#\"\n+  [(set_attr \"type\" \"pcload\") (set_attr \"length\" \"4\")])\n+\n+(define_split\n+  [(set (match_operand:SF 0 \"general_movdst_operand\" \"\")\n+\t(match_operand:SF 1 \"general_movsrc_operand\"  \"\"))\n+   (clobber (reg:SI 0))]\n+  \"GET_CODE (operands[0]) == REG && REGNO (operands[0]) < FIRST_PSEUDO_REGISTER\"\n+  [(set (match_dup 0) (match_dup 1))]\n+  \"\n+{\n+  if (REGNO (operands[0]) >= FIRST_FP_REG && REGNO (operands[0]) <= LAST_FP_REG)\n+    {\n+      emit_insn (gen_mova (XEXP (operands[1], 0)));\n+      XEXP (operands[1], 0) = gen_rtx (REG, Pmode, 0);\n+    }\n+}\")\n \n (define_expand \"movsf\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\" \"\")\n-\t(match_operand:SF 1 \"general_movsrc_operand\" \"\"))]\n+        (match_operand:SF 1 \"general_movsrc_operand\" \"\"))]\n   \"\"\n-  \"{ if (prepare_move_operands (operands, SFmode)) DONE; }\")\n+  \"\n+{\n+  if (prepare_move_operands (operands, SFmode))\n+    DONE;\n+  if (TARGET_SH3E && GET_CODE (operands[1]) == CONST_DOUBLE\n+      && ! fp_zero_operand (operands[1]) && ! fp_one_operand (operands[1])\n+      && GET_CODE (operands[0]) == REG\n+      && (REGNO (operands[0]) >= FIRST_PSEUDO_REGISTER\n+\t  || (REGNO (operands[0]) >= FIRST_FP_REG\n+\t      && REGNO (operands[0]) <= LAST_FP_REG)))\n+    {\n+      emit_insn (gen_movsf_ieq (operands[0], operands[1]));\n+      DONE;\n+    }\n+}\")\n \f\n ;; ------------------------------------------------------------------------\n ;; Define the real conditional branch instructions.\n@@ -2312,6 +2353,36 @@\n  [(set_attr \"length\" \"8\")\n   (set_attr \"in_delay_slot\" \"no\")])\n \n+; 4 byte floating point\n+\n+(define_insn \"consttable_sf\"\n+ [(unspec_volatile [(match_operand:SF 0 \"general_operand\" \"=g\")] 4)]\n+ \"\"\n+ \"*\n+{\n+  union real_extract u;\n+  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  assemble_real (u.d, SFmode);\n+  return \\\"\\\";\n+}\"\n+ [(set_attr \"length\" \"4\")\n+  (set_attr \"in_delay_slot\" \"no\")])\n+\n+; 8 byte floating point\n+\n+(define_insn \"consttable_df\"\n+ [(unspec_volatile [(match_operand:DF 0 \"general_operand\" \"=g\")] 6)]\n+ \"\"\n+ \"*\n+{\n+  union real_extract u;\n+  bcopy ((char *) &CONST_DOUBLE_LOW (operands[0]), (char *) &u, sizeof u);\n+  assemble_real (u.d, DFmode);\n+  return \\\"\\\";\n+}\"\n+ [(set_attr \"length\" \"8\")\n+  (set_attr \"in_delay_slot\" \"no\")])\n+\n ; align to a two byte boundary\n \n (define_insn \"align_2\""}]}