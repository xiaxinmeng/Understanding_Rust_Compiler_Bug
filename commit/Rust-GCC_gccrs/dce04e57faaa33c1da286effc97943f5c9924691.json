{"sha": "dce04e57faaa33c1da286effc97943f5c9924691", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNlMDRlNTdmYWFhMzNjMWRhMjg2ZWZmYzk3OTQzZjVjOTkyNDY5MQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-09-22T16:24:46Z"}, "committer": {"name": "Vidya Praveen", "email": "vp@gcc.gnu.org", "date": "2017-09-22T16:24:46Z"}, "message": "[arm] Improve error checking in parsecpu.awk\n\nThis patch adds a bit more error checking to parsecpu.awk to ensure\nthat statements are not missing arguments or have excess arguments\nbeyond those permitted.  It also slightly improves the handling of\nerrors so that we terminate properly if parsing fails and be as\nhelpful as we can while in the parsing phase.\n\n2017-09-22  Richard Earnshaw  <richard.earnshaw@arm.com>\n\n\t* config/arm/parsecpu.awk (fatal): Note that we've encountered an\n\terror.  Only quit immediately if parsing is complete.\n\t(BEGIN): Initialize fatal_err and parse_done.\n\t(begin fpu, end fpu): Check number of arguments.\n\t(begin arch, end arch): Likewise.\n\t(begin cpu, end cpu): Likewise.\n\t(cname, tune for, tune flags, architecture, fpu, option): Likewise.\n\t(optalias): Likewise.\n\nFrom-SVN: r253098", "tree": {"sha": "356dd9a89abfa49f2d6042c8008419f11576ef6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/356dd9a89abfa49f2d6042c8008419f11576ef6b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dce04e57faaa33c1da286effc97943f5c9924691", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce04e57faaa33c1da286effc97943f5c9924691", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dce04e57faaa33c1da286effc97943f5c9924691", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dce04e57faaa33c1da286effc97943f5c9924691/comments", "author": null, "committer": null, "parents": [{"sha": "bdb0828f2d93221b2d54ec965f20e1cf1182d18d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdb0828f2d93221b2d54ec965f20e1cf1182d18d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdb0828f2d93221b2d54ec965f20e1cf1182d18d"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "bbef1ef490a0f19b0836a2f2b6e7e4cb733eca10", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce04e57faaa33c1da286effc97943f5c9924691/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce04e57faaa33c1da286effc97943f5c9924691/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dce04e57faaa33c1da286effc97943f5c9924691", "patch": "@@ -1,3 +1,14 @@\n+2017-09-22  Richard Earnshaw  <richard.earnshaw@arm.com>\n+\n+\t* config/arm/parsecpu.awk (fatal): Note that we've encountered an\n+\terror.  Only quit immediately if parsing is complete.\n+\t(BEGIN): Initialize fatal_err and parse_done.\n+\t(begin fpu, end fpu): Check number of arguments.\n+\t(begin arch, end arch): Likewise.\n+\t(begin cpu, end cpu): Likewise.\n+\t(cname, tune for, tune flags, architecture, fpu, option): Likewise.\n+\t(optalias): Likewise.\n+\n 2017-09-22  Richard Earnshaw  <richard.earnshaw@arm.com>\n \n \t* config.gcc (arm*-*-*): Don't add arm-isa.h to tm_p_file."}, {"sha": "0b4fc680006f82028064c6a85572cef9ed3e4c45", "filename": "gcc/config/arm/parsecpu.awk", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dce04e57faaa33c1da286effc97943f5c9924691/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dce04e57faaa33c1da286effc97943f5c9924691/gcc%2Fconfig%2Farm%2Fparsecpu.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fparsecpu.awk?ref=dce04e57faaa33c1da286effc97943f5c9924691", "patch": "@@ -32,7 +32,8 @@\n \n function fatal (m) {\n     print \"error (\"lineno\"): \" m > \"/dev/stderr\"\n-    exit 1\n+    fatal_err = 1\n+    if (parse_done) exit 1\n }\n \n function toplevel () {\n@@ -502,14 +503,18 @@ BEGIN {\n     arch_name = \"\"\n     fpu_name = \"\"\n     lineno = 0\n+    fatal_err = 0\n+    parse_done = 0\n     if (cmd == \"\") fatal(\"Usage parsecpu.awk -v cmd=<xyz>\")\n }\n \n+# New line.  Reset parse status and increment line count for error messages\n // {\n     lineno++\n     parse_ok = 0\n }\n \n+# Comments must be on a line on their own.\n /^#/ {\n     parse_ok = 1\n }\n@@ -552,12 +557,14 @@ BEGIN {\n }\n \n /^begin fpu / {\n+    if (NF != 3) fatal(\"syntax: begin fpu <name>\")\n     toplevel()\n     fpu_name = $3\n     parse_ok = 1\n }\n \n /^end fpu / {\n+    if (NF != 3) fatal(\"syntax: end fpu <name>\")\n     if (fpu_name != $3) fatal(\"mimatched end fpu\")\n     if (! (fpu_name in fpu_isa)) {\n \tfatal(\"fpu definition \\\"\" fpu_name \"\\\" lacks an \\\"isa\\\" statement\")\n@@ -570,24 +577,28 @@ BEGIN {\n }\n \n /^begin arch / {\n+    if (NF != 3) fatal(\"syntax: begin arch <name>\")\n     toplevel()\n     arch_name = $3\n     parse_ok = 1\n }\n \n /^[ \t]*base / {\n+    if (NF != 2) fatal(\"syntax: base <architecture-base-name>\")\n     if (arch_name == \"\") fatal(\"\\\"base\\\" statement outside of arch block\")\n     arch_base[arch_name] = $2\n     parse_ok = 1\n }\n \n /^[ \t]*profile / {\n+    if (NF != 2) fatal(\"syntax: profile <profile-name>\")\n     if (arch_name == \"\") fatal(\"\\\"profile\\\" statement outside of arch block\")\n     arch_prof[arch_name] = $2\n     parse_ok = 1\n }\n \n /^end arch / {\n+    if (NF != 3) fatal(\"syntax: end arch <name>\")\n     if (arch_name != $3) fatal(\"mimatched end arch\")\n     if (! arch_name in arch_tune_for) {\n \tfatal(\"arch definition lacks a \\\"tune for\\\" statement\")\n@@ -603,18 +614,21 @@ BEGIN {\n }\n \n /^begin cpu / {\n+    if (NF != 3) fatal(\"syntax: begin cpu <name>\")\n     toplevel()\n     cpu_name = $3\n     parse_ok = 1\n }\n \n /^[ \t]*cname / {\n+    if (NF != 2) fatal(\"syntax: cname <identifier>\")\n     if (cpu_name == \"\") fatal(\"\\\"cname\\\" outside of cpu block\")\n     cpu_cnames[cpu_name] = $2\n     parse_ok = 1\n }\n \n /^[ \t]*tune for / {\n+    if (NF != 3) fatal(\"syntax: tune for <cpu-name>\")\n     if (cpu_name != \"\") {\n \tcpu_tune_for[cpu_name] = $3\n     } else if (arch_name != \"\") {\n@@ -624,6 +638,7 @@ BEGIN {\n }\n \n /^[ \t]*tune flags / {\n+    if (NF < 3) fatal(\"syntax: tune flags <flag> [<flag>]*\")\n     flags=\"\"\n     flag_count = NF\n     for (n = 3; n <= flag_count; n++) {\n@@ -640,18 +655,21 @@ BEGIN {\n }\n \n /^[ \t]*architecture / {\n+    if (NF != 2) fatal(\"syntax: architecture <arch-name>\")\n     if (cpu_name == \"\") fatal(\"\\\"architecture\\\" outside of cpu block\")\n     cpu_arch[cpu_name] = $2\n     parse_ok = 1\n }\n \n /^[ \t]*fpu / {\n+    if (NF != 2) fatal(\"syntax: fpu <fpu-name>\")\n     if (cpu_name == \"\") fatal(\"\\\"fpu\\\" outside of cpu block\")\n     cpu_fpu[cpu_name] = $2\n     parse_ok = 1\n }\n \n /^[ \t]*isa / {\n+    if (NF < 2) fatal(\"syntax: isa <feature-or-fgroup> [<feature-or-fgroup>]*\")\n     flags=\"\"\n     flag_count = NF\n     for (n = 2; n <= flag_count; n++) {\n@@ -670,6 +688,7 @@ BEGIN {\n }\n \n /^[ \t]*option / {\n+    if (NF < 4) fatal(\"syntax: option <name> add|remove <feature-or-fgroup>+\")\n     name=$2\n     if ($3 == \"add\") {\n \tremove = \"false\"\n@@ -696,6 +715,7 @@ BEGIN {\n }\n \n /^[ \t]*optalias / {\n+    if (NF != 3) fatal(\"syntax: optalias <name> <option-name>\")\n     name=$2\n     alias=$3\n     if (cpu_name != \"\") {\n@@ -709,12 +729,14 @@ BEGIN {\n }\n \n /^[ \t]*costs / {\n+    if (NF != 2) fatal(\"syntax: costs <identifier>\")\n     if (cpu_name == \"\") fatal(\"\\\"costs\\\" outside of cpu block\")\n     cpu_cost[cpu_name] = $2\n     parse_ok = 1\n }\n \n /^end cpu / {\n+    if (NF != 3) fatal(\"syntax: end cpu <name>\")\n     if (cpu_name != $3) fatal(\"mimatched end cpu\")\n     if (! (cpu_name in cpu_cnames)) {\n \tcpu_cnames[cpu_name] = cpu_name\n@@ -731,6 +753,8 @@ BEGIN {\n }\n \n END {\n+    parse_done = 1\n+    if (fatal_err) exit 1\n     toplevel()\n     if (cmd == \"data\") {\n \tgen_data()"}]}