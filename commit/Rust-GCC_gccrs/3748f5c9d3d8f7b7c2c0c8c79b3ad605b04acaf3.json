{"sha": "3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc0OGY1YzlkM2Q4ZjdiN2MyYzBjOGM3OWIzYWQ2MDViMDRhY2FmMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2010-10-11T14:56:39Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-10-11T14:56:39Z"}, "message": "tree.h (TREE_THIS_NOTRAP): Use TREE_CHECK5.\n\n\t* tree.h (TREE_THIS_NOTRAP): Use TREE_CHECK5.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Only check\n\tTREE_THIS_NOTRAP when appropriate.\n\t(get_spill_slot_decl): Don't set TREE_THIS_NOTRAP on the new\n\tVAR_DECL.\n\t* gimplify.c (gimplify_expr): Copy NOTRAP from INDIRECT_REF to\n\tnewly created MEM_REF.\n\nFrom-SVN: r165313", "tree": {"sha": "86d760319c5f684bb65a7955d36c6b9540156771", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86d760319c5f684bb65a7955d36c6b9540156771"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/comments", "author": null, "committer": null, "parents": [{"sha": "c159751bf52d6bac1c1dfef02498bf1a32f24278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c159751bf52d6bac1c1dfef02498bf1a32f24278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c159751bf52d6bac1c1dfef02498bf1a32f24278"}], "stats": {"total": 31, "additions": 25, "deletions": 6}, "files": [{"sha": "41e39be8e52b4f6ecd50933b33d0475d37a8a8d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "patch": "@@ -1,3 +1,13 @@\n+2010-10-11  Ian Lance Taylor  <iant@google.com>\n+\n+\t* tree.h (TREE_THIS_NOTRAP): Use TREE_CHECK5.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Only check\n+\tTREE_THIS_NOTRAP when appropriate.\n+\t(get_spill_slot_decl): Don't set TREE_THIS_NOTRAP on the new\n+\tVAR_DECL.\n+\t* gimplify.c (gimplify_expr): Copy NOTRAP from INDIRECT_REF to\n+\tnewly created MEM_REF.\n+\n 2010-10-11  Hariharan Sandanagobalane  <hariharan@picochip.com>\n \n         Nathan Froyds patch to hooks FUNCTION_ARG etc."}, {"sha": "01dd70ab567a73e3347bff6cf593d001ca4a3252", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "patch": "@@ -1660,7 +1660,11 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t  else\n \t    MEM_NOTRAP_P (ref) = 1;\n \t}\n-      else\n+      else if (TREE_CODE (base) == INDIRECT_REF\n+\t       || TREE_CODE (base) == MEM_REF\n+\t       || TREE_CODE (base) == TARGET_MEM_REF\n+\t       || TREE_CODE (base) == ARRAY_REF\n+\t       || TREE_CODE (base) == ARRAY_RANGE_REF)\n \tMEM_NOTRAP_P (ref) = TREE_THIS_NOTRAP (base);\n \n       base = get_base_address (base);\n@@ -2236,7 +2240,6 @@ get_spill_slot_decl (bool force_build_p)\n   DECL_ARTIFICIAL (d) = 1;\n   DECL_IGNORED_P (d) = 1;\n   TREE_USED (d) = 1;\n-  TREE_THIS_NOTRAP (d) = 1;\n   spill_slot_decl = d;\n \n   rd = gen_rtx_MEM (BLKmode, frame_pointer_rtx);"}, {"sha": "029ad03f36477119452c7f17396b605801cfec9a", "filename": "gcc/gimplify.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "patch": "@@ -6798,6 +6798,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \tcase INDIRECT_REF:\n \t  {\n \t    bool volatilep = TREE_THIS_VOLATILE (*expr_p);\n+\t    bool notrap = TREE_THIS_NOTRAP (*expr_p);\n \t    tree saved_ptr_type = TREE_TYPE (TREE_OPERAND (*expr_p, 0));\n \n \t    *expr_p = fold_indirect_ref_loc (input_location, *expr_p);\n@@ -6818,6 +6819,7 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \t\t\t\t       TREE_OPERAND (*expr_p, 0),\n \t\t\t\t       build_int_cst (saved_ptr_type, 0));\n \t    TREE_THIS_VOLATILE (*expr_p) = volatilep;\n+\t    TREE_THIS_NOTRAP (*expr_p) = notrap;\n \t    ret = GS_OK;\n \t    break;\n \t  }"}, {"sha": "8aedf1a9207a44eea80cd71bdc1296fc35bf908c", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3748f5c9d3d8f7b7c2c0c8c79b3ad605b04acaf3", "patch": "@@ -601,7 +601,7 @@ struct GTY(()) tree_common {\n            all types\n \n        TREE_THIS_NOTRAP in\n-          INDIRECT_REF, ARRAY_REF, ARRAY_RANGE_REF\n+          INDIRECT_REF, MEM_REF, TARGET_MEM_REF, ARRAY_REF, ARRAY_RANGE_REF\n \n    deprecated_flag:\n \n@@ -1255,7 +1255,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    (or slice of the array) always belongs to the range of the array.\n    I.e. that the access will not trap, provided that the access to\n    the base to the array will not trap.  */\n-#define TREE_THIS_NOTRAP(NODE) ((NODE)->base.nothrow_flag)\n+#define TREE_THIS_NOTRAP(NODE) \\\n+  (TREE_CHECK5 (NODE, INDIRECT_REF, MEM_REF, TARGET_MEM_REF, ARRAY_REF,\t\\\n+\t\tARRAY_RANGE_REF)->base.nothrow_flag)\n \n /* In a VAR_DECL, PARM_DECL or FIELD_DECL, or any kind of ..._REF node,\n    nonzero means it may not be the lhs of an assignment.\n@@ -1296,8 +1298,10 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n    In a BLOCK, this means that the block contains variables that are used.  */\n #define TREE_USED(NODE) ((NODE)->base.used_flag)\n \n-/* In a FUNCTION_DECL, nonzero means a call to the function cannot throw\n-   an exception.  In a CALL_EXPR, nonzero means the call cannot throw.  */\n+/* In a FUNCTION_DECL, nonzero means a call to the function cannot\n+   throw an exception.  In a CALL_EXPR, nonzero means the call cannot\n+   throw.  We can't easily check the node type here as the C++\n+   frontend also uses this flag (for AGGR_INIT_EXPR).  */\n #define TREE_NOTHROW(NODE) ((NODE)->base.nothrow_flag)\n \n /* In a CALL_EXPR, means that it's safe to use the target of the call"}]}