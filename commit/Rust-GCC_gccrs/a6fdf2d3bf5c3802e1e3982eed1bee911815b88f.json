{"sha": "a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmZGYyZDNiZjVjMzgwMmUxZTM5ODJlZWQxYmVlOTExODE1Yjg4Zg==", "commit": {"author": {"name": "Hans Boehm", "email": "Hans_Boehm@hp.com", "date": "2003-02-28T17:26:29Z"}, "committer": {"name": "Hans Boehm", "email": "hboehm@gcc.gnu.org", "date": "2003-02-28T17:26:29Z"}, "message": "natMethod.cc (_Jv_CallAnyMethodA): Allocate a full jvalue for each argument.\n\n\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Allocate a full\n        jvalue for each argument. Simplify.\n\t* testsuite/libjava.jni/calls.c (docall),\n\ttestsuite/libjava.jni/calls.java (longpb_f): check for argument\n\tmisalignment.\n\nFrom-SVN: r63563", "tree": {"sha": "123264cc97cae659f3f16d4926edb3a263796a95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/123264cc97cae659f3f16d4926edb3a263796a95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/comments", "author": null, "committer": null, "parents": [{"sha": "b8c53e96add72de918819b4d13308715faeaa7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c53e96add72de918819b4d13308715faeaa7af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c53e96add72de918819b4d13308715faeaa7af"}], "stats": {"total": 67, "additions": 39, "deletions": 28}, "files": [{"sha": "1e3b451db9a01d150ccf180ea9d632fc09aada0b", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "patch": "@@ -1,3 +1,11 @@\n+2003-02-28  Hans Boehm  <Hans.Boehm@hp.com>\n+\n+\t* java/lang/reflect/natMethod.cc (_Jv_CallAnyMethodA): Allocate a full\n+        jvalue for each argument. Simplify.\n+\t* testsuite/libjava.jni/calls.c (docall),\n+\ttestsuite/libjava.jni/calls.java (longpb_f): check for argument\n+\tmisalignment.\n+\n 2003-02-28  Mark Wielaard  <mark@klomp.org>\n \n \t* Makefile.am (nat_source_files): Remove"}, {"sha": "c0f7077cc40c3c71c64728a40ec55b4c24f323db", "filename": "libjava/java/lang/reflect/natMethod.cc", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2Freflect%2FnatMethod.cc?ref=a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "patch": "@@ -358,46 +358,30 @@ _Jv_CallAnyMethodA (jobject obj,\n       obj = JvAllocObject (return_type);\n     }\n \n-  int i = 0;\n-  int size = 0;\n-  if (needs_this)\n-    {\n-      // The `NULL' type is `Object'.\n-      argtypes[i++] = get_ffi_type (NULL);\n-      size += sizeof (jobject);\n-    }\n-\n-  for (int arg = 0; i < param_count; ++i, ++arg)\n-    {\n-      argtypes[i] = get_ffi_type (paramelts[arg]);\n-      if (paramelts[arg]->isPrimitive())\n-\tsize += paramelts[arg]->size();\n-      else\n-\tsize += sizeof (jobject);\n-    }\n-\n+  const int size_per_arg = sizeof(jvalue);\n   ffi_cif cif;\n-  if (ffi_prep_cif (&cif, FFI_DEFAULT_ABI, param_count,\n-\t\t    rtype, argtypes) != FFI_OK)\n-    {\n-      // FIXME: throw some kind of VirtualMachineError here.\n-    }\n \n-  char *p = (char *) __builtin_alloca (size);\n-  void **values = (void **) __builtin_alloca (param_count * sizeof (void *));\n+  char *p = (char *) __builtin_alloca (param_count * size_per_arg);\n+\t\t// Overallocate to get correct alignment.\n+  void **values = (void **)\n+\t\t\t__builtin_alloca (param_count * sizeof (void *));\n \n-  i = 0;\n+  int i = 0;\n   if (needs_this)\n     {\n+      // The `NULL' type is `Object'.\n+      argtypes[i] = get_ffi_type (NULL);\n       values[i] = p;\n       memcpy (p, &obj, sizeof (jobject));\n-      p += sizeof (jobject);\n+      p += size_per_arg;\n       ++i;\n     }\n \n   for (int arg = 0; i < param_count; ++i, ++arg)\n     {\n       int tsize;\n+\n+      argtypes[i] = get_ffi_type (paramelts[arg]);\n       if (paramelts[arg]->isPrimitive())\n \ttsize = paramelts[arg]->size();\n       else\n@@ -406,9 +390,16 @@ _Jv_CallAnyMethodA (jobject obj,\n       // Copy appropriate bits from the jvalue into the ffi array.\n       // FIXME: we could do this copying all in one loop, above, by\n       // over-allocating a bit.\n+      // How do we do this without breaking big-endian platforms?\n       values[i] = p;\n       memcpy (p, &args[arg], tsize);\n-      p += tsize;\n+      p += size_per_arg;\n+    }\n+\n+  if (ffi_prep_cif (&cif, FFI_DEFAULT_ABI, param_count,\n+\t\t    rtype, argtypes) != FFI_OK)\n+    {\n+      // FIXME: throw some kind of VirtualMachineError here.\n     }\n \n   using namespace java::lang;"}, {"sha": "709e55d13ba2405c96a718fa6996a4b56ca64df5", "filename": "libjava/testsuite/libjava.jni/calls.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.c?ref=a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "patch": "@@ -47,6 +47,12 @@ Java_calls_docall (JNIEnv *env, jobject _this)\n   if (l != 2033)\n     ++fails;\n \n+  method = (*env)->GetStaticMethodID (env, klass, \"longpb_f\", \"(BJBJBJ)J\");\n+  l = (*env)->CallStaticLongMethod (env, klass, method, (jbyte) 13, (jlong) 3,\n+\t\t  \t\t   (jbyte) 13, (jlong) 3, (jbyte) 13, (jlong) 4);\n+  if (l != 3033)\n+    ++fails;\n+\n   method = (*env)->GetMethodID (env, klass, \"void_f\", \"()V\");\n   (*env)->CallVoidMethod (env, _this, method);\n "}, {"sha": "19c33be2a837ba309a9fdbf74660bad0777419f6", "filename": "libjava/testsuite/libjava.jni/calls.java", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6fdf2d3bf5c3802e1e3982eed1bee911815b88f/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.jni%2Fcalls.java?ref=a6fdf2d3bf5c3802e1e3982eed1bee911815b88f", "patch": "@@ -37,6 +37,12 @@ public static long long_f (long q)\n     return q + 2023;\n   }\n \n+  public static long longpb_f (byte b1, long q1, byte b2, long q2,\n+\t\t\t       byte b3, long q3)\n+  {\n+    return q1 + q2 + q3 + 3023;\n+  }\n+\n   public void void_f ()\n   {\n     System.out.println (\"void\");"}]}