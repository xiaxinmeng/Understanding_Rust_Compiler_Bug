{"sha": "36c37128fec15951f4ca43ad748568aaa550e2d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZjMzcxMjhmZWMxNTk1MWY0Y2E0M2FkNzQ4NTY4YWFhNTUwZTJkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2009-11-12T18:25:51Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2009-11-12T18:25:51Z"}, "message": "typeck.c (cv_qualified_p): New fn.\n\n\t* typeck.c (cv_qualified_p): New fn.\n\t(decay_conversion): Use it.\n\t* cp-tree.h: Declare it.\n\t* tree.c (rvalue): Use it and cv_unqualified.\n\t* init.c (build_aggr_init): Likewise.\n\nFrom-SVN: r154125", "tree": {"sha": "dc0bb919cc000e4ca415472a4da5243b7d3f412e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc0bb919cc000e4ca415472a4da5243b7d3f412e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36c37128fec15951f4ca43ad748568aaa550e2d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c37128fec15951f4ca43ad748568aaa550e2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36c37128fec15951f4ca43ad748568aaa550e2d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36c37128fec15951f4ca43ad748568aaa550e2d3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f33e4dd77aa34fab8c329da1572289304802c2a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f33e4dd77aa34fab8c329da1572289304802c2a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f33e4dd77aa34fab8c329da1572289304802c2a1"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "861835b383d31cac386e41a4f77463923c4605cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=36c37128fec15951f4ca43ad748568aaa550e2d3", "patch": "@@ -1,3 +1,11 @@\n+2009-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (cv_qualified_p): New fn.\n+\t(decay_conversion): Use it.\n+\t* cp-tree.h: Declare it.\n+\t* tree.c (rvalue): Use it and cv_unqualified.\n+\t* init.c (build_aggr_init): Likewise.\n+\n 2009-11-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/42013"}, {"sha": "f66a00948aeaf71c4d964e60c4752c508a3cff33", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=36c37128fec15951f4ca43ad748568aaa550e2d3", "patch": "@@ -5149,6 +5149,7 @@ extern tree move\t\t\t\t(tree);\n extern tree cp_build_qualified_type_real\t(tree, int, tsubst_flags_t);\n #define cp_build_qualified_type(TYPE, QUALS) \\\n   cp_build_qualified_type_real ((TYPE), (QUALS), tf_warning_or_error)\n+extern bool cv_qualified_p\t\t\t(const_tree);\n extern tree cv_unqualified\t\t\t(tree);\n extern special_function_kind special_function_p (const_tree);\n extern int count_trees\t\t\t\t(tree);"}, {"sha": "db2920450ebc168fafb2bddf2b9b8fa31c6224e7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=36c37128fec15951f4ca43ad748568aaa550e2d3", "patch": "@@ -1248,13 +1248,13 @@ build_aggr_init (tree exp, tree init, int flags, tsubst_flags_t complain)\n       /* Must arrange to initialize each element of EXP\n \t from elements of INIT.  */\n       itype = init ? TREE_TYPE (init) : NULL_TREE;\n-      if (cp_type_quals (type) != TYPE_UNQUALIFIED)\n-\tTREE_TYPE (exp) = TYPE_MAIN_VARIANT (type);\n-      if (itype && cp_type_quals (itype) != TYPE_UNQUALIFIED)\n-\titype = TREE_TYPE (init) = TYPE_MAIN_VARIANT (itype);\n+      if (cv_qualified_p (type))\n+\tTREE_TYPE (exp) = cv_unqualified (type);\n+      if (itype && cv_qualified_p (itype))\n+\tTREE_TYPE (init) = cv_unqualified (itype);\n       stmt_expr = build_vec_init (exp, NULL_TREE, init,\n \t\t\t\t  /*explicit_value_init_p=*/false,\n-\t\t\t\t  itype && same_type_p (itype,\n+\t\t\t\t  itype && same_type_p (TREE_TYPE (init),\n \t\t\t\t\t\t\tTREE_TYPE (exp)),\n                                   complain);\n       TREE_READONLY (exp) = was_const;"}, {"sha": "9dae1843616e74f1a84f03fd5a4ef3344b2c6d2b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=36c37128fec15951f4ca43ad748568aaa550e2d3", "patch": "@@ -555,8 +555,8 @@ rvalue (tree expr)\n \n      Non-class rvalues always have cv-unqualified types.  */\n   type = TREE_TYPE (expr);\n-  if (!CLASS_TYPE_P (type) && cp_type_quals (type))\n-    type = cp_build_qualified_type (type, TYPE_UNQUALIFIED);\n+  if (!CLASS_TYPE_P (type) && cv_qualified_p (type))\n+    type = cv_unqualified (type);\n \n   /* We need to do this for rvalue refs as well to get the right answer\n      from decltype; see c++/36628.  */"}, {"sha": "de21c4381be5bdb9b9e7cf3e6fd97cfb6cd2a26d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36c37128fec15951f4ca43ad748568aaa550e2d3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=36c37128fec15951f4ca43ad748568aaa550e2d3", "patch": "@@ -1690,7 +1690,7 @@ decay_conversion (tree exp)\n \n      Non-class rvalues always have cv-unqualified types.  */\n   type = TREE_TYPE (exp);\n-  if (!CLASS_TYPE_P (type) && cp_type_quals (type))\n+  if (!CLASS_TYPE_P (type) && cv_qualified_p (type))\n     exp = build_nop (cv_unqualified (type), exp);\n \n   return exp;\n@@ -7411,6 +7411,15 @@ cp_type_readonly (const_tree type)\n   return TYPE_READONLY (type);\n }\n \n+/* Returns nonzero if TYPE is const or volatile.  */\n+\n+bool\n+cv_qualified_p (const_tree type)\n+{\n+  int quals = cp_type_quals (type);\n+  return (quals & (TYPE_QUAL_CONST|TYPE_QUAL_VOLATILE)) != 0;\n+}\n+\n /* Returns nonzero if the TYPE contains a mutable member.  */\n \n bool"}]}