{"sha": "f6a542deced2bd9cbe288ac334486148b5badf51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhNTQyZGVjZWQyYmQ5Y2JlMjg4YWMzMzQ0ODYxNDhiNWJhZGY1MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-08-22T20:20:32Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-08-22T20:20:32Z"}, "message": "diagnostic.h (output_buffer_state): New macro.\n\n\t* diagnostic.h (output_buffer_state): New macro.\n\t* diagnostic.c (diagnostic_for_decl, sorry,\n\tdefault_print_error_function, output_do_verbatim,\n\treport_diagnostic, report_problematic_module): Use it.\n\t(wrap_text): Tweak.\n\t(output_format): Use wrap_text instead of maybe_wrap_text.\n\nFrom-SVN: r35891", "tree": {"sha": "6e3cf53c4db37bf3a9f13b535e5f44d61b730a26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6e3cf53c4db37bf3a9f13b535e5f44d61b730a26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6a542deced2bd9cbe288ac334486148b5badf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a542deced2bd9cbe288ac334486148b5badf51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a542deced2bd9cbe288ac334486148b5badf51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a542deced2bd9cbe288ac334486148b5badf51/comments", "author": null, "committer": null, "parents": [{"sha": "888e552fda3782604fff70acc32285b09e5c4246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/888e552fda3782604fff70acc32285b09e5c4246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/888e552fda3782604fff70acc32285b09e5c4246"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "7bf3b853dd8b2323b4e1a9dda640156a9d7c7148", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6a542deced2bd9cbe288ac334486148b5badf51", "patch": "@@ -1,3 +1,12 @@\n+2000-08-22  Gabriel Dos Reis  <gdr@codesourcery.com>\n+\n+\t* diagnostic.h (output_buffer_state): New macro.\n+\t* diagnostic.c (diagnostic_for_decl, sorry,\n+\tdefault_print_error_function, output_do_verbatim,\n+\treport_diagnostic, report_problematic_module): Use it.\n+\t(wrap_text): Tweak.\n+\t(output_format): Use wrap_text instead of maybe_wrap_text.\n+\n 2000-08-22  Nick Clifton  <nickc@redhat.com>\n \n \t* config/arm/lib1funcs.asm (ARM_DIV_MOD_BODY): New macro."}, {"sha": "b3433575a3bd9dccbd164c06be1cf3e254fc3728", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=f6a542deced2bd9cbe288ac334486148b5badf51", "patch": "@@ -550,14 +550,16 @@ wrap_text (buffer, start, end)\n      const char *start;\n      const char *end;\n {\n+  int is_wrapping = output_is_line_wrapping (buffer);\n+  \n   while (start != end)\n     {\n       /* Dump anything bodered by whitespaces.  */ \n       {\n         const char *p = start;\n         while (p != end && *p != ' ' && *p != '\\n')\n           ++p;\n-        if (p - start >= output_space_left (buffer))\n+        if (is_wrapping && p - start >= output_space_left (buffer))\n           output_add_newline (buffer);\n         output_append (buffer, start, p);\n         start = p;\n@@ -640,7 +642,7 @@ output_format (buffer)\n         const char *p = output_buffer_text_cursor (buffer);\n         while (*p && *p != '%')\n           ++p;\n-        maybe_wrap_text (buffer, output_buffer_text_cursor (buffer), p);\n+        wrap_text (buffer, output_buffer_text_cursor (buffer), p);\n         output_buffer_text_cursor (buffer) = p;\n       }\n \n@@ -984,7 +986,7 @@ diagnostic_for_decl (decl, msg, args_ptr, warn)\n \n   if (count_error (warn))\n     {\n-      os = diagnostic_buffer->state;\n+      os = output_buffer_state (diagnostic_buffer);\n       report_error_function (DECL_SOURCE_FILE (decl));\n       output_set_prefix\n \t(diagnostic_buffer, context_as_prefix\n@@ -995,7 +997,7 @@ diagnostic_for_decl (decl, msg, args_ptr, warn)\n       finish_diagnostic ();\n       output_destroy_prefix (diagnostic_buffer);\n   \n-      diagnostic_buffer->state = os;\n+      output_buffer_state (diagnostic_buffer) = os;\n     }\n   diagnostic_lock--;\n }\n@@ -1159,7 +1161,7 @@ sorry VPARAMS ((const char *msgid, ...))\n   va_list ap;\n   output_state os;\n \n-  os = diagnostic_buffer->state;\n+  os = output_buffer_state (diagnostic_buffer);\n   VA_START (ap, msgid);\n \n #ifndef ANSI_PROTOTYPES\n@@ -1173,7 +1175,7 @@ sorry VPARAMS ((const char *msgid, ...))\n   output_buffer_text_cursor (diagnostic_buffer) = msgid;\n   output_format (diagnostic_buffer);\n   finish_diagnostic ();\n-  diagnostic_buffer->state = os;\n+  output_buffer_state (diagnostic_buffer) = os;\n   va_end (ap);\n }\n \n@@ -1208,7 +1210,7 @@ default_print_error_function (file)\n       char *prefix = file ? build_message_string (\"%s: \", file) : NULL;\n       output_state os;\n \n-      os = diagnostic_buffer->state;\n+      os = output_buffer_state (diagnostic_buffer);\n       output_set_prefix (diagnostic_buffer, prefix);\n       \n       if (current_function_decl == NULL)\n@@ -1230,7 +1232,7 @@ default_print_error_function (file)\n \n       record_last_error_function ();\n       output_to_stream (diagnostic_buffer, stderr);\n-      diagnostic_buffer->state = os;\n+      output_buffer_state (diagnostic_buffer) = os;\n       free ((char*) prefix);\n     }\n }\n@@ -1505,14 +1507,14 @@ output_do_verbatim (buffer, msg, args_ptr)\n {\n   output_state os;\n \n-  os = buffer->state;\n+  os = output_buffer_state (buffer);\n   output_prefix (buffer) = NULL;\n   prefixing_policy (buffer) = DIAGNOSTICS_SHOW_PREFIX_NEVER;\n   output_buffer_text_cursor (buffer) = msg;\n   output_buffer_ptr_to_format_args (buffer) = args_ptr;\n   output_set_maximum_length (buffer, 0);\n   output_format (buffer);\n-  buffer->state = os;\n+  output_buffer_state (buffer) = os;\n }\n \n /* Output MESSAGE verbatim into BUFFER.  */\n@@ -1568,14 +1570,14 @@ report_diagnostic (dc)\n \n   if (count_error (diagnostic_is_warning (dc)))\n     {\n-      os = diagnostic_buffer->state;\n+      os = output_buffer_state (diagnostic_buffer);\n       diagnostic_msg = diagnostic_message (dc);\n       diagnostic_args = diagnostic_argument_list (dc);\n       (*diagnostic_starter (dc)) (diagnostic_buffer, dc);\n       output_format (diagnostic_buffer);\n       (*diagnostic_finalizer (dc)) (diagnostic_buffer, dc);\n       finish_diagnostic ();\n-      diagnostic_buffer->state = os;\n+      output_buffer_state (diagnostic_buffer) = os;\n     }\n \n   diagnostic_lock--;\n@@ -1666,7 +1668,7 @@ report_problematic_module (buffer)\n \n   if (output_needs_newline (buffer))\n     {\n-      output_verbatim (buffer, \"\\n\");\n+      output_add_newline (buffer);\n       output_needs_newline (buffer) = 0;\n     }\n "}, {"sha": "196f3f76b1fb76752c6bf3e2ede2d438fe99a057", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a542deced2bd9cbe288ac334486148b5badf51/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=f6a542deced2bd9cbe288ac334486148b5badf51", "patch": "@@ -87,6 +87,7 @@ struct output_buffer\n #define output_buffer_text_cursor(BUFFER) (BUFFER)->state.cursor\n #define output_buffer_format_args(BUFFER) *((BUFFER)->state.format_args)\n #define output_needs_newline(BUFFER) (BUFFER)->state.need_newline_p\n+#define output_buffer_state(BUFFER) (BUFFER)->state\n \n /* This data structure bundles altogether any information relevent to\n    the context of a diagnostic message.  */"}]}