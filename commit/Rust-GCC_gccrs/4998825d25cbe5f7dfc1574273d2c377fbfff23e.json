{"sha": "4998825d25cbe5f7dfc1574273d2c377fbfff23e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk5ODgyNWQyNWNiZTVmN2RmYzE1NzQyNzNkMmMzNzdmYmZmZjIzZQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-02-21T18:09:21Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-02-21T18:09:21Z"}, "message": "* config/avr/avr.md\n\t(*dec-and-branchhi!=-1.d.clobber): New text peephole.\n\t(*dec-and-branchhi!=-1.l.clobber): New text peephole.\n\nFrom-SVN: r184446", "tree": {"sha": "207d77676f52ecdf9896c652f193f2dde62ccd6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/207d77676f52ecdf9896c652f193f2dde62ccd6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4998825d25cbe5f7dfc1574273d2c377fbfff23e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4998825d25cbe5f7dfc1574273d2c377fbfff23e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4998825d25cbe5f7dfc1574273d2c377fbfff23e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4998825d25cbe5f7dfc1574273d2c377fbfff23e/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0545950be0752fdecf3ff75b56d413fedeaf483d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0545950be0752fdecf3ff75b56d413fedeaf483d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0545950be0752fdecf3ff75b56d413fedeaf483d"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "05ceab6c05a58b1b0347366f8eddb19ff6a707c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4998825d25cbe5f7dfc1574273d2c377fbfff23e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4998825d25cbe5f7dfc1574273d2c377fbfff23e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4998825d25cbe5f7dfc1574273d2c377fbfff23e", "patch": "@@ -1,3 +1,9 @@\n+2012-01-21  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\t* config/avr/avr.md\n+\t(*dec-and-branchhi!=-1.d.clobber): New text peephole.\n+\t(*dec-and-branchhi!=-1.l.clobber): New text peephole.\n+\n 2012-01-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr-protos.h (avr_accumulate_outgoing_args): Move"}, {"sha": "10772e22073c2787c8c3a0e0c491838c3f906752", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 77, "deletions": 3, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4998825d25cbe5f7dfc1574273d2c377fbfff23e/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4998825d25cbe5f7dfc1574273d2c377fbfff23e/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=4998825d25cbe5f7dfc1574273d2c377fbfff23e", "patch": "@@ -4919,7 +4919,7 @@\n \n ;; ************************* Peepholes ********************************\n \n-(define_peephole\n+(define_peephole ; \"*dec-and-branchsi!=-1.d.clobber\"\n   [(parallel [(set (match_operand:SI 0 \"d_register_operand\" \"\")\n                    (plus:SI (match_dup 0)\n                             (const_int -1)))\n@@ -4960,7 +4960,7 @@\n     return \"\";\n   })\n \n-(define_peephole\n+(define_peephole ; \"*dec-and-branchhi!=-1\"\n   [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n         (plus:HI (match_dup 0)\n                  (const_int -1)))\n@@ -4996,7 +4996,81 @@\n     return \"\";\n   })\n \n-(define_peephole\n+;; Same as above but with clobber flavour of addhi3\n+(define_peephole ; \"*dec-and-branchhi!=-1.d.clobber\"\n+  [(parallel [(set (match_operand:HI 0 \"d_register_operand\" \"\")\n+                   (plus:HI (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (scratch:QI))])\n+   (parallel [(set (cc0)\n+                   (compare (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n+   (set (pc)\n+        (if_then_else (ne (cc0)\n+                          (const_int 0))\n+                      (label_ref (match_operand 2 \"\" \"\"))\n+                      (pc)))]\n+  \"\"\n+  {\n+    CC_STATUS_INIT;\n+    if (test_hard_reg_class (ADDW_REGS, operands[0]))\n+      output_asm_insn (\"sbiw %0,1\", operands);\n+    else\n+      output_asm_insn (\"subi %A0,1\" CR_TAB\n+                       \"sbc %B0,__zero_reg__\", operands);\n+\n+    switch (avr_jump_mode (operands[2], insn))\n+      {\n+      case 1:\n+        return \"brcc %2\";\n+      case 2:\n+        return \"brcs .+2\\;rjmp %2\";\n+      case 3:\n+        return \"brcs .+4\\;jmp %2\";\n+      }\n+\n+    gcc_unreachable();\n+    return \"\";\n+  })\n+\n+;; Same as above but with clobber flavour of addhi3\n+(define_peephole ; \"*dec-and-branchhi!=-1.l.clobber\"\n+  [(parallel [(set (match_operand:HI 0 \"l_register_operand\" \"\")\n+                   (plus:HI (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (match_operand:QI 3 \"d_register_operand\" \"\"))])\n+   (parallel [(set (cc0)\n+                   (compare (match_dup 0)\n+                            (const_int -1)))\n+              (clobber (match_operand:QI 1 \"d_register_operand\" \"\"))])\n+   (set (pc)\n+        (if_then_else (ne (cc0)\n+                          (const_int 0))\n+                      (label_ref (match_operand 2 \"\" \"\"))\n+                      (pc)))]\n+  \"\"\n+  {\n+    CC_STATUS_INIT;\n+      output_asm_insn (\"ldi %3,1\"   CR_TAB\n+                       \"sub %A0,%3\" CR_TAB\n+                       \"sbc %B0,__zero_reg__\", operands);\n+\n+    switch (avr_jump_mode (operands[2], insn))\n+      {\n+      case 1:\n+        return \"brcc %2\";\n+      case 2:\n+        return \"brcs .+2\\;rjmp %2\";\n+      case 3:\n+        return \"brcs .+4\\;jmp %2\";\n+      }\n+\n+    gcc_unreachable();\n+    return \"\";\n+  })\n+\n+(define_peephole ; \"*dec-and-branchqi!=-1\"\n   [(set (match_operand:QI 0 \"d_register_operand\" \"\")\n         (plus:QI (match_dup 0)\n                  (const_int -1)))"}]}