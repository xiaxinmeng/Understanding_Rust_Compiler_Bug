{"sha": "ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZlZGY1MTE0YzhiZGQ1YjAyNGZiODdlMjNiOTM1ZTdkOTBjNmZmMw==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2010-10-02T14:52:07Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2010-10-02T14:52:07Z"}, "message": "Allow to pass separate configure arguments for build, host and target.\n\n/:\n\tPR bootstrap/45326\n\tPR bootstrap/45174\n\t* configure.ac: Honor initial values of $build_configargs,\n\t$host_configargs, $target_configargs.  Mark the precious, so\n\tenvironment settings get recorded.\n\t* configure: Regenerate.\n\ngcc/:\n\t* doc/install.texi (Configuration): Document build_configargs,\n\thost_configargs, target_configargs.\n\nFrom-SVN: r164904", "tree": {"sha": "2bc93cf6744bf10457800aad14d751389a4dc261", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bc93cf6744bf10457800aad14d751389a4dc261"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/comments", "author": null, "committer": null, "parents": [{"sha": "8b932a71067075d3e0fcf99fc5bce499df08d96f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b932a71067075d3e0fcf99fc5bce499df08d96f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b932a71067075d3e0fcf99fc5bce499df08d96f"}], "stats": {"total": 84, "additions": 75, "deletions": 9}, "files": [{"sha": "031a4b24e97428858f4d88ae90c4012a8ca9736c", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "patch": "@@ -1,3 +1,12 @@\n+2010-10-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\tPR bootstrap/45326\n+\tPR bootstrap/45174\n+\t* configure.ac: Honor initial values of $build_configargs,\n+\t$host_configargs, $target_configargs.  Mark the precious, so\n+\tenvironment settings get recorded.\n+\t* configure: Regenerate.\n+\n 2010-09-30  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \tPR bootstrap/45796"}, {"sha": "392f077501d7be325a394f253ef404e42c4a8f89", "filename": "configure", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "patch": "@@ -655,19 +655,19 @@ CFLAGS_FOR_BUILD\n CC_FOR_BUILD\n AS_FOR_BUILD\n AR_FOR_BUILD\n-target_configargs\n target_configdirs\n configdirs\n-host_configargs\n build_configdirs\n-build_configargs\n INSTALL_GDB_TK\n GDB_TK\n CONFIGURE_GDB_TK\n build_tooldir\n tooldir\n GCC_SHLIB_SUBDIR\n RPATH_ENVVAR\n+target_configargs\n+host_configargs\n+build_configargs\n BUILD_CONFIG\n CXXFLAGS_FOR_TARGET\n CFLAGS_FOR_TARGET\n@@ -835,6 +835,9 @@ CXX\n CXXFLAGS\n CCC\n CPP\n+build_configargs\n+host_configargs\n+target_configargs\n AR\n AS\n DLLTOOL\n@@ -1569,6 +1572,12 @@ Some influential environment variables:\n   CXX         C++ compiler command\n   CXXFLAGS    C++ compiler flags\n   CPP         C preprocessor\n+  build_configargs\n+              additional configure arguments for build directories\n+  host_configargs\n+              additional configure arguments for host directories\n+  target_configargs\n+              additional configure arguments for target directories\n   AR          AR for the host\n   AS          AS for the host\n   DLLTOOL     DLLTOOL for the host\n@@ -7916,10 +7925,15 @@ if test \"$silent\" = yes; then\n fi\n baseargs=\"$baseargs --disable-option-checking\"\n \n+# Record and document user additions to sub configure arguments.\n+\n+\n+\n+\n # For the build-side libraries, we just need to pretend we're native,\n # and not use the same cache file.  Multilibs are neither needed nor\n # desired.\n-build_configargs=\"--cache-file=../config.cache ${baseargs}\"\n+build_configargs=\"$build_configargs --cache-file=../config.cache ${baseargs}\"\n \n # For host modules, accept cache file option, or specification as blank.\n case \"${cache_file}\" in\n@@ -7933,9 +7947,9 @@ esac\n \n # Host dirs don't like to share a cache file either, horribly enough.\n # This seems to be due to autoconf 2.5x stupidity.\n-host_configargs=\"--cache-file=./config.cache ${extra_host_args} ${baseargs}\"\n+host_configargs=\"$host_configargs --cache-file=./config.cache ${extra_host_args} ${baseargs}\"\n \n-target_configargs=${baseargs}\n+target_configargs=\"$target_configargs ${baseargs}\"\n \n # Passing a --with-cross-host argument lets the target libraries know\n # whether they are being built with a cross-compiler or being built"}, {"sha": "5f80aa963fa8488bd4c3e77ff2b0a14bfdf8a20e", "filename": "configure.ac", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "patch": "@@ -2969,10 +2969,18 @@ if test \"$silent\" = yes; then\n fi\n baseargs=\"$baseargs --disable-option-checking\"\n \n+# Record and document user additions to sub configure arguments.\n+AC_ARG_VAR([build_configargs],\n+\t   [additional configure arguments for build directories])\n+AC_ARG_VAR([host_configargs],\n+\t   [additional configure arguments for host directories])\n+AC_ARG_VAR([target_configargs],\n+\t   [additional configure arguments for target directories])\n+\n # For the build-side libraries, we just need to pretend we're native,\n # and not use the same cache file.  Multilibs are neither needed nor\n # desired.\n-build_configargs=\"--cache-file=../config.cache ${baseargs}\"\n+build_configargs=\"$build_configargs --cache-file=../config.cache ${baseargs}\"\n \n # For host modules, accept cache file option, or specification as blank.\n case \"${cache_file}\" in\n@@ -2986,9 +2994,9 @@ esac\n \n # Host dirs don't like to share a cache file either, horribly enough.\n # This seems to be due to autoconf 2.5x stupidity.\n-host_configargs=\"--cache-file=./config.cache ${extra_host_args} ${baseargs}\"\n+host_configargs=\"$host_configargs --cache-file=./config.cache ${extra_host_args} ${baseargs}\"\n \n-target_configargs=${baseargs}\n+target_configargs=\"$target_configargs ${baseargs}\"\n \n # Passing a --with-cross-host argument lets the target libraries know\n # whether they are being built with a cross-compiler or being built"}, {"sha": "5c22678125d24564e3a90afa1f4beb02069cc865", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "patch": "@@ -1,3 +1,8 @@\n+2010-10-02  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* doc/install.texi (Configuration): Document build_configargs,\n+\thost_configargs, target_configargs.\n+\n 2010-10-01  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*ashl<mode>3_mask): New insn_and_split pattern."}, {"sha": "ce6b5cffc1b4f3e79f05a5389a2f10800523b794", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=ffedf5114c8bdd5b024fb87e23b935e7d90c6ff3", "patch": "@@ -1991,6 +1991,36 @@ Do not try to compile and run a test libart program.\n \n @end table\n \n+@subsubheading Overriding @command{configure} test results\n+\n+Sometimes, it might be necessary to override the result of some\n+@command{configure} test, for example in order to ease porting to a new\n+system or work around a bug in a test.  The toplevel @command{configure}\n+script provides three variables for this:\n+\n+@table @code\n+\n+@item build_configargs\n+@cindex @code{build_configargs}\n+The contents of this variable is passed to all build @command{configure}\n+scripts.\n+\n+@item host_configargs\n+@cindex @code{host_configargs}\n+The contents of this variable is passed to all host @command{configure}\n+scripts.\n+\n+@item target_configargs\n+@cindex @code{target_configargs}\n+The contents of this variable is passed to all target @command{configure}\n+scripts.\n+\n+@end table\n+\n+In order to avoid shell and @command{make} quoting issues for complex\n+overrides, you can pass a setting for @env{CONFIG_SITE} and set\n+variables in the site file.\n+\n @html\n <hr />\n <p>"}]}