{"sha": "582e2e430089a54069f3e38eb8a2bacd36c42af5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTgyZTJlNDMwMDg5YTU0MDY5ZjNlMzhlYjhhMmJhY2QzNmM0MmFmNQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2013-12-19T17:55:38Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2013-12-19T17:55:38Z"}, "message": "Makefile.in (TEXI_GCC_FILES): Add arm-acle-intrinsics.texi.\n\n[gcc/]\n2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* Makefile.in (TEXI_GCC_FILES): Add arm-acle-intrinsics.texi.\n\t* config.gcc (extra_headers): Add arm_acle.h.\n\t* config/arm/arm.c (FL_CRC32): Define.\n\t(arm_have_crc): Likewise.\n\t(arm_option_override): Set arm_have_crc.\n\t(arm_builtins): Add CRC32 builtins.\n\t(bdesc_2arg): Likewise.\n\t(arm_init_crc32_builtins): New function.\n\t(arm_init_builtins): Initialise CRC32 builtins.\n\t(arm_file_start): Handle architecture extensions.\n\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define __ARM_FEATURE_CRC32.\n\tDefine __ARM_32BIT_STATE.\n\t(TARGET_CRC32): Define.\n\t* config/arm/arm-arches.def: Add armv8-a+crc.\n\t* config/arm/arm-tables.opt: Regenerate.\n\t* config/arm/arm.md (type): Add crc.\n\t(<crc_variant>): New insn.\n\t* config/arm/arm_acle.h: New file.\n\t* config/arm/iterators.md (CRC): New int iterator.\n\t(crc_variant, crc_mode): New int attributes.\n\t* confg/arm/unspecs.md (UNSPEC_CRC32B, UNSPEC_CRC32H, UNSPEC_CRC32W,\n\tUNSPEC_CRC32CB, UNSPEC_CRC32CH, UNSPEC_CRC32CW): New unspecs.\n\t* doc/invoke.texi: Document -march=armv8-a+crc option.\n\t* doc/extend.texi: Document ACLE intrinsics.\n\n[gcc/testsuite/]\n2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n\n\t* lib/target-supports.exp (add_options_for_arm_crc): New procedure.\n\t(check_effective_target_arm_crc_ok_nocache): Likewise.\n\t(check_effective_target_arm_crc_ok): Likewise.\n\t* gcc.target/arm/acle/: New directory.\n\t* gcc.target/arm/acle/acle.exp: New.\n\t* gcc.target/arm/acle/crc32b.c: New test.\n\t* gcc.target/arm/acle/crc32h.c: Likewise.\n\t* gcc.target/arm/acle/crc32w.c: Likewise.\n\t* gcc.target/arm/acle/crc32d.c: Likewise.\n\t* gcc.target/arm/acle/crc32cb.c: Likewise.\n\t* gcc.target/arm/acle/crc32ch.c: Likewise.\n\t* gcc.target/arm/acle/crc32cw.c: Likewise.\n\t* gcc.target/arm/acle/crc32cd.c: Likewise.\n\nFrom-SVN: r206128", "tree": {"sha": "5dbc4d790863ae940c88cbba1311205ba3131028", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dbc4d790863ae940c88cbba1311205ba3131028"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/582e2e430089a54069f3e38eb8a2bacd36c42af5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582e2e430089a54069f3e38eb8a2bacd36c42af5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/582e2e430089a54069f3e38eb8a2bacd36c42af5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/582e2e430089a54069f3e38eb8a2bacd36c42af5/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cd494e4d434e92727f9812ad54bb5ce5bf375880", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd494e4d434e92727f9812ad54bb5ce5bf375880", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd494e4d434e92727f9812ad54bb5ce5bf375880"}], "stats": {"total": 563, "additions": 556, "deletions": 7}, "files": [{"sha": "5729893a655b57020335c0c8bd5e81de8347aa34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -1,3 +1,30 @@\n+2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* Makefile.in (TEXI_GCC_FILES): Add arm-acle-intrinsics.texi.\n+\t* config.gcc (extra_headers): Add arm_acle.h.\n+\t* config/arm/arm.c (FL_CRC32): Define.\n+\t(arm_have_crc): Likewise.\n+\t(arm_option_override): Set arm_have_crc.\n+\t(arm_builtins): Add CRC32 builtins.\n+\t(bdesc_2arg): Likewise.\n+\t(arm_init_crc32_builtins): New function.\n+\t(arm_init_builtins): Initialise CRC32 builtins.\n+\t(arm_file_start): Handle architecture extensions.\n+\t* config/arm/arm.h (TARGET_CPU_CPP_BUILTINS): Define __ARM_FEATURE_CRC32.\n+\tDefine __ARM_32BIT_STATE.\n+\t(TARGET_CRC32): Define.\n+\t* config/arm/arm-arches.def: Add armv8-a+crc.\n+\t* config/arm/arm-tables.opt: Regenerate.\n+\t* config/arm/arm.md (type): Add crc.\n+\t(<crc_variant>): New insn.\n+\t* config/arm/arm_acle.h: New file.\n+\t* config/arm/iterators.md (CRC): New int iterator.\n+\t(crc_variant, crc_mode): New int attributes.\n+\t* confg/arm/unspecs.md (UNSPEC_CRC32B, UNSPEC_CRC32H, UNSPEC_CRC32W,\n+\tUNSPEC_CRC32CB, UNSPEC_CRC32CH, UNSPEC_CRC32CW): New unspecs.\n+\t* doc/invoke.texi: Document -march=armv8-a+crc option.\n+\t* doc/extend.texi: Document ACLE intrinsics.\n+\n 2013-12-19  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/59142"}, {"sha": "b79bb0c0aca29371188d9fbd7bf7bb7cbb1bd393", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -2794,7 +2794,8 @@ TEXI_GCC_FILES = gcc.texi gcc-common.texi gcc-vers.texi frontends.texi\t\\\n \t gcov.texi trouble.texi bugreport.texi service.texi\t\t\\\n \t contribute.texi compat.texi funding.texi gnu.texi gpl_v3.texi\t\\\n \t fdl.texi contrib.texi cppenv.texi cppopts.texi avr-mmcu.texi\t\\\n-\t implement-c.texi implement-cxx.texi arm-neon-intrinsics.texi\n+\t implement-c.texi implement-cxx.texi arm-neon-intrinsics.texi\t\\\n+\t arm-acle-intrinsics.texi\n \n # we explicitly use $(srcdir)/doc/tm.texi here to avoid confusion with\n # the generated tm.texi; the latter might have a more recent timestamp,"}, {"sha": "fbfc121f9c6862fa1dac7e440ed54897a93fda49", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -329,8 +329,8 @@ arc*-*-*)\n \t;;\n arm*-*-*)\n \tcpu_type=arm\n-\textra_headers=\"mmintrin.h arm_neon.h\"\n \textra_objs=\"aarch-common.o\"\n+\textra_headers=\"mmintrin.h arm_neon.h arm_acle.h\"\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\""}, {"sha": "9b7d20c2e237dd1f422af6b84561077529e42b6b", "filename": "gcc/config/arm/arm-arches.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm-arches.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm-arches.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-arches.def?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -54,5 +54,6 @@ ARM_ARCH(\"armv7-r\", cortexr4,\t7R,  FL_CO_PROC |\t      FL_FOR_ARCH7R)\n ARM_ARCH(\"armv7-m\", cortexm3,\t7M,  FL_CO_PROC |\t      FL_FOR_ARCH7M)\n ARM_ARCH(\"armv7e-m\", cortexm4,  7EM, FL_CO_PROC |\t      FL_FOR_ARCH7EM)\n ARM_ARCH(\"armv8-a\", cortexa53,  8A,  FL_CO_PROC |             FL_FOR_ARCH8A)\n+ARM_ARCH(\"armv8-a+crc\",cortexa53, 8A,FL_CO_PROC | FL_CRC32  | FL_FOR_ARCH8A)\n ARM_ARCH(\"iwmmxt\",  iwmmxt,     5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT)\n ARM_ARCH(\"iwmmxt2\", iwmmxt2,    5TE, FL_LDSCHED | FL_STRONG | FL_FOR_ARCH5TE | FL_XSCALE | FL_IWMMXT | FL_IWMMXT2)"}, {"sha": "3a17c2c730bd802919fa91fe2b52a986265d17ca", "filename": "gcc/config/arm/arm-tables.opt", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm-tables.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm-tables.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-tables.opt?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -371,10 +371,13 @@ EnumValue\n Enum(arm_arch) String(armv8-a) Value(23)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt) Value(24)\n+Enum(arm_arch) String(armv8-a+crc) Value(24)\n \n EnumValue\n-Enum(arm_arch) String(iwmmxt2) Value(25)\n+Enum(arm_arch) String(iwmmxt) Value(25)\n+\n+EnumValue\n+Enum(arm_arch) String(iwmmxt2) Value(26)\n \n Enum\n Name(arm_fpu) Type(int)"}, {"sha": "be9044ed1c70fc741aaccddd9e1a04c0b1689259", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 79, "deletions": 2, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -736,6 +736,7 @@ static int thumb_call_reg_needed;\n #define FL_ARCH7      (1 << 22)       /* Architecture 7.  */\n #define FL_ARM_DIV    (1 << 23)\t      /* Hardware divide (ARM mode).  */\n #define FL_ARCH8      (1 << 24)       /* Architecture 8.  */\n+#define FL_CRC32      (1 << 25)\t      /* ARMv8 CRC32 instructions.  */\n \n #define FL_IWMMXT     (1 << 29)\t      /* XScale v2 or \"Intel Wireless MMX technology\".  */\n #define FL_IWMMXT2    (1 << 30)       /* \"Intel Wireless MMX2 technology\".  */\n@@ -901,6 +902,9 @@ int arm_condexec_mask = 0;\n /* The number of bits used in arm_condexec_mask.  */\n int arm_condexec_masklen = 0;\n \n+/* Nonzero if chip supports the ARMv8 CRC instructions.  */\n+int arm_arch_crc = 0;\n+\n /* The condition codes of the ARM, and the inverse function.  */\n static const char * const arm_condition_codes[] =\n {\n@@ -2480,6 +2484,7 @@ arm_option_override (void)\n   arm_arch_thumb_hwdiv = (insn_flags & FL_THUMB_DIV) != 0;\n   arm_arch_arm_hwdiv = (insn_flags & FL_ARM_DIV) != 0;\n   arm_tune_cortex_a9 = (arm_tune == cortexa9) != 0;\n+  arm_arch_crc = (insn_flags & FL_CRC32) != 0;\n   if (arm_restrict_it == 2)\n     arm_restrict_it = arm_arch8 && TARGET_THUMB2;\n \n@@ -23139,6 +23144,13 @@ enum arm_builtins\n \n   ARM_BUILTIN_WMERGE,\n \n+  ARM_BUILTIN_CRC32B,\n+  ARM_BUILTIN_CRC32H,\n+  ARM_BUILTIN_CRC32W,\n+  ARM_BUILTIN_CRC32CB,\n+  ARM_BUILTIN_CRC32CH,\n+  ARM_BUILTIN_CRC32CW,\n+\n #include \"arm_neon_builtins.def\"\n \n   ,ARM_BUILTIN_MAX\n@@ -23718,7 +23730,7 @@ struct builtin_description\n   const enum rtx_code      comparison;\n   const unsigned int       flag;\n };\n-  \n+\n static const struct builtin_description bdesc_2arg[] =\n {\n #define IWMMXT_BUILTIN(code, string, builtin) \\\n@@ -23824,6 +23836,17 @@ static const struct builtin_description bdesc_2arg[] =\n   IWMMXT_BUILTIN2 (iwmmxt_wpackdus, WPACKDUS)\n   IWMMXT_BUILTIN2 (iwmmxt_wmacuz, WMACUZ)\n   IWMMXT_BUILTIN2 (iwmmxt_wmacsz, WMACSZ)\n+\n+#define CRC32_BUILTIN(L, U) \\\n+  {0, CODE_FOR_##L, \"__builtin_arm_\"#L, ARM_BUILTIN_##U, \\\n+   UNKNOWN, 0},\n+   CRC32_BUILTIN (crc32b, CRC32B)\n+   CRC32_BUILTIN (crc32h, CRC32H)\n+   CRC32_BUILTIN (crc32w, CRC32W)\n+   CRC32_BUILTIN (crc32cb, CRC32CB)\n+   CRC32_BUILTIN (crc32ch, CRC32CH)\n+   CRC32_BUILTIN (crc32cw, CRC32CW)\n+#undef CRC32_BUILTIN\n };\n \n static const struct builtin_description bdesc_1arg[] =\n@@ -24242,6 +24265,42 @@ arm_init_fp16_builtins (void)\n   (*lang_hooks.types.register_builtin_type) (fp16_type, \"__fp16\");\n }\n \n+static void\n+arm_init_crc32_builtins ()\n+{\n+  tree si_ftype_si_qi\n+    = build_function_type_list (unsigned_intSI_type_node,\n+                                unsigned_intSI_type_node,\n+                                unsigned_intQI_type_node, NULL_TREE);\n+  tree si_ftype_si_hi\n+    = build_function_type_list (unsigned_intSI_type_node,\n+                                unsigned_intSI_type_node,\n+                                unsigned_intHI_type_node, NULL_TREE);\n+  tree si_ftype_si_si\n+    = build_function_type_list (unsigned_intSI_type_node,\n+                                unsigned_intSI_type_node,\n+                                unsigned_intSI_type_node, NULL_TREE);\n+\n+  arm_builtin_decls[ARM_BUILTIN_CRC32B]\n+    = add_builtin_function (\"__builtin_arm_crc32b\", si_ftype_si_qi,\n+                            ARM_BUILTIN_CRC32B, BUILT_IN_MD, NULL, NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_CRC32H]\n+    = add_builtin_function (\"__builtin_arm_crc32h\", si_ftype_si_hi,\n+                            ARM_BUILTIN_CRC32H, BUILT_IN_MD, NULL, NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_CRC32W]\n+    = add_builtin_function (\"__builtin_arm_crc32w\", si_ftype_si_si,\n+                            ARM_BUILTIN_CRC32W, BUILT_IN_MD, NULL, NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_CRC32CB]\n+    = add_builtin_function (\"__builtin_arm_crc32cb\", si_ftype_si_qi,\n+                            ARM_BUILTIN_CRC32CB, BUILT_IN_MD, NULL, NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_CRC32CH]\n+    = add_builtin_function (\"__builtin_arm_crc32ch\", si_ftype_si_hi,\n+                            ARM_BUILTIN_CRC32CH, BUILT_IN_MD, NULL, NULL_TREE);\n+  arm_builtin_decls[ARM_BUILTIN_CRC32CW]\n+    = add_builtin_function (\"__builtin_arm_crc32cw\", si_ftype_si_si,\n+                            ARM_BUILTIN_CRC32CW, BUILT_IN_MD, NULL, NULL_TREE);\n+}\n+\n static void\n arm_init_builtins (void)\n {\n@@ -24253,6 +24312,9 @@ arm_init_builtins (void)\n \n   if (arm_fp16_format)\n     arm_init_fp16_builtins ();\n+\n+  if (TARGET_CRC32)\n+    arm_init_crc32_builtins ();\n }\n \n /* Return the ARM builtin for CODE.  */\n@@ -27526,7 +27588,22 @@ arm_file_start (void)\n     {\n       const char *fpu_name;\n       if (arm_selected_arch)\n-\tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_arch->name);\n+        {\n+          const char* pos = strchr (arm_selected_arch->name, '+');\n+\t  if (pos)\n+\t    {\n+\t      char buf[15];\n+\t      gcc_assert (strlen (arm_selected_arch->name)\n+\t                  <= sizeof (buf) / sizeof (*pos));\n+\t      strncpy (buf, arm_selected_arch->name,\n+\t                    (pos - arm_selected_arch->name) * sizeof (*pos));\n+\t      buf[pos - arm_selected_arch->name] = '\\0';\n+\t      asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", buf);\n+\t      asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", pos + 1);\n+\t    }\n+\t  else\n+\t    asm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_arch->name);\n+        }\n       else if (strncmp (arm_selected_cpu->name, \"generic\", 7) == 0)\n \tasm_fprintf (asm_out_file, \"\\t.arch %s\\n\", arm_selected_cpu->name + 8);\n       else"}, {"sha": "e02b2ad17e8c6d17ba54d714b98afb06b98e4081", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -51,6 +51,10 @@ extern char arm_arch_name[];\n            builtin_define (\"__ARM_FEATURE_SAT\");\t\\\n \tif (unaligned_access)\t\t\t\t\\\n \t  builtin_define (\"__ARM_FEATURE_UNALIGNED\");\t\\\n+\tif (TARGET_CRC32)\t\t\t\t\\\n+\t  builtin_define (\"__ARM_FEATURE_CRC32\");\t\\\n+\tif (TARGET_32BIT)\t\t\t\t\\\n+\t  builtin_define (\"__ARM_32BIT_STATE\");\t\t\\\n \tif (TARGET_ARM_FEATURE_LDREX)\t\t\t\t\\\n \t  builtin_define_with_int_value (\t\t\t\\\n \t    \"__ARM_FEATURE_LDREX\", TARGET_ARM_FEATURE_LDREX);\t\\\n@@ -274,6 +278,8 @@ extern void (*arm_lang_output_object_attributes_hook)(void);\n #define TARGET_LDRD\t\t\t(arm_arch5e && ARM_DOUBLEWORD_ALIGN \\\n                                          && !TARGET_THUMB1)\n \n+#define TARGET_CRC32\t\t\t(arm_arch_crc)\n+\n /* The following two macros concern the ability to execute coprocessor\n    instructions for VFPv3 or NEON.  TARGET_VFP3/TARGET_VFPD32 are currently\n    only ever tested when we know we are generating for VFP hardware; we need\n@@ -561,6 +567,9 @@ extern int prefer_neon_for_64bits;\n extern bool arm_disable_literal_pool;\n #endif\n \n+/* Nonzero if chip supports the ARMv8 CRC instructions.  */\n+extern int arm_arch_crc;\n+\n #ifndef TARGET_DEFAULT\n #define TARGET_DEFAULT  (MASK_APCS_FRAME)\n #endif"}, {"sha": "0440ce67451f66ba016e3c76b046aaa974e9a034", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -12870,6 +12870,17 @@\n    (set_attr \"predicable\" \"yes\")\n    (set_attr \"predicable_short_it\" \"no\")])\n \n+;; ARMv8 CRC32 instructions.\n+(define_insn \"<crc_variant>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+        (unspec:SI [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+                    (match_operand:<crc_mode> 2 \"s_register_operand\" \"r\")]\n+         CRC))]\n+  \"TARGET_CRC32\"\n+  \"<crc_variant>\\\\t%0, %1, %2\"\n+  [(set_attr \"type\" \"crc\")\n+   (set_attr \"conds\" \"unconditional\")]\n+)\n \n ;; Load the load/store double peephole optimizations.\n (include \"ldrdstrd.md\")"}, {"sha": "b04605bfc2366d24e642ed1cc83cdb6123fe8d62", "filename": "gcc/config/arm/arm_acle.h", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,100 @@\n+/* ARM Non-NEON ACLE intrinsics include file.\n+\n+   Copyright (C) 2013 Free Software Foundation, Inc.\n+   Contributed by ARM Ltd.\n+\n+   This file is part of GCC.\n+\n+   GCC is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published\n+   by the Free Software Foundation; either version 3, or (at your\n+   option) any later version.\n+\n+   GCC is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _GCC_ARM_ACLE_H\n+#define _GCC_ARM_ACLE_H\n+\n+#include <stdint.h>\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+#ifdef __ARM_FEATURE_CRC32\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32b (uint32_t a, uint8_t b)\n+{\n+  return __builtin_arm_crc32b (a, b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32h (uint32_t a, uint16_t b)\n+{\n+  return __builtin_arm_crc32h (a, b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32w (uint32_t a, uint32_t b)\n+{\n+  return __builtin_arm_crc32w (a, b);\n+}\n+\n+#ifdef __ARM_32BIT_STATE\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32d (uint32_t a, uint64_t b)\n+{\n+  uint32_t d;\n+\n+  d = __crc32w (__crc32w (a, b & 0xffffffffULL), b >> 32);\n+  return d;\n+}\n+#endif\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cb (uint32_t a, uint8_t b)\n+{\n+  return __builtin_arm_crc32cb (a, b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32ch (uint32_t a, uint16_t b)\n+{\n+  return __builtin_arm_crc32ch (a, b);\n+}\n+\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cw (uint32_t a, uint32_t b)\n+{\n+  return __builtin_arm_crc32cw (a, b);\n+}\n+\n+#ifdef __ARM_32BIT_STATE\n+__extension__ static __inline uint32_t __attribute__ ((__always_inline__))\n+__crc32cd (uint32_t a, uint64_t b)\n+{\n+  uint32_t d;\n+\n+  d = __crc32cw (__crc32cw (a, b & 0xffffffffULL), b >> 32);\n+  return d;\n+}\n+#endif\n+\n+#endif\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif"}, {"sha": "ff5462c4b353c8d383c7df96338f126dc9042a4b", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -201,6 +201,9 @@\n (define_int_iterator NEON_VRINT [UNSPEC_NVRINTP UNSPEC_NVRINTZ UNSPEC_NVRINTM\n                               UNSPEC_NVRINTX UNSPEC_NVRINTA UNSPEC_NVRINTN])\n \n+(define_int_iterator CRC [UNSPEC_CRC32B UNSPEC_CRC32H UNSPEC_CRC32W\n+                          UNSPEC_CRC32CB UNSPEC_CRC32CH UNSPEC_CRC32CW])\n+\n ;;----------------------------------------------------------------------------\n ;; Mode attributes\n ;;----------------------------------------------------------------------------\n@@ -518,6 +521,15 @@\n (define_int_attr nvrint_variant [(UNSPEC_NVRINTZ \"z\") (UNSPEC_NVRINTP \"p\")\n                                 (UNSPEC_NVRINTA \"a\") (UNSPEC_NVRINTM \"m\")\n                                 (UNSPEC_NVRINTX \"x\") (UNSPEC_NVRINTN \"n\")])\n+\n+(define_int_attr crc_variant [(UNSPEC_CRC32B \"crc32b\") (UNSPEC_CRC32H \"crc32h\")\n+                        (UNSPEC_CRC32W \"crc32w\") (UNSPEC_CRC32CB \"crc32cb\")\n+                        (UNSPEC_CRC32CH \"crc32ch\") (UNSPEC_CRC32CW \"crc32cw\")])\n+\n+(define_int_attr crc_mode [(UNSPEC_CRC32B \"QI\") (UNSPEC_CRC32H \"HI\")\n+                        (UNSPEC_CRC32W \"SI\") (UNSPEC_CRC32CB \"QI\")\n+                        (UNSPEC_CRC32CH \"HI\") (UNSPEC_CRC32CW \"SI\")])\n+\n ;; Both kinds of return insn.\n (define_code_iterator returns [return simple_return])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])"}, {"sha": "40c4a787ac3c46b5a40627e42b15b16925e904d4", "filename": "gcc/config/arm/types.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Ftypes.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Ftypes.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ftypes.md?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -554,6 +554,7 @@\n   clz,\\\n   no_insn,\\\n   csel,\\\n+  crc,\\\n   extend,\\\n   f_cvt,\\\n   f_cvtf2i,\\"}, {"sha": "f8faba3ae1219b26c28f35ae2a3786914c4d4bf9", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -149,6 +149,12 @@\n (define_c_enum \"unspec\" [\n   UNSPEC_ASHIFT_SIGNED\n   UNSPEC_ASHIFT_UNSIGNED\n+  UNSPEC_CRC32B\n+  UNSPEC_CRC32H\n+  UNSPEC_CRC32W\n+  UNSPEC_CRC32CB\n+  UNSPEC_CRC32CH\n+  UNSPEC_CRC32CW\n   UNSPEC_LOAD_COUNT\n   UNSPEC_VABD\n   UNSPEC_VABDL"}, {"sha": "bb6290b207db4585b29ae4fa92e6b2179e7393df", "filename": "gcc/doc/arm-acle-intrinsics.texi", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Farm-acle-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Farm-acle-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-acle-intrinsics.texi?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,55 @@\n+@c Copyright (C) 2013 Free Software Foundation, Inc.\n+@c This is part of the GCC manual.\n+@c For copying conditions, see the file gcc.texi.\n+\n+@subsubsection CRC32 intrinsics\n+\n+@itemize @bullet\n+@item uint32_t __crc32b (uint32_t, uint8_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32b @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32h (uint32_t, uint16_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32h @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32w (uint32_t, uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32w @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32d (uint32_t, uint64_t)\n+@*@emph{Form of expected instruction(s):} Two @code{crc32w @var{r0}, @var{r0}, @var{r0}}\n+instructions for AArch32. One @code{crc32w @var{w0}, @var{w0}, @var{x0}} instruction for\n+AArch64.\n+@end itemize\n+\n+@itemize @bullet\n+@item uint32_t __crc32cb (uint32_t, uint8_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32cb @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32ch (uint32_t, uint16_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32ch @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32cw (uint32_t, uint32_t)\n+@*@emph{Form of expected instruction(s):} @code{crc32cw @var{r0}, @var{r0}, @var{r0}}\n+@end itemize\n+\n+\n+@itemize @bullet\n+@item uint32_t __crc32cd (uint32_t, uint64_t)\n+@*@emph{Form of expected instruction(s):} Two @code{crc32cw @var{r0}, @var{r0}, @var{r0}}\n+instructions for AArch32. One @code{crc32cw @var{w0}, @var{w0}, @var{x0}} instruction for\n+AArch64.\n+@end itemize"}, {"sha": "d539bd18d17f7aba3f7c52e51f2129019444d4e3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -9016,6 +9016,7 @@ instructions, but allow the compiler to schedule those calls.\n * ARC SIMD Built-in Functions::\n * ARM iWMMXt Built-in Functions::\n * ARM NEON Intrinsics::\n+* ARM ACLE Intrinsics::\n * AVR Built-in Functions::\n * Blackfin Built-in Functions::\n * FR-V Built-in Functions::\n@@ -9708,6 +9709,14 @@ when the @option{-mfpu=neon} switch is used:\n \n @include arm-neon-intrinsics.texi\n \n+@node ARM ACLE Intrinsics\n+@subsection ARM ACLE Intrinsics\n+\n+These built-in intrinsics for the ARMv8-A CRC32 extension are available when\n+the @option{-march=armv8-a+crc} switch is used:\n+\n+@include arm-acle-intrinsics.texi\n+\n @node AVR Built-in Functions\n @subsection AVR Built-in Functions\n "}, {"sha": "689b3ab87a4416a55fa6f60b342b2a8071400d77", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -12228,9 +12228,12 @@ of the @option{-mcpu=} option.  Permissible names are: @samp{armv2},\n @samp{armv6}, @samp{armv6j},\n @samp{armv6t2}, @samp{armv6z}, @samp{armv6zk}, @samp{armv6-m},\n @samp{armv7}, @samp{armv7-a}, @samp{armv7-r}, @samp{armv7-m},\n-@samp{armv8-a},\n+@samp{armv8-a}, @samp{armv8-a+crc},\n @samp{iwmmxt}, @samp{iwmmxt2}, @samp{ep9312}.\n \n+@option{-march=armv8-a+crc} enables code generation for the ARMv8-A\n+architecture together with the optional CRC32 extensions.\n+\n @option{-march=native} causes the compiler to auto-detect the architecture\n of the build computer.  At present, this feature is only supported on\n Linux, and not all architectures are recognized.  If the auto-detect is"}, {"sha": "318550a8f67575259c79064ad137292b722a39cd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -1,3 +1,19 @@\n+2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp (add_options_for_arm_crc): New procedure.\n+\t(check_effective_target_arm_crc_ok_nocache): Likewise.\n+\t(check_effective_target_arm_crc_ok): Likewise.\n+\t* gcc.target/arm/acle/: New directory.\n+\t* gcc.target/arm/acle/acle.exp: New.\n+\t* gcc.target/arm/acle/crc32b.c: New test.\n+\t* gcc.target/arm/acle/crc32h.c: Likewise.\n+\t* gcc.target/arm/acle/crc32w.c: Likewise.\n+\t* gcc.target/arm/acle/crc32d.c: Likewise.\n+\t* gcc.target/arm/acle/crc32cb.c: Likewise.\n+\t* gcc.target/arm/acle/crc32ch.c: Likewise.\n+\t* gcc.target/arm/acle/crc32cw.c: Likewise.\n+\t* gcc.target/arm/acle/crc32cd.c: Likewise.\n+\n 2013-12-19  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* c-c++-common/cilk-plus/SE/ef_error.c: Use -fopen-simd."}, {"sha": "a1822a199d3a0d94acdae3259727c3d6d6d14abf", "filename": "gcc/testsuite/gcc.target/arm/acle/acle.exp", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Facle.exp?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,35 @@\n+# Copyright (C) 2013 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't an ARM target.\n+if ![istarget arm*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" \"\"\n+\n+# All done.\n+dg-finish"}, {"sha": "d6f35e9fd8f76967a2f0160b72447e542ce5efd9", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32b.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32b.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32b ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32b (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint8_t arg1_uint8_t;\n+\n+  out_uint32_t = __crc32b (arg0_uint32_t, arg1_uint8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32b\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "44aea21fcf94e22d7dc876d45c811b1ddb12c8eb", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32cb.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cb.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32cb ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32cb (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint8_t arg1_uint8_t;\n+\n+  out_uint32_t = __crc32cb (arg0_uint32_t, arg1_uint8_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32cb\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "cb7ee0df0a9d3bfba789e9afa74e5fa6e8be866d", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32cd.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cd.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32cd ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32cd (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint64_t arg1_uint64_t;\n+\n+  out_uint32_t = __crc32cd (arg0_uint32_t, arg1_uint64_t);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crc32cw\\t...?, ...?, ...?\\n\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "d8e73389433ab96c76d303ed1e794bc4932bb61c", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32ch.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32ch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32ch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32ch.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32ch ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32ch (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint16_t arg1_uint16_t;\n+\n+  out_uint32_t = __crc32ch (arg0_uint32_t, arg1_uint16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32ch\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "84384c5d54080f513c24987d55c7c99abf5ca347", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32cw.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32cw.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32cw ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32cw (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint32_t arg1_uint32_t;\n+\n+  out_uint32_t = __crc32cw (arg0_uint32_t, arg1_uint32_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32cw\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c90fad9a7a6a14bd745f3e7abfee66327383ae5a", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32d.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32d.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32d.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32d.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32d ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32d (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint64_t arg1_uint64_t;\n+\n+  out_uint32_t = __crc32d (arg0_uint32_t, arg1_uint64_t);\n+}\n+\n+/* { dg-final { scan-assembler-times \"crc32w\\t...?, ...?, ...?\\n\" 2 } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "c21a4ae3e31cdacece560ed2484723d9f738910b", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32h.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32h.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32h.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32h.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32h ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32h (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint16_t arg1_uint16_t;\n+\n+  out_uint32_t = __crc32h (arg0_uint32_t, arg1_uint16_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32h\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "60cd09e4be5dd09c0a14361587c81521867ec196", "filename": "gcc/testsuite/gcc.target/arm/acle/crc32w.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32w.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32w.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fcrc32w.c?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -0,0 +1,20 @@\n+/* Test the crc32w ACLE intrinsic.  */\n+\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_crc_ok } */\n+/* { dg-options \"-save-temps -O0\" } */\n+/* { dg-add-options arm_crc } */\n+\n+#include \"arm_acle.h\"\n+\n+void test_crc32w (void)\n+{\n+  uint32_t out_uint32_t;\n+  uint32_t arg0_uint32_t;\n+  uint32_t arg1_uint32_t;\n+\n+  out_uint32_t = __crc32w (arg0_uint32_t, arg1_uint32_t);\n+}\n+\n+/* { dg-final { scan-assembler \"crc32w\\t...?, ...?, ...?\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0f9ef4c4f03da968ec1295515113b9e1b1e4b2cc", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/582e2e430089a54069f3e38eb8a2bacd36c42af5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=582e2e430089a54069f3e38eb8a2bacd36c42af5", "patch": "@@ -2327,6 +2327,14 @@ proc add_options_for_arm_v8_neon { flags } {\n     return \"$flags $et_arm_v8_neon_flags -march=armv8-a\"\n }\n \n+proc add_options_for_arm_crc { flags } {\n+    if { ! [check_effective_target_arm_crc_ok] } {\n+        return \"$flags\"\n+    }\n+    global et_arm_crc_flags\n+    return \"$flags $et_arm_crc_flags\"\n+}\n+\n # Add the options needed for NEON.  We need either -mfloat-abi=softfp\n # or -mfloat-abi=hard, but if one is already specified by the\n # multilib, use it.  Similarly, if a -mfpu option already enables\n@@ -2368,6 +2376,21 @@ proc check_effective_target_arm_neon_ok { } {\n \t\tcheck_effective_target_arm_neon_ok_nocache]\n }\n \n+proc check_effective_target_arm_crc_ok_nocache { } {\n+    global et_arm_crc_flags\n+    set et_arm_crc_flags \"-march=armv8-a+crc\"\n+    return [check_no_compiler_messages_nocache arm_crc_ok object {\n+\t#if !defined (__ARM_FEATURE_CRC32)\n+\t#error FOO\n+\t#endif\n+    } \"$et_arm_crc_flags\"]\n+}\n+\n+proc check_effective_target_arm_crc_ok { } {\n+    return [check_cached_effective_target arm_crc_ok \\\n+\t\tcheck_effective_target_arm_crc_ok_nocache]\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=neon-fp16\n # -mfloat-abi=softfp or equivalent options.  Some multilibs may be\n # incompatible with these options.  Also set et_arm_neon_flags to the"}]}