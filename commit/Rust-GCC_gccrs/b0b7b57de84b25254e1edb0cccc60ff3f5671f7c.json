{"sha": "b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBiN2I1N2RlODRiMjUyNTRlMWVkYjBjY2NjNjBmZjNmNTY3MWY3Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:35:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-17T13:35:24Z"}, "message": "[multiple changes]\n\n2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): The\n\tdesignated type of the generated pointer is the type of the original\n\texpression, not that of the function call itself, because the return\n\ttype may be an untagged  derived type and the function may be an\n\tinherited operation.\n\n2010-06-17  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch4.adb: Minor reformatting\n\nFrom-SVN: r160915", "tree": {"sha": "60f125e5e7703baae36c11acb219108df711a873", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60f125e5e7703baae36c11acb219108df711a873"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/comments", "author": null, "committer": null, "parents": [{"sha": "f104fca1e5925bf7bcd8323ed4f2d2127337a349", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f104fca1e5925bf7bcd8323ed4f2d2127337a349", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f104fca1e5925bf7bcd8323ed4f2d2127337a349"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "9ec46d142005bb24a494a286653d085ea7fdcb0f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "patch": "@@ -1,3 +1,18 @@\n+2010-06-17  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnatvsn.ads: Bump to 4.6 version.\n+\n+2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb (Make_Build_In_Place_Call_In_Object_Declaration): The\n+\tdesignated type of the generated pointer is the type of the original\n+\texpression, not that of the function call itself, because the return\n+\ttype may be an untagged  derived type and the function may be an\n+\tinherited operation.\n+\n+2010-06-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch4.adb: Minor reformatting\n 2010-06-17  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sinfo.ads, sinfo.adb (Inherited_Discriminant): New flag on"}, {"sha": "ddc4fc2e2619995a8155fa057e6fade09403517f", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "patch": "@@ -6687,12 +6687,11 @@ package body Exp_Ch4 is\n       if Is_VMS_Operator (Entity (N)) then\n          declare\n             LI : constant Entity_Id := RTE (RE_Unsigned_64);\n-\n          begin\n             Rewrite (N,\n               Unchecked_Convert_To (Typ,\n                 (Make_Op_Not (Loc,\n-                  Right_Opnd => Unchecked_Convert_To (LI, Right_Opnd (N))))));\n+                   Right_Opnd => Unchecked_Convert_To (LI, Right_Opnd (N))))));\n             Analyze_And_Resolve (N, Typ);\n             return;\n          end;"}, {"sha": "51fe72875e5872bd45afa95e34673581588b4e45", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0b7b57de84b25254e1edb0cccc60ff3f5671f7c/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=b0b7b57de84b25254e1edb0cccc60ff3f5671f7c", "patch": "@@ -5095,7 +5095,7 @@ package body Exp_Ch6 is\n          Rewrite (Allocator, New_Allocator);\n \n          --  Create a new access object and initialize it to the result of the\n-         --  new uninitialized allocator. Do not use Allocator as the\n+         --  new uninitialized allocator. Note: we do not use Allocator as the\n          --  Related_Node of Return_Obj_Access in call to Make_Temporary below\n          --  as this would create a sort of infinite \"recursion\".\n \n@@ -5660,7 +5660,10 @@ package body Exp_Ch6 is\n       Add_Access_Actual_To_Build_In_Place_Call\n         (Func_Call, Function_Id, Caller_Object, Is_Access => Pass_Caller_Acc);\n \n-      --  Create an access type designating the function's result subtype\n+      --  Create an access type designating the function's result subtype. We\n+      --  use the type of the original expression because it may be a call to\n+      --  an inherited operation, which the expansion has replaced with the\n+      --  parent operation that yields the parent type.\n \n       Ref_Type := Make_Temporary (Loc, 'A');\n \n@@ -5671,7 +5674,7 @@ package body Exp_Ch6 is\n             Make_Access_To_Object_Definition (Loc,\n               All_Present => True,\n               Subtype_Indication =>\n-                New_Reference_To (Result_Subt, Loc)));\n+                New_Reference_To (Etype (Function_Call), Loc)));\n \n       --  The access type and its accompanying object must be inserted after\n       --  the object declaration in the constrained case, so that the function"}]}