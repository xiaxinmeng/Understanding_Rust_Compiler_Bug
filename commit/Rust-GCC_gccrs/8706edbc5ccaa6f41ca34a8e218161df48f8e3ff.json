{"sha": "8706edbc5ccaa6f41ca34a8e218161df48f8e3ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODcwNmVkYmM1Y2NhYTZmNDFjYTM0YThlMjE4MTYxZGY0OGY4ZTNmZg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-28T16:07:29Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-09-28T16:07:29Z"}, "message": "(build_unary_op): Address of nested fcn isn't constant.\n\nFrom-SVN: r2268", "tree": {"sha": "634196f8803e4162a136d6ccf18342ff1c3fa5ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/634196f8803e4162a136d6ccf18342ff1c3fa5ab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff/comments", "author": null, "committer": null, "parents": [{"sha": "bcea2185485a81975e4ebebde90e219bc8f4bf4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcea2185485a81975e4ebebde90e219bc8f4bf4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcea2185485a81975e4ebebde90e219bc8f4bf4d"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "6341cc2ef6b35f168239529de7689f3866fc8ed0", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8706edbc5ccaa6f41ca34a8e218161df48f8e3ff/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=8706edbc5ccaa6f41ca34a8e218161df48f8e3ff", "patch": "@@ -228,9 +228,11 @@ common_type (t1, t2)\n       else return t2;\n \n     case POINTER_TYPE:\n-#if 0\n       /* For two pointers, do this recursively on the target type,\n \t and combine the qualifiers of the two types' targets.  */\n+      /* This code was turned off; I don't know why.\n+\t But ANSI C specifies doing this with the qualifiers.\n+\t So I turned it on again.  */\n       {\n \ttree target = common_type (TYPE_MAIN_VARIANT (TREE_TYPE (t1)),\n \t\t\t\t   TYPE_MAIN_VARIANT (TREE_TYPE (t2)));\n@@ -240,8 +242,9 @@ common_type (t1, t2)\n \t  = TYPE_VOLATILE (TREE_TYPE (t1)) || TYPE_VOLATILE (TREE_TYPE (t2));\n \treturn build_pointer_type (c_build_type_variant (target, constp, volatilep));\n       }\n-#endif\n+#if 0\n       return build_pointer_type (common_type (TREE_TYPE (t1), TREE_TYPE (t2)));\n+#endif\n \n     case ARRAY_TYPE:\n       {\n@@ -3167,8 +3170,10 @@ build_unary_op (code, xarg, noconvert)\n \t  addr = build1 (code, argtype, arg);\n \n \t/* Address of a static or external variable or\n-\t   function counts as a constant.  */\n-\tif (staticp (arg))\n+\t   file-scope function counts as a constant.  */\n+\tif (staticp (arg)\n+\t    && ! (TREE_CODE (arg) == FUNCTION_DECL\n+\t\t  && DECL_CONTEXT (arg) != 0))\n \t  TREE_CONSTANT (addr) = 1;\n \treturn addr;\n       }"}]}