{"sha": "ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U3ODg4ZGFlOGJmY2U3ZjMwNDk3MjdkMzFkOGI3YWU0ZTgzYzg4ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-12-15T20:42:11Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-12-15T20:42:11Z"}, "message": "P0490R0 GB 20: decomposition declaration should commit to tuple interpretation early\n\n\tP0490R0 GB 20: decomposition declaration should commit to tuple\n\tinterpretation early\n\t* decl.c (get_tuple_size): Make static.  If inst is error_mark_node\n\tor non-complete type, return NULL_TREE, otherwise if\n\tlookup_qualified_name fails or doesn't fold into INTEGER_CST, return\n\terror_mark_node.\n\t(get_tuple_element_type, get_tuple_decomp_init): Make static.\n\t(cp_finish_decomp): Pass LOC to get_tuple_size.  If it returns\n\terror_mark_node, complain and fail.\n\n\t* g++.dg/cpp1z/decomp10.C (f1): Adjust expected diagnostics.\n\nFrom-SVN: r243724", "tree": {"sha": "5401744b27ceed5772638cbca941d068a370aa55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5401744b27ceed5772638cbca941d068a370aa55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2a810dedce593e9b015a051a0dfb36dfb7e563bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a810dedce593e9b015a051a0dfb36dfb7e563bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a810dedce593e9b015a051a0dfb36dfb7e563bf"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "5c6713234a8e1c08cdfad418d8087001fa7a585e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "patch": "@@ -1,3 +1,15 @@\n+2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0490R0 GB 20: decomposition declaration should commit to tuple\n+\tinterpretation early\n+\t* decl.c (get_tuple_size): Make static.  If inst is error_mark_node\n+\tor non-complete type, return NULL_TREE, otherwise if\n+\tlookup_qualified_name fails or doesn't fold into INTEGER_CST, return\n+\terror_mark_node.\n+\t(get_tuple_element_type, get_tuple_decomp_init): Make static.\n+\t(cp_finish_decomp): Pass LOC to get_tuple_size.  If it returns\n+\terror_mark_node, complain and fail.\n+\n 2016-12-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/77585"}, {"sha": "e83b542d424d698414f2835d771676a4dd42d0a4", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "patch": "@@ -7259,7 +7259,7 @@ find_decomp_class_base (location_t loc, tree type, tree ret)\n \n /* Return std::tuple_size<TYPE>::value.  */\n \n-tree\n+static tree\n get_tuple_size (tree type)\n {\n   tree args = make_tree_vec (1);\n@@ -7268,19 +7268,22 @@ get_tuple_size (tree type)\n \t\t\t\t     /*in_decl*/NULL_TREE,\n \t\t\t\t     /*context*/std_node,\n \t\t\t\t     /*entering_scope*/false, tf_none);\n+  inst = complete_type (inst);\n+  if (inst == error_mark_node || !COMPLETE_TYPE_P (inst))\n+    return NULL_TREE;\n   tree val = lookup_qualified_name (inst, get_identifier (\"value\"),\n \t\t\t\t    /*type*/false, /*complain*/false);\n   if (TREE_CODE (val) == VAR_DECL || TREE_CODE (val) == CONST_DECL)\n     val = maybe_constant_value (val);\n   if (TREE_CODE (val) == INTEGER_CST)\n     return val;\n   else\n-    return NULL_TREE;\n+    return error_mark_node;\n }\n \n /* Return std::tuple_element<I,TYPE>::type.  */\n \n-tree\n+static tree\n get_tuple_element_type (tree type, unsigned i)\n {\n   tree args = make_tree_vec (2);\n@@ -7297,7 +7300,7 @@ get_tuple_element_type (tree type, unsigned i)\n \n /* Return e.get<i>() or get<i>(e).  */\n \n-tree\n+static tree\n get_tuple_decomp_init (tree decl, unsigned i)\n {\n   tree get_id = get_identifier (\"get\");\n@@ -7342,6 +7345,7 @@ store_decomp_type (tree v, tree t)\n     decomp_type_table = hash_map<tree,tree>::create_ggc (13);\n   decomp_type_table->put (v, t);\n }\n+\n tree\n lookup_decomp_type (tree v)\n {\n@@ -7502,6 +7506,12 @@ cp_finish_decomp (tree decl, tree first, unsigned int count)\n     }\n   else if (tree tsize = get_tuple_size (type))\n     {\n+      if (tsize == error_mark_node)\n+\t{\n+\t  error_at (loc, \"%<std::tuple_size<%T>::value%> is not an integral \"\n+\t\t\t \"constant expression\", type);\n+\t  goto error_out;\n+\t}\n       eltscnt = tree_to_uhwi (tsize);\n       if (count != eltscnt)\n \tgoto cnt_mismatch;"}, {"sha": "ea45738e265fb754b252e6da262f926cd479146b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "patch": "@@ -1,3 +1,9 @@\n+2016-12-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tP0490R0 GB 20: decomposition declaration should commit to tuple\n+\tinterpretation early\n+\t* g++.dg/cpp1z/decomp10.C (f1): Adjust expected diagnostics.\n+\n 2016-12-15  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/77585"}, {"sha": "c2bcb93c1d71eb418226d85d85d9fa2f91767c46", "filename": "gcc/testsuite/g++.dg/cpp1z/decomp10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce7888dae8bfce7f3049727d31d8b7ae4e83c88d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fdecomp10.C?ref=ce7888dae8bfce7f3049727d31d8b7ae4e83c88d", "patch": "@@ -7,7 +7,7 @@ namespace std {\n \n struct A1 { int i,j; } a1;\n template<> struct std::tuple_size<A1> {  };\n-void f1() { auto [ x ] = a1; }\t// { dg-error \"decomposes into 2\" }\n+void f1() { auto [ x ] = a1; }\t// { dg-error \"is not an integral constant expression\" }\n \n struct A2 { int i,j; } a2;\n template<> struct std::tuple_size<A2> { enum { value = 5 }; };"}]}