{"sha": "8b6dba81f050bea9220007f219c0a753af782262", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGI2ZGJhODFmMDUwYmVhOTIyMDAwN2YyMTljMGE3NTNhZjc4MjI2Mg==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2006-10-18T17:17:49Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2006-10-18T17:17:49Z"}, "message": "in_pack.m4: Fixed a typo.\n\n2006-10-16  Tobias Burnus  <burnus@net-b.de>\n\n        * m4/in_pack.m4: Fixed a typo.\n        * m4/iforeach.m4: Fixed a typo.\n        * m4/eoshift1.m4: Fixed a typo.\n        * m4/eoshift3.m4: Fixed a typo.\n        * m4/cshift1.m4: Fixed a typo.\n        * m4/in_unpack.m4: Fixed a typo.\n        * m4/reshape.m4: Fixed a typo.\n        * m4/ifunction.m4: Fixed a typo.\n        * runtime/environ.c: Fixed a typo.\n        * runtime/in_pack_generic.c: Fixed a typo.\n        * runtime/in_unpack_generic.c: Fixed a typo.\n        * runtime/memory.c: Fixed a typo.\n        * intrinsics/cshift0.c: Fixed a typo.\n        * intrinsics/cpu_time.c: Fixed a typo.\n        * intrinsics/pack_generic.c: Fixed a typo.\n        * intrinsics/unpack_generic.c: Fixed a typo.\n        * intrinsics/eoshift0.c: Fixed a typo.\n        * intrinsics/eoshift2.c: Fixed a typo.\n        * intrinsics/reshape_generic.c: Fixed a typo.\n        * io/open.c: Fixed a typo.\n        * io/list_read.c: Fixed a typo.\n        * io/io.h: Fixed a typo.\n        * io/transfer.c: Fixed a typo.\n        * io/write.c: Fixed a typo.\n\nFrom-SVN: r117857", "tree": {"sha": "77600099ead49fd0e45bb06c7976fec0c72c9dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77600099ead49fd0e45bb06c7976fec0c72c9dd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b6dba81f050bea9220007f219c0a753af782262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6dba81f050bea9220007f219c0a753af782262", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b6dba81f050bea9220007f219c0a753af782262", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b6dba81f050bea9220007f219c0a753af782262/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e76c2bf138ad82a0b66a75a12e9529ced0930d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e76c2bf138ad82a0b66a75a12e9529ced0930d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e76c2bf138ad82a0b66a75a12e9529ced0930d8"}], "stats": {"total": 95, "additions": 61, "deletions": 34}, "files": [{"sha": "9eacd388860755104a234b2b9117f7f6f8281d6d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -1,3 +1,30 @@\n+2006-10-16  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* m4/in_pack.m4: Fixed a typo.\n+\t* m4/iforeach.m4: Fixed a typo.\n+\t* m4/eoshift1.m4: Fixed a typo.\n+\t* m4/eoshift3.m4: Fixed a typo.\n+\t* m4/cshift1.m4: Fixed a typo.\n+\t* m4/in_unpack.m4: Fixed a typo.\n+\t* m4/reshape.m4: Fixed a typo.\n+\t* m4/ifunction.m4: Fixed a typo.\n+\t* runtime/environ.c: Fixed a typo.\n+\t* runtime/in_pack_generic.c: Fixed a typo.\n+\t* runtime/in_unpack_generic.c: Fixed a typo.\n+\t* runtime/memory.c: Fixed a typo.\n+\t* intrinsics/cshift0.c: Fixed a typo.\n+\t* intrinsics/cpu_time.c: Fixed a typo.\n+\t* intrinsics/pack_generic.c: Fixed a typo.\n+\t* intrinsics/unpack_generic.c: Fixed a typo.\n+\t* intrinsics/eoshift0.c: Fixed a typo.\n+\t* intrinsics/eoshift2.c: Fixed a typo.\n+\t* intrinsics/reshape_generic.c: Fixed a typo.\n+\t* io/open.c: Fixed a typo.\n+\t* io/list_read.c: Fixed a typo.\n+\t* io/io.h: Fixed a typo.\n+\t* io/transfer.c: Fixed a typo.\n+\t* io/write.c: Fixed a typo.\n+\n 2006-10-17  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/29277"}, {"sha": "5e0dee2222652eb02e4fd48f14a2afd7bd2b68f7", "filename": "libgfortran/intrinsics/cpu_time.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fcpu_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fcpu_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcpu_time.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -86,7 +86,7 @@ Boston, MA 02110-1301, USA.  */\n static inline void __cpu_time_1 (long *, long *) ATTRIBUTE_ALWAYS_INLINE;\n \n /* Helper function for the actual implementation of the CPU_TIME\n-   intrnsic.  Returns a CPU time in microseconds or -1 if no CPU time\n+   intrinsic.  Returns a CPU time in microseconds or -1 if no CPU time\n    could be computed.  */\n \n #ifdef __MINGW32__"}, {"sha": "4df90ad0fbb544e6a11ee2ac14c5ec36d252848c", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -276,7 +276,7 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n           n++;"}, {"sha": "a8a891b25bf95e7e9c80025535b7462d25ea3cd7", "filename": "libgfortran/intrinsics/eoshift0.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Feoshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Feoshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift0.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -189,7 +189,7 @@ eoshift0 (gfc_array_char * ret, const gfc_array_char * array,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n           n++;"}, {"sha": "334d2741cf8e560efd21bd1c519738fe04b7fc6a", "filename": "libgfortran/intrinsics/eoshift2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Feoshift2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Feoshift2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Feoshift2.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -206,7 +206,7 @@ eoshift2 (gfc_array_char *ret, const gfc_array_char *array,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n           bptr -= bstride[n] * extent[n];"}, {"sha": "27a22ec8d54ff8cd621ce6db7dda61237ec8a1b7", "filename": "libgfortran/intrinsics/pack_generic.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Fpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fpack_generic.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -41,7 +41,7 @@ Boston, MA 02110-1301, USA.  */\n    Description: Pack an array into an array of rank one under the\n    control of a mask.\n \n-   Class: Transformational fucntion.\n+   Class: Transformational function.\n \n    Arguments:\n       ARRAY   may be of any type. It shall not be scalar.\n@@ -171,7 +171,7 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n \t\t     and increment the next dimension.  */\n \t\t  count[n] = 0;\n \t\t  /* We could precalculate this product, but this is a\n-\t\t     less frequently used path so proabably not worth\n+\t\t     less frequently used path so probably not worth\n \t\t     it.  */\n \t\t  m -= mstride[n] * extent[n];\n \t\t  n++;\n@@ -230,7 +230,7 @@ pack_internal (gfc_array_char *ret, const gfc_array_char *array,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           sptr -= sstride[n] * extent[n];\n           mptr -= mstride[n] * extent[n];\n           n++;\n@@ -402,7 +402,7 @@ pack_s_internal (gfc_array_char *ret, const gfc_array_char *array,\n \t\t increment the next dimension.  */\n \t      count[n] = 0;\n \t      /* We could precalculate these products, but this is a\n-\t\t less frequently used path so proabably not worth it.  */\n+\t\t less frequently used path so probably not worth it.  */\n \t      sptr -= sstride[n] * extent[n];\n \t      n++;\n \t      if (n >= dim)"}, {"sha": "97860b66299e8ccbad8c8be6f6bfd5fc90a56a1e", "filename": "libgfortran/intrinsics/reshape_generic.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Freshape_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Freshape_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Freshape_generic.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -190,7 +190,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n              the next dimension.  */\n           rcount[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * rextent[n] * size;\n           n++;\n           if (n == rdim)\n@@ -213,7 +213,7 @@ reshape_internal (parray *ret, parray *source, shape_type *shape,\n              the next dimension.  */\n           scount[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           src -= sstride[n] * sextent[n] * size;\n           n++;\n           if (n == sdim)"}, {"sha": "5cf96666df96457da0e1c4f6153718839b971e76", "filename": "libgfortran/intrinsics/unpack_generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Funpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fintrinsics%2Funpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Funpack_generic.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -148,7 +148,7 @@ unpack_internal (gfc_array_char *ret, const gfc_array_char *vector,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           fptr -= fstride[n] * extent[n];\n           mptr -= mstride[n] * extent[n];"}, {"sha": "ecc4a9de0ea7f6105af9f50d750913b394fbf170", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -108,7 +108,7 @@ array_loop_spec;\n      or\n       &GROUPNAME  OBJECT=value[s] [,OBJECT=value[s]]...&END\n \n-   The object can be a fully qualified, compound name for an instrinsic\n+   The object can be a fully qualified, compound name for an intrinsic\n    type, derived types or derived type components.  So, a substring\n    a(:)%b(4)%ch(2:4)(1:7) has to be treated correctly in namelist\n    read. Hence full information about the structure of the object has"}, {"sha": "cddfd76877f7637ee228cb14ec1410ef0c82b71f", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -2219,7 +2219,7 @@ nml_read_obj (st_parameter_dt *dtp, namelist_info * nl, index_type offset,\n \t}\n \n       /* If the expanded read warning flag is set, increment it,\n-\t indicating that a single read has occured.  */\n+\t indicating that a single read has occurred.  */\n       if (dtp->u.p.expanded_read >= 1)\n \tdtp->u.p.expanded_read++;\n \n@@ -2298,7 +2298,7 @@ nml_get_obj_data (st_parameter_dt *dtp, namelist_info **pprev_nl,\n       c = next_char (dtp);\n       if (c != '?')\n \t{\n-\t  st_sprintf (nml_err_msg, \"namelist read: missplaced = sign\");\n+\t  st_sprintf (nml_err_msg, \"namelist read: misplaced = sign\");\n \t  goto nml_err_ret;\n \t}\n       nml_query (dtp, '=');"}, {"sha": "24ce51a706411749dd5ea01be90d2acb76f7d6f6", "filename": "libgfortran/io/open.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fopen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fopen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fopen.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -178,7 +178,7 @@ edit_modes (st_parameter_open *opp, gfc_unit * u, unit_flags * flags)\n \n       if (flags->pad != PAD_UNSPECIFIED)\n \tgenerate_error (&opp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t\"PAD paramter conflicts with UNFORMATTED form in \"\n+\t\t\t\"PAD parameter conflicts with UNFORMATTED form in \"\n \t\t\t\"OPEN statement\");\n     }\n \n@@ -284,7 +284,7 @@ new_unit (st_parameter_open *opp, gfc_unit *u, unit_flags * flags)\n       if (flags->form == FORM_UNFORMATTED)\n \t{\n \t  generate_error (&opp->common, ERROR_OPTION_CONFLICT,\n-\t\t\t  \"PAD paramter conflicts with UNFORMATTED form in \"\n+\t\t\t  \"PAD parameter conflicts with UNFORMATTED form in \"\n \t\t\t  \"OPEN statement\");\n \t  goto fail;\n \t}"}, {"sha": "aacf4a33ded56c6635ca6e313e4c7b2633054655", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -738,7 +738,7 @@ require_type (st_parameter_dt *dtp, bt expected, bt actual, const fnode *f)\n /* This subroutine is the main loop for a formatted data transfer\n    statement.  It would be natural to implement this as a coroutine\n    with the user program, but C makes that awkward.  We loop,\n-   processesing format elements.  When we actually have to transfer\n+   processing format elements.  When we actually have to transfer\n    data instead of just setting flags, we return control to the user\n    program which calls a subroutine that supplies the address and type\n    of the next element, then comes back here to process it.  */"}, {"sha": "121d62907f376c9ad0c834416867d2263508b0c2", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -1,6 +1,6 @@\n /* Copyright (C) 2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Andy Vaught\n-   Namelist output contibuted by Paul Thomas\n+   Namelist output contributed by Paul Thomas\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n "}, {"sha": "68c2397f88686f7c89726bfaaac619d1937855c6", "filename": "libgfortran/m4/cshift1.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fcshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fcshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift1.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -176,7 +176,7 @@ cshift1 (gfc_array_char * const restrict ret,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n \t  hptr -= hstride[n] * extent[n];"}, {"sha": "0144fc11c68f70f5d1ca8a61734b6908e6aff29d", "filename": "libgfortran/m4/eoshift1.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Feoshift1.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Feoshift1.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift1.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -200,7 +200,7 @@ eoshift1 (gfc_array_char * const restrict ret,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n \t  hptr -= hstride[n] * extent[n];"}, {"sha": "7df08d2a785c6d7d720bbea4359c97205cfa8682", "filename": "libgfortran/m4/eoshift3.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Feoshift3.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Feoshift3.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Feoshift3.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -216,7 +216,7 @@ eoshift3 (gfc_array_char * const restrict ret,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * extent[n];\n           sptr -= sstride[n] * extent[n];\n \t  hptr -= hstride[n] * extent[n];"}, {"sha": "af53cef7ecc5fbb3942c1fd5d672eb6230ce4019", "filename": "libgfortran/m4/iforeach.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fiforeach.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fiforeach.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fiforeach.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -85,7 +85,7 @@ define(FINISH_FOREACH_FUNCTION,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           base -= sstride[n] * extent[n];\n           n++;\n           if (n == rank)\n@@ -197,7 +197,7 @@ define(FINISH_MASKED_FOREACH_FUNCTION,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           base -= sstride[n] * extent[n];\n           mbase -= mstride[n] * extent[n];\n           n++;"}, {"sha": "d2f2a80c4232e2a9a928a5593117992ca64d3d9c", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -126,7 +126,7 @@ define(FINISH_ARRAY_FUNCTION,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           base -= sstride[n] * extent[n];\n           dest -= dstride[n] * extent[n];\n           n++;\n@@ -277,7 +277,7 @@ define(FINISH_MASKED_ARRAY_FUNCTION,\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           base -= sstride[n] * extent[n];\n           mbase -= mstride[n] * extent[n];\n           dest -= dstride[n] * extent[n];"}, {"sha": "81205075198ff2930e19f19c432037f83f554709", "filename": "libgfortran/m4/in_pack.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fin_pack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fin_pack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_pack.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -105,7 +105,7 @@ rtype_name *\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           src -= stride[n] * extent[n];\n           n++;\n           if (n == dim)"}, {"sha": "d0438f71e0731f6e6768900bbd7f5f804fb7e94a", "filename": "libgfortran/m4/in_unpack.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fin_unpack.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Fin_unpack.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fin_unpack.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -94,7 +94,7 @@ void\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           dest -= stride[n] * extent[n];\n           n++;\n           if (n == dim)"}, {"sha": "ed594fbfa6884ce5389f59c8102aadaadda4ae21", "filename": "libgfortran/m4/reshape.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Freshape.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fm4%2Freshape.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Freshape.m4?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -202,7 +202,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n              the next dimension.  */\n           rcount[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           rptr -= rstride[n] * rextent[n];\n           n++;\n           if (n == rdim)\n@@ -225,7 +225,7 @@ reshape_`'rtype_ccode (rtype * const restrict ret,\n              the next dimension.  */\n           scount[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           src -= sstride[n] * sextent[n];\n           n++;\n           if (n == sdim)"}, {"sha": "555b4482c6991f7b2c5ed5333ce7d75391b99224", "filename": "libgfortran/runtime/environ.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fenviron.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fenviron.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fenviron.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -503,7 +503,7 @@ static variable variable_table[] = {\n    stringize (DEFAULT_RECL), 0},\n \n   {\"GFORTRAN_LIST_SEPARATOR\", 0, NULL, init_sep, show_sep,\n-   \"Separatator to use when writing list output.  May contain any number of \"\n+   \"Separator to use when writing list output.  May contain any number of \"\n    \"spaces\\nand at most one comma.  Default is a single space.\", 0},\n \n   /* Memory related controls */\n@@ -855,7 +855,7 @@ mark_range (int unit1, int unit2)\n \n /* Parse the GFORTRAN_CONVERT_UNITS variable.  This is called\n    twice, once to count the units and once to actually mark them in\n-   the table.  When counting, we don't check for double occurences\n+   the table.  When counting, we don't check for double occurrences\n    of units.  */\n \n static int"}, {"sha": "7f02b97bff9adf5465f389810d4025b1b712ea15", "filename": "libgfortran/runtime/in_pack_generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fin_pack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fin_pack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_pack_generic.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -138,7 +138,7 @@ internal_pack (gfc_array_char * source)\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           src -= stride[n] * extent[n] * size;\n           n++;\n           if (n == dim)"}, {"sha": "7c14355b80907b89dfdda030c74216fa5d829f5b", "filename": "libgfortran/runtime/in_unpack_generic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fin_unpack_generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fin_unpack_generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fin_unpack_generic.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -136,7 +136,7 @@ internal_unpack (gfc_array_char * d, const void * s)\n              the next dimension.  */\n           count[n] = 0;\n           /* We could precalculate these products, but this is a less\n-             frequently used path so proabably not worth it.  */\n+             frequently used path so probably not worth it.  */\n           dest -= stride[n] * extent[n] * size;\n           n++;\n           if (n == dim)"}, {"sha": "43a72e3f1b2cd0bf5ffdfb1d3d33b8137f6d0328", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b6dba81f050bea9220007f219c0a753af782262/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=8b6dba81f050bea9220007f219c0a753af782262", "patch": "@@ -1,4 +1,4 @@\n-/* Memory mamagement routines.\n+/* Memory management routines.\n    Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n "}]}