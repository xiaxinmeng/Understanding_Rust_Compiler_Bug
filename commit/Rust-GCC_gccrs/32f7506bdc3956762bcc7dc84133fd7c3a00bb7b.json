{"sha": "32f7506bdc3956762bcc7dc84133fd7c3a00bb7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmNzUwNmJkYzM5NTY3NjJiY2M3ZGM4NDEzM2ZkN2MzYTAwYmI3Yg==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T09:53:41Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T11:40:15Z"}, "message": "Abstract out conditional simplification out of execute_vrp.\n\nVRP simplifies conditionals involving casted values outside of the main\nfolding mechanism, because this optimization inhibits the VRP jump\nthreader from threading through the comparison.\n\nAs part of replacing VRP with an evrp instance, I am making sure we do\neverything VRP does.  Hence, I am abstracting this functionality out so\nwe can call it from from elsewhere.\n\nISTM that when the proposed ranger-based jump threader can handle\neverything the forward threader does, there will be no need for this\noptimization to be done outside of the evrp folder.  Perhaps we can fold\nthis into the substitute_using_ranges class.  But that's further down\nthe line.\n\nAlso, there is no need to pass a vr_values around, when the base\nrange_query class will do.  I fixed this, at it makes it trivial to pass\ndown a ranger or evrp instance.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* tree-vrp.c (vrp_simplify_cond_using_ranges): Rename vr_values\n\twith range_query.\n\t(execute_vrp): Abstract out simplification of conditionals...\n\t(simplify_casted_conds): ...here.", "tree": {"sha": "8440f5a2f5a13c70852c862b807138b8bbb1b6c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8440f5a2f5a13c70852c862b807138b8bbb1b6c3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd44445f09bcf92198e9238a28bf026959152be1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd44445f09bcf92198e9238a28bf026959152be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd44445f09bcf92198e9238a28bf026959152be1"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "58111f8318358334f9a09468c0da4b60cacb78f4", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32f7506bdc3956762bcc7dc84133fd7c3a00bb7b/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=32f7506bdc3956762bcc7dc84133fd7c3a00bb7b", "patch": "@@ -4359,7 +4359,7 @@ vrp_jump_threader::after_dom_children (basic_block bb)\n    subsequent passes.  */\n \n static void\n-vrp_simplify_cond_using_ranges (vr_values *query, gcond *stmt)\n+vrp_simplify_cond_using_ranges (range_query *query, gcond *stmt)\n {\n   tree op0 = gimple_cond_lhs (stmt);\n   tree op1 = gimple_cond_rhs (stmt);\n@@ -4423,6 +4423,27 @@ vrp_simplify_cond_using_ranges (vr_values *query, gcond *stmt)\n     }\n }\n \n+/* A comparison of an SSA_NAME against a constant where the SSA_NAME\n+   was set by a type conversion can often be rewritten to use the RHS\n+   of the type conversion.  Do this optimization for all conditionals\n+   in FUN.\n+\n+   However, doing so inhibits jump threading through the comparison.\n+   So that transformation is not performed until after jump threading\n+   is complete.  */\n+\n+static void\n+simplify_casted_conds (function *fun, range_query *query)\n+{\n+  basic_block bb;\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      gimple *last = last_stmt (bb);\n+      if (last && gimple_code (last) == GIMPLE_COND)\n+\tvrp_simplify_cond_using_ranges (query, as_a <gcond *> (last));\n+    }\n+}\n+\n /* Main entry point to VRP (Value Range Propagation).  This pass is\n    loosely based on J. R. C. Patterson, ``Accurate Static Branch\n    Prediction by Value Range Propagation,'' in SIGPLAN Conference on\n@@ -4519,21 +4540,7 @@ execute_vrp (struct function *fun, bool warn_array_bounds_p)\n   vrp_jump_threader threader (fun, &vrp_vr_values);\n   threader.thread_jumps ();\n \n-  /* A comparison of an SSA_NAME against a constant where the SSA_NAME\n-     was set by a type conversion can often be rewritten to use the\n-     RHS of the type conversion.\n-\n-     However, doing so inhibits jump threading through the comparison.\n-     So that transformation is not performed until after jump threading\n-     is complete.  */\n-  basic_block bb;\n-  FOR_EACH_BB_FN (bb, fun)\n-    {\n-      gimple *last = last_stmt (bb);\n-      if (last && gimple_code (last) == GIMPLE_COND)\n-\tvrp_simplify_cond_using_ranges (&vrp_vr_values,\n-\t\t\t\t\tas_a <gcond *> (last));\n-    }\n+  simplify_casted_conds (fun, &vrp_vr_values);\n \n   free_numbers_of_iterations_estimates (fun);\n "}]}