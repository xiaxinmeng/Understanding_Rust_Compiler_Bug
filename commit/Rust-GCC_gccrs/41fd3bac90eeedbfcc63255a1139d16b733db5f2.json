{"sha": "41fd3bac90eeedbfcc63255a1139d16b733db5f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmZDNiYWM5MGVlZWRiZmNjNjMyNTVhMTEzOWQxNmI3MzNkYjVmMg==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2004-05-31T15:25:51Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2004-05-31T15:25:51Z"}, "message": "c-pretty-print.c (pp_c_left_bracket): Make a function.\n\n        * c-pretty-print.c (pp_c_left_bracket): Make a function.\n        (pp_c_right_bracket): Likewise.\n        (pp_c_star): Likewise.\n        (pp_c_ampersand): Define.\n        * c-pretty-print.h (pp_c_left_bracket): Declare.\n        (pp_c_right_bracket): Likewise.\n        (pp_c_star): Likewise.\n        (pp_c_ampersand): Likewise.\n\ncp/\n        * cxx-pretty-print.c (pp_cxx_colon_colon): Expor.\n        (pp_cxx_begin_template_argument_list): Turn into a function.\n        (pp_cxx_end_template_argument_list): Likewise.\n        (pp_cxx_separate_with): Define.\n        (pp_cxx_unqualified_id): Tidy.\n        (pp_cxx_primary_expression): Likewise.\n        (pp_cxx_postfix_expression): Likewise.\n        (pp_cxx_expression): Likewise.\n        (pp_cxx_simple_type_specifier): Likewise.\n        (pp_cxx_type_specifier_seq): Likewise.\n        (pp_cxx_parameter_declaration_clause): Likewise.\n        (pp_cxx_exception_specification): Likewise.\n        (pp_cxx_direct_declarator): Likewise.\n        (pp_cxx_type_id): Likewise.\n        * cxx-pretty-print.h (pp_cxx_whitespace): Export from\n        cxx-pretty-print.c.\n        (pp_cxx_left_paren): Likewise.\n        (pp_cxx_right_paren): Likewise.\n        (pp_cxx_left_brace): Likewise.\n        (pp_cxx_right_brace): Likewise.\n        (pp_cxx_left_bracket): Likewise.\n        (pp_cxx_right_bracket): Likewise.\n        (pp_cxx_dot): Likewise.\n        (pp_cxx_identifier): Likewise.\n        (pp_cxx_tree_identifier): Likewise.\n        (pp_cxx_ampersand): New macro.\n        (pp_cxx_star): Likewise.\n        (pp_cxx_arrow): Likewise.\n        (pp_cxx_semicolon): Likewise.\n        (pp_cxx_complement): Likewise.\n        (pp_cxx_begin_template_argument_list): Declaree.\n        (pp_cxx_end_template_argument_list): Likewise.\n        (pp_cxx_colon_colon): likewise.\n\nFrom-SVN: r82488", "tree": {"sha": "5e8925b20e37d3ca0e950c5715828aaa2272dc78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e8925b20e37d3ca0e950c5715828aaa2272dc78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41fd3bac90eeedbfcc63255a1139d16b733db5f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd3bac90eeedbfcc63255a1139d16b733db5f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fd3bac90eeedbfcc63255a1139d16b733db5f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fd3bac90eeedbfcc63255a1139d16b733db5f2/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3157fb66d158c3f7073988cd5135da88a48a2f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3157fb66d158c3f7073988cd5135da88a48a2f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3157fb66d158c3f7073988cd5135da88a48a2f1"}], "stats": {"total": 204, "additions": 153, "deletions": 51}, "files": [{"sha": "961c3bfaaf8558563666a50676cfe95370d26db0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -1,3 +1,14 @@\n+2004-05-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* c-pretty-print.c (pp_c_left_bracket): Make a function.\n+\t(pp_c_right_bracket): Likewise.\n+\t(pp_c_star): Likewise.\n+\t(pp_c_ampersand): Define.\n+\t* c-pretty-print.h (pp_c_left_bracket): Declare.\n+\t(pp_c_right_bracket): Likewise.\n+\t(pp_c_star): Likewise.\n+\t(pp_c_ampersand): Likewise.\n+\n 2004-05-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* config/sol2.h (__enable_execute_stack): ANSIfy function"}, {"sha": "4b5dd51e578f5d120ff541ea46e61e318b6ee415", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -42,24 +42,6 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n        pp_c_whitespace (PP);                 \\\n    } while (0)\n \n-#define pp_c_left_bracket(PP)         \\\n-  do {                                \\\n-    pp_left_bracket (PP);             \\\n-    pp_base (PP)->padding = pp_none;  \\\n-  } while (0)\n-\n-#define pp_c_right_bracket(PP)        \\\n-  do {                                \\\n-    pp_right_bracket (PP);            \\\n-    pp_base (PP)->padding = pp_none;  \\\n-  } while (0)\n-\n-#define pp_c_star(PP)                 \\\n-  do {                                \\\n-    pp_star (PP);                     \\\n-    pp_base (PP)->padding = pp_none;  \\\n-  } while (0)\n-\n /* literal  */\n static void pp_c_char (c_pretty_printer *, int);\n \n@@ -119,6 +101,20 @@ pp_c_right_brace (c_pretty_printer *pp)\n   pp_base (pp)->padding = pp_none;\n }\n \n+void\n+pp_c_left_bracket (c_pretty_printer *pp)\n+{\n+  pp_left_bracket (pp);\n+  pp_base (pp)->padding = pp_none;\n+}\n+\n+void\n+pp_c_right_bracket (c_pretty_printer *pp)\n+{\n+  pp_right_bracket (pp);\n+  pp_base (pp)->padding = pp_none;\n+}\n+\n void\n pp_c_dot (c_pretty_printer *pp)\n {\n@@ -133,6 +129,13 @@ pp_c_ampersand (c_pretty_printer *pp)\n   pp_base (pp)->padding = pp_none;\n }\n \n+void\n+pp_c_star (c_pretty_printer *pp)\n+{\n+  pp_star (pp);\n+  pp_base (pp)->padding = pp_none;\n+}\n+\n void\n pp_c_arrow (c_pretty_printer *pp)\n {\n@@ -147,6 +150,20 @@ pp_c_semicolon (c_pretty_printer *pp)\n   pp_base (pp)->padding = pp_none;\n }\n \n+void\n+pp_c_complement (c_pretty_printer *pp)\n+{\n+  pp_complement (pp);\n+  pp_base (pp)->padding = pp_none;\n+}\n+\n+void\n+pp_c_exclamation (c_pretty_printer *pp)\n+{\n+  pp_exclamation (pp);\n+  pp_base (pp)->padding = pp_none;\n+}\n+\n /* Print out the external representation of CV-QUALIFIER.  */\n \n static void"}, {"sha": "f1ab608259a759b239dc44cb705dadea2a1e2547", "filename": "gcc/c-pretty-print.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fc-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fc-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.h?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -1,5 +1,5 @@\n /* Various declarations for the C and C++ pretty-printers.\n-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@integrable-solutions.net>\n \n This file is part of GCC.\n@@ -159,10 +159,15 @@ void pp_c_left_paren (c_pretty_printer *);\n void pp_c_right_paren (c_pretty_printer *);\n void pp_c_left_brace (c_pretty_printer *);\n void pp_c_right_brace (c_pretty_printer *);\n+void pp_c_left_bracket (c_pretty_printer *);\n+void pp_c_right_bracket (c_pretty_printer *);\n void pp_c_dot (c_pretty_printer *);\n void pp_c_ampersand (c_pretty_printer *);\n+void pp_c_star (c_pretty_printer *);\n void pp_c_arrow (c_pretty_printer *);\n void pp_c_semicolon (c_pretty_printer *);\n+void pp_c_complement (c_pretty_printer *);\n+void pp_c_exclamation (c_pretty_printer *);\n void pp_c_space_for_pointer_operator (c_pretty_printer *, tree);\n \n /* Declarations.  */"}, {"sha": "4ead672ef934c97237bff78a0961f3c155febf67", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -1,3 +1,39 @@\n+2004-05-31  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n+\n+\t* cxx-pretty-print.c (pp_cxx_colon_colon): Expor.\n+\t(pp_cxx_begin_template_argument_list): Turn into a function.\n+\t(pp_cxx_end_template_argument_list): Likewise.\n+\t(pp_cxx_separate_with): Define.\n+\t(pp_cxx_unqualified_id): Tidy.\n+\t(pp_cxx_primary_expression): Likewise.\n+\t(pp_cxx_postfix_expression): Likewise.\n+\t(pp_cxx_expression): Likewise.\n+\t(pp_cxx_simple_type_specifier): Likewise.\n+\t(pp_cxx_type_specifier_seq): Likewise.\n+\t(pp_cxx_parameter_declaration_clause): Likewise.\n+\t(pp_cxx_exception_specification): Likewise.\n+\t(pp_cxx_direct_declarator): Likewise.\n+\t(pp_cxx_type_id): Likewise.\n+\t* cxx-pretty-print.h (pp_cxx_whitespace): Export from\n+\tcxx-pretty-print.c.\n+\t(pp_cxx_left_paren): Likewise.\n+\t(pp_cxx_right_paren): Likewise.\n+\t(pp_cxx_left_brace): Likewise.\n+\t(pp_cxx_right_brace): Likewise.\n+\t(pp_cxx_left_bracket): Likewise.\n+\t(pp_cxx_right_bracket): Likewise.\n+\t(pp_cxx_dot): Likewise.\n+\t(pp_cxx_identifier): Likewise.\n+\t(pp_cxx_tree_identifier): Likewise.\n+\t(pp_cxx_ampersand): New macro.\n+\t(pp_cxx_star): Likewise.\n+\t(pp_cxx_arrow): Likewise.\n+\t(pp_cxx_semicolon): Likewise.\n+\t(pp_cxx_complement): Likewise.\n+\t(pp_cxx_begin_template_argument_list): Declaree.\n+\t(pp_cxx_end_template_argument_list): Likewise.\n+\t(pp_cxx_colon_colon): likewise.\n+\n 2004-05-31  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* parser.c (cp_parser_simple_type_specifier): Explicitly test"}, {"sha": "c5e667d9495f9efbaff808f07c0a5e467558d6e8", "filename": "gcc/cp/cxx-pretty-print.c", "status": "modified", "additions": 43, "deletions": 32, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2Fcxx-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2Fcxx-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.c?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -43,14 +43,6 @@ static void pp_cxx_parameter_declaration_clause (cxx_pretty_printer *, tree);\n static void pp_cxx_abstract_declarator (cxx_pretty_printer *, tree);\n static void pp_cxx_template_parameter (cxx_pretty_printer *, tree);\n \f\n-#define pp_cxx_whitespace(PP)  pp_c_whitespace (pp_c_base (PP))\n-#define pp_cxx_left_paren(PP)  pp_c_left_paren (pp_c_base (PP))\n-#define pp_cxx_right_paren(PP) pp_c_right_paren (pp_c_base (PP))\n-#define pp_cxx_left_brace(PP)  pp_c_left_brace (pp_c_base (PP))\n-#define pp_cxx_right_brace(PP) pp_c_right_brace (pp_c_base (PP))\n-#define pp_cxx_dot(PP)         pp_c_dot (pp_c_base (PP))\n-#define pp_cxx_arrow(PP)       pp_c_arrow (pp_c_base (PP))\n-#define pp_cxx_semicolon(PP)   pp_c_semicolon (pp_c_base (PP))\n \n static inline void\n pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n@@ -63,14 +55,6 @@ pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n   pp_base (pp)->padding = pp_none;\n }\n \n-#define pp_cxx_begin_template_argument_list(PP) \\\n-  pp_cxx_nonconsecutive_character (PP, '<')\n-#define pp_cxx_end_template_argument_list(PP) \\\n-  pp_cxx_nonconsecutive_character (PP, '>')\n-\n-#define pp_cxx_identifier(PP, ID) pp_c_identifier (pp_c_base (PP), ID)\n-#define pp_cxx_tree_identifier(PP, T) pp_c_tree_identifier (pp_c_base (PP), T)\n-\n #define pp_cxx_storage_class_specifier(PP, T) \\\n    pp_c_storage_class_specifier (pp_c_base (PP), T)\n #define pp_cxx_expression_list(PP, T)    \\\n@@ -82,13 +66,31 @@ pp_cxx_nonconsecutive_character (cxx_pretty_printer *pp, int c)\n #define pp_cxx_call_argument_list(PP, T) \\\n    pp_c_call_argument_list (pp_c_base (PP), T)\n \n-static void\n+void\n pp_cxx_colon_colon (cxx_pretty_printer *pp)\n {\n   pp_colon_colon (pp);\n   pp_base (pp)->padding = pp_none;\n }\n \n+void\n+pp_cxx_begin_template_argument_list (cxx_pretty_printer *pp)\n+{\n+  pp_cxx_nonconsecutive_character (pp, '<');\n+}\n+\n+void\n+pp_cxx_end_template_argument_list (cxx_pretty_printer *pp)\n+{\n+  pp_cxx_nonconsecutive_character (pp, '>');\n+}\n+\n+void\n+pp_cxx_separate_with (cxx_pretty_printer *pp, int c)\n+{\n+  pp_separate_with (pp, c);\n+  pp_base (pp)->padding = pp_none;\n+}\n \n /* Expressions.  */\n \n@@ -158,7 +160,7 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n       \n     case IDENTIFIER_NODE:\n       if (t == NULL)\n-        pp_cxx_identifier (pp, \"<anonymous>\");\n+        pp_cxx_identifier (pp, \"<unnamed>\");\n       else if (IDENTIFIER_TYPENAME_P (t))\n         pp_cxx_conversion_function_id (pp, t);\n       else\n@@ -185,7 +187,13 @@ pp_cxx_unqualified_id (cxx_pretty_printer *pp, tree t)\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n-      t = TEMPLATE_TYPE_PARM_INDEX (t);\n+    case TEMPLATE_TEMPLATE_PARM:\n+      if (TYPE_IDENTIFIER (t))\n+        pp_cxx_unqualified_id (pp, TYPE_IDENTIFIER (t));\n+      else\n+        pp_cxx_canonical_template_parameter (pp, t);\n+      break;\n+\n     case TEMPLATE_PARM_INDEX:\n       pp_cxx_unqualified_id (pp, TEMPLATE_PARM_DECL (t));\n       break;\n@@ -327,6 +335,7 @@ pp_cxx_primary_expression (cxx_pretty_printer *pp, tree t)\n \n     case RESULT_DECL:\n     case TEMPLATE_TYPE_PARM:\n+    case TEMPLATE_TEMPLATE_PARM:\n     case TEMPLATE_PARM_INDEX:\n       pp_cxx_unqualified_id (pp, t);\n       break;\n@@ -413,7 +422,7 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n       }\n       if (code == AGGR_INIT_EXPR && AGGR_INIT_VIA_CTOR_P (t))\n         {\n-          pp_separate_with (pp, ',');\n+          pp_cxx_separate_with (pp, ',');\n           pp_cxx_postfix_expression (pp, TREE_OPERAND (t, 2));\n         }\n       break;\n@@ -435,13 +444,13 @@ pp_cxx_postfix_expression (cxx_pretty_printer *pp, tree t)\n     case REINTERPRET_CAST_EXPR:\n     case CONST_CAST_EXPR:\n       if (code == DYNAMIC_CAST_EXPR)\n-        pp_identifier (pp, \"dynamic_cast\");\n+        pp_cxx_identifier (pp, \"dynamic_cast\");\n       else if (code == STATIC_CAST_EXPR)\n-        pp_identifier (pp, \"static_cast\");\n+        pp_cxx_identifier (pp, \"static_cast\");\n       else if (code == REINTERPRET_CAST_EXPR)\n-        pp_identifier (pp, \"reinterpret_cast\");\n+        pp_cxx_identifier (pp, \"reinterpret_cast\");\n       else\n-        pp_identifier (pp, \"const_cast\");\n+        pp_cxx_identifier (pp, \"const_cast\");\n       pp_cxx_begin_template_argument_list (pp);\n       pp_cxx_type_id (pp, TREE_TYPE (t));\n       pp_cxx_end_template_argument_list (pp);\n@@ -829,6 +838,7 @@ pp_cxx_expression (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_DECL:\n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_PARM_INDEX:\n+    case TEMPLATE_TEMPLATE_PARM:\n       pp_cxx_primary_expression (pp, t);\n       break;\n \n@@ -1000,6 +1010,7 @@ pp_cxx_simple_type_specifier (cxx_pretty_printer *pp, tree t)\n       break;\n \n     case TEMPLATE_TYPE_PARM:\n+    case TEMPLATE_TEMPLATE_PARM:\n     case TEMPLATE_PARM_INDEX:\n       pp_cxx_unqualified_id (pp, t);\n       break;\n@@ -1033,9 +1044,10 @@ pp_cxx_type_specifier_seq (cxx_pretty_printer *pp, tree t)\n     {\n     case TEMPLATE_DECL:\n     case TEMPLATE_TYPE_PARM:\n+    case TEMPLATE_TEMPLATE_PARM:\n     case TYPE_DECL:\n     case BOUND_TEMPLATE_TEMPLATE_PARM:\n-      pp_c_type_qualifier_list (pp_c_base (pp), t);\n+      pp_cxx_cv_qualifier_seq (pp, t);\n       pp_cxx_simple_type_specifier (pp, t);\n       break;\n \n@@ -1149,7 +1161,7 @@ pp_cxx_parameter_declaration_clause (cxx_pretty_printer *pp, tree t)\n   for (; args; args = TREE_CHAIN (args), types = TREE_CHAIN (types))\n     {\n       if (!first)\n-        pp_separate_with (pp, ',');\n+        pp_cxx_separate_with (pp, ',');\n       first = false;\n       pp_cxx_parameter_declaration (pp, abstract ? TREE_VALUE (types) : args);\n       if (!abstract && pp_c_base (pp)->flags & pp_cxx_flag_default_argument)\n@@ -1183,7 +1195,7 @@ pp_cxx_exception_specification (cxx_pretty_printer *pp, tree t)\n     {\n       pp_cxx_type_id (pp, TREE_VALUE (ex_spec));\n       if (TREE_CHAIN (ex_spec))\n-        pp_separate_with (pp, ',');\n+        pp_cxx_separate_with (pp, ',');\n     }\n   pp_cxx_right_paren (pp);\n }\n@@ -1230,6 +1242,7 @@ pp_cxx_direct_declarator (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_DECL:\n     case TEMPLATE_TYPE_PARM:\n     case TEMPLATE_PARM_INDEX:\n+    case TEMPLATE_TEMPLATE_PARM:\n       break;\n \n     default:\n@@ -1274,7 +1287,7 @@ pp_cxx_ctor_initializer (cxx_pretty_printer *pp, tree t)\n       pp_cxx_primary_expression (pp, TREE_PURPOSE (t));\n       pp_cxx_call_argument_list (pp, TREE_VALUE (t));\n       if (TREE_CHAIN (t))\n-        pp_separate_with (pp, ',');\n+        pp_cxx_separate_with (pp, ',');\n     }\n }\n \n@@ -1400,9 +1413,7 @@ pp_cxx_type_id (cxx_pretty_printer *pp, tree t)\n     case TEMPLATE_DECL:\n     case TYPEOF_TYPE:\n     case TEMPLATE_ID_EXPR:\n-      /* FIXME: Should be pp_cxx_type_specifier_seq.  */\n       pp_cxx_type_specifier_seq (pp, t);\n-      pp_cxx_declarator (pp, t);\n       break;\n \n     default:\n@@ -1432,7 +1443,7 @@ pp_cxx_template_argument_list (cxx_pretty_printer *pp, tree t)\n     {\n       tree arg = TREE_VEC_ELT (t, i);\n       if (i != 0)\n-        pp_separate_with (pp, ',');\n+        pp_cxx_separate_with (pp, ',');\n       if (TYPE_P (arg) || (TREE_CODE (arg) == TEMPLATE_DECL\n                            && TYPE_P (DECL_TEMPLATE_RESULT (arg))))\n         pp_cxx_type_id (pp, arg);\n@@ -1582,7 +1593,7 @@ pp_cxx_template_parameter_list (cxx_pretty_printer *pp, tree t)\n   for (i = 0; i < n; ++i)\n     {\n       if (i)\n-        pp_separate_with (pp, ',');\n+        pp_cxx_separate_with (pp, ',');\n       pp_cxx_template_parameter (pp, TREE_VEC_ELT (t, i));\n     }\n }"}, {"sha": "a2ce6b09de9e4ea43f8afd57427374f8d588bb80", "filename": "gcc/cp/cxx-pretty-print.h", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2Fcxx-pretty-print.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41fd3bac90eeedbfcc63255a1139d16b733db5f2/gcc%2Fcp%2Fcxx-pretty-print.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcxx-pretty-print.h?ref=41fd3bac90eeedbfcc63255a1139d16b733db5f2", "patch": "@@ -44,7 +44,29 @@ typedef struct\n #define pp_cxx_cv_qualifier_seq(PP, T)   \\\n    pp_c_type_qualifier_list (pp_c_base (PP), T)\n \n+#define pp_cxx_whitespace(PP)          pp_c_whitespace (pp_c_base (PP))\n+#define pp_cxx_left_paren(PP)          pp_c_left_paren (pp_c_base (PP))\n+#define pp_cxx_right_paren(PP)         pp_c_right_paren (pp_c_base (PP))\n+#define pp_cxx_left_brace(PP)          pp_c_left_brace (pp_c_base (PP))\n+#define pp_cxx_right_brace(PP)         pp_c_right_brace (pp_c_base (PP))\n+#define pp_cxx_left_bracket(PP)        pp_c_left_bracket (pp_c_base (PP))\n+#define pp_cxx_right_bracket(PP)       pp_c_right_bracket (pp_c_base (PP))\n+#define pp_cxx_dot(PP)                 pp_c_dot (pp_c_base (PP))\n+#define pp_cxx_ampersand(PP)           pp_c_ampersand (pp_c_base (PP))\n+#define pp_cxx_star(PP)                pp_c_star (pp_c_base (PP))\n+#define pp_cxx_arrow(PP)               pp_c_arrow (pp_c_base (PP))\n+#define pp_cxx_semicolon(PP)           pp_c_semicolon (pp_c_base (PP))\n+#define pp_cxx_complement(PP)          pp_c_complement (pp_c_base (PP))\n+\n+#define pp_cxx_identifier(PP, I)       pp_c_identifier (pp_c_base (PP), I)\n+#define pp_cxx_tree_identifier(PP, T) \\\n+  pp_c_tree_identifier (pp_c_base (PP), T)\n+\n void pp_cxx_pretty_printer_init (cxx_pretty_printer *);\n+void pp_cxx_begin_template_argument_list (cxx_pretty_printer *);\n+void pp_cxx_end_template_argument_list (cxx_pretty_printer *);\n+void pp_cxx_colon_colon (cxx_pretty_printer *);\n+void pp_cxx_separate_with (cxx_pretty_printer *, int);\n \n void pp_cxx_declaration (cxx_pretty_printer *, tree);\n void pp_cxx_function_definition (cxx_pretty_printer *, tree);"}]}