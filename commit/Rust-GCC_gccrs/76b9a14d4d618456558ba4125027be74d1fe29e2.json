{"sha": "76b9a14d4d618456558ba4125027be74d1fe29e2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZiOWExNGQ0ZDYxODQ1NjU1OGJhNDEyNTAyN2JlNzRkMWZlMjllMg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1998-03-19T11:52:21Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1998-03-19T11:52:21Z"}, "message": "pt.c (get_bindings_real): Rename from get_bindings.\n\n\t* pt.c (get_bindings_real): Rename from get_bindings.  Add\n\tcheck_rettype parm.\n\t(get_bindings): Pass 1.\n\t(get_bindings_overload): Pass 0.\n\nFrom-SVN: r18708", "tree": {"sha": "6ef4aecd0c27bda79f02c2bd390659cb8ee5edf8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ef4aecd0c27bda79f02c2bd390659cb8ee5edf8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76b9a14d4d618456558ba4125027be74d1fe29e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b9a14d4d618456558ba4125027be74d1fe29e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76b9a14d4d618456558ba4125027be74d1fe29e2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76b9a14d4d618456558ba4125027be74d1fe29e2/comments", "author": null, "committer": null, "parents": [{"sha": "838b0e4efa12921ecfd261250c2e08851e25883a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/838b0e4efa12921ecfd261250c2e08851e25883a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/838b0e4efa12921ecfd261250c2e08851e25883a"}], "stats": {"total": 47, "additions": 38, "deletions": 9}, "files": [{"sha": "a586432024cd5303bd66b31dd39604abad9c8639", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b9a14d4d618456558ba4125027be74d1fe29e2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b9a14d4d618456558ba4125027be74d1fe29e2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=76b9a14d4d618456558ba4125027be74d1fe29e2", "patch": "@@ -1,3 +1,10 @@\n+Thu Mar 19 11:51:58 1998  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (get_bindings_real): Rename from get_bindings.  Add \n+\tcheck_rettype parm.\n+\t(get_bindings): Pass 1.\n+\t(get_bindings_overload): Pass 0.\n+\n Wed Mar 19 09:08:12 1998  Mark Mitchell  <mmitchell@usa.net>\n \n \t* pt.c (check_explicit_specialization): When reverting a static"}, {"sha": "be3e5ac23e14fad553cde7000c27c007acb3f0f2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76b9a14d4d618456558ba4125027be74d1fe29e2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76b9a14d4d618456558ba4125027be74d1fe29e2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=76b9a14d4d618456558ba4125027be74d1fe29e2", "patch": "@@ -86,6 +86,7 @@ static int  type_unification_real PROTO((tree, tree *, tree, tree,\n static void note_template_header PROTO((int));\n static tree maybe_fold_nontype_arg PROTO((tree));\n static tree convert_nontype_argument PROTO((tree, tree));\n+static tree get_bindings_overload PROTO((tree, tree, tree));\n \n /* Do any processing required when DECL (a member template declaration\n    using TEMPLATE_PARAMETERS as its innermost parameter list) is\n@@ -5608,13 +5609,13 @@ more_specialized (pat1, pat2, explicit_args)\n   tree targs;\n   int winner = 0;\n \n-  targs = get_bindings (pat1, pat2, explicit_args);\n+  targs = get_bindings_overload (pat1, pat2, explicit_args);\n   if (targs)\n     {\n       --winner;\n     }\n \n-  targs = get_bindings (pat2, pat1, explicit_args);\n+  targs = get_bindings_overload (pat2, pat1, explicit_args);\n   if (targs)\n     {\n       ++winner;\n@@ -5653,11 +5654,13 @@ more_specialized_class (pat1, pat2)\n \n /* Return the template arguments that will produce the function signature\n    DECL from the function template FN, with the explicit template\n-   arguments EXPLICIT_ARGS.  */\n+   arguments EXPLICIT_ARGS.  If CHECK_RETTYPE is 1, the return type must\n+   also match.  */\n \n-tree \n-get_bindings (fn, decl, explicit_args)\n+static tree\n+get_bindings_real (fn, decl, explicit_args, check_rettype)\n      tree fn, decl, explicit_args;\n+     int check_rettype;\n {\n   int ntparms = DECL_NTPARMS (fn);\n   tree targs = make_scratch_vec (ntparms);\n@@ -5691,18 +5694,37 @@ get_bindings (fn, decl, explicit_args)\n \t\t\t   1,\n \t\t\t   extra_fn_arg);\n \n-  if (i == 0)\n+  if (i != 0)\n+    return NULL_TREE;\n+\n+  if (check_rettype)\n     {\n       /* Check to see that the resulting return type is also OK.  */\n       tree t = tsubst (TREE_TYPE (TREE_TYPE (fn)), targs, NULL_TREE);\n \n       if (!comptypes (t, TREE_TYPE (TREE_TYPE (decl)), 1))\n \treturn NULL_TREE;\n-\n-      return targs;\n     }\n \n-  return NULL_TREE;\n+  return targs;\n+}\n+\n+/* For most uses, we want to check the return type.  */\n+\n+tree \n+get_bindings (fn, decl, explicit_args)\n+     tree fn, decl, explicit_args;\n+{\n+  return get_bindings_real (fn, decl, explicit_args, 1);\n+}\n+\n+/* But for more_specialized, we only care about the parameter types.  */\n+\n+static tree\n+get_bindings_overload (fn, decl, explicit_args)\n+     tree fn, decl, explicit_args;\n+{\n+  return get_bindings_real (fn, decl, explicit_args, 0);\n }\n \n static tree"}]}