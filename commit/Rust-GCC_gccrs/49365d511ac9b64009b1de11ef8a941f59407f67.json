{"sha": "49365d511ac9b64009b1de11ef8a941f59407f67", "node_id": "C_kwDOANBUbNoAKDQ5MzY1ZDUxMWFjOWI2NDAwOWIxZGUxMWVmOGE5NDFmNTk0MDdmNjc", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-04T09:32:21Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-02-04T09:38:02Z"}, "message": "[PATCH] PR rtl-optimization/101885: Prevent combine from clobbering flags\n\nThis patch addresses PR rtl-optimization/101885 which is a P2 wrong code\nregression.  In combine, if the resulting fused instruction is a parallel\nof two sets which fails to be recognized by the backend, combine tries to\nemit these as two sequential set instructions (known as split_i2i3).\nAs each set is recognized the backend may add any necessary \"clobbers\".\nThe code currently checks that any clobbers added to the first \"set\"\ndon't interfere with the second set, but doesn't currently handle the\ncase that clobbers added to the second set may interfere/kill the\ndestination of the first set (which must be live at this point).\nThe solution is to cut'n'paste the \"clobber\" logic from just a few\nlines earlier, suitably adjusted for the second instruction.\n\nOne minor nit that may confuse a reviewer is that at this point in\nthe code we've lost track of which set was first and which was second\n(combine chooses dynamically, and the recog processes that adds the\nclobbers may have obfuscated the original SET_DEST) so the actual test\nbelow is to confirm that any newly added clobbers (on the second set\ninstruction) don't overlap either set0's or set1's destination.\n\n2022-02-04  Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR rtl-optimization/101885\n\t* combine.cc (try_combine): When splitting a parallel into two\n\tsequential sets, check not only that the first doesn't clobber\n\tthe second but also that the second doesn't clobber the first.\n\ngcc/testsuite/ChangeLog\n\tPR rtl-optimization/101885\n\t* gcc.dg/pr101885.c: New test case.", "tree": {"sha": "ab69188cdad2d034a6286a862c2008164087936e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab69188cdad2d034a6286a862c2008164087936e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49365d511ac9b64009b1de11ef8a941f59407f67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49365d511ac9b64009b1de11ef8a941f59407f67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49365d511ac9b64009b1de11ef8a941f59407f67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49365d511ac9b64009b1de11ef8a941f59407f67/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b6370295d1efaa563f6d8c45f1fb779c3db452e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b6370295d1efaa563f6d8c45f1fb779c3db452e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b6370295d1efaa563f6d8c45f1fb779c3db452e"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "7683f8250fe269bb99d46dedd7631166267552d3", "filename": "gcc/combine.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49365d511ac9b64009b1de11ef8a941f59407f67/gcc%2Fcombine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49365d511ac9b64009b1de11ef8a941f59407f67/gcc%2Fcombine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.cc?ref=49365d511ac9b64009b1de11ef8a941f59407f67", "patch": "@@ -4017,6 +4017,24 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n \t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n \n+\t  /* Likewise, recog_for_combine might have added clobbers to NEWPAT.\n+\t     Checking that the SET0's SET_DEST and SET1's SET_DEST aren't\n+\t     mentioned/clobbered, ensures NEWI2PAT's SET_DEST is live.  */\n+\t  if (insn_code_number >= 0 && GET_CODE (newpat) == PARALLEL)\n+\t    {\n+\t      for (i = XVECLEN (newpat, 0) - 1; i >= 0; i--)\n+\t\tif (GET_CODE (XVECEXP (newpat, 0, i)) == CLOBBER)\n+\t\t  {\n+\t\t    rtx reg = XEXP (XVECEXP (newpat, 0, i), 0);\n+\t\t    if (reg_overlap_mentioned_p (reg, SET_DEST (set0))\n+\t\t\t|| reg_overlap_mentioned_p (reg, SET_DEST (set1)))\n+\t\t      {\n+\t\t\tundo_all ();\n+\t\t\treturn 0;\n+\t\t      }\n+\t\t  }\n+\t    }\n+\n \t  if (insn_code_number >= 0)\n \t    split_i2i3 = 1;\n \t}"}, {"sha": "05fd0ed30808782ad1f2d370bcee58546a477c8b", "filename": "gcc/testsuite/gcc.dg/pr101885.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49365d511ac9b64009b1de11ef8a941f59407f67/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101885.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49365d511ac9b64009b1de11ef8a941f59407f67/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101885.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr101885.c?ref=49365d511ac9b64009b1de11ef8a941f59407f67", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+int a = 3, c;\n+short b = 5, d, f;\n+volatile short e;\n+\n+__attribute__((noipa)) void\n+foo (void)\n+{\n+}\n+\n+int\n+main ()\n+{\n+  for (f = 0; f != 2; f++)\n+    {\n+      int g = a;\n+      if (b)\n+\tif (a)\n+\t  for (a = b = 0; b <= 3; b++)\n+\t    ;\n+      for (c = 0; c != 16; ++c)\n+\te;\n+    }\n+  b = d;\n+  foo ();\n+  if (a != 0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+"}]}