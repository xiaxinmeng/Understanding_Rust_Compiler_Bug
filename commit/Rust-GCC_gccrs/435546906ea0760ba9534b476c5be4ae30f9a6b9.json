{"sha": "435546906ea0760ba9534b476c5be4ae30f9a6b9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1NTQ2OTA2ZWEwNzYwYmE5NTM0YjQ3NmM1YmU0YWUzMGY5YTZiOQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-12T21:39:08Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-09-12T21:39:08Z"}, "message": "Changed various .o's to .$(objext)'s\n\nChanged various .o's to .$(objext)'s\n(specs): Removed unnecessary $(exeext).\n(EXTRA_GCC_OBJS): New variable.\n(clean): Removed $(LIB2FUNCS_EXTRA)\n\nFrom-SVN: r10331", "tree": {"sha": "39e395b9bb253610f97958bcb3db5b85abbeb69c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39e395b9bb253610f97958bcb3db5b85abbeb69c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435546906ea0760ba9534b476c5be4ae30f9a6b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435546906ea0760ba9534b476c5be4ae30f9a6b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435546906ea0760ba9534b476c5be4ae30f9a6b9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435546906ea0760ba9534b476c5be4ae30f9a6b9/comments", "author": null, "committer": null, "parents": [{"sha": "273adcccb8df005e8ce8f99b8d7623bcf2b0ce7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/273adcccb8df005e8ce8f99b8d7623bcf2b0ce7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/273adcccb8df005e8ce8f99b8d7623bcf2b0ce7a"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "d921d7074185fb8d49fb3c5a0666c5e01c352317", "filename": "gcc/Makefile.in", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435546906ea0760ba9534b476c5be4ae30f9a6b9/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435546906ea0760ba9534b476c5be4ae30f9a6b9/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=435546906ea0760ba9534b476c5be4ae30f9a6b9", "patch": "@@ -265,6 +265,10 @@ EXTRA_PARTS =\n # compiler proper (cc1, cc1obj, cc1plus).\n EXTRA_OBJS =\n \n+# List of extra object files that should be compiled and linked with\n+# the gcc driver.\n+EXTRA_GCC_OBJS =\n+\n # List of additional header files to install.\n # Often this is edited directly by `configure'.\n EXTRA_HEADERS =\n@@ -670,11 +674,11 @@ stamp-objlist: Makefile $(OBJS) $(BC_OBJS)\n # We call this executable `xgcc' rather than `gcc'\n # to avoid confusion if the current directory is in the path\n # and CC is `gcc'.  It is renamed to `gcc' when it is installed.\n-xgcc: gcc.o version.o $(LIBDEPS)\n-\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o version.o $(LIBS)\n+xgcc: gcc.o version.o $(LIBDEPS) $(EXTRA_GCC_OBJS)\n+\t$(CC) $(ALL_CFLAGS) $(LDFLAGS) -o $@ gcc.o version.o $(EXTRA_GCC_OBJS) $(LIBS)\n \n # Dump a specs file to make -B./ read these specs over installed ones.\n-specs: xgcc$(exeext)\n+specs: xgcc\n \t$(GCC_FOR_TARGET) -dumpspecs > tmp-specs\n \tmv tmp-specs specs\n \n@@ -970,7 +974,7 @@ stmp-multilib-sub:\n \telse true; \\\n \tfi\n \t(cd tmpcopy; $(AR) x ../$(LIBGCC2))\n-\t(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *.o)\n+\t(cd tmpcopy; $(AR) $(AR_FLAGS) ../tmplibgcc.a *.$(objext))\n \trm -rf libgcc2.a tmpcopy\n \tif $(RANLIB_TEST) ; then $(RANLIB) tmplibgcc.a; else true; fi\n \tif [ -d $(dir) ]; then true; else mkdir $(dir); fi\n@@ -1941,7 +1945,7 @@ clean: mostlyclean bytecode.clean lang.clean\n # Using unprotoize.c is not quite right in the first place, \n # but what better way is there?\n \t-rm -f libgcc.a libgcc1.a libgcc1-asm.a libgcc2.a libgcc2.ready\n-\t-rm -f libgcc1.null $(LIB2FUNCS_EXTRA)\n+\t-rm -f libgcc1.null\n \t-rm -f *.dvi\n \t-rm -f */*.dvi\n \t-if [ -f md.pre-cpp ]; then \\\n@@ -2415,7 +2419,7 @@ gnucompare: force\n \tdone\n \tfor dir in tmp-foo $(SUBDIRS); do \\\n \t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n-\t    for file in $$dir/*.o; do \\\n+\t    for file in $$dir/*.$(objext); do \\\n \t      cmp --ignore-initial=16 $$file stage2/$$file || true ; \\\n \t    done; \\\n \t  fi; \\"}]}