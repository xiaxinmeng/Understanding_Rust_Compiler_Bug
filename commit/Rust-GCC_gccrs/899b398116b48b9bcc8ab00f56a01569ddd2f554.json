{"sha": "899b398116b48b9bcc8ab00f56a01569ddd2f554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODk5YjM5ODExNmI0OGI5YmNjOGFiMDBmNTZhMDE1NjlkZGQyZjU1NA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2018-12-09T23:46:45Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2018-12-09T23:46:45Z"}, "message": "libphobos: Add druntime bindings for SPARC/Solaris\n\nBackported from upstream druntime master.\n\nInitial patch by Rainer Orth.\n\nReviewed-on: https://github.com/dlang/druntime/pull/2344\n\nFrom-SVN: r266935", "tree": {"sha": "1c6ba8e797a8a063b2968d22fc5df9fbe425e310", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c6ba8e797a8a063b2968d22fc5df9fbe425e310"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/899b398116b48b9bcc8ab00f56a01569ddd2f554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899b398116b48b9bcc8ab00f56a01569ddd2f554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/899b398116b48b9bcc8ab00f56a01569ddd2f554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/899b398116b48b9bcc8ab00f56a01569ddd2f554/comments", "author": null, "committer": null, "parents": [{"sha": "54f397919ae47f9c2433be93fcc14288899beb8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54f397919ae47f9c2433be93fcc14288899beb8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54f397919ae47f9c2433be93fcc14288899beb8c"}], "stats": {"total": 204, "additions": 198, "deletions": 6}, "files": [{"sha": "abfdcde533051372e9bdf9d921fb6437cfa4e9d4", "filename": "libphobos/libdruntime/core/stdc/fenv.d", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fstdc%2Ffenv.d?ref=899b398116b48b9bcc8ab00f56a01569ddd2f554", "patch": "@@ -457,6 +457,54 @@ version (CRuntime_Microsoft)\n         FE_TOWARDZERO   = 0x300, ///\n     }\n }\n+else version (Solaris)\n+{\n+    version (SPARC_Any)\n+    {\n+        enum\n+        {\n+            FE_TONEAREST    = 0,\n+            FE_TOWARDZERO   = 1,\n+            FE_UPWARD       = 2,\n+            FE_DOWNWARD     = 3,\n+        }\n+\n+        enum\n+        {\n+            FE_INEXACT      = 0x01,\n+            FE_DIVBYZERO    = 0x02,\n+            FE_UNDERFLOW    = 0x04,\n+            FE_OVERFLOW     = 0x08,\n+            FE_INVALID      = 0x10,\n+            FE_ALL_EXCEPT   = 0x1f,\n+        }\n+\n+    }\n+    else version (X86_Any)\n+    {\n+        enum\n+        {\n+            FE_TONEAREST    = 0,\n+            FE_DOWNWARD     = 1,\n+            FE_UPWARD       = 2,\n+            FE_TOWARDZERO   = 3,\n+        }\n+\n+        enum\n+        {\n+            FE_INVALID      = 0x01,\n+            FE_DIVBYZERO    = 0x04,\n+            FE_OVERFLOW     = 0x08,\n+            FE_UNDERFLOW    = 0x10,\n+            FE_INEXACT      = 0x20,\n+            FE_ALL_EXCEPT   = 0x3d,\n+        }\n+    }\n+    else\n+    {\n+        static assert(0, \"Unimplemented architecture\");\n+    }\n+}\n else\n {\n     version (X86)"}, {"sha": "99bd0b3475b227c8bd22ee1ef372e7eb674ba822", "filename": "libphobos/libdruntime/core/sys/posix/aio.d", "status": "modified", "additions": 64, "deletions": 4, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Faio.d?ref=899b398116b48b9bcc8ab00f56a01569ddd2f554", "patch": "@@ -123,15 +123,58 @@ else version (DragonFlyBSD)\n \n     version = BSD_Posix;\n }\n+else version (Solaris)\n+{\n+    struct aio_result_t\n+    {\n+        ssize_t aio_return;\n+        int aio_errno;\n+    }\n+\n+    struct aiocb\n+    {\n+        int aio_fildes;\n+        void* aio_buf;   // volatile\n+        size_t aio_nbytes;\n+        off_t aio_offset;\n+        int aio_reqprio;\n+        sigevent aio_sigevent;\n+        int aio_lio_opcode;\n+        aio_result_t aio_resultp;\n+        int aio_state;\n+        int[1] aio__pad;\n+    }\n+}\n else\n     static assert(false, \"Unsupported platform\");\n \n /* Return values of cancelation function.  */\n-enum\n+version (CRuntime_Glibc)\n {\n-    AIO_CANCELED,\n-    AIO_NOTCANCELED,\n-    AIO_ALLDONE\n+    enum\n+    {\n+        AIO_CANCELED,\n+        AIO_NOTCANCELED,\n+        AIO_ALLDONE\n+    }\n+}\n+else version (Solaris)\n+{\n+    enum\n+    {\n+        AIO_CANCELED,\n+        AIO_ALLDONE,\n+        AIO_NOTCANCELED\n+    }\n+}\n+else version (BSD_Posix)\n+{\n+    enum\n+    {\n+        AIO_CANCELED,\n+        AIO_NOTCANCELED,\n+        AIO_ALLDONE\n+    }\n }\n \n /* Operation codes for `aio_lio_opcode'.  */\n@@ -144,6 +187,15 @@ version (CRuntime_Glibc)\n         LIO_NOP\n     }\n }\n+else version (Solaris)\n+{\n+    enum\n+    {\n+        LIO_NOP,\n+        LIO_READ,\n+        LIO_WRITE,\n+    }\n+}\n else version (BSD_Posix)\n {\n     enum\n@@ -163,6 +215,14 @@ version (CRuntime_Glibc)\n         LIO_NOWAIT\n     }\n }\n+else version (Solaris)\n+{\n+    enum\n+    {\n+        LIO_NOWAIT,\n+        LIO_WAIT\n+    }\n+}\n else version (BSD_Posix)\n {\n     enum"}, {"sha": "9e7d6436e7ea3156aeec726e941515bfd19a1fdf", "filename": "libphobos/libdruntime/core/sys/posix/ucontext.d", "status": "modified", "additions": 86, "deletions": 2, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/899b398116b48b9bcc8ab00f56a01569ddd2f554/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2Fcore%2Fsys%2Fposix%2Fucontext.d?ref=899b398116b48b9bcc8ab00f56a01569ddd2f554", "patch": "@@ -989,7 +989,17 @@ else version (Solaris)\n {\n     alias uint[4] upad128_t;\n \n-    version (X86_64)\n+    version (SPARC64)\n+    {\n+        enum _NGREG = 21;\n+        alias long greg_t;\n+    }\n+    else version (SPARC)\n+    {\n+        enum _NGREG = 19;\n+        alias int greg_t;\n+    }\n+    else version (X86_64)\n     {\n         enum _NGREG = 28;\n         alias long greg_t;\n@@ -999,10 +1009,81 @@ else version (Solaris)\n         enum _NGREG = 19;\n         alias int greg_t;\n     }\n+    else\n+        static assert(0, \"unimplemented\");\n \n     alias greg_t[_NGREG] gregset_t;\n \n-    version (X86_64)\n+    version (SPARC64)\n+    {\n+        private\n+        {\n+            struct _fpq\n+            {\n+                uint *fpq_addr;\n+                uint fpq_instr;\n+            }\n+\n+            struct fq\n+            {\n+                union\n+                {\n+                    double whole;\n+                    _fpq fpq;\n+                }\n+            }\n+        }\n+\n+        struct fpregset_t\n+        {\n+            union\n+            {\n+                uint[32]   fpu_regs;\n+                double[32] fpu_dregs;\n+                real[16]   fpu_qregs;\n+            }\n+            fq    *fpu_q;\n+            ulong fpu_fsr;\n+            ubyte fpu_qcnt;\n+            ubyte fpu_q_entrysize;\n+            ubyte fpu_en;\n+        }\n+    }\n+    else version (SPARC)\n+    {\n+        private\n+        {\n+            struct _fpq\n+            {\n+                uint *fpq_addr;\n+                uint fpq_instr;\n+            }\n+\n+            struct fq\n+            {\n+                union\n+                {\n+                    double whole;\n+                    _fpq fpq;\n+                }\n+            }\n+        }\n+\n+        struct fpregset_t\n+        {\n+            union\n+            {\n+                uint[32]   fpu_regs;\n+                double[16] fpu_dregs;\n+            };\n+            fq    *fpu_q;\n+            uint  fpu_fsr;\n+            ubyte fpu_qcnt;\n+            ubyte fpu_q_entrysize;\n+            ubyte fpu_en;\n+        }\n+    }\n+    else version (X86_64)\n     {\n         union _u_st\n         {\n@@ -1063,6 +1144,9 @@ else version (Solaris)\n         u_fp_reg_set fp_reg_set;\n         }\n     }\n+    else\n+        static assert(0, \"unimplemented\");\n+\n     struct mcontext_t\n     {\n         gregset_t   gregs;"}]}