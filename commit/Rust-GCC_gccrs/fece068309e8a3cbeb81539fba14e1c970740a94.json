{"sha": "fece068309e8a3cbeb81539fba14e1c970740a94", "node_id": "C_kwDOANBUbNoAKGZlY2UwNjgzMDllOGEzY2JlYjgxNTM5ZmJhMTRlMWM5NzA3NDBhOTQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-19T16:14:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-19T16:14:04Z"}, "message": "Merge #811\n\n811: Remove implicit name hack for trait associated types r=philberty a=philberty\n\nThere is still another hack I am working through to remove before fixing the issue.\r\n\r\nAddresses: #739\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>", "tree": {"sha": "8a4a116d01cf42ff7507832321618320eed77c3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8a4a116d01cf42ff7507832321618320eed77c3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fece068309e8a3cbeb81539fba14e1c970740a94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhl81MCRBK7hj4Ov3rIwAAPfgIAAJVLC9qyg941roOOxV/YW2N\nta7EGVvlJ6xRGvt+9cJyxXBDqGiInxVauqsGrWPWL0c+nxugtC4e+xoZlAuVQsW/\np3FjH7LqFnldqSn1vM9/6yWbE/H220OkruW7FWVamO23ThxMP/9kscj16z56CL5w\n+3I4X4VQnuWXcYrrKEsNXl6xeRlQvNIlUuvpSfRQhIAL/kzoEklYDeHftdeZTBCu\nIjxKJhClemElWE7IbNleWxEjPCTRezYrHmKeRHysRneodOb1QnJOrHHma/gcupMP\nDPUiQtzaLkgJbxeWm+p9Khvl9Cz52Ycf4k9Fu6pO9s78L1rtKbvoxQzyHZeYWdI=\n=oVbQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a4a116d01cf42ff7507832321618320eed77c3e\nparent 0995184e26f81f8ba6872c3efb59f640a7fe7162\nparent 0ecb6ea16bdec84016557536939140fea686f560\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637338444 +0000\ncommitter GitHub <noreply@github.com> 1637338444 +0000\n\nMerge #811\n\n811: Remove implicit name hack for trait associated types r=philberty a=philberty\n\nThere is still another hack I am working through to remove before fixing the issue.\r\n\r\nAddresses: #739\n\nCo-authored-by: Philip Herron <philip.herron@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fece068309e8a3cbeb81539fba14e1c970740a94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fece068309e8a3cbeb81539fba14e1c970740a94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fece068309e8a3cbeb81539fba14e1c970740a94/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0995184e26f81f8ba6872c3efb59f640a7fe7162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0995184e26f81f8ba6872c3efb59f640a7fe7162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0995184e26f81f8ba6872c3efb59f640a7fe7162"}, {"sha": "0ecb6ea16bdec84016557536939140fea686f560", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ecb6ea16bdec84016557536939140fea686f560", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ecb6ea16bdec84016557536939140fea686f560"}], "stats": {"total": 39, "additions": 4, "deletions": 35}, "files": [{"sha": "f60732c6f77d13e792700e5cdca945eecda22c18", "filename": "gcc/rust/resolve/rust-ast-resolve-item.h", "status": "modified", "additions": 4, "deletions": 23, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-item.h?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -35,29 +35,14 @@ class ResolveTraitItems : public ResolverBase\n   using Rust::Resolver::ResolverBase::visit;\n \n public:\n-  static void go (AST::TraitItem *item, const CanonicalPath &self)\n+  static void go (AST::TraitItem *item)\n   {\n-    ResolveTraitItems resolver (self);\n+    ResolveTraitItems resolver;\n     item->accept_vis (resolver);\n   };\n \n   void visit (AST::TraitItemType &type) override\n   {\n-    // insert Self::type_alias for TypePath lookup\n-    auto path\n-      = self.append (ResolveTraitItemTypeToCanonicalPath::resolve (type));\n-    resolver->get_type_scope ().insert (\n-      path, type.get_node_id (), type.get_locus (), false,\n-      [&] (const CanonicalPath &, NodeId, Location locus) -> void {\n-\tRichLocation r (type.get_locus ());\n-\tr.add_range (locus);\n-\trust_error_at (r, \"redefined multiple times\");\n-      });\n-\n-    // FIXME this stops the erronious unused decls which will be fixed later on\n-    resolver->get_type_scope ().append_reference_for_def (type.get_node_id (),\n-\t\t\t\t\t\t\t  type.get_node_id ());\n-\n     for (auto &bound : type.get_type_param_bounds ())\n       ResolveTypeBound::go (bound.get (), type.get_node_id ());\n   }\n@@ -189,11 +174,7 @@ class ResolveTraitItems : public ResolverBase\n   }\n \n private:\n-  ResolveTraitItems (const CanonicalPath &self)\n-    : ResolverBase (UNKNOWN_NODEID), self (self)\n-  {}\n-\n-  const CanonicalPath &self;\n+  ResolveTraitItems () : ResolverBase (UNKNOWN_NODEID) {}\n };\n \n class ResolveItem : public ResolverBase\n@@ -649,7 +630,7 @@ class ResolveItem : public ResolverBase\n \n     for (auto &item : trait.get_trait_items ())\n       {\n-\tResolveTraitItems::go (item.get (), Self);\n+\tResolveTraitItems::go (item.get ());\n       }\n \n     resolver->get_type_scope ().pop ();"}, {"sha": "9aa00fe0d0864f084bfb31b0fef41467de1cdea9", "filename": "gcc/testsuite/rust/compile/torture/issue-808.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Fissue-808.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -1,6 +1,5 @@\n pub trait Foo {\n     type Target;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn bar(&self) -> &Self::Target;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}, {"sha": "41c82f01b6ddcd2402fce86c48bae5722ea7269c", "filename": "gcc/testsuite/rust/compile/torture/traits11.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits11.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -1,6 +1,5 @@\n trait Foo {\n     type A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn test(a: Self::A) -> Self::A {\n         a"}, {"sha": "10d9479fb0da76a8b8cfc2debc936ff100f65baa", "filename": "gcc/testsuite/rust/compile/torture/traits4.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits4.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -1,8 +1,6 @@\n trait Foo {\n     type A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n     type B;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn new(a: Self::A, b: Self::B) -> Self;\n     // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }"}, {"sha": "4a396a0ffa5dae9d5b14ee4a8c6049053fe8f0e4", "filename": "gcc/testsuite/rust/compile/torture/traits5.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits5.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -1,8 +1,6 @@\n trait Foo {\n     type A;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n     type B;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn new(a: Self::A, b: Self::B) -> Self;\n     // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }"}, {"sha": "a69c6fd14a6c1aea7307840ddb49284f5c34d2ce", "filename": "gcc/testsuite/rust/compile/torture/traits6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Ftorture%2Ftraits6.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -1,6 +1,5 @@\n trait Foo {\n     type A;\n-    // { dg-warning \"unused name .Foo::A.\" \"\" { target *-*-* } .-1 }\n \n     fn baz(a: Self::A) -> Self::A;\n     // { dg-warning \"unused name .a.\" \"\" { target *-*-* } .-1 }"}, {"sha": "997ab04f5f186ef7886a6bd16858711883e1a065", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_1.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n #[lang = \"add\"]\n pub trait Add<Rhs = Self> {\n     type Output;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}, {"sha": "8d6a0739ff0f421b2af487e3817fb98d94d67280", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_2.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n #[lang = \"add\"]\n pub trait Add<Rhs = Self> {\n     type Output;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}, {"sha": "50ff7991a30e17809805ed189ae04fd70040a007", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_3.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n #[lang = \"add\"]\n pub trait Add<Rhs = Self> {\n     type Output;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn add(self, rhs: Rhs) -> Self::Output;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}, {"sha": "5ca5c7aec50254d084df3114dd45547cd9b495cb", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_4.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n #[lang = \"neg\"]\n pub trait Neg {\n     type Output;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn neg(self) -> Self::Output;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}, {"sha": "5aac3ad0589a902f83abe64212799f2ee43bceb4", "filename": "gcc/testsuite/rust/execute/torture/operator_overload_5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fece068309e8a3cbeb81539fba14e1c970740a94/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Foperator_overload_5.rs?ref=fece068309e8a3cbeb81539fba14e1c970740a94", "patch": "@@ -6,7 +6,6 @@ extern \"C\" {\n #[lang = \"not\"]\n pub trait Not {\n     type Output;\n-    // { dg-warning \"unused name\" \"\" { target *-*-* } .-1 }\n \n     fn not(self) -> Self::Output;\n     // { dg-warning \"unused name .self.\" \"\" { target *-*-* } .-1 }"}]}