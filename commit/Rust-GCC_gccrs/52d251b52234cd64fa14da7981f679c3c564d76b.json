{"sha": "52d251b52234cd64fa14da7981f679c3c564d76b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJkMjUxYjUyMjM0Y2Q2NGZhMTRkYTc5ODFmNjc5YzNjNTY0ZDc2Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-22T18:47:27Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-22T18:47:27Z"}, "message": "get_ebb_head_tail works with rtx_insn\n\ngcc/\n\t* sched-int.h (get_ebb_head_tail): Strengthen params \"headp\" and\n\t\"tailp\" from rtx * to rtx_insn **.\n\n\t* ddg.c (build_intra_loop_deps): Strengthen locals head\", \"tail\"\n\tfrom rtx to rtx_insn *.\n\t* haifa-sched.c (get_ebb_head_tail): Strengthen params \"headp\" and\n\t\"tailp\" from rtx * to rtx_insn **.  Strengthen locals \"beg_head\",\n\t\"beg_tail\", \"end_head\", \"end_tail\", \"note\", \"next\", \"prev\" from\n\trtx to rtx_insn *.\n\t* modulo-sched.c (const_iteration_count): Strengthen return type\n\tand locals \"insn\", \"head\", \"tail\" from rtx to rtx_insn *.  Replace\n\tuse of NULL_RTX with NULL when working with insns.\n\t(loop_single_full_bb_p): Strengthen locals \"head\", \"tail\" from rtx\n\tto rtx_insn *.\n\t(sms_schedule): Likewise.\n\t* sched-rgn.c (init_ready_list): Likewise, also for locals\n\t\"src_head\" and \"src_next_tail\".\n\t(compute_block_dependences): Likewise.\n\t(free_block_dependencies): Likewise.\n\t(debug_rgn_dependencies): Likewise.\n\t(free_rgn_deps): Likewise.\n\t(compute_priorities): Likewise.\n\t(schedule_region): Likewise.\n\t* sel-sched.c (find_ebb_boundaries): Likewise.\n\n\t* config/sh/sh.c (find_insn_regmode_weight): Strengthen locals\n\t\"insn\", \"next_tail\", \"head\", \"tail\" from rtx to rtx_insn *.\n\nFrom-SVN: r214352", "tree": {"sha": "3a982d58ef0dcef94cc061bf3bf424e1e88eebcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a982d58ef0dcef94cc061bf3bf424e1e88eebcb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52d251b52234cd64fa14da7981f679c3c564d76b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d251b52234cd64fa14da7981f679c3c564d76b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52d251b52234cd64fa14da7981f679c3c564d76b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52d251b52234cd64fa14da7981f679c3c564d76b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f172301ff40160dedd796d9846613e2706f7e3ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f172301ff40160dedd796d9846613e2706f7e3ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f172301ff40160dedd796d9846613e2706f7e3ea"}], "stats": {"total": 96, "additions": 64, "deletions": 32}, "files": [{"sha": "995ba931d00b079f9c5d12a5c57519b91d7fc17d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -1,3 +1,33 @@\n+2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* sched-int.h (get_ebb_head_tail): Strengthen params \"headp\" and\n+\t\"tailp\" from rtx * to rtx_insn **.\n+\n+\t* ddg.c (build_intra_loop_deps): Strengthen locals head\", \"tail\"\n+\tfrom rtx to rtx_insn *.\n+\t* haifa-sched.c (get_ebb_head_tail): Strengthen params \"headp\" and\n+\t\"tailp\" from rtx * to rtx_insn **.  Strengthen locals \"beg_head\",\n+\t\"beg_tail\", \"end_head\", \"end_tail\", \"note\", \"next\", \"prev\" from\n+\trtx to rtx_insn *.\n+\t* modulo-sched.c (const_iteration_count): Strengthen return type\n+\tand locals \"insn\", \"head\", \"tail\" from rtx to rtx_insn *.  Replace\n+\tuse of NULL_RTX with NULL when working with insns.\n+\t(loop_single_full_bb_p): Strengthen locals \"head\", \"tail\" from rtx\n+\tto rtx_insn *.\n+\t(sms_schedule): Likewise.\n+\t* sched-rgn.c (init_ready_list): Likewise, also for locals\n+\t\"src_head\" and \"src_next_tail\".\n+\t(compute_block_dependences): Likewise.\n+\t(free_block_dependencies): Likewise.\n+\t(debug_rgn_dependencies): Likewise.\n+\t(free_rgn_deps): Likewise.\n+\t(compute_priorities): Likewise.\n+\t(schedule_region): Likewise.\n+\t* sel-sched.c (find_ebb_boundaries): Likewise.\n+\n+\t* config/sh/sh.c (find_insn_regmode_weight): Strengthen locals\n+\t\"insn\", \"next_tail\", \"head\", \"tail\" from rtx to rtx_insn *.\n+\n 2014-08-22  David Malcolm  <dmalcolm@redhat.com>\n \n \t* mode-switching.c (struct seginfo): Strengthen field \"insn_ptr\""}, {"sha": "13eb714750c48b3fea29ad91b1ad7ddcd0e3108a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -11094,7 +11094,7 @@ find_insn_regmode_weight (rtx insn, enum machine_mode mode)\n static void\n find_regmode_weight (basic_block b, enum machine_mode mode)\n {\n-  rtx insn, next_tail, head, tail;\n+  rtx_insn *insn, *next_tail, *head, *tail;\n \n   get_ebb_head_tail (b, b, &head, &tail);\n   next_tail = NEXT_INSN (tail);"}, {"sha": "1971ef884f38e6b16ee0b7c46c44fd06beb8be81", "filename": "gcc/ddg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -507,7 +507,7 @@ build_intra_loop_deps (ddg_ptr g)\n   int i;\n   /* Hold the dependency analysis state during dependency calculations.  */\n   struct deps_desc tmp_deps;\n-  rtx head, tail;\n+  rtx_insn *head, *tail;\n \n   /* Build the dependence information, using the sched_analyze function.  */\n   init_deps_global ();"}, {"sha": "aa1476db8298869d909b2fc39a8778c184d59e99", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -4738,12 +4738,13 @@ resolve_dependencies (rtx insn)\n /* Return the head and tail pointers of ebb starting at BEG and ending\n    at END.  */\n void\n-get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n+get_ebb_head_tail (basic_block beg, basic_block end,\n+\t\t   rtx_insn **headp, rtx_insn **tailp)\n {\n-  rtx beg_head = BB_HEAD (beg);\n-  rtx beg_tail = BB_END (beg);\n-  rtx end_head = BB_HEAD (end);\n-  rtx end_tail = BB_END (end);\n+  rtx_insn *beg_head = BB_HEAD (beg);\n+  rtx_insn * beg_tail = BB_END (beg);\n+  rtx_insn * end_head = BB_HEAD (end);\n+  rtx_insn * end_tail = BB_END (end);\n \n   /* Don't include any notes or labels at the beginning of the BEG\n      basic block, or notes at the end of the END basic blocks.  */\n@@ -4756,7 +4757,7 @@ get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n       beg_head = NEXT_INSN (beg_head);\n     else if (DEBUG_INSN_P (beg_head))\n       {\n-\trtx note, next;\n+\trtx_insn * note, *next;\n \n \tfor (note = NEXT_INSN (beg_head);\n \t     note != beg_tail;\n@@ -4794,7 +4795,7 @@ get_ebb_head_tail (basic_block beg, basic_block end, rtx *headp, rtx *tailp)\n       end_tail = PREV_INSN (end_tail);\n     else if (DEBUG_INSN_P (end_tail))\n       {\n-\trtx note, prev;\n+\trtx_insn * note, *prev;\n \n \tfor (note = PREV_INSN (end_tail);\n \t     note != end_head;"}, {"sha": "7ac92894fa9426e811ca79781bf463ba9b0e258a", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -392,17 +392,17 @@ doloop_register_get (rtx head ATTRIBUTE_UNUSED, rtx tail ATTRIBUTE_UNUSED)\n \n /* Check if COUNT_REG is set to a constant in the PRE_HEADER block, so\n    that the number of iterations is a compile-time constant.  If so,\n-   return the rtx that sets COUNT_REG to a constant, and set COUNT to\n+   return the rtx_insn that sets COUNT_REG to a constant, and set COUNT to\n    this constant.  Otherwise return 0.  */\n-static rtx\n+static rtx_insn *\n const_iteration_count (rtx count_reg, basic_block pre_header,\n \t\t       int64_t * count)\n {\n-  rtx insn;\n-  rtx head, tail;\n+  rtx_insn *insn;\n+  rtx_insn *head, *tail;\n \n   if (! pre_header)\n-    return NULL_RTX;\n+    return NULL;\n \n   get_ebb_head_tail (pre_header, pre_header, &head, &tail);\n \n@@ -418,10 +418,10 @@ const_iteration_count (rtx count_reg, basic_block pre_header,\n \t    return insn;\n \t  }\n \n-\treturn NULL_RTX;\n+\treturn NULL;\n       }\n \n-  return NULL_RTX;\n+  return NULL;\n }\n \n /* A very simple resource-based lower bound on the initiation interval.\n@@ -1211,7 +1211,7 @@ loop_single_full_bb_p (struct loop *loop)\n \n   for (i = 0; i < loop->num_nodes ; i++)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n       bool empty_bb = true;\n \n       if (bbs[i] == loop->header)\n@@ -1398,7 +1398,7 @@ sms_schedule (void)\n      indexed by the loop index.  */\n   FOR_EACH_LOOP (loop, 0)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n       rtx count_reg;\n \n       /* For debugging.  */\n@@ -1536,7 +1536,7 @@ sms_schedule (void)\n   /* We don't want to perform SMS on new loops - created by versioning.  */\n   FOR_EACH_LOOP (loop, 0)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n       rtx count_reg, count_init;\n       int mii, rec_mii, stage_count, min_cycle;\n       int64_t loop_count = 0;"}, {"sha": "df7795d5516bb0cf0db93ac85d9b11ea59dc6fca", "filename": "gcc/sched-int.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsched-int.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsched-int.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-int.h?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -1342,7 +1342,8 @@ extern void finish_live_range_shrinkage (void);\n extern void sched_init_region_reg_pressure_info (void);\n extern void free_global_sched_pressure_data (void);\n extern int haifa_classify_insn (const_rtx);\n-extern void get_ebb_head_tail (basic_block, basic_block, rtx *, rtx *);\n+extern void get_ebb_head_tail (basic_block, basic_block,\n+\t\t\t       rtx_insn **, rtx_insn **);\n extern int no_real_insns_p (const_rtx, const_rtx);\n \n extern int insn_cost (rtx);"}, {"sha": "ee769ecce5601fc75681afe90a24001f4100091c", "filename": "gcc/sched-rgn.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsched-rgn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsched-rgn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-rgn.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -2140,9 +2140,9 @@ init_ready_list (void)\n   for (bb_src = target_bb + 1; bb_src < current_nr_blocks; bb_src++)\n     if (IS_VALID (bb_src))\n       {\n-\trtx src_head;\n-\trtx src_next_tail;\n-\trtx tail, head;\n+\trtx_insn *src_head;\n+\trtx_insn *src_next_tail;\n+\trtx_insn *tail, *head;\n \n \tget_ebb_head_tail (EBB_FIRST_BB (bb_src), EBB_LAST_BB (bb_src),\n \t\t\t   &head, &tail);\n@@ -2721,7 +2721,7 @@ propagate_deps (int bb, struct deps_desc *pred_deps)\n static void\n compute_block_dependences (int bb)\n {\n-  rtx head, tail;\n+  rtx_insn *head, *tail;\n   struct deps_desc tmp_deps;\n \n   tmp_deps = bb_deps[bb];\n@@ -2750,8 +2750,8 @@ compute_block_dependences (int bb)\n static void\n free_block_dependencies (int bb)\n {\n-  rtx head;\n-  rtx tail;\n+  rtx_insn *head;\n+  rtx_insn *tail;\n \n   get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n \n@@ -2793,7 +2793,7 @@ debug_rgn_dependencies (int from_bb)\n \n   for (bb = from_bb; bb < current_nr_blocks; bb++)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n \n       get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n       fprintf (sched_dump, \"\\n;;   --- Region Dependences --- b %d bb %d \\n\",\n@@ -2894,7 +2894,7 @@ free_rgn_deps (void)\n \n   for (bb = 0; bb < current_nr_blocks; bb++)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n \n       gcc_assert (EBB_FIRST_BB (bb) == EBB_LAST_BB (bb));\n       get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n@@ -2914,7 +2914,7 @@ compute_priorities (void)\n   current_sched_info->sched_max_insns_priority = 0;\n   for (bb = 0; bb < current_nr_blocks; bb++)\n     {\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n \n       gcc_assert (EBB_FIRST_BB (bb) == EBB_LAST_BB (bb));\n       get_ebb_head_tail (EBB_FIRST_BB (bb), EBB_LAST_BB (bb), &head, &tail);\n@@ -3025,7 +3025,7 @@ schedule_region (int rgn)\n       for (bb = 0; bb < current_nr_blocks; bb++)\n \t{\n \t  basic_block first_bb, last_bb;\n-\t  rtx head, tail;\n+\t  rtx_insn *head, *tail;\n \n \t  first_bb = EBB_FIRST_BB (bb);\n \t  last_bb = EBB_LAST_BB (bb);\n@@ -3045,7 +3045,7 @@ schedule_region (int rgn)\n   for (bb = 0; bb < current_nr_blocks; bb++)\n     {\n       basic_block first_bb, last_bb, curr_bb;\n-      rtx head, tail;\n+      rtx_insn *head, *tail;\n \n       first_bb = EBB_FIRST_BB (bb);\n       last_bb = EBB_LAST_BB (bb);"}, {"sha": "e4a07fd91ac098b41d2ebe7d7245572faeb26827", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52d251b52234cd64fa14da7981f679c3c564d76b/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=52d251b52234cd64fa14da7981f679c3c564d76b", "patch": "@@ -7024,7 +7024,7 @@ simplify_changed_insns (void)\n static void\n find_ebb_boundaries (basic_block bb, bitmap scheduled_blocks)\n {\n-  insn_t head, tail;\n+  rtx_insn *head, *tail;\n   basic_block bb1 = bb;\n   if (sched_verbose >= 2)\n     sel_print (\"Finishing schedule in bbs: \");"}]}