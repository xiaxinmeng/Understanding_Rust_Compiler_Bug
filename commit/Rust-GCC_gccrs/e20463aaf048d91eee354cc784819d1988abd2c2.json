{"sha": "e20463aaf048d91eee354cc784819d1988abd2c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIwNDYzYWFmMDQ4ZDkxZWVlMzU0Y2M3ODQ4MTlkMTk4OGFiZDJjMg==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-05-24T17:17:57Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-05-24T17:17:57Z"}, "message": "rtti.c (tinfo_base_init): Use build_constructor instead of build_constructor_from_list.\n\n\t* rtti.c (tinfo_base_init): Use build_constructor instead of\n\tbuild_constructor_from_list.  Don't cons a tree node for\n\treturning.\n\t(generic_initializer): Use build_constructor_single instead of\n\tbuild_constructor_from_list.\n\t(ptr_initializer): Use build_constructor instead of\n\tbuild_constructor_from_list\n\t(ptm_initializer): Likewise.\n\t(class_initializer): Likewise.  Take varargs instead of TRAIL.\n\t(get_pseudo_ti_init): Adjust calls to class_initializer.  Use\n\tbuild_constructor instead of build_constructor_from_list.\n\nFrom-SVN: r159788", "tree": {"sha": "d0d9de11c4a124fdac67d5d3907c54f4353cb6cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0d9de11c4a124fdac67d5d3907c54f4353cb6cd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e20463aaf048d91eee354cc784819d1988abd2c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20463aaf048d91eee354cc784819d1988abd2c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e20463aaf048d91eee354cc784819d1988abd2c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e20463aaf048d91eee354cc784819d1988abd2c2/comments", "author": null, "committer": null, "parents": [{"sha": "42f40af46917beb9a16f2c18b4241f08e4d1ea5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42f40af46917beb9a16f2c18b4241f08e4d1ea5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42f40af46917beb9a16f2c18b4241f08e4d1ea5a"}], "stats": {"total": 112, "additions": 67, "deletions": 45}, "files": [{"sha": "b0454e67070850e06e24d1ea90704e9181ef8ecc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20463aaf048d91eee354cc784819d1988abd2c2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20463aaf048d91eee354cc784819d1988abd2c2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e20463aaf048d91eee354cc784819d1988abd2c2", "patch": "@@ -1,3 +1,17 @@\n+2010-05-24  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* rtti.c (tinfo_base_init): Use build_constructor instead of\n+\tbuild_constructor_from_list.  Don't cons a tree node for\n+\treturning.\n+\t(generic_initializer): Use build_constructor_single instead of\n+\tbuild_constructor_from_list.\n+\t(ptr_initializer): Use build_constructor instead of\n+\tbuild_constructor_from_list\n+\t(ptm_initializer): Likewise.\n+\t(class_initializer): Likewise.  Take varargs instead of TRAIL.\n+\t(get_pseudo_ti_init): Adjust calls to class_initializer.  Use\n+\tbuild_constructor instead of build_constructor_from_list.\n+\n 2010-05-22  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* semantics.c: Include bitmap.h."}, {"sha": "3ffd097946a217bffdd0c567ff96f9e9a6459f79", "filename": "gcc/cp/rtti.c", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e20463aaf048d91eee354cc784819d1988abd2c2/gcc%2Fcp%2Frtti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e20463aaf048d91eee354cc784819d1988abd2c2/gcc%2Fcp%2Frtti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Frtti.c?ref=e20463aaf048d91eee354cc784819d1988abd2c2", "patch": "@@ -116,7 +116,7 @@ static tree tinfo_base_init (tinfo_s *, tree);\n static tree generic_initializer (tinfo_s *, tree);\n static tree ptr_initializer (tinfo_s *, tree);\n static tree ptm_initializer (tinfo_s *, tree);\n-static tree class_initializer (tinfo_s *, tree, tree);\n+static tree class_initializer (tinfo_s *, tree, unsigned, ...);\n static void create_pseudo_type_info (int, const char *, ...);\n static tree get_pseudo_ti_init (tree, unsigned);\n static unsigned get_pseudo_ti_index (tree);\n@@ -862,9 +862,10 @@ involves_incomplete_p (tree type)\n static tree\n tinfo_base_init (tinfo_s *ti, tree target)\n {\n-  tree init = NULL_TREE;\n+  tree init;\n   tree name_decl;\n   tree vtable_ptr;\n+  VEC(constructor_elt,gc) *v;\n \n   {\n     tree name_name, name_string;\n@@ -927,14 +928,13 @@ tinfo_base_init (tinfo_s *ti, tree target)\n       ti->vtable = vtable_ptr;\n     }\n \n-  init = tree_cons (NULL_TREE, vtable_ptr, init);\n+  v = VEC_alloc (constructor_elt, gc, 2);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, vtable_ptr);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, decay_conversion (name_decl));\n \n-  init = tree_cons (NULL_TREE, decay_conversion (name_decl), init);\n-\n-  init = build_constructor_from_list (init_list_type_node, nreverse (init));\n+  init = build_constructor (init_list_type_node, v);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n-  init = tree_cons (NULL_TREE, init, NULL_TREE);\n \n   return init;\n }\n@@ -948,7 +948,7 @@ generic_initializer (tinfo_s *ti, tree target)\n {\n   tree init = tinfo_base_init (ti, target);\n \n-  init = build_constructor_from_list (init_list_type_node, init);\n+  init = build_constructor_single (init_list_type_node, NULL_TREE, init);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n@@ -965,15 +965,16 @@ ptr_initializer (tinfo_s *ti, tree target)\n   tree to = TREE_TYPE (target);\n   int flags = qualifier_flags (to);\n   bool incomplete = target_incomplete_p (to);\n+  VEC(constructor_elt,gc) *v = VEC_alloc (constructor_elt, gc, 3);\n \n   if (incomplete)\n     flags |= 8;\n-  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags), init);\n-  init = tree_cons (NULL_TREE,\n-\t\t    get_tinfo_ptr (TYPE_MAIN_VARIANT (to)),\n-\t\t    init);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, flags));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                          get_tinfo_ptr (TYPE_MAIN_VARIANT (to)));\n \n-  init = build_constructor_from_list (init_list_type_node, nreverse (init));\n+  init = build_constructor (init_list_type_node, v);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n@@ -992,36 +993,43 @@ ptm_initializer (tinfo_s *ti, tree target)\n   tree klass = TYPE_PTRMEM_CLASS_TYPE (target);\n   int flags = qualifier_flags (to);\n   bool incomplete = target_incomplete_p (to);\n+  VEC(constructor_elt,gc) *v = VEC_alloc (constructor_elt, gc, 4);\n \n   if (incomplete)\n     flags |= 0x8;\n   if (!COMPLETE_TYPE_P (klass))\n     flags |= 0x10;\n-  init = tree_cons (NULL_TREE, build_int_cst (NULL_TREE, flags), init);\n-  init = tree_cons (NULL_TREE,\n-\t\t    get_tinfo_ptr (TYPE_MAIN_VARIANT (to)),\n-\t\t    init);\n-  init = tree_cons (NULL_TREE,\n-\t\t    get_tinfo_ptr (klass),\n-\t\t    init);\n-\n-  init = build_constructor_from_list (init_list_type_node, nreverse (init));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, build_int_cst (NULL_TREE, flags));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE,\n+                          get_tinfo_ptr (TYPE_MAIN_VARIANT (to)));\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, get_tinfo_ptr (klass));\n+\n+  init = build_constructor (init_list_type_node, v);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n }\n \n /* Return the CONSTRUCTOR expr for a type_info of class TYPE.\n    TI provides information about the particular __class_type_info derivation,\n-   which adds hint flags and TRAIL initializers to the type_info base.  */\n+   which adds hint flags and N extra initializers to the type_info base.  */\n \n static tree\n-class_initializer (tinfo_s *ti, tree target, tree trail)\n+class_initializer (tinfo_s *ti, tree target, unsigned n, ...)\n {\n   tree init = tinfo_base_init (ti, target);\n+  va_list extra_inits;\n+  unsigned i;\n+  VEC(constructor_elt,gc) *v = VEC_alloc (constructor_elt, gc, n+1);\n+\n+  CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, init);\n+  va_start (extra_inits, n);\n+  for (i = 0; i < n; i++)\n+    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, va_arg (extra_inits, tree));\n+  va_end (extra_inits);\n \n-  TREE_CHAIN (init) = trail;\n-  init = build_constructor_from_list (init_list_type_node, init);\n+  init = build_constructor (init_list_type_node, v);\n   TREE_CONSTANT (init) = 1;\n   TREE_STATIC (init) = 1;\n   return init;\n@@ -1082,17 +1090,16 @@ get_pseudo_ti_init (tree type, unsigned tk_index)\n       return generic_initializer (ti, type);\n \n     case TK_CLASS_TYPE:\n-      return class_initializer (ti, type, NULL_TREE);\n+      return class_initializer (ti, type, 0);\n \n     case TK_SI_CLASS_TYPE:\n       {\n \ttree base_binfo = BINFO_BASE_BINFO (TYPE_BINFO (type), 0);\n \ttree tinfo = get_tinfo_ptr (BINFO_TYPE (base_binfo));\n-\ttree base_inits = tree_cons (NULL_TREE, tinfo, NULL_TREE);\n \n \t/* get_tinfo_ptr might have reallocated the tinfo_descs vector.  */\n \tti = VEC_index (tinfo_s, tinfo_descs, tk_index);\n-\treturn class_initializer (ti, type, base_inits);\n+\treturn class_initializer (ti, type, 1, tinfo);\n       }\n \n     default:\n@@ -1105,17 +1112,21 @@ get_pseudo_ti_init (tree type, unsigned tk_index)\n \ttree offset_type = integer_types[itk_long];\n \ttree base_inits = NULL_TREE;\n \tint ix;\n+\tVEC(constructor_elt,gc) *init_vec = NULL;\n+\tconstructor_elt *e;\n \n \tgcc_assert (tk_index >= TK_FIXED);\n \n+\tVEC_safe_grow (constructor_elt, gc, init_vec, nbases);\n \t/* Generate the base information initializer.  */\n \tfor (ix = nbases; ix--;)\n \t  {\n \t    tree base_binfo = BINFO_BASE_BINFO (binfo, ix);\n-\t    tree base_init = NULL_TREE;\n+\t    tree base_init;\n \t    int flags = 0;\n \t    tree tinfo;\n \t    tree offset;\n+\t    VEC(constructor_elt,gc) *v;\n \n \t    if (VEC_index (tree, base_accesses, ix) == access_public_node)\n \t      flags |= 2;\n@@ -1138,25 +1149,22 @@ get_pseudo_ti_init (tree type, unsigned tk_index)\n \t    offset = fold_build2_loc (input_location,\n \t\t\t\t  BIT_IOR_EXPR, offset_type, offset,\n \t\t\t\t  build_int_cst (offset_type, flags));\n-\t    base_init = tree_cons (NULL_TREE, offset, base_init);\n-\t    base_init = tree_cons (NULL_TREE, tinfo, base_init);\n-\t    base_init = build_constructor_from_list (init_list_type_node, base_init);\n-\t    base_inits = tree_cons (NULL_TREE, base_init, base_inits);\n+\t    v = VEC_alloc (constructor_elt, gc, 2);\n+\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, tinfo);\n+\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, offset);\n+\t    base_init = build_constructor (init_list_type_node, v);\n+\t    e = VEC_index (constructor_elt, init_vec, ix);\n+\t    e->index = NULL_TREE;\n+\t    e->value = base_init;\n \t  }\n-\tbase_inits = build_constructor_from_list (init_list_type_node, base_inits);\n-\tbase_inits = tree_cons (NULL_TREE, base_inits, NULL_TREE);\n-\t/* Prepend the number of bases.  */\n-\tbase_inits = tree_cons (NULL_TREE,\n-\t\t\t\tbuild_int_cst (NULL_TREE, nbases),\n-\t\t\t\tbase_inits);\n-\t/* Prepend the hint flags.  */\n-\tbase_inits = tree_cons (NULL_TREE,\n-\t\t\t\tbuild_int_cst (NULL_TREE, hint),\n-\t\t\t\tbase_inits);\n+\tbase_inits = build_constructor (init_list_type_node, init_vec);\n \n \t/* get_tinfo_ptr might have reallocated the tinfo_descs vector.  */\n \tti = VEC_index (tinfo_s, tinfo_descs, tk_index);\n-\treturn class_initializer (ti, type, base_inits);\n+\treturn class_initializer (ti, type, 3,\n+\t\t\t\t  build_int_cst (NULL_TREE, hint),\n+\t\t\t\t  build_int_cst (NULL_TREE, nbases),\n+\t\t\t\t  base_inits);\n       }\n     }\n }"}]}