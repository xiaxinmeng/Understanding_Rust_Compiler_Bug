{"sha": "e922b256906a07da5571ed0258c4ee57a4b1859c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkyMmIyNTY5MDZhMDdkYTU1NzFlZDAyNThjNGVlNTdhNGIxODU5Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-11-09T20:02:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-11-09T20:02:56Z"}, "message": "Fix C++17 template placeholder for template template parm.\n\n\t* parser.c (cp_parser_simple_type_specifier): Allow placeholder\n\tfor template template parameter.\n\t(cp_parser_type_id_1): Improve diagnostic.\n\t* decl.c (grokdeclarator): Handle class deduction diagnostics here.\n\t* pt.c (splice_late_return_type): Not here.\n\t(tsubst) [TEMPLATE_TYPE_PARM]: Substitute into placeholder template.\n\t(do_class_deduction): Handle non-class templates.\n\nFrom-SVN: r242018", "tree": {"sha": "d5c30a428ac35d79bca820d0fbd2ad2ad9806fef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5c30a428ac35d79bca820d0fbd2ad2ad9806fef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e922b256906a07da5571ed0258c4ee57a4b1859c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e922b256906a07da5571ed0258c4ee57a4b1859c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e922b256906a07da5571ed0258c4ee57a4b1859c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e922b256906a07da5571ed0258c4ee57a4b1859c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4a826ca6feb3c7ec3ef6287214a3f2820222c97e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a826ca6feb3c7ec3ef6287214a3f2820222c97e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a826ca6feb3c7ec3ef6287214a3f2820222c97e"}], "stats": {"total": 206, "additions": 151, "deletions": 55}, "files": [{"sha": "2e3b15d55795a72121fbeaa8f792caa831a809b8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -1,5 +1,13 @@\n 2016-11-09  Jason Merrill  <jason@redhat.com>\n \n+\t* parser.c (cp_parser_simple_type_specifier): Allow placeholder\n+\tfor template template parameter.\n+\t(cp_parser_type_id_1): Improve diagnostic.\n+\t* decl.c (grokdeclarator): Handle class deduction diagnostics here.\n+\t* pt.c (splice_late_return_type): Not here.\n+\t(tsubst) [TEMPLATE_TYPE_PARM]: Substitute into placeholder template.\n+\t(do_class_deduction): Handle non-class templates.\n+\n \tImplement P0127R2, Declaring non-type parameters with auto.\n \t* cp-tree.h (enum auto_deduction_context): Add adc_unify.\n \t* decl.c (grokdeclarator): Allow 'auto' in C++17 template non-type"}, {"sha": "4b18d4ea761e312e4ac1fd7147909ea417523e55", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 46, "deletions": 12, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -9490,6 +9490,11 @@ grokdeclarator (const cp_declarator *declarator,\n   if (initialized > 1)\n     funcdef_flag = true;\n \n+  location_t typespec_loc = smallest_type_quals_location (type_quals,\n+\t\t\t\t\t\t      declspecs->locations);\n+  if (typespec_loc == UNKNOWN_LOCATION)\n+    typespec_loc = declspecs->locations[ds_type_spec];\n+\n   /* Look inside a declarator for the name being declared\n      and get it as a string, for an error message.  */\n   for (id_declarator = declarator;\n@@ -10011,6 +10016,16 @@ grokdeclarator (const cp_declarator *declarator,\n   /* We might have ignored or rejected some of the qualifiers.  */\n   type_quals = cp_type_quals (type);\n \n+  if (cxx_dialect >= cxx1z && type && is_auto (type)\n+      && innermost_code != cdk_function\n+      && id_declarator && declarator != id_declarator)\n+    if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (type))\n+    {\n+      error_at (typespec_loc, \"template placeholder type %qT must be followed \"\n+\t\t\"by a simple declarator-id\", type);\n+      inform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\", tmpl);\n+    }\n+\n   staticp = 0;\n   inlinep = decl_spec_seq_has_spec_p (declspecs, ds_inline);\n   virtualp =  decl_spec_seq_has_spec_p (declspecs, ds_virtual);\n@@ -10247,12 +10262,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\tif (SCALAR_TYPE_P (type) || VOID_TYPE_P (type))\n \t\t  {\n-\t\t    location_t loc;\n-\t\t    loc = smallest_type_quals_location (type_quals,\n-\t\t\t\t\t\t\tdeclspecs->locations);\n-\t\t    if (loc == UNKNOWN_LOCATION)\n-\t\t      loc = declspecs->locations[ds_type_spec];\n-\t\t    warning_at (loc, OPT_Wignored_qualifiers, \"type \"\n+\t\t    warning_at (typespec_loc, OPT_Wignored_qualifiers, \"type \"\n \t\t\t\t\"qualifiers ignored on function return type\");\n \t\t  }\n \t\t/* We now know that the TYPE_QUALS don't apply to the\n@@ -10301,11 +10311,12 @@ grokdeclarator (const cp_declarator *declarator,\n \t    funcdecl_p = inner_declarator && inner_declarator->kind == cdk_id;\n \n \t    /* Handle a late-specified return type.  */\n+\t    tree late_return_type = declarator->u.function.late_return_type;\n \t    if (funcdecl_p)\n \t      {\n-\t\tif (type_uses_auto (type))\n+\t\tif (tree auto_node = type_uses_auto (type))\n \t\t  {\n-\t\t    if (!declarator->u.function.late_return_type)\n+\t\t    if (!late_return_type)\n \t\t      {\n \t\t\tif (current_class_type\n \t\t\t    && LAMBDA_TYPE_P (current_class_type))\n@@ -10333,8 +10344,32 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       name, type);\n \t\t\treturn error_mark_node;\n \t\t      }\n+\t\t    if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+\t\t      {\n+\t\t\tif (!late_return_type)\n+\t\t\t  {\n+\t\t\t    if (dguide_name_p (unqualified_id))\n+\t\t\t      error_at (typespec_loc, \"deduction guide for \"\n+\t\t\t\t\t\"%qT must have trailing return type\",\n+\t\t\t\t\tTREE_TYPE (tmpl));\n+\t\t\t    else\n+\t\t\t      error_at (typespec_loc, \"deduced class type %qT \"\n+\t\t\t\t\t\"in function return type\", type);\n+\t\t\t    inform (DECL_SOURCE_LOCATION (tmpl),\n+\t\t\t\t    \"%qD declared here\", tmpl);\n+\t\t\t  }\n+\t\t\telse if (CLASS_TYPE_P (late_return_type)\n+\t\t\t\t && CLASSTYPE_TEMPLATE_INFO (late_return_type)\n+\t\t\t\t && (CLASSTYPE_TI_TEMPLATE (late_return_type)\n+\t\t\t\t     == tmpl))\n+\t\t\t  /* OK */;\n+\t\t\telse\n+\t\t\t  error (\"trailing return type %qT of deduction guide \"\n+\t\t\t\t \"is not a specialization of %qT\",\n+\t\t\t\t late_return_type, TREE_TYPE (tmpl));\n+\t\t      }\n \t\t  }\n-\t\telse if (declarator->u.function.late_return_type\n+\t\telse if (late_return_type\n \t\t\t && sfk != sfk_conversion)\n \t\t  {\n \t\t    if (cxx_dialect < cxx11)\n@@ -10348,12 +10383,11 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t    return error_mark_node;\n \t\t  }\n \t      }\n-\t    type = splice_late_return_type\n-\t      (type, declarator->u.function.late_return_type);\n+\t    type = splice_late_return_type (type, late_return_type);\n \t    if (type == error_mark_node)\n \t      return error_mark_node;\n \n-\t    if (declarator->u.function.late_return_type)\n+\t    if (late_return_type)\n \t      late_return_type_p = true;\n \n \t    if (ctype == NULL_TREE"}, {"sha": "7b95dba72f2150c6e50d934be0a2eefde015d191", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -16596,7 +16596,8 @@ cp_parser_simple_type_specifier (cp_parser* parser,\n \t\t\t\t\t\t /*ambiguous_decls=*/NULL,\n \t\t\t\t\t\t token->location);\n \t      if (tmpl && tmpl != error_mark_node\n-\t\t  && DECL_CLASS_TEMPLATE_P (tmpl))\n+\t\t  && (DECL_CLASS_TEMPLATE_P (tmpl)\n+\t\t      || DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl)))\n \t\ttype = make_template_placeholder (tmpl);\n \t      else\n \t\t{\n@@ -20311,26 +20312,35 @@ cp_parser_type_id_1 (cp_parser* parser, bool is_template_arg,\n       && (!flag_concepts || parser->in_type_id_in_expr_p)\n       /* None of the valid uses of 'auto' in C++14 involve the type-id\n \t nonterminal, but it is valid in a trailing-return-type.  */\n-      && !(cxx_dialect >= cxx14 && is_trailing_return)\n-      && type_uses_auto (type_specifier_seq.type))\n-    {\n-      /* A type-id with type 'auto' is only ok if the abstract declarator\n-\t is a function declarator with a late-specified return type.\n-\n-         A type-id with 'auto' is also valid in a trailing-return-type\n-         in a compound-requirement. */\n-      if (abstract_declarator\n-\t  && abstract_declarator->kind == cdk_function\n-\t  && abstract_declarator->u.function.late_return_type)\n-\t/* OK */;\n-      else if (parser->in_result_type_constraint_p)\n-        /* OK */;\n-      else\n-\t{\n-\t  error (\"invalid use of %<auto%>\");\n-\t  return error_mark_node;\n-\t}\n-    }\n+      && !(cxx_dialect >= cxx14 && is_trailing_return))\n+    if (tree auto_node = type_uses_auto (type_specifier_seq.type))\n+      {\n+\t/* A type-id with type 'auto' is only ok if the abstract declarator\n+\t   is a function declarator with a late-specified return type.\n+\n+\t   A type-id with 'auto' is also valid in a trailing-return-type\n+\t   in a compound-requirement. */\n+\tif (abstract_declarator\n+\t    && abstract_declarator->kind == cdk_function\n+\t    && abstract_declarator->u.function.late_return_type)\n+\t  /* OK */;\n+\telse if (parser->in_result_type_constraint_p)\n+\t  /* OK */;\n+\telse\n+\t  {\n+\t    location_t loc = type_specifier_seq.locations[ds_type_spec];\n+\t    if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n+\t      {\n+\t\terror_at (loc, \"missing template arguments after %qT\",\n+\t\t\t  auto_node);\n+\t\tinform (DECL_SOURCE_LOCATION (tmpl), \"%qD declared here\",\n+\t\t\ttmpl);\n+\t      }\n+\t    else\n+\t      error_at (loc, \"invalid use of %qT\", auto_node);\n+\t    return error_mark_node;\n+\t  }\n+      }\n   \n   return groktypename (&type_specifier_seq, abstract_declarator,\n \t\t       is_template_arg);"}, {"sha": "e8b6afd13abcf78061fee86a7632ddddcbc0f867", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -13314,7 +13314,11 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t      PLACEHOLDER_TYPE_CONSTRAINTS (r)\n \t\t\t= tsubst_constraint (constr, args, complain, in_decl);\n \t\t    else if (tree pl = CLASS_PLACEHOLDER_TEMPLATE (t))\n-\t\t      CLASS_PLACEHOLDER_TEMPLATE (r) = pl;\n+\t\t      {\n+\t\t\tif (DECL_TEMPLATE_TEMPLATE_PARM_P (pl))\n+\t\t\t  pl = tsubst (pl, args, complain, in_decl);\n+\t\t\tCLASS_PLACEHOLDER_TEMPLATE (r) = pl;\n+\t\t      }\n \t\t  }\n \n \t\tif (TREE_CODE (r) == TEMPLATE_TEMPLATE_PARM)\n@@ -24625,13 +24629,23 @@ build_deduction_guide (tree ctor, tree outer_args, tsubst_flags_t complain)\n   return ded_tmpl;\n }\n \n-/* Deduce template arguments for the class template TMPL based on the\n-   initializer INIT, and return the resulting type.  */\n+/* Deduce template arguments for the class template placeholder PTYPE for\n+   template TMPL based on the initializer INIT, and return the resulting\n+   type.  */\n \n tree\n-do_class_deduction (tree tmpl, tree init, tsubst_flags_t complain)\n+do_class_deduction (tree ptype, tree tmpl, tree init, tsubst_flags_t complain)\n {\n-  gcc_assert (DECL_CLASS_TEMPLATE_P (tmpl));\n+  if (!DECL_CLASS_TEMPLATE_P (tmpl))\n+    {\n+      /* We should have handled this in the caller.  */\n+      if (DECL_TEMPLATE_TEMPLATE_PARM_P (tmpl))\n+\treturn ptype;\n+      if (complain & tf_error)\n+\terror (\"non-class template %qT used without template arguments\", tmpl);\n+      return error_mark_node;\n+    }\n+\n   tree type = TREE_TYPE (tmpl);\n \n   vec<tree,va_gc> *args;\n@@ -24733,7 +24747,7 @@ do_auto_deduction (tree type, tree init, tree auto_node,\n \n   if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (auto_node))\n     /* C++17 class template argument deduction.  */\n-    return do_class_deduction (tmpl, init, complain);\n+    return do_class_deduction (type, tmpl, init, complain);\n \n   /* [dcl.spec.auto]: Obtain P from T by replacing the occurrences of auto\n      with either a new invented type template parameter U or, if the\n@@ -24881,20 +24895,6 @@ splice_late_return_type (tree type, tree late_return_type)\n {\n   if (is_auto (type))\n     {\n-      if (tree tmpl = CLASS_PLACEHOLDER_TEMPLATE (type))\n-\t{\n-\t  if (!late_return_type)\n-\t    error (\"deduction guide must have trailing return type\");\n-\t  else if (CLASS_TYPE_P (late_return_type)\n-\t\t   && CLASSTYPE_TEMPLATE_INFO (late_return_type)\n-\t\t   && CLASSTYPE_TI_TEMPLATE (late_return_type) == tmpl)\n-\t    /* OK */;\n-\t  else\n-\t    error (\"trailing return type %qT of deduction guide is not \"\n-\t\t   \"a specialization of %qT\",\n-\t\t   late_return_type, TREE_TYPE (tmpl));\n-\t}\n-\n       if (late_return_type)\n \treturn late_return_type;\n "}, {"sha": "87b4b3575ddc6c4b3e39d0592b594c7984b8813e", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic-ex1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic-ex1.C?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -1,4 +1,4 @@\n // { dg-do compile { target c++11 } }\n template<typename ... Elements> class Tuple;\n Tuple<>* t; // OK: Elements is empty\n-Tuple* u; // { dg-error \"template-name\" }\n+Tuple* u; // { dg-error \"\" }"}, {"sha": "5eebef7cbafefbd05a89c3f5c6003b263f60c7af", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction21.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction21.C?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -0,0 +1,13 @@\n+// { dg-options -std=c++1z }\n+\n+template<class T, class D = int>\n+struct S { T t; };\n+template<class U>\n+S(U) -> S<typename U::type>;\n+\n+struct A {\n+  using type = short;\n+  operator type();\n+};\n+S s{A()};\t\t\t// OK\n+S x(A());\t\t\t// { dg-error \"return type\" }"}, {"sha": "b15b0c4ad95494e684cd38d8f4d3b2b493ee6bb5", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction22.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction22.C?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options -std=c++1z }\n+\n+template <template <class> class T>\n+void f()\n+{\n+  T t = 42;\t\t\t// { dg-error \"B\" }\n+};\n+\n+template <class T>\n+struct A\n+{\n+  A(T);\n+};\n+\n+template <class T> using B = T;\n+\n+int main()\n+{\n+  f<A>();\n+  f<B>();\t\t\t// { dg-message \"here\" }\n+}"}, {"sha": "26795b17bf0e7ba75ea47b32934cd4c64a5b0b24", "filename": "gcc/testsuite/g++.dg/cpp1z/class-deduction23.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fclass-deduction23.C?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -0,0 +1,10 @@\n+// { dg-options -std=c++1z }\n+\n+template <class T>\n+struct A\n+{\n+  A(T);\n+};\n+\n+A a = 42;\n+A *ap = &a;\t\t\t// { dg-error \"placeholder\" }"}, {"sha": "62a6400679888f703e2e9a9640b2dcbbd42a3cf0", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e922b256906a07da5571ed0258c4ee57a4b1859c/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp10.C?ref=e922b256906a07da5571ed0258c4ee57a4b1859c", "patch": "@@ -20,7 +20,7 @@ template<template<class> class D,class E> class C\n \n template<template<class> class D,class E> int C<D,E>::f()\n {\n-\treturn d.f();\t\t\t// { dg-error \"\" } d not properly declared\n+\treturn d.f();\t\t\t// { dg-prune-output \"was not declared\" }\n }\n \n int main()"}]}