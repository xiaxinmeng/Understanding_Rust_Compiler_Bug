{"sha": "f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY2ZDQ2ZWNjYWM2YmM3MTEyOTE5OGQ4YzZjNGU5N2E5MzYzZDZkOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:21:57Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-15T12:21:57Z"}, "message": "[multiple changes]\n\n2009-04-15  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Unchecked_Conversions): Store source location instead\n\tof node for location for warning messages.\n\n\t* gnatchop.adb: Minor reformatting\n\n2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch6.adb: additional guard for renaming declarations for in\n\tparameters of an array type.\n\nFrom-SVN: r146105", "tree": {"sha": "bc21ed8261de190b0407a146cf0563ccdeb9263b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc21ed8261de190b0407a146cf0563ccdeb9263b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/comments", "author": null, "committer": null, "parents": [{"sha": "bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bafc9e1d9844e54d24656a2da4de4aabcb1d2f47"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "e988b3cf7c3c2e821dba693de234f2c8da0fe178", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "patch": "@@ -1,3 +1,15 @@\n+2009-04-15  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Unchecked_Conversions): Store source location instead\n+\tof node for location for warning messages.\n+\n+\t* gnatchop.adb: Minor reformatting\n+\n+2009-04-15  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch6.adb: additional guard for renaming declarations for in\n+\tparameters of an array type.\n+\n 2009-04-15  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_eval.adb (Get_Static_Length): Go to origin node for array bounds"}, {"sha": "6a869deb2b1b7ba540b2aa9f6996ad5d53389153", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "patch": "@@ -3806,6 +3806,7 @@ package body Exp_Ch6 is\n               and then not Is_Tagged_Type  (Etype (A))\n               and then\n                (not Is_Array_Type (Etype (A))\n+                 or else not Is_Object_Reference (A)\n                  or else Is_Bit_Packed_Array (Etype (A)))\n             then\n                Decl :="}, {"sha": "9c78975fb5b6d6f4fff952c3cfaa1d687b081c4f", "filename": "gcc/ada/gnatchop.adb", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fgnatchop.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fgnatchop.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatchop.adb?ref=f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "patch": "@@ -303,7 +303,7 @@ procedure Gnatchop is\n \n    function Get_Config_Pragmas\n      (Input : File_Num;\n-      U     : Unit_Num) return  String_Access;\n+      U     : Unit_Num) return String_Access;\n    --  Call to read configuration pragmas from given unit entry, and\n    --  return a buffer containing the pragmas to be appended to\n    --  following units. Input is the file number for the chop file and\n@@ -419,8 +419,7 @@ procedure Gnatchop is\n \n    function Get_Config_Pragmas\n      (Input : File_Num;\n-      U     : Unit_Num)\n-      return  String_Access\n+      U     : Unit_Num) return String_Access\n    is\n       Info    : Unit_Info renames Unit.Table (U);\n       FD      : File_Descriptor;\n@@ -464,8 +463,7 @@ procedure Gnatchop is\n \n    function Get_EOL\n      (Source : not null access String;\n-      Start  : Positive)\n-      return   EOL_String\n+      Start  : Positive) return EOL_String\n    is\n       Ptr   : Positive := Start;\n       First : Positive;\n@@ -1643,12 +1641,10 @@ procedure Gnatchop is\n       W_Name   : aliased constant Wide_String := To_Wide_String (Name);\n       EOL      : constant EOL_String :=\n                    Get_EOL (Source, Source'First + Info.Offset);\n-\n       OS_Name  : aliased String (1 .. Name'Length * 2);\n       O_Length : aliased Natural := OS_Name'Length;\n       Encoding : aliased String (1 .. 64);\n       E_Length : aliased Natural := Encoding'Length;\n-\n       Length   : File_Offset;\n \n    begin"}, {"sha": "bed8070f2668c174eb7013c639144275d1325553", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66d46eccac6bc71129198d8c6c4e97a9363d6d9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=f66d46eccac6bc71129198d8c6c4e97a9363d6d9", "patch": "@@ -121,10 +121,14 @@ package body Sem_Ch13 is\n    --  processing is to take advantage of back-annotations of size and\n    --  alignment values performed by the back end.\n \n+   --  Note: the reason we store a Source_Ptr value instead of a Node_Id\n+   --  is that by the time Validate_Unchecked_Conversions is called, Sprint\n+   --  will already have modified all Sloc values if the -gnatD option is set.\n+\n    type UC_Entry is record\n-      Enode  : Node_Id;   -- node used for posting warnings\n-      Source : Entity_Id; -- source type for unchecked conversion\n-      Target : Entity_Id; -- target type for unchecked conversion\n+      Eloc   : Source_Ptr; -- node used for posting warnings\n+      Source : Entity_Id;  -- source type for unchecked conversion\n+      Target : Entity_Id;  -- target type for unchecked conversion\n    end record;\n \n    package Unchecked_Conversions is new Table.Table (\n@@ -4398,7 +4402,7 @@ package body Sem_Ch13 is\n       if Warn_On_Unchecked_Conversion then\n          Unchecked_Conversions.Append\n            (New_Val => UC_Entry'\n-              (Enode  => N,\n+              (Eloc   => Sloc (N),\n                Source => Source,\n                Target => Target));\n \n@@ -4455,9 +4459,9 @@ package body Sem_Ch13 is\n          declare\n             T : UC_Entry renames Unchecked_Conversions.Table (N);\n \n-            Enode  : constant Node_Id   := T.Enode;\n-            Source : constant Entity_Id := T.Source;\n-            Target : constant Entity_Id := T.Target;\n+            Eloc   : constant Source_Ptr := T.Eloc;\n+            Source : constant Entity_Id  := T.Source;\n+            Target : constant Entity_Id  := T.Target;\n \n             Source_Siz    : Uint;\n             Target_Siz    : Uint;\n@@ -4477,64 +4481,63 @@ package body Sem_Ch13 is\n                Target_Siz := RM_Size (Target);\n \n                if Source_Siz /= Target_Siz then\n-                  Error_Msg_N\n+                  Error_Msg\n                     (\"?types for unchecked conversion have different sizes!\",\n-                     Enode);\n+                     Eloc);\n \n                   if All_Errors_Mode then\n                      Error_Msg_Name_1 := Chars (Source);\n                      Error_Msg_Uint_1 := Source_Siz;\n                      Error_Msg_Name_2 := Chars (Target);\n                      Error_Msg_Uint_2 := Target_Siz;\n-                     Error_Msg_N\n-                       (\"\\size of % is ^, size of % is ^?\", Enode);\n+                     Error_Msg (\"\\size of % is ^, size of % is ^?\", Eloc);\n \n                      Error_Msg_Uint_1 := UI_Abs (Source_Siz - Target_Siz);\n \n                      if Is_Discrete_Type (Source)\n                        and then Is_Discrete_Type (Target)\n                      then\n                         if Source_Siz > Target_Siz then\n-                           Error_Msg_N\n+                           Error_Msg\n                              (\"\\?^ high order bits of source will be ignored!\",\n-                              Enode);\n+                              Eloc);\n \n                         elsif Is_Unsigned_Type (Source) then\n-                           Error_Msg_N\n+                           Error_Msg\n                              (\"\\?source will be extended with ^ high order \" &\n-                              \"zero bits?!\", Enode);\n+                              \"zero bits?!\", Eloc);\n \n                         else\n-                           Error_Msg_N\n+                           Error_Msg\n                              (\"\\?source will be extended with ^ high order \" &\n                               \"sign bits!\",\n-                              Enode);\n+                              Eloc);\n                         end if;\n \n                      elsif Source_Siz < Target_Siz then\n                         if Is_Discrete_Type (Target) then\n                            if Bytes_Big_Endian then\n-                              Error_Msg_N\n+                              Error_Msg\n                                 (\"\\?target value will include ^ undefined \" &\n                                  \"low order bits!\",\n-                                 Enode);\n+                                 Eloc);\n                            else\n-                              Error_Msg_N\n+                              Error_Msg\n                                 (\"\\?target value will include ^ undefined \" &\n                                  \"high order bits!\",\n-                                 Enode);\n+                                 Eloc);\n                            end if;\n \n                         else\n-                           Error_Msg_N\n+                           Error_Msg\n                              (\"\\?^ trailing bits of target value will be \" &\n-                              \"undefined!\", Enode);\n+                              \"undefined!\", Eloc);\n                         end if;\n \n                      else pragma Assert (Source_Siz > Target_Siz);\n-                        Error_Msg_N\n+                        Error_Msg\n                           (\"\\?^ trailing bits of source will be ignored!\",\n-                           Enode);\n+                           Eloc);\n                      end if;\n                   end if;\n                end if;\n@@ -4568,15 +4571,16 @@ package body Sem_Ch13 is\n                         then\n                            Error_Msg_Uint_1 := Target_Align;\n                            Error_Msg_Uint_2 := Source_Align;\n+                           Error_Msg_Node_1 := D_Target;\n                            Error_Msg_Node_2 := D_Source;\n-                           Error_Msg_NE\n+                           Error_Msg\n                              (\"?alignment of & (^) is stricter than \" &\n-                              \"alignment of & (^)!\", Enode, D_Target);\n+                              \"alignment of & (^)!\", Eloc);\n \n                            if All_Errors_Mode then\n-                              Error_Msg_N\n+                              Error_Msg\n                                 (\"\\?resulting access value may have invalid \" &\n-                                 \"alignment!\", Enode);\n+                                 \"alignment!\", Eloc);\n                            end if;\n                         end if;\n                      end;"}]}