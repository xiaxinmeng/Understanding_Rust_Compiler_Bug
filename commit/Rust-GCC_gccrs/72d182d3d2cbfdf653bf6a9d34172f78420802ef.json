{"sha": "72d182d3d2cbfdf653bf6a9d34172f78420802ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkMTgyZDNkMmNiZmRmNjUzYmY2YTlkMzQxNzJmNzg0MjA4MDJlZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-02-09T16:11:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-02-09T16:11:34Z"}, "message": "re PR tree-optimization/43008 (Attribute malloc not handled correctly)\n\n2010-02-09  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/43008\n\t* tree-ssa-structalias.c (handle_lhs_call): Pass in the fndecl,\n\tmake HEAP variables initialized from global memory if they\n\tare not known builtin functions.\n\t(find_func_aliases): Adjust.\n\n\t* gcc.c-torture/execute/pr43008.c: New testcase.\n\nFrom-SVN: r156628", "tree": {"sha": "83417e0e999cd8f444c9c95b4974a4204f9c26c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83417e0e999cd8f444c9c95b4974a4204f9c26c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72d182d3d2cbfdf653bf6a9d34172f78420802ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d182d3d2cbfdf653bf6a9d34172f78420802ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72d182d3d2cbfdf653bf6a9d34172f78420802ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72d182d3d2cbfdf653bf6a9d34172f78420802ef/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "44e7145eb93d53a103935c36fd5fab37d33e2965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44e7145eb93d53a103935c36fd5fab37d33e2965", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44e7145eb93d53a103935c36fd5fab37d33e2965"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "47608b1e2d4f4a4847c80699e7e2f42272a85974", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72d182d3d2cbfdf653bf6a9d34172f78420802ef", "patch": "@@ -1,3 +1,11 @@\n+2010-02-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43008\n+\t* tree-ssa-structalias.c (handle_lhs_call): Pass in the fndecl,\n+\tmake HEAP variables initialized from global memory if they\n+\tare not known builtin functions.\n+\t(find_func_aliases): Adjust.\n+\n 2010-02-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43000"}, {"sha": "9c162e27e208c719a92aee9118ae937b229905a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72d182d3d2cbfdf653bf6a9d34172f78420802ef", "patch": "@@ -1,3 +1,8 @@\n+2010-02-09  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/43008\n+\t* gcc.c-torture/execute/pr43008.c: New testcase.\n+\n 2010-02-09  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/43000"}, {"sha": "428f4ae3bbd77bd96e7d2b45331ab7c40946fce4", "filename": "gcc/testsuite/gcc.c-torture/execute/pr43008.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43008.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43008.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr43008.c?ref=72d182d3d2cbfdf653bf6a9d34172f78420802ef", "patch": "@@ -0,0 +1,23 @@\n+int i;\n+struct X {\n+  int *p;\n+};\n+struct X * __attribute__((malloc))\n+my_alloc (void)\n+{\n+  struct X *p = __builtin_malloc (sizeof (struct X));\n+  p->p = &i;\n+  return p;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  struct X *p, *q;\n+  p = my_alloc ();\n+  q = my_alloc ();\n+  *(p->p) = 1;\n+  *(q->p) = 0;\n+  if (*(p->p) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "5138e72feb481a7ff7e98bade209d53761cb958a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72d182d3d2cbfdf653bf6a9d34172f78420802ef/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=72d182d3d2cbfdf653bf6a9d34172f78420802ef", "patch": "@@ -3482,7 +3482,7 @@ handle_rhs_call (gimple stmt, VEC(ce_s, heap) **results)\n    the LHS point to global and escaped variables.  */\n \n static void\n-handle_lhs_call (tree lhs, int flags, VEC(ce_s, heap) *rhsc)\n+handle_lhs_call (tree lhs, int flags, VEC(ce_s, heap) *rhsc, tree fndecl)\n {\n   VEC(ce_s, heap) *lhsc = NULL;\n \n@@ -3496,6 +3496,12 @@ handle_lhs_call (tree lhs, int flags, VEC(ce_s, heap) *rhsc)\n          it escapes.  */\n       DECL_EXTERNAL (vi->decl) = 0;\n       vi->is_global_var = 0;\n+      /* If this is not a real malloc call assume the memory was\n+         initialized and thus may point to global memory.  All\n+\t builtin functions with the malloc attribute behave in a sane way.  */\n+      if (!fndecl\n+\t  || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n+\tmake_constraint_from (vi, nonlocal_id);\n     }\n   else if (VEC_length (ce_s, rhsc) > 0)\n     {\n@@ -3798,7 +3804,7 @@ find_func_aliases (gimple origt)\n \t    handle_rhs_call (t, &rhsc);\n \t  if (gimple_call_lhs (t)\n \t      && could_have_pointers (gimple_call_lhs (t)))\n-\t    handle_lhs_call (gimple_call_lhs (t), flags, rhsc);\n+\t    handle_lhs_call (gimple_call_lhs (t), flags, rhsc, fndecl);\n \t  VEC_free (ce_s, heap, rhsc);\n \t}\n       else"}]}