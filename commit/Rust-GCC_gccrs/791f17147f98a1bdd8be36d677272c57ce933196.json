{"sha": "791f17147f98a1bdd8be36d677272c57ce933196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkxZjE3MTQ3Zjk4YTFiZGQ4YmUzNmQ2NzcyNzJjNTdjZTkzMzE5Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-09-17T11:42:11Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-09-17T11:42:11Z"}, "message": "re PR middle-end/37385 (ICE in set_mem_alias_set with the vectorizer and function pointers)\n\n2008-09-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/37385\n\tPR tree-optimization/37491\n\t* alias.c (get_alias_set): Use the canonical type.\n\t* tree-vect-transform.c (vectorizable_store): Use the type of\n\tthe lhs for the vector type.  Adjust checking.\n\t(vectorizable_load): Adjust checking.\n\nFrom-SVN: r140412", "tree": {"sha": "7a9cca363d997be715d76fb169665299d0a9b318", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9cca363d997be715d76fb169665299d0a9b318"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/791f17147f98a1bdd8be36d677272c57ce933196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791f17147f98a1bdd8be36d677272c57ce933196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/791f17147f98a1bdd8be36d677272c57ce933196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/791f17147f98a1bdd8be36d677272c57ce933196/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "03e74118561be5f560dad6c09836d93b9f77205d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03e74118561be5f560dad6c09836d93b9f77205d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03e74118561be5f560dad6c09836d93b9f77205d"}], "stats": {"total": 57, "additions": 40, "deletions": 17}, "files": [{"sha": "fcabf719d142b0411f0d33133a5f7bc606897c0f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=791f17147f98a1bdd8be36d677272c57ce933196", "patch": "@@ -1,3 +1,12 @@\n+2008-09-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/37385\n+\tPR tree-optimization/37491\n+\t* alias.c (get_alias_set): Use the canonical type.\n+\t* tree-vect-transform.c (vectorizable_store): Use the type of\n+\tthe lhs for the vector type.  Adjust checking.\n+\t(vectorizable_load): Adjust checking.\n+\n 2008-09-16  Jakub Jelinek  <jakub@redhat.com>\n \t    Adam Nemet  <anemet@caviumnetworks.com>\n "}, {"sha": "35a40bc99a882754d2d06be2359ba7c67ce8598a", "filename": "gcc/alias.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=791f17147f98a1bdd8be36d677272c57ce933196", "patch": "@@ -604,8 +604,11 @@ get_alias_set (tree t)\n     }\n \n   /* Variant qualifiers don't affect the alias set, so get the main\n-     variant. If this is a type with a known alias set, return it.  */\n+     variant.  Always use the canonical type as well.\n+     If this is a type with a known alias set, return it.  */\n   t = TYPE_MAIN_VARIANT (t);\n+  if (TYPE_CANONICAL (t))\n+    t = TYPE_CANONICAL (t);\n   if (TYPE_ALIAS_SET_KNOWN_P (t))\n     return TYPE_ALIAS_SET (t);\n "}, {"sha": "06d6791e63913420d228882067d75ead258f3c57", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/791f17147f98a1bdd8be36d677272c57ce933196/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=791f17147f98a1bdd8be36d677272c57ce933196", "patch": "@@ -5182,24 +5182,23 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n       return false;\n     }\n \n-  /* The type of the vector store is determined by the rhs.  */\n-  vectype = get_vectype_for_scalar_type (TREE_TYPE (op));\n-\n   /* If accesses through a pointer to vectype do not alias the original\n-     memory reference we have a problem.  */\n-  if (get_alias_set (vectype) != get_alias_set (TREE_TYPE (scalar_dest))\n+     memory reference we have a problem.  This should never be the case.  */\n+  if (get_alias_set (vectype) != get_alias_set (scalar_dest)\n       && !alias_set_subset_of (get_alias_set (vectype), \n-                               get_alias_set (TREE_TYPE (scalar_dest))))\n+                               get_alias_set (scalar_dest)))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"vector type does not alias scalar type\");\n+        fprintf (vect_dump, \"???  vector type does not alias scalar type\");\n       return false;\n     }\n \n-  if (!useless_type_conversion_p (TREE_TYPE (op), TREE_TYPE (scalar_dest)))\n+  /* The scalar rhs type needs to be trivially convertible to the vector\n+     component type.  This should always be the case.  */\n+  if (!useless_type_conversion_p (TREE_TYPE (vectype), TREE_TYPE (op)))\n     {      \n       if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"operands of different types\");\n+        fprintf (vect_dump, \"???  operands of different types\");\n       return false;\n     }\n \n@@ -5367,8 +5366,8 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t     Therefore, NEXT_STMT can't be NULL_TREE.  In case that \n \t\t     there is no interleaving, GROUP_SIZE is 1, and only one \n \t\t     iteration of the loop will be executed.  */\n-\t\t  gcc_assert (next_stmt);\n-\t\t  gcc_assert (gimple_assign_single_p (next_stmt));\n+\t\t  gcc_assert (next_stmt\n+\t\t\t      && gimple_assign_single_p (next_stmt));\n \t\t  op = gimple_assign_rhs1 (next_stmt);\n \n \t\t  vec_oprnd = vect_get_vec_def_for_operand (op, next_stmt, \n@@ -5379,9 +5378,12 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\t}\n \t    }\n \n+\t  /* We should have catched mismatched types earlier.  */\n+\t  gcc_assert (useless_type_conversion_p (vectype,\n+\t\t\t\t\t\t TREE_TYPE (vec_oprnd)));\n \t  dataref_ptr = vect_create_data_ref_ptr (first_stmt, NULL, NULL_TREE, \n \t\t\t\t\t\t  &dummy, &ptr_incr, false, \n-\t\t\t\t\t\t  &inv_p, TREE_TYPE (vec_oprnd));\n+\t\t\t\t\t\t  &inv_p, NULL);\n \t  gcc_assert (!inv_p);\n \t}\n       else \n@@ -6384,13 +6386,22 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n     }\n \n   /* If accesses through a pointer to vectype do not alias the original\n-     memory reference we have a problem.  */\n-  if (get_alias_set (vectype) != get_alias_set (scalar_type)\n+     memory reference we have a problem.  This should never happen.  */\n+  if (get_alias_set (vectype) != get_alias_set (gimple_assign_rhs1 (stmt))\n       && !alias_set_subset_of (get_alias_set (vectype),\n-                               get_alias_set (scalar_type)))\n+                               get_alias_set (gimple_assign_rhs1 (stmt))))\n     {\n       if (vect_print_dump_info (REPORT_DETAILS))\n-        fprintf (vect_dump, \"vector type does not alias scalar type\");\n+        fprintf (vect_dump, \"???  vector type does not alias scalar type\");\n+      return false;\n+    }\n+\n+  /* The vector component type needs to be trivially convertible to the\n+     scalar lhs.  This should always be the case.  */\n+  if (!useless_type_conversion_p (TREE_TYPE (scalar_dest), TREE_TYPE (vectype)))\n+    {      \n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"???  operands of different types\");\n       return false;\n     }\n "}]}