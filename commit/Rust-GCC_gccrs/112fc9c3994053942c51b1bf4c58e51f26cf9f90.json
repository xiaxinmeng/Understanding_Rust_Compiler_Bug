{"sha": "112fc9c3994053942c51b1bf4c58e51f26cf9f90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEyZmM5YzM5OTQwNTM5NDJjNTFiMWJmNGM1OGU1MWYyNmNmOWY5MA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-10T16:01:30Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-10T16:01:30Z"}, "message": "sse.md (movdi_to_sse): Use gen_lowpart and gen_higpart instead of gen_rtx_SUBREG.\n\n\t* config/i386/sse.md (movdi_to_sse): Use gen_lowpart\n\tand gen_higpart instead of gen_rtx_SUBREG.\n\t* config/i386/i386.md\n\t(floatdi<X87MODEF:mode>2_i387_with_xmm splitter): Ditto.\n\t(read-modify peephole2): Use gen_lowpart instead of\n\tgen_rtx_SUBREG for operand 5.\n\nFrom-SVN: r225682", "tree": {"sha": "25289f6b488bf4b9e7062a54e109551edef41d10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25289f6b488bf4b9e7062a54e109551edef41d10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/112fc9c3994053942c51b1bf4c58e51f26cf9f90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112fc9c3994053942c51b1bf4c58e51f26cf9f90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112fc9c3994053942c51b1bf4c58e51f26cf9f90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112fc9c3994053942c51b1bf4c58e51f26cf9f90/comments", "author": null, "committer": null, "parents": [{"sha": "3655e7ca76526733204c54b0445a5efad0ccea57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3655e7ca76526733204c54b0445a5efad0ccea57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3655e7ca76526733204c54b0445a5efad0ccea57"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "ccbc320428b3ddca116435dcedf94020668fe932", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=112fc9c3994053942c51b1bf4c58e51f26cf9f90", "patch": "@@ -1,3 +1,12 @@\n+2015-07-10  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (movdi_to_sse): Use gen_lowpart\n+\tand gen_higpart instead of gen_rtx_SUBREG.\n+\t* config/i386/i386.md\n+\t(floatdi<X87MODEF:mode>2_i387_with_xmm splitter): Ditto.\n+\t(read-modify peephole2): Use gen_lowpart instead of\n+\tgen_rtx_SUBREG for operand 5.\n+\n 2015-07-10  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* config/tilepro/gen-mul-tables.cc (main): Change include list for\n@@ -15,17 +24,17 @@\n \n 2015-07-10  Jiong Wang  <jiong.wang@arm.com>\n \n-\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Mark mem\n-\tas READONLY and NOTRAP for PIC symbol.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately):\n+\tMark mem as READONLY and NOTRAP for PIC symbol.\n \n 2015-07-10  Andrew MacLeod  <amacleod@redhat.com>\n \n-\t* gimple-predict.h: New file. \n+\t* gimple-predict.h: New file.\n \t(gimple_predict_predictor, gimple_predict_set_predictor,\n \tgimple_predict_outcome, gimple_predict_set_outcome,\n \tgimple_build_predict): Relocate here.\n \t* gimple.h (gimple_predict_predictor, gimple_predict_set_predictor,\n-\tgimple_predict_outcome, gimple_predict_set_outcome): Move to \n+\tgimple_predict_outcome, gimple_predict_set_outcome): Move to\n \tgimple-predict.h.\n \t* gimple.c (gimple_build_predict): Move to gimple-predict.h\n \t* basic-block.h: Don't include cfghooks.h.\n@@ -253,8 +262,7 @@\n \n 2015-07-10  Richard Biener  <rguenther@suse.de>\n \n-\t* genmatch.c (dt_node::gen_kids_1): Fix indenting of\n-\tcase labels.\n+\t* genmatch.c (dt_node::gen_kids_1): Fix indenting of case labels.\n \t(decision_tree::gen_gimple): Likewise.\n \t(decision_tree::gen_generic): Likewise.\n \n@@ -419,7 +427,7 @@\n \t* config/i386/predicates.md (nonimmediate_gr_operand): New predicate.\n \t* config/i386/i386.md (not peephole2): Use nonimmediate_gr_operand.\n \t(varous peephole2s): Use {GENERAL,SSE,MMX}_REGNO_P instead of\n-\t{GENERAL_SSE_MMX}_REG_P where appropriate.\n+\t{GENERAL,SSE,MMX}_REG_P where appropriate.\n \n 2015-07-09  Andrew MacLeod  <amacleod@redhat.com>\n "}, {"sha": "bc98389a54b0c13b9ff70ef8edfae625a04232f7", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=112fc9c3994053942c51b1bf4c58e51f26cf9f90", "patch": "@@ -5100,11 +5100,11 @@\n   /* The DImode arrived in a pair of integral registers (e.g. %edx:%eax).\n      Assemble the 64-bit DImode value in an xmm register.  */\n   emit_insn (gen_sse2_loadld (operands[3], CONST0_RTX (V4SImode),\n-\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 0)));\n+\t\t\t      gen_lowpart (SImode, operands[1])));\n   emit_insn (gen_sse2_loadld (operands[4], CONST0_RTX (V4SImode),\n-\t\t\t      gen_rtx_SUBREG (SImode, operands[1], 4)));\n+\t\t\t      gen_highpart (SImode, operands[1])));\n   emit_insn (gen_vec_interleave_lowv4si (operands[3], operands[3],\n-  \t    \t\t\t\t operands[4]));\n+\t\t\t\t\t operands[4]));\n \n   operands[3] = gen_rtx_REG (DImode, REGNO (operands[3]));\n })\n@@ -18064,11 +18064,13 @@\n \n   operands[1] = gen_rtx_PLUS (word_mode, base,\n \t\t\t      gen_rtx_MULT (word_mode, index, GEN_INT (scale)));\n-  operands[5] = base;\n   if (mode != word_mode)\n     operands[1] = gen_rtx_SUBREG (mode, operands[1], 0);\n+\n+  operands[5] = base;\n   if (op1mode != word_mode)\n-    operands[5] = gen_rtx_SUBREG (op1mode, operands[5], 0);\n+    operands[5] = gen_lowpart (op1mode, operands[5]);\n+\n   operands[0] = dest;\n })\n \f"}, {"sha": "4bee9fa4f4094d4d8d6c01456513baf851303f1a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/112fc9c3994053942c51b1bf4c58e51f26cf9f90/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=112fc9c3994053942c51b1bf4c58e51f26cf9f90", "patch": "@@ -1080,9 +1080,9 @@\n       /* The DImode arrived in a pair of integral registers (e.g. %edx:%eax).\n \t Assemble the 64-bit DImode value in an xmm register.  */\n       emit_insn (gen_sse2_loadld (operands[0], CONST0_RTX (V4SImode),\n-\t\t\t\t  gen_rtx_SUBREG (SImode, operands[1], 0)));\n+\t\t\t\t  gen_lowpart (SImode, operands[1])));\n       emit_insn (gen_sse2_loadld (operands[2], CONST0_RTX (V4SImode),\n-\t\t\t\t  gen_rtx_SUBREG (SImode, operands[1], 4)));\n+\t\t\t\t  gen_highpart (SImode, operands[1])));\n       emit_insn (gen_vec_interleave_lowv4si (operands[0], operands[0],\n \t\t\t\t\t     operands[2]));\n    }"}]}