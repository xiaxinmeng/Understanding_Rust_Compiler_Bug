{"sha": "501623d42404843e3b737db24bbd575db937ce1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxNjIzZDQyNDA0ODQzZTNiNzM3ZGIyNGJiZDU3NWRiOTM3Y2UxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-08-30T11:10:11Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:10:11Z"}, "message": "[15/77] Add scalar_int_mode\n\nSimilar to the previous scalar_float_mode patch, but for modes that\nsatisfy SCALAR_INT_MODE_P.  There are very many uses of scalar integers,\nso this patch only makes a token change to the types of byte_mode,\nword_mode, ptr_mode and rs6000_pmode.  The next patches in the series\ngradually replace more uses.\n\nThe patch also removes and adds casts to some target-specific code\ndue to the new types of SImode, DImode and Pmode.\n\nThe as_a <scalar_int_mode> goes away in a later patch.\n\n2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* config/powerpcspe/powerpcspe.h (rs6000_pmode): Change type from\n\tmachine_mode to scalar_int_mode.\n\t* config/powerpcspe/powerpcspe.c (rs6000_pmode): Likewise.\n\t(rs6000_option_override_internal): Remove cast to int.\n\t* config/rs6000/rs6000.h (rs6000_pmode): Change type from\n\tmachine_mode to scalar_int_mode.\n\t* config/rs6000/rs6000.c (rs6000_pmode): Likewise.\n\t(rs6000_option_override_internal): Remove cast to int.\n\t* config/s390/s390.h (Pmode): Remove cast to machine_mode.\n\t* config/epiphany/epiphany.h (RTX_OK_FOR_OFFSET_P): Add cast\n\tto machine_mode.\n\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n\t* coretypes.h (scalar_int_mode): New type.\n\t(opt_scalar_int_mode): New typedef.\n\t* machmode.h (scalar_int_mode): New class.\n\t(scalar_int_mode::includes_p): New function.\n\t(byte_mode): Change type to scalar_int_mode.\n\t(word_mode): Likewise.\n\t(ptr_mode): Likewise.\n\t* emit-rtl.c (byte_mode): Likewise.\n\t(word_mode): Likewise.\n\t(ptr_mode): Likewise.\n\t(init_derived_machine_modes): Update accordingly.\n\t* genmodes.c (get_mode_class): Return scalar_int_mode for MODE_INT\n\tand MODE_PARTIAL_INT.\n\t* gdbhooks.py (build_pretty_printer): Handle scalar_int_mode and\n\topt_scalar_int_mode.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r251467", "tree": {"sha": "721c0b46dec4b883eb0047dd6aeb86ff1aaf7175", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/721c0b46dec4b883eb0047dd6aeb86ff1aaf7175"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/501623d42404843e3b737db24bbd575db937ce1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501623d42404843e3b737db24bbd575db937ce1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501623d42404843e3b737db24bbd575db937ce1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501623d42404843e3b737db24bbd575db937ce1d/comments", "author": null, "committer": null, "parents": [{"sha": "7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c5bd57a753528f8a612d3e63d3cd0d53f99e71d"}], "stats": {"total": 137, "additions": 101, "deletions": 36}, "files": [{"sha": "2f8f97045bf4a5d5a1a5cb8a271e3320f67fb77b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -1,3 +1,35 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* config/powerpcspe/powerpcspe.h (rs6000_pmode): Change type from\n+\tmachine_mode to scalar_int_mode.\n+\t* config/powerpcspe/powerpcspe.c (rs6000_pmode): Likewise.\n+\t(rs6000_option_override_internal): Remove cast to int.\n+\t* config/rs6000/rs6000.h (rs6000_pmode): Change type from\n+\tmachine_mode to scalar_int_mode.\n+\t* config/rs6000/rs6000.c (rs6000_pmode): Likewise.\n+\t(rs6000_option_override_internal): Remove cast to int.\n+\t* config/s390/s390.h (Pmode): Remove cast to machine_mode.\n+\t* config/epiphany/epiphany.h (RTX_OK_FOR_OFFSET_P): Add cast\n+\tto machine_mode.\n+\t* config/s390/s390.c (s390_expand_builtin): Likewise.\n+\t* coretypes.h (scalar_int_mode): New type.\n+\t(opt_scalar_int_mode): New typedef.\n+\t* machmode.h (scalar_int_mode): New class.\n+\t(scalar_int_mode::includes_p): New function.\n+\t(byte_mode): Change type to scalar_int_mode.\n+\t(word_mode): Likewise.\n+\t(ptr_mode): Likewise.\n+\t* emit-rtl.c (byte_mode): Likewise.\n+\t(word_mode): Likewise.\n+\t(ptr_mode): Likewise.\n+\t(init_derived_machine_modes): Update accordingly.\n+\t* genmodes.c (get_mode_class): Return scalar_int_mode for MODE_INT\n+\tand MODE_PARTIAL_INT.\n+\t* gdbhooks.py (build_pretty_printer): Handle scalar_int_mode and\n+\topt_scalar_int_mode.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "c06726c4900eb115908b13aac851b2ff99fa8ce1", "filename": "gcc/config/epiphany/epiphany.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fepiphany%2Fepiphany.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -641,7 +641,8 @@ typedef struct GTY (()) machine_function\n \n #define RTX_OK_FOR_OFFSET_P(MODE, X) \\\n   RTX_OK_FOR_OFFSET_1 (GET_MODE_CLASS (MODE) == MODE_VECTOR_INT \\\n-\t\t       && epiphany_vect_align == 4 ? SImode : (MODE), X)\n+\t\t       && epiphany_vect_align == 4 \\\n+\t\t       ? (machine_mode) SImode : (machine_mode) (MODE), X)\n #define RTX_OK_FOR_OFFSET_1(MODE, X) \\\n   (GET_CODE (X) == CONST_INT \\\n    && !(INTVAL (X) & (GET_MODE_SIZE (MODE) - 1)) \\"}, {"sha": "c4ddf4054d0b4fd7fceeb62801a113ad323391eb", "filename": "gcc/config/powerpcspe/powerpcspe.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.c?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -186,9 +186,8 @@ int dot_symbols;\n \n /* Specify the machine mode that pointers have.  After generation of rtl, the\n    compiler makes no further distinction between pointers and any other objects\n-   of this machine mode.  The type is unsigned since not all things that\n-   include powerpcspe.h also include machmode.h.  */\n-unsigned rs6000_pmode;\n+   of this machine mode.  */\n+scalar_int_mode rs6000_pmode;\n \n /* Width in bits of a pointer.  */\n unsigned rs6000_pointer_size;\n@@ -4038,12 +4037,12 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Set the pointer size.  */\n   if (TARGET_64BIT)\n     {\n-      rs6000_pmode = (int)DImode;\n+      rs6000_pmode = DImode;\n       rs6000_pointer_size = 64;\n     }\n   else\n     {\n-      rs6000_pmode = (int)SImode;\n+      rs6000_pmode = SImode;\n       rs6000_pointer_size = 32;\n     }\n "}, {"sha": "f805f9b32ef39677d7267a5e37727f07720c76db", "filename": "gcc/config/powerpcspe/powerpcspe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpowerpcspe%2Fpowerpcspe.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -2220,8 +2220,8 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-extern unsigned rs6000_pmode;\n-#define Pmode ((machine_mode)rs6000_pmode)\n+extern scalar_int_mode rs6000_pmode;\n+#define Pmode rs6000_pmode\n \n /* Supply definition of STACK_SIZE_MODE for allocate_dynamic_stack_space.  */\n #define STACK_SIZE_MODE (TARGET_32BIT ? SImode : DImode)"}, {"sha": "5086a7a785e27acfcc9845f9b29a3a59e3099583", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -177,9 +177,8 @@ int dot_symbols;\n \n /* Specify the machine mode that pointers have.  After generation of rtl, the\n    compiler makes no further distinction between pointers and any other objects\n-   of this machine mode.  The type is unsigned since not all things that\n-   include rs6000.h also include machmode.h.  */\n-unsigned rs6000_pmode;\n+   of this machine mode.  */\n+scalar_int_mode rs6000_pmode;\n \n /* Width in bits of a pointer.  */\n unsigned rs6000_pointer_size;\n@@ -3952,12 +3951,12 @@ rs6000_option_override_internal (bool global_init_p)\n   /* Set the pointer size.  */\n   if (TARGET_64BIT)\n     {\n-      rs6000_pmode = (int)DImode;\n+      rs6000_pmode = DImode;\n       rs6000_pointer_size = 64;\n     }\n   else\n     {\n-      rs6000_pmode = (int)SImode;\n+      rs6000_pmode = SImode;\n       rs6000_pointer_size = 32;\n     }\n "}, {"sha": "d668c9b8f509d62eed1a7e3357658b1f2d88ecfb", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -2116,8 +2116,8 @@ do {\t\t\t\t\t\t\t\t\t     \\\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-extern unsigned rs6000_pmode;\n-#define Pmode ((machine_mode)rs6000_pmode)\n+extern scalar_int_mode rs6000_pmode;\n+#define Pmode rs6000_pmode\n \n /* Supply definition of STACK_SIZE_MODE for allocate_dynamic_stack_space.  */\n #define STACK_SIZE_MODE (TARGET_32BIT ? SImode : DImode)"}, {"sha": "a3b7418f9a71eaa4c33fd0ab959b51ffbf417d7d", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -999,7 +999,7 @@ s390_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t     so we cannot use this.  */\n \t  machine_mode target_mode =\n \t    (insn_op->predicate == address_operand\n-\t     ? Pmode : insn_op->mode);\n+\t     ? (machine_mode) Pmode : insn_op->mode);\n \t  op[arity] = copy_to_mode_reg (target_mode, op[arity]);\n \t}\n "}, {"sha": "917aa2930734f71ba7e04661021a56b4feb78a74", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -1053,7 +1053,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* Specify the machine mode that pointers have.\n    After generation of rtl, the compiler makes no further distinction\n    between pointers and any other objects of this machine mode.  */\n-#define Pmode ((machine_mode) (TARGET_64BIT ? DImode : SImode))\n+#define Pmode (TARGET_64BIT ? DImode : SImode)\n \n /* This is -1 for \"pointer mode\" extend.  See ptr_extend in s390.md.  */\n #define POINTERS_EXTEND_UNSIGNED -1"}, {"sha": "6e01a5069bf172c1fde43ef0ad78f9cae180c36d", "filename": "gcc/coretypes.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -55,8 +55,10 @@ typedef const struct simple_bitmap_def *const_sbitmap;\n struct rtx_def;\n typedef struct rtx_def *rtx;\n typedef const struct rtx_def *const_rtx;\n+class scalar_int_mode;\n class scalar_float_mode;\n template<typename> class opt_mode;\n+typedef opt_mode<scalar_int_mode> opt_scalar_int_mode;\n typedef opt_mode<scalar_float_mode> opt_scalar_float_mode;\n \n /* Subclasses of rtx_def, using indentation to show the class\n@@ -313,6 +315,7 @@ union _dont_use_tree_here_;\n #define tree union _dont_use_tree_here_ *\n #define const_tree union _dont_use_tree_here_ *\n \n+typedef struct scalar_int_mode scalar_int_mode;\n typedef struct scalar_float_mode scalar_float_mode;\n \n #endif"}, {"sha": "399c5d6b895438dbb73c7417fce346b7ee90bb87", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -70,9 +70,9 @@ struct target_rtl *this_target_rtl = &default_target_rtl;\n \n /* Commonly used modes.  */\n \n-machine_mode byte_mode;\t/* Mode whose width is BITS_PER_UNIT.  */\n-machine_mode word_mode;\t/* Mode whose width is BITS_PER_WORD.  */\n-machine_mode ptr_mode;\t/* Mode whose width is POINTER_SIZE.  */\n+scalar_int_mode byte_mode;\t/* Mode whose width is BITS_PER_UNIT.  */\n+scalar_int_mode word_mode;\t/* Mode whose width is BITS_PER_WORD.  */\n+scalar_int_mode ptr_mode;\t/* Mode whose width is POINTER_SIZE.  */\n \n /* Datastructures maintained for currently processed function in RTL form.  */\n \n@@ -5863,22 +5863,24 @@ init_emit_regs (void)\n void\n init_derived_machine_modes (void)\n {\n-  byte_mode = VOIDmode;\n-  word_mode = VOIDmode;\n-\n-  machine_mode mode;\n-  FOR_EACH_MODE_IN_CLASS (mode, MODE_INT)\n+  opt_scalar_int_mode mode_iter, opt_byte_mode, opt_word_mode;\n+  FOR_EACH_MODE_IN_CLASS (mode_iter, MODE_INT)\n     {\n+      scalar_int_mode mode = mode_iter.require ();\n+\n       if (GET_MODE_BITSIZE (mode) == BITS_PER_UNIT\n-\t  && byte_mode == VOIDmode)\n-\tbyte_mode = mode;\n+\t  && !opt_byte_mode.exists ())\n+\topt_byte_mode = mode;\n \n       if (GET_MODE_BITSIZE (mode) == BITS_PER_WORD\n-\t  && word_mode == VOIDmode)\n-\tword_mode = mode;\n+\t  && !opt_word_mode.exists ())\n+\topt_word_mode = mode;\n     }\n \n-  ptr_mode = mode_for_size (POINTER_SIZE, GET_MODE_CLASS (Pmode), 0);\n+  byte_mode = opt_byte_mode.require ();\n+  word_mode = opt_word_mode.require ();\n+  ptr_mode = as_a <scalar_int_mode> (mode_for_size (POINTER_SIZE,\n+\t\t\t\t\t\t    MODE_INT, 0));\n }\n \n /* Create some permanent unique rtl objects shared between all functions.  */"}, {"sha": "782e93f9fbc935fcc75986b013e3ac268f1f261b", "filename": "gcc/gdbhooks.py", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fgdbhooks.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fgdbhooks.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgdbhooks.py?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -542,10 +542,11 @@ def build_pretty_printer():\n \n     pp.add_printer_for_regex(r'opt_mode<(\\S+)>',\n                              'opt_mode', OptMachineModePrinter)\n-    pp.add_printer_for_types(['opt_scalar_float_mode'],\n+    pp.add_printer_for_types(['opt_scalar_int_mode',\n+                              'opt_scalar_float_mode'],\n                              'opt_mode', OptMachineModePrinter)\n-    pp.add_printer_for_types(['scalar_float_mode'],\n-                             'scalar_float_mode', MachineModePrinter)\n+    for mode in 'scalar_int_mode', 'scalar_float_mode':\n+        pp.add_printer_for_types([mode], mode, MachineModePrinter)\n \n     return pp\n "}, {"sha": "c7d8c75dbebd482191457a35b7959f7566317a94", "filename": "gcc/genmodes.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fgenmodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fgenmodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmodes.c?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -1137,6 +1137,10 @@ get_mode_class (struct mode_data *mode)\n {\n   switch (mode->cl)\n     {\n+    case MODE_INT:\n+    case MODE_PARTIAL_INT:\n+      return \"scalar_int_mode\";\n+\n     case MODE_FLOAT:\n     case MODE_DECIMAL_FLOAT:\n       return \"scalar_float_mode\";"}, {"sha": "dda7c0aed410ecacae24ac4607dea5c45908f132", "filename": "gcc/machmode.h", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501623d42404843e3b737db24bbd575db937ce1d/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=501623d42404843e3b737db24bbd575db937ce1d", "patch": "@@ -338,6 +338,30 @@ is_a (machine_mode m, U *result)\n   return false;\n }\n \n+/* Represents a machine mode that is known to be a SCALAR_INT_MODE_P.  */\n+class scalar_int_mode\n+{\n+public:\n+  typedef mode_traits<scalar_int_mode>::from_int from_int;\n+\n+  ALWAYS_INLINE scalar_int_mode () {}\n+  ALWAYS_INLINE scalar_int_mode (from_int m) : m_mode (machine_mode (m)) {}\n+  ALWAYS_INLINE operator machine_mode () const { return m_mode; }\n+\n+  static bool includes_p (machine_mode);\n+\n+protected:\n+  machine_mode m_mode;\n+};\n+\n+/* Return true if M is a scalar_int_mode.  */\n+\n+inline bool\n+scalar_int_mode::includes_p (machine_mode m)\n+{\n+  return SCALAR_INT_MODE_P (m);\n+}\n+\n /* Represents a machine mode that is known to be a SCALAR_FLOAT_MODE_P.  */\n class scalar_float_mode\n {\n@@ -605,9 +629,9 @@ get_narrowest_mode (T mode)\n /* Define the integer modes whose sizes are BITS_PER_UNIT and BITS_PER_WORD\n    and the mode whose class is Pmode and whose size is POINTER_SIZE.  */\n \n-extern machine_mode byte_mode;\n-extern machine_mode word_mode;\n-extern machine_mode ptr_mode;\n+extern scalar_int_mode byte_mode;\n+extern scalar_int_mode word_mode;\n+extern scalar_int_mode ptr_mode;\n \n /* Target-dependent machine mode initialization - in insn-modes.c.  */\n extern void init_adjust_machine_modes (void);"}]}