{"sha": "5932dd35eaa816e8d9b6406c6c433395ff5b6162", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkzMmRkMzVlYWE4MTZlOGQ5YjY0MDZjNmM0MzMzOTVmZjViNjE2Mg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:45:33Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-07-16T19:45:33Z"}, "message": "analyzer: add svalue::maybe_get_region\n\ngcc/analyzer/ChangeLog:\n\t* program-state.cc (program_state::detect_leaks): Simplify using\n\tsvalue::maybe_get_region.\n\t* region-model-impl-calls.cc (region_model::impl_call_fgets): Likewise.\n\t(region_model::impl_call_fread): Likewise.\n\t(region_model::impl_call_free): Likewise.\n\t(region_model::impl_call_operator_delete): Likewise.\n\t* region-model.cc (selftest::test_stack_frames): Likewise.\n\t(selftest::test_state_merging): Likewise.\n\t* svalue.cc (svalue::maybe_get_region): New.\n\t* svalue.h (svalue::maybe_get_region): New decl.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "b0eda18ebfc4015f2835d3636ae0c40fe9723b02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0eda18ebfc4015f2835d3636ae0c40fe9723b02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5932dd35eaa816e8d9b6406c6c433395ff5b6162", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5932dd35eaa816e8d9b6406c6c433395ff5b6162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5932dd35eaa816e8d9b6406c6c433395ff5b6162", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5932dd35eaa816e8d9b6406c6c433395ff5b6162/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06b1c5ac00b1bd0339739d3d9377c90852a83c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06b1c5ac00b1bd0339739d3d9377c90852a83c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06b1c5ac00b1bd0339739d3d9377c90852a83c9"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "cc53aef552f405f5b387ce7cc1352c4711af12e6", "filename": "gcc/analyzer/program-state.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fprogram-state.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fprogram-state.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fprogram-state.cc?ref=5932dd35eaa816e8d9b6406c6c433395ff5b6162", "patch": "@@ -1285,12 +1285,9 @@ program_state::detect_leaks (const program_state &src_state,\n \n   /* Purge dead heap-allocated regions from dynamic extents.  */\n   for (const svalue *sval : dead_svals)\n-    if (const region_svalue *region_sval = sval->dyn_cast_region_svalue ())\n-      {\n-\tconst region *reg = region_sval->get_pointee ();\n-\tif (reg->get_kind () == RK_HEAP_ALLOCATED)\n-\t  dest_state.m_region_model->unset_dynamic_extents (reg);\n-      }\n+    if (const region *reg = sval->maybe_get_region ())\n+      if (reg->get_kind () == RK_HEAP_ALLOCATED)\n+\tdest_state.m_region_model->unset_dynamic_extents (reg);\n }\n \n #if CHECKING_P"}, {"sha": "efb0fc83433a28bf709fe83388875320d1d8ccb6", "filename": "gcc/analyzer/region-model-impl-calls.cc", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model-impl-calls.cc?ref=5932dd35eaa816e8d9b6406c6c433395ff5b6162", "patch": "@@ -325,10 +325,8 @@ region_model::impl_call_fgets (const call_details &cd)\n   /* Ideally we would bifurcate state here between the\n      error vs no error cases.  */\n   const svalue *ptr_sval = cd.get_arg_svalue (0);\n-  if (const region_svalue *ptr_to_region_sval\n-      = ptr_sval->dyn_cast_region_svalue ())\n+  if (const region *reg = ptr_sval->maybe_get_region ())\n     {\n-      const region *reg = ptr_to_region_sval->get_pointee ();\n       const region *base_reg = reg->get_base_region ();\n       const svalue *new_sval = cd.get_or_create_conjured_svalue (base_reg);\n       purge_state_involving (new_sval, cd.get_ctxt ());\n@@ -342,10 +340,8 @@ void\n region_model::impl_call_fread (const call_details &cd)\n {\n   const svalue *ptr_sval = cd.get_arg_svalue (0);\n-  if (const region_svalue *ptr_to_region_sval\n-      = ptr_sval->dyn_cast_region_svalue ())\n+  if (const region *reg = ptr_sval->maybe_get_region ())\n     {\n-      const region *reg = ptr_to_region_sval->get_pointee ();\n       const region *base_reg = reg->get_base_region ();\n       const svalue *new_sval = cd.get_or_create_conjured_svalue (base_reg);\n       purge_state_involving (new_sval, cd.get_ctxt ());\n@@ -372,12 +368,10 @@ void\n region_model::impl_call_free (const call_details &cd)\n {\n   const svalue *ptr_sval = cd.get_arg_svalue (0);\n-  if (const region_svalue *ptr_to_region_sval\n-      = ptr_sval->dyn_cast_region_svalue ())\n+  if (const region *freed_reg = ptr_sval->maybe_get_region ())\n     {\n       /* If the ptr points to an underlying heap region, delete it,\n \t poisoning pointers.  */\n-      const region *freed_reg = ptr_to_region_sval->get_pointee ();\n       unbind_region_and_descendents (freed_reg, POISON_KIND_FREED);\n       m_dynamic_extents.remove (freed_reg);\n     }\n@@ -472,12 +466,10 @@ bool\n region_model::impl_call_operator_delete (const call_details &cd)\n {\n   const svalue *ptr_sval = cd.get_arg_svalue (0);\n-  if (const region_svalue *ptr_to_region_sval\n-      = ptr_sval->dyn_cast_region_svalue ())\n+  if (const region *freed_reg = ptr_sval->maybe_get_region ())\n     {\n       /* If the ptr points to an underlying heap region, delete it,\n \t poisoning pointers.  */\n-      const region *freed_reg = ptr_to_region_sval->get_pointee ();\n       unbind_region_and_descendents (freed_reg, POISON_KIND_FREED);\n     }\n   return false;"}, {"sha": "190c8524f90470a01f2b7e252c11deb7eae4ff90", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=5932dd35eaa816e8d9b6406c6c433395ff5b6162", "patch": "@@ -4541,7 +4541,7 @@ test_stack_frames ()\n      renumbering.  */\n   const svalue *new_q_sval = model.get_rvalue (q, &ctxt);\n   ASSERT_EQ (new_q_sval->get_kind (), SK_REGION);\n-  ASSERT_EQ (new_q_sval->dyn_cast_region_svalue ()->get_pointee (),\n+  ASSERT_EQ (new_q_sval->maybe_get_region (),\n \t     model.get_lvalue (p, &ctxt));\n \n   /* Verify that top of stack has been updated.  */\n@@ -5070,8 +5070,7 @@ test_state_merging ()\n     model0.set_value (q_in_first_frame, sval_ptr, NULL);\n \n     /* Verify that it's pointing at the newer frame.  */\n-    const region *reg_pointee\n-      = sval_ptr->dyn_cast_region_svalue ()->get_pointee ();\n+    const region *reg_pointee = sval_ptr->maybe_get_region ();\n     ASSERT_EQ (reg_pointee->get_parent_region (), reg_2nd_frame);\n \n     model0.canonicalize ();"}, {"sha": "fa9a862bdb552d8fa95403ad9d77f63c5c6b92d9", "filename": "gcc/analyzer/svalue.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fsvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fsvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.cc?ref=5932dd35eaa816e8d9b6406c6c433395ff5b6162", "patch": "@@ -111,6 +111,18 @@ svalue::maybe_get_constant () const\n     return NULL_TREE;\n }\n \n+/* If this svalue is a region_svalue, return the region it points to.\n+   Otherwise return NULL.  */\n+\n+const region *\n+svalue::maybe_get_region () const\n+{\n+  if (const region_svalue *region_sval = dyn_cast_region_svalue ())\n+    return region_sval->get_pointee ();\n+  else\n+    return NULL;\n+}\n+\n /* If this svalue is a cast (i.e a unaryop NOP_EXPR or VIEW_CONVERT_EXPR),\n    return the underlying svalue.\n    Otherwise return NULL.  */"}, {"sha": "15198899cd56b5c5d85845216a619858adb1f87f", "filename": "gcc/analyzer/svalue.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fsvalue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5932dd35eaa816e8d9b6406c6c433395ff5b6162/gcc%2Fanalyzer%2Fsvalue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsvalue.h?ref=5932dd35eaa816e8d9b6406c6c433395ff5b6162", "patch": "@@ -126,6 +126,7 @@ class svalue\n   dyn_cast_conjured_svalue () const { return NULL; }\n \n   tree maybe_get_constant () const;\n+  const region *maybe_get_region () const;\n   const svalue *maybe_undo_cast () const;\n   const svalue *unwrap_any_unmergeable () const;\n "}]}