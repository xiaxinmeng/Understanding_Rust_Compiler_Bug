{"sha": "0ca93e302bf496b71bee839b3c121e1f7363fcf0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNhOTNlMzAyYmY0OTZiNzFiZWU4MzliM2MxMjFlMWY3MzYzZmNmMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T12:02:40Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-17T12:02:40Z"}, "message": "testsuite/arm: Add mve-vadd-scalar-1.c test\n\nThis patch adds a test for the scalar mode of vadd, precisely noting\nthat we do not yet use the T2 variants of vadd, which take a scalar as\nfinal argument.\n\n2021-05-17  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vadd-scalar-1.c: New.", "tree": {"sha": "ff2a9e8f853e8b2c6b14305445feb0a929569e51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff2a9e8f853e8b2c6b14305445feb0a929569e51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ca93e302bf496b71bee839b3c121e1f7363fcf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca93e302bf496b71bee839b3c121e1f7363fcf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ca93e302bf496b71bee839b3c121e1f7363fcf0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ca93e302bf496b71bee839b3c121e1f7363fcf0/comments", "author": null, "committer": null, "parents": [{"sha": "c34e18636b30c3bf86396e7a894e6f3a0c913d15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c34e18636b30c3bf86396e7a894e6f3a0c913d15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c34e18636b30c3bf86396e7a894e6f3a0c913d15"}], "stats": {"total": 47, "additions": 47, "deletions": 0}, "files": [{"sha": "bbf70e141461baa5d8eee1f0c96287397d8bc8c0", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vadd-scalar-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ca93e302bf496b71bee839b3c121e1f7363fcf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vadd-scalar-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ca93e302bf496b71bee839b3c121e1f7363fcf0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vadd-scalar-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vadd-scalar-1.c?ref=0ca93e302bf496b71bee839b3c121e1f7363fcf0", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, \\\n+\t\t\t\t\t\t     TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, +, vaddimm)\n+FUNC_IMM(u, uint, 32, 4, +, vaddimm)\n+FUNC_IMM(s, int, 16, 8, +, vaddimm)\n+FUNC_IMM(u, uint, 16, 8, +, vaddimm)\n+FUNC_IMM(s, int, 8, 16, +, vaddimm)\n+FUNC_IMM(u, uint, 8, 16, +, vaddimm)\n+\n+/* For the moment we do not select the T2 vadd variant operating on a scalar\n+   final argument.  */\n+/* { dg-final { scan-assembler-times {vadd\\.i32  q[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vadd\\.i16  q[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+/* { dg-final { scan-assembler-times {vadd\\.i8  q[0-9]+, q[0-9]+, r[0-9]+} 2 { xfail *-*-* } } } */\n+\n+void test_vaddimm_f32 (float * dest, float * a) {\n+  int i;\n+  for (i=0; i<4; i++) {\n+    dest[i] = a[i] + 5.0;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vadd\\.f32 q[0-9]+, q[0-9]+, r[0-9]+} 1 { xfail *-*-* } } } */\n+\n+/* Note that dest[i] = a[i] + 5.0f16 is not vectorized.  */\n+void test_vaddimm_f16 (__fp16 * dest, __fp16 * a) {\n+  int i;\n+  __fp16 b = 5.0f16;\n+  for (i=0; i<8; i++) {\n+    dest[i] = a[i] + b;\n+  }\n+}\n+/* { dg-final { scan-assembler-times {vadd\\.f16 q[0-9]+, q[0-9]+, r[0-9]+} 1 { xfail *-*-* } } } */"}]}