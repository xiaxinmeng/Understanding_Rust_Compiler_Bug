{"sha": "2492305bcc43dbc13678f1d6113e76b735dba432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5MjMwNWJjYzQzZGJjMTM2NzhmMWQ2MTEzZTc2YjczNWRiYTQzMg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:31:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-10-02T08:31:49Z"}, "message": "[multiple changes]\n\n2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb (Expand_N_Case_Expression): Do not introduce\n\tindirections when the type of the alternatives is an access type:\n\tmore efficient, and removes anomalies when an alternative is\n\tstatically null.\n\n2012-10-02  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads: Minor comment addition (Invariant is a GNAT aspect).\n\nFrom-SVN: r191963", "tree": {"sha": "94bdc85fee142089ce51ba41c062c46dddd35534", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94bdc85fee142089ce51ba41c062c46dddd35534"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2492305bcc43dbc13678f1d6113e76b735dba432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2492305bcc43dbc13678f1d6113e76b735dba432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2492305bcc43dbc13678f1d6113e76b735dba432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2492305bcc43dbc13678f1d6113e76b735dba432/comments", "author": null, "committer": null, "parents": [{"sha": "9a6dc470832ec76b46cc74f749265222efbb287a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6dc470832ec76b46cc74f749265222efbb287a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6dc470832ec76b46cc74f749265222efbb287a"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "63401fbc962f4d74c05bb593872ea0070c2f15a5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2492305bcc43dbc13678f1d6113e76b735dba432", "patch": "@@ -1,3 +1,14 @@\n+2012-10-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb (Expand_N_Case_Expression): Do not introduce\n+\tindirections when the type of the alternatives is an access type:\n+\tmore efficient, and removes anomalies when an alternative is\n+\tstatically null.\n+\n+2012-10-02  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads: Minor comment addition (Invariant is a GNAT aspect).\n+\n 2012-10-02  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb, sem_dim.adb, sem_dim.ads, prj-part.adb, checks.adb,"}, {"sha": "3b4ebcedfa76d7e579c121134cc3fe2b48280cfb", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=2492305bcc43dbc13678f1d6113e76b735dba432", "patch": "@@ -95,7 +95,7 @@ package Aspects is\n       Aspect_Implicit_Dereference,\n       Aspect_Input,\n       Aspect_Interrupt_Priority,\n-      Aspect_Invariant,\n+      Aspect_Invariant,                     -- GNAT\n       Aspect_Iterator_Element,\n       Aspect_Link_Name,\n       Aspect_Machine_Radix,"}, {"sha": "1bb9d637f637946c5887b8ace8a6f766cac8fdd9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2492305bcc43dbc13678f1d6113e76b735dba432/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=2492305bcc43dbc13678f1d6113e76b735dba432", "patch": "@@ -4797,7 +4797,7 @@ package body Exp_Ch4 is\n       --  wrong for unconstrained types (since the bounds may not be the\n       --  same in all branches). Furthermore it involves an extra copy\n       --  for large objects. So we take care of this by using the following\n-      --  modified expansion for non-scalar types:\n+      --  modified expansion for non-elementary types:\n \n       --    do\n       --       type Pnn is access all typ;\n@@ -4820,7 +4820,7 @@ package body Exp_Ch4 is\n \n       --  Scalar case\n \n-      if Is_Scalar_Type (Typ) then\n+      if Is_Elementary_Type (Typ) then\n          Ttyp := Typ;\n \n       else\n@@ -4855,7 +4855,7 @@ package body Exp_Ch4 is\n             --  As described above, take Unrestricted_Access for case of non-\n             --  scalar types, to avoid big copies, and special cases.\n \n-            if not Is_Scalar_Type (Typ) then\n+            if not Is_Elementary_Type (Typ) then\n                Aexp :=\n                  Make_Attribute_Reference (Aloc,\n                    Prefix         => Relocate_Node (Aexp),\n@@ -4890,7 +4890,7 @@ package body Exp_Ch4 is\n \n       --  Construct and return final expression with actions\n \n-      if Is_Scalar_Type (Typ) then\n+      if Is_Elementary_Type (Typ) then\n          Fexp := New_Occurrence_Of (Tnn, Loc);\n       else\n          Fexp :="}]}