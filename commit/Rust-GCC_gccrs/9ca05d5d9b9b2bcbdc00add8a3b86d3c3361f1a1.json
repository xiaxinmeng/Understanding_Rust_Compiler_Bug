{"sha": "9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "node_id": "C_kwDOANBUbNoAKDljYTA1ZDVkOWI5YjJiY2JkYzAwYWRkOGEzYjg2ZDNjMzM2MWYxYTE", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-16T17:14:56Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2022-06-16T18:41:07Z"}, "message": "c++: Elide inactive initializer fns from init array\n\nThere's no point adding no-op initializer fns (that a module might\nhave) to the static initializer list.  Also, we can add any objc\ninitializer call to a partial initializer function and simplify some\ncontrol flow.\n\n\tgcc/cp/\n\t* decl2.cc (finish_objects): Add startp parameter, adjust.\n\t(generate_ctor_or_dtor_function): Detect empty fn, and don't\n\tgenerate unnecessary code.  Remove objc startup here ...\n\t(c_parse_final_cleanyps): ... do it here.\n\n\tgcc/testsuite/\n\t* g++.dg/modules/init-2_b.C: Add init check.\n\t* g++.dg/modules/init-2_c.C: Add init check.", "tree": {"sha": "f6a67972fdbc47ac105cd85f0305a9c86605d60c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6a67972fdbc47ac105cd85f0305a9c86605d60c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c849e2fab3f682b715a81cb4ccc792f20c00eeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c849e2fab3f682b715a81cb4ccc792f20c00eeb"}], "stats": {"total": 99, "additions": 53, "deletions": 46}, "files": [{"sha": "3737e5f010cf82bc847599c6a1fa21fd484930f6", "filename": "gcc/cp/decl2.cc", "status": "modified", "additions": 51, "deletions": 46, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Fcp%2Fdecl2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Fcp%2Fdecl2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.cc?ref=9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "patch": "@@ -56,7 +56,7 @@ int raw_dump_id;\n extern cpp_reader *parse_in;\n \n static tree start_objects (bool, unsigned, bool);\n-static tree finish_objects (bool, unsigned, tree);\n+static tree finish_objects (bool, unsigned, tree, bool = true);\n static tree start_partial_init_fini_fn (bool, unsigned, unsigned);\n static void finish_partial_init_fini_fn (tree);\n static void emit_partial_init_fini_fn (bool, unsigned, tree,\n@@ -3932,16 +3932,19 @@ start_objects (bool initp, unsigned priority, bool has_body)\n   return body;\n }\n \n-/* Finish a global constructor or destructor.  */\n+/* Finish a global constructor or destructor.  Add it to the global\n+   ctors or dtors, if STARTP is true.  */\n \n static tree\n-finish_objects (bool initp, unsigned priority, tree body)\n+finish_objects (bool initp, unsigned priority, tree body, bool startp)\n {\n   /* Finish up.  */\n   finish_compound_stmt (body);\n   tree fn = finish_function (/*inline_p=*/false);\n \n-  if (initp)\n+  if (!startp)\n+    ; // Neither ctor nor dtor I be.\n+  else if (initp)\n     {\n       DECL_STATIC_CONSTRUCTOR (fn) = 1;\n       decl_init_priority_insert (fn, priority);\n@@ -4307,58 +4310,54 @@ write_out_vars (tree vars)\n     }\n }\n \n-/* Generate a static constructor (if CONSTRUCTOR_P) or destructor\n-   (otherwise) that will initialize all global objects with static\n-   storage duration having the indicated PRIORITY.  */\n+/* Generate a static constructor or destructor that calls the given\n+   init/fini fns at the indicated priority.  */\n \n static void\n generate_ctor_or_dtor_function (bool initp, unsigned priority,\n \t\t\t\ttree fns, location_t locus)\n {\n   input_location = locus;\n-\n   tree body = start_objects (initp, priority, bool (fns));\n \n-  /* To make sure dynamic construction doesn't access globals from other\n-     compilation units where they might not be yet constructed, for\n-     -fsanitize=address insert __asan_before_dynamic_init call that\n-     prevents access to either all global variables that need construction\n-     in other compilation units, or at least those that haven't been\n-     initialized yet.  Variables that need dynamic construction in\n-     the current compilation unit are kept accessible.  */\n-  if (initp && (flag_sanitize & SANITIZE_ADDRESS))\n-    finish_expr_stmt (asan_dynamic_init_call (/*after_p=*/false));\n+  if (fns)\n+    {\n+      /* To make sure dynamic construction doesn't access globals from\n+\t other compilation units where they might not be yet\n+\t constructed, for -fsanitize=address insert\n+\t __asan_before_dynamic_init call that prevents access to\n+\t either all global variables that need construction in other\n+\t compilation units, or at least those that haven't been\n+\t initialized yet.  Variables that need dynamic construction in\n+\t the current compilation unit are kept accessible.  */\n+      if (initp && (flag_sanitize & SANITIZE_ADDRESS))\n+\tfinish_expr_stmt (asan_dynamic_init_call (/*after_p=*/false));\n+\n+      /* Call the static init/fini functions.  */\n+      for (tree node = fns; node; node = TREE_CHAIN (node))\n+\t{\n+\t  tree fn = TREE_PURPOSE (node);\n \n-  if (initp && priority == DEFAULT_INIT_PRIORITY\n-      && c_dialect_objc () && objc_static_init_needed_p ())\n-    /* For Objective-C++, we may need to initialize metadata found in\n-       this module.  This must be done _before_ any other static\n-       initializations.  */\n-    objc_generate_static_init_call (NULL_TREE);\n+\t  // We should never find a pure or constant cdtor.\n+\t  gcc_checking_assert (!(flags_from_decl_or_type (fn)\n+\t\t\t\t & (ECF_CONST | ECF_PURE)));\n \n-  /* Call the static init/fini functions.  */\n-  for (tree node = fns; node; node = TREE_CHAIN (node))\n-    {\n-      tree fn = TREE_PURPOSE (node);\n-\n-      // We should never find a pure or constant cdtor.\n-      gcc_checking_assert (!(flags_from_decl_or_type (fn)\n-\t\t\t     & (ECF_CONST | ECF_PURE)));\n+\t  tree call = cp_build_function_call_nary (fn, tf_warning_or_error,\n+\t\t\t\t\t\t   NULL_TREE);\n+\t  finish_expr_stmt (call);\n+\t}\n \n-      tree call = cp_build_function_call_nary (fn, tf_warning_or_error,\n-\t\t\t\t\t       NULL_TREE);\n-      finish_expr_stmt (call);\n+      /* Revert what __asan_before_dynamic_init did by calling\n+\t __asan_after_dynamic_init.  */\n+      if (initp && (flag_sanitize & SANITIZE_ADDRESS))\n+\tfinish_expr_stmt (asan_dynamic_init_call (/*after_p=*/true));\n     }\n \n-  /* Revert what __asan_before_dynamic_init did by calling\n-     __asan_after_dynamic_init.  */\n-  if (initp && (flag_sanitize & SANITIZE_ADDRESS))\n-    finish_expr_stmt (asan_dynamic_init_call (/*after_p=*/true));\n-\n   /* Close out the function, and arrange for it to be called at init\n-     or fini time.  (Even module initializer functions need this, as\n-     we cannot guarantee the module is imported somewhere in the programq.)  */\n-  expand_or_defer_fn (finish_objects (initp, priority, body));\n+     or fini time, if non-empty.  (Even non-nop module initializer\n+     functions need this, as we cannot guarantee the module is\n+     imported somewhere in the program.)  */\n+  expand_or_defer_fn (finish_objects (initp, priority, body, fns != NULL_TREE));\n }\n \n /* Return C++ property of T, based on given operation OP.  */\n@@ -5206,18 +5205,24 @@ c_parse_final_cleanups (void)\n     objc_write_global_declarations ();\n \n   bool has_module_inits = module_determine_import_inits ();\n-  if (has_module_inits)\n+  bool has_objc_init = c_dialect_objc () && objc_static_init_needed_p ();\n+  if (has_module_inits || has_objc_init)\n     {\n       input_location = locus_at_end_of_parsing;\n       tree body = start_partial_init_fini_fn (true, DEFAULT_INIT_PRIORITY,\n \t\t\t\t\t      ssdf_count++);\n-      module_add_import_initializers ();\n+      /* For Objective-C++, we may need to initialize metadata found\n+\t in this module.  This must be done _before_ any other static\n+\t initializations.  */\n+      if (has_objc_init)\n+\tobjc_generate_static_init_call (NULL_TREE);\n+      if (has_module_inits)\n+\tmodule_add_import_initializers ();\n       input_location = locus_at_end_of_parsing;\n       finish_partial_init_fini_fn (body);\n     }\n \n-  if ((c_dialect_objc () && objc_static_init_needed_p ())\n-      || module_global_init_needed ())\n+  if (module_global_init_needed ())\n     {\n       // Make sure there's a default priority entry.\n       if (!static_init_fini_fns[true])"}, {"sha": "a98e67616a2ebf845a51534901ae08c20f212862", "filename": "gcc/testsuite/g++.dg/modules/init-2_b.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_b.C?ref=9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "patch": "@@ -8,3 +8,4 @@ import Foo;\n // There should be an idempotency check\n // { dg-final { scan-assembler {_ZZ9_ZGIW3BarE9__in_chrg} } }\n // { dg-final { scan-assembler {call[ \\t]+_?_ZGIW3Foo} { target i?86-*-* x86_64-*-* } } }\n+// { dg-final { scan-assembler {.(quad|long)[ \\t]+_ZGIW3Bar} { target i?86-*-* x86_64-*-* } } }"}, {"sha": "c386582b9c0c607bffb2c9431696e20ac77a5823", "filename": "gcc/testsuite/g++.dg/modules/init-2_c.C", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Finit-2_c.C?ref=9ca05d5d9b9b2bcbdc00add8a3b86d3c3361f1a1", "patch": "@@ -5,3 +5,4 @@ export module Baz;\n // { dg-final { scan-assembler {_ZGIW3Baz:} } }\n // But it is empty, and so no idempotency bool\n // { dg-final { scan-assembler-not {_ZZ9_ZGIW3BazE9__in_chrg} } }\n+// { dg-final { scan-assembler-not {.(quad|long)[ \\t]+_ZGIW3Baz} { target i?86-*-* x86_64-*-* } } }"}]}