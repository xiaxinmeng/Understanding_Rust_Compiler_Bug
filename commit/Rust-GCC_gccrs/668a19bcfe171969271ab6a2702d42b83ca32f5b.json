{"sha": "668a19bcfe171969271ab6a2702d42b83ca32f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY4YTE5YmNmZTE3MTk2OTI3MWFiNmEyNzAyZDQyYjgzY2EzMmY1Yg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2011-08-03T09:53:11Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-03T09:53:11Z"}, "message": "inline.adb: proper handling of init_procs.\n\n2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb: proper handling of init_procs.\n\t* sem_res.adb (Resolve_Op_Concat_Arg): if the argument is an aggregate\n\tand the component type is composite, this is ambiguous for predefined\n\tconcatenation, but if the node is not overloaded and the entity is a use\n\t-defined function its profile can be used to resolve that aggregate.\n\nFrom-SVN: r177254", "tree": {"sha": "54d88e5f353bae2cfe465967b5729b917f1aceee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54d88e5f353bae2cfe465967b5729b917f1aceee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/668a19bcfe171969271ab6a2702d42b83ca32f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668a19bcfe171969271ab6a2702d42b83ca32f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/668a19bcfe171969271ab6a2702d42b83ca32f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/668a19bcfe171969271ab6a2702d42b83ca32f5b/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "170b298986d2a6f9b9069a43db89b273640ffd31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/170b298986d2a6f9b9069a43db89b273640ffd31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/170b298986d2a6f9b9069a43db89b273640ffd31"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "403cfe79bffef25fb8b45a217d6b9704f3f26b62", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=668a19bcfe171969271ab6a2702d42b83ca32f5b", "patch": "@@ -1,3 +1,10 @@\n+2011-08-03  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Op_Concat_Arg): if the argument is an aggregate\n+\tand the component type is composite, this is ambiguous for predefined\n+\tconcatenation, but if the node is not overloaded and the entity is a use\n+\t-defined function its profile can be used to resolve that aggregate.\n+\n 2011-08-03  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch4.adb: Minor code cleanup."}, {"sha": "0d184dd45b22691834819a30e6119bb7f6cee2c1", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=668a19bcfe171969271ab6a2702d42b83ca32f5b", "patch": "@@ -344,12 +344,17 @@ package body Inline is\n                elsif not Is_Inlined (Pack)\n                  and then\n                    (not Has_Completion (E)\n-                     or else Is_Init_Proc (E)\n                      or else Is_Expression_Function (E))\n                then\n                   Set_Is_Inlined (Pack);\n                   Inlined_Bodies.Increment_Last;\n                   Inlined_Bodies.Table (Inlined_Bodies.Last) := Pack;\n+\n+               --  an initialization procedure should be inlined, but it does\n+               --  not require the body of the package.\n+\n+               elsif Is_Init_Proc (E) then\n+                  Set_Is_Inlined (Pack);\n                end if;\n             end if;\n          end;"}, {"sha": "0acf37d57c9ced88853a2c9bfa1a56aff0d883b1", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/668a19bcfe171969271ab6a2702d42b83ca32f5b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=668a19bcfe171969271ab6a2702d42b83ca32f5b", "patch": "@@ -7662,25 +7662,46 @@ package body Sem_Res is\n       Is_Comp : Boolean)\n    is\n       Btyp : constant Entity_Id := Base_Type (Typ);\n+      Ctyp : constant Entity_Id := Component_Type (Typ);\n \n    begin\n       if In_Instance then\n          if Is_Comp\n            or else (not Is_Overloaded (Arg)\n                      and then Etype (Arg) /= Any_Composite\n-                     and then Covers (Component_Type (Typ), Etype (Arg)))\n+                     and then Covers (Ctyp, Etype (Arg)))\n          then\n-            Resolve (Arg, Component_Type (Typ));\n+            Resolve (Arg, Ctyp);\n          else\n             Resolve (Arg, Btyp);\n          end if;\n \n-      elsif Has_Compatible_Type (Arg, Component_Type (Typ)) then\n+      --  If both Array & Array and Array & Component are visible, there is a\n+      --  potential ambiguity that must be reported.\n+\n+      elsif Has_Compatible_Type (Arg, Ctyp) then\n          if Nkind (Arg) = N_Aggregate\n-           and then Is_Composite_Type (Component_Type (Typ))\n+           and then Is_Composite_Type (Ctyp)\n          then\n-            if Is_Private_Type (Component_Type (Typ)) then\n+            if Is_Private_Type (Ctyp) then\n                Resolve (Arg, Btyp);\n+\n+            --  If the operation is user-defined and not overloaded use its\n+            --  profile. The operation may be a renaming, in which case it has\n+            --  been rewritten, and we want the original profile.\n+\n+            elsif not Is_Overloaded (N)\n+              and then Comes_From_Source (Entity (Original_Node (N)))\n+              and then Ekind (Entity (Original_Node (N))) = E_Function\n+            then\n+               Resolve (Arg,\n+                 Etype\n+                   (Next_Formal (First_Formal (Entity (Original_Node (N))))));\n+               return;\n+\n+            --  Otherwise an aggregate may match both the array type and the\n+            --  component type.\n+\n             else\n                Error_Msg_N (\"ambiguous aggregate must be qualified\", Arg);\n                Set_Etype (Arg, Any_Type);\n@@ -7715,16 +7736,15 @@ package body Sem_Res is\n                          Arg, Component_Type (Typ));\n \n                   else\n-                     Error_Msg_N\n-                       (\"ambiguous operand for concatenation!\", Arg);\n+                     Error_Msg_N (\"ambiguous operand for concatenation!\", Arg);\n \n                      Get_First_Interp (Arg, I, It);\n                      while Present (It.Nam) loop\n                         Error_Msg_Sloc := Sloc (It.Nam);\n \n-                        if Base_Type (It.Typ) = Base_Type (Typ)\n-                          or else Base_Type (It.Typ) =\n-                                  Base_Type (Component_Type (Typ))\n+                        if Base_Type (It.Typ) = Btyp\n+                             or else\n+                           Base_Type (It.Typ) = Base_Type (Ctyp)\n                         then\n                            Error_Msg_N -- CODEFIX\n                              (\"\\\\possible interpretation#\", Arg);"}]}