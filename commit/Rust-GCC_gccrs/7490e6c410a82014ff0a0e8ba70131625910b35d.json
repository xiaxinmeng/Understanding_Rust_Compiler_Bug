{"sha": "7490e6c410a82014ff0a0e8ba70131625910b35d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ5MGU2YzQxMGE4MjAxNGZmMGEwZThiYTcwMTMxNjI1OTEwYjM1ZA==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "dvorakz@suse.cz", "date": "2006-03-13T12:05:03Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2006-03-13T12:05:03Z"}, "message": "cfgloop.c (flow_loop_dump): Do not dump loop->invalid field.\n\n\t* cfgloop.c (flow_loop_dump): Do not dump loop->invalid field.\n\t* cfgloop.h (struct loop): Remove unused fields.\n\nFrom-SVN: r111994", "tree": {"sha": "0e54d07ebaf5972c3a958fc44714c95a9ee99779", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e54d07ebaf5972c3a958fc44714c95a9ee99779"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7490e6c410a82014ff0a0e8ba70131625910b35d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7490e6c410a82014ff0a0e8ba70131625910b35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7490e6c410a82014ff0a0e8ba70131625910b35d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7490e6c410a82014ff0a0e8ba70131625910b35d/comments", "author": null, "committer": null, "parents": [{"sha": "c607590900ffd5c6c38d47eee6198a8725dc09ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c607590900ffd5c6c38d47eee6198a8725dc09ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c607590900ffd5c6c38d47eee6198a8725dc09ef"}], "stats": {"total": 53, "additions": 6, "deletions": 47}, "files": [{"sha": "6c0e0a56021412e509fa7727e022ff53abab9273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7490e6c410a82014ff0a0e8ba70131625910b35d", "patch": "@@ -1,3 +1,8 @@\n+2006-03-13  Zdenek Dvorak <dvorakz@suse.cz>\n+\n+\t* cfgloop.c (flow_loop_dump): Do not dump loop->invalid field.\n+\t* cfgloop.h (struct loop): Remove unused fields.\n+\n 2006-03-13  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* doc/invoke.texi (-fdump-rtl-loop): Remove."}, {"sha": "d8d601e96fb6d33f74b3bd07c20dc20890c3c741", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=7490e6c410a82014ff0a0e8ba70131625910b35d", "patch": "@@ -127,8 +127,7 @@ flow_loop_dump (const struct loop *loop, FILE *file,\n   if (! loop || ! loop->header)\n     return;\n \n-  fprintf (file, \";;\\n;; Loop %d:%s\\n\", loop->num,\n-\t     loop->invalid ? \" invalid\" : \"\");\n+  fprintf (file, \";;\\n;; Loop %d\\n\", loop->num);\n \n   fprintf (file, \";;  header %d, latch %d\\n\",\n \t   loop->header->index, loop->latch->index);"}, {"sha": "c2f7bbb36380c7b76be4554a8916a87c6cf03451", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7490e6c410a82014ff0a0e8ba70131625910b35d/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=7490e6c410a82014ff0a0e8ba70131625910b35d", "patch": "@@ -78,14 +78,6 @@ struct loop\n   /* Average number of executed insns per iteration.  */\n   unsigned av_ninsns;\n \n-  /* The first block in the loop.  This is not necessarily the same as\n-     the loop header.  */\n-  basic_block first;\n-\n-  /* The last block in the loop.  This is not necessarily the same as\n-     the loop latch.  */\n-  basic_block last;\n-\n   /* Number of blocks contained within the loop.  */\n   unsigned num_nodes;\n \n@@ -111,46 +103,9 @@ struct loop\n   /* Loop that is copy of this loop.  */\n   struct loop *copy;\n \n-  /* Nonzero if the loop is invalid (e.g., contains setjmp.).  */\n-  int invalid;\n-\n   /* Auxiliary info specific to a pass.  */\n   void *aux;\n \n-  /* The following are currently used by loop.c but they are likely to\n-     disappear when loop.c is replaced and removed.  */\n-\n-  /* The NOTE_INSN_LOOP_BEG.  */\n-  rtx start;\n-\n-  /* The NOTE_INSN_LOOP_END.  */\n-  rtx end;\n-\n-  /* For a rotated loop that is entered near the bottom,\n-     this is the label at the top.  Otherwise it is zero.  */\n-  rtx top;\n-\n-  /* Place in the loop where control enters.  */\n-  rtx scan_start;\n-\n-  /* The position where to sink insns out of the loop.  */\n-  rtx sink;\n-\n-  /* List of all LABEL_REFs which refer to code labels outside the\n-     loop.  Used by routines that need to know all loop exits, such as\n-     final_biv_value and final_giv_value.\n-\n-     This does not include loop exits due to return instructions.\n-     This is because all bivs and givs are pseudos, and hence must be\n-     dead after a return, so the presence of a return does not affect\n-     any of the optimizations that use this info.  It is simpler to\n-     just not include return instructions on this list.  */\n-  rtx exit_labels;\n-\n-  /* The number of LABEL_REFs on exit_labels for this loop and all\n-     loops nested inside it.  */\n-  int exit_count;\n-\n   /* The probable number of times the loop is executed at runtime.\n      This is an INTEGER_CST or an expression containing symbolic\n      names.  Don't access this field directly:"}]}