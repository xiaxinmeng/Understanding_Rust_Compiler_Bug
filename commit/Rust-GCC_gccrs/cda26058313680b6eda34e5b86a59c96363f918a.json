{"sha": "cda26058313680b6eda34e5b86a59c96363f918a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2RhMjYwNTgzMTM2ODBiNmVkYTM0ZTViODZhNTljOTYzNjNmOTE4YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@vlsi1.ultra.nyu.edu", "date": "2003-03-05T23:56:15Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2003-03-05T23:56:15Z"}, "message": "stmt.c (fixup_gotos): Change meaning of DONT_JUMP_IN.\n\n\t* stmt.c (fixup_gotos): Change meaning of DONT_JUMP_IN.\n\t(expand_end_bindings): Likewise.\n\nFrom-SVN: r63874", "tree": {"sha": "9a89d47cfdd84a5c2671e6971e9453d469aaa4e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a89d47cfdd84a5c2671e6971e9453d469aaa4e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cda26058313680b6eda34e5b86a59c96363f918a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda26058313680b6eda34e5b86a59c96363f918a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cda26058313680b6eda34e5b86a59c96363f918a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cda26058313680b6eda34e5b86a59c96363f918a/comments", "author": null, "committer": null, "parents": [{"sha": "c965b169438a609791fa0b0922b8aea3adb37c4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c965b169438a609791fa0b0922b8aea3adb37c4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c965b169438a609791fa0b0922b8aea3adb37c4d"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "8a7b8b3f6c55e3513e68e81d122c2ad9d9937cb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda26058313680b6eda34e5b86a59c96363f918a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda26058313680b6eda34e5b86a59c96363f918a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cda26058313680b6eda34e5b86a59c96363f918a", "patch": "@@ -1,3 +1,8 @@\n+Wed Mar  5 18:55:02 2003  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n+\n+\t* stmt.c (fixup_gotos): Change meaning of DONT_JUMP_IN.\n+\t(expand_end_bindings): Likewise.\n+\n 2003-03-05  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.md (return_external_pic): Add !TARGET_PA_20 to constraint."}, {"sha": "74d5f3de38c16165907d686653114366b3d163a4", "filename": "gcc/stmt.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cda26058313680b6eda34e5b86a59c96363f918a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cda26058313680b6eda34e5b86a59c96363f918a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=cda26058313680b6eda34e5b86a59c96363f918a", "patch": "@@ -947,9 +947,9 @@ expand_fixups (first_insn)\n    Gotos that jump out of this contour must restore the\n    stack level and do the cleanups before actually jumping.\n \n-   DONT_JUMP_IN nonzero means report error there is a jump into this\n-   contour from before the beginning of the contour.\n-   This is also done if STACK_LEVEL is nonzero.  */\n+   DONT_JUMP_IN positive means report error if there is a jump into this\n+   contour from before the beginning of the contour.  This is also done if\n+   STACK_LEVEL is nonzero unless DONT_JUMP_IN is negative.  */\n \n static void\n fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n@@ -991,7 +991,8 @@ fixup_gotos (thisblock, stack_level, cleanup_list, first_insn, dont_jump_in)\n \t     It detects only a problem with the innermost block\n \t     around the label.  */\n \t  if (f->target != 0\n-\t      && (dont_jump_in || stack_level || cleanup_list)\n+\t      && (dont_jump_in > 0 || (dont_jump_in == 0 && stack_level)\n+\t\t  || cleanup_list)\n \t      && INSN_UID (first_insn) < INSN_UID (f->target_rtl)\n \t      && INSN_UID (first_insn) > INSN_UID (f->before_jump)\n \t      && ! DECL_ERROR_ISSUED (f->target))\n@@ -3714,8 +3715,10 @@ warn_about_unused_variables (vars)\n    MARK_ENDS is nonzero if we should put a note at the beginning\n    and end of this binding contour.\n \n-   DONT_JUMP_IN is nonzero if it is not valid to jump into this contour.\n-   (That is true automatically if the contour has a saved stack level.)  */\n+   DONT_JUMP_IN is positive if it is not valid to jump into this contour,\n+   zero if we can jump into this contour only if it does not have a saved\n+   stack level, and negative if we are not to check for invalid use of\n+   labels (because the front end does that).  */\n \n void\n expand_end_bindings (vars, mark_ends, dont_jump_in)\n@@ -3750,8 +3753,8 @@ expand_end_bindings (vars, mark_ends, dont_jump_in)\n \n   /* Don't allow jumping into a block that has a stack level.\n      Cleanups are allowed, though.  */\n-  if (dont_jump_in\n-      || thisblock->data.block.stack_level != 0)\n+  if (dont_jump_in > 0\n+      || (dont_jump_in == 0 && thisblock->data.block.stack_level != 0))\n     {\n       struct label_chain *chain;\n "}]}