{"sha": "0683fd27deb878be38f120cce3acbe4d32132b20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDY4M2ZkMjdkZWI4NzhiZTM4ZjEyMGNjZTNhY2JlNGQzMjEzMmIyMA==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-02-24T13:00:10Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-02-24T13:00:10Z"}, "message": "[gcse] PR rtl-optimization/69886: Check target mode in can_assign_to_reg_without_clobbers_p\n\n\tPR rtl-optimization/69886\n\t* gcse.c (can_assign_to_reg_without_clobbers_p): Accept mode\n\targument.  Use it when checking validity of set instructions.\n\t(want_to_gcse_p): Pass mode to can_assign_to_reg_without_clobbers_p.\n\t(compute_ld_motion_mems): Update can_assign_to_reg_without_clobbers_p\n\tcallsite.\n\t* rtl.h (can_assign_to_reg_without_clobbers_p): Update prototype.\n\t* store-motion.c (find_moveable_store): Update\n\tcan_assign_to_reg_without_clobbers_p callsite.\n\n\t* gcc.dg/torture/pr69886.c: New test.\n\nFrom-SVN: r233662", "tree": {"sha": "8426f9185336f0555756df5729d96189e001db5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8426f9185336f0555756df5729d96189e001db5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0683fd27deb878be38f120cce3acbe4d32132b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0683fd27deb878be38f120cce3acbe4d32132b20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0683fd27deb878be38f120cce3acbe4d32132b20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0683fd27deb878be38f120cce3acbe4d32132b20/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e53d562a36ead2279b98bc7cde3abe9606b44ee2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e53d562a36ead2279b98bc7cde3abe9606b44ee2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e53d562a36ead2279b98bc7cde3abe9606b44ee2"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "9f6ae5e1e1a6513080d0e2fbd6c92dcb580e3888", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -1,3 +1,15 @@\n+2016-02-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/69886\n+\t* gcse.c (can_assign_to_reg_without_clobbers_p): Accept mode\n+\targument.  Use it when checking validity of set instructions.\n+\t(want_to_gcse_p): Pass mode to can_assign_to_reg_without_clobbers_p.\n+\t(compute_ld_motion_mems): Update can_assign_to_reg_without_clobbers_p\n+\tcallsite.\n+\t* rtl.h (can_assign_to_reg_without_clobbers_p): Update prototype.\n+\t* store-motion.c (find_moveable_store): Update\n+\tcan_assign_to_reg_without_clobbers_p callsite.\n+\n 2016-02-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68963"}, {"sha": "51277a1cb613a4005ee240c51949083daed8c54c", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -810,17 +810,17 @@ want_to_gcse_p (rtx x, machine_mode mode, int *max_distance_ptr)\n \t    *max_distance_ptr = max_distance;\n \t}\n \n-      return can_assign_to_reg_without_clobbers_p (x);\n+      return can_assign_to_reg_without_clobbers_p (x, mode);\n     }\n }\n \n /* Used internally by can_assign_to_reg_without_clobbers_p.  */\n \n static GTY(()) rtx_insn *test_insn;\n \n-/* Return true if we can assign X to a pseudo register such that the\n-   resulting insn does not result in clobbering a hard register as a\n-   side-effect.\n+/* Return true if we can assign X to a pseudo register of mode MODE\n+   such that the resulting insn does not result in clobbering a hard\n+   register as a side-effect.\n \n    Additionally, if the target requires it, check that the resulting insn\n    can be copied.  If it cannot, this means that X is special and probably\n@@ -831,14 +831,14 @@ static GTY(()) rtx_insn *test_insn;\n    maybe live hard regs.  */\n \n bool\n-can_assign_to_reg_without_clobbers_p (rtx x)\n+can_assign_to_reg_without_clobbers_p (rtx x, machine_mode mode)\n {\n   int num_clobbers = 0;\n   int icode;\n   bool can_assign = false;\n \n   /* If this is a valid operand, we are OK.  If it's VOIDmode, we aren't.  */\n-  if (general_operand (x, GET_MODE (x)))\n+  if (general_operand (x, mode))\n     return 1;\n   else if (GET_MODE (x) == VOIDmode)\n     return 0;\n@@ -857,7 +857,7 @@ can_assign_to_reg_without_clobbers_p (rtx x)\n \n   /* Now make an insn like the one we would make when GCSE'ing and see if\n      valid.  */\n-  PUT_MODE (SET_DEST (PATTERN (test_insn)), GET_MODE (x));\n+  PUT_MODE (SET_DEST (PATTERN (test_insn)), mode);\n   SET_SRC (PATTERN (test_insn)) = x;\n \n   icode = recog (PATTERN (test_insn), test_insn, &num_clobbers);\n@@ -3830,12 +3830,13 @@ compute_ld_motion_mems (void)\n \t\t  if (MEM_P (dest) && simple_mem (dest))\n \t\t    {\n \t\t      ptr = ldst_entry (dest);\n-\n+\t\t      machine_mode src_mode = GET_MODE (src);\n \t\t      if (! MEM_P (src)\n \t\t\t  && GET_CODE (src) != ASM_OPERANDS\n \t\t\t  /* Check for REG manually since want_to_gcse_p\n \t\t\t     returns 0 for all REGs.  */\n-\t\t\t  && can_assign_to_reg_without_clobbers_p (src))\n+\t\t\t  && can_assign_to_reg_without_clobbers_p (src,\n+\t\t\t\t\t\t\t\t    src_mode))\n \t\t\tptr->stores = alloc_INSN_LIST (insn, ptr->stores);\n \t\t      else\n \t\t\tptr->invalid = 1;"}, {"sha": "c91d60d3c908727223c33a18b91442efb23d8094", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -3592,7 +3592,7 @@ extern void init_lower_subreg (void);\n \n /* In gcse.c */\n extern bool can_copy_p (machine_mode);\n-extern bool can_assign_to_reg_without_clobbers_p (rtx);\n+extern bool can_assign_to_reg_without_clobbers_p (rtx, machine_mode);\n extern rtx fis_get_condition (rtx_insn *);\n \n /* In ira.c */"}, {"sha": "fffdffc3c346dc80693148f0250fe4dd77fe06ea", "filename": "gcc/store-motion.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Fstore-motion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Fstore-motion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstore-motion.c?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -557,7 +557,8 @@ find_moveable_store (rtx_insn *insn, int *regs_set_before, int *regs_set_after)\n      assumes that we can do this.  But sometimes the target machine has\n      oddities like MEM read-modify-write instruction.  See for example\n      PR24257.  */\n-  if (!can_assign_to_reg_without_clobbers_p (SET_SRC (set)))\n+  if (!can_assign_to_reg_without_clobbers_p (SET_SRC (set),\n+\t\t\t\t\t      GET_MODE (SET_SRC (set))))\n     return;\n \n   ptr = st_expr_entry (dest);"}, {"sha": "710dd11d7704d4ecdc48957d98363b4c659f7b5f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -1,3 +1,8 @@\n+2016-02-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\tPR rtl-optimization/69886\n+\t* gcc.dg/torture/pr69886.c: New test.\n+\n 2016-02-24  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/68963"}, {"sha": "d896d4fec9be43641f36dd694954da03ae29db1f", "filename": "gcc/testsuite/gcc.dg/torture/pr69886.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69886.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0683fd27deb878be38f120cce3acbe4d32132b20/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69886.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr69886.c?ref=0683fd27deb878be38f120cce3acbe4d32132b20", "patch": "@@ -0,0 +1,15 @@\n+/* PR rtl-optimization/69886.  */\n+/* { dg-do compile } */\n+/* { dg-options \"--param=gcse-unrestricted-cost=0\" } */\n+/* { dg-additional-options \"-mavx\" { target { i?86-*-* x86_64-*-* } } } */\n+\n+typedef unsigned v32su __attribute__ ((vector_size (32)));\n+\n+unsigned\n+foo (v32su v32su_0, v32su v32su_1, v32su v32su_2, v32su v32su_3, v32su v32su_4)\n+{\n+  v32su_3 += v32su_2 *= v32su_2[3];\n+  if (v32su_4[3])\n+    v32su_2 &= (v32su){ v32su_1[3], 0xbb72, 64 };\n+  return v32su_0[2] + v32su_2[4] + v32su_3[1];\n+}"}]}