{"sha": "592fe221735bdaa375b1834dd49ce125d0b600d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTkyZmUyMjE3MzViZGFhMzc1YjE4MzRkZDQ5Y2UxMjVkMGI2MDBkOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-07T14:49:00Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-07T14:49:00Z"}, "message": "c++: Distinguish alignof and __alignof__ in cp_tree_equal [PR97273]\n\ncp_tree_equal currently considers alignof the same as __alignof__, but\nthese operators are semantically different ever since r8-7957.  In the\ntestcase below, this causes the second static_assert to fail on targets\nwhere alignof(double) != __alignof__(double) because the specialization\ntable (which uses cp_tree_equal as its equality predicate) conflates the\ntwo dependent specializations integral_constant<__alignof__(T)> and\nintegral_constant<alignof(T)>.\n\nThis patch makes cp_tree_equal distinguish between these two operators\nby inspecting the ALIGNOF_EXPR_STD_P flag.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/88115\n\tPR libstdc++/97273\n\t* tree.c (cp_tree_equal) <case ALIGNOF_EXPR>: Return false if\n\tALIGNOF_EXPR_STD_P differ.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/88115\n\tPR libstdc++/97273\n\t* g++.dg/template/alignof3.C: New test.", "tree": {"sha": "0dfbac3922630cfb34eaecf8d06ff87b1e2ac6f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dfbac3922630cfb34eaecf8d06ff87b1e2ac6f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/592fe221735bdaa375b1834dd49ce125d0b600d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592fe221735bdaa375b1834dd49ce125d0b600d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/592fe221735bdaa375b1834dd49ce125d0b600d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/592fe221735bdaa375b1834dd49ce125d0b600d8/comments", "author": null, "committer": null, "parents": [{"sha": "4e9213027587b807ca7e4bbde706b19102342d37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e9213027587b807ca7e4bbde706b19102342d37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e9213027587b807ca7e4bbde706b19102342d37"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "9bc37aca95b2da5419123855f0a610d3d0f73b12", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592fe221735bdaa375b1834dd49ce125d0b600d8/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592fe221735bdaa375b1834dd49ce125d0b600d8/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=592fe221735bdaa375b1834dd49ce125d0b600d8", "patch": "@@ -3803,6 +3803,8 @@ cp_tree_equal (tree t1, tree t2)\n \t    if (SIZEOF_EXPR_TYPE_P (t2))\n \t      o2 = TREE_TYPE (o2);\n \t  }\n+\telse if (ALIGNOF_EXPR_STD_P (t1) != ALIGNOF_EXPR_STD_P (t2))\n+\t  return false;\n \n \tif (TREE_CODE (o1) != TREE_CODE (o2))\n \t  return false;"}, {"sha": "e573727c5f24e71d5f3b47f12d22723ac5f95154", "filename": "gcc/testsuite/g++.dg/template/alignof3.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/592fe221735bdaa375b1834dd49ce125d0b600d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Falignof3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/592fe221735bdaa375b1834dd49ce125d0b600d8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Falignof3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Falignof3.C?ref=592fe221735bdaa375b1834dd49ce125d0b600d8", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/88115\n+// { dg-do compile { target c++11 } }\n+\n+template<int __v>\n+struct integral_constant {\n+  static constexpr int value = __v;\n+};\n+\n+template <class T> using StdAlignOf = integral_constant<alignof(T)>;\n+template <class T> using GCCAlignOf = integral_constant<__alignof__(T)>;\n+\n+static_assert(StdAlignOf<double>::value == alignof(double), \"\");\n+static_assert(GCCAlignOf<double>::value == __alignof__(double), \"\");"}]}