{"sha": "f6af9a152749a805593d48c347ac9e0f5cff1f5e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhZjlhMTUyNzQ5YTgwNTU5M2Q0OGMzNDdhYzllMGY1Y2ZmMWY1ZQ==", "commit": {"author": {"name": "Matt Austern", "email": "austern@apple.com", "date": "2004-10-29T00:50:44Z"}, "committer": {"name": "Matt Austern", "email": "austern@gcc.gnu.org", "date": "2004-10-29T00:50:44Z"}, "message": "c++/14124\n\n* decl.c (finish_enum): Handle packed attribute.\n* parser.c (cp_parser_enum_specifier): Process trailing attributes.\n* g++.dg/ext/packed7.C: New test.\n\nFrom-SVN: r89801", "tree": {"sha": "67705cf4a24be44b751b7fa552e04b2fcb416fa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67705cf4a24be44b751b7fa552e04b2fcb416fa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6af9a152749a805593d48c347ac9e0f5cff1f5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6af9a152749a805593d48c347ac9e0f5cff1f5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6af9a152749a805593d48c347ac9e0f5cff1f5e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6af9a152749a805593d48c347ac9e0f5cff1f5e/comments", "author": null, "committer": null, "parents": [{"sha": "0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f84c36ef44ee5b4571b542a3a46307ec7bbb3de"}], "stats": {"total": 50, "additions": 48, "deletions": 2}, "files": [{"sha": "5aa869c5320eae8336e417dcf6466b7b47699638", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f6af9a152749a805593d48c347ac9e0f5cff1f5e", "patch": "@@ -1,3 +1,9 @@\n+1004-10-28  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/14124\n+\t* decl.c (finish_enum): Handle packed attribute.\n+\t* parser.c (cp_parser_enum_specifier): Process trailing attributes.\n+\t\n 2004-10-28  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/17132"}, {"sha": "4d74a2a2e654d7c2351e5e1480d869d61f7d6677", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f6af9a152749a805593d48c347ac9e0f5cff1f5e", "patch": "@@ -9504,6 +9504,7 @@ finish_enum (tree enumtype)\n   tree maxnode;\n   tree t;\n   bool unsignedp;\n+  bool use_short_enum;\n   int lowprec;\n   int highprec;\n   int precision;\n@@ -9586,8 +9587,14 @@ finish_enum (tree enumtype)\n \n      We use \"int\" or an \"unsigned int\" as the underlying type, even if\n      a smaller integral type would work, unless the user has\n-     explicitly requested that we use the smallest possible type.  */\n-  for (itk = (flag_short_enums ? itk_char : itk_int);\n+     explicitly requested that we use the smallest possible type.  The\n+     user can request that for all enumerations with a command line\n+     flag, or for just one enumeration with an attribute. */\n+\n+  use_short_enum = flag_short_enums\n+    || lookup_attribute (\"packed\", TYPE_ATTRIBUTES (enumtype));\n+\n+  for (itk = (use_short_enum ? itk_char : itk_int);\n        itk != itk_none;\n        itk++)\n     {"}, {"sha": "8fed7ba9da8226b87976c014ab0b8d1dda9be10e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=f6af9a152749a805593d48c347ac9e0f5cff1f5e", "patch": "@@ -9754,6 +9754,9 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n    enum-specifier:\n      enum identifier [opt] { enumerator-list [opt] }\n \n+   GNU Extensions:\n+     enum identifier [opt] { enumerator-list [opt] } attributes\n+\n    Returns an ENUM_TYPE representing the enumeration.  */\n \n static tree\n@@ -9791,6 +9794,16 @@ cp_parser_enum_specifier (cp_parser* parser)\n   /* Consume the final '}'.  */\n   cp_parser_require (parser, CPP_CLOSE_BRACE, \"`}'\");\n \n+  /* Look for trailing attributes to apply to this enumeration, and\n+     apply them if appropriate. */\n+  if (cp_parser_allow_gnu_extensions_p (parser))\n+    {\n+      tree trailing_attr = cp_parser_attributes_opt (parser);\n+      cplus_decl_attributes (&type,\n+\t\t\t     trailing_attr,\n+\t\t\t     (int) ATTR_FLAG_TYPE_IN_PLACE);\n+    }\n+\n   /* Finish up the enumeration.  */\n   finish_enum (type);\n "}, {"sha": "7667f42d1d27fcfdeed6f360ee53bd480559c5c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6af9a152749a805593d48c347ac9e0f5cff1f5e", "patch": "@@ -1,3 +1,8 @@\n+1004-10-28  Matt Austern  <austern@apple.com>\n+\n+\tPR c++/14124\n+\t* g++.dg/ext/packed7.C: New test.\n+\t\n 2004-10-28  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* gcc.dg/visibility-[1-9a].c: Change to use scan-hidden instead of"}, {"sha": "e2f74e026328a75afc1141115307e4e2e46012f2", "filename": "gcc/testsuite/g++.dg/ext/packed7.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6af9a152749a805593d48c347ac9e0f5cff1f5e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fpacked7.C?ref=f6af9a152749a805593d48c347ac9e0f5cff1f5e", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/14124\n+// A packed enum uses the minimal underlying type.\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Contributed by Matt Austern  <austern@apple.com>\n+\n+// { dg-do run }\n+\n+enum XXX { xyzzy = 3 } __attribute__((packed));\n+\n+int main()\n+{\n+  int enumsize = sizeof(xyzzy);\n+  return (enumsize == 1) ? 0 : 1;\n+}"}]}