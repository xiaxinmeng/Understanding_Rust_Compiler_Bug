{"sha": "76a553587f3181605c57801c37b0d3e94ce3aca5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzZhNTUzNTg3ZjMxODE2MDVjNTc4MDFjMzdiMGQzZTk0Y2UzYWNhNQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:27Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-05T18:26:27Z"}, "message": "VAX: Fix the LTO compiler downgrading code to non-PIC model\n\nFix a testsuite failure:\n\n/tmp/ccL65Mmt.s: Assembler messages:\n/tmp/ccL65Mmt.s:36: Warning: Symbol n used as immediate operand in PIC mode.\nFAIL: gcc.dg/lto/pr55660 c_lto_pr55660_0.o-c_lto_pr55660_1.o link, -O0 -flto -flto-partition=none -fuse-linker-plugin\n\nwhere non-PIC code is substituted by the LTO compiler at the link stage\nfor what used to be PIC code in the original compilation.  This happens\nbecause in the de-facto VAX ELF psABI we rely on code being PIC for GOT\nsupport in dynamic executables and arrange that by having `-fPIC' passed\nto the compiler by default by means of a specs recipe.\n\nThat is however canceled where the LTO wrapper is used, by an internal\narrangement in the LTO compiler that clears the PIC flag whenever the\n`-flinker-output=exec' option has been used.  This has been deliberately\nintroduced with commit 1ff9ed6fb282 (\"re PR lto/67548 (LTO drops weak\nbinding with \"ld -r\")\")[1]:\n\n\"In the log of PR67548 HJ actually pointed out that we do have API at\nlinker plugin side which says what type of output is done.  This is cool\nbecause we can also use it to drop -fpic when building static binary.\nThis is common in Firefox, where some objects are built with -fpic and\nlinked to both binaries and libraries.\"\n\nwith this code:\n\n    case LTO_LINKER_OUTPUT_EXEC: /* Normal executable */\n      flag_pic = 0;\n      flag_pie = 0;\n      flag_shlib = 0;\n      break;\n\nConsequently code like:\n\n.L6:\n\taddl3 -8(%fp),$n,%r0\n\tpushl %r0\n\tcalls $1,foo\n\taddl2 %r0,-12(%fp)\n\tincl -8(%fp)\n.L5:\n\nis produced by the LTO compiler, where a reference to `n' is used that\nis invalid in PIC code, because it uses the immediate addressing mode,\ndenoted by the `$' prefix.\n\nFor that not to happen we must never pass `-flinker-output=exec' to the\nLTO compiler unless non-PIC code has been explicitly requested.  Using\n`-flinker-output=dyn' except for relocatable output would seem the\nsimplest approach, as it does not fiddle with any of the internal code\nmodel settings beyond what the command-line options have arranged and\ntherefore lets them remain the same as with the original compilation,\nbut it breaks as well causing PR lto/69866 to retrigger, as that code\nseems sensitive to `flag_shlib':\n\nlto1: internal compiler error: in add_symbol_to_partition_1, at lto/lto-partition.c:152\n0x105be1cb add_symbol_to_partition_1\n\t.../gcc/lto/lto-partition.c:152\n0x105be443 add_symbol_to_partition_1\n\t.../gcc/lto/lto-partition.c:194\n0x105be80f add_symbol_to_partition\n\t.../gcc/lto/lto-partition.c:270\n0x105bee6f add_sorted_nodes\n\t.../gcc/lto/lto-partition.c:395\n0x105c0903 lto_balanced_map(int, int)\n\t.../gcc/lto/lto-partition.c:815\n0x105aa91f do_whole_program_analysis\n\t.../gcc/lto/lto.c:499\n0x105aac97 lto_main()\n\t.../gcc/lto/lto.c:637\nPlease submit a full bug report,\nwith preprocessed source if appropriate.\nPlease include the complete backtrace with any bug report.\nSee <https://gcc.gnu.org/bugs/> for instructions.\nlto-wrapper: fatal error: .../gcc/xgcc returned 1 exit status\ncompilation terminated.\n.../usr/bin/vax-netbsdelf-ld: error: lto-wrapper failed\ncollect2: error: ld returned 1 exit status\ncompiler exited with status 1\nFAIL: gcc.dg/lto/pr69866 c_lto_pr69866_0.o-c_lto_pr69866_1.o link, -O0 -flto -fuse-linker-plugin -fno-fat-lto-objects  (internal compiler error)\n\nSubstitute `-flinker-output=pie' for `-flinker-output=exec' in the specs\nthen unless `-no-pie' has also been used, preserving the original intent\nof emitting PIC code by default for executables while keeping the linker\narrangement unchanged.  The LTO compiler uses the `cc1' spec, so keep\n`cc1plus' unmodified.\n\nThis makes code like:\n\n.L6:\n\tmovab n,%r0\n\taddl2 -8(%fp),%r0\n\tpushl %r0\n\tcalls $1,foo\n\taddl2 %r0,-12(%fp)\n\tincl -8(%fp)\n.L5:\n\nbe produced instead corresponding to the fragment quoted above, which is\nvalid PIC code as it uses the PC-relative addressing mode denoted by the\nabsence of a prefix to `n' (which can be redirected to GOT as required,\nby changing the addressing mode to PC-relative indirect in the operand\nspecifier).\n\nIdeally we would instead default to the PIE model for executables, but\nthat triggers a BFD bug where for a change the LTO wrapper is not used:\n\n.../usr/bin/vax-netbsdelf-ld: /tmp/ccV2sWQt.ltrans0.ltrans.o: warning: GOT addend of 3 to `n' does not match previous GOT addend of 0\nFAIL: gcc.dg/lto/pr55660 c_lto_pr55660_0.o-c_lto_pr55660_1.o link, -O2 -flto -flto-partition=1to1 -fno-use-linker-plugin\n\nwhich is due to assembly code like:\n\nmain:\n\t.word 0\n\tsubl2 $4,%sp\n\tmovab n,%r0\n\tmovab n+3,%r2\n\tclrl %r3\n\tmovb $98,%r1\n.L4:\n\nand consequently object code like:\n\n00000000 <main>:\n   0:\t00 00       \t.word 0x0000 # Entry mask: < >\n   2:\tc2 04 5e    \tsubl2 $0x4,sp\n   5:\t9e ef 00 00 \tmovab b <main+0xb>,r0\n   9:\t00 00 50\n\t\t\t7: R_VAX_GOT32\tn\n   c:\t9e ef 00 00 \tmovab 12 <main+0x12>,r2\n  10:\t00 00 52\n\t\t\te: R_VAX_GOT32\tn+0x3\n  13:\td4 53       \tclrf r3\n  15:\t90 8f 62 51 \tmovb $0x62,r1\n\nbeing produced.  This would be problematic for external `n', because we\ndo not support multiple GOT entries for the same symbol referred to with\ndifferent offsets in a single link unit.  In this case however the LTO\ncompiler correctly observes that `n' is defined by the executable and\nnot preemptible and therefore no GOT entry will be made for it.\n\nIndeed a valid executable is produced:\n\n00010548 <main>:\n   10548:\t00 00       \t.word 0x0000 # Entry mask: < >\n   1054a:\tc2 04 5e    \tsubl2 $0x4,sp\n   1054d:\t9e ef dd 14 \tmovab 11a30 <n>,r0\n   10551:\t00 00 50\n   10554:\t9e ef d9 14 \tmovab 11a33 <__bss_start>,r2\n   10558:\t00 00 52\n   1055b:\td4 53       \tclrf r3\n   1055d:\t90 8f 62 51 \tmovb $0x62,r1\n\ndespite the warning, but it would be rather bad to have users annoyed\nwith this message from BFD, however harmless, especially as it triggers\noutside LTO compilations as well.\n\nTherefore this change is the best we can do until binutils have been\nfixed.\n\nReferences:\n\n[1] Jan Hubicka, \"Getting LTO incremental linking work\",\n    <https://gcc.gnu.org/ml/gcc-patches/2015-11/msg02986.html>\n\n\tgcc/\n\t* config/vax/elf.h (VAX_CC1_SPEC, VAX_CC1PLUS_SPEC): New macros.\n\t* config/vax/netbsd-elf.h (CC1_SPEC): Use VAX_CC1_SPEC rather\n\tthan VAX_CC1_AND_CC1PLUS_SPEC.\n\t(CC1PLUS_SPEC): Use VAX_CC1PLUS_SPEC rather than\n\tVAX_CC1_AND_CC1PLUS_SPEC.", "tree": {"sha": "9569ce9897e7810e614e873f8b783eb8c681a7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9569ce9897e7810e614e873f8b783eb8c681a7af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/76a553587f3181605c57801c37b0d3e94ce3aca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a553587f3181605c57801c37b0d3e94ce3aca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76a553587f3181605c57801c37b0d3e94ce3aca5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76a553587f3181605c57801c37b0d3e94ce3aca5/comments", "author": null, "committer": null, "parents": [{"sha": "c60d0736dff72af730261483945b1a7cfd2a0021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c60d0736dff72af730261483945b1a7cfd2a0021", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c60d0736dff72af730261483945b1a7cfd2a0021"}], "stats": {"total": 14, "additions": 12, "deletions": 2}, "files": [{"sha": "530b2c05ed2a5798957bb80c5d749fdf2ce7fd01", "filename": "gcc/config/vax/elf.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a553587f3181605c57801c37b0d3e94ce3aca5/gcc%2Fconfig%2Fvax%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a553587f3181605c57801c37b0d3e94ce3aca5/gcc%2Fconfig%2Fvax%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Felf.h?ref=76a553587f3181605c57801c37b0d3e94ce3aca5", "patch": "@@ -89,6 +89,16 @@ along with GCC; see the file COPYING3.  If not see\n      %{!fpic: \\\n        %{!fPIC:-fPIC}}}\"\n \n+/* Don't let the LTO compiler switch the PIC options off.  */\n+#define VAX_CC1_SPEC \\\n+  VAX_CC1_AND_CC1PLUS_SPEC \\\n+  \" %{flinker-output=exec\" \\\n+  \":%{no-pie:-flinker-output=exec;:-flinker-output=pie};\" \\\n+  \":%{flinker-output=*}}\" \\\n+  \"%<flinker-output*\"\n+#define VAX_CC1PLUS_SPEC \\\n+  VAX_CC1_AND_CC1PLUS_SPEC\n+\n /* VAX ELF is always gas; override the generic VAX ASM_SPEC.  */\n \n #undef ASM_SPEC"}, {"sha": "9a01fddf9c016166a680c54974e24a57e88a729b", "filename": "gcc/config/vax/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/76a553587f3181605c57801c37b0d3e94ce3aca5/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/76a553587f3181605c57801c37b0d3e94ce3aca5/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fnetbsd-elf.h?ref=76a553587f3181605c57801c37b0d3e94ce3aca5", "patch": "@@ -35,10 +35,10 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n \n #undef CC1_SPEC\n-#define CC1_SPEC NETBSD_CC1_AND_CC1PLUS_SPEC VAX_CC1_AND_CC1PLUS_SPEC\n+#define CC1_SPEC NETBSD_CC1_AND_CC1PLUS_SPEC VAX_CC1_SPEC\n \n #undef CC1PLUS_SPEC\n-#define CC1PLUS_SPEC NETBSD_CC1_AND_CC1PLUS_SPEC VAX_CC1_AND_CC1PLUS_SPEC\n+#define CC1PLUS_SPEC NETBSD_CC1_AND_CC1PLUS_SPEC VAX_CC1PLUS_SPEC\n \n #define NETBSD_ENTRY_POINT \"__start\"\n "}]}