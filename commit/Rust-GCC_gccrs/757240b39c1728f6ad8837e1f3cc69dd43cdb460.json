{"sha": "757240b39c1728f6ad8837e1f3cc69dd43cdb460", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3MjQwYjM5YzE3MjhmNmFkODgzN2UxZjNjYzY5ZGQ0M2NkYjQ2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:30:06Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-24T14:30:06Z"}, "message": "[multiple changes]\n\n2009-04-24  Emmanuel Briot  <briot@adacore.com>\n\n\t* prj.ads, prj-nmsc.adb (Unit_Project): removed, since in fact we were\n\tonly ever using the Project field.\n\n2009-04-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Build_Instance_Compilation_Unit_Nodes): Do not set\n\tBody_Required on the generated compilation node. The new node is linked\n\tto its body, but both share the same file, so we do not set this flag\n\ton the new unit so as not to create a spurious dependency on a\n\tnon-existent body in the ali file for the instance.\n\n2009-04-24  Robert Dewar  <dewar@adacore.com>\n\n\t* make.adb: Minor reformatting\n\nFrom-SVN: r146725", "tree": {"sha": "a5ef738600d56b44c7fb708a09a1a661545f7ada", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5ef738600d56b44c7fb708a09a1a661545f7ada"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/757240b39c1728f6ad8837e1f3cc69dd43cdb460", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757240b39c1728f6ad8837e1f3cc69dd43cdb460", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757240b39c1728f6ad8837e1f3cc69dd43cdb460", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757240b39c1728f6ad8837e1f3cc69dd43cdb460/comments", "author": null, "committer": null, "parents": [{"sha": "aca532984541ebca71db7cff750d36f9e25465b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aca532984541ebca71db7cff750d36f9e25465b9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aca532984541ebca71db7cff750d36f9e25465b9"}], "stats": {"total": 323, "additions": 163, "deletions": 160}, "files": [{"sha": "97f8b84482a8492b7c9410453395eb6f7d55201a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=757240b39c1728f6ad8837e1f3cc69dd43cdb460", "patch": "@@ -1,3 +1,20 @@\n+2009-04-24  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* prj.ads, prj-nmsc.adb (Unit_Project): removed, since in fact we were\n+\tonly ever using the Project field.\n+\n+2009-04-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Build_Instance_Compilation_Unit_Nodes): Do not set\n+\tBody_Required on the generated compilation node. The new node is linked\n+\tto its body, but both share the same file, so we do not set this flag\n+\ton the new unit so as not to create a spurious dependency on a\n+\tnon-existent body in the ali file for the instance.\n+\n+2009-04-24  Robert Dewar  <dewar@adacore.com>\n+\n+\t* make.adb: Minor reformatting\n+\n 2009-04-24  Emmanuel Briot  <briot@adacore.com>\n \n \t* prj.adb, prj.ads, prj-nmsc.adb (Check_File, Record_Ada_Source,"}, {"sha": "21dac167187a35ce4d361323b92fae68c79ee1d9", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=757240b39c1728f6ad8837e1f3cc69dd43cdb460", "patch": "@@ -6574,9 +6574,10 @@ package body Make is\n \n                   declare\n                      Dir_Path : constant String :=\n-                       Get_Name_String\n-                         (Project_Tree.Projects.Table\n-                              (Main_Project).Directory.Name);\n+                                  Get_Name_String\n+                                    (Project_Tree.Projects.Table\n+                                      (Main_Project).Directory.Name);\n+\n                   begin\n                      for\n                        J in Last_Binder_Switch + 1 .. Binder_Switches.Last"}, {"sha": "2cc5fc5fc67c2dd6d4524da9d0e86ead7d3072d3", "filename": "gcc/ada/prj-nmsc.adb", "status": "modified", "additions": 117, "deletions": 129, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fprj-nmsc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fprj-nmsc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj-nmsc.adb?ref=757240b39c1728f6ad8837e1f3cc69dd43cdb460", "patch": "@@ -492,8 +492,7 @@ package body Prj.Nmsc is\n       Naming              : Naming_Data;\n       Exception_Id        : out Ada_Naming_Exception_Id;\n       Unit_Name           : out Name_Id;\n-      Unit_Kind           : out Spec_Or_Body;\n-      Needs_Pragma        : out Boolean);\n+      Unit_Kind           : out Spec_Or_Body);\n    --  Find out, from a file name, the unit name, the unit kind and if a\n    --  specific SFN pragma is needed. If the file name corresponds to no unit,\n    --  then Unit_Name will be No_Name. If the file is a multi-unit source or an\n@@ -4555,7 +4554,7 @@ package body Prj.Nmsc is\n             Interface_ALIs : String_List_Id := Nil_String;\n             Unit           : Name_Id;\n             The_Unit_Id    : Unit_Index;\n-            The_Unit_Data  : Unit_Data;\n+            UData          : Unit_Data;\n \n             procedure Add_ALI_For (Source : File_Name_Type);\n             --  Add an ALI file name to the list of Interface ALIs\n@@ -4642,31 +4641,31 @@ package body Prj.Nmsc is\n                      else\n                         --  Check that the unit is part of the project\n \n-                        The_Unit_Data :=\n-                          In_Tree.Units.Table (The_Unit_Id);\n+                        UData := In_Tree.Units.Table (The_Unit_Id);\n \n-                        if The_Unit_Data.File_Names (Body_Part).Name /= No_File\n-                          and then The_Unit_Data.File_Names\n-                                     (Body_Part).Path.Name /= Slash\n+                        if UData.File_Names (Body_Part).Name /= No_File\n+                          and then\n+                            UData.File_Names (Body_Part).Path.Name /=\n+                             Slash\n                         then\n                            if Check_Project\n-                             (The_Unit_Data.File_Names (Body_Part).Project,\n+                             (UData.File_Names (Body_Part).Project,\n                               Project, In_Tree, Extending)\n                            then\n                               --  There is a body for this unit.\n                               --  If there is no spec, we need to check that it\n                               --  is not a subunit.\n \n-                              if The_Unit_Data.File_Names\n-                                (Specification).Name = No_File\n+                              if UData.File_Names (Specification).Name =\n+                                No_File\n                               then\n                                  declare\n                                     Src_Ind : Source_File_Index;\n \n                                  begin\n                                     Src_Ind := Sinput.P.Load_Project_File\n                                       (Get_Name_String\n-                                         (The_Unit_Data.File_Names\n+                                         (UData.File_Names\n                                             (Body_Part).Path.Name));\n \n                                     if Sinput.P.Source_File_Is_Subunit\n@@ -4687,7 +4686,7 @@ package body Prj.Nmsc is\n                               --  ALI file for its body to the Interface ALIs.\n \n                               Add_ALI_For\n-                                (The_Unit_Data.File_Names (Body_Part).Name);\n+                                (UData.File_Names (Body_Part).Name);\n \n                            else\n                               Error_Msg\n@@ -4697,12 +4696,12 @@ package body Prj.Nmsc is\n                                    (Interfaces).Location);\n                            end if;\n \n-                        elsif The_Unit_Data.File_Names\n-                                (Specification).Name /= No_File\n-                          and then The_Unit_Data.File_Names\n+                        elsif UData.File_Names (Specification).Name /=\n+                             No_File\n+                          and then UData.File_Names\n                                      (Specification).Path.Name /= Slash\n                           and then Check_Project\n-                                     (The_Unit_Data.File_Names\n+                                     (UData.File_Names\n                                         (Specification).Project,\n                                       Project, In_Tree, Extending)\n \n@@ -4712,7 +4711,7 @@ package body Prj.Nmsc is\n                            --  Interface ALIs.\n \n                            Add_ALI_For\n-                             (The_Unit_Data.File_Names (Specification).Name);\n+                             (UData.File_Names (Specification).Name);\n \n                         else\n                            Error_Msg\n@@ -6481,8 +6480,7 @@ package body Prj.Nmsc is\n       Naming              : Naming_Data;\n       Exception_Id        : out Ada_Naming_Exception_Id;\n       Unit_Name           : out Name_Id;\n-      Unit_Kind           : out Spec_Or_Body;\n-      Needs_Pragma        : out Boolean)\n+      Unit_Kind           : out Spec_Or_Body)\n    is\n       Info_Id  : Ada_Naming_Exception_Id :=\n                    Ada_Naming_Exceptions.Get (Canonical_File_Name);\n@@ -6508,9 +6506,8 @@ package body Prj.Nmsc is\n          Exception_Id := Info_Id;\n          Unit_Name := No_Name;\n          Unit_Kind := Specification;\n-         Needs_Pragma := True;\n+\n       else\n-         Needs_Pragma := False;\n          Exception_Id := No_Ada_Naming_Exception;\n          Compute_Unit_Name\n            (File_Name       => Canonical_File_Name,\n@@ -6594,12 +6591,9 @@ package body Prj.Nmsc is\n    is\n       The_Parent      : constant String :=\n                           Get_Name_String (Parent) & Directory_Separator;\n-\n       The_Parent_Last : constant Natural :=\n                           Compute_Directory_Last (The_Parent);\n-\n       Full_Name       : File_Name_Type;\n-\n       The_Name        : File_Name_Type;\n \n    begin\n@@ -6657,6 +6651,7 @@ package body Prj.Nmsc is\n            and then Create'Length > 0\n          then\n             if not Is_Directory (Full_Path_Name.all) then\n+\n                --  If project is externally built, do not create a subdir,\n                --  use the specified directory, without the subdir.\n \n@@ -6794,8 +6789,8 @@ package body Prj.Nmsc is\n             Element := In_Tree.String_Elements.Table (Current);\n             Name := Canonical_Case_File_Name (Element.Value);\n \n-            --  If the element has no location, then use the location\n-            --  of Excluded_Sources to report possible errors.\n+            --  If the element has no location, then use the location of\n+            --  Excluded_Sources to report possible errors.\n \n             if Element.Location = No_Location then\n                Location := Excluded_Sources.Location;\n@@ -6840,8 +6835,7 @@ package body Prj.Nmsc is\n                   while not Prj.Util.End_Of_File (File) loop\n                      Prj.Util.Get_Line (File, Line, Last);\n \n-                     --  A non empty, non comment line should contain a file\n-                     --  name\n+                     --  Non empty, non comment line should contain a file name\n \n                      if Last /= 0\n                        and then (Last = 1 or else Line (1 .. 2) /= \"--\")\n@@ -6886,9 +6880,9 @@ package body Prj.Nmsc is\n    ------------------\n \n    procedure Find_Sources\n-     (Project     : Project_Id;\n-      In_Tree     : Project_Tree_Ref;\n-      Data        : in out Project_Data)\n+     (Project : Project_Id;\n+      In_Tree : Project_Tree_Ref;\n+      Data    : in out Project_Data)\n    is\n       Sources          : constant Variable_Value :=\n                            Util.Value_Of\n@@ -6901,6 +6895,7 @@ package body Prj.Nmsc is\n                               Data.Decl.Attributes,\n                               In_Tree);\n       Name_Loc         : Name_Location;\n+\n       Has_Explicit_Sources : Boolean;\n \n    begin\n@@ -6933,10 +6928,9 @@ package body Prj.Nmsc is\n                if Current = Nil_String then\n                   Data.Languages := No_Language_Index;\n \n-                  --  This project contains no source. For projects that\n-                  --  don't extend other projects, this also means that\n-                  --  there is no need for an object directory, if not\n-                  --  specified.\n+                  --  This project contains no source. For projects that don't\n+                  --  extend other projects, this also means that there is no\n+                  --  need for an object directory, if not specified.\n \n                   if Data.Extends = No_Project\n                     and then Data.Object_Directory = Data.Directory\n@@ -6951,8 +6945,8 @@ package body Prj.Nmsc is\n                Name := Canonical_Case_File_Name (Element.Value);\n                Get_Name_String (Element.Value);\n \n-               --  If the element has no location, then use the\n-               --  location of Sources to report possible errors.\n+               --  If the element has no location, then use the location of\n+               --  Sources to report possible errors.\n \n                if Element.Location = No_Location then\n                   Location := Sources.Location;\n@@ -6977,10 +6971,10 @@ package body Prj.Nmsc is\n                   end if;\n                end loop;\n \n-               --  In Multi_Language mode, check whether the file is\n-               --  already there: the same file name may be in the list; if\n-               --  the source is missing, the error will be on the first\n-               --  mention of the source file name.\n+               --  In Multi_Language mode, check whether the file is already\n+               --  there: the same file name may be in the list. If the source\n+               --  is missing, the error will be on the first mention of the\n+               --  source file name.\n \n                case Get_Mode is\n                   when Ada_Only =>\n@@ -7006,12 +7000,12 @@ package body Prj.Nmsc is\n          end;\n \n          --  If we have no Source_Files attribute, check the Source_List_File\n-         --  attribute\n+         --  attribute.\n \n       elsif not Source_List_File.Default then\n \n-         --  Source_List_File is the name of the file\n-         --  that contains the source file names\n+         --  Source_List_File is the name of the file that contains the source\n+         --  file names.\n \n          declare\n             Source_File_Path_Name : constant String :=\n@@ -7037,9 +7031,9 @@ package body Prj.Nmsc is\n          end;\n \n       else\n-         --  Neither Source_Files nor Source_List_File has been\n-         --  specified. Find all the files that satisfy the naming\n-         --  scheme in all the source directories.\n+         --  Neither Source_Files nor Source_List_File has been specified. Find\n+         --  all the files that satisfy the naming scheme in all the source\n+         --  directories.\n \n          Has_Explicit_Sources := False;\n       end if;\n@@ -7056,9 +7050,9 @@ package body Prj.Nmsc is\n               Sources.Default and then Source_List_File.Default);\n       end if;\n \n-      --  Check if all exceptions have been found.\n-      --  For Ada, it is an error if an exception is not found.\n-      --  For other language, the source is simply removed.\n+      --  Check if all exceptions have been found. For Ada, it is an error if\n+      --  an exception is not found. For other language, the source is simply\n+      --  removed.\n \n       declare\n          Source : Source_Id;\n@@ -7089,15 +7083,17 @@ package body Prj.Nmsc is\n          end loop;\n       end;\n \n-      --  It is an error if a source file name in a source list or in a\n-      --  source list file is not found.\n+      --  It is an error if a source file name in a source list or in a source\n+      --  list file is not found.\n \n       if Has_Explicit_Sources then\n          declare\n             NL          : Name_Location;\n-            First_Error : Boolean := True;\n+            First_Error : Boolean;\n+\n          begin\n             NL := Source_Names.Get_First;\n+            First_Error := True;\n             while NL /= No_Name_Location loop\n                if not NL.Found then\n                   Err_Vars.Error_Msg_File_1 := NL.Name;\n@@ -7144,12 +7140,12 @@ package body Prj.Nmsc is\n       Data                  : in out Project_Data;\n       Explicit_Sources_Only : Boolean)\n    is\n-      Source_Dir      : String_List_Id;\n-      Element         : String_Element;\n-      Dir             : Dir_Type;\n-      Dir_Has_Source  : Boolean := False;\n-      NL              : Name_Location;\n-      Ada_Language    : Language_Ptr;\n+      Source_Dir     : String_List_Id;\n+      Element        : String_Element;\n+      Dir            : Dir_Type;\n+      Dir_Has_Source : Boolean := False;\n+      NL             : Name_Location;\n+      Ada_Language   : Language_Ptr;\n \n    begin\n       if Current_Verbosity = High then\n@@ -7173,8 +7169,10 @@ package body Prj.Nmsc is\n \n          declare\n             Dir_Path : constant String :=\n-              Get_Name_String (Element.Display_Value) & Directory_Separator;\n-            Dir_Last  : constant Natural := Compute_Directory_Last (Dir_Path);\n+                         Get_Name_String (Element.Display_Value) &\n+                           Directory_Separator;\n+            Dir_Last : constant Natural := Compute_Directory_Last (Dir_Path);\n+\n          begin\n             if Current_Verbosity = High then\n                Write_Line (\"checking directory \"\"\" & Dir_Path & \"\"\"\");\n@@ -7196,13 +7194,13 @@ package body Prj.Nmsc is\n                   Name : constant File_Name_Type := Name_Find;\n                   Canonical_Name : File_Name_Type;\n \n-                  --  ??? We could probably optimize the following call:\n-                  --  we need to resolve links only once for the\n-                  --  directory itself, and then do a single call to\n-                  --  readlink() for each file. Unfortunately that would\n-                  --  require a change in Normalize_Pathname so that it\n-                  --  has the option of not resolving links for its\n-                  --  Directory parameter, only for Name.\n+                  --  ??? We could probably optimize the following call: we\n+                  --  need to resolve links only once for the directory itself,\n+                  --  and then do a single call to readlink() for each file.\n+                  --  Unfortunately that would require a change in\n+                  --  Normalize_Pathname so that it has the option of not\n+                  --  resolving links for its Directory parameter, only for\n+                  --  Name.\n \n                   Path : constant String :=\n                     Normalize_Pathname\n@@ -7221,10 +7219,11 @@ package body Prj.Nmsc is\n                   --  an explicit source was not found)\n \n                   if Explicit_Sources_Only then\n-                     Canonical_Name := Canonical_Case_File_Name\n-                       (Name_Id (Name));\n+                     Canonical_Name :=\n+                       Canonical_Case_File_Name (Name_Id (Name));\n                      NL := Source_Names.Get (Canonical_Name);\n                      To_Record := NL /= No_Name_Location and then not NL.Found;\n+\n                      if To_Record then\n                         NL.Found := True;\n                         Location := NL.Location;\n@@ -7436,18 +7435,19 @@ package body Prj.Nmsc is\n       For_All_Sources   : Boolean)\n    is\n       Canonical_Path : constant Path_Name_Type :=\n-        Path_Name_Type (Canonical_Case_File_Name (Name_Id (Path)));\n-      Name_Loc          : Name_Location := Source_Names.Get (File_Name);\n-      Check_Name        : Boolean := False;\n-      Alternate_Languages : Alternate_Language_Id := No_Alternate_Language;\n-      Language          : Language_Ptr;\n-      Source            : Source_Id;\n-      Other_Part        : Source_Id;\n-      Add_Src           : Boolean;\n-      Src_Ind           : Source_File_Index;\n-      Unit              : Name_Id;\n-      Source_To_Replace : Source_Id := No_Source;\n-\n+                         Path_Name_Type\n+                           (Canonical_Case_File_Name (Name_Id (Path)));\n+\n+      Name_Loc              : Name_Location := Source_Names.Get (File_Name);\n+      Check_Name            : Boolean := False;\n+      Alternate_Languages   : Alternate_Language_Id := No_Alternate_Language;\n+      Language              : Language_Ptr;\n+      Source                : Source_Id;\n+      Other_Part            : Source_Id;\n+      Add_Src               : Boolean;\n+      Src_Ind               : Source_File_Index;\n+      Unit                  : Name_Id;\n+      Source_To_Replace     : Source_Id := No_Source;\n       Language_Name         : Name_Id;\n       Display_Language_Name : Name_Id;\n       Lang_Kind             : Language_Kind;\n@@ -7545,19 +7545,19 @@ package body Prj.Nmsc is\n                  and then Source.Unit = Unit\n                  and then\n                    ((Source.Kind = Spec and then Kind = Impl)\n-                    or else\n-                      (Source.Kind = Impl and then Kind = Spec))\n+                       or else\n+                    (Source.Kind = Impl and then Kind = Spec))\n                then\n                   Other_Part := Source;\n \n                elsif (Unit /= No_Name\n                       and then Source.Unit = Unit\n                       and then\n                         (Source.Kind = Kind\n-                         or else\n-                           (Source.Kind = Sep  and then Kind = Impl)\n-                         or else\n-                           (Source.Kind = Impl and then Kind = Sep)))\n+                           or else\n+                        (Source.Kind = Sep  and then Kind = Impl)\n+                           or else\n+                        (Source.Kind = Impl and then Kind = Sep)))\n                  or else\n                    (Unit = No_Name and then Source.File = File_Name)\n                then\n@@ -7583,17 +7583,14 @@ package body Prj.Nmsc is\n                         Add_Src := False;\n                      end if;\n \n-                     --  Do not allow the same unit name in different\n-                     --  projects, except if one is extending the other.\n+                     --  Do not allow the same unit name in different projects,\n+                     --  except if one is extending the other.\n \n-                     --  For a file based language, the same file name\n-                     --  replaces a file in a project being extended, but\n-                     --  it is allowed to have the same file name in\n-                     --  unrelated projects.\n+                     --  For a file based language, the same file name replaces\n+                     --  a file in a project being extended, but it is allowed\n+                     --  to have the same file name in unrelated projects.\n \n-                  elsif Is_Extending\n-                    (Project, Source.Project, In_Tree)\n-                  then\n+                  elsif Is_Extending (Project, Source.Project, In_Tree) then\n                      Source_To_Replace := Source;\n \n                   elsif Unit /= No_Name\n@@ -7731,10 +7728,10 @@ package body Prj.Nmsc is\n                                     (Source_Directory'First .. Dir_Last),\n                                   Resolve_Links  => Opt.Follow_Links_For_Files,\n                                   Case_Sensitive => True); --  no folding\n-                           Path : Path_Name_Type;\n \n-                           FF : File_Found :=\n-                                  Excluded_Sources_Htable.Get (File_Name);\n+                           Path : Path_Name_Type;\n+                           FF   : File_Found :=\n+                                    Excluded_Sources_Htable.Get (File_Name);\n \n                         begin\n                            Name_Len := Path_Name'Length;\n@@ -7744,8 +7741,7 @@ package body Prj.Nmsc is\n                            if FF /= No_File_Found then\n                               if not FF.Found then\n                                  FF.Found := True;\n-                                 Excluded_Sources_Htable.Set\n-                                   (File_Name, FF);\n+                                 Excluded_Sources_Htable.Set (File_Name, FF);\n \n                                  if Current_Verbosity = High then\n                                     Write_Str (\"     excluded source \"\"\");\n@@ -8196,7 +8192,7 @@ package body Prj.Nmsc is\n       Canonical_File : File_Name_Type;\n       Canonical_Path : Path_Name_Type;\n \n-      File_Recorded  : Boolean := False;\n+      File_Recorded : Boolean := False;\n       --  True when at least one file has been recorded\n \n       procedure Record_Unit\n@@ -8219,13 +8215,13 @@ package body Prj.Nmsc is\n          Needs_Pragma : Boolean)\n       is\n          The_Unit      : Unit_Index :=\n-           Units_Htable.Get (In_Tree.Units_HT, Unit_Name);\n+                           Units_Htable.Get (In_Tree.Units_HT, Unit_Name);\n          UData         : Unit_Data;\n          Kind          : Source_Kind;\n          Source        : Source_Id;\n-         Unit_Prj      : Unit_Project;\n          To_Record     : Boolean := False;\n          The_Location  : Source_Ptr := Location;\n+         Unit_Prj      : Project_Id;\n \n       begin\n          if Current_Verbosity = High then\n@@ -8242,7 +8238,7 @@ package body Prj.Nmsc is\n             UData := In_Tree.Units.Table (The_Unit);\n \n             if (UData.File_Names (Unit_Kind).Name = Canonical_File\n-                and then UData.File_Names (Unit_Kind).Path.Name = Slash)\n+                 and then UData.File_Names (Unit_Kind).Path.Name = Slash)\n               or else UData.File_Names (Unit_Kind).Name = No_File\n               or else Is_Extending\n                 (Data.Extends,\n@@ -8256,11 +8252,7 @@ package body Prj.Nmsc is\n \n                --  Record the file name in the hash table Files_Htable\n \n-               Unit_Prj := (Unit => The_Unit, Project => Project);\n-               Files_Htable.Set\n-                 (In_Tree.Files_HT,\n-                  Canonical_File,\n-                  Unit_Prj);\n+               Files_Htable.Set (In_Tree.Files_HT, Canonical_File, Project);\n \n                UData.File_Names (Unit_Kind) :=\n                  (Name         => Canonical_File,\n@@ -8278,8 +8270,8 @@ package body Prj.Nmsc is\n             elsif UData.File_Names (Unit_Kind).Project = Project\n               and then\n                 (Data.Known_Order_Of_Source_Dirs\n-                 or else\n-                   UData.File_Names (Unit_Kind).Path.Name = Canonical_Path)\n+                  or else\n+                    UData.File_Names (Unit_Kind).Path.Name = Canonical_Path)\n             then\n                To_Record := False;\n \n@@ -8323,11 +8315,10 @@ package body Prj.Nmsc is\n             Unit_Prj := Files_Htable.Get (In_Tree.Files_HT, Canonical_File);\n \n             if not File_Recorded\n-              and then Unit_Prj /= No_Unit_Project\n+              and then Unit_Prj /= No_Project\n             then\n                Error_Msg_File_1 := File_Name;\n-               Error_Msg_Name_1 :=\n-                 In_Tree.Projects.Table (Unit_Prj.Project).Name;\n+               Error_Msg_Name_1 := In_Tree.Projects.Table (Unit_Prj).Name;\n                Error_Msg\n                  (Project, In_Tree,\n                   \"{ is already a source of project %%\",\n@@ -8338,8 +8329,7 @@ package body Prj.Nmsc is\n                The_Unit := Unit_Table.Last (In_Tree.Units);\n                Units_Htable.Set (In_Tree.Units_HT, Unit_Name, The_Unit);\n \n-               Unit_Prj := (Unit => The_Unit, Project => Project);\n-               Files_Htable.Set (In_Tree.Files_HT, Canonical_File, Unit_Prj);\n+               Files_Htable.Set (In_Tree.Files_HT, Canonical_File, Project);\n \n                UData.Name := Unit_Name;\n                UData.File_Names (Unit_Kind) :=\n@@ -8399,8 +8389,9 @@ package body Prj.Nmsc is\n          Naming              => Data.Naming,\n          Exception_Id        => Exception_Id,\n          Unit_Name           => Unit_Name,\n-         Unit_Kind           => Unit_Kind,\n-         Needs_Pragma        => Needs_Pragma);\n+         Unit_Kind           => Unit_Kind);\n+\n+      Needs_Pragma := Exception_Id /= No_Ada_Naming_Exception;\n \n       if Exception_Id = No_Ada_Naming_Exception\n         and then Unit_Name = No_Name\n@@ -8430,8 +8421,8 @@ package body Prj.Nmsc is\n                Write_Line (\"\"\" (ignored).\");\n             end if;\n \n-            --  The file is not included in the source of the project since\n-            --  it is hidden by the exception. So, nothing else to do.\n+            --  The file is not included in the source of the project since it\n+            --  is hidden by the exception. So, nothing else to do.\n \n             return;\n          end if;\n@@ -8469,7 +8460,7 @@ package body Prj.Nmsc is\n      (Id          : Source_Id;\n       Replaced_By : Source_Id)\n    is\n-      Source   : Source_Id;\n+      Source : Source_Id;\n \n    begin\n       if Current_Verbosity = High then\n@@ -8523,12 +8514,9 @@ package body Prj.Nmsc is\n                Error_Msg_Warn := When_No_Sources = Warning;\n \n                if Continuation then\n-                  Error_Msg\n-                    (Project, In_Tree, \"\\\" & Msg, Location);\n-\n+                  Error_Msg (Project, In_Tree, \"\\\" & Msg, Location);\n                else\n-                  Error_Msg\n-                    (Project, In_Tree, Msg, Location);\n+                  Error_Msg (Project, In_Tree, Msg, Location);\n                end if;\n             end;\n       end case;"}, {"sha": "29a9d31bd92cb835a337a5458d3bfc12a3cf9006", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=757240b39c1728f6ad8837e1f3cc69dd43cdb460", "patch": "@@ -1406,17 +1406,10 @@ package Prj is\n       Equal      => \"=\");\n    --  Mapping of unit names to indexes in the Units table\n \n-   type Unit_Project is record\n-      Unit    : Unit_Index := No_Unit_Index;\n-      Project : Project_Id := No_Project;\n-   end record;\n-\n-   No_Unit_Project : constant Unit_Project := (No_Unit_Index, No_Project);\n-\n    package Files_Htable is new Simple_HTable\n      (Header_Num => Header_Num,\n-      Element    => Unit_Project,\n-      No_Element => No_Unit_Project,\n+      Element    => Project_Id,\n+      No_Element => No_Project,\n       Key        => File_Name_Type,\n       Hash       => Hash,\n       Equal      => \"=\");"}, {"sha": "3b5a5d513686c24cdfd126ab475b3ee01a43a337", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757240b39c1728f6ad8837e1f3cc69dd43cdb460/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=757240b39c1728f6ad8837e1f3cc69dd43cdb460", "patch": "@@ -885,10 +885,13 @@ package body Sem_Ch12 is\n       Formals : List_Id;\n       F_Copy  : List_Id) return List_Id\n    is\n-      Actual_Types : constant Elist_Id  := New_Elmt_List;\n-      Assoc        : constant List_Id   := New_List;\n+\n+      Actual_Types    : constant Elist_Id  := New_Elmt_List;\n+      Assoc           : constant List_Id   := New_List;\n       Default_Actuals : constant Elist_Id  := New_Elmt_List;\n-      Gen_Unit     : constant Entity_Id := Defining_Entity (Parent (F_Copy));\n+      Gen_Unit        : constant Entity_Id\n+                          := Defining_Entity (Parent (F_Copy));\n+\n       Actuals         : List_Id;\n       Actual          : Node_Id;\n       Formal          : Node_Id;\n@@ -905,16 +908,16 @@ package body Sem_Ch12 is\n       --  individual defaults for each such formal. These defaults are\n       --  appended to the list of associations and replace the Others_Choice.\n \n-      Found_Assoc     : Node_Id;\n+      Found_Assoc : Node_Id;\n       --  Association for the current formal being match. Empty if there are\n       --  no remaining actuals, or if there is no named association with the\n       --  name of the formal.\n \n-      Is_Named_Assoc  : Boolean;\n-      Num_Matched     : Int := 0;\n-      Num_Actuals     : Int := 0;\n+      Is_Named_Assoc : Boolean;\n+      Num_Matched    : Int := 0;\n+      Num_Actuals    : Int := 0;\n \n-      Others_Present  : Boolean := False;\n+      Others_Present : Boolean := False;\n       --  In Ada 2005, indicates partial parametrization of a formal\n       --  package. As usual an other association must be last in the list.\n \n@@ -1047,7 +1050,6 @@ package body Sem_Ch12 is\n       procedure Process_Default (F : Entity_Id)  is\n          Loc     : constant Source_Ptr := Sloc (I_Node);\n          F_Id    : constant Entity_Id  := Defining_Entity (F);\n-\n          Decl    : Node_Id;\n          Default : Node_Id;\n          Id      : Entity_Id;\n@@ -1132,7 +1134,7 @@ package body Sem_Ch12 is\n \n       if Present (Actuals) then\n \n-         --  check for an Others choice, indicating a partial parametrization\n+         --  Check for an Others choice, indicating a partial parametrization\n          --  for a formal package.\n \n          Actual := First (Actuals);\n@@ -1292,11 +1294,10 @@ package body Sem_Ch12 is\n                       Defining_Unit_Name (Specification (Formal)),\n                       Defining_Unit_Name (Specification (Analyzed_Formal)));\n \n-                  --  If the formal subprogram has the same name as\n-                  --  another formal subprogram of the generic, then\n-                  --  a named association is illegal (12.3(9)). Exclude\n-                  --  named associations that are generated for a nested\n-                  --  instance.\n+                  --  If the formal subprogram has the same name as another\n+                  --  formal subprogram of the generic, then a named\n+                  --  association is illegal (12.3(9)). Exclude named\n+                  --  associations that are generated for a nested instance.\n \n                   if Present (Match)\n                     and then Is_Named_Assoc\n@@ -1424,7 +1425,6 @@ package body Sem_Ch12 is\n \n       declare\n          Elmt : Elmt_Id := First_Elmt (Actual_Types);\n-\n       begin\n          while Present (Elmt) loop\n             Freeze_Before (I_Node, Node (Elmt));\n@@ -1934,7 +1934,6 @@ package body Sem_Ch12 is\n               (\"initialization not allowed for `IN OUT` formals\", N);\n          end if;\n       end if;\n-\n    end Analyze_Formal_Object_Declaration;\n \n    ----------------------------------------------\n@@ -1984,7 +1983,7 @@ package body Sem_Ch12 is\n \n    procedure Analyze_Formal_Package (N : Node_Id) is\n       Loc              : constant Source_Ptr := Sloc (N);\n-      Pack_Id          : constant Entity_Id := Defining_Identifier (N);\n+      Pack_Id          : constant Entity_Id  := Defining_Identifier (N);\n       Formal           : Entity_Id;\n       Gen_Id           : constant Node_Id    := Name (N);\n       Gen_Decl         : Node_Id;\n@@ -2039,6 +2038,7 @@ package body Sem_Ch12 is\n          --  create corresponding declarations for all entities in the formal\n          --  part, so that names with the proper types are available in the\n          --  specification of the formal package.\n+\n          --  On the other hand, if there are no associations, then all the\n          --  formals must have defaults, and this will be checked by the\n          --  call to Analyze_Associations.\n@@ -4372,7 +4372,11 @@ package body Sem_Ch12 is\n             Make_Compilation_Unit_Aux (Sloc (N)));\n \n       Set_Parent_Spec   (Act_Decl, Parent_Spec (N));\n-      Set_Body_Required (Decl_Cunit, True);\n+\n+      --  The new compilation unit is linked to its body, but both share the\n+      --  same file, so we do not set Body_Required on the new unit so as not\n+      --  to create a spurious dependency on a non-existent body in the ali.\n+      --  This simplifies codepeer unit traversal.\n \n       --  We use the original instantiation compilation unit as the resulting\n       --  compilation unit of the instance, since this is the main unit."}]}