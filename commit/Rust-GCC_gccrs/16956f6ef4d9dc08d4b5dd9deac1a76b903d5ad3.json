{"sha": "16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5NTZmNmVmNGQ5ZGMwOGQ0YjVkZDlkZWFjMWE3NmI5MDNkNWFkMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-22T02:49:00Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1996-02-22T02:49:00Z"}, "message": "sparc.c (sparc_cpu_string): Delete.\n\n\t* sparc/sparc.c (sparc_cpu_string): Delete.\n\t(sparc_select): New global.\n\t(sparc_override_options): Handle -mtune=xxx.\n\nFrom-SVN: r11338", "tree": {"sha": "e686bc8b6adeeb2db2e414232452a4e5940940de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e686bc8b6adeeb2db2e414232452a4e5940940de"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3/comments", "author": null, "committer": null, "parents": [{"sha": "6afca97d5090357b81efe4480f17ad12a3e124c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6afca97d5090357b81efe4480f17ad12a3e124c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6afca97d5090357b81efe4480f17ad12a3e124c8"}], "stats": {"total": 115, "additions": 64, "deletions": 51}, "files": [{"sha": "f34a369797d53208da58d34dd3940f6441d7515d", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 64, "deletions": 51, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=16956f6ef4d9dc08d4b5dd9deac1a76b903d5ad3", "patch": "@@ -111,89 +111,102 @@ static void sparc_init_modes ();\n \f\n /* Option handling.  */\n \n-/* This is assigned the value of -mcpu=.  */\n-char *sparc_cpu_string;\n+struct sparc_cpu_select sparc_select[] =\n+{\n+  /* switch\tname,\t\ttune\tarch */\n+  { (char *)0,\t\"default\",\t1,\t1 },\n+  { (char *)0,\t\"-mcpu=\",\t1,\t1 },\n+  { (char *)0,\t\"-mtune=\",\t1,\t0 },\n+  { 0, 0 }\n+};\n \n-/* CPU type.  This is set from TARGET_CPU_DEFAULT and -mcpu=.  */\n-enum attr_cpu sparc_cpu;\n+/* CPU type.  This is set from TARGET_CPU_DEFAULT and -m{cpu,tune}=xxx.  */\n+enum processor_type sparc_cpu;\n \n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n \n void\n sparc_override_options ()\n {\n-  /* Map TARGET_CPU_DEFAULT to value for -mcpu=.  */\n+  /* Map TARGET_CPU_DEFAULT to value for -m{arch,tune}=.  */\n   static struct cpu_default {\n     int cpu;\n     char *name;\n   } cpu_default[] = {\n-    { TARGET_CPU_sparc, \"common\" },\n-    { TARGET_CPU_sparclet, \"sparclet\" },\n-    { TARGET_CPU_sparclite, \"sparclite\" },\n-    { TARGET_CPU_sparc64, \"v9\" },\n-    { 0, 0 }\n+    { TARGET_CPU_sparc, \"cypress\" },\n+    { TARGET_CPU_sparclet, \"90c701\" },\n+    { TARGET_CPU_sparclite, \"f930\" },\n+    { TARGET_CPU_sparc64, \"ultrasparc\" },\n+    { 0 }\n   };\n-  struct cpu_default *m;\n-  /* Map -mcpu= names to internally usable values.  */\n+  struct cpu_default *def;\n+  /* Table of values for -m{cpu,tune}=.  */\n   static struct cpu_table {\n     char *name;\n-    enum attr_cpu cpu;\n+    enum processor_type processor;\n     int disable;\n     int enable;\n   } cpu_table[] = {\n-    { \"common\",     CPU_COMMON, MASK_ISA, 0 },\n-    { \"cypress\",    CPU_CYPRESS, MASK_ISA, 0 },\n-    /* generic v8 */\n-    { \"v8\",         CPU_V8, MASK_ISA, MASK_V8 },\n+    { \"v7\",         PROCESSOR_V7, MASK_ISA, 0 },\n+    { \"cypress\",    PROCESSOR_CYPRESS, MASK_ISA, 0 },\n+    { \"v8\",         PROCESSOR_V8, MASK_ISA, MASK_V8 },\n     /* TI TMS390Z55 supersparc */\n-    { \"supersparc\", CPU_SUPERSPARC, MASK_ISA, MASK_V8 },\n-    { \"sparclite\",  CPU_SPARCLITE, MASK_ISA, MASK_SPARCLITE },\n+    { \"supersparc\", PROCESSOR_SUPERSPARC, MASK_ISA, MASK_V8 },\n+    { \"sparclite\",  PROCESSOR_SPARCLITE, MASK_ISA, MASK_SPARCLITE },\n     /* The Fujitsu MB86930 is the original sparclite chip, with no fpu.\n        The Fujitsu MB86934 is the recent sparclite chip, with an fpu.  */\n-    { \"f930\",       CPU_SPARCLITE, MASK_ISA+MASK_FPU, MASK_SPARCLITE },\n-    { \"f934\",       CPU_SPARCLITE, MASK_ISA,          MASK_SPARCLITE+MASK_FPU },\n+    { \"f930\",       PROCESSOR_F930, MASK_ISA|MASK_FPU, MASK_SPARCLITE },\n+    { \"f934\",       PROCESSOR_F934, MASK_ISA, MASK_SPARCLITE|MASK_FPU },\n+    { \"sparclet\",   PROCESSOR_SPARCLET, MASK_ISA, MASK_SPARCLET },\n     /* TEMIC sparclet */\n-    { \"sparclet\",   CPU_SPARCLET, MASK_ISA, MASK_SPARCLET },\n-    /* generic v9 */\n-    { \"v9\",         CPU_V9, MASK_ISA, MASK_V9 },\n+    { \"90c701\",     PROCESSOR_90C701, MASK_ISA, MASK_SPARCLET },\n+    /* \"v9\" is used to specify a true 64 bit architecture.\n+       \"v8plus\" is what Sun calls Solaris2 running on UltraSPARC's.  */\n+    { \"v8plus\",     PROCESSOR_V8PLUS, MASK_ISA, MASK_V9 },\n+#if SPARC_ARCH64\n+    { \"v9\",         PROCESSOR_V9, MASK_ISA, MASK_V9 },\n+#endif\n     /* TI ultrasparc */\n-    { \"ultrasparc\", CPU_ULTRASPARC, MASK_ISA, MASK_V9 },\n+    { \"ultrasparc\", PROCESSOR_ULTRASPARC, MASK_ISA, MASK_V9 },\n     { 0 }\n   };\n-  struct cpu_table *p;\n+  struct cpu_table *cpu;\n+  struct sparc_cpu_select *sel;\n \n-  /* If -mcpu=foo wasn't specified, set the default.  */\n-  if (! sparc_cpu_string)\n-    {\n-      for (m = &cpu_default[0]; m->name; ++m)\n-\tif (m->cpu == TARGET_CPU_DEFAULT)\n-\t  break;\n-      if (! m->name)\n-\tabort ();\n-      sparc_cpu_string = m->name;\n-    }\n+  /* Set the default.  */\n+  for (def = &cpu_default[0]; def->name; ++def)\n+    if (def->cpu == TARGET_CPU_DEFAULT)\n+      break;\n+  if (! def->name)\n+    abort ();\n+  sparc_select[0].string = def->name;\n \n-  /* Set cpu type and isa flags.  */\n-  for (p = &cpu_table[0]; p->name; ++p)\n+  for (sel = &sparc_select[0]; sel->name; ++sel)\n     {\n-      if (strcmp (p->name, sparc_cpu_string) == 0)\n+      if (sel->string)\n \t{\n-\t  sparc_cpu = p->cpu;\n-\t  target_flags &= ~p->disable;\n-\t  target_flags |= p->enable;\n-\t  break;\n+\t  for (cpu = &cpu_table[0]; cpu->name; ++cpu)\n+\t    if (! strcmp (sel->string, cpu->name))\n+\t      {\n+\t\tif (sel->set_tune_p)\n+\t\t  sparc_cpu = cpu->processor;\n+\n+\t\tif (sel->set_arch_p)\n+\t\t  {\n+\t\t    target_flags &= ~cpu->disable;\n+\t\t    target_flags |= cpu->enable;\n+\t\t  }\n+\t\tbreak;\n+\t      }\n+\n+\t  if (! cpu->name)\n+\t    error (\"bad value (%s) for %s switch\", sel->string, sel->name);\n \t}\n     }\n-  if (! p->name)\n-    error (\"bad value (%s) for -mcpu= switch\", sparc_cpu_string);\n-\n-  if ((sparc_cpu == CPU_V9 || sparc_cpu == CPU_ULTRASPARC)\n-      && ! SPARC_V9)\n-    error (\"sparc64 is not supported by this configuration\");\n \n-  if ((sparc_cpu == CPU_V9 || sparc_cpu == CPU_ULTRASPARC)\n-      && TARGET_ARCH32)\n+  /* Use the deprecated v8 insns for sparc64 in 32 bit mode.  */\n+  if (TARGET_V9 && TARGET_ARCH32)\n     target_flags |= MASK_DEPRECATED_V8_INSNS;\n \n   /* Do various machine dependent initializations.  */"}]}