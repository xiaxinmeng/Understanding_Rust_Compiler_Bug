{"sha": "1ba5ae8f0888da3bae02c130182485d58e8adce6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJhNWFlOGYwODg4ZGEzYmFlMDJjMTMwMTgyNDg1ZDU4ZThhZGNlNg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@redhat.com", "date": "2000-09-01T13:34:26Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2000-09-01T13:34:26Z"}, "message": "dwarf2out.c (stack_adjust_offset): New function.\n\n2000-09-01  Andrew Haley  <aph@redhat.com>\n\n        * dwarf2out.c (stack_adjust_offset): New function.\n        (dwarf2out_stack_adjust): Break out stack adjust logic into\n        new stack_adjust_offset function.  Look inside parallels and\n        sequences for stack adjustments.\n\nFrom-SVN: r36098", "tree": {"sha": "a8123994769b63ee80e9dfbc08c491c643921de1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8123994769b63ee80e9dfbc08c491c643921de1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ba5ae8f0888da3bae02c130182485d58e8adce6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba5ae8f0888da3bae02c130182485d58e8adce6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ba5ae8f0888da3bae02c130182485d58e8adce6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ba5ae8f0888da3bae02c130182485d58e8adce6/comments", "author": {"login": "theRealAph", "id": 254637, "node_id": "MDQ6VXNlcjI1NDYzNw==", "avatar_url": "https://avatars.githubusercontent.com/u/254637?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theRealAph", "html_url": "https://github.com/theRealAph", "followers_url": "https://api.github.com/users/theRealAph/followers", "following_url": "https://api.github.com/users/theRealAph/following{/other_user}", "gists_url": "https://api.github.com/users/theRealAph/gists{/gist_id}", "starred_url": "https://api.github.com/users/theRealAph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theRealAph/subscriptions", "organizations_url": "https://api.github.com/users/theRealAph/orgs", "repos_url": "https://api.github.com/users/theRealAph/repos", "events_url": "https://api.github.com/users/theRealAph/events{/privacy}", "received_events_url": "https://api.github.com/users/theRealAph/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f75157d26396d06d81988d2397fb891c7722076e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f75157d26396d06d81988d2397fb891c7722076e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f75157d26396d06d81988d2397fb891c7722076e"}], "stats": {"total": 97, "additions": 64, "deletions": 33}, "files": [{"sha": "d82386ac82a45baff6a2c907dfd5c7d3450b9689", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba5ae8f0888da3bae02c130182485d58e8adce6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba5ae8f0888da3bae02c130182485d58e8adce6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ba5ae8f0888da3bae02c130182485d58e8adce6", "patch": "@@ -1,3 +1,10 @@\n+2000-09-01  Andrew Haley  <aph@redhat.com>\n+\n+        * dwarf2out.c (stack_adjust_offset): New function.\n+        (dwarf2out_stack_adjust): Break out stack adjust logic into\n+        new stack_adjust_offset function.  Look inside parallels and\n+        sequences for stack adjustments.\n+\n 2000-08-31  Jeff Law <law@cygnus.com>\n \n \t* arm.md: Use no_new_pseudos to determine when it is safe"}, {"sha": "1b55383b633ee704bdbc6df62c3d405bde718703", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 57, "deletions": 33, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ba5ae8f0888da3bae02c130182485d58e8adce6/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ba5ae8f0888da3bae02c130182485d58e8adce6/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=1ba5ae8f0888da3bae02c130182485d58e8adce6", "patch": "@@ -1093,6 +1093,49 @@ initial_return_save (rtl)\n   reg_save (NULL, DWARF_FRAME_RETURN_COLUMN, reg, offset - cfa.offset);\n }\n \n+/* Given a SET, calculate the amount of stack adjustment it\n+   contains. */\n+\n+static long stack_adjust_offset (pattern)\n+  rtx pattern;\n+{\n+  rtx src = SET_SRC (pattern);\n+  rtx dest = SET_DEST (pattern);\n+  long offset = 0;\n+  enum rtx_code code;\n+\n+  if (dest == stack_pointer_rtx)\n+    {\n+      /* (set (reg sp) (plus (reg sp) (const_int))) */\n+      code = GET_CODE (src);\n+      if (! (code == PLUS || code == MINUS)\n+\t  || XEXP (src, 0) != stack_pointer_rtx\n+\t  || GET_CODE (XEXP (src, 1)) != CONST_INT)\n+\treturn 0;\n+\n+      offset = INTVAL (XEXP (src, 1));\n+    }\n+  else if (GET_CODE (dest) == MEM)\n+    {\n+      /* (set (mem (pre_dec (reg sp))) (foo)) */\n+      src = XEXP (dest, 0);\n+      code = GET_CODE (src);\n+\n+      if (! (code == PRE_DEC || code == PRE_INC)\n+\t  || XEXP (src, 0) != stack_pointer_rtx)\n+\treturn 0;\n+\n+      offset = GET_MODE_SIZE (GET_MODE (dest));\n+    }\n+  else\n+    return 0;\n+\n+  if (code == PLUS || code == PRE_INC)\n+    offset = -offset;\n+\n+  return offset;\n+}\n+\n /* Check INSN to see if it looks like a push or a stack adjustment, and\n    make a note of it if it does.  EH uses this information to find out how\n    much extra space it needs to pop off the stack.  */\n@@ -1138,45 +1181,26 @@ dwarf2out_stack_adjust (insn)\n     }\n   else if (GET_CODE (PATTERN (insn)) == SET)\n     {\n-      rtx src, dest;\n-      enum rtx_code code;\n-\n-      insn = PATTERN (insn);\n-      src = SET_SRC (insn);\n-      dest = SET_DEST (insn);\n-\n-      if (dest == stack_pointer_rtx)\n-\t{\n-\t  /* (set (reg sp) (plus (reg sp) (const_int))) */\n-\t  code = GET_CODE (src);\n-\t  if (! (code == PLUS || code == MINUS)\n-\t      || XEXP (src, 0) != stack_pointer_rtx\n-\t      || GET_CODE (XEXP (src, 1)) != CONST_INT)\n-\t    return;\n+      offset = stack_adjust_offset (PATTERN (insn));\n+    }\n+  else if (GET_CODE (PATTERN (insn)) == PARALLEL\n+\t   || GET_CODE (PATTERN (insn)) == SEQUENCE)\n+    {\n+      /* There may be stack adjustments inside compound insns.  Search\n+         for them. */\n+      int j;\n \n-\t  offset = INTVAL (XEXP (src, 1));\n-\t}\n-      else if (GET_CODE (dest) == MEM)\n+      offset = 0;\n+      for (j = XVECLEN (PATTERN (insn), 0) - 1; j >= 0; j--)\n \t{\n-\t  /* (set (mem (pre_dec (reg sp))) (foo)) */\n-\t  src = XEXP (dest, 0);\n-\t  code = GET_CODE (src);\n-\n-\t  if (! (code == PRE_DEC || code == PRE_INC)\n-\t      || XEXP (src, 0) != stack_pointer_rtx)\n-\t    return;\n-\n-\t  offset = GET_MODE_SIZE (GET_MODE (dest));\n+\t  rtx pattern = XVECEXP (PATTERN (insn), 0, j);\n+\t  if (GET_CODE (pattern) == SET)\n+\t    offset += stack_adjust_offset (pattern);\n \t}\n-      else\n-\treturn;\n-\n-      if (code == PLUS || code == PRE_INC)\n-\toffset = -offset;\n     }\n   else\n     return;\n-\n+  \n   if (offset == 0)\n     return;\n "}]}