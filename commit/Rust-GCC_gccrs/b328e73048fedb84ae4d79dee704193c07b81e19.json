{"sha": "b328e73048fedb84ae4d79dee704193c07b81e19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMyOGU3MzA0OGZlZGI4NGFlNGQ3OWRlZTcwNDE5M2MwN2I4MWUxOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-08-28T06:25:01Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-08-28T06:25:01Z"}, "message": "var-tracking.c (use_narrower_mode_test): Turn from being a for_each_rtx callback to being a function that examines each...\n\ngcc/\n\t* var-tracking.c (use_narrower_mode_test): Turn from being a\n\tfor_each_rtx callback to being a function that examines each\n\tsubrtx itself.\n\t(adjust_mems): Update accordingly.\n\nFrom-SVN: r214663", "tree": {"sha": "c49f9bc1b0cd81229082992b64ab14d7419ed475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c49f9bc1b0cd81229082992b64ab14d7419ed475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b328e73048fedb84ae4d79dee704193c07b81e19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b328e73048fedb84ae4d79dee704193c07b81e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b328e73048fedb84ae4d79dee704193c07b81e19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b328e73048fedb84ae4d79dee704193c07b81e19/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7e56c2835ef1958b98f755dcca1c6b794987eae6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e56c2835ef1958b98f755dcca1c6b794987eae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e56c2835ef1958b98f755dcca1c6b794987eae6"}], "stats": {"total": 69, "additions": 38, "deletions": 31}, "files": [{"sha": "12006687b354ba880392418c7c6b0b03798458df", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b328e73048fedb84ae4d79dee704193c07b81e19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b328e73048fedb84ae4d79dee704193c07b81e19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b328e73048fedb84ae4d79dee704193c07b81e19", "patch": "@@ -1,3 +1,10 @@\n+2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* var-tracking.c (use_narrower_mode_test): Turn from being a\n+\tfor_each_rtx callback to being a function that examines each\n+\tsubrtx itself.\n+\t(adjust_mems): Update accordingly.\n+\n 2014-08-28  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* var-tracking.c (non_suitable_const): Turn from being a for_each_rtx"}, {"sha": "149d1aef62577de1ac3bebcb432413f7b6d4a9f7", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b328e73048fedb84ae4d79dee704193c07b81e19/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b328e73048fedb84ae4d79dee704193c07b81e19/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=b328e73048fedb84ae4d79dee704193c07b81e19", "patch": "@@ -952,41 +952,41 @@ struct adjust_mem_data\n   rtx_expr_list *side_effects;\n };\n \n-/* Helper for adjust_mems.  Return 1 if *loc is unsuitable for\n-   transformation of wider mode arithmetics to narrower mode,\n-   -1 if it is suitable and subexpressions shouldn't be\n-   traversed and 0 if it is suitable and subexpressions should\n-   be traversed.  Called through for_each_rtx.  */\n+/* Helper for adjust_mems.  Return true if X is suitable for\n+   transformation of wider mode arithmetics to narrower mode.  */\n \n-static int\n-use_narrower_mode_test (rtx *loc, void *data)\n+static bool\n+use_narrower_mode_test (rtx x, const_rtx subreg)\n {\n-  rtx subreg = (rtx) data;\n-\n-  if (CONSTANT_P (*loc))\n-    return -1;\n-  switch (GET_CODE (*loc))\n+  subrtx_var_iterator::array_type array;\n+  FOR_EACH_SUBRTX_VAR (iter, array, x, NONCONST)\n     {\n-    case REG:\n-      if (cselib_lookup (*loc, GET_MODE (SUBREG_REG (subreg)), 0, VOIDmode))\n-\treturn 1;\n-      if (!validate_subreg (GET_MODE (subreg), GET_MODE (*loc),\n-\t\t\t    *loc, subreg_lowpart_offset (GET_MODE (subreg),\n-\t\t\t\t\t\t\t GET_MODE (*loc))))\n-\treturn 1;\n-      return -1;\n-    case PLUS:\n-    case MINUS:\n-    case MULT:\n-      return 0;\n-    case ASHIFT:\n-      if (for_each_rtx (&XEXP (*loc, 0), use_narrower_mode_test, data))\n-\treturn 1;\n+      rtx x = *iter;\n+      if (CONSTANT_P (x))\n+\titer.skip_subrtxes ();\n       else\n-\treturn -1;\n-    default:\n-      return 1;\n+\tswitch (GET_CODE (x))\n+\t  {\n+\t  case REG:\n+\t    if (cselib_lookup (x, GET_MODE (SUBREG_REG (subreg)), 0, VOIDmode))\n+\t      return false;\n+\t    if (!validate_subreg (GET_MODE (subreg), GET_MODE (x), x,\n+\t\t\t\t  subreg_lowpart_offset (GET_MODE (subreg),\n+\t\t\t\t\t\t\t GET_MODE (x))))\n+\t      return false;\n+\t    break;\n+\t  case PLUS:\n+\t  case MINUS:\n+\t  case MULT:\n+\t    break;\n+\t  case ASHIFT:\n+\t    iter.substitute (XEXP (x, 0));\n+\t    break;\n+\t  default:\n+\t    return false;\n+\t  }\n     }\n+  return true;\n }\n \n /* Transform X into narrower mode MODE from wider mode WMODE.  */\n@@ -1147,7 +1147,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n \t  && GET_MODE_SIZE (GET_MODE (tem))\n \t     < GET_MODE_SIZE (GET_MODE (SUBREG_REG (tem)))\n \t  && subreg_lowpart_p (tem)\n-\t  && !for_each_rtx (&SUBREG_REG (tem), use_narrower_mode_test, tem))\n+\t  && use_narrower_mode_test (SUBREG_REG (tem), tem))\n \treturn use_narrower_mode (SUBREG_REG (tem), GET_MODE (tem),\n \t\t\t\t  GET_MODE (SUBREG_REG (tem)));\n       return tem;"}]}