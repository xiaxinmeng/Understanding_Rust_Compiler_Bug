{"sha": "611fdb0fc5b95ee15215e2e3679834f311919096", "node_id": "C_kwDOANBUbNoAKDYxMWZkYjBmYzViOTVlZTE1MjE1ZTJlMzY3OTgzNGYzMTE5MTkwOTY", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2021-12-11T21:42:54Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2021-12-11T22:19:35Z"}, "message": "libgccjit: Add support for types used by atomic builtins [PR96066] [PR96067]\n\n2021-12-11  Antoni Boucher  <bouanto@zoho.com>\n\ngcc/jit/\n\tPR target/96066\n\tPR target/96067\n\t* jit-builtins.c: Implement missing types for builtins.\n\t* jit-recording.c:: Allow sending a volatile const void * as\n\targument.\n\t* jit-recording.h: New functions (is_volatile, is_const) and\n\tallow comparing qualified types.\n\ngcc/testsuite/\n\tPR target/96066\n\tPR target/96067\n\t* jit.dg/all-non-failing-tests.h: Add test-builtin-types.c.\n\t* jit.dg/test-builtin-types.c\n\t* jit.dg/test-error-bad-assignment.c\n\t* jit.dg/test-fuzzer.c: Add fuzzing for type qualifiers.\n\nSigned-off-by: Antoni Boucher <bouanto@zoho.com>", "tree": {"sha": "5cfe5aab38a044eb1519b9cf75d9beacde394989", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cfe5aab38a044eb1519b9cf75d9beacde394989"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/611fdb0fc5b95ee15215e2e3679834f311919096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611fdb0fc5b95ee15215e2e3679834f311919096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/611fdb0fc5b95ee15215e2e3679834f311919096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/611fdb0fc5b95ee15215e2e3679834f311919096/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e913caad081ea85da4f257265f2d3383cdbe8d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e913caad081ea85da4f257265f2d3383cdbe8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e913caad081ea85da4f257265f2d3383cdbe8d5"}], "stats": {"total": 178, "additions": 170, "deletions": 8}, "files": [{"sha": "c279dd858f9cda92f710f7aeab1c7a7b02929a90", "filename": "gcc/jit/jit-builtins.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.c?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -541,11 +541,11 @@ builtins_manager::make_primitive_type (enum jit_builtin_type type_id)\n     // case BT_DFLOAT128:\n     // case BT_VALIST_REF:\n     // case BT_VALIST_ARG:\n-    // case BT_I1:\n-    // case BT_I2:\n-    // case BT_I4:\n-    // case BT_I8:\n-    // case BT_I16:\n+    case BT_I1: return m_ctxt->get_int_type (1, true);\n+    case BT_I2: return m_ctxt->get_int_type (2, true);\n+    case BT_I4: return m_ctxt->get_int_type (4, true);\n+    case BT_I8: return m_ctxt->get_int_type (8, true);\n+    case BT_I16: return m_ctxt->get_int_type (16, true);\n     // case BT_PTR_CONST_STRING:\n     }\n }"}, {"sha": "2eecf44c8db6991ec7e79c2715e04330c3e62fbe", "filename": "gcc/jit/jit-recording.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-recording.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-recording.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.c?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -2598,8 +2598,13 @@ recording::memento_of_get_pointer::accepts_writes_from (type *rtype)\n     return false;\n \n   /* It's OK to assign to a (const T *) from a (T *).  */\n-  return m_other_type->unqualified ()\n-    ->accepts_writes_from (rtype_points_to);\n+  if (m_other_type->unqualified ()->accepts_writes_from (rtype_points_to))\n+  {\n+    return true;\n+  }\n+\n+  /* It's OK to assign to a (volatile const T *) from a (volatile const T *). */\n+  return m_other_type->is_same_type_as (rtype_points_to);\n }\n \n /* Implementation of pure virtual hook recording::memento::replay_into"}, {"sha": "3163ff6748e9e5730f139b89b3637247418e18c0", "filename": "gcc/jit/jit-recording.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-recording.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Fjit%2Fjit-recording.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-recording.h?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -545,6 +545,8 @@ class type : public memento\n   virtual bool is_float () const = 0;\n   virtual bool is_bool () const = 0;\n   virtual type *is_pointer () = 0;\n+  virtual type *is_volatile () { return NULL; }\n+  virtual type *is_const () { return NULL; }\n   virtual type *is_array () = 0;\n   virtual struct_ *is_struct () { return NULL; }\n   virtual bool is_void () const { return false; }\n@@ -687,6 +689,15 @@ class memento_of_get_const : public decorated_type\n   /* Strip off the \"const\", giving the underlying type.  */\n   type *unqualified () FINAL OVERRIDE { return m_other_type; }\n \n+  virtual bool is_same_type_as (type *other)\n+  {\n+    if (!other->is_const ())\n+      return false;\n+    return m_other_type->is_same_type_as (other->is_const ());\n+  }\n+\n+  virtual type *is_const () { return m_other_type; }\n+\n   void replay_into (replayer *) FINAL OVERRIDE;\n \n private:\n@@ -701,9 +712,18 @@ class memento_of_get_volatile : public decorated_type\n   memento_of_get_volatile (type *other_type)\n   : decorated_type (other_type) {}\n \n+  virtual bool is_same_type_as (type *other)\n+  {\n+    if (!other->is_volatile ())\n+      return false;\n+    return m_other_type->is_same_type_as (other->is_volatile ());\n+  }\n+\n   /* Strip off the \"volatile\", giving the underlying type.  */\n   type *unqualified () FINAL OVERRIDE { return m_other_type; }\n \n+  virtual type *is_volatile () { return m_other_type; }\n+\n   void replay_into (replayer *) FINAL OVERRIDE;\n \n private:"}, {"sha": "5ff427c75e9178f56ab2a9d056bdf2ebaae6ff53", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -188,6 +188,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-builtin-types.c */\n+#define create_code create_code_builtin_types\n+#define verify_code verify_code_builtin_types\n+#include \"test-builtin-types.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-hello-world.c */\n #define create_code create_code_hello_world\n #define verify_code verify_code_hello_world\n@@ -411,6 +418,9 @@ const struct testcase testcases[] = {\n   {\"functions\",\n    create_code_functions,\n    verify_code_functions},\n+  {\"builtin-types\",\n+   create_code_builtin_types,\n+   verify_code_builtin_types},\n   {\"hello_world\",\n    create_code_hello_world,\n    verify_code_hello_world},"}, {"sha": "15b026c9593e722593a9782af939be2ef387242c", "filename": "gcc/testsuite/jit.dg/test-builtin-types.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-builtin-types.c?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -0,0 +1,43 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <time.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  CHECK_NON_NULL (gcc_jit_context_get_builtin_function (ctxt, \"__atomic_fetch_add_4\"));\n+\n+  gcc_jit_function *atomic_load = gcc_jit_context_get_builtin_function (ctxt, \"__atomic_load_8\");\n+\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *const_void_type =\n+    gcc_jit_type_get_const (gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID));\n+  gcc_jit_type *volatile_void_ptr =\n+    gcc_jit_type_get_pointer (gcc_jit_type_get_volatile (const_void_type));\n+  gcc_jit_type *long_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG);\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL, GCC_JIT_FUNCTION_EXPORTED, void_type, \"atomics\", 0, NULL, 0);\n+\n+  gcc_jit_lvalue *variable = gcc_jit_function_new_local (func, NULL, long_type, \"variable\");\n+  gcc_jit_rvalue *builtin_args[2];\n+  gcc_jit_rvalue *param1 = gcc_jit_lvalue_get_address(variable, NULL);\n+  builtin_args[0] = gcc_jit_context_new_cast(ctxt, NULL, param1, volatile_void_ptr);\n+  builtin_args[1] = gcc_jit_context_new_rvalue_from_long(ctxt, int_type, 0);\n+  gcc_jit_context_new_call (ctxt, NULL, atomic_load, 2, builtin_args);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  /* Verify that no errors were emitted.  */\n+  CHECK_NON_NULL (result);\n+}"}, {"sha": "fea2b372e1f32da0248321878d06388ce31bc293", "filename": "gcc/testsuite/jit.dg/test-error-bad-assignment.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-assignment.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-assignment.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-bad-assignment.c?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -0,0 +1,78 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     void\n+     test_fn ()\n+     {\n+        long integer;\n+        volatile const void *variable;\n+        variable = &integer;\n+        long aligned_integer __attribute__((aligned(4)));\n+        variable = &aligned_integer;\n+     }\n+\n+     and verify that the API complains about the mismatching types\n+     in the assignments.\n+  */\n+  gcc_jit_type *void_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *long_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG);\n+  gcc_jit_type *const_void_type =\n+    gcc_jit_type_get_const (void_type);\n+  gcc_jit_type *volatile_void_ptr =\n+    gcc_jit_type_get_pointer (gcc_jit_type_get_volatile (const_void_type));\n+\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt, NULL,\n+                                  GCC_JIT_FUNCTION_EXPORTED,\n+                                  void_type,\n+                                  \"test_fn\",\n+                                  0, NULL,\n+                                  0);\n+\n+  gcc_jit_lvalue *integer = gcc_jit_function_new_local (func, NULL, long_type, \"integer\");\n+  gcc_jit_rvalue *address = gcc_jit_lvalue_get_address(integer, NULL);\n+\n+  gcc_jit_lvalue *variable = gcc_jit_function_new_local (func, NULL, volatile_void_ptr, \"variable\");\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+  gcc_jit_block_add_assignment(initial, NULL, variable, address);\n+\n+  gcc_jit_type *aligned_long_type = gcc_jit_type_get_aligned (long_type, 4);\n+  gcc_jit_lvalue *aligned_integer = gcc_jit_function_new_local (func, NULL, aligned_long_type, \"aligned_integer\");\n+  gcc_jit_rvalue *aligned_address = gcc_jit_lvalue_get_address(aligned_integer, NULL);\n+\n+  gcc_jit_block_add_assignment(initial, NULL, variable, aligned_address);\n+\n+  gcc_jit_block_end_with_void_return (initial, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  CHECK_VALUE (result, NULL);\n+\n+  /* Verify that the correct error messages were emitted.  */\n+  CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n+\t\t      \"gcc_jit_block_add_assignment:\"\n+\t\t      \" mismatching types:\"\n+\t\t      \" assignment to variable (type: volatile const void *)\"\n+\t\t      \" from &integer (type: long *)\");\n+\n+  CHECK_STRING_VALUE (gcc_jit_context_get_last_error (ctxt),\n+\t\t      \"gcc_jit_block_add_assignment:\"\n+\t\t      \" mismatching types:\"\n+\t\t      \" assignment to variable (type: volatile const void *)\"\n+\t\t      \" from &aligned_integer (type: long  __attribute__((aligned(4))) *)\");\n+}\n+"}, {"sha": "6fa95d97b32b9e5da5afffc0f3e37a7c38dbf3ca", "filename": "gcc/testsuite/jit.dg/test-fuzzer.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/611fdb0fc5b95ee15215e2e3679834f311919096/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-fuzzer.c?ref=611fdb0fc5b95ee15215e2e3679834f311919096", "patch": "@@ -193,12 +193,18 @@ get_random_type (fuzzer *f)\n static gcc_jit_type *\n make_random_type (fuzzer *f)\n {\n-  switch (fuzzer_randrange (f, 0, 5))\n+  switch (fuzzer_randrange (f, 0, 8))\n     {\n     case 0:\n       return gcc_jit_type_get_pointer (get_random_type (f));\n     case 1:\n       return gcc_jit_type_get_const (get_random_type (f));\n+    case 2:\n+      return gcc_jit_type_get_vector (get_random_type (f), 4);\n+    case 3:\n+      return gcc_jit_type_get_volatile (get_random_type (f));\n+    case 4:\n+      return gcc_jit_type_get_aligned (get_random_type (f), 4);\n     default:\n       {\n \t/* Create a struct.  */"}]}