{"sha": "f3f2255a8ce7120d21a2b7616ea53d45004dddea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMjI1NWE4Y2U3MTIwZDIxYTJiNzYxNmVhNTNkNDUwMDRkZGRlYQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1998-11-18T14:15:03Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1998-11-18T14:15:03Z"}, "message": "expr.c (store_expr): Don't generate load-store pair if TEMP is identical (according to ==) with TARGET.\n\n\t* expr.c (store_expr): Don't generate load-store pair\n\tif TEMP is identical (according to ==) with TARGET.\n\nFrom-SVN: r23696", "tree": {"sha": "8921dc600627277c943d30827bee035beec4e997", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8921dc600627277c943d30827bee035beec4e997"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f2255a8ce7120d21a2b7616ea53d45004dddea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f2255a8ce7120d21a2b7616ea53d45004dddea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f2255a8ce7120d21a2b7616ea53d45004dddea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f2255a8ce7120d21a2b7616ea53d45004dddea/comments", "author": null, "committer": null, "parents": [{"sha": "59e76fc6ba25be94f98194ec5e4accdac8a50315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e76fc6ba25be94f98194ec5e4accdac8a50315", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e76fc6ba25be94f98194ec5e4accdac8a50315"}], "stats": {"total": 20, "additions": 18, "deletions": 2}, "files": [{"sha": "59cb65708b3ce78e77b4ff87b5dd88d460641dea", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f2255a8ce7120d21a2b7616ea53d45004dddea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f2255a8ce7120d21a2b7616ea53d45004dddea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3f2255a8ce7120d21a2b7616ea53d45004dddea", "patch": "@@ -1,3 +1,8 @@\n+Wed Nov 18 22:13:00 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* expr.c (store_expr): Don't generate load-store pair\n+\tif TEMP is identical (according to ==) with TARGET.\n+\n Tue Nov 17 22:25:16 1998  J\"orn Rennecke <amylaar@cygnus.co.uk>\n \n \t* reload1.c (reload_reg_free_for_value_p): When considered reload"}, {"sha": "3d46dea3f22661b1f8c80761078b5a837f44f39b", "filename": "gcc/expr.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f2255a8ce7120d21a2b7616ea53d45004dddea/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f2255a8ce7120d21a2b7616ea53d45004dddea/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f3f2255a8ce7120d21a2b7616ea53d45004dddea", "patch": "@@ -3676,10 +3676,21 @@ store_expr (exp, target, want_value)\n \n   /* If value was not generated in the target, store it there.\n      Convert the value to TARGET's type first if nec.  */\n+  /* If TEMP and TARGET compare equal according to rtx_equal_p, but\n+     one or both of them are volatile memory refs, we have to distinguish\n+     two cases:\n+     - expand_expr has used TARGET.  In this case, we must not generate\n+       another copy.  This can be detected by TARGET being equal according\n+       to == .\n+     - expand_expr has not used TARGET - that means that the source just\n+       happens to have the same RTX form.  Since temp will have been created\n+       by expand_expr, it will compare unequal according to == .\n+       We must generate a copy in this case, to reach the correct number\n+       of volatile memory references.  */\n \n   if ((! rtx_equal_p (temp, target)\n-       || side_effects_p (temp)\n-       || side_effects_p (target))\n+       || (temp != target && (side_effects_p (temp)\n+\t\t\t      || side_effects_p (target))))\n       && TREE_CODE (exp) != ERROR_MARK)\n     {\n       target = protect_from_queue (target, 1);"}]}