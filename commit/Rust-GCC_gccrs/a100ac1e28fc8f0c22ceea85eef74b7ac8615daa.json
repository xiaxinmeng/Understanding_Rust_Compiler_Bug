{"sha": "a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwMGFjMWUyOGZjOGYwYzIyY2VlYTg1ZWVmNzRiN2FjODYxNWRhYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-23T05:25:12Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-23T05:25:12Z"}, "message": "tree-cfg.c (tree_execute_on_growing_pred): New.\n\n\t* tree-cfg.c (tree_execute_on_growing_pred): New.\n\t(tree_cfg_hooks): Add tree_execute_on_growing_pred.\n\t* tree-flow.h: Add a prototype for\n\treserve_phi_args_for_new_edge.\n\t* tree-phinodes.c (reserve_phi_args_for_new_edge): New.\n\t(add_phi_arg): Don't resize a PHI array.\n\nFrom-SVN: r91075", "tree": {"sha": "f05fee1d28436abb25a6d378abbc0212ca41c4f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f05fee1d28436abb25a6d378abbc0212ca41c4f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/comments", "author": null, "committer": null, "parents": [{"sha": "82698cdede07649ffc164d761a1d2aa1832b9cc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82698cdede07649ffc164d761a1d2aa1832b9cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82698cdede07649ffc164d761a1d2aa1832b9cc3"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "e867fbe56ee505f6aeb84beba9d82fc3ddc71bd4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "patch": "@@ -1,3 +1,12 @@\n+2004-11-23  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (tree_execute_on_growing_pred): New.\n+\t(tree_cfg_hooks): Add tree_execute_on_growing_pred.\n+\t* tree-flow.h: Add a prototype for\n+\treserve_phi_args_for_new_edge.\n+\t* tree-phinodes.c (reserve_phi_args_for_new_edge): New.\n+\t(add_phi_arg): Don't resize a PHI array.\n+\n 2004-11-23  Ralf Corsepius <ralf.corsepius@rtems.org>\n \n \t* config.gcc: Add avr-*-rtems*."}, {"sha": "1f934cb7ec542d841ab419201375066e76830f9e", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "patch": "@@ -5339,6 +5339,18 @@ tree_purge_all_dead_eh_edges (bitmap blocks)\n   return changed;\n }\n \n+/* This function is called whenever a new edge is created or\n+   redirected.  */\n+\n+static void\n+tree_execute_on_growing_pred (edge e)\n+{\n+  basic_block bb = e->dest;\n+\n+  if (phi_nodes (bb))\n+    reserve_phi_args_for_new_edge (bb);\n+}\n+\n /* This function is called immediately before edge E is removed from\n    the edge vector E->dest->preds.  */\n \n@@ -5371,7 +5383,7 @@ struct cfg_hooks tree_cfg_hooks = {\n   tree_block_ends_with_call_p,\t/* block_ends_with_call_p */\n   tree_block_ends_with_condjump_p, /* block_ends_with_condjump_p */\n   tree_flow_call_edges_add,     /* flow_call_edges_add */\n-  NULL,\t/* execute_on_growing_pred */\n+  tree_execute_on_growing_pred,\t/* execute_on_growing_pred */\n   tree_execute_on_shrinking_pred, /* execute_on_shrinking_pred */\n };\n "}, {"sha": "96e368dc3551a4b1658d2d3c5d417c8b19eecdf3", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "patch": "@@ -508,6 +508,7 @@ extern void dump_generic_bb (FILE *, basic_block, int, int);\n extern var_ann_t create_var_ann (tree);\n extern stmt_ann_t create_stmt_ann (tree);\n extern tree_ann_t create_tree_ann (tree);\n+extern void reserve_phi_args_for_new_edge (basic_block);\n extern tree create_phi_node (tree, basic_block);\n extern void add_phi_arg (tree *, tree, edge);\n extern void remove_phi_args (edge);"}, {"sha": "031a606d0c63d1cc7476c7d7ac0adcec0fec1e81", "filename": "gcc/tree-phinodes.c", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-phinodes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a100ac1e28fc8f0c22ceea85eef74b7ac8615daa/gcc%2Ftree-phinodes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-phinodes.c?ref=a100ac1e28fc8f0c22ceea85eef74b7ac8615daa", "patch": "@@ -269,6 +269,33 @@ resize_phi_node (tree *phi, int len)\n   *phi = new_phi;\n }\n \n+/* Reserve PHI arguments for a new edge to basic block BB.  */\n+\n+void\n+reserve_phi_args_for_new_edge (basic_block bb)\n+{\n+  tree *loc;\n+  int len = EDGE_COUNT (bb->preds);\n+  int cap = ideal_phi_node_len (len + 4);\n+\n+  for (loc = &(bb_ann (bb)->phi_nodes);\n+       *loc;\n+       loc = &PHI_CHAIN (*loc))\n+    {\n+      if (len > PHI_ARG_CAPACITY (*loc))\n+\t{\n+\t  tree old_phi = *loc;\n+\n+\t  resize_phi_node (loc, cap);\n+\n+\t  /* The result of the phi is defined by this phi node.  */\n+\t  SSA_NAME_DEF_STMT (PHI_RESULT (*loc)) = *loc;\n+\n+\t  release_phi_node (old_phi);\n+\t}\n+    }\n+}\n+\n /* Create a new PHI node for variable VAR at basic block BB.  */\n \n tree\n@@ -302,38 +329,9 @@ add_phi_arg (tree *phi, tree def, edge e)\n \n   gcc_assert (bb == bb_for_stmt (*phi));\n \n-  if (i >= PHI_ARG_CAPACITY (*phi))\n-    {\n-      tree old_phi = *phi;\n-\n-      /* Resize the phi.  Unfortunately, this will relocate it.  */\n-      resize_phi_node (phi, ideal_phi_node_len (i + 4));\n-\n-      /* resize_phi_node will necessarily relocate the phi.  */\n-      gcc_assert (*phi != old_phi);\n-\n-      /* The result of the phi is defined by this phi node.  */\n-      SSA_NAME_DEF_STMT (PHI_RESULT (*phi)) = *phi;\n-\n-      release_phi_node (old_phi);\n-\n-      /* Update the list head if replacing the first listed phi.  */\n-      if (phi_nodes (bb) == old_phi)\n-\tbb_ann (bb)->phi_nodes = *phi;\n-      else\n-\t{\n-\t  /* Traverse the list looking for the phi node to chain to.  */\n-\t  tree p;\n-\n-\t  for (p = phi_nodes (bb);\n-\t       p && PHI_CHAIN (p) != old_phi;\n-\t       p = PHI_CHAIN (p))\n-\t    ;\n-\n-\t  gcc_assert (p);\n-\t  PHI_CHAIN (p) = *phi;\n-\t}\n-    }\n+  /* We resize PHI nodes upon edge creation.  We should always have\n+     enough room at this point.  */\n+  gcc_assert (PHI_NUM_ARGS (*phi) < PHI_ARG_CAPACITY (*phi));\n \n   /* Copy propagation needs to know what object occur in abnormal\n      PHI nodes.  This is a convenient place to record such information.  */"}]}