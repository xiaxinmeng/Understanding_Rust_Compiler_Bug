{"sha": "e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZiMmRjMjQ4ZGYzNTFiZTU4ZWNhYThiYjVhZjhlYzUyM2QyNTMwZQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-12T15:55:56Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-12T15:55:56Z"}, "message": "re PR target/83250 (_mm256_zextsi128_si256 missing for AVX2 zero extension)\n\n\tPR target/83250\n\tPR target/91340\n\t* config/i386/avxintrin.h (_mm256_zextpd128_pd256,\n\t_mm256_zextps128_ps256, _mm256_zextsi128_si256): New intrinsics.\n\t* config/i386/avx512fintrin.h (_mm512_zextpd128_pd512,\n\t_mm512_zextps128_ps512, _mm512_zextsi128_si512, _mm512_zextpd256_pd512,\n\t_mm512_zextps256_ps512, _mm512_zextsi256_si512): Likewise.\n\n\t* gcc.target/i386/avx-typecast-1.c: New test.\n\t* gcc.target/i386/avx-typecast-2.c: New test.\n\t* gcc.target/i386/avx512f-typecast-2.c: New test.\n\nFrom-SVN: r274313", "tree": {"sha": "2f587dc599b3d24fec1f6399351d8dfe5f88ca09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f587dc599b3d24fec1f6399351d8dfe5f88ca09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fd4b25b508b55fd3f93d1a9f352d085c175b1f2"}], "stats": {"total": 280, "additions": 280, "deletions": 0}, "files": [{"sha": "93e600d68f219bd61af022d2338a5e5cead9cb76", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -1,3 +1,13 @@\n+2019-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/83250\n+\tPR target/91340\n+\t* config/i386/avxintrin.h (_mm256_zextpd128_pd256,\n+\t_mm256_zextps128_ps256, _mm256_zextsi128_si256): New intrinsics.\n+\t* config/i386/avx512fintrin.h (_mm512_zextpd128_pd512,\n+\t_mm512_zextps128_ps512, _mm512_zextsi128_si512, _mm512_zextpd256_pd512,\n+\t_mm512_zextps256_ps512, _mm512_zextsi256_si512): Likewise.\n+\n 2019-08-12  Richard Biener  <rguenther@suse.de>\n \n \tPR lto/91375"}, {"sha": "c2ca4e15acd2c86f7261144c142d7afdfda48fc2", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -15437,6 +15437,48 @@ _mm512_castsi256_si512 (__m256i __A)\n   return (__m512i)__builtin_ia32_si512_256si ((__v8si)__A);\n }\n \n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextpd128_pd512 (__m128d __A)\n+{\n+  return (__m512d) _mm512_insertf32x4 (_mm512_setzero_ps (), (__m128) __A, 0);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextps128_ps512 (__m128 __A)\n+{\n+  return _mm512_insertf32x4 (_mm512_setzero_ps (), __A, 0);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextsi128_si512 (__m128i __A)\n+{\n+  return _mm512_inserti32x4 (_mm512_setzero_si512 (), __A, 0);\n+}\n+\n+extern __inline __m512d\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextpd256_pd512 (__m256d __A)\n+{\n+  return _mm512_insertf64x4 (_mm512_setzero_pd (), __A, 0);\n+}\n+\n+extern __inline __m512\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextps256_ps512 (__m256 __A)\n+{\n+  return (__m512) _mm512_insertf64x4 (_mm512_setzero_pd (), (__m256d) __A, 0);\n+}\n+\n+extern __inline __m512i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_zextsi256_si512 (__m256i __A)\n+{\n+  return _mm512_inserti64x4 (_mm512_setzero_si512 (), __A, 0);\n+}\n+\n extern __inline __mmask16\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_cmpeq_epu32_mask (__m512i __A, __m512i __B)"}, {"sha": "c8f8d53c86fce5affac2eb1846f9d4abce6c4aa9", "filename": "gcc/config/i386/avxintrin.h", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Fconfig%2Fi386%2Favxintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Fconfig%2Fi386%2Favxintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favxintrin.h?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -1484,6 +1484,26 @@ _mm256_castsi128_si256 (__m128i __A)\n   return (__m256i) __builtin_ia32_si256_si ((__v4si)__A);\n }\n \n+/* Similarly, but with zero extension instead of undefined values.  */\n+\n+extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_zextpd128_pd256 (__m128d __A)\n+{\n+  return _mm256_insertf128_pd (_mm256_setzero_pd (), __A, 0);\n+}\n+\n+extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_zextps128_ps256 (__m128 __A)\n+{\n+  return _mm256_insertf128_ps (_mm256_setzero_ps (), __A, 0);\n+}\n+\n+extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_zextsi128_si256 (__m128i __A)\n+{\n+  return _mm256_insertf128_si256 (_mm256_setzero_si256 (), __A, 0);\n+}\n+\n extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_set_m128 ( __m128 __H, __m128 __L)\n {"}, {"sha": "fc1175ff7bb2812c5d4ef76941149a8de1d66769", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -1,3 +1,11 @@\n+2019-08-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/83250\n+\tPR target/91340\n+\t* gcc.target/i386/avx-typecast-1.c: New test.\n+\t* gcc.target/i386/avx-typecast-2.c: New test.\n+\t* gcc.target/i386/avx512f-typecast-2.c: New test.\n+\n 2019-08-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* gnat.dg/null_check.adb: New testcase."}, {"sha": "3b5932644c528773a05ddad08a4e44cc26be729b", "filename": "gcc/testsuite/gcc.target/i386/avx-typecast-1.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-1.c?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void\n+avx_test (void)\n+{\n+  union256i_d  a, ad;\n+  union256  b, bd;\n+  union256d  c, cd;\n+  union128i_d  d, dd;\n+  union128  e, ed;\n+  union128d  f, fd;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      a.a[i] = 7146908634 + i;\n+      b.a[i] = 45.12f + i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      c.a[i] = 41234512513451345.0905 + i;\n+      d.a[i] = 109534 + i;\n+      e.a[i] = 85034.095f + i;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    f.a[i] = 41234512451345.0905 + i;\n+\n+  bd.x = _mm256_castpd_ps (c.x);\n+  if (memcmp (bd.a, c.a, 32))\n+    abort ();\n+\n+  ad.x = _mm256_castpd_si256 (c.x);\n+  if (memcmp (ad.a, c.a, 32))\n+    abort ();\n+\n+  cd.x = _mm256_castps_pd (b.x);\n+  if (memcmp (cd.a, b.a, 32))\n+    abort ();\n+\n+  ad.x = _mm256_castps_si256 (b.x);\n+  if (memcmp (ad.a, b.a, 32))\n+    abort ();\n+\n+  bd.x = _mm256_castsi256_ps (a.x);\n+  if (memcmp (bd.a, a.a, 32))\n+    abort ();\n+\n+  cd.x = _mm256_castsi256_pd (a.x);\n+  if (memcmp (cd.a, a.a, 32))\n+    abort ();\n+\n+  fd.x = _mm256_castpd256_pd128 (c.x);\n+  if (memcmp (fd.a, c.a, 16))\n+    abort ();\n+\n+  ed.x = _mm256_castps256_ps128 (b.x);\n+  if (memcmp (ed.a, b.a, 16))\n+    abort ();\n+\n+  dd.x = _mm256_castsi256_si128 (a.x);\n+  if (memcmp (dd.a, a.a, 16))\n+    abort ();\n+\n+  cd.x = _mm256_castpd128_pd256 (f.x);\n+  if (memcmp (cd.a, f.a, 16))\n+    abort ();\n+\n+  bd.x = _mm256_castps128_ps256 (e.x);\n+  if (memcmp (bd.a, e.a, 16))\n+    abort ();\n+\n+  ad.x = _mm256_castsi128_si256 (d.x);\n+  if (memcmp (ad.a, d.a, 16))\n+    abort ();\n+}"}, {"sha": "679906781aecee1de16f01d3fae43831c2e9c8a0", "filename": "gcc/testsuite/gcc.target/i386/avx-typecast-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-typecast-2.c?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx\" } */\n+/* { dg-require-effective-target avx } */\n+\n+#include \"avx-check.h\"\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void\n+avx_test (void)\n+{\n+  union256i_d ad, zero;\n+  union256 bd;\n+  union256d cd;\n+  union128i_d d;\n+  union128 e;\n+  union128d f;\n+  int i;\n+\n+  for (i = 0; i < 8; i++)\n+    zero.a[i] = 0;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      d.a[i] = 109534 + i;\n+      e.a[i] = 85034.095f + i;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    f.a[i] = 41234512451345.0905 + i;\n+\n+  cd.x = _mm256_zextpd128_pd256 (f.x);\n+  if (memcmp (cd.a, f.a, 16)\n+      || memcmp (&cd.a[2], &zero.a, 16))\n+    abort ();\n+\n+  bd.x = _mm256_zextps128_ps256 (e.x);\n+  if (memcmp (bd.a, e.a, 16)\n+      || memcmp (&bd.a[4], &zero.a, 16))\n+    abort ();\n+\n+  ad.x = _mm256_zextsi128_si256 (d.x);\n+  if (memcmp (ad.a, d.a, 16)\n+      || memcmp (&ad.a[4], &zero.a, 16))\n+    abort ();\n+}"}, {"sha": "a048342959c25128de67b4bd5a976d6ab164a2e4", "filename": "gcc/testsuite/gcc.target/i386/avx512f-typecast-2.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6b2dc248df351be58ecaa8bb5af8ec523d2530e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-typecast-2.c?ref=e6b2dc248df351be58ecaa8bb5af8ec523d2530e", "patch": "@@ -0,0 +1,71 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f\" } */\n+/* { dg-require-effective-target avx512f } */\n+\n+#include \"avx512f-check.h\"\n+\n+extern int memcmp (const void *, const void *, __SIZE_TYPE__);\n+\n+void\n+avx512f_test (void)\n+{\n+  union512i_d ad, zero;\n+  union512 bd;\n+  union512d cd;\n+  union256i_d d;\n+  union256 e;\n+  union256d f;\n+  union128i_d g;\n+  union128 h;\n+  union128d k;\n+  int i;\n+\n+  for (i = 0; i < 16; i++)\n+    zero.a[i] = 0;\n+\n+  for (i = 0; i < 8; i++)\n+    {\n+      d.a[i] = 109534 + i;\n+      e.a[i] = 85034.095f + i;\n+    }\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      f.a[i] = 41234512451345.0905 + i;\n+      g.a[i] = 71469086341 + i;\n+      h.a[i] = 45.1264f + i;\n+    }\n+\n+  for (i = 0; i < 2; i++)\n+    k.a[i] = 7146908634.576 + i;\n+\n+  cd.x = _mm512_zextpd128_pd512 (k.x);\n+  if (memcmp (cd.a, k.a, 16)\n+      || memcmp (&cd.a[2], &zero.a, 48))\n+    abort ();\n+\n+  bd.x = _mm512_zextps128_ps512 (h.x);\n+  if (memcmp (bd.a, h.a, 16)\n+      || memcmp (&bd.a[4], &zero.a, 48))\n+    abort ();\n+\n+  ad.x = _mm512_zextsi128_si512 (g.x);\n+  if (memcmp (ad.a, g.a, 16)\n+      || memcmp (&ad.a[4], &zero.a, 48))\n+    abort ();\n+\n+  cd.x = _mm512_zextpd256_pd512 (f.x);\n+  if (memcmp (cd.a, f.a, 32)\n+      || memcmp (&cd.a[4], &zero.a, 32))\n+    abort ();\n+\n+  bd.x = _mm512_zextps256_ps512 (e.x);\n+  if (memcmp (bd.a, e.a, 32)\n+      || memcmp (&bd.a[8], &zero.a, 32))\n+    abort ();\n+\n+  ad.x = _mm512_zextsi256_si512 (d.x);\n+  if (memcmp (ad.a, d.a, 32)\n+      || memcmp (&ad.a[8], &zero.a, 32))\n+    abort ();\n+}"}]}