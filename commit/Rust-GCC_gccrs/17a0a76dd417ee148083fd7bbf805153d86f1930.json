{"sha": "17a0a76dd417ee148083fd7bbf805153d86f1930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhMGE3NmRkNDE3ZWUxNDgwODNmZDdiYmY4MDUxNTNkODZmMTkzMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-04T20:45:28Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-05-04T20:45:28Z"}, "message": "(find_reg): When looking for locally-allocated hard regs to reclaim,\n\nuse REG_ALLOC_ORDER to find least used.\n\nFrom-SVN: r7210", "tree": {"sha": "2a1f6eaefa371d8cdb0979285e66afb6e3932b32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a1f6eaefa371d8cdb0979285e66afb6e3932b32"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a0a76dd417ee148083fd7bbf805153d86f1930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a0a76dd417ee148083fd7bbf805153d86f1930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a0a76dd417ee148083fd7bbf805153d86f1930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a0a76dd417ee148083fd7bbf805153d86f1930/comments", "author": null, "committer": null, "parents": [{"sha": "761827969bfb2200a63850c4e97042389d0e503a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/761827969bfb2200a63850c4e97042389d0e503a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/761827969bfb2200a63850c4e97042389d0e503a"}], "stats": {"total": 55, "additions": 32, "deletions": 23}, "files": [{"sha": "6d6ac471b913ae8395d4949d949c0055f0cbb4c4", "filename": "gcc/global.c", "status": "modified", "additions": 32, "deletions": 23, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a0a76dd417ee148083fd7bbf805153d86f1930/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a0a76dd417ee148083fd7bbf805153d86f1930/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=17a0a76dd417ee148083fd7bbf805153d86f1930", "patch": "@@ -1079,31 +1079,40 @@ find_reg (allocno, losers, alt_regs_p, accept_call_clobbered, retrying)\n     {\n       /* Count from the end, to find the least-used ones first.  */\n       for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n-\tif (local_reg_n_refs[i] != 0\n-\t    /* Don't use a reg no good for this pseudo.  */\n-\t    && ! TEST_HARD_REG_BIT (used2, i)\n-\t    && HARD_REGNO_MODE_OK (i, mode)\n-\t    && ((double) local_reg_n_refs[i] / local_reg_live_length[i]\n-\t\t< ((double) allocno_n_refs[allocno]\n-\t\t   / allocno_live_length[allocno])))\n-\t  {\n-\t    /* Hard reg I was used less in total by local regs\n-\t       than it would be used by this one allocno!  */\n-\t    int k;\n-\t    for (k = 0; k < max_regno; k++)\n-\t      if (reg_renumber[k] >= 0)\n-\t\t{\n-\t\t  int regno = reg_renumber[k];\n-\t\t  int endregno\n-\t\t    = regno + HARD_REGNO_NREGS (regno, PSEUDO_REGNO_MODE (k));\n+\t{\n+#ifdef REG_ALLOC_ORDER\n+\t  int regno = reg_alloc_order[i];\n+#else\n+\t  int regno = i;\n+#endif\n \n-\t\t  if (i >= regno && i < endregno)\n-\t\t    reg_renumber[k] = -1;\n-\t\t}\n+\t  if (local_reg_n_refs[regno] != 0\n+\t      /* Don't use a reg no good for this pseudo.  */\n+\t      && ! TEST_HARD_REG_BIT (used2, regno)\n+\t      && HARD_REGNO_MODE_OK (regno, mode)\n+\t      && (((double) local_reg_n_refs[regno]\n+\t\t   / local_reg_live_length[regno])\n+\t\t  < ((double) allocno_n_refs[allocno]\n+\t\t     / allocno_live_length[allocno])))\n+\t    {\n+\t      /* Hard reg REGNO was used less in total by local regs\n+\t\t than it would be used by this one allocno!  */\n+\t      int k;\n+\t      for (k = 0; k < max_regno; k++)\n+\t\tif (reg_renumber[k] >= 0)\n+\t\t  {\n+\t\t    int r = reg_renumber[k];\n+\t\t    int endregno\n+\t\t      = r + HARD_REGNO_NREGS (r, PSEUDO_REGNO_MODE (k));\n \n-\t    best_reg = i;\n-\t    break;\n-\t  }\n+\t\t    if (regno >= r && regno < endregno)\n+\t\t      reg_renumber[k] = -1;\n+\t\t  }\n+\n+\t      best_reg = regno;\n+\t      break;\n+\t    }\n+\t}\n     }\n \n   /* Did we find a register?  */"}]}