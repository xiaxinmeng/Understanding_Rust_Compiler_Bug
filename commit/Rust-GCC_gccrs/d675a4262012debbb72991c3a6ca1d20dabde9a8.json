{"sha": "d675a4262012debbb72991c3a6ca1d20dabde9a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDY3NWE0MjYyMDEyZGViYmI3Mjk5MWMzYTZjYTFkMjBkYWJkZTlhOA==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@cygnus.com", "date": "1999-09-23T15:07:26Z"}, "committer": {"name": "Andrew Macleod", "email": "amacleod@gcc.gnu.org", "date": "1999-09-23T15:07:26Z"}, "message": "basic-block.h (find_edge_index): Change parameters.\n\n\nThu Sep 23 10:36:55 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n\n\t* basic-block.h (find_edge_index): Change parameters.\n\t* flow.c (verify_edge_list): Pass basic_block parameters to\n\tfind_edge_index instead of integers.\n\nFrom-SVN: r29622", "tree": {"sha": "8fe93f30808af4c502b786e5bc8aaa3259b932ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fe93f30808af4c502b786e5bc8aaa3259b932ef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d675a4262012debbb72991c3a6ca1d20dabde9a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d675a4262012debbb72991c3a6ca1d20dabde9a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d675a4262012debbb72991c3a6ca1d20dabde9a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d675a4262012debbb72991c3a6ca1d20dabde9a8/comments", "author": null, "committer": null, "parents": [{"sha": "7ce787fe030a2bf16a49cb5a30e6bb521e6507e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ce787fe030a2bf16a49cb5a30e6bb521e6507e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ce787fe030a2bf16a49cb5a30e6bb521e6507e7"}], "stats": {"total": 52, "additions": 31, "deletions": 21}, "files": [{"sha": "90424740f04a40eeeea765282d4c62b3a0f56b2b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d675a4262012debbb72991c3a6ca1d20dabde9a8", "patch": "@@ -1,3 +1,9 @@\n+Thu Sep 23 10:36:55 EDT 1999  Andrew MacLeod  <amacleod@cygnus.com>\n+\n+\t* basic-block.h (find_edge_index): Change parameters.\n+\t* flow.c (verify_edge_list): Pass basic_block parameters to\n+\tfind_edge_index instead of integers.\n+\n Thu Sep 23 15:54:12 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* combine.c (simplify_comparison): Use an unsigned shift to adjust"}, {"sha": "881085b0d07a6c35659607862aa4066da094a8d2", "filename": "gcc/basic-block.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=d675a4262012debbb72991c3a6ca1d20dabde9a8", "patch": "@@ -280,7 +280,8 @@ struct edge_list * create_edge_list\tPROTO ((void));\n void free_edge_list\t\t\tPROTO ((struct edge_list *));\n void print_edge_list\t\t\tPROTO ((FILE *, struct edge_list *));\n void verify_edge_list\t\t\tPROTO ((FILE *, struct edge_list *));\n-int find_edge_index\t\t\tPROTO ((struct edge_list *, int, int));\n+int find_edge_index\t\t\tPROTO ((struct edge_list *, \n+\t\t\t\t\t\tbasic_block, basic_block));\n \n extern void compute_preds_succs\t\tPROTO ((int_list_ptr *, int_list_ptr *,\n \t\t\t\t\t\tint *, int *));"}, {"sha": "e23be42c89f541ec96332f1ddf862e800ff8b21e", "filename": "gcc/flow.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d675a4262012debbb72991c3a6ca1d20dabde9a8/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=d675a4262012debbb72991c3a6ca1d20dabde9a8", "patch": "@@ -6759,7 +6759,7 @@ verify_edge_list (f, elist)\n \t{\n \t  pred = e->src->index;\n \t  succ = e->dest->index;\n-\t  index = EDGE_INDEX (elist, pred, succ);\n+\t  index = EDGE_INDEX (elist, e->src, e->dest);\n \t  if (index == EDGE_INDEX_NO_EDGE)\n \t    {\n \t      fprintf (f, \"*p* No index for edge from %d to %d\\n\",pred, succ);\n@@ -6777,7 +6777,7 @@ verify_edge_list (f, elist)\n     {\n       pred = e->src->index;\n       succ = e->dest->index;\n-      index = EDGE_INDEX (elist, pred, succ);\n+      index = EDGE_INDEX (elist, e->src, e->dest);\n       if (index == EDGE_INDEX_NO_EDGE)\n \t{\n \t  fprintf (f, \"*p* No index for edge from %d to %d\\n\",pred, succ);\n@@ -6813,14 +6813,15 @@ verify_edge_list (f, elist)\n \t      found_edge = 1;\n \t      break;\n \t    }\n-        if (EDGE_INDEX (elist, pred, succ) == EDGE_INDEX_NO_EDGE \n-\t    && found_edge != 0)\n+        if (EDGE_INDEX (elist, BASIC_BLOCK (pred), BASIC_BLOCK (succ)) \n+\t    == EDGE_INDEX_NO_EDGE && found_edge != 0)\n \t  fprintf (f, \"*** Edge (%d, %d) appears to not have an index\\n\",\n \t  \t   pred, succ);\n-        if (EDGE_INDEX (elist, pred, succ) != EDGE_INDEX_NO_EDGE\n-\t    && found_edge == 0)\n+        if (EDGE_INDEX (elist, BASIC_BLOCK (pred), BASIC_BLOCK (succ)) \n+\t    != EDGE_INDEX_NO_EDGE && found_edge == 0)\n \t  fprintf (f, \"*** Edge (%d, %d) has index %d, but there is no edge\\n\",\n-\t  \t   pred, succ, EDGE_INDEX (elist, pred, succ));\n+\t  \t   pred, succ, EDGE_INDEX (elist, BASIC_BLOCK (pred), \n+\t\t\t\t\t   BASIC_BLOCK (succ)));\n       }\n     for (succ = 0 ; succ < n_basic_blocks; succ++)\n       {\n@@ -6841,14 +6842,15 @@ verify_edge_list (f, elist)\n \t      found_edge = 1;\n \t      break;\n \t    }\n-        if (EDGE_INDEX (elist, ENTRY_BLOCK, succ) == EDGE_INDEX_NO_EDGE \n-\t    && found_edge != 0)\n+        if (EDGE_INDEX (elist, ENTRY_BLOCK_PTR, BASIC_BLOCK (succ)) \n+\t    == EDGE_INDEX_NO_EDGE && found_edge != 0)\n \t  fprintf (f, \"*** Edge (entry, %d) appears to not have an index\\n\",\n \t  \t   succ);\n-        if (EDGE_INDEX (elist, ENTRY_BLOCK, succ) != EDGE_INDEX_NO_EDGE\n-\t    && found_edge == 0)\n+        if (EDGE_INDEX (elist, ENTRY_BLOCK_PTR, BASIC_BLOCK (succ)) \n+\t    != EDGE_INDEX_NO_EDGE && found_edge == 0)\n \t  fprintf (f, \"*** Edge (entry, %d) has index %d, but no edge exists\\n\",\n-\t  \t   succ, EDGE_INDEX (elist, ENTRY_BLOCK, succ));\n+\t  \t   succ, EDGE_INDEX (elist, ENTRY_BLOCK_PTR, \n+\t\t\t\t     BASIC_BLOCK (succ)));\n       }\n     for (pred = 0 ; pred < n_basic_blocks; pred++)\n       {\n@@ -6869,14 +6871,15 @@ verify_edge_list (f, elist)\n \t      found_edge = 1;\n \t      break;\n \t    }\n-        if (EDGE_INDEX (elist, pred, EXIT_BLOCK) == EDGE_INDEX_NO_EDGE\n-\t    && found_edge != 0)\n+        if (EDGE_INDEX (elist, BASIC_BLOCK (pred), EXIT_BLOCK_PTR) \n+\t    == EDGE_INDEX_NO_EDGE && found_edge != 0)\n \t  fprintf (f, \"*** Edge (%d, exit) appears to not have an index\\n\",\n \t  \t   pred);\n-        if (EDGE_INDEX (elist, pred, EXIT_BLOCK) != EDGE_INDEX_NO_EDGE\n-\t    && found_edge == 0)\n+        if (EDGE_INDEX (elist, BASIC_BLOCK (pred), EXIT_BLOCK_PTR) \n+\t    != EDGE_INDEX_NO_EDGE && found_edge == 0)\n \t  fprintf (f, \"*** Edge (%d, exit) has index %d, but no edge exists\\n\",\n-\t  \t   pred, EDGE_INDEX (elist, pred, EXIT_BLOCK));\n+\t  \t   pred, EDGE_INDEX (elist, BASIC_BLOCK (pred), \n+\t\t\t\t     EXIT_BLOCK_PTR));\n       }\n }\n \n@@ -6886,13 +6889,13 @@ verify_edge_list (f, elist)\n int\n find_edge_index (edge_list, pred, succ)\n      struct edge_list *edge_list;\n-     int pred, succ;\n+     basic_block pred, succ;\n {\n   int x;\n   for (x = 0; x < NUM_EDGES (edge_list); x++)\n     {\n-      if (INDEX_EDGE_PRED_BB (edge_list, x)->index == pred\n-\t  && INDEX_EDGE_SUCC_BB (edge_list, x)->index == succ)\n+      if (INDEX_EDGE_PRED_BB (edge_list, x) == pred\n+\t  && INDEX_EDGE_SUCC_BB (edge_list, x) == succ)\n \treturn x;\n     }\n   return (EDGE_INDEX_NO_EDGE);"}]}