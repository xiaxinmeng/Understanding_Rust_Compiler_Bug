{"sha": "35c125cb6ac47fa97aa5ee22f987a38e63adad08", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjMTI1Y2I2YWM0N2ZhOTdhYTVlZTIyZjk4N2EzOGU2M2FkYWQwOA==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-05T00:16:36Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-05T00:16:36Z"}, "message": "Daily bump.", "tree": {"sha": "fff11f1136a0cbed5109491457fa6c98fb96cdaf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fff11f1136a0cbed5109491457fa6c98fb96cdaf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35c125cb6ac47fa97aa5ee22f987a38e63adad08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c125cb6ac47fa97aa5ee22f987a38e63adad08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c125cb6ac47fa97aa5ee22f987a38e63adad08", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c125cb6ac47fa97aa5ee22f987a38e63adad08/comments", "author": null, "committer": null, "parents": [{"sha": "8f565d255a3157828e45f8b9844b3d156193c182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f565d255a3157828e45f8b9844b3d156193c182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f565d255a3157828e45f8b9844b3d156193c182"}], "stats": {"total": 258, "additions": 257, "deletions": 1}, "files": [{"sha": "f5777661c11c7a4512507e6ad0acc9ef4ce5a73b", "filename": "contrib/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,17 @@\n+2020-11-04  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_repository.py: Set strict=True\n+\tfor parse_git_revisions as a default.\n+\n+2020-11-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* gcc-changelog/git_commit.py (item_parenthesis_empty_regex,\n+\titem_parenthesis_regex): Add.\n+\t(check_for_empty_description): Use them.\n+\t* gcc-changelog/test_email.py (test_emptry_entry_desc,\n+\ttest_emptry_entry_desc_2): Add.\n+\t* gcc-changelog/test_patches.txt: Add two testcases for it.\n+\n 2020-11-03  Tobias Burnus  <tobias@codesourcery.com>\n \n \t* gcc-changelog/git_email.py: Add unidiff_supports_renaming check."}, {"sha": "755c12906d4cefbe585eed03587d745c28ae2034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,114 @@\n+2020-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* tree-vect-slp.c (vect_analyze_slp_instance): Moved load/store lanes\n+\tcheck to ...\n+\t* tree-vect-loop.c (vect_analyze_loop_2): ..Here\n+\n+2020-11-04  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.c (NR_C_MODES): Unhardcode.\n+\t(s390_alloc_pool): Use size_t for iterating from 0 to\n+\tNR_C_MODES.\n+\t(s390_add_constant): Likewise.\n+\t(s390_find_constant): Likewise.\n+\t(s390_dump_pool): Likewise.\n+\t(s390_free_pool): Likewise.\n+\n+2020-11-04  Ilya Leoshkevich  <iii@linux.ibm.com>\n+\n+\t* config/s390/s390.md (RRe): Remove.\n+\t(RXe): Remove.\n+\n+2020-11-04  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\tPR tree-optimization/97515\n+\t* gimple-range-cache.h (class ranger_cache): New prototypes plus\n+\ttemporal cache pointer.\n+\t* gimple-range-cache.cc (struct range_timestamp): New.\n+\t(class temporal_cache): New.\n+\t(temporal_cache::temporal_cache): New.\n+\t(temporal_cache::~temporal_cache): New.\n+\t(temporal_cache::get_timestamp): New.\n+\t(temporal_cache::set_dependency): New.\n+\t(temporal_cache::temporal_value): New.\n+\t(temporal_cache::current_p): New.\n+\t(temporal_cache::set_timestamp): New.\n+\t(temporal_cache::set_always_current): New.\n+\t(ranger_cache::ranger_cache): Allocate the temporal cache.\n+\t(ranger_cache::~ranger_cache): Free temporal cache.\n+\t(ranger_cache::get_non_stale_global_range): New.\n+\t(ranger_cache::set_global_range): Add a timestamp.\n+\t(ranger_cache::register_dependency): New.  Add timestamp dependency.\n+\t* gimple-range.cc (gimple_ranger::range_of_range_op): Add operand\n+\tdependencies.\n+\t(gimple_ranger::range_of_phi): Ditto.\n+\t(gimple_ranger::range_of_stmt): Check if global range is stale, and\n+\trecalculate if so.\n+\n+2020-11-04  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\t* targhooks.c (default_zero_call_used_regs): Fix flag-name typo\n+\tin sorry.\n+\n+2020-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vectorizer.h (vectorizable_phi): Adjust prototype.\n+\t* tree-vect-stmts.c (vect_transform_stmt): Adjust.\n+\t(vect_analyze_stmt): Pass cost_vec to vectorizable_phi.\n+\t* tree-vect-loop.c (vectorizable_phi): Do costing.\n+\n+2020-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97709\n+\t* tree-vect-loop.c (vectorizable_live_operation): Set\n+\tSSA_NAME_OCCURS_IN_ABNORMAL_PHI when necessary.\n+\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97690\n+\t* tree-ssa-phiopt.c (conditional_replacement): Also optimize\n+\tcond ? pow2p_cst : 0 as ((type) cond) << cst.\n+\n+2020-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (vectorizable_induction): Re-instantiate\n+\tpreviously removed CSE of SLP IVs.\n+\n+2020-11-04  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386-options.c (ix86_recompute_optlev_based_flags):\n+\tFix Intel MCU psABI comment w.r.t DEFAULT_PCC_STRUCT_RETURN.\n+\n+2020-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR bootstrap/97666\n+\t* tree-vect-slp.c (vect_build_slp_tree_2): Revert previous\n+\tfix and instead adjust the memset.\n+\n+2020-11-04  Pat Bernardi  <bernardi@adacore.com>\n+\n+\t* config/i386/i386elf.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n+\t(ASM_OUTPUT_ASCII): Likewise.\n+\t(DEFAULT_PCC_STRUCT_RETURN): Define.\n+\t* config/i386/i386.c (ix86_return_in_memory): Remove\n+\tSUBTARGET_RETURN_IN_MEMORY.\n+\n+2020-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97540\n+\t* ira.c: (ira_setup_alts): Extract memory from operand only\n+\tfor special memory constraint.\n+\t* recog.c (asm_operand_ok): Ditto.\n+\t* lra-constraints.c (process_alt_operands): MEM_P is\n+\trequired for normal memory constraint.\n+\n+2020-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\tPR target/97532\n+\t* lra-constraints.c (valid_address_p): Handle operand of\n+\tspecial memory constraint.\n+\t(process_address_1): Ditto.\n+\n 2020-11-03  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/97695"}, {"sha": "35d25ab2f20fa465337d0b0a04b40728784582d7", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1 +1 @@\n-20201104\n+20201105"}, {"sha": "1022b11ea09271c9481a3e55656687090a88a3bf", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,14 @@\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97670\n+\t* c-omp.c (c_omp_split_clauses): Look through array reductions to find\n+\tunderlying decl to clear in the allocate_head bitmap.\n+\n+2020-11-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* c-objc.h (objc_non_constant_expr_p): New.\n+\t* stub-objc.c (objc_non_constant_expr_p): New.\n+\n 2020-11-03  Nathan Sidwell  <nathan@acm.org>\n \n \t* c.opt (MQ,MT): Reword description to be make-agnostic."}, {"sha": "43a9c5809475e7c3e2d48bda32534e218b2660e0", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,22 @@\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97670\n+\t* c-typeck.c (c_finish_omp_clauses): Look through array reductions to\n+\tfind underlying decl to clear in the aligned_head bitmap.\n+\n+2020-11-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-decl.c (handle_nodiscard_attribute): New.\n+\t(std_attribute_table): Add nodiscard.\n+\t* c-parser.c (c_parser_std_attribute): Expect argument to\n+\tnodiscard attribute to be a string.  Do not special-case ignoring\n+\tnodiscard.\n+\t* c-typeck.c (maybe_warn_nodiscard): New.\n+\t(build_compound_expr, emit_side_effect_warnings): Call\n+\tmaybe_warn_nodiscard.\n+\t(c_process_expr_stmt, c_finish_stmt_expr): Also call\n+\temit_side_effect_warnings if warn_unused_result.\n+\n 2020-10-29  Asher Gordon  <AsDaGo@posteo.net>\n \n \t* c-typeck.c (free_all_tagged_tu_seen_up_to): Replace free"}, {"sha": "7ad2d53f2c72fe142b3378e80e7a28a7d99e13cf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,18 @@\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97670\n+\t* semantics.c (finish_omp_clauses): Look through array reductions to\n+\tfind underlying decl to clear in the aligned_head bitmap.  Use\n+\tDECL_UID (t) instead of DECL_UID (OMP_CLAUSE_DECL (c)) when clearing\n+\tin the bitmap.  Only diagnose errors about allocate vars not being\n+\tprivatized on the same construct on allocate clause if it has\n+\ta DECL_P OMP_CLAUSE_DECL.\n+\n+2020-11-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* constexpr.c (potential_constant_expression_1): Handle\n+\texpressions known to be non-constant for Objective-C.\n+\n 2020-11-03  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (is_byte_access_type): Don't use char_type_p."}, {"sha": "6b4d00848f2402735d4b9ed88c1f958a6cdafda8", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,8 @@\n+2020-11-04  Ian Lance Taylor  <iant@golang.org>\n+\n+\t* go-lang.c (go_langhook_post_options): Disable\n+\t-fipa-icf-functions if it was not explicitly enabled.\n+\n 2020-09-14  Jakub Jelinek  <jakub@redhat.com>\n \n \t* go-gcc.cc (Gcc_backend::function): Adjust"}, {"sha": "a225e647c71d0910609f335943ed774b35d759a5", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,7 @@\n+2020-11-04  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\t* objc-act.c (objc_non_constant_expr_p): New.\n+\n 2020-11-01  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* objc-act.c (synth_module_prologue): Get the SEL identifier."}, {"sha": "64cd385aafbdf661ce0ffb53f3564590ab1f85b1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,49 @@\n+2020-11-04  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.dg/vect/slp-11b.c: Update output scan.\n+\t* gcc.dg/vect/slp-perm-6.c: Likewise.\n+\n+2020-11-04  Andrew MacLeod  <amacleod@redhat.com>\n+\n+\t* gcc.dg/pr97515.c: Check listing for folding of entire function.\n+\n+2020-11-04  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97709\n+\t* gcc.dg/vect/bb-slp-pr97709.c: New testcase.\n+\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/97690\n+\t* gcc.dg/tree-ssa/phi-opt-22.c: New test.\n+\t* gcc.dg/tree-ssa/ssa-ccp-11.c: Use -O2 instead of -O1.\n+\t* gcc.dg/vect/bb-slp-pattern-2.c (foo): Use ? 2 : 7, ? 4 : 7 and\n+\t? 8 : 7 instead of ? 2 : 0, ? 4 : 0, ? 8 : 0.\n+\n+2020-11-04  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/arm/pure-code/no-literal-pool-m0.c: Add dg-skip-if\n+\tand -mfloat-abi=soft option.\n+\t* gcc.target/arm/pure-code/no-literal-pool-m23.c: Likewise.\n+\n+2020-11-04  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97670\n+\t* c-c++-common/gomp/allocate-4.c: New test.\n+\t* g++.dg/gomp/allocate-2.C: New test.\n+\t* g++.dg/gomp/allocate-3.C: New test.\n+\n+2020-11-04  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-attr-nodiscard-1.c, gcc.dg/c2x-attr-nodiscard-2.c,\n+\tgcc.dg/c2x-attr-nodiscard-3.c, gcc.dg/c2x-attr-nodiscard-4.c: New\n+\ttests.\n+\t* gcc.dg/c2x-attr-syntax-5.c: Remove nodiscard test.\n+\n+2020-11-04  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/pr97540.c: New test.\n+\n 2020-11-03  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.c-torture/execute/pr97695.c: New test."}, {"sha": "3221fbb087cb8bcfebb10381a4546f93382c044f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c125cb6ac47fa97aa5ee22f987a38e63adad08/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c125cb6ac47fa97aa5ee22f987a38e63adad08/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=35c125cb6ac47fa97aa5ee22f987a38e63adad08", "patch": "@@ -1,3 +1,34 @@\n+2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97719\n+\t* include/std/sstream (basic_stringstream(string_type&&, openmode)):\n+\tFix default argument.\n+\t* testsuite/27_io/basic_stringstream/cons/char/97719.cc: New test.\n+\n+2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/18_support/96817.cc: Fail fail if the library is\n+\tconfigured to not use futexes.\n+\n+2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/94971\n+\t* include/bits/stl_algo.h (search(FIter, FIter, const Searcher):\n+\tAdjust #if condition.\n+\t* include/parallel/algo.h (search(FIter, FIter, const Searcher&):\n+\tDefine new overload for C++17.\n+\n+2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/92285\n+\t* doc/xml/manual/evolution.xml: Document change to base class.\n+\t* doc/html/manual/api.html: Regenerate.\n+\n+2020-11-04  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/uniform_int_dist.h (uniform_int_distribution::_S_nd):\n+\tUse qualified-id to refer to static member functions.\n+\n 2020-11-03  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/syncstream: Include <bits/std_mutex.h>"}]}