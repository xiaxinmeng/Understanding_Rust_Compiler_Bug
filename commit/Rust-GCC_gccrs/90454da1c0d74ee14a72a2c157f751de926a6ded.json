{"sha": "90454da1c0d74ee14a72a2c157f751de926a6ded", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA0NTRkYTFjMGQ3NGVlMTRhNzJhMmMxNTdmNzUxZGU5MjZhNmRlZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-09T23:20:39Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-10-09T23:20:39Z"}, "message": "re PR c++/38980 (missing -Wformat warning on const char format string)\n\n/cp\n2011-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38980\n\t* init.c (constant_value_1): Add bool parameter.\n\t(decl_constant_value_safe): Add.\n\t(integral_constant_value): Adjust.\n\t(decl_constant_value): Adjust.\n\t* cp-tree.h (decl_constant_value_safe): Declare.\n\t* typeck.c (decay_conversion): Use decl_constant_value_safe.\n\t* call.c (convert_like_real): Likewise.\n\n/testsuite\n2011-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/38980\n\t* g++.dg/warn/format5.C: New.\n\nFrom-SVN: r179731", "tree": {"sha": "6019757ae3f0d04b80ae95e56cc4528d78e752af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6019757ae3f0d04b80ae95e56cc4528d78e752af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90454da1c0d74ee14a72a2c157f751de926a6ded", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90454da1c0d74ee14a72a2c157f751de926a6ded", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90454da1c0d74ee14a72a2c157f751de926a6ded", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90454da1c0d74ee14a72a2c157f751de926a6ded/comments", "author": null, "committer": null, "parents": [{"sha": "75e649f6f48d121f830f244827551618d903fd07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e649f6f48d121f830f244827551618d903fd07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e649f6f48d121f830f244827551618d903fd07"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "c27d8a627e8fec71f9ec547b0d243d5ea08dd130", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -1,3 +1,14 @@\n+2011-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38980\n+\t* init.c (constant_value_1): Add bool parameter.\n+\t(decl_constant_value_safe): Add.\n+\t(integral_constant_value): Adjust.\n+\t(decl_constant_value): Adjust.\n+\t* cp-tree.h (decl_constant_value_safe): Declare.\n+\t* typeck.c (decay_conversion): Use decl_constant_value_safe.\n+\t* call.c (convert_like_real): Likewise.\n+\n 2011-10-09  Jakub Jelinek  <jakub@redhat.com>\n \t    Diego Novillo  <dnovillo@google.com>\n "}, {"sha": "ee71d9ba6c99af009d3f076cc142b8051625967b", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -5703,7 +5703,7 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t leave it as an lvalue.  */\n       if (inner >= 0)\n         {   \n-          expr = decl_constant_value (expr);\n+          expr = decl_constant_value_safe (expr);\n           if (expr == null_node && INTEGRAL_OR_UNSCOPED_ENUMERATION_TYPE_P (totype))\n             /* If __null has been converted to an integer type, we do not\n                want to warn about uses of EXPR as an integer, rather than"}, {"sha": "f824f38b74ab8dc04240b1f12a518c7e45f2fcbe", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -5097,6 +5097,7 @@ extern tree create_temporary_var\t\t(tree);\n extern void initialize_vtbl_ptrs\t\t(tree);\n extern tree build_java_class_ref\t\t(tree);\n extern tree integral_constant_value\t\t(tree);\n+extern tree decl_constant_value_safe\t        (tree);\n extern int diagnose_uninitialized_cst_or_ref_member (tree, bool, bool);\n \n /* in lex.c */"}, {"sha": "7897fffb684de17f01413d4a57816f78c19ad532", "filename": "gcc/cp/init.c", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -1794,10 +1794,11 @@ build_offset_ref (tree type, tree member, bool address_p)\n    constant initializer, return the initializer (or, its initializers,\n    recursively); otherwise, return DECL.  If INTEGRAL_P, the\n    initializer is only returned if DECL is an integral\n-   constant-expression.  */\n+   constant-expression.  If RETURN_AGGREGATE_CST_OK_P, it is ok to\n+   return an aggregate constant.  */\n \n static tree\n-constant_value_1 (tree decl, bool integral_p)\n+constant_value_1 (tree decl, bool integral_p, bool return_aggregate_cst_ok_p)\n {\n   while (TREE_CODE (decl) == CONST_DECL\n \t || (integral_p\n@@ -1834,12 +1835,13 @@ constant_value_1 (tree decl, bool integral_p)\n       if (!init\n \t  || !TREE_TYPE (init)\n \t  || !TREE_CONSTANT (init)\n-\t  || (!integral_p\n-\t      /* Do not return an aggregate constant (of which\n-\t\t string literals are a special case), as we do not\n-\t\t want to make inadvertent copies of such entities,\n-\t\t and we must be sure that their addresses are the\n-\t\t same everywhere.  */\n+\t  || (!integral_p && !return_aggregate_cst_ok_p\n+\t      /* Unless RETURN_AGGREGATE_CST_OK_P is true, do not\n+\t\t return an aggregate constant (of which string\n+\t\t literals are a special case), as we do not want\n+\t\t to make inadvertent copies of such entities, and\n+\t\t we must be sure that their addresses are the\n+ \t\t same everywhere.  */\n \t      && (TREE_CODE (init) == CONSTRUCTOR\n \t\t  || TREE_CODE (init) == STRING_CST)))\n \tbreak;\n@@ -1856,18 +1858,28 @@ constant_value_1 (tree decl, bool integral_p)\n tree\n integral_constant_value (tree decl)\n {\n-  return constant_value_1 (decl, /*integral_p=*/true);\n+  return constant_value_1 (decl, /*integral_p=*/true,\n+\t\t\t   /*return_aggregate_cst_ok_p=*/false);\n }\n \n /* A more relaxed version of integral_constant_value, used by the\n-   common C/C++ code and by the C++ front end for optimization\n-   purposes.  */\n+   common C/C++ code.  */\n \n tree\n decl_constant_value (tree decl)\n {\n-  return constant_value_1 (decl,\n-\t\t\t   /*integral_p=*/processing_template_decl);\n+  return constant_value_1 (decl, /*integral_p=*/processing_template_decl,\n+\t\t\t   /*return_aggregate_cst_ok_p=*/true);\n+}\n+\n+/* A version of integral_constant_value used by the C++ front end for\n+   optimization purposes.  */\n+\n+tree\n+decl_constant_value_safe (tree decl)\n+{\n+  return constant_value_1 (decl, /*integral_p=*/processing_template_decl,\n+\t\t\t   /*return_aggregate_cst_ok_p=*/false);\n }\n \f\n /* Common subroutines of build_new and build_vec_delete.  */"}, {"sha": "305f8f5b937cb4805b78e2987443aadaf54994ae", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -1827,7 +1827,7 @@ decay_conversion (tree exp)\n   /* FIXME remove? at least need to remember that this isn't really a\n      constant expression if EXP isn't decl_constant_var_p, like with\n      C_MAYBE_CONST_EXPR.  */\n-  exp = decl_constant_value (exp);\n+  exp = decl_constant_value_safe (exp);\n   if (error_operand_p (exp))\n     return error_mark_node;\n "}, {"sha": "d3be0344435029f5789e2ce859cbf691103e9132", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -1,3 +1,8 @@\n+2011-10-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/38980\n+\t* g++.dg/warn/format5.C: New.\n+\n 2011-10-09  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/45044\n@@ -22,7 +27,7 @@\n \n 2011-10-08  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n-\tPR libobjc/50428\t\n+\tPR libobjc/50428\n \t* objc/execute/initialize-1.m: New test.\n \n 2011-10-08  Paul Thomas  <pault@gcc.gnu.org>"}, {"sha": "e219f88109269ca0902c2321a9082d7c958d8254", "filename": "gcc/testsuite/g++.dg/warn/format5.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fformat5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90454da1c0d74ee14a72a2c157f751de926a6ded/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fformat5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Fformat5.C?ref=90454da1c0d74ee14a72a2c157f751de926a6ded", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/38980\n+// { dg-options \"-Wformat\" }\n+\n+extern \"C\"\n+int printf(const char *format, ...) __attribute__((format(printf, 1, 2) ));\n+\n+const char fmt1[] = \"Hello, %s\";\n+\n+void f()\n+{\n+  printf(fmt1, 3); // { dg-warning \"expects argument\" }\n+}"}]}