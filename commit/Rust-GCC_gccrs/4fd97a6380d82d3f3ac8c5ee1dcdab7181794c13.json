{"sha": "4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZkOTdhNjM4MGQ4MmQzZjNhYzhjNWVlMWRjZGFiNzE4MTc5NGMxMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-09-23T19:58:16Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-09-23T19:58:16Z"}, "message": "revert: stl_algobase.h (max, min): Use conditional operator.\n\n2012-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tRevert:\n\t2012-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/stl_algobase.h (max, min): Use conditional operator.\n\nFrom-SVN: r191652", "tree": {"sha": "5c984f233857a045329028fdbd6a5a9eedb5bce9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c984f233857a045329028fdbd6a5a9eedb5bce9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13/comments", "author": null, "committer": null, "parents": [{"sha": "f18b27b3e272455be40fefd65725702f936c0cd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f18b27b3e272455be40fefd65725702f936c0cd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f18b27b3e272455be40fefd65725702f936c0cd1"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "70ee2a88e1beff9f6323922d122cceb6e3c0cc11", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "patch": "@@ -1,3 +1,10 @@\n+2012-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tRevert:\n+\t2012-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/stl_algobase.h (max, min): Use conditional operator.\n+\n 2012-09-23  Uros Bizjak  <ubizjak@gmail.com>\n \n \tPR libstdc++/54675"}, {"sha": "fe30f6ce9f5e7c2931cfb424257f2e27ca4a7650", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=4fd97a6380d82d3f3ac8c5ee1dcdab7181794c13", "patch": "@@ -195,8 +195,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // concept requirements\n       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n-\n-      return __b < __a ? __b : __a;\n+      //return __b < __a ? __b : __a;\n+      if (__b < __a)\n+\treturn __b;\n+      return __a;\n     }\n \n   /**\n@@ -216,8 +218,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       // concept requirements\n       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)\n-\n-      return  __a < __b ? __b : __a;\n+      //return  __a < __b ? __b : __a;\n+      if (__a < __b)\n+\treturn __b;\n+      return __a;\n     }\n \n   /**\n@@ -234,7 +238,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Compare>\n     inline const _Tp&\n     min(const _Tp& __a, const _Tp& __b, _Compare __comp)\n-    { return __comp(__b, __a) ? __b : __a; }\n+    {\n+      //return __comp(__b, __a) ? __b : __a;\n+      if (__comp(__b, __a))\n+\treturn __b;\n+      return __a;\n+    }\n \n   /**\n    *  @brief This does what you think it does.\n@@ -250,7 +259,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp, typename _Compare>\n     inline const _Tp&\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n-    { return __comp(__a, __b) ? __b : __a; }\n+    {\n+      //return __comp(__a, __b) ? __b : __a;\n+      if (__comp(__a, __b))\n+\treturn __b;\n+      return __a;\n+    }\n \n   // If _Iterator is a __normal_iterator return its base (a plain pointer,\n   // normally) otherwise return it untouched.  See copy, fill, ... "}]}