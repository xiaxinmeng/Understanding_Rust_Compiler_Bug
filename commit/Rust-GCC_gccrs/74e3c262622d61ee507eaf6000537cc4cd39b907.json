{"sha": "74e3c262622d61ee507eaf6000537cc4cd39b907", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzRlM2MyNjI2MjJkNjFlZTUwN2VhZjYwMDA1MzdjYzRjZDM5YjkwNw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-10-16T07:52:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-10-16T07:52:32Z"}, "message": "gimple-fold.c (gimple_fold_builtin_memory_op): Use gimple_build and get rid of force_gimple_operand_gsi.\n\n2015-10-16  Richard Biener  <rguenther@suse.de>\n\n\t* gimple-fold.c (gimple_fold_builtin_memory_op): Use gimple_build\n\tand get rid of force_gimple_operand_gsi.\n\t(gimple_fold_builtin_memory_chk): Likewise.\n\t(gimple_fold_builtin_stxcpy_chk): Likewise.\n\t(rewrite_to_defined_overflow): Likewise.\n\t(gimple_convert_to_ptrofftype): New function.\n\t* gimple-fold.h (gimple_convert_to_ptrofftype): New overload,\n\tdeclare.\n\nFrom-SVN: r228863", "tree": {"sha": "12b7942cbfd2cb3899bacd9893cc12f3a473ced1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12b7942cbfd2cb3899bacd9893cc12f3a473ced1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/74e3c262622d61ee507eaf6000537cc4cd39b907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e3c262622d61ee507eaf6000537cc4cd39b907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74e3c262622d61ee507eaf6000537cc4cd39b907", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74e3c262622d61ee507eaf6000537cc4cd39b907/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "aa00059cffcaf09573f37b64351a550ba6904594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa00059cffcaf09573f37b64351a550ba6904594", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa00059cffcaf09573f37b64351a550ba6904594"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "99ce1298eabae71422f0e06e47c877981982da43", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=74e3c262622d61ee507eaf6000537cc4cd39b907", "patch": "@@ -1,3 +1,14 @@\n+2015-10-16  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Use gimple_build\n+\tand get rid of force_gimple_operand_gsi.\n+\t(gimple_fold_builtin_memory_chk): Likewise.\n+\t(gimple_fold_builtin_stxcpy_chk): Likewise.\n+\t(rewrite_to_defined_overflow): Likewise.\n+\t(gimple_convert_to_ptrofftype): New function.\n+\t* gimple-fold.h (gimple_convert_to_ptrofftype): New overload,\n+\tdeclare.\n+\n 2015-10-16  Richard Biener  <rguenther@suse.de>\n \n \t* tree-nested.h (build_addr): Adjust prototype."}, {"sha": "2e5942afb87395bdb4056d43f717f7fe09c5978d", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=74e3c262622d61ee507eaf6000537cc4cd39b907", "patch": "@@ -1045,16 +1045,20 @@ gimple_fold_builtin_memory_op (gimple_stmt_iterator *gsi,\n     }\n \n done:\n+  gimple_seq stmts = NULL;\n   if (endp == 0 || endp == 3)\n     len = NULL_TREE;\n   else if (endp == 2)\n-    len = fold_build2_loc (loc, MINUS_EXPR, TREE_TYPE (len), len,\n-\t\t\t   ssize_int (1));\n+    len = gimple_build (&stmts, loc, MINUS_EXPR, TREE_TYPE (len), len,\n+\t\t\tssize_int (1));\n   if (endp == 2 || endp == 1)\n-    dest = fold_build_pointer_plus_loc (loc, dest, len);\n+    {\n+      len = gimple_convert_to_ptrofftype (&stmts, loc, len);\n+      dest = gimple_build (&stmts, loc, POINTER_PLUS_EXPR,\n+\t\t\t   TREE_TYPE (dest), dest, len);\n+    }\n \n-  dest = force_gimple_operand_gsi (gsi, dest, false, NULL_TREE, true,\n-\t\t\t\t   GSI_SAME_STMT);\n+  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n   gimple *repl = gimple_build_assign (lhs, dest);\n   gsi_replace (gsi, repl, false);\n   return true;\n@@ -1708,10 +1712,10 @@ gimple_fold_builtin_memory_chk (gimple_stmt_iterator *gsi,\n \t}\n       else\n \t{\n-\t  tree temp = fold_build_pointer_plus_loc (loc, dest, len);\n-\t  temp = force_gimple_operand_gsi (gsi, temp,\n-\t\t\t\t\t   false, NULL_TREE, true,\n-\t\t\t\t\t   GSI_SAME_STMT);\n+\t  gimple_seq stmts = NULL;\n+\t  len = gimple_convert_to_ptrofftype (&stmts, loc, len);\n+\t  tree temp = gimple_build (&stmts, loc, POINTER_PLUS_EXPR, dest, len);\n+\t  gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n \t  replace_call_with_value (gsi, temp);\n \t  return true;\n \t}\n@@ -1844,11 +1848,11 @@ gimple_fold_builtin_stxcpy_chk (gimple_stmt_iterator *gsi,\n \t      if (!fn)\n \t\treturn false;\n \n-\t      len = fold_convert_loc (loc, size_type_node, len);\n-\t      len = size_binop_loc (loc, PLUS_EXPR, len,\n-\t\t\t\t    build_int_cst (size_type_node, 1));\n-\t      len = force_gimple_operand_gsi (gsi, len, true, NULL_TREE,\n-\t\t\t\t\t      true, GSI_SAME_STMT);\n+\t      gimple_seq stmts = NULL;\n+\t      len = gimple_convert (&stmts, loc, size_type_node, len);\n+\t      len = gimple_build (&stmts, loc, PLUS_EXPR, size_type_node, len,\n+\t\t\t\t  build_int_cst (size_type_node, 1));\n+\t      gsi_insert_seq_before (gsi, stmts, GSI_SAME_STMT);\n \t      gimple *repl = gimple_build_call (fn, 4, dest, src, len, size);\n \t      replace_call_with_call_and_fold (gsi, repl);\n \t      return true;\n@@ -5940,12 +5944,9 @@ rewrite_to_defined_overflow (gimple *stmt)\n   gimple_seq stmts = NULL;\n   for (unsigned i = 1; i < gimple_num_ops (stmt); ++i)\n     {\n-      gimple_seq stmts2 = NULL;\n-      gimple_set_op (stmt, i,\n-\t\t     force_gimple_operand (fold_convert (type,\n-\t\t\t\t\t\t\t gimple_op (stmt, i)),\n-\t\t\t\t\t   &stmts2, true, NULL_TREE));\n-      gimple_seq_add_seq (&stmts, stmts2);\n+      tree op = gimple_op (stmt, i);\n+      op = gimple_convert (&stmts, type, op);\n+      gimple_set_op (stmt, i, op);\n     }\n   gimple_assign_set_lhs (stmt, make_ssa_name (type, stmt));\n   if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n@@ -6154,6 +6155,20 @@ gimple_convert (gimple_seq *seq, location_t loc, tree type, tree op)\n   return gimple_build (seq, loc, NOP_EXPR, type, op);\n }\n \n+/* Build the conversion (ptrofftype) OP with a result of a type\n+   compatible with ptrofftype with location LOC if such conversion\n+   is neccesary in GIMPLE, simplifying it first.\n+   Returns the built expression value and appends\n+   statements possibly defining it to SEQ.  */\n+\n+tree\n+gimple_convert_to_ptrofftype (gimple_seq *seq, location_t loc, tree op)\n+{\n+  if (ptrofftype_p (TREE_TYPE (op)))\n+    return op;\n+  return gimple_convert (seq, loc, sizetype, op);\n+}\n+\n /* Return true if the result of assignment STMT is known to be non-negative.\n    If the return value is based on the assumption that signed overflow is\n    undefined, set *STRICT_OVERFLOW_P to true; otherwise, don't change"}, {"sha": "61edd6960415c191a7e3282786ad671884b28469", "filename": "gcc/gimple-fold.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2Fgimple-fold.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/74e3c262622d61ee507eaf6000537cc4cd39b907/gcc%2Fgimple-fold.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.h?ref=74e3c262622d61ee507eaf6000537cc4cd39b907", "patch": "@@ -112,6 +112,13 @@ gimple_convert (gimple_seq *seq, tree type, tree op)\n   return gimple_convert (seq, UNKNOWN_LOCATION, type, op);\n }\n \n+extern tree gimple_convert_to_ptrofftype (gimple_seq *, location_t, tree);\n+inline tree\n+gimple_convert_to_ptrofftype (gimple_seq *seq, tree op)\n+{\n+  return gimple_convert_to_ptrofftype (seq, UNKNOWN_LOCATION, op);\n+}\n+\n extern bool gimple_stmt_nonnegative_warnv_p (gimple *, bool *, int = 0);\n \n /* In gimple-match.c.  */"}]}