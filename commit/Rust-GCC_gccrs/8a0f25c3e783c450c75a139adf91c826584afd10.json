{"sha": "8a0f25c3e783c450c75a139adf91c826584afd10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGEwZjI1YzNlNzgzYzQ1MGM3NWExMzlhZGY5MWM4MjY1ODRhZmQxMA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-08-06T22:33:37Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-08-06T22:33:37Z"}, "message": "re PR fortran/45159 (Unnecessary temporaries)\n\n2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* dependency.c (check_section_vs_section):  Handle cases where\n\tthe start expression coincides with the lower or upper\n\tbound of the array.\n\n2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* gfortran.dg/dependency_31.f90:  New test.\n\nFrom-SVN: r162966", "tree": {"sha": "afb755fd34f651600e8426249fc34454e366a43a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afb755fd34f651600e8426249fc34454e366a43a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a0f25c3e783c450c75a139adf91c826584afd10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0f25c3e783c450c75a139adf91c826584afd10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a0f25c3e783c450c75a139adf91c826584afd10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a0f25c3e783c450c75a139adf91c826584afd10/comments", "author": null, "committer": null, "parents": [{"sha": "cd6b2fa0e7cc07a7007f4928813f14cc940c50d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd6b2fa0e7cc07a7007f4928813f14cc940c50d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd6b2fa0e7cc07a7007f4928813f14cc940c50d9"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "fa2aaa65505c7e8f0375d15310574f21c5f8fe32", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=8a0f25c3e783c450c75a139adf91c826584afd10", "patch": "@@ -1,3 +1,10 @@\n+2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* dependency.c (check_section_vs_section):  Handle cases where\n+\tthe start expression coincides with the lower or upper\n+\tbound of the array.\n+\n 2010-08-04  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42207"}, {"sha": "dfb0c94e541d65b556483ead1d11c0140cf08735", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=8a0f25c3e783c450c75a139adf91c826584afd10", "patch": "@@ -1196,13 +1196,33 @@ check_section_vs_section (gfc_array_ref *l_ar, gfc_array_ref *r_ar, int n)\n \treturn GFC_DEP_FORWARD;\n     }\n \n-  /* Check for backward dependencies:\n-     Are the strides the same?.  */\n+\n+  /*  Are the strides the same?  */\n   if ((!l_stride && !r_stride)\n \t||\n       (l_stride && r_stride\n \t&& gfc_dep_compare_expr (l_stride, r_stride) == 0))\n     {\n+\n+      if (l_start && IS_ARRAY_EXPLICIT (l_ar->as))\n+\t{\n+\n+\t  /* Check for a(low:y:s) vs. a(z:a:s) where a has a lower bound\n+\t     of low, which is always at least a forward dependence.  */\n+\n+\t  if (r_dir == 1\n+\t      && gfc_dep_compare_expr (l_start, l_ar->as->lower[n]) == 0)\n+\t    return GFC_DEP_FORWARD;\n+\n+\t  /* Check for a(high:y:-s) vs. a(z:a:-s) where a has a higher bound\n+\t     of high, which is always at least a forward dependence.  */\n+\n+\t  if (r_dir == -1\n+\t      && gfc_dep_compare_expr (l_start, l_ar->as->upper[n]) == 0)\n+\t    return GFC_DEP_FORWARD;\n+\t}\n+\n+      /* From here, check for backwards dependencies.  */\n       /* x:y vs. x+1:z.  */\n       if (l_dir == 1 && r_dir == 1\n \t    && l_start && r_start"}, {"sha": "e39d0450bde103fa9c3793c642488f8145a1dfd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a0f25c3e783c450c75a139adf91c826584afd10", "patch": "@@ -1,3 +1,8 @@\n+2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* gfortran.dg/dependency_31.f90:  New test.\n+\n 2010-08-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.dg/dependency_30.f90:  Fix incorrect dg-do line."}, {"sha": "afab24984867cc7953d6e10a552717f5c511cf09", "filename": "gcc/testsuite/gfortran.dg/dependency_31.f90", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_31.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a0f25c3e783c450c75a139adf91c826584afd10/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_31.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_31.f90?ref=8a0f25c3e783c450c75a139adf91c826584afd10", "patch": "@@ -0,0 +1,10 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries\" }\n+! PR 45159 - make sure no temporary is created for this.\n+subroutine foo(a,n,i,j)\n+  implicit none\n+  integer, intent(in) :: i,j,n\n+  real, dimension(20) :: a\n+  a(1:10) = a(i:j)\n+  a(20:n:-3) = a(n:i:-3)\n+end subroutine foo"}]}