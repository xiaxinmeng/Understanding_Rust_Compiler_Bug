{"sha": "5873154d20d44a71135a99c8a92f8389a3ce0bb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTg3MzE1NGQyMGQ0NGE3MTEzNWE5OWM4YTkyZjgzODlhM2NlMGJiNQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2006-01-01T17:04:47Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-01-01T17:04:47Z"}, "message": "* Split the ChangeLog into years.\n\nFrom-SVN: r109224", "tree": {"sha": "83990c3b0238db85fba718d8c4cb2b434af47281", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83990c3b0238db85fba718d8c4cb2b434af47281"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5873154d20d44a71135a99c8a92f8389a3ce0bb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5873154d20d44a71135a99c8a92f8389a3ce0bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5873154d20d44a71135a99c8a92f8389a3ce0bb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5873154d20d44a71135a99c8a92f8389a3ce0bb5/comments", "author": null, "committer": null, "parents": [{"sha": "893ea23201efa54b71101b59796f381c1668a689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/893ea23201efa54b71101b59796f381c1668a689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/893ea23201efa54b71101b59796f381c1668a689"}], "stats": {"total": 18490, "additions": 9247, "deletions": 9243}, "files": [{"sha": "c8c82da86791daf043c2c6762e43167d552487d9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 9243, "changes": 9249, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=5873154d20d44a71135a99c8a92f8389a3ce0bb5"}, {"sha": "222dc0bf1543a7c81471bd52f664284e35c1971b", "filename": "gcc/fortran/ChangeLog-2002", "status": "added", "additions": 333, "deletions": 0, "changes": 333, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2002", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2002", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2002?ref=5873154d20d44a71135a99c8a92f8389a3ce0bb5", "patch": "@@ -0,0 +1,333 @@\n+2002-12-29  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Document calling convention for arrays.\n+\n+2002-12-19  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-intrinsic.c (g95_conv_intrsinsic_function): Remove incorrect\n+\tassertion. Remove intrinsic subroutine G95_ISYM_* cases. Always pass\n+\toptional parameters for some intrinsics.\n+\t(g95_is_intrinsic_libcall): Add G95_ISYM_RESHAPE.\n+\t* trans-expr.c (g95_conv_function_call): Pass NULL for absent\n+\toptional parameters.\n+\t* trans.h (g95_se): Add ignore_optional flag.\n+\n+2002-12-15  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_conv_array_parameter): Fix partial rank sections.\n+\t* trans-decl.c (g95_generate_function_code): Use TDI_original.\n+\n+2002-12-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-stmt.c (g95_trans_call): Use resolved symbol name.\n+\n+2002-12-12  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_trans_array_constructor_subarray): Fully\n+\tinitialize the scalarizer.\n+\t(various): Update to new format of g95_expr->value.constructor.\n+\n+2002-12-08  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_put_offset_into_var): New function.\n+\t(g95_trans_array_constructor_subarray): New function.\n+\t(g95_trans_array_constructor_value): Use it.\n+\t(g95_array_cons_size): Don't abort() on array components.\n+\n+2002-12-08  Paul Brook  <paul@nowt.org>\n+\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Remove tree-dchain.o.\n+\t* support.c: Update #includes.\n+\t(statement_code_p, c_size_in_bytes, s_size_type_node): Remove.\n+\t* trans-array.c: Update #includes.\n+\t* trans.c: Ditto.\n+\t* trans-const.c: Ditto.\n+\t* trans-io.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\t(g95_init_types): Set size_type_node.\n+\t* trans-decl.c: Update #includes.\n+\t(gfor_fndecl_adjust{l,r}): Declare and initialize.\n+\t* trans-stmt.c: Update #includes.\n+\t(g95_trans_do_while): Generate LABEL_EXPR, not GOTO_EXPR.\n+\t(g95_trans_select): Fix check for unbounded ranges.\n+\t* trans-expr.c: Update #includes.\n+\t(g95_conv_string_tmp): New function.\n+\t(g95_conv_concat_op): Use it.\n+\t* trans.h (g95_conv_string_tmp, gfor_fndecl_adjust{l,r}): Declare.\n+\t* Trans-intrisic.c: Update #includes.\n+\t(g95_conv_intrinsic_strcmp): New function.\n+\t(g95_conv_intrinsic_adjust): Ditto.\n+\t(g95_conv_intrinsic_function: Use them.\n+\n+2002-11-30  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_walk_function_expr): Handle non-array return by\n+\treference.\n+\t* trans-dec.c (g95_build_function_decl): Handle character return\n+\tparammeters.\n+\t(g95_get_fake_result_decl): Ditto.\n+\t(g95_trans_deferred_vars): Ditto.\n+\t* trans-expr.c (g95_conv_function_call): Ditto.\n+\t(g95_trans_arrayfunc_assign) Limit to array valued functions.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_char): New function.\n+\t(g95_conv_intrinsic_function): Use it.\n+\t* trans-types.c (g95_sym_type): Handle functions returning strings.\n+\t(g95_return_by_reference): Ditto.\n+\t(g95_get_function_type): Ditto.\n+\n+2002-11-18  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-stmt.c (g95_trans_if): Fix IF statements when the condition\n+\trequires a temporary.\n+\t(g95_trans_select): Handle computed gotos.\n+\t* trans-types.c (g95_build_array_type): Warn about non-functional\n+\tassumed shape arrays.\n+\t* trans-expr.c (g95_trans_scalar_assign): Correctly handle post\n+\tblocks.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_round): New function.\n+\t(g95_conv_intrinsic_int): New function.\n+\t(g95_conv_intrinsic_mod): New function.\n+\t(g95_conv_intrinsic_ichar): New function.\n+\t(g95_conv_intrinsic_function): Use them.\n+\t(g95_conv_intrinsic_dim): Use g95_evaluate_now.\n+\n+2002-11-17  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* trans-types.c (g95_build_array_type): Assumed\n+\tsized arrays can have rank > 1.\n+\t* trans.c (g95_trans_code): Remove erroneous\n+\twarning about CONTINUE.\n+\t* trans-expr.c (g95_conv_variable): Remove\n+\terroneous assert.\n+\n+2002-11-15  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_conv_array_parameter): Check for NULL stride.\n+\n+2002-10-31  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-tree.c: Remove tree copying stuff that's now in gimple.c\n+\t* trans-expr.c (g95_conv_component_ref): Handle character string\n+\tcomponents.\n+\t(g95_conv_string_parameter): Ditto.\n+\t* trans-types.c (g95_get_derived_type): Add length decl to caracter\n+\tstring components.\n+\n+2002-10-10  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (gfor_fndecl_size?): Declare and initialize.\n+\t* trans-expr.c (g95_conv_function_call): Remove unreliable return value\n+\tcheck.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_size): New function.\n+\t(g95_conv_intrinsic_function): Handle size and shape intrinsics.\n+\t(g95_is_intrinsic_libcall): Add G95_ISYM_SHAPE.\n+\t* trans-types.c (pvoid_type_node): Declare and initialize.\n+\t* trans-array.c: Fix typo COMPONENT_REF->REF_COMPONENT\n+\t(g95_array_allocate): Fix when base==data.\n+\t(g95_conv_array_parameter): Correctly handle reduced rank sections.\n+\t* trans-io.c (g95_trans_write): Correctly handle string modifiers.\n+\n+2002-10-09  Paul Brook  <paul@nowt.org>\n+\n+\t* (g95_conv_expr_reference): Handle character strings correctly.\n+\n+2002-10-07  Paul Brook  <paul@nowt.org>\n+\n+\t(g95_expand_decl): Rename from f95_expand_decl_stmt and use as\n+\tlanghook.\n+\t* trans-array.c (g95_build_array_initializer): Remove.\n+\t(g95_conv_array_initializer): New Function.\n+\t(g95_trans_auto_arry_allocation): Cleanup.\n+\t(g95_trans_init_character_array): Remove.\n+\t* g95spec.c: Link in libgforbegin.\n+\t* trans.c (g95_generate_code): Rename main function to MAIN__.\n+\t(g95_create_var): New function.\n+\t(g95_create_var_np): New function.\n+\t(g95_evaluate_now): New function.\n+\t(g95_start_block): New function.\n+\t(g95_finish_block): New function.\n+\t(g95_add_expr_to_block): New function.\n+\t(g95_add_block_to_block): New function.\n+\t* trans-expr.c (g95_conv_componen_ref): New function.\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Add gimplify.o.\n+\t(F95_OBJS): Add dependency.o.\n+\t* f95-lang.c (g95_is_simple_stmt): Remove.\n+\t* f95-tree.c (mark_not_simple): New function.\n+\t(unshare_all_trees): New function.\n+\t(create_tmp_var, create_tmp_alias_var): Remove.\n+\t* support.c (declare_tmp_vars, tree_last_decl): Remove.\n+\t* trans*: Convert to new IR using GENERIC trees.  Don't bother about\n+\tSIMPLE/GIMPLE rules, this is now done by Lang-independant code.\n+\n+2002-10-01  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Add support for descriptorless arrays.\n+\t(g95_conv_array_data): New function.\n+\t(g95_conv_array_base): New function.\n+\t* trans-array.h: Declare these here.\n+\t* trans-decl.c(g95_create_mopdule_variable): Perform variable\n+\tinitialization and creation here.\n+\t(g95_create_module_vars): Instead of here.\n+\t* trans.h (G95_TYPE_ARRAY_*: Rename from G95_TYPE_DESCRIPTOR_*.\n+\t* trans-intrinsic.c: Ditto.\n+\t* trans-types.c (g95_is_nodesc_array): New function.\n+\t(g95_get_nodesc_array_type): New function.\n+\t(g95_sym_type, g95_get_derived_type): Use them.\n+\t* trans-const.c (g95_conv_mpf_to_tree): Remove workaround.\n+\n+2002-09-28  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-const.c (g95_conv_mpf_to_tree): Work around backend bug.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_abs): Correctly detect complex\n+\tparameters.\n+\n+2002-09-24  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (listify): Remove declaration.\n+\t(expand_function_body): Use optimize >=1 instead of flag_tree_saa.\n+\t(listify)\n+\t* f95-tree.c (get_name): New function.\n+\t* trans.c (module_namespace): Remove.\n+\t* trans-decl.c: Use g95_chainon_list rather than chainon(listify()).\n+\t* trans-types.c: Ditto.\n+\n+2002-09-19  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_get_array_cons_size): New Function.\n+\t(g95_con_ss_startstride): Handle Array constructors.\n+\t(g95_conv_loop_setup): Ditto.\n+\t(g95_conv_array_parameter): Ditto.\n+\t* tras-decl.c (g95_finish_var_decl): Make initializes variables\n+\tstatic.\n+\n+2002-09-19  Paul Brook  <paul@nowt.org>\n+\n+\t* trans.c (g95_simple_fold_tmp): Detect variables inside\n+\tNON_LVALUE_EXPR.\n+\t* trans-stmt.c (g95_trans_arithmetic_if): Implement this.\n+\n+2002-09-18  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Add tree-ssa-dce.o\n+\n+2002-09-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans.c (g95_create_module_variable): Move to trans-decl.c.\n+\t* trans-const.c (g95_conv_string_init): New Function.\n+\t* trans-const.h: Declare it.\n+\t* trans-decl.c (g95_get_symbol_decl): Handle initializers for static\n+\tvariables. Don't bail on intrinsic symbols.\n+\t(get_extern_function_decl): Handle specific intrinsic functions.\n+\t* trans-types.c (g95_sym_type): Dummy functions don't return\n+\treference types.\n+\t* trans-array.c (g95_build_array_initializer): New Function.\n+\t(g95_trans_auto_array_allocation): Build initializer for static decls.\n+\tDon't use mpz_addmul, it's GMP4 only.\n+\n+2002-09-12  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (g95_generate_code): Fix thinko with return variable.\n+\t(g95_get_extern_function_decl, g95_build_function_decl): Mangle\n+\tassembler names for module procedures.\n+\n+2002-09-11  Tobias Schlueter  <Tobias.Schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-array.c,h trans-expr.c, trans-stmt.c: Correct spelling of\n+\tdependency/\n+\n+2002-09-10  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Change format of G95_SS_TEMP strictures.\n+\t(g95_check_fncall_dependancy): New function.\n+\t(trans_dummy_array_bias): stride[n], not stride[n-1]. for calculating\n+\toffsets.\n+\t* trans-decl.c (g95_get_symbol_decl): move assertion after handling of\n+\tresult variables.\n+\t(g95_build_function_decl): Don't assume result arrays are packed.\n+\t(g95_trans-deferred-vars): Handle array result variables.\n+\t(g95_generate_fuction_code): Clear saved_function_decls.\n+\t* trans-expr.c (g95_conv_fnction_call): Handle direct array return by\n+\treference.\n+\t(g95_trans_arrayfunc_assign): New function.\n+\t(g95_trans_assignment): Use it.\n+\t* trans.h (g95_ss): Add temp struct for G95_SS_TEMP.\n+\t(g95_se): Add direct_byref.\n+\t* trans-types.c: Use sym->result rather than sym where appropriate.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_funcall): New function.\n+\tUpdate other functions to use this.\n+\t(g95_is_intrinsic_libcall): New function.\n+\t(g95_conv_intrinsic_function): Add MATMUL and PRODUCT intrinsics.\n+\t(g95_walk_intrinsic_function): Ditto.\n+\n+2002-09-08  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-types.c: Change rank field to dtype field in array descriptor.\n+\t* trans-array.c: Implement filling of dtype array descriptor field.\n+\t* trans-intrinsic.c: Fix broken LEN intrinsic.\n+\n+2002-09-07  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-intrinsic.c: Remove outdated todo intrinsic list.\n+\t(g95_get_symbol_for_expr): Remove hack for fortran based intrinsics.\n+\t(g95_walk_intrinsic_function): Add MINLOC and MAXLOC.\n+\n+2002-09-06  Paul Brook  <paul@nowt.org>\n+\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Add tree_alias_comon.o.\n+\t(gt-f95-trans-types.h): Add dependancy information.\n+\t* config-lang.in (gtfiles): Add trans-types.c\n+\t* f95-lang.c (g95_be_parse_file): Pass error and warning counts\n+\tback to top-level code.\n+\t* trans-array.c, trans-types.c: Change format of array descriptor.\n+\t(g95_conv_descriptor_dimension): New function.\n+\t* trans-types.h (g95_conv_descriptor_rank): define.\n+\t* trans-intrinsic.c: Implement PRODUCT, COUNT. MINLOC and MAXLOC\n+\tintrinsics.\n+\n+2002-09-02  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* trans-array.c, trans-types.c:\tAdd rank information to descriptor.\n+\n+2002-09-06  Tobias Schlueter  <Tobias.Schlueter@physik.uni-muenchen.de>\n+\n+\t* trans-stmt.c (g95_trans_allocate): Fix when ref==NULL.\n+\n+2002-09-04  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (g95_create_decls): New function.\n+\t(g95_init):  Move initialization of external decls to above, and call\n+\tfrom g95_be_parse_file.\n+\t* trans.c (g95_finish_stmt): Don't amputate the decl chain.\n+\t* trans-types.c (g95_init_types): Always name integer and char types.\n+\t(g95_get_array_type_bounds): TYPE_NAME may be a TYPE_DECL.\n+\n+2002-09-02  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-lang.in: Add options.c to F95_PARSER_OBJS\n+\n+2002-09-02  Paul Brook  <paul@nowt.org>\n+\n+\t* g95_generate_code: Clear the attr for __fortran_main.\n+\t* trans-types.c (g95_finish_type): New function.\n+\t* g95_init_io_state_type: Use g95_finish_type.\n+\t* g95_conv_intrinsic_anyall: Fix thinko in result initialization.\n+\n+2002-09-01  Paul Brook  <paul@nowt.org>\n+\n+\t* README.backend: Warn about the dangers of extra config.h files.\n+\tRemove obsolete libgfor stuff.\n+\t* config-lang.in: Add target-libgfor dependancy.\n+\t* g95_conv_mpf_to_tree: Use & free allocated buffer p rather than buff.\n+\n+2002-09-01  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* g95_conv_mpz_to_tree: Free storage pointed to by q,\n+\tnot by buff.\n+\n+2002-08-30  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-intrinsic.c (g95_conv_intrinsic_function,\n+\tg95_walk_intrinsic_function): Added ANY and ALL.\n+\t(g95_conv_intrinsic_anyall): New function.\n+\t* iresolve.c (g95_resolve_any, g95_resolve_all): Include rank in\n+\tmangled name"}, {"sha": "127de310bab703d9d69aa1dcf4d742ad7ef07389", "filename": "gcc/fortran/ChangeLog-2003", "status": "added", "additions": 2339, "deletions": 0, "changes": 2339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2003", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2003", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2003?ref=5873154d20d44a71135a99c8a92f8389a3ce0bb5", "patch": "@@ -0,0 +1,2339 @@\n+2003-12-26  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\t* dump-parse-tree.c (gfc_show_code_node): Add ASSIGN and ASSIGNED GOTO\n+\tdumping.\n+\t* gfortran.h (gfc_statement): New ST_LABEL_ASSIGNMENT.\n+\t(gfc_exec_op): New EXEC_LABEL_ASSIGN.\n+\t(symbol_attribute):New variable attribute: assign.\n+\t* io.c (resolve_tag):Integer variable is allowed.\n+\t(match_dt_format): Add ASSIGN statement. Set assign flag.\n+\t* match.c (gfc_match_if): Change ST_NONE to ST_LABEL_ASSIGNMENT.\n+\t(gfc_match_assign): Add ASSIGN statement. Set assign flag.\n+\t(gfc_match_goto): Add ASSIGNED GOTO statement. Set assign flag.\n+\t* parse.c (decode_statement): Add ST_LABEL_ASSIGNMENT.\n+\t(next_statement): Add ST_LABEL_ASSIGNMENT.\n+\t(gfc_ascii_statement): Add ST_LABEL_ASSIGNMENT.\n+\t* resolve.c (resolve_code): Resolve ASSIGN and ASSIGNED GOTO statement.\n+\t(resolve_blocks): Resolve ASSIGNED GOTO statement label list.\n+\t* st.c (gfc_free_statement): Add EXEC_LABEL_ASSIGN.\n+\t* trans-decl.c (gfc_get_symbol_decl): Create the shadow variable for\n+\tassign.  Put them into the stuct lang_decl.\n+\t* trans-io.c (set_string): Add the assign statement.\n+\t* trans-stmt.c (gfc_trans_label_assign): New function.\n+\t(gfc_trans_goto): Translate ASSIGNED GOTO statement.\n+\t* trans-stmt.h (gfc_trans_label_assign): Added function prototype.\n+\t* trans.c (gfc_trans_code): Add EXEC_LABEL_ASSIGN.\n+\t* trans.h (lang_decl):Add shadow variable decl tree needed by assign.\n+\t(GFC_DECL_ASSIGN_ADDR(node)): New macro to access this.\n+\t(GFC_DECL_ASSIGN(node)): New macro to access flag.\n+\n+2003-12-31  Huang Chun  <chunhuang73@hotmail.com>\n+\n+\tPR fortran/13434\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxval): Fixed bug in\n+\tminval/maxval.\n+\n+2003-12-22  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* options.c (gfc_init_options): Set flag_argument_noalias to 2, to indicate\n+\tthat arguments to subroutines/functions can't alias themselves, nor global\n+\tmemory.\n+\n+2003-12-20  Steven Bosscher  <stevenb@suse.de>\n+\n+\t* trans-expr.c (gfc_conv_expr_op): Fold the result expression.\n+\t* trans.c (gfc_add_modify_expr, gfc_add_expr_to_block): Likewise.\n+\n+2003-12-12  Huang Chun  <chunhuang73@hotmail.com>\n+\n+\t* primary.c (match_substring): Fix substring bug for start point\n+\tor end point is NULL.\n+\t* trans-expr.c (gfc_conv_substring): Ditto\n+\t* trans-types.c (gfc_sym_type): Get correct type of scalar\n+\tcharacter variables.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_len): Handle character in\n+\tderived type.\n+\n+2003-12-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* options.c (gfc_post_options): Don't ever use rtl inlining.\n+\n+2003-12-05  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\t* trans-common.c: Re-implement COMMON blocks and EQUIVALENCE lists.\n+\t* trans-equivalence.c: Remove.\n+\t* trans-decl.c (gfc_get_symbol_decl): Update to match.\n+\t(gfc_generate_function_code): Ditto.\n+\t* trans-array.c (gfc_conv_array_parameter): Ditto.\n+\t* Make-lang.in (F95_OBJS): Remove fortran/trans-equivalence.o\n+\t(F95_ADDITIONAL_OBJS): Add stor-layout.o\n+\t* trans.h (gfc_trans_equivalence): Remove.\n+\t* gfortran.h (struct gfc_equiv): Add used field.\n+\t(struct gfc_symbol): Remove addr_base, addr_offset, equiv_ring,\n+\tequiv_offset fields.\n+\n+2003-12-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans.c (gfc_build_addr_expr): New.\n+\t(gfc_build_indirect_ref, gfc_build_array_ref): New.\n+\t* trans.h: Declare them.\n+\t* trans-array.c, trans-expr.c, trans-intrinsic.c, trans-io.c,\n+\ttrans-stmt.c, trans.c (*): Use them.\n+\n+\t* f95-lang.c (gfc_post_options): Remove dead prototype.\n+\t* trans-array.c (gfc_trans_deferred_vars): Remove unused variable.\n+\t* trans-stmt.c (gfc_evaluate_where_mask): Fix temporary_list\n+\tallocation size.\n+\n+2003-12-01  Feng Wang  <fengwang@nudt.edu.cn>\n+\n+\t* io.c (gfc_match_format): Check for missing format label.\n+\n+2003-11-30 Huang Chun  <chunhuang73@hotmail.com>\n+\n+\tPR fortran/13155\n+\t* trans-decl.c (gfc_sym_mangled_function_id): Don't mangle symbols\n+\tfrom interfaces in modules.\n+\n+2003-11-30  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (gfc_trans_g77_array): Make non-static.\n+\t(gfc_trans_assumed_size): Remove.\n+\t(gfc_trans_dummy_array_bias): Explicitly free temporary.\n+\t* trans-array.h (gfc_trans_g77_array): Add prototype.\n+\t(gfc_trans_assumed_size): Remove.\n+\t* trans-decls.c (gfor_fndecl_push_context): Remove.\n+\t(gfor_fndecl_pop_context): Remove.\n+\t(gfc_build_function)decls): Don't create them.\n+\t(gfc_trans_deferred_vars): Update to match. Remove dead\tcode.\n+\t* trans-stmt.c (gfc_trans_pointer_assign_need_temp): Free temp.\n+\n+2003-11-30  Kejia Zhao  <kejia_zh@nudt.edu.cn>\n+\n+\t* trans-array.c (gfc_conv_array_parameter): Simplify\n+\tarray argument passing for array name actual argument.\n+\t* trans-expr.c (gfc_conv_function_call): Ditto\n+\t* trans-types.c (gfc_is_nodesc_array):Ditto.\n+\n+2003-11-30  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (gfc_post_options): Move ...\n+\t* options.c (gfc_post_options): .. to here.  Handle inlining options.\n+\t* gfortran.h (gfc_post_options): Add prototype.\n+\n+2003-11-28  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans.c (gfc_create_var_np): Use create_tmp_var_raw.\n+\n+2003-11-28 Huang Chun  <chunhuang73@hotmail.com>\n+\n+\t* trans.h (has_alternate_specifier): New global variable.\n+\t* match.c (gfc_match_call): Handle actual arguments associated with\n+\talternate return indicators.\n+\t* trans-expr.c (gfc_conv_function_call): Ditto\n+\t* trans-stmt.c (gfc_trans_call): Ditto\n+\t(gfc_trans_return): Handle return statement with value.\n+\t* trans-decl.c (gfc_generate_function_code): Handle functions with\n+\tasterisk dummy.\n+\t(gfc_get_fake_result_decl): Ditto\n+\t* trans-types.c (gfc_get_function_type): Ditto\n+\t* resolve.c (resolve_actual_arglist): Check alternate return indicators.\n+\t(resolve_formal_arglist): Check asterisk dummy.\n+\n+2003-11-27  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (gfc_tran_allocate_array_storage): Use new memory\n+\tallocation interface.\n+\t(gfc_conv_ array_parameter): Ditto.\n+\t(gfc_trans_auto_array_allocation): Ditto. Also free the memory.\n+\t* trans-array.c: Update prototype.\n+\t* trans-decl.c (gfc_build_builtin_function_decls): Update prototypes.\n+\t(gfc_trans_auto_character_variable): Use new memory alloc interface.\n+\t* trans-expr.c (gfc_conv_string_tmp): Ditto.\n+\t(gfc_conv_function_call): Use gfc_conv_string_tmp.\n+\t* trans-stmt.c (gfc_do_allocate):  Use new memory alloc interface.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_trim): Ditto.\n+\t* trans.h (gfc_ss_info): Remove unused pdata field.\n+\t* trans.c (gfc_create_var_np): Change T to V.\n+\n+2003-11-26  Richard Henderson  <rth@redhat.com>\n+\n+\t* mathbuiltins.def: Move acos, asin, cosh, log10, sinh, tanh from ...\n+\t* trans-intrinsic.c (gfc_intrinsic_map): ... here.  Add SCALE,\n+\tFRACTION, NEAREST, SET_EXPONENT.\n+\t(gfc_intrinsic_map_t): Add libm_name, complex_available, is_constant.\n+\tFix GTY marking.  Remove unnecessary const's.\n+\t(LIBM_FUNCTION): Rename from I_LIB.\n+\t(LIBF_FUNCTION): New.\n+\t(gfc_get_intrinsic_lib_fndecl): Handle libm and libgfortran naming\n+\tconventions.  Assume the expr signature is correct.  Mark const.\n+\t(gfc_conv_intrinsic_exponent): Use library functions.\n+\t(gfc_conv_intrinsic_set_exponent): Remove.\n+\t(gfc_conv_intrinsic_scale): Remove.\n+\t(gfc_conv_intrinsic_nearest): Remove.\n+\t(gfc_conv_intrinsic_fraction): Remove.\n+\t(gfc_conv_intrinsic_function): Update.\n+\t* trans-decl.c (gfor_fndecl_math_exponent4): New.\n+\t(gfor_fndecl_math_exponent8): New.\n+\t(gfc_build_intrinsic_function_decls): Set them.\n+\t* trans.h: Declare them.\n+\n+2003-11-25  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\t* trans-common.c (gfc_layout_global_equiv): Locate the error for\n+\tunderflow COMMON block.\n+\t(gfc_trans_one_common): Fix bug for size of COMMON block containing\n+\tEQUIVALENCE object. Also fix typo in an error message.\n+\n+2003-11-25  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* Make-lang.in: Add check-gfortran to lang_checks.\n+\t(check-f95): Alias for check-gfortran.\n+\n+2003-11-25  Jason Merrill  <jason@redhat.com>\n+\n+\t* Make-lang.in (f95.tags): Create TAGS.sub files in each\n+\tdirectory and TAGS files that include them for each front end.\n+\n+2003-11-24  Paul Brook  <paul@nowt.org>\n+\n+\tPR fortran/13154\n+\t* trans-decl.c (gfc_greate_module_variable): Skip COMMON blocks.\n+\n+2003-11-24  Paul Brook  <paul@nowt.org>\n+\n+\t* expr.c (simplify_const_ref): Return SUCCESS for things we don't\n+\thandle.\n+\t* resolve.c (gfc_resolve_expr): Resolve contents before rank/shape.\n+\n+2003-11-24  Paul Brook  <paul@nowt.org>\n+\n+\tPR fortran/13105\n+\t* array.c (gfc_array_ref_shape): Handle elemental dimensions.\n+\t* trans-array.c (gfc_trans_preloop_setup): Use correct dim lookup.\n+\n+2003-11-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans-array.c (gfc_trans_allocate_array_storage): Use convert.\n+\t(gfc_conv_array_base): Likewise.\n+\t* trans-decl.c (gfc_trans_auto_character_variable): Likewise.\n+\t* trans-expr.c (gfc_conv_string_tmp): Likewise.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_trim): Likewise.\n+\t* trans-stmt.c (gfc_trans_character_select): Likewise.\n+\n+2003-11-13  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (gfc_sym_mangled_function_id): Dont mangle externals.\n+\n+2003-11-13  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\t* resolve.c (gfc_resolve): Also resolve EQUIVALENCE objects.\n+\t(resolve_equivalence): New function.\n+\t(resolve_equivalence_derived): New function.\n+\n+2003-11-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans.c (gfc_trans_code): Use annotate_with_locus instead of\n+\tannotate_all_with_locus.\n+\n+2003-11-11  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\t* options.c (gfc_init_options): Set flag_max_stack_var_size as 32768.\n+\t* trans-decl.c (gfc_finish_var_decl): Modified.\n+\n+2003-11-08  Paul Brook  <paul@nowt.org>\n+\n+\tPR fortran/12704\n+\t* trans-intrinsic.c (gfc_conv_intrinsics_minmaxloc): Handle zero-size\n+\tarrays.\n+\n+2003-11-06  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsics_minmaxloc): Initialize pos.\n+\n+2003-11-02  Canqun Yang  <canqun@nudt.edu.cn>\n+\n+\t* match.c (gfc_match_stopcode): Assign '0' to stop_code.\n+\n+2003-10-27  Anthony Green  <green@redhat.com>\n+\n+\t* Make-lang.in (f95.stageprofile): Use tabs, not spaces.\n+\t(f95.stagefeedback): Ditto.\n+\n+2003-10-27  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\tPR fortran/12682\n+\t* Make-lang.in (f95.stageprofile): Add.\n+\t(f95.stagefeedback): Add.\n+\n+2003-10-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* f96-lang.c (gfc_gimplify_expr): Remove.\n+\t(LANG_HOOKS_GIMPLIFY_EXPR): Remove.\n+\t(LANG_HOOKS_GIMPLE_BEFORE_INLINING): New.\n+\n+2003-10-23  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (gfc_gimplify_expr): Return gimplify_status.\n+\n+2003-10-20  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-expr.c (gfc_conv_integer_power): Use boolean_type_node.\n+\t* trans-stmt.c (gfc_trans_do_while): Ditto.\n+\n+2003-10-17  Paul Brook  <paul@nowt.org>\n+\n+\t* simplify.c (gfc_simplify_shape): Use gfc_array_dimen_size.\n+\n+2003-10-17  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-io.c (gfc_build_io_library_fndecls): Set TREE_PUBLIC.\n+\n+2003-10-17  Feng Wang  <wf_cs@yahoo.com>\n+\n+\t* iresolve.c (gfc_resolve_maxloc): Change the result's kind and type.\n+\t(gfc_resolve_minloc): Ditto.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_minmaxloc): Use correct types.\n+\tReturn the value after subtracting the lower bound.\n+\n+2003-10-16  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (expand_function_body): Don't check flag_disable_gimple.\n+\n+2003-10-16  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* lang.c: Remove -M option for now, it's in the way for C.\n+\n+2003-10-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* Make-lang.in (f95.tags): New rule.\n+\n+2003-10-13  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans.c (gfc_trans_code): Use annotate_all_with_locus.\n+\n+2003-10-13  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (generate_local_decl): Don't create junk variables.\n+\n+2003-10-13  Paul Brook  <paul@nowt.org>\n+\n+\t* resolve.c (resolve_formal_arglist): Use function result decl in\n+\tpreference to function decl.\n+\n+2003-10-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (gfc_define_builtin): New const_p argument.  Set\n+\tTREE_READONLY.  Update all callers.\n+\n+2003-10-12  Feng Wang  <wf_cs@yahoo.com>\n+\n+\t* iresolve.c (gfc_resolve_cshift): Change to match implementation.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_function): Remove CSHIFT.\n+\t(gfc_is_intrinsic_libcall): Add CSHIFT.\n+\n+2003-10-12  Richard Henderson  <rth@redhat.com>\n+\n+\t* trans-array.c (gfc_trans_static_array_pointer): Set TREE_INVARIANT.\n+\t(gfc_trans_array_constructor_value): Likewise.\n+\t(gfc_conv_array_initializer): Likewise.\n+\t* trans-stmt.c (gfc_trans_character_select): Likewise.\n+\n+2003-11-12  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-intrinsic.c (integer_kind_info, real_kind_info): Remove.\n+\n+2003-10-11  Huang Chun  <jiwang@mail.edu.cn>\n+\n+\t* check.c (gfc_check_repeat): Check arguments are scalar.\n+\t(gfc_check_trim): New function.\n+\t* intrinsic.h (gfc_check_trim): Add prototype.\n+\t* intrinsic.c (add_functions): Use it.\n+\t* trans.h (gfor_fndecl_string_trim, gfor_fndecl_string_repeat):\n+\tDecalare.\n+\t* trans-decl.c: Ditto.\n+\t(gfc_build_intrinsic_fucntion_decls): Set them.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_len): Handle result vars.\n+\t(gfc_conv_intrinsic_trim): New function.\n+\t(gfc_conv_intrinsic_repeat): New function.\n+\t(gfc_conv_intrinsic_function): Use them.\n+\n+2003-10-11  Huang Chun  <jiwang@mail.edu.cn>\n+\n+\t* trans-types.c (gfc_sym_type): Handle result variables.\n+\n+2003-10-11  Huang Chun  <jiwang@mail.edu.cn>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_char): Don't use\n+\tgfc_get_character_type.\n+\n+2003-10-11  Feng Wang  <wf_cs@yahoo.com>\n+\n+\t* trans-expr.c (gfc_conv_variable): Check sym->ts, not the decl.\n+\n+2003-10-11  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (gfc_resolve_dint, gfc_resolve_dnint): New functions.\n+\t(gfc_resolve_dprod): New function.\n+\t(gfc_resolve_aint, gfc_resolve_anint): Only base name on arg type.\n+\t* intrinsic.h (gfc_resolve_dint, gfc_resolve_dnint): Declare.\n+\t(gfc_resolve_dprod): Declare.\n+\t* intrinsic.c (add_functions): Use them.\n+\t* trans-decl.c (gfc_get_extern_function_decl): Only pass one arg.\n+\n+2003-10-06  Richard Henderson  <rth@redhat.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): Add clzll.\n+\t* trans-intrinsic.c (call_builtin_clz): Use it.\n+\n+2003-10-05  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (expand_function_body): Call (push|pop)_function_context.\n+\t* trans-decl.c (gfc_generate_function_code): Set\n+\tcfun->function_end_locus.\n+\n+2003-09-24  Jason Merrill  <jason@redhat.com>\n+\n+\t* f95-lang.c, trans-decl.c: Use DECL_SOURCE_LOCATION instead of\n+\tTREE_LOCUS.\n+\n+2003-09-21  Lifang Zeng  <zlf605@hotmail.com>\n+\tPaul Brook  <paul@nowt.org>\n+\n+\t* Make-lang.in (F95_OBJS): Add fortran/data.o.\n+\t* array.c (gfc_inser_constructor): New function.\n+\t(gfc_get_constructor): New function.\n+\t(gfc_free_constructor): Initialize offset and repeat.\n+\t(iterator_stack): Remove.\n+\t(expand_info): Add offset, component and repeat fields.\n+\t(expand_constructor): Set them.\n+\t(expand): Set new fields.\n+\t(gfc_copy_constructor): Ditto. Avoid recursion.\n+\t* gfortran.h: Add prototypes for new functions.\n+\t(gfc_constructor): Add offset, component and repeat.\n+\t(iteratio_stack): Move to here.\n+\t* resolve.c (check_data_variable): Convert data values into variable\n+\tinitializers.\n+\t(traverse_data_list): Build implicit loop chain.\n+\t(gfc_resolve): Ditto.\n+\t* trans-array.c (gfc_conv_array_intializer): Handle repeat count.\n+\t* trans-decl.c (gfc_get_symbol_decl): Use gfc_conv_structure.\n+\t* trans-expr.c (gfc_conv_structure): Handle array initializers.\n+\t(gfc_conv_expr): Update to match.\n+\t* trans.h (gfc_conv_structure): Declare.\n+\t* data.c: New file.\n+\n+2003-09-20  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans.h: Add declarations for gfor_fndecl_si_kind and\n+\tgfor_fndecl_sr_kind.\n+\t* trans-decl.c (g95_build_intrinsic_function_decls): Build them.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_si_kind): New function.\n+\t(g95_conv_intrinsic_sr_kind): New function.\n+\t(g95_conv_intrinsic_function): Add SELECTED_INT_KIND and\n+\tSELECTED_REAL_KIND.\n+\n+2003-09-17  Lars Segerlund  <Lars.Segerlund@comsys.se>\n+\n+\t* iresolve.c (gfc_resolve_random_number): Generate _r4 & _r8\n+\tinstead of _4 and _8 as postfix for libgfortran calls.\n+\n+2003-09-16  Paul Brook  <paul@nowt.org>\n+\n+\t* array.c (compare_bounds): New function.\n+\t(gfc_compare_array_spec): Use it.\n+\n+2003-09-14  Paul Brook  <paul@nowt.org>\n+\n+\t* primary.c (gfc_match_rvalue): Make sure sym->result is set.\n+\t* trans-expr.c (gfc_conv_string_parameter): Also allow PRAM_DECLs.\n+\n+2003-09-14  Paul Brook  <paul@nowt.org>\n+\n+\t* check.c (dim_rank_check): Allow assumed bounds if requested.\n+\t(gfc_check_lbound): Call it.\n+\t(gfc_check_ubound): Ditto.\n+\t(gfc_check_size): Change to match.\n+\t* simplify.c (gfc_simplify_bound): New function.\n+\t(gfc_simplify_lbound): New function.\n+\t(gfc_simplify_ubound): New function.\n+\t* intrinsic.h: Declare them.\n+\t* intrinsic.c (add_functions): Use them.\n+\n+2003-09-14  Paul Brook  <paul@nowt.org>\n+\n+\t* io.c (format_lex): Initialize negative_flag.\n+\t(check_format): Intialize repeat.\n+\t* trans-io.c (gfc_new_nml_name_expr): Declare static.\n+\t(gfc_new_var_expr): Ditto.\n+\n+2003-09-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (gfc_conv_array_initializer): Handle derived types.\n+\t* trans-decl.c (gfc_get_symbol_decl): Only do local scalar values.\n+\n+2003-09-12  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_sign): Call fold.\n+\n+2003-09-12  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n+\n+\t* fortran/trans.c (gfc_finish_block): Call rationalize_compound_expr\n+\tfor a correct expression.\n+\n+2003-09-10  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-intrinsic.c (real_compnt_info): New struct.\n+\t(prepare_arg_info): New function.\n+\t(gfc_conv_intrinsic_set_exponent): New function.\n+\t(gfc_conv_intrinsic_scale): New function.\n+\t(gfc_conv_intrinsic_nearest): New function.\n+\t(gfc_conv_intrinsic_fraction): New function.\n+\t(gfc_conv_intrinsic_exponent): New function.\n+\t(gfc_conv_intrinsic_spacing): New function.\n+\t(gfc_conv_intrinsic_rrspacing): New function.\n+\t(gfc_conv_intrinsic_function): Use them.\n+\n+2003-08-24 XiaoQiang Zhang  (zhangapache@yahoo.com>\n+\n+\t* trans-const.c (gfc_conv_mpz_to_tree): Fix bug, parameter for\n+\tbuild_int_2 changed from (high, low) to (low, high).\n+\t* trans-io.c (ioparm_namelist_name, ioparm_namelist_name_len,\n+\tioparm_namelist_read_mode, iocall_set_nml_val_int,\n+\tiocall_set_nml_val_float, iocall_set_nml_val_char,\n+\tiocall_set_nml_val_complex, iocall_set_nml_val_log): New declaration.\n+\t(gfc_build_io_library_fndecls): Add variable initialization.\n+\t(gfc_new_nml_name_expr, get_new_var_expr): New function.\n+\t(build_dt): Add namelist support.\n+\t* io.c (value): New variable.\n+\t(check_format): Support FMT_H now.\n+\n+2003-09-07  Paul Brook  <paul@nowt.org>\n+\n+\t* io.c (gfc_resolve_dt): Error if format label is not defined.\n+\n+2003-09-07  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_aint): Fix two bugs. One is\n+\tabout case_switch's break. The other is about building the condition\n+\tstatement tree, which judges the argument in the range of the\n+\tcorresponding integer type.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_mod): MOD and MODULO can work\n+\tfor the large values.\n+\n+2003-09-05  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (expand_function_body): Gimplify the function.\n+\n+2003-09-04  Jeff Law  <law@redhat.com>\n+\n+\t* f95-lang.c (DEFINE_MATH_BUILTIN): C arrays start at\n+\tindex zero!\n+\n+2003-09-04  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (gfc_define_builtin): Also set implicit_built_in_decls.\n+\t(gfc_expand_stmt): New function.\n+\t(LANG_HOOKS_RTL_EXPAND_STMT): Define.\n+\t(expand_function_body): Use tree_rest_of_compilation.\n+\t* trans-decl.c (gfc_generate_function_code): Don't free cfun.\n+\n+2003-09-03  Jeff Law  <law@redhat.com>\n+\n+\t* f95-lang.c (gfc_init_builtin_functions): C arrays start at\n+\tindex zero!\n+\n+2003-08-30  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (builtin_function): Remove #if 0 code.\n+\t(gfc_define_builtin): New function.\n+\t(gfc_init_builtin_functions): Use mathbuiltins.def not ../builtins.def.\n+\t* mathbuiltins.def: New file.\n+\t* trans-intrinsic.c (gfc_intrinsic_map_t): Add builtin code fields.\n+\t(gfc_intrinsic_map): Use mathbuiltins.def.\n+\t(gfc_intrinsic_builtin_t): Remove.\n+\t(gfc_build_intrinsic_lib_fndecls): Update.\n+\t* trans-types.c (gfc_init_types): Remove redundant initilaization of\n+\tsigned_size_type_node.\n+\n+2003-08-29  Paul Brook  <paul@nowt.org>\n+\n+\t* arith.c (gfc_real_kinds): Use correct minimum exponents.\n+\n+2003-08-22  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-instinsic.c (gfc_conv_intrinsic_mod): Also do MODULO.\n+\t(gfc_conv_intrinsic_function): Add MODULO.\n+\n+2003-08-22  Jason Merrill  <jason@redhat.com>\n+\n+\t* trans-array.c (gfc_conv_expr_descriptor): Update use of predicates.\n+\n+2003-08-22  Andreas Jaeger  <aj@suse.de>\n+\n+\t* Make-lang.in (f95.install-common): Add DESTDIR support.\n+\t* (f95.install-info): Likewise.\n+\t(f95.uninstall): Likewise.\n+\n+2003-08-19  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* trans-types.c (gfc_init_types): Initialize\n+\tsigned_size_type_node with size_type_node.\n+\n+2003-08-18  Paul Brook  <paul@nowt.org>\n+\n+\t* dependency.c (gfc_dependency): New enum.\n+\t(check_another_array_ref): Remove.\n+\t(gfc_get_array_from_component): Remove.\n+\t(get_x): Remove.\n+\t(get_range): Remove.\n+\t(get_no_of_elements): Use mpz_t, not mpf_t.\n+\t(transform_sections): New function.\n+\t(gfc_check_range_range): Rename ...\n+\t(gfc_check_section_vs_section): ... to this.  Use new function.\n+\t(gfc_is_inside_range): Rewrite to match.\n+\t(gfc_check_element_vs_section): Ditto.\n+\t(gfc_check_element_vs_element): Ditto.\n+\t(get_deps): Ditto.\n+\t(gfc_dep_resolver): Ditto.  Remove unused parameter.\n+\t* Dependency.h (gfc_check_range_range, gfc_check_element_vs_section,\n+\tgfc_check_element_vs_element, gfc_is_inside_range,\n+\tgfc_get_array_from_component): Remove prototypes for static functions.\n+\t(gfc_dep_resolver): Update prototype.\n+\t* trans-array.c (gfc_conv_resolve_dependencies): Change to match.\n+\n+2003-08-15  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (gfc_build_qualified_array): Don't add symbols for\n+\treturn values to parent scope.\n+\t(gfc_build_dummy_array_decl): Ditto.\n+\n+2003-08-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-stmt.c (gfc_trans_allocate): Handle NULL refs. Allocate the\n+\tsize of\tthe type, not the pointer.\n+\t* resolve.c (resolve_symbol): Give more accurate error message.\n+\n+2003-08-10  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (gfc_build_function_decl): Only mangle global symbols.\n+\n+2003-08-10  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-stmt.c (gfc_trans_allocate): Correctly handle non-array derived\n+\ttype components.\n+\n+2003-08-10  Chun Huang  <compiler@sohu.com>\n+\n+\t* resolve.c (resolve_formal_arglist): Resolve STATEMENT function.\n+\t(resolve_symbol): Ditto.\n+\t* trans-expr.c (gfc_conv_statement_function): New function.\n+\t(gfc_conv_function_expr): Use it.\n+\n+2003-08-10  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (gfc_conv_ss_startstride): Handle functions.\n+\t(walk_function_expr): Set section rank.\n+\t* trans-intrinsic.c (gfc_walk_intrinsic_libfunc): Ditto.\n+\n+2003-08-10  Paul Brook  <paul@nowt.org>\n+\n+\t* intrinsic.c (add_sym): Prefix names with correct string.\n+\t(add_sym_0s): New function.\n+\t(add_subroutines): Register abort.\n+\n+2003-08-10  Erik Schnetter  <schnetter@uni-tuebingen.de>\n+\n+\t* gfortran.h: Introduce options to control the mangling.\n+\t* lang.opt: Likewise.\n+\t* options.c (gfc_init_options): Handle the options.\n+\t* trans-common.c (gfc_sym_mangled_common_id): New function.\n+\t(gfc_build_common_decl): Call it.\n+\t* trans-decl.c (gfc_sym_mangled_function_id): New function.\n+\t(gfc_get_extern_function_decl, gfc_build_function_decl): Call it.\n+\n+2003-08-09  Paul Brook  <paul@nowt.org>\n+\n+\t* module.c (mio_symbol): Always ouput a namespace for formal args.\n+\t(load_needed): Namespace now belong to their proper symbol.\n+\t(gfc_dump_module): Change G95=>GFORTRAN.\n+\n+2003-08-05  Paul Brook  <paul@nowt.org>\n+\n+\t* options.c: Force -fg77-calls.\n+\n+2003-08-02  Paul Brook  <paul@nowt.org>\n+\n+\t* Makelang.in: Rename G95_* to GFORTRAN_*.\n+\t* All sources: Rename G95_* to GFC_*.\n+\n+2003-08-01  Paul Brook  <paul@nowt.org>\n+\n+\t* fortran/Make-lang.in: Use GMPLIBS.\n+\t* fortran/config-lang.in: Set need_gmp.\n+\t* trans-expr.c (gfc_conv_variable): Remove incorrect assertion.\n+\n+2003-07-27  Andreas Jaeger  <aj@suse.de>\n+\n+\t* trans-decl.c (gfc_generate_constructors): Convert prototype to\n+\tISO C90.\n+\t* trans-const.c (gfc_init_constants): Likewise.\n+\t* trans-intrinsic.c (gfc_build_intrinsic_lib_fndecls): Likewise.\n+\n+\t* gfortranspec.c: Convert to ISO C90.\n+\t(lang_specific_driver): Correct copyright, remove ALT_LIBM usage.\n+\n+2003-07-26  Paul Brook  <paul@nowt.org>\n+\n+\t* lang.opt: Add -fdump-parse-tree.\n+\t* options.c (gfc_handle_option): Ditto.\n+\t* resolve.c (resolve_forall_iterators): Convert to proper type.\n+\t* trans-stmt.c (gfc_trans_forall_1): Create temp var with correct type.\n+\n+2003-07-26  Paul Brook  <paul@nowt.org>\n+\n+\t* Makefile.in: Add build dependencies on files common with rest of gcc.\n+\n+2003-07-26  Lifang Zeng  <zlf605@hotmail.com>\n+\n+\t* trans.h: Declare g95_trans_pointer_assignment.\n+\t* trans-expr.c (g95_trans_pointer_assignment): New function.\n+\t(g95_trans_pointer_assign): Use it.\n+\t* trans-stmt.c (g95_trans_forall_1): Handle pointer assignment.\n+\t(g95_trans_pointer_assign_need_temp): New function.\n+\n+2003-07-26  Paul Brook  <paul@nowt.org>\n+\n+\t* gfortran.texi: Replace references to g95.\n+\n+2003-07-26  Paul Brook  <paul@nowt.org>\n+\n+\tRename g95_* to gfc_*.\n+\n+2003-07-25  Paul Brook  <paul@nowt.org>\n+\n+\t* gfortran.h: Rename from g95.h.\n+\t* trans-types.c (boolean_type_node, booelan_true_node,\n+\tboolean_false_node): Remove.\n+\t* trans-types.h: Ditto.\n+\n+2003-07-25  Chun Huang  <compiler@sohu.com>\n+\n+\t* parse.c (accept_statement): Implement BLOCK DATA statement.\n+\t* trans-expr.c (g95_conv_variable): Fix bug for dereference pointer\n+\tvariables.\n+\n+2003-07-24  Lifang Zeng  <zlf605@hotmail.com>\n+\n+\t* trans-stmt.c (temporary_list): Define.\n+\t(g95_trans_assign_need_temp): New function.\n+\t(g95_trans_forall_1): Modified for WHERE.\n+\t(g95_trans_where_assign): Modified.\n+\t(g95_trans_where_2): Modified.\n+\t(g95_evaluate_where_mask): Modified.\n+\t(g95_trans_where): Modified.\n+\t(g95_get_temp_expr): Removed.\n+\t(g95_add_to_where_stmt_list): Removed.\n+\t(compute_overall_iter_number): Modified for WHERE.\n+\t* trans.h: Remove where_stmt_list.\n+\n+2003-07-24  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* lang.opt: Correct description of options -J and -M.\n+\n+2003-07-23  Steven Bosscher   <steven@gcc.gnu.org>\n+\n+\t* lang.opt: Move help text to here.\n+\t* lang-options.h: Remove.\n+\n+2003-07-23  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\t* iresolve.c (g95_resolve_transpose): Proper variable in switch.\n+\t* simplify.c (g95_simplify_nearest): Fix typo and use a correct test\n+\ton kind.\n+\n+2003-07-22  Steven Bosscher  <steven@gcc.gnu.org>\n+\tPaul Brook  <paul@nowt.org>\n+\n+\t* check.c (check_rest): Use global pedantic flag.\n+\t* io.c (data_desc): Ditto.\n+\t* error.c (g95_warning, g95_warning_now): Use global flag.\n+\t* f95-lang.c (LANG_HOOKS_HANDLE_OPTION): Rename from DECODE.\n+\t(expand_function_body): Update to new prototypes.\n+\t(g95_init): Use new option names.\n+\t* g95.h (g95_option_t): Standardize names.\n+\t(g95_init_options, g95_handle_option): Update prototypes.\n+\t* interface.c: Use new option names.\n+\t* match.c: Ditto.\n+\t* module.c: Ditto.\n+\t* parse.c: Ditto.\n+\t* primary.c: Ditto.\n+\t* resolve.c: Ditto.\n+\t* scanner.c: Ditto.\n+\t* simplify.c: Ditto.\n+\t* symbol.c: Ditto.\n+\t* trans-array.c: Ditto.\n+\t* trans-expr.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\t* trans-decl.c: Ditto.\n+\t(g95_build_library_function_decl): Remove obsolete VPARAMS.\n+\t* trans.h: Ditto.\n+\t* options.c (g95_display_help): Remove.\n+\t(g95_init_options): Convert to new scheme.\n+\t(set_Wall): Ditto\n+\t(g95module_option): Ditto, rename from g95_parse_arg.\n+\t(g95_handle_module_path_options): New function.\n+\t* trans-equivalence.c: Fix error message.\n+\t* lang.opt: Corrections.\n+\n+2003-07-21  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* lang.opt: New file.\n+\n+2003-07-21  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* decl.c (match_attr_spec): Set colon_seen.\n+\n+2003-07-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Update comment.\n+\t(g95_trans_array_constructor_subarray): Cleanup loopinfo data.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_anyall,count,arith,\n+\tminmaxloc,minmaxval): Ditto.\n+\t* trans-io.c (g95_trans_transfer): Ditto.\n+\t* trans-stmt.c: Remove unneeded prototypes.\n+\t(generate_loop_for_lhs_to_rhs): Rename vars. Add loop post chain.\n+\t(generate_loop_for_rhs_to_temp): Rename vars. Don't share loopinfo.\n+\t(compute_inner_temp_size): Remove bits of dead code. Add comments.\n+\tDon't share loopinfo.\n+\t(compute_overall_iter_number): Declare as static.\n+\t(allocate_temp_for_forall_nest): Ditto.\n+\t(g95_trans_forall_1): Don't pass shared loopinfo.\n+\t* trans.c (g95_start_block): Expand comment.\n+\n+2003-07-12  Paul Brook  <paul@nowt.org>\n+\n+\t* arith.c (g95_index_integer_kind): Remove unused initializer.\n+\t* trans-stmt.c (generate_loop_for_temp_to_lhs): Don't multiply array\n+\tindex by size of element.\n+\t(generate_loop_for_rhs_to_temp): Ditto.\n+\t(allocate_temp_for_forall_nest): Use element size, not index size.\n+\n+2003-07-11  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* arith.c (g95_index_integer_kind): Add a TODO.\n+\t* simplify.c (g95_simplify_nearest): Add a TODO.\n+\n+2003-07-09  Chun Huang  <compiler@sohu.com>\n+\n+\t* trans.h: Add declarations for gfor_fndecl_string_scan and\n+\tgfor_fndecl_string_verify.\n+\t* trans-decl.c (g95_build_intrinsic_function_decls): Build them.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_scan): New function.\n+\t(g95_conv_intrinsic_verify): New function.\n+\t(g95_conv_intrinsic_function): Add SCAN and VERIFY.\n+\t* simplify.c (g95_simplify_scan, g95_simplify_verify): Fix bug in case\n+\tof parameter 'BACK=.TRUE.'\n+\n+2003-07-05  Lifang Zeng  <zlf605@hotmail.com>\n+\n+\t* trans-stmt.c (iter_info, forall_info): Define.\n+\t(g95_trans_forall_block): Remove.\n+\t(g95_trans_forall_loop): Use forall info blocks.\n+\t(g95_trans_nested_forall_loop): New function.\n+\t(g95_do_allocate): Handle things other than logical masks.\n+\t(generate_loop_for_temp_to_lhs): New function.\n+\t(generate_loop_for_rsh_to_temp): New function.\n+\t(compute_inner_temp_size): New function.\n+\t(compute_overall_iter_number): New function.\n+\t(allocate_temp_for_forall_nest): New function.\n+\t(g95_trans_forall): Move body ...\n+\t(g95_trans_forall_1): ... to here.  Handle loops with temporaries.\n+\n+2003-07-02  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (create_index_var, g95_build_qualified_array): Put vars\n+       \tin correct scope.  Change callers to match.\n+\t* trans-types.c (g95_get_dtype_cst): Allow rank 7 arrays.\n+\t* iresolve.c (g95_resolve_reshape): Only use constant shapes.\n+\n+2003-07-02  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_conv_loop_setup): Remove dead var.  Use\n+\texpression shape for all expressions.\n+\t* trans-decl.c (g95_symbol_init): Allow adding at very end of list.\n+\n+2003-07-03  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* g95.h (g95_option_t), lang-options.h, options.c (g95_init_options,\n+\tg95_parse_arg), intrinsic.c (g95_convert_type): support of\n+\t-Wconversion.\n+\t* intrinsic.c, g95.h: Add g95_convert_type_warn,\n+\t* resolve.c (g95_resolve_index): Call it.\n+\n+2003-07-02  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_reshape): Set expression shape.\n+\t(g95_resolve_shape): Ditto.\n+\t* simplify.c (g95_simplify_shape): Move common code outside condition.\n+\t* trans-array.c (g95_conv_array_initializer): Teach it how to count.\n+\n+2003-07-01  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* array.c (g95_array_dimen_size): Deal with EXPR_ARRAY to improve\n+\tconformance checks.\n+\n+2003-06-29  Paul Brook  <paul@nowt.org>\n+\n+\t* array.c (g95_simplify_iterator_var): Don't bother with return value.\n+\t* expr.c (find_array_element, find_component_ref): New functions.\n+\t(remove_subobject_ref): New function.\n+\t(simplify_const_ref): Use them.  Rename from simplify_component_ref.\n+\t(simplify_ref_chain): New function.\n+\t(g95_simplify_expr): Use it.  Simplify parameter variable subobjects.\n+\t(g95_specification_expr): Simplify the expression.\n+\t* resolve.c (resolve_operator): Check simplifications return code.\n+\t(g95_resolve_expr): Ditto.\n+\n+2003-06-26  Paul Brook  <paul@nowt.org>\n+\n+\t* expr.c (simplify_component_ref): New function.\n+\t(g95_simplify_expr): Use it.\n+\t* resolve.c (resolve_structure_cons): Handle references.\n+\n+2003-06-25  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-io.c (build_dt): Handle internal units.\n+\n+2003-06-25  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* trans-common.c (g95_build_common_decl): Array index range starts at 0.\n+\t(g95_build_common_decl, g95_layout_global_equiv, g95_trans_one_common):\n+\tUse g95_array_index_type instead of integer_type_node.\n+\t(g95_build_common_decl, g95_set_common_master_type): Use\n+\tg95_character1_type_node instead of char_type_node.\n+\t* trans-equivalence.c (g95_layout_local_equiv): As above.\n+\n+2003-06-24  Steven G. Kargl  <kargls@attbi.com>\n+\n+\t* g95.h (g95_option_t), options.c (g95_init_options, g95_parse_arg):\n+\tremove last remains of -fquiet.\n+\n+2003-06-22  Paul Brook  <paul@nowt.org>\n+\n+\t* resolve.c (resolve_operator): Don't fail if we can't simplify.\n+\t(g95_resolve_expr): Ditto.\n+\t(resolce_code): Mark as static.\n+\t* trans-stmt.c (g95_trans_chaaracter_select): Mark labels because the\n+\tgimplifer doesn't (yet).\n+\n+2003-06-20  Paul Brook  <paul@nowt.org>\n+\n+\t* g95.h: Add ST_PAUSE and EXEC_PAUSE.\n+\t* match.c (g95_match_if): Add ST_PAUSE.\n+\t(g95_match_stopcode): New function.\n+\t(g95_match_pause, g95_match_stop): Use it.\n+\t* parse.c (g95_ascii_statement): Handle ST_PAUSE.\n+\t(decode_stmt, next_statement, parse_executable): Ditto.\n+\t* resolve.c (resolve_code): Ditto.\n+\t* st.c (g95_free_statement): Ditto.\n+\t* trans-stmt.c (g95_trans_pause): New function.\n+\t* trans-stmt.h: Declare it.\n+\t* trans.c (g95_trans_code): Use it.\n+\t* trans-decl.c (gfor_fndecl_pause_numeric, gfor_fndecl_pause_string):\n+\tDeclare.\n+\t(g95_build_builtin_function_decls): Initialize them.\n+\t* trans.h: Ditto.\n+\t* dump-parse-tree.c (g95_show_code_node): Handle EXEC_PAUSE.\n+\n+2003-06-18  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* io.c (g95_match_open , g95_match_close, g95_match_inquire,\n+\tmatch_filepos): Fix error handling.\n+\n+2003-06-18  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* array.c (spec_dimen_size, ref_dimen_size, g95_array_dimen_size):\n+\tAdd assertions on arguments.\n+\t* resolve.c (expression_shape): Remove useless &.\n+\t* simplify.c (get_kind, g95_simplify_bit_size, g95_simplify_digits,\n+\tg95_simplify_ibclr, g95_simplify_ibits, g95_simplify_ibset,\n+\tg95_simplify_ishft,g95_simplify_ishftc, g95_simplify_maxexponent,\n+\tg95_simplify_minexponent, g95_simplify_radix, g95_simplify_range\n+\tg95_simplify_rrspacing, g95_simplify_scale, g95_simplify_spacing,\n+\tg95_simplify_tan, g95_simplify_tiny): Clean predicates and assertions.\n+\t(g95_simplify_not, g95_simplify_scale): Add assertions.\n+\n+2003-06-15  Paul Brook  <paul@nowt.org>\n+\n+\tClean up stuff to work with the ssa optimizers.\n+\t* convert.c (convert): Handle BOOLEAN_TYPEs.\n+\t* f95-lang.c (g95_truthvalue_conversion): Implement.\n+\t* trans-array.c (g95_trans_array_constructor_value): Group multiple\n+\tscalar values.\n+\t* trans.h (g95_truthvalue_conversion): Declare.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_anyall): Use bool constants.\n+\t* trans-stmt.c (g95_trans_character_select): Don't create array\n+\tassignments.  Mark labels as indirect jump targets.\n+\t* trans-types.h (g95_init_types): Use BOOLEAN_TYPE nodes.\n+\t(g95_get_dtype_cst): Handle LOGICAL types.\n+\n+2003-06-14  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (g95_gimplify_expr): New function.\n+\t* trans-array.c (g95_trans_array_constructor_value): Don't create\n+\tarray assignments.\n+\t(g95_conv_expr_descriptor): Rename simple->gimple.\n+\t* trans-expr.c (conv_expr_op): Use proper logical operators.\n+\t* trans-intrinsic.c (build_fixbound_expr): New function.\n+\t(build_fix_expr): Ditto.\n+\t(g95_conv_intinsic_aint): Use them. Use builtin functions.\n+\t(g95_conv_intrinsic_function): Add FLOOR and CEILING.\n+\n+2003-06-10  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* array.c (g95_compare_array_spec): Remove unreachable code.\n+\t* expr.c (g95_copy_expr): Likewise.\n+\t* intrinsic.c (g95_convert_type): Likewise.\n+\t* misc.c (g95_code2string): Likewise.\n+\t* simplify.c (g95_simplify_ishft, g95_simplify_real,\n+\tg95_simplify_reshape, g95_simplify_sign, g95_simplify_sqrt): Likewise.\n+\t* trans-stmt.c (g95_trans_select): Likewise.\n+\t* primary.c (extend_ref): Add an assertion.\n+\t* simplify.c (g95_convert_constant): Add const.\n+\t* intrinsic.h: Remove g95_check_x_ni.\n+\t* f95-lang.c (g95_finish): Call g95_release_include_path.\n+\n+2003-06-10  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* resolve.c (resolve_contained_functions): Fix typo introduced on\n+\t2003-01-13.\n+\n+2003-06-09  Paul Brook  <paul@nowt.org>\n+\n+\t* g95.h: Include system.h not hwint.h.\n+\t* many: use safe-ctype.h not ctype.h.  Change isalpha -> ISALPHA, etc.\n+\t* misc.c (g95_getmem): Use xmalloc/memset instead of calloc.\n+\n+2003-06-09  Paul Brook  <paul@nowt.org>\n+\n+\t* g95.h (g95_symbol): Add fields for COMMON and EQUIVALENCE variables.\n+\t* Make-lang.in (F95_OBJS): Add files for COMMON and EQUIVALENCE.\n+\t* trans-decl.c (g95_add_decl_to_functions): Make non-static.\n+\t(g95_get_symbol_decl): Handle COMMON and EQUIVALENCE objects.\n+\t(g95_generate_function_code): Translate COMMON and EQUIVALENCE\n+\tobjects.\n+\t* trans.h (g95_trans_equivalence, g95_trans_common,\n+\tg95_add_decl_to_function): Declare.\n+\t* trans-common.c, trans-equivalence.c: New files.\n+\n+2003-06-08  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* intrinsic.c (g95_intrinsic_extension): Remove.\n+\t(add_functions): Substitute g95_check_x for g95_check_x_ni\n+\teverywhere.\n+\t(g95_init_expr_extensions): New function.\n+\t(g95_intrinsic_func_interface): Use it.\n+\t* intrinsic.h: Remove extern decl for g95_intrinsic_extension.\n+\t* check.c (g95_check_digit, g95_check_huge, g95_check_kind,\n+\tg95_check_precision, g95_check_present, g95_check_radix,\n+\tg95_check_range, g95_check_selected_real_kind): Do not set\n+\tg95_intrinsic_extension.\n+\t(g95_check_x_ni): Remove now duplicate of g95_check_x.\n+\n+\t* expr.c (check_inquiry): Add FIXME, fixup some code style.\n+\n+2003-06-06  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* g95.h (ref_type): Name this type explicitly.\n+\t* module.c (MIO_NAME): Add specialisations of mio_name.\n+\t(mio_symbol_attribute, mio_typespec, mio_array_ref,\n+\tmio_array_spec, mio_ref, mio_expr, mio_symbol): Use them.\n+\t(ab_attribute): Name this type explicitly.\n+\t(mio_symbol_attribute, mio_expr): Add cast to call to find_enum.\n+\n+2003-06-05  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-intrinsic.c (g95_conv_allocated): New function.\n+\t(g95_conv_intrinsic_function): Make G95_ISYM_ALLOCATED work.\n+\n+2003-06-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* f95-lang.c: Don't include g95-support.h\n+\t(g95_mark_addressable): Add prototype.\n+\t(g95_init_decl_processing): Remove C front end hack.\n+\t* f95-tree.c: Remove file.\n+\t* support.c: Remove file.\n+\t* g95-support.h: Remove file.\n+\t* trans-types.c (g95_init_types): Set up boolean\n+\ttype related tree nodes.\n+\t* Make-lang.in: Remove rules for dead files and\n+\tdependencies on them.\n+\n+2003-06-05  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Remove the final\n+\tC front end dependency.  Also, convert.c does not depend on\n+\tg95-support.h anymore.\n+\t* convert.c: Don't include c-common.h and g95-support.h\n+\t* f95-lang.c: Don't inlude c-common.h and c-common.def (3x).\n+\t(g95_stmt_tree, g95_scope_stmt_stack, anon_aggr_type_p,\n+\tstmts_are_full_exprs_p, current_stmt_tree,\n+\tcurrent_scope_stmt_stack): Remove.\n+\t* g95-support.h (unsigned_conversion_warning): Kill proto.\n+\t(boolean_type_node, boolean_true_node, boolean_false_node):\n+\tDon't define here.  Instead, make then true tree nodes in\n+\ttrans-types.\n+\t* support.c (c_global_trees): Die, C front end, die!!!\n+\t(g95_init_c_decl_hacks): Don't touch intmax_type_node,\n+ \tuintmax_type_node, string_type_node and const_string_type_node.\n+\t(decl_constant_value, overflow_warning): Make static functions.\n+\tThey are in death row too, though.\n+\t(default_conversion, c_expand_asm_operands): Remove.\n+\t* trans-array.c, trans-expr.c, trans-intrinsic.c, trans-stmt.c,\n+\ttrans.c: Don't include c-common.h.\n+\t* trans-types.c (boolean_type_node, boolean_true_node,\n+\tboolean_false_node): Make them real tree nodes.\n+\t* trans-types.h (intmax_type_node, string_type_node,\n+\tconst_string_type_node): Hack to work around C dependencies\n+\tin builtin-types.def.\n+\n+2003-06-04  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* decl.c (decl_types): Add some iterators-like sentinels.\n+\t* decl.c (match_attr_spec): Use them.\n+\tUse \"decl_types\" instead of \"int\".\n+\tAdd cast in call to g95_match_strings.\n+\t* dump-parse-tree.c (g95_show_namespace):  Use \"g95_intrinsic_op\"\n+\tinstead of \"int\".\n+\t* g95.h (g95_intrinsic_op): Add some iterators-like sentinels.\n+\t(g95_interface_info): Use \"g95_intrinsic_op\".\n+\t* dump-parse-tree.c (g95_show_namespace): Use them.\n+\t* interface.c (g95_check_interfaces): Use them.\n+\t* module.c (read_module, write_module): Use them.\n+\t* symbol.c (g95_get_namespace, g95_free_namespace): Use them.\n+\tUse \"g95_intrinsic_op\".\n+\t* interface.c (check_operator_interface): Use \"g95_intrinsic_op\".\n+\tAdd a default case in switch statement.\n+\t* intrinsic.h (g95_generic_isym_id): Moved to...\n+\t* g95.h (g95_generic_isym_id): here.\n+\t(g95_intrinsic_sym): Use \"g95_generic_isym_id\".\n+\t* intrinsic.c (make_generic): Use \"g95_generice_isym_id\".\n+\t* trans-intrinsic.c (g95_intrinsic_map_t,\n+\t g95_conv_intrinsic_lib_funtion): Use \"g95_generice_isym_id\".\n+\t* match.c (g95_match_intrinsic_op): Add cast in call to\n+\tg95_match_strings.\n+\n+2003-06-03  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* support.c (skip_evaluation, warn_conversion, lvalue_p,\n+\tlvalue_or_else, pedantic_lvalue_warning, warn_for_assignment,\n+\tconstant_fits_type_p, convert_and_check,\n+\tunsigned_conversion_warning): Remove these ugly remnants\n+\twe inherited from the C front end.\n+\t(function_types_compatible): Remove '#if 0'-edcode.\n+\t(build_modify_expr): Likewise.\n+\t(convert_for_assignment): Don't use the deceased functions.\n+\tThe parameter fundecl is now unused.\n+\t(decl_constant_value): Always just return decl.  In fact\n+\tthis function is not used at present, but it might be in\n+\tthe future, when we start using the tree inliner.\n+\t(overflow_warning, default_conversion, c_expand_asm_operands):\n+\tAbort when these are called, they are part of the C type\n+\tchecking implementation and therefore poison to Fortran.\n+\n+2003-06-04  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* Make-lang.in (F95_ADDITIONAL_OBJS): Don't depend on\n+\tc-pretty-print.o and c-dump.o.  Add a comment on why we\n+\tdepend on c-semantics.c.\n+\t* f95-lang.c (LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN):\n+\tDon't use the C front end tree dumper hook to dump the\n+\tlanguage specific tree representation -- we don't have\n+\tone.  So instead, inherit the default langhook.\n+\n+2003-06-02  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-expr.c (g95_conv_variable): Remove incorrent assertion.\n+\n+2003-06-02  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* check.c (g95_check_associated): Use proper types.  Remove\n+\textraneous argument in call to g95_error().\n+\n+2003-06-02  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* resolve.c (resolve_operator): Make logical operands convert to the\n+\ttype with higher kind.\n+\n+2003-06-02  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* check.c (g95_check_associated): Make sure both pointer and target has\n+\tthe same type and rank. Null pointer or array section with vector\n+\tsubscript as target are not allowed.\n+\t* trans.h: Declare gfor_fndecl_associated.\n+\t* trans-decl.c: (g95_build_builtin_function_decls): Initialize\n+\tgfor_fndecl_associated.\n+\t* trans-intrinsic.c (g95_conv_associated): New function.\n+\t(g95_conv_intrinsic_function): Make G95_ISYM_ASSOCIATED work.\n+\n+2003-06-02  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\n+\t* trans-array.c (g95_conv_expr_descriptor): Set the base of POINTER\n+\taccording to POINTER itself rather than TARGET.\n+\t(g95_conv_expr_descriptor): Make lbound start at 1.\n+\t* trans-expr.c (g95_trans_pointer_assign): Fix a bug for Nullify.\n+\n+2003-06-01  Paul Brook  <paul@nowt.org>\n+\n+\t* expr.c (g95_type_convert_binary): Make it match the standard.\n+\t* g95.texi: Remove dead link.\n+\n+2003-06-01  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* g95.texi: Cleanup somewhat in preparation for inclusion\n+\tin GCC CVS.\n+\n+2003-05-23  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\t    Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* resolve.c (compare_bound_int, resolve_where_shape): Proper return\n+\ttype.\n+\t(g95_find_forall_index): Return proper value.\n+\t(g95_resolve_assign_in_forall, g95_resolve_forall): Use proper type to\n+\tcompare the return value from g95_find_forall_index.\n+\n+2003-05-23  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\t* g95.h, io.c (g95_st_label): Remove \"length\".\n+\t(g95_symtree): Remove \"link\".\n+\t(g95_case): Remove \"code\".\n+\t* arith.c, arith.h (g95_compare_string, g95_convert_integer,\n+\tg95_convert_real): Make an argument pointer to const.\n+\t* decl.c (colon_seen): Add a TODO.\n+\t* interface.c (g95_compare_types): Fix typo.\n+\t* interface.c (compare_interfaces): Preserve value of \"p\".\n+\t* intrinsic.c (sort_actual): Remove \"i\".\n+\t* match.c (g95_match_assign): Proper type in call to g95_match().\n+\t* parse.c (next_free): Avoid duplicate call due to macro.\n+\t* parse.c (check_statement_label): wrong type in call to g95_error.\n+\t* primary.c (match_real_constant): Add a TODO.\n+\t* resolve.c (resolve_select):  Remove useless conditional.\n+\t* simplify.c (g95_simplify_repeat): Proper assignment to\n+\t\"value.character.string\".\n+\t* simplify.c (g95_simplify_reshape): Wrong variable in call to\n+\tg95_error.\n+\n+2003-05-20  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* trans-stmt.c: Remove unnecessary include file defaults.h.\n+\n+2003-05-19  Lifang Zeng  <zlf605@hotmail.com>\n+\n+\t* trans-stmt.c (g95_trans_forall_loop): Handle FORALL with negative\n+\tstride.\n+\t(g95_trans_forall): Allow arbitrary number of FORALL indexes and\n+\tactual variables used as FORALL indexes.\n+\n+2003-05-15  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_trans_static_array_pointer): Use\n+\tnull_pointer_node.\n+\t(g95_trans_deferred_array): Initialize static array pointers.\n+\t* trans-expr.c (g95_conv_function_call): Use formal arglist to\n+\tcorrectly pass POINTER and absent CHARACTER arguments.\n+\n+2003-05-14  Lifang Zeng  <zlf605@hotmail.com>\n+\n+\t* resolve.c (g95_resolve_forall): Resolve FORALL construct/statement.\n+\t(g95_resolve_forall_body): Resolve FORALL body.\n+\t(g95_resolve_where_code_in_forall): Resolve WHERE inside FORALL.\n+\t(g95_resolve_assign_in_forall): Resolve assignment inside FORALL.\n+\t(g95_find_forall_index): Check whether the FORALL index appears in\n+\tthe expression or not.\n+\t(resolve_code): Modified.\n+\n+2003-05-14  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_spread): Convert ncopies to index_type.\n+\n+2003-05-13  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-types.c (g95_max_array_element_size): Now a tree node.\n+\t(g95_init_types): Work out max size properly.\n+\t(g95_get_dtype_cst): Modify to match.\n+\n+2003-05-11  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-io.c (add_case): Create a label decl for case labels.\n+\n+2003-05-11  Paul Brook  <paul@nowt.org>\n+\n+\t* arith.c (g95_integer_index_kind): New variable.\n+\t* f95-lang.c (g95_init): Move frontend initialization here ...\n+\t(g95_post_options): ... from here.\n+\t* g95.h (g95_index_integer_kind, g95_resolve_index): Declare.\n+\t* intrinsic.c (add_functions): Use index kinds.\n+\t* iresolve.c: Convert to index_kind where needed.\n+\t* resolve.c (g95_resolve_index): Make public, use index_kind.\n+\t(resolve_array_ref): Adjust to match.\n+\t* trans-array.c: Rename g95_array_index_kind to g95_index_integer_kind.\n+\t* trans-stmt.c: Ditto.\n+\t* trans-types.c: Ditto.\n+\t* trans-types.h (g95_array_index_kind): Remove declaration.\n+\t* trans-expr.c (g95_conv_expr_present): Use null_pointer_node.\n+\n+2003-05-07  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-const.c (g95_conv_mpz_to_tree): Typecast constant.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_bound): Convert type\n+\tof bound indices.\n+\n+2003-05-07  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (trans_static_array_pointer,\n+\tg95_trans_array_constructor_value, g95_conv_array_initializer,\n+\tg95_conv_structure): CONSTRUCTOR nodes only have one operand.\n+\t(g95_add_loop_ss_code): Convert subscripts to the correct type.\n+\t* trans-stmt.c (g95_trans_character_select): Ditto.\n+\t* trans-types.c (g95_init_types): Ditto.\n+\n+2003-05-07  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* f95-lang.c (expand_function_body): Use input_line, not lineno.\n+\t* trans-decl.c (g95_generate_function_code,\n+\tg95_generate_constructors): Likewise.\n+\t* trans.c (g95_trans_runtime_check, g95_add_block_to_block,\n+\tg95_get_backend_locus, g95_set_backend_locus, g95_trans_code):\n+\tLikewise.\n+\n+2003-05-07  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\t* trans-types.c (g95_get_derived_type): Fix bug for DERIVED type\n+\twith components point to the DERIVED type itself, and two DERIVED\n+\ttype with components point to each other.\n+\t* trans-expr.c (g95_conv_componet_ref): Modified\n+\n+2003-05-07  Kejia Zhao  <kejia_zh@yahoo.com.cn>\n+\t* trans-expr.c (g95_conv_expr): Translate EXPR_NULL into\n+\tnull_pointer_node.\n+\t(g95_trans_pointer_assign): Implement Nullify.\n+\n+2003-05-01  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_walk_function_expr): Cope with NULL esym.\n+\t* trans-decl.c (g95_get_symbol_decl): Don't mangle dummy functions.\n+\n+2003-05-01  Paul Brook  <paul@nowr.org>\n+\n+\t* trans-array.c, trans.c, trans-expr.c, trans-intrinsic.c,\n+\ttrans-stmt.c: Replace empty_stmt_node with build_empty_stmt () and\n+\tIS_EMPTY_STMT.\n+\n+2003-05-01  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* trans-stmt.c (g95_trans_integer_select): Add a parameter to build\n+\tCASE_LABEL_EXPR.\n+\n+2003-04-28  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_transpose): COMPLEX types are twice as big\n+\tas their kind suggests.\n+\t(g95_resolve_reshape): Ditto.\n+\n+2003-04-28  Chun Huang  <compiler@sohu.com>\n+\n+\t* trans-expr.c (g95_conv_substring_expr): New function.\n+\t(g95_conv_expr): Use it.\n+\n+2003-04-28  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_transpose): Make it match the\n+\timplementation.\n+\t* trans-intrinsic.c (g95_is_intrinsic_libcall): Add TRANSPOSE.\n+\n+2003-04-18  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* trans-types.c (g95_add_field_to_struct): New function to\n+\tadd a field to a UNION_TYPE or RECORD_TYPE.\n+\t* trans-types.h (g95_add_field_to_struct): Prototype.\n+\t(g95_get_derived_type): Use g95_add_field_to_struct to add\n+\tcomponents.\n+\t* trans-io.c (g95_add_field): Remove.\n+\t(ADD_FIELD): Use new g95_add_field_to_struct function.\n+\t(ADD_STRING): Likewise.\n+\t* trans-stmt.c (g95_trans_select): Likewise.\n+\t(g95_add_field): Remove duplicated function.\n+\n+2003-04-18  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\tPort implementation for CHARACTER SELECT from Andy's tree.\n+\t* trans-stmt.c (g95_trans_character_select): Implement character\n+\tselect. (g95_add_field): New function.\n+\t* trans-decl.c: Declare 'gfor_gndecl_select_string'.\n+\t(g95_build_builtin_function_decls): Add 'gfor_fndecl_select_string'.\n+\t* g95.h (struct g95_case): Add field 'int n'.\n+\t* trans.h: Declare 'gfor_fndecl_select_string'.\n+\n+2003-04-18  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* bbt.c (duplicate_key, g95_insert_bbt_with_overlap): Remove.\n+\t(g95_insert_bbd): Die on duplicates.\n+\t* g95.h (g95_insert_bbt_with_overlap): Delete prototype.\n+\n+2003-04-14  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* g95.texi: Require GMP 4.0 -- like we actually\n+\tdo.  Explain the testsuite and what-goes-where.\n+\tDon't use undefined texinfo symbol.  Break very\n+\tlong line.  Remove finished item from the list\n+\tof open projects.\n+\n+2003-04-11  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* trans-stmt.c (g95_evaluate_where_mask): Give mask temporaries\n+\tLOGICAL type.\n+\n+2003-04-10  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* trans-stmt.c (g95_trans_forall): Implement WHERE inside FORALL.\n+\t(g95_trans_forall_body): New function.\n+\n+2003-04-10  Canqun Yang  <canqun@yahoo.com.cn>\n+\n+\t* resolve.c (resove_where): New function.\n+\t(resolve_where_shape): New function.\n+\t(resolve_code): Add call to 'resolve_where'\n+\t* trans-stmt.c (g95_trans_where): Modified.\n+\t(g95_trans_where_2): New function.\n+\t(g95_trans_where_assign): New function.\n+\t(g95_evaluate_where_mask): New function.\n+\t(g95_add_to_stmt_list): New function.\n+\t(g95_get_temp_expr): New function.\n+\t* trans.h (where_stmt_list): New structure.\n+\n+2003-04-10  Paul Brook  <paul@nowt.org>\n+\n+\t* g95spec.c (DEFAULT_SWITCH_TAKES_ARG): Remove.\n+\t(DEFAULT_WORD_SWITCH_TAKES_ARG): Ditto.\n+\n+2003-04-10  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\tUpdate after mainline -> tree-ssa-branch merge.\n+\t* f95-lang.c (g95_mark_addressable): Update put_var_into_stack\n+\tcall.\n+\t(g95_init): Update for new lang_hooks definition.\n+\t(g95_post_options): New langhook.\n+\t(LANG_HOOK_POST_OPTIONS): Clear, then define to g95_post_options.\n+\t* scanner.c (g95_new_file): Comment update.\n+\n+2003-04-09  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* g95.h, lang-options.h: Add -Wimplicit-interface.\n+\t* options.c (g95_init_options, g95_parse_arg): Set it.\n+\t* interface.c (check_intents): Warn about call with implicit\n+\tinterface.\n+\t* resolve.c (resolve_unknown_f, resolve_unknown_s): Call\n+\tg95_procedure_use.\n+\n+2003-04-05  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_spread): Don't resole based on type.\n+\t* trans-intrinsic.c (g95_is_intrinsic_libcall): Add G95_ISYM_SPREAD.\n+\n+2003-03-29  Paul Brook  <paul@nowt.org>\n+\n+\t* iresolve.c (g95_resolve_pack): Don't bother resolving based on type.\n+\t(g95_resolve_unpack): Ditto.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_merge): New Function.\n+\t(g95_conv_intrinsic_function): Use it.  Remove PACK and UNPACK.\n+\t(g95_is_intrinsic_libcall): Add PACK and UNPACK.\n+\n+2003-03-25  Paul Brook  <paul@nowt.org>\n+\n+\t* arith.c (g95_unary_user, g95_user): Remove dead functions.\n+\t* arith.h: Ditto.\n+\t* array.c (g95_free_array_ref): Ditto.\n+\t* g95.h: Ditto.\n+\t* symbol.c (g95_use_derived_tree): Ditto.\n+\t* intrinsic.c (add_functions): Use simplification for SCALE.\n+\t* primary.c (g95_match_rvalue): Test sym, not symtree.\n+\n+2003-03-25  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (build_function_decl): Add parameter before it gets\n+\tturned into a constant.\n+\t* iresolve.c (g95_resolve_eoshift): Resolve to a useful name.\n+\t* trans-intrinsic.c (g95_is_intrinsic_libcall): Add G95_ISYM_EOSHIFT.\n+\t* trans-decl.c (g95_create_module_variable): Don't pushdecl constants.\n+\n+2003-03-22  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_conv_array_initializer): Allow scalar\n+\texpressions.\n+\t* trans-decl.c (g95_finish_var_decl): Result variables are not\n+\tmodule variables.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_transfer): New function.\n+\t(g95_conv_intrinsic_function): Use it.\n+\t* trans-types.h (g95_type_spec): Remove dead declaration.\n+\n+2003-03-21  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (g95_build_function_decl): Mark string parameters.\n+\n+2003-03-20  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (g95_build_function_decl): Put character length\n+\tparameters at the end of the function declaration.\n+\t* trans-expr.c (g95_conv_function_call): Ditto.\n+\t* trans-types.c (g95_get_function_type): Ditto.\n+\n+2003-03-20  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* resolve.c (resolve_formal_arglist): Don't impose intent for\n+\tprocedure arguments of pure functions.\n+\t(resolve_select): Remove redundant assignment.\n+\n+2003-03-19  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* arith.c (validate_logical), g95.h, options.c (g95_init_options):\n+\tRemove option l1.\n+\t* g95.h, intrinsic.c(g95_get_intrinsic_sub_symbol): Add const.\n+\t* iresolve.c(g95_resolve_cpu_time, g95_resolve_random_number): Add\n+\tconst.\n+\t* lang-options.h: Remove -finline-repack-arrays. Add -fg77-calls.\n+\tOrder list.\n+\t* symbol.c (g95_add_type): Fix typo in comment.\n+\n+\n+2003-03-16  Paul Brook  <paul@nowt.org>\n+\n+\t* dump-parse-tree.c (g95_show_code_node): Print resolved sym name.\n+\t* expr.c (g95_build_call): Remove.\n+\t* f95-lang.c (puchdecl_top_level): New function.\n+\t* g95.h (g95_code): Store resolved symbol, not just the name.\n+\t* intrinsic.c (g95_intrinsic_namespace): New global namespace.\n+\t(g95_intirinsic_init_1, g95_intrinsic_done_1): Use it.\n+\t(g95_get_intrinsic_sub_symbol): New function.\n+\t* iresolve.c (g95_resolve_cpu_time): Use it.\n+\t(g95_resolve_random_number): Ditto.\n+\t* resolve.c: Set code->resolved_sym instead of code->sub_name.\n+\t* trans-decl.c (g95_get_extern_function_decl): Give external decls\n+\tthe correct DECL_CONTEXT.  Add global symbold to the global scope.\n+\t* trans-stmt.c (g95_trans_code): Remove hacks now the fronted is\n+\tfixed.\n+\n+2003-03-16  Paul Brook  <paul@nowt.org>\n+\n+\t* g95.h (g95_option_t): Add g77_calls. Remove inline_repack_arrays.\n+\t* options.c (g95_parse_arg): Ditto.\n+\t* module.c (mio_symbol_attribute): Handle the always_explicit bit.\n+\t* resolve.c (resolve_formal_arglist): The always_explicit sould be set\n+\tfor the procedure, not the parameter.\n+\t* trans-array.c (g95_trans_g77_array): New function.\n+\t(g95_trans_assumed_size): Use it.\n+\t(g95_trans_dummy_array_bias): Ditto.\n+\t(g95_conv_array_parameter): Handle g77 arrays. Move existing body ...\n+\t(g95_conv_expr_descriptor): ... to here.  Update callers.\n+\t* trans-decl.c (g95_build_dummy_array_decl): Handle g77 arrays.\n+\t(g95_get_symbol_decl): Avoid processing g77 arrays multiple times.\n+\t* trans-expr.c (g95_conv_function_call): Handle g77 arrays.\n+\t* trans-intrinsic.c (g95_get_symbol_for_expr): Never use g77 arrays.\n+\t* trans-types.c (g95_is_nodesc_array): Handle g77 arrays.\n+\t(g95_sym_type): Ditto.\n+\n+2003-03-15  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_walk_elemental_function_args): Don't amputate the\n+\tfirst chain.\n+\t* trans-expr.c (g95_conv_function_call): Use the resolved symbol.\n+\n+2003-03-14  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_array_is_packed): Remove.\n+\t(g95_conv_array_base): Correctly handle all descriptorless cases.\n+\t(g95_conv_array_stride): Use descriptorless strides.\n+\t(g95_trans_dummy_array_bias): Don't always repack the array.\n+\t(g95_build_dummy_array_decl): Automatic dummy arrays are only partial\n+\tpacked.\n+\t* trans-types.c (g95_get_nodesc_array_type): Differentiate between\n+\tdummy and non-dummy arrays...\n+\t(g95_sym_type, g95_get_derived_type): ... like these.\n+\t(g95_get_array_type_bounds): Allow discontiguous arrays.\n+\n+2003-03-12  Paul Brook  <paul@nowt.org>\n+\n+\t* array.c (g95_resolve_array_spec): Fix comment.\n+\t* g95.h (symbol_attributes): New flag always_explicit.\n+\t* resolve.c (resolve_formal_arglist): Set it always_explicit.\n+\t* iresolve.c (g95_resolve_lbound, g95_resolve_ubound): Simplify.\n+\t* trans-array.c (g95_conv_descriptor_dimension): Remove dead assert.\n+\t(g95_trans_array_bounds): Allow assumed shape arrays.\n+\t(g95_trans_repack_array): Remove.\n+\t(g95_trans_dummy_array_bias): Rewite to use descriptorless arrays.\n+\t* trans-decl.c (g95_build_qualified_array): Only ignore absent\n+\tbounds for assumed size arrays.\n+\t(g95_build_dummy_array_decl): Use descriptorless arrays.\n+\t* trans-expr.c (g95_conv_expr_present): Allow descriptorless arrays.\n+\t(g95_trans_pointer_assign): Fix typo.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_function_args): Remove dead\n+\tcode.\n+\t(g95_conv_intrinsic_bound): Rewrite to handle descriptorless arrays.\n+\t* trans-types.c (g95_get_nodesc_array_type): Allow non-packed arrays.\n+\tAlso modify callers.\n+\t* trans-types.h (g95_get_nodesc_array_type): Modify prototype.\n+\n+2003-03-08  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_walk_elemental_functions): Don't reverse the SS.\n+\t(g95_conv_array_ubound): Provide dummy value for assumed size arrays.\n+\t* resolve.c (compare_spec_to_ref): Allow full array sections.\n+\n+2003-03-08  Paul Brook  <paul@nowt.org>\n+\n+\t* expr.c (g95_simplify_expr): Also simplify array index and\n+\tsubstring expressions.\n+\t* resolve.c (compare_spec_to_ref): Check for assumed size bounds.\n+\t* trans-array.c (g95_trans_array_bounds): New function.\n+\t(g95_trans_auto_array_allocation): Use it.\n+\t(g95_trans_assumed_size): Rewrite.\n+\t* trans-decl.c (gfor_fndecl_in_pack, gfor_fndecl_in_unpack): Declare.\n+\t(gfor_fndecl_repack): Remove.\n+\t(g95_build_qualified_array): Handle absent upper bounds.\n+\t(g95_build_dummy_array_decl): Assumed shape arrays are descriptorless.\n+\t(g95_get_symbol_decl): Update.\n+\t(g95_build_intrinsic_function_decls): Initialize new decls.\n+\t* trans.h (gfor_fndecl_in_pack, gfor_fndecl_in_unpack): Declare.\n+\t(gfor_fndecl_repack): Remove.\n+\t* trans-io.c (g95_build_io_library_fndecls): Correct prototypes.\n+\t* trans-types.c: (g95_build_array_type): Merge duplicated code..\n+\t(g95_get_nodesc_array_type): Handle absent bounds.\n+\t* trans-types.h (g95_get_nodesc_array_type): Declare.\n+\n+2003-03-04  Paul Brook  <paul@nowt.org>\n+\n+\t* f95-lang.c (DEF_FUNCTION_TYPE_VAR_3): Define before including\n+\tbuiltin-types.def.\n+\n+2003-03-02  Paul Brook  <paul@nowt.org>\n+\n+\t* options.c (g95_init_options): Drfault to 1.\n+\t(g95_pasrse_arg): Add -frepack-arrays, use strcmp.\n+\t* trans-array.c (g95_conv_array_data, g95_conv_array_base,\n+\tg95_conv_array_stride,g95_conv_array_lbound, g95_conv_array_ubound):\n+\tHandle non-constant size automatic arrays.\n+\t(g95_conv_section_upper_bound, g95_conv_section_startstride): Use\n+\tgeneric bound functions.\n+\t(g95_trans_auto_array_allocation): Don't create a descriptor.\n+\t(g95_trans_assumed_size): New function (broken).\n+\t(g95_trans_dummy_array_bias): Remove unused var.\n+\t* trans-array.h (g95_trans_assumed_size): Declare.\n+\t* trans-decl.c (create_index_var): New fuction.\n+\t(g95_build_qualified_array): New function.\n+\t(g95_get_symbol_decl): Use it.\n+\t(g95_trans_deferred_vars): Handle assumed shape seperately.\n+\t* trans-types.c (get_element_type): Handle heap allocated arrays.\n+\t(g95_is_nodesc_array): Include non-const size arrays.\n+\t(g95_get_nodesc_array_type): Ditto.\n+\n+2003-02-23  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_array_init_size): Should use stride, not size of\n+\tlast dimension.\n+\n+2003-02-18  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-expr.c (g95_trans_arrayfunc_assign): Nove elemental check\n+\tafter intrinsic function check.\n+\n+2003-02-18  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* io.c (match_io): Fix missing return value and remove useless\n+\tassignment.\n+\t* match.c (g95_match): Remove useless assignment.\n+\t* module.c (parse_string):  Remove useless post increment.\n+\t* simplify.c (g95_simplify_verify): Remove useless assignment.\n+\n+2003-02-15  Paul Brook  <paul@nowt.org>\n+\n+\t* expr.c (restricted_intrinsic): Handle bad values gracefully.\n+\t* g95.h (symbol_attribute): Add referenced member.\n+\t(g95_symbol): Add dummy_order member.\n+\t(g95_set_sym_referenced): Declare.\n+\t* match.c (g95_match_assignment, g95_match_call): Use it\n+\t* primary.c (match_actual_arg, g95_match_rvalue,\n+\tg95_match_variable): Ditto.\n+\t* symbol.c (next_dummy_order): New variable.\n+\t(g95_set_sym_referenced): New function.\n+\t(check_done): New function.\n+\t(g95_add_*): Use it.\n+\t* trans-decl.c: Make formatting conform to GCC standards.\n+\t(g95_defer_symbol_init): Add dummy variables in the right order.\n+\t(g95_get_symbol_decl): Only accept referenced variables.\n+\t(g95_create_module_variable): Module variables are always required.\n+\t(generatr_local_decls): New function.\n+\t(generate_local_vars): New function.\n+\t(g95_generate_function_code): Use it.\n+\n+2003-02-13  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-decl.c (g95_conv_struct_cons): Remove.\n+\t(g95_get_symbol_decl): Use g95_conv_expr for structure initializers.\n+\t* trans-expr.c (g95_conv_structure): New function.\n+\t(g95_conv_expr): Use it.\n+\n+2003-02-09  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_array_init_size): Don't evaluate the linit\n+\texpressions multiple times.\n+\t(g95_trans_auto_arry_allocation): Use pointer not tmp.\n+\n+2003-02-08  Paul Brook  <paul@nowt.org>\n+\n+\t* module.c (mio_symtree_ref): Declare as static.\n+\t(mio_expr): Remove dead code.\n+\t(read_module): Set the symtree link for fixups.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_round): Rename...\n+\t(build_round_expr): ... to this.\n+\t(g95_conv_intrinsic_aint): New function.\n+\t(g95_conv_intrinsic_function): Use it.\n+\n+2003-02-08  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_trans_array_constructor_value): Use the acutal\n+\toffset after modificaton, not the increment expression.\n+\t* dependency.c: Kill excess whitespace.\n+\n+2003-02-07  Sanjiv Gupta  <sanjivg@noida.hcltech.com>\n+\n+\t* dependency.h: Remove some function declarations.\n+\t* dependency.c (get_no_of_elements): Change this function not to\n+\treturn int.\n+\t* other: Add comments for all modified functions.\n+\n+2003-02-06  Paul Brook  <paul@nowt.org>\n+\n+\t* g95spec.c (lang_specific_functions): Fix initializer warning.\n+\t* dump-parse-tree.c (g95_show_expr): Use typespec instead of symtree\n+\tfor structure type names.\n+\t* trans-decl.c (g95_cons_structure_cons): New function.\n+\t(g95_get_symbol_decl): Use it.\n+\t* trans-expr.c (g95_conv_component_ref): Remove duplicate pointer\n+\treferencing code.\n+\n+2003-02-06  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* resolve.c (compare_cases): Add const to casts.\n+\n+2003-01-30  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* g95.h (g95_check_f): Change a1 to f1m.\n+\t* intrinsic.c (add_sym_1m, check_specific,\n+\tg95_intrinsic_func_interface): Use it.\n+\n+\t* module.c (init_pi_tree): Remove useless cast.\n+\t(fp2): Fix argument type.\n+\n+\t* parse.c (parse_select_block): Add comment.\n+\n+2003-02-05  Toon Moene  <toon@moene.indiv.nluug.nl>\n+\n+\t* lang-options.h: Fix warning involving C90 concatenated\n+\tstrings.\n+\n+2003-02-06  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\t    Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* io.c (format_asterisk): Complete initializer to kill warning.\n+\t* arith.c (DEF_G95_INTEGER_KIND, DEF_G95_LOGICAL_KIND,\n+\tDEF_G95_REAL_KIND, MPZ_NULL, MPF_NULL): New #defines.\n+\t(g95_integer_kinds, g95_logical_kinds, g95_real_kinds): Use the\n+\tnew defines to complete initializers.  Kills all warnings.\n+\n+\t* Make-lang.in: Comment cleanup.\n+\n+2003-02-05  Paul Brook  <paul@nowt.org>\n+\n+\t* array.c (g95_free_constructor): Handle NULL expressions.\n+\t* resolve.c (resolve_structure_cons): Ditto.\n+\t* decl.c (g95_match_null): New Function.\n+\t(variable_decl): Use it.\n+\t* module.c (mio_expr): Don't bother saving symtree for EXPR_STRUCTURE.\n+\t* primary.c (g95_match_runtime): Don't use symtree for EXPR_STRUCTURE.\n+\t* trans-types.c (g95_set_decl_attributes): Remove empty function.\n+\n+2003-02-05  Paul Brook  <paul@nowt.org>\n+\n+\t* trans.h (build1_v): New macro.\n+\t(build_v): Remove pointless and incorrect prototype.\n+\t* various: Use build1_v for GOTO_EXPR and LABEL_EXPRs.\n+\t* f95-lang.c (g95_init_builtin_decls): DEF_BUILTIN takes 10 args.\n+\n+2003-02-01  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-lang.in (F95_OBJS): Remove one more dead file.\n+\n+2003-02-01  Paul Brook  <paul@nowt.org>\n+\n+\t* lang-specs.h: Don't pass -ffixed-form to the linker.\n+\t* trans-decl.c (g95_generate_function_code): Clear saved decl chain.\n+\n+2003-02-01  Paul Brook  <paul@nowt.org>\n+\n+\t* Make-lang.in (F95_OBJS): Remove dead files.\n+\t* trans-array.c (g95_array_init_size): Do the right thing when\n+\tubound=NULL.\n+\t* trans-decl.c (g95_generate_function_code): Initialize deffered\n+\tsymbol list before translating contained subroutines.\n+\t* trans-expr.c (g95_conv_expr, g95_conv_expr_reference): Substitute\n+\tscalar invariant values\there...\n+\t(g95_conv_variable, g95_conv_function_call): ... instead of here ...\n+\t* trans-intrinsic.c (g95_conv_intrinsic_function_args): .. and here.\n+\n+2003-01-29  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_add_loop_code): Put pre code in the right block.\n+\t(g95_walk_elemental_function_args): Reverse chains before adding.\n+\t(g95_reverse_ss): Move about a bit.\n+\t* trans-expr.c (g95_conv_function_call): Handle scalar intrinsic\n+\tfunction arguments.\n+\n+2003-01-28  Paul Brook  <paul@nowt.org>\n+\n+\t* intrinsic.c (resolve_intrinsic): Use correct union member.\n+\t* trans-array.c (g95_trans_dummy_array_bias): Don't touch absent\n+\tparameters.\n+\t* trans-decl.c (g95_get_symbol_decl): Don't translate initializers for\n+\tuse associated variables.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_present): Move body ...\n+\t* trans-expr.c (g95_conv_expr_present): ... to here.\n+\t* trans.h: Declare it.\n+\t* trans-types.c (g95_sym_type): Assume subroutine if not specified.\n+\n+2003-01-28  Arnaud Desitter  <arnaud.desitter@geography.oxford.ac.uk>\n+\n+\t* array.c (expand_iterator): Suppress useless assignment.\n+\t* decl.c (match_char_spec): Ditto.\n+\t* io.c (match_io_iterator): Ditto.\n+\t* primary.c (match_real_constant): Ditto.\n+\t* interface.c (fold_unary, g95_free_interface, g95_extend_expr):\n+\tDitto.  Also, use g95_intrinsic_op not int for intrinsic operators.\n+\t* matchexp.c (match_add_operand, match_level_5): Likewise.\n+\t* module.c (parse_atom, find_enum): Likewise.\n+\t* resolve.c: move #include <string.h>\n+\t(resolve_select): Fix serious typo.\n+\n+2003-01-28  Steven Bosscher  <s.bosscher@student.tudelft.n>\n+\n+\t* Make-lang.in: Don't build with broken tree-ssa-pre.\n+\n+2003-01-28  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* resolve.c (resolve_index): Add a TODO.\n+\t* symbol.c: Remove useless \"#include <ctype.h>\".\n+\n+2003-01-27  Paul Brook  <paul@nowt.org>\n+\n+\t* check.c (check_rest): Allow different type kinds as an extension.\n+\t* g95.h (g95_resolve_f): Add f1m.\n+\t* intrinsic.c (add_sym_1m, resolve_intrinsic): Use it.\n+\t* intrinsic.h: Chenge prototypes for MIN and MAX.\n+\t* iresolve.c (g95_resolve_minmax): New function.\n+\t(g95_resolve_min, g95_resolve_max): Use it.\n+\t* trans-intrinsic.c (g95_trans_intrinsic_minmax): Only evaluate\n+\targuments once.\n+\t(g95_conv_intrinsic_present): Fix logic.\n+\n+2003-01-27  Steven Bossche  <s.bosscher@student.tudelft.nl>\n+\n+\t* g95.h (g95_case): Don't be a tree, be a double linked list.\n+\t* match.c (match_case_selector): Remove redundant semantics check.\n+\tClean up a few goto's to make it a tiny little bit faster.\n+\t* resolve.c (case_tree): Die.\n+\t(compare_cases): Accept and compare unbounded cases too.\n+\t(check_case_overlap): Don't build a tree.  Instead, merge-sort the\n+\twhole list of g95_cases passed from resolve_select.\n+\t(sane_logical_select): Die.\n+\t(check_case_expr): Return FAILURE if a CASE label is of the wrong\n+\ttype kind.\n+\t(resolve_select): Fixup case expression for computed GOTOs, put it\n+\tin expr, not expr2, for easier handing in the parse tree dumper and\n+\tthe code generator.  Rewrite the rest of the function: Kill\n+\tunreachable case labels and unreachable case blocks.\n+\t* dump-parse-tree.c (g95_show_code_node): Always dump expr for\n+\tan EXEC_SELECT, not case2 anymore.\n+\t* trans-const.c (g95_conv_constant_to_tree): New function.\n+\t(g95_conv_constant): Use it.\n+\t* trans-const.h: Declare prototype for the new function.\n+\t* trans-stmt.c (g95_trans_integer_select, g95_trans_logical_select,\n+\tg95_trans_character_select): New static functions.\n+\t(g95_trans_select): Rewrite.\n+\n+2003-01-26  Paul Brook  <paul@nowt.org>\n+\n+\t* intrinsic.c (add_fnctions): Properly add dreal.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_present): New function.\n+\t(g95_conv_intrinsic_function): Use it.\n+\t* trans-io.c (build_dt): Abort on internal files (unimplemented).\n+\n+2003-01-26  Paul Brook  <paul@nowt.org>\n+\n+\tWidespread changes to the handling of symbols in expressions.  These\n+\tare now linked via g95_symtree nodes.\n+\t* parse.c (g95_fixup_sibling symbols): New function.\n+\t(parse_contained): Use it.\n+\t* g95.h (symbol_attribute): Add contained.  Indicates a symbol is a\n+\tcontained procedure that has bee correctly fixed up.\n+\t(g95_code, g95_expr): Point to a g95_symtree, not a g95_symbol.\n+\n+2003-01-24  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_walk_expr): Function result attributes are in\n+\tsym->result.\n+\t* trans-expr.c (g95_conv_function_call,\n+\tg95_trans_arrayfunc_assign): Ditto.\n+\t* trans-decl.c (g95_get_symbol_for_expr): Set sym->result.\n+\n+2003-01-23  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* expr.c (check_restricted): Fix error message.\n+\t* symbol.c (free_st_labels): Plug memleak.\n+\n+2003-01-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* arith.c (reduce_unary, reduce_binary_ac, reduce_binary_ca,\n+\treduce_binary_aa, reduce_binary, eval_intrinsic,\n+\teval_intrinsic_f2): Use typesafe prototypes for eval functions.\n+\t* g95.h (g95_check_f, g95_simplify_f, g95_resolve_f): New unions\n+\tfor typesafe intrinsics helper functions.\n+\t(g95_intrinsic_sym): Use them.\n+\t* intrinsic.c (do_check, add_sym, add_sym_0, add_sym_1,\n+\tadd_sym_1s, add_sym_1m, add_sym_2, add_sym_3, add_sym_4,\n+\tadd_sym_5, add_conv, resolve_intrinsic, do_simplify,\n+\tcheck_specific, g95_intrinsic_func_interface,\n+\tg95_intrinsic_sub_interface): Adjust all calls to intrinsics\n+\thelper functions.\n+\t* trans-decl.c (g95_get_extern_function_decl): Likewise.\n+\t* Make-lang.in: Don't disable warnings for strict prototypes\n+\tany longer, everything is typesafe now.\n+\n+2003-01-22  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* bbt.c (duplicate_node): Make static.\n+\t* module.c (module_name): Make static.\n+\t* scanner.c (include_dirs): Make static.\n+\n+2003-01-20  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tHard coded _gfor_'s should not show up anymore.\n+\t* g95.h (PREFIX): New macro.\n+\t* iresolve.c (g95_resolve_cpu_time): Use PREFIX, not\n+\thard-coded \"_gfor\".\n+\t(g95_resolve_random_number): Likewise.\n+\t* trans-decl.c (g95_build_intrinsic_function_decls): Likewise.\n+\t* trans-io.c: Remove 'prefix' macro.  Replace all uses with\n+\tthe new PREFIX macro from g95.h.\n+\n+2003-01-20  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tThe troubles of forking... Andy implemented this just now too.\n+\tLet's stick to that and keep the trees close.\n+\t* g95.h (g95_st_label): 'format' member is now a g95_expr.\n+\t* io.c: Revert previous changes.\n+\t(g95_match_format): Match the format string as a character\n+\tliteral expression.\n+\t* match.h (g95_statement_label): Declare external.\n+\t* parse.c: Revert previous changes.\n+\t* symbol.c (g95_free_st_label): Free a g95_expr instead\n+\tif a 'char *'.\n+\t* trans-io.c: Revert previous changes.\n+\t(build_dt): Use set_string to set the format string.\n+\n+2003-01-20  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* io.c (format_string): Make non-static.\n+\t(g95_match_format): Remember the format string.\n+\t(terminate_io): Add I/O termination for empty I/O lists.\n+\t* match.h: Declare external format_string.\n+\t* parse.c (check_statement_label): Attack the format string\n+\tto a format label for FORMAT statements.\n+\t* trans-io.c (g95_add_field): Define prefix macro.  Replace\n+\tall uses of PREFIX define with a use of this macro.\n+\t(build_dt): Implement formatted I/O for format labels.\n+\n+2003-01-20  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* lang-options.h: Kill \"-std=F\".\n+\t* options.c: Remove unimplemented \"-std=F\".  Modify\n+\tweb address.\n+\t* misc.c (g95_terminal_width): New function.\n+\t* error.c (g95_error_init_1): Use g95_terminal_width.\n+\t* g95.h: Add prototype for g95_terminal_width, remove\n+\tfmode flag.\n+\n+2003-01-19  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-lang.in: Fix typo.\n+\n+2003-01-18  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* g95.h (struct g95_case): Remove unused cruft, new member\n+\t'where' to keep track of the locus of the default case.\n+\t* match.c (g95_match_case): Add locus to the current case.\n+\t(match_case_selector): Likewise.\n+\t* parse.c (parse_select_block): Move semantics check for\n+\tmultiple DEFAULT cases out of here to...\n+\t* resolve.c (check_case_overlap): ...here.  Return sooner\n+\twhen possible.\n+\t(check_case_expr): Take two g95_cases now, use to sure the\n+\texpression kinds are the same.\n+\t(resolve_select): Cleanup.\n+\n+2003-01-18  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-io.c: Fix typos in ported IO work (set_fla[tg]).\n+\t* trans-decl.c (g95_set_symbol_decl): Handle non-array result\n+\tvariables.\n+\t(g95_get_extern_function_decl): Put decls in the correct context.\n+\n+2003-01-18  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* trans-io.c: Port changes from Andy to set ERR flag.\n+\n+2003-01-17  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Add various comments.\n+\t(g95_ss_terminator): Declare as const.\n+\t(g95_walk_expr): Remove first parameter and update all callers.\n+\t(g95_walk_op_expr): Initialize scalar SS properly.\n+\t* trans-array.h (g95_walk_expr): Update prototype.\n+\t* trans-expr.c: Update for new g95_walk_expr.\n+\t* trans-intrinsic.c: Ditto.\n+\t* trans-io.c: Ditto.\n+\t* trans.h: Various comments for SS chains.\n+\n+2003-01-17  Paul Brook  <paul@nowt.org>\n+\n+\t* intrinsic.h (g95_generic_isym_id): Add G95_ISYM_S?_KIND, SPACING\n+\tand RRSPACING.\n+\t* intrinsic.c (add_functions): Use them.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_function): Ditto.\n+\t* trans-expr.c (g95_conv_expr_lhs): Abort on impossible error.\n+\n+2003-01-17  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tFallout of a small merge conflict:\n+\t* intrinsic.c: Un-revert lost patch (G95_ISYM_SCALE).\n+\n+2003-01-17  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* initrinsic.c: New add_sym_* functions for strong typing.\n+\t(add_conv): Make prototype strict.\n+\t* dump-parse-tree.c, dependency.c: Include config.h\n+\t* resolve.c, trans-io.c: Fix typos.\n+\n+2003-01-17  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* dump-parse-tree.c (g95_show_code_node): Show the\n+\tcondition for a computed GOTO that was transformed\n+\tto a SELECT CASE construct.\n+\t* resolve.c (check_case_overlap): Revert previous switch\n+\tto treaps, it was too slow and didn't catch all trouble.\n+\t(resolve_symbol): Be more flexible about module procedures.\n+\t* symbol.c (check_conflict): Point to relevant section in\n+\tthe standard for dubious conflict.  Allow procedure\n+\tdummy arguments to be optional again.\n+\t* trans-io (add_field): Rename to g95_add_field.  Change\n+\tall callers.\n+\t* trans-stmt (trans_select): Handle unbounded cases for\n+\tinteger SELECT CASE constructs.  Fix/add more comment.\n+\n+2003-01-17  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* g95.h: Uses GCC's function attribute macros.\n+\t* error.c, module.c, parse.c, g95.h: More function attributes.\n+\n+2003-01-16  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\tForgot a file...\n+\t* trans-decl.c (get_label_decl): Use TREE_LINENO instead\n+\tof DECL_SOURCE_LINE, and TREE_FILENAME instead of\n+\tDECL_SOURCE_FILE.\n+\n+2003-01-16  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* f95-lang.c (pushdecl): Use TREE_LINENO instead of\n+\tDECL_SOURCE_LINE.\n+\t* trans.c (g95_trans_code): Use annotate_all_with_file_line\n+\tinstead of nowdead wrap_all_with_wfl.\n+\n+2003-01-14  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* parse.c (g95_parse_file): In verbose mode, dump the parse tree\n+\tbefore generating code, so we can still see it even if the code\n+\tgeneration phase dies.\n+\n+2003-01-14  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* decl.c (build_sym): Split out initialization expression parts...\n+\t(add_init_expr_to_sym): ...to here.\n+\t(variable_decl): Add the symbol following an attribute list to the\n+\tsymbol tree before parsing the optional initialization expression\n+\tif the symbol is not of a derived type.\n+\t* primary.c (g95_match_rvalue): Don't assume a symbol always has\n+\ta value if it is a PARAMETER.\n+\n+2003-01-14  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* misc.c: Don't #include <mcheck.h>\n+\t* module.c: Ditto.  Kill uses of mtrace, muntrace.  If there\n+\tever was a glibc bug, then either this was never reported to\n+\tglibc people, or it has been fixed for so long that there's\n+\tno information you can find about it, anywhere.\n+\n+2003-01-14  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tFix warnings:\n+\t* module.c (attr_bits, bt_types, array_spec_types):\n+\tSwitch 'const' and 'static'.\n+\t* iresolve.c (g95_resolve_reshape): Make __resolve0 non-'const'.\n+\n+\tGNU'ify source code:\n+\t* trans-io.c: Numerous fixes, one fixed warning and a few\n+\tTODO markers so that we don't forget about them.\n+\n+2003-01-13  Paul Brook  <paul@nowt.org>\n+\n+\t* intrinsic.c (add_functions): Add G95_ISYM_SCALE.\n+\t* intrinsic.h (g95_generic_isym_id): Remove bogus G95_ISYM_ANINIT.\n+\tAdd G95_ISYM_SCALE.\n+\t* trans-intrinsic.c (g95_conv_intrinsic_function): Ditto\n+\t* match.c (g95_match_stop): Fix dumb == -> != error.\n+\n+2003-01-13  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* dump-parse-tree.c (show_indent): Add line breaks.  This\n+\twhole dumping process needs cleanups.\n+\t* f95-lang.c (g95_mark_addressable): Fix prototype to match\n+\tthe langhook.  Fix 'return's accordingly.\n+\t* g95-support.h: Adjust prototype.\n+\t* g95.h: Add 'no_backend' member to 'g95_option_t' struct.\n+\t* lang-options.h: Add '-fsyntax-only'.\n+\t* options.c (g95_init_options): Init 'no_backend'.\n+\t(g95_parse_arg): Deal with '-fsyntax-only'.\n+\t* parse.c (g95_parse_file): Do not generate code if 'no_backend'\n+\tis set.\n+\n+2003-01-13  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\tPatch from Arnaud\n+\t* resolve.c (resolve_symbol): Assumed shape arrays must be dummy\n+\targuments.  Also make sure that if a symbol is marked INTRINSIC,\n+\tan intrinsic with the symbol's name actually exists.\n+\t(check_conflict): Make EXTERNAL and DIMENSION attributes conflict.\n+\tDo not allow PROCEDURES to have the SAVE, POINTER, TARGET,\n+\tALLOCATABLE, RESULT, IN_NAMESPACE, OPTIONAL or FUNCTION attribute.\n+\n+2003-01-13  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* resolve.c (resolve_contained_functions): Fix condition, don't\n+\tthrow internal_error if a child namespace has no name.  Apparently\n+\tthis can be the case?\n+\n+2003-01-11  Paul Brook  <paul@nowt.org>\n+\n+\tPort changes from Andy's tree:\n+\t* g95.h (g95_code): Add stop_code.\n+\t* match.c (g95_match_stop): Detter syntax checking.\n+\t* resolve.c (resolve_generic_f0): Return match type.\n+\t(resolve_generic_f): Remove dead/duplicated code.\n+\t(resolve_specific_f): Ditto.\n+\t* dump-parse-tree.c (g95_show_code_node): Handle new STOP format.\n+\t* trans-decl.c (gfor_fndel_stop_*): New fndecl nodes.\n+\t* trans-stmt.c (g95_trans_stop): Handle new STOP format.\n+\n+2003-01-11  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c: Various documentation/comment changes.\n+\t* trans-stmt.c: Ditto.\n+\n+\n+2003-01-10  Paul Brook  <paul@nowt.org>\n+\n+\t* options.c/h: Add -fdump-parse-tree as alias of -v.\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* dump-parse-tree.c (g95_show_namespace): Fixed another\n+\ttypo.  Sorry, it's Friday...\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\tSpotted by Tobi:\n+\t* trans-array.c, trans-array.h, trans.c, trans-const.c,\n+\ttrans-const.h, trans-decl.c, trans-expr.c, trans.h\n+\ttrans-intrinsic.c, trans-io.c, trans-stmt.c, trans-stmt.h\n+\ttrans-types.c: Fix bogus copyright years, add 2003.\n+\t* trans-types.h: Give copyright header.\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* dump-parse-tree.c (g95_show_namespace): Fixed typo.\n+\t* expr.c, options.c, scanner.c: Add some more 'const' markers.\n+\t* intrinsic.c: Some constant strings moved to read-only memory.\n+\t* io.c (format_asterisk): Move to...\n+\t* g95.h: ...here.\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* dump-parse-tree.c (g95_show_namespace): Dump implicit\n+\ttypes for ranges instead of per-letter.  Indent the\n+\t'CONTAINS' just like everything else.\n+\t* resolve.c (resolve_contained_functions): Clarify comment.\n+\tExplain non-obvious conditional expression.  Improve\n+\tdiagnostics if tyoe cannot be resolved.\n+\tPort semi-fix from Andy's tree:\n+\t(was_declared): Move up before first use.\n+\t(generic_sym, specific_sym): New functions.  Code moved\n+\tout if procedure_kind.\n+\t(procedure_kind): Simplify using new functions.\n+\t(resolve_generic_f): Make sure the functions we find in\n+\ta parent namespace is generic.\n+\t(resolve_specific_f): Ditto for specific functions.\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* trans-stmt.c, trans.c: Fix some code style issues. Add\n+\tsome more comment (but still not enough!).\n+\n+2003-01-10  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* symbol.c (flavors, procedures, intents, acces_types,\n+\taccess_types, ifsrc_types): Make const.\n+\t* misc.c (g95_string2code): Make 'm' param 'const'.\n+\t* module.c (find_enum, write_atom, mio_name): Make\n+\t'm' param 'const'.\n+\t(attr_bits, bt_types, array_spec_types, array_ref_types,\n+\tref_types, expr_types): Make const.\n+\t* g95.h: Adjust external decls.\n+\n+2003-01-09  Paul Brook  <paul@nowt.org>\n+\n+\t* Testsuite: Add a load of new cases.\n+\n+2003-01-08  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-file.in: Add dependency on back end header files;\n+\ta parallel build should work now.\n+\t* f95-lang-c (lang_identifier): Remove bogus comment.\n+\t(g95_be_parse_file): Fix prototype.\n+\t(g95_init): Make static.\n+\t(g95_finish): Make static.\n+\t* error.c (g95_syntax_error): Kill. Make define in...\n+\t* g95.h (g95_syntax_error): Define.\n+\t(g95.options): Make 'source' member 'const'.\n+\t* interface.c (g95_match_interface): Explain\n+\thard-to-read condition.\n+\t(g95_match_end_interface): Ditto.\n+\t* trans_const.c (g95_build_string_const): Make 's' parameter\n+\t'const'.\n+\t* trans_const.h: Adjust protoype accordingly.\n+\t* trans-decl.c: Include tree-dump.h\n+\t(g95_generate_function_code): Build fixes for recent changes\n+\tin the tree-ssa branch.\n+\n+2003-01-08  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* format.c: Kill, move code from here...\n+\t* io.c: ...to here.\n+\t* Make-lang.in: Adjust.\n+\t* MANIFEST: Ditto.\n+\t* match.h: Ditto.\n+\t* BUGS: Mention where to submit bugs.  Move old content...\n+\t* TODO: ...to here.  New file.\n+\n+2003-01-08  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\tFix most warnings, and suppress the ones we can't fix for now.\n+\t* Make-lang.in: Suppress warnings about bad proto's in g95.h,\n+\tthese warnings just clutter the screen and there's not much\n+\twe can do about them for now anyway.\n+\t* check.c, iresolve.c: Mark unused function parameters.\n+\t* dump-parse-tree.c (g95_show_array_spec): Punt on AS_UNKNOWN,\n+\tthey should be resolved before they get here.\n+\t* error.c: Remove unused FILE *status_out.\n+\t* f95-lang.c (g95_init): Remove bogus cast.\n+\t* Many files: Make things 'const' where required.\n+\t* g95.h: Fix prototypes for all modified functions above.\n+\t(g95_options): Remove 'object' member.\n+\n+2003-01-07  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-file.in: Cleanup bogus targets.  Add more comment.\n+\t* lang-options.h: New option '-w'.\n+\t* g95.h: add no_options field to struct g95_options.\n+\t* options.c (g95_init_options): Default no_warnings to off.\n+\t(g95_parse_arg): Recognise the '-w' switch and its alias,\n+\t'-fno-warnings'.\n+\t* error.c (g95_warning, g95_warning_now): Don't emit warning if\n+\tno_warning option is set.\n+\t* iresolve.c (g95_resolve_shape): Fix warning.\n+\n+2003-01-07  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* primary.c (g95_next_string_char): Rename next_string_char, and\n+\tmake static.  Adjust callers accordingly.\n+\t* resolve.c (resolve_generic_f0): Return try, not match.  Adjust\n+\tcallers accordingly.\n+\t* g95.h: Split out all g95_match* functions to...\n+\t* match.h: ...here. New file.\n+\t* array.c, decl.c, expr.c, format.c, interface.c, io.c, match.c,\n+\tmatchexp.c, module.c, parse.c, primary.c: Inlcude match.h\n+\n+2003-01-07  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* symbol.c (g95_clear_new_implicit, g95_add_new_implicit_range,\n+\tg95_merge_new_implicit): New functions.\n+\t(g95_match_implicit_none, g95_match_implicit): Move from here...\n+\t* match.c (g95_match_implicit_none, g95_match_implicit): ... to here.\n+\tModify to use the new functions in symbol.c.\n+\t* g95.h: Add and move prototypes.\n+\n+2003-01-06  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* bbt.c (insert): Use a typedef'ed compare_fn prototype for the\n+\tnode compare function.\n+\t(g95_insert_bbt): Likewise.\n+\t(g95_insert_bbt_with_overlap): Likewise.\n+\t(g95_delete_bbt): Likewise.\n+\t(delete_treap): Likewise. Also fix a potential bug when calling it.\n+\t* module.c (compare_pointers): Change proto to compare_fn.\n+\t(compare_integers): Likewise.\n+\t(compare_true_names): Likewise.\n+\t(find_true_name): Adjust call to compare_true_names to match proto.\n+\t(require_atom, write_atom, mio_name): Fix 'const' warnings.\n+\t(init_pi_tree): Make compare a compare_fn instead of (int *).\n+\t* resolve.c (compare_cases): Change proto to compare_fn.\n+\t* symbol.c (g95_compare_symtree): Change proto to compare_fn, make\n+\tit static, and rename to compare_symtree.\n+\t(delete_symtree, g95_undo_symbols, g95_new_symtree): Use renamed\n+\tfunction.\n+\t* g95.h: Kill g95_compare_symtree prototype. Adjust prototypes\n+\tof g95_insert_bbt, g95_insert_bbt_with_overlap, and g95_delete_bbt.\n+\n+2003-01-06  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\t* Make-lang.in: Fix spaces/tabs issues from previous patch.\n+\t* patch.options: Blow away Paul's checkin mistake :-)\n+\t* io.c (terminate_io): Fix memory leak (Arnaud).\n+\n+2003-01-06  Steven Bosscher  <s.bosscher@student.tudelft.nl>\n+\n+\t* Make-lang.in: Teach about building DVI, info manual.\n+\t* g95.texi: New file.\n+\n+2003-01-02  Paul Brook  <paul@nowt.org>\n+\n+\t* trans-array.c (g95_reverse_ss): Make static and don't use.\n+\t(g95_conv_ss_descriptor): Don't use g95_loopinfo\n+\t(g95_conv_array_parameters): Modify for pointer assignments.\n+\t(g95_walk_subexpr): New function.\n+\t(g95_walk_expr*): Use it.\n+\t* trans-array.h (g95_reverse_ss): Remove prototype.\n+\t* trans-expr.c (g95_trans_pointer_assign): Implement.\n+\t(Many): Set se.want_pointer before calling g95_conv_array_parameter.\n+\t* trans-intrinsic.c: Sync with scalarizer changes.\n+\t* trans-io.c: Ditto."}, {"sha": "209ff5a88df8a3af847a98f427bab33654c44ae3", "filename": "gcc/fortran/ChangeLog-2004", "status": "added", "additions": 2846, "deletions": 0, "changes": 2846, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2004", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2004", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2004?ref=5873154d20d44a71135a99c8a92f8389a3ce0bb5"}, {"sha": "2a0f26dfdbc3fd74a02965636f644d0813447642", "filename": "gcc/fortran/ChangeLog-2005", "status": "added", "additions": 3723, "deletions": 0, "changes": 3723, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2005", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5873154d20d44a71135a99c8a92f8389a3ce0bb5/gcc%2Ffortran%2FChangeLog-2005", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog-2005?ref=5873154d20d44a71135a99c8a92f8389a3ce0bb5"}]}