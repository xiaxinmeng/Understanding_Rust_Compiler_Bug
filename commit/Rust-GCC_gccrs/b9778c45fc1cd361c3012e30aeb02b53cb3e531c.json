{"sha": "b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk3NzhjNDVmYzFjZDM2MWMzMDEyZTMwYWViMDJiNTNjYjNlNTMxYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-05-27T11:34:35Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-05-27T11:34:35Z"}, "message": "ada-builtin-types.def: New file.\n\n\t* gcc-interface/ada-builtin-types.def: New file.\n\t* gcc-interface/ada-builtins.def: Likewise.\n\t* gcc-interface/ada-tree.h (BUILT_IN_LIKELY): New macro.\n\t(BUILT_IN_UNLIKELY): Likewise.\n\t* gcc-interface/trans.c (independent_iterations_p): Initialize the\n\tauto-vector to 16 elements.\n\t(Call_to_gnu): Remove local variable and change the vector of actual\n\tparameters to an auto-vector.  Do not convert actual parameters to\n\tthe argument type for front-end built-in functions.  Add support for\n\tfront-end built-in functions.\n\t(build_noreturn_cond): Use internal instead of built-in function.\n\t* gcc-interface/utils.c (c_builtin_type): Include ada-builtin-types.def\n\t(install_builtin_function_types): Likewise.\n\t(install_builtin_functions): Include ada-builtins.def first.\n\nFrom-SVN: r271658", "tree": {"sha": "2727797e25c51e698f4e66bd2459562c7f4b288a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2727797e25c51e698f4e66bd2459562c7f4b288a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/comments", "author": null, "committer": null, "parents": [{"sha": "b4c056d2df1264bad4f837b4ec743461f68edff1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c056d2df1264bad4f837b4ec743461f68edff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c056d2df1264bad4f837b4ec743461f68edff1"}], "stats": {"total": 211, "additions": 188, "deletions": 23}, "files": [{"sha": "82fb6e56363cc4d88f9df936882bfa34c5cc2614", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -1,3 +1,20 @@\n+2019-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/ada-builtin-types.def: New file.\n+\t* gcc-interface/ada-builtins.def: Likewise.\n+\t* gcc-interface/ada-tree.h (BUILT_IN_LIKELY): New macro.\n+\t(BUILT_IN_UNLIKELY): Likewise.\n+\t* gcc-interface/trans.c (independent_iterations_p): Initialize the\n+\tauto-vector to 16 elements.\n+\t(Call_to_gnu): Remove local variable and change the vector of actual\n+\tparameters to an auto-vector.  Do not convert actual parameters to\n+\tthe argument type for front-end built-in functions.  Add support for\n+\tfront-end built-in functions.\n+\t(build_noreturn_cond): Use internal instead of built-in function.\n+\t* gcc-interface/utils.c (c_builtin_type): Include ada-builtin-types.def\n+\t(install_builtin_function_types): Likewise.\n+\t(install_builtin_functions): Include ada-builtins.def first.\n+\n 2019-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (maybe_pad_type): Issue the warning for the"}, {"sha": "f00845b5f564f88b4089f7ad7720c85a0ccb0099", "filename": "gcc/ada/gcc-interface/ada-builtin-types.def", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-builtin-types.def?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -0,0 +1,25 @@\n+/* This file contains the type definitions for the builtins exclusively\n+   used in the GNU Ada compiler.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* See builtin-types.def for details.  */\n+\n+DEF_FUNCTION_TYPE_1 (BT_FN_BOOL_BOOL, BT_BOOL, BT_BOOL)\n+DEF_FUNCTION_TYPE_2 (BT_FN_BOOL_BOOL_BOOL, BT_BOOL, BT_BOOL, BT_BOOL)"}, {"sha": "dcdc4d91891035910cb9d21c8aef6547df459820", "filename": "gcc/ada/gcc-interface/ada-builtins.def", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-builtins.def?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -0,0 +1,30 @@\n+/* This file contains the definitions for the builtins exclusively used\n+   in the GNU Ada compiler.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Before including this file, you should define a macro:\n+\n+     DEF_ADA_BUILTIN (ENUM, NAME, TYPE, ATTRS)\n+\n+   See builtins.def for details.  */\n+\n+DEF_ADA_BUILTIN        (BUILT_IN_EXPECT, \"expect\", BT_FN_BOOL_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_ADA_BUILTIN        (BUILT_IN_LIKELY, \"likely\", BT_FN_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)\n+DEF_ADA_BUILTIN        (BUILT_IN_UNLIKELY, \"unlikely\", BT_FN_BOOL_BOOL, ATTR_CONST_NOTHROW_LEAF_LIST)"}, {"sha": "2029b7c1a5275cbe1c12cb350e5a427a9b96a545", "filename": "gcc/ada/gcc-interface/ada-tree.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Fada-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fada-tree.h?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                              C Header File                               *\n  *                                                                          *\n- *          Copyright (C) 1992-2018, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2019, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -582,3 +582,8 @@ do {\t\t\t\t\t\t   \\\n \n #define EXIT_STMT_COND(NODE)     TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 0)\n #define EXIT_STMT_LABEL(NODE)    TREE_OPERAND_CHECK_CODE (NODE, EXIT_STMT, 1)\n+\n+/* Small kludge to be able to define Ada built-in functions locally.\n+   We overload them on top of the HSAIL/BRIG builtin functions.  */\n+#define BUILT_IN_LIKELY   BUILT_IN_HSAIL_WORKITEMABSID\n+#define BUILT_IN_UNLIKELY BUILT_IN_HSAIL_GRIDSIZE"}, {"sha": "59c4c07a319b472ce2b57e58b5cf7c685096b796", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -3307,7 +3307,7 @@ independent_iterations_p (tree stmt_list)\n {\n   tree_stmt_iterator tsi;\n   bitmap params = BITMAP_GGC_ALLOC();\n-  auto_vec<tree> rhs;\n+  auto_vec<tree, 16> rhs;\n   tree iter;\n   int i;\n \n@@ -5029,8 +5029,10 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n   tree gnu_subprog_type = TREE_TYPE (gnu_subprog);\n   /* The return type of the FUNCTION_TYPE.  */\n   tree gnu_result_type = TREE_TYPE (gnu_subprog_type);\n-  tree gnu_subprog_addr = build_unary_op (ADDR_EXPR, NULL_TREE, gnu_subprog);\n-  vec<tree, va_gc> *gnu_actual_vec = NULL;\n+  const bool frontend_builtin\n+    = (TREE_CODE (gnu_subprog) == FUNCTION_DECL\n+       && DECL_BUILT_IN_CLASS (gnu_subprog) == BUILT_IN_FRONTEND);\n+  auto_vec<tree, 16> gnu_actual_vec;\n   tree gnu_name_list = NULL_TREE;\n   tree gnu_stmt_list = NULL_TREE;\n   tree gnu_after_list = NULL_TREE;\n@@ -5487,16 +5489,56 @@ Call_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, tree gnu_target,\n \t\t\t\t     build_int_cst (type_for_size, 0),\n \t\t\t\t     false);\n \t    }\n-\t  else\n+\n+\t  /* If this is a front-end built-in function, there is no need to\n+\t     convert to the type used to pass the argument.  */\n+\t  else if (!frontend_builtin)\n \t    gnu_actual = convert (DECL_ARG_TYPE (gnu_formal), gnu_actual);\n \t}\n \n-      vec_safe_push (gnu_actual_vec, gnu_actual);\n+      gnu_actual_vec.safe_push (gnu_actual);\n+    }\n+\n+  if (frontend_builtin)\n+    {\n+      tree pred_cst = build_int_cst (integer_type_node, PRED_BUILTIN_EXPECT);\n+      enum internal_fn icode = IFN_BUILTIN_EXPECT;\n+\n+      switch (DECL_FUNCTION_CODE (gnu_subprog))\n+\t{\n+\tcase BUILT_IN_EXPECT:\n+\t  break;\n+\tcase BUILT_IN_LIKELY:\n+\t  gnu_actual_vec.safe_push (boolean_true_node);\n+\t  break;\n+\tcase BUILT_IN_UNLIKELY:\n+\t  gnu_actual_vec.safe_push (boolean_false_node);\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n+      gnu_actual_vec.safe_push (pred_cst);\n+\n+      gnu_call\n+\t= build_call_expr_internal_loc_array (UNKNOWN_LOCATION,\n+\t\t\t\t\t      icode,\n+\t\t\t\t\t      gnu_result_type,\n+\t\t\t\t\t      gnu_actual_vec.length (),\n+\t\t\t\t\t      gnu_actual_vec.begin ());\n+    }\n+  else\n+    {\n+      gnu_call\n+        = build_call_array_loc (UNKNOWN_LOCATION,\n+\t\t\t\tgnu_result_type,\n+\t\t\t\tbuild_unary_op (ADDR_EXPR, NULL_TREE,\n+\t\t\t\t\t\tgnu_subprog),\n+\t\t\t\tgnu_actual_vec.length (),\n+\t\t\t        gnu_actual_vec.begin ());\n+      CALL_EXPR_BY_DESCRIPTOR (gnu_call) = by_descriptor;\n     }\n \n-  gnu_call\n-    = build_call_vec (gnu_result_type, gnu_subprog_addr, gnu_actual_vec);\n-  CALL_EXPR_BY_DESCRIPTOR (gnu_call) = by_descriptor;\n   set_expr_location_from_node (gnu_call, gnat_node);\n \n   /* If we have created a temporary for the return value, initialize it.  */\n@@ -6320,24 +6362,17 @@ Compilation_Unit_to_gnu (Node_Id gnat_node)\n \n    The compiler will automatically predict the last edge leading to a call\n    to a noreturn function as very unlikely taken.  This function makes it\n-   possible to expand the prediction to predecessors in case the condition\n+   possible to extend the prediction to predecessors in case the condition\n    is made up of several short-circuit operators.  */\n \n static tree\n build_noreturn_cond (tree cond)\n {\n-  tree fn = builtin_decl_explicit (BUILT_IN_EXPECT);\n-  tree arg_types = TYPE_ARG_TYPES (TREE_TYPE (fn));\n-  tree pred_type = TREE_VALUE (arg_types);\n-  tree expected_type = TREE_VALUE (TREE_CHAIN (arg_types));\n-\n-  tree t = build_call_expr (fn, 3,\n-\t\t\t    fold_convert (pred_type, cond),\n-\t\t\t    build_int_cst (expected_type, 0),\n-\t\t\t    build_int_cst (integer_type_node,\n-\t\t\t\t\t   PRED_NORETURN));\n-\n-  return build1 (NOP_EXPR, boolean_type_node, t);\n+  tree pred_cst = build_int_cst (integer_type_node, PRED_NORETURN);\n+  return\n+    build_call_expr_internal_loc (UNKNOWN_LOCATION, IFN_BUILTIN_EXPECT,\n+\t\t\t\t  boolean_type_node, 3, cond,\n+\t\t\t\t  boolean_false_node, pred_cst);\n }\n \n /* Subroutine of gnat_to_gnu to translate GNAT_RANGE, a node representing a"}, {"sha": "4d3facca55aa8b6c272c029f61e259799aabd69d", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -5877,6 +5877,7 @@ enum c_builtin_type\n \t\t\t\tARG6, ARG7) NAME,\n #define DEF_POINTER_TYPE(NAME, TYPE) NAME,\n #include \"builtin-types.def\"\n+#include \"ada-builtin-types.def\"\n #undef DEF_PRIMITIVE_TYPE\n #undef DEF_FUNCTION_TYPE_0\n #undef DEF_FUNCTION_TYPE_1\n@@ -6025,6 +6026,7 @@ install_builtin_function_types (void)\n   builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);\n \n #include \"builtin-types.def\"\n+#include \"ada-builtin-types.def\"\n \n #undef DEF_PRIMITIVE_TYPE\n #undef DEF_FUNCTION_TYPE_0\n@@ -6574,7 +6576,10 @@ static int flag_isoc94 = 0;\n static int flag_isoc99 = 0;\n static int flag_isoc11 = 0;\n \n-/* Install what the common builtins.def offers.  */\n+/* Install what the common builtins.def offers plus our local additions.\n+\n+   Note that ada-builtins.def is included first so that locally redefined\n+   built-in functions take precedence over the commonly defined ones.  */\n \n static void\n install_builtin_functions (void)\n@@ -6587,6 +6592,10 @@ install_builtin_functions (void)\n                    builtin_types[(int) LIBTYPE],                        \\\n                    BOTH_P, FALLBACK_P, NONANSI_P,                       \\\n                    built_in_attributes[(int) ATTRS], IMPLICIT);\n+#define DEF_ADA_BUILTIN(ENUM, NAME, TYPE, ATTRS)\t\t\\\n+  DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_FRONTEND, TYPE, BT_LAST, \\\n+\t       false, false, false, ATTRS, true, true)\n+#include \"ada-builtins.def\"\n #include \"builtins.def\"\n }\n "}, {"sha": "2884de12cc855f79d005877e8dd6e0206f3dc666", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -1,3 +1,8 @@\n+2019-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/expect2.adb: New test.\n+\t* gnat.dg/expect2_pkg.ads: New helper.\n+\n 2019-05-27  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/aliased2.adb: New test."}, {"sha": "fb50bd8c7f165ec865148b618d62e8b61928400e", "filename": "gcc/testsuite/gnat.dg/expect2.adb", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2.adb?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -0,0 +1,24 @@\n+-- { dg-do compile }\n+\n+with Text_IO; use Text_IO;\n+with Expect2_Pkg; use Expect2_Pkg;\n+\n+procedure Expect2 is\n+begin\n+  if Unlikely (I = 0) then\n+    Put_Line (\"Zero was passed\");\n+    return;\n+  end if;\n+\n+  if Likely (I > 0) then\n+    Put_Line (\"A positive number was passed\");\n+  else\n+    Put_Line (\"A negative number was passed\");\n+  end if;\n+\n+  if Expect ((I rem 2) = 0, False) then\n+    Put_Line (\"An even number was passed\");\n+  else\n+    Put_Line (\"An odd number was passed\");\n+  end if;\n+end;"}, {"sha": "7cb0dd3aaab915d050446956ee041409137f5635", "filename": "gcc/testsuite/gnat.dg/expect2_pkg.ads", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9778c45fc1cd361c3012e30aeb02b53cb3e531c/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fexpect2_pkg.ads?ref=b9778c45fc1cd361c3012e30aeb02b53cb3e531c", "patch": "@@ -0,0 +1,15 @@\n+package Expect2_Pkg is\n+\n+  I : Integer;\n+  pragma Volatile (I);\n+\n+  function Expect (Condition : Boolean; Outcome : Boolean) return Boolean;\n+  pragma Import (Intrinsic, Expect, \"__builtin_expect\");\n+\n+  function Likely (Condition : Boolean) return Boolean;\n+  pragma Import (Intrinsic, Likely, \"__builtin_likely\");\n+\n+  function Unlikely (Condition : Boolean) return Boolean;\n+  pragma Import (Intrinsic, Unlikely, \"__builtin_unlikely\");\n+\n+end Expect2_Pkg;"}]}