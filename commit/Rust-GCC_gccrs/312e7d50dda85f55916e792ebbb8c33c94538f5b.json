{"sha": "312e7d50dda85f55916e792ebbb8c33c94538f5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzEyZTdkNTBkZGE4NWY1NTkxNmU3OTJlYmJiOGMzM2M5NDUzOGY1Yg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1997-02-06T19:32:49Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "1997-02-06T19:32:49Z"}, "message": "90th Cygnus<->FSF quick merge\n\nFrom-SVN: r13612", "tree": {"sha": "6789023ec82f157e4647e4f161144d3f92485563", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6789023ec82f157e4647e4f161144d3f92485563"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/312e7d50dda85f55916e792ebbb8c33c94538f5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312e7d50dda85f55916e792ebbb8c33c94538f5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/312e7d50dda85f55916e792ebbb8c33c94538f5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/312e7d50dda85f55916e792ebbb8c33c94538f5b/comments", "author": null, "committer": null, "parents": [{"sha": "1b84b6f8a1dc2e41aa5ad34afb0a5650a95c4b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b84b6f8a1dc2e41aa5ad34afb0a5650a95c4b6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b84b6f8a1dc2e41aa5ad34afb0a5650a95c4b6f"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "a6d564fc7e3d434fc9714f5fce2a2a28a5ab85a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=312e7d50dda85f55916e792ebbb8c33c94538f5b", "patch": "@@ -1,7 +1,17 @@\n+Tue Feb  4 11:28:24 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (unify, case TEMPLATE_CONST_PARM): Use cp_tree_equal.\n+\n+\t* pt.c (tsubst): Put it back for -fno-ansi-overloading.\n+\n+Mon Feb  3 18:41:12 1997  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* pt.c (tsubst, case FUNCTION_DECL): Lose obsolete code that\n+ \tsmashes together template and non-template decls of the same\n+ \tsignature.\n+\n Thu Jan 30 19:18:00 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \n-\t* decl.c (lookup_name_real): Also build a TYPENAME_TYPE for nested\n- \tclasses.\n \t* pt.c (tsubst): Don't recurse for the type of a TYPENAME_TYPE.\n \n Wed Jan 29 11:40:35 1997  Brendan Kehoe  <brendan@lisa.cygnus.com>"}, {"sha": "0db3497f1fa2b6681a8a5b40ba076984cac9144a", "filename": "gcc/cp/new.cc", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2Fnew.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2Fnew.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fnew.cc?ref=312e7d50dda85f55916e792ebbb8c33c94538f5b", "patch": "@@ -1,7 +1,30 @@\n // Implementation file for the -*- C++ -*- dynamic memory management header.\n // Copyright (C) 1996 Free Software Foundation\n+\n // This file is part of GNU CC.\n \n+// GNU CC is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// GNU CC is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GNU CC; see the file COPYING.  If not, write to\n+// the Free Software Foundation, 59 Temple Place - Suite 330,\n+// Boston, MA 02111-1307, USA. \n+\n+// As a special exception, if you link this library with other files,\n+// some of which are compiled with GCC, to produce an executable,\n+// this library does not by itself cause the resulting executable\n+// to be covered by the GNU General Public License.\n+// This exception does not however invalidate any other reasons why\n+// the executable file might be covered by the GNU General Public License.\n+\n #pragma implementation \"new\"\n #include \"new\"\n "}, {"sha": "7e8c18475db056e1bca0c33afce310829cf8ed10", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/312e7d50dda85f55916e792ebbb8c33c94538f5b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=312e7d50dda85f55916e792ebbb8c33c94538f5b", "patch": "@@ -1483,7 +1483,7 @@ tsubst (t, args, nargs, in_decl)\n \t/* We do NOT check for matching decls pushed separately at this\n            point, as they may not represent instantiations of this\n            template, and in any case are considered separate under the\n-           discrete model.  */\n+           discrete model.  Instead, see add_maybe_template.  */\n \n \tr = copy_node (t);\n \tcopy_lang_decl (r);\n@@ -1542,7 +1542,7 @@ tsubst (t, args, nargs, in_decl)\n \t  grok_op_properties (r, DECL_VIRTUAL_P (r), DECL_FRIEND_P (r));\n \n \t/* Look for matching decls for the moment.  */\n-\tif (! member)\n+\tif (! member && ! flag_ansi_overloading)\n \t  {\n \t    tree decls = lookup_name_nonclass (DECL_NAME (t));\n \t    tree d = NULL_TREE;\n@@ -2747,31 +2747,16 @@ unify (tparms, targs, ntparms, parm, arg, nsubsts, strict)\n     case TEMPLATE_CONST_PARM:\n       (*nsubsts)++;\n       idx = TEMPLATE_CONST_IDX (parm);\n-      if (targs[idx] == arg)\n-\treturn 0;\n-      else if (targs[idx])\n+      if (targs[idx])\n \t{\n-\t  tree t = targs[idx];\n-\t  if (TREE_CODE (t) == TREE_CODE (arg))\n-\t    switch (TREE_CODE (arg))\n-\t      {\n-\t      case INTEGER_CST:\n-\t\tif (tree_int_cst_equal (t, arg))\n-\t\t  return 0;\n-\t\tbreak;\n-\t      case REAL_CST:\n-\t\tif (REAL_VALUES_EQUAL (TREE_REAL_CST (t), TREE_REAL_CST (arg)))\n-\t\t  return 0;\n-\t\tbreak;\n-\t      /* STRING_CST values are not valid template const parms.  */\n-\t      default:\n-\t\t;\n-\t      }\n-\t  /* else we get two different bindings, so deduction fails.  */\n-\t  return 1;\n+\t  int i = cp_tree_equal (targs[idx], arg);\n+\t  if (i == 1)\n+\t    return 0;\n+\t  else if (i == 0)\n+\t    return 1;\n+\t  else\n+\t    my_friendly_abort (42);\n \t}\n-/*\telse if (typeof arg != tparms[idx])\n-\treturn 1;*/\n \n       targs[idx] = copy_to_permanent (arg);\n       return 0;"}]}