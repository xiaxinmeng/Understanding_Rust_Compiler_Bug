{"sha": "b729186a4442e9078c174263d294c7c68ed07196", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcyOTE4NmE0NDQyZTkwNzhjMTc0MjYzZDI5NGM3YzY4ZWQwNzE5Ng==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-27T22:11:45Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-27T22:11:45Z"}, "message": "c-lex.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\n \n\t* c-lex.c: Include <stdlib.h> and <string.h>/<strings.h>.  Add\n\tprototype for `handle_sysv_pragma', and make it static.  Add\n\tparentheses around assignment used as truth value.\n\t* combine.c (combine_instructions): Protect variable `prev' with\n\tmacro HAVE_cc0.\n\t(can_combine_p): Protect variable `link' with AUTO_INC_DEC.\n\t(extract_left_shift): Add parentheses around operand of &.\n\t(merge_outer_ops): Avoid an empty body in an else-statement.\n\t(gen_rtx_combine): Remove unused variable `i'.\n\t* sparc/gmon-sol2.c: Include <fcntl.h>.  Make return type of\n        function monstartup `void'.  Likewise for internal_mcount.  Add\n        `static void' prototype for moncontrol.  Reconcile sprintf format\n        vs. args.\n\t* sparc/sparc.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\tMake return type of function_arg_slotno explicitly `int'.\n\t(reg_unused_after): Add\tparentheses around assignment used as\n\ttruth value.\n\t(save_regs): Add explicit braces to avoid ambiguous `else'.\n\t(function_arg_slotno): Add parentheses around && within ||.\n\t(function_arg_pass_by_reference): Likewise.\n\t(sparc_flat_output_function_prologue): Reconcile fprintf format\n\tvs. args.\n\t* svr4.h (ASM_OUTPUT_LIMITED_STRING): Add parentheses around\n\tassignment used as truth value.\n\t* cplus-dem.c: Include <stdlib.h>.\n\t(demangle_signature): Avoid an empty body in an else-statement.\n\t(do_type): Remove unused variable `lvl'.\n\t* cppexp.c: Don't have <stdlib.h> depend on MULTIBYTE_CHARS.\n\tInclude <string.h>/<strings.h>.\n\t(cpp_lex): Remove unused variable `namelen'.\n\t(cpp_lex): Explicitly declare `num_chars' as an int.\n\t* cpplib.c: Avoid duplicate inclusion of <stdlib.h>, include\n\t<unistd.h> instead.  Explicitly declare is_system_include\n\treturning int.\n\t(make_assertion): Remove unused variable `kt'.\n\t(cpp_expand_to_buffer): Hide variable `obuf'.\n\t(output_line_command): Remove unused variables, `line_end',\n\t`line_cmd_buf' and `len'.\n\t(macarg): Remove unused variable `arg_start'.\n\t(special_symbol): Remove unused variable `i'.  Add parentheses\n\taround assignment used as truth value.\n\t(do_include):  Remove unused variables `pcfname' and `retried',\n\thide `pcf' and `pcfbuflimit'.\n\t(do_line): Remove unused variable `i'.\n\t(finclude): Hide variable `missing_newline'.\n\t(cpp_handle_options): Remove unused variable `j'.\n\t(read_token_list): Remove unused variable `eofp'.\n\t(cpp_error_with_line): Remove unused variable `i'.\n\t(cpp_warning_with_line): Likewise.\n\t(cpp_pedwarn_with_line): Explicitly declare `column' as int.\n\t(cpp_error_from_errno): Remove unused variable `i'.\n\t* cse.c (invalidate): Add parentheses around assignment used as\n\ttruth value.\n\t(find_best_addr): Move declaration of variable `our_cost' inside\n\tthe conditional macro where its used.\n\t(fold_rtx): Avoid an empty body in an if-statement.\n\t(cse_insn): Wrap variables  `this_insn_cc0_mode' and\n\t`this_insn_cc0' in macro HAVE_cc0.\n\t* dwarf2out.c: Include <stdlib.h> and <string.h>/<string.h>.\n\t(ASM_OUTPUT_DWARF_DATA8):  Reconcile format vs. args in fprintf's.\n\t(output_uleb128): Likewise.\n\t(output_sleb128): Likewise.\n\t(output_cfi): Likewise.\n\t(output_call_frame_info): Remove unused variables `j', `fde_size'\n\tand `fde_pad'.\n\t(comp_unit_has_inlines): Hide declaration as per rest of file.\n\t(size_of_line_prolog): Correct typo in prototype.\n\t(add_arange): Likewise.\n\t(output_aranges): Likewise.\n\t(add_name_and_src_coords_attributes): Likewise.\n\t(gen_array_type_die): Likewise.\n\t(gen_inlined_subroutine_die): Likewise.\n\t(equate_decl_number_to_die): Remove unused variable `i'.\n\t(print_die): Reconcile format vs. args in fprintf's.\n\t(print_dwarf_line_table): Likewise.\n\t(output_die): Likewise.\n\t(output_line_info): Likewise.\n\t(add_subscript_info): Avoid an empty body in an else-statement.\n\t(gen_subprogram_die): Remove unused variable `fp_loc'.\n\t* dwarfout.c: Explicitly declare `next_pubname_number' as int.\n\tProtect `ordering_attribute' prototype with USE_ORDERING_ATTRIBUTE\n\tmacro.  Protect `src_coords_attribute' prototype with\n\tDWARF_DECL_COORDINATES macro.  Hide `output_entry_point_die'\n\tprototype as in the rest of the file.  Likewise for\n\t`output_pointer_type_die' and `output_reference_type_die'.  Remove\n\tprototype for `type_of_for_scope'.\n\t(output_unsigned_leb128): Reconcile format vs. args in fprintf.\n\t(type_attribute): Add explicit braces to avoid ambiguous `else'.\n\t* final.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\t(shorten_branches): Protect declaration of tmp_length with\n\tSHORTEN_WITH_ADJUST_INSN_LENGTH and ADJUST_INSN_LENGTH macros.\n\t(profile_function): Protect declaration of `sval' and `cxt'\n\tvariables with appropriate macros.\n\t(final_scan_insn): Likewise for `note' variable.  Add explicit\n\tbraces to avoid empty body in an if-statement.\n\t(output_asm_insn): Move variable `i' inside macro conditional\n\twhere it is used.  Add parentheses around assignment used as truth\n\tvalue.\n\t(asm_fprintf) Likewise, likewise.\n\t* fix-header.c (main): Remove unused variable `done'.  Protect\n\tdeclaration of `i' with FIXPROTO_IGNORE_LIST.\n\t* pexecute.c: Include <unistd.h>.  Prototype `my_strerror'.\n\t* print-rtl.c (print_inline_rtx): Explicitly declare the parameter\n\t`ind'.\n\t* profile.c: Include <string.h>/<strings.h>.\n\t(instrument_arcs): Remove unused variables `note', `inverted',\n\t`zero' and `neg_one'.\n\t(branch_prob): Avoid empty body in an if-statement.\n\t* regclass.c: Include <stdlib.h>.\n\t(reg_alternate_class): Explicitly declare parameter `regno'.\n\t* regmove.c (regmove_optimize): Remove unused variable `p'.  Add\n\tparentheses around assignment used as truth value.\n\t(find_matches):  Remove unused variables `output_operand' and\n\t`matching_operand'.\n\t(fixup_match_1): Remove statement with no effect: \"if (0) ;\".\n\t* scan.c (sstring_append): Explicitly declare `count' as int.\n\t(scan_string): Explicitly declare parameter `init' as int.\n\t* sched.c: Include <stdlib.h>.\n\t(BLOCKAGE_RANGE): Add parentheses around arithmetic in operand of |.\n\t(rank_for_schedule): Add parentheses around assignment used as\n\ttruth value.\n\t(schedule_block): Likewise.\n\t(regno_use_in): Likewise.\n\t(schedule_insns): Remove unused variable `i'.\n\t* toplev.c: Include <stdlib.h> and <string.h>/<strings.h>.\n\t(v_message_with_decl): Remove unused variable `n'.\n\t(botch): Explicitly declare parameter `s' as char *.\n\t(main): Add parentheses around assignment used as truth value.\n\t* tree.c (make_node): Protect the variable `kind' with the\n\tGATHER_STATISTICS macro.\n\t(real_value_from_int_cst): Move variable `e' inside conditional\n\tmacro area where it is used.\n\t(tree_last): Add parentheses around assignment used as truth value.\n\t(build1): Protect the variable `kind' with the GATHER_STATISTICS\n\tmacro.\n\t(print_obstack_statistics): Reconcile format vs. args in fprintf.\n\tProtect variables `i', `total_nodes', and `total_bytes' with the\n\tGATHER_STATISTICS macro.\nLots more -W -Wall warnings disappear.\n\nFrom-SVN: r17516", "tree": {"sha": "57484388e463e5f160f2199ccaf42550bcca4806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57484388e463e5f160f2199ccaf42550bcca4806"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b729186a4442e9078c174263d294c7c68ed07196", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b729186a4442e9078c174263d294c7c68ed07196", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b729186a4442e9078c174263d294c7c68ed07196", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b729186a4442e9078c174263d294c7c68ed07196/comments", "author": null, "committer": null, "parents": [{"sha": "2d8b0f3adae0f21a28fea5ed1da43f8680acabb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d8b0f3adae0f21a28fea5ed1da43f8680acabb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d8b0f3adae0f21a28fea5ed1da43f8680acabb0"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "926d38f8c2724b12e4c5d2d9e49c9f165bca6cee", "filename": "gcc/combine.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=b729186a4442e9078c174263d294c7c68ed07196", "patch": "@@ -465,7 +465,10 @@ combine_instructions (f, nregs)\n      rtx f;\n      int nregs;\n {\n-  register rtx insn, next, prev;\n+  register rtx insn, next;\n+#ifdef HAVE_cc0\n+  register rtx prev;\n+#endif\n   register int i;\n   register rtx links, nextlinks;\n \n@@ -823,7 +826,10 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n {\n   int i;\n   rtx set = 0, src, dest;\n-  rtx p, link;\n+  rtx p;\n+#ifdef AUTO_INC_DEC\n+  rtx, link;\n+#endif\n   int all_adjacent = (succ ? (next_active_insn (insn) == succ\n \t\t\t      && next_active_insn (succ) == i3)\n \t\t      : next_active_insn (insn) == i3);\n@@ -5739,7 +5745,7 @@ extract_left_shift (x, count)\n       /* If we can safely shift this constant and we find the inner shift,\n \t make a new operation.  */\n       if (GET_CODE (XEXP (x,1)) == CONST_INT\n-\t  && (INTVAL (XEXP (x, 1)) & (((HOST_WIDE_INT) 1 << count)) - 1) == 0\n+\t  && (INTVAL (XEXP (x, 1)) & ((((HOST_WIDE_INT) 1 << count)) - 1)) == 0\n \t  && (tem = extract_left_shift (XEXP (x, 0), count)) != 0)\n \treturn gen_binary (code, mode, tem, \n \t\t\t   GEN_INT (INTVAL (XEXP (x, 1)) >> count));\n@@ -8126,7 +8132,7 @@ merge_outer_ops (pop0, pconst0, op1, const1, mode, pcomp_p)\n \t  op0 = SET;\n \telse /* op1 == XOR */\n \t  /* (a ^ b) | b == a | b */\n-\t  ;\n+\t  {;}\n \tbreak;\n \n       case XOR:\n@@ -9128,7 +9134,7 @@ gen_rtx_combine VPROTO((enum rtx_code code, enum machine_mode mode, ...))\n   va_list p;\n   int n_args;\n   rtx args[3];\n-  int i, j;\n+  int j;\n   char *fmt;\n   rtx rt;\n   struct undo *undo;"}, {"sha": "24b691148cb50d8f6edc639e323c7ae0e5c68c71", "filename": "gcc/final.c", "status": "modified", "additions": 53, "deletions": 22, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=b729186a4442e9078c174263d294c7c68ed07196", "patch": "@@ -52,6 +52,16 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #include <stdio.h>\n #include <ctype.h>\n+#if HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n+#ifdef HAVE_STRING_H\n+#include <string.h>\n+#else\n+#ifdef HAVE_STRINGS_H\n+#include <strings.h>\n+#endif\n+#endif\n \n #include \"tree.h\"\n #include \"rtl.h\"\n@@ -837,7 +847,11 @@ shorten_branches (first)\n \t   insn = NEXT_INSN (insn))\n \t{\n \t  int new_length;\n+#ifdef SHORTEN_WITH_ADJUST_INSN_LENGTH\n+#ifdef ADJUST_INSN_LENGTH\n \t  int tmp_length;\n+#endif\n+#endif\n \n \t  uid = INSN_UID (insn);\n \t  insn_addresses[uid] = insn_current_address;\n@@ -1063,8 +1077,14 @@ profile_function (file)\n      FILE *file;\n {\n   int align = MIN (BIGGEST_ALIGNMENT, LONG_TYPE_SIZE);\n+#if defined(ASM_OUTPUT_REG_PUSH)\n+#if defined(STRUCT_VALUE_INCOMING_REGNUM) || defined(STRUCT_VALUE_REGNUM)\n   int sval = current_function_returns_struct;\n+#endif\n+#if defined(STATIC_CHAIN_INCOMING_REGNUM) || defined(STATIC_CHAIN_REGNUM)\n   int cxt = current_function_needs_context;\n+#endif\n+#endif /* ASM_OUTPUT_REG_PUSH */\n \n   data_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n@@ -1683,7 +1703,9 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \tregister rtx body = PATTERN (insn), set;\n \tint insn_code_number;\n \tchar *template;\n+#ifdef HAVE_cc0\n \trtx note;\n+#endif\n \n \t/* An INSN, JUMP_INSN or CALL_INSN.\n \t   First check for special kinds that recog doesn't recognize.  */\n@@ -1857,7 +1879,9 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t       actions in these insns and the CC must be marked as being\n \t       clobbered by the function.  */\n \t    if (GET_CODE (XVECEXP (body, 0, 0)) == CALL_INSN)\n-\t      CC_STATUS_INIT;\n+\t      {\n+\t\tCC_STATUS_INIT;\n+\t      }\n \n \t    /* Following a conditional branch sequence, we have a new basic\n \t       block.  */\n@@ -2575,7 +2599,7 @@ output_asm_insn (template, operands)\n      rtx *operands;\n {\n   register char *p;\n-  register int c, i;\n+  register int c;\n \n   /* An insn may return a null string template\n      in a case where no assembler code is needed.  */\n@@ -2589,7 +2613,7 @@ output_asm_insn (template, operands)\n   ASM_OUTPUT_OPCODE (asm_out_file, p);\n #endif\n \n-  while (c = *p++)\n+  while ((c = *p++))\n     switch (c)\n       {\n       case '\\n':\n@@ -2607,16 +2631,20 @@ output_asm_insn (template, operands)\n \n #ifdef ASSEMBLER_DIALECT\n       case '{':\n-\t/* If we want the first dialect, do nothing.  Otherwise, skip\n-\t   DIALECT_NUMBER of strings ending with '|'.  */\n-\tfor (i = 0; i < dialect_number; i++)\n-\t  {\n-\t    while (*p && *p++ != '|')\n-\t      ;\n+\t{\n+\t  register int i;\n+\t  \n+\t  /* If we want the first dialect, do nothing.  Otherwise, skip\n+\t     DIALECT_NUMBER of strings ending with '|'.  */\n+\t  for (i = 0; i < dialect_number; i++)\n+\t    {\n+\t      while (*p && *p++ != '|')\n+\t\t;\n \n-\t    if (*p == '|')\n-\t      p++;\n-\t  }\n+\t      if (*p == '|')\n+\t\tp++;\n+\t    }\n+\t}\n \tbreak;\n \n       case '|':\n@@ -2904,7 +2932,6 @@ asm_fprintf VPROTO((FILE *file, char *p, ...))\n   va_list argptr;\n   char buf[10];\n   char *q, c;\n-  int i;\n \n   VA_START (argptr, p);\n \n@@ -2915,21 +2942,25 @@ asm_fprintf VPROTO((FILE *file, char *p, ...))\n \n   buf[0] = '%';\n \n-  while (c = *p++)\n+  while ((c = *p++))\n     switch (c)\n       {\n #ifdef ASSEMBLER_DIALECT\n       case '{':\n-\t/* If we want the first dialect, do nothing.  Otherwise, skip\n-\t   DIALECT_NUMBER of strings ending with '|'.  */\n-\tfor (i = 0; i < dialect_number; i++)\n-\t  {\n-\t    while (*p && *p++ != '|')\n-\t      ;\n+\t{\n+\t  int i;\n \n-\t    if (*p == '|')\n-\t      p++;\n+\t  /* If we want the first dialect, do nothing.  Otherwise, skip\n+\t     DIALECT_NUMBER of strings ending with '|'.  */\n+\t  for (i = 0; i < dialect_number; i++)\n+\t    {\n+\t      while (*p && *p++ != '|')\n+\t\t;\n+\n+\t      if (*p == '|')\n+\t\tp++;\n \t  }\n+\t}\n \tbreak;\n \n       case '|':"}, {"sha": "ef64cb194f37bbd74750a3c044e30b8018fce6c9", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b729186a4442e9078c174263d294c7c68ed07196/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=b729186a4442e9078c174263d294c7c68ed07196", "patch": "@@ -25,6 +25,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include <stdio.h>\n+#if HAVE_STDLIB_H\n+#include <stdlib.h>\n+#endif\n #include \"rtl.h\"\n #include \"hard-reg-set.h\"\n #include \"flags.h\"\n@@ -598,6 +601,7 @@ reg_preferred_class (regno)\n \n enum reg_class\n reg_alternate_class (regno)\n+     int regno;\n {\n   if (prefclass == 0)\n     return ALL_REGS;"}]}