{"sha": "795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzk1YmQyNmFkN2JjYjhlYWYzOWYzNWZiMzQ0NDlmNjg5M2RjZWJkNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-04-29T08:10:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-04-29T08:10:15Z"}, "message": "tree-vect-loop.c (get_initial_def_for_induction): Use correct types for pointer increment.\n\n2009-04-28  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-loop.c (get_initial_def_for_induction): Use\n\tcorrect types for pointer increment.\n\nFrom-SVN: r146927", "tree": {"sha": "cbd8e3d9cb9efd165b2b2e86c60b77aae01018ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbd8e3d9cb9efd165b2b2e86c60b77aae01018ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8df03fe559a62ae2a70cc8e630381cae15d85efb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8df03fe559a62ae2a70cc8e630381cae15d85efb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8df03fe559a62ae2a70cc8e630381cae15d85efb"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "1c33bf9982da63ccacd47f5ea7ec3952d42aa5cd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "patch": "@@ -1,3 +1,8 @@\n+2009-04-28  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-loop.c (get_initial_def_for_induction): Use\n+\tcorrect types for pointer increment.\n+\n 2009-04-29  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* toplev.c (print_version): Update GMP version string calculation."}, {"sha": "6c239dbf6e9e069bf9e01fd10e3e2440d3867d6d", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/795bd26ad7bcb8eaf39f35fb34449f6893dcebd4/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=795bd26ad7bcb8eaf39f35fb34449f6893dcebd4", "patch": "@@ -2223,6 +2223,7 @@ get_initial_def_for_induction (gimple iv_phi)\n   tree loop_arg;\n   gimple_stmt_iterator si;\n   basic_block bb = gimple_bb (iv_phi);\n+  tree stepvectype;\n \n   vectype = get_vectype_for_scalar_type (scalar_type);\n   gcc_assert (vectype);\n@@ -2235,8 +2236,10 @@ get_initial_def_for_induction (gimple iv_phi)\n   /* Find the first insertion point in the BB.  */\n   si = gsi_after_labels (bb);\n \n-  if (INTEGRAL_TYPE_P (scalar_type) || POINTER_TYPE_P (scalar_type))\n+  if (INTEGRAL_TYPE_P (scalar_type))\n     step_expr = build_int_cst (scalar_type, 0);\n+  else if (POINTER_TYPE_P (scalar_type))\n+    step_expr = build_int_cst (sizetype, 0);\n   else\n     step_expr = build_real (scalar_type, dconst0);\n \n@@ -2320,16 +2323,19 @@ get_initial_def_for_induction (gimple iv_phi)\n     {\n       /* iv_loop is the loop to be vectorized. Generate:\n \t  vec_step = [VF*S, VF*S, VF*S, VF*S]  */\n-      expr = build_int_cst (scalar_type, vf);\n-      new_name = fold_build2 (MULT_EXPR, scalar_type, expr, step_expr);\n+      expr = build_int_cst (TREE_TYPE (step_expr), vf);\n+      new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n+\t\t\t      expr, step_expr);\n     }\n \n   t = NULL_TREE;\n   for (i = 0; i < nunits; i++)\n     t = tree_cons (NULL_TREE, unshare_expr (new_name), t);\n   gcc_assert (CONSTANT_CLASS_P (new_name));\n-  vec = build_vector (vectype, t);\n-  vec_step = vect_init_vector (iv_phi, vec, vectype, NULL);\n+  stepvectype = get_vectype_for_scalar_type (TREE_TYPE (new_name));\n+  gcc_assert (stepvectype);\n+  vec = build_vector (stepvectype, t);\n+  vec_step = vect_init_vector (iv_phi, vec, stepvectype, NULL);\n \n \n   /* Create the following def-use cycle:\n@@ -2377,14 +2383,15 @@ get_initial_def_for_induction (gimple iv_phi)\n       gcc_assert (!nested_in_vect_loop);\n \n       /* Create the vector that holds the step of the induction.  */\n-      expr = build_int_cst (scalar_type, nunits);\n-      new_name = fold_build2 (MULT_EXPR, scalar_type, expr, step_expr);\n+      expr = build_int_cst (TREE_TYPE (step_expr), nunits);\n+      new_name = fold_build2 (MULT_EXPR, TREE_TYPE (step_expr),\n+\t\t\t      expr, step_expr);\n       t = NULL_TREE;\n       for (i = 0; i < nunits; i++)\n \tt = tree_cons (NULL_TREE, unshare_expr (new_name), t);\n       gcc_assert (CONSTANT_CLASS_P (new_name));\n-      vec = build_vector (vectype, t);\n-      vec_step = vect_init_vector (iv_phi, vec, vectype, NULL);\n+      vec = build_vector (stepvectype, t);\n+      vec_step = vect_init_vector (iv_phi, vec, stepvectype, NULL);\n \n       vec_def = induc_def;\n       prev_stmt_vinfo = vinfo_for_stmt (induction_phi);"}]}