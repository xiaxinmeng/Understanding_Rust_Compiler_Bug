{"sha": "4c19122bf5afa5cb479fd9445f0c591c52add09b", "node_id": "C_kwDOANBUbNoAKDRjMTkxMjJiZjVhZmE1Y2I0NzlmZDk0NDVmMGM1OTFjNTJhZGQwOWI", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-12T15:21:43Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-15T20:58:56Z"}, "message": "Check optab before transforming atomic bit test and operations\n\nCheck optab before transforming equivalent, but slighly different cases\nof atomic bit test and operations to their canonical forms.\n\ngcc/\n\n\tPR middle-end/103184\n\t* tree-ssa-ccp.c (optimize_atomic_bit_test_and): Check optab\n\tbefore transforming equivalent, but slighly different cases to\n\ttheir canonical forms.\n\ngcc/testsuite/\n\n\tPR middle-end/103184\n\t* gcc.dg/pr103184-1.c: New test.\n\t* gcc.dg/pr103184-2.c: Likewise.", "tree": {"sha": "d497c60605eab0f330ac3300e37f47ff7690f63c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d497c60605eab0f330ac3300e37f47ff7690f63c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c19122bf5afa5cb479fd9445f0c591c52add09b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19122bf5afa5cb479fd9445f0c591c52add09b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c19122bf5afa5cb479fd9445f0c591c52add09b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c19122bf5afa5cb479fd9445f0c591c52add09b/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fabe8cc41e9b01913e2016861237d1d99d7567bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fabe8cc41e9b01913e2016861237d1d99d7567bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fabe8cc41e9b01913e2016861237d1d99d7567bf"}], "stats": {"total": 93, "additions": 76, "deletions": 17}, "files": [{"sha": "e567f95f63f3227b638fd28045c0ff1295231652", "filename": "gcc/testsuite/gcc.dg/pr103184-1.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-1.c?ref=4c19122bf5afa5cb479fd9445f0c591c52add09b", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern char foo;\n+extern unsigned char bar;\n+\n+int\n+foo1 (void)\n+{\n+  return __sync_fetch_and_and (&foo, ~1) & 1;\n+}\n+\n+int\n+foo2 (void)\n+{\n+  return __sync_fetch_and_or (&foo, 1) & 1;\n+}\n+\n+int\n+foo3 (void)\n+{\n+  return __sync_fetch_and_xor (&foo, 1) & 1;\n+}\n+\n+unsigned short\n+bar1 (void)\n+{\n+  return __sync_fetch_and_and (&bar, ~1) & 1;\n+}\n+\n+unsigned short\n+bar2 (void)\n+{\n+  return __sync_fetch_and_or (&bar, 1) & 1;\n+}\n+\n+unsigned short\n+bar3 (void)\n+{\n+  return __sync_fetch_and_xor (&bar, 1) & 1;\n+}\n+\n+/* { dg-final { scan-assembler-times \"lock;?\\[ \\t\\]*cmpxchgb\" 6 { target { x86_64-*-* i?86-*-* } } } } */"}, {"sha": "499761fdbfd0d70ff36b2c7ab68e838352cb1111", "filename": "gcc/testsuite/gcc.dg/pr103184-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103184-2.c?ref=4c19122bf5afa5cb479fd9445f0c591c52add09b", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#include <stdatomic.h>\n+\n+int\n+tbit0 (_Atomic int* a, int n)\n+{\n+#define BIT (0x1 << n)\n+  return atomic_fetch_or (a, BIT) & BIT;\n+#undef BIT\n+}"}, {"sha": "0666dc652d0f4251ad3c23e9a031f2eb082fc65f", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c19122bf5afa5cb479fd9445f0c591c52add09b/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=4c19122bf5afa5cb479fd9445f0c591c52add09b", "patch": "@@ -3366,6 +3366,21 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n       || !gimple_vdef (call))\n     return;\n \n+  switch (fn)\n+    {\n+    case IFN_ATOMIC_BIT_TEST_AND_SET:\n+      optab = atomic_bit_test_and_set_optab;\n+      break;\n+    case IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT:\n+      optab = atomic_bit_test_and_complement_optab;\n+      break;\n+    case IFN_ATOMIC_BIT_TEST_AND_RESET:\n+      optab = atomic_bit_test_and_reset_optab;\n+      break;\n+    default:\n+      return;\n+    }\n+\n   tree bit = nullptr;\n \n   mask = gimple_call_arg (call, 1);\n@@ -3384,6 +3399,10 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n       if (lhs != use_rhs)\n \treturn;\n \n+      if (optab_handler (optab, TYPE_MODE (TREE_TYPE (lhs)))\n+\t  == CODE_FOR_nothing)\n+\treturn;\n+\n       gimple *g;\n       gimple_stmt_iterator gsi;\n       tree var;\n@@ -3627,23 +3646,8 @@ optimize_atomic_bit_test_and (gimple_stmt_iterator *gsip,\n \t  bit = build_int_cst (TREE_TYPE (lhs), ibit);\n \t}\n     }\n-\n-  switch (fn)\n-    {\n-    case IFN_ATOMIC_BIT_TEST_AND_SET:\n-      optab = atomic_bit_test_and_set_optab;\n-      break;\n-    case IFN_ATOMIC_BIT_TEST_AND_COMPLEMENT:\n-      optab = atomic_bit_test_and_complement_optab;\n-      break;\n-    case IFN_ATOMIC_BIT_TEST_AND_RESET:\n-      optab = atomic_bit_test_and_reset_optab;\n-      break;\n-    default:\n-      return;\n-    }\n-\n-  if (optab_handler (optab, TYPE_MODE (TREE_TYPE (lhs))) == CODE_FOR_nothing)\n+  else if (optab_handler (optab, TYPE_MODE (TREE_TYPE (lhs)))\n+\t   == CODE_FOR_nothing)\n     return;\n \n   tree use_lhs = gimple_assign_lhs (use_stmt);"}]}