{"sha": "457691343552e43ffbce002ef2bd4065e09d7c39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDU3NjkxMzQzNTUyZTQzZmZiY2UwMDJlZjJiZDQwNjVlMDlkN2MzOQ==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-12-09T09:14:28Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-12-09T09:14:28Z"}, "message": "function.c (aggregate_value_p): Get fntype from CALL_EXPR in any case.\n\n2008-12-09  Kai Tietz  <kai.tietz@onevision.com>\n\n\tPR/38366\n\t* function.c (aggregate_value_p): Get fntype from CALL_EXPR in any\n\tcase.\n\t* calls.c (nitialize_argument_information): Add fntype argument \n\tand use it for calls.promote_function_args.\n        (expand_call): Pass fntype to aggregate_value_p if no fndecl\n\tavailable and pass additional fntype to\n\tinitialize_argument_information.\n\t* config/i386/i386.c (ix86_reg_parm_stack_space): Remove cfun part\n\tto get function abi type.\n\t(init_cumulative_args): Use for abi kind detection fntype, when no\n\tfndecl is available.\n\nFrom-SVN: r142584", "tree": {"sha": "22389f9764187766baa819ce9d1fcc32e25e5dc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22389f9764187766baa819ce9d1fcc32e25e5dc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/457691343552e43ffbce002ef2bd4065e09d7c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457691343552e43ffbce002ef2bd4065e09d7c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/457691343552e43ffbce002ef2bd4065e09d7c39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/457691343552e43ffbce002ef2bd4065e09d7c39/comments", "author": null, "committer": null, "parents": [{"sha": "f2dc2f86ae47e722651f005b31ca435e3f1f231f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2dc2f86ae47e722651f005b31ca435e3f1f231f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2dc2f86ae47e722651f005b31ca435e3f1f231f"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "db5ed5b10a684680465b12221538329606ce0d4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=457691343552e43ffbce002ef2bd4065e09d7c39", "patch": "@@ -1,3 +1,18 @@\n+2008-12-09  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\tPR/38366\n+\t* function.c (aggregate_value_p): Get fntype from CALL_EXPR in any\n+\tcase.\n+\t* calls.c (nitialize_argument_information): Add fntype argument \n+\tand use it for calls.promote_function_args.\n+        (expand_call): Pass fntype to aggregate_value_p if no fndecl\n+\tavailable and pass additional fntype to\n+\tinitialize_argument_information.\n+\t* config/i386/i386.c (ix86_reg_parm_stack_space): Remove cfun part\n+\tto get function abi type.\n+\t(init_cumulative_args): Use for abi kind detection fntype, when no\n+\tfndecl is available.\n+\n 2008-12-09  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n \t* config/s390/s390.md (movti, movdi_64, movdi_31,"}, {"sha": "03994d4ecf53f441d46c8735380e3b584249da15", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=457691343552e43ffbce002ef2bd4065e09d7c39", "patch": "@@ -136,7 +136,7 @@ static int compute_argument_block_size (int, struct args_size *, tree, tree, int\n static void initialize_argument_information (int, struct arg_data *,\n \t\t\t\t\t     struct args_size *, int,\n \t\t\t\t\t     tree, tree,\n-\t\t\t\t\t     tree, CUMULATIVE_ARGS *, int,\n+\t\t\t\t\t     tree, tree, CUMULATIVE_ARGS *, int,\n \t\t\t\t\t     rtx *, int *, int *, int *,\n \t\t\t\t\t     bool *, bool);\n static void compute_argument_addresses (struct arg_data *, rtx, int);\n@@ -938,7 +938,7 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n \t\t\t\t struct args_size *args_size,\n \t\t\t\t int n_named_args ATTRIBUTE_UNUSED,\n \t\t\t\t tree exp, tree struct_value_addr_value,\n-\t\t\t\t tree fndecl,\n+\t\t\t\t tree fndecl, tree fntype,\n \t\t\t\t CUMULATIVE_ARGS *args_so_far,\n \t\t\t\t int reg_parm_stack_space,\n \t\t\t\t rtx *old_stack_level, int *old_pending_adj,\n@@ -1119,7 +1119,9 @@ initialize_argument_information (int num_actuals ATTRIBUTE_UNUSED,\n       mode = TYPE_MODE (type);\n       unsignedp = TYPE_UNSIGNED (type);\n \n-      if (targetm.calls.promote_function_args (fndecl ? TREE_TYPE (fndecl) : 0))\n+      if (targetm.calls.promote_function_args (fndecl\n+\t\t\t\t\t       ? TREE_TYPE (fndecl)\n+\t\t\t\t\t       : fntype))\n \tmode = promote_mode (type, mode, &unsignedp, 1);\n \n       args[i].unsignedp = unsignedp;\n@@ -2088,7 +2090,7 @@ expand_call (tree exp, rtx target, int ignore)\n   /* Set up a place to return a structure.  */\n \n   /* Cater to broken compilers.  */\n-  if (aggregate_value_p (exp, fndecl))\n+  if (aggregate_value_p (exp, (!fndecl ? fntype : fndecl)))\n     {\n       /* This call returns a big structure.  */\n       flags &= ~(ECF_CONST | ECF_PURE | ECF_LOOPING_CONST_OR_PURE);\n@@ -2245,7 +2247,7 @@ expand_call (tree exp, rtx target, int ignore)\n      arguments into ARGS_SIZE, etc.  */\n   initialize_argument_information (num_actuals, args, &args_size,\n \t\t\t\t   n_named_args, exp,\n-\t\t\t\t   structure_value_addr_value, fndecl,\n+\t\t\t\t   structure_value_addr_value, fndecl, fntype,\n \t\t\t\t   &args_so_far, reg_parm_stack_space,\n \t\t\t\t   &old_stack_level, &old_pending_adj,\n \t\t\t\t   &must_preallocate, &flags,"}, {"sha": "12e9e5abfe97f27651bcfdaf1b793a241bdb26d9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=457691343552e43ffbce002ef2bd4065e09d7c39", "patch": "@@ -4549,16 +4549,12 @@ ix86_must_pass_in_stack (enum machine_mode mode, const_tree type)\n int\n ix86_reg_parm_stack_space (const_tree fndecl)\n {\n-  int call_abi = 0;\n-  /* For libcalls it is possible that there is no fndecl at hand.\n-     Therefore assume for this case the default abi of the target.  */\n-  if (!fndecl)\n-    call_abi = (cfun ? cfun->machine->call_abi : DEFAULT_ABI);\n-  else if (TREE_CODE (fndecl) == FUNCTION_DECL)\n+  int call_abi = SYSV_ABI;\n+  if (fndecl != NULL_TREE && TREE_CODE (fndecl) == FUNCTION_DECL)\n     call_abi = ix86_function_abi (fndecl);\n   else\n     call_abi = ix86_function_type_abi (fndecl);\n-  if (call_abi == 1)\n+  if (call_abi == MS_ABI)\n     return 32;\n   return 0;\n }\n@@ -4647,7 +4643,10 @@ init_cumulative_args (CUMULATIVE_ARGS *cum,  /* Argument info to initialize */\n   struct cgraph_local_info *i = fndecl ? cgraph_local_info (fndecl) : NULL;\n   memset (cum, 0, sizeof (*cum));\n \n-  cum->call_abi = ix86_function_type_abi (fntype);\n+  if (fndecl)\n+   cum->call_abi = ix86_function_abi (fndecl);\n+  else\n+   cum->call_abi = ix86_function_type_abi (fntype);\n   /* Set up the number of registers to use for passing arguments.  */\n   cum->nregs = ix86_regparm;\n   if (TARGET_64BIT)"}, {"sha": "29fe1b0b52d5c5a9ec1f30786cd39e17992b3042", "filename": "gcc/function.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/457691343552e43ffbce002ef2bd4065e09d7c39/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=457691343552e43ffbce002ef2bd4065e09d7c39", "patch": "@@ -1766,7 +1766,9 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n       {\n       case CALL_EXPR:\n \tfndecl = get_callee_fndecl (fntype);\n-\tfntype = fndecl ? TREE_TYPE (fndecl) : 0;\n+\tfntype = (fndecl\n+\t\t  ? TREE_TYPE (fndecl)\n+\t\t  : TREE_TYPE (CALL_EXPR_FN (fntype)));\n \tbreak;\n       case FUNCTION_DECL:\n \tfndecl = fntype;"}]}