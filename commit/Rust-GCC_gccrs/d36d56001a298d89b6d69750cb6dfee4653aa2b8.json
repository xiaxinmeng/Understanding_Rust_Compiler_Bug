{"sha": "d36d56001a298d89b6d69750cb6dfee4653aa2b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM2ZDU2MDAxYTI5OGQ4OWI2ZDY5NzUwY2I2ZGZlZTQ2NTNhYTJiOA==", "commit": {"author": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-03-19T09:58:50Z"}, "committer": {"name": "Giovanni Bajo", "email": "giovannibajo@gcc.gnu.org", "date": "2004-03-19T09:58:50Z"}, "message": "re PR c++/14545 (Cannot compile pooma-gcc (regression))\n\n\tPR c++/14545\n\t* parser.c (cp_parser_functional_cast): A cast to anything\n\tbut integral or enumaration type is not an integral constant\n\texpression.\n\t* pt.c (value_dependent_expression_p): Handle cast expressions\n\twithout operands (such as \"int()\").\n\n\tPR c++/14545\n\t* g++.dg/parse/template15.C: New test.\n\nFrom-SVN: r79672", "tree": {"sha": "2875ba12f6981d9b9cdec73133129e43d4a3728c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2875ba12f6981d9b9cdec73133129e43d4a3728c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d36d56001a298d89b6d69750cb6dfee4653aa2b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36d56001a298d89b6d69750cb6dfee4653aa2b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d36d56001a298d89b6d69750cb6dfee4653aa2b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d36d56001a298d89b6d69750cb6dfee4653aa2b8/comments", "author": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rasky", "id": 1014109, "node_id": "MDQ6VXNlcjEwMTQxMDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1014109?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rasky", "html_url": "https://github.com/rasky", "followers_url": "https://api.github.com/users/rasky/followers", "following_url": "https://api.github.com/users/rasky/following{/other_user}", "gists_url": "https://api.github.com/users/rasky/gists{/gist_id}", "starred_url": "https://api.github.com/users/rasky/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rasky/subscriptions", "organizations_url": "https://api.github.com/users/rasky/orgs", "repos_url": "https://api.github.com/users/rasky/repos", "events_url": "https://api.github.com/users/rasky/events{/privacy}", "received_events_url": "https://api.github.com/users/rasky/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26bcf8fc16a06d4fe16ac25ce79739e2e6cb7445", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bcf8fc16a06d4fe16ac25ce79739e2e6cb7445", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bcf8fc16a06d4fe16ac25ce79739e2e6cb7445"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "77e30a552889722164d4434f05e4099f37d0475c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d36d56001a298d89b6d69750cb6dfee4653aa2b8", "patch": "@@ -1,3 +1,12 @@\n+2004-03-19  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/14545\n+\t* parser.c (cp_parser_functional_cast): A cast to anything\n+\tbut integral or enumaration type is not an integral constant\n+\texpression.\n+\t* pt.c (value_dependent_expression_p): Handle cast expressions\n+\twithout operands (such as \"int()\").\n+\n 2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* semantics.c (finish_pseudo_destructor_expr): Allow differing"}, {"sha": "e964f48753f86e2c96389db3d4491e596cade44e", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=d36d56001a298d89b6d69750cb6dfee4653aa2b8", "patch": "@@ -14494,12 +14494,23 @@ static tree\n cp_parser_functional_cast (cp_parser* parser, tree type)\n {\n   tree expression_list;\n+  tree cast;\n \n   expression_list\n     = cp_parser_parenthesized_expression_list (parser, false,\n \t\t\t\t\t       /*non_constant_p=*/NULL);\n \n-  return build_functional_cast (type, expression_list);\n+  cast = build_functional_cast (type, expression_list);\n+  /* [expr.const]/1: In an integral constant expression \"only type\n+     conversions to integral or enumeration type can be used\".  */\n+  if (cast != error_mark_node && !type_dependent_expression_p (type) \n+      && !INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (type)))\n+    {\n+      if (cp_parser_non_integral_constant_expression \n+\t  (parser, \"a call to a constructor\"))\n+\treturn error_mark_node;\n+    }\n+  return cast;\n }\n \n /* Save the tokens that make up the body of a member function defined"}, {"sha": "3719410ad0dba23c623a4dbbb00aa8bb7b8b766d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=d36d56001a298d89b6d69750cb6dfee4653aa2b8", "patch": "@@ -11776,10 +11776,21 @@ value_dependent_expression_p (tree expression)\n       || TREE_CODE (expression) == REINTERPRET_CAST_EXPR\n       || TREE_CODE (expression) == CAST_EXPR)\n     {\n-      if (dependent_type_p (TREE_TYPE (expression)))\n+      tree type = TREE_TYPE (expression);\n+      if (dependent_type_p (type))\n \treturn true;\n       /* A functional cast has a list of operands.  */\n       expression = TREE_OPERAND (expression, 0);\n+      if (!expression)\n+\t{\n+\t  /* If there are no operands, it must be an expression such\n+\t     as \"int()\". This should not happen for aggregate types\n+\t     because it would form non-constant expressions.  */\n+\t  my_friendly_assert (INTEGRAL_OR_ENUMERATION_TYPE_P (type), \n+\t\t\t      20040318);\n+\n+\t  return false;\n+\t}\n       if (TREE_CODE (expression) == TREE_LIST)\n \t{\n \t  do"}, {"sha": "7ae25a39be68a0c7257f5d0d6cae26effad55f67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d36d56001a298d89b6d69750cb6dfee4653aa2b8", "patch": "@@ -1,3 +1,8 @@\n+2004-03-19  Giovanni Bajo  <giovannibajo@gcc.gnu.org>\n+\n+\tPR c++/14545\n+\t* g++.dg/parse/template15.C: New test.\n+\n 2004-03-18  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.dg/expr/dtor2.C: New test."}, {"sha": "ce2d130360fb6ed301af415454f1887b0cedb103", "filename": "gcc/testsuite/g++.dg/parse/template15.C", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d36d56001a298d89b6d69750cb6dfee4653aa2b8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ftemplate15.C?ref=d36d56001a298d89b6d69750cb6dfee4653aa2b8", "patch": "@@ -0,0 +1,26 @@\n+// { dg-do compile }\n+// Contributed by: Peter Schmid \n+//   <schmid at snake dot iap dot physik dot tu-darmstadt dot de>\n+// PR c++/14545: constructor calls are not integer constant expressions\n+\n+struct A1 { A1(); }; \n+struct A2 { }; \n+\n+template <class T> \n+struct B\n+{ \n+  void foo() { \n+    A1();\n+    A1 a1 = A1(); \n+\n+    A2();\n+    A2 a2 = A2(); \n+\n+    int();\n+    int a3 = int();\n+    float();\n+    float a4 = float();\n+  } \n+}; \n+\n+template struct B<void>;"}]}