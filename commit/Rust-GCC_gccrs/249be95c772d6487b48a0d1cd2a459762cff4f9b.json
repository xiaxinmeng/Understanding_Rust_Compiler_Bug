{"sha": "249be95c772d6487b48a0d1cd2a459762cff4f9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjQ5YmU5NWM3NzJkNjQ4N2I0OGEwZDFjZDJhNDU5NzYyY2ZmNGY5Yg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-09-29T18:11:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-09-29T18:11:40Z"}, "message": "i386.c (ix86_adjust_stack_and_probe_stack_clash): Fix typos and whitespace errors.\n\n\t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash): Fix\n\ttypos and whitespace errors.\n\t* config/i386/predicates.md (address_no_seg_operand): Likewise.\n\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n\nFrom-SVN: r253303", "tree": {"sha": "a394662265c227dd7e9e66c8f0133d1dcbdc66cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a394662265c227dd7e9e66c8f0133d1dcbdc66cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/249be95c772d6487b48a0d1cd2a459762cff4f9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249be95c772d6487b48a0d1cd2a459762cff4f9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/249be95c772d6487b48a0d1cd2a459762cff4f9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/249be95c772d6487b48a0d1cd2a459762cff4f9b/comments", "author": null, "committer": null, "parents": [{"sha": "603be0224edf653c1e38229e1d32ed449ffd23bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/603be0224edf653c1e38229e1d32ed449ffd23bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/603be0224edf653c1e38229e1d32ed449ffd23bd"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "16c9737f09a95c183295b2977508761162f52c4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=249be95c772d6487b48a0d1cd2a459762cff4f9b", "patch": "@@ -1,3 +1,10 @@\n+2017-09-29  Jeff Law  <law@redhat.com>\n+\n+\t* config/i386/i386.c (ix86_adjust_stack_and_probe_stack_clash): Fix\n+\ttypos and whitespace errors.\n+\t* config/i386/predicates.md (address_no_seg_operand): Likewise.\n+\t* config/s390/s390.c (s390_emit_prologue): Likewise.\n+\n 2017-09-29  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR target/81481"}, {"sha": "98fb1ce47cbe6b0d3d86cf5c83f2bc47fd1a9d94", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=249be95c772d6487b48a0d1cd2a459762cff4f9b", "patch": "@@ -13967,7 +13967,7 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n \n      ?!? This should be revamped to work like aarch64 and s390 where\n      we track the offset from the most recent probe.  Normally that\n-     offset would be zero.  For a non-return function we would reset\n+     offset would be zero.  For a noreturn function we would reset\n      it to PROBE_INTERVAL - (STACK_BOUNDARY / BITS_PER_UNIT).   Then\n      we just probe when we cross PROBE_INTERVAL.  */\n   if (TREE_THIS_VOLATILE (cfun->decl))\n@@ -14047,7 +14047,7 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n \t\t\tplus_constant (Pmode, sr.reg,\n \t\t\t\t       m->fs.cfa_offset + rounded_size));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-        }\n+\t}\n \n       /* Step 3: the loop.  */\n       rtx size_rtx = GEN_INT (rounded_size);\n@@ -14060,7 +14060,7 @@ ix86_adjust_stack_and_probe_stack_clash (const HOST_WIDE_INT size)\n \t\t\tplus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t       m->fs.cfa_offset));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-        }\n+\t}\n       m->fs.sp_offset += rounded_size;\n       emit_insn (gen_blockage ());\n "}, {"sha": "4e023afb1107ca2f9a7d391d879b0fce4d24eff3", "filename": "gcc/config/i386/predicates.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fi386%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fpredicates.md?ref=249be95c772d6487b48a0d1cd2a459762cff4f9b", "patch": "@@ -1042,7 +1042,7 @@\n (define_predicate \"SImode_address_operand\"\n   (match_code \"subreg,zero_extend,and\"))\n \n-;; Return true if op if a valid address for LEA, and does not contain\n+;; Return true if op is a valid address for LEA, and does not contain\n ;; a segment override.  Defined as a special predicate to allow\n ;; mode-less const_int operands pass to address_operand.\n (define_special_predicate \"address_no_seg_operand\""}, {"sha": "52a82df0044e4fcdd145a8005670978e2da81c61", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/249be95c772d6487b48a0d1cd2a459762cff4f9b/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=249be95c772d6487b48a0d1cd2a459762cff4f9b", "patch": "@@ -11359,7 +11359,7 @@ s390_emit_prologue (void)\n   /* When probing for stack-clash mitigation, we have to track the distance\n      between the stack pointer and closest known reference.\n \n-     Most of the time we have to make a worst cast assumption.  The\n+     Most of the time we have to make a worst case assumption.  The\n      only exception is when TARGET_BACKCHAIN is active, in which case\n      we know *sp (offset 0) was written.  */\n   HOST_WIDE_INT probe_interval"}]}