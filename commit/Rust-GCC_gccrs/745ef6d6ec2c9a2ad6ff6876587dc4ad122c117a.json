{"sha": "745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1ZWY2ZDZlYzJjOWEyYWQ2ZmY2ODc2NTg3ZGM0YWQxMjJjMTE3YQ==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-07-11T13:39:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-07-11T13:39:09Z"}, "message": "cpp.texi: Update.\n\n\t* cpp.texi: Update.\n\t* gcc.dg/cpp/cmdlne-C.c: New test.\n\nFrom-SVN: r34957", "tree": {"sha": "27fe1cb190ef955be8859810e58dc63872164bde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27fe1cb190ef955be8859810e58dc63872164bde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/comments", "author": null, "committer": null, "parents": [{"sha": "9b55f29a8432a6e841ad1e842585666562c6eca3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b55f29a8432a6e841ad1e842585666562c6eca3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b55f29a8432a6e841ad1e842585666562c6eca3"}], "stats": {"total": 62, "additions": 52, "deletions": 10}, "files": [{"sha": "976ce9b6109c0a29dad45e70564e449ef1b04074", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "patch": "@@ -1,3 +1,7 @@\n+2000-07-11  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpp.texi: Update.\n+\n 2000-07-11  Neil Booth  <NeilB@earthling.net>\n \n \t* cppinit.c: (cpp_reader_init): Allow digraphs by default."}, {"sha": "0e30e1db0281d04f07b73b51a1fae1cdfada2702", "filename": "gcc/cpp.texi", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "patch": "@@ -83,9 +83,9 @@ It is called a macro processor because it allows you to define\n The C preprocessor is intended only for macro processing of C, C++ and\n Objective C source files.  For macro processing of other files, you are\n strongly encouraged to use alternatives like M4, which will likely give\n-you better results and avoid many problems.  For example, the C\n-preprocessor sometimes outputs extra white space to avoid inadvertent C\n-token concatenation, and this may cause problems with other languages.\n+you better results and avoid many problems.  For example, normally the C\n+preprocessor does not preserve arbitrary whitespace verbatim, but\n+instead replaces each sequence with a single space.\n \n For use on C-like source files, the C preprocessor provides four\n separate facilities that you can use as you see fit:\n@@ -2908,11 +2908,14 @@ and will be sent to a program which might be confused by the\n \n @item -C\n @findex -C\n-Do not discard comments: pass them through to the output file.\n-Comments appearing in arguments of a macro call will be copied to the\n-output before the expansion of the macro call.\n-\n-You should be prepared for unwanted side effects when using -C.  For\n+Do not discard comments.  All comments are passed through to the output\n+file, except for comments in processed directives, which are deleted\n+along with the directive.  Comments appearing in the expansion list of a\n+macro will be preserved, and appear in place wherever the macro is\n+invoked.\n+\n+You should be prepared for side effects when using -C; it causes the\n+preprocessor to treat comments as tokens in their own right.  For\n example, macro redefinitions that were trivial when comments were\n replaced by a single space might become significant when comments are\n retained.  Also, comments appearing at the start of what would be a"}, {"sha": "1d157f1c825061dd1036b1e780dac5a2c78d9fe2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "patch": "@@ -1,7 +1,11 @@\n+2000-07-11  Neil Booth  <NeilB@earthling.net>\n+\n+\t* gcc.dg/cpp/cmdlne-C.c: New.\n+\n 2000-07-09  Neil Booth  <NeilB@earthling.net>\n \n-\t* testsuite/gcc.dg/cpp/directiv.c: New tests.\n-\t* testsuite/gcc.dg/cpp/undef1.c: Update.\n+\t* gcc.dg/cpp/directiv.c: New tests.\n+\t* gcc.dg/cpp/undef1.c: Update.\n \n 2000-07-08  Angela Marie Thomas <angela@cygnus.com>\n "}, {"sha": "344718de9b78206156bfc302cd567ecaf4eddb72", "filename": "gcc/testsuite/gcc.dg/cpp/cmdlne-C.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fcmdlne-C.c?ref=745ef6d6ec2c9a2ad6ff6876587dc4ad122c117a", "patch": "@@ -0,0 +1,31 @@\n+/* Copyright (C) 2000 Free Software Foundation, Inc.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options -C } */\n+\n+/* Test -C doesn't fail with #define.  #define is the tricky case,\n+   being the only directive that remembers its comments.\n+\n+   -C treats comments as tokens in their own right, so e.g. comment at\n+   the beginning of a directive turns it into a non-directive.  */\n+\n+#define simple no comments\n+#/**/define bad_directive\t\t/* { dg-error \"invalid\" } */\n+#define/**/obj_like/**/(some)/**/thing/**/\n+#define fun_like(/**/x/**/,/**/y/**/)/**/\n+/**/#define not_a_macro\n+\n+#if !defined simple || !defined obj_like || !defined fun_like\n+#error Missed some macros with -C\n+#endif\n+\n+#ifdef not_a_macro\n+#error not_a_macro is!\n+#endif\n+\n+/* Check obj_like2 doesn't expect arguments, and fun_like does.  */\n+obj_like2\n+fun_like (foo, bar)\n+\n+/* Check OK to redefine fun_like without comments in the params.  */\n+#define fun_like(x, y)/**/"}]}