{"sha": "cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2M3YzUyYzFkOWM5NTI0ZTNlZTA3NjQ4MDhkZTM0MzEyN2I1ZTlmYw==", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2020-11-03T23:59:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-27T09:15:51Z"}, "message": "[Ada] Restore general case for folding comparison of static strings\n\ngcc/ada/\n\n\t* exp_ch4.adb (Rewrite_Comparison): Add assertion to confirm\n\tthat evaluation folds comparisons with static operands; when\n\tfolding comparison with non-static operands, the resulting\n\tliteral is non-static.\n\t* sem_eval.adb (Eval_Relational_Op): Refactor nested IF\n\tstatement for the special case in the THEN branch; move code for\n\tthe \"general case\" out of the ELSE branch.\n\t* sem_res.adb (Resolve_Comparison_Op): Only apply a dubious\n\tspecial-case for GNATprove in the GNATprove_Mode.", "tree": {"sha": "680be8144491670b9d5279e950f55568bc9b91e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/680be8144491670b9d5279e950f55568bc9b91e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2481afdfca17659293d61e613167ec1cd6e1414", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2481afdfca17659293d61e613167ec1cd6e1414", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2481afdfca17659293d61e613167ec1cd6e1414"}], "stats": {"total": 137, "additions": 74, "deletions": 63}, "files": [{"sha": "5ee56137205d166ee68d3e545bc0e9e6b72d5dbf", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "patch": "@@ -14962,6 +14962,14 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n+      --  If both operands are static, then the comparison has been already\n+      --  folded in evaluation.\n+\n+      pragma Assert\n+        (not Is_Static_Expression (Left_Opnd (N))\n+           or else\n+         not Is_Static_Expression (Right_Opnd (N)));\n+\n       --  Determine the potential outcome of the comparison assuming that the\n       --  operands are valid and emit a warning when the comparison evaluates\n       --  to True or False only in the presence of invalid values.\n@@ -14977,14 +14985,16 @@ package body Exp_Ch4 is\n          True_Result  => True_Result,\n          False_Result => False_Result);\n \n-      --  The outcome is a decisive False or True, rewrite the operator\n+      --  The outcome is a decisive False or True, rewrite the operator into a\n+      --  non-static literal.\n \n       if False_Result or True_Result then\n          Rewrite (N,\n            Convert_To (Typ,\n              New_Occurrence_Of (Boolean_Literals (True_Result), Sloc (N))));\n \n          Analyze_And_Resolve (N, Typ);\n+         Set_Is_Static_Expression (N, False);\n          Warn_On_Known_Condition (N);\n       end if;\n    end Rewrite_Comparison;"}, {"sha": "6e75a91275f750c94b5d20f48ca6da16f0e177bf", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 58, "deletions": 60, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "patch": "@@ -3731,83 +3731,81 @@ package body Sem_Eval is\n             Raises_Constraint_Error (Right)\n          then\n             return;\n+         end if;\n \n          --  OK, we have the case where we may be able to do this fold\n \n-         else\n-            Left_Len  := Static_Length (Left);\n-            Right_Len := Static_Length (Right);\n+         Left_Len  := Static_Length (Left);\n+         Right_Len := Static_Length (Right);\n \n-            if Left_Len /= Uint_Minus_1\n-              and then Right_Len /= Uint_Minus_1\n-              and then Left_Len /= Right_Len\n-            then\n-               --  AI12-0201: comparison of string is static in Ada 202x\n+         if Left_Len /= Uint_Minus_1\n+           and then Right_Len /= Uint_Minus_1\n+           and then Left_Len /= Right_Len\n+         then\n+            --  AI12-0201: comparison of string is static in Ada 202x\n \n-               Fold_Uint\n-                 (N,\n-                  Test (Nkind (N) = N_Op_Ne),\n-                  Static => Ada_Version >= Ada_2020\n-                              and then Is_String_Type (Left_Typ));\n-               Warn_On_Known_Condition (N);\n-               return;\n-            end if;\n+            Fold_Uint\n+              (N,\n+               Test (Nkind (N) = N_Op_Ne),\n+               Static => Ada_Version >= Ada_2020\n+                           and then Is_String_Type (Left_Typ));\n+            Warn_On_Known_Condition (N);\n+            return;\n          end if;\n+      end if;\n \n       --  General case\n \n-      else\n-         --  Initialize the value of Is_Static_Expression. The value of Fold\n-         --  returned by Test_Expression_Is_Foldable is not needed since, even\n-         --  when some operand is a variable, we can still perform the static\n-         --  evaluation of the expression in some cases (for example, for a\n-         --  variable of a subtype of Integer we statically know that any value\n-         --  stored in such variable is smaller than Integer'Last).\n-\n-         Test_Expression_Is_Foldable\n-           (N, Left, Right, Is_Static_Expression, Fold);\n-\n-         --  Comparisons of scalars can give static results.\n-         --  In addition starting with Ada 202x (AI12-0201), comparison of\n-         --  strings can also give static results, and as noted above, we also\n-         --  allow for earlier Ada versions internally generated equality and\n-         --  inequality for strings.\n-         --  ??? The Comes_From_Source test below isn't correct and will accept\n-         --  some cases that are illegal in Ada 2012. and before. Now that\n-         --  Ada 202x has relaxed the rules, this doesn't really matter.\n-\n-         if Is_String_Type (Left_Typ) then\n-            if Ada_Version < Ada_2020\n-              and then (Comes_From_Source (N)\n-                         or else Nkind (N) not in N_Op_Eq | N_Op_Ne)\n-            then\n-               Is_Static_Expression := False;\n-               Set_Is_Static_Expression (N, False);\n-            end if;\n+      --  Initialize the value of Is_Static_Expression. The value of Fold\n+      --  returned by Test_Expression_Is_Foldable is not needed since, even\n+      --  when some operand is a variable, we can still perform the static\n+      --  evaluation of the expression in some cases (for example, for a\n+      --  variable of a subtype of Integer we statically know that any value\n+      --  stored in such variable is smaller than Integer'Last).\n \n-         elsif not Is_Scalar_Type (Left_Typ) then\n+      Test_Expression_Is_Foldable\n+        (N, Left, Right, Is_Static_Expression, Fold);\n+\n+      --  Comparisons of scalars can give static results.\n+      --  In addition starting with Ada 202x (AI12-0201), comparison of strings\n+      --  can also give static results, and as noted above, we also allow for\n+      --  earlier Ada versions internally generated equality and inequality for\n+      --  strings.\n+      --  ??? The Comes_From_Source test below isn't correct and will accept\n+      --  some cases that are illegal in Ada 2012. and before. Now that Ada\n+      --  202x has relaxed the rules, this doesn't really matter.\n+\n+      if Is_String_Type (Left_Typ) then\n+         if Ada_Version < Ada_2020\n+           and then (Comes_From_Source (N)\n+                      or else Nkind (N) not in N_Op_Eq | N_Op_Ne)\n+         then\n             Is_Static_Expression := False;\n             Set_Is_Static_Expression (N, False);\n          end if;\n \n-         --  For operators on universal numeric types called as functions with\n-         --  an explicit scope, determine appropriate specific numeric type,\n-         --  and diagnose possible ambiguity.\n+      elsif not Is_Scalar_Type (Left_Typ) then\n+         Is_Static_Expression := False;\n+         Set_Is_Static_Expression (N, False);\n+      end if;\n \n-         if Is_Universal_Numeric_Type (Left_Typ)\n-              and then\n-            Is_Universal_Numeric_Type (Right_Typ)\n-         then\n-            Op_Typ := Find_Universal_Operator_Type (N);\n-         end if;\n+      --  For operators on universal numeric types called as functions with an\n+      --  explicit scope, determine appropriate specific numeric type, and\n+      --  diagnose possible ambiguity.\n \n-         --  Attempt to fold the relational operator\n+      if Is_Universal_Numeric_Type (Left_Typ)\n+           and then\n+         Is_Universal_Numeric_Type (Right_Typ)\n+      then\n+         Op_Typ := Find_Universal_Operator_Type (N);\n+      end if;\n \n-         if Is_Static_Expression and then Is_Real_Type (Left_Typ) then\n-            Fold_Static_Real_Op;\n-         else\n-            Fold_General_Op (Is_Static_Expression);\n-         end if;\n+      --  Attempt to fold the relational operator\n+\n+      if Is_Static_Expression and then Is_Real_Type (Left_Typ) then\n+         Fold_Static_Real_Op;\n+      else\n+         Fold_General_Op (Is_Static_Expression);\n       end if;\n \n       --  For the case of a folded relational operator on a specific numeric"}, {"sha": "de0450e58b44dd97bffd5fa46b9649d9000f2a0f", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc7c52c1d9c9524e3ee0764808de343127b5e9fc/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=cc7c52c1d9c9524e3ee0764808de343127b5e9fc", "patch": "@@ -7458,14 +7458,17 @@ package body Sem_Res is\n       Analyze_Dimension (N);\n \n       --  Evaluate the relation (note we do this after the above check since\n-      --  this Eval call may change N to True/False. Skip this evaluation\n+      --  this Eval call may change N to True/False). Skip this evaluation\n       --  inside assertions, in order to keep assertions as written by users\n       --  for tools that rely on these, e.g. GNATprove for loop invariants.\n       --  Except evaluation is still performed even inside assertions for\n       --  comparisons between values of universal type, which are useless\n       --  for static analysis tools, and not supported even by GNATprove.\n+      --  ??? It is suspicious to disable evaluation only for comparison\n+      --  operators and not, let's say, for calls to static functions.\n \n-      if In_Assertion_Expr = 0\n+      if not GNATprove_Mode\n+        or else In_Assertion_Expr = 0\n         or else (Is_Universal_Numeric_Type (Etype (L))\n                    and then\n                  Is_Universal_Numeric_Type (Etype (R)))"}]}