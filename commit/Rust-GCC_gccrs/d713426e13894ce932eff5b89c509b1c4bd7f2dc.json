{"sha": "d713426e13894ce932eff5b89c509b1c4bd7f2dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDcxMzQyNmUxMzg5NGNlOTMyZWZmNWI4OWM1MDliMWM0YmQ3ZjJkYw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2015-02-26T19:43:54Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2015-02-26T19:43:54Z"}, "message": "re PR target/65192 ([avr-tiny] ICE in tiny_valid_direct_memory_access_range)\n\n\tPR target/65192\n\t* config/avr/avr-protos.h (tiny_valid_direct_memory_access_range):\n\tRemove.\n\t* config/avr/avr.c: Same.\n\t(avr_legitimate_address_p) <AVR_TINY, CONSTANT_ADDRESS_P>:\n\tRefuse any constant address not in 0..0xbf.\n\t* config/avr/avr.md (*mov<mode>, *movsf): Remove\n\ttiny_valid_direct_memory_access_range from insn conditions.\n\t(mov<mode>): Don't special-case expansion of avrtiny addresses.\n\nFrom-SVN: r221029", "tree": {"sha": "bbd926f21a71406c266f8144795890b14470ff56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbd926f21a71406c266f8144795890b14470ff56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d713426e13894ce932eff5b89c509b1c4bd7f2dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d713426e13894ce932eff5b89c509b1c4bd7f2dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d713426e13894ce932eff5b89c509b1c4bd7f2dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d713426e13894ce932eff5b89c509b1c4bd7f2dc/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7064d91e105099cb400966765a90360ccd2d875a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7064d91e105099cb400966765a90360ccd2d875a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7064d91e105099cb400966765a90360ccd2d875a"}], "stats": {"total": 116, "additions": 30, "deletions": 86}, "files": [{"sha": "40499826dc32ca02493bd0ac7349b3aa294fdb91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d713426e13894ce932eff5b89c509b1c4bd7f2dc", "patch": "@@ -1,3 +1,15 @@\n+2015-02-26  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/65192\n+\t* config/avr/avr-protos.h (tiny_valid_direct_memory_access_range):\n+\tRemove.\n+\t* config/avr/avr.c: Same.\n+\t(avr_legitimate_address_p) <AVR_TINY, CONSTANT_ADDRESS_P>:\n+\tRefuse any constant address not in 0..0xbf.\n+\t* config/avr/avr.md (*mov<mode>, *movsf): Remove\n+\ttiny_valid_direct_memory_access_range from insn conditions.\n+\t(mov<mode>): Don't special-case expansion of avrtiny addresses.\n+\n 2015-02-26  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/61142"}, {"sha": "b5de42709e593f0b58e1cfbd27b8d580e0f0814a", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=d713426e13894ce932eff5b89c509b1c4bd7f2dc", "patch": "@@ -46,7 +46,6 @@ extern void avr_init_cumulative_args (CUMULATIVE_ARGS*, tree, rtx, tree);\n \n #ifdef RTX_CODE\n extern int avr_hard_regno_call_part_clobbered (unsigned, machine_mode);\n-extern bool tiny_valid_direct_memory_access_range(rtx, machine_mode);\n extern const char *output_movqi (rtx_insn *insn, rtx operands[], int *l);\n extern const char *output_movhi (rtx_insn *insn, rtx operands[], int *l);\n extern const char *output_movsisf (rtx_insn *insn, rtx operands[], int *l);"}, {"sha": "07d7bafd54a5683c4bc727c0d36d7a9f00ae7832", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 10, "deletions": 31, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d713426e13894ce932eff5b89c509b1c4bd7f2dc", "patch": "@@ -1823,6 +1823,16 @@ avr_legitimate_address_p (machine_mode mode, rtx x, bool strict)\n       break;\n     }\n \n+  if (AVR_TINY\n+      && CONSTANT_ADDRESS_P (x))\n+    {\n+      /* avrtiny's load / store instructions only cover addresses 0..0xbf:\n+         IN / OUT range is 0..0x3f and LDS / STS can access 0x40..0xbf.  */\n+\n+      ok = (CONST_INT_P (x)\n+            && IN_RANGE (INTVAL (x), 0, 0xc0 - GET_MODE_SIZE (mode)));\n+    }\n+\n   if (avr_log.legitimate_address_p)\n     {\n       avr_edump (\"\\n%?: ret=%d, mode=%m strict=%d \"\n@@ -3210,37 +3220,6 @@ avr_out_xload (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n }\n \n \n-/* AVRTC-579\n-   If OP is a symbol or a constant expression with value > 0xbf\n-   return FALSE, otherwise TRUE.\n-   This check is used to avoid LDS / STS instruction with invalid memory\n-   access range (valid range 0x40..0xbf).  For I/O operand range 0x0..0x3f,\n-   IN / OUT instruction will be generated.  */\n-\n-bool\n-tiny_valid_direct_memory_access_range (rtx op, machine_mode mode)\n-{\n-  rtx x;\n-\n-  if (!AVR_TINY)\n-    return true;\n-\n-  x = XEXP (op,0);\n-\n-  if (MEM_P (op) && x && GET_CODE (x) == SYMBOL_REF)\n-    {\n-      return false;\n-    }\n-\n-  if (MEM_P (op) && x && (CONSTANT_ADDRESS_P (x))\n-      && !(IN_RANGE (INTVAL (x), 0, 0xC0 - GET_MODE_SIZE (mode))))\n-    {\n-      return false;\n-    }\n-\n-  return true;\n-}\n-\n const char*\n output_movqi (rtx_insn *insn, rtx operands[], int *plen)\n {"}, {"sha": "1b39ddbd158d13d3e831e1b1b527877aa2e9c4d3", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 8, "deletions": 54, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d713426e13894ce932eff5b89c509b1c4bd7f2dc/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d713426e13894ce932eff5b89c509b1c4bd7f2dc", "patch": "@@ -671,32 +671,6 @@\n         emit_insn (gen_load<mode>_libgcc (dest, src));\n         DONE;\n       }\n-\n-    // AVRTC-579\n-    // If the source operand expression is out of range for LDS instruction\n-    // copy source operand expression to register.\n-    // For tiny core, LDS instruction's memory access range limited to 0x40..0xbf.\n-\n-    if (!tiny_valid_direct_memory_access_range (src, <MODE>mode))\n-      {\n-        rtx srcx = XEXP (src, 0);\n-        operands[1] = src = replace_equiv_address (src, copy_to_mode_reg (GET_MODE (srcx), srcx));\n-        emit_move_insn (dest, src);\n-        DONE;\n-      }\n-\n-    // AVRTC-579\n-    // If the destination operand expression is out of range for STS instruction\n-    // copy destination operand expression to register.\n-    // For tiny core, STS instruction's memory access range limited to 0x40..0xbf.\n-\n-    if (!tiny_valid_direct_memory_access_range (dest, <MODE>mode))\n-      {\n-        rtx destx = XEXP (dest, 0);\n-        operands[0] = dest = replace_equiv_address (dest, copy_to_mode_reg (GET_MODE (destx), destx));\n-        emit_move_insn (dest, src);\n-        DONE;\n-      }\n   })\n \n ;;========================================================================\n@@ -713,13 +687,8 @@\n (define_insn \"mov<mode>_insn\"\n   [(set (match_operand:ALL1 0 \"nonimmediate_operand\" \"=r    ,d    ,Qm   ,r ,q,r,*r\")\n         (match_operand:ALL1 1 \"nox_general_operand\"   \"r Y00,n Ynn,r Y00,Qm,r,q,i\"))]\n-  \"(register_operand (operands[0], <MODE>mode)\n-    || reg_or_0_operand (operands[1], <MODE>mode))\n-   /* Skip if operands are out of lds/sts memory access range(0x40..0xbf)\n-      though access range is checked during define_expand, it is required\n-      here to avoid merging RTXes during combine pass.  */\n-   && tiny_valid_direct_memory_access_range (operands[0], QImode)\n-   && tiny_valid_direct_memory_access_range (operands[1], QImode)\"\n+  \"register_operand (operands[0], <MODE>mode)\n+    || reg_or_0_operand (operands[1], <MODE>mode)\"\n   {\n     return output_movqi (insn, operands, NULL);\n   }\n@@ -812,13 +781,8 @@\n (define_insn \"*mov<mode>\"\n   [(set (match_operand:ALL2 0 \"nonimmediate_operand\" \"=r,r  ,r,m    ,d,*r,q,r\")\n         (match_operand:ALL2 1 \"nox_general_operand\"   \"r,Y00,m,r Y00,i,i ,r,q\"))]\n-  \"(register_operand (operands[0], <MODE>mode)\n-    || reg_or_0_operand (operands[1], <MODE>mode))\n-   /* Skip if operands are out of lds/sts memory access range(0x40..0xbf)\n-      though access range is checked during define_expand, it is required\n-      here to avoid merging RTXes during combine pass.  */\n-   && tiny_valid_direct_memory_access_range (operands[0], HImode)\n-   && tiny_valid_direct_memory_access_range (operands[1], HImode)\"\n+  \"register_operand (operands[0], <MODE>mode)\n+   || reg_or_0_operand (operands[1], <MODE>mode)\"\n   {\n     return output_movhi (insn, operands, NULL);\n   }\n@@ -966,13 +930,8 @@\n (define_insn \"*mov<mode>\"\n   [(set (match_operand:ALL4 0 \"nonimmediate_operand\" \"=r,r  ,r ,Qm   ,!d,r\")\n         (match_operand:ALL4 1 \"nox_general_operand\"   \"r,Y00,Qm,r Y00,i ,i\"))]\n-  \"(register_operand (operands[0], <MODE>mode)\n-    || reg_or_0_operand (operands[1], <MODE>mode))\n-   /* Skip if operands are out of lds/sts memory access range(0x40..0xbf)\n-      though access range is checked during define_expand, it is required\n-      here to avoid merging RTXes during combine pass.  */\n-   && tiny_valid_direct_memory_access_range (operands[0], SImode)\n-   && tiny_valid_direct_memory_access_range (operands[1], SImode)\"\n+  \"register_operand (operands[0], <MODE>mode)\n+   || reg_or_0_operand (operands[1], <MODE>mode)\"\n   {\n     return output_movsisf (insn, operands, NULL);\n   }\n@@ -986,13 +945,8 @@\n (define_insn \"*movsf\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=r,r,r ,Qm,!d,r\")\n         (match_operand:SF 1 \"nox_general_operand\"   \"r,G,Qm,rG,F ,F\"))]\n-  \"(register_operand (operands[0], SFmode)\n-    || reg_or_0_operand (operands[1], SFmode))\n-   /* Skip if operands are out of lds/sts memory access range(0x40..0xbf)\n-      though access range is checked during define_expand, it is required\n-      here to avoid merging rtls during combine pass.  */\n-   && tiny_valid_direct_memory_access_range (operands[0], SFmode)\n-   && tiny_valid_direct_memory_access_range (operands[1], SFmode)\"\n+  \"register_operand (operands[0], SFmode)\n+   || reg_or_0_operand (operands[1], SFmode)\"\n   {\n     return output_movsisf (insn, operands, NULL);\n   }"}]}