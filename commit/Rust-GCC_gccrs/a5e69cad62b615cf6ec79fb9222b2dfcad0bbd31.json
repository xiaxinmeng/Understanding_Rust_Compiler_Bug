{"sha": "a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVlNjljYWQ2MmI2MTVjZjZlYzc5ZmI5MjIyYjJkZmNhZDBiYmQzMQ==", "commit": {"author": {"name": "Felix Yang", "email": "felix.yang@huawei.com", "date": "2014-12-07T15:01:23Z"}, "committer": {"name": "Fei Yang", "email": "fyang@gcc.gnu.org", "date": "2014-12-07T15:01:23Z"}, "message": "aarch64-simd.md (clrsb<mode>2, [...]): New patterns.\n\n        * config/aarch64/aarch64-simd.md (clrsb<mode>2, popcount<mode>2): New\n        patterns.\n        * config/aarch64/aarch64-simd-builtins.def (clrsb, popcount): New\n        builtins.\n        * config/aarch64/arm_neon.h (vcls_s8, vcls_s16, vcls_s32, vclsq_s8,\n        vclsq_s16, vclsq_s32, vcnt_p8, vcnt_s8, vcnt_u8, vcntq_p8, vcntq_s8,\n        vcntq_u8): Rewrite using builtin functions.\n\nCo-Authored-By: Shanyao Chen <chenshanyao@huawei.com>\n\nFrom-SVN: r218464", "tree": {"sha": "9e8418a1dc139b57bb2a19910f28b293251df645", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e8418a1dc139b57bb2a19910f28b293251df645"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/comments", "author": null, "committer": null, "parents": [{"sha": "07bdf21b53445f88ec4c5a21fbb5f0e2b0b31e9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07bdf21b53445f88ec4c5a21fbb5f0e2b0b31e9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07bdf21b53445f88ec4c5a21fbb5f0e2b0b31e9f"}], "stats": {"total": 237, "additions": 105, "deletions": 132}, "files": [{"sha": "41e6f3ea16ec4d246fa6b72e19f39d38ea72ef25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "patch": "@@ -1,3 +1,14 @@\n+2014-12-07  Felix Yang  <felix.yang@huawei.com>\n+\t    Shanyao Chen  <chenshanyao@huawei.com>\n+\n+\t* config/aarch64/aarch64-simd.md (clrsb<mode>2, popcount<mode>2): New\n+\tpatterns.\n+\t* config/aarch64/aarch64-simd-builtins.def (clrsb, popcount): New\n+\tbuiltins.\n+\t* config/aarch64/arm_neon.h (vcls_s8, vcls_s16, vcls_s32, vclsq_s8,\n+\tvclsq_s16, vclsq_s32, vcnt_p8, vcnt_s8, vcnt_u8, vcntq_p8, vcntq_s8,\n+\tvcntq_u8): Rewrite using builtin functions.\n+\n 2014-12-07  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* symtab.c (symtab_node::equal_address_to): New function."}, {"sha": "953eb53c2175ce83fa128f51266a2c21323dbada", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "patch": "@@ -44,8 +44,10 @@\n   BUILTIN_VDQF (UNOP, sqrt, 2)\n   BUILTIN_VD_BHSI (BINOP, addp, 0)\n   VAR1 (UNOP, addp, 0, di)\n+  BUILTIN_VDQ_BHSI (UNOP, clrsb, 2)\n   BUILTIN_VDQ_BHSI (UNOP, clz, 2)\n   BUILTIN_VS (UNOP, ctz, 2)\n+  BUILTIN_VB (UNOP, popcount, 2)\n \n   /* be_checked_get_lane does its own lane swapping, so not a lane index.  */\n   BUILTIN_VALL (GETREG, be_checked_get_lane, 0)"}, {"sha": "d44d774e6b83072af50f0a2b99013471bd53b3c3", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "patch": "@@ -1903,6 +1903,14 @@\n   DONE;\n })\n \n+(define_insn \"clrsb<mode>2\"\n+  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n+        (clrsb:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"cls\\\\t%0.<Vtype>, %1.<Vtype>\"\n+  [(set_attr \"type\" \"neon_cls<q>\")]\n+)\n+\n (define_insn \"clz<mode>2\"\n  [(set (match_operand:VDQ_BHSI 0 \"register_operand\" \"=w\")\n        (clz:VDQ_BHSI (match_operand:VDQ_BHSI 1 \"register_operand\" \"w\")))]\n@@ -1911,6 +1919,14 @@\n   [(set_attr \"type\" \"neon_cls<q>\")]\n )\n \n+(define_insn \"popcount<mode>2\"\n+  [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n+        (popcount:VB (match_operand:VB 1 \"register_operand\" \"w\")))]\n+  \"TARGET_SIMD\"\n+  \"cnt\\\\t%0.<Vbtype>, %1.<Vbtype>\"\n+  [(set_attr \"type\" \"neon_cnt<q>\")]\n+)\n+\n ;; 'across lanes' max and min ops.\n \n ;; Template for outputting a scalar, so we can create __builtins which can be"}, {"sha": "f3a87310dd51679e2ddc8812c37907142701928b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 76, "deletions": 132, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=a5e69cad62b615cf6ec79fb9222b2dfcad0bbd31", "patch": "@@ -5317,138 +5317,6 @@ vaddlvq_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vcls_s8 (int8x8_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"cls %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vcls_s16 (int16x4_t a)\n-{\n-  int16x4_t result;\n-  __asm__ (\"cls %0.4h,%1.4h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vcls_s32 (int32x2_t a)\n-{\n-  int32x2_t result;\n-  __asm__ (\"cls %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vclsq_s8 (int8x16_t a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"cls %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n-vclsq_s16 (int16x8_t a)\n-{\n-  int16x8_t result;\n-  __asm__ (\"cls %0.8h,%1.8h\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n-vclsq_s32 (int32x4_t a)\n-{\n-  int32x4_t result;\n-  __asm__ (\"cls %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vcnt_p8 (poly8x8_t a)\n-{\n-  poly8x8_t result;\n-  __asm__ (\"cnt %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vcnt_s8 (int8x8_t a)\n-{\n-  int8x8_t result;\n-  __asm__ (\"cnt %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vcnt_u8 (uint8x8_t a)\n-{\n-  uint8x8_t result;\n-  __asm__ (\"cnt %0.8b,%1.8b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n-vcntq_p8 (poly8x16_t a)\n-{\n-  poly8x16_t result;\n-  __asm__ (\"cnt %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n-vcntq_s8 (int8x16_t a)\n-{\n-  int8x16_t result;\n-  __asm__ (\"cnt %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n-vcntq_u8 (uint8x16_t a)\n-{\n-  uint8x16_t result;\n-  __asm__ (\"cnt %0.16b,%1.16b\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n #define vcopyq_lane_f32(a, b, c, d)                                     \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -14082,6 +13950,44 @@ vcltzd_f64 (float64_t __a)\n   return __a < 0.0 ? -1ll : 0ll;\n }\n \n+/* vcls.  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vcls_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_clrsbv8qi (__a);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vcls_s16 (int16x4_t __a)\n+{\n+  return __builtin_aarch64_clrsbv4hi (__a);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vcls_s32 (int32x2_t __a)\n+{\n+  return __builtin_aarch64_clrsbv2si (__a);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vclsq_s8 (int8x16_t __a)\n+{\n+  return __builtin_aarch64_clrsbv16qi (__a);\n+}\n+\n+__extension__ static __inline int16x8_t __attribute__ ((__always_inline__))\n+vclsq_s16 (int16x8_t __a)\n+{\n+  return __builtin_aarch64_clrsbv8hi (__a);\n+}\n+\n+__extension__ static __inline int32x4_t __attribute__ ((__always_inline__))\n+vclsq_s32 (int32x4_t __a)\n+{\n+  return __builtin_aarch64_clrsbv4si (__a);\n+}\n+\n /* vclz.  */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n@@ -14156,6 +14062,44 @@ vclzq_u32 (uint32x4_t __a)\n   return (uint32x4_t)__builtin_aarch64_clzv4si ((int32x4_t)__a);\n }\n \n+/* vcnt.  */\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vcnt_p8 (poly8x8_t __a)\n+{\n+  return (poly8x8_t) __builtin_aarch64_popcountv8qi ((int8x8_t) __a);\n+}\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vcnt_s8 (int8x8_t __a)\n+{\n+  return __builtin_aarch64_popcountv8qi (__a);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vcnt_u8 (uint8x8_t __a)\n+{\n+  return (uint8x8_t) __builtin_aarch64_popcountv8qi ((int8x8_t) __a);\n+}\n+\n+__extension__ static __inline poly8x16_t __attribute__ ((__always_inline__))\n+vcntq_p8 (poly8x16_t __a)\n+{\n+  return (poly8x16_t) __builtin_aarch64_popcountv16qi ((int8x16_t) __a);\n+}\n+\n+__extension__ static __inline int8x16_t __attribute__ ((__always_inline__))\n+vcntq_s8 (int8x16_t __a)\n+{\n+  return __builtin_aarch64_popcountv16qi (__a);\n+}\n+\n+__extension__ static __inline uint8x16_t __attribute__ ((__always_inline__))\n+vcntq_u8 (uint8x16_t __a)\n+{\n+  return (uint8x16_t) __builtin_aarch64_popcountv16qi ((int8x16_t) __a);\n+}\n+\n /* vcvt (double -> float).  */\n \n __extension__ static __inline float32x2_t __attribute__ ((__always_inline__))"}]}