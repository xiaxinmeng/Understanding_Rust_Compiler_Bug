{"sha": "109148dd16e4bcd50faee19c49082de69d0ba26e", "node_id": "C_kwDOANBUbNoAKDEwOTE0OGRkMTZlNGJjZDUwZmFlZTE5YzQ5MDgyZGU2OWQwYmEyNmU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-05T10:54:45Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-05T10:54:45Z"}, "message": "match.pd: Don't fold nan < x etc. for -ftrapping-math [PR106805]\n\nAs reported in the PR, the following pr106805.c testcase is miscompiled\nwith the default -ftrapping-math, because we fold all the comparisons into\nconstants and don't raise any exceptions.\n\nThe match.pd pattern handles just simple comparisons, from those\nEQ/NE are quiet and don't raise exceptions on anything but sNaN, while\nGT/GE/LT/LE are signaling and do raise exceptions even on qNaN.\n\nfold_relational_const handles this IMHO correctly:\n      /* Handle the cases where either operand is a NaN.  */\n      if (real_isnan (c0) || real_isnan (c1))\n        {\n          switch (code)\n            {\n            case EQ_EXPR:\n            case ORDERED_EXPR:\n              result = 0;\n              break;\n\n            case NE_EXPR:\n            case UNORDERED_EXPR:\n            case UNLT_EXPR:\n            case UNLE_EXPR:\n            case UNGT_EXPR:\n            case UNGE_EXPR:\n            case UNEQ_EXPR:\n              result = 1;\n              break;\n\n            case LT_EXPR:\n            case LE_EXPR:\n            case GT_EXPR:\n            case GE_EXPR:\n            case LTGT_EXPR:\n              if (flag_trapping_math)\n                return NULL_TREE;\n              result = 0;\n              break;\n\n            default:\n              gcc_unreachable ();\n            }\n\n          return constant_boolean_node (result, type);\n        }\nby folding the signaling comparisons only if -fno-trapping-math.\nThe following patch does the same in match.pd.\n\nUnfortunately the pr106805.c testcase still fails, but no longer because of\nmatch.pd, but on the trunk because of the still unresolved ranger problems\n(same issue as for fold-overflow-1.c etc.) and on 12 branch (and presumably\ntrunk too) somewhere during expansion the comparisons are also expanded\ninto constants (which is ok for -fno-trapping-math, but not ok with that).\n\nThough, I think the patch is a small step in the direction, so I'd like\nto commit this patch without the gcc.dg/pr106805.c testcase for now.\n\n2022-12-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/106805\n\t* match.pd (cmp\u00a0@0\u00a0REAL_CST@1): Don't optimize x cmp NaN\n\tor NaN cmp x to false/true for cmp >/>=/</<= if -ftrapping-math.\n\n\t* c-c++-common/pr57371-4.c: Revert 2021-09-19 changes.\n\t* c-c++-common/pr57371-5.c: New test.\n\t* gcc.c-torture/execute/ieee/fp-cmp-6.x: Add -fno-trapping-math.\n\t* gcc.c-torture/execute/ieee/fp-cmp-9.c: New test.\n\t* gcc.c-torture/execute/ieee/fp-cmp-9.x: New file.", "tree": {"sha": "9975835a5d714fb823b32abb3739c4daee73ec49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9975835a5d714fb823b32abb3739c4daee73ec49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/109148dd16e4bcd50faee19c49082de69d0ba26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109148dd16e4bcd50faee19c49082de69d0ba26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/109148dd16e4bcd50faee19c49082de69d0ba26e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/109148dd16e4bcd50faee19c49082de69d0ba26e/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4500baaccb6e4d696e223c338bbdf7705c3646dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4500baaccb6e4d696e223c338bbdf7705c3646dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4500baaccb6e4d696e223c338bbdf7705c3646dd"}], "stats": {"total": 105, "additions": 101, "deletions": 4}, "files": [{"sha": "f48cbd9b73baacf1c0368fb9a42728bbcc6adf2d", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -5146,12 +5146,14 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (cmp { build_real (TREE_TYPE (@0), dconst0); } @1))\n    /* x != NaN is always true, other ops are always false.  */\n    (if (REAL_VALUE_ISNAN (TREE_REAL_CST (@1))\n+\t&& (cmp == EQ_EXPR || cmp == NE_EXPR || !flag_trapping_math)\n \t&& !tree_expr_signaling_nan_p (@1)\n \t&& !tree_expr_maybe_signaling_nan_p (@0))\n     { constant_boolean_node (cmp == NE_EXPR, type); })\n    /* NaN != y is always true, other ops are always false.  */\n    (if (TREE_CODE (@0) == REAL_CST\n \t&& REAL_VALUE_ISNAN (TREE_REAL_CST (@0))\n+\t&& (cmp == EQ_EXPR || cmp == NE_EXPR || !flag_trapping_math)\n         && !tree_expr_signaling_nan_p (@0)\n         && !tree_expr_signaling_nan_p (@1))\n     { constant_boolean_node (cmp == NE_EXPR, type); })"}, {"sha": "f43f7c22419a56661ebcb284fa648f478be1833f", "filename": "gcc/testsuite/c-c++-common/pr57371-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -13,25 +13,25 @@ void nonfinite(unsigned short x) {\n   {\n     volatile int nonfinite_1;\n     nonfinite_1 = (float) x > QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_1 = 0\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_1 = \\\\(float\\\\)\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_2;\n     nonfinite_2 = (float) x >= QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_2 = 0\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_2 = \\\\(float\\\\)\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_3;\n     nonfinite_3 = (float) x < QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_3 = 0\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_3 = \\\\(float\\\\)\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_4;\n     nonfinite_4 = (float) x <= QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_4 = 0\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_4 = \\\\(float\\\\)\" \"original\" } } */\n   }\n \n   {"}, {"sha": "8e18b0a73138565585a053488c85905c6fab00b4", "filename": "gcc/testsuite/c-c++-common/pr57371-5.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-5.c?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fno-signaling-nans -fno-trapping-math -fdump-tree-original\" } */\n+\n+/* We can not get rid of comparison in tests below because of\n+   pending NaN exceptions.\n+\n+   TODO: avoid under -fno-trapping-math.  */\n+\n+#define QNAN __builtin_nanf (\"0\")\n+\n+void nonfinite(unsigned short x) {\n+  {\n+    volatile int nonfinite_1;\n+    nonfinite_1 = (float) x > QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_1 = 0\" \"original\" } } */\n+  }\n+\n+  {\n+    volatile int nonfinite_2;\n+    nonfinite_2 = (float) x >= QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_2 = 0\" \"original\" } } */\n+  }\n+\n+  {\n+    volatile int nonfinite_3;\n+    nonfinite_3 = (float) x < QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_3 = 0\" \"original\" } } */\n+  }\n+\n+  {\n+    volatile int nonfinite_4;\n+    nonfinite_4 = (float) x <= QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_4 = 0\" \"original\" } } */\n+  }\n+\n+  {\n+    volatile int nonfinite_11;\n+    nonfinite_11 = (float) x == QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_11 = 0\" \"original\" } } */\n+  }\n+\n+  {\n+    volatile int nonfinite_12;\n+    nonfinite_12 = (float) x != QNAN;\n+    /* { dg-final { scan-tree-dump \"nonfinite_12 = 1\" \"original\" } } */\n+  }\n+}"}, {"sha": "6655a07ab3c4e2729f784aad6f8711aee3b499a5", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-6.x", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-6.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-6.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-6.x?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -1,3 +1,4 @@\n+lappend additional_flags \"-fno-trapping-math\"\n # The ARM VxWorks kernel uses an external floating-point library in\n # which routines like __ledf2 are just aliases for __cmpdf2.  These\n # routines therefore don't handle NaNs correctly."}, {"sha": "71726346848c25cfbee6393f2d069cb83a27069e", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-9.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.c?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -0,0 +1,31 @@\n+\n+const double dnan = 1.0/0.0 - 1.0/0.0;\n+double x = 1.0;\n+\n+extern void link_error (void);\n+extern void abort (void);\n+\n+main ()\n+{\n+#if ! defined (__vax__) && ! defined (_CRAY)\n+  /* NaN is an IEEE unordered operand.  All these test should be false.  */\n+  if (dnan == dnan)\n+    link_error ();\n+  if (dnan != x)\n+    x = 1.0;\n+  else\n+    link_error ();\n+\n+  if (dnan == x)\n+    link_error ();\n+#endif\n+  exit (0);\n+}\n+\n+#ifndef __OPTIMIZE__\n+void link_error (void)\n+{\n+  abort ();\n+}\n+#endif\n+"}, {"sha": "e7c051d8fe066ea11f8bfc6c14c4b2dc37a4d8d0", "filename": "gcc/testsuite/gcc.c-torture/execute/ieee/fp-cmp-9.x", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/109148dd16e4bcd50faee19c49082de69d0ba26e/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fieee%2Ffp-cmp-9.x?ref=109148dd16e4bcd50faee19c49082de69d0ba26e", "patch": "@@ -0,0 +1,16 @@\n+# The ARM VxWorks kernel uses an external floating-point library in\n+# which routines like __ledf2 are just aliases for __cmpdf2.  These\n+# routines therefore don't handle NaNs correctly.\n+if [istarget \"arm*-*-vxworks*\"] {\n+    set torture_eval_before_execute {\n+\tglobal compiler_conditional_xfail_data\n+\tset compiler_conditional_xfail_data {\n+\t    \"The ARM kernel uses a flawed floating-point library.\"\n+\t    { \"*-*-*\" }\n+\t    { \"-O0\" }\n+\t    { \"-mrtp\" }\n+\t}\n+    }\n+}\n+\n+return 0"}]}