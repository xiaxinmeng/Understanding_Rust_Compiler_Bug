{"sha": "2bbe1af01db19b67cf668384b096e0e6a01765e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmJiZTFhZjAxZGIxOWI2N2NmNjY4Mzg0YjA5NmUwZTZhMDE3NjVlNg==", "commit": {"author": {"name": "Mark Wielaard", "email": "mark@klomp.org", "date": "2021-09-05T22:48:09Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-09-06T09:31:35Z"}, "message": "Parse optional visibility for enum item\n\nSyntactically enum items can have a visibility. The visibility has to\nbe removed (through a cfg attribute or macro) before they get lowered.\nThe semantic checking will be done when we implement lowering enum items.\n\nMake the AST EnumItem class a VisItem. This simplifies things a little\nfor cloning items, handling outer attributes and will help when adding\nEnumItem (sub)classes to AST visitors (so they can be handled as\nItems). Also add a get_identifier method to Enum and EnumItem.", "tree": {"sha": "55446764ab88b4d4a09f30e57364012baf42cd24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55446764ab88b4d4a09f30e57364012baf42cd24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2bbe1af01db19b67cf668384b096e0e6a01765e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbe1af01db19b67cf668384b096e0e6a01765e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2bbe1af01db19b67cf668384b096e0e6a01765e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2bbe1af01db19b67cf668384b096e0e6a01765e6/comments", "author": null, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50623899998de5a8ffe47227a351c2b3dd29aa0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50623899998de5a8ffe47227a351c2b3dd29aa0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50623899998de5a8ffe47227a351c2b3dd29aa0a"}], "stats": {"total": 76, "additions": 38, "deletions": 38}, "files": [{"sha": "2477d7400a7f11752aba1d5455fa050f04d6413e", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=2bbe1af01db19b67cf668384b096e0e6a01765e6", "patch": "@@ -3311,10 +3311,8 @@ StructExprStructFields::as_string () const\n std::string\n EnumItem::as_string () const\n {\n-  // outer attributes\n-  std::string str = append_attributes (outer_attrs, OUTER);\n-\n-  str += \"\\n\" + variant_name;\n+  std::string str = VisItem::as_string ();\n+  str += variant_name;\n \n   return str;\n }"}, {"sha": "881a888f0927a35771317e51ce34163d92d98937", "filename": "gcc/rust/ast/rust-item.h", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fast%2Frust-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fast%2Frust-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-item.h?ref=2bbe1af01db19b67cf668384b096e0e6a01765e6", "patch": "@@ -2119,53 +2119,44 @@ class TupleStruct : public Struct\n };\n \n /* An item used in an \"enum\" tagged union - not abstract: base represents a\n- * name-only enum */\n-class EnumItem\n+ * name-only enum. EnumItems (variants) syntactically allow a Visibility\n+ * annotation. */\n+class EnumItem : public VisItem\n {\n-  // bool has_attrs;\n-  std::vector<Attribute> outer_attrs;\n-\n   Identifier variant_name;\n \n   Location locus;\n \n public:\n   virtual ~EnumItem () {}\n \n-  // Returns whether enum item has outer attributes.\n-  bool has_outer_attrs () const { return !outer_attrs.empty (); }\n-\n-  EnumItem (Identifier variant_name, std::vector<Attribute> outer_attrs,\n-\t    Location locus)\n-    : outer_attrs (std::move (outer_attrs)),\n+  EnumItem (Identifier variant_name, Visibility vis,\n+\t    std::vector<Attribute> outer_attrs, Location locus)\n+    : VisItem (std::move (vis), std::move (outer_attrs)),\n       variant_name (std::move (variant_name)), locus (locus)\n   {}\n \n   // Unique pointer custom clone function\n   std::unique_ptr<EnumItem> clone_enum_item () const\n   {\n-    return std::unique_ptr<EnumItem> (clone_enum_item_impl ());\n+    return std::unique_ptr<EnumItem> (clone_item_impl ());\n   }\n \n   virtual std::string as_string () const;\n \n   // not pure virtual as not abstract\n   virtual void accept_vis (ASTVisitor &vis);\n \n+  Location get_locus () const { return locus; }\n+\n+  Identifier get_identifier () const { return variant_name; }\n+\n   // Based on idea that name is never empty.\n   void mark_for_strip () { variant_name = \"\"; }\n   bool is_marked_for_strip () const { return variant_name.empty (); }\n \n-  // TODO: this mutable getter seems really dodgy. Think up better way.\n-  std::vector<Attribute> &get_outer_attrs () { return outer_attrs; }\n-  const std::vector<Attribute> &get_outer_attrs () const { return outer_attrs; }\n-\n protected:\n-  // Clone function implementation as (not pure) virtual method\n-  virtual EnumItem *clone_enum_item_impl () const\n-  {\n-    return new EnumItem (*this);\n-  }\n+  EnumItem *clone_item_impl () const override { return new EnumItem (*this); }\n };\n \n // A tuple item used in an \"enum\" tagged union\n@@ -2178,9 +2169,11 @@ class EnumItemTuple : public EnumItem\n   // Returns whether tuple enum item has tuple fields.\n   bool has_tuple_fields () const { return !tuple_fields.empty (); }\n \n-  EnumItemTuple (Identifier variant_name, std::vector<TupleField> tuple_fields,\n+  EnumItemTuple (Identifier variant_name, Visibility vis,\n+\t\t std::vector<TupleField> tuple_fields,\n \t\t std::vector<Attribute> outer_attrs, Location locus)\n-    : EnumItem (std::move (variant_name), std::move (outer_attrs), locus),\n+    : EnumItem (std::move (variant_name), std::move (vis),\n+\t\tstd::move (outer_attrs), locus),\n       tuple_fields (std::move (tuple_fields))\n   {}\n \n@@ -2197,7 +2190,7 @@ class EnumItemTuple : public EnumItem\n \n protected:\n   // Clone function implementation as (not pure) virtual method\n-  EnumItemTuple *clone_enum_item_impl () const override\n+  EnumItemTuple *clone_item_impl () const override\n   {\n     return new EnumItemTuple (*this);\n   }\n@@ -2213,10 +2206,11 @@ class EnumItemStruct : public EnumItem\n   // Returns whether struct enum item has struct fields.\n   bool has_struct_fields () const { return !struct_fields.empty (); }\n \n-  EnumItemStruct (Identifier variant_name,\n+  EnumItemStruct (Identifier variant_name, Visibility vis,\n \t\t  std::vector<StructField> struct_fields,\n \t\t  std::vector<Attribute> outer_attrs, Location locus)\n-    : EnumItem (std::move (variant_name), std::move (outer_attrs), locus),\n+    : EnumItem (std::move (variant_name), std::move (vis),\n+\t\tstd::move (outer_attrs), locus),\n       struct_fields (std::move (struct_fields))\n   {}\n \n@@ -2233,7 +2227,7 @@ class EnumItemStruct : public EnumItem\n \n protected:\n   // Clone function implementation as (not pure) virtual method\n-  EnumItemStruct *clone_enum_item_impl () const override\n+  EnumItemStruct *clone_item_impl () const override\n   {\n     return new EnumItemStruct (*this);\n   }\n@@ -2245,9 +2239,11 @@ class EnumItemDiscriminant : public EnumItem\n   std::unique_ptr<Expr> expression;\n \n public:\n-  EnumItemDiscriminant (Identifier variant_name, std::unique_ptr<Expr> expr,\n+  EnumItemDiscriminant (Identifier variant_name, Visibility vis,\n+\t\t\tstd::unique_ptr<Expr> expr,\n \t\t\tstd::vector<Attribute> outer_attrs, Location locus)\n-    : EnumItem (std::move (variant_name), std::move (outer_attrs), locus),\n+    : EnumItem (std::move (variant_name), std::move (vis),\n+\t\tstd::move (outer_attrs), locus),\n       expression (std::move (expr))\n   {}\n \n@@ -2284,7 +2280,7 @@ class EnumItemDiscriminant : public EnumItem\n \n protected:\n   // Clone function implementation as (not pure) virtual method\n-  EnumItemDiscriminant *clone_enum_item_impl () const override\n+  EnumItemDiscriminant *clone_item_impl () const override\n   {\n     return new EnumItemDiscriminant (*this);\n   }\n@@ -2374,6 +2370,8 @@ class Enum : public VisItem\n \n   void accept_vis (ASTVisitor &vis) override;\n \n+  Identifier get_identifier () const { return enum_name; }\n+\n   // Invalid if name is empty, so base stripping on that.\n   void mark_for_strip () override { enum_name = \"\"; }\n   bool is_marked_for_strip () const override { return enum_name.empty (); }"}, {"sha": "8cce9332350847dc044c07e9efb023dddfd16840", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2bbe1af01db19b67cf668384b096e0e6a01765e6/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=2bbe1af01db19b67cf668384b096e0e6a01765e6", "patch": "@@ -4431,6 +4431,9 @@ Parser<ManagedTokenSource>::parse_enum_item ()\n   // parse outer attributes if they exist\n   AST::AttrVec outer_attrs = parse_outer_attributes ();\n \n+  // parse visibility, which may or may not exist\n+  AST::Visibility vis = parse_visibility ();\n+\n   // parse name for enum item, which is required\n   const_TokenPtr item_name_tok = lexer.peek_token ();\n   if (item_name_tok->get_id () != IDENTIFIER)\n@@ -4463,7 +4466,7 @@ Parser<ManagedTokenSource>::parse_enum_item ()\n \t  }\n \n \treturn std::unique_ptr<AST::EnumItemTuple> (new AST::EnumItemTuple (\n-\t  std::move (item_name), std::move (tuple_fields),\n+\t  std::move (item_name), std::move (vis), std::move (tuple_fields),\n \t  std::move (outer_attrs), item_name_tok->get_locus ()));\n       }\n       case LEFT_CURLY: {\n@@ -4480,7 +4483,7 @@ Parser<ManagedTokenSource>::parse_enum_item ()\n \t  }\n \n \treturn std::unique_ptr<AST::EnumItemStruct> (new AST::EnumItemStruct (\n-\t  std::move (item_name), std::move (struct_fields),\n+\t  std::move (item_name), std::move (vis), std::move (struct_fields),\n \t  std::move (outer_attrs), item_name_tok->get_locus ()));\n       }\n       case EQUAL: {\n@@ -4490,15 +4493,16 @@ Parser<ManagedTokenSource>::parse_enum_item ()\n \tstd::unique_ptr<AST::Expr> discriminant_expr = parse_expr ();\n \n \treturn std::unique_ptr<AST::EnumItemDiscriminant> (\n-\t  new AST::EnumItemDiscriminant (std::move (item_name),\n+\t  new AST::EnumItemDiscriminant (std::move (item_name), std::move (vis),\n \t\t\t\t\t std::move (discriminant_expr),\n \t\t\t\t\t std::move (outer_attrs),\n \t\t\t\t\t item_name_tok->get_locus ()));\n       }\n     default:\n       // regular enum with just an identifier\n       return std::unique_ptr<AST::EnumItem> (\n-\tnew AST::EnumItem (std::move (item_name), std::move (outer_attrs),\n+\tnew AST::EnumItem (std::move (item_name), std::move (vis),\n+\t\t\t   std::move (outer_attrs),\n \t\t\t   item_name_tok->get_locus ()));\n     }\n }"}]}