{"sha": "d7b35f22be0a732140022245c766fa323f1a768d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDdiMzVmMjJiZTBhNzMyMTQwMDIyMjQ1Yzc2NmZhMzIzZjFhNzY4ZA==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-07T20:45:57Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2015-06-07T20:45:57Z"}, "message": "stl_tree.h (_Rb_tree<>::__is_transparent<>): Move to outer scope and rename to ...\n\n2015-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h (_Rb_tree<>::__is_transparent<>): Move to\n\touter scope and rename to ...\n\t(std::__hash_is_transparent<>): ... this.\n\t* include/debug/stl_map.h (map::find<>,\n\tmap::lower_bound<>, map::upper_bound<>, map::equal_range<>): New\n\tmember function templates to perform heterogeneous lookup.\n\t* include/debug/stl_multimap.h (multimap::find<>,\n\tmultimap::lower_bound<>, multimap::upper_bound<>,\n\tmultimap::equal_range<>): Likewise.\n\t* include/debug/stl_multiset.h (multiset::find<>,\n\tmultiset::lower_bound<>, multiset::upper_bound<>,\n\tmultiset::equal_range<>): Likewise.\n\t* include/debug/stl_set.h (set::find<>,\n\tset::lower_bound<>, set::upper_bound<>, set::equal_range<>): Likewise.\n\t* include/profile/stl_map.h (map::find<>, map::count<>,\n\tmap::lower_bound<>, map::upper_bound<>, map::equal_range<>): Likewise.\n\t* include/profile/stl_multimap.h (multimap::find<>, multimap::count<>,\n\tmultimap::lower_bound<>, multimap::upper_bound<>,\n\tmultimap::equal_range<>): Likewise.\n\t* include/profile/stl_multiset.h (multiset::find<>, multiset::count<>,\n\tmultiset::lower_bound<>, multiset::upper_bound<>,\n\tmultiset::equal_range<>): Likewise.\n\t* include/profile/stl_set.h (set::find<>, set::count<>,\n\tset::lower_bound<>, set::upper_bound<>, set::equal_range<>): Likewise.\n\t* testsuite/23_containers/map/operations/1.cc: Check const variants.\n\t* testsuite/23_containers/multimap/operations/1.cc: Likewise.\n\t* testsuite/23_containers/multiset/operations/1.cc: Likewise.\n\t* testsuite/23_containers/set/operations/1.cc: Likewise.\n\nFrom-SVN: r224200", "tree": {"sha": "a3f26344042af4a988ffe424b16a9caa1041743a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3f26344042af4a988ffe424b16a9caa1041743a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7b35f22be0a732140022245c766fa323f1a768d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b35f22be0a732140022245c766fa323f1a768d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7b35f22be0a732140022245c766fa323f1a768d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7b35f22be0a732140022245c766fa323f1a768d/comments", "author": null, "committer": null, "parents": [{"sha": "3d2c9e18ff803d8cf4f40028aa5e6b8b1ee79d01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d2c9e18ff803d8cf4f40028aa5e6b8b1ee79d01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d2c9e18ff803d8cf4f40028aa5e6b8b1ee79d01"}], "stats": {"total": 960, "additions": 873, "deletions": 87}, "files": [{"sha": "3bdcdad2ab47822d8382d65685773f9d3e114703", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -1,3 +1,34 @@\n+2015-06-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_tree.h (_Rb_tree<>::__is_transparent<>): Move to\n+\touter scope and rename to ...\n+\t(std::__hash_is_transparent<>): ... this.\n+\t* include/debug/stl_map.h (map::find<>,\n+\tmap::lower_bound<>, map::upper_bound<>, map::equal_range<>): New\n+\tmember function templates to perform heterogeneous lookup.\n+\t* include/debug/stl_multimap.h (multimap::find<>,\n+\tmultimap::lower_bound<>, multimap::upper_bound<>,\n+\tmultimap::equal_range<>): Likewise.\n+\t* include/debug/stl_multiset.h (multiset::find<>,\n+\tmultiset::lower_bound<>, multiset::upper_bound<>,\n+\tmultiset::equal_range<>): Likewise.\n+\t* include/debug/stl_set.h (set::find<>,\n+\tset::lower_bound<>, set::upper_bound<>, set::equal_range<>): Likewise.\n+\t* include/profile/stl_map.h (map::find<>, map::count<>,\n+\tmap::lower_bound<>, map::upper_bound<>, map::equal_range<>): Likewise.\n+\t* include/profile/stl_multimap.h (multimap::find<>, multimap::count<>,\n+\tmultimap::lower_bound<>, multimap::upper_bound<>,\n+\tmultimap::equal_range<>): Likewise.\n+\t* include/profile/stl_multiset.h (multiset::find<>, multiset::count<>,\n+\tmultiset::lower_bound<>, multiset::upper_bound<>,\n+\tmultiset::equal_range<>): Likewise.\n+\t* include/profile/stl_set.h (set::find<>, set::count<>,\n+\tset::lower_bound<>, set::upper_bound<>, set::equal_range<>): Likewise.\n+\t* testsuite/23_containers/map/operations/1.cc: Check const variants.\n+\t* testsuite/23_containers/multimap/operations/1.cc: Likewise.\n+\t* testsuite/23_containers/multiset/operations/1.cc: Likewise.\n+\t* testsuite/23_containers/set/operations/1.cc: Likewise.\n+\n 2015-06-05  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/manual/status_cxx2017.xml: Update status tables."}, {"sha": "0ba15ab2b4b4e83641f244b60264362799b5080f", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 28, "deletions": 17, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -341,6 +341,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n \t\t\t       _Rb_tree_node_base& __header) throw ();\n \n+#if __cplusplus > 201103L\n+  template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>\n+    struct __has_is_transparent\n+    { };\n+\n+  template<typename _Cmp, typename _SfinaeType>\n+    struct __has_is_transparent<_Cmp, _SfinaeType,\n+\t\t\t\t__void_t<typename _Cmp::is_transparent>>\n+    { typedef void type; };\n+#endif\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n            typename _Compare, typename _Alloc = allocator<_Val> >\n@@ -1109,16 +1119,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       equal_range(const key_type& __k) const;\n \n #if __cplusplus > 201103L\n-      template<typename _Cmp, typename _Kt, typename = __void_t<>>\n-\tstruct __is_transparent { };\n-\n-      template<typename _Cmp, typename _Kt>\n-\tstruct\n-\t__is_transparent<_Cmp, _Kt, __void_t<typename _Cmp::is_transparent>>\n-\t{ typedef void type; };\n-\n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \titerator\n \t_M_find_tr(const _Kt& __k)\n \t{\n@@ -1127,7 +1130,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_find_tr(const _Kt& __k) const\n \t{\n@@ -1138,7 +1142,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tsize_type\n \t_M_count_tr(const _Kt& __k) const\n \t{\n@@ -1147,7 +1152,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \titerator\n \t_M_lower_bound_tr(const _Kt& __k)\n \t{\n@@ -1156,7 +1162,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_lower_bound_tr(const _Kt& __k) const\n \t{\n@@ -1174,7 +1181,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \titerator\n \t_M_upper_bound_tr(const _Kt& __k)\n \t{\n@@ -1183,7 +1191,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tconst_iterator\n \t_M_upper_bound_tr(const _Kt& __k) const\n \t{\n@@ -1201,7 +1210,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tpair<iterator, iterator>\n \t_M_equal_range_tr(const _Kt& __k)\n \t{\n@@ -1211,7 +1221,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename _Kt,\n-\t       typename _Req = typename __is_transparent<_Compare, _Kt>::type>\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n \tpair<const_iterator, const_iterator>\n \t_M_equal_range_tr(const _Kt& __k) const\n \t{"}, {"sha": "688fb99d499e733e26b511cc60f44b2feff38b96", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -412,28 +412,82 @@ namespace __debug\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       using _Base::count;\n \n       iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n       const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -443,6 +497,18 @@ namespace __debug\n \t\t\t      iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n@@ -452,6 +518,18 @@ namespace __debug\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "e2c806131f0dda411d726c59541bed6e280fd92b", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -393,28 +393,82 @@ namespace __debug\n       find(const key_type& __x)\n       { return iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       const_iterator\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       using _Base::count;\n \n       iterator\n       lower_bound(const key_type& __x)\n       { return iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       const_iterator\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n       const_iterator\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -424,6 +478,18 @@ namespace __debug\n \t\t\t      iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n@@ -433,6 +499,18 @@ namespace __debug\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT { return *this; }\n "}, {"sha": "b4d738f4bec777bc804c2da4ec880b92a8cedac1", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -386,6 +386,22 @@ namespace __debug\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{ return { _Base::find(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       using _Base::count;\n \n       iterator\n@@ -398,6 +414,22 @@ namespace __debug\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{ return { _Base::lower_bound(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n@@ -408,6 +440,22 @@ namespace __debug\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{ return { _Base::upper_bound(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -428,6 +476,28 @@ namespace __debug\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT { return *this; }\n "}, {"sha": "c13ee811aaa1aef5b85b0df3b2332566ba00a955", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 73, "deletions": 3, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -393,6 +393,22 @@ namespace __debug\n       find(const key_type& __x) const\n       { return const_iterator(_Base::find(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{ return { _Base::find(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{ return { _Base::find(__x), this }; }\n+#endif\n+\n       using _Base::count;\n \n       iterator\n@@ -405,6 +421,22 @@ namespace __debug\n       lower_bound(const key_type& __x) const\n       { return const_iterator(_Base::lower_bound(__x), this); }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{ return { _Base::lower_bound(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{ return { _Base::lower_bound(__x), this }; }\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       { return iterator(_Base::upper_bound(__x), this); }\n@@ -415,7 +447,23 @@ namespace __debug\n       upper_bound(const key_type& __x) const\n       { return const_iterator(_Base::upper_bound(__x), this); }\n \n-      std::pair<iterator,iterator>\n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{ return { _Base::upper_bound(__x), this }; }\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{ return { _Base::upper_bound(__x), this }; }\n+#endif\n+\n+      std::pair<iterator, iterator>\n       equal_range(const key_type& __x)\n       {\n \tstd::pair<_Base_iterator, _Base_iterator> __res =\n@@ -426,15 +474,37 @@ namespace __debug\n \n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 214. set::find() missing const overload\n-      std::pair<const_iterator,const_iterator>\n+      std::pair<const_iterator, const_iterator>\n       equal_range(const key_type& __x) const\n       {\n-\tstd::pair<_Base_iterator, _Base_iterator> __res =\n+\tstd::pair<_Base_const_iterator, _Base_const_iterator> __res =\n \t_Base::equal_range(__x);\n \treturn std::make_pair(const_iterator(__res.first, this),\n \t\t\t      const_iterator(__res.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "210b9b478c64b70433f044ba98bc98c298c9434d", "filename": "libstdc++-v3/include/profile/map.h", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmap.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -429,20 +429,56 @@ namespace __profile\n \treturn iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       find(const key_type& __x) const\n       {\n \t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn const_iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       size_type\n       count(const key_type& __x) const\n       {\n \t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::count(__x);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tsize_type\n+\tcount(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return _Base::count(__x);\n+\t}\n+#endif\n+\n       iterator\n       lower_bound(const key_type& __x)\n       {\n@@ -451,6 +487,19 @@ namespace __profile\n \treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n@@ -459,6 +508,19 @@ namespace __profile\n \treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       {\n@@ -467,6 +529,19 @@ namespace __profile\n \treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n@@ -475,6 +550,19 @@ namespace __profile\n \treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -485,6 +573,19 @@ namespace __profile\n \t\t\t      iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n@@ -495,6 +596,19 @@ namespace __profile\n \t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "4ec77d79ac6bbc38cfa1dc2ca8ad72273cd20173", "filename": "libstdc++-v3/include/profile/multimap.h", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultimap.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -388,20 +388,56 @@ namespace __profile\n \treturn iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       find(const key_type& __x) const\n       {\n \t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn const_iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       size_type\n       count(const key_type& __x) const\n       {\n \t__profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n \treturn _Base::count(__x);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tsize_type\n+\tcount(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return _Base::count(__x);\n+\t}\n+#endif\n+\n       iterator\n       lower_bound(const key_type& __x)\n       {\n@@ -410,6 +446,19 @@ namespace __profile\n \treturn iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       lower_bound(const key_type& __x) const\n       {\n@@ -418,6 +467,19 @@ namespace __profile\n \treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       {\n@@ -426,6 +488,19 @@ namespace __profile\n \treturn iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       const_iterator\n       upper_bound(const key_type& __x) const\n       {\n@@ -434,6 +509,19 @@ namespace __profile\n \treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -444,6 +532,19 @@ namespace __profile\n \t\t\t      iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       std::pair<const_iterator,const_iterator>\n       equal_range(const key_type& __x) const\n       {\n@@ -454,6 +555,19 @@ namespace __profile\n \t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "b304e5c5194ed4c563284f8a882e8a4bf09f67de", "filename": "libstdc++-v3/include/profile/multiset.h", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fmultiset.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -379,6 +379,18 @@ namespace __profile\n \treturn _Base::count(__x);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tsize_type\n+\tcount(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return _Base::count(__x);\n+\t}\n+#endif\n+\n       // multiset operations:\n       iterator\n       find(const key_type& __x)\n@@ -396,6 +408,28 @@ namespace __profile\n \treturn const_iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       lower_bound(const key_type& __x)\n       {\n@@ -413,6 +447,30 @@ namespace __profile\n \treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       {\n@@ -431,6 +489,30 @@ namespace __profile\n \treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       std::pair<iterator,iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -453,6 +535,30 @@ namespace __profile\n \t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "3717fde5261038693305c78951227692ef5ddb5f", "filename": "libstdc++-v3/include/profile/set.h", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Fset.h?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -369,6 +369,18 @@ namespace __profile\n \treturn _Base::count(__x);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tsize_type\n+\tcount(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return _Base::count(__x);\n+\t}\n+#endif\n+\n       // set operations:\n       iterator\n       find(const key_type& __x)\n@@ -384,6 +396,28 @@ namespace __profile\n \treturn const_iterator(_Base::find(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tfind(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tfind(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  return { _Base::find(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       lower_bound(const key_type& __x)\n       {\n@@ -400,6 +434,30 @@ namespace __profile\n \treturn const_iterator(_Base::lower_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tlower_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tlower_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::lower_bound(__x), this };\n+\t}\n+#endif\n+\n       iterator\n       upper_bound(const key_type& __x)\n       {\n@@ -416,6 +474,30 @@ namespace __profile\n \treturn const_iterator(_Base::upper_bound(__x), this);\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\titerator\n+\tupper_bound(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tconst_iterator\n+\tupper_bound(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  __profcxx_map2umap_invalidate(this->_M_map2umap_info);\n+\t  return { _Base::upper_bound(__x), this };\n+\t}\n+#endif\n+\n       std::pair<iterator, iterator>\n       equal_range(const key_type& __x)\n       {\n@@ -436,6 +518,30 @@ namespace __profile\n \t\t\t      const_iterator(__base_ret.second, this));\n       }\n \n+#if __cplusplus > 201103L\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<iterator, iterator>\n+\tequal_range(const _Kt& __x)\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+\n+      template<typename _Kt,\n+\t       typename _Req =\n+\t\t typename __has_is_transparent<_Compare, _Kt>::type>\n+\tstd::pair<const_iterator, const_iterator>\n+\tequal_range(const _Kt& __x) const\n+\t{\n+\t  __profcxx_map2umap_find(this->_M_map2umap_info, this->size());\n+\t  auto __res = _Base::equal_range(__x);\n+\t  return { { __res.first, this }, { __res.second, this } };\n+\t}\n+#endif\n+\n       _Base&\n       _M_base() _GLIBCXX_NOEXCEPT\t{ return *this; }\n "}, {"sha": "76647f5aa32d884073c1e10e4ea2f15e5cb7bfd8", "filename": "libstdc++-v3/testsuite/23_containers/map/operations/1.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Foperations%2F1.cc?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -29,6 +29,7 @@ void test01()\n \n   map<int, int> m0;\n   typedef map<int, int>::iterator iterator;\n+  typedef map<int, int>::const_iterator const_iterator;\n   typedef pair<iterator, bool> insert_return_type;\n   pair<iterator, iterator> pp0;\n   typedef map<int, int>::value_type value_type;\n@@ -47,7 +48,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(2, 2) );\n   VERIFY( *pp0.second == value_type(3, 3) );\n   VERIFY( pp0.first == irt1.first );\n-  VERIFY( --pp0.first == irt0.first );  \n+  VERIFY( --pp0.first == irt0.first );\n   VERIFY( pp0.second == irt2.first );\n \n   m0.insert(value_type(3, 4));\n@@ -59,7 +60,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(3, 3) );\n   VERIFY( *pp0.second == value_type(4, 6) );\n   VERIFY( pp0.first == irt2.first );\n-  VERIFY( --pp0.first == irt1.first );  \n+  VERIFY( --pp0.first == irt1.first );\n   VERIFY( pp0.second == irt4.first );\n \n   insert_return_type irt5 = m0.insert(value_type(0, 7));\n@@ -72,7 +73,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(1, 1) );\n   VERIFY( *pp0.second == value_type(2, 2) );\n   VERIFY( pp0.first == irt0.first );\n-  VERIFY( --pp0.first == irt5.first );  \n+  VERIFY( --pp0.first == irt5.first );\n   VERIFY( pp0.second == irt1.first );\n \n   insert_return_type irt6 = m0.insert(value_type(5, 11));\n@@ -83,40 +84,41 @@ void test01()\n   VERIFY( m0.count(5) == 1 );\n   VERIFY( *pp0.first == value_type(5, 11) );\n   VERIFY( pp0.first == irt6.first );\n-  VERIFY( --pp0.first == irt4.first );  \n+  VERIFY( --pp0.first == irt4.first );\n   VERIFY( pp0.second == m0.end() );\n \n   m0.insert(value_type(4, 14));\n   m0.insert(value_type(4, 15));\n   m0.insert(value_type(4, 16));\n \n   pp0 = m0.equal_range(4);\n-  VERIFY( m0.count(4) == 1 );  \n+  VERIFY( m0.count(4) == 1 );\n   VERIFY( *pp0.first == value_type(4, 6) );\n-  VERIFY( *pp0.second == value_type(5, 11) );  \n+  VERIFY( *pp0.second == value_type(5, 11) );\n   VERIFY( pp0.first == irt4.first );\n-  VERIFY( --pp0.first == irt3.first );  \n+  VERIFY( --pp0.first == irt3.first );\n   VERIFY( pp0.second == irt6.first );\n \n   m0.insert(value_type(0, 17));\n   insert_return_type irt7 = m0.insert(value_type(0, 18));\n   m0.insert(value_type(1, 19));\n \n   pp0 = m0.equal_range(0);\n-  VERIFY( m0.count(0) == 1 );  \n+  VERIFY( m0.count(0) == 1 );\n   VERIFY( *pp0.first == value_type(0, 7) );\n-  VERIFY( *pp0.second == value_type(1, 1) );  \n+  VERIFY( *pp0.second == value_type(1, 1) );\n   VERIFY( pp0.first == irt5.first );\n   VERIFY( pp0.first == m0.begin() );\n   VERIFY( pp0.second == irt0.first );\n \n-  pp0 = m0.equal_range(1);\n-  VERIFY( m0.count(1) == 1 );  \n-  VERIFY( *pp0.first == value_type(1, 1) );\n-  VERIFY( *pp0.second == value_type(2, 2) );  \n-  VERIFY( pp0.first == irt0.first );\n-  VERIFY( --pp0.first == irt7.first);\n-  VERIFY( pp0.second == irt1.first );\n+  const map<int, int>& m1 = m0;\n+  pair<const_iterator, const_iterator> pp1 = m1.equal_range(1);\n+  VERIFY( m1.count(1) == 1 );\n+  VERIFY( *pp1.first == value_type(1, 1) );\n+  VERIFY( *pp1.second == value_type(2, 2) );\n+  VERIFY( pp1.first == irt0.first );\n+  VERIFY( --pp1.first == irt7.first);\n+  VERIFY( pp1.second == irt1.first );\n }\n \n int"}, {"sha": "683da160010d66506f5cb21c869507a24336fb45", "filename": "libstdc++-v3/testsuite/23_containers/multimap/operations/1.cc", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Foperations%2F1.cc?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -29,6 +29,7 @@ void test01()\n \n   multimap<int, int> mm0;\n   typedef multimap<int, int>::iterator iterator;\n+  typedef multimap<int, int>::const_iterator const_iterator;\n   pair<iterator, iterator> pp0;\n   typedef multimap<int, int>::value_type value_type;\n \n@@ -46,7 +47,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(2, 2) );\n   VERIFY( *pp0.second == value_type(3, 3) );\n   VERIFY( pp0.first == iter1 );\n-  VERIFY( --pp0.first == iter0 );  \n+  VERIFY( --pp0.first == iter0 );\n   VERIFY( pp0.second == iter2 );\n \n   mm0.insert(value_type(3, 4));\n@@ -58,7 +59,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(3, 3) );\n   VERIFY( *pp0.second == value_type(4, 6) );\n   VERIFY( pp0.first == iter2 );\n-  VERIFY( --pp0.first == iter1 );  \n+  VERIFY( --pp0.first == iter1 );\n   VERIFY( pp0.second == iter4 );\n \n   iterator iter5 = mm0.insert(value_type(0, 7));\n@@ -71,7 +72,7 @@ void test01()\n   VERIFY( *pp0.first == value_type(1, 1) );\n   VERIFY( *pp0.second == value_type(2, 2) );\n   VERIFY( pp0.first == iter0 );\n-  VERIFY( --pp0.first == iter5 );  \n+  VERIFY( --pp0.first == iter5 );\n   VERIFY( pp0.second == iter1 );\n \n   iterator iter6 = mm0.insert(value_type(5, 11));\n@@ -82,40 +83,41 @@ void test01()\n   VERIFY( mm0.count(5) == 3 );\n   VERIFY( *pp0.first == value_type(5, 11) );\n   VERIFY( pp0.first == iter6 );\n-  VERIFY( --pp0.first == iter4 );  \n+  VERIFY( --pp0.first == iter4 );\n   VERIFY( pp0.second == mm0.end() );\n \n   mm0.insert(value_type(4, 14));\n   mm0.insert(value_type(4, 15));\n   mm0.insert(value_type(4, 16));\n \n   pp0 = mm0.equal_range(4);\n-  VERIFY( mm0.count(4) == 4 );  \n+  VERIFY( mm0.count(4) == 4 );\n   VERIFY( *pp0.first == value_type(4, 6) );\n-  VERIFY( *pp0.second == value_type(5, 11) );  \n+  VERIFY( *pp0.second == value_type(5, 11) );\n   VERIFY( pp0.first == iter4 );\n-  VERIFY( --pp0.first == iter3 );  \n+  VERIFY( --pp0.first == iter3 );\n   VERIFY( pp0.second == iter6 );\n \n   mm0.insert(value_type(0, 17));\n   iterator iter7 = mm0.insert(value_type(0, 18));\n   mm0.insert(value_type(1, 19));\n \n   pp0 = mm0.equal_range(0);\n-  VERIFY( mm0.count(0) == 3 );  \n+  VERIFY( mm0.count(0) == 3 );\n   VERIFY( *pp0.first == value_type(0, 7) );\n-  VERIFY( *pp0.second == value_type(1, 1) );  \n+  VERIFY( *pp0.second == value_type(1, 1) );\n   VERIFY( pp0.first == iter5 );\n   VERIFY( pp0.first == mm0.begin() );\n   VERIFY( pp0.second == iter0 );\n \n-  pp0 = mm0.equal_range(1);\n-  VERIFY( mm0.count(1) == 5 );  \n-  VERIFY( *pp0.first == value_type(1, 1) );\n-  VERIFY( *pp0.second == value_type(2, 2) );  \n-  VERIFY( pp0.first == iter0 );\n-  VERIFY( --pp0.first == iter7 );\n-  VERIFY( pp0.second == iter1 );\n+  const multimap<int, int>& mm1 = mm0;\n+  pair<const_iterator, const_iterator> pp1 = mm1.equal_range(1);\n+  VERIFY( mm1.count(1) == 5 );\n+  VERIFY( *pp1.first == value_type(1, 1) );\n+  VERIFY( *pp1.second == value_type(2, 2) );\n+  VERIFY( pp1.first == iter0 );\n+  VERIFY( --pp1.first == iter7 );\n+  VERIFY( pp1.second == iter1 );\n }\n \n int"}, {"sha": "88881164f1d0a7042fc12317cbbc08b18203cb37", "filename": "libstdc++-v3/testsuite/23_containers/multiset/operations/1.cc", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Foperations%2F1.cc?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -29,6 +29,7 @@ void test01()\n \n   multiset<int> ms0;\n   typedef multiset<int>::iterator iterator;\n+  typedef multiset<int>::const_iterator const_iterator;\n   pair<iterator, iterator> pp0;\n \n   pp0 = ms0.equal_range(1);\n@@ -45,19 +46,19 @@ void test01()\n   VERIFY( *pp0.first == 2 );\n   VERIFY( *pp0.second == 3 );\n   VERIFY( pp0.first == iter1 );\n-  VERIFY( --pp0.first == iter0 );  \n+  VERIFY( --pp0.first == iter0 );\n   VERIFY( pp0.second == iter2 );\n \n   ms0.insert(3);\n   iterator iter3 = ms0.insert(3);\n   iterator iter4 = ms0.insert(4);\n-  \n+\n   pp0 = ms0.equal_range(3);\n   VERIFY( ms0.count(3) == 3 );\n   VERIFY( *pp0.first == 3 );\n   VERIFY( *pp0.second == 4 );\n   VERIFY( pp0.first == iter2 );\n-  VERIFY( --pp0.first == iter1 );  \n+  VERIFY( --pp0.first == iter1 );\n   VERIFY( pp0.second == iter4 );\n \n   iterator iter5 = ms0.insert(0);\n@@ -70,7 +71,7 @@ void test01()\n   VERIFY( *pp0.first == 1 );\n   VERIFY( *pp0.second == 2 );\n   VERIFY( pp0.first == iter0 );\n-  VERIFY( --pp0.first == iter5 );  \n+  VERIFY( --pp0.first == iter5 );\n   VERIFY( pp0.second == iter1 );\n \n   iterator iter6 = ms0.insert(5);\n@@ -81,40 +82,41 @@ void test01()\n   VERIFY( ms0.count(5) == 3 );\n   VERIFY( *pp0.first == 5 );\n   VERIFY( pp0.first == iter6 );\n-  VERIFY( --pp0.first == iter4 );  \n+  VERIFY( --pp0.first == iter4 );\n   VERIFY( pp0.second == ms0.end() );\n \n   ms0.insert(4);\n   ms0.insert(4);\n   ms0.insert(4);\n \n   pp0 = ms0.equal_range(4);\n-  VERIFY( ms0.count(4) == 4 );  \n+  VERIFY( ms0.count(4) == 4 );\n   VERIFY( *pp0.first == 4 );\n-  VERIFY( *pp0.second == 5 );  \n+  VERIFY( *pp0.second == 5 );\n   VERIFY( pp0.first == iter4 );\n-  VERIFY( --pp0.first == iter3 );  \n+  VERIFY( --pp0.first == iter3 );\n   VERIFY( pp0.second == iter6 );\n-  \n+\n   ms0.insert(0);\n   iterator iter7 = ms0.insert(0);\n   ms0.insert(1);\n \n   pp0 = ms0.equal_range(0);\n-  VERIFY( ms0.count(0) == 3 );  \n+  VERIFY( ms0.count(0) == 3 );\n   VERIFY( *pp0.first == 0 );\n-  VERIFY( *pp0.second == 1 );  \n+  VERIFY( *pp0.second == 1 );\n   VERIFY( pp0.first == iter5 );\n   VERIFY( pp0.first == ms0.begin() );\n   VERIFY( pp0.second == iter0 );\n \n-  pp0 = ms0.equal_range(1);\n-  VERIFY( ms0.count(1) == 5 );  \n-  VERIFY( *pp0.first == 1 );\n-  VERIFY( *pp0.second == 2 );  \n-  VERIFY( pp0.first == iter0 );\n-  VERIFY( --pp0.first == iter7 );\n-  VERIFY( pp0.second == iter1 );\n+  const multiset<int>& ms1 = ms0;\n+  pair<const_iterator, const_iterator> pp1 = ms1.equal_range(1);\n+  VERIFY( ms1.count(1) == 5 );\n+  VERIFY( *pp1.first == 1 );\n+  VERIFY( *pp1.second == 2 );\n+  VERIFY( pp1.first == iter0 );\n+  VERIFY( --pp1.first == iter7 );\n+  VERIFY( pp1.second == iter1 );\n }\n \n int"}, {"sha": "e648a8b3a66d991239dadfbd2983153ec5a70bf4", "filename": "libstdc++-v3/testsuite/23_containers/set/operations/1.cc", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7b35f22be0a732140022245c766fa323f1a768d/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Foperations%2F1.cc?ref=d7b35f22be0a732140022245c766fa323f1a768d", "patch": "@@ -29,6 +29,7 @@ void test01()\n \n   set<int> s0;\n   typedef set<int>::iterator iterator;\n+  typedef set<int>::const_iterator const_iterator;\n   typedef pair<iterator, bool> insert_return_type;\n   pair<iterator, iterator> pp0;\n \n@@ -52,13 +53,13 @@ void test01()\n   s0.insert(3);\n   insert_return_type irt3 = s0.insert(3);\n   insert_return_type irt4 = s0.insert(4);\n-  \n+\n   pp0 = s0.equal_range(3);\n   VERIFY( s0.count(3) == 1 );\n   VERIFY( *pp0.first == 3 );\n   VERIFY( *pp0.second == 4 );\n   VERIFY( pp0.first == irt2.first );\n-  VERIFY( --pp0.first == irt1.first );  \n+  VERIFY( --pp0.first == irt1.first );\n   VERIFY( pp0.second == irt4.first );\n \n   insert_return_type irt5 = s0.insert(0);\n@@ -71,7 +72,7 @@ void test01()\n   VERIFY( *pp0.first == 1 );\n   VERIFY( *pp0.second == 2 );\n   VERIFY( pp0.first == irt0.first );\n-  VERIFY( --pp0.first == irt5.first );  \n+  VERIFY( --pp0.first == irt5.first );\n   VERIFY( pp0.second == irt1.first );\n \n   insert_return_type irt6 = s0.insert(5);\n@@ -82,40 +83,41 @@ void test01()\n   VERIFY( s0.count(5) == 1 );\n   VERIFY( *pp0.first == 5 );\n   VERIFY( pp0.first == irt6.first );\n-  VERIFY( --pp0.first == irt4.first );  \n+  VERIFY( --pp0.first == irt4.first );\n   VERIFY( pp0.second == s0.end() );\n \n   s0.insert(4);\n   s0.insert(4);\n   s0.insert(4);\n \n   pp0 = s0.equal_range(4);\n-  VERIFY( s0.count(4) == 1 );  \n+  VERIFY( s0.count(4) == 1 );\n   VERIFY( *pp0.first == 4 );\n-  VERIFY( *pp0.second == 5 );  \n+  VERIFY( *pp0.second == 5 );\n   VERIFY( pp0.first == irt4.first );\n-  VERIFY( --pp0.first == irt3.first );  \n+  VERIFY( --pp0.first == irt3.first );\n   VERIFY( pp0.second == irt6.first );\n-  \n+\n   s0.insert(0);\n   insert_return_type irt7 = s0.insert(0);\n   s0.insert(1);\n \n   pp0 = s0.equal_range(0);\n-  VERIFY( s0.count(0) == 1 );  \n+  VERIFY( s0.count(0) == 1 );\n   VERIFY( *pp0.first == 0 );\n-  VERIFY( *pp0.second == 1 );  \n+  VERIFY( *pp0.second == 1 );\n   VERIFY( pp0.first == irt5.first );\n   VERIFY( pp0.first == s0.begin() );\n   VERIFY( pp0.second == irt0.first );\n \n-  pp0 = s0.equal_range(1);\n-  VERIFY( s0.count(1) == 1 );  \n-  VERIFY( *pp0.first == 1 );\n-  VERIFY( *pp0.second == 2 );  \n-  VERIFY( pp0.first == irt0.first );\n-  VERIFY( --pp0.first == irt7.first );\n-  VERIFY( pp0.second == irt1.first );\n+  const set<int>& s1 = s0;\n+  pair<const_iterator, const_iterator> pp1 = s1.equal_range(1);\n+  VERIFY( s1.count(1) == 1 );\n+  VERIFY( *pp1.first == 1 );\n+  VERIFY( *pp1.second == 2 );\n+  VERIFY( pp1.first == irt0.first );\n+  VERIFY( --pp1.first == irt7.first );\n+  VERIFY( pp1.second == irt1.first );\n }\n \n int"}]}