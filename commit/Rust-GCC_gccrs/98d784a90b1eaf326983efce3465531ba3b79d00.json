{"sha": "98d784a90b1eaf326983efce3465531ba3b79d00", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OThkNzg0YTkwYjFlYWYzMjY5ODNlZmNlMzQ2NTUzMWJhM2I3OWQwMA==", "commit": {"author": {"name": "Andrew Pinski", "email": "pinskia@physics.uc.edu", "date": "2004-05-20T11:36:14Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2004-05-20T11:36:14Z"}, "message": "optimize.c (calls_setjmp_r): Remove.\n\n2005-05-20  Andrew Pinski  <pinskia@physics.uc.edu>\n\n        * optimize.c (calls_setjmp_r): Remove.\n        (calls_setjmp_p): Remove.\n        * cp-tree.c (calls_setjmp_p): Remove.\n        * decl.c (finish_function): Do not call calls_setjmp_p.\n\nFrom-SVN: r82049", "tree": {"sha": "eb24152e318078885e58cc808a62c142d2acee21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eb24152e318078885e58cc808a62c142d2acee21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/98d784a90b1eaf326983efce3465531ba3b79d00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d784a90b1eaf326983efce3465531ba3b79d00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/98d784a90b1eaf326983efce3465531ba3b79d00", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/98d784a90b1eaf326983efce3465531ba3b79d00/comments", "author": null, "committer": null, "parents": [{"sha": "4ccfc10aeb564246ff96a17f854a4fa5b46beef2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ccfc10aeb564246ff96a17f854a4fa5b46beef2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ccfc10aeb564246ff96a17f854a4fa5b46beef2"}], "stats": {"total": 47, "additions": 7, "deletions": 40}, "files": [{"sha": "e4836fdc6502a771281b622a006ec9a7b11ee528", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=98d784a90b1eaf326983efce3465531ba3b79d00", "patch": "@@ -1,3 +1,10 @@\n+2005-05-20  Andrew Pinski  <pinskia@physics.uc.edu>\n+\n+\t* optimize.c (calls_setjmp_r): Remove.\n+\t(calls_setjmp_p): Remove.\n+\t* cp-tree.c (calls_setjmp_p): Remove.\n+\t* decl.c (finish_function): Do not call calls_setjmp_p.\n+\n 2004-05-18  Zack Weinberg  <zack@codesourcery.com>\n \n \t* decl.c (cp_finish_decl): Use mark_decl_referenced."}, {"sha": "9fc83d56bce7c8e78b0e20cb9335037418acc4c1", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=98d784a90b1eaf326983efce3465531ba3b79d00", "patch": "@@ -3851,7 +3851,6 @@ extern tree implicitly_declare_fn (special_function_kind, tree, bool);\n extern tree skip_artificial_parms_for (tree, tree);\n \n /* In optimize.c */\n-extern bool calls_setjmp_p (tree);\n extern bool maybe_clone_body (tree);\n \n /* in pt.c */"}, {"sha": "fe04827808e51b6e13a476c2331864c4e41e0f0c", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=98d784a90b1eaf326983efce3465531ba3b79d00", "patch": "@@ -10756,18 +10756,6 @@ finish_function (int flags)\n   if (!processing_template_decl)\n     save_function_data (fndecl);\n \n-  /* If this function calls `setjmp' it cannot be inlined.  When\n-     `longjmp' is called it is not guaranteed to restore the value of\n-     local variables that have been modified since the call to\n-     `setjmp'.  So, if were to inline this function into some caller\n-     `c', then when we `longjmp', we might not restore all variables\n-     in `c'.  (It might seem, at first blush, that there's no way for\n-     this function to modify local variables in `c', but their\n-     addresses may have been stored somewhere accessible to this\n-     function.)  */\n-  if (!processing_template_decl && calls_setjmp_p (fndecl))\n-    DECL_UNINLINABLE (fndecl) = 1;\n-\n   /* Complain if there's just no return statement.  */\n   if (warn_return_type\n       && TREE_CODE (TREE_TYPE (fntype)) != VOID_TYPE"}, {"sha": "5102f576bbe11f041b087f4bae7c13de52abb24e", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/98d784a90b1eaf326983efce3465531ba3b79d00/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=98d784a90b1eaf326983efce3465531ba3b79d00", "patch": "@@ -44,35 +44,8 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n /* Prototypes.  */\n \n-static tree calls_setjmp_r (tree *, int *, void *);\n static void update_cloned_parm (tree, tree);\n \n-/* Called from calls_setjmp_p via walk_tree.  */\n-\n-static tree\n-calls_setjmp_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n-                void *data ATTRIBUTE_UNUSED)\n-{\n-  /* We're only interested in FUNCTION_DECLS.  */\n-  if (TREE_CODE (*tp) != FUNCTION_DECL)\n-    return NULL_TREE;\n-\n-  return setjmp_call_p (*tp) ? *tp : NULL_TREE;\n-}\n-\n-/* Returns nonzero if FN calls `setjmp' or some other function that\n-   can return more than once.  This function is conservative; it may\n-   occasionally return a nonzero value even when FN does not actually\n-   call `setjmp'.  */\n-\n-bool\n-calls_setjmp_p (tree fn)\n-{\n-  return walk_tree_without_duplicates (&DECL_SAVED_TREE (fn),\n-\t\t\t\t       calls_setjmp_r,\n-\t\t\t\t       NULL) != NULL_TREE;\n-}\n-\n /* CLONED_PARM is a copy of CLONE, generated for a cloned constructor\n    or destructor.  Update it to ensure that the source-position for\n    the cloned parameter matches that for the original, and that the"}]}