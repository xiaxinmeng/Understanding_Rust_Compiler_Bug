{"sha": "780028b6cff77a9f25f75a24047ab5f3b50a4834", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzgwMDI4YjZjZmY3N2E5ZjI1Zjc1YTI0MDQ3YWI1ZjNiNTBhNDgzNA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-07-14T06:37:17Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-07-14T06:37:17Z"}, "message": "mt_allocator.html: Add docs for _Tune.\n\n\n2004-07-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* docs/html/ext/mt_allocator.html: Add docs for _Tune.\n\t* include/ext/mt_allocator.h (__mt_alloc::_S_get_options): Make public.\n\t(__mt_alloc::_S_set_options): Same.\n\tAdd to comments.\n\n2004-07-13  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Add allocator defaults\n\tfor linux.\n\t* configure: Regenerated.\n\nFrom-SVN: r84674", "tree": {"sha": "cdb983cd86b1e1afba9b2e5cf5c1ce3c19e347c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cdb983cd86b1e1afba9b2e5cf5c1ce3c19e347c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/780028b6cff77a9f25f75a24047ab5f3b50a4834", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780028b6cff77a9f25f75a24047ab5f3b50a4834", "html_url": "https://github.com/Rust-GCC/gccrs/commit/780028b6cff77a9f25f75a24047ab5f3b50a4834", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/780028b6cff77a9f25f75a24047ab5f3b50a4834/comments", "author": null, "committer": null, "parents": [{"sha": "70049c7ce2da027e60dd09995f37ed2548e35c53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70049c7ce2da027e60dd09995f37ed2548e35c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70049c7ce2da027e60dd09995f37ed2548e35c53"}], "stats": {"total": 2876, "additions": 1932, "deletions": 944}, "files": [{"sha": "d55a4704e6bf7692ba1b87d438eb67f705325e6c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=780028b6cff77a9f25f75a24047ab5f3b50a4834", "patch": "@@ -1,3 +1,16 @@\n+2004-07-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* docs/html/ext/mt_allocator.html: Add docs for _Tune.\n+\t* include/ext/mt_allocator.h (__mt_alloc::_S_get_options): Make public.\n+\t(__mt_alloc::_S_set_options): Same.\n+\tAdd to comments.\n+\n+2004-07-13  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* acinclude.m4 (GLIBCXX_ENABLE_ALLOCATOR): Add allocator defaults\n+\tfor linux.\n+\t* configure: Regenerated.\n+\n 2004-07-13  Paolo Carlini  <pcarlini@suse.de>\n \n \t* testsuite/22_locale/locale/cons/12658_thread.cc: Move/rename"}, {"sha": "2a317e65921b05b6618c23fd3ee33cf908c86794", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=780028b6cff77a9f25f75a24047ab5f3b50a4834", "patch": "@@ -1163,13 +1163,17 @@ AC_DEFUN([GLIBCXX_ENABLE_ALLOCATOR], [\n      enable_libstdcxx_allocator=auto\n   fi\n \n-  # Either a known package, or \"auto\"\n+  # Either a known package, or \"auto\". Auto implies the default choice\n+  # for a particular platform.\n   enable_libstdcxx_allocator_flag=$enable_libstdcxx_allocator\n \n   # Probe for host-specific support if no specific model is specified.\n   # Default to \"new\".\n   if test $enable_libstdcxx_allocator_flag = auto; then\n     case ${target_os} in\n+      linux* | gnu* | kfreebsd*-gnu | knetbsd*-gnu)\n+        enable_libstdcxx_allocator_flag=mt\n+        ;;\n       *)\n         enable_libstdcxx_allocator_flag=new\n         ;;"}, {"sha": "12ba7e68c1e82bfe9fe84d5e811a0daa317f4634", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1841, "deletions": 924, "changes": 2765, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=780028b6cff77a9f25f75a24047ab5f3b50a4834"}, {"sha": "4fdee61aebd627b2798346a9a495345cf8bc9ea0", "filename": "libstdc++-v3/docs/html/ext/mt_allocator.html", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fmt_allocator.html?ref=780028b6cff77a9f25f75a24047ab5f3b50a4834", "patch": "@@ -53,21 +53,71 @@ <h3 class=\"left\">\n view - the \"inner workings\" of the allocator.\n </p>\n \n+<h3 class=\"left\">\n+  <a name=\"init\">Tunable parameters</a>\n+</h3>\n+\n+<p>Certain allocation parameters can be modified on a per-type\n+basis. There exists a nested <pre>struct _Tune</pre> that contains all\n+these parameters, which include settings for\n+</p>\n+   <ul>\n+     <li>Alignment </li>\n+     <li>Maximum bytes before calling <code>::operator new</code> directly</li>\n+     <li>Minimum bytes</li>\n+     <li>Size of underlying global allocations</li>\n+     <li>Maximum number of supported threads</li>\n+     <li>Migration of deallocations to the global free list</li>\n+     <li>Shunt for global <code>new</code> and <code>delete</code></li>\n+   </ul>\n+<p>Adjusting parameters for a given instance of an allocator can only\n+happen before any allocations take place, when the allocator itself is\n+initialized. For instance:\n+</p>\n+<pre>\n+#include &lt;ext/mt_allocator.h&gt;\n+\n+struct pod\n+{\n+  int i;\n+  int j;\n+};\n+\n+int main()\n+{\n+  typedef pod value_type;\n+  typedef __gnu_cxx::__mt_alloc&lt;value_type&gt; allocator_type;\n+  typedef allocator_type::_Tune tune_type;\n+\n+  tune_type t_default;\n+  tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n+  tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n+\n+  tune_type t;\n+  t = allocator_type::_S_get_options();  \n+  allocator_type::_S_set_options(t_opt);\n+  t = allocator_type::_S_get_options();  \n+\n+  allocator_type a;\n+  allocator_type::pointer p1 = a.allocate(128);\n+  allocator_type::pointer p2 = a.allocate(5128);\n+\n+  a.deallocate(p1, 128);\n+  a.deallocate(p2, 5128);\n+\n+  return 0;\n+}\n+</pre>\n \n <h3 class=\"left\">\n   <a name=\"init\">Initialization</a>\n </h3>\n \n <p>\n The static variables (pointers to freelists, tuning parameters etc)\n-are initialized to their default values at file scope, i.e.:\n+are initialized as above, or are set to the global defaults.\n </p>\n \n-<pre>\n-  template&lt;typename _Tp&gt; size_t\n-  __mt_alloc&lt;_Tp&gt;::_S_freelist_headroom = 10;\n-</pre>\n-\n <p>\n The very first allocate() call will always call the _S_init() function. \n In order to make sure that this function is called exactly once we make use"}, {"sha": "b7afdde98ff82feec312cb312baa3bd1a01874d4", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/780028b6cff77a9f25f75a24047ab5f3b50a4834/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=780028b6cff77a9f25f75a24047ab5f3b50a4834", "patch": "@@ -139,8 +139,12 @@ namespace __gnu_cxx\n \t// See http://gcc.gnu.org/ml/libstdc++/2001-07/msg00077.html\n \tsize_t \t_M_chunk_size;\n \n-\t// The maximum number of supported threads. Our Linux 2.4.18\n-\t// reports 4070 in /proc/sys/kernel/threads-max\n+\t// The maximum number of supported threads. For\n+\t// single-threaded operation, use one. Maximum values will\n+\t// vary depending on details of the underlying system. (For\n+\t// instance, Linux 2.4.18 reports 4070 in\n+\t// /proc/sys/kernel/threads-max, while Linux 2.6.6 reports\n+\t// 65534)\n \tsize_t \t_M_max_threads;\n \n \t// Each time a deallocation occurs in a threaded application\n@@ -172,6 +176,17 @@ namespace __gnu_cxx\n \t{ }\n       };\n \n+      static const _Tune\n+      _S_get_options()\n+      { return _S_options; }\n+\n+      static void\n+      _S_set_options(_Tune __t)\n+      { \n+\tif (!_S_init)\n+\t  _S_options = __t;\n+      }\n+\n     private:\n       // We need to create the initial lists and set up some variables\n       // before we can answer to the first request for memory.\n@@ -186,17 +201,6 @@ namespace __gnu_cxx\n       // Configuration options.\n       static _Tune \t       \t\t_S_options;\n \n-      static const _Tune\n-      _S_get_options()\n-      { return _S_options; }\n-\n-      static void\n-      _S_set_options(_Tune __t)\n-      { \n-\tif (!_S_init)\n-\t  _S_options = __t;\n-      }\n-\n       // Using short int as type for the binmap implies we are never\n       // caching blocks larger than 65535 with this allocator\n       typedef unsigned short int        _Binmap_type;"}]}