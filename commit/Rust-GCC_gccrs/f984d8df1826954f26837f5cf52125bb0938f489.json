{"sha": "f984d8df1826954f26837f5cf52125bb0938f489", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjk4NGQ4ZGYxODI2OTU0ZjI2ODM3ZjVjZjUyMTI1YmIwOTM4ZjQ4OQ==", "commit": {"author": {"name": "Daniel Berlin", "email": "dan@cgsoftware.com", "date": "2001-08-06T13:04:29Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2001-08-06T13:04:29Z"}, "message": "aix.h (CPP_CPU_SPEC): Move back to rs6000.h\n\n2001-08-06  Daniel Berlin  <dan@cgsoftware.com>\n\n\t* config/rs6000/aix.h (CPP_CPU_SPEC): Move back to rs6000.h\n\t(ASM_CPU_SPEC): Move back to rs6000.h\n\t#undef CPP_DEFAULT_SPEC and ASM_DEFAULT_SPEC before redefining them.\n\n\t* config/rs6000/darwin.h (DOUBLE_INT_ASM_OP): New macro.\n\n\t* config/rs6000/linux.h: Remove vtable thunks stuff we accidently\n\treadded.\n\n\t* config/rs6000/linux64.h: Ditto.\n\n\t* config/rs6000/rs6000.h: Move CPP_CPU_SPEC and ASM_CPU_SPEC back\n\tto here. Define default ASM_DEFAULT_SPEC and CPP_DEFAULT SPEC to\n\tnothing.\n\n\tRemove accidently readded definitions of FUNCTION_PROLOGUE,\n\tFUNCTION_EPILOGUE,  ASM_OPEN_PAREN, ASM_CLOSE_PAREN\n\n\t* config/rs6000/sysv4.h: Move CPP_CPU_SPEC and ASM_CPU_SPEC back\n\tto rs6000.h\n\nFrom-SVN: r44660", "tree": {"sha": "a1f2da6902d513744e0aef37e347e9eb2e866956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1f2da6902d513744e0aef37e347e9eb2e866956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f984d8df1826954f26837f5cf52125bb0938f489", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f984d8df1826954f26837f5cf52125bb0938f489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f984d8df1826954f26837f5cf52125bb0938f489", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f984d8df1826954f26837f5cf52125bb0938f489/comments", "author": null, "committer": null, "parents": [{"sha": "bba9ba9e250196571ae8ecd2893ce4cb25221189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bba9ba9e250196571ae8ecd2893ce4cb25221189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bba9ba9e250196571ae8ecd2893ce4cb25221189"}], "stats": {"total": 286, "additions": 104, "deletions": 182}, "files": [{"sha": "2494e1433861bc19fee5b171b4853ac6a4ec5e00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -1,3 +1,26 @@\n+2001-08-06  Daniel Berlin  <dan@cgsoftware.com>\n+\n+\t* config/rs6000/aix.h (CPP_CPU_SPEC): Move back to rs6000.h\n+\t(ASM_CPU_SPEC): Move back to rs6000.h\n+\t#undef CPP_DEFAULT_SPEC and ASM_DEFAULT_SPEC before redefining them.\n+\n+\t* config/rs6000/darwin.h (DOUBLE_INT_ASM_OP): New macro.\n+\n+\t* config/rs6000/linux.h: Remove vtable thunks stuff we accidently\n+\treadded. \n+\n+\t* config/rs6000/linux64.h: Ditto.\n+\n+\t* config/rs6000/rs6000.h: Move CPP_CPU_SPEC and ASM_CPU_SPEC back\n+\tto here. Define default ASM_DEFAULT_SPEC and CPP_DEFAULT SPEC to\n+\tnothing.\n+\n+\tRemove accidently readded definitions of FUNCTION_PROLOGUE,\n+\tFUNCTION_EPILOGUE,  ASM_OPEN_PAREN, ASM_CLOSE_PAREN\n+\n+\t* config/rs6000/sysv4.h: Move CPP_CPU_SPEC and ASM_CPU_SPEC back\n+\tto rs6000.h\n+\t\n 2001-08-05  Richard Henderson  <rth@redhat.com>\n \n \t* local-alloc.c (update_equiv_regs): Do not move insns that"}, {"sha": "f5b39e525141b1b58426f54c72c633193ed276aa", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 72, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -52,80 +52,10 @@ Boston, MA 02111-1307, USA.  */\n    %{ansi: -D_ANSI_C_SOURCE}\\\n    %(cpp_cpu)\"\n \n-/* Common CPP definitions used by CPP_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#define CPP_CPU_SPEC \\\n-\"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n-  %{mpower2: -D_ARCH_PWR2} \\\n-  %{mpowerpc*: -D_ARCH_PPC} \\\n-  %{mno-power: %{!mpowerpc*: -D_ARCH_COM}} \\\n-  %{!mno-power: %{!mpower2: %(cpp_default)}}} \\\n-%{mcpu=common: -D_ARCH_COM} \\\n-%{mcpu=power: -D_ARCH_PWR} \\\n-%{mcpu=power2: -D_ARCH_PWR2} \\\n-%{mcpu=powerpc: -D_ARCH_PPC} \\\n-%{mcpu=rios: -D_ARCH_PWR} \\\n-%{mcpu=rios1: -D_ARCH_PWR} \\\n-%{mcpu=rios2: -D_ARCH_PWR2} \\\n-%{mcpu=rsc: -D_ARCH_PWR} \\\n-%{mcpu=rsc1: -D_ARCH_PWR} \\\n-%{mcpu=401: -D_ARCH_PPC} \\\n-%{mcpu=403: -D_ARCH_PPC} \\\n-%{mcpu=505: -D_ARCH_PPC} \\\n-%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -D_ARCH_PPC} \\\n-%{mcpu=603: -D_ARCH_PPC} \\\n-%{mcpu=603e: -D_ARCH_PPC} \\\n-%{mcpu=ec603e: -D_ARCH_PPC} \\\n-%{mcpu=604: -D_ARCH_PPC} \\\n-%{mcpu=604e: -D_ARCH_PPC} \\\n-%{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=740: -D_ARCH_PPC} \\\n-%{mcpu=750: -D_ARCH_PPC} \\\n-%{mcpu=801: -D_ARCH_PPC} \\\n-%{mcpu=821: -D_ARCH_PPC} \\\n-%{mcpu=823: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC}\"\n-\n+#undef CPP_DEFAULT_SPEC\n #define CPP_DEFAULT_SPEC \"-D_ARCH_PWR\"\n \n-/* Common ASM definitions used by ASM_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#define ASM_CPU_SPEC \\\n-\"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -mpwr}} \\\n-  %{mpower2: -mpwrx} \\\n-  %{mpowerpc*: -mppc} \\\n-  %{mno-power: %{!mpowerpc*: -mcom}} \\\n-  %{!mno-power: %{!mpower2: %(asm_default)}}} \\\n-%{mcpu=common: -mcom} \\\n-%{mcpu=power: -mpwr} \\\n-%{mcpu=power2: -mpwrx} \\\n-%{mcpu=powerpc: -mppc} \\\n-%{mcpu=rios: -mpwr} \\\n-%{mcpu=rios1: -mpwr} \\\n-%{mcpu=rios2: -mpwrx} \\\n-%{mcpu=rsc: -mpwr} \\\n-%{mcpu=rsc1: -mpwr} \\\n-%{mcpu=401: -mppc} \\\n-%{mcpu=403: -mppc} \\\n-%{mcpu=505: -mppc} \\\n-%{mcpu=601: -m601} \\\n-%{mcpu=602: -mppc} \\\n-%{mcpu=603: -mppc} \\\n-%{mcpu=603e: -mppc} \\\n-%{mcpu=ec603e: -mppc} \\\n-%{mcpu=604: -mppc} \\\n-%{mcpu=604e: -mppc} \\\n-%{mcpu=620: -mppc} \\\n-%{mcpu=740: -mppc} \\\n-%{mcpu=750: -mppc} \\\n-%{mcpu=801: -mppc} \\\n-%{mcpu=821: -mppc} \\\n-%{mcpu=823: -mppc} \\\n-%{mcpu=860: -mppc}\"\n-\n+#undef ASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"\"\n \n /* Tell the assembler to assume that all undefined names are external."}, {"sha": "0091807d73eb5f89f66d43339acbbb0f5c25fa14", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -191,3 +191,6 @@ Boston, MA 02111-1307, USA.  */\n    && DECL_MODE (TYPE_FIELDS (STRUCT)) == DFmode\t\\\n    ? MAX (MAX ((COMPUTED), (SPECIFIED)), BIGGEST_ALIGNMENT) \\\n    : MAX ((COMPUTED), (SPECIFIED)))\n+/* XXX: Darwin supports neither .quad, or .llong, but it also doesn't\n+   support 64 bit powerpc either, so this just keeps things happy. */\n+#define DOUBLE_INT_ASM_OP \".quad\""}, {"sha": "5100bb549eeccb976ea45adced53975a417039dd", "filename": "gcc/config/rs6000/linux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -69,11 +69,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef DEFAULT_VTABLE_THUNKS\n-#ifndef USE_GNULIBC_1\n-#define DEFAULT_VTABLE_THUNKS 1\n-#endif\n-\n /* Do code reading to identify a signal frame, and set the frame\n    state data appropriately.  See unwind-dw2.c for the structs.  */\n "}, {"sha": "dc352736a63b8f404cf2ce49ff6899e546988d3a", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -164,11 +164,6 @@ Boston, MA 02111-1307, USA.  */\n #undef ASM_APP_OFF\n #define ASM_APP_OFF \"#NO_APP\\n\"\n \n-#undef DEFAULT_VTABLE_THUNKS\n-#ifndef USE_GNULIBC_1\n-#define DEFAULT_VTABLE_THUNKS 1\n-#endif\n-\n /* PowerPC no-op instruction.  */\n #undef RS6000_CALL_GLUE\n #define RS6000_CALL_GLUE \"nop\""}, {"sha": "112de7ff64ee2491ac4cc9a98fa60d029f2e2981", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 76, "deletions": 27, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -49,6 +49,82 @@ Boston, MA 02111-1307, USA.  */\n #define TARGET_CPU_DEFAULT ((char *)0)\n #endif\n \n+/* Common CPP definitions used by CPP_SPEC among the various targets\n+   for handling -mcpu=xxx switches.  */\n+#define CPP_CPU_SPEC \\\n+\"%{!mcpu*: \\\n+  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n+  %{mpower2: -D_ARCH_PWR2} \\\n+  %{mpowerpc*: -D_ARCH_PPC} \\\n+  %{mno-power: %{!mpowerpc*: -D_ARCH_COM}} \\\n+  %{!mno-power: %{!mpower2: %(cpp_default)}}} \\\n+%{mcpu=common: -D_ARCH_COM} \\\n+%{mcpu=power: -D_ARCH_PWR} \\\n+%{mcpu=power2: -D_ARCH_PWR2} \\\n+%{mcpu=powerpc: -D_ARCH_PPC} \\\n+%{mcpu=rios: -D_ARCH_PWR} \\\n+%{mcpu=rios1: -D_ARCH_PWR} \\\n+%{mcpu=rios2: -D_ARCH_PWR2} \\\n+%{mcpu=rsc: -D_ARCH_PWR} \\\n+%{mcpu=rsc1: -D_ARCH_PWR} \\\n+%{mcpu=401: -D_ARCH_PPC} \\\n+%{mcpu=403: -D_ARCH_PPC} \\\n+%{mcpu=505: -D_ARCH_PPC} \\\n+%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n+%{mcpu=602: -D_ARCH_PPC} \\\n+%{mcpu=603: -D_ARCH_PPC} \\\n+%{mcpu=603e: -D_ARCH_PPC} \\\n+%{mcpu=ec603e: -D_ARCH_PPC} \\\n+%{mcpu=604: -D_ARCH_PPC} \\\n+%{mcpu=604e: -D_ARCH_PPC} \\\n+%{mcpu=620: -D_ARCH_PPC} \\\n+%{mcpu=740: -D_ARCH_PPC} \\\n+%{mcpu=750: -D_ARCH_PPC} \\\n+%{mcpu=801: -D_ARCH_PPC} \\\n+%{mcpu=821: -D_ARCH_PPC} \\\n+%{mcpu=823: -D_ARCH_PPC} \\\n+%{mcpu=860: -D_ARCH_PPC}\"\n+\n+/* Common ASM definitions used by ASM_SPEC among the various targets\n+   for handling -mcpu=xxx switches.  */\n+#define ASM_CPU_SPEC \\\n+\"%{!mcpu*: \\\n+  %{mpower: %{!mpower2: -mpwr}} \\\n+  %{mpower2: -mpwrx} \\\n+  %{mpowerpc*: -mppc} \\\n+  %{mno-power: %{!mpowerpc*: -mcom}} \\\n+  %{!mno-power: %{!mpower2: %(asm_default)}}} \\\n+%{mcpu=common: -mcom} \\\n+%{mcpu=power: -mpwr} \\\n+%{mcpu=power2: -mpwrx} \\\n+%{mcpu=powerpc: -mppc} \\\n+%{mcpu=rios: -mpwr} \\\n+%{mcpu=rios1: -mpwr} \\\n+%{mcpu=rios2: -mpwrx} \\\n+%{mcpu=rsc: -mpwr} \\\n+%{mcpu=rsc1: -mpwr} \\\n+%{mcpu=401: -mppc} \\\n+%{mcpu=403: -mppc} \\\n+%{mcpu=505: -mppc} \\\n+%{mcpu=601: -m601} \\\n+%{mcpu=602: -mppc} \\\n+%{mcpu=603: -mppc} \\\n+%{mcpu=603e: -mppc} \\\n+%{mcpu=ec603e: -mppc} \\\n+%{mcpu=604: -mppc} \\\n+%{mcpu=604e: -mppc} \\\n+%{mcpu=620: -mppc} \\\n+%{mcpu=740: -mppc} \\\n+%{mcpu=750: -mppc} \\\n+%{mcpu=801: -mppc} \\\n+%{mcpu=821: -mppc} \\\n+%{mcpu=823: -mppc} \\\n+%{mcpu=860: -mppc}\"\n+\n+#define CPP_DEFAULT_SPEC \"\"\n+\n+#define ASM_DEFAULT_SPEC \"\"\n+\n /* This macro defines names of additional specifications to put in the specs\n    that can be used in various specifications like CC1_SPEC.  Its definition\n    is an initializer with a subgrouping for each command option.\n@@ -1461,16 +1537,6 @@ typedef struct rs6000_args\n    argument is passed depends on whether or not it is a named argument.  */\n #define STRICT_ARGUMENT_NAMING 1\n \n-/* This macro generates the assembly code for function entry.\n-   FILE is a stdio stream to output the code to.\n-   SIZE is an int: how many units of temporary storage to allocate.\n-   Refer to the array `regs_ever_live' to determine which registers\n-   to save; `regs_ever_live[I]' is nonzero if register number I\n-   is ever used in the function.  This macro is responsible for\n-   knowing which registers should not be saved even if used.  */\n-\n-#define FUNCTION_PROLOGUE(FILE, SIZE) output_prolog (FILE, SIZE)\n-\n /* Output assembler code to FILE to increment profiler label # LABELNO\n    for profiling a function entry.  */\n \n@@ -1496,17 +1562,6 @@ typedef struct rs6000_args\n        && TARGET_AIX\t\t\t\t\t\t\\\n        && (REGNO) == TOC_REGISTER))\n \n-/* This macro generates the assembly code for function exit,\n-   on machines that need it.  If FUNCTION_EPILOGUE is not defined\n-   then individual return instructions are generated for each\n-   return statement.  Args are same as for FUNCTION_PROLOGUE.\n-\n-   The function epilogue should not depend on the current stack pointer!\n-   It should use the frame pointer only.  This is mandatory because\n-   of alloca; we also take advantage of it to omit stack adjustments\n-   before returning.  */\n-\n-#define FUNCTION_EPILOGUE(FILE, SIZE) output_epilog (FILE, SIZE)\n \f\n /* TRAMPOLINE_TEMPLATE deleted */\n \n@@ -2486,12 +2541,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n ( (OUTPUT) = (char *) alloca (strlen ((NAME)) + 10),\t\\\n   sprintf ((OUTPUT), \"%s.%d\", (NAME), (LABELNO)))\n \n-/* Define the parentheses used to group arithmetic operations\n-   in assembler code.  */\n-\n-#define ASM_OPEN_PAREN \"(\"\n-#define ASM_CLOSE_PAREN \")\"\n-\n /* Pick up the return address upon entry to a procedure. Used for\n    dwarf2 unwind information.  This also enables the table driven\n    mechanism.  */"}, {"sha": "0a63786d914f08ac3ad2f100ad1f6d5e039a32dd", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 73, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f984d8df1826954f26837f5cf52125bb0938f489/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=f984d8df1826954f26837f5cf52125bb0938f489", "patch": "@@ -37,79 +37,6 @@ Boston, MA 02111-1307, USA.  */\n /* Override rs6000.h definition.  */\n #undef\tCPP_DEFAULT_SPEC\n #define\tCPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n-/* Common CPP definitions used by CPP_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#define CPP_CPU_SPEC \\\n-\"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -D_ARCH_PWR}} \\\n-  %{mpower2: -D_ARCH_PWR2} \\\n-  %{mpowerpc*: -D_ARCH_PPC} \\\n-  %{mno-power: %{!mpowerpc*: -D_ARCH_COM}} \\\n-  %{!mno-power: %{!mpower2: %(cpp_default)}}} \\\n-%{mcpu=common: -D_ARCH_COM} \\\n-%{mcpu=power: -D_ARCH_PWR} \\\n-%{mcpu=power2: -D_ARCH_PWR2} \\\n-%{mcpu=powerpc: -D_ARCH_PPC} \\\n-%{mcpu=rios: -D_ARCH_PWR} \\\n-%{mcpu=rios1: -D_ARCH_PWR} \\\n-%{mcpu=rios2: -D_ARCH_PWR2} \\\n-%{mcpu=rsc: -D_ARCH_PWR} \\\n-%{mcpu=rsc1: -D_ARCH_PWR} \\\n-%{mcpu=401: -D_ARCH_PPC} \\\n-%{mcpu=403: -D_ARCH_PPC} \\\n-%{mcpu=505: -D_ARCH_PPC} \\\n-%{mcpu=601: -D_ARCH_PPC -D_ARCH_PWR} \\\n-%{mcpu=602: -D_ARCH_PPC} \\\n-%{mcpu=603: -D_ARCH_PPC} \\\n-%{mcpu=603e: -D_ARCH_PPC} \\\n-%{mcpu=ec603e: -D_ARCH_PPC} \\\n-%{mcpu=604: -D_ARCH_PPC} \\\n-%{mcpu=604e: -D_ARCH_PPC} \\\n-%{mcpu=620: -D_ARCH_PPC} \\\n-%{mcpu=740: -D_ARCH_PPC} \\\n-%{mcpu=750: -D_ARCH_PPC} \\\n-%{mcpu=801: -D_ARCH_PPC} \\\n-%{mcpu=821: -D_ARCH_PPC} \\\n-%{mcpu=823: -D_ARCH_PPC} \\\n-%{mcpu=860: -D_ARCH_PPC}\"\n-\n-#define CPP_DEFAULT_SPEC \"-D_ARCH_PPC\"\n-\n-/* Common ASM definitions used by ASM_SPEC among the various targets\n-   for handling -mcpu=xxx switches.  */\n-#define ASM_CPU_SPEC \\\n-\"%{!mcpu*: \\\n-  %{mpower: %{!mpower2: -mpwr}} \\\n-  %{mpower2: -mpwrx} \\\n-  %{mpowerpc*: -mppc} \\\n-  %{mno-power: %{!mpowerpc*: -mcom}} \\\n-  %{!mno-power: %{!mpower2: %(asm_default)}}} \\\n-%{mcpu=common: -mcom} \\\n-%{mcpu=power: -mpwr} \\\n-%{mcpu=power2: -mpwrx} \\\n-%{mcpu=powerpc: -mppc} \\\n-%{mcpu=rios: -mpwr} \\\n-%{mcpu=rios1: -mpwr} \\\n-%{mcpu=rios2: -mpwrx} \\\n-%{mcpu=rsc: -mpwr} \\\n-%{mcpu=rsc1: -mpwr} \\\n-%{mcpu=401: -mppc} \\\n-%{mcpu=403: -mppc} \\\n-%{mcpu=505: -mppc} \\\n-%{mcpu=601: -m601} \\\n-%{mcpu=602: -mppc} \\\n-%{mcpu=603: -mppc} \\\n-%{mcpu=603e: -mppc} \\\n-%{mcpu=ec603e: -mppc} \\\n-%{mcpu=604: -mppc} \\\n-%{mcpu=604e: -mppc} \\\n-%{mcpu=620: -mppc} \\\n-%{mcpu=740: -mppc} \\\n-%{mcpu=750: -mppc} \\\n-%{mcpu=801: -mppc} \\\n-%{mcpu=821: -mppc} \\\n-%{mcpu=823: -mppc} \\\n-%{mcpu=860: -mppc}\"\n \n /* Small data support types.  */\n enum rs6000_sdata_type {"}]}