{"sha": "0536d5b37dd18b0eb9221ec9f55ca29585b43759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUzNmQ1YjM3ZGQxOGIwZWI5MjIxZWM5ZjU1Y2EyOTU4NWI0Mzc1OQ==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-11-22T07:58:29Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2018-11-22T07:58:29Z"}, "message": "Replace sync builtins with atomic builtins\n\nThe old __sync builtins have been deprecated for a long time now in\nfavor of the __atomic builtins following the C++11/C11 memory model.\nThis patch converts libgfortran to use the modern __atomic builtins.\n\nAt the same time I weakened the consistency to relaxed for\nincrementing and decrementing the counter, and acquire-release when\ndecrementing to check whether the counter is 0 and the unit can be\nfreed.  This is similar to e.g. std::shared_ptr in C++.\n\nRegtested on x86_64-pc-linux-gnu.\n\nlibgfortran/ChangeLog:\n\n2018-11-22  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* acinclude.m4 (LIBGFOR_CHECK_ATOMIC_FETCH_ADD): Rename and test\n\tpresence of atomic builtins instead of sync builtins.\n\t* configure.ac (LIBGFOR_CHECK_ATOMIC_FETCH_ADD): Call new test.\n\t* io/io.h (inc_waiting_locked): Use __atomic_fetch_add.\n\t(predec_waiting_locked): Use __atomic_add_fetch.\n\t(dec_waiting_unlocked): Use __atomic_fetch_add.\n\t* config.h.in: Regenerated.\n\t* configure: Regenerated.\n        * Makefile.in: Regenerated.\n\nFrom-SVN: r266367", "tree": {"sha": "1c47a0906545646e489776bb7192e076e86825f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c47a0906545646e489776bb7192e076e86825f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0536d5b37dd18b0eb9221ec9f55ca29585b43759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0536d5b37dd18b0eb9221ec9f55ca29585b43759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0536d5b37dd18b0eb9221ec9f55ca29585b43759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0536d5b37dd18b0eb9221ec9f55ca29585b43759/comments", "author": null, "committer": null, "parents": [{"sha": "d8bcb00f21f21da751204a6d96ef70cb6b037b97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8bcb00f21f21da751204a6d96ef70cb6b037b97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8bcb00f21f21da751204a6d96ef70cb6b037b97"}], "stats": {"total": 119, "additions": 78, "deletions": 41}, "files": [{"sha": "59c16f35072e2870269f685982e8b703a8ddf436", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -1,3 +1,15 @@\n+2018-11-22  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* acinclude.m4 (LIBGFOR_CHECK_ATOMIC_FETCH_ADD): Rename and test\n+\tpresence of atomic builtins instead of sync builtins.\n+\t* configure.ac (LIBGFOR_CHECK_ATOMIC_FETCH_ADD): Call new test.\n+\t* io/io.h (inc_waiting_locked): Use __atomic_fetch_add.\n+\t(predec_waiting_locked): Use __atomic_add_fetch.\n+\t(dec_waiting_unlocked): Use __atomic_fetch_add.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* Makefile.in: Regenerated.\n+\n 2018-11-09  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/78351"}, {"sha": "2424f7e6ba8f0f1cf4b555e9364be5221c674c89", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -690,6 +690,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@"}, {"sha": "5b0c094e71697e73a3845cf1f22fae326dc90c30", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -59,17 +59,17 @@ extern void bar(void) __attribute__((alias(\"foo\")));]],\n       [Define to 1 if the target supports __attribute__((alias(...))).])\n   fi])\n \n-dnl Check whether the target supports __sync_fetch_and_add.\n-AC_DEFUN([LIBGFOR_CHECK_SYNC_FETCH_AND_ADD], [\n-  AC_CACHE_CHECK([whether the target supports __sync_fetch_and_add],\n-\t\t libgfor_cv_have_sync_fetch_and_add, [\n+dnl Check whether the target supports __atomic_fetch_add.\n+AC_DEFUN([LIBGFOR_CHECK_ATOMIC_FETCH_ADD], [\n+  AC_CACHE_CHECK([whether the target supports __atomic_fetch_add],\n+\t\t libgfor_cv_have_atomic_fetch_add, [\n   AC_LINK_IFELSE([AC_LANG_PROGRAM([[int foovar = 0;]], [[\n-if (foovar <= 0) return __sync_fetch_and_add (&foovar, 1);\n-if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);]])],\n-\t      libgfor_cv_have_sync_fetch_and_add=yes, libgfor_cv_have_sync_fetch_and_add=no)])\n-  if test $libgfor_cv_have_sync_fetch_and_add = yes; then\n-    AC_DEFINE(HAVE_SYNC_FETCH_AND_ADD, 1,\n-\t      [Define to 1 if the target supports __sync_fetch_and_add])\n+if (foovar <= 0) return __atomic_fetch_add (&foovar, 1, __ATOMIC_ACQ_REL);\n+if (foovar > 10) return __atomic_add_fetch (&foovar, -1, __ATOMIC_ACQ_REL);]])],\n+\t      libgfor_cv_have_atomic_fetch_add=yes, libgfor_cv_have_atomic_fetch_add=no)])\n+  if test $libgfor_cv_have_atomic_fetch_add = yes; then\n+    AC_DEFINE(HAVE_ATOMIC_FETCH_ADD, 1,\n+\t      [Define to 1 if the target supports __atomic_fetch_add])\n   fi])\n \n dnl Check for pragma weak."}, {"sha": "cbd720a26702e9471bc843045f5c3bdf1f2ce0ef", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -72,6 +72,9 @@\n /* Define to 1 if you have the `atanl' function. */\n #undef HAVE_ATANL\n \n+/* Define to 1 if the target supports __atomic_fetch_add */\n+#undef HAVE_ATOMIC_FETCH_ADD\n+\n /* Define to 1 if the target supports __attribute__((alias(...))). */\n #undef HAVE_ATTRIBUTE_ALIAS\n \n@@ -741,9 +744,6 @@\n /* Define to 1 if you have the `symlink' function. */\n #undef HAVE_SYMLINK\n \n-/* Define to 1 if the target supports __sync_fetch_and_add */\n-#undef HAVE_SYNC_FETCH_AND_ADD\n-\n /* Define to 1 if you have the <sys/random.h> header file. */\n #undef HAVE_SYS_RANDOM_H\n "}, {"sha": "62e80a0b275f2effc22c6d7b8461f7c3859a1bbc", "filename": "libgfortran/configure", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -780,6 +780,7 @@ infodir\n docdir\n oldincludedir\n includedir\n+runstatedir\n localstatedir\n sharedstatedir\n sysconfdir\n@@ -870,6 +871,7 @@ datadir='${datarootdir}'\n sysconfdir='${prefix}/etc'\n sharedstatedir='${prefix}/com'\n localstatedir='${prefix}/var'\n+runstatedir='${localstatedir}/run'\n includedir='${prefix}/include'\n oldincludedir='/usr/include'\n docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\n@@ -1122,6 +1124,15 @@ do\n   | -silent | --silent | --silen | --sile | --sil)\n     silent=yes ;;\n \n+  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n+  | --runstate | --runstat | --runsta | --runst | --runs \\\n+  | --run | --ru | --r)\n+    ac_prev=runstatedir ;;\n+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n+  | --run=* | --ru=* | --r=*)\n+    runstatedir=$ac_optarg ;;\n+\n   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n     ac_prev=sbindir ;;\n   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n@@ -1259,7 +1270,7 @@ fi\n for ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n \t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n \t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n-\t\tlibdir localedir mandir\n+\t\tlibdir localedir mandir runstatedir\n do\n   eval ac_val=\\$$ac_var\n   # Remove trailing slashes.\n@@ -1412,6 +1423,7 @@ Fine tuning of the installation directories:\n   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]\n   --libdir=DIR            object code libraries [EPREFIX/lib]\n   --includedir=DIR        C header files [PREFIX/include]\n   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n@@ -12684,7 +12696,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12687 \"configure\"\n+#line 12699 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12790,7 +12802,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 12793 \"configure\"\n+#line 12805 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -16039,7 +16051,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -16085,7 +16097,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -16109,7 +16121,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -16154,7 +16166,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -16178,7 +16190,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -26283,11 +26295,11 @@ $as_echo \"#define HAVE_ATTRIBUTE_ALIAS 1\" >>confdefs.h\n \n   fi\n \n-# Check out sync builtins support.\n+# Check out atomic builtins support.\n \n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports __sync_fetch_and_add\" >&5\n-$as_echo_n \"checking whether the target supports __sync_fetch_and_add... \" >&6; }\n-if ${libgfor_cv_have_sync_fetch_and_add+:} false; then :\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the target supports __atomic_fetch_add\" >&5\n+$as_echo_n \"checking whether the target supports __atomic_fetch_add... \" >&6; }\n+if ${libgfor_cv_have_atomic_fetch_add+:} false; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n@@ -26301,25 +26313,25 @@ int\n main ()\n {\n \n-if (foovar <= 0) return __sync_fetch_and_add (&foovar, 1);\n-if (foovar > 10) return __sync_add_and_fetch (&foovar, -1);\n+if (foovar <= 0) return __atomic_fetch_add (&foovar, 1, __ATOMIC_ACQ_REL);\n+if (foovar > 10) return __atomic_add_fetch (&foovar, -1, __ATOMIC_ACQ_REL);\n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_c_try_link \"$LINENO\"; then :\n-  libgfor_cv_have_sync_fetch_and_add=yes\n+  libgfor_cv_have_atomic_fetch_add=yes\n else\n-  libgfor_cv_have_sync_fetch_and_add=no\n+  libgfor_cv_have_atomic_fetch_add=no\n fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_sync_fetch_and_add\" >&5\n-$as_echo \"$libgfor_cv_have_sync_fetch_and_add\" >&6; }\n-  if test $libgfor_cv_have_sync_fetch_and_add = yes; then\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgfor_cv_have_atomic_fetch_add\" >&5\n+$as_echo \"$libgfor_cv_have_atomic_fetch_add\" >&6; }\n+  if test $libgfor_cv_have_atomic_fetch_add = yes; then\n \n-$as_echo \"#define HAVE_SYNC_FETCH_AND_ADD 1\" >>confdefs.h\n+$as_echo \"#define HAVE_ATOMIC_FETCH_ADD 1\" >>confdefs.h\n \n   fi\n "}, {"sha": "30ff87347603a2d35f4d8c4add874e40bce5541d", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -608,8 +608,8 @@ fi\n LIBGFOR_CHECK_ATTRIBUTE_VISIBILITY\n LIBGFOR_CHECK_ATTRIBUTE_ALIAS\n \n-# Check out sync builtins support.\n-LIBGFOR_CHECK_SYNC_FETCH_AND_ADD\n+# Check out atomic builtins support.\n+LIBGFOR_CHECK_ATOMIC_FETCH_ADD\n \n # Check out #pragma weak.\n LIBGFOR_GTHREAD_WEAK"}, {"sha": "282c1455763f9594616541d53c5791b341f08976", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0536d5b37dd18b0eb9221ec9f55ca29585b43759/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=0536d5b37dd18b0eb9221ec9f55ca29585b43759", "patch": "@@ -961,8 +961,8 @@ internal_proto(free_ionml);\n static inline void\n inc_waiting_locked (gfc_unit *u)\n {\n-#ifdef HAVE_SYNC_FETCH_AND_ADD\n-  (void) __sync_fetch_and_add (&u->waiting, 1);\n+#ifdef HAVE_ATOMIC_FETCH_ADD\n+  (void) __atomic_fetch_add (&u->waiting, 1, __ATOMIC_RELAXED);\n #else\n   u->waiting++;\n #endif\n@@ -971,8 +971,20 @@ inc_waiting_locked (gfc_unit *u)\n static inline int\n predec_waiting_locked (gfc_unit *u)\n {\n-#ifdef HAVE_SYNC_FETCH_AND_ADD\n-  return __sync_add_and_fetch (&u->waiting, -1);\n+#ifdef HAVE_ATOMIC_FETCH_ADD\n+  /* Note that the pattern\n+\n+     if (predec_waiting_locked (u) == 0)\n+         // destroy u\n+\t \n+     could be further optimized by making this be an __ATOMIC_RELEASE,\n+     and then inserting a\n+\n+     __atomic_thread_fence (__ATOMIC_ACQUIRE);\n+\n+     inside the branch before destroying.  But for now, lets keep it\n+     simple.  */\n+  return __atomic_add_fetch (&u->waiting, -1, __ATOMIC_ACQ_REL);\n #else\n   return --u->waiting;\n #endif\n@@ -981,8 +993,8 @@ predec_waiting_locked (gfc_unit *u)\n static inline void\n dec_waiting_unlocked (gfc_unit *u)\n {\n-#ifdef HAVE_SYNC_FETCH_AND_ADD\n-  (void) __sync_fetch_and_add (&u->waiting, -1);\n+#ifdef HAVE_ATOMIC_FETCH_ADD\n+  (void) __atomic_fetch_add (&u->waiting, -1, __ATOMIC_RELAXED);\n #else\n   __gthread_mutex_lock (&unit_lock);\n   u->waiting--;"}]}