{"sha": "ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE3ODA4N2I2YzEyZmE0ZTNhYjlkNmIxMGMwNzQ2MjRkYWVjMjBjZQ==", "commit": {"author": {"name": "Kai Tietz", "email": "ktietz@redhat.com", "date": "2011-03-25T19:20:52Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2011-03-25T19:20:52Z"}, "message": "Changelog c-family/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* c-ada-spec.c (compare_comment): Use filename_cmp\n\tinstead of strcmp for filename.\n\n\nChangelog fortran/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* scanner.c (preprocessor_line): Use filename_cmp\n\tinstead of strcmp.\n\nChangelog gcc/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* collect2.c (write_c_file_stat): Handle backslash\n\tas right-hand directory separator.\n\t(resolve_lib_name): Use IS_DIR_SEPARATOR instead of\n\tchecking just for slash.\n\t* coverage.c (coverage_init): Use IS_ABSOLUTE_PATH\n\tinstead of checking for trailing slash.\n\t* gcc.c (record_temp_file): Use filename_cmp instead\n\tof strcmp.\n\t(do_spec_1): Likewise.\n\t(replace_outfile_spec_function): Likewise.\n\t(is_directory): Use filename_ncmp instead of strncmp.\n\t(print_multilib_info): Likewise.\n\t* gcov.c (find_source): Use filename_cmp instead\n\tinstead of strcmp.\n\t(make_gcov_file_name): Fix order of slash/backslash\n\tchecks.\n\t* incpath.c (DIRS_EQ): Use filename_cmp instead of strcmp.\n\t(add_standard_paths): Likewise.\n\t* mips-tfile.c (saber_stop): Handle backslash.\n\t* prefix.c (update_path): Use filename_ncmp instead of\n\tstrncmp.\n\t* profile.c (output_location): Use filename_cmp instead\n\tof strcmp.\n\t* read-md.c (handle_toplevel_file): Handle backslash.\n\t* tlink.c (frob_extension):  Likewise.\n\t* tree-cfg.c (same_line_p): Use filename_cmp instead of\n\tstrcmp.\n\t* tree-dump.c (dequeue_and_dump): Handle backslash.\n\t* tree.c (get_file_function_name): Likewise.\n\t* gengtype.c (read_input_list): Likewise.\n\t(get_file_realbasename): Likewise.\n\t(get_output_file_with_visibility): Use filename_cmp\n\tinstead of strcmp.\n\nChangeLog java/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* jcf-parse.c (java_read_sourcefilenames): Use filename_cmp\n\tinstead of strcmp.\n\t(set_source_filename): Likewise.\n\t* win32-host.c (jcf_open_exact_case): Likewise.\n\nChangeLog lto/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* lto.c (lto_resolution_read): Use filename_cmp instead\n\tof strcmp.\n\t(lto_read_section_data): Likewise.\n\n\nChangeLog cp/\n\n2011-03-25  Kai Tietz  <ktietz@redhat.com>\n\n\t* lex.c (interface_strcmp): Handle dos-paths.\n\t(handle_pragma_implementation): Use filename_cmp instead of\n\tstrcmp.\n\t(in_main_input_context): Likewise.\n\nFrom-SVN: r171522", "tree": {"sha": "5bb0b204a88f6a48512bf569dcbe77a176e03ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb0b204a88f6a48512bf569dcbe77a176e03ee7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/comments", "author": null, "committer": null, "parents": [{"sha": "4489800d000d008d3bf47ffcdc85349eff1aec14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4489800d000d008d3bf47ffcdc85349eff1aec14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4489800d000d008d3bf47ffcdc85349eff1aec14"}], "stats": {"total": 251, "additions": 161, "deletions": 90}, "files": [{"sha": "e7983a2fe44e060d81c2d864d63557051b4eb7ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,39 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* collect2.c (write_c_file_stat): Handle backslash\n+\tas right-hand directory separator.\n+\t(resolve_lib_name): Use IS_DIR_SEPARATOR instead of\n+\tchecking just for slash.\n+\t* coverage.c (coverage_init): Use IS_ABSOLUTE_PATH\n+\tinstead of checking for trailing slash.\n+\t* gcc.c (record_temp_file): Use filename_cmp instead\n+\tof strcmp.\n+\t(do_spec_1): Likewise.\n+\t(replace_outfile_spec_function): Likewise.\n+\t(is_directory): Use filename_ncmp instead of strncmp.\n+\t(print_multilib_info): Likewise.\n+\t* gcov.c (find_source): Use filename_cmp instead\n+\tinstead of strcmp.\n+\t(make_gcov_file_name): Fix order of slash/backslash\n+\tchecks.\n+\t* incpath.c (DIRS_EQ): Use filename_cmp instead of strcmp.\n+\t(add_standard_paths): Likewise.\n+\t* mips-tfile.c (saber_stop): Handle backslash.\n+\t* prefix.c (update_path): Use filename_ncmp instead of\n+\tstrncmp.\n+\t* profile.c (output_location): Use filename_cmp instead\n+\tof strcmp.\n+\t* read-md.c (handle_toplevel_file): Handle backslash.\n+\t* tlink.c (frob_extension):  Likewise.\n+\t* tree-cfg.c (same_line_p): Use filename_cmp instead of\n+\tstrcmp.\n+\t* tree-dump.c (dequeue_and_dump): Handle backslash.\n+\t* tree.c (get_file_function_name): Likewise.\n+\t* gengtype.c (read_input_list): Likewise.\n+\t(get_file_realbasename): Likewise.\n+\t(get_output_file_with_visibility): Use filename_cmp\n+\tinstead of strcmp.\n+\n 2011-03-25  Richard Sandiford  <richard.sandiford@linaro.org>\n \n \t* config/arm/arm.h (CANNOT_CHANGE_MODE_CLASS): Restrict FPA_REGS"}, {"sha": "a1cd34663cb677f5e89b182166a65afcf2294be7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,8 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* c-ada-spec.c (compare_comment): Use filename_cmp\n+\tinstead of strcmp for filename.\n+\n 2011-03-25  Jeff Law  <law@redhat.com>\n \n \t* c-family/c-common.c (def_fn_type): Add missing va_end."}, {"sha": "edfc43b23fcb9741e021533f45d62ed63fc11653", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -559,7 +559,8 @@ compare_comment (const void *lp, const void *rp)\n   const cpp_comment *rhs = (const cpp_comment *) rp;\n \n   if (LOCATION_FILE (lhs->sloc) != LOCATION_FILE (rhs->sloc))\n-    return strcmp (LOCATION_FILE (lhs->sloc), LOCATION_FILE (rhs->sloc));\n+    return filename_cmp (LOCATION_FILE (lhs->sloc),\n+\t\t\t LOCATION_FILE (rhs->sloc));\n \n   if (LOCATION_LINE (lhs->sloc) != LOCATION_LINE (rhs->sloc))\n     return LOCATION_LINE (lhs->sloc) - LOCATION_LINE (rhs->sloc);"}, {"sha": "5b31f608754e675de98bebb291d7a71b8725f613", "filename": "gcc/collect2.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"system.h\"\n #include \"coretypes.h\"\n #include \"tm.h\"\n+#include \"filenames.h\"\n \n /* TARGET_64BIT may be defined to use driver specific functionality. */\n #undef TARGET_64BIT\n@@ -2314,12 +2315,8 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n   int frames = (frame_tables.number > 0);\n \n   /* Figure out name of output_file, stripping off .so version.  */\n-  p = strrchr (output_file, '/');\n-  if (p == 0)\n-    p = output_file;\n-  else\n-    p++;\n-  q = p;\n+  q = p = lbasename (output_file);\n+\n   while (q)\n     {\n       q = strchr (q,'.');\n@@ -2330,7 +2327,7 @@ write_c_file_stat (FILE *stream, const char *name ATTRIBUTE_UNUSED)\n \t}\n       else\n \t{\n-\t  if (strncmp (q, SHLIB_SUFFIX, strlen (SHLIB_SUFFIX)) == 0)\n+\t  if (filename_ncmp (q, SHLIB_SUFFIX, strlen (SHLIB_SUFFIX)) == 0)\n \t    {\n \t      q += strlen (SHLIB_SUFFIX);\n \t      break;\n@@ -3192,10 +3189,10 @@ resolve_lib_name (const char *name)\n       for (; list; list = list->next)\n \t{\n \t  /* The following lines are needed because path_prefix list\n-\t     may contain directories both with trailing '/' and\n+\t     may contain directories both with trailing DIR_SEPARATOR and\n \t     without it.  */\n \t  const char *p = \"\";\n-\t  if (list->prefix[strlen(list->prefix)-1] != '/')\n+\t  if (!IS_DIR_SEPARATOR (list->prefix[strlen(list->prefix)-1]))\n \t    p = \"/\";\n \t  for (j = 0; j < 2; j++)\n \t    {"}, {"sha": "79d20ab5cee330c35d2319bc7f5a2673205b0539", "filename": "gcc/coverage.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -49,6 +49,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-pass.h\"\n #include \"diagnostic-core.h\"\n #include \"intl.h\"\n+#include \"filenames.h\"\n \n #include \"gcov-io.c\"\n \n@@ -982,7 +983,7 @@ coverage_init (const char *filename)\n   /* + 1 for extra '/', in case prefix doesn't end with /.  */\n   int prefix_len;\n \n-  if (profile_data_prefix == 0 && filename[0] != '/')\n+  if (profile_data_prefix == 0 && !IS_ABSOLUTE_PATH(&filename[0]))\n     profile_data_prefix = getpwd ();\n \n   prefix_len = (profile_data_prefix) ? strlen (profile_data_prefix) + 1 : 0;"}, {"sha": "597093e03744dc785c6b2c284cc04d01e2b58816", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,10 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* lex.c (interface_strcmp): Handle dos-paths.\n+\t(handle_pragma_implementation): Use filename_cmp instead of\n+\tstrcmp.\n+\t(in_main_input_context): Likewise.\n+\n 2011-03-25  Jason Merrill  <jason@redhat.com>\n \n \tCore 1135"}, {"sha": "691a2ec1311b854912abbe4be90d0046cf65588c", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -280,10 +280,10 @@ interface_strcmp (const char* s)\n       const char *t1 = ifiles->filename;\n       s1 = s;\n \n-      if (*s1 != *t1 || *s1 == 0)\n+      if (*s1 == 0 || filename_ncmp (s1, t1, 1) != 0)\n \tcontinue;\n \n-      while (*s1 == *t1 && *s1 != 0)\n+      while (*s1 != 0 && filename_ncmp (s1, t1, 1) == 0)\n \ts1++, t1++;\n \n       /* A match.  */\n@@ -412,7 +412,7 @@ handle_pragma_implementation (cpp_reader* dfile ATTRIBUTE_UNUSED )\n \n   for (; ifiles; ifiles = ifiles->next)\n     {\n-      if (! strcmp (ifiles->filename, filename))\n+      if (! filename_cmp (ifiles->filename, filename))\n \tbreak;\n     }\n   if (ifiles == 0)\n@@ -706,8 +706,8 @@ in_main_input_context (void)\n   struct tinst_level *tl = outermost_tinst_level();\n \n   if (tl)\n-    return strcmp (main_input_filename,\n-                  LOCATION_FILE (tl->locus)) == 0;\n+    return filename_cmp (main_input_filename,\n+\t\t\t LOCATION_FILE (tl->locus)) == 0;\n   else\n-    return strcmp (main_input_filename, input_filename) == 0;\n+    return filename_cmp (main_input_filename, input_filename) == 0;\n }"}, {"sha": "f18a01da5465611b7ccf8c92ff062c363c29c401", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,8 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* scanner.c (preprocessor_line): Use filename_cmp\n+\tinstead of strcmp.\n+\n 2011-03-25  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/48174"}, {"sha": "8478b1013df9c30d24eec16b2d05cdd3d44ef40c", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1754,7 +1754,7 @@ preprocessor_line (gfc_char_t *c)\n   if (flag[2]) /* Ending current file.  */\n     {\n       if (!current_file->up\n-\t  || strcmp (current_file->up->filename, filename) != 0)\n+\t  || filename_cmp (current_file->up->filename, filename) != 0)\n \t{\n \t  gfc_warning_now (\"%s:%d: file %s left but not entered\",\n \t\t\t   current_file->filename, current_file->line,\n@@ -1774,7 +1774,7 @@ preprocessor_line (gfc_char_t *c)\n   /* The name of the file can be a temporary file produced by\n      cpp. Replace the name if it is different.  */\n \n-  if (strcmp (current_file->filename, filename) != 0)\n+  if (filename_cmp (current_file->filename, filename) != 0)\n     {\n        /* FIXME: we leak the old filename because a pointer to it may be stored\n           in the linemap.  Alternative could be using GC or updating linemap to\n@@ -1891,7 +1891,7 @@ load_file (const char *realfilename, const char *displayedname, bool initial)\n   filename = displayedname ? displayedname : realfilename;\n \n   for (f = current_file; f; f = f->up)\n-    if (strcmp (filename, f->filename) == 0)\n+    if (filename_cmp (filename, f->filename) == 0)\n       {\n \tfprintf (stderr, \"%s:%d: Error: File '%s' is being included \"\n \t\t \"recursively\\n\", current_file->filename, current_file->line,"}, {"sha": "c399d14eedb1ebf7ca1e963315d2a68d7ae7ac62", "filename": "gcc/gcc.c", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -44,6 +44,7 @@ compilation is specified by a string called a \"spec\".  */\n #include \"flags.h\"\n #include \"opts.h\"\n #include \"vec.h\"\n+#include \"filenames.h\"\n \n /* By default there is no special suffix for target executables.  */\n /* FIXME: when autoconf is fixed, remove the host check - dj */\n@@ -1949,7 +1950,7 @@ record_temp_file (const char *filename, int always_delete, int fail_delete)\n     {\n       struct temp_file *temp;\n       for (temp = always_delete_queue; temp; temp = temp->next)\n-\tif (! strcmp (name, temp->name))\n+\tif (! filename_cmp (name, temp->name))\n \t  goto already1;\n \n       temp = XNEW (struct temp_file);\n@@ -1964,7 +1965,7 @@ record_temp_file (const char *filename, int always_delete, int fail_delete)\n     {\n       struct temp_file *temp;\n       for (temp = failure_delete_queue; temp; temp = temp->next)\n-\tif (! strcmp (name, temp->name))\n+\tif (! filename_cmp (name, temp->name))\n \t  goto already2;\n \n       temp = XNEW (struct temp_file);\n@@ -3629,9 +3630,9 @@ process_command (unsigned int decoded_options_count,\n \t{\n \t  temp = gcc_exec_prefix + len - sizeof (\"/lib/gcc/\") + 1;\n \t  if (IS_DIR_SEPARATOR (*temp)\n-\t      && strncmp (temp + 1, \"lib\", 3) == 0\n+\t      && filename_ncmp (temp + 1, \"lib\", 3) == 0\n \t      && IS_DIR_SEPARATOR (temp[4])\n-\t      && strncmp (temp + 5, \"gcc\", 3) == 0)\n+\t      && filename_ncmp (temp + 5, \"gcc\", 3) == 0)\n \t    len -= sizeof (\"/lib/gcc/\") - 1;\n \t}\n \n@@ -4729,7 +4730,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t    tmp[basename_length + suffix_length] = '\\0';\n \t\t    temp_filename = tmp;\n \n-\t\t    if (strcmp (temp_filename, gcc_input_filename) != 0)\n+\t\t    if (filename_cmp (temp_filename, gcc_input_filename) != 0)\n \t\t      {\n #ifndef HOST_LACKS_INODE_NUMBERS\n \t\t\tstruct stat st_temp;\n@@ -4755,7 +4756,7 @@ do_spec_1 (const char *spec, int inswitch, const char *soft_matched_part)\n \t\t\t/* Just compare canonical pathnames.  */\n \t\t\tchar* input_realname = lrealpath (gcc_input_filename);\n \t\t\tchar* temp_realname = lrealpath (temp_filename);\n-\t\t\tbool files_differ = strcmp (input_realname, temp_realname);\n+\t\t\tbool files_differ = filename_cmp (input_realname, temp_realname);\n \t\t\tfree (input_realname);\n \t\t\tfree (temp_realname);\n \t\t\tif (files_differ)\n@@ -5934,11 +5935,11 @@ is_directory (const char *path1, bool linker)\n   if (linker\n       && IS_DIR_SEPARATOR (path[0])\n       && ((cp - path == 6\n-\t   && strncmp (path + 1, \"lib\", 3) == 0)\n+\t   && filename_ncmp (path + 1, \"lib\", 3) == 0)\n \t  || (cp - path == 10\n-\t      && strncmp (path + 1, \"usr\", 3) == 0\n+\t      && filename_ncmp (path + 1, \"usr\", 3) == 0\n \t      && IS_DIR_SEPARATOR (path[4])\n-\t      && strncmp (path + 5, \"lib\", 3) == 0)))\n+\t      && filename_ncmp (path + 5, \"lib\", 3) == 0)))\n     return 0;\n \n   return (stat (path, &st) >= 0 && S_ISDIR (st.st_mode));\n@@ -6760,8 +6761,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t\t    }\n \n \t\t  gcc_assert (debug_check_temp_file[1]\n-\t\t\t      && strcmp (debug_check_temp_file[0],\n-\t\t\t\t\t debug_check_temp_file[1]));\n+\t\t\t      && filename_cmp (debug_check_temp_file[0],\n+\t\t\t\t\t       debug_check_temp_file[1]));\n \n \t\t  if (verbose_flag)\n \t\t    inform (0, \"comparing final insns dumps\");\n@@ -7665,7 +7666,7 @@ print_multilib_info (void)\n \t  /* If this is a duplicate, skip it.  */\n \t  skip = (last_path != 0\n \t\t  && (unsigned int) (p - this_path) == last_path_len\n-\t\t  && ! strncmp (last_path, this_path, last_path_len));\n+\t\t  && ! filename_ncmp (last_path, this_path, last_path_len));\n \n \t  last_path = this_path;\n \t  last_path_len = p - this_path;\n@@ -7869,7 +7870,7 @@ replace_outfile_spec_function (int argc, const char **argv)\n \n   for (i = 0; i < n_infiles; i++)\n     {\n-      if (outfiles[i] && !strcmp (outfiles[i], argv[0]))\n+      if (outfiles[i] && !filename_cmp (outfiles[i], argv[0]))\n \toutfiles[i] = xstrdup (argv[1]);\n     }\n   return NULL;\n@@ -7890,7 +7891,7 @@ remove_outfile_spec_function (int argc, const char **argv)\n \n   for (i = 0; i < n_infiles; i++)\n     {\n-      if (outfiles[i] && !strcmp (outfiles[i], argv[0]))\n+      if (outfiles[i] && !filename_cmp (outfiles[i], argv[0]))\n         outfiles[i] = NULL;\n     }\n   return NULL;"}, {"sha": "56fff3a75fa087de6c5f6939b51fc370f11fc3b0", "filename": "gcc/gcov.c", "status": "modified", "additions": 23, "deletions": 14, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -728,7 +728,7 @@ find_source (const char *file_name)\n     file_name = \"<unknown>\";\n \n   for (src = sources; src; src = src->next)\n-    if (!strcmp (file_name, src->name))\n+    if (!filename_cmp (file_name, src->name))\n       break;\n \n   if (!src)\n@@ -1527,41 +1527,50 @@ make_gcov_file_name (const char *input_name, const char *src_name)\n \n   if (flag_preserve_paths)\n     {\n-      /* Convert '/' and '\\' to '#', remove '/./', convert '/../' to '/^/',\n+      /* Convert '/' and '\\' to '#', remove '/./', convert '/../' to '#^#',\n \t convert ':' to '~' on DOS based file system.  */\n       char *pnew = name, *pold = name;\n \n       /* First check for leading drive separator.  */\n \n       while (*pold != '\\0')\n \t{\n-\t  if (*pold == '/' || *pold == '\\\\')\n-\t    {\n-\t      *pnew++ = '#';\n-\t      pold++;\n-\t    }\n #if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n-\t  else if (*pold == ':')\n+\t  if (*pold == ':')\n \t    {\n \t      *pnew++ = '~';\n \t      pold++;\n \t    }\n+\t  else\n #endif\n-\t  else if ((*pold == '/' && strstr (pold, \"/./\") == pold)\n-\t\t   || (*pold == '\\\\' && strstr (pold, \"\\\\.\\\\\") == pold))\n+\t  if ((*pold == '/'\n+\t\t    && (strstr (pold, \"/./\") == pold\n+\t\t        || strstr (pold, \"/.\\\\\") == pold))\n+\t\t   || (*pold == '\\\\'\n+\t\t       && (strstr (pold, \"\\\\.\\\\\") == pold\n+\t\t           || strstr (pold, \"\\\\./\") == pold)))\n \t      pold += 3;\n-\t  else if (*pold == '/' && strstr (pold, \"/../\") == pold)\n+\t  else if (*pold == '/'\n+\t\t   && (strstr (pold, \"/../\") == pold\n+\t\t       || strstr (pold, \"/..\\\\\") == pold))\n \t    {\n-\t      strcpy (pnew, \"/^/\");\n+\t      strcpy (pnew, \"#^#\");\n \t      pnew += 3;\n \t      pold += 4;\n \t    }\n-\t  else if (*pold == '\\\\' && strstr (pold, \"\\\\..\\\\\") == pold)\n+\t  else if (*pold == '\\\\'\n+\t\t   && (strstr (pold, \"\\\\..\\\\\") == pold\n+\t\t       || strstr (pold, \"\\\\../\") == pold))\n \t    {\n-\t      strcpy (pnew, \"\\\\^\\\\\");\n+\t      strcpy (pnew, \"#^#\");\n \t      pnew += 3;\n \t      pold += 4;\n \t    }\n+\t  else if (*pold == '/' || *pold == '\\\\')\n+\t    {\n+\t      *pnew++ = '#';\n+\t      pold++;\n+\t    }\n \t  else\n \t    *pnew++ = *pold++;\n \t}"}, {"sha": "d875683349c49aedb09238a65a1b763b1f954e76", "filename": "gcc/gengtype.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -28,6 +28,7 @@\n #include \"xregex.h\"\n #include \"obstack.h\"\n #include \"gengtype.h\"\n+#include \"filenames.h\"\n \n /* Data types, macros, etc. used only in this file.  */\n \n@@ -429,6 +430,12 @@ read_input_list (const char *listname)\n \tlang_bitmap bitmap = get_lang_bitmap (gt_files[f]);\n \tconst char *basename = get_file_basename (gt_files[f]);\n \tconst char *slashpos = strchr (basename, '/');\n+#ifdef HAVE_DOS_BASED_FILE_SYSTEM\n+\tconst char *slashpos2 = strchr (basename, '\\\\');\n+\n+\tif (!slashpos || (slashpos2 && slashpos2 < slashpos))\n+\t  slashpos = slashpos2;\n+#endif\n \n \tif (slashpos)\n \t  {\n@@ -1573,10 +1580,7 @@ open_base_files (void)\n static const char *\n get_file_realbasename (const input_file *inpf)\n {\n-  const char *f = get_input_file_name (inpf);\n-  const char *lastslash = strrchr (f, '/');\n-\n-  return (lastslash != NULL) ? lastslash + 1 : f;\n+  return lbasename (get_input_file_name (inpf));\n }\n \n /* For INPF a filename, return the relative path to INPF from\n@@ -2081,7 +2085,7 @@ get_output_file_with_visibility (input_file *inpf)\n   /* Look through to see if we've ever seen this output filename\n      before.  If found, cache the result in inpf.  */\n   for (r = output_files; r; r = r->next)\n-    if (strcmp (r->name, output_name) == 0)\n+    if (filename_cmp (r->name, output_name) == 0)\n       {\n \tinpf->inpoutf = r;\n \tDBGPRINTF (\"found r @ %p for output_name %s for_name %s\", (void*)r,\n@@ -4831,7 +4835,7 @@ htab_eq_inputfile (const void *x, const void *y)\n   const input_file *inpfx = (const input_file *) x;\n   const input_file *inpfy = (const input_file *) y;\n   gcc_assert (inpfx != NULL && inpfy != NULL);\n-  return !strcmp (get_input_file_name (inpfx), get_input_file_name (inpfy));\n+  return !filename_cmp (get_input_file_name (inpfx), get_input_file_name (inpfy));\n }\n \n "}, {"sha": "7d95ce218b5cbfa5b9160ddcfafa273d53fc7ff6", "filename": "gcc/incpath.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fincpath.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fincpath.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fincpath.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -45,7 +45,7 @@\n #define DIRS_EQ(A, B) ((A)->dev == (B)->dev \\\n \t&& INO_T_EQ((A)->ino, (B)->ino))\n #else\n-#define DIRS_EQ(A, B) (!strcmp ((A)->canonical_name, (B)->canonical_name))\n+#define DIRS_EQ(A, B) (!filename_cmp ((A)->canonical_name, (B)->canonical_name))\n #endif\n \n static const char dir_separator_str[] = { DIR_SEPARATOR, 0 };\n@@ -147,7 +147,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t\t now.  */\n \t      if (sysroot && p->add_sysroot)\n \t\tcontinue;\n-\t      if (!strncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))\n+\t      if (!filename_ncmp (p->fname, cpp_GCC_INCLUDE_DIR, len))\n \t\t{\n \t\t  char *str = concat (iprefix, p->fname + len, NULL);\n \t\t  if (p->multilib && imultilib)\n@@ -168,7 +168,7 @@ add_standard_paths (const char *sysroot, const char *iprefix,\n \t  if (sysroot && p->add_sysroot)\n \t    str = concat (sysroot, p->fname, NULL);\n \t  else if (!p->add_sysroot && relocated\n-\t\t   && strncmp (p->fname, cpp_PREFIX, cpp_PREFIX_len) == 0)\n+\t\t   && !filename_ncmp (p->fname, cpp_PREFIX, cpp_PREFIX_len))\n \t    {\n  \t      static const char *relocated_prefix;\n \t      /* If this path starts with the configure-time prefix,"}, {"sha": "61b24187337fbc5d91e17e742c887083e3240caf", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,10 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* jcf-parse.c (java_read_sourcefilenames): Use filename_cmp\n+\tinstead of strcmp.\n+\t(set_source_filename): Likewise.\n+\t* win32-host.c (jcf_open_exact_case): Likewise.\n+\n 2011-03-21  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/12171"}, {"sha": "ac0f0d3be520620974c5d833e411cfd259dedf0d", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -176,9 +176,9 @@ java_read_sourcefilenames (const char *fsource_filename)\n   if (fsource_filename \n       && filenames == 0\n       && strlen (fsource_filename) > strlen (\".java\")\n-      && strcmp ((fsource_filename \n-\t\t  + strlen (fsource_filename)\n-\t\t  - strlen (\".java\")),\n+      && filename_cmp ((fsource_filename\n+\t\t       + strlen (fsource_filename)\n+\t\t       - strlen (\".java\")),\n \t\t \".java\") != 0)\n     {\n /*       fsource_filename isn't a .java file but a list of filenames\n@@ -322,7 +322,7 @@ set_source_filename (JCF *jcf, int index)\n       /* Use the current input_filename (derived from the class name)\n \t if it has a directory prefix, but otherwise matches sfname. */\n       if (old_len > new_len\n-\t  && strcmp (sfname, old_filename + old_len - new_len) == 0\n+\t  && filename_cmp (sfname, old_filename + old_len - new_len) == 0\n \t  && (old_filename[old_len - new_len - 1] == '/'\n \t      || old_filename[old_len - new_len - 1] == '\\\\'))\n \treturn;"}, {"sha": "1d6b8fadc15617e89dac5d30fa39b82a39257df5", "filename": "gcc/java/win32-host.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2Fwin32-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fjava%2Fwin32-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fwin32-host.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -72,7 +72,7 @@ jcf_open_exact_case (const char *filename, int oflag)\n      all directory components would be tedious and time-consuming\n      and it's a pretty safe assumption that mixed-case package\n      names are a fringe case.... */\n-  if (strcmp (filename + filename_len - found_file_len, fd.cFileName))\n+  if (filename_cmp (filename + filename_len - found_file_len, fd.cFileName))\n     {\n       /* Reject this because it is not a perfect-case match. */\n       /* printf(\"************\\nRejected:\\n%s\\n%s\\n************\\n\\n\", filename, fd.cFileName); */"}, {"sha": "c07fa06174312d40cff52caebdc0eb2d4d91c126", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -1,3 +1,9 @@\n+2011-03-25  Kai Tietz  <ktietz@redhat.com>\n+\n+\t* lto.c (lto_resolution_read): Use filename_cmp instead\n+\tof strcmp.\n+\t(lto_read_section_data): Likewise.\n+\n 2011-03-25  Jeff Law  <law@redhat.com>\n \n \t* lto/lto-lang.c (def_fn_type): Add missing va_end."}, {"sha": "099243bfda438b9c1565bcfb8e9afdb3d20dad5e", "filename": "gcc/lto/lto.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Flto%2Flto.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Flto%2Flto.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2Flto.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -345,7 +345,7 @@ lto_resolution_read (splay_tree file_ids, FILE *resolution, lto_file *file)\n \n   fread (obj_name, sizeof (char), name_len, resolution);\n   obj_name[name_len] = '\\0';\n-  if (strcmp (obj_name, file->filename) != 0)\n+  if (filename_cmp (obj_name, file->filename) != 0)\n     internal_error (\"unexpected file name %s in linker resolution file. \"\n \t\t    \"Expected %s\", obj_name, file->filename);\n   if (file->offset != 0)\n@@ -582,7 +582,7 @@ lto_read_section_data (struct lto_file_decl_data *file_data,\n      or rather fix function body streaming to not stream them in\n      practically random order.  */\n   if (fd != -1\n-      && strcmp (fd_name, file_data->file_name) != 0)\n+      && filename_cmp (fd_name, file_data->file_name) != 0)\n     {\n       free (fd_name);\n       close (fd);"}, {"sha": "331ddbaa6dc8074a656fa5f2c05877361d0e3921", "filename": "gcc/mips-tfile.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fmips-tfile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fmips-tfile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tfile.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -606,6 +606,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"version.h\"\n #include \"intl.h\"\n+#include \"filenames.h\"\n \n #ifndef __SABER__\n #define saber_stop()\n@@ -4693,12 +4694,11 @@ int\n main (int argc, char **argv)\n {\n   int iflag = 0;\n-  char *p = strrchr (argv[0], '/');\n   char *num_end;\n   int option;\n   int i;\n \n-  progname = (p != 0) ? p+1 : argv[0];\n+  progname = lbasename (argv[0]);\n \n   (void) signal (SIGSEGV, catch_signal);\n   (void) signal (SIGBUS,  catch_signal);"}, {"sha": "67ebdd99ed6a0dd633e7426cfccb06db6465fd71", "filename": "gcc/prefix.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fprefix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fprefix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprefix.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -251,7 +251,7 @@ update_path (const char *path, const char *key)\n   char *result, *p;\n   const int len = strlen (std_prefix);\n \n-  if (! strncmp (path, std_prefix, len)\n+  if (! filename_ncmp (path, std_prefix, len)\n       && (IS_DIR_SEPARATOR(path[len])\n           || path[len] == '\\0')\n       && key != 0)"}, {"sha": "c5cada9e6043082b6d4df6ff5290f086c5297ddd", "filename": "gcc/profile.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -853,7 +853,7 @@ output_location (char const *file_name, int line,\n       return;\n     }\n \n-  name_differs = !prev_file_name || strcmp (file_name, prev_file_name);\n+  name_differs = !prev_file_name || filename_cmp (file_name, prev_file_name);\n   line_differs = prev_line != line;\n \n   if (name_differs || line_differs)"}, {"sha": "4f1933f447a189a7d48ad9d12ce760546b8655a7", "filename": "gcc/read-md.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fread-md.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Fread-md.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fread-md.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -985,14 +985,14 @@ handle_file (directive_handler_t handle_directive)\n static void\n handle_toplevel_file (directive_handler_t handle_directive)\n {\n-  char *lastsl;\n+  const char *base;\n \n   in_fname = read_md_filename;\n-  lastsl = strrchr (in_fname, '/');\n-  if (lastsl != NULL)\n-    base_dir = xstrndup (in_fname, lastsl - in_fname + 1);\n-  else\n+  base = lbasename (in_fname);\n+  if (base == in_fname)\n     base_dir = NULL;\n+  else\n+    base_dir = xstrndup (in_fname, base - in_fname);\n \n   handle_file (handle_directive);\n }"}, {"sha": "883aa0f0281aaada2504d172eb09b17875a8d891", "filename": "gcc/tlink.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftlink.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftlink.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftlink.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -30,6 +30,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"hashtab.h\"\n #include \"demangle.h\"\n #include \"collect2.h\"\n+#include \"filenames.h\"\n \n /* TARGET_64BIT may be defined to use driver specific functionality. */\n #undef TARGET_64BIT\n@@ -293,10 +294,9 @@ tlink_execute (const char *prog, char **argv, const char *outname,\n static char *\n frob_extension (const char *s, const char *ext)\n {\n-  const char *p = strrchr (s, '/');\n-  if (! p)\n-    p = s;\n-  p = strrchr (p, '.');\n+  const char *p;\n+\n+  p = strrchr (lbasename (s), '.');\n   if (! p)\n     p = s + strlen (s);\n "}, {"sha": "01893ba393e9dad0bab3ca2419c7464c5163fe0f", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -757,7 +757,7 @@ same_line_p (location_t locus1, location_t locus2)\n     return true;\n   return (from.file != NULL\n           && to.file != NULL\n-          && strcmp (from.file, to.file) == 0);\n+          && filename_cmp (from.file, to.file) == 0);\n }\n \n /* Assign a unique discriminator value to block BB if it begins at the same"}, {"sha": "039aca16cc8ec7962f18f44eb4bcad1e936daf23", "filename": "gcc/tree-dump.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dump.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -25,6 +25,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tm.h\"\n #include \"tree.h\"\n #include \"splay-tree.h\"\n+#include \"filenames.h\"\n #include \"diagnostic-core.h\"\n #include \"toplev.h\"\n #include \"tree-dump.h\"\n@@ -359,12 +360,7 @@ dequeue_and_dump (dump_info_p di)\n       xloc = expand_location (DECL_SOURCE_LOCATION (t));\n       if (xloc.file)\n \t{\n-\t  const char *filename = strrchr (xloc.file, '/');\n-\t  if (!filename)\n-\t    filename = xloc.file;\n-\t  else\n-\t    /* Skip the slash.  */\n-\t    ++filename;\n+\t  const char *filename = lbasename (xloc.file);\n \n \t  dump_maybe_newline (di);\n \t  fprintf (di->stream, \"srcp: %s:%-6d \", filename,"}, {"sha": "69d5ecbb700c58a0d6a96dd9098562ef20d1fd3f", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba78087b6c12fa4e3ab9d6b10c074624daec20ce/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=ba78087b6c12fa4e3ab9d6b10c074624daec20ce", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"hashtab.h\"\n+#include \"filenames.h\"\n #include \"output.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n@@ -8612,12 +8613,7 @@ get_file_function_name (const char *type)\n \tfile = input_filename;\n       /* Just use the file's basename, because the full pathname\n \t might be quite long.  */\n-      p = strrchr (file, '/');\n-      if (p)\n-\tp++;\n-      else\n-\tp = file;\n-      p = q = ASTRDUP (p);\n+      p = q = ASTRDUP (lbasename (file));\n     }\n   else\n     {"}]}