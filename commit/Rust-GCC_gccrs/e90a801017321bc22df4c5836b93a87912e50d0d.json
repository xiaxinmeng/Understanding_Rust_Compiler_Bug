{"sha": "e90a801017321bc22df4c5836b93a87912e50d0d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkwYTgwMTAxNzMyMWJjMjJkZjRjNTgzNmI5M2E4NzkxMmU1MGQwZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-08-23T15:54:57Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-08-23T15:54:57Z"}, "message": "Add C++17 constexpr to debug and profile mode arrays\n\n\t* include/debug/array (array): Add _GLIBCXX17_CONSTEXPR.\n\t* include/profile/array (array): Likewise.\n\t(array::swap): Fix exception specification for zero-sized arrays.\n\nFrom-SVN: r239705", "tree": {"sha": "951e2f0a13e2e380aba89c72e2b4b574dc9eefef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/951e2f0a13e2e380aba89c72e2b4b574dc9eefef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e90a801017321bc22df4c5836b93a87912e50d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90a801017321bc22df4c5836b93a87912e50d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e90a801017321bc22df4c5836b93a87912e50d0d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e90a801017321bc22df4c5836b93a87912e50d0d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "027f10047bf1aa24b2e8e441b554c457a6132686", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/027f10047bf1aa24b2e8e441b554c457a6132686", "html_url": "https://github.com/Rust-GCC/gccrs/commit/027f10047bf1aa24b2e8e441b554c457a6132686"}], "stats": {"total": 92, "additions": 48, "deletions": 44}, "files": [{"sha": "467cf3a0360af466ac1312860441d2f677b299e4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e90a801017321bc22df4c5836b93a87912e50d0d", "patch": "@@ -1,5 +1,9 @@\n 2016-08-23  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/debug/array (array): Add _GLIBCXX17_CONSTEXPR.\n+\t* include/profile/array (array): Likewise.\n+\t(array::swap): Fix exception specification for zero-sized arrays.\n+\n \tPR libstdc++/77334\n \t* include/bits/stl_tree.h (_Rb_tree::_M_move_assign): New functions.\n \t(_Rb_tree::operator=(_Rb_tree&&)): Dispatch to _M_move_assign."}, {"sha": "48ab2fdf120e09565a9650d09ab4f1fed821f07e", "filename": "libstdc++-v3/include/debug/array", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Farray?ref=e90a801017321bc22df4c5836b93a87912e50d0d", "patch": "@@ -90,66 +90,66 @@ namespace __debug\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       begin() noexcept\n       { return iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       begin() const noexcept\n       { return const_iterator(data()); }\n \n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       end() noexcept\n       { return iterator(data() + _Nm); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       end() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      reverse_iterator \n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator \n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rend() noexcept\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator \n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cbegin() const noexcept\n       { return const_iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cend() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      const_reverse_iterator \n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      const_reverse_iterator \n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n       // Capacity.\n-      constexpr size_type \n+      constexpr size_type\n       size() const noexcept { return _Nm; }\n \n-      constexpr size_type \n+      constexpr size_type\n       max_size() const noexcept { return _Nm; }\n \n-      constexpr bool \n+      constexpr bool\n       empty() const noexcept { return size() == 0; }\n \n       // Element access.\n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       operator[](size_type __n) noexcept\n       {\n \t__glibcxx_check_subscript(__n);\n@@ -164,7 +164,7 @@ namespace __debug\n \t    _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n@@ -186,48 +186,48 @@ namespace __debug\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference \n+      _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n       {\n \t__glibcxx_check_nonempty();\n \treturn *begin();\n       }\n \n-      constexpr const_reference \n+      constexpr const_reference\n       front() const noexcept\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, 0)\n \t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference \n+      _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n       {\n \t__glibcxx_check_nonempty();\n \treturn _Nm ? *(end() - 1) : *end();\n       }\n \n-      constexpr const_reference \n+      constexpr const_reference\n       back() const noexcept\n       {\n \treturn _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)\n \t  : (_GLIBCXX_THROW_OR_ABORT(_Array_check_nonempty<_Nm>()),\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      pointer\n+      _GLIBCXX17_CONSTEXPR pointer\n       data() noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n \n-      const_pointer\n+      _GLIBCXX17_CONSTEXPR const_pointer\n       data() const noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n     };\n \n   // Array comparisons.\n   template<typename _Tp, std::size_t _Nm>\n-    inline bool \n+    inline bool\n     operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n     { return std::equal(__one.begin(), __one.end(), __two.begin()); }\n \n@@ -239,9 +239,9 @@ namespace __debug\n   template<typename _Tp, std::size_t _Nm>\n     inline bool\n     operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)\n-    { \n+    {\n       return std::lexicographical_compare(__a.begin(), __a.end(),\n-\t\t\t\t\t  __b.begin(), __b.end()); \n+\t\t\t\t\t  __b.begin(), __b.end());\n     }\n \n   template<typename _Tp, std::size_t _Nm>"}, {"sha": "eedbdac7ddfb0c20233e09f61ac0807c06ec46e8", "filename": "libstdc++-v3/include/profile/array", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e90a801017321bc22df4c5836b93a87912e50d0d/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fprofile%2Farray?ref=e90a801017321bc22df4c5836b93a87912e50d0d", "patch": "@@ -65,55 +65,55 @@ namespace __profile\n \n       void\n       swap(array& __other)\n-      noexcept(__is_nothrow_swappable<_Tp>::value)\n+      noexcept(_AT_Type::_Is_nothrow_swappable::value)\n       { std::swap_ranges(begin(), end(), __other.begin()); }\n \n       // Iterators.\n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       begin() noexcept\n       { return iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       begin() const noexcept\n       { return const_iterator(data()); }\n \n-      iterator\n+      _GLIBCXX17_CONSTEXPR iterator\n       end() noexcept\n       { return iterator(data() + _Nm); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       end() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rbegin() noexcept\n       { return reverse_iterator(end()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      reverse_iterator\n+      _GLIBCXX17_CONSTEXPR reverse_iterator\n       rend() noexcept\n       { return reverse_iterator(begin()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       rend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cbegin() const noexcept\n       { return const_iterator(data()); }\n \n-      const_iterator\n+      _GLIBCXX17_CONSTEXPR const_iterator\n       cend() const noexcept\n       { return const_iterator(data() + _Nm); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crbegin() const noexcept\n       { return const_reverse_iterator(end()); }\n \n-      const_reverse_iterator\n+      _GLIBCXX17_CONSTEXPR const_reverse_iterator\n       crend() const noexcept\n       { return const_reverse_iterator(begin()); }\n \n@@ -136,7 +136,7 @@ namespace __profile\n       operator[](size_type __n) const noexcept\n       { return _AT_Type::_S_ref(_M_elems, __n); }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       at(size_type __n)\n       {\n \tif (__n >= _Nm)\n@@ -159,15 +159,15 @@ namespace __profile\n \t     _AT_Type::_S_ref(_M_elems, 0));\n       }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       front() noexcept\n       { return *begin(); }\n \n       constexpr const_reference\n       front() const noexcept\n       { return _AT_Type::_S_ref(_M_elems, 0); }\n \n-      reference\n+      _GLIBCXX17_CONSTEXPR reference\n       back() noexcept\n       { return _Nm ? *(end() - 1) : *end(); }\n \n@@ -178,11 +178,11 @@ namespace __profile\n \t\t   : _AT_Type::_S_ref(_M_elems, 0);\n       }\n \n-      pointer\n+      _GLIBCXX17_CONSTEXPR pointer\n       data() noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n \n-      const_pointer\n+      _GLIBCXX17_CONSTEXPR const_pointer\n       data() const noexcept\n       { return _AT_Type::_S_ptr(_M_elems); }\n     };"}]}