{"sha": "df696a75734ea7998d0d5ef75cbafba8be33c908", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY2OTZhNzU3MzRlYTc5OThkMGQ1ZWY3NWNiYWZiYThiZTMzYzkwOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-06-17T17:47:22Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-06-17T17:47:22Z"}, "message": "function.h (struct function): Rename profile_label_no.\n\n        * function.h (struct function) [funcdef_no]: Rename profile_label_no.\n        (current_function_funcdef_no): Similarly.\n        * function.c (funcdef_no): Similarly.\n        (prepare_function_start): Set current_function_funcdef_no.\n        (expand_function_start): Don't set current_function_profile_label_no.\n        * dwarf2out.h (current_funcdef_number): Remove.\n        * dwarf2out.c (current_funcdef_number): Remove.  Replace with\n        current_function_funcdef_no throughout.\n        * dwarfout.c, vmsdbgout.c: Similarly.\n        * except.c (sjlj_funcdef_number): Remove.\n        (sjlj_emit_function_enter): Use current_function_funcdef_no instead.\n        (output_function_exception_table): Likewise.\n        * final.c (profile_function): Use current_function_funcdef_no\n        instead of current_function_profile_label_no.\n\nFrom-SVN: r54709", "tree": {"sha": "4ca10c66a1de94288a6165a609e02cc9122faba6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ca10c66a1de94288a6165a609e02cc9122faba6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df696a75734ea7998d0d5ef75cbafba8be33c908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df696a75734ea7998d0d5ef75cbafba8be33c908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df696a75734ea7998d0d5ef75cbafba8be33c908", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df696a75734ea7998d0d5ef75cbafba8be33c908/comments", "author": null, "committer": null, "parents": [{"sha": "10cb24df3afa7fa83fecf6c00e7c8f561ffb925c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10cb24df3afa7fa83fecf6c00e7c8f561ffb925c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10cb24df3afa7fa83fecf6c00e7c8f561ffb925c"}], "stats": {"total": 129, "additions": 57, "deletions": 72}, "files": [{"sha": "094dc639a72fcacad34723e30abe13bd1259dbc6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -1,3 +1,20 @@\n+2002-06-17  Richard Henderson  <rth@redhat.com>\n+\n+\t* function.h (struct function) [funcdef_no]: Rename profile_label_no.\n+\t(current_function_funcdef_no): Similarly.\n+\t* function.c (funcdef_no): Similarly.\n+\t(prepare_function_start): Set current_function_funcdef_no.\n+\t(expand_function_start): Don't set current_function_profile_label_no.\n+\t* dwarf2out.h (current_funcdef_number): Remove.\n+\t* dwarf2out.c (current_funcdef_number): Remove.  Replace with\n+\tcurrent_function_funcdef_no throughout.\n+\t* dwarfout.c, vmsdbgout.c: Similarly.\n+\t* except.c (sjlj_funcdef_number): Remove.\n+\t(sjlj_emit_function_enter): Use current_function_funcdef_no instead.\n+\t(output_function_exception_table): Likewise.\n+\t* final.c (profile_function): Use current_function_funcdef_no\n+\tinstead of current_function_profile_label_no.\n+\n 2002-06-17  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* sched-ebb.c (init_ready_list): Check INSN_P first."}, {"sha": "744f7eee6ba127a408f00ff3cfc7c6513d4edd98", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -103,13 +103,6 @@ dwarf2out_do_frame ()\n \t  );\n }\n \n-/* The number of the current function definition for which debugging\n-   information is being generated.  These numbers range from 1 up to the\n-   maximum number of function definitions contained within the current\n-   compilation unit.  These numbers are used to create unique label id's\n-   unique to each function definition.  */\n-unsigned current_funcdef_number = 0;\n-\n /* The size of the target's pointer type.  */\n #ifndef PTR_SIZE\n #define PTR_SIZE (POINTER_SIZE / BITS_PER_UNIT)\n@@ -2115,12 +2108,11 @@ dwarf2out_begin_prologue (line, file)\n     return;\n #endif\n \n-  current_funcdef_number++;\n   function_section (current_function_decl);\n   ASM_GENERATE_INTERNAL_LABEL (label, FUNC_BEGIN_LABEL,\n-\t\t\t       current_funcdef_number);\n+\t\t\t       current_function_funcdef_no);\n   ASM_OUTPUT_DEBUG_LABEL (asm_out_file, FUNC_BEGIN_LABEL,\n-\t\t\t  current_funcdef_number);\n+\t\t\t  current_function_funcdef_no);\n   current_function_func_begin_label = get_identifier (label);\n \n #ifdef IA64_UNWIND_INFO\n@@ -2147,7 +2139,7 @@ dwarf2out_begin_prologue (line, file)\n   fde->dw_fde_current_label = NULL;\n   fde->dw_fde_end = NULL;\n   fde->dw_fde_cfi = NULL;\n-  fde->funcdef_number = current_funcdef_number;\n+  fde->funcdef_number = current_function_funcdef_no;\n   fde->nothrow = current_function_nothrow;\n   fde->uses_eh_lsda = cfun->uses_eh_lsda;\n \n@@ -2173,7 +2165,8 @@ dwarf2out_end_epilogue ()\n \n   /* Output a label to mark the endpoint of the code generated for this\n      function.  */\n-  ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL, current_funcdef_number);\n+  ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL,\n+\t\t\t       current_function_funcdef_no);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n   fde = &fde_table[fde_table_in_use - 1];\n   fde->dw_fde_end = xstrdup (label);\n@@ -10343,10 +10336,10 @@ gen_subprogram_die (decl, context_die)\n \tequate_decl_number_to_die (decl, subr_die);\n \n       ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_BEGIN_LABEL,\n-\t\t\t\t   current_funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       add_AT_lbl_id (subr_die, DW_AT_low_pc, label_id);\n       ASM_GENERATE_INTERNAL_LABEL (label_id, FUNC_END_LABEL,\n-\t\t\t\t   current_funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       add_AT_lbl_id (subr_die, DW_AT_high_pc, label_id);\n \n       add_pubname (decl, subr_die);\n@@ -11904,7 +11897,7 @@ dwarf2out_source_line (line, filename)\n \t    = &separate_line_info_table[separate_line_info_table_in_use++];\n \t  line_info->dw_file_num = lookup_filename (filename);\n \t  line_info->dw_line_num = line;\n-\t  line_info->function = current_funcdef_number;\n+\t  line_info->function = current_function_funcdef_no;\n \t}\n       else\n \t{"}, {"sha": "63cedeadddc89f94ff63be5f02d7490a8bb83241", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -26,5 +26,3 @@ struct die_struct;\n extern void debug_dwarf_die\t\tPARAMS ((struct die_struct *));\n extern void dwarf2out_set_demangle_name_func PARAMS ((const char *(*) (const char *)));\n extern void dwarf2out_add_library_unit_info PARAMS ((const char *, const char *));\n-\n-extern unsigned current_funcdef_number;"}, {"sha": "9dcf6a8cde740bd8a1d5f3f4d0525fcc41362033", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -756,14 +756,6 @@ static unsigned incomplete_types;\n \n static tree fake_containing_scope;\n \n-/* The number of the current function definition that we are generating\n-   debugging information for.  These numbers range from 1 up to the maximum\n-   number of function definitions contained within the current compilation\n-   unit.  These numbers are used to create unique labels for various things\n-   contained within various function definitions.  */\n-\n-static unsigned current_funcdef_number = 1;\n-\n /* A pointer to the ..._DECL node which we have most recently been working\n    on.  We keep this around just in case something about it looks screwy\n    and we want to tell the user what the source coordinates for the actual\n@@ -3894,13 +3886,14 @@ output_global_subroutine_die (arg)\n \t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n \t  low_pc_attribute (function_start_label (decl));\n-\t  sprintf (label, FUNC_END_LABEL_FMT, current_funcdef_number);\n+\t  sprintf (label, FUNC_END_LABEL_FMT, current_function_funcdef_no);\n \t  high_pc_attribute (label);\n \t  if (use_gnu_debug_info_extensions)\n \t    {\n-\t      sprintf (label, BODY_BEGIN_LABEL_FMT, current_funcdef_number);\n+\t      sprintf (label, BODY_BEGIN_LABEL_FMT,\n+\t\t       current_function_funcdef_no);\n \t      body_begin_attribute (label);\n-\t      sprintf (label, BODY_END_LABEL_FMT, current_funcdef_number);\n+\t      sprintf (label, BODY_END_LABEL_FMT, current_function_funcdef_no);\n \t      body_end_attribute (label);\n \t    }\n \t}\n@@ -4275,13 +4268,14 @@ output_local_subroutine_die (arg)\n \t{\n \t  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n \t  low_pc_attribute (function_start_label (decl));\n-\t  sprintf (label, FUNC_END_LABEL_FMT, current_funcdef_number);\n+\t  sprintf (label, FUNC_END_LABEL_FMT, current_function_funcdef_no);\n \t  high_pc_attribute (label);\n \t  if (use_gnu_debug_info_extensions)\n \t    {\n-\t      sprintf (label, BODY_BEGIN_LABEL_FMT, current_funcdef_number);\n+\t      sprintf (label, BODY_BEGIN_LABEL_FMT,\n+\t\t       current_function_funcdef_no);\n \t      body_begin_attribute (label);\n-\t      sprintf (label, BODY_END_LABEL_FMT, current_funcdef_number);\n+\t      sprintf (label, BODY_END_LABEL_FMT, current_function_funcdef_no);\n \t      body_end_attribute (label);\n \t    }\n \t}\n@@ -5809,9 +5803,6 @@ dwarfout_file_scope_decl (decl, set_finalizing)\n     }\n \n   ASM_OUTPUT_POP_SECTION (asm_out_file);\n-\n-  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INITIAL (decl) != NULL)\n-    current_funcdef_number++;\n }\n \f\n /* Output a marker (i.e. a label) for the beginning of the generated code\n@@ -5858,7 +5849,7 @@ dwarfout_end_prologue (line)\n     return;\n \n   function_section (current_function_decl);\n-  sprintf (label, BODY_BEGIN_LABEL_FMT, current_funcdef_number);\n+  sprintf (label, BODY_BEGIN_LABEL_FMT, current_function_funcdef_no);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n }\n \n@@ -5874,7 +5865,7 @@ dwarfout_end_function (line)\n   if (! use_gnu_debug_info_extensions)\n     return;\n   function_section (current_function_decl);\n-  sprintf (label, BODY_END_LABEL_FMT, current_funcdef_number);\n+  sprintf (label, BODY_END_LABEL_FMT, current_function_funcdef_no);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n }\n \n@@ -5890,7 +5881,7 @@ dwarfout_end_epilogue ()\n   /* Output a label to mark the endpoint of the code generated for this\n      function.\t*/\n \n-  sprintf (label, FUNC_END_LABEL_FMT, current_funcdef_number);\n+  sprintf (label, FUNC_END_LABEL_FMT, current_function_funcdef_no);\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n }\n "}, {"sha": "65ba6c5ac5040dfca60c1e0317d9cbec5ae7b1df", "filename": "gcc/except.c", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -107,7 +107,6 @@ struct ehl_map_entry GTY(())\n };\n \n static int call_site_base;\n-static unsigned int sjlj_funcdef_number;\n static GTY ((param_is (union tree_node)))\n   htab_t type_to_runtime_map;\n \n@@ -2093,7 +2092,7 @@ sjlj_emit_function_enter (dispatch_label)\n   if (cfun->uses_eh_lsda)\n     {\n       char buf[20];\n-      ASM_GENERATE_INTERNAL_LABEL (buf, \"LLSDA\", sjlj_funcdef_number);\n+      ASM_GENERATE_INTERNAL_LABEL (buf, \"LLSDA\", current_function_funcdef_no);\n       emit_move_insn (mem, gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (buf)));\n     }\n   else\n@@ -3576,17 +3575,12 @@ output_function_exception_table ()\n   int call_site_len;\n #endif\n   int have_tt_data;\n-  int funcdef_number;\n   int tt_format_size = 0;\n \n   /* Not all functions need anything.  */\n   if (! cfun->uses_eh_lsda)\n     return;\n \n-  funcdef_number = (USING_SJLJ_EXCEPTIONS\n-\t\t    ? sjlj_funcdef_number\n-\t\t    : current_funcdef_number);\n-\n #ifdef IA64_UNWIND_INFO\n   fputs (\"\\t.personality\\t\", asm_out_file);\n   output_addr_const (asm_out_file, eh_personality_libfunc);\n@@ -3607,14 +3601,16 @@ output_function_exception_table ()\n     {\n       tt_format = ASM_PREFERRED_EH_DATA_FORMAT (/*code=*/0, /*global=*/1);\n #ifdef HAVE_AS_LEB128\n-      ASM_GENERATE_INTERNAL_LABEL (ttype_label, \"LLSDATT\", funcdef_number);\n+      ASM_GENERATE_INTERNAL_LABEL (ttype_label, \"LLSDATT\",\n+\t\t\t\t   current_function_funcdef_no);\n #endif\n       tt_format_size = size_of_encoded_value (tt_format);\n \n       assemble_align (tt_format_size * BITS_PER_UNIT);\n     }\n \n-  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LLSDA\", funcdef_number);\n+  ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"LLSDA\",\n+\t\t\t     current_function_funcdef_no);\n \n   /* The LSDA header.  */\n \n@@ -3646,7 +3642,7 @@ output_function_exception_table ()\n #ifdef HAVE_AS_LEB128\n       char ttype_after_disp_label[32];\n       ASM_GENERATE_INTERNAL_LABEL (ttype_after_disp_label, \"LLSDATTD\",\n-\t\t\t\t   funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       dw2_asm_output_delta_uleb128 (ttype_label, ttype_after_disp_label,\n \t\t\t\t    \"@TType base offset\");\n       ASM_OUTPUT_LABEL (asm_out_file, ttype_after_disp_label);\n@@ -3692,9 +3688,9 @@ output_function_exception_table ()\n \n #ifdef HAVE_AS_LEB128\n   ASM_GENERATE_INTERNAL_LABEL (cs_after_size_label, \"LLSDACSB\",\n-\t\t\t       funcdef_number);\n+\t\t\t       current_function_funcdef_no);\n   ASM_GENERATE_INTERNAL_LABEL (cs_end_label, \"LLSDACSE\",\n-\t\t\t       funcdef_number);\n+\t\t\t       current_function_funcdef_no);\n   dw2_asm_output_delta_uleb128 (cs_end_label, cs_after_size_label,\n \t\t\t\t\"Call-site table length\");\n   ASM_OUTPUT_LABEL (asm_out_file, cs_after_size_label);\n@@ -3751,9 +3747,6 @@ output_function_exception_table ()\n \t\t\t (i ? NULL : \"Exception specification table\"));\n \n   function_section (current_function_decl);\n-\n-  if (USING_SJLJ_EXCEPTIONS)\n-    sjlj_funcdef_number += 1;\n }\n \n #include \"gt-except.h\""}, {"sha": "3b3dfcd68b26115099ba57f5e98b0e82ef673b20", "filename": "gcc/final.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -1724,7 +1724,7 @@ profile_function (file)\n #ifndef NO_PROFILE_COUNTERS\n   data_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n-  ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", current_function_profile_label_no);\n+  ASM_OUTPUT_INTERNAL_LABEL (file, \"LP\", current_function_funcdef_no);\n   assemble_integer (const0_rtx, LONG_TYPE_SIZE / BITS_PER_UNIT, align, 1);\n #endif\n \n@@ -1754,7 +1754,7 @@ profile_function (file)\n #endif\n #endif\n \n-  FUNCTION_PROFILER (file, current_function_profile_label_no);\n+  FUNCTION_PROFILER (file, current_function_funcdef_no);\n \n #if defined(STATIC_CHAIN_INCOMING_REGNUM) && defined(ASM_OUTPUT_REG_PUSH)\n   if (cxt)"}, {"sha": "4a963dc5fae0337e310fc0536b4f85cc6716285b", "filename": "gcc/function.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -124,8 +124,8 @@ int current_function_uses_only_leaf_regs;\n    post-instantiation libcalls.  */\n int virtuals_instantiated;\n \n-/* Assign unique numbers to labels generated for profiling.  */\n-static int profile_label_no;\n+/* Assign unique numbers to labels generated for profiling, debugging, etc.  */\n+static int funcdef_no;\n \n /* These variables hold pointers to functions to create and destroy\n    target specific, per-function data structures.  */\n@@ -6292,6 +6292,8 @@ prepare_function_start ()\n \n   current_function_outgoing_args_size = 0;\n \n+  current_function_funcdef_no = funcdef_no++;\n+\n   cfun->arc_profile = profile_arc_flag || flag_test_coverage;\n \n   cfun->arc_profile = profile_arc_flag || flag_test_coverage;\n@@ -6669,9 +6671,8 @@ expand_function_start (subr, parms_have_cleanups)\n \n   if (current_function_profile)\n     {\n-      current_function_profile_label_no = profile_label_no++;\n #ifdef PROFILE_HOOK\n-      PROFILE_HOOK (current_function_profile_label_no);\n+      PROFILE_HOOK (current_function_funcdef_no);\n #endif\n     }\n "}, {"sha": "1c6337c9176b4d8e90c61945309b067ab49d106d", "filename": "gcc/function.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -365,8 +365,8 @@ struct function GTY(())\n   /* Highest label number in current function.  */\n   int inl_max_label_num;\n \n-  /* Profile label number.  */\n-  int profile_label_no;\n+  /* Function sequence number for profiling, debugging, etc.  */\n+  int funcdef_no;\n \n   /* For md files.  */\n \n@@ -528,7 +528,7 @@ extern int virtuals_instantiated;\n #define current_function_return_rtx (cfun->return_rtx)\n #define current_function_instrument_entry_exit (cfun->instrument_entry_exit)\n #define current_function_profile (cfun->profile)\n-#define current_function_profile_label_no (cfun->profile_label_no)\n+#define current_function_funcdef_no (cfun->funcdef_no)\n #define current_function_limit_stack (cfun->limit_stack)\n #define current_function_uses_pic_offset_table (cfun->uses_pic_offset_table)\n #define current_function_uses_const_pool (cfun->uses_const_pool)"}, {"sha": "68e0bb8cea7575f42cdd650f763da22d751ff9d9", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df696a75734ea7998d0d5ef75cbafba8be33c908/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=df696a75734ea7998d0d5ef75cbafba8be33c908", "patch": "@@ -123,13 +123,6 @@ static unsigned int line_info_table_in_use;\n /* Size (in elements) of increments by which we may expand line_info_table.  */\n #define LINE_INFO_TABLE_INCREMENT 1024\n \n-/* The number of the current function definition for which debugging\n-   information is being generated.  These numbers range from 1 up to the\n-   maximum number of function definitions contained within the current\n-   compilation unit.  These numbers are used to create unique label id's unique\n-   to each function definition.  */\n-static unsigned int current_funcdef_number = 0;\n-\n /* Forward declarations for functions defined in this file.  */\n static char *full_name \t\tPARAMS ((const char *));\n static unsigned int lookup_filename PARAMS ((const char *));\n@@ -1290,9 +1283,8 @@ vmsdbgout_begin_prologue (line, file)\n \n   if (debug_info_level > DINFO_LEVEL_NONE)\n     {\n-      current_funcdef_number++;\n       ASM_GENERATE_INTERNAL_LABEL (label, FUNC_BEGIN_LABEL,\n-\t\t\t\t   current_funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n     }\n }\n@@ -1308,7 +1300,7 @@ vmsdbgout_after_prologue ()\n   if (debug_info_level > DINFO_LEVEL_TERSE)\n     {\n       ASM_GENERATE_INTERNAL_LABEL (label, FUNC_PROLOG_LABEL,\n-\t\t\t\t   current_funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n     }\n }\n@@ -1330,7 +1322,7 @@ vmsdbgout_end_epilogue ()\n       /* Output a label to mark the endpoint of the code generated for this\n          function.  */\n       ASM_GENERATE_INTERNAL_LABEL (label, FUNC_END_LABEL,\n-\t\t\t\t   current_funcdef_number);\n+\t\t\t\t   current_function_funcdef_no);\n       ASM_OUTPUT_LABEL (asm_out_file, label);\n     }\n }"}]}