{"sha": "88c9a831f3a54a17e9722e15cb99459e21bccaad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODhjOWE4MzFmM2E1NGExN2U5NzIyZTE1Y2I5OTQ1OWUyMWJjY2FhZA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-23T18:29:17Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-23T18:29:17Z"}, "message": "[ARM][GCC][14x]: MVE ACLE whole vector left shift with carry intrinsics.\n\nThis patch supports following MVE ACLE whole vector left shift with carry intrinsics.\n\nvshlcq_m_s8, vshlcq_m_s16, vshlcq_m_s32, vshlcq_m_u8, vshlcq_m_u16, vshlcq_m_u32.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* config/arm/arm_mve.h (vshlcq_m_s8): Define macro.\n\t(vshlcq_m_u8): Likewise.\n\t(vshlcq_m_s16): Likewise.\n\t(vshlcq_m_u16): Likewise.\n\t(vshlcq_m_s32): Likewise.\n\t(vshlcq_m_u32): Likewise.\n\t(__arm_vshlcq_m_s8): Define intrinsic.\n\t(__arm_vshlcq_m_u8): Likewise.\n\t(__arm_vshlcq_m_s16): Likewise.\n\t(__arm_vshlcq_m_u16): Likewise.\n\t(__arm_vshlcq_m_s32): Likewise.\n\t(__arm_vshlcq_m_u32): Likewise.\n\t(vshlcq_m): Define polymorphic variant.\n\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_UNONE_IMM_UNONE):\n\tUse builtin qualifier.\n\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n\t* config/arm/mve.md (mve_vshlcq_m_vec_<supf><mode>): Define RTL pattern.\n\t(mve_vshlcq_m_carry_<supf><mode>): Likewise.\n\t(mve_vshlcq_m_<supf><mode>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u8.c: Likewise.", "tree": {"sha": "c12a15b782b9a2ea214c54c202ec7b3084b07ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c12a15b782b9a2ea214c54c202ec7b3084b07ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88c9a831f3a54a17e9722e15cb99459e21bccaad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c9a831f3a54a17e9722e15cb99459e21bccaad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88c9a831f3a54a17e9722e15cb99459e21bccaad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88c9a831f3a54a17e9722e15cb99459e21bccaad/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85244449104f49e68256d12f1eb31bb9ffaa7093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85244449104f49e68256d12f1eb31bb9ffaa7093", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85244449104f49e68256d12f1eb31bb9ffaa7093"}], "stats": {"total": 309, "additions": 306, "deletions": 3}, "files": [{"sha": "852773d2f5f411cd6524f29f867c1496414379ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -1,3 +1,27 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* config/arm/arm_mve.h (vshlcq_m_s8): Define macro.\n+\t(vshlcq_m_u8): Likewise.\n+\t(vshlcq_m_s16): Likewise.\n+\t(vshlcq_m_u16): Likewise.\n+\t(vshlcq_m_s32): Likewise.\n+\t(vshlcq_m_u32): Likewise.\n+\t(__arm_vshlcq_m_s8): Define intrinsic.\n+\t(__arm_vshlcq_m_u8): Likewise.\n+\t(__arm_vshlcq_m_s16): Likewise.\n+\t(__arm_vshlcq_m_u16): Likewise.\n+\t(__arm_vshlcq_m_s32): Likewise.\n+\t(__arm_vshlcq_m_u32): Likewise.\n+\t(vshlcq_m): Define polymorphic variant.\n+\t* config/arm/arm_mve_builtins.def (QUADOP_NONE_NONE_UNONE_IMM_UNONE):\n+\tUse builtin qualifier.\n+\t(QUADOP_UNONE_UNONE_UNONE_IMM_UNONE): Likewise.\n+\t* config/arm/mve.md (mve_vshlcq_m_vec_<supf><mode>): Define RTL pattern.\n+\t(mve_vshlcq_m_carry_<supf><mode>): Likewise.\n+\t(mve_vshlcq_m_<supf><mode>): Likewise.\n+\n 2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* config/arm/arm-builtins.c (LSLL_QUALIFIERS): Define builtin qualifier."}, {"sha": "14b6ec857bffd85b67c781f554faffde1b2abc6b", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -2546,6 +2546,12 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define urshrl(__p0, __p1) __arm_urshrl(__p0, __p1)\n #define lsll(__p0, __p1) __arm_lsll(__p0, __p1)\n #define asrl(__p0, __p1) __arm_asrl(__p0, __p1)\n+#define vshlcq_m_s8(__a,  __b,  __imm, __p) __arm_vshlcq_m_s8(__a,  __b,  __imm, __p)\n+#define vshlcq_m_u8(__a,  __b,  __imm, __p) __arm_vshlcq_m_u8(__a,  __b,  __imm, __p)\n+#define vshlcq_m_s16(__a,  __b,  __imm, __p) __arm_vshlcq_m_s16(__a,  __b,  __imm, __p)\n+#define vshlcq_m_u16(__a,  __b,  __imm, __p) __arm_vshlcq_m_u16(__a,  __b,  __imm, __p)\n+#define vshlcq_m_s32(__a,  __b,  __imm, __p) __arm_vshlcq_m_s32(__a,  __b,  __imm, __p)\n+#define vshlcq_m_u32(__a,  __b,  __imm, __p) __arm_vshlcq_m_u32(__a,  __b,  __imm, __p)\n #endif\n \n /* For big-endian, GCC's vector indices are reversed within each 64 bits\n@@ -16671,6 +16677,60 @@ __arm_srshr (int32_t value, const int shift)\n   return __builtin_mve_srshr_si (value, shift);\n }\n \n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_s8 (int8x16_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  int8x16_t __res = __builtin_mve_vshlcq_m_vec_sv16qi (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_sv16qi (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_u8 (uint8x16_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint8x16_t __res = __builtin_mve_vshlcq_m_vec_uv16qi (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_uv16qi (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_s16 (int16x8_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  int16x8_t __res = __builtin_mve_vshlcq_m_vec_sv8hi (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_sv8hi (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_u16 (uint16x8_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint16x8_t __res = __builtin_mve_vshlcq_m_vec_uv8hi (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_uv8hi (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_s32 (int32x4_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  int32x4_t __res = __builtin_mve_vshlcq_m_vec_sv4si (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_sv4si (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vshlcq_m_u32 (uint32x4_t __a, uint32_t * __b, const int __imm, mve_pred16_t __p)\n+{\n+  uint32x4_t __res = __builtin_mve_vshlcq_m_vec_uv4si (__a, *__b, __imm, __p);\n+  *__b = __builtin_mve_vshlcq_m_carry_uv4si (__a, *__b, __imm, __p);\n+  return __res;\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -27485,6 +27545,16 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint32_t]: __arm_vdwdupq_n_u8 (__ARM_mve_coerce(__p0, uint32_t), p1, p2), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr]: __arm_vdwdupq_wb_u8 (__ARM_mve_coerce(__p0, uint32_t *), p1, p2));})\n \n+#define vshlcq_m(p0,p1,p2,p3) __arm_vshlcq_m(p0,p1,p2,p3)\n+#define __arm_vshlcq_m(p0,p1,p2,p3) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vshlcq_m_s8 (__ARM_mve_coerce(__p0, int8x16_t), p1, p2, p3), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vshlcq_m_s16 (__ARM_mve_coerce(__p0, int16x8_t), p1, p2, p3), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vshlcq_m_s32 (__ARM_mve_coerce(__p0, int32x4_t), p1, p2, p3), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vshlcq_m_u8 (__ARM_mve_coerce(__p0, uint8x16_t), p1, p2, p3), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vshlcq_m_u16 (__ARM_mve_coerce(__p0, uint16x8_t), p1, p2, p3), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vshlcq_m_u32 (__ARM_mve_coerce(__p0, uint32x4_t), p1, p2, p3));})\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "2fb975944b9fdac9de4b5a1bec3962be410637f1", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -890,3 +890,7 @@ VAR1 (UQSHL, urshr_, si)\n VAR1 (UQSHL, urshrl_, di)\n VAR1 (UQSHL, uqshl_, si)\n VAR1 (UQSHL, uqshll_, di)\n+VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_vec_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_NONE_NONE_UNONE_IMM_UNONE, vshlcq_m_carry_s, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_vec_u, v16qi, v8hi, v4si)\n+VAR3 (QUADOP_UNONE_UNONE_UNONE_IMM_UNONE, vshlcq_m_carry_u, v16qi, v8hi, v4si)"}, {"sha": "df602b07840bb4ccb9aa2a9b10992ba7078452ba", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 59, "deletions": 3, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -215,8 +215,8 @@\n \t\t\t VADCQ_M_S VSBCIQ_U VSBCIQ_S VSBCIQ_M_U VSBCIQ_M_S\n \t\t\t VSBCQ_U VSBCQ_S VSBCQ_M_U VSBCQ_M_S VADCIQ_U VADCIQ_M_U\n \t\t\t VADCIQ_S VADCIQ_M_S VLD2Q VLD4Q VST2Q SRSHRL SRSHR\n-\t\t\t URSHR URSHRL SQRSHR UQRSHL UQRSHLL_64\n-\t\t\t UQRSHLL_48 SQRSHRL_64 SQRSHRL_48])\n+\t\t\t URSHR URSHRL SQRSHR UQRSHL UQRSHLL_64 VSHLCQ_M_U\n+\t\t\t UQRSHLL_48 SQRSHRL_64 SQRSHRL_48 VSHLCQ_M_S])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\") (V8HF \"V8HI\")\n \t\t\t    (V4SF \"V4SI\")])\n@@ -394,7 +394,8 @@\n \t\t       (VADCQ_U \"u\")  (VADCQ_M_U \"u\") (VADCQ_S \"s\")\n \t\t       (VADCIQ_U \"u\") (VADCIQ_M_U \"u\") (VADCIQ_S \"s\")\n \t\t       (VADCIQ_M_S \"s\") (SQRSHRL_64 \"64\") (SQRSHRL_48 \"48\")\n-\t\t       (UQRSHLL_64 \"64\") (UQRSHLL_48 \"48\")])\n+\t\t       (UQRSHLL_64 \"64\") (UQRSHLL_48 \"48\") (VSHLCQ_M_S \"s\")\n+\t\t       (VSHLCQ_M_U \"u\")])\n \n (define_int_attr mode1 [(VCTP8Q \"8\") (VCTP16Q \"16\") (VCTP32Q \"32\")\n \t\t\t(VCTP64Q \"64\") (VCTP8Q_M \"8\") (VCTP16Q_M \"16\")\n@@ -662,6 +663,7 @@\n (define_int_iterator VADCQ_M [VADCQ_M_U VADCQ_M_S])\n (define_int_iterator UQRSHLLQ [UQRSHLL_64 UQRSHLL_48])\n (define_int_iterator SQRSHRLQ [SQRSHRL_64 SQRSHRL_48])\n+(define_int_iterator VSHLCQ_M [VSHLCQ_M_S VSHLCQ_M_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -11152,3 +11154,57 @@\n   \"TARGET_HAVE_MVE\"\n   \"sqshll%?\\\\t%Q1, %R1, %2\"\n   [(set_attr \"predicable\" \"yes\")])\n+\n+;;\n+;; [vshlcq_m_u vshlcq_m_s]\n+;;\n+(define_expand \"mve_vshlcq_m_vec_<supf><mode>\"\n+ [(match_operand:MVE_2 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_32\")\n+  (match_operand:HI 4 \"vpr_register_operand\")\n+  (unspec:MVE_2 [(const_int 0)] VSHLCQ_M)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_wb = gen_reg_rtx (SImode);\n+  emit_insn (gen_mve_vshlcq_m_<supf><mode> (operands[0], ignore_wb, operands[1],\n+\t\t\t\t\t    operands[2], operands[3],\n+\t\t\t\t\t    operands[4]));\n+  DONE;\n+})\n+\n+(define_expand \"mve_vshlcq_m_carry_<supf><mode>\"\n+ [(match_operand:SI 0 \"s_register_operand\")\n+  (match_operand:MVE_2 1 \"s_register_operand\")\n+  (match_operand:SI 2 \"s_register_operand\")\n+  (match_operand:SI 3 \"mve_imm_32\")\n+  (match_operand:HI 4 \"vpr_register_operand\")\n+  (unspec:MVE_2 [(const_int 0)] VSHLCQ_M)]\n+ \"TARGET_HAVE_MVE\"\n+{\n+  rtx ignore_vec = gen_reg_rtx (<MODE>mode);\n+  emit_insn (gen_mve_vshlcq_m_<supf><mode> (ignore_vec, operands[0],\n+\t\t\t\t\t    operands[1], operands[2],\n+\t\t\t\t\t    operands[3], operands[4]));\n+  DONE;\n+})\n+\n+(define_insn \"mve_vshlcq_m_<supf><mode>\"\n+ [(set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+       (unspec:MVE_2 [(match_operand:MVE_2 2 \"s_register_operand\" \"0\")\n+\t\t      (match_operand:SI 3 \"s_register_operand\" \"1\")\n+\t\t      (match_operand:SI 4 \"mve_imm_32\" \"Rf\")\n+\t\t      (match_operand:HI 5 \"vpr_register_operand\" \"Up\")]\n+\tVSHLCQ_M))\n+  (set (match_operand:SI  1 \"s_register_operand\" \"=r\")\n+       (unspec:SI [(match_dup 2)\n+\t\t   (match_dup 3)\n+\t\t   (match_dup 4)\n+\t\t   (match_dup 5)]\n+\tVSHLCQ_M))\n+ ]\n+ \"TARGET_HAVE_MVE\"\n+ \"vpst\\;vshlct\\t%q0, %1, %4\"\n+ [(set_attr \"type\" \"mve_move\")\n+  (set_attr \"length\" \"8\")])"}, {"sha": "c1ab2bc79bb800fe1df28c675625e2e9c5b80c36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -1,3 +1,14 @@\n+2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vshlcq_m_u8.c: Likewise.\n+\n 2020-03-23  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* gcc.target/arm/mve/intrinsics/asrl.c: New test."}, {"sha": "c4c77f2559c22bb58a9b501d1a2a35dea44b8865", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_s16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s16.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_s16 (a, b, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 32, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}, {"sha": "20cfd09c82dcdd19bcd6aac66fe2bbe280bf7ec6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_s32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s32.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_s32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}, {"sha": "33dde10e4a8c048de6efb57e51d9b9744381f034", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_s8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_s8.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_s8 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}, {"sha": "2bf69f0c465e1887043a1b59d4402ac9d127ab2a", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_u16.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u16.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_u16 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}, {"sha": "e6650302ea713b472f3d1eca14a351be8d030745", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_u32.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u32.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_u32 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}, {"sha": "95857f09371d1920213c72022e2e3547d1e18ef3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vshlcq_m_u8.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88c9a831f3a54a17e9722e15cb99459e21bccaad/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvshlcq_m_u8.c?ref=88c9a831f3a54a17e9722e15cb99459e21bccaad", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m_u8 (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a, uint32_t * b, mve_pred16_t p)\n+{\n+  return vshlcq_m (a, b, 1, p);\n+}\n+\n+/* { dg-final { scan-assembler \"vpst\" } } */\n+/* { dg-final { scan-assembler \"vshlct\"  }  } */"}]}