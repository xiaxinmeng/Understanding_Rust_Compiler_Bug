{"sha": "54578a57776fb8140fc641a7fd4aad246dd4a82a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTQ1NzhhNTc3NzZmYjgxNDBmYzY0MWE3ZmQ0YWFkMjQ2ZGQ0YTgyYQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2011-04-14T18:50:02Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-04-14T18:50:02Z"}, "message": "re PR target/46779 ([avr] wrong code generation for values held in R28/R29)\n\n\tPR target/46779\n\tPR target/45291\n\tPR target/41894\n\t* gcc.target/avr/pr46779-1.c: New test case\n\t* gcc.target/avr/pr46779-2.c: New test case\n\nFrom-SVN: r172442", "tree": {"sha": "7d4f5dbfa30b47af540c0b6ad18fe5363b506d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4f5dbfa30b47af540c0b6ad18fe5363b506d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54578a57776fb8140fc641a7fd4aad246dd4a82a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54578a57776fb8140fc641a7fd4aad246dd4a82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54578a57776fb8140fc641a7fd4aad246dd4a82a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54578a57776fb8140fc641a7fd4aad246dd4a82a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81c1113ac93b0df9ae0c89e6f071d148accee40f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81c1113ac93b0df9ae0c89e6f071d148accee40f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81c1113ac93b0df9ae0c89e6f071d148accee40f"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "ec65985afd213e047b805b33c652f67cfa2f8f9b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=54578a57776fb8140fc641a7fd4aad246dd4a82a", "patch": "@@ -1,3 +1,11 @@\n+2011-04-14  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/46779\n+\tPR target/45291\n+\tPR target/41894\n+\t* gcc.target/avr/pr46779-1.c: New test case\n+\t* gcc.target/avr/pr46779-2.c: New test case\n+\n 2011-04-14  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/sfinae15.C: New."}, {"sha": "24522f175bee2feedb13626dd51f67c6702c863a", "filename": "gcc/testsuite/gcc.target/avr/pr46779-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-1.c?ref=54578a57776fb8140fc641a7fd4aad246dd4a82a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fsplit-wide-types\" } */\n+\n+/* This testcase should uncover bugs like\n+   PR46779\n+   PR45291\n+   PR41894\n+\n+   The inline asm just serves to direct y into the Y register.\n+   Otherwise, it is hard to write a \"stable\" test case that\n+   also fails with slight variations in source code, middle- resp.\n+   backend.\n+\n+   The problem is that Y is also the frame-pointer, and\n+   avr.c:avr_hard_regno_mode_ok disallows QI to get in Y-reg.\n+   However, the y.a = 0 generates a\n+       (set (subreg:QI (reg:HI pseudo)) ...)\n+   where pseudo gets allocated to Y.\n+\n+   Reload fails to generate the right spill.\n+*/\n+\n+#include <stdlib.h>\n+\n+struct S\n+{\n+    unsigned char a, b;\n+} ab = {12, 34};\n+\n+void yoo (struct S y)\n+{\n+    __asm volatile (\"ldi %B0, 56\" : \"+y\" (y));\n+    y.a = 0;\n+    __asm volatile (\"; y = %0\" : \"+y\" (y));\n+    ab = y;\n+}\n+\n+int main ()\n+{\n+    yoo (ab);\n+\n+    if (ab.a != 0)\n+        abort();\n+\n+    if (ab.b != 56)\n+        abort();\n+\n+    exit (0);\n+    \n+    return 0;\n+}"}, {"sha": "682070b5ef936ce209b8e64893dd0004f016c7c6", "filename": "gcc/testsuite/gcc.target/avr/pr46779-2.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54578a57776fb8140fc641a7fd4aad246dd4a82a/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr46779-2.c?ref=54578a57776fb8140fc641a7fd4aad246dd4a82a", "patch": "@@ -0,0 +1,51 @@\n+/* { dg-do run } */\n+/* { dg-options \"-Os -fno-split-wide-types\" } */\n+\n+/* This testcase should uncover bugs like\n+   PR46779\n+   PR45291\n+   PR41894\n+\n+   The inline asm just serves to direct y into the Y register.\n+   Otherwise, it is hard to write a \"stable\" test case that\n+   also fails with slight variations in source code, middle- resp.\n+   backend.\n+\n+   The problem is that Y is also the frame-pointer, and\n+   avr.c:avr_hard_regno_mode_ok disallows QI to get in Y-reg.\n+   However, the y.a = 0 generates a\n+       (set (subreg:QI (reg:HI pseudo)) ...)\n+   where pseudo gets allocated to Y.\n+\n+   Reload fails to generate the right spill.\n+*/\n+\n+#include <stdlib.h>\n+\n+struct S\n+{\n+    unsigned char a, b;\n+} ab = {12, 34};\n+\n+void yoo (struct S y)\n+{\n+    __asm volatile (\"ldi %B0, 56\" : \"+y\" (y));\n+    y.a = 0;\n+    __asm volatile (\"; y = %0\" : \"+y\" (y));\n+    ab = y;\n+}\n+\n+int main ()\n+{\n+    yoo (ab);\n+\n+    if (ab.a != 0)\n+        abort();\n+\n+    if (ab.b != 56)\n+        abort();\n+\n+    exit (0);\n+    \n+    return 0;\n+}"}]}