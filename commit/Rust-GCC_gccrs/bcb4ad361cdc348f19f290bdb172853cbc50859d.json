{"sha": "bcb4ad361cdc348f19f290bdb172853cbc50859d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNiNGFkMzYxY2RjMzQ4ZjE5ZjI5MGJkYjE3Mjg1M2NiYzUwODU5ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2012-05-03T07:18:56Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2012-05-03T07:18:56Z"}, "message": "re PR fortran/52864 (Assignment to pointer component for INTENT(IN) dummy argument)\n\n2012-05-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52864\n        * interface.c (compare_parameter_intent): Remove.\n        (check_intents): Remove call, handle CLASS pointer.\n        (compare_actual_formal): Handle CLASS pointer.\n\n2012-05-03  Tobias Burnus  <burnus@net-b.de>\n\n        PR fortran/52864\n        * gfortran.dg/pointer_intent_7.f90: New.\n        * gfortran.dg/pure_formal_3.f90: New.\n\nFrom-SVN: r187076", "tree": {"sha": "d3ddbbeee0709841a80a0a81640d02c0d96c3224", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3ddbbeee0709841a80a0a81640d02c0d96c3224"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcb4ad361cdc348f19f290bdb172853cbc50859d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb4ad361cdc348f19f290bdb172853cbc50859d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcb4ad361cdc348f19f290bdb172853cbc50859d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcb4ad361cdc348f19f290bdb172853cbc50859d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "38d7f26e0d2b745de85f9b7ce4c3228b4b5e349c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/38d7f26e0d2b745de85f9b7ce4c3228b4b5e349c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/38d7f26e0d2b745de85f9b7ce4c3228b4b5e349c"}], "stats": {"total": 133, "additions": 95, "deletions": 38}, "files": [{"sha": "56626518e5045e350dd051738633885e5b6bd229", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bcb4ad361cdc348f19f290bdb172853cbc50859d", "patch": "@@ -1,3 +1,10 @@\n+2012-05-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52864\n+\t* interface.c (compare_parameter_intent): Remove.\n+\t(check_intents): Remove call, handle CLASS pointer.\n+\t(compare_actual_formal): Handle CLASS pointer.\n+\n 2012-04-30  Jan Hubicka  <jh@suse.cz>\n \n \t* f95-lang.c (gfc_finish): Update comments."}, {"sha": "95439c118e45f3f066df68dcc7554b934a877649", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 9, "deletions": 38, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=bcb4ad361cdc348f19f290bdb172853cbc50859d", "patch": "@@ -2517,7 +2517,9 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t\t\t\t ? _(\"actual argument to INTENT = OUT/INOUT\")\n \t\t\t\t : NULL);\n \n-\t  if (f->sym->attr.pointer\n+\t  if (((f->sym->ts.type == BT_CLASS && f->sym->attr.class_ok\n+\t\t&& CLASS_DATA (f->sym)->attr.class_pointer)\n+\t       || (f->sym->ts.type != BT_CLASS && f->sym->attr.pointer))\n \t      && gfc_check_vardef_context (a->expr, true, false, context)\n \t\t   == FAILURE)\n \t    return 0;\n@@ -2812,25 +2814,6 @@ check_some_aliasing (gfc_formal_arglist *f, gfc_actual_arglist *a)\n }\n \n \n-/* Given a symbol of a formal argument list and an expression,\n-   return nonzero if their intents are compatible, zero otherwise.  */\n-\n-static int\n-compare_parameter_intent (gfc_symbol *formal, gfc_expr *actual)\n-{\n-  if (actual->symtree->n.sym->attr.pointer && !formal->attr.pointer)\n-    return 1;\n-\n-  if (actual->symtree->n.sym->attr.intent != INTENT_IN)\n-    return 1;\n-\n-  if (formal->attr.intent == INTENT_INOUT || formal->attr.intent == INTENT_OUT)\n-    return 0;\n-\n-  return 1;\n-}\n-\n-\n /* Given formal and actual argument lists that correspond to one\n    another, check that they are compatible in the sense that intents\n    are not mismatched.  */\n@@ -2852,25 +2835,11 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \n       f_intent = f->sym->attr.intent;\n \n-      if (!compare_parameter_intent(f->sym, a->expr))\n-\t{\n-\t  gfc_error (\"Procedure argument at %L is INTENT(IN) while interface \"\n-\t\t     \"specifies INTENT(%s)\", &a->expr->where,\n-\t\t     gfc_intent_string (f_intent));\n-\t  return FAILURE;\n-\t}\n-\n       if (gfc_pure (NULL) && gfc_impure_variable (a->expr->symtree->n.sym))\n \t{\n-\t  if (f_intent == INTENT_INOUT || f_intent == INTENT_OUT)\n-\t    {\n-\t      gfc_error (\"Procedure argument at %L is local to a PURE \"\n-\t\t\t \"procedure and is passed to an INTENT(%s) argument\",\n-\t\t\t &a->expr->where, gfc_intent_string (f_intent));\n-\t      return FAILURE;\n-\t    }\n-\n-\t  if (f->sym->attr.pointer)\n+\t  if ((f->sym->ts.type == BT_CLASS && f->sym->attr.class_ok\n+\t       && CLASS_DATA (f->sym)->attr.class_pointer)\n+\t      || (f->sym->ts.type != BT_CLASS && f->sym->attr.pointer))\n \t    {\n \t      gfc_error (\"Procedure argument at %L is local to a PURE \"\n \t\t\t \"procedure and has the POINTER attribute\",\n@@ -2890,7 +2859,9 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \t      return FAILURE;\n \t    }\n \n-\t  if (f->sym->attr.pointer)\n+\t  if ((f->sym->ts.type == BT_CLASS && f->sym->attr.class_ok\n+               && CLASS_DATA (f->sym)->attr.class_pointer)\n+              || (f->sym->ts.type != BT_CLASS && f->sym->attr.pointer))\n \t    {\n \t      gfc_error (\"Coindexed actual argument at %L in PURE procedure \"\n \t\t\t \"is passed to a POINTER dummy argument\","}, {"sha": "08d19b520d74e6fe80543dd62a79f3cb9f8a3c7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bcb4ad361cdc348f19f290bdb172853cbc50859d", "patch": "@@ -1,3 +1,9 @@\n+2012-05-03  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/52864\n+\t* gfortran.dg/pointer_intent_7.f90: New.\n+\t* gfortran.dg/pure_formal_3.f90: New.\n+\n 2012-05-02  Ulrich Weigand  <ulrich.weigand@linaro.org>\n \n \t* gcc.target/s390/20030123-1.c: Add missing \"volatile\"."}, {"sha": "c09eb2b5ffa057c67354a099101c08c8c5fc7333", "filename": "gcc/testsuite/gfortran.dg/pointer_intent_7.f90", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_intent_7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_intent_7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpointer_intent_7.f90?ref=bcb4ad361cdc348f19f290bdb172853cbc50859d", "patch": "@@ -0,0 +1,45 @@\n+! { dg-do compile }\n+!\n+! PR fortran/\n+!\n+! Contributed by Neil Carlson\n+!\n+! Check whether passing an intent(in) pointer\n+! to an intent(inout) nonpointer is allowed\n+!\n+module modA\n+  type :: typeA\n+    integer, pointer :: ptr\n+  end type\n+contains\n+  subroutine foo (a,b,c)\n+    type(typeA), intent(in) :: a\n+    type(typeA), intent(in) , pointer :: b\n+    class(typeA), intent(in) , pointer :: c\n+\n+    call bar (a%ptr)\n+    call bar2 (b)\n+    call bar3 (b)\n+    call bar2 (c)\n+    call bar3 (c)\n+    call bar2p (b) ! { dg-error \"INTENT\\\\(IN\\\\) in pointer association context \\\\(actual argument to INTENT = OUT/INOUT\" }\n+    call bar3p (b) ! { dg-error \"INTENT\\\\(IN\\\\) in pointer association context \\\\(actual argument to INTENT = OUT/INOUT\" }\n+    call bar2p (c) ! { dg-error \"INTENT\\\\(IN\\\\) in pointer association context \\\\(actual argument to INTENT = OUT/INOUT\" }\n+    call bar3p (c) ! { dg-error \"INTENT\\\\(IN\\\\) in pointer association context \\\\(actual argument to INTENT = OUT/INOUT\" }\n+  end subroutine\n+  subroutine bar (n)\n+    integer, intent(inout) :: n\n+  end subroutine\n+  subroutine bar2 (n)\n+    type(typeA), intent(inout) :: n\n+  end subroutine\n+  subroutine bar3 (n)\n+    class(typeA), intent(inout) :: n\n+  end subroutine\n+  subroutine bar2p (n)\n+    type(typeA), intent(inout), pointer :: n\n+  end subroutine\n+  subroutine bar3p (n)\n+    class(typeA), intent(inout), pointer :: n\n+  end subroutine\n+end module"}, {"sha": "5d08057b37218ca33ce7952469798f8e4caed38e", "filename": "gcc/testsuite/gfortran.dg/pure_formal_3.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcb4ad361cdc348f19f290bdb172853cbc50859d/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90?ref=bcb4ad361cdc348f19f290bdb172853cbc50859d", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! Clean up, made when working on PR fortran/52864\n+!\n+! Test some PURE and intent checks - related to pointers.\n+module m\n+  type t\n+  end type t\n+  integer, pointer :: x\n+  class(t), pointer :: y\n+end module m\n+\n+pure subroutine foo()\n+  use m\n+  call bar(x) ! { dg-error \"can not appear in a variable definition context\" }\n+  call bar2(x) ! { dg-error \"is local to a PURE procedure and has the POINTER attribute\" }\n+  call bb(y) ! { dg-error \"is local to a PURE procedure and has the POINTER attribute\" }\n+contains\n+  pure subroutine bar(x)\n+    integer, pointer, intent(inout) :: x\n+  end subroutine\n+  pure subroutine bar2(x)\n+    integer, pointer :: x\n+  end subroutine\n+  pure subroutine bb(x)\n+    class(t), pointer, intent(in) :: x \n+  end subroutine\n+end subroutine"}]}