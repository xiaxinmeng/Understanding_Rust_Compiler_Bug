{"sha": "d5cf20212b5d2dffef258305209e971fb1ecc1ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDVjZjIwMjEyYjVkMmRmZmVmMjU4MzA1MjA5ZTk3MWZiMWVjYzFjZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2009-02-13T00:14:42Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-13T00:14:42Z"}, "message": "all.h (compare_type_to_native_type_sizes): To...\n\n2009-02-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/thread/all.h (compare_type_to_native_type_sizes): To...\n\t(compare_type_to_native_type): ...this, add alignment check.\n\t* testsuite/30_threads/condition_variable_any/native_handle/\n\ttypesizes.cc: Modify as above.\n\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/condition_variable/native_handle/\n\ttypesizes.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/\n\ttypesizes.cc: Same.\n\n\t* testsuite/30_threads/thread/cons/1.cc: Add comments.\n\t* testsuite/30_threads/thread/cons/2.cc: Same.\n\t* testsuite/30_threads/thread/cons/3.cc: Same.\n\t* testsuite/30_threads/thread/cons/4.cc: Same.\n\t* testsuite/30_threads/thread/cons/5.cc: Same.\n\t* testsuite/30_threads/thread/cons/6.cc: Same.\n\t* testsuite/30_threads/thread/cons/7.cc: Same.\n\t* testsuite/30_threads/thread/cons/8.cc: Same.\n\n\t* testsuite/30_threads/thread/cons/9.cc: New.\n\t* testsuite/30_threads/thread/cons/moveable.cc: New.\n\n\t* src/condition_variable.cc: Clean up whitespace.\n\t* include/std/condition_variable: Same.\n\nFrom-SVN: r144142", "tree": {"sha": "de53cbcabda834eb408ab487451764762c75ad0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de53cbcabda834eb408ab487451764762c75ad0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d5cf20212b5d2dffef258305209e971fb1ecc1ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf20212b5d2dffef258305209e971fb1ecc1ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5cf20212b5d2dffef258305209e971fb1ecc1ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5cf20212b5d2dffef258305209e971fb1ecc1ce/comments", "author": null, "committer": null, "parents": [{"sha": "ed7284dd13b289163440589eda15cccd9ca3ea71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7284dd13b289163440589eda15cccd9ca3ea71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7284dd13b289163440589eda15cccd9ca3ea71"}], "stats": {"total": 217, "additions": 138, "deletions": 79}, "files": [{"sha": "c60b452f7246a377e4d4ba65672699883a553307", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -1,3 +1,33 @@\n+2009-02-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* testsuite/util/thread/all.h (compare_type_to_native_type_sizes): To...\n+\t(compare_type_to_native_type): ...this, add alignment check.\n+\t* testsuite/30_threads/condition_variable_any/native_handle/\n+\ttypesizes.cc: Modify as above.\n+\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc: Same.\n+\t* testsuite/30_threads/condition_variable/native_handle/\n+\ttypesizes.cc: Same.\n+\t* testsuite/30_threads/recursive_timed_mutex/native_handle/\n+\ttypesizes.cc: Same.\n+\n+\t* testsuite/30_threads/thread/cons/1.cc: Add comments.\n+\t* testsuite/30_threads/thread/cons/2.cc: Same.\n+\t* testsuite/30_threads/thread/cons/3.cc: Same.\n+\t* testsuite/30_threads/thread/cons/4.cc: Same.\n+\t* testsuite/30_threads/thread/cons/5.cc: Same.\n+\t* testsuite/30_threads/thread/cons/6.cc: Same.\n+\t* testsuite/30_threads/thread/cons/7.cc: Same.\n+\t* testsuite/30_threads/thread/cons/8.cc: Same.\n+\n+\t* testsuite/30_threads/thread/cons/9.cc: New.\n+\t* testsuite/30_threads/thread/cons/moveable.cc: New.\n+\n+\t* src/condition_variable.cc: Clean up whitespace.\n+\t* include/std/condition_variable: Same.\n+\n 2009-02-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/std/condition_variable (condition_variable): Remove"}, {"sha": "c26c213e6188d08ec5686104f9da93b6dad84aa8", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -45,7 +45,7 @@\n \n #if defined(_GLIBCXX_HAS_GTHREADS) && defined(_GLIBCXX_USE_C99_STDINT_TR1)\n \n-namespace std \n+namespace std\n {\n   /// condition_variable\n   class condition_variable\n@@ -63,25 +63,25 @@ namespace std\n     condition_variable(const condition_variable&) = delete;\n     condition_variable& operator=(const condition_variable&) = delete;\n \n-    void \n+    void\n     notify_one();\n \n-    void \n+    void\n     notify_all();\n \n-    void \n+    void\n     wait(unique_lock<mutex>& __lock);\n \n     template<typename _Predicate>\n-      void \n+      void\n       wait(unique_lock<mutex>& __lock, _Predicate __p)\n       {\n \twhile (!__p())\n \t  wait(__lock);\n       }\n-  \n+\n     template<typename _Duration>\n-      bool \n+      bool\n       wait_until(unique_lock<mutex>& __lock,\n \t\t const chrono::time_point<__clock_t, _Duration>& __atime)\n       { return __wait_until_impl(__lock, __atime); }\n@@ -94,7 +94,7 @@ namespace std\n \t// DR 887 - Sync unknown clock to known clock.\n \ttypename _Clock::time_point __c_entry = _Clock::now();\n \t__clock_t::time_point __s_entry = __clock_t::now();\n-\tchrono::nanoseconds __delta = __atime - __c_entry;\t\n+\tchrono::nanoseconds __delta = __atime - __c_entry;\n \t__clock_t::time_point __s_atime = __s_entry + __delta;\n \n \treturn __wait_until_impl(__lock, __s_atime);\n@@ -109,7 +109,7 @@ namespace std\n \twhile (!__p())\n \t  if (!wait_until(__lock, __atime))\n \t    return __p();\n-\t\n+\n \treturn true;\n       }\n \n@@ -126,8 +126,8 @@ namespace std\n \t       _Predicate __p)\n       { return wait_until(__lock, __clock_t::now() + __rtime, std::move(__p)); }\n \n-    native_handle_type \n-    native_handle() \n+    native_handle_type\n+    native_handle()\n     { return &_M_cond; }\n \n   private:\n@@ -137,21 +137,21 @@ namespace std\n \t\t\tconst chrono::time_point<_Clock, _Duration>& __atime)\n       {\n \tchrono::time_point<__clock_t, chrono::seconds> __s =\n-          chrono::time_point_cast<chrono::seconds>(__atime);\n-\t\n+\t  chrono::time_point_cast<chrono::seconds>(__atime);\n+\n \tchrono::nanoseconds __ns =\n-          chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n-\t\n-        __gthread_time_t __ts =\n-          {\n-            static_cast<std::time_t>(__s.time_since_epoch().count()),\n-            static_cast<long>(__ns.count())\n-          };\n-\t\n-        __gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n-                                 &__ts);\n-\t\n-        return _Clock::now() < __atime;\n+\t  chrono::duration_cast<chrono::nanoseconds>(__atime - __s);\n+\n+\t__gthread_time_t __ts =\n+\t  {\n+\t    static_cast<std::time_t>(__s.time_since_epoch().count()),\n+\t    static_cast<long>(__ns.count())\n+\t  };\n+\n+\t__gthread_cond_timedwait(&_M_cond, __lock.mutex()->native_handle(),\n+\t\t\t\t &__ts);\n+\n+\treturn _Clock::now() < __atime;\n       }\n   };\n \n@@ -167,47 +167,47 @@ namespace std\n \n     condition_variable_any();\n     ~condition_variable_any();\n-    \n+\n     condition_variable_any(const condition_variable_any&) = delete;\n     condition_variable_any& operator=(const condition_variable_any&) = delete;\n \n-    void \n+    void\n     notify_one();\n \n-    void \n+    void\n     notify_all();\n \n     template<typename _Lock>\n-      void \n+      void\n       wait(_Lock& __lock);\n \n     template<typename _Lock, typename _Predicate>\n-      void \n+      void\n       wait(_Lock& __lock, _Predicate __p);\n \n     template<typename _Lock, typename _Clock, typename _Duration>\n-      bool \n+      bool\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime);\n \n-    template<typename _Lock, typename _Clock, \n+    template<typename _Lock, typename _Clock,\n \t     typename _Duration, typename _Predicate>\n-      bool \n+      bool\n       wait_until(_Lock& __lock,\n \t\t const chrono::time_point<_Clock, _Duration>& __atime,\n \t\t _Predicate __p);\n-    \n+\n     template<typename _Lock, typename _Rep, typename _Period>\n       bool\n       wait_for(_Lock& __lock, const chrono::duration<_Rep, _Period>& __rtime);\n \n     template<typename _Lock, typename _Rep,\n \t     typename _Period, typename _Predicate>\n       bool\n-      wait_for(_Lock& __lock, \n+      wait_for(_Lock& __lock,\n \t       const chrono::duration<_Rep, _Period>& __rtime, _Predicate __p);\n \n-    native_handle_type \n+    native_handle_type\n     native_handle()\n     { return &_M_cond; }\n   };"}, {"sha": "c36881bc827509e974d832cf14b38f5331fa38c5", "filename": "libstdc++-v3/src/condition_variable.cc", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fcondition_variable.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -59,12 +59,12 @@ namespace std\n     int __e = __gthread_cond_wait(&_M_cond, __lock.mutex()->native_handle());\n \n     if (__e)\n-      __throw_system_error(__e);    \n+      __throw_system_error(__e);\n   }\n-  \n-  void \n+\n+  void\n   condition_variable::notify_one()\n-  { \n+  {\n     int __e = __gthread_cond_signal(&_M_cond);\n \n     // XXX not in spec\n@@ -73,9 +73,9 @@ namespace std\n       __throw_system_error(__e);\n   }\n \n-  void \n+  void\n   condition_variable::notify_all()\n-  { \n+  {\n     int __e = __gthread_cond_broadcast(&_M_cond);\n \n     // XXX not in spec\n@@ -96,11 +96,11 @@ namespace std\n       __throw_system_error(__e);\n #endif\n   }\n-  \n+\n   condition_variable_any::~condition_variable_any()\n   {\n     __gthread_cond_destroy(&_M_cond);\n-  } \n+  }\n }\n \n #endif // _GLIBCXX_HAS_GTHREADS && _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "93968798b67341cd5dfe0a510e70e569c3b8808e", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::condition_variable test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "2544291ab13c33aec17ee48030b1eb0a11f19310", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::condition_variable_any test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "cda0816cfbebe399fbb5f50206ca5e1cf0ec1e8a", "filename": "libstdc++-v3/testsuite/30_threads/mutex/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fmutex%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::mutex test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "8ee1f3895c1387466d5bde46b29b5d4a142366f1", "filename": "libstdc++-v3/testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_mutex%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::recursive_mutex test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "be9dc53e83f7fd233fd0ae3cfaad90331de4a71d", "filename": "libstdc++-v3/testsuite/30_threads/recursive_timed_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Frecursive_timed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::recursive_timed_mutex test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "9f5d83fb2c712d2aec1aaa1284119150882659d0", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/1.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F1.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -36,6 +36,9 @@\n #include <system_error>\n #include <testsuite_hooks.h>\n \n+// thread default cons works\n+// thread default cons no throw\n+// thread default cons not joinable\n int main()\n {\n   bool test __attribute__((unused)) = true;"}, {"sha": "aeccf79cdb67545c0d9f23bb2085a55d3199ffd3", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/2.cc", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F2.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -32,7 +32,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <utility> // std::ref\n+#include <functional> // std::ref\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>\n@@ -43,19 +43,27 @@ free_function(std::thread::id& id)\n   id = std::this_thread::get_id();\n }\n \n+// thread::id default cons\n+// thread::id copy ctor\n+// thread variadic cons, c++ function\n+// thread variadic cons joinable\n+// thread join\n+// thread join postcondition not joinable\n+// thread join postcondition function called correctly\n+// this_thread::get_id\n void test02()\n {\n   bool test __attribute__((unused)) = true;\n \n   try\n     {\n-      std::thread::id t1_id1;\n-      std::thread t1(free_function, std::ref(t1_id1));\n-      std::thread::id t1_id2 = t1.get_id();\n-      VERIFY( t1.joinable() );\n-      t1.join();      \n-      VERIFY( !t1.joinable() );\n-      VERIFY( t1_id1 == t1_id2 );\n+      std::thread::id id1;\n+      std::thread t(free_function, std::ref(id1));\n+      std::thread::id id2 = t.get_id();\n+      VERIFY( t.joinable() );\n+      t.join();      \n+      VERIFY( !t.joinable() );\n+      VERIFY( id1 == id2 );\n     }\n   catch (const std::system_error&)\n     {"}, {"sha": "54526c603468f1c2f4b6a65af563593caa094f47", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/3.cc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F3.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,8 +32,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <functional> // std::unary_function\n-#include <utility> // std::ref\n+#include <functional> // std::unary_function, std::ref\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>\n@@ -55,6 +54,10 @@ struct copyable : public std::unary_function<std::thread::id&, void>\n \n int copyable::copy_count = 0;\n \n+// same as 2, but function is copyable function object\n+// thread variadic cons not copied when std::ref\n+// thread variadic cons copied when not std::ref\n+// no errors\n void test03()\n {\n   bool test __attribute__((unused)) = true;"}, {"sha": "5fdc8c01598012adca9e695c8e34ccb4ebdd26c1", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/4.cc", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F4.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -5,7 +5,7 @@\n // { dg-require-cstdint \"\" }\n // { dg-require-gthreads \"\" }\n \n-// Copyright (C) 2008 Free Software Foundation, Inc.\n+// Copyright (C) 2008, 2009 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -32,8 +32,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <functional> // std::unary_function\n-#include <utility> // std::ref, std::cref\n+#include <functional> // std::unary_function, std::ref, std::cref\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>\n@@ -50,6 +49,12 @@ struct noncopyable : std::unary_function<std::thread::id&, void>\n   }\n };\n \n+// same as 3, but function is noncopyable function object\n+// thread variadic cons not copied when std::ref\n+// thread variadic cons copied when not std::ref\n+// thread variadic cons not copied when std::cref\n+// thread variadic cons copied when not std::cref\n+// no errors\n void test03()\n {\n   bool test __attribute__((unused)) = true;"}, {"sha": "6250c197f5f05cf428050421ff37e2268e05ae1f", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/5.cc", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F5.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -32,8 +32,7 @@\n // invalidate any other reasons why the executable file might be covered by\n // the GNU General Public License.\n \n-#include <functional> // std::unary_function\n-#include <utility> // std::ref\n+#include <functional> // std::unary_function, std::ref\n #include <thread>\n #include <system_error>\n #include <testsuite_hooks.h>"}, {"sha": "367d0f603f174b37267e41e6446708cd0b04518d", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/6.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F6.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -43,6 +43,10 @@ void f()\n   f_was_called = true;\n }\n \n+// thread non-variadic cons, c++ function\n+// thread join\n+// thread join postcondition function called correctly\n+// no errors\n void test06()\n {\n   bool test __attribute__((unused)) = true;"}, {"sha": "62690de60b28af14336192bc8d141b9243149dee", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/7.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F7.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -51,6 +51,7 @@ struct copyable\n   }\n };\n \n+// same as 6, but function is copyable function object passed by reference\n void test07()\n {\n   bool test __attribute__((unused)) = true;\n@@ -59,8 +60,8 @@ void test07()\n     {\n       copyable c;\n       copyable& rc = c;\n-      std::thread t1(rc);\n-      t1.join();\n+      std::thread t(rc);\n+      t.join();\n       VERIFY( functor_was_called );\n     }\n   catch (const std::system_error&)"}, {"sha": "de8fb873d6c3d3797c1fcd07c8c1278d5cd8e234", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/8.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F8.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -52,15 +52,16 @@ struct moveable\n   }\n };\n \n+// same as 6, but function object is movable\n void test08()\n {\n   bool test __attribute__((unused)) = true;\n \n   try\n     {\n       moveable m;\n-      std::thread t1(std::move(m));\n-      t1.join();\n+      std::thread t(std::move(m));\n+      t.join();\n       VERIFY( functor_was_called );\n     }\n   catch (const std::system_error&)"}, {"sha": "2af81fb47cf95a58ce23df5301eb29b6ab77ab6a", "filename": "libstdc++-v3/testsuite/30_threads/thread/native_handle/typesizes.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,7 +29,7 @@\n int main()\n {\n   typedef std::thread test_type;\n-  // XXX disable at the moment\n-  //__gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  // XX disable for now\n+  //__gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "e9debe55e00d1f878aa4861eb551e94152c3a99b", "filename": "libstdc++-v3/testsuite/30_threads/timed_mutex/native_handle/typesizes.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Ftimed_mutex%2Fnative_handle%2Ftypesizes.cc?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -29,6 +29,6 @@\n int main()\n {\n   typedef std::timed_mutex test_type;\n-  __gnu_test::compare_type_to_native_type_sizes<test_type>();\n+  __gnu_test::compare_type_to_native_type<test_type>();\n   return 0;\n }"}, {"sha": "40002725a9f701890f67e70650158019c042cbfb", "filename": "libstdc++-v3/testsuite/util/thread/all.h", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d5cf20212b5d2dffef258305209e971fb1ecc1ce/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fthread%2Fall.h?ref=d5cf20212b5d2dffef258305209e971fb1ecc1ce", "patch": "@@ -39,24 +39,29 @@\n namespace __gnu_test\n {  \n   // Assume _Tp::native_handle_type.\n+  // Check C++ to native_handle_type characteristics: size and alignment.\n   template<typename _Tp>\n     void\n-    compare_type_to_native_type_sizes()\n+    compare_type_to_native_type()\n     {\n       typedef _Tp test_type;\n-      typedef typename test_type::native_handle_type native_handle_type;\n-\n-      int st = sizeof(test_type);\n \n       // Remove possible pointer type.\n-      int snt = sizeof(typename std::remove_pointer<native_handle_type>::type);\n-      \n-      if (st != snt)\n+      typedef typename test_type::native_handle_type native_handle;\n+      typedef typename std::remove_pointer<native_handle>::type native_type;\n+\n+      int st = sizeof(test_type);\n+      int snt = sizeof(native_type);      \n+      int at = __alignof__(test_type);\n+      int ant = __alignof__(native_type);\n+      if (st != snt || at != ant)\n \t{\n \t  std::ostringstream s;\n \t  s << std::endl;\n \t  s << \"size of _Tp: \" << st << std::endl;\n+\t  s << \"alignment of _Tp: \" << st << std::endl;\n \t  s << \"size of *(_Tp::native_handle_type): \" << snt << std::endl;\n+\t  s << \"alignment of *(_Tp::native_handle_type): \" << snt << std::endl;\n \t  throw std::runtime_error(s.str());\n \t}\n     }"}]}