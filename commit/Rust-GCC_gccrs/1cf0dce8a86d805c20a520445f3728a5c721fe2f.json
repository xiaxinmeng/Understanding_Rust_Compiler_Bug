{"sha": "1cf0dce8a86d805c20a520445f3728a5c721fe2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNmMGRjZThhODZkODA1YzIwYTUyMDQ0NWYzNzI4YTVjNzIxZmUyZg==", "commit": {"author": {"name": "Danny Smith", "email": "dannysmith@users.sourceforge.net", "date": "2003-07-04T07:52:38Z"}, "committer": {"name": "Danny Smith", "email": "dannysmith@gcc.gnu.org", "date": "2003-07-04T07:52:38Z"}, "message": "PR c++/5287, PR c++/7910, PR c++/11021\n\n\tPR c++/5287, PR c++/7910,  PR c++/11021\n\t* testsuite/g++.dg/ext/dllimport1.C: Add mingw32 as target. Add\n\ttests for warnings.\n\t* testsuite/g++.dg/ext/dllimport2.C: Add tests for warnings.\n\t* testsuite/g++.dg/ext/dllimport3.C: Likewise.\n\t* testsuite/g++.dg/ext/dllimport4.C: New file.\n\t* testsuite/g++.dg/ext/dllimport5.C: New file.\n\t* testsuite/g++.dg/ext/dllimport6.C: New file.\n\t* testsuite/g++.dg/ext/dllimport7.C: New file.\n\t* testsuite/g++.dg/ext/dllimport8.C: New file.\n\t* testsuite/g++.dg/ext/dllimport9.C: New file.\n\t* testsuite/g++.dg/ext/dllimport10.C: New file.\n\t* testsuite/g++.dg/ext/dllexport1.C: New file.\n\nFrom-SVN: r68917", "tree": {"sha": "8e49b35c5d488cbfb67add81e324ed4b75cd9b4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e49b35c5d488cbfb67add81e324ed4b75cd9b4c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cf0dce8a86d805c20a520445f3728a5c721fe2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf0dce8a86d805c20a520445f3728a5c721fe2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cf0dce8a86d805c20a520445f3728a5c721fe2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cf0dce8a86d805c20a520445f3728a5c721fe2f/comments", "author": null, "committer": null, "parents": [{"sha": "6b6cb52e94e6edcd7469d0f688c352676499556a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b6cb52e94e6edcd7469d0f688c352676499556a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b6cb52e94e6edcd7469d0f688c352676499556a"}], "stats": {"total": 254, "additions": 241, "deletions": 13}, "files": [{"sha": "9734bdf668af07816b6246ff4f965017c7388c78", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -1,3 +1,19 @@\n+2003-07-04  Danny Smith  <dannysmith@users.sourceforge.net>\n+\n+\tPR c++/5287, PR c++/7910,  PR c++/11021\n+\t* testsuite/g++.dg/ext/dllimport1.C: Add mingw32 as target. Add\n+\ttests for warnings.\n+\t* testsuite/g++.dg/ext/dllimport2.C: Add tests for warnings.\n+\t* testsuite/g++.dg/ext/dllimport3.C: Likewise.\n+\t* testsuite/g++.dg/ext/dllimport4.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport5.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport6.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport7.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport8.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport9.C: New file.\n+\t* testsuite/g++.dg/ext/dllimport10.C: New file.\n+\t* testsuite/g++.dg/ext/dllexport1.C: New file.\n+\n 2003-07-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* g++.old-deja/g++.jason/typeid1.C: Add dg-error marker."}, {"sha": "5f065d4a94a43a0bce822ab659c5c5f1b55766c2", "filename": "gcc/testsuite/g++.dg/ext/dllexport1.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllexport1.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,23 @@\n+// Test that inline functions are exported with -fkeep-inline-functions.\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+// { dg-options -fkeep-inline-functions } \n+\n+__attribute__((dllexport)) inline int foo (int a) { return a;}\n+\n+\n+class __attribute__((dllexport)) Bar\n+{\n+  public:\n+    Bar(){};\n+    int inline_bar(int a) {return a;}\n+    int outline_bar(int a); \n+};\n+\n+int Bar::outline_bar(int a) {return foo (a);}\n+\n+\n+Bar abar;\n+\n+// { dg-final { scan-assembler \"\\.section\\[ \\t\\]*.drectve\\n.*_ZN3Bar11outline_barEi\" } }\n+// { dg-final { scan-assembler \" -export:_ZN3Bar10inline_barEi\" } }\n+// { dg-final { scan-assembler \" -export:_Z3fooi\" } }"}, {"sha": "844c92ebc5aad0d0cdcc4db4b4d7b0f4baa91b26", "filename": "gcc/testsuite/g++.dg/ext/dllimport1.C", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport1.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -1,12 +1,20 @@\n-// { dg-do compile { target i?86-*-cygwin* } }\n+//  PR c++/7910\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+// { dg-options { -Wall -W } }\n \n class __attribute__((dllimport)) Foo\n {\n  public:\n   virtual void dummy_foo_func(void)\n-    {}\n+    {}\t// { dg-warning \"inline function\" }\n+  void Foo::dummy_foo_fun2();\n+  virtual ~Foo();  //  avoid warning  \n };\n \n+void Foo::dummy_foo_fun2()\n+{\t//  { dg-warning \"defined\" }\n+}\n+\n class Bar : public Foo\n {\n public:\n@@ -19,3 +27,5 @@ Bar::~Bar()\n \n void Bar::dummy_bar_func()\n {}\n+\n+// { dg-final { scan-assembler-not \"__imp___ZN3Foo14dummy_foo_fun\" } }"}, {"sha": "c8aaf228a836a85a83543fb00d4a1ea0c4dced6f", "filename": "gcc/testsuite/g++.dg/ext/dllimport10.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport10.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/5287, c++/11021\n+// Inherit a virtual method from a dllimport'd base class.\n+\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+\n+struct __attribute__((dllimport)) A\n+{\n+  virtual void vfunc(void);\n+};\n+\n+struct B : public A\n+{\n+};\n+\n+\n+B aB;"}, {"sha": "8acad5b0d76255460b4f9ab3a9a46fbadca0b33f", "filename": "gcc/testsuite/g++.dg/ext/dllimport2.C", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport2.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -1,15 +1,29 @@\n // { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n \n-// PR 9738  Dllimport attribute is overriden by later definition\n+// PR c++/9738  Dllimport attribute is overriden by later definition/redeclaration\n \n void __attribute__((dllimport)) Bar(void);\n+void __attribute__((dllimport)) Baz(void);\n+__attribute__((dllimport)) int Biz;\n+__attribute__((dllimport)) int Boz;\n+\n+void Foo(void)\n+  {\n+    Bar();\n+    Baz();\n+    Biz++;\t \n+    Boz++;\t \n+  }\n  \n- void Foo(void)\n- {\n-     Bar();\n- }\n- \n- void Bar(void)\n- {\n- }\n- \n+void Bar(void)\n+  {\t\t\t// { dg-warning \"defined\" }\n+  }\n+\n+void Baz(void);\t\t// { dg-warning \"redeclared\" }\n+extern int Biz;\t\t// { dg-warning \"redeclared\" }\n+int Boz;\t\t// { dg-warning \"defined\" }\n+\n+void foo()\n+{\n+  Biz++;\n+}"}, {"sha": "5a13a509d4f8d4f268d6307e4a403a3389503911", "filename": "gcc/testsuite/g++.dg/ext/dllimport3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport3.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -15,7 +15,7 @@ struct Foo\n      void* dummy = &f;\n  }\n \n- struct Foo f;\n+ struct Foo f;\t// { dg-warning \"defined\" }\n \n // Dllimport sets DECL_NON_ADDR_CONST_P to 1, so following\n // assignment would require static_initialization_and_destruction"}, {"sha": "f61773b89a0b0eebe9a76bad7319890222a019a6", "filename": "gcc/testsuite/g++.dg/ext/dllimport4.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport4.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,6 @@\n+//  Report error if dllimport attribute in definition itself.\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+\n+__attribute__((dllimport))  void bar () { }\t// { dg-error \"definition\" }\n+\n+__attribute__((dllimport))  int foo = 1;\t// { dg-error \"definition\" }"}, {"sha": "8e6f166295ed7e519b6ca18d667e744ef4c52bc7", "filename": "gcc/testsuite/g++.dg/ext/dllimport5.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport5.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+//  Report error if static symbol definition has dllimport attribute.\n+\n+__attribute__((dllimport))\n+ int impvar;\t\t\t// OK,  implicit \"extern\"\n+\n+ static __attribute__((dllimport))\n+ int static_impvar;\t// { dg-error \"external linkage\" }\n+\n+ static  __attribute__((dllexport))\n+int static_expvar;\t// { dg-error \"external linkage\" }\n+\n+static __attribute__((dllimport))\n+void static_impfun(void);\t// { dg-error \"external linkage\" }\n+\n+void foo()\n+{\n+  __attribute__((dllimport))\n+  int foovar;\t// OK,  implicit \"extern\" \n+  foovar++;\n+}\n+\n+void bar()\n+{\n+  __attribute__((dllexport))\n+  int barvar;\t// { dg-error \"external linkage\" }\n+  barvar++;\n+}"}, {"sha": "3b2a082f9b2a33fb46b64c08a0fcf470f6470fb3", "filename": "gcc/testsuite/g++.dg/ext/dllimport6.C", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport6.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,30 @@\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+//  Mark class static members as dllimport.\n+\n+struct Baz\n+{\n+  Baz(int a_ =0) : a(a_) {}; \n+  int a;\n+};\n+\n+class  __attribute__ ((dllimport)) Bar\n+{\n+  public:\n+    static const int two = 2;\n+    static const int three;\n+    static const Baz null_baz;\n+};\n+\n+int foo()\n+{\n+  Bar foobar;\n+  const int* baz = &Bar::two; \n+  int a = foobar.two;\n+  int b = foobar.three;\n+  int c = foobar.null_baz.a;\n+  return (a + b + c + *baz);\n+}\n+\n+// { dg-final { scan-assembler __imp___ZN3Bar3twoE } }\n+// { dg-final { scan-assembler __imp___ZN3Bar5threeE } }\n+// { dg-final { scan-assembler __imp___ZN3Bar8null_bazE } }"}, {"sha": "fa76d3eec8cb58d76f2f50e2570518d8bd48cfa0", "filename": "gcc/testsuite/g++.dg/ext/dllimport7.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport7.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+\n+//  Report errors on definition of dllimport'd static data member . \n+\n+\n+struct Baz\n+{\n+  Baz(int a_ =0) : a(a_) {}; \n+  int a;\n+};\n+\n+class  __declspec(dllimport) Bar\n+{\n+  public:\n+    enum {one = 1};\n+    static const int two = 2;\n+    static const int three;\n+    static const Baz null_baz;\n+};\n+\n+const int Bar::three = 3;\t//  { dg-error \"definition of static data\" }\n+const Baz Bar::null_baz;\t//  { dg-error \"definition of static data\" }\n+\n+\n+int foo()\n+{\n+  Bar foobar;\n+  const int* baz = &Bar::two; \n+  int a = foobar.two;\n+  int b = foobar.three;\n+  int c = foobar.null_baz.a;\n+  return (a + b + c + *baz);\n+}"}, {"sha": "9052831774b899bf48dd6323750aabe15dca33be", "filename": "gcc/testsuite/g++.dg/ext/dllimport8.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport8.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,29 @@\n+//  PR c++/8378\n+//  Ignore  dllimport of static members if marked inlined.\n+//  or if definition follows  declaration in dllimported class.\n+\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+// { dg-options { -Wall -W } }\n+\n+struct  __attribute__((dllimport)) Foo\n+ {\n+    static int static_int;\n+    static void static_func1();\n+    static void static_func2();\n+ };\n+\n+void Foo::static_func1()\n+  {\t\t//  { dg-warning \"defined\" }\n+  }\n+\n+inline void Foo::static_func2()\n+ {\t\t//  { dg-warning \"inline function\" }\n+ }\n+\n+void testfoo()\n+{ \n+  Foo::static_func1();\n+  Foo::static_func2();\n+}\n+\n+// { dg-final { scan-assembler-not \"__imp__\" } }"}, {"sha": "edf79efd8d19d5d6bd9602051309e58df3bcca7a", "filename": "gcc/testsuite/g++.dg/ext/dllimport9.C", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cf0dce8a86d805c20a520445f3728a5c721fe2f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fdllimport9.C?ref=1cf0dce8a86d805c20a520445f3728a5c721fe2f", "patch": "@@ -0,0 +1,23 @@\n+//  Handle dllimport attribute for functions declared inline.\n+// { dg-do compile { target i?86-*-cygwin* i?86-*-mingw*} }\n+// { dg-options { -W } }\n+\n+inline __attribute__((dllimport)) void bar() { }\t// { dg-warning \"inline\" }\n+\n+struct __attribute__ ((dllimport)) Blah\t\n+{\n+  void in_blah () { }\t\t\t\t// { dg-warning \"inline\" }\n+  void out_blah ();\n+};\n+\n+inline void Blah::out_blah(){ }\t\t\t// { dg-warning \"inline\" }\n+\n+void use_inlines()\n+{\n+  Blah aBlah;\n+  bar();\n+  aBlah.in_blah ();\n+  aBlah.out_blah ();\n+}\n+\n+// { dg-final { scan-assembler-not \"__imp__\" } }"}]}