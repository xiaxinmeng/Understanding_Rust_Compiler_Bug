{"sha": "f9ddb696a289cc48d24d3d23c0b324cb88de9573", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjlkZGI2OTZhMjg5Y2M0OGQyNGQzZDIzYzBiMzI0Y2I4OGRlOTU3Mw==", "commit": {"author": {"name": "Mike Crowe", "email": "mac@mcrowe.com", "date": "2020-09-11T13:25:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-09-11T13:28:50Z"}, "message": "libstdc++: Avoid rounding errors in std::future::wait_* [PR 91486]\n\nConvert the specified duration to the target clock's duration type\nbefore adding it to the current time in\n__atomic_futex_unsigned::_M_load_when_equal_for and\n_M_load_when_equal_until.  This removes the risk of the timeout being\nrounded down to the current time resulting in there being no wait at all\nwhen the duration type lacks sufficient precision to hold the\nsteady_clock current time.\n\nRather than using the style of fix from PR68519, let's expose the C++17\nstd::chrono::ceil function as std::chrono::__detail::ceil so that it can\nbe used in code compiled with earlier standards versions and simplify\nthe fix. This was suggested by John Salmon in\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=91486#c5 .\n\nThis problem has become considerably less likely to trigger since I\nswitched the __atomic__futex_unsigned::__clock_t reference clock from\nsystem_clock to steady_clock and added the loop, but the consequences of\ntriggering it have changed too.\n\nBy my calculations it takes just over 194 days from the epoch for the\ncurrent time not to be representable in a float. This means that\nsystem_clock is always subject to the problem (with the standard 1970\nepoch) whereas steady_clock with float duration only runs out of\nresolution machine has been running for that long (assuming the Linux\nimplementation of CLOCK_MONOTONIC.)\n\nThe recently-added loop in\n__atomic_futex_unsigned::_M_load_when_equal_until turns this scenario\ninto a busy wait.\n\nUnfortunately the combination of both of these things means that it's\nnot possible to write a test case for this occurring in\n_M_load_when_equal_until as it stands.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/91486\n\t* include/bits/atomic_futex.h\n\t(__atomic_futex_unsigned::_M_load_when_equal_for)\n\t(__atomic_futex_unsigned::_M_load_when_equal_until): Use\n\t__detail::ceil to convert delta to the reference clock\n\tduration type to avoid resolution problems.\n\t* include/std/chrono (__detail::ceil): Move implementation\n\tof std::chrono::ceil into private namespace so that it's\n\tavailable to pre-C++17 code.\n\t* testsuite/30_threads/async/async.cc (test_pr91486):\n\tTest __atomic_futex_unsigned::_M_load_when_equal_for.", "tree": {"sha": "857b634df275db37f0ade0a6670b49ad4e9a79e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/857b634df275db37f0ade0a6670b49ad4e9a79e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f9ddb696a289cc48d24d3d23c0b324cb88de9573", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ddb696a289cc48d24d3d23c0b324cb88de9573", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9ddb696a289cc48d24d3d23c0b324cb88de9573", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9ddb696a289cc48d24d3d23c0b324cb88de9573/comments", "author": {"login": "mikecrowe", "id": 93615, "node_id": "MDQ6VXNlcjkzNjE1", "avatar_url": "https://avatars.githubusercontent.com/u/93615?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikecrowe", "html_url": "https://github.com/mikecrowe", "followers_url": "https://api.github.com/users/mikecrowe/followers", "following_url": "https://api.github.com/users/mikecrowe/following{/other_user}", "gists_url": "https://api.github.com/users/mikecrowe/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikecrowe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikecrowe/subscriptions", "organizations_url": "https://api.github.com/users/mikecrowe/orgs", "repos_url": "https://api.github.com/users/mikecrowe/repos", "events_url": "https://api.github.com/users/mikecrowe/events{/privacy}", "received_events_url": "https://api.github.com/users/mikecrowe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9faa3301c523c2c165387da4b19e659f7362a92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9faa3301c523c2c165387da4b19e659f7362a92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9faa3301c523c2c165387da4b19e659f7362a92"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "aa137a7b64e9802a1df8cd777264a3c9ac234e22", "filename": "libstdc++-v3/include/bits/atomic_futex.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fatomic_futex.h?ref=f9ddb696a289cc48d24d3d23c0b324cb88de9573", "patch": "@@ -219,8 +219,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _M_load_when_equal_for(unsigned __val, memory_order __mo,\n \t  const chrono::duration<_Rep, _Period>& __rtime)\n       {\n+\tusing __dur = typename __clock_t::duration;\n \treturn _M_load_when_equal_until(__val, __mo,\n-\t\t\t\t\t__clock_t::now() + __rtime);\n+\t\t    __clock_t::now() + chrono::__detail::ceil<__dur>(__rtime));\n       }\n \n     // Returns false iff a timeout occurred.\n@@ -233,7 +234,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \tdo {\n \t  const __clock_t::time_point __s_entry = __clock_t::now();\n \t  const auto __delta = __atime - __c_entry;\n-\t  const auto __s_atime = __s_entry + __delta;\n+\t  const auto __s_atime = __s_entry +\n+\t      chrono::__detail::ceil<_Duration>(__delta);\n \t  if (_M_load_when_equal_until(__val, __mo, __s_atime))\n \t    return true;\n \t  __c_entry = _Clock::now();"}, {"sha": "893d1f6b2c91b9f7756c46c15b3484533134f5c1", "filename": "libstdc++-v3/include/std/chrono", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fchrono?ref=f9ddb696a289cc48d24d3d23c0b324cb88de9573", "patch": "@@ -329,6 +329,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n #endif // C++20\n \n+    // We want to use ceil even when compiling for earlier standards versions\n+    namespace __detail\n+    {\n+      template<typename _ToDur, typename _Rep, typename _Period>\n+\tconstexpr __enable_if_is_duration<_ToDur>\n+\tceil(const duration<_Rep, _Period>& __d)\n+\t{\n+\t  auto __to = chrono::duration_cast<_ToDur>(__d);\n+\t  if (__to < __d)\n+\t    return __to + _ToDur{1};\n+\t  return __to;\n+\t}\n+    }\n+\n #if __cplusplus >= 201703L\n # define __cpp_lib_chrono 201611\n \n@@ -346,10 +360,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr __enable_if_is_duration<_ToDur>\n       ceil(const duration<_Rep, _Period>& __d)\n       {\n-\tauto __to = chrono::duration_cast<_ToDur>(__d);\n-\tif (__to < __d)\n-\t  return __to + _ToDur{1};\n-\treturn __to;\n+\treturn __detail::ceil<_ToDur>(__d);\n       }\n \n     template <typename _ToDur, typename _Rep, typename _Period>"}, {"sha": "46f8d2f327ddaea89ed70d7c0ba4b82d49b6305e", "filename": "libstdc++-v3/testsuite/30_threads/async/async.cc", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f9ddb696a289cc48d24d3d23c0b324cb88de9573/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fasync%2Fasync.cc?ref=f9ddb696a289cc48d24d3d23c0b324cb88de9573", "patch": "@@ -157,6 +157,20 @@ void test04()\n   }\n }\n \n+void test_pr91486()\n+{\n+  future<void> f1 = async(launch::async, []() {\n+      std::this_thread::sleep_for(std::chrono::seconds(1));\n+    });\n+\n+  std::chrono::duration<float> const wait_time = std::chrono::seconds(1);\n+  auto const start_steady = chrono::steady_clock::now();\n+  auto status = f1.wait_for(wait_time);\n+  auto const elapsed_steady = chrono::steady_clock::now() - start_steady;\n+\n+  VERIFY( elapsed_steady >= std::chrono::seconds(1) );\n+}\n+\n int main()\n {\n   test01();\n@@ -165,5 +179,6 @@ int main()\n   test03<std::chrono::steady_clock>();\n   test03<steady_clock_copy>();\n   test04();\n+  test_pr91486();\n   return 0;\n }"}]}