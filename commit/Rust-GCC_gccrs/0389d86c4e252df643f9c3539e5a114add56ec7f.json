{"sha": "0389d86c4e252df643f9c3539e5a114add56ec7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM4OWQ4NmM0ZTI1MmRmNjQzZjljMzUzOWU1YTExNGFkZDU2ZWM3Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2017-10-02T07:32:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2017-10-02T07:32:52Z"}, "message": "re PR tree-optimization/82355 (ICE in outermost_loop_in_sese, at sese.c:301)\n\n2017-10-02  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/82355\n\t* graphite-isl-ast-to-gimple.c (build_iv_mapping): Also build\n\ta mapping for the enclosing loop but avoid generating one for\n\tthe loop tree root.\n\t(copy_bb_and_scalar_dependences): Remove premature codegen\n\terror on PHIs in blocks duplicated into multiple places.\n\t* graphite-scop-detection.c\n\t(scop_detection::stmt_has_simple_data_refs_p): For a loop not\n\tin the region use it as loop and nest to analyze the DR in.\n\t(try_generate_gimple_bb): Likewise.\n\t* graphite-sese-to-poly.c (extract_affine_chrec): Adjust.\n\t(add_loop_constraints): For blocks in a loop not in the region\n\tcreate a dimension with a single iteration.\n\t* sese.h (gbb_loop_at_index): Remove assert.\n\n\t* gcc.dg/graphite/fuse-1.c: Adjust.\n\t* gcc.dg/graphite/fuse-2.c: Likewise.\n\t* gcc.dg/graphite/pr82355.c: New testcase.\n\nFrom-SVN: r253336", "tree": {"sha": "83af0087c3c1be8a0a44f85b0ac7b545e5279af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83af0087c3c1be8a0a44f85b0ac7b545e5279af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0389d86c4e252df643f9c3539e5a114add56ec7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0389d86c4e252df643f9c3539e5a114add56ec7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0389d86c4e252df643f9c3539e5a114add56ec7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0389d86c4e252df643f9c3539e5a114add56ec7f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "623c6df543b5cb025815e6a79ded86f889f4a4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/623c6df543b5cb025815e6a79ded86f889f4a4b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/623c6df543b5cb025815e6a79ded86f889f4a4b1"}], "stats": {"total": 123, "additions": 88, "deletions": 35}, "files": [{"sha": "d5b0b6fee47c59d050cb739a599ca554cf8245a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -1,3 +1,20 @@\n+2017-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82355\n+\t* graphite-isl-ast-to-gimple.c (build_iv_mapping): Also build\n+\ta mapping for the enclosing loop but avoid generating one for\n+\tthe loop tree root.\n+\t(copy_bb_and_scalar_dependences): Remove premature codegen\n+\terror on PHIs in blocks duplicated into multiple places.\n+\t* graphite-scop-detection.c\n+\t(scop_detection::stmt_has_simple_data_refs_p): For a loop not\n+\tin the region use it as loop and nest to analyze the DR in.\n+\t(try_generate_gimple_bb): Likewise.\n+\t* graphite-sese-to-poly.c (extract_affine_chrec): Adjust.\n+\t(add_loop_constraints): For blocks in a loop not in the region\n+\tcreate a dimension with a single iteration.\n+\t* sese.h (gbb_loop_at_index): Remove assert.\n+\n 2017-10-01  Kevin Buettner  <kevinb@redhat.com>\n \n \t* omp-expand.c (adjust_context_scope): New function."}, {"sha": "fb91ba15eac1941017f370588c567079abca5191", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -774,8 +774,10 @@ build_iv_mapping (vec<tree> iv_map, gimple_poly_bb_p gbb,\n       if (codegen_error_p ())\n \tt = integer_zero_node;\n \n-      loop_p old_loop = gbb_loop_at_index (gbb, region, i - 1);\n-      iv_map[old_loop->num] = t;\n+      loop_p old_loop = gbb_loop_at_index (gbb, region, i - 2);\n+      /* Record sth only for real loops.  */\n+      if (loop_in_sese_p (old_loop, region))\n+\tiv_map[old_loop->num] = t;\n     }\n }\n \n@@ -2587,18 +2589,6 @@ edge translate_isl_ast_to_gimple::\n copy_bb_and_scalar_dependences (basic_block bb, edge next_e, vec<tree> iv_map)\n {\n   int num_phis = number_of_phi_nodes (bb);\n-\n-  if (region->copied_bb_map->get (bb))\n-    {\n-      /* FIXME: we should be able to handle phi nodes with args coming from\n-\t outside the region.  */\n-      if (num_phis)\n-\t{\n-\t  set_codegen_error ();\n-\t  return NULL;\n-\t}\n-    }\n-\n   basic_block new_bb = NULL;\n   if (bb_contains_loop_close_phi_nodes (bb))\n     {"}, {"sha": "eed4efa3e0539001b811291090d85f3bdc4446b4", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -1055,10 +1055,12 @@ scop_detection::graphite_can_represent_expr (sese_l scop, loop_p loop,\n bool\n scop_detection::stmt_has_simple_data_refs_p (sese_l scop, gimple *stmt)\n {\n-  loop_p nest = outermost_loop_in_sese (scop, gimple_bb (stmt));\n+  loop_p nest;\n   loop_p loop = loop_containing_stmt (stmt);\n   if (!loop_in_sese_p (loop, scop))\n-    loop = nest;\n+    nest = loop;\n+  else\n+    nest = outermost_loop_in_sese (scop, gimple_bb (stmt));\n \n   auto_vec<data_reference_p> drs;\n   if (! graphite_find_data_references_in_stmt (nest, loop, stmt, &drs))\n@@ -1450,11 +1452,12 @@ try_generate_gimple_bb (scop_p scop, basic_block bb)\n   vec<scalar_use> reads = vNULL;\n \n   sese_l region = scop->scop_info->region;\n-  loop_p nest = outermost_loop_in_sese (region, bb);\n-\n+  loop_p nest;\n   loop_p loop = bb->loop_father;\n   if (!loop_in_sese_p (loop, region))\n-    loop = nest;\n+    nest = loop;\n+  else\n+    nest = outermost_loop_in_sese (region, bb);\n \n   for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);\n        gsi_next (&gsi))"}, {"sha": "8611e86cc607c9db72b18d97a9bb55e20922bb76", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -86,7 +86,7 @@ extract_affine_chrec (scop_p s, tree e, __isl_take isl_space *space)\n   isl_pw_aff *lhs = extract_affine (s, CHREC_LEFT (e), isl_space_copy (space));\n   isl_pw_aff *rhs = extract_affine (s, CHREC_RIGHT (e), isl_space_copy (space));\n   isl_local_space *ls = isl_local_space_from_space (space);\n-  unsigned pos = sese_loop_depth (s->scop_info->region, get_chrec_loop (e)) - 1;\n+  unsigned pos = sese_loop_depth (s->scop_info->region, get_chrec_loop (e));\n   isl_aff *loop = isl_aff_set_coefficient_si\n     (isl_aff_zero_on_domain (ls), isl_dim_in, pos, 1);\n   isl_pw_aff *l = isl_pw_aff_from_aff (loop);\n@@ -756,10 +756,10 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n     return domain;\n   const sese_l &region = scop->scop_info->region;\n   if (!loop_in_sese_p (loop, region))\n-    return domain;\n-\n-  /* Recursion all the way up to the context loop.  */\n-  domain = add_loop_constraints (scop, domain, loop_outer (loop), context);\n+    ;\n+  else\n+    /* Recursion all the way up to the context loop.  */\n+    domain = add_loop_constraints (scop, domain, loop_outer (loop), context);\n \n   /* Then, build constraints over the loop in post-order: outer to inner.  */\n \n@@ -770,6 +770,21 @@ add_loop_constraints (scop_p scop, __isl_take isl_set *domain, loop_p loop,\n   domain = add_iter_domain_dimension (domain, loop, scop);\n   isl_space *space = isl_set_get_space (domain);\n \n+  if (!loop_in_sese_p (loop, region))\n+    {\n+      /* 0 == loop_i */\n+      isl_local_space *ls = isl_local_space_from_space (space);\n+      isl_constraint *c = isl_equality_alloc (ls);\n+      c = isl_constraint_set_coefficient_si (c, isl_dim_set, loop_index, 1);\n+      if (dump_file)\n+\t{\n+\t  fprintf (dump_file, \"[sese-to-poly] adding constraint to the domain: \");\n+\t  print_isl_constraint (dump_file, c);\n+\t}\n+      domain = isl_set_add_constraint (domain, c);\n+      return domain;\n+    }\n+\n   /* 0 <= loop_i */\n   isl_local_space *ls = isl_local_space_from_space (isl_space_copy (space));\n   isl_constraint *c = isl_inequality_alloc (ls);"}, {"sha": "f1371ee9d35ec24381b0bbf4d32178004e243017", "filename": "gcc/sese.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fsese.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Fsese.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsese.h?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -326,8 +326,6 @@ gbb_loop_at_index (gimple_poly_bb_p gbb, sese_l &region, int index)\n   while (--depth > index)\n     loop = loop_outer (loop);\n \n-  gcc_assert (loop_in_sese_p (loop, region));\n-\n   return loop;\n }\n "}, {"sha": "2faad379a8851284d17415e427cc6dd741789108", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -1,3 +1,10 @@\n+2017-10-02  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/82355\n+\t* gcc.dg/graphite/fuse-1.c: Adjust.\n+\t* gcc.dg/graphite/fuse-2.c: Likewise.\n+\t* gcc.dg/graphite/pr82355.c: New testcase.\n+\n 2017-10-01  Jeff Law  <law@redhat.com>\n \n \t* gcc.dg/tree-ssa/ssa-dom-simplify-1.c: New test."}, {"sha": "e3bf7bcf99b897365b6de276702b2f0b328d6cf3", "filename": "gcc/testsuite/gcc.dg/graphite/fuse-1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -1,15 +1,15 @@\n /* Check that the two loops are fused and that we manage to fold the two xor\n    operations.  */\n-/* { dg-options \"-O2 -floop-nest-optimize -fdump-tree-forwprop-all -fdump-tree-graphite-all\" } */\n+/* { dg-options \"-O2 -floop-nest-optimize -fdump-tree-forwprop4-all -fdump-tree-graphite-all\" } */\n \n /* Make sure we fuse the loops like this:\n AST generated by isl:\n for (int c0 = 0; c0 <= 99; c0 += 1) {\n-  S_3(c0);\n-  S_6(c0);\n-  S_9(c0);\n+  S_3(0, c0);\n+  S_6(0, c0);\n+  S_9(0, c0);\n } */\n-/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(0, c0\\\\);.*S_.*\\\\(0, c0\\\\);.*S_.*\\\\(0, c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n \n /* Check that after fusing the loops, the scalar computation is also fused.  */\n /* { dg-final { scan-tree-dump-times \"gimple_simplified to\\[^\\\\n\\]*\\\\^ 12\" 1 \"forwprop4\" } } */"}, {"sha": "dc0a9b2b61c07bb6175825943ea814b3c504e5af", "filename": "gcc/testsuite/gcc.dg/graphite/fuse-2.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -3,13 +3,13 @@\n /* Make sure we fuse the loops like this:\n AST generated by isl:\n for (int c0 = 0; c0 <= 99; c0 += 1) {\n-  S_3(c0);\n-  S_6(c0);\n-  S_9(c0);\n+  S_3(0, c0);\n+  S_6(0, c0);\n+  S_9(0, c0);\n }\n */\n \n-/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(0, c0\\\\);.*S_.*\\\\(0, c0\\\\);.*S_.*\\\\(0, c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n \n #define MAX 100\n int A[MAX], B[MAX], C[MAX];"}, {"sha": "b60772dc125b299cd0cadba8d76f10f0edc0e2d2", "filename": "gcc/testsuite/gcc.dg/graphite/pr82355.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr82355.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0389d86c4e252df643f9c3539e5a114add56ec7f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr82355.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr82355.c?ref=0389d86c4e252df643f9c3539e5a114add56ec7f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -floop-nest-optimize\" } */\n+\n+int dc, at;\n+\n+void\n+tv (int *ld, int jl)\n+{\n+  for (;;)\n+    {\n+      if (dc != 0)\n+\tfor (;;)\n+\t  {\n+\t    *ld = !!(*ld) + 1;\n+\t    for (dc = 0; dc < 3; ++dc)\n+\t      at = (jl != 0) ? *ld : 0;\n+\t  }\n+\n+      while (at != 0)\n+\t{\n+\t}\n+    }\n+}"}]}