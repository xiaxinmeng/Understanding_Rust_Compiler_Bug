{"sha": "6ca3c22fd16679c55c3d44e19b646a5dec513244", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhM2MyMmZkMTY2NzljNTVjM2Q0NGUxOWI2NDZhNWRlYzUxMzI0NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-19T03:04:19Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-19T03:04:19Z"}, "message": "flow.c (mark_regs_live_at_end): Use regs_invalidated_by_call.\n\n        * flow.c (mark_regs_live_at_end): Use regs_invalidated_by_call.\n        * regclass.c (init_reg_sets_1): Fix typo.\n        * config/ia64/ia64.c (ar_pfs_reg_operand): New.\n        (ia64_expand_call): Pass ar.pfs to sibcall expanders.\n        (ia64_compute_frame_size): Make ar.unat live when in use.\n        (ia64_epilogue_uses): Reformat; do not check current_function_is_leaf\n        for ar.pfs; remove ar.unat handling.\n        * config/ia64/ia64.h (CALL_REALLY_USED_REGISTERS): ar.unat is\n        call-saved.\n        (PREDICATE_CODES): Add ar_pfs_reg_operand.\n        * config/ia64/ia64-protos.h: Update decls.\n        * config/ia64/ia64.md (sibcall_nopic): Use ar.pfs.\n        (sibcall_pic): Likewise.\n\nFrom-SVN: r45021", "tree": {"sha": "f05313d8fdbcc9289591f51b7bf29335cf3310d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f05313d8fdbcc9289591f51b7bf29335cf3310d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca3c22fd16679c55c3d44e19b646a5dec513244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca3c22fd16679c55c3d44e19b646a5dec513244", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca3c22fd16679c55c3d44e19b646a5dec513244", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca3c22fd16679c55c3d44e19b646a5dec513244/comments", "author": null, "committer": null, "parents": [{"sha": "8e8de25448d2c52d6d2b4134167b60b19dfc54d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e8de25448d2c52d6d2b4134167b60b19dfc54d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e8de25448d2c52d6d2b4134167b60b19dfc54d0"}], "stats": {"total": 124, "additions": 78, "deletions": 46}, "files": [{"sha": "39b16d64db8d4fd0bf4aa846702b85f16a4ad559", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -1,3 +1,19 @@\n+2001-08-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* flow.c (mark_regs_live_at_end): Use regs_invalidated_by_call.\n+\t* regclass.c (init_reg_sets_1): Fix typo.\n+\t* config/ia64/ia64.c (ar_pfs_reg_operand): New.\n+\t(ia64_expand_call): Pass ar.pfs to sibcall expanders.\n+\t(ia64_compute_frame_size): Make ar.unat live when in use.\n+\t(ia64_epilogue_uses): Reformat; do not check current_function_is_leaf\n+\tfor ar.pfs; remove ar.unat handling.\n+\t* config/ia64/ia64.h (CALL_REALLY_USED_REGISTERS): ar.unat is \n+\tcall-saved.\n+\t(PREDICATE_CODES): Add ar_pfs_reg_operand.\n+\t* config/ia64/ia64-protos.h: Update decls.\n+\t* config/ia64/ia64.md (sibcall_nopic): Use ar.pfs.\n+\t(sibcall_pic): Likewise.\n+\n 2001-08-18  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/ia64.c (ia64_sched_reorder2): Also skip past"}, {"sha": "03d2952aa227f53a18c58be2b2f98f625546b447", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -62,6 +62,7 @@ extern int not_postinc_memory_operand PARAMS((rtx, enum machine_mode));\n extern int predicate_operator PARAMS((rtx, enum machine_mode));\n extern int ar_lc_reg_operand PARAMS((rtx, enum machine_mode));\n extern int ar_ccv_reg_operand PARAMS((rtx, enum machine_mode));\n+extern int ar_pfs_reg_operand PARAMS((rtx, enum machine_mode));\n extern int general_tfmode_operand PARAMS((rtx, enum machine_mode));\n extern int destination_tfmode_operand PARAMS((rtx, enum machine_mode));\n extern int tfreg_or_fp01_operand PARAMS((rtx, enum machine_mode));"}, {"sha": "08660a79aa6b5a4be4acc21847ec0981e5fc9a68", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -788,6 +788,18 @@ ar_ccv_reg_operand (op, mode)\n \t  && REGNO (op) == AR_CCV_REGNUM);\n }\n \n+/* Return 1 if this is the ar.pfs register.  */\n+\n+int\n+ar_pfs_reg_operand (op, mode)\n+     register rtx op;\n+     enum machine_mode mode;\n+{\n+  return ((GET_MODE (op) == mode || mode == VOIDmode)\n+\t  && GET_CODE (op) == REG\n+\t  && REGNO (op) == AR_PFS_REGNUM);\n+}\n+\n /* Like general_operand, but don't allow (mem (addressof)).  */\n \n int\n@@ -1107,11 +1119,12 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n      rtx nextarg;\n      int sibcall_p;\n {\n-  rtx insn, b0, gp_save, narg_rtx;\n+  rtx insn, b0, pfs, gp_save, narg_rtx;\n   int narg;\n \n   addr = XEXP (addr, 0);\n   b0 = gen_rtx_REG (DImode, R_BR (0));\n+  pfs = gen_rtx_REG (DImode, AR_PFS_REGNUM);\n \n   if (! nextarg)\n     narg = 0;\n@@ -1124,7 +1137,7 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n   if (TARGET_NO_PIC || TARGET_AUTO_PIC)\n     {\n       if (sibcall_p)\n-\tinsn = gen_sibcall_nopic (addr, narg_rtx, b0);\n+\tinsn = gen_sibcall_nopic (addr, narg_rtx, b0, pfs);\n       else if (! retval)\n \tinsn = gen_call_nopic (addr, narg_rtx, b0);\n       else\n@@ -1151,7 +1164,7 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n \t\t      gen_rtx_MEM (DImode, plus_constant (addr, 8)));\n \n       if (sibcall_p)\n-\tinsn = gen_sibcall_pic (dest, narg_rtx, b0);\n+\tinsn = gen_sibcall_pic (dest, narg_rtx, b0, pfs);\n       else if (! retval)\n \tinsn = gen_call_pic (dest, narg_rtx, b0);\n       else\n@@ -1164,7 +1177,7 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n   else if (TARGET_CONST_GP)\n     {\n       if (sibcall_p)\n-\tinsn = gen_sibcall_nopic (addr, narg_rtx, b0);\n+\tinsn = gen_sibcall_nopic (addr, narg_rtx, b0, pfs);\n       else if (! retval)\n \tinsn = gen_call_nopic (addr, narg_rtx, b0);\n       else\n@@ -1174,7 +1187,7 @@ ia64_expand_call (retval, addr, nextarg, sibcall_p)\n   else\n     {\n       if (sibcall_p)\n-\temit_call_insn (gen_sibcall_pic (addr, narg_rtx, b0));\n+\temit_call_insn (gen_sibcall_pic (addr, narg_rtx, b0, pfs));\n       else\n \t{\n \t  emit_move_insn (gp_save, pic_offset_table_rtx);\n@@ -1548,6 +1561,7 @@ ia64_compute_frame_size (size)\n      ar.unat as well.  */\n   if (spilled_gr_p || cfun->machine->n_varargs)\n     {\n+      regs_ever_live[AR_UNAT_REGNUM] = 1;\n       SET_HARD_REG_BIT (mask, AR_UNAT_REGNUM);\n       current_frame_info.reg_save_ar_unat = find_gr_spill (spill_size == 0);\n       if (current_frame_info.reg_save_ar_unat == 0)\n@@ -6633,42 +6647,39 @@ int\n ia64_epilogue_uses (regno)\n      int regno;\n {\n-  /* When a function makes a call through a function descriptor, we\n-     will write a (potentially) new value to \"gp\".  After returning\n-     from such a call, we need to make sure the function restores the\n-     original gp-value, even if the function itself does not use the\n-     gp anymore.  */\n-  if (regno == R_GR (1)\n-      && TARGET_CONST_GP\n-      && !(TARGET_AUTO_PIC || TARGET_NO_PIC))\n-    return 1;\n-\n-  /* For functions defined with the syscall_linkage attribute, all input\n-     registers are marked as live at all function exits.  This prevents the\n-     register allocator from using the input registers, which in turn makes it\n-     possible to restart a system call after an interrupt without having to\n-     save/restore the input registers.  This also prevents kernel data from\n-     leaking to application code.  */\n-\n-  if (IN_REGNO_P (regno)\n-      && lookup_attribute (\"syscall_linkage\",\n-\t\t\t   TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))))\n-    return 1;\n-\n-  /* Conditional return patterns can't represent the use of `b0' as\n-     the return address, so we force the value live this way.  */\n-  if (regno == R_BR (0))\n-    return 1;\n+  switch (regno)\n+    {\n+    case R_GR (1):\n+      /* When a function makes a call through a function descriptor, we\n+         will write a (potentially) new value to \"gp\".  After returning\n+         from such a call, we need to make sure the function restores the\n+         original gp-value, even if the function itself does not use the\n+         gp anymore.  */\n+      return (TARGET_CONST_GP && !(TARGET_AUTO_PIC || TARGET_NO_PIC));\n+\n+    case IN_REG (0): case IN_REG (1): case IN_REG (2): case IN_REG (3):\n+    case IN_REG (4): case IN_REG (5): case IN_REG (6): case IN_REG (7):\n+      /* For functions defined with the syscall_linkage attribute, all\n+\t input registers are marked as live at all function exits.  This\n+\t prevents the register allocator from using the input registers,\n+\t which in turn makes it possible to restart a system call after\n+\t an interrupt without having to save/restore the input registers.\n+\t This also prevents kernel data from leaking to application code.  */\n+      return lookup_attribute (\"syscall_linkage\",\n+\t   TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl))) != NULL;\n+\n+    case R_BR (0):\n+      /* Conditional return patterns can't represent the use of `b0' as\n+         the return address, so we force the value live this way.  */\n+      return 1;\n \n-  if (regs_ever_live[AR_LC_REGNUM] && regno == AR_LC_REGNUM)\n-    return 1;\n-  if (! current_function_is_leaf && regno == AR_PFS_REGNUM)\n-    return 1;\n-  if (TEST_HARD_REG_BIT (current_frame_info.mask, AR_UNAT_REGNUM)\n-      && regno == AR_UNAT_REGNUM)\n-    return 1;\n+    case AR_PFS_REGNUM:\n+      /* Likewise for ar.pfs, which is used by br.ret.  */\n+      return 1;\n \n-  return 0;\n+    default:\n+      return 0;\n+    }\n }\n \n /* Return true if IDENTIFIER is a valid attribute for TYPE.  */"}, {"sha": "97e609fd21e8ed5c79cc638d534ada1f2fe53fa5", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -635,11 +635,11 @@ while (0)\n \n /* Like `CALL_USED_REGISTERS' but used to overcome a historical \n    problem which makes CALL_USED_REGISTERS *always* include\n-   all the FIXED_REGISTERS. Until this problem has been \n+   all the FIXED_REGISTERS.  Until this problem has been \n    resolved this macro can be used to overcome this situation.\n    In particular, block_propagate() requires this list \n    be acurate, or we can remove registers which should be live.  \n-   This macro is used in regs_invalidated_by_call ()*/\n+   This macro is used in regs_invalidated_by_call.  */\n \n #define CALL_REALLY_USED_REGISTERS \\\n { /* General registers.  */\t\t\t\t\\\n@@ -668,7 +668,7 @@ while (0)\n   /* Branch registers.  */\t\t\t\t\\\n   1, 0, 0, 0, 0, 0, 1, 1,\t\t\t\t\\\n   /*FP RA CCV UNAT PFS LC EC */\t\t\t\t\\\n-     0, 0,  1,   1,  1, 0, 0\t\t\t\t\\\n+     0, 0,  1,   0,  1, 0, 0\t\t\t\t\\\n }\n \n \n@@ -2667,6 +2667,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n { \"condop_operator\", {PLUS, MINUS, IOR, XOR, AND}},\t\t\t\\\n { \"ar_lc_reg_operand\", {REG}},\t\t\t\t\t\t\\\n { \"ar_ccv_reg_operand\", {REG}},\t\t\t\t\t\t\\\n+{ \"ar_pfs_reg_operand\", {REG}},\t\t\t\t\t\t\\\n { \"general_tfmode_operand\", {SUBREG, REG, CONST_DOUBLE, MEM}},\t\t\\\n { \"destination_tfmode_operand\", {SUBREG, REG, MEM}},\t\t\t\\\n { \"tfreg_or_fp01_operand\", {REG, CONST_DOUBLE}},"}, {"sha": "5c1b9302b50e3da4058fc9bcaf87daed4233e1b9", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -4673,7 +4673,8 @@\n (define_insn \"sibcall_nopic\"\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"b,i\"))\n \t (match_operand 1 \"\" \"\"))\n-   (use (match_operand:DI 2 \"register_operand\" \"=b,b\"))]\n+   (use (match_operand:DI 2 \"register_operand\" \"=b,b\"))\n+   (use (match_operand:DI 3 \"ar_pfs_reg_operand\" \"\"))]\n   \"\"\n   \"br%+.many %0\"\n   [(set_attr \"itanium_class\" \"br,scall\")])\n@@ -4701,7 +4702,8 @@\n   [(call (mem:DI (match_operand:DI 0 \"call_operand\" \"bi\"))\n \t (match_operand 1 \"\" \"\"))\n    (use (unspec [(reg:DI 1)] 9))\n-   (use (match_operand:DI 2 \"register_operand\" \"=b\"))]\n+   (use (match_operand:DI 2 \"register_operand\" \"=b\"))\n+   (use (match_operand:DI 3 \"ar_pfs_reg_operand\" \"\"))]\n   \"\"\n   \"br%+.many %0\"\n   [(set_attr \"itanium_class\" \"br\")])"}, {"sha": "6a316e24cc9405c1bedd17bb5ab5199947a73570", "filename": "gcc/flow.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -4814,7 +4814,8 @@ mark_regs_live_at_end (set)\n     {\n       /* Mark all call-saved registers that we actually used.  */\n       for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (regs_ever_live[i] && ! call_used_regs[i] && ! LOCAL_REGNO (i))\n+\tif (regs_ever_live[i] && ! LOCAL_REGNO (i)\n+\t    && ! TEST_HARD_REG_BIT (regs_invalidated_by_call, i))\n \t  SET_REGNO_REG_SET (set, i);\n     }\n "}, {"sha": "50b446d10e9c88257bcf38ba13a45b6b3c3f253b", "filename": "gcc/regclass.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca3c22fd16679c55c3d44e19b646a5dec513244/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=6ca3c22fd16679c55c3d44e19b646a5dec513244", "patch": "@@ -474,7 +474,7 @@ init_reg_sets_1 ()\n \t;\n #endif\n       else if (0\n-#ifdef CALL_REALLY_USED_REGS\n+#ifdef CALL_REALLY_USED_REGISTERS\n \t       || call_really_used_regs[i]\n #else\n \t       || call_used_regs[i]"}]}