{"sha": "3969c39f61a2c54c9a5d9a92ed172392943e87fb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzk2OWMzOWY2MWEyYzU0YzlhNWQ5YTkyZWQxNzIzOTI5NDNlODdmYg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-11-20T13:15:17Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-11-20T13:15:17Z"}, "message": "re PR libfortran/16135 (libfortran doesn't build, use of C99 types)\n\n\tPR target/16135\n\t* acinclude.m4 (LIBGFOR_TARGET_ILP32): New check.\n\t* configure.ac: Include LIBGFOR_TARGET_ILP32.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\t* libgfortran.h: Provide default definitions for C99 types\n\ton ILP32 targets that don't have them.\n\n\tPR target/17999\n\t* configure.ac: Check for snprintf.\n\t* configure: Regenerate.\n\t* config.h.in: Likewise.\n\t* intrinsics/date_and_time.c (date_and_time): Do not\n\tuse snprinf if it is not available.\n\t* io/write.c (output_float): Likewise.\n\nFrom-SVN: r90964", "tree": {"sha": "4fb430d6fc61a79d5b9eb441961b3c02f6bc0a4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4fb430d6fc61a79d5b9eb441961b3c02f6bc0a4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3969c39f61a2c54c9a5d9a92ed172392943e87fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3969c39f61a2c54c9a5d9a92ed172392943e87fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3969c39f61a2c54c9a5d9a92ed172392943e87fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3969c39f61a2c54c9a5d9a92ed172392943e87fb/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7a531ae616ec482c38d8749d5e2f672fe2022ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a531ae616ec482c38d8749d5e2f672fe2022ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a531ae616ec482c38d8749d5e2f672fe2022ac"}], "stats": {"total": 162, "additions": 160, "deletions": 2}, "files": [{"sha": "256e04116327617338e3febce93487fbf87ede8c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -1,3 +1,21 @@\n+2004-11-20  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\tPR target/16135\n+\t* acinclude.m4 (LIBGFOR_TARGET_ILP32): New check.\n+\t* configure.ac: Include LIBGFOR_TARGET_ILP32.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* libgfortran.h: Provide default definitions for C99 types\n+\ton ILP32 targets that don't have them.\n+\n+\tPR target/17999\n+\t* configure.ac: Check for snprintf.\n+\t* configure: Regenerate.\n+\t* config.h.in: Likewise.\n+\t* intrinsics/date_and_time.c (date_and_time): Do not\n+\tuse snprinf if it is not available.\n+\t* io/write.c (output_float): Likewise.\n+\n 2004-11-20  Steven G. Kargl  <kargls@comcast.net>\n \n \t* Makefile.am: Add intrinsics/{umask.c,unlink.c,exit.c}"}, {"sha": "87dc72283f98a3f7338a5ed3aed36e54d9168d10", "filename": "libgfortran/acinclude.m4", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Facinclude.m4?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -83,3 +83,22 @@ AC_DEFUN([AC_LIBTOOL_DLOPEN])\n AC_DEFUN([AC_PROG_LD])\n ])\n \n+dnl Check whether the target is ILP32.\n+AC_DEFUN([LIBGFOR_TARGET_ILP32], [\n+  AC_CACHE_CHECK([whether the target is ILP32], target_ilp32, [\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-O2\"\n+  AC_TRY_LINK(,[\n+if (sizeof(int) == 4 && sizeof(long) == 4 && sizeof(void *) == 4)\n+  ;\n+else\n+  undefined_function ();\n+               ],\n+               target_ilp32=yes,\n+               target_ilp32=no)\n+  CFLAGS=\"$save_CFLAGS\"])\n+  if test $target_ilp32 = yes; then\n+    AC_DEFINE(TARGET_ILP32, 1,\n+      [Define to 1 if the target is ILP32.])\n+  fi\n+  ])"}, {"sha": "db4da7aaed6abba7c2ff47dc2457879fc922af79", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -135,6 +135,9 @@\n /* libm includes sinhf */\n #undef HAVE_SINHF\n \n+/* Define to 1 if you have the `snprintf' function. */\n+#undef HAVE_SNPRINTF\n+\n /* libm includes sqrtf */\n #undef HAVE_SQRTF\n \n@@ -234,6 +237,9 @@\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n \n+/* Define to 1 if the target is ILP32. */\n+#undef TARGET_ILP32\n+\n /* Define to 1 if you can safely include both <sys/time.h> and <time.h>. */\n #undef TIME_WITH_SYS_TIME\n "}, {"sha": "0e738dfde89173461276323ea6b403ed15ae391a", "filename": "libgfortran/configure", "status": "modified", "additions": 82, "deletions": 1, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -6822,7 +6822,8 @@ fi\n \n \n \n-for ac_func in getrusage times mkstemp strtof\n+\n+for ac_func in getrusage times mkstemp strtof snprintf\n do\n as_ac_var=`echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\n echo \"$as_me:$LINENO: checking for $ac_func\" >&5\n@@ -10716,6 +10717,86 @@ _ACEOF\n     fi\n   fi\n \n+# Attempt to assert that the target is of common type in case we don't\n+# have C99 integer types at all.\n+\n+  echo \"$as_me:$LINENO: checking whether the target is ILP32\" >&5\n+echo $ECHO_N \"checking whether the target is ILP32... $ECHO_C\" >&6\n+if test \"${target_ilp32+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  save_CFLAGS=\"$CFLAGS\"\n+  CFLAGS=\"-O2\"\n+  if test x$gcc_no_link = xyes; then\n+  { { echo \"$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&5\n+echo \"$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+fi\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+if (sizeof(int) == 4 && sizeof(long) == 4 && sizeof(void *) == 4)\n+  ;\n+else\n+  undefined_function ();\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  target_ilp32=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+target_ilp32=no\n+fi\n+rm -f conftest.err conftest.$ac_objext \\\n+      conftest$ac_exeext conftest.$ac_ext\n+  CFLAGS=\"$save_CFLAGS\"\n+fi\n+echo \"$as_me:$LINENO: result: $target_ilp32\" >&5\n+echo \"${ECHO_T}$target_ilp32\" >&6\n+  if test $target_ilp32 = yes; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define TARGET_ILP32 1\n+_ACEOF\n+\n+  fi\n+\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure"}, {"sha": "f91b2604bc8aa3d72649d041927b786380d88443", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -159,7 +159,7 @@ AC_CHECK_HEADER([complex.h],[AC_DEFINE([HAVE_COMPLEX_H], [1], [complex.h exists]\n AC_CHECK_LIB([m],[csin],[need_math=\"no\"],[need_math=\"yes\"])\n \n # Check for library functions.\n-AC_CHECK_FUNCS(getrusage times mkstemp strtof)\n+AC_CHECK_FUNCS(getrusage times mkstemp strtof snprintf)\n \n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])\n@@ -226,6 +226,10 @@ AC_SUBST([MATH_OBJ],[\"$extra_math_obj\"])\n # to call gettimeofday if we have it.\n LIBGFOR_GETTIMEOFDAY\n \n+# Attempt to assert that the target is of common type in case we don't\n+# have C99 integer types at all.\n+LIBGFOR_TARGET_ILP32\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}, {"sha": "e0b01234556cea68f95363c928f88bd6ff24f9e6", "filename": "libgfortran/intrinsics/date_and_time.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fintrinsics%2Fdate_and_time.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fintrinsics%2Fdate_and_time.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fdate_and_time.c?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -182,20 +182,35 @@ date_and_time (char *__date,\n \n   if (__date)\n     {\n+#if HAVE_SNPRINTF\n       snprintf (date, DATE_LEN + 1, \"%04d%02d%02d\",\n \t\tvalues[0], values[1], values[2]);\n+#else\n+      sprintf (date, \"%04d%02d%02d\",\n+\t       values[0], values[1], values[2]);\n+#endif\n     }\n \n   if (__time)\n     {\n+#if HAVE_SNPRINTF\n       snprintf (timec, TIME_LEN + 1, \"%02d%02d%02d.%03d\",\n \t\tvalues[4], values[5], values[6], values[7]);\n+#else\n+      sprintf (timec, \"%02d%02d%02d.%03d\",\n+\t       values[4], values[5], values[6], values[7]);\n+#endif\n     }\n \n   if (__zone)\n     {\n+#if HAVE_SNPRINTF\n       snprintf (zone, ZONE_LEN + 1, \"%+03d%02d\",\n \t\tvalues[3] / 60, abs (values[3] % 60));\n+#else\n+      sprintf (zone, \"%+03d%02d\",\n+\t       values[3] / 60, abs (values[3] % 60));\n+#endif\n     }\n #else /* if defined HAVE_NO_DATE_TIME  */\n   /* We really have *nothing* to return, so return blanks and HUGE(0).  */"}, {"sha": "a121a8f57aad1b7662520e208ecd2c6674c6e0ad", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -615,7 +615,11 @@ output_float (fnode *f, double value, int len)\n \t  *(out++) = expchar;\n \t  edigits--;\n \t}\n+#if HAVE_SNPRINTF\n       snprintf (buffer, 32, \"%+0*d\", edigits, e);\n+#else\n+      sprintf (buffer, \"%+0*d\", edigits, e);\n+#endif\n       memcpy (out, buffer, edigits);\n     }\n }"}, {"sha": "e73c00a480cb6fb50d9aa8c406ab0dafa9b5380c", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3969c39f61a2c54c9a5d9a92ed172392943e87fb/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=3969c39f61a2c54c9a5d9a92ed172392943e87fb", "patch": "@@ -47,6 +47,17 @@ Boston, MA 02111-1307, USA.  */\n #include <inttypes.h>\n #endif\n \n+#if !defined(HAVE_STDINT_H) && !defined(HAVE_INTTYPES_H) && defined(TARGET_ILP32)\n+typedef char int8_t;\n+typedef short int16_t;\n+typedef int int32_t;\n+typedef long long int64_t;\n+typedef unsigned char uint8_t;\n+typedef unsigned short uint16_t;\n+typedef unsigned int uint32_t;\n+typedef unsigned long long uint64_t;\n+#endif\n+\n #if HAVE_SYS_TYPES_H\n #include <sys/types.h>\n #endif"}]}