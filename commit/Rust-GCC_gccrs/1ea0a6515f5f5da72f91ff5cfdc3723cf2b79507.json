{"sha": "1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVhMGE2NTE1ZjVmNWRhNzJmOTFmZjVjZmRjMzcyM2NmMmI3OTUwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-02-02T16:17:15Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-02-02T16:17:15Z"}, "message": "configure.ac: Check __mips64 when setting host_address.\n\nlibgcc/\n\t* configure.ac: Check __mips64 when setting host_address.\n\t* configure: Regenerate.\n\t* config.host (mips*-*-*): Add t-softfp-sfdf, mips/t-softfp-tf,\n\tmips/t-mips64 and t-softfp.\n\t(mips*-*-linux*): Don't add mips/t-tpbit.\n\t* config/mips/t-mips (LIB2_SIDITI_CONV_FUNCS, FPBIT, FPBIT_CFLAGS)\n\t(DPBIT, DPBIT_CFLAGS): Delete.\n\t* config/mips/sfp-machine.h: New file.\n\t* config/mips/t-mips64: Likewise.\n\t* config/mips/t-softfp-tf: Likewise.\n\t* config/mips/t-tpbit: Delete.\n\nFrom-SVN: r207403", "tree": {"sha": "3b7c58c10699900c15fee4156f3368ce98a45a06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b7c58c10699900c15fee4156f3368ce98a45a06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "70b2d364cc713fff51dcabfe987e3cb8efdcee93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70b2d364cc713fff51dcabfe987e3cb8efdcee93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70b2d364cc713fff51dcabfe987e3cb8efdcee93"}], "stats": {"total": 232, "additions": 213, "deletions": 19}, "files": [{"sha": "58a8cadee68eee0c03d50f35d47a85382f0159d7", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -1,3 +1,17 @@\n+2014-02-02  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* configure.ac: Check __mips64 when setting host_address.\n+\t* configure: Regenerate.\n+\t* config.host (mips*-*-*): Add t-softfp-sfdf, mips/t-softfp-tf,\n+\tmips/t-mips64 and t-softfp.\n+\t(mips*-*-linux*): Don't add mips/t-tpbit.\n+\t* config/mips/t-mips (LIB2_SIDITI_CONV_FUNCS, FPBIT, FPBIT_CFLAGS)\n+\t(DPBIT, DPBIT_CFLAGS): Delete.\n+\t* config/mips/sfp-machine.h: New file.\n+\t* config/mips/t-mips64: Likewise.\n+\t* config/mips/t-softfp-tf: Likewise.\n+\t* config/mips/t-tpbit: Delete.\n+\n 2014-01-29  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n \n \t* config/aarch64/sfp-machine.h (_FP_I_TYPE): Define"}, {"sha": "cc7becf15efa2551dc072b2bf69b4672bad239aa", "filename": "libgcc/config.host", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -140,8 +140,16 @@ microblaze*-*-*)\n \tcpu_type=microblaze\n \t;;\n mips*-*-*)\n+\t# All MIPS targets provide a full set of FP routines.\n \tcpu_type=mips\n-\ttmake_file=mips/t-mips\n+\ttmake_file=\"mips/t-mips t-softfp-sfdf\"\n+\tif test \"${ac_cv_sizeof_long_double}\" = 16; then\n+\t\ttmake_file=\"${tmake_file} mips/t-softfp-tf\"\n+\tfi\n+\tif test \"${host_address}\" = 64; then\n+\t\ttmake_file=\"${tmake_file} mips/t-mips64\"\n+\tfi\n+\ttmake_file=\"${tmake_file} t-softfp\"\n \t;;\n nds32*-*)\n \tcpu_type=nds32\n@@ -776,9 +784,6 @@ mips*-*-linux*)\t\t\t\t# Linux MIPS, either endian.\n \t    ;;\n \tesac\n \tmd_unwind_header=mips/linux-unwind.h\n-\tif test \"${ac_cv_sizeof_long_double}\" = 16; then\n-\t\ttmake_file=\"${tmake_file} mips/t-tpbit\"\n-\tfi\n \t;;\n mips*-sde-elf*)\n \ttmake_file=\"$tmake_file mips/t-crtstuff mips/t-mips16\""}, {"sha": "808570ec9f797b459dd3a2fa14e0bde215b8ad22", "filename": "libgcc/config/mips/sfp-machine.h", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Fsfp-machine.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Fsfp-machine.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Fsfp-machine.h?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -0,0 +1,178 @@\n+/* softfp machine description for MIPS.\n+   Copyright (C) 2009-2014 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifdef __mips64\n+#define _FP_W_TYPE_SIZE\t\t64\n+#define _FP_W_TYPE\t\tunsigned long long\n+#define _FP_WS_TYPE\t\tsigned long long\n+#define _FP_I_TYPE\t\tlong long\n+\n+typedef int TItype __attribute__ ((mode (TI)));\n+typedef unsigned int UTItype __attribute__ ((mode (TI)));\n+#define TI_BITS (__CHAR_BIT__ * (int) sizeof (TItype))\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_2_udiv(Q,R,X,Y)\n+\n+#ifdef __mips_nan2008\n+# define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+# define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1)\n+# define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1\n+#else\n+# define _FP_NANFRAC_S\t\t(_FP_QNANBIT_S - 1)\n+# define _FP_NANFRAC_D\t\t(_FP_QNANBIT_D - 1)\n+# define _FP_NANFRAC_Q\t\t(_FP_QNANBIT_Q - 1), -1\n+#endif\n+#else\n+#define _FP_W_TYPE_SIZE\t\t32\n+#define _FP_W_TYPE\t\tunsigned int\n+#define _FP_WS_TYPE\t\tsigned int\n+#define _FP_I_TYPE\t\tint\n+\n+#define _FP_MUL_MEAT_S(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_1_wide(_FP_WFRACBITS_S,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_D(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_2_wide(_FP_WFRACBITS_D,R,X,Y,umul_ppmm)\n+#define _FP_MUL_MEAT_Q(R,X,Y)\t\t\t\t\\\n+  _FP_MUL_MEAT_4_wide(_FP_WFRACBITS_Q,R,X,Y,umul_ppmm)\n+\n+#define _FP_DIV_MEAT_S(R,X,Y)\t_FP_DIV_MEAT_1_udiv_norm(S,R,X,Y)\n+#define _FP_DIV_MEAT_D(R,X,Y)\t_FP_DIV_MEAT_2_udiv(D,R,X,Y)\n+#define _FP_DIV_MEAT_Q(R,X,Y)\t_FP_DIV_MEAT_4_udiv(Q,R,X,Y)\n+\n+#ifdef __mips_nan2008\n+# define _FP_NANFRAC_S\t\t((_FP_QNANBIT_S << 1) - 1)\n+# define _FP_NANFRAC_D\t\t((_FP_QNANBIT_D << 1) - 1), -1\n+# define _FP_NANFRAC_Q\t\t((_FP_QNANBIT_Q << 1) - 1), -1, -1, -1\n+#else\n+# define _FP_NANFRAC_S\t\t(_FP_QNANBIT_S - 1)\n+# define _FP_NANFRAC_D\t\t(_FP_QNANBIT_D - 1), -1\n+# define _FP_NANFRAC_Q\t\t(_FP_QNANBIT_Q - 1), -1, -1, -1\n+#endif\n+#endif\n+\n+/* The type of the result of a floating point comparison.  This must\n+   match __libgcc_cmp_return__ in GCC for the target.  */\n+typedef int __gcc_CMPtype __attribute__ ((mode (__libgcc_cmp_return__)));\n+#define CMPtype __gcc_CMPtype\n+\n+#define _FP_NANSIGN_S\t\t0\n+#define _FP_NANSIGN_D\t\t0\n+#define _FP_NANSIGN_Q\t\t0\n+\n+#define _FP_KEEPNANFRACP 1\n+#ifdef __mips_nan2008\n+# define _FP_QNANNEGATEDP 0\n+#else\n+# define _FP_QNANNEGATEDP 1\n+#endif\n+\n+/* Comment from glibc: */\n+/* From my experiments it seems X is chosen unless one of the\n+   NaNs is sNaN,  in which case the result is NANSIGN/NANFRAC.  */\n+#define _FP_CHOOSENAN(fs, wc, R, X, Y, OP)\t\t\t\\\n+  do {\t\t\t\t\t\t\t\t\\\n+    if ((_FP_FRAC_HIGH_RAW_##fs(X) |\t\t\t\t\\\n+\t _FP_FRAC_HIGH_RAW_##fs(Y)) & _FP_QNANBIT_##fs)\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = _FP_NANSIGN_##fs;\t\t\t\t\\\n+\t_FP_FRAC_SET_##wc(R,_FP_NANFRAC_##fs);\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    else\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tR##_s = X##_s;\t\t\t\t\t\t\\\n+\t_FP_FRAC_COPY_##wc(R,X);\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+    R##_c = FP_CLS_NAN;\t\t\t\t\t\t\\\n+  } while (0)\n+\n+#ifdef __mips_hard_float\n+#define FP_EX_INVALID           0x40\n+#define FP_EX_DIVZERO           0x20\n+#define FP_EX_OVERFLOW          0x10\n+#define FP_EX_UNDERFLOW         0x08\n+#define FP_EX_INEXACT           0x04\n+#define FP_EX_ALL \\\n+\t(FP_EX_INVALID | FP_EX_DIVZERO | FP_EX_OVERFLOW | FP_EX_UNDERFLOW \\\n+\t | FP_EX_INEXACT)\n+\n+#define FP_EX_ENABLE_SHIFT\t5\n+#define FP_EX_CAUSE_SHIFT\t10\n+\n+#define FP_RND_NEAREST\t\t0x0\n+#define FP_RND_ZERO\t\t0x1\n+#define FP_RND_PINF\t\t0x2\n+#define FP_RND_MINF\t\t0x3\n+#define FP_RND_MASK\t\t0x3\n+\n+#define _FP_DECL_EX \\\n+  unsigned long int _fcsr __attribute__ ((unused)) = FP_RND_NEAREST\n+\n+#define FP_INIT_ROUNDMODE\t\t\t\\\n+  do {\t\t\t\t\t\t\\\n+    _fcsr = __builtin_mips_get_fcsr ();\t\t\\\n+  } while (0)\n+\n+#define FP_ROUNDMODE (_fcsr & FP_RND_MASK)\n+\n+#define FP_TRAPPING_EXCEPTIONS ((_fcsr >> FP_EX_ENABLE_SHIFT) & FP_EX_ALL)\n+\n+#define FP_HANDLE_EXCEPTIONS\t\t\t\t\\\n+  do {\t\t\t\t\t\t\t\\\n+    _fcsr &= ~(FP_EX_ALL << FP_EX_CAUSE_SHIFT);\t\t\\\n+    /* Also clear Unimplemented Operation.  */\t\t\\\n+    _fcsr &= ~(1 << 17);\t\t\t\t\\\n+    _fcsr |= _fex | (_fex << FP_EX_CAUSE_SHIFT);\t\\\n+    __builtin_mips_set_fcsr (_fcsr);\t\t\t\\\n+  } while (0);\n+\n+#else\n+#define FP_EX_INVALID           (1 << 4)\n+#define FP_EX_DIVZERO           (1 << 3)\n+#define FP_EX_OVERFLOW          (1 << 2)\n+#define FP_EX_UNDERFLOW         (1 << 1)\n+#define FP_EX_INEXACT           (1 << 0)\n+#endif\n+\n+#define\t__LITTLE_ENDIAN\t1234\n+#define\t__BIG_ENDIAN\t4321\n+\n+#if defined _MIPSEB\n+# define __BYTE_ORDER __BIG_ENDIAN\n+#else\n+# define __BYTE_ORDER __LITTLE_ENDIAN\n+#endif\n+\n+/* Define ALIASNAME as a strong alias for NAME.  */\n+# define strong_alias(name, aliasname) _strong_alias(name, aliasname)\n+# define _strong_alias(name, aliasname) \\\n+  extern __typeof (name) aliasname __attribute__ ((alias (#name)));"}, {"sha": "4f94ee66be36b78b1fdabc49da120923c2780528", "filename": "libgcc/config/mips/t-mips", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-mips", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-mips", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-mips?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -1,8 +1 @@\n-LIB2_SIDITI_CONV_FUNCS = yes\n-\n-FPBIT = true\n-FPBIT_CFLAGS = -DQUIET_NAN_NEGATED\n-DPBIT = true\n-DPBIT_CFLAGS = -DQUIET_NAN_NEGATED\n-\n LIB2ADD_ST += $(srcdir)/config/mips/lib2funcs.c"}, {"sha": "a1e3513e2884ffa856cc2d41670f150a27e87553", "filename": "libgcc/config/mips/t-mips64", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-mips64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-mips64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-mips64?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -0,0 +1 @@\n+softfp_int_modes += ti"}, {"sha": "306677b12554597d9bb96c6aaa0b3391762cdf38", "filename": "libgcc/config/mips/t-softfp-tf", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-softfp-tf", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfig%2Fmips%2Ft-softfp-tf", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-softfp-tf?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -0,0 +1,3 @@\n+softfp_float_modes += tf\n+softfp_extensions += sftf dftf\n+softfp_truncations += tfsf tfdf"}, {"sha": "1670ef3ffd6e180d1b2a75885b8e780425318e2d", "filename": "libgcc/config/mips/t-tpbit", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70b2d364cc713fff51dcabfe987e3cb8efdcee93/libgcc%2Fconfig%2Fmips%2Ft-tpbit", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70b2d364cc713fff51dcabfe987e3cb8efdcee93/libgcc%2Fconfig%2Fmips%2Ft-tpbit", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fmips%2Ft-tpbit?ref=70b2d364cc713fff51dcabfe987e3cb8efdcee93", "patch": "@@ -1,4 +0,0 @@\n-ifeq ($(long_double_type_size),128)\n-TPBIT = true\n-TPBIT_CFLAGS = -DQUIET_NAN_NEGATED\n-endif"}, {"sha": "092e20ee633ee08f6dcda8ac800d0257f66f192f", "filename": "libgcc/configure", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -4317,9 +4317,11 @@ fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgcc_cv_cfi\" >&5\n $as_echo \"$libgcc_cv_cfi\" >&6; }\n \n-# Check 32bit or 64bit\n+# Check 32bit or 64bit.  In the case of MIPS, this really determines the\n+# word size rather than the address size.\n cat > conftest.c <<EOF\n-#if defined(__x86_64__) || (!defined(__i386__) && defined(__LP64__))\n+#if defined(__x86_64__) || (!defined(__i386__) && defined(__LP64__)) \\\n+    || defined(__mips64)\n host_address=64\n #else\n host_address=32"}, {"sha": "d77a8f09e6c83791b15c08917816185e8d2588a6", "filename": "libgcc/configure.ac", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=1ea0a6515f5f5da72f91ff5cfdc3723cf2b79507", "patch": "@@ -279,9 +279,11 @@ AC_CACHE_CHECK([whether assembler supports CFI directives], [libgcc_cv_cfi],\n   [libgcc_cv_cfi=yes],\n   [libgcc_cv_cfi=no])])\n \n-# Check 32bit or 64bit\n+# Check 32bit or 64bit.  In the case of MIPS, this really determines the\n+# word size rather than the address size.\n cat > conftest.c <<EOF\n-#if defined(__x86_64__) || (!defined(__i386__) && defined(__LP64__))\n+#if defined(__x86_64__) || (!defined(__i386__) && defined(__LP64__)) \\\n+    || defined(__mips64)\n host_address=64\n #else\n host_address=32"}]}