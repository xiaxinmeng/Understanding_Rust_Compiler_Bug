{"sha": "ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U0N2ZkYTNjZTZhZGZlODZmNzI1OTMwZGVkYmZiMWY3NzVkZGQ0NQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2011-01-03T13:06:54Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2011-01-03T13:06:54Z"}, "message": "re PR tree-optimization/46984 (g++.dg/torture/pr45699.C FAILs with -fno-early-inlining -flto)\n\n2011-01-03  Martin Jambor  <mjambor@suse.cz>\n\n\tPR tree-optimization/46984\n\t* cgraph.h (cgraph_indirect_call_info): make field thunk_delta\n\tHOST_WIDE_INT.\n\t(cgraph_create_indirect_edge): Fixed line length.\n\t(cgraph_indirect_call_info): Declare.\n\t(cgraph_make_edge_direct) Update declaration.\n\t* cgraph.c (cgraph_allocate_init_indirect_info): New function.\n\t(cgraph_create_indirect_edge): Use it.\n\t(cgraph_make_edge_direct): Made delta HOST_WIDE_INT.  Updated all\n\tcallees.\n\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Update for\n\tthe new thunk_delta representation.\n\t* ipa-prop.c (ipa_make_edge_direct_to_target): Convert delta to\n\tHOST_WIDE_INT.\n\t(ipa_write_indirect_edge_info): Remove streaming of thunk_delta.\n\t(ipa_read_indirect_edge_info): Likewise.\n\t* lto-cgraph.c (output_edge_opt_summary): New function.\n\t(output_node_opt_summary): Call it on all outgoing edges.\n\t(input_edge_opt_summary): New function.\n\t(input_node_opt_summary): Call it on all outgoing edges.\n\n\t* testsuite/g++.dg/ipa/pr46984.C: New test.\n\nFrom-SVN: r168420", "tree": {"sha": "a0198b9cc6e29df5e3c9c571f5a99db84117cc75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a0198b9cc6e29df5e3c9c571f5a99db84117cc75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd0bcb5af982e58e40c5fad1eb0d1a54316b2807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd0bcb5af982e58e40c5fad1eb0d1a54316b2807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd0bcb5af982e58e40c5fad1eb0d1a54316b2807"}], "stats": {"total": 188, "additions": 162, "deletions": 26}, "files": [{"sha": "c908a7b64b01300791cb5e6166480565fc987ad7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -1,3 +1,26 @@\n+2011-01-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/46984\n+\t* cgraph.h (cgraph_indirect_call_info): make field thunk_delta\n+\tHOST_WIDE_INT.\n+\t(cgraph_create_indirect_edge): Fixed line length.\n+\t(cgraph_indirect_call_info): Declare.\n+\t(cgraph_make_edge_direct) Update declaration.\n+\t* cgraph.c (cgraph_allocate_init_indirect_info): New function.\n+\t(cgraph_create_indirect_edge): Use it.\n+\t(cgraph_make_edge_direct): Made delta HOST_WIDE_INT.  Updated all\n+\tcallees.\n+\t* cgraphunit.c (cgraph_redirect_edge_call_stmt_to_callee): Update for\n+\tthe new thunk_delta representation.\n+\t* ipa-prop.c (ipa_make_edge_direct_to_target): Convert delta to\n+\tHOST_WIDE_INT.\n+\t(ipa_write_indirect_edge_info): Remove streaming of thunk_delta.\n+\t(ipa_read_indirect_edge_info): Likewise.\n+\t* lto-cgraph.c (output_edge_opt_summary): New function.\n+\t(output_node_opt_summary): Call it on all outgoing edges.\n+\t(input_edge_opt_summary): New function.\n+\t(input_node_opt_summary): Call it on all outgoing edges.\n+\n 2011-01-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR driver/47137"}, {"sha": "c8f9b04bb1234ea453dcf953461a41250a1bb32d", "filename": "gcc/cgraph.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -860,7 +860,7 @@ cgraph_set_call_stmt (struct cgraph_edge *e, gimple new_stmt)\n \t indirect call into a direct one.  */\n       struct cgraph_node *new_callee = cgraph_node (decl);\n \n-      cgraph_make_edge_direct (e, new_callee, NULL);\n+      cgraph_make_edge_direct (e, new_callee, 0);\n     }\n \n   push_cfun (DECL_STRUCT_FUNCTION (e->caller->decl));\n@@ -1070,6 +1070,17 @@ cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n   return edge;\n }\n \n+/* Allocate cgraph_indirect_call_info and set its fields to default values. */\n+\n+struct cgraph_indirect_call_info *\n+cgraph_allocate_init_indirect_info (void)\n+{\n+  struct cgraph_indirect_call_info *ii;\n+\n+  ii = ggc_alloc_cleared_cgraph_indirect_call_info ();\n+  ii->param_index = -1;\n+  return ii;\n+}\n \n /* Create an indirect edge with a yet-undetermined callee where the call\n    statement destination is a formal parameter of the caller with index\n@@ -1086,8 +1097,7 @@ cgraph_create_indirect_edge (struct cgraph_node *caller, gimple call_stmt,\n   edge->indirect_unknown_callee = 1;\n   initialize_inline_failed (edge);\n \n-  edge->indirect_info = ggc_alloc_cleared_cgraph_indirect_call_info ();\n-  edge->indirect_info->param_index = -1;\n+  edge->indirect_info = cgraph_allocate_init_indirect_info ();\n   edge->indirect_info->ecf_flags = ecf_flags;\n \n   edge->next_callee = caller->indirect_calls;\n@@ -1195,12 +1205,12 @@ cgraph_redirect_edge_callee (struct cgraph_edge *e, struct cgraph_node *n)\n }\n \n /* Make an indirect EDGE with an unknown callee an ordinary edge leading to\n-   CALLEE.  DELTA, if non-NULL, is an integer constant that is to be added to\n-   the this pointer (first parameter).  */\n+   CALLEE.  DELTA is an integer constant that is to be added to the this\n+   pointer (first parameter) to compensate for skipping a thunk adjustment.  */\n \n void\n cgraph_make_edge_direct (struct cgraph_edge *edge, struct cgraph_node *callee,\n-\t\t\t tree delta)\n+\t\t\t HOST_WIDE_INT delta)\n {\n   edge->indirect_unknown_callee = 0;\n   edge->indirect_info->thunk_delta = delta;"}, {"sha": "33b316795353729a3254671295db829a741b1263", "filename": "gcc/cgraph.h", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -386,11 +386,11 @@ struct GTY(()) cgraph_indirect_call_info\n   HOST_WIDE_INT anc_offset;\n   /* OBJ_TYPE_REF_TOKEN of a polymorphic call (if polymorphic is set).  */\n   HOST_WIDE_INT otr_token;\n+  /* Delta by which must be added to this parameter to compensate for a skipped\n+     this adjusting thunk.  */\n+  HOST_WIDE_INT thunk_delta;\n   /* Type of the object from OBJ_TYPE_REF_OBJECT. */\n   tree otr_type;\n-  /* Delta by which must be added to this parameter.  For polymorphic calls\n-     only.  */\n-  tree thunk_delta;\n   /* Index of the parameter that is called.  */\n   int param_index;\n   /* ECF flags determined from the caller.  */\n@@ -549,8 +549,9 @@ void cgraph_node_remove_callees (struct cgraph_node *node);\n struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,\n \t\t\t\t\tstruct cgraph_node *,\n \t\t\t\t\tgimple, gcov_type, int, int);\n-struct cgraph_edge *cgraph_create_indirect_edge (struct cgraph_node *, gimple, int,\n-\t\t\t\t\t\t gcov_type, int, int);\n+struct cgraph_edge *cgraph_create_indirect_edge (struct cgraph_node *, gimple,\n+\t\t\t\t\t\t int, gcov_type, int, int);\n+struct cgraph_indirect_call_info *cgraph_allocate_init_indirect_info (void);\n struct cgraph_node * cgraph_get_node (const_tree);\n struct cgraph_node * cgraph_get_node_or_alias (const_tree);\n struct cgraph_node * cgraph_node (tree);\n@@ -578,7 +579,8 @@ struct cgraph_node * cgraph_clone_node (struct cgraph_node *, tree, gcov_type, i\n \t\t\t\t\tint, bool, VEC(cgraph_edge_p,heap) *);\n \n void cgraph_redirect_edge_callee (struct cgraph_edge *, struct cgraph_node *);\n-void cgraph_make_edge_direct (struct cgraph_edge *, struct cgraph_node *, tree);\n+void cgraph_make_edge_direct (struct cgraph_edge *, struct cgraph_node *,\n+\t\t\t      HOST_WIDE_INT);\n \n struct cgraph_asm_node *cgraph_add_asm_node (tree);\n "}, {"sha": "36ba75a55ea8fcacb89acac0214b51bc29a8d4fa", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -2168,22 +2168,20 @@ cgraph_redirect_edge_call_stmt_to_callee (struct cgraph_edge *e)\n \t}\n     }\n \n-  if (e->indirect_info && e->indirect_info->thunk_delta\n-      && integer_nonzerop (e->indirect_info->thunk_delta)\n+  if (e->indirect_info &&\n+      e->indirect_info->thunk_delta != 0\n       && (!e->callee->clone.combined_args_to_skip\n \t  || !bitmap_bit_p (e->callee->clone.combined_args_to_skip, 0)))\n     {\n       if (cgraph_dump_file)\n-\t{\n-\t  fprintf (cgraph_dump_file, \"          Thunk delta is \");\n-\t  print_generic_expr (cgraph_dump_file,\n-\t\t\t      e->indirect_info->thunk_delta, 0);\n-\t  fprintf (cgraph_dump_file, \"\\n\");\n-\t}\n+\tfprintf (cgraph_dump_file, \"          Thunk delta is \"\n+\t\t HOST_WIDE_INT_PRINT_DEC \"\\n\", e->indirect_info->thunk_delta);\n       gsi = gsi_for_stmt (e->call_stmt);\n       gsi_computed = true;\n-      gimple_adjust_this_by_delta (&gsi, e->indirect_info->thunk_delta);\n-      e->indirect_info->thunk_delta = NULL_TREE;\n+      gimple_adjust_this_by_delta (&gsi,\n+\t\t\t\t   build_int_cst (sizetype,\n+\t\t\t\t\t       e->indirect_info->thunk_delta));\n+      e->indirect_info->thunk_delta = 0;\n     }\n \n   if (e->callee->clone.combined_args_to_skip)"}, {"sha": "f85a4fff8dc4cf59bf6afceb0cd8fe798b367978", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -1483,7 +1483,7 @@ ipa_make_edge_direct_to_target (struct cgraph_edge *ie, tree target, tree delta)\n     return NULL;\n   ipa_check_create_node_params ();\n \n-  cgraph_make_edge_direct (ie, callee, delta);\n+  cgraph_make_edge_direct (ie, callee, delta ? tree_low_cst (delta, 0) : 0);\n   if (dump_file)\n     {\n       fprintf (dump_file, \"ipa-prop: Discovered %s call to a known target \"\n@@ -2549,7 +2549,6 @@ ipa_write_indirect_edge_info (struct output_block *ob,\n     {\n       lto_output_sleb128_stream (ob->main_stream, ii->otr_token);\n       lto_output_tree (ob, ii->otr_type, true);\n-      lto_output_tree (ob, ii->thunk_delta, true);\n     }\n }\n \n@@ -2572,7 +2571,6 @@ ipa_read_indirect_edge_info (struct lto_input_block *ib,\n     {\n       ii->otr_token = (HOST_WIDE_INT) lto_input_sleb128 (ib);\n       ii->otr_type = lto_input_tree (ib, data_in);\n-      ii->thunk_delta = lto_input_tree (ib, data_in);\n     }\n }\n "}, {"sha": "96697e4ecdcc8f331315ee9ca1849b98ddc77004", "filename": "gcc/lto-cgraph.c", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Flto-cgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Flto-cgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-cgraph.c?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -1605,6 +1605,18 @@ output_cgraph_opt_summary_p (struct cgraph_node *node)\n           || node->clone.combined_args_to_skip);\n }\n \n+/* Output optimization summary for EDGE to OB.  */\n+static void\n+output_edge_opt_summary (struct output_block *ob,\n+\t\t\t struct cgraph_edge *edge)\n+{\n+  if (edge->indirect_info)\n+    lto_output_sleb128_stream (ob->main_stream,\n+\t\t\t       edge->indirect_info->thunk_delta);\n+  else\n+    lto_output_sleb128_stream (ob->main_stream, 0);\n+}\n+\n /* Output optimization summary for NODE to OB.  */\n \n static void\n@@ -1616,6 +1628,7 @@ output_node_opt_summary (struct output_block *ob,\n   struct ipa_replace_map *map;\n   struct bitpack_d bp;\n   int i;\n+  struct cgraph_edge *e;\n \n   lto_output_uleb128_stream (ob->main_stream,\n \t\t\t     bitmap_count_bits (node->clone.args_to_skip));\n@@ -1646,6 +1659,10 @@ output_node_opt_summary (struct output_block *ob,\n       bp_pack_value (&bp, map->ref_p, 1);\n       lto_output_bitpack (&bp);\n     }\n+  for (e = node->callees; e; e = e->next_callee)\n+    output_edge_opt_summary (ob, e);\n+  for (e = node->indirect_calls; e; e = e->next_callee)\n+    output_edge_opt_summary (ob, e);\n }\n \n /* Output optimization summaries stored in callgraph.\n@@ -1680,7 +1697,23 @@ output_cgraph_opt_summary (void)\n   destroy_output_block (ob);\n }\n \n-/* Input optimiation summary of NODE.  */\n+/* Input optimisation summary of EDGE.  */\n+\n+static void\n+input_edge_opt_summary (struct cgraph_edge *edge,\n+\t\t\tstruct lto_input_block *ib_main)\n+{\n+  HOST_WIDE_INT thunk_delta;\n+  thunk_delta = lto_input_sleb128 (ib_main);\n+  if (thunk_delta != 0)\n+    {\n+      gcc_assert (!edge->indirect_info);\n+      edge->indirect_info = cgraph_allocate_init_indirect_info ();\n+      edge->indirect_info->thunk_delta = thunk_delta;\n+    }\n+}\n+\n+/* Input optimisation summary of NODE.  */\n \n static void\n input_node_opt_summary (struct cgraph_node *node,\n@@ -1691,6 +1724,7 @@ input_node_opt_summary (struct cgraph_node *node,\n   int count;\n   int bit;\n   struct bitpack_d bp;\n+  struct cgraph_edge *e;\n \n   count = lto_input_uleb128 (ib_main);\n   if (count)\n@@ -1726,6 +1760,10 @@ input_node_opt_summary (struct cgraph_node *node,\n       map->replace_p = bp_unpack_value (&bp, 1);\n       map->ref_p = bp_unpack_value (&bp, 1);\n     }\n+  for (e = node->callees; e; e = e->next_callee)\n+    input_edge_opt_summary (e, ib_main);\n+  for (e = node->indirect_calls; e; e = e->next_callee)\n+    input_edge_opt_summary (e, ib_main);\n }\n \n /* Read section in file FILE_DATA of length LEN with data DATA.  */"}, {"sha": "86f8e3eaa4cc2da78145a42fd9580c14c5f98370", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -1,3 +1,8 @@\n+2011-01-03  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR tree-optimization/46984\n+\t* g++.dg/ipa/pr46984.C: New test.\n+\n 2011-01-02  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/46408"}, {"sha": "f7bb8409dcd7087b92684bd4b903dec61919314d", "filename": "gcc/testsuite/g++.dg/ipa/pr46984.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr46984.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce47fda3ce6adfe86f725930dedbfb1f775ddd45/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr46984.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fipa%2Fpr46984.C?ref=ce47fda3ce6adfe86f725930dedbfb1f775ddd45", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-O -fipa-cp -fno-early-inlining -flto\" }\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+class A\n+{\n+public:\n+  virtual void foo () {abort();}\n+};\n+\n+class B : public A\n+{\n+public:\n+  int z;\n+  virtual void foo () {abort();}\n+};\n+\n+class C : public A\n+{\n+public:\n+  void *a[32];\n+  unsigned long b;\n+  long c[32];\n+\n+  virtual void foo () {abort();}\n+};\n+\n+class D : public C, public B\n+{\n+public:\n+  D () : C(), B()\n+  {\n+    int i;\n+    for (i = 0; i < 32; i++)\n+      {\n+\ta[i] = (void *) 0;\n+\tc[i] = 0;\n+      }\n+    b = 0xaaaa;\n+  }\n+\n+  virtual void foo ();\n+};\n+\n+void D::foo()\n+{\n+  if (b != 0xaaaa)\n+    abort();\n+}\n+\n+static inline void bar (B &b)\n+{\n+  b.foo ();\n+}\n+\n+int main()\n+{\n+  D d;\n+  bar (d);\n+  return 0;\n+}"}]}