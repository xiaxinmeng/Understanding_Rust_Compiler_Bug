{"sha": "b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjNlYTVkOGVhNjAwZWM2OTZmZmIzZWM0M2JmNjlmNjUxYjA4NTJjNQ==", "commit": {"author": {"name": "Andrew John Hughes", "email": "gnu_andrew@member.fsf.org", "date": "2007-04-16T14:50:03Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "2007-04-16T14:50:03Z"}, "message": "2007-04-16  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n        * javax/management/ObjectName.java:\n        (parse(String)): Catch multiple wildcards,\n        initialise with an empty string (so null isn't\n        appended), and emit comma even when wildcard\n        ends the list.\n        (checkComponents()): Catch newlines.\n        (quote(String)): Handle newlines and quotes\n        correctly.\n\nFrom-SVN: r123873", "tree": {"sha": "d5bceb221c5da831bdd125233d934baf43ceabe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5bceb221c5da831bdd125233d934baf43ceabe1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/comments", "author": {"login": "gnu-andrew", "id": 962817, "node_id": "MDQ6VXNlcjk2MjgxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/962817?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnu-andrew", "html_url": "https://github.com/gnu-andrew", "followers_url": "https://api.github.com/users/gnu-andrew/followers", "following_url": "https://api.github.com/users/gnu-andrew/following{/other_user}", "gists_url": "https://api.github.com/users/gnu-andrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnu-andrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnu-andrew/subscriptions", "organizations_url": "https://api.github.com/users/gnu-andrew/orgs", "repos_url": "https://api.github.com/users/gnu-andrew/repos", "events_url": "https://api.github.com/users/gnu-andrew/events{/privacy}", "received_events_url": "https://api.github.com/users/gnu-andrew/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9cb116cb55521c2e6cd77d6564d1c13f063c38ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb116cb55521c2e6cd77d6564d1c13f063c38ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb116cb55521c2e6cd77d6564d1c13f063c38ef"}], "stats": {"total": 117, "additions": 84, "deletions": 33}, "files": [{"sha": "84f4c6833d634e1067bd49c0ff4085c0d3368b44", "filename": "libjava/classpath/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2FChangeLog?ref=b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "patch": "@@ -1,3 +1,14 @@\n+2007-04-16  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* javax/management/ObjectName.java:\n+\t(parse(String)): Catch multiple wildcards,\n+\tinitialise with an empty string (so null isn't\n+\tappended), and emit comma even when wildcard\n+\tends the list.\n+\t(checkComponents()): Catch newlines.\n+\t(quote(String)): Handle newlines and quotes\n+\tcorrectly.\n+\n 2007-04-16  Andrew Haley  <aph@redhat.com>\n \n \t* org/omg/IOP/TaggedComponentHelper.java (read): Use"}, {"sha": "a3f30efffb42df307fa8bc215a2bf98a01238324", "filename": "libjava/classpath/javax/management/ObjectName.java", "status": "modified", "additions": 73, "deletions": 33, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Fjavax%2Fmanagement%2FObjectName.java?ref=b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5", "patch": "@@ -104,6 +104,13 @@\n \n   private static final long serialVersionUID = 1081892073854801359L;\n \n+  /**\n+   * The wildcard {@link ObjectName} {@code \"*:*\"}\n+   *\n+   * @since 1.6\n+   */\n+  public static final ObjectName WILDCARD;\n+\n   /**\n    * The domain of the name.\n    */\n@@ -129,6 +136,23 @@\n    */\n   private transient MBeanServer server;\n \n+  /**\n+   * Static initializer to set up the wildcard.\n+   */\n+  static\n+  {\n+    try\n+      {\n+\tWILDCARD = new ObjectName(\"\");\n+      }\n+    catch (MalformedObjectNameException e)\n+      {\n+\tthrow (InternalError) (new InternalError(\"A problem occurred \" +\n+\t\t\t\t\t\t \"initializing the ObjectName \" +\n+\t\t\t\t\t\t \"wildcard.\").initCause(e));\n+      }\n+  }\n+\n   /**\n    * Constructs an {@link ObjectName} instance from the given string,\n    * which should be of the form\n@@ -159,7 +183,6 @@ public ObjectName(String name)\n    * Parse the name in the same form as the constructor.  Used by\n    * readObject().\n    */\n-\n   private void parse(String name)\n     throws MalformedObjectNameException\n   {\n@@ -169,32 +192,37 @@ private void parse(String name)\n     domain = name.substring(0, domainSep);\n     String rest = name.substring(domainSep + 1);\n     properties = new TreeMap<String,String>();\n-    if (rest.equals(\"*\"))\n-      propertyPattern = true;\n-    else\n+    String[] pairs = rest.split(\",\");\n+    if (pairs.length == 0 && !isPattern())\n+      throw new MalformedObjectNameException(\"A name that is not a \" +\n+\t\t\t\t\t     \"pattern must contain at \" +\n+\t\t\t\t\t     \"least one key-value pair.\");\n+    propertyListString = \"\";\n+    for (int a = 0; a < pairs.length; ++a)\n       {\n-\tif (rest.endsWith(\",*\"))\n+\tif (pairs[a].equals(\"*\"))\n \t  {\n+\t    if (propertyPattern)\n+\t      throw new MalformedObjectNameException(\"Multiple wildcards \" +\n+\t\t\t\t\t\t     \"in properties.\");\n \t    propertyPattern = true;\n-\t    propertyListString = rest.substring(0, rest.length() - 2);\n+\t    continue;\n \t  }\n-\telse\n-\t  propertyListString = rest;\n-\tString[] pairs = propertyListString.split(\",\");\n-\tif (pairs.length == 0 && !isPattern())\n-\t  throw new MalformedObjectNameException(\"A name that is not a \" +\n-\t\t\t\t\t\t \"pattern must contain at \" +\n-\t\t\t\t\t\t \"least one key-value pair.\");\n-\tfor (int a = 0; a < pairs.length; ++a)\n-\t  {\n-\t    int sep = pairs[a].indexOf('=');\n-\t    String key = pairs[a].substring(0, sep);\n-\t    if (properties.containsKey(key))\n-\t      throw new MalformedObjectNameException(\"The same key occurs \" +\n-\t\t\t\t\t\t     \"more than once.\");\n-\t    properties.put(key, pairs[a].substring(sep + 1));\n-\t  }\t\n+\tint sep = pairs[a].indexOf('=');\n+\tif (sep == -1)\n+\t  throw new MalformedObjectNameException(\"A key must be \" +\n+\t\t\t\t\t\t \"followed by a value.\");\n+\tString key = pairs[a].substring(0, sep);\n+\tif (properties.containsKey(key))\n+\t  throw new MalformedObjectNameException(\"The same key occurs \" +\n+\t\t\t\t\t\t \"more than once.\");\n+\tString value = pairs[a].substring(sep+1);\n+\tproperties.put(key, value);\n+\tpropertyListString += key + \"=\" + value + \",\";\n       }\n+    if (propertyListString.length() > 0)\n+      propertyListString =\n+\tpropertyListString.substring(0, propertyListString.length() - 1);\n     checkComponents();\n   }\n \n@@ -263,7 +291,7 @@ private void checkComponents()\n     if (domain.indexOf('\\n') != -1)\n       throw new MalformedObjectNameException(\"The domain includes a newline \" +\n \t\t\t\t\t     \"character.\");\n-    char[] chars = new char[] { ':', ',', '*', '?', '=' };\n+    char[] chars = new char[] { '\\n', ':', ',', '*', '?', '=' };\n     Iterator i = properties.entrySet().iterator();\n     while (i.hasNext())\n       {\n@@ -284,8 +312,9 @@ private void checkComponents()\n \t      }\n \t    catch (IllegalArgumentException e)\n \t      {\n-\t\tthrow new MalformedObjectNameException(\"The quoted value is \" +\n-\t\t\t\t\t\t       \"invalid.\");\n+\t\tthrow (MalformedObjectNameException)\n+\t\t  new MalformedObjectNameException(\"The quoted value is \" +\n+\t\t\t\t\t\t   \"invalid.\").initCause(e);\n \t      }\n \t  }\n \telse if (quote != -1)\n@@ -763,10 +792,12 @@ public String toString()\n \n \n   /**\n-   * Serialization methods.  The serialized form is the same as the\n-   * string parsed by the constructor.\n+   * Serialize this {@link ObjectName}.  The serialized\n+   * form is the same as the string parsed by the constructor.\n+   *\n+   * @param out the output stream to write to.\n+   * @throws IOException if an I/O error occurs.\n    */\n-\n   private void writeObject(ObjectOutputStream out)\n     throws IOException\n   {\n@@ -777,14 +808,21 @@ private void writeObject(ObjectOutputStream out)\n     buffer.append(properties);\n     if (isPropertyPattern())\n       {\n-\tif (properties.length() == 0)\n-\t  buffer.append(\"*\");\n-\telse\n-\t  buffer.append(\",*\");\n+       if (properties.length() == 0)\n+         buffer.append(\"*\");\n+       else\n+         buffer.append(\",*\");\n       }\n     out.writeObject(buffer.toString());\n   }\n \n+  /**\n+   * Reads the serialized form, which is that used\n+   * by the constructor.\n+   *\n+   * @param in the input stream to read from.\n+   * @throws IOException if an I/O error occurs.\n+   */\n   private void readObject(ObjectInputStream in) \n     throws IOException, ClassNotFoundException\n    {\n@@ -833,10 +871,12 @@ public static String unquote(String q)\n \t  {\n \t    n = q.charAt(++a);\n \t    if (n != '\"' && n != '?' && n != '*' &&\n-\t\tn != '\\n' && n != '\\\\')\n+\t\tn != 'n' && n != '\\\\')\n \t      throw new IllegalArgumentException(\"Illegal escaped character: \"\n \t\t\t\t\t\t + n);\n \t  }\n+\telse if (n == '\"' || n == '\\n') \n+\t  throw new IllegalArgumentException(\"Illegal character: \" + n);\n \tbuilder.append(n);\n       }\n "}, {"sha": "5bbfcff66021a787bcd15b9b5558854da602ffa5", "filename": "libjava/classpath/lib/javax/management/ObjectName.class", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fclasspath%2Flib%2Fjavax%2Fmanagement%2FObjectName.class?ref=b3ea5d8ea600ec696ffb3ec43bf69f651b0852c5"}]}