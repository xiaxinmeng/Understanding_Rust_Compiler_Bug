{"sha": "56c667474e64c95d8a69592d54b40db9f6ba29d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTZjNjY3NDc0ZTY0Yzk1ZDhhNjk1OTJkNTRiNDBkYjlmNmJhMjlkMQ==", "commit": {"author": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-07T06:19:22Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "1995-04-07T06:19:22Z"}, "message": "* cppalloc.c (xcalloc):  Re-implement using calloc, rather than malloc+bzero.\n\nFrom-SVN: r9319", "tree": {"sha": "622e4cfaa55688a107b4c8e1108af0298ec9754b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/622e4cfaa55688a107b4c8e1108af0298ec9754b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56c667474e64c95d8a69592d54b40db9f6ba29d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c667474e64c95d8a69592d54b40db9f6ba29d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c667474e64c95d8a69592d54b40db9f6ba29d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c667474e64c95d8a69592d54b40db9f6ba29d1/comments", "author": null, "committer": null, "parents": [{"sha": "746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/746a9efa80d9d3fba8bee9482da7b7e0e3d428e5"}], "stats": {"total": 33, "additions": 7, "deletions": 26}, "files": [{"sha": "2287dbcb4c4330835cffe58db73863bb44c8366f", "filename": "gcc/cppalloc.c", "status": "modified", "additions": 7, "deletions": 26, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56c667474e64c95d8a69592d54b40db9f6ba29d1/gcc%2Fcppalloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56c667474e64c95d8a69592d54b40db9f6ba29d1/gcc%2Fcppalloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppalloc.c?ref=56c667474e64c95d8a69592d54b40db9f6ba29d1", "patch": "@@ -45,37 +45,18 @@ xrealloc (old, size)\n      unsigned size;\n {\n   register char *ptr = (char *) realloc (old, size);\n-  if (ptr != 0) return (ptr);\n-  memory_full ();\n-  /*NOTREACHED*/\n-  return 0;\n+  if (ptr == 0)\n+    memory_full ();\n+  return ptr;\n }\n \n char *\n xcalloc (number, size)\n      unsigned number, size;\n {\n   register unsigned total = number * size;\n-  register char *ptr = (char *) malloc (total);\n-  if (ptr != 0) {\n-    if (total > 100)\n-      bzero (ptr, total);\n-    else {\n-      /* It's not too long, so loop, zeroing by longs.\n-\t It must be safe because malloc values are always well aligned.  */\n-      register long *zp = (long *) ptr;\n-      register long *zl = (long *) (ptr + total - 4);\n-      register int i = total - 4;\n-      while (zp < zl)\n-\t*zp++ = 0;\n-      if (i < 0)\n-\ti = 0;\n-      while (i < total)\n-\tptr[i++] = 0;\n-    }\n-    return ptr;\n-  }\n-  memory_full ();\n-  /*NOTREACHED*/\n-  return 0;\n+  register char *ptr = (char *) calloc (number, size);\n+  if (ptr == 0)\n+    memory_full ();\n+  return ptr;\n }"}]}