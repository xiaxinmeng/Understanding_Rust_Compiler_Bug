{"sha": "1807e07825a86916bbfddca470708c5a8f613612", "node_id": "C_kwDOANBUbNoAKDE4MDdlMDc4MjVhODY5MTZiYmZkZGNhNDcwNzA4YzVhOGY2MTM2MTI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-10T12:03:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-10T15:40:22Z"}, "message": "libstdc++: Add <syncstream> declarations to <iosfwd> [PR105284]\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/105284\n\t* include/std/iosfwd: Add declarations for <synstream> class\n\ttemplates and typedefs.\n\t* include/std/syncstream (basic_syncbuf, basic_osyncstream):\n\tRemove default template arguments.\n\t* testsuite/27_io/headers/iosfwd/synopsis.cc: New test.\n\t* testsuite/27_io/headers/iosfwd/types.cc: New test.", "tree": {"sha": "6112d59575206a018ff9f04894f0991b30e530f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6112d59575206a018ff9f04894f0991b30e530f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1807e07825a86916bbfddca470708c5a8f613612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807e07825a86916bbfddca470708c5a8f613612", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1807e07825a86916bbfddca470708c5a8f613612", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1807e07825a86916bbfddca470708c5a8f613612/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "098f02aa154b308111cc1f520a577f5bb5f08377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/098f02aa154b308111cc1f520a577f5bb5f08377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/098f02aa154b308111cc1f520a577f5bb5f08377"}], "stats": {"total": 357, "additions": 353, "deletions": 4}, "files": [{"sha": "c8c67c86c3bc7c9ef4993d4c882050deda61a25a", "filename": "libstdc++-v3/include/std/iosfwd", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fiosfwd?ref=1807e07825a86916bbfddca470708c5a8f613612", "patch": "@@ -207,6 +207,24 @@ _GLIBCXX_END_NAMESPACE_CXX11\n   /// Class for @c wchar_t mixed input and output file streams.\n   typedef basic_fstream<wchar_t> \twfstream;\n #endif\n+\n+#if __cplusplus >= 202002L && _GLIBCXX_USE_CXX11_ABI\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+           typename _Allocator = allocator<_CharT>>\n+    class basic_syncbuf;\n+  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n+           typename _Allocator = allocator<_CharT>>\n+    class basic_osyncstream;\n+\n+  using syncbuf = basic_syncbuf<char>;\n+  using osyncstream = basic_osyncstream<char>;\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  using wsyncbuf = basic_syncbuf<wchar_t>;\n+  using wosyncstream = basic_osyncstream<wchar_t>;\n+#endif\n+#endif // C++20 && CXX11_ABI\n+\n   /** @}  */\n \n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "7a4f731ddd91047010b5ad9c3cf1b6cd43acb7b2", "filename": "libstdc++-v3/include/std/syncstream", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsyncstream?ref=1807e07825a86916bbfddca470708c5a8f613612", "patch": "@@ -50,8 +50,7 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  template<typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t    typename _Alloc = allocator<_CharT>>\n+  template<typename _CharT, typename _Traits, typename _Alloc>\n     class basic_syncbuf : public __syncbuf_base<_CharT, _Traits>\n     {\n     public:\n@@ -241,8 +240,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       __mutex _M_mtx;\n     };\n \n-  template <typename _CharT, typename _Traits = char_traits<_CharT>,\n-\t    typename _Alloc = allocator<_CharT>>\n+  template <typename _CharT, typename _Traits, typename _Alloc>\n     class basic_osyncstream : public basic_ostream<_CharT, _Traits>\n     {\n       using __ostream_type = basic_ostream<_CharT, _Traits>;"}, {"sha": "48f733bf28aa8edefa2f98f6acb6639445c1a440", "filename": "libstdc++-v3/testsuite/27_io/headers/iosfwd/synopsis.cc", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Fsynopsis.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Fsynopsis.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Fsynopsis.cc?ref=1807e07825a86916bbfddca470708c5a8f613612", "patch": "@@ -0,0 +1,119 @@\n+// { dg-do compile }\n+\n+#include <iosfwd>\n+\n+namespace std\n+{\n+  // [iosfwd.syn]\n+\n+  template<class charT> struct char_traits;\n+  template<> struct char_traits<char>;\n+#if __cplusplus >= 202002L\n+  template<> struct char_traits<char8_t>;\n+#endif\n+#if __cplusplus >= 201103L\n+  template<> struct char_traits<char16_t>;\n+  template<> struct char_traits<char32_t>;\n+#endif\n+  template<> struct char_traits<wchar_t>;\n+\n+  template<class T> class allocator;\n+\n+  template<class charT, class traits>\n+    class basic_ios;\n+  template<class charT, class traits>\n+    class basic_streambuf;\n+  template<class charT, class traits>\n+    class basic_istream;\n+  template<class charT, class traits>\n+    class basic_ostream;\n+  template<class charT, class traits>\n+    class basic_iostream;\n+\n+_GLIBCXX_BEGIN_NAMESPACE_CXX11\n+  template<class charT, class traits, class Allocator>\n+    class basic_stringbuf;\n+  template<class charT, class traits, class Allocator>\n+    class basic_istringstream;\n+  template<class charT, class traits, class Allocator>\n+    class basic_ostringstream;\n+  template<class charT, class traits, class Allocator>\n+    class basic_stringstream;\n+_GLIBCXX_END_NAMESPACE_CXX11\n+\n+  template<class charT, class traits>\n+    class basic_filebuf;\n+  template<class charT, class traits>\n+    class basic_ifstream;\n+  template<class charT, class traits>\n+    class basic_ofstream;\n+  template<class charT, class traits>\n+    class basic_fstream;\n+\n+#if __cplusplus >= 202002L && _GLIBCXX_USE_CXX11_ABI\n+  template<class charT, class traits, class Allocator>\n+    class basic_syncbuf;\n+  template<class charT, class traits, class Allocator>\n+    class basic_osyncstream;\n+#endif\n+\n+  template<class charT, class traits>\n+    class istreambuf_iterator;\n+  template<class charT, class traits>\n+    class ostreambuf_iterator;\n+\n+  typedef basic_ios<char>    ios;\n+  typedef basic_ios<wchar_t> wios;\n+\n+  typedef basic_streambuf<char> streambuf;\n+  typedef basic_istream<char>   istream;\n+  typedef basic_ostream<char>   ostream;\n+  typedef basic_iostream<char>  iostream;\n+\n+  typedef basic_stringbuf<char>     stringbuf;\n+  typedef basic_istringstream<char> istringstream;\n+  typedef basic_ostringstream<char> ostringstream;\n+  typedef basic_stringstream<char>  stringstream;\n+\n+\n+  typedef basic_filebuf<char>  filebuf;\n+  typedef basic_ifstream<char> ifstream;\n+  typedef basic_ofstream<char> ofstream;\n+  typedef basic_fstream<char>  fstream;\n+\n+#if __cplusplus >= 202002L && _GLIBCXX_USE_CXX11_ABI\n+  typedef basic_syncbuf<char>     syncbuf;\n+  typedef basic_osyncstream<char> osyncstream;\n+#endif\n+\n+  typedef basic_streambuf<wchar_t> wstreambuf;\n+  typedef basic_istream<wchar_t>   wistream;\n+  typedef basic_ostream<wchar_t>   wostream;\n+  typedef basic_iostream<wchar_t>  wiostream;\n+\n+  typedef basic_stringbuf<wchar_t>     wstringbuf;\n+  typedef basic_istringstream<wchar_t> wistringstream;\n+  typedef basic_ostringstream<wchar_t> wostringstream;\n+  typedef basic_stringstream<wchar_t>  wstringstream;\n+\n+  typedef basic_filebuf<wchar_t>  wfilebuf;\n+  typedef basic_ifstream<wchar_t> wifstream;\n+  typedef basic_ofstream<wchar_t> wofstream;\n+  typedef basic_fstream<wchar_t>  wfstream;\n+\n+#if __cplusplus >= 202002L\n+  typedef basic_syncbuf<wchar_t>     wsyncbuf;\n+  typedef basic_osyncstream<wchar_t> wosyncstream;\n+#endif\n+\n+  template<class state> class fpos;\n+  typedef fpos<std::mbstate_t> streampos;\n+  typedef fpos<std::mbstate_t> wstreampos;\n+#if __cplusplus >= 202002L\n+  typedef fpos<std::mbstate_t> u8streampos;\n+#endif\n+#if __cplusplus >= 201103L\n+  typedef fpos<std::mbstate_t> u16streampos;\n+  typedef fpos<std::mbstate_t> u32streampos;\n+#endif\n+}"}, {"sha": "e2c9c9b8dfab6ce364f0ff8e6423eb5b28fd3aa7", "filename": "libstdc++-v3/testsuite/27_io/headers/iosfwd/types.cc", "status": "added", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1807e07825a86916bbfddca470708c5a8f613612/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fheaders%2Fiosfwd%2Ftypes.cc?ref=1807e07825a86916bbfddca470708c5a8f613612", "patch": "@@ -0,0 +1,214 @@\n+// { dg-do compile { target c++11 } }\n+\n+#include <iosfwd>\n+\n+template<class, class> struct Same { static constexpr bool value = false; };\n+template<class T> struct Same<T, T> { static constexpr bool value = true; };\n+\n+template<class T> using Traits = std::char_traits<T>;\n+template<class T> using Alloc = std::allocator<T>;\n+\n+using std::basic_ios;\n+\n+static_assert(Same<basic_ios<char>,\n+\t\t   basic_ios<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_ios<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_ios<wchar_t>,\n+\t\t   basic_ios<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_ios<wchar_t> has the correct default template argument\");\n+\n+using std::basic_streambuf;\n+\n+static_assert(Same<basic_streambuf<char>,\n+\t\t   basic_streambuf<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_streambuf<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_streambuf<wchar_t>,\n+\t\t   basic_streambuf<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_streambuf<wchar_t> has the correct default template argument\");\n+\n+using std::basic_istream;\n+\n+static_assert(Same<basic_istream<char>,\n+\t\t   basic_istream<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_istream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_istream<wchar_t>,\n+\t\t   basic_istream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_istream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_ostream;\n+\n+static_assert(Same<basic_ostream<char>,\n+\t\t   basic_ostream<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_ostream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_ostream<wchar_t>,\n+\t\t   basic_ostream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_ostream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_iostream;\n+\n+static_assert(Same<basic_iostream<char>,\n+\t\t   basic_iostream<char, Traits<char>>>::value,\n+    \"std::basic_iostream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_iostream<wchar_t>,\n+\t\t   basic_iostream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_iostream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_stringbuf;\n+\n+static_assert(Same<basic_stringbuf<char>,\n+\t\t   basic_stringbuf<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_stringbuf<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_stringbuf<wchar_t>,\n+\t\t   basic_stringbuf<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_stringbuf<wchar_t> has the correct default template argument\");\n+\n+using std::basic_istringstream;\n+\n+static_assert(Same<basic_istringstream<char>,\n+\t\t   basic_istringstream<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_istringstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_istringstream<wchar_t>,\n+\t\t   basic_istringstream<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_istringstream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_ostringstream;\n+\n+static_assert(Same<basic_ostringstream<char>,\n+\t\t   basic_ostringstream<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_ostringstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_ostringstream<wchar_t>,\n+\t\t   basic_ostringstream<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_ostringstream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_stringstream;\n+\n+static_assert(Same<basic_stringstream<char>,\n+\t\t   basic_stringstream<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_stringstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_stringstream<wchar_t>,\n+\t\t   basic_stringstream<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_stringstream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_filebuf;\n+\n+static_assert(Same<basic_filebuf<char>,\n+\t\t   basic_filebuf<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_filebuf<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_filebuf<wchar_t>,\n+\t\t   basic_filebuf<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_filebuf<wchar_t> has the correct default template argument\");\n+\n+using std::basic_ifstream;\n+\n+static_assert(Same<basic_ifstream<char>,\n+\t\t   basic_ifstream<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_ifstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_ifstream<wchar_t>,\n+\t\t   basic_ifstream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_ifstream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_ofstream;\n+\n+static_assert(Same<basic_ofstream<char>,\n+\t\t   basic_ofstream<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_ofstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_ofstream<wchar_t>,\n+\t\t   basic_ofstream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_ofstream<wchar_t> has the correct default template argument\");\n+\n+using std::basic_fstream;\n+\n+static_assert(Same<basic_fstream<char>,\n+\t\t   basic_fstream<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::basic_fstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_fstream<wchar_t>,\n+\t\t   basic_fstream<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_fstream<wchar_t> has the correct default template argument\");\n+\n+#if __cplusplus >= 202002L && _GLIBCXX_USE_CXX11_ABI\n+using std::basic_syncbuf;\n+\n+static_assert(Same<basic_syncbuf<char>,\n+\t\t   basic_syncbuf<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_syncbuf<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_syncbuf<wchar_t>,\n+\t\t   basic_syncbuf<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_syncbuf<wchar_t> has the correct default template argument\");\n+\n+using std::basic_osyncstream;\n+\n+static_assert(Same<basic_osyncstream<char>,\n+\t\t   basic_osyncstream<char, Traits<char>, Alloc<char>>\n+\t\t   >::value,\n+    \"std::basic_osyncstream<char> has the correct default template argument\");\n+\n+static_assert(Same<basic_osyncstream<wchar_t>,\n+\t\t   basic_osyncstream<wchar_t, Traits<wchar_t>, Alloc<wchar_t>>\n+\t\t   >::value,\n+    \"std::basic_osyncstream<wchar_t> has the correct default template argument\");\n+#endif\n+\n+using std::istreambuf_iterator;\n+\n+static_assert(Same<istreambuf_iterator<char>,\n+\t\t   istreambuf_iterator<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::istreambuf_iterator<char> has the correct default template argument\");\n+\n+static_assert(Same<istreambuf_iterator<wchar_t>,\n+\t\t   istreambuf_iterator<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::istreambuf_iterator<wchar_t> has the correct default template argument\");\n+\n+using std::ostreambuf_iterator;\n+\n+static_assert(Same<ostreambuf_iterator<char>,\n+\t\t   ostreambuf_iterator<char, Traits<char>>\n+\t\t   >::value,\n+    \"std::ostreambuf_iterator<char> has the correct default template argument\");\n+\n+static_assert(Same<ostreambuf_iterator<wchar_t>,\n+\t\t   ostreambuf_iterator<wchar_t, Traits<wchar_t>>\n+\t\t   >::value,\n+    \"std::ostreambuf_iterator<wchar_t> has the correct default template argument\");"}]}