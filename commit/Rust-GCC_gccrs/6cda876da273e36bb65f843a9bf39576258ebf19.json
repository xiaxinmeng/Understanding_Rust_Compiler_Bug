{"sha": "6cda876da273e36bb65f843a9bf39576258ebf19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNkYTg3NmRhMjczZTM2YmI2NWY4NDNhOWJmMzk1NzYyNThlYmYxOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-15T12:07:09Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-15T12:07:09Z"}, "message": "PR libstdc++/84159 fix appending strings to paths\n\nThe path::operator/=(const Source&) and path::append overloads were\nstill following the semantics of the Filesystem TS not C++17. Only\nthe path::operator/=(const path&) overload was correct.\n\nThis change adds more tests for path::operator/=(const path&) and adds\nnew tests to verify that the other append operations have equivalent\nbehaviour.\n\n\tPR libstdc++/84159\n\t* include/bits/fs_path.h (path::operator/=, path::append): Construct\n\ttemporary path before calling _M_append.\n\t(path::_M_append): Change parameter to path and implement C++17\n\tsemantics.\n\t* testsuite/27_io/filesystem/path/append/path.cc: Add helper function\n\tand more examples from the standard.\n\t* testsuite/27_io/filesystem/path/append/source.cc: New.\n\t* testsuite/27_io/filesystem/path/decompose/filename.cc: Add comment.\n\t* testsuite/27_io/filesystem/path/nonmember/append.cc: New.\n\nFrom-SVN: r260255", "tree": {"sha": "7d4b3f2e2b2fc7b7fb1c963aa9aabb5b8659f94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d4b3f2e2b2fc7b7fb1c963aa9aabb5b8659f94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cda876da273e36bb65f843a9bf39576258ebf19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cda876da273e36bb65f843a9bf39576258ebf19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cda876da273e36bb65f843a9bf39576258ebf19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cda876da273e36bb65f843a9bf39576258ebf19/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a5135fe3cfc77a2f7ea8d2fc55a346ed711789", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4a5135fe3cfc77a2f7ea8d2fc55a346ed711789", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4a5135fe3cfc77a2f7ea8d2fc55a346ed711789"}], "stats": {"total": 318, "additions": 268, "deletions": 50}, "files": [{"sha": "22eeaa3da72d17843a3cfc5cbba3556c8af2d67d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -1,5 +1,16 @@\n 2018-05-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/84159\n+\t* include/bits/fs_path.h (path::operator/=, path::append): Construct\n+\ttemporary path before calling _M_append.\n+\t(path::_M_append): Change parameter to path and implement C++17\n+\tsemantics.\n+\t* testsuite/27_io/filesystem/path/append/path.cc: Add helper function\n+\tand more examples from the standard.\n+\t* testsuite/27_io/filesystem/path/append/source.cc: New.\n+\t* testsuite/27_io/filesystem/path/decompose/filename.cc: Add comment.\n+\t* testsuite/27_io/filesystem/path/nonmember/append.cc: New.\n+\n \t* include/std/variant (__gen_vtable_impl::__visit_invoke): Qualify\n \t__invoke to prevent ADL.\n "}, {"sha": "53bf237b54788b929d901866ade87cfe0a02fb22", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -265,20 +265,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     template <class _Source>\n       _Path<_Source>&\n       operator/=(_Source const& __source)\n-      { return append(__source); }\n+      { return _M_append(path(__source)); }\n \n     template<typename _Source>\n       _Path<_Source>&\n       append(_Source const& __source)\n-      {\n-\treturn _M_append(_S_convert(_S_range_begin(__source),\n-\t\t\t\t    _S_range_end(__source)));\n-      }\n+      { return _M_append(path(__source)); }\n \n     template<typename _InputIterator>\n       _Path<_InputIterator, _InputIterator>&\n       append(_InputIterator __first, _InputIterator __last)\n-      { return _M_append(_S_convert(__first, __last)); }\n+      { return _M_append(path(__first, __last)); }\n \n     // concatenation\n \n@@ -406,17 +403,17 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n     enum class _Split { _Stem, _Extension };\n \n-    path& _M_append(string_type&& __str)\n+    path&\n+    _M_append(path __p)\n     {\n+      if (__p.is_absolute())\n+\toperator=(std::move(__p));\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n-      operator/=(path(std::move(__str)));\n-#else\n-      if (!_M_pathname.empty() && !_S_is_dir_sep(_M_pathname.back())\n-\t  && (__str.empty() || !_S_is_dir_sep(__str.front())))\n-\t_M_pathname += preferred_separator;\n-      _M_pathname += __str;\n-      _M_split_cmpts();\n+      else if (__p.has_root_name() && __p.root_name() != root_name())\n+\toperator=(std::move(__p));\n #endif\n+      else\n+\toperator/=(const_cast<const path&>(__p));\n       return *this;\n     }\n "}, {"sha": "0330bcf6c88ccb40e50ff2bc151dd996613a34c3", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/path.cc", "status": "modified", "additions": 55, "deletions": 36, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fpath.cc?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -19,7 +19,7 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n-// 30.10.7.4.3 path appends [fs.path.append]\n+// C++17 30.10.8.4.3 path appends [fs.path.append]\n \n #include <filesystem>\n #include <testsuite_hooks.h>\n@@ -28,56 +28,75 @@\n using std::filesystem::path;\n using __gnu_test::compare_paths;\n \n+// path::operator/=(const path&)\n+\n+path append(path l, const path& r)\n+{\n+  l /= r;\n+  return l;\n+}\n+\n void\n test01()\n {\n-  const path p(\"/foo/bar\");\n-\n-  path pp = p;\n-  pp /= p;\n-  compare_paths( pp, p );\n+  compare_paths( append(\"/foo/bar\", \"/foo/\"), \"/foo/\" );\n+\n+#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  compare_paths( append(\"baz\", \"baz\"), \"baz/baz\" );\n+#else\n+  compare_paths( append(\"baz\", \"baz\"), \"baz\\\\baz\" );\n+#endif\n+  compare_paths( append(\"baz/\", \"baz\"), \"baz/baz\" );\n+  compare_paths( append(\"baz\",  \"/foo/bar\"), \"/foo/bar\" );\n+  compare_paths( append(\"baz/\", \"/foo/bar\"), \"/foo/bar\" );\n+\n+  VERIFY( append(\"\", \"\").empty() );\n+  VERIFY( !append(\"\", \"rel\").is_absolute() );\n+\n+  compare_paths( append(\"dir/\", \"/file\"), \"/file\" );\n+  compare_paths( append(\"dir/\", \"file\"),  \"dir/file\" );\n+}\n \n-  path q(\"baz\");\n+void\n+test02()\n+{\n+  // C++17 [fs.path.append] p4\n+#ifndef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+  compare_paths( append(\"//host\", \"foo\"),  \"//host/foo\" );\n \n-  path qq = q;\n-  qq /= q;\n-  compare_paths( qq, \"baz/baz\" );\n+  compare_paths( append(\"//host/\", \"foo\"),  \"//host/foo\" );\n \n-  q /= p;\n-  compare_paths( q, p );\n+  // path(\"foo\") / \"\"; // yields \"foo/\"\n+  compare_paths( append(\"foo\", \"\"), \"foo/\" );\n \n-  path r = \"\";\n-  r /= path();\n-  VERIFY( r.empty() );\n+  // path(\"foo\") / \"/bar\"; // yields \"/bar\"\n+  compare_paths( append(\"foo\", \"/bar\"), \"/bar\" );\n+#else\n+  compare_paths( append(\"//host\", \"foo\"),  \"//host\\\\foo\" );\n \n-  r /= path(\"rel\");\n-  VERIFY( !r.is_absolute() );\n+  compare_paths( append(\"//host/\", \"foo\"), \"//host/foo\" );\n \n-  path s = \"dir/\";\n-  s /= path(\"/file\");\n-  compare_paths( s, \"/file\" );\n+  // path(\"foo\") / \"\"; // yields \"foo/\"\n+  compare_paths( append(\"foo\", \"\"), \"foo\\\\\" );\n \n-  s = \"dir/\";\n-  s /= path(\"file\");\n-  compare_paths( s, \"dir/file\" );\n-}\n+  // path(\"foo\") / \"/bar\"; // yields \"/bar\"\n+  compare_paths( append(\"foo\", \"/bar\"),  \"/bar\" );\n \n-void\n-test02()\n-{\n-  // C++17 [fs.path.append] p4\n+  // path(\"foo\") / \"c:/bar\"; // yields \"c:/bar\"\n+  compare_paths( append(\"foo\", \"c:/bar\"),  \"c:/bar\" );\n \n-  path p = path(\"//host\") / \"foo\";\n-  compare_paths( p, \"//host/foo\" );\n+  // path(\"foo\") / \"c:\"; // yields \"c:\"\n+  compare_paths( append(\"foo\", \"c:\"),  \"c:\" );\n \n-  path pp = path(\"//host/\") / \"foo\";\n-  compare_paths( pp, \"//host/foo\" );\n+  // path(\"c:\") / \"\"; // yields \"c:\"\n+  compare_paths( append(\"c:\", \"\"),  \"c:\" );\n \n-  path q = path(\"foo\") / \"\";\n-  compare_paths( q, \"foo/\" );\n+  // path(\"c:foo\") / \"/bar\"; // yields \"c:/bar\"\n+  compare_paths( append(\"c:foo\", \"/bar\"),  \"c:/bar\" );\n \n-  path qq = path(\"foo\") / \"/bar\";\n-  compare_paths( qq, \"/bar\" );\n+  // path(\"c:foo\") / \"c:bar\"; // yields \"c:foo/bar\"\n+  compare_paths( append(\"foo\", \"c:\\\\bar\"),  \"c:\\\\bar\" );\n+#endif\n }\n \n int"}, {"sha": "316d6313b0afea7739adf63f77833c116d7857d8", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/append/source.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fappend%2Fsource.cc?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -0,0 +1,106 @@\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.8.4.3 path appends [fs.path.append]\n+\n+#include <filesystem>\n+#include <string_view>\n+#include <testsuite_fs.h>\n+#include <testsuite_iterators.h>\n+\n+using std::filesystem::path;\n+using __gnu_test::compare_paths;\n+\n+// path::operator/=(const Source& source)\n+// path::append(const Source& source)\n+// Equivalent to: return operator/=(path(source));\n+\n+// path::append(InputIterator first, InputIterator last)\n+// Equivalent to: return operator/=(path(first, last));\n+\n+void test(const path& p, std::string_view s)\n+{\n+  path expected = p;\n+  expected /= path(s);\n+\n+  path oper = p;\n+  oper /= s;\n+\n+  path func = p;\n+  func.append(s);\n+\n+  __gnu_test::test_container<const char, __gnu_test::input_iterator_wrapper>\n+    input_range(s.begin(), s.end());\n+  path range = p;\n+  range.append(input_range.begin(), input_range.end());\n+\n+  compare_paths( oper, expected );\n+  compare_paths( func, expected );\n+  compare_paths( range, expected );\n+}\n+\n+void\n+test01()\n+{\n+  test( \"/foo/bar\", \"/foo/\" );\n+\n+  test( \"baz\", \"baz\" );\n+  test( \"baz/\", \"baz\" );\n+  test( \"baz\", \"/foo/bar\" );\n+  test( \"baz/\", \"/foo/bar\" );\n+\n+  test( \"\", \"\" );\n+  test( \"\", \"rel\" );\n+\n+  test( \"dir/\", \"/file\" );\n+  test( \"dir/\", \"file\" );\n+}\n+\n+void\n+test02()\n+{\n+  // C++17 [fs.path.append] p4\n+  test( \"//host\", \"foo\" );\n+  test( \"//host/\", \"foo\" );\n+  test( \"foo\", \"\" );\n+  test( \"foo\", \"/bar\" );\n+  test( \"foo\", \"c:/bar\" );\n+  test( \"foo\", \"c:\" );\n+  test( \"c:\", \"\" );\n+  test( \"c:foo\", \"/bar\" );\n+  test( \"foo\", \"c:\\\\bar\" );\n+}\n+\n+void\n+test03()\n+{\n+  for (const path& p : __gnu_test::test_paths)\n+    for (const path& q : __gnu_test::test_paths)\n+      test(p, q.native());\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}, {"sha": "7b4549617ddfd1f11867b3b90afec2c814373f30", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/decompose/filename.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Ffilename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Ffilename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fdecompose%2Ffilename.cc?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -30,6 +30,7 @@ using std::filesystem::path;\n void\n test01()\n {\n+  // [fs.path.decompose] p7\n   VERIFY( path(\"/foo/bar.txt\").filename() == \"bar.txt\" );\n   VERIFY( path(\"/foo/bar\").filename()     == \"bar\"     );\n   VERIFY( path(\"/foo/bar/\").filename()    == \"\"        );"}, {"sha": "2fbb9c246dbe5a4d929b29ad0a8b5dda29321cee", "filename": "libstdc++-v3/testsuite/27_io/filesystem/path/nonmember/append.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fappend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cda876da273e36bb65f843a9bf39576258ebf19/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fappend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilesystem%2Fpath%2Fnonmember%2Fappend.cc?ref=6cda876da273e36bb65f843a9bf39576258ebf19", "patch": "@@ -0,0 +1,84 @@\n+// { dg-options \"-std=gnu++17 -lstdc++fs\" }\n+// { dg-do run { target c++17 } }\n+// { dg-require-filesystem-ts \"\" }\n+\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// C++17 30.10.8.6 path non-member functions [fs.path.nonmember]\n+\n+#include <filesystem>\n+#include <testsuite_fs.h>\n+\n+using std::filesystem::path;\n+using __gnu_test::compare_paths;\n+\n+// operator/(const path&, const path&)\n+// Equivalent to: return path(lhs) /= rhs;\n+\n+void test(const path& lhs, const path& rhs)\n+{\n+  compare_paths( lhs / rhs, path(lhs) /= rhs );\n+}\n+\n+void\n+test01()\n+{\n+  test( \"/foo/bar\", \"/foo/\" );\n+\n+  test( \"baz\", \"baz\" );\n+  test( \"baz/\", \"baz\" );\n+  test( \"baz\", \"/foo/bar\" );\n+  test( \"baz/\", \"/foo/bar\" );\n+\n+  test( \"\", \"\" );\n+  test( \"\", \"rel\" );\n+\n+  test( \"dir/\", \"/file\" );\n+  test( \"dir/\", \"file\" );\n+}\n+\n+void\n+test02()\n+{\n+  // C++17 [fs.path.append] p4\n+  test( \"//host\", \"foo\" );\n+  test( \"//host/\", \"foo\" );\n+  test( \"foo\", \"\" );\n+  test( \"foo\", \"/bar\" );\n+  test( \"foo\", \"c:/bar\" );\n+  test( \"foo\", \"c:\" );\n+  test( \"c:\", \"\" );\n+  test( \"c:foo\", \"/bar\" );\n+  test( \"foo\", \"c:\\\\bar\" );\n+}\n+\n+void\n+test03()\n+{\n+  for (const path& p : __gnu_test::test_paths)\n+    for (const path& q : __gnu_test::test_paths)\n+      test(p, q);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+}"}]}