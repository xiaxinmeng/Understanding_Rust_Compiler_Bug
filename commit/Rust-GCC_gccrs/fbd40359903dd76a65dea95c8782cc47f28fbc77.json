{"sha": "fbd40359903dd76a65dea95c8782cc47f28fbc77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkNDAzNTk5MDNkZDc2YTY1ZGVhOTVjODc4MmNjNDdmMjhmYmM3Nw==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-05-20T19:45:36Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-05-20T19:45:36Z"}, "message": "top level:\n\n\t* diagnostic.c: Eliminate implicit int.\n\t* except.c, gcc.c: Add static prototypes.\n\t* final.c (final_end_function): Mark file arg ATTRIBUTE_UNUSED.\n\t* gensupport.c (process_rtx): Use XVEC to initialize vector\n\tslot of 'split'.\n\n\t* print-rtl.c: If DEBUG_REGISTER_NAMES, define static\n\tdebug_reg_names instead of static reg_names.  If not, define\n\tglobal reg_names.\n\t* regclass.c: Don't define global reg_names unless\n\tDEBUG_REGISTER_NAMES is defined.\n\n\t* reload1.c (order_regs_for_reload): Remove unused variable.\n\t* varasm.c: Include output.h after defaults.h.  Define\n\teh_frame_section as function of no args, not of unspecified args.\n\n\t* gcc.c: Constify argbuf; arguments to store_arg,\n\tprocess_command, main; elements of struct command and struct\n\tswitchstr; local variables in execute, process_command, main.\n\ncp:\n\t* except.c: Add static prototypes.\n\nFrom-SVN: r34054", "tree": {"sha": "7ccfa0379a3a0d2a4e7803089ea3f13593b309bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ccfa0379a3a0d2a4e7803089ea3f13593b309bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd40359903dd76a65dea95c8782cc47f28fbc77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd40359903dd76a65dea95c8782cc47f28fbc77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd40359903dd76a65dea95c8782cc47f28fbc77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd40359903dd76a65dea95c8782cc47f28fbc77/comments", "author": null, "committer": null, "parents": [{"sha": "cd64831fc204fed5bcc6a957a43b1f3924a64960", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd64831fc204fed5bcc6a957a43b1f3924a64960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd64831fc204fed5bcc6a957a43b1f3924a64960"}], "stats": {"total": 114, "additions": 76, "deletions": 38}, "files": [{"sha": "6d2bc426d86c7bb157e21dabb6926e60f954e37c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -1,3 +1,25 @@\n+2000-05-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* diagnostic.c: Eliminate implicit int.\n+\t* except.c, gcc.c: Add static prototypes.\n+\t* final.c (final_end_function): Mark file arg ATTRIBUTE_UNUSED.\n+\t* gensupport.c (process_rtx): Use XVEC to initialize vector\n+\tslot of 'split'.\n+\n+\t* print-rtl.c: If DEBUG_REGISTER_NAMES, define static \n+\tdebug_reg_names instead of static reg_names.  If not, define\n+\tglobal reg_names.\n+\t* regclass.c: Don't define global reg_names unless\n+\tDEBUG_REGISTER_NAMES is defined.\n+\n+\t* reload1.c (order_regs_for_reload): Remove unused variable.\n+\t* varasm.c: Include output.h after defaults.h.  Define\n+\teh_frame_section as function of no args, not of unspecified args.\n+\n+\t* gcc.c: Constify argbuf; arguments to store_arg,\n+\tprocess_command, main; elements of struct command and struct\n+\tswitchstr; local variables in execute, process_command, main.\n+\n 2000-05-20  Bruce Korb  <bkorb@gnu.org>\n \n \t* fixinc/inclhack.def:  more applications of c_fix=format + tests"}, {"sha": "d2a84fb3a0517d621f14c5f00587e7add169db75", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -1,3 +1,7 @@\n+2000-05-20  Zack Weinberg  <zack@wolery.cumb.org>\n+\n+\t* except.c: Add static prototypes.\n+\n 2000-05-20  H.J. Lu  <hjl@gnu.org>\n \n \t* Make-lang.in (cplib2.ready): Also depend on cc1plus$(exeext)."}, {"sha": "91f75c257feb53e412bda26bca51fdcf1ceebd3d", "filename": "gcc/cp/except.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -54,6 +54,8 @@ static tree build_eh_type_type_ref PARAMS ((tree));\n static tree build_terminate_handler PARAMS ((void));\n static tree alloc_eh_object PARAMS ((tree));\n static int complete_ptr_ref_or_void_ptr_p PARAMS ((tree, tree));\n+static int can_convert_eh PARAMS ((tree, tree));\n+static void check_handlers_1 PARAMS ((tree, tree));\n static void initialize_handler_parm PARAMS ((tree));\n static tree expand_throw PARAMS ((tree));\n static int decl_is_java_type PARAMS ((tree decl, int err));"}, {"sha": "f559d68618921ddf200727b4e6303540653a2f72", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -112,7 +112,7 @@ static int output_maximum_width = 0;\n \n /* Used to control every diagnostic message formatting.  Front-ends should\n    call set_message_prefixing_rule to set up their politics.  */\n-static current_prefixing_rule = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n+static int current_prefixing_rule = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n \f\n /* Predicate. Return 1 if we're in automatic line wrapping mode.  */\n "}, {"sha": "00816ef12825a57380822c6d906b9d3647180b4f", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -470,6 +470,7 @@ static void set_insn_eh_region\tPARAMS ((rtx *, int));\n #ifdef DONT_USE_BUILTIN_SETJMP\n static void jumpif_rtx\t\tPARAMS ((rtx, rtx));\n #endif\n+static void find_exception_handler_labels_1 PARAMS ((rtx));\n static void mark_eh_node        PARAMS ((struct eh_node *));\n static void mark_eh_stack       PARAMS ((struct eh_stack *));\n static void mark_eh_queue       PARAMS ((struct eh_queue *));\n@@ -483,7 +484,6 @@ static int find_func_region\tPARAMS ((int));\n static int find_func_region_from_symbol PARAMS ((rtx));\n static void clear_function_eh_region PARAMS ((void));\n static void process_nestinfo\tPARAMS ((int, eh_nesting_info *, int *));\n-\n rtx expand_builtin_return_addr\tPARAMS ((enum built_in_function, int, rtx));\n static void emit_cleanup_handler PARAMS ((struct eh_entry *));\n static int eh_region_from_symbol PARAMS ((rtx));"}, {"sha": "e24471ce0dfb91e2969eba82990247a47ca9afdd", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -1779,7 +1779,7 @@ profile_function (file)\n void\n final_end_function (first, file, optimize)\n      rtx first ATTRIBUTE_UNUSED;\n-     FILE *file;\n+     FILE *file ATTRIBUTE_UNUSED;\n      int optimize ATTRIBUTE_UNUSED;\n {\n   app_disable ();"}, {"sha": "a8946a36b7dd63b0bdbbbb332ef0a8c6cd049778", "filename": "gcc/gcc.c", "status": "modified", "additions": 30, "deletions": 24, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -199,6 +199,8 @@ static char **split_directories\tPARAMS ((const char *, int *));\n static void free_split_directories PARAMS ((char **));\n static char *make_relative_prefix PARAMS ((const char *, const char *, const char *));\n #endif /* VMS */\n+static void store_arg\t\tPARAMS ((const char *, int, int));\n+static char *load_specs\t\tPARAMS ((const char *));\n static void read_specs\t\tPARAMS ((const char *, int));\n static void set_spec\t\tPARAMS ((const char *, const char *));\n static struct compiler *lookup_compiler PARAMS ((const char *, size_t, const char *));\n@@ -208,6 +210,7 @@ static int access_check\t\tPARAMS ((const char *, int));\n static char *find_a_file\tPARAMS ((struct path_prefix *, const char *, int));\n static void add_prefix\t\tPARAMS ((struct path_prefix *, const char *,\n \t\t\t\t\t const char *, int, int, int *));\n+static void translate_options\tPARAMS ((int *, const char ***));\n static char *skip_whitespace\tPARAMS ((char *));\n static void record_temp_file\tPARAMS ((const char *, int, int));\n static void delete_if_ordinary\tPARAMS ((const char *));\n@@ -239,7 +242,7 @@ static void display_help \tPARAMS ((void));\n static void add_preprocessor_option\tPARAMS ((const char *, int));\n static void add_assembler_option\tPARAMS ((const char *, int));\n static void add_linker_option\t\tPARAMS ((const char *, int));\n-static void process_command\t\tPARAMS ((int, char **));\n+static void process_command\t\tPARAMS ((int, const char **));\n static int execute\t\t\tPARAMS ((void));\n static void unused_prefix_warnings\tPARAMS ((struct path_prefix *));\n static void clear_args\t\t\tPARAMS ((void));\n@@ -1287,7 +1290,7 @@ set_spec (name, spec)\n \n /* Vector of pointers to arguments in the current line of specifications.  */\n \n-static char **argbuf;\n+static const char **argbuf;\n \n /* Number of elements allocated in argbuf.  */\n \n@@ -1437,12 +1440,13 @@ clear_args ()\n \n static void\n store_arg (arg, delete_always, delete_failure)\n-     char *arg;\n+     const char *arg;\n      int delete_always, delete_failure;\n {\n   if (argbuf_index + 1 == argbuf_length)\n     argbuf\n-      = (char **) xrealloc (argbuf, (argbuf_length *= 2) * sizeof (char *));\n+      = (const char **) xrealloc (argbuf,\n+\t\t\t\t  (argbuf_length *= 2) * sizeof (const char *));\n \n   argbuf[argbuf_index++] = arg;\n   argbuf[argbuf_index] = 0;\n@@ -2504,7 +2508,7 @@ execute ()\n   struct command\n     {\n       const char *prog;\t\t/* program name.  */\n-      char **argv;\t\t/* vector of args.  */\n+      const char **argv;\t/* vector of args.  */\n       int pid;\t\t\t/* pid of process for this command.  */\n     };\n \n@@ -2558,7 +2562,7 @@ execute ()\n       /* Print each piped command as a separate line.  */\n       for (i = 0; i < n_commands ; i++)\n \t{\n-\t  char **j;\n+\t  const char **j;\n \n \t  for (j = commands[i].argv; *j; j++)\n \t    fprintf (stderr, \" %s\", *j);\n@@ -2587,7 +2591,7 @@ execute ()\n   for (i = 0; i < n_commands; i++)\n     {\n       char *errmsg_fmt, *errmsg_arg;\n-      char *string = commands[i].argv[0];\n+      const char *string = commands[i].argv[0];\n \n       commands[i].pid = pexecute (string, commands[i].argv,\n \t\t\t\t  programname, temp_filename,\n@@ -2602,7 +2606,7 @@ execute ()\n \tpfatal_pexecute (errmsg_fmt, errmsg_arg);\n \n       if (string != commands[i].prog)\n-\tfree (string);\n+\tfree ((PTR) string);\n     }\n \n   execution_count++;\n@@ -2703,7 +2707,7 @@ execute ()\n struct switchstr\n {\n   const char *part1;\n-  char **args;\n+  const char **args;\n   int live_cond;\n   int validated;\n };\n@@ -2909,12 +2913,12 @@ add_linker_option (option, len)\n static void\n process_command (argc, argv)\n      int argc;\n-     char **argv;\n+     const char **argv;\n {\n   register int i;\n   const char *temp;\n   char *temp1;\n-  char *spec_lang = 0;\n+  const char *spec_lang = 0;\n   int last_language_n_infiles;\n   int have_c = 0;\n   int have_o = 0;\n@@ -3229,7 +3233,7 @@ process_command (argc, argv)\n \treport_times = 1;\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n-\t  register char *p = &argv[i][1];\n+\t  register const char *p = &argv[i][1];\n \t  register int c = *p;\n \n \t  switch (c)\n@@ -3248,7 +3252,7 @@ process_command (argc, argv)\n \n \t    case 'B':\n \t      {\n-\t\tchar *value;\n+\t\tconst char *value;\n \t\tif (p[1] == 0 && i + 1 == argc)\n \t\t  fatal (\"argument to `-B' is missing\");\n \t\tif (p[1] == 0)\n@@ -3586,8 +3590,8 @@ process_command (argc, argv)\n \t}\n       else if (argv[i][0] == '-' && argv[i][1] != 0)\n \t{\n-\t  register char *p = &argv[i][1];\n-\t  register int c = *p;\n+\t  const char *p = &argv[i][1];\n+\t  int c = *p;\n \n \t  if (c == 'x')\n \t    {\n@@ -3622,7 +3626,7 @@ process_command (argc, argv)\n \t      if (i + n_args >= argc)\n \t\tfatal (\"argument to `-%s' is missing\", p);\n \t      switches[n_switches].args\n-\t\t= (char **) xmalloc ((n_args + 1) * sizeof (char *));\n+\t\t= (const char **) xmalloc ((n_args + 1) * sizeof(const char *));\n \t      while (j < n_args)\n \t\tswitches[n_switches].args[j++] = argv[++i];\n \t      /* Null-terminate the vector.  */\n@@ -3633,13 +3637,15 @@ process_command (argc, argv)\n \t      /* On some systems, ld cannot handle some options without\n \t\t a space.  So split the option from its argument.  */\n \t      char *part1 = (char *) xmalloc (2);\n+\t      char *tmp;\n \t      part1[0] = c;\n \t      part1[1] = '\\0';\n \t      \n \t      switches[n_switches].part1 = part1;\n-\t      switches[n_switches].args = (char **) xmalloc (2 * sizeof (char *));\n-\t      switches[n_switches].args[0] = xmalloc (strlen (p));\n-\t      strcpy (switches[n_switches].args[0], &p[1]);\n+\t      switches[n_switches].args\n+\t\t= (const char **) xmalloc (2 * sizeof (const char *));\n+\t      switches[n_switches].args[0] = tmp = xmalloc (strlen (p));\n+\t      strcpy (tmp, &p[1]);\n \t      switches[n_switches].args[1] = 0;\n \t    }\n \t  else\n@@ -4982,7 +4988,7 @@ give_switch (switchnum, omit_first_word, include_blanks)\n \n   if (switches[switchnum].args != 0)\n     {\n-      char **p;\n+      const char **p;\n       for (p = switches[switchnum].args; *p; p++)\n \t{\n \t  if (include_blanks)\n@@ -5124,12 +5130,12 @@ fatal_error (signum)\n   kill (getpid (), signum);\n }\n \n-extern int main PARAMS ((int, char **));\n+extern int main PARAMS ((int, const char **));\n \n int\n main (argc, argv)\n      int argc;\n-     char **argv;\n+     const char **argv;\n {\n   register size_t i;\n   size_t j;\n@@ -5165,7 +5171,7 @@ main (argc, argv)\n #endif\n \n   argbuf_length = 10;\n-  argbuf = (char **) xmalloc (argbuf_length * sizeof (char *));\n+  argbuf = (const char **) xmalloc (argbuf_length * sizeof (const char *));\n \n   obstack_init (&obstack);\n \n@@ -5250,7 +5256,7 @@ main (argc, argv)\n     first_time = TRUE;\n     for (i = 0; (int)i < n_switches; i++)\n       {\n-\tchar **args;\n+\tconst char **args;\n \tconst char *p, *q;\n \tif (!first_time)\n \t  obstack_grow (&collect_obstack, \" \", 1);"}, {"sha": "b475523f47201b3cde4fd9d145070ac21743c380", "filename": "gcc/gensupport.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fgensupport.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fgensupport.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgensupport.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -180,7 +180,7 @@ process_rtx (desc, lineno)\n \tsplit = rtx_alloc (DEFINE_SPLIT);\n \n \ti = XVECLEN (desc, 1);\n-\tXEXP (split, 0) = rtvec_alloc (i);\n+\tXVEC (split, 0) = rtvec_alloc (i);\n \twhile (--i >= 0)\n \t  {\n \t    XVECEXP (split, 0, i) = copy_rtx (XVECEXP (desc, 1, i));"}, {"sha": "e52a41065bbc55f890363b1fe16c4b72bdffe057", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -39,9 +39,10 @@ Boston, MA 02111-1307, USA.  */\n /* Array containing all of the register names */\n \n #ifdef DEBUG_REGISTER_NAMES\n-static const char * const reg_names[] = DEBUG_REGISTER_NAMES;\n+static const char * const debug_reg_names[] = DEBUG_REGISTER_NAMES;\n+#define reg_names debug_reg_names\n #else\n-static const char * const reg_names[] = REGISTER_NAMES;\n+const char * const reg_names[] = REGISTER_NAMES;\n #endif\n \n static FILE *outfile;"}, {"sha": "1ffbb3318ff177464a1399442dfe56b0d535fb5a", "filename": "gcc/regclass.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -160,9 +160,12 @@ enum reg_class reg_class_subunion[N_REG_CLASSES][N_REG_CLASSES];\n \n enum reg_class reg_class_superunion[N_REG_CLASSES][N_REG_CLASSES];\n \n-/* Array containing all of the register names */\n+/* Array containing all of the register names.  Unless\n+   DEBUG_REGISTER_NAMES is defined, use the copy in print-rtl.c.  */\n \n+#ifdef DEBUG_REGISTER_NAMES\n const char * const reg_names[] = REGISTER_NAMES;\n+#endif\n \n /* For each hard register, the widest mode object that it can contain.\n    This will be a MODE_INT mode if the register can hold integers.  Otherwise"}, {"sha": "e7da78b8a03167ffcf479c0699b076d468862d43", "filename": "gcc/reload1.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -1518,7 +1518,7 @@ static void\n order_regs_for_reload (chain)\n      struct insn_chain *chain;\n {\n-  register int i, j;\n+  int i;\n   HARD_REG_SET used_by_pseudos;\n   HARD_REG_SET used_by_pseudos2;\n \n@@ -1541,14 +1541,14 @@ order_regs_for_reload (chain)\n   CLEAR_REG_SET (&pseudos_counted);\n \n   EXECUTE_IF_SET_IN_REG_SET\n-    (&chain->live_throughout, FIRST_PSEUDO_REGISTER, j,\n+    (&chain->live_throughout, FIRST_PSEUDO_REGISTER, i,\n      {\n-       count_pseudo (j);\n+       count_pseudo (i);\n      });\n   EXECUTE_IF_SET_IN_REG_SET\n-    (&chain->dead_or_set, FIRST_PSEUDO_REGISTER, j,\n+    (&chain->dead_or_set, FIRST_PSEUDO_REGISTER, i,\n      {\n-       count_pseudo (j);\n+       count_pseudo (i);\n      });\n   CLEAR_REG_SET (&pseudos_counted);\n }"}, {"sha": "85755b71d3511e5ee04ea7bdb6525ae207b0199c", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd40359903dd76a65dea95c8782cc47f28fbc77/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fbd40359903dd76a65dea95c8782cc47f28fbc77", "patch": "@@ -35,10 +35,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"function.h\"\n #include \"expr.h\"\n-#include \"output.h\"\n #include \"hard-reg-set.h\"\n #include \"regs.h\"\n #include \"defaults.h\"\n+#include \"output.h\"\n #include \"real.h\"\n #include \"toplev.h\"\n #include \"dbxout.h\"\n@@ -427,7 +427,7 @@ asm_output_aligned_bss (file, decl, name, size, align)\n \n #ifdef EH_FRAME_SECTION_ASM_OP\n void\n-eh_frame_section ()\n+eh_frame_section (void)\n {\n   if (in_section != in_eh_frame)\n     {"}]}