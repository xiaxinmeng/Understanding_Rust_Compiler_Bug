{"sha": "a00cb0b926ac650709e3816bc967c8795869c116", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwY2IwYjkyNmFjNjUwNzA5ZTM4MTZiYzk2N2M4Nzk1ODY5YzExNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-06-01T10:07:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-06-01T10:07:54Z"}, "message": "xmmintrin.h (_mm_setzero_ps, [...]): Add __extension__.\n\n\t* config/i386/xmmintrin.h (_mm_setzero_ps, _mm_set_ss, _mm_set1_ps,\n\t_mm_set_ps, _mm_setr_ps): Add __extension__.\n\t* config/i386/emmintrin.h (_mm_set_sd, _mm_set1_pd, _mm_set_pd,\n\t_mm_setr_pd, _mm_setzero_pd, _mm_set_epi64x, _mm_set_epi64x,\n\t_mm_set_epi32, _mm_set_epi16, _mm_set_epi8, _mm_setzero_si128):\n\tLikewise.\n\t(_mm_clflush): Don't use return in void function.\n\n\t* gcc.dg/i386-sse-12.c: New test.\n\nFrom-SVN: r100439", "tree": {"sha": "3464c9034ae7799ebe23ac77273d47f4e5d5c121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3464c9034ae7799ebe23ac77273d47f4e5d5c121"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a00cb0b926ac650709e3816bc967c8795869c116", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00cb0b926ac650709e3816bc967c8795869c116", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00cb0b926ac650709e3816bc967c8795869c116", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00cb0b926ac650709e3816bc967c8795869c116/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2852d1f5c0803f10e55cd7e6adbc3caf7726378", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2852d1f5c0803f10e55cd7e6adbc3caf7726378", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2852d1f5c0803f10e55cd7e6adbc3caf7726378"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "6214421b91459aca9fc9fe168a1d8a9f94f35efe", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a00cb0b926ac650709e3816bc967c8795869c116", "patch": "@@ -1,5 +1,13 @@\n 2005-06-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/xmmintrin.h (_mm_setzero_ps, _mm_set_ss, _mm_set1_ps,\n+\t_mm_set_ps, _mm_setr_ps): Add __extension__.\n+\t* config/i386/emmintrin.h (_mm_set_sd, _mm_set1_pd, _mm_set_pd,\n+\t_mm_setr_pd, _mm_setzero_pd, _mm_set_epi64x, _mm_set_epi64x,\n+\t_mm_set_epi32, _mm_set_epi16, _mm_set_epi8, _mm_setzero_si128):\n+\tLikewise.\n+\t(_mm_clflush): Don't use return in void function.\n+\n \t* config/i386/emmintrin.h (_mm_castpd_ps, _mm_castpd_si128,\n \t_mm_castps_pd, _mm_castps_si128, _mm_castsi128_ps, _mm_castsi128_pd):\n \tUse __inline instead of inline."}, {"sha": "81a9b151134d0675105ebb0bb8bab0251b904797", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=a00cb0b926ac650709e3816bc967c8795869c116", "patch": "@@ -51,14 +51,14 @@ typedef __v2df __m128d;\n static __inline __m128d\n _mm_set_sd (double __F)\n {\n-  return (__m128d){ __F, 0 };\n+  return __extension__ (__m128d){ __F, 0 };\n }\n \n /* Create a vector with both elements equal to F.  */\n static __inline __m128d\n _mm_set1_pd (double __F)\n {\n-  return (__m128d){ __F, __F };\n+  return __extension__ (__m128d){ __F, __F };\n }\n \n static __inline __m128d\n@@ -71,21 +71,21 @@ _mm_set_pd1 (double __F)\n static __inline __m128d\n _mm_set_pd (double __W, double __X)\n {\n-  return (__m128d){ __X, __W };\n+  return __extension__ (__m128d){ __X, __W };\n }\n \n /* Create a vector with the lower value W and upper value X.  */\n static __inline __m128d\n _mm_setr_pd (double __W, double __X)\n {\n-  return (__m128d){ __W, __X };\n+  return __extension__ (__m128d){ __W, __X };\n }\n \n /* Create a vector of zeros.  */\n static __inline __m128d\n _mm_setzero_pd (void)\n {\n-  return (__m128d){ 0.0, 0.0 };\n+  return __extension__ (__m128d){ 0.0, 0.0 };\n }\n \n /* Sets the low DPFP value of A from the low value of B.  */\n@@ -553,7 +553,7 @@ _mm_ucomineq_sd (__m128d __A, __m128d __B)\n static __inline __m128i\n _mm_set_epi64x (long long __q1, long long __q0)\n {\n-  return (__m128i)(__v2di){ __q0, __q1 };\n+  return __extension__ (__m128i)(__v2di){ __q0, __q1 };\n }\n \n static __inline __m128i\n@@ -565,14 +565,15 @@ _mm_set_epi64 (__m64 __q1,  __m64 __q0)\n static __inline __m128i\n _mm_set_epi32 (int __q3, int __q2, int __q1, int __q0)\n {\n-  return (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };\n+  return __extension__ (__m128i)(__v4si){ __q0, __q1, __q2, __q3 };\n }\n \n static __inline __m128i\n _mm_set_epi16 (short __q7, short __q6, short __q5, short __q4,\n \t       short __q3, short __q2, short __q1, short __q0)\n {\n-  return (__m128i)(__v8hi){ __q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7 };\n+  return __extension__ (__m128i)(__v8hi){\n+    __q0, __q1, __q2, __q3, __q4, __q5, __q6, __q7 };\n }\n \n static __inline __m128i\n@@ -581,7 +582,7 @@ _mm_set_epi8 (char __q15, char __q14, char __q13, char __q12,\n \t      char __q07, char __q06, char __q05, char __q04,\n \t      char __q03, char __q02, char __q01, char __q00)\n {\n-  return (__m128i)(__v16qi){\n+  return __extension__ (__m128i)(__v16qi){\n     __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,\n     __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15\n   };\n@@ -712,7 +713,7 @@ _mm_move_epi64 (__m128i __A)\n static __inline __m128i\n _mm_setzero_si128 (void)\n {\n-  return (__m128i)(__v4si){ 0, 0, 0, 0 };\n+  return __extension__ (__m128i)(__v4si){ 0, 0, 0, 0 };\n }\n \n static __inline __m128d\n@@ -1356,7 +1357,7 @@ _mm_stream_pd (double *__A, __m128d __B)\n static __inline void\n _mm_clflush (void const *__A)\n {\n-  return __builtin_ia32_clflush (__A);\n+  __builtin_ia32_clflush (__A);\n }\n \n static __inline void"}, {"sha": "311ecba581fc2c1fa1b813053ecd335c6eadeca0", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=a00cb0b926ac650709e3816bc967c8795869c116", "patch": "@@ -90,7 +90,7 @@ enum _mm_hint\n static __inline __m128\n _mm_setzero_ps (void)\n {\n-  return (__m128){ 0.0f, 0.0f, 0.0f, 0.0f };\n+  return __extension__ (__m128){ 0.0f, 0.0f, 0.0f, 0.0f };\n }\n \n /* Perform the respective operation on the lower SPFP (single-precision\n@@ -832,14 +832,14 @@ _MM_SET_FLUSH_ZERO_MODE (unsigned int __mode)\n static __inline __m128\n _mm_set_ss (float __F)\n {\n-  return (__m128)(__v4sf){ __F, 0, 0, 0 };\n+  return __extension__ (__m128)(__v4sf){ __F, 0, 0, 0 };\n }\n \n /* Create a vector with all four elements equal to F.  */\n static __inline __m128\n _mm_set1_ps (float __F)\n {\n-  return (__m128)(__v4sf){ __F, __F, __F, __F };\n+  return __extension__ (__m128)(__v4sf){ __F, __F, __F, __F };\n }\n \n static __inline __m128\n@@ -894,14 +894,14 @@ _mm_loadr_ps (float const *__P)\n static __inline __m128\n _mm_set_ps (const float __Z, const float __Y, const float __X, const float __W)\n {\n-  return (__m128)(__v4sf){ __W, __X, __Y, __Z };\n+  return __extension__ (__m128)(__v4sf){ __W, __X, __Y, __Z };\n }\n \n /* Create the vector [W X Y Z].  */\n static __inline __m128\n _mm_setr_ps (float __Z, float __Y, float __X, float __W)\n {\n-  return (__m128)(__v4sf){ __Z, __Y, __X, __W };\n+  return __extension__ (__m128)(__v4sf){ __Z, __Y, __X, __W };\n }\n \n /* Stores the lower SPFP value.  */"}, {"sha": "d002a6127505c24a5b309b9dfc92b87e47b68d9c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a00cb0b926ac650709e3816bc967c8795869c116", "patch": "@@ -1,5 +1,7 @@\n 2005-06-01  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gcc.dg/i386-sse-12.c: New test.\n+\n \tPR fortran/21729\n \t* gfortran.dg/implicit_5.f90: New test.\n "}, {"sha": "83cc91588cff43c92bea219842525552f2adf355", "filename": "gcc/testsuite/gcc.dg/i386-sse-12.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00cb0b926ac650709e3816bc967c8795869c116/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-sse-12.c?ref=a00cb0b926ac650709e3816bc967c8795869c116", "patch": "@@ -0,0 +1,12 @@\n+/* Test that {,x,e,p}mmintrin.h and mm_malloc.h are\n+   usable with -std=c89 -pedantic-errors.  */\n+/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-options \"-std=c89 -pedantic-errors -msse3\" } */\n+\n+#include <mmintrin.h>\n+#include <xmmintrin.h>\n+#include <emmintrin.h>\n+#include <pmmintrin.h>\n+#include <mm_malloc.h>\n+\n+int dummy;"}]}