{"sha": "86f45d2c8a0e984f8f745debe7c92801a2b325d8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmNDVkMmM4YTBlOTg0ZjhmNzQ1ZGViZTdjOTI4MDFhMmIzMjVkOA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2000-05-24T22:56:54Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-05-24T22:56:54Z"}, "message": "cp-tree.h (build_delete): Change prototype.\n\n\t* cp-tree.h (build_delete): Change prototype.\n\t(build_vec_delete): Likewise.\n\t* call.c (build_scoped_method_call): Use special_function_kind\n\tvalues to indicate the kind of destruction to be done.\n\t(build_method_call): Likewise.\n\t* decl.c (finish_destructor_body): Likewise.\n\t(maybe_build_cleanup_1): Likewise.  Rename to ...\n\t(maybe_build_cleanup): ... this.\n\t* decl2.c (delete_sanity): Use special_function_kind\n\tvalues to indicate the kind of destruction to be done.\n\t(build_cleanup): Likewise.\n\t* init.c (perform_member_init): Likewise.\n\t(build_vec_delete_1): Likewise.\n\t(build_dtor_call): Simplify.\n\t(build_delete): Use special_function_kind\n\tvalues to indicate the kind of destruction to be done.\n\t(build_vbase_delete): Likewise.\n\t(build_vec_delete): Likewise.\n\nFrom-SVN: r34147", "tree": {"sha": "aab01c71ab2feb7c3a70dbb043d2cddecfd4de97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aab01c71ab2feb7c3a70dbb043d2cddecfd4de97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86f45d2c8a0e984f8f745debe7c92801a2b325d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f45d2c8a0e984f8f745debe7c92801a2b325d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86f45d2c8a0e984f8f745debe7c92801a2b325d8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86f45d2c8a0e984f8f745debe7c92801a2b325d8/comments", "author": null, "committer": null, "parents": [{"sha": "af9fe0d178763a426fd233ae05deec25edd352ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af9fe0d178763a426fd233ae05deec25edd352ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af9fe0d178763a426fd233ae05deec25edd352ac"}], "stats": {"total": 211, "additions": 96, "deletions": 115}, "files": [{"sha": "a9fea21b4b3656115238252d123e3f78370efb99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -1,13 +1,32 @@\n-Mon May 15 11:46:29 2000  Donald Lindsay  <dlindsay@cygnus.com>\n-\n-\t* semantics.c (begin_class_definition): make the packed\n-\tattribute be sensitive to the \"-fpack-struct\" command line flag\n-\n 2000-05-24  Mark Mitchell  <mark@codesourcery.com>\n \n+\t* cp-tree.h (build_delete): Change prototype.\n+\t(build_vec_delete): Likewise.\n+\t* call.c (build_scoped_method_call): Use special_function_kind\n+\tvalues to indicate the kind of destruction to be done.\n+\t(build_method_call): Likewise.\n+\t* decl.c (finish_destructor_body): Likewise.\n+\t(maybe_build_cleanup_1): Likewise.  Rename to ...\n+\t(maybe_build_cleanup): ... this.\n+\t* decl2.c (delete_sanity): Use special_function_kind\n+\tvalues to indicate the kind of destruction to be done.\n+\t(build_cleanup): Likewise.\n+\t* init.c (perform_member_init): Likewise.\n+\t(build_vec_delete_1): Likewise.\n+\t(build_dtor_call): Simplify.\n+\t(build_delete): Use special_function_kind\n+\tvalues to indicate the kind of destruction to be done.\n+\t(build_vbase_delete): Likewise.\n+\t(build_vec_delete): Likewise.\n+\t\n \t* init.c (sort_member_init): Fix typo in error message generation\n \tcode.\n \n+Mon May 15 11:46:29 2000  Donald Lindsay  <dlindsay@cygnus.com>\n+\n+\t* semantics.c (begin_class_definition): make the packed\n+\tattribute be sensitive to the \"-fpack-struct\" command line flag\n+\n 2000-05-24  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tUpdate new-abi upcast algorithm."}, {"sha": "93feaddd9e26629f6df1414991963289c1f5d9e6", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -309,7 +309,8 @@ build_scoped_method_call (exp, basetype, name, parms)\n \t  if (! TYPE_HAS_DESTRUCTOR (TREE_TYPE (decl)))\n \t    return cp_convert (void_type_node, exp);\n \t  \n-\t  return build_delete (TREE_TYPE (decl), decl, integer_two_node,\n+\t  return build_delete (TREE_TYPE (decl), decl, \n+\t\t\t       sfk_complete_destructor,\n \t\t\t       LOOKUP_NORMAL|LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR,\n \t\t\t       0);\n \t}\n@@ -516,7 +517,7 @@ build_method_call (instance, name, parms, basetype_path, flags)\n       instance = default_conversion (instance);\n       instance_ptr = build_unary_op (ADDR_EXPR, instance, 0);\n       return build_delete (build_pointer_type (basetype),\n-\t\t\t   instance_ptr, integer_two_node,\n+\t\t\t   instance_ptr, sfk_complete_destructor,\n \t\t\t   LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 0);\n     }\n "}, {"sha": "6080abde32ad0e710b07c6bc3d212e410f458350", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -4122,9 +4122,9 @@ extern tree decl_constant_value\t\t\tPARAMS ((tree));\n extern tree build_new\t\t\t\tPARAMS ((tree, tree, tree, int));\n extern tree build_vec_init\t\t\tPARAMS ((tree, tree, tree, tree, int));\n extern tree build_x_delete\t\t\tPARAMS ((tree, int, tree));\n-extern tree build_delete\t\t\tPARAMS ((tree, tree, tree, int, int));\n+extern tree build_delete\t\t\tPARAMS ((tree, tree, special_function_kind, int, int));\n extern tree build_vbase_delete\t\t\tPARAMS ((tree, tree));\n-extern tree build_vec_delete\t\t\tPARAMS ((tree, tree, tree, int));\n+extern tree build_vec_delete\t\t\tPARAMS ((tree, tree, special_function_kind, int));\n extern tree create_temporary_var                PARAMS ((tree));\n extern void begin_init_stmts                    PARAMS ((tree *, tree *));\n extern tree finish_init_stmts                   PARAMS ((tree, tree));"}, {"sha": "05c17f620f09c1d619e38c7cd891cbb2cbb3f67f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 9, "deletions": 18, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -112,7 +112,6 @@ static int unary_op_p PARAMS ((tree));\n static tree store_bindings PARAMS ((tree, tree));\n static tree lookup_tag_reverse PARAMS ((tree, tree));\n static tree obscure_complex_init PARAMS ((tree, tree));\n-static tree maybe_build_cleanup_1 PARAMS ((tree, tree));\n static tree lookup_name_real PARAMS ((tree, int, int, int));\n static void warn_extern_redeclared_static PARAMS ((tree, tree));\n static void grok_reference_init PARAMS ((tree, tree, tree));\n@@ -13845,7 +13844,7 @@ finish_destructor_body ()\n \n   exprstmt = build_delete (current_class_type,\n \t\t\t   current_class_ref,\n-\t\t\t   integer_zero_node,\n+\t\t\t   sfk_base_destructor,\n \t\t\t   LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR|LOOKUP_NORMAL,\n \t\t\t   0);\n \n@@ -14513,14 +14512,15 @@ hack_incomplete_structures (type)\n     }\n }\n \n-/* If DECL is of a type which needs a cleanup, build that cleanup here.\n-   See build_delete for information about AUTO_DELETE.  */\n+/* If DECL is of a type which needs a cleanup, build that cleanup\n+   here.  */\n \n-static tree\n-maybe_build_cleanup_1 (decl, auto_delete)\n-     tree decl, auto_delete;\n+tree\n+maybe_build_cleanup (decl)\n+     tree decl;\n {\n   tree type = TREE_TYPE (decl);\n+\n   if (type != error_mark_node && TYPE_HAS_NONTRIVIAL_DESTRUCTOR (type))\n     {\n       int flags = LOOKUP_NORMAL|LOOKUP_DESTRUCTOR;\n@@ -14539,7 +14539,8 @@ maybe_build_cleanup_1 (decl, auto_delete)\n \t  || flag_expensive_optimizations)\n \tflags |= LOOKUP_NONVIRTUAL;\n \n-      rval = build_delete (TREE_TYPE (rval), rval, auto_delete, flags, 0);\n+      rval = build_delete (TREE_TYPE (rval), rval,\n+\t\t\t   sfk_complete_destructor, flags, 0);\n \n       if (TYPE_USES_VIRTUAL_BASECLASSES (type)\n \t  && ! TYPE_HAS_DESTRUCTOR (type))\n@@ -14550,16 +14551,6 @@ maybe_build_cleanup_1 (decl, auto_delete)\n     }\n   return 0;\n }\n-\n-/* If DECL is of a type which needs a cleanup, build that cleanup\n-   here.  The cleanup does not free the storage with a call a delete.  */\n-\n-tree\n-maybe_build_cleanup (decl)\n-     tree decl;\n-{\n-  return maybe_build_cleanup_1 (decl, integer_two_node);\n-}\n \f\n /* Expand a C++ expression at the statement level.\n    This is needed to ferret out nodes which have UNKNOWN_TYPE."}, {"sha": "5b7209827cc4d47ba38afea42fb9e67339f800b5", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -1241,7 +1241,8 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n     return build1 (NOP_EXPR, void_type_node, t);\n \n   if (doing_vec)\n-    return build_vec_delete (t, maxindex, integer_one_node, use_global_delete);\n+    return build_vec_delete (t, maxindex, sfk_deleting_destructor,\n+\t\t\t     use_global_delete);\n   else\n     {\n       if (IS_AGGR_TYPE (TREE_TYPE (type))\n@@ -1255,7 +1256,7 @@ delete_sanity (exp, size, doing_vec, use_global_delete)\n \t    return error_mark_node;\n \t}\n \n-      return build_delete (type, t, integer_three_node,\n+      return build_delete (type, t, sfk_deleting_destructor,\n \t\t\t   LOOKUP_NORMAL, use_global_delete);\n     }\n }\n@@ -2788,7 +2789,7 @@ build_cleanup (decl)\n       temp = build1 (ADDR_EXPR, build_pointer_type (type), decl);\n     }\n   temp = build_delete (TREE_TYPE (temp), temp,\n-\t\t       integer_two_node,\n+\t\t       sfk_complete_destructor,\n \t\t       LOOKUP_NORMAL|LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR, 0);\n   return temp;\n }"}, {"sha": "7d6892e232d9264eac272dd826b18b9d2ed62355", "filename": "gcc/cp/init.c", "status": "modified", "additions": 54, "deletions": 85, "changes": 139, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86f45d2c8a0e984f8f745debe7c92801a2b325d8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=86f45d2c8a0e984f8f745debe7c92801a2b325d8", "patch": "@@ -38,7 +38,7 @@ static void expand_aggr_vbase_init_1 PARAMS ((tree, tree, tree, tree));\n static void construct_virtual_bases PARAMS ((tree, tree, tree, tree, tree));\n static void expand_aggr_init_1 PARAMS ((tree, tree, tree, tree, int));\n static void expand_default_init PARAMS ((tree, tree, tree, tree, int));\n-static tree build_vec_delete_1 PARAMS ((tree, tree, tree, tree, int));\n+static tree build_vec_delete_1 PARAMS ((tree, tree, tree, special_function_kind, int));\n static void perform_member_init PARAMS ((tree, tree, int));\n static void sort_base_init PARAMS ((tree, tree *, tree *));\n static tree build_builtin_delete_call PARAMS ((tree));\n@@ -51,7 +51,7 @@ static tree get_temp_regvar PARAMS ((tree, tree));\n static tree dfs_initialize_vtbl_ptrs PARAMS ((tree, void *));\n static tree build_new_1\tPARAMS ((tree));\n static tree get_cookie_size PARAMS ((tree));\n-static tree build_dtor_call PARAMS ((tree, tree, int));\n+static tree build_dtor_call PARAMS ((tree, special_function_kind, int));\n static tree build_field_list PARAMS ((tree, tree, int *));\n \n /* Set up local variable for this file.  MUST BE CALLED AFTER\n@@ -276,7 +276,7 @@ perform_member_init (member, init, explicit)\n \n       expr = build_component_ref (current_class_ref, member, NULL_TREE,\n \t\t\t\t  explicit);\n-      expr = build_delete (type, expr, integer_zero_node,\n+      expr = build_delete (type, expr, sfk_base_destructor,\n \t\t\t   LOOKUP_NONVIRTUAL|LOOKUP_DESTRUCTOR, 0);\n \n       if (expr != error_mark_node)\n@@ -2538,7 +2538,7 @@ build_new_1 (exp)\n static tree\n build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n      tree base, maxindex, type;\n-     tree auto_delete_vec;\n+     special_function_kind auto_delete_vec;\n      int use_global_delete;\n {\n   tree virtual_size;\n@@ -2586,7 +2586,7 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n   body = NULL_TREE;\n \n   body = tree_cons (NULL_TREE,\n-\t\t    build_delete (ptype, tbase, integer_two_node,\n+\t\t    build_delete (ptype, tbase, sfk_complete_destructor,\n \t\t\t\t  LOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 1),\n \t\t    body);\n \n@@ -2608,9 +2608,8 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n  no_destructor:\n   /* If the delete flag is one, or anything else with the low bit set,\n      delete the storage.  */\n-  if (auto_delete_vec == integer_zero_node)\n-    deallocate_expr = integer_zero_node;\n-  else\n+  deallocate_expr = integer_zero_node;\n+  if (auto_delete_vec != sfk_base_destructor)\n     {\n       tree base_tbd;\n \n@@ -2634,15 +2633,11 @@ build_vec_delete_1 (base, maxindex, type, auto_delete_vec, use_global_delete)\n \t  /* True size with header.  */\n \t  virtual_size = size_binop (PLUS_EXPR, virtual_size, cookie_size);\n \t}\n-      deallocate_expr = build_x_delete (base_tbd,\n-\t\t\t\t\t2 | use_global_delete,\n-\t\t\t\t\tvirtual_size);\n-      deallocate_expr = fold (build (COND_EXPR, void_type_node,\n-\t\t\t\t     fold (build (BIT_AND_EXPR,\n-\t\t\t\t\t\t  integer_type_node,\n-\t\t\t\t\t\t  auto_delete_vec,\n-\t\t\t\t\t\t  integer_one_node)),\n-\t\t\t\t     deallocate_expr, integer_zero_node));\n+\n+      if (auto_delete_vec == sfk_deleting_destructor)\n+\tdeallocate_expr = build_x_delete (base_tbd,\n+\t\t\t\t\t  2 | use_global_delete,\n+\t\t\t\t\t  virtual_size);\n     }\n \n   if (loop && deallocate_expr != integer_zero_node)\n@@ -2997,7 +2992,7 @@ build_vec_init (decl, base, maxindex, init, from_array)\n \t\t\t      build_binary_op (MINUS_EXPR, maxindex, \n \t\t\t\t\t       iterator),\n \t\t\t      type,\n-\t\t\t      /*auto_delete_vec=*/integer_zero_node,\n+\t\t\t      sfk_base_destructor,\n \t\t\t      /*use_global_delete=*/0);\n       finish_cleanup (e, try_block);\n     }\n@@ -3039,60 +3034,42 @@ build_x_delete (addr, which_delete, virtual_size)\n   return build_op_delete_call (code, addr, virtual_size, flags, NULL_TREE);\n }\n \n-/* Call the destructor for EXP using the IN_CHARGE parameter.  FLAGS\n-   are as for build_delete.  */\n+/* Call the DTOR_KIND destructor for EXP.  FLAGS are as for\n+   build_delete.  */\n \n static tree\n-build_dtor_call (exp, in_charge, flags)\n+build_dtor_call (exp, dtor_kind, flags)\n      tree exp;\n-     tree in_charge;\n+     special_function_kind dtor_kind;\n      int flags;\n {\n-  tree name = NULL_TREE;\n-  tree call1;\n-  tree call2;\n-  tree call3;\n-  tree result;\n-\n-  /* First, try to figure out statically which function to call.  */\n-  in_charge = fold (in_charge);\n-  if (tree_int_cst_equal (in_charge, integer_zero_node))\n-    name = base_dtor_identifier;\n-  else if (tree_int_cst_equal (in_charge, integer_one_node))\n-    name = deleting_dtor_identifier;\n-  else if (tree_int_cst_equal (in_charge, integer_two_node))\n-    name = complete_dtor_identifier;\n-  if (name)\n-    return build_method_call (exp, name, NULL_TREE, NULL_TREE, flags);\n-\n-  /* If that didn't work, build the various alternatives.  */\n-  call1 = build_method_call (exp, complete_dtor_identifier,\n-\t\t\t     NULL_TREE, NULL_TREE, flags);\n-  call2 = build_method_call (exp, deleting_dtor_identifier,\n-\t\t\t     NULL_TREE, NULL_TREE, flags);\n-  call3 = build_method_call (exp, base_dtor_identifier,\n-\t\t\t     NULL_TREE, NULL_TREE, flags);\n-\n-  /* Build the conditionals.  */\n-  result = build (COND_EXPR, void_type_node,\n-\t\t  fold (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t       in_charge, integer_two_node)),\n-\t\t  call1,\n-\t\t  call3);\n-  result = build (COND_EXPR, void_type_node,\n-\t\t  fold (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t       in_charge, integer_one_node)),\n-\t\t  call2,\n-\t\t  result);\n-  return result;\n+  tree name;\n+\n+  switch (dtor_kind)\n+    {\n+    case sfk_complete_destructor:\n+      name = complete_dtor_identifier;\n+      break;\n+\n+    case sfk_base_destructor:\n+      name = base_dtor_identifier;\n+      break;\n+\n+    case sfk_deleting_destructor:\n+      name = deleting_dtor_identifier;\n+      break;\n+\n+    default:\n+      my_friendly_abort (20000524);\n+    }\n+  return build_method_call (exp, name, NULL_TREE, NULL_TREE, flags);\n }\n \n /* Generate a call to a destructor. TYPE is the type to cast ADDR to.\n    ADDR is an expression which yields the store to be destroyed.\n-   AUTO_DELETE is nonzero if a call to DELETE should be made or not.\n-   If in the program, (AUTO_DELETE & 2) is non-zero, we tear down the\n-   virtual baseclasses.\n-   If in the program, (AUTO_DELETE & 1) is non-zero, then we deallocate.\n+   AUTO_DELETE is the name of the destructor to call, i.e., either\n+   sfk_complete_destructor, sfk_base_destructor, or\n+   sfk_deleting_destructor.\n \n    FLAGS is the logical disjunction of zero or more LOOKUP_\n    flags.  See cp-tree.h for more info.\n@@ -3102,7 +3079,7 @@ build_dtor_call (exp, in_charge, flags)\n tree\n build_delete (type, addr, auto_delete, flags, use_global_delete)\n      tree type, addr;\n-     tree auto_delete;\n+     special_function_kind auto_delete;\n      int flags;\n      int use_global_delete;\n {\n@@ -3173,7 +3150,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \n   if (TYPE_HAS_TRIVIAL_DESTRUCTOR (type))\n     {\n-      if (auto_delete == integer_zero_node)\n+      if (auto_delete == sfk_base_destructor)\n \treturn void_zero_node;\n \n       return build_op_delete_call\n@@ -3187,28 +3164,19 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n      of the base classes; otherwise, we must do that here.  */\n   if (TYPE_HAS_DESTRUCTOR (type))\n     {\n-      tree passed_auto_delete;\n       tree do_delete = NULL_TREE;\n       tree ifexp;\n \n-      if (use_global_delete)\n+      if (use_global_delete && auto_delete == sfk_deleting_destructor)\n \t{\n-\t  tree cond = fold (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t\t   auto_delete, integer_one_node));\n-\t  tree call = build_builtin_delete_call (addr);\n-\n-\t  cond = fold (build (COND_EXPR, void_type_node, cond,\n-\t\t\t      call, void_zero_node));\n-\t  if (cond != void_zero_node)\n-\t    do_delete = cond;\n-\n-\t  passed_auto_delete = fold (build (BIT_AND_EXPR, integer_type_node,\n-\t\t\t\t\t    auto_delete, integer_two_node));\n+\t  /* Delete the object. */\n+\t  do_delete = build_builtin_delete_call (addr);\n+\t  /* Otherwise, treat this like a complete object destructor\n+\t     call.  */\n+\t  auto_delete = sfk_complete_destructor;\n \t}\n-      else\n-\tpassed_auto_delete = auto_delete;\n \n-      expr = build_dtor_call (ref, passed_auto_delete, flags);\n+      expr = build_dtor_call (ref, auto_delete, flags);\n       if (do_delete)\n \texpr = build (COMPOUND_EXPR, void_type_node, expr, do_delete);\n \n@@ -3239,7 +3207,7 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \n       /* If we have member delete or vbases, we call delete in\n \t finish_function.  */\n-      my_friendly_assert (auto_delete == integer_zero_node, 20000411);\n+      my_friendly_assert (auto_delete == sfk_base_destructor, 20000411);\n \n       /* Take care of the remaining baseclasses.  */\n       for (i = 0; i < n_baseclasses; i++)\n@@ -3264,7 +3232,8 @@ build_delete (type, addr, auto_delete, flags, use_global_delete)\n \t    {\n \t      tree this_member = build_component_ref (ref, DECL_NAME (member), NULL_TREE, 0);\n \t      tree this_type = TREE_TYPE (member);\n-\t      expr = build_delete (this_type, this_member, integer_two_node, flags, 0);\n+\t      expr = build_delete (this_type, this_member,\n+\t\t\t\t   sfk_complete_destructor, flags, 0);\n \t      exprstmt = tree_cons (NULL_TREE, expr, exprstmt);\n \t    }\n \t}\n@@ -3295,7 +3264,7 @@ build_vbase_delete (type, decl)\n \t\t\t addr, 0);\n       result = tree_cons (NULL_TREE,\n \t\t\t  build_delete (TREE_TYPE (this_addr), this_addr,\n-\t\t\t\t\tinteger_zero_node,\n+\t\t\t\t\tsfk_base_destructor,\n \t\t\t\t\tLOOKUP_NORMAL|LOOKUP_DESTRUCTOR, 0),\n \t\t\t  result);\n       vbases = TREE_CHAIN (vbases);\n@@ -3322,7 +3291,7 @@ build_vbase_delete (type, decl)\n tree\n build_vec_delete (base, maxindex, auto_delete_vec, use_global_delete)\n      tree base, maxindex;\n-     tree auto_delete_vec;\n+     special_function_kind auto_delete_vec;\n      int use_global_delete;\n {\n   tree type;"}]}