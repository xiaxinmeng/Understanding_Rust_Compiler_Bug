{"sha": "b0999b01149d3b429c78b98a7c24dd6f9652c08c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5OTliMDExNDlkM2I0MjljNzhiOThhN2MyNGRkNmY5NjUyYzA4Yw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2009-05-29T22:07:30Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-05-29T22:07:30Z"}, "message": "inclhack.def (solaris_int_const): New fix.\n\n\t* inclhack.def (solaris_int_const): New fix.\n\t(solaris_int_limits_1): Likewise.\n\t(solaris_int_limits_2): Likewise.\n\t* fixincl.x: Regenerate.\n\t* tests/base/sys/int_const.h: New file.\n\t* tests/base/sys/int_limits.h: Likewise.\n\nFrom-SVN: r147988", "tree": {"sha": "d9b5fc06dd352eae6460232dfe9236b2a149a446", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9b5fc06dd352eae6460232dfe9236b2a149a446"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0999b01149d3b429c78b98a7c24dd6f9652c08c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0999b01149d3b429c78b98a7c24dd6f9652c08c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0999b01149d3b429c78b98a7c24dd6f9652c08c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0999b01149d3b429c78b98a7c24dd6f9652c08c/comments", "author": null, "committer": null, "parents": [{"sha": "0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a05c536a636a6420ef3e00df0e3e7f6d4b9584e"}], "stats": {"total": 254, "additions": 249, "deletions": 5}, "files": [{"sha": "c7305c05136ccd16b4714740230d31d7fafc882f", "filename": "fixincludes/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2FChangeLog?ref=b0999b01149d3b429c78b98a7c24dd6f9652c08c", "patch": "@@ -1,3 +1,12 @@\n+2009-05-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* inclhack.def (solaris_int_const): New fix.\n+\t(solaris_int_limits_1): Likewise.\n+\t(solaris_int_limits_2): Likewise.\n+\t* fixincl.x: Regenerate.\n+\t* tests/base/sys/int_const.h: New file.\n+\t* tests/base/sys/int_limits.h: Likewise.\n+\n 2009-05-15  Joseph Myers  <joseph@codesourcery.com>\n \n \t* inclhack.def (glibc_tgmath): Correct bypass."}, {"sha": "cb8fc889a27864e942f4faa9a94ca7bd177173c7", "filename": "fixincludes/fixincl.x", "status": "modified", "additions": 137, "deletions": 5, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ffixincl.x", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ffixincl.x", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ffixincl.x?ref=b0999b01149d3b429c78b98a7c24dd6f9652c08c", "patch": "@@ -2,11 +2,11 @@\n  * \n  * DO NOT EDIT THIS FILE   (fixincl.x)\n  * \n- * It has been AutoGen-ed  Friday May 15, 2009 at 07:23:47 AM PDT\n+ * It has been AutoGen-ed  Saturday May 30, 2009 at 12:11:05 AM CEST\n  * From the definitions    inclhack.def\n  * and the template file   fixincl\n  */\n-/* DO NOT SVN-MERGE THIS FILE, EITHER Fri May 15 07:23:47 PDT 2009\n+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat May 30 00:11:05 CEST 2009\n  *\n  * You must regenerate it.  Use the ./genfixes script.\n  *\n@@ -15,7 +15,7 @@\n  * certain ANSI-incompatible system header files which are fixed to work\n  * correctly with ANSI C and placed in a directory that GNU C will search.\n  *\n- * This file contains 188 fixup descriptions.\n+ * This file contains 191 fixup descriptions.\n  *\n  * See README for more information.\n  *\n@@ -6079,6 +6079,120 @@ static const char* apzSolaris_Once_Init_2Patch[] = {\n     \"(^#define[ \\t]+PTHREAD_ONCE_INIT[ \\t]+\\\\{\\\\{)(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\\\}\\\\})[ \\t]*$\",\n     (char*)NULL };\n \n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Int_Const fix\n+ */\n+tSCC zSolaris_Int_ConstName[] =\n+     \"solaris_int_const\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Int_ConstList[] =\n+  \"sys/int_const.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Int_ConstMachs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Int_ConstSelect0[] =\n+       \"@\\\\(#\\\\)int_const.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_INT_CONST_TEST_CT  1\n+static tTestDesc aSolaris_Int_ConstTests[] = {\n+  { TT_EGREP,    zSolaris_Int_ConstSelect0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Int_Const\n+ */\n+static const char* apzSolaris_Int_ConstPatch[] = {\n+    \"format\",\n+    \"#define\\tUINT8_C(c)\\t(c)\\n\\\n+%1\\n\\\n+#define\\tUINT16_C(c)\\t(c)\",\n+    \"^#define[ \\t]+UINT8_C\\\\(c\\\\)[ \\t]+__CONCAT__.*\\n\\\n+(/*.**/)\\n\\\n+#define[ \\t]+UINT16_C\\\\(c\\\\)[ \\t]+__CONCAT__.*\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Int_Limits_1 fix\n+ */\n+tSCC zSolaris_Int_Limits_1Name[] =\n+     \"solaris_int_limits_1\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Int_Limits_1List[] =\n+  \"sys/int_limits.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Int_Limits_1Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Int_Limits_1Select0[] =\n+       \"@\\\\(#\\\\)int_limits.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_INT_LIMITS_1_TEST_CT  1\n+static tTestDesc aSolaris_Int_Limits_1Tests[] = {\n+  { TT_EGREP,    zSolaris_Int_Limits_1Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Int_Limits_1\n+ */\n+static const char* apzSolaris_Int_Limits_1Patch[] = {\n+    \"format\",\n+    \"#define\\tUINT8_MAX\\t(255)\\n\\\n+#define\\tUINT16_MAX\\t(65535)\",\n+    \"^#define[ \\t]+UINT8_MAX[ \\t]+\\\\(255U\\\\)\\n\\\n+#define[ \\t]+UINT16_MAX[ \\t]+\\\\(65535U\\\\)\",\n+    (char*)NULL };\n+\n+/* * * * * * * * * * * * * * * * * * * * * * * * * *\n+ *\n+ *  Description of Solaris_Int_Limits_2 fix\n+ */\n+tSCC zSolaris_Int_Limits_2Name[] =\n+     \"solaris_int_limits_2\";\n+\n+/*\n+ *  File name selection pattern\n+ */\n+tSCC zSolaris_Int_Limits_2List[] =\n+  \"sys/int_limits.h\\0\";\n+/*\n+ *  Machine/OS name selection pattern\n+ */\n+#define apzSolaris_Int_Limits_2Machs (const char**)NULL\n+\n+/*\n+ *  content selection pattern - do fix if pattern found\n+ */\n+tSCC zSolaris_Int_Limits_2Select0[] =\n+       \"@\\\\(#\\\\)int_limits.h[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+\n+#define    SOLARIS_INT_LIMITS_2_TEST_CT  1\n+static tTestDesc aSolaris_Int_Limits_2Tests[] = {\n+  { TT_EGREP,    zSolaris_Int_Limits_2Select0, (regex_t*)NULL }, };\n+\n+/*\n+ *  Fix Command Arguments for Solaris_Int_Limits_2\n+ */\n+static const char* apzSolaris_Int_Limits_2Patch[] = {\n+    \"format\",\n+    \"#define\\t%1_FAST16_%2 %132_%2\",\n+    \"^#define[ \\t]+(INT|UINT)_FAST16_(MAX|MIN)[ \\t](INT|UINT)16.*\",\n+    (char*)NULL };\n+\n /* * * * * * * * * * * * * * * * * * * * * * * * * *\n  *\n  *  Description of Solaris_Stdio_Tag fix\n@@ -7619,9 +7733,9 @@ static const char* apzX11_SprintfPatch[] = {\n  *\n  *  List of all fixes\n  */\n-#define REGEX_COUNT          230\n+#define REGEX_COUNT          233\n #define MACH_LIST_SIZE_LIMIT 181\n-#define FIX_COUNT            188\n+#define FIX_COUNT            191\n \n /*\n  *  Enumerate the fixes\n@@ -7777,6 +7891,9 @@ typedef enum {\n     SOLARIS_RWLOCK_INIT_1_FIXIDX,\n     SOLARIS_ONCE_INIT_1_FIXIDX,\n     SOLARIS_ONCE_INIT_2_FIXIDX,\n+    SOLARIS_INT_CONST_FIXIDX,\n+    SOLARIS_INT_LIMITS_1_FIXIDX,\n+    SOLARIS_INT_LIMITS_2_FIXIDX,\n     SOLARIS_STDIO_TAG_FIXIDX,\n     STATSSWTCH_FIXIDX,\n     STDIO_STDARG_H_FIXIDX,\n@@ -8568,6 +8685,21 @@ tFixDesc fixDescList[ FIX_COUNT ] = {\n      SOLARIS_ONCE_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n      aSolaris_Once_Init_2Tests,   apzSolaris_Once_Init_2Patch, 0 },\n \n+  {  zSolaris_Int_ConstName,    zSolaris_Int_ConstList,\n+     apzSolaris_Int_ConstMachs,\n+     SOLARIS_INT_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Int_ConstTests,   apzSolaris_Int_ConstPatch, 0 },\n+\n+  {  zSolaris_Int_Limits_1Name,    zSolaris_Int_Limits_1List,\n+     apzSolaris_Int_Limits_1Machs,\n+     SOLARIS_INT_LIMITS_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Int_Limits_1Tests,   apzSolaris_Int_Limits_1Patch, 0 },\n+\n+  {  zSolaris_Int_Limits_2Name,    zSolaris_Int_Limits_2List,\n+     apzSolaris_Int_Limits_2Machs,\n+     SOLARIS_INT_LIMITS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,\n+     aSolaris_Int_Limits_2Tests,   apzSolaris_Int_Limits_2Patch, 0 },\n+\n   {  zSolaris_Stdio_TagName,    zSolaris_Stdio_TagList,\n      apzSolaris_Stdio_TagMachs,\n      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,"}, {"sha": "cfa567f29c943b6a64ea8b3288ba51c72c24a20a", "filename": "fixincludes/inclhack.def", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Finclhack.def?ref=b0999b01149d3b429c78b98a7c24dd6f9652c08c", "patch": "@@ -3166,6 +3166,68 @@ fix = {\n };\n \n \n+/*\n+ * Sun Solaris 10 has a version of sys/int_const.h that defines\n+ * UINT8_C and UINT16_C to unsigned constants.\n+ */\n+fix = {\n+    hackname  = solaris_int_const;\n+    select    = '@\\(#\\)int_const.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files     = sys/int_const.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#define\\tUINT8_C(c)\\t(c)\\n\"\n+                \"%1\\n\"\n+                \"#define\\tUINT16_C(c)\\t(c)\";\n+    c_fix_arg = \"^#define[ \\t]+UINT8_C\\\\(c\\\\)[ \\t]+__CONCAT__.*\\n\"\n+                \"(/\\*.*\\*/)\\n\"\n+                \"#define[ \\t]+UINT16_C\\\\(c\\\\)[ \\t]+__CONCAT__.*\";\n+    test_text =\n+    '#pragma ident\t\"@(#)int_const.h\t1.5\t04/09/28 SMI\"'\"\\n\"\n+    \"#define\tUINT8_C(c)\t__CONCAT__(c,u)\\n\"\n+    \"/* CSTYLED */\\n\"\n+    \"#define\tUINT16_C(c)\t__CONCAT__(c,u)\";\n+};\n+\n+\n+/*\n+ * Sun Solaris 10 has a version of sys/int_limits.h that defines\n+ * UINT8_MAX and UINT16_MAX to unsigned constants.\n+ */\n+fix = {\n+    hackname  = solaris_int_limits_1;\n+    select    = '@\\(#\\)int_limits.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files     = sys/int_limits.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#define\\tUINT8_MAX\\t(255)\\n\"\n+                \"#define\\tUINT16_MAX\\t(65535)\";\n+    c_fix_arg = \"^#define[ \\t]+UINT8_MAX[ \\t]+\\\\(255U\\\\)\\n\"\n+                \"#define[ \\t]+UINT16_MAX[ \\t]+\\\\(65535U\\\\)\";\n+    test_text =\n+    '#pragma ident\t\"@(#)int_limits.h\t1.9\t04/09/28 SMI\"'\"\\n\"\n+    \"#define\tUINT8_MAX\t(255U)\\n\"\n+    \"#define\tUINT16_MAX\t(65535U)\";\n+};\n+\n+\n+/*\n+ * Sun Solaris 10 has a version of sys/int_limits.h that defines\n+ * INT_FAST16 limits to wrong values for sys/int_types.h.\n+ */\n+fix = {\n+    hackname  = solaris_int_limits_2;\n+    select    = '@\\(#\\)int_limits.h' \"[ \\t]+1.[0-9]+[ \\t]+[0-9/]+ SMI\";\n+    files     = sys/int_limits.h;\n+    c_fix     = format;\n+    c_fix_arg = \"#define\\t%1_FAST16_%2 %132_%2\";\n+    c_fix_arg = \"^#define[ \\t]+(INT|UINT)_FAST16_(MAX|MIN)[ \\t](INT|UINT)16.*\";\n+    test_text =\n+    '#pragma ident\t\"@(#)int_limits.h\t1.9\t04/09/28 SMI\"'\"\\n\"\n+    \"#define\tINT_FAST16_MAX INT16_MAX\\n\"\n+    \"#define\tUINT_FAST16_MAX UINT16_MAX\\n\"\n+    \"#define\tINT_FAST16_MIN\tINT16_MIN\";\n+};\n+\n+\n /*\n  * Solaris 2.8 has what appears to be some gross workaround for \n  * some old version of their c++ compiler.  G++ doesn't want it"}, {"sha": "7aeb52a79cec3e0aa159d2c585c0a5550e655f79", "filename": "fixincludes/tests/base/sys/int_const.h", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_const.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_const.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_const.h?ref=b0999b01149d3b429c78b98a7c24dd6f9652c08c", "patch": "@@ -0,0 +1,17 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/sys/int_const.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_INT_CONST_CHECK )\n+#pragma ident\t\"@(#)int_const.h\t1.5\t04/09/28 SMI\"\n+#define\tUINT8_C(c)\t(c)\n+/* CSTYLED */\n+#define\tUINT16_C(c)\t(c)\n+#endif  /* SOLARIS_INT_CONST_CHECK */"}, {"sha": "19acbe50a4666e10e34d0ba3f39a3da43defb5ca", "filename": "fixincludes/tests/base/sys/int_limits.h", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_limits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0999b01149d3b429c78b98a7c24dd6f9652c08c/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_limits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/fixincludes%2Ftests%2Fbase%2Fsys%2Fint_limits.h?ref=b0999b01149d3b429c78b98a7c24dd6f9652c08c", "patch": "@@ -0,0 +1,24 @@\n+/*  DO NOT EDIT THIS FILE.\n+\n+    It has been auto-edited by fixincludes from:\n+\n+\t\"fixinc/tests/inc/sys/int_limits.h\"\n+\n+    This had to be done to correct non-standard usages in the\n+    original, manufacturer supplied header file.  */\n+\n+\n+\n+#if defined( SOLARIS_INT_LIMITS_1_CHECK )\n+#pragma ident\t\"@(#)int_limits.h\t1.9\t04/09/28 SMI\"\n+#define\tUINT8_MAX\t(255)\n+#define\tUINT16_MAX\t(65535)\n+#endif  /* SOLARIS_INT_LIMITS_1_CHECK */\n+\n+\n+#if defined( SOLARIS_INT_LIMITS_2_CHECK )\n+#pragma ident\t\"@(#)int_limits.h\t1.9\t04/09/28 SMI\"\n+#define\tINT_FAST16_MAX INT32_MAX\n+#define\tUINT_FAST16_MAX UINT32_MAX\n+#define\tINT_FAST16_MIN INT32_MIN\n+#endif  /* SOLARIS_INT_LIMITS_2_CHECK */"}]}