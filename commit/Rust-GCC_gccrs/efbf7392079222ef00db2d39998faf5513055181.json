{"sha": "efbf7392079222ef00db2d39998faf5513055181", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZiZjczOTIwNzkyMjJlZjAwZGIyZDM5OTk4ZmFmNTUxMzA1NTE4MQ==", "commit": {"author": {"name": "Linus Koenig", "email": "link@sig-st.de", "date": "2020-04-13T14:30:44Z"}, "committer": {"name": "Thomas K\u00f6nig", "email": "tkoenig@gcc.gnu.org", "date": "2020-04-13T14:32:38Z"}, "message": "ICE on wrong code [PR94192].\n\nThe idea is not have another resolution of a pointer if an error has\noccurred previously.\n\n2020-04-13  Linus Koenig <link@sig-st.de>\n\n\tPR fortran/94192\n\t* resolve.c (resolve_fl_var_and_proc): Set flag \"error\" to 1 if\n\tpointer is found to not have an assumed rank or a deferred shape.\n\t* simplify.c (simplify_bound): If an error has been issued for a\n\tgiven pointer, one should not attempt to find its bounds.\n\n2020-04-13  Linus Koenig <link@sig-st.de>\n\n\tPR fortran/94192\n\t* gfortran.dg/bound_resolve_after_error_1.f90: New test.", "tree": {"sha": "0a4017806092556e4a00f0199d04f98abd8883da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a4017806092556e4a00f0199d04f98abd8883da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efbf7392079222ef00db2d39998faf5513055181", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf7392079222ef00db2d39998faf5513055181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efbf7392079222ef00db2d39998faf5513055181", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efbf7392079222ef00db2d39998faf5513055181/comments", "author": null, "committer": null, "parents": [{"sha": "8d213cbbe1856e6088282aa0076646cec694b030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d213cbbe1856e6088282aa0076646cec694b030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d213cbbe1856e6088282aa0076646cec694b030"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "96835dea4bf4f95ab024b2673742d40474fbc066", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=efbf7392079222ef00db2d39998faf5513055181", "patch": "@@ -1,3 +1,11 @@\n+2020-04-13  Linus Koenig <link@sig-st.de>\n+\n+\tPR fortran/94192\n+\t* resolve.c (resolve_fl_var_and_proc): Set flag \"error\" to 1 if\n+\tpointer is found to not have an assumed rank or a deferred shape.\n+\t* simplify.c (simplify_bound): If an error has been issued for a\n+\tgiven pointer, one should not attempt to find its bounds.\n+\n 2020-04-09  Fritz Reese  <foreese@gcc.gnu.org>\n \n \tPR fortran/87923"}, {"sha": "9b95200c241aa35f79067028d56a0c211398a652", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=efbf7392079222ef00db2d39998faf5513055181", "patch": "@@ -12622,6 +12622,7 @@ resolve_fl_var_and_proc (gfc_symbol *sym, int mp_flag)\n \t{\n \t  gfc_error (\"Array pointer %qs at %L must have a deferred shape or \"\n \t\t     \"assumed rank\", sym->name, &sym->declared_at);\n+\t  sym->error = 1;\n \t  return false;\n \t}\n     }"}, {"sha": "807565b4e80d932f3697771a26f1f077c9ace0c9", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=efbf7392079222ef00db2d39998faf5513055181", "patch": "@@ -4159,6 +4159,10 @@ simplify_bound (gfc_expr *array, gfc_expr *dim, gfc_expr *kind, int upper)\n   gfc_array_spec *as;\n   int d;\n \n+  /* Do not attempt to resolve if error has already been issued.  */\n+  if (array->symtree && array->symtree->n.sym->error)\n+    return NULL;\n+\n   if (array->ts.type == BT_CLASS)\n     return NULL;\n "}, {"sha": "3c3352f5c8be39449cd2df5edbc5536b18714e04", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efbf7392079222ef00db2d39998faf5513055181", "patch": "@@ -1,3 +1,8 @@\n+2020-04-13  Linus Koenig <link@sig-st.de>\n+\n+\tPR fortran/94192\n+\t* gfortran.dg/bound_resolve_after_error_1.f90: New test.\n+\n 2020-04-13  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/94426"}, {"sha": "35cc2405a8d9138240740407aed9a6e4b9b01e6a", "filename": "gcc/testsuite/gfortran.dg/bound_resolve_after_error_1.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_resolve_after_error_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efbf7392079222ef00db2d39998faf5513055181/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_resolve_after_error_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbound_resolve_after_error_1.f90?ref=efbf7392079222ef00db2d39998faf5513055181", "patch": "@@ -0,0 +1,13 @@\n+! Testcase for bound check after issued error\n+! See PR 94192\n+! { dg-do compile }\n+program bound_for_illegal\n+  \n+contains\n+\n+  subroutine bnds(a)  ! { dg-error \"must have a deferred shape or assumed rank\" }\n+    integer, pointer, intent(in) :: a(1:2)\n+    print *,lbound(a)\n+  end subroutine bnds\n+\n+end program bound_for_illegal"}]}