{"sha": "a072d43b461d44cfe1b36106c173484b246c297e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA3MmQ0M2I0NjFkNDRjZmUxYjM2MTA2YzE3MzQ4NGIyNDZjMjk3ZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@kss-loka.si", "date": "2004-04-14T02:37:29Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2004-04-14T02:37:29Z"}, "message": "optabs.c (expand_twoval_unop): Reorder function arguments.\n\n2004-04-13  Uros Bizjak  <uros@kss-loka.si>:\n\n\t* optabs.c (expand_twoval_unop): Reorder function arguments.\n\t* builtins.c (expand_builtin_mathfn_3): Update calls to\n\texpand_twoval_unop.\n\n\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_TAN_ONE\n\tand UNSPEC_TAN_TAN. Add missing comment.\n\n\t* config/i386/i386.md (*tandf3_1, *tansf3_1, *tanxf3_1): New\n\tpatterns to implement fptan x87 instruction.\n\t(tandf2, tansf2, tanxf2): New expanders to implement tan, tanf\n\tand tanl built-ins as inline x87 intrinsics. Define corresponding\n\tpeephole2 optimizers for 'fptan; fstp %st(0); fld1' sequence.\n\t(UNSPEC_TAN_ONE, UNSPEC_TAN_TAN): New unspecs to represent\n\tx87's fptan insn.\n\n\n\t* gcc.dg/i386-387-1.c: Add new test for __builtin_tan.\n\t* gcc.dg/i386-387-2.c: Likewise.\n\n\t* gcc.dg/i386-387-7.c: New test.\n\t* gcc.dg/i386-387-8.c: New test.\n\n\t* gcc.dg/builtins-37.c: New test.\n\nFrom-SVN: r80677", "tree": {"sha": "f7627b4f4e2d86ef0eb520753d52ac14912ab6c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7627b4f4e2d86ef0eb520753d52ac14912ab6c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a072d43b461d44cfe1b36106c173484b246c297e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a072d43b461d44cfe1b36106c173484b246c297e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a072d43b461d44cfe1b36106c173484b246c297e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a072d43b461d44cfe1b36106c173484b246c297e/comments", "author": null, "committer": null, "parents": [{"sha": "6ef79dcb4e456a228248a17f938f9dac4d8b8986", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef79dcb4e456a228248a17f938f9dac4d8b8986", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef79dcb4e456a228248a17f938f9dac4d8b8986"}], "stats": {"total": 228, "additions": 222, "deletions": 6}, "files": [{"sha": "fc28ce3a26cbee3a0e9535f5ffb45901003bb860", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -1,3 +1,20 @@\n+2004-04-13  Uros Bizjak  <uros@kss-loka.si>:\n+\n+\t* optabs.c (expand_twoval_unop): Reorder function arguments.\n+\t* builtins.c (expand_builtin_mathfn_3): Update calls to\n+\texpand_twoval_unop.\n+\n+\t* reg-stack.c (subst_stack_regs_pat): Handle UNSPEC_TAN_ONE\n+\tand UNSPEC_TAN_TAN. Add missing comment.\n+\n+\t* config/i386/i386.md (*tandf3_1, *tansf3_1, *tanxf3_1): New\n+\tpatterns to implement fptan x87 instruction.\n+\t(tandf2, tansf2, tanxf2): New expanders to implement tan, tanf\n+\tand tanl built-ins as inline x87 intrinsics. Define corresponding\n+\tpeephole2 optimizers for 'fptan; fstp %st(0); fld1' sequence.\n+\t(UNSPEC_TAN_ONE, UNSPEC_TAN_TAN): New unspecs to represent\n+\tx87's fptan insn.\n+\n 2004-03-13  Richard Henderson  <rth@redhat.com>\n \n \t* bb-reorder.c (fix_crossing_unconditional_branches): Use Pmode\n@@ -489,8 +506,8 @@\n \t(sindf2, sinsf2, sinxf2): Rename to *sindf2, *sinsf2, *sinxf2.\n \t(cosdf2, cossf2, cosxf2): Rename to *cosdf2, *cossf2, *cosxf2.\n \n-\t(UNSPEC_SINCOS_SIN, UNPEC_SINCOS_COS): New unspecs to represent\n-\tx87's unspec insn.\n+\t(UNSPEC_SINCOS_SIN, UNSPEC_SINCOS_COS): New unspecs to represent\n+\tx87's fsincos insn.\n \n 2004-04-06  Devang Patel  <dpatel@apple.com>\n "}, {"sha": "fbc1a0023d20c58cd9f7fb7bd21e73bbcb78458e", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -1896,13 +1896,13 @@ expand_builtin_mathfn_3 (tree exp, rtx target, rtx subtarget)\n \t    case BUILT_IN_SIN:\n \t    case BUILT_IN_SINF:\n \t    case BUILT_IN_SINL:\n-\t      if (! expand_twoval_unop(builtin_optab, 0, target, op0, 0))    \n+\t      if (!expand_twoval_unop (builtin_optab, op0, 0, target, 0))    \n \t\tabort();\n \t      break;\n \t    case BUILT_IN_COS:\n \t    case BUILT_IN_COSF:\n \t    case BUILT_IN_COSL:\n-\t      if (! expand_twoval_unop(builtin_optab, target, 0, op0, 0))\n+\t      if (!expand_twoval_unop (builtin_optab, op0, target, 0, 0))\n \t\tabort();\n \t      break;\n \t    default:"}, {"sha": "e4f2cce5fbef4209bffdd4912b4cbc0d4551be37", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -121,8 +121,11 @@\n    (UNSPEC_FRNDINT\t\t68)\n    (UNSPEC_F2XM1\t\t69)\n \n+   ; x87 Double output FP\n    (UNSPEC_SINCOS_COS\t\t80)\n    (UNSPEC_SINCOS_SIN\t\t81)\n+   (UNSPEC_TAN_ONE\t\t82)\n+   (UNSPEC_TAN_TAN\t\t83)\n \n    ; REP instruction\n    (UNSPEC_REP\t\t\t75)\n@@ -15078,6 +15081,132 @@\n   [(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_COS))]\n   \"\")\n \n+(define_insn \"*tandf3_1\"\n+  [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_TAN_ONE))\n+   (set (match_operand:DF 1 \"register_operand\" \"=u\")\n+        (unspec:DF [(match_dup 2)] UNSPEC_TAN_TAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fptan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"DF\")])\n+\n+;; optimize sequence: fptan\n+;;\t\t      fstp    %st(0)\n+;;\t\t      fld1\n+;; into fptan insn.\n+\n+(define_peephole2\n+  [(parallel[(set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t  (unspec:DF [(match_operand:DF 2 \"register_operand\" \"\")]\n+\t\t\t     UNSPEC_TAN_ONE))\n+\t     (set (match_operand:DF 1 \"register_operand\" \"\")\n+\t\t  (unspec:DF [(match_dup 2)] UNSPEC_TAN_TAN))])\n+   (set (match_dup 0)\n+        (match_operand:DF 3 \"immediate_operand\" \"\"))]\n+  \"standard_80387_constant_p (operands[3]) == 2\"\n+  [(parallel[(set (match_dup 0) (unspec:DF [(match_dup 2)] UNSPEC_TAN_ONE))\n+   \t     (set (match_dup 1) (unspec:DF [(match_dup 2)] UNSPEC_TAN_TAN))])]\n+  \"\")\n+\n+(define_expand \"tandf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:DF [(match_operand:DF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_TAN_ONE))\n+\t      (set (match_operand:DF 0 \"register_operand\" \"\")\n+\t\t   (unspec:DF [(match_dup 1)] UNSPEC_TAN_TAN))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (DFmode);\n+})\n+\n+(define_insn \"*tansf3_1\"\n+  [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_TAN_ONE))\n+   (set (match_operand:SF 1 \"register_operand\" \"=u\")\n+        (unspec:SF [(match_dup 2)] UNSPEC_TAN_TAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fptan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"SF\")])\n+\n+;; optimize sequence: fptan\n+;;\t\t      fstp    %st(0)\n+;;\t\t      fld1\n+;; into fptan insn.\n+\n+(define_peephole2\n+  [(parallel[(set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t  (unspec:SF [(match_operand:SF 2 \"register_operand\" \"\")]\n+\t\t\t     UNSPEC_TAN_ONE))\n+\t     (set (match_operand:SF 1 \"register_operand\" \"\")\n+\t\t  (unspec:SF [(match_dup 2)] UNSPEC_TAN_TAN))])\n+   (set (match_dup 0)\n+        (match_operand:SF 3 \"immediate_operand\" \"\"))]\n+  \"standard_80387_constant_p (operands[3]) == 2\"\n+  [(parallel[(set (match_dup 0) (unspec:SF [(match_dup 2)] UNSPEC_TAN_ONE))\n+   \t     (set (match_dup 1) (unspec:SF [(match_dup 2)] UNSPEC_TAN_TAN))])]\n+  \"\")\n+\n+(define_expand \"tansf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:SF [(match_operand:SF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_TAN_ONE))\n+\t      (set (match_operand:SF 0 \"register_operand\" \"\")\n+\t\t   (unspec:SF [(match_dup 1)] UNSPEC_TAN_TAN))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (SFmode);\n+})\n+\n+(define_insn \"*tanxf3_1\"\n+  [(set (match_operand:XF 0 \"register_operand\" \"=f\")\n+\t(unspec:XF [(match_operand:XF 2 \"register_operand\" \"0\")]\n+\t\t   UNSPEC_TAN_ONE))\n+   (set (match_operand:XF 1 \"register_operand\" \"=u\")\n+        (unspec:XF [(match_dup 2)] UNSPEC_TAN_TAN))]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+  \"fptan\"\n+  [(set_attr \"type\" \"fpspc\")\n+   (set_attr \"mode\" \"XF\")])\n+\n+;; optimize sequence: fptan\n+;;\t\t      fstp    %st(0)\n+;;\t\t      fld1\n+;; into fptan insn.\n+\n+(define_peephole2\n+  [(parallel[(set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t  (unspec:XF [(match_operand:XF 2 \"register_operand\" \"\")]\n+\t\t\t     UNSPEC_TAN_ONE))\n+\t     (set (match_operand:XF 1 \"register_operand\" \"\")\n+\t\t  (unspec:XF [(match_dup 2)] UNSPEC_TAN_TAN))])\n+   (set (match_dup 0)\n+        (match_operand:XF 3 \"immediate_operand\" \"\"))]\n+  \"standard_80387_constant_p (operands[3]) == 2\"\n+  [(parallel[(set (match_dup 0) (unspec:XF [(match_dup 2)] UNSPEC_TAN_ONE))\n+   \t     (set (match_dup 1) (unspec:XF [(match_dup 2)] UNSPEC_TAN_TAN))])]\n+  \"\")\n+\n+(define_expand \"tanxf2\"\n+  [(parallel [(set (match_dup 2)\n+\t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\" \"\")]\n+\t\t\t      UNSPEC_TAN_ONE))\n+\t      (set (match_operand:XF 0 \"register_operand\" \"\")\n+\t\t   (unspec:XF [(match_dup 1)] UNSPEC_TAN_TAN))])]\n+  \"! TARGET_NO_FANCY_MATH_387 && TARGET_80387 \n+   && flag_unsafe_math_optimizations\"\n+{\n+  operands[2] = gen_reg_rtx (XFmode);\n+})\n+\n (define_insn \"atan2df3_1\"\n   [(set (match_operand:DF 0 \"register_operand\" \"=f\")\n \t(unspec:DF [(match_operand:DF 2 \"register_operand\" \"0\")"}, {"sha": "51e1e7072935f78d8312965d3c475731cd9aa6e1", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -2159,7 +2159,7 @@ sign_expand_binop (enum machine_mode mode, optab uoptab, optab soptab,\n    Returns 1 if this operation can be performed; 0 if not.  */\n \n int\n-expand_twoval_unop (optab unoptab, rtx targ0, rtx targ1, rtx op0,\n+expand_twoval_unop (optab unoptab, rtx op0, rtx targ0, rtx targ1,\n \t\t    int unsignedp)\n {\n   enum machine_mode mode = GET_MODE (targ0 ? targ0 : targ1);\n@@ -2234,7 +2234,7 @@ expand_twoval_unop (optab unoptab, rtx targ0, rtx targ1, rtx op0,\n \t      rtx t1 = gen_reg_rtx (wider_mode);\n \t      rtx cop0 = convert_modes (wider_mode, mode, op0, unsignedp);\n \n-\t      if (expand_twoval_unop (unoptab, t0, t1, cop0, unsignedp))\n+\t      if (expand_twoval_unop (unoptab, cop0, t0, t1, unsignedp))\n \t\t{\n \t\t  convert_move (targ0, t0, unsignedp);\n \t\t  convert_move (targ1, t1, unsignedp);"}, {"sha": "5133f713f3f2681cd586030c7a5cf590bf3ce1da", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -1769,6 +1769,7 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tbreak;\n \n \t      case UNSPEC_SINCOS_COS:\n+\t      case UNSPEC_TAN_ONE:\n \t\t/* These insns operate on the top two stack slots,\n \t\t   first part of one input, double output insn.  */\n \n@@ -1796,6 +1797,10 @@ subst_stack_regs_pat (rtx insn, stack regstack, rtx pat)\n \t\tbreak;\n \n \t      case UNSPEC_SINCOS_SIN:\n+\t      case UNSPEC_TAN_TAN:\n+\t\t/* These insns operate on the top two stack slots,\n+\t\t   second part of one input, double output insn.  */\n+\n \t\tsrc1 = get_true_reg (&XVECEXP (pat_src, 0, 0));\n \n \t\temit_swap_insn (insn, regstack, *src1);"}, {"sha": "178d8157c916745cba4b3ba3e581127308ad116f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -1,3 +1,13 @@\n+2004-04-13  Uros Bizjak  <uros@kss-loka.si>:\n+\n+\t* gcc.dg/i386-387-1.c: Add new test for __builtin_tan.\n+\t* gcc.dg/i386-387-2.c: Likewise.\n+\n+\t* gcc.dg/i386-387-7.c: New test.\n+\t* gcc.dg/i386-387-8.c: New test.\n+\n+\t* gcc.dg/builtins-37.c: New test.\n+\n 2004-04-13  Geoffrey Keating  <geoffk@apple.com>\n \n \t* g++.dg/pch/externc-1.C: Add missing semicolon."}, {"sha": "e366a6ac552b78b462ad9f905bb9dd0248547934", "filename": "gcc/testsuite/gcc.dg/builtins-37.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-37.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-37.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-37.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -0,0 +1,29 @@\n+/* Copyright (C) 2004 Free Software Foundation.\n+\n+   Check tan, tanf and tanl built-in functions.\n+\n+   Written by Uros Bizjak, 7th April 2004.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ffast-math\" } */\n+\n+extern double tan(double);\n+extern float tanf(float);\n+extern long double tanl(long double);\n+\n+\n+double test1(double x)\n+{\n+  return tan(x);\n+}\n+\n+float test1f(float x)\n+{\n+  return tanf(x);\n+}\n+\n+long double test1l(long double x)\n+{\n+  return tanl(x);\n+}\n+"}, {"sha": "c196f2dc3e5e54e2385d7b09724e844c694e429d", "filename": "gcc/testsuite/gcc.dg/i386-387-1.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-1.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -7,10 +7,12 @@\n /* { dg-final { scan-assembler \"call\\t_?atan2\" } } */\n /* { dg-final { scan-assembler \"call\\t_?log\" } } */\n /* { dg-final { scan-assembler \"call\\t_?exp\" } } */\n+/* { dg-final { scan-assembler \"call\\t_?tan\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n double f5(double x) { return __builtin_log(x); }\n double f6(double x) { return __builtin_exp(x); }\n+double f7(double x) { return __builtin_tan(x); }"}, {"sha": "f98e04accd1a8e4d9243b6cfdaf3b7bcabcd1fc6", "filename": "gcc/testsuite/gcc.dg/i386-387-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-2.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -7,10 +7,12 @@\n /* { dg-final { scan-assembler \"fpatan\" } } */\n /* { dg-final { scan-assembler \"fyl2x\" } } */\n /* { dg-final { scan-assembler \"f2xm1\" } } */\n+/* { dg-final { scan-assembler \"fptan\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }\n double f3(double x) { return __builtin_sqrt(x); }\n double f4(double x, double y) { return __builtin_atan2(x,y); }\n double f5(double x) { return __builtin_log(x); }\n double f6(double x) { return __builtin_exp(x); }\n+double f7(double x) { return __builtin_tan(x); }"}, {"sha": "43c916c61d058b7cf30a5865cdc32f36557827ce", "filename": "gcc/testsuite/gcc.dg/i386-387-7.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-7.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -0,0 +1,10 @@\n+/* Verify that 387 fsincos instruction is generated.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O -ffast-math -march=i686\" } */\n+/* { dg-final { scan-assembler \"fsincos\" } } */\n+\n+double f1(double x)\n+{\n+  return sin(x) + cos (x);\n+}\n+"}, {"sha": "05787160b005008471fa67fdcfe73db669c5c8b6", "filename": "gcc/testsuite/gcc.dg/i386-387-8.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a072d43b461d44cfe1b36106c173484b246c297e/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fi386-387-8.c?ref=a072d43b461d44cfe1b36106c173484b246c297e", "patch": "@@ -0,0 +1,12 @@\n+/* Verify that 387 fptan instruction is generated. Also check fptan\n+   peephole2 optimizer.  */\n+/* { dg-do compile { target \"i?86-*-*\" } } */\n+/* { dg-options \"-O2 -ffast-math -march=i686\" } */\n+/* { dg-final { scan-assembler \"fptan\" } } */\n+/* { dg-final { scan-assembler-not \"fld1\" } } */\n+\n+double f1(double x)\n+{\n+  return 1.0 / tan(x);\n+}\n+"}]}