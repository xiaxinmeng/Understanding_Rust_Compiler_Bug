{"sha": "8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODE0OGZlNjU2ZDA2ZTEyYzVkMzRlOGZhNTZlMjNlZTdlYjlkNTg0MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-05-03T22:22:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-05-03T22:22:02Z"}, "message": "re PR middle-end/21265 (GCC fails to optimize tail call to memset)\n\n\tPR middle-end/21265\n\t* expr.h (enum block_op_methods): Add BLOCK_OP_TAILCALL.\n\t(clear_storage): Add argument.\n\t* expr.c (emit_block_move_via_libcall, clear_storage_via_libcall):\n\tAdd tailcall argument, set CALL_EXPR_TAILCALL of the CALL_EXPR to\n\ttailcall.\n\t(emit_block_move): Handle BLOCK_OP_TAILCALL method.\n\t(clear_storage): Add method argument, handle BLOCK_OP_TAILCALL.\n\t(store_expr, store_constructor): Adjust callers.\n\t* builtins.c (expand_builtin_memcpy): Pass BLOCK_OP_TAILCALL\n\tto emit_block_move if CALL_EXPR_TAILCALL (exp).\n\t(expand_builtin_memmove): Add ORIG_EXP argument, copy\n\tCALL_EXPR_TAILCALL from ORIG_EXP to the new CALL_EXPR.\n\t(expand_builtin_bcopy): Replace ARGLIST and TYPE arguments\n\twith EXP.  Pass EXP to expand_builtin_memmove.\n\t(expand_builtin_memset): Add ORIG_EXP argument, pass\n\tBLOCK_OP_TAILCALL to clear_storage if CALL_EXPR_TAILCALL (orig_exp).\n\t(expand_builtin_bzero): Replace ARGLIST argument with EXP.\n\tPass EXP to expand_builtin_memset.\n\t(expand_builtin_strcmp): Copy CALL_EXPR_TAILCALL from EXP to\n\tthe new CALL_EXPR.\n\t(expand_builtin_strncmp): Likewise.\n\t(expand_builtin_printf): Replace ARGLIST argument with EXP.\n\tCopy CALL_EXPR_TAILCALL from EXP to the new CALL_EXPR.\n\t(expand_builtin_fprintf): Likewise.\n\t(expand_builtin): Adjust calls to\n\texpand_builtin_{memmove,bcopy,memset,bzero,{,f}printf}.\n\n\t* gcc.dg/20050503-1.c: New test.\n\nFrom-SVN: r99187", "tree": {"sha": "4366b13e06448d5bee414e03f73b1dc515a238a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4366b13e06448d5bee414e03f73b1dc515a238a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "125886c749998b8f2bd8a49de7350755e92db718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/125886c749998b8f2bd8a49de7350755e92db718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/125886c749998b8f2bd8a49de7350755e92db718"}], "stats": {"total": 209, "additions": 159, "deletions": 50}, "files": [{"sha": "aac45faaf1d072dde5124f777ab8260a33cab2ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -1,5 +1,33 @@\n 2005-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/21265\n+\t* expr.h (enum block_op_methods): Add BLOCK_OP_TAILCALL.\n+\t(clear_storage): Add argument.\n+\t* expr.c (emit_block_move_via_libcall, clear_storage_via_libcall):\n+\tAdd tailcall argument, set CALL_EXPR_TAILCALL of the CALL_EXPR to\n+\ttailcall.\n+\t(emit_block_move): Handle BLOCK_OP_TAILCALL method.\n+\t(clear_storage): Add method argument, handle BLOCK_OP_TAILCALL.\n+\t(store_expr, store_constructor): Adjust callers.\n+\t* builtins.c (expand_builtin_memcpy): Pass BLOCK_OP_TAILCALL\n+\tto emit_block_move if CALL_EXPR_TAILCALL (exp).\n+\t(expand_builtin_memmove): Add ORIG_EXP argument, copy\n+\tCALL_EXPR_TAILCALL from ORIG_EXP to the new CALL_EXPR.\n+\t(expand_builtin_bcopy): Replace ARGLIST and TYPE arguments\n+\twith EXP.  Pass EXP to expand_builtin_memmove.\n+\t(expand_builtin_memset): Add ORIG_EXP argument, pass\n+\tBLOCK_OP_TAILCALL to clear_storage if CALL_EXPR_TAILCALL (orig_exp).\n+\t(expand_builtin_bzero): Replace ARGLIST argument with EXP.\n+\tPass EXP to expand_builtin_memset.\n+\t(expand_builtin_strcmp): Copy CALL_EXPR_TAILCALL from EXP to\n+\tthe new CALL_EXPR.\n+\t(expand_builtin_strncmp): Likewise.\n+\t(expand_builtin_printf): Replace ARGLIST argument with EXP.\n+\tCopy CALL_EXPR_TAILCALL from EXP to the new CALL_EXPR.\n+\t(expand_builtin_fprintf): Likewise.\n+\t(expand_builtin): Adjust calls to\n+\texpand_builtin_{memmove,bcopy,memset,bzero,{,f}printf}.\n+\n \t* config/i386/i386.c (ix86_expand_vector_set): Fix setting 3rd and 4th\n \titem in V4SF mode.\n "}, {"sha": "8d4fc3379fd8d5c92497375347e75c3362ced0cf", "filename": "gcc/builtins.c", "status": "modified", "additions": 56, "deletions": 36, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -111,15 +111,15 @@ static rtx expand_builtin_strspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strcspn (tree, rtx, enum machine_mode);\n static rtx expand_builtin_memcpy (tree, rtx, enum machine_mode);\n static rtx expand_builtin_mempcpy (tree, tree, rtx, enum machine_mode, int);\n-static rtx expand_builtin_memmove (tree, tree, rtx, enum machine_mode);\n-static rtx expand_builtin_bcopy (tree, tree);\n+static rtx expand_builtin_memmove (tree, tree, rtx, enum machine_mode, tree);\n+static rtx expand_builtin_bcopy (tree);\n static rtx expand_builtin_strcpy (tree, rtx, enum machine_mode);\n static rtx expand_builtin_stpcpy (tree, rtx, enum machine_mode);\n static rtx builtin_strncpy_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx expand_builtin_strncpy (tree, rtx, enum machine_mode);\n static rtx builtin_memset_read_str (void *, HOST_WIDE_INT, enum machine_mode);\n static rtx builtin_memset_gen_str (void *, HOST_WIDE_INT, enum machine_mode);\n-static rtx expand_builtin_memset (tree, rtx, enum machine_mode);\n+static rtx expand_builtin_memset (tree, rtx, enum machine_mode, tree);\n static rtx expand_builtin_bzero (tree);\n static rtx expand_builtin_strlen (tree, rtx, enum machine_mode);\n static rtx expand_builtin_strstr (tree, tree, rtx, enum machine_mode);\n@@ -2808,7 +2808,8 @@ expand_builtin_memcpy (tree exp, rtx target, enum machine_mode mode)\n \n       /* Copy word part most expediently.  */\n       dest_addr = emit_block_move (dest_mem, src_mem, len_rtx,\n-\t\t\t\t   BLOCK_OP_NORMAL);\n+\t\t\t\t   CALL_EXPR_TAILCALL (exp)\n+\t\t\t\t   ? BLOCK_OP_TAILCALL : BLOCK_OP_NORMAL);\n \n       if (dest_addr == 0)\n \t{\n@@ -2915,7 +2916,7 @@ expand_builtin_mempcpy (tree arglist, tree type, rtx target, enum machine_mode m\n \n static rtx\n expand_builtin_memmove (tree arglist, tree type, rtx target,\n-\t\t\tenum machine_mode mode)\n+\t\t\tenum machine_mode mode, tree orig_exp)\n {\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -2947,11 +2948,13 @@ expand_builtin_memmove (tree arglist, tree type, rtx target,\n \t normal memcpy.  */\n       if (readonly_data_expr (src))\n         {\n-\t  tree const fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n+\t  tree fn = implicit_built_in_decls[BUILT_IN_MEMCPY];\n \t  if (!fn)\n \t    return 0;\n-\t  return expand_expr (build_function_call_expr (fn, arglist),\n-\t\t\t      target, mode, EXPAND_NORMAL);\n+\t  fn = build_function_call_expr (fn, arglist);\n+\t  if (TREE_CODE (fn) == CALL_EXPR)\n+\t    CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (orig_exp);\n+\t  return expand_expr (fn, target, mode, EXPAND_NORMAL);\n \t}\n \n       /* If length is 1 and we can expand memcpy call inline,\n@@ -2973,8 +2976,10 @@ expand_builtin_memmove (tree arglist, tree type, rtx target,\n    if we failed the caller should emit a normal call.  */\n \n static rtx\n-expand_builtin_bcopy (tree arglist, tree type)\n+expand_builtin_bcopy (tree exp)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n+  tree type = TREE_TYPE (exp);\n   tree src, dest, size, newarglist;\n \n   if (!validate_arglist (arglist,\n@@ -2994,7 +2999,7 @@ expand_builtin_bcopy (tree arglist, tree type)\n   newarglist = tree_cons (NULL_TREE, src, newarglist);\n   newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n-  return expand_builtin_memmove (newarglist, type, const0_rtx, VOIDmode);\n+  return expand_builtin_memmove (newarglist, type, const0_rtx, VOIDmode, exp);\n }\n \n #ifndef HAVE_movstr\n@@ -3288,7 +3293,8 @@ builtin_memset_gen_str (void *data, HOST_WIDE_INT offset ATTRIBUTE_UNUSED,\n    convenient).  */\n \n static rtx\n-expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n+expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode,\n+\t\t       tree orig_exp)\n {\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, INTEGER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -3374,7 +3380,9 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n \n       dest_mem = get_memory_rtx (dest);\n       set_mem_align (dest_mem, dest_align);\n-      dest_addr = clear_storage (dest_mem, len_rtx);\n+      dest_addr = clear_storage (dest_mem, len_rtx,\n+\t\t\t\t CALL_EXPR_TAILCALL (orig_exp)\n+\t\t\t\t ? BLOCK_OP_TAILCALL : BLOCK_OP_NORMAL);\n \n       if (dest_addr == 0)\n \t{\n@@ -3390,8 +3398,9 @@ expand_builtin_memset (tree arglist, rtx target, enum machine_mode mode)\n    if we failed the caller should emit a normal call.  */\n \n static rtx\n-expand_builtin_bzero (tree arglist)\n+expand_builtin_bzero (tree exp)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n   tree dest, size, newarglist;\n \n   if (!validate_arglist (arglist, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -3409,7 +3418,7 @@ expand_builtin_bzero (tree arglist)\n   newarglist = tree_cons (NULL_TREE, integer_zero_node, newarglist);\n   newarglist = tree_cons (NULL_TREE, dest, newarglist);\n \n-  return expand_builtin_memset (newarglist, const0_rtx, VOIDmode);\n+  return expand_builtin_memset (newarglist, const0_rtx, VOIDmode, exp);\n }\n \n /* Expand expression EXP, which is a call to the memcmp built-in function.\n@@ -3548,7 +3557,7 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n     tree len, len1, len2;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result, insn;\n-    tree fndecl;\n+    tree fndecl, fn;\n \n     int arg1_align\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -3632,8 +3641,10 @@ expand_builtin_strcmp (tree exp, rtx target, enum machine_mode mode)\n     arglist = build_tree_list (NULL_TREE, arg2);\n     arglist = tree_cons (NULL_TREE, arg1, arglist);\n     fndecl = get_callee_fndecl (exp);\n-    exp = build_function_call_expr (fndecl, arglist);\n-    return expand_call (exp, target, target == const0_rtx);\n+    fn = build_function_call_expr (fndecl, arglist);\n+    if (TREE_CODE (fn) == CALL_EXPR)\n+      CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n+    return expand_call (fn, target, target == const0_rtx);\n   }\n #endif\n   return 0;\n@@ -3670,7 +3681,7 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n     tree len, len1, len2;\n     rtx arg1_rtx, arg2_rtx, arg3_rtx;\n     rtx result, insn;\n-    tree fndecl;\n+    tree fndecl, fn;\n \n     int arg1_align\n       = get_pointer_alignment (arg1, BIGGEST_ALIGNMENT) / BITS_PER_UNIT;\n@@ -3760,8 +3771,10 @@ expand_builtin_strncmp (tree exp, rtx target, enum machine_mode mode)\n     arglist = tree_cons (NULL_TREE, arg2, arglist);\n     arglist = tree_cons (NULL_TREE, arg1, arglist);\n     fndecl = get_callee_fndecl (exp);\n-    exp = build_function_call_expr (fndecl, arglist);\n-    return expand_call (exp, target, target == const0_rtx);\n+    fn = build_function_call_expr (fndecl, arglist);\n+    if (TREE_CODE (fn) == CALL_EXPR)\n+      CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n+    return expand_call (fn, target, target == const0_rtx);\n   }\n #endif\n   return 0;\n@@ -4693,15 +4706,16 @@ build_string_literal (int len, const char *str)\n   return t;\n }\n \n-/* Expand a call to printf or printf_unlocked with argument list ARGLIST.\n+/* Expand EXP, a call to printf or printf_unlocked.\n    Return 0 if a normal call should be emitted rather than transforming\n    the function inline.  If convenient, the result should be placed in\n    TARGET with mode MODE.  UNLOCKED indicates this is a printf_unlocked\n    call.  */\n static rtx\n-expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n+expand_builtin_printf (tree exp, rtx target, enum machine_mode mode,\n \t\t       bool unlocked)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n   tree fn_putchar = unlocked\n \t\t    ? implicit_built_in_decls[BUILT_IN_PUTCHAR_UNLOCKED]\n \t\t    : implicit_built_in_decls[BUILT_IN_PUTCHAR];\n@@ -4792,19 +4806,22 @@ expand_builtin_printf (tree arglist, rtx target, enum machine_mode mode,\n \n   if (!fn)\n     return 0;\n-  return expand_expr (build_function_call_expr (fn, arglist),\n-\t\t      target, mode, EXPAND_NORMAL);\n+  fn = build_function_call_expr (fn, arglist);\n+  if (TREE_CODE (fn) == CALL_EXPR)\n+    CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n+  return expand_expr (fn, target, mode, EXPAND_NORMAL);\n }\n \n-/* Expand a call to fprintf or fprintf_unlocked with argument list ARGLIST.\n+/* Expand EXP, a call to fprintf or fprintf_unlocked.\n    Return 0 if a normal call should be emitted rather than transforming\n    the function inline.  If convenient, the result should be placed in\n    TARGET with mode MODE.  UNLOCKED indicates this is a fprintf_unlocked\n    call.  */\n static rtx\n-expand_builtin_fprintf (tree arglist, rtx target, enum machine_mode mode,\n+expand_builtin_fprintf (tree exp, rtx target, enum machine_mode mode,\n \t\t        bool unlocked)\n {\n+  tree arglist = TREE_OPERAND (exp, 1);\n   tree fn_fputc = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTC_UNLOCKED]\n \t\t\t   : implicit_built_in_decls[BUILT_IN_FPUTC];\n   tree fn_fputs = unlocked ? implicit_built_in_decls[BUILT_IN_FPUTS_UNLOCKED]\n@@ -4886,8 +4903,10 @@ expand_builtin_fprintf (tree arglist, rtx target, enum machine_mode mode,\n \n   if (!fn)\n     return 0;\n-  return expand_expr (build_function_call_expr (fn, arglist),\n-\t\t      target, mode, EXPAND_NORMAL);\n+  fn = build_function_call_expr (fn, arglist);\n+  if (TREE_CODE (fn) == CALL_EXPR)\n+    CALL_EXPR_TAILCALL (fn) = CALL_EXPR_TAILCALL (exp);\n+  return expand_expr (fn, target, mode, EXPAND_NORMAL);\n }\n \n /* Expand a call to sprintf with argument list ARGLIST.  Return 0 if\n@@ -5850,25 +5869,26 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_MEMMOVE:\n-      target = expand_builtin_memmove (arglist, TREE_TYPE (exp), target, mode);\n+      target = expand_builtin_memmove (arglist, TREE_TYPE (exp), target,\n+\t\t\t\t       mode, exp);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_BCOPY:\n-      target = expand_builtin_bcopy (arglist, TREE_TYPE (exp));\n+      target = expand_builtin_bcopy (exp);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_MEMSET:\n-      target = expand_builtin_memset (arglist, target, mode);\n+      target = expand_builtin_memset (arglist, target, mode, exp);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_BZERO:\n-      target = expand_builtin_bzero (arglist);\n+      target = expand_builtin_bzero (exp);\n       if (target)\n \treturn target;\n       break;\n@@ -5945,13 +5965,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       return const0_rtx;\n \n     case BUILT_IN_PRINTF:\n-      target = expand_builtin_printf (arglist, target, mode, false);\n+      target = expand_builtin_printf (exp, target, mode, false);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_PRINTF_UNLOCKED:\n-      target = expand_builtin_printf (arglist, target, mode, true);\n+      target = expand_builtin_printf (exp, target, mode, true);\n       if (target)\n \treturn target;\n       break;\n@@ -5968,13 +5988,13 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n       break;\n \n     case BUILT_IN_FPRINTF:\n-      target = expand_builtin_fprintf (arglist, target, mode, false);\n+      target = expand_builtin_fprintf (exp, target, mode, false);\n       if (target)\n \treturn target;\n       break;\n \n     case BUILT_IN_FPRINTF_UNLOCKED:\n-      target = expand_builtin_fprintf (arglist, target, mode, true);\n+      target = expand_builtin_fprintf (exp, target, mode, true);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "12fa129fb85fd472645497bb4f9d36eebcf4174e", "filename": "gcc/expr.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -126,7 +126,7 @@ static void move_by_pieces_1 (rtx (*) (rtx, ...), enum machine_mode,\n \t\t\t      struct move_by_pieces *);\n static bool block_move_libcall_safe_for_call_parm (void);\n static bool emit_block_move_via_movmem (rtx, rtx, rtx, unsigned);\n-static rtx emit_block_move_via_libcall (rtx, rtx, rtx);\n+static rtx emit_block_move_via_libcall (rtx, rtx, rtx, bool);\n static tree emit_block_move_libcall_fn (int);\n static void emit_block_move_via_loop (rtx, rtx, rtx, unsigned);\n static rtx clear_by_pieces_1 (void *, HOST_WIDE_INT, enum machine_mode);\n@@ -135,7 +135,7 @@ static void store_by_pieces_1 (struct store_by_pieces *, unsigned int);\n static void store_by_pieces_2 (rtx (*) (rtx, ...), enum machine_mode,\n \t\t\t       struct store_by_pieces *);\n static bool clear_storage_via_clrmem (rtx, rtx, unsigned);\n-static rtx clear_storage_via_libcall (rtx, rtx);\n+static rtx clear_storage_via_libcall (rtx, rtx, bool);\n static tree clear_storage_libcall_fn (int);\n static rtx compress_float_constant (rtx, rtx);\n static rtx get_subtarget (rtx);\n@@ -1148,6 +1148,7 @@ emit_block_move (rtx x, rtx y, rtx size, enum block_op_methods method)\n   switch (method)\n     {\n     case BLOCK_OP_NORMAL:\n+    case BLOCK_OP_TAILCALL:\n       may_use_call = true;\n       break;\n \n@@ -1196,7 +1197,8 @@ emit_block_move (rtx x, rtx y, rtx size, enum block_op_methods method)\n   else if (emit_block_move_via_movmem (x, y, size, align))\n     ;\n   else if (may_use_call)\n-    retval = emit_block_move_via_libcall (x, y, size);\n+    retval = emit_block_move_via_libcall (x, y, size,\n+\t\t\t\t\t  method == BLOCK_OP_TAILCALL);\n   else\n     emit_block_move_via_loop (x, y, size, align);\n \n@@ -1325,7 +1327,7 @@ emit_block_move_via_movmem (rtx x, rtx y, rtx size, unsigned int align)\n    Return the return value from memcpy, 0 otherwise.  */\n \n static rtx\n-emit_block_move_via_libcall (rtx dst, rtx src, rtx size)\n+emit_block_move_via_libcall (rtx dst, rtx src, rtx size, bool tailcall)\n {\n   rtx dst_addr, src_addr;\n   tree call_expr, arg_list, fn, src_tree, dst_tree, size_tree;\n@@ -1367,6 +1369,7 @@ emit_block_move_via_libcall (rtx dst, rtx src, rtx size)\n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t      call_expr, arg_list, NULL_TREE);\n+  CALL_EXPR_TAILCALL (call_expr) = tailcall;\n \n   retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n \n@@ -2427,11 +2430,13 @@ store_by_pieces_2 (rtx (*genfun) (rtx, ...), enum machine_mode mode,\n    its length in bytes.  */\n \n rtx\n-clear_storage (rtx object, rtx size)\n+clear_storage (rtx object, rtx size, enum block_op_methods method)\n {\n   enum machine_mode mode = GET_MODE (object);\n   unsigned int align;\n \n+  gcc_assert (method == BLOCK_OP_NORMAL || method == BLOCK_OP_TAILCALL);\n+\n   /* If OBJECT is not BLKmode and SIZE is the same size as its mode,\n      just move a zero.  Otherwise, do this a piece at a time.  */\n   if (mode != BLKmode\n@@ -2468,7 +2473,8 @@ clear_storage (rtx object, rtx size)\n   else if (clear_storage_via_clrmem (object, size, align))\n     ;\n   else\n-    return clear_storage_via_libcall (object, size);\n+    return clear_storage_via_libcall (object, size,\n+\t\t\t\t      method == BLOCK_OP_TAILCALL);\n \n   return NULL;\n }\n@@ -2533,7 +2539,7 @@ clear_storage_via_clrmem (rtx object, rtx size, unsigned int align)\n    Return the return value of memset, 0 otherwise.  */\n \n static rtx\n-clear_storage_via_libcall (rtx object, rtx size)\n+clear_storage_via_libcall (rtx object, rtx size, bool tailcall)\n {\n   tree call_expr, arg_list, fn, object_tree, size_tree;\n   enum machine_mode size_mode;\n@@ -2566,6 +2572,7 @@ clear_storage_via_libcall (rtx object, rtx size)\n   call_expr = build1 (ADDR_EXPR, build_pointer_type (TREE_TYPE (fn)), fn);\n   call_expr = build3 (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n \t\t      call_expr, arg_list, NULL_TREE);\n+  CALL_EXPR_TAILCALL (call_expr) = tailcall;\n \n   retval = expand_expr (call_expr, NULL_RTX, VOIDmode, 0);\n \n@@ -4305,7 +4312,7 @@ store_expr (tree exp, rtx target, int call_param_p)\n \t\t}\n \n \t      if (size != const0_rtx)\n-\t\tclear_storage (target, size);\n+\t\tclear_storage (target, size, BLOCK_OP_NORMAL);\n \n \t      if (label)\n \t\temit_label (label);\n@@ -4659,7 +4666,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t && ! CONSTRUCTOR_ELTS (exp))\n \t  /* If the constructor is empty, clear the union.  */\n \t  {\n-\t    clear_storage (target, expr_size (exp));\n+\t    clear_storage (target, expr_size (exp), BLOCK_OP_NORMAL);\n \t    cleared = 1;\n \t  }\n \n@@ -4687,7 +4694,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t     || ((HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (target))\n \t\t\t == size)))\n \t  {\n-\t    clear_storage (target, GEN_INT (size));\n+\t    clear_storage (target, GEN_INT (size), BLOCK_OP_NORMAL);\n \t    cleared = 1;\n \t  }\n \n@@ -4887,7 +4894,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    if (REG_P (target))\n \t      emit_move_insn (target,  CONST0_RTX (GET_MODE (target)));\n \t    else\n-\t      clear_storage (target, GEN_INT (size));\n+\t      clear_storage (target, GEN_INT (size), BLOCK_OP_NORMAL);\n \t    cleared = 1;\n \t  }\n \n@@ -5132,7 +5139,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    if (REG_P (target))\n \t      emit_move_insn (target,  CONST0_RTX (GET_MODE (target)));\n \t    else\n-\t      clear_storage (target, GEN_INT (size));\n+\t      clear_storage (target, GEN_INT (size), BLOCK_OP_NORMAL);\n \t    cleared = 1;\n \t  }\n \t"}, {"sha": "267daf0119fa21aab36ad45694ce143d84cc57a0", "filename": "gcc/expr.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -367,7 +367,9 @@ enum block_op_methods\n {\n   BLOCK_OP_NORMAL,\n   BLOCK_OP_NO_LIBCALL,\n-  BLOCK_OP_CALL_PARM\n+  BLOCK_OP_CALL_PARM,\n+  /* Like BLOCK_OP_NORMAL, but the libcall can be tail call optimized.  */\n+  BLOCK_OP_TAILCALL\n };\n \n extern void init_block_move_fn (const char *);\n@@ -419,7 +421,7 @@ extern void use_group_regs (rtx *, rtx);\n \n /* Write zeros through the storage of OBJECT.\n    If OBJECT has BLKmode, SIZE is its length in bytes.  */\n-extern rtx clear_storage (rtx, rtx);\n+extern rtx clear_storage (rtx, rtx, enum block_op_methods);\n \n /* Determine whether the LEN bytes can be moved by using several move\n    instructions.  Return nonzero if a call to move_by_pieces should"}, {"sha": "8638f9852816d02a0bd5fa7d61054b417ec5bd6b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -1,5 +1,8 @@\n 2005-05-04  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR middle-end/21265\n+\t* gcc.dg/20050503-1.c: New test.\n+\n \tPR rtl-optimization/21239\n \t* gcc.dg/i386-sse-11.c: New test.\n "}, {"sha": "f8246dbbd3f345efa37b48c40e9f6fd95f33934f", "filename": "gcc/testsuite/gcc.dg/20050503-1.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Ftestsuite%2Fgcc.dg%2F20050503-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8148fe656d06e12c5d34e8fa56e23ee7eb9d5841/gcc%2Ftestsuite%2Fgcc.dg%2F20050503-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20050503-1.c?ref=8148fe656d06e12c5d34e8fa56e23ee7eb9d5841", "patch": "@@ -0,0 +1,49 @@\n+/* PR middle-end/21265\n+   Test whether tail call information is propagated through builtin\n+   expanders.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+#define F(n, rettype, name, args, callargs) \\\n+extern rettype name args;\t\t\t\t\\\n+rettype test##n args\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\\\n+  return name callargs;\t\t\t\t\t\\\n+}\n+#define F1(n, rettype, name, t1, callargs) \\\n+  F (n, rettype, name, (t1 a1), callargs)\n+#define F2(n, rettype, name, t1, t2, callargs) \\\n+  F (n, rettype, name, (t1 a1, t2 a2), callargs)\n+#define F3(n, rettype, name, t1, t2, t3, callargs) \\\n+  F (n, rettype, name, (t1 a1, t2 a2, t3 a3), callargs)\n+\n+F3 (1a, void *, memcpy, void *, const void *, size_t, (a1, a2, a3))\n+F3 (1b, void *, memcpy, void *, const void *, size_t, (a1, a2, 10))\n+F3 (2a, void *, mempcpy, void *, const void *, size_t, (a1, a2, a3))\n+F3 (2b, void *, mempcpy, void *, const void *, size_t, (a1, a2, 10))\n+F3 (3a, void *, memmove, void *, const void *, size_t, (a1, a2, a3))\n+F3 (3b, void *, memmove, void *, const void *, size_t, (a1, \"abcdefghijklmno\", a3))\n+F3 (4a, void *, memset, void *, int, size_t, (a1, a2, a3))\n+F3 (4b, void *, memset, void *, int, size_t, (a1, a2, 156))\n+F3 (4c, void *, memset, void *, int, size_t, (a1, 0, a3))\n+F3 (4d, void *, memset, void *, int, size_t, (a1, 0, 10000))\n+F3 (5a, int, memcmp, const void *, const void *, size_t, (a1, a2, a3))\n+F3 (5b, int, memcmp, const void *, const void *, size_t, (a1, \"abcdefghijkl\", a3))\n+F2 (6, char *, strcpy, char *, const char *, (a1, a2))\n+F2 (7, char *, stpcpy, char *, const char *, (a1, a2))\n+F3 (8, char *, strncpy, char *, const char *, size_t, (a1, a2, a3))\n+F3 (9, char *, stpncpy, char *, const char *, size_t, (a1, a2, a3))\n+F2 (10, char *, strcat, char *, const char *, (a1, a2))\n+F3 (11, char *, strncat, char *, const char *, size_t, (a1, a2, a3))\n+F1 (12a, size_t, strlen, const char *, (a1))\n+F1 (12b, size_t, strlen, const char *, (\"foobar\"))\n+F2 (13a, int, strcmp, const char *, const char *, (a1, a2))\n+F2 (13b, int, strcmp, const char *, const char *, (a1, \"abcdefghijklm\"))\n+F3 (14a, int, strncmp, const char *, const char *, size_t, (a1, a2, a3))\n+F3 (14b, int, strncmp, const char *, const char *, size_t, (a1, \"abcdefghijklm\", 10))\n+F2 (15, char *, strchr, const char *, int, (a1, a2))\n+\n+/* All the calls above should be tail call optimized on i?86/x86-64.  */\n+/* { dg-final { scan-assembler-not \"call\" { target i?86-*-linux* x86_64-*-linux* } } } */"}]}