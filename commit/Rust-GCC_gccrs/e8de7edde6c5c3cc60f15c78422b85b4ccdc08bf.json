{"sha": "e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZThkZTdlZGRlNmM1YzNjYzYwZjE1Yzc4NDIyYjg1YjRjY2RjMDhiZg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-20T09:28:34Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-23T11:15:20Z"}, "message": "aarch64: Use memcpy to copy vector tables in vst4[q] intrinsics\n\nUse __builtin_memcpy to copy vector structures instead of building\na new opaque structure one vector at a time in each of the vst4[q]\nNeon intrinsics in arm_neon.h. This simplifies the header file and\nalso improves code generation - superfluous move instructions were\nemitted for every register extraction/set in this additional\nstructure.\n\nAdd new code generation tests to verify that superfluous move\ninstructions are no longer generated for the vst4q intrinsics.\n\ngcc/ChangeLog:\n\n2021-07-20  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/arm_neon.h (vst4_s64): Use __builtin_memcpy\n\tinstead of constructing __builtin_aarch64_simd_xi one vector\n\tat a time.\n\t(vst4_u64): Likewise.\n\t(vst4_f64): Likewise.\n\t(vst4_s8): Likewise.\n\t(vst4_p8): Likewise.\n\t(vst4_s16): Likewise.\n\t(vst4_p16): Likewise.\n\t(vst4_s32): Likewise.\n\t(vst4_u8): Likewise.\n\t(vst4_u16): Likewise.\n\t(vst4_u32): Likewise.\n\t(vst4_f16): Likewise.\n\t(vst4_f32): Likewise.\n\t(vst4_p64): Likewise.\n\t(vst4q_s8): Likewise.\n\t(vst4q_p8): Likewise.\n\t(vst4q_s16): Likewise.\n\t(vst4q_p16): Likewise.\n\t(vst4q_s32): Likewise.\n\t(vst4q_s64): Likewise.\n\t(vst4q_u8): Likewise.\n\t(vst4q_u16): Likewise.\n\t(vst4q_u32): Likewise.\n\t(vst4q_u64): Likewise.\n\t(vst4q_f16): Likewise.\n\t(vst4q_f32): Likewise.\n\t(vst4q_f64): Likewise.\n\t(vst4q_p64): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/vector_structure_intrinsics.c: Add new\n\ttests.", "tree": {"sha": "926acb26919bd15868b75646d73cbeeef2f373c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/926acb26919bd15868b75646d73cbeeef2f373c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4848e283ccaed451ddcc38edcb9f5ce9e9f2d7eb"}], "stats": {"total": 170, "additions": 50, "deletions": 120}, "files": [{"sha": "ae3ce8cfc402fd156358d5214adae94327e4111a", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 28, "deletions": 120, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "patch": "@@ -27914,10 +27914,7 @@ vst4_s64 (int64_t * __a, int64x1x4_t __val)\n   __temp.val[1] = vcombine_s64 (__val.val[1], vcreate_s64 (__AARCH64_INT64_C (0)));\n   __temp.val[2] = vcombine_s64 (__val.val[2], vcreate_s64 (__AARCH64_INT64_C (0)));\n   __temp.val[3] = vcombine_s64 (__val.val[3], vcreate_s64 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27931,10 +27928,7 @@ vst4_u64 (uint64_t * __a, uint64x1x4_t __val)\n   __temp.val[1] = vcombine_u64 (__val.val[1], vcreate_u64 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_u64 (__val.val[2], vcreate_u64 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_u64 (__val.val[3], vcreate_u64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -27948,10 +27942,7 @@ vst4_f64 (float64_t * __a, float64x1x4_t __val)\n   __temp.val[1] = vcombine_f64 (__val.val[1], vcreate_f64 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_f64 (__val.val[2], vcreate_f64 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_f64 (__val.val[3], vcreate_f64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -27965,10 +27956,7 @@ vst4_s8 (int8_t * __a, int8x8x4_t __val)\n   __temp.val[1] = vcombine_s8 (__val.val[1], vcreate_s8 (__AARCH64_INT64_C (0)));\n   __temp.val[2] = vcombine_s8 (__val.val[2], vcreate_s8 (__AARCH64_INT64_C (0)));\n   __temp.val[3] = vcombine_s8 (__val.val[3], vcreate_s8 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27982,10 +27970,7 @@ vst4_p8 (poly8_t * __a, poly8x8x4_t __val)\n   __temp.val[1] = vcombine_p8 (__val.val[1], vcreate_p8 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_p8 (__val.val[2], vcreate_p8 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_p8 (__val.val[3], vcreate_p8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -27999,10 +27984,7 @@ vst4_s16 (int16_t * __a, int16x4x4_t __val)\n   __temp.val[1] = vcombine_s16 (__val.val[1], vcreate_s16 (__AARCH64_INT64_C (0)));\n   __temp.val[2] = vcombine_s16 (__val.val[2], vcreate_s16 (__AARCH64_INT64_C (0)));\n   __temp.val[3] = vcombine_s16 (__val.val[3], vcreate_s16 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28016,10 +27998,7 @@ vst4_p16 (poly16_t * __a, poly16x4x4_t __val)\n   __temp.val[1] = vcombine_p16 (__val.val[1], vcreate_p16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_p16 (__val.val[2], vcreate_p16 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_p16 (__val.val[3], vcreate_p16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28033,10 +28012,7 @@ vst4_s32 (int32_t * __a, int32x2x4_t __val)\n   __temp.val[1] = vcombine_s32 (__val.val[1], vcreate_s32 (__AARCH64_INT64_C (0)));\n   __temp.val[2] = vcombine_s32 (__val.val[2], vcreate_s32 (__AARCH64_INT64_C (0)));\n   __temp.val[3] = vcombine_s32 (__val.val[3], vcreate_s32 (__AARCH64_INT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -28050,10 +28026,7 @@ vst4_u8 (uint8_t * __a, uint8x8x4_t __val)\n   __temp.val[1] = vcombine_u8 (__val.val[1], vcreate_u8 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_u8 (__val.val[2], vcreate_u8 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_u8 (__val.val[3], vcreate_u8 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v8qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -28067,10 +28040,7 @@ vst4_u16 (uint16_t * __a, uint16x4x4_t __val)\n   __temp.val[1] = vcombine_u16 (__val.val[1], vcreate_u16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_u16 (__val.val[2], vcreate_u16 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_u16 (__val.val[3], vcreate_u16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v4hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28084,10 +28054,7 @@ vst4_u32 (uint32_t * __a, uint32x2x4_t __val)\n   __temp.val[1] = vcombine_u32 (__val.val[1], vcreate_u32 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_u32 (__val.val[2], vcreate_u32 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_u32 (__val.val[3], vcreate_u32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v2si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -28101,10 +28068,7 @@ vst4_f16 (float16_t * __a, float16x4x4_t __val)\n   __temp.val[1] = vcombine_f16 (__val.val[1], vcreate_f16 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_f16 (__val.val[2], vcreate_f16 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_f16 (__val.val[3], vcreate_f16 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v4hf ((__builtin_aarch64_simd_hf *) __a, __o);\n }\n \n@@ -28118,10 +28082,7 @@ vst4_f32 (float32_t * __a, float32x2x4_t __val)\n   __temp.val[1] = vcombine_f32 (__val.val[1], vcreate_f32 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_f32 (__val.val[2], vcreate_f32 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_f32 (__val.val[3], vcreate_f32 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4v2sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -28135,14 +28096,7 @@ vst4_p64 (poly64_t * __a, poly64x1x4_t __val)\n   __temp.val[1] = vcombine_p64 (__val.val[1], vcreate_p64 (__AARCH64_UINT64_C (0)));\n   __temp.val[2] = vcombine_p64 (__val.val[2], vcreate_p64 (__AARCH64_UINT64_C (0)));\n   __temp.val[3] = vcombine_p64 (__val.val[3], vcreate_p64 (__AARCH64_UINT64_C (0)));\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __temp.val[3], 3);\n+  __builtin_memcpy (&__o, &__temp, sizeof (__temp));\n   __builtin_aarch64_st4di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -28151,10 +28105,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_s8 (int8_t * __a, int8x16x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -28163,10 +28114,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_p8 (poly8_t * __a, poly8x16x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -28175,10 +28123,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_s16 (int16_t * __a, int16x8x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28187,10 +28132,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_p16 (poly16_t * __a, poly16x8x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28199,10 +28141,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_s32 (int32_t * __a, int32x4x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -28211,10 +28150,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_s64 (int64_t * __a, int64x2x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -28223,10 +28159,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_u8 (uint8_t * __a, uint8x16x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv16qi (__o, (int8x16_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v16qi ((__builtin_aarch64_simd_qi *) __a, __o);\n }\n \n@@ -28235,10 +28168,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_u16 (uint16_t * __a, uint16x8x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hi (__o, (int16x8_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v8hi ((__builtin_aarch64_simd_hi *) __a, __o);\n }\n \n@@ -28247,10 +28177,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_u32 (uint32_t * __a, uint32x4x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4si (__o, (int32x4_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v4si ((__builtin_aarch64_simd_si *) __a, __o);\n }\n \n@@ -28259,10 +28186,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_u64 (uint64_t * __a, uint64x2x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di (__o, (int64x2_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n \n@@ -28271,10 +28195,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_f16 (float16_t * __a, float16x8x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv8hf (__o, (float16x8_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v8hf ((__builtin_aarch64_simd_hf *) __a, __o);\n }\n \n@@ -28283,10 +28204,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_f32 (float32_t * __a, float32x4x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv4sf (__o, (float32x4_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v4sf ((__builtin_aarch64_simd_sf *) __a, __o);\n }\n \n@@ -28295,10 +28213,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_f64 (float64_t * __a, float64x2x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2df (__o, (float64x2_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v2df ((__builtin_aarch64_simd_df *) __a, __o);\n }\n \n@@ -28307,14 +28222,7 @@ __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vst4q_p64 (poly64_t * __a, poly64x2x4_t __val)\n {\n   __builtin_aarch64_simd_xi __o;\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[0], 0);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[1], 1);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[2], 2);\n-  __o = __builtin_aarch64_set_qregxiv2di_ssps (__o,\n-\t\t\t\t\t       (poly64x2_t) __val.val[3], 3);\n+  __builtin_memcpy (&__o, &__val, sizeof (__val));\n   __builtin_aarch64_st4v2di ((__builtin_aarch64_simd_di *) __a, __o);\n }\n "}, {"sha": "9061070b8d084213f1ddbfbbe3555a3e639eb7d7", "filename": "gcc/testsuite/gcc.target/aarch64/vector_structure_intrinsics.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvector_structure_intrinsics.c?ref=e8de7edde6c5c3cc60f15c78422b85b4ccdc08bf", "patch": "@@ -82,7 +82,29 @@ TEST_TBX4 (vqtbx4q, int8x16_t, int8x16x4_t, uint8x16_t, s8)\n TEST_TBX4 (vqtbx4q, uint8x16_t, uint8x16x4_t, uint8x16_t, u8)\n TEST_TBX4 (vqtbx4q, poly8x16_t, poly8x16x4_t, uint8x16_t, p8)\n \n+#define TEST_STX(name, tbltype, ptrtype, ts) \\\n+  void test_ ## name ## _ ## ts (ptrtype a, tbltype b) \\\n+\t{ \\\n+\t\tname ## _ ## ts (a, b); \\\n+\t}\n+\n+TEST_STX (vst4q, int8x16x4_t, int8_t*, s8);\n+TEST_STX (vst4q, uint8x16x4_t, uint8_t*, u8);\n+TEST_STX (vst4q, poly8x16x4_t, poly8_t*, p8);\n+TEST_STX (vst4q, int16x8x4_t, int16_t*, s16);\n+TEST_STX (vst4q, uint16x8x4_t, uint16_t*, u16);\n+TEST_STX (vst4q, poly16x8x4_t, poly16_t*, p16);\n+TEST_STX (vst4q, float16x8x4_t, float16_t*, f16);\n+TEST_STX (vst4q, int32x4x4_t, int32_t*, s32);\n+TEST_STX (vst4q, uint32x4x4_t, uint32_t*, u32);\n+TEST_STX (vst4q, float32x4x4_t, float32_t*, f32);\n+TEST_STX (vst4q, int64x2x4_t, int64_t*, s64);\n+TEST_STX (vst4q, uint64x2x4_t, uint64_t*, u64);\n+TEST_STX (vst4q, float64x2x4_t, float64_t*, f64);\n+TEST_STX (vst4q, poly64x2x4_t, poly64_t*, p64);\n+\n /* { dg-final { scan-assembler-not \"mov\\\\t\" } } */\n \n /* { dg-final { scan-assembler-times \"tbl\\\\t\" 18} }  */\n /* { dg-final { scan-assembler-times \"tbx\\\\t\" 18} }  */\n+/* { dg-final { scan-assembler-times \"st4\\\\t\" 14} }  */"}]}