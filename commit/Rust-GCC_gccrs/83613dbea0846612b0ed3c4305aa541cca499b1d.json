{"sha": "83613dbea0846612b0ed3c4305aa541cca499b1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2MTNkYmVhMDg0NjYxMmIwZWQzYzQzMDVhYTU0MWNjYTQ5OWIxZA==", "commit": {"author": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-13T21:03:41Z"}, "committer": {"name": "Andy Hutchinson", "email": "hutchinsonandy@gcc.gnu.org", "date": "2009-12-13T21:03:41Z"}, "message": "re PR rtl-optimization/23726 (Missed optimizations for divmod)\n\nPR target/23726\n* config/avr/predicates.md (pseudo_register_operand): New predicate for pseudos.\n* config/avr/avr.md (divmodqi4): Replace with define_insn_and_split to allow div/mod optimization.\n(udivmodqi4): Ditto.\n(divmodhi4): Ditto.\n(udivmodhi4): Ditto.\n(divmodsi4): Ditto.\n(udivmodsi4): Ditto.\n\nFrom-SVN: r155195", "tree": {"sha": "1dc22f3c9c93e19fbf1fe7e45ac7d179e8c144e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1dc22f3c9c93e19fbf1fe7e45ac7d179e8c144e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83613dbea0846612b0ed3c4305aa541cca499b1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83613dbea0846612b0ed3c4305aa541cca499b1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83613dbea0846612b0ed3c4305aa541cca499b1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83613dbea0846612b0ed3c4305aa541cca499b1d/comments", "author": null, "committer": null, "parents": [{"sha": "1bea309889ac0d3f7cab5d51e2105cda6fc7f59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bea309889ac0d3f7cab5d51e2105cda6fc7f59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bea309889ac0d3f7cab5d51e2105cda6fc7f59b"}], "stats": {"total": 162, "additions": 124, "deletions": 38}, "files": [{"sha": "aecafa48d729b169f2c8783d0f1a41ea66018a46", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83613dbea0846612b0ed3c4305aa541cca499b1d", "patch": "@@ -1,3 +1,16 @@\n+2009-12-13  Andy Hutchinson  <hutchinsonandy@gcc.gnu.org>\n+\n+\tPR target/23726\n+\t* config/avr/predicates.md (pseudo_register_operand): New predicate\n+\tfor pseudos.\n+\t* config/avr/avr.md (divmodqi4): Replace with define_insn_and_split\n+\tto allow div/mod optimization.\n+\t(udivmodqi4): Ditto.\n+\t(divmodhi4): Ditto.\n+\t(udivmodhi4): Ditto.\n+\t(divmodsi4): Ditto.\n+\t(udivmodsi4): Ditto. \n+\n 2009-12-13  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/42357"}, {"sha": "1271fa4f44bd914689c0bdd9b02c89160ab1bd6c", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 106, "deletions": 38, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=83613dbea0846612b0ed3c4305aa541cca499b1d", "patch": "@@ -1052,17 +1052,30 @@\n ;;  - we know exactly which registers are clobbered (for QI and HI\n ;;    modes, some of the call-used registers are preserved)\n ;;  - we get both the quotient and the remainder at no extra cost\n-\n-(define_expand \"divmodqi4\"\n-  [(set (reg:QI 24) (match_operand:QI 1 \"register_operand\" \"\"))\n-   (set (reg:QI 22) (match_operand:QI 2 \"register_operand\" \"\"))\n+;;  - we split the patterns only after the first CSE passes because\n+;;    CSE has problems to operate on hard regs.\n+;; \n+(define_insn_and_split \"divmodqi4\"\n+  [(parallel [(set (match_operand:QI 0 \"pseudo_register_operand\" \"\") \n+                   (div:QI (match_operand:QI 1 \"pseudo_register_operand\" \"\") \n+                           (match_operand:QI 2 \"pseudo_register_operand\" \"\")))\n+              (set (match_operand:QI 3 \"pseudo_register_operand\" \"\") \n+                   (mod:QI (match_dup 1) (match_dup 2)))\n+              (clobber (reg:QI 22)) \n+              (clobber (reg:QI 23)) \n+              (clobber (reg:QI 24)) \n+              (clobber (reg:QI 25))])]\n+  \"\"\n+  \"this divmodqi4 pattern should have been splitted;\"\n+  \"\"\n+  [(set (reg:QI 24) (match_dup 1))\n+   (set (reg:QI 22) (match_dup 2))\n    (parallel [(set (reg:QI 24) (div:QI (reg:QI 24) (reg:QI 22)))\n \t      (set (reg:QI 25) (mod:QI (reg:QI 24) (reg:QI 22)))\n \t      (clobber (reg:QI 22))\n \t      (clobber (reg:QI 23))])\n-   (set (match_operand:QI 0 \"register_operand\" \"\") (reg:QI 24))\n-   (set (match_operand:QI 3 \"register_operand\" \"\") (reg:QI 25))]\n-  \"\"\n+   (set (match_dup 0) (reg:QI 24))\n+   (set (match_dup 3) (reg:QI 25))]\n   \"\")\n \n (define_insn \"*divmodqi4_call\"\n@@ -1075,15 +1088,26 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_expand \"udivmodqi4\"\n-  [(set (reg:QI 24) (match_operand:QI 1 \"register_operand\" \"\"))\n-   (set (reg:QI 22) (match_operand:QI 2 \"register_operand\" \"\"))\n+(define_insn_and_split \"udivmodqi4\"\n+ [(parallel [(set (match_operand:QI 0 \"pseudo_register_operand\" \"\") \n+                  (udiv:QI (match_operand:QI 1 \"pseudo_register_operand\" \"\") \n+                           (match_operand:QI 2 \"pseudo_register_operand\" \"\")))\n+\t     (set (match_operand:QI 3 \"pseudo_register_operand\" \"\") \n+                  (umod:QI (match_dup 1) (match_dup 2)))\n+             (clobber (reg:QI 22))\n+             (clobber (reg:QI 23))\n+             (clobber (reg:QI 24))\n+             (clobber (reg:QI 25))])]\n+  \"\"\n+  \"this udivmodqi4 pattern should have been splitted;\"\n+  \"\" \n+  [(set (reg:QI 24) (match_dup 1))\n+   (set (reg:QI 22) (match_dup 2))\n    (parallel [(set (reg:QI 24) (udiv:QI (reg:QI 24) (reg:QI 22)))\n \t      (set (reg:QI 25) (umod:QI (reg:QI 24) (reg:QI 22)))\n \t      (clobber (reg:QI 23))])\n-   (set (match_operand:QI 0 \"register_operand\" \"\") (reg:QI 24))\n-   (set (match_operand:QI 3 \"register_operand\" \"\") (reg:QI 25))]\n-  \"\"\n+   (set (match_dup 0) (reg:QI 24))\n+   (set (match_dup 3) (reg:QI 25))]\n   \"\")\n \n (define_insn \"*udivmodqi4_call\"\n@@ -1095,17 +1119,28 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_expand \"divmodhi4\"\n-  [(set (reg:HI 24) (match_operand:HI 1 \"register_operand\" \"\"))\n-   (set (reg:HI 22) (match_operand:HI 2 \"register_operand\" \"\"))\n+(define_insn_and_split \"divmodhi4\"\n+  [(parallel [(set (match_operand:HI 0 \"pseudo_register_operand\" \"\") \n+                   (div:HI (match_operand:HI 1 \"pseudo_register_operand\" \"\") \n+                           (match_operand:HI 2 \"pseudo_register_operand\" \"\")))\n+              (set (match_operand:HI 3 \"pseudo_register_operand\" \"\") \n+                   (mod:HI (match_dup 1) (match_dup 2)))\n+              (clobber (reg:QI 21))\n+              (clobber (reg:HI 22))\n+              (clobber (reg:HI 24))\n+              (clobber (reg:HI 26))])]\n+  \"\"\n+  \"this should have been splitted;\"\n+  \"\"\n+  [(set (reg:HI 24) (match_dup 1))\n+   (set (reg:HI 22) (match_dup 2))\n    (parallel [(set (reg:HI 22) (div:HI (reg:HI 24) (reg:HI 22)))\n \t      (set (reg:HI 24) (mod:HI (reg:HI 24) (reg:HI 22)))\n \t      (clobber (reg:HI 26))\n \t      (clobber (reg:QI 21))])\n-   (set (match_operand:HI 0 \"register_operand\" \"\") (reg:HI 22))\n-   (set (match_operand:HI 3 \"register_operand\" \"\") (reg:HI 24))]\n-  \"\"\n-  \"\")\n+   (set (match_dup 0) (reg:HI 22))\n+   (set (match_dup 3) (reg:HI 24))]\n+  \"\") \n \n (define_insn \"*divmodhi4_call\"\n   [(set (reg:HI 22) (div:HI (reg:HI 24) (reg:HI 22)))\n@@ -1117,16 +1152,27 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_expand \"udivmodhi4\"\n-  [(set (reg:HI 24) (match_operand:HI 1 \"register_operand\" \"\"))\n-   (set (reg:HI 22) (match_operand:HI 2 \"register_operand\" \"\"))\n+(define_insn_and_split \"udivmodhi4\"\n+  [(parallel [(set (match_operand:HI 0 \"pseudo_register_operand\" \"\") \n+                   (udiv:HI (match_operand:HI 1 \"pseudo_register_operand\" \"\")\n+                            (match_operand:HI 2 \"pseudo_register_operand\" \"\")))\n+\t      (set (match_operand:HI 3 \"pseudo_register_operand\" \"\") \n+                   (umod:HI (match_dup 1) (match_dup 2)))\n+              (clobber (reg:QI 21))\n+              (clobber (reg:HI 22))\n+              (clobber (reg:HI 24))\n+              (clobber (reg:HI 26))])]\n+  \"\"\n+  \"this udivmodhi4 pattern should have been splitted.;\"\n+  \"\"\n+  [(set (reg:HI 24) (match_dup 1))\n+   (set (reg:HI 22) (match_dup 2))\n    (parallel [(set (reg:HI 22) (udiv:HI (reg:HI 24) (reg:HI 22)))\n \t      (set (reg:HI 24) (umod:HI (reg:HI 24) (reg:HI 22)))\n \t      (clobber (reg:HI 26))\n \t      (clobber (reg:QI 21))])\n-   (set (match_operand:HI 0 \"register_operand\" \"\") (reg:HI 22))\n-   (set (match_operand:HI 3 \"register_operand\" \"\") (reg:HI 24))]\n-  \"\"\n+   (set (match_dup 0) (reg:HI 22))\n+   (set (match_dup 3) (reg:HI 24))]\n   \"\")\n \n (define_insn \"*udivmodhi4_call\"\n@@ -1139,16 +1185,27 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_expand \"divmodsi4\"\n-  [(set (reg:SI 22) (match_operand:SI 1 \"register_operand\" \"\"))\n-   (set (reg:SI 18) (match_operand:SI 2 \"register_operand\" \"\"))\n+(define_insn_and_split \"divmodsi4\"\n+  [(parallel [(set (match_operand:SI 0 \"pseudo_register_operand\" \"\") \n+                   (div:SI (match_operand:SI 1 \"pseudo_register_operand\" \"\") \n+                           (match_operand:SI 2 \"pseudo_register_operand\" \"\")))\n+              (set (match_operand:SI 3 \"pseudo_register_operand\" \"\") \n+                   (mod:SI (match_dup 1) (match_dup 2)))\n+              (clobber (reg:SI 18))\n+              (clobber (reg:SI 22))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:HI 30))])]\n+  \"\"\n+  \"this divmodsi4 pattern should have been splitted;\" \n+  \"\"\n+  [(set (reg:SI 22) (match_dup 1))\n+   (set (reg:SI 18) (match_dup 2))\n    (parallel [(set (reg:SI 18) (div:SI (reg:SI 22) (reg:SI 18)))\n \t      (set (reg:SI 22) (mod:SI (reg:SI 22) (reg:SI 18)))\n \t      (clobber (reg:HI 26))\n \t      (clobber (reg:HI 30))])\n-   (set (match_operand:SI 0 \"register_operand\" \"\") (reg:SI 18))\n-   (set (match_operand:SI 3 \"register_operand\" \"\") (reg:SI 22))]\n-  \"\"\n+   (set (match_dup 0) (reg:SI 18))\n+   (set (match_dup 3) (reg:SI 22))]\n   \"\")\n \n (define_insn \"*divmodsi4_call\"\n@@ -1161,16 +1218,27 @@\n   [(set_attr \"type\" \"xcall\")\n    (set_attr \"cc\" \"clobber\")])\n \n-(define_expand \"udivmodsi4\"\n-  [(set (reg:SI 22) (match_operand:SI 1 \"register_operand\" \"\"))\n-   (set (reg:SI 18) (match_operand:SI 2 \"register_operand\" \"\"))\n+(define_insn_and_split \"udivmodsi4\"\n+  [(parallel [(set (match_operand:SI 0 \"pseudo_register_operand\" \"\") \n+                   (udiv:SI (match_operand:SI 1 \"pseudo_register_operand\" \"\") \n+                           (match_operand:SI 2 \"pseudo_register_operand\" \"\")))\n+              (set (match_operand:SI 3 \"pseudo_register_operand\" \"\") \n+                   (umod:SI (match_dup 1) (match_dup 2)))\n+              (clobber (reg:SI 18))\n+              (clobber (reg:SI 22))\n+              (clobber (reg:HI 26))\n+              (clobber (reg:HI 30))])]\n+  \"\"\n+  \"this udivmodsi4 pattern should have been splitted;\"\n+  \"\"\n+  [(set (reg:SI 22) (match_dup 1))\n+   (set (reg:SI 18) (match_dup 2))\n    (parallel [(set (reg:SI 18) (udiv:SI (reg:SI 22) (reg:SI 18)))\n \t      (set (reg:SI 22) (umod:SI (reg:SI 22) (reg:SI 18)))\n \t      (clobber (reg:HI 26))\n \t      (clobber (reg:HI 30))])\n-   (set (match_operand:SI 0 \"register_operand\" \"\") (reg:SI 18))\n-   (set (match_operand:SI 3 \"register_operand\" \"\") (reg:SI 22))]\n-  \"\"\n+   (set (match_dup 0) (reg:SI 18))\n+   (set (match_dup 3) (reg:SI 22))]\n   \"\")\n \n (define_insn \"*udivmodsi4_call\""}, {"sha": "2aa3e88c79dfb37ddda9a8795617e10b83b326cc", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83613dbea0846612b0ed3c4305aa541cca499b1d/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=83613dbea0846612b0ed3c4305aa541cca499b1d", "patch": "@@ -110,3 +110,8 @@\n   (and (match_code \"mem\")\n        (ior (match_test \"register_operand (XEXP (op, 0), mode)\")\n             (match_test \"CONSTANT_ADDRESS_P (XEXP (op, 0))\"))))\n+\n+;; True for register that is pseudo register.\n+(define_predicate \"pseudo_register_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"!HARD_REGISTER_P (op)\")))"}]}