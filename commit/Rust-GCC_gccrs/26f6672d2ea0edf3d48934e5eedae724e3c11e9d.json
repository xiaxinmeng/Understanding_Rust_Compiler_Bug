{"sha": "26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmNjY3MmQyZWEwZWRmM2Q0ODkzNGU1ZWVkYWU3MjRlM2MxMWU5ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-12-28T18:48:05Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-12-28T18:48:05Z"}, "message": "c-common.c (enum format_type): Add strfmon_format_type.\n\n\t* c-common.c (enum format_type): Add strfmon_format_type.\n\t(decl_attributes): Handle format attributes strfmon and\n\t__strfmon__.\n\t(FMT_FLAG_USE_DOLLAR, FMT_FLAG_ZERO_WIDTH_BAD,\n\tFMT_FLAG_EMPTY_PREC_OK): Define.\n\t(format_char_info): Update comment for flag_chars.\n\t(format_flag_spec): Add skip_next_char.\n\t(format_kind_info): Add left_precision_char.\n\t(printf_flag_specs, scanf_flag_specs, strftime_flag_specs,\n\tformat_types): Update for these new structure members and flags.\n\t(time_char_table): Make const.\n\t(strfmon_length_specs, strfmon_flag_specs, strfmon_flag_pairs,\n\tmonetary_char_table): New.\n\t(format_types): Add details of strfmon formats.\n\t(init_function_format_info): Create default attribute for strfmon.\n\t(check_format_info_main): Check the new flags.  Handle\n\tskip_next_char and left precision.\n\t* toplev.c (documented_lang_options): Update description of\n\t-Wformat.\n\t* extend.texi: Document strfmon format attributes.  Document\n\tattribute forms such as __printf__.  Clarify format_arg attribute\n\tdocumentation.\n\t* invoke.texi (-Wformat): Update for strfmon formats.\n\ntestsuite:\n\t* gcc.dg/format-strfmon-1.c: New test.\n\nFrom-SVN: r38512", "tree": {"sha": "00f35d5d934df665f2c3bad29a53e2cb1f7433ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/00f35d5d934df665f2c3bad29a53e2cb1f7433ae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df7978d9b730b37a91ca6dc9a19c51fc8ee27da9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7978d9b730b37a91ca6dc9a19c51fc8ee27da9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7978d9b730b37a91ca6dc9a19c51fc8ee27da9"}], "stats": {"total": 350, "additions": 277, "deletions": 73}, "files": [{"sha": "e826e1cf91bb4d11c28e511353198425e6c0368f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -1,3 +1,29 @@\n+2000-12-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-common.c (enum format_type): Add strfmon_format_type.\n+\t(decl_attributes): Handle format attributes strfmon and\n+\t__strfmon__.\n+\t(FMT_FLAG_USE_DOLLAR, FMT_FLAG_ZERO_WIDTH_BAD,\n+\tFMT_FLAG_EMPTY_PREC_OK): Define.\n+\t(format_char_info): Update comment for flag_chars.\n+\t(format_flag_spec): Add skip_next_char.\n+\t(format_kind_info): Add left_precision_char.\n+\t(printf_flag_specs, scanf_flag_specs, strftime_flag_specs,\n+\tformat_types): Update for these new structure members and flags.\n+\t(time_char_table): Make const.\n+\t(strfmon_length_specs, strfmon_flag_specs, strfmon_flag_pairs,\n+\tmonetary_char_table): New.\n+\t(format_types): Add details of strfmon formats.\n+\t(init_function_format_info): Create default attribute for strfmon.\n+\t(check_format_info_main): Check the new flags.  Handle\n+\tskip_next_char and left precision.\n+\t* toplev.c (documented_lang_options): Update description of\n+\t-Wformat.\n+\t* extend.texi: Document strfmon format attributes.  Document\n+\tattribute forms such as __printf__.  Clarify format_arg attribute\n+\tdocumentation.\n+\t* invoke.texi (-Wformat): Update for strfmon formats.\n+\n 2000-12-28  Andreas Jaeger  <aj@suse.de>\n \n \t* expmed.c (store_bit_field): Fix last patch."}, {"sha": "0dabe1a87f4b5c6be0a7139b7ae78ebc31103df4", "filename": "gcc/c-common.c", "status": "modified", "additions": 137, "deletions": 49, "changes": 186, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -230,7 +230,7 @@ enum attrs {A_PACKED, A_NOCOMMON, A_COMMON, A_NORETURN, A_CONST, A_T_UNION,\n \t    A_NO_LIMIT_STACK, A_PURE};\n \n enum format_type { printf_format_type, scanf_format_type,\n-\t\t   strftime_format_type };\n+\t\t   strftime_format_type, strfmon_format_type };\n \n static void add_attribute\t\tPARAMS ((enum attrs, const char *,\n \t\t\t\t\t\t int, int, int));\n@@ -955,6 +955,9 @@ decl_attributes (node, attributes, prefix_attributes)\n \t\telse if (!strcmp (p, \"strftime\")\n \t\t\t || !strcmp (p, \"__strftime__\"))\n \t\t  format_type = strftime_format_type;\n+\t\telse if (!strcmp (p, \"strfmon\")\n+\t\t\t || !strcmp (p, \"__strfmon__\"))\n+\t\t  format_type = strfmon_format_type;\n \t\telse\n \t\t  {\n \t\t    warning (\"`%s' is an unrecognized format function type\", p);\n@@ -1357,13 +1360,17 @@ enum\n   FMT_FLAG_FANCY_PERCENT_OK = 4,\n   /* With $ operand numbers, it is OK to reference the same argument more\n      than once.  */\n-  FMT_FLAG_DOLLAR_MULTIPLE = 8\n+  FMT_FLAG_DOLLAR_MULTIPLE = 8,\n+  /* This format type uses $ operand numbers (strfmon doesn't).  */\n+  FMT_FLAG_USE_DOLLAR = 16,\n+  /* Zero width is bad in this type of format (scanf).  */\n+  FMT_FLAG_ZERO_WIDTH_BAD = 32,\n+  /* Empty precision specification is OK in this type of format (printf).  */\n+  FMT_FLAG_EMPTY_PREC_OK = 64\n   /* Not included here: details of whether width or precision may occur\n      (controlled by width_char and precision_char); details of whether\n      '*' can be used for these (width_type and precision_type); details\n-     of whether length modifiers can occur (length_char_specs); details\n-     of when $ operand numbers are allowed (always, for the formats\n-     supported, if arguments are converted).  */\n+     of whether length modifiers can occur (length_char_specs).  */\n };\n \n \n@@ -1415,7 +1422,8 @@ typedef struct\n   /* Types accepted for each length modifier.  */\n   format_type_detail types[FMT_LEN_MAX];\n   /* List of other modifier characters allowed with these specifiers.\n-     This lists flags, and additionally \"w\" for width, \"p\" for precision,\n+     This lists flags, and additionally \"w\" for width, \"p\" for precision\n+     (right precision, for strfmon), \"#\" for left precision (strfmon),\n      \"a\" for scanf \"a\" allocation extension (not applicable in C99 mode),\n      \"*\" for scanf suppression, and \"E\" and \"O\" for those strftime\n      modifiers.  */\n@@ -1447,6 +1455,9 @@ typedef struct\n      the unpredicated one, for any pedantic warning.  For example, 'o'\n      for strftime formats (meaning 'O' is an extension over C99).  */\n   int predicate;\n+  /* Nonzero if the next character after this flag in the format should\n+     be skipped ('=' in strfmon), zero otherwise.  */\n+  int skip_next_char;\n   /* The name to use for this flag in diagnostic messages.  For example,\n      N_(\"`0' flag\"), N_(\"field width\").  */\n   const char *name;\n@@ -1497,7 +1508,11 @@ typedef struct\n   int flags;\n   /* Flag character to treat a width as, or 0 if width not used.  */\n   int width_char;\n-  /* Flag character to treat a precision as, or 0 if precision not used.  */\n+  /* Flag character to treat a left precision (strfmon) as,\n+     or 0 if left precision not used.  */\n+  int left_precision_char;\n+  /* Flag character to treat a precision (for strfmon, right precision) as,\n+     or 0 if precision not used.  */\n   int precision_char;\n   /* If a flag character has the effect of suppressing the conversion of\n      an argument ('*' in scanf), that flag character, otherwise 0.  */\n@@ -1579,19 +1594,28 @@ static const format_length_info scanf_length_specs[] =\n };\n \n \n+/* All tables for strfmon use STD_C89 everywhere, since -pedantic warnings\n+   make no sense for a format type not part of any C standard version.  */\n+static const format_length_info strfmon_length_specs[] =\n+{\n+  /* A GNU extension.  */\n+  { \"L\", FMT_LEN_L, STD_C89, NULL, 0, 0 },\n+  { NULL, 0, 0, NULL, 0, 0 }\n+};\n+\n static const format_flag_spec printf_flag_specs[] =\n {\n-  { ' ',  0, N_(\"` ' flag\"),        N_(\"the ` ' printf flag\"),              STD_C89 },\n-  { '+',  0, N_(\"`+' flag\"),        N_(\"the `+' printf flag\"),              STD_C89 },\n-  { '#',  0, N_(\"`#' flag\"),        N_(\"the `#' printf flag\"),              STD_C89 },\n-  { '0',  0, N_(\"`0' flag\"),        N_(\"the `0' printf flag\"),              STD_C89 },\n-  { '-',  0, N_(\"`-' flag\"),        N_(\"the `-' printf flag\"),              STD_C89 },\n-  { '\\'', 0, N_(\"`'' flag\"),        N_(\"the `'' printf flag\"),              STD_EXT },\n-  { 'I',  0, N_(\"`I' flag\"),        N_(\"the `I' printf flag\"),              STD_EXT },\n-  { 'w',  0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n-  { 'p',  0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n-  { 'L',  0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n-  { 0, 0, NULL, NULL, 0 }\n+  { ' ',  0, 0, N_(\"` ' flag\"),        N_(\"the ` ' printf flag\"),              STD_C89 },\n+  { '+',  0, 0, N_(\"`+' flag\"),        N_(\"the `+' printf flag\"),              STD_C89 },\n+  { '#',  0, 0, N_(\"`#' flag\"),        N_(\"the `#' printf flag\"),              STD_C89 },\n+  { '0',  0, 0, N_(\"`0' flag\"),        N_(\"the `0' printf flag\"),              STD_C89 },\n+  { '-',  0, 0, N_(\"`-' flag\"),        N_(\"the `-' printf flag\"),              STD_C89 },\n+  { '\\'', 0, 0, N_(\"`'' flag\"),        N_(\"the `'' printf flag\"),              STD_EXT },\n+  { 'I',  0, 0, N_(\"`I' flag\"),        N_(\"the `I' printf flag\"),              STD_EXT },\n+  { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in printf format\"),     STD_C89 },\n+  { 'p',  0, 0, N_(\"precision\"),       N_(\"precision in printf format\"),       STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in printf format\"), STD_C89 },\n+  { 0, 0, 0, NULL, NULL, 0 }\n };\n \n \n@@ -1606,13 +1630,13 @@ static const format_flag_pair printf_flag_pairs[] =\n \n static const format_flag_spec scanf_flag_specs[] =\n {\n-  { '*',  0, N_(\"assignment suppression\"), N_(\"assignment suppression\"),          STD_C89 },\n-  { 'a',  0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),              STD_EXT },\n-  { 'w',  0, N_(\"field width\"),            N_(\"field width in scanf format\"),     STD_C89 },\n-  { 'L',  0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"), STD_C89 },\n-  { '\\'', 0, N_(\"`'' flag\"),               N_(\"the `'' scanf flag\"),              STD_EXT },\n-  { 'I',  0, N_(\"`I' flag\"),               N_(\"the `I' scanf flag\"),              STD_EXT },\n-  { 0, 0, NULL, NULL, 0 }\n+  { '*',  0, 0, N_(\"assignment suppression\"), N_(\"assignment suppression\"),          STD_C89 },\n+  { 'a',  0, 0, N_(\"`a' flag\"),               N_(\"the `a' scanf flag\"),              STD_EXT },\n+  { 'w',  0, 0, N_(\"field width\"),            N_(\"field width in scanf format\"),     STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"),        N_(\"length modifier in scanf format\"), STD_C89 },\n+  { '\\'', 0, 0, N_(\"`'' flag\"),               N_(\"the `'' scanf flag\"),              STD_EXT },\n+  { 'I',  0, 0, N_(\"`I' flag\"),               N_(\"the `I' scanf flag\"),              STD_EXT },\n+  { 0, 0, 0, NULL, NULL, 0 }\n };\n \n \n@@ -1625,16 +1649,16 @@ static const format_flag_pair scanf_flag_pairs[] =\n \n static const format_flag_spec strftime_flag_specs[] =\n {\n-  { '_', 0,   N_(\"`_' flag\"),     N_(\"the `_' strftime flag\"),          STD_EXT },\n-  { '-', 0,   N_(\"`-' flag\"),     N_(\"the `-' strftime flag\"),          STD_EXT },\n-  { '0', 0,   N_(\"`0' flag\"),     N_(\"the `0' strftime flag\"),          STD_EXT },\n-  { '^', 0,   N_(\"`^' flag\"),     N_(\"the `^' strftime flag\"),          STD_EXT },\n-  { '#', 0,   N_(\"`#' flag\"),     N_(\"the `#' strftime flag\"),          STD_EXT },\n-  { 'w', 0,   N_(\"field width\"),  N_(\"field width in strftime format\"), STD_EXT },\n-  { 'E', 0,   N_(\"`E' modifier\"), N_(\"the `E' strftime modifier\"),      STD_C99 },\n-  { 'O', 0,   N_(\"`O' modifier\"), N_(\"the `O' strftime modifier\"),      STD_C99 },\n-  { 'O', 'o', NULL,               N_(\"the `O' modifier\"),               STD_EXT },\n-  { 0, 0, NULL, NULL, 0 }\n+  { '_', 0,   0, N_(\"`_' flag\"),     N_(\"the `_' strftime flag\"),          STD_EXT },\n+  { '-', 0,   0, N_(\"`-' flag\"),     N_(\"the `-' strftime flag\"),          STD_EXT },\n+  { '0', 0,   0, N_(\"`0' flag\"),     N_(\"the `0' strftime flag\"),          STD_EXT },\n+  { '^', 0,   0, N_(\"`^' flag\"),     N_(\"the `^' strftime flag\"),          STD_EXT },\n+  { '#', 0,   0, N_(\"`#' flag\"),     N_(\"the `#' strftime flag\"),          STD_EXT },\n+  { 'w', 0,   0, N_(\"field width\"),  N_(\"field width in strftime format\"), STD_EXT },\n+  { 'E', 0,   0, N_(\"`E' modifier\"), N_(\"the `E' strftime modifier\"),      STD_C99 },\n+  { 'O', 0,   0, N_(\"`O' modifier\"), N_(\"the `O' strftime modifier\"),      STD_C99 },\n+  { 'O', 'o', 0, NULL,               N_(\"the `O' modifier\"),               STD_EXT },\n+  { 0, 0, 0, NULL, NULL, 0 }\n };\n \n \n@@ -1649,6 +1673,28 @@ static const format_flag_pair strftime_flag_pairs[] =\n };\n \n \n+static const format_flag_spec strfmon_flag_specs[] =\n+{\n+  { '=',  0, 1, N_(\"fill character\"),  N_(\"fill character in strfmon format\"),  STD_C89 },\n+  { '^',  0, 0, N_(\"`^' flag\"),        N_(\"the `^' strfmon flag\"),              STD_C89 },\n+  { '+',  0, 0, N_(\"`+' flag\"),        N_(\"the `+' strfmon flag\"),              STD_C89 },\n+  { '(',  0, 0, N_(\"`(' flag\"),        N_(\"the `(' strfmon flag\"),              STD_C89 },\n+  { '!',  0, 0, N_(\"`!' flag\"),        N_(\"the `!' strfmon flag\"),              STD_C89 },\n+  { '-',  0, 0, N_(\"`-' flag\"),        N_(\"the `-' strfmon flag\"),              STD_C89 },\n+  { 'w',  0, 0, N_(\"field width\"),     N_(\"field width in strfmon format\"),     STD_C89 },\n+  { '#',  0, 0, N_(\"left precision\"),  N_(\"left precision in strfmon format\"),  STD_C89 },\n+  { 'p',  0, 0, N_(\"right precision\"), N_(\"right precision in strfmon format\"), STD_C89 },\n+  { 'L',  0, 0, N_(\"length modifier\"), N_(\"length modifier in strfmon format\"), STD_C89 },\n+  { 0, 0, 0, NULL, NULL, 0 }\n+};\n+\n+static const format_flag_pair strfmon_flag_pairs[] =\n+{\n+  { '+', '(', 0, 0 },\n+  { 0, 0, 0, 0 }\n+};\n+\n+\n #define T_I\t&integer_type_node\n #define T89_I\t{ STD_C89, NULL, T_I }\n #define T99_I\t{ STD_C99, NULL, T_I }\n@@ -1748,7 +1794,7 @@ static const format_char_info scan_char_table[] =\n   { NULL, 0, 0, NOLENGTHS, NULL, NULL }\n };\n \n-static format_char_info time_char_table[] =\n+static const format_char_info time_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n   { \"ABZab\",\t\t0, STD_C89, NOLENGTHS, \"^#\",     \"\"   },\n@@ -1775,23 +1821,36 @@ static format_char_info time_char_table[] =\n   { NULL,\t\t0, 0, NOLENGTHS, NULL, NULL }\n };\n \n+static const format_char_info monetary_char_table[] =\n+{\n+  { \"in\", 0, STD_C89, { T89_D, BADLEN, BADLEN, BADLEN, BADLEN, T89_LD, BADLEN, BADLEN, BADLEN }, \"=^+(!-w#p\", \"\" },\n+  { NULL, 0, 0, NOLENGTHS, NULL, NULL }\n+};\n+\n \n /* This must be in the same order as enum format_type.  */\n static const format_kind_info format_types[] =\n {\n-  { \"printf\",   printf_length_specs, print_char_table, \" +#0-'I\", NULL, \n+  { \"printf\",   printf_length_specs,  print_char_table, \" +#0-'I\", NULL, \n     printf_flag_specs, printf_flag_pairs,\n-    FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE, 'w', 'p', 0, 'L',\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_DOLLAR_MULTIPLE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_EMPTY_PREC_OK,\n+    'w', 0, 'p', 0, 'L',\n     &integer_type_node, &integer_type_node\n   },\n-  { \"scanf\",    scanf_length_specs,  scan_char_table,  \"*'I\", NULL, \n+  { \"scanf\",    scanf_length_specs,   scan_char_table,  \"*'I\", NULL, \n     scanf_flag_specs, scanf_flag_pairs,\n-    FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE, 'w', 0, '*', 'L',\n+    FMT_FLAG_ARG_CONVERT|FMT_FLAG_SCANF_A_KLUDGE|FMT_FLAG_USE_DOLLAR|FMT_FLAG_ZERO_WIDTH_BAD,\n+    'w', 0, 0, '*', 'L',\n     NULL, NULL\n   },\n-  { \"strftime\", NULL,                time_char_table,  \"_-0^#\", \"EO\",\n+  { \"strftime\", NULL,                 time_char_table,  \"_-0^#\", \"EO\",\n     strftime_flag_specs, strftime_flag_pairs,\n-    FMT_FLAG_FANCY_PERCENT_OK, 'w', 0, 0, 0,\n+    FMT_FLAG_FANCY_PERCENT_OK, 'w', 0, 0, 0, 0,\n+    NULL, NULL\n+  },\n+  { \"strfmon\",  strfmon_length_specs, monetary_char_table, \"=^+(!-\", NULL, \n+    strfmon_flag_specs, strfmon_flag_pairs,\n+    FMT_FLAG_ARG_CONVERT, 'w', '#', 'p', 0, 'L',\n     NULL, NULL\n   }\n };\n@@ -1934,6 +1993,9 @@ init_function_format_info ()\n       record_international_format (get_identifier (\"gettext\"), NULL_TREE, 1);\n       record_international_format (get_identifier (\"dgettext\"), NULL_TREE, 2);\n       record_international_format (get_identifier (\"dcgettext\"), NULL_TREE, 2);\n+      /* X/Open strfmon function.  */\n+      record_function_format (get_identifier (\"strfmon\"), NULL_TREE,\n+\t\t\t      strfmon_format_type, 3, 4);\n     }\n }\n \n@@ -2684,7 +2746,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t}\n       flag_chars[0] = 0;\n \n-      if ((fki->flags & FMT_FLAG_ARG_CONVERT) && has_operand_number != 0)\n+      if ((fki->flags & FMT_FLAG_USE_DOLLAR) && has_operand_number != 0)\n \t{\n \t  /* Possibly read a $ operand number at the start of the format.\n \t     If one was previously used, one is required here.  If one\n@@ -2709,10 +2771,10 @@ check_format_info_main (status, res, info, format_chars, format_length,\n       while (*format_chars != 0\n \t     && strchr (fki->flag_chars, *format_chars) != 0)\n \t{\n+\t  const format_flag_spec *s = get_flag_spec (flag_specs,\n+\t\t\t\t\t\t     *format_chars, NULL);\n \t  if (strchr (flag_chars, *format_chars) != 0)\n \t    {\n-\t      const format_flag_spec *s = get_flag_spec (flag_specs,\n-\t\t\t\t\t\t\t *format_chars, NULL);\n \t      status_warning (status, \"repeated %s in format\", _(s->name));\n \t    }\n \t  else\n@@ -2721,6 +2783,15 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t      flag_chars[i++] = *format_chars;\n \t      flag_chars[i] = 0;\n \t    }\n+\t  if (s->skip_next_char)\n+\t    {\n+\t      ++format_chars;\n+\t      if (*format_chars == 0)\n+\t\t{\n+\t\t  status_warning (status, \"missing fill character at end of strfmon format\");\n+\t\t  return;\n+\t\t}\n+\t    }\n \t  ++format_chars;\n \t}\n \n@@ -2785,9 +2856,7 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t  else\n \t    {\n \t      /* Possibly read a numeric width.  If the width is zero,\n-\t\t we complain; for scanf this is bad according to the\n-\t\t standard, and for printf and strftime it cannot occur\n-\t\t because 0 is a flag.  */\n+\t\t we complain if appropriate.  */\n \t      int non_zero_width_char = FALSE;\n \t      int found_width = FALSE;\n \t      while (ISDIGIT (*format_chars))\n@@ -2797,7 +2866,8 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t\t    non_zero_width_char = TRUE;\n \t\t  ++format_chars;\n \t\t}\n-\t      if (found_width && !non_zero_width_char)\n+\t      if (found_width && !non_zero_width_char &&\n+\t\t  (fki->flags & FMT_FLAG_ZERO_WIDTH_BAD))\n \t\tstatus_warning (status, \"zero width in %s format\",\n \t\t\t\tfki->name);\n \t      if (found_width)\n@@ -2809,6 +2879,20 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t    }\n \t}\n \n+      /* Read any format left precision (must be a number, not *).  */\n+      if (fki->left_precision_char != 0 && *format_chars == '#')\n+\t{\n+\t  ++format_chars;\n+\t  i = strlen (flag_chars);\n+\t  flag_chars[i++] = fki->left_precision_char;\n+\t  flag_chars[i] = 0;\n+\t  if (!ISDIGIT (*format_chars))\n+\t    status_warning (status, \"empty left precision in %s format\",\n+\t\t\t    fki->name);\n+\t  while (ISDIGIT (*format_chars))\n+\t    ++format_chars;\n+\t}\n+\n       /* Read any format precision, possibly * or *m$.  */\n       if (fki->precision_char != 0 && *format_chars == '.')\n \t{\n@@ -2870,6 +2954,10 @@ check_format_info_main (status, res, info, format_chars, format_length,\n \t    }\n \t  else\n \t    {\n+\t      if (!(fki->flags & FMT_FLAG_EMPTY_PREC_OK)\n+\t\t  && !ISDIGIT (*format_chars))\n+\t\tstatus_warning (status, \"empty precision in %s format\",\n+\t\t\t\tfki->name);\n \t      while (ISDIGIT (*format_chars))\n \t\t++format_chars;\n \t    }"}, {"sha": "1709980f3764e4ca13310c39affd4bccd6ebcd07", "filename": "gcc/extend.texi", "status": "modified", "additions": 33, "deletions": 20, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -1381,7 +1381,7 @@ hack ((union foo) x);\n @cindex functions that behave like malloc\n @cindex @code{volatile} applied to function\n @cindex @code{const} applied to function\n-@cindex functions with @code{printf}, @code{scanf} or @code{strftime} style arguments\n+@cindex functions with @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon} style arguments\n @cindex functions that are passed arguments in registers on the 386\n @cindex functions that pop the argument stack on the 386\n @cindex functions that do not pop the argument stack on the 386\n@@ -1505,8 +1505,9 @@ specifies that the @samp{const} must be attached to the return value.\n @item format (@var{archetype}, @var{string-index}, @var{first-to-check})\n @cindex @code{format} function attribute\n The @code{format} attribute specifies that a function takes @code{printf},\n-@code{scanf}, or @code{strftime} style arguments which should be type-checked\n-against a format string.  For example, the declaration:\n+@code{scanf}, @code{strftime} or @code{strfmon} style arguments which\n+should be type-checked against a format string.  For example, the\n+declaration:\n \n @smallexample\n extern int\n@@ -1520,8 +1521,9 @@ for consistency with the @code{printf} style format string argument\n @code{my_format}.\n \n The parameter @var{archetype} determines how the format string is\n-interpreted, and should be either @code{printf}, @code{scanf}, or\n-@code{strftime}.  The\n+interpreted, and should be @code{printf}, @code{scanf}, @code{strftime}\n+or @code{strfmon}.  (You can also use @code{__printf__},\n+@code{__scanf__}, @code{__strftime__} or @code{__strfmon__}.)  The\n parameter @var{string-index} specifies which argument is the format\n string argument (starting from 1), while @var{first-to-check} is the\n number of the first argument to check against the format string.  For\n@@ -1545,15 +1547,20 @@ for the standard library functions @code{printf}, @code{fprintf},\n warnings are requested (using @samp{-Wformat}), so there is no need to\n modify the header file @file{stdio.h}.  In C99 mode, the functions\n @code{snprintf}, @code{vsnprintf}, @code{vscanf}, @code{vfscanf} and\n-@code{vsscanf} are also checked.\n+@code{vsscanf} are also checked.  Except in strictly conforming C\n+standard modes, the X/Open function @code{strfmon} is also checked.\n @xref{C Dialect Options,,Options Controlling C Dialect}.\n \n @item format_arg (@var{string-index})\n @cindex @code{format_arg} function attribute\n-The @code{format_arg} attribute specifies that a function takes\n-@code{printf} or @code{scanf} style arguments, modifies it (for example,\n-to translate it into another language), and passes it to a @code{printf}\n-or @code{scanf} style function.  For example, the declaration:\n+The @code{format_arg} attribute specifies that a function takes a format\n+string for a @code{printf}, @code{scanf}, @code{strftime} or\n+@code{strfmon} style function and modifies it (for example, to translate\n+it into another language), so the result can be passed to a\n+@code{printf}, @code{scanf}, @code{strftime} or @code{strfmon} style\n+function (with the remaining arguments to the format function the same\n+as they would have been for the unmodified string).  For example, the\n+declaration:\n \n @smallexample\n extern char *\n@@ -1562,22 +1569,28 @@ my_dgettext (char *my_domain, const char *my_format)\n @end smallexample\n \n @noindent\n-causes the compiler to check the arguments in calls to\n-@code{my_dgettext} whose result is passed to a @code{printf},\n-@code{scanf}, or @code{strftime} type function for consistency with the\n-@code{printf} style format string argument @code{my_format}.\n+causes the compiler to check the arguments in calls to a @code{printf},\n+@code{scanf}, @code{strftime} or @code{strfmon} type function, whose\n+format string argument is a call to the @code{my_dgettext} function, for\n+consistency with the format string argument @code{my_format}.  If the\n+@code{format_arg} attribute had not been specified, all the compiler\n+could tell in such calls to format functions would be that the format\n+string argument is not constant; this would generate a warning when\n+@code{-Wformat-nonliteral} is used, but the calls could not be checked\n+without the attribute.\n \n The parameter @var{string-index} specifies which argument is the format\n string argument (starting from 1).\n \n The @code{format-arg} attribute allows you to identify your own\n functions which modify format strings, so that GNU CC can check the\n-calls to @code{printf}, @code{scanf}, or @code{strftime} function whose\n-operands are a call to one of your own function.  The compiler always\n-treats @code{gettext}, @code{dgettext}, and @code{dcgettext} in this\n-manner except when strict ISO C support is requested by @samp{-ansi} or\n-an appropriate @samp{-std} option, or @samp{-ffreestanding} is used.\n-@xref{C Dialect Options,,Options Controlling C Dialect}.\n+calls to @code{printf}, @code{scanf}, @code{strftime} or @code{strfmon}\n+type function whose operands are a call to one of your own function.\n+The compiler always treats @code{gettext}, @code{dgettext}, and\n+@code{dcgettext} in this manner except when strict ISO C support is\n+requested by @samp{-ansi} or an appropriate @samp{-std} option, or\n+@samp{-ffreestanding} is used.  @xref{C Dialect Options,,Options\n+Controlling C Dialect}.\n \n @item no_instrument_function\n @cindex @code{no_instrument_function} function attribute"}, {"sha": "c5559581c1216b1aeb4c0a8aa5ea2a1e78e05874", "filename": "gcc/invoke.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finvoke.texi?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -1596,7 +1596,11 @@ comment, or whenever a Backslash-Newline appears in a @samp{//} comment.\n @item -Wformat\n Check calls to @code{printf} and @code{scanf}, etc., to make sure that\n the arguments supplied have types appropriate to the format string\n-specified.\n+specified, and that the conversions specified in the format string make\n+sense.  This includes standard functions, and others specified by format\n+attributes (@pxref{Function Attributes}), in the @code{printf},\n+@code{scanf}, @code{strftime} and @code{strfmon} (an X/Open extension,\n+not in the C standard) families.\n \n The formats are checked against the format features supported by GNU\n libc version 2.2.  These include all ISO C89 and C99 features, as well\n@@ -1605,8 +1609,9 @@ extensions.  Other library implementations may not support all these\n features; GCC does not support warning about features that go beyond a\n particular library's limitations.  However, if @samp{-pedantic} is used\n with @samp{-Wformat}, warnings will be given about format features not\n-in the selected standard version.  @xref{C Dialect Options,,Options\n-Controlling C Dialect}.\n+in the selected standard version (but not for @code{strfmon} formats,\n+since those are not in any version of the C standard).  @xref{C Dialect\n+Options,,Options Controlling C Dialect}.\n \n @samp{-Wformat} is included in @samp{-Wall}.  For more control over some\n aspects of format checking, the options @samp{-Wno-format-y2k},"}, {"sha": "b4f220d4f2b093e9827fca81e16ecd60e55cea3d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -1,3 +1,7 @@\n+2000-12-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/format-strfmon-1.c: New test.\n+\n 2000-12-27  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* gcc.c-torture/execute/stdio-opt-1.c: Test __builtin_ style too."}, {"sha": "40d44c14a71e728bf714830ddb73a1b645645747", "filename": "gcc/testsuite/gcc.dg/format-strfmon-1.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-strfmon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-strfmon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat-strfmon-1.c?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -0,0 +1,68 @@\n+/* Test for strfmon format checking.  */\n+/* Origin: Joseph Myers <jsm28@cam.ac.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+typedef __SIZE_TYPE__ size_t;\n+\n+/* Kludge to get something that may be ssize_t.  */\n+#define unsigned signed\n+typedef __SIZE_TYPE__ ssize_t;\n+#undef unsigned\n+\n+#define NULL ((void *)0)\n+\n+extern ssize_t strfmon (char *restrict, size_t, const char *restrict, ...);\n+\n+void\n+foo (char *s, size_t m, double d, long double ld)\n+{\n+  /* Examples of valid formats from Austin Group draft 5.  */\n+  strfmon (s, m, \"%n\", d);\n+  strfmon (s, m, \"%11n\", d);\n+  strfmon (s, m, \"%#5n\", d);\n+  strfmon (s, m, \"%=*#5n\", d);\n+  strfmon (s, m, \"%=0#5n\", d);\n+  strfmon (s, m, \"%^#5n\", d);\n+  strfmon (s, m, \"%^#5.0n\", d);\n+  strfmon (s, m, \"%^#5.4n\", d);\n+  strfmon (s, m, \"%(#5n\", d);\n+  strfmon (s, m, \"%(!#5n\", d);\n+  /* Some more valid formats, including the GNU L length extension.  */\n+  strfmon (s, m, \"abc%-11ndef%==i%%\", d, d);\n+  strfmon (s, m, \"%%abc%-11ndef%==Li%=%i\", d, ld, d);\n+  strfmon (s, m, \"%Li\", ld);\n+  strfmon (s, m, \"%11Li\", ld);\n+  strfmon (s, m, \"%#5Li\", ld);\n+  strfmon (s, m, \"%=*#5Li\", ld);\n+  strfmon (s, m, \"%=0#5Li\", ld);\n+  strfmon (s, m, \"%^#5Li\", ld);\n+  strfmon (s, m, \"%^#5.0Li\", ld);\n+  strfmon (s, m, \"%^#5.4Li\", ld);\n+  strfmon (s, m, \"%(#5Li\", ld);\n+  strfmon (s, m, \"%(!#5Li\", ld);\n+  /* Formats with the wrong types used.  */\n+  strfmon (s, m, \"%Ln\", d); /* { dg-warning \"format\" \"wrong type\" } */\n+  strfmon (s, m, \"%n\", ld); /* { dg-warning \"format\" \"wrong type\" } */\n+  /* The + and ( flags cannot be used together.  */\n+  strfmon (s, m, \"%+(i\", d); /* { dg-warning \"flag\" \"+ and ( flags\" } */\n+  strfmon (s, m, \"%(+i\", d); /* { dg-warning \"flag\" \"+ and ( flags\" } */\n+  /* Although empty precision is OK for printf, it isn't here.  */\n+  strfmon (s, m, \"%#.5n\", d); /* { dg-warning \"empty\" \"empty left precision\" } */\n+  strfmon (s, m, \"%#5.n\", d); /* { dg-warning \"empty\" \"empty right precision\" } */\n+  /* However, zero is a valid value for width and precisions.  */\n+  strfmon (s, m, \"%0#0.0n\", d);\n+  /* Test bogus %% constructions.  */\n+  strfmon (s, m, \"%^%\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  strfmon (s, m, \"%!%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  strfmon (s, m, \"%5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  strfmon (s, m, \"%.5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  strfmon (s, m, \"%#5%\\n\"); /* { dg-warning \"format\" \"bogus %%\" } */\n+  /* Miscellaneous bogus formats.  */\n+  strfmon (s, m, \"%n%n\", d); /* { dg-warning \"arguments\" \"too few args\" } */\n+  strfmon (s, m, \"\"); /* { dg-warning \"zero-length\" \"empty\" } */\n+  strfmon (s, m, NULL); /* { dg-warning \"null\" \"null format string\" } */\n+  strfmon (s, m, \"%\"); /* { dg-warning \"trailing\" \"tailing %\" } */\n+  strfmon (s, m, \"%n\\0\", d); /* { dg-warning \"embedded\" \"embedded NUL\" } */\n+  strfmon (s, m, \"%^^n\", d); /* { dg-warning \"repeated\" \"repeated flag\" } */\n+}"}, {"sha": "01439573b7938e4a2388dc4fdd64e0cbc63f8174", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f6672d2ea0edf3d48934e5eedae724e3c11e9d/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=26f6672d2ea0edf3d48934e5eedae724e3c11e9d", "patch": "@@ -1226,7 +1226,7 @@ documented_lang_options[] =\n   { \"-Wno-comments\", \"\" },\n   { \"-Wconversion\", \"Warn about possibly confusing type conversions\" },\n   { \"-Wno-conversion\", \"\" },\n-  { \"-Wformat\", \"Warn about printf/scanf/strftime format anomalies\" },\n+  { \"-Wformat\", \"Warn about printf/scanf/strftime/strfmon format anomalies\" },\n   { \"-Wno-format\", \"\" },\n   { \"-Wformat-y2k\", \"\" },\n   { \"-Wno-format-y2k\","}]}