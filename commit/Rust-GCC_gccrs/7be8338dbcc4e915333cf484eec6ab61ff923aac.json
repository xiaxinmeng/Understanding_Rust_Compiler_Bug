{"sha": "7be8338dbcc4e915333cf484eec6ab61ff923aac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JlODMzOGRiY2M0ZTkxNTMzM2NmNDg0ZWVjNmFiNjFmZjkyM2FhYw==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2013-04-25T10:39:36Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-04-25T10:39:36Z"}, "message": "sem_prag.adb: Minor code reorganization (correct misspelling Restiction).\n\n2013-04-25  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb: Minor code reorganization (correct misspelling\n\tRestiction).\n\t* sem_util.adb, aspects.ads, sem_ch6.adb: Minor reformatting.\n\t* gnat_rm.texi: Document impl-defined aspects.\n\t* sem_dim.adb, sem_dim.ads, gnat_ugn.texi, s-dimmks.ads: Minor\n\treformatting.\n\nFrom-SVN: r198291", "tree": {"sha": "5f43e919c782c9199c6559951e17e26234a789b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f43e919c782c9199c6559951e17e26234a789b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7be8338dbcc4e915333cf484eec6ab61ff923aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be8338dbcc4e915333cf484eec6ab61ff923aac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7be8338dbcc4e915333cf484eec6ab61ff923aac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7be8338dbcc4e915333cf484eec6ab61ff923aac/comments", "author": null, "committer": null, "parents": [{"sha": "f40f731b98bd4035eee5c9ceccaf9a324a280a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f40f731b98bd4035eee5c9ceccaf9a324a280a9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f40f731b98bd4035eee5c9ceccaf9a324a280a9a"}], "stats": {"total": 1232, "additions": 826, "deletions": 406}, "files": [{"sha": "fb5818bc296a03ab523adb90304938fa1d20d993", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -1,3 +1,12 @@\n+2013-04-25  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb: Minor code reorganization (correct misspelling\n+\tRestiction).\n+\t* sem_util.adb, aspects.ads, sem_ch6.adb: Minor reformatting.\n+\t* gnat_rm.texi: Document impl-defined aspects.\n+\t* sem_dim.adb, sem_dim.ads, gnat_ugn.texi, s-dimmks.ads: Minor\n+\treformatting.\n+\n 2013-04-25  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* einfo.adb (Set_Abstract_States): The attribute now applies"}, {"sha": "6941cc1c6661c898a1302f6417caef8bbd59c434", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -186,7 +186,7 @@ package Aspects is\n       --  Aspects that have a static boolean value but don't correspond to\n       --  pragmas\n \n-      Aspect_Lock_Free);\n+      Aspect_Lock_Free);                    -- GNAT\n \n    subtype Aspect_Id_Exclude_No_Aspect is\n      Aspect_Id range Aspect_Id'Succ (No_Aspect) .. Aspect_Id'Last;"}, {"sha": "6d51c8f3aa8999edc5f495818e8c812a302036c9", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 682, "deletions": 259, "changes": 941, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -70,6 +70,7 @@ AdaCore\n @menu\n * About This Guide::\n * Implementation Defined Pragmas::\n+* Implementation Defined Aspects::\n * Implementation Defined Attributes::\n * Standard and Implementation Defined Restrictions::\n * Implementation Advice::\n@@ -248,70 +249,106 @@ Implementation Defined Pragmas\n * Pragma Weak_External::\n * Pragma Wide_Character_Encoding::\n \n+Implementation Defined Aspects\n+\n+* Aspect Abstract_State::\n+* Aspect Ada_2005::\n+* Aspect Ada_2012::\n+* Aspect Compiler_Unit::\n+* Aspect Contract_Cases::\n+* Aspect Depends::\n+* Aspect Dimension::\n+* Aspect Dimension_System::\n+* Aspect Favor_Top_Level::\n+* Aspect Global::\n+* Aspect Inline_Always::\n+* Aspect Invariant::\n+* Aspect Object_Size::\n+* Aspect Persistent_BSS::\n+* Aspect Predicate::\n+* Aspect Preelaborate_05::\n+* Aspect Pure_05::\n+* Aspect Pure_12::\n+* Aspect Pure_Function::\n+* Aspect Remote_Access_Type::\n+* Aspect Scalar_Storage_Order::\n+* Aspect Shared::\n+* Aspect Simple_Storage_Pool::\n+* Aspect Simple_Storage_Pool_Type::\n+* Aspect Suppress_Debug_Info::\n+* Aspect Test_Case::\n+* Aspect Universal_Aliasing::\n+* Aspect Universal_Data::\n+* Aspect Unmodified::\n+* Aspect Unreferenced::\n+* Aspect Unreferenced_Objects::\n+* Aspect Value_Size::\n+* Aspect Warnings::\n+\n Implementation Defined Attributes\n \n-* Abort_Signal::\n-* Address_Size::\n-* Asm_Input::\n-* Asm_Output::\n-* AST_Entry::\n-* Bit::\n-* Bit_Position::\n-* Compiler_Version::\n-* Code_Address::\n-* Default_Bit_Order::\n-* Descriptor_Size::\n-* Elaborated::\n-* Elab_Body::\n-* Elab_Spec::\n-* Elab_Subp_Body::\n-* Emax::\n-* Enabled::\n-* Enum_Rep::\n-* Enum_Val::\n-* Epsilon::\n-* Fixed_Value::\n-* Has_Access_Values::\n-* Has_Discriminants::\n-* Img::\n-* Integer_Value::\n-* Invalid_Value::\n-* Large::\n-* Loop_Entry::\n-* Machine_Size::\n-* Mantissa::\n-* Max_Interrupt_Priority::\n-* Max_Priority::\n-* Maximum_Alignment::\n-* Mechanism_Code::\n-* Null_Parameter::\n-* Object_Size::\n-* Passed_By_Reference::\n-* Pool_Address::\n-* Range_Length::\n-* Result::\n-* Safe_Emax::\n-* Safe_Large::\n-* Scalar_Storage_Order::\n-* Simple_Storage_Pool::\n-* Small::\n-* Storage_Unit::\n-* Stub_Type::\n-* System_Allocator_Alignment::\n-* Target_Name::\n-* Tick::\n-* To_Address::\n-* Type_Class::\n-* UET_Address::\n-* Unconstrained_Array::\n-* Universal_Literal_String::\n-* Unrestricted_Access::\n-* Update::\n-* Valid_Scalars::\n-* VADS_Size::\n-* Value_Size::\n-* Wchar_T_Size::\n-* Word_Size::\n+* Attribute Abort_Signal::\n+* Attribute Address_Size::\n+* Attribute Asm_Input::\n+* Attribute Asm_Output::\n+* Attribute AST_Entry::\n+* Attribute Bit::\n+* Attribute Bit_Position::\n+* Attribute Compiler_Version::\n+* Attribute Code_Address::\n+* Attribute Default_Bit_Order::\n+* Attribute Descriptor_Size::\n+* Attribute Elaborated::\n+* Attribute Elab_Body::\n+* Attribute Elab_Spec::\n+* Attribute Elab_Subp_Body::\n+* Attribute Emax::\n+* Attribute Enabled::\n+* Attribute Enum_Rep::\n+* Attribute Enum_Val::\n+* Attribute Epsilon::\n+* Attribute Fixed_Value::\n+* Attribute Has_Access_Values::\n+* Attribute Has_Discriminants::\n+* Attribute Img::\n+* Attribute Integer_Value::\n+* Attribute Invalid_Value::\n+* Attribute Large::\n+* Attribute Loop_Entry::\n+* Attribute Machine_Size::\n+* Attribute Mantissa::\n+* Attribute Max_Interrupt_Priority::\n+* Attribute Max_Priority::\n+* Attribute Maximum_Alignment::\n+* Attribute Mechanism_Code::\n+* Attribute Null_Parameter::\n+* Attribute Object_Size::\n+* Attribute Passed_By_Reference::\n+* Attribute Pool_Address::\n+* Attribute Range_Length::\n+* Attribute Result::\n+* Attribute Safe_Emax::\n+* Attribute Safe_Large::\n+* Attribute Scalar_Storage_Order::\n+* Attribute Simple_Storage_Pool::\n+* Attribute Small::\n+* Attribute Storage_Unit::\n+* Attribute Stub_Type::\n+* Attribute System_Allocator_Alignment::\n+* Attribute Target_Name::\n+* Attribute Tick::\n+* Attribute To_Address::\n+* Attribute Type_Class::\n+* Attribute UET_Address::\n+* Attribute Unconstrained_Array::\n+* Attribute Universal_Literal_String::\n+* Attribute Unrestricted_Access::\n+* Attribute Update::\n+* Attribute Valid_Scalars::\n+* Attribute VADS_Size::\n+* Attribute Value_Size::\n+* Attribute Wchar_T_Size::\n+* Attribute Word_Size::\n \n Standard and Implementation Defined Restrictions\n \n@@ -1990,11 +2027,11 @@ pragma Postcondition (if C2 then Pred2);\n @end smallexample\n \n @noindent\n-The precondition expresses that one and only one of the conditions is\n+The precondition ensures that one and only one of the conditions is\n satisfied on entry to the subprogram.\n-The postcondition expresses that, whenever condition @code{Ci} is satisfied\n-on entry to the subprogram, consequence @code{Predi} should be fulfilled on\n-exit to the subprogram.\n+The postcondition ensures that for the condition that was True on entry,\n+the corrresponding consequence is True on exit. Other consequence expressions\n+are not evaluated.\n \n A precondition @code{P} and postcondition @code{Q} can also be\n expressed as contract cases:\n@@ -6640,6 +6677,392 @@ Note that when the pragma is used within a file, it affects only the\n encoding within that file, and does not affect withed units, specs,\n or subunits.\n \n+@node Implementation Defined Aspects\n+@chapter Implementation Defined Aspects\n+Ada defines (throughout the Ada 2012 reference manual, summarized\n+in annex K) a set of aspects that can be specified for certain entities.\n+These language defined aspects are implemented in GNAT in Ada 2012 mode\n+and work as described in the Ada 2012 Reference Manual.\n+\n+In addition, Ada 2012 allows implementations to define additional aspects\n+whose meaning is defined by the implementation.  GNAT provides\n+a number of these implementation-dependent aspects which can be used\n+to extend and enhance the functionality of the compiler.  This section of\n+the GNAT reference manual describes these additional attributes.\n+\n+Note that any program using these aspects may not be portable to\n+other compilers (although GNAT implements this set of aspects on all\n+platforms).  Therefore if portability to other compilers is an important\n+consideration, you should minimize the use of these aspects.\n+\n+Note that for many of these aspects, the effect is essentially similar\n+to the use of a pragma or attribute specification with the same name\n+applied to the entity. For example, if we write:\n+\n+@smallexample @c ada\n+type R is range 1 .. 100\n+  with Value_Size => 10;\n+@end smallexample\n+\n+@noindent\n+then the effect is the same as:\n+\n+@smallexample @c ada\n+type R is range 1 .. 100;\n+for R'Value_Size use 10;\n+@end smallexample\n+\n+@noindent\n+and if we write:\n+\n+@smallexample @c ada\n+type R is new Integer\n+  with Shared => True;\n+@end smallexample\n+\n+@noindent\n+then the effect is the same as:\n+\n+@smallexample @c ada\n+type R is new Integer;\n+pragma Shared (R);\n+@end smallexample\n+\n+@noindent\n+In the documentation sections that follow, such cases are simply marked\n+as being equivalent to the corresponding pragma or attribute definition\n+clause.\n+\n+@menu\n+* Aspect Abstract_State::\n+* Aspect Ada_2005::\n+* Aspect Ada_2012::\n+* Aspect Compiler_Unit::\n+* Aspect Contract_Cases::\n+* Aspect Depends::\n+* Aspect Dimension::\n+* Aspect Dimension_System::\n+* Aspect Favor_Top_Level::\n+* Aspect Global::\n+* Aspect Inline_Always::\n+* Aspect Invariant::\n+* Aspect Lock_Free::\n+* Aspect Object_Size::\n+* Aspect Persistent_BSS::\n+* Aspect Predicate::\n+* Aspect Preelaborate_05::\n+* Aspect Pure_05::\n+* Aspect Pure_12::\n+* Aspect Pure_Function::\n+* Aspect Remote_Access_Type::\n+* Aspect Scalar_Storage_Order::\n+* Aspect Shared::\n+* Aspect Simple_Storage_Pool::\n+* Aspect Simple_Storage_Pool_Type::\n+* Aspect Suppress_Debug_Info::\n+* Aspect Test_Case::\n+* Aspect Universal_Aliasing::\n+* Aspect Universal_Data::\n+* Aspect Unmodified::\n+* Aspect Unreferenced::\n+* Aspect Unreferenced_Objects::\n+* Aspect Value_Size::\n+* Aspect Warnings::\n+@end menu\n+\n+@node Aspect Abstract_State\n+@unnumberedsec Aspect Abstract_State\n+@findex Abstract_State\n+@noindent\n+This aspect is equivalent to pragma @code{Abstract_State}.\n+\n+@node Aspect Ada_2005\n+@unnumberedsec Aspect Ada_2005\n+@findex Ada_2005\n+@noindent\n+This aspect is equivalent to the one argument form of pragma @code{Ada_2005}.\n+\n+@node Aspect Ada_2012\n+@unnumberedsec Aspect Ada_2012\n+@findex Ada_2012\n+@noindent\n+This aspect is equivalent to the one argument form of pragma @code{Ada_2012}.\n+\n+@node Aspect Compiler_Unit\n+@unnumberedsec Aspect Compiler_Unit\n+@findex Compiler_Unit\n+@noindent\n+This aspect is equivalent to pragma @code{Compiler_Unit}.\n+\n+@node Aspect Contract_Cases\n+@unnumberedsec Aspect Contract_Cases\n+@findex Contract_Cases\n+@noindent\n+This aspect is equivalent to pragma @code{Contract_Cases}, the sequence\n+of clauses being enclosed in parentheses so that syntactically it is an\n+aggregate.\n+\n+@node Aspect Depends\n+@unnumberedsec Aspect Depends\n+@findex Depends\n+@noindent\n+This aspect is equivalent to pragma @code{Depends}.\n+\n+* Dimension::\n+\n+@node Aspect Dimension\n+@unnumberedsec Aspect Dimension\n+@findex Dimension\n+@noindent\n+The @code{Dimension} aspect is used to define a system of\n+dimensions that will be used in subsequent subtype declarations with\n+@code{Dimension} aspects that reference this system. The syntax is:\n+\n+@smallexample @c ada\n+with Dimension =>\n+  ([Symbol =>] SYMBOL, DIMENSION_VALUE @{, DIMENSION_Value@})\n+\n+SYMBOL ::= STRING_LITERAL | CHARACTER_LITERAL\n+\n+DIMENSION_VALUE ::=\n+  RATIONAL\n+| others               => RATIONAL\n+| DISCRETE_CHOICE_LIST => RATIONAL\n+\n+RATIONAL ::= [-] NUMERIC_LITERAL [/ NUMERIC_LITERAL]\n+@end smallexample\n+\n+@noindent\n+This aspect can only be applied to a subtype where the parent type has\n+a @code{Dimension_Systen} aspect. It specifies which units apply to\n+the subtype, and the corresponding powers. For examples of the usage\n+of this aspect, see package @code{System.Dim.Mks}.\n+Note that when the dimensioned type is an integer type, then any\n+dimension value must be an integer literal.\n+\n+@node Aspect Dimension_System\n+@unnumberedsec Aspect Dimension_System\n+@findex Dimension_System\n+@noindent\n+The @code{Dimension_System} aspect is used to define a system of\n+dimensions that will be used in subsequent subtype declarations with\n+@code{Dimension} aspects that reference this system. The syntax is:\n+\n+@smallexample @c ada\n+with Dimension_System => (DIMENSION @{, DIMENSION@});\n+\n+DIMENSION ::= ([Unit_Name   =>] IDENTIFIER,\n+               [Unit_Symbol =>] SYMBOL,\n+               [Dim_Symbol  =>] SYMBOL)\n+\n+SYMBOL ::= CHARACTER_LITERAL | STRING_LITERAL\n+@end smallexample\n+\n+@noindent\n+This aspect is applied to a type, which must be a numeric derived type\n+(typically a floating-point type), that\n+will represent values within the dimension system. Each @code{DIMENSION}\n+corresponds to one particular dimension. A maximum of 7 dimensions may\n+be specified. @code{Unit_Name} is the name of the dimension (for example\n+@code{Meter}). @code{Unit_Symbol} is the short hand used for quantities\n+of this dimension (for example 'm' for Meter). @code{Dim_Symbol} gives\n+the identification within the dimension system (typically this is a\n+single letter, e.g. 'L' standing for length for unit name Meter).\n+\n+Although the implementation allows multiple different dimension systems\n+to be defined using this aspect, in practice, nearly all usage of the\n+dimension system will use the standard definition in the run-time\n+package @code{System.Dim.Mks}:\n+\n+@smallexample @c ada\n+   type Mks_Type is new Long_Long_Float\n+     with\n+      Dimension_System => (\n+        (Unit_Name => Meter,    Unit_Symbol => 'm',   Dim_Symbol => 'L'),\n+        (Unit_Name => Kilogram, Unit_Symbol => \"kg\",  Dim_Symbol => 'M'),\n+        (Unit_Name => Second,   Unit_Symbol => 's',   Dim_Symbol => 'T'),\n+        (Unit_Name => Ampere,   Unit_Symbol => 'A',   Dim_Symbol => 'I'),\n+        (Unit_Name => Kelvin,   Unit_Symbol => 'K',   Dim_Symbol => \"Theta\"),\n+        (Unit_Name => Mole,     Unit_Symbol => \"mol\", Dim_Symbol => 'N'),\n+        (Unit_Name => Candela,  Unit_Symbol => \"cd\",  Dim_Symbol => 'J'));\n+@end smallexample\n+\n+@noindent\n+which correspond to the standard 7-unit dimension system typically\n+used in physical calculations. See section\n+\"Performing Dimensionality Analysis in GNAT\" in the GNAT Users\n+Guide for detailed examples of use of the dimension system.\n+\n+@node Aspect Favor_Top_Level\n+@unnumberedsec Aspect Favor_Top_Level\n+@findex Favor_Top_Level\n+@noindent\n+This aspect is equivalent to pragma @code{Favor_Top_Level}.\n+\n+@node Aspect Global\n+@unnumberedsec Aspect Global\n+@findex Global\n+@noindent\n+This aspect is equivalent pragma @code{Global}.\n+\n+@node Aspect Inline_Always\n+@unnumberedsec Aspect Inline_Always\n+@findex Inline_Always\n+@noindent\n+This aspect is equivalent to pragma @code{Inline_Always}.\n+\n+@node Aspect Invariant\n+@unnumberedsec Aspect Invariant\n+@findex Invariant\n+@noindent\n+This aspect is equivalent to pragma @code{Invariant}. It is a\n+synonym for the language defined aspect @code{Type_Invariant} except\n+that it is separately controllable using pragma @code{Assertion_Policy}.\n+\n+@node Aspect Lock_Free\n+@unnumberedsec Aspect Lock_Free\n+@findex Lock_Free\n+@noindent\n+This aspect is equivalent to pragma @code{Lock_Free}.\n+\n+@node Aspect Object_Size\n+@unnumberedsec Aspect Object_Size\n+@findex Object_Size\n+@noindent\n+This aspect is equivalent to an @code{Object_Size} attribute definition\n+clause.\n+\n+@node Aspect Persistent_BSS\n+@unnumberedsec Aspect Persistent_BSS\n+@findex Persistent_BSS\n+@noindent\n+This aspect is equivalent to pragma @code{Persistent_BSS}.\n+\n+@node Aspect Predicate\n+@unnumberedsec Aspect Predicate\n+@findex Predicate\n+@noindent\n+This aspect is equivalent to pragma @code{Predicate}. It is thus\n+similar to the language defined aspects @code{Dynamic_Predicate}\n+and @code{Static_Predicate} except that whether the resulting\n+predicate is static or dynamic is controlled by the form of the\n+expression. It is also separately controllable using pragma\n+@code{Assertion_Policy}.\n+\n+@node Aspect Preelaborate_05\n+@unnumberedsec Aspect Preelaborate_05\n+@findex Preelaborate_05\n+@noindent\n+This aspect is equivalent to pragma @code{Preelaborate_05}.\n+\n+@node Aspect Pure_05\n+@unnumberedsec Aspect Pure_05\n+@findex Pure_05\n+@noindent\n+This aspect is equivalent to pragma @code{Pure_05}.\n+\n+@node Aspect Pure_12\n+@unnumberedsec Aspect Pure_12\n+@findex Pure_12\n+@noindent\n+This aspect is equivalent to pragma @code{Pure_12}.\n+\n+@node Aspect Pure_Function\n+@unnumberedsec Aspect Pure_Function\n+@findex Pure_Function\n+@noindent\n+This aspect is equivalent to pragma @code{Pure_Function}.\n+\n+@node Aspect Remote_Access_Type\n+@unnumberedsec Aspect Remote_Access_Type\n+@findex Remote_Access_Type\n+@noindent\n+This aspect is equivalent to pragma @code{Remote_Access_Type}.\n+\n+@node Aspect Scalar_Storage_Order\n+@unnumberedsec Aspect Scalar_Storage_Order\n+@findex Scalar_Storage_Order\n+@noindent\n+This aspect is equivalent to a @code{Scalar_Storage_Order}\n+attribute definition clause.\n+\n+@node Aspect Shared\n+@unnumberedsec Aspect Shared\n+@findex Shared\n+@noindent\n+This aspect is equivalent to pragma @code{Shared}, and is thus a synonym\n+for aspect @code{Atomic}.\n+\n+@node Aspect Simple_Storage_Pool\n+@unnumberedsec Aspect Simple_Storage_Pool\n+@findex Simple_Storage_Pool\n+@noindent\n+This aspect is equivalent to a @code{Simple_Storage_Pool}\n+attribute definition clause.\n+\n+@node Aspect Simple_Storage_Pool_Type\n+@unnumberedsec Aspect Simple_Storage_Pool_Type\n+@findex Simple_Storage_Pool_Type\n+@noindent\n+This aspect is equivalent to pragma @code{Simple_Storage_Pool_Type}.\n+\n+@node Aspect Suppress_Debug_Info\n+@unnumberedsec Aspect Suppress_Debug_Info\n+@findex Suppress_Debug_Info\n+@noindent\n+This aspect is equivalent to pragma @code{Suppress_Debug_Info}.\n+\n+@node Aspect Test_Case\n+@unnumberedsec Aspect Test_Case\n+@findex Test_Case\n+@noindent\n+This aspect is equivalent to pragma @code{Test_Case}.\n+\n+@node Aspect Universal_Aliasing\n+@unnumberedsec Aspect Universal_Aliasing\n+@findex Universal_Aliasing\n+@noindent\n+This aspect is equivalent to pragma @code{Universal_Aliasing}.\n+\n+@node Aspect Universal_Data\n+@unnumberedsec Aspect Universal_Data\n+@findex Universal_Data\n+@noindent\n+This aspect is equivalent to pragma @code{Universal_Data}.\n+\n+@node Aspect Unmodified\n+@unnumberedsec Aspect Unmodified\n+@findex Unmodified\n+@noindent\n+This aspect is equivalent to pragma @code{Unmodified}.\n+\n+@node Aspect Unreferenced\n+@unnumberedsec Aspect Unreferenced\n+@findex Unreferenced\n+@noindent\n+This aspect is equivalent to pragma @code{Unreferenced}.\n+\n+@node Aspect Unreferenced_Objects\n+@unnumberedsec Aspect Unreferenced_Objects\n+@findex Unreferenced_Objects\n+@noindent\n+This aspect is equivalent to pragma @code{Unreferenced_Objects}.\n+\n+@node Aspect Value_Size\n+@unnumberedsec Aspect Value_Size\n+@findex Value_Size\n+@noindent\n+This aspect is equivalent to a @code{Value_Size}\n+attribute definition clause.\n+\n+@node Aspect Warnings\n+@unnumberedsec Aspect Warnings\n+@findex Warnings\n+@noindent\n+This aspect is equivalent to the two argument form of pragma @code{Warnings},\n+where the first argument is @code{ON} or @code{OFF} and the second argument\n+is the entity.\n+\n @node Implementation Defined Attributes\n @chapter Implementation Defined Attributes\n Ada defines (throughout the Ada reference manual,\n@@ -6660,73 +7083,73 @@ platforms).  Therefore if portability to other compilers is an important\n consideration, you should minimize the use of these attributes.\n \n @menu\n-* Abort_Signal::\n-* Address_Size::\n-* Asm_Input::\n-* Asm_Output::\n-* AST_Entry::\n-* Bit::\n-* Bit_Position::\n-* Compiler_Version::\n-* Code_Address::\n-* Default_Bit_Order::\n-* Descriptor_Size::\n-* Elaborated::\n-* Elab_Body::\n-* Elab_Spec::\n-* Elab_Subp_Body::\n-* Emax::\n-* Enabled::\n-* Enum_Rep::\n-* Enum_Val::\n-* Epsilon::\n-* Fixed_Value::\n-* Has_Access_Values::\n-* Has_Discriminants::\n-* Img::\n-* Integer_Value::\n-* Invalid_Value::\n-* Large::\n-* Loop_Entry::\n-* Machine_Size::\n-* Mantissa::\n-* Max_Interrupt_Priority::\n-* Max_Priority::\n-* Maximum_Alignment::\n-* Mechanism_Code::\n-* Null_Parameter::\n-* Object_Size::\n-* Passed_By_Reference::\n-* Pool_Address::\n-* Range_Length::\n-* Ref::\n-* Result::\n-* Safe_Emax::\n-* Safe_Large::\n-* Scalar_Storage_Order::\n-* Simple_Storage_Pool::\n-* Small::\n-* Storage_Unit::\n-* Stub_Type::\n-* System_Allocator_Alignment::\n-* Target_Name::\n-* Tick::\n-* To_Address::\n-* Type_Class::\n-* UET_Address::\n-* Unconstrained_Array::\n-* Universal_Literal_String::\n-* Unrestricted_Access::\n-* Update::\n-* Valid_Scalars::\n-* VADS_Size::\n-* Value_Size::\n-* Wchar_T_Size::\n-* Word_Size::\n+* Attribute Abort_Signal::\n+* Attribute Address_Size::\n+* Attribute Asm_Input::\n+* Attribute Asm_Output::\n+* Attribute AST_Entry::\n+* Attribute Bit::\n+* Attribute Bit_Position::\n+* Attribute Compiler_Version::\n+* Attribute Code_Address::\n+* Attribute Default_Bit_Order::\n+* Attribute Descriptor_Size::\n+* Attribute Elaborated::\n+* Attribute Elab_Body::\n+* Attribute Elab_Spec::\n+* Attribute Elab_Subp_Body::\n+* Attribute Emax::\n+* Attribute Enabled::\n+* Attribute Enum_Rep::\n+* Attribute Enum_Val::\n+* Attribute Epsilon::\n+* Attribute Fixed_Value::\n+* Attribute Has_Access_Values::\n+* Attribute Has_Discriminants::\n+* Attribute Img::\n+* Attribute Integer_Value::\n+* Attribute Invalid_Value::\n+* Attribute Large::\n+* Attribute Loop_Entry::\n+* Attribute Machine_Size::\n+* Attribute Mantissa::\n+* Attribute Max_Interrupt_Priority::\n+* Attribute Max_Priority::\n+* Attribute Maximum_Alignment::\n+* Attribute Mechanism_Code::\n+* Attribute Null_Parameter::\n+* Attribute Object_Size::\n+* Attribute Passed_By_Reference::\n+* Attribute Pool_Address::\n+* Attribute Range_Length::\n+* Attribute Ref::\n+* Attribute Result::\n+* Attribute Safe_Emax::\n+* Attribute Safe_Large::\n+* Attribute Scalar_Storage_Order::\n+* Attribute Simple_Storage_Pool::\n+* Attribute Small::\n+* Attribute Storage_Unit::\n+* Attribute Stub_Type::\n+* Attribute System_Allocator_Alignment::\n+* Attribute Target_Name::\n+* Attribute Tick::\n+* Attribute To_Address::\n+* Attribute Type_Class::\n+* Attribute UET_Address::\n+* Attribute Unconstrained_Array::\n+* Attribute Universal_Literal_String::\n+* Attribute Unrestricted_Access::\n+* Attribute Update::\n+* Attribute Valid_Scalars::\n+* Attribute VADS_Size::\n+* Attribute Value_Size::\n+* Attribute Wchar_T_Size::\n+* Attribute Word_Size::\n @end menu\n \n-@node Abort_Signal\n-@unnumberedsec Abort_Signal\n+@node Attribute Abort_Signal\n+@unnumberedsec Attribute Abort_Signal\n @findex Abort_Signal\n @noindent\n @code{Standard'Abort_Signal} (@code{Standard} is the only allowed\n@@ -6736,8 +7159,8 @@ should only be used in the tasking runtime (it is highly peculiar, and\n completely outside the normal semantics of Ada, for a user program to\n intercept the abort exception).\n \n-@node Address_Size\n-@unnumberedsec Address_Size\n+@node Attribute Address_Size\n+@unnumberedsec Attribute Address_Size\n @cindex Size of @code{Address}\n @findex Address_Size\n @noindent\n@@ -6748,8 +7171,8 @@ but has the advantage of being static, while a direct\n reference to System.Address'Size is non-static because Address\n is a private type.\n \n-@node Asm_Input\n-@unnumberedsec Asm_Input\n+@node Attribute Asm_Input\n+@unnumberedsec Attribute Asm_Input\n @findex Asm_Input\n @noindent\n The @code{Asm_Input} attribute denotes a function that takes two\n@@ -6762,8 +7185,8 @@ constant are the same as those used in the RTL, and are dependent on\n the configuration file used to built the GCC back end.\n @ref{Machine Code Insertions}\n \n-@node Asm_Output\n-@unnumberedsec Asm_Output\n+@node Attribute Asm_Output\n+@unnumberedsec Attribute Asm_Output\n @findex Asm_Output\n @noindent\n The @code{Asm_Output} attribute denotes a function that takes two\n@@ -6778,8 +7201,8 @@ GCC back end.  If there are no output operands, then this argument may\n either be omitted, or explicitly given as @code{No_Output_Operands}.\n @ref{Machine Code Insertions}\n \n-@node AST_Entry\n-@unnumberedsec AST_Entry\n+@node Attribute AST_Entry\n+@unnumberedsec Attribute AST_Entry\n @cindex OpenVMS\n @findex AST_Entry\n @noindent\n@@ -6790,8 +7213,8 @@ pragma @code{Extend_System (Aux_DEC)}).  This value enables the given entry to\n be called when an AST occurs.  For further details, refer to the @cite{DEC Ada\n Language Reference Manual}, section 9.12a.\n \n-@node Bit\n-@unnumberedsec Bit\n+@node Attribute Bit\n+@unnumberedsec Attribute Bit\n @findex Bit\n @code{@var{obj}'Bit}, where @var{obj} is any object, yields the bit\n offset within the storage unit (byte) that contains the first bit of\n@@ -6817,8 +7240,8 @@ are subject to index checks.\n This attribute is designed to be compatible with the DEC Ada 83 definition\n and implementation of the @code{Bit} attribute.\n \n-@node Bit_Position\n-@unnumberedsec Bit_Position\n+@node Attribute Bit_Position\n+@unnumberedsec Attribute Bit_Position\n @findex Bit_Position\n @noindent\n @code{@var{R.C}'Bit_Position}, where @var{R} is a record object and C is one\n@@ -6829,17 +7252,17 @@ type @code{Universal_Integer}.  The value depends only on the field\n @var{C} and is independent of the alignment of\n the containing record @var{R}.\n \n-@node Compiler_Version\n-@unnumberedsec Compiler_Version\n+@node Attribute Compiler_Version\n+@unnumberedsec Attribute Compiler_Version\n @findex Compiler_Version\n @noindent\n @code{Standard'Compiler_Version} (@code{Standard} is the only allowed\n prefix) yields a static string identifying the version of the compiler\n being used to compile the unit containing the attribute reference. A\n typical result would be something like \"@value{EDITION} @i{version} (20090221)\".\n \n-@node Code_Address\n-@unnumberedsec Code_Address\n+@node Attribute Code_Address\n+@unnumberedsec Attribute Code_Address\n @findex Code_Address\n @cindex Subprogram address\n @cindex Address of subprogram code\n@@ -6877,8 +7300,8 @@ generated code of the specified subprogram, which may or may not be\n the same value as is returned by the corresponding @code{'Address}\n attribute.\n \n-@node Default_Bit_Order\n-@unnumberedsec Default_Bit_Order\n+@node Attribute Default_Bit_Order\n+@unnumberedsec Attribute Default_Bit_Order\n @cindex Big endian\n @cindex Little endian\n @findex Default_Bit_Order\n@@ -6889,8 +7312,8 @@ as a @code{Pos} value (0 for @code{High_Order_First}, 1 for\n @code{Low_Order_First}).  This is used to construct the definition of\n @code{Default_Bit_Order} in package @code{System}.\n \n-@node Descriptor_Size\n-@unnumberedsec Descriptor_Size\n+@node Attribute Descriptor_Size\n+@unnumberedsec Attribute Descriptor_Size\n @cindex Descriptor\n @cindex Dope vector\n @findex Descriptor_Size\n@@ -6913,8 +7336,8 @@ In the example above, the descriptor contains two values of type\n a size of 31 bits and an alignment of 4, the descriptor size is @code{2 *\n Positive'Size + 2} or 64 bits.\n \n-@node Elaborated\n-@unnumberedsec Elaborated\n+@node Attribute Elaborated\n+@unnumberedsec Attribute Elaborated\n @findex Elaborated\n @noindent\n The prefix of the @code{'Elaborated} attribute must be a unit name.  The\n@@ -6925,8 +7348,8 @@ in user programs.  The value will always be True once elaboration of all\n units has been completed.  An exception is for units which need no\n elaboration, the value is always False for such units.\n \n-@node Elab_Body\n-@unnumberedsec Elab_Body\n+@node Attribute Elab_Body\n+@unnumberedsec Attribute Elab_Body\n @findex Elab_Body\n @noindent\n This attribute can only be applied to a program unit name.  It returns\n@@ -6938,8 +7361,8 @@ is useful to be able to call this elaboration procedure from Ada code,\n e.g.@: if it is necessary to do selective re-elaboration to fix some\n error.\n \n-@node Elab_Spec\n-@unnumberedsec Elab_Spec\n+@node Attribute Elab_Spec\n+@unnumberedsec Attribute Elab_Spec\n @findex Elab_Spec\n @noindent\n This attribute can only be applied to a program unit name.  It returns\n@@ -6951,8 +7374,8 @@ which it is useful to be able to call this elaboration procedure from\n Ada code, e.g.@: if it is necessary to do selective re-elaboration to fix\n some error.\n \n-@node Elab_Subp_Body\n-@unnumberedsec Elab_Subp_Body\n+@node Attribute Elab_Subp_Body\n+@unnumberedsec Attribute Elab_Subp_Body\n @findex Elab_Subp_Body\n @noindent\n This attribute can only be applied to a library level subprogram\n@@ -6962,17 +7385,17 @@ of the referenced subprogram unit. This is used in the main generated\n elaboration procedure by the binder in CodePeer mode only and is unrecognized\n otherwise.\n \n-@node Emax\n-@unnumberedsec Emax\n+@node Attribute Emax\n+@unnumberedsec Attribute Emax\n @cindex Ada 83 attributes\n @findex Emax\n @noindent\n The @code{Emax} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Enabled\n-@unnumberedsec Enabled\n+@node Attribute Enabled\n+@unnumberedsec Attribute Enabled\n @findex Enabled\n @noindent\n The @code{Enabled} attribute allows an application program to check at compile\n@@ -6992,8 +7415,8 @@ to see if the check is enabled. A user of this package can then issue\n a @code{pragma Suppress} or @code{pragma Unsuppress} before instantiating\n the package or subprogram, controlling whether the check will be present.\n \n-@node Enum_Rep\n-@unnumberedsec Enum_Rep\n+@node Attribute Enum_Rep\n+@unnumberedsec Attribute Enum_Rep\n @cindex Representation of enums\n @findex Enum_Rep\n @noindent\n@@ -7027,8 +7450,8 @@ integer type, and the argument is a variable, so that the universal\n integer calculation is done at run time, then the call to @code{Enum_Rep}\n may raise @code{Constraint_Error}.\n \n-@node Enum_Val\n-@unnumberedsec Enum_Val\n+@node Attribute Enum_Val\n+@unnumberedsec Attribute Enum_Val\n @cindex Representation of enums\n @findex Enum_Val\n @noindent\n@@ -7048,17 +7471,17 @@ This will be equal to value of the @code{Val} attribute in the\n absence of an enumeration representation clause.  This is a static\n attribute (i.e.@: the result is static if the argument is static).\n \n-@node Epsilon\n-@unnumberedsec Epsilon\n+@node Attribute Epsilon\n+@unnumberedsec Attribute Epsilon\n @cindex Ada 83 attributes\n @findex Epsilon\n @noindent\n The @code{Epsilon} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Fixed_Value\n-@unnumberedsec Fixed_Value\n+@node Attribute Fixed_Value\n+@unnumberedsec Attribute Fixed_Value\n @findex Fixed_Value\n @noindent\n For every fixed-point type @var{S}, @code{@var{S}'Fixed_Value} denotes a\n@@ -7084,8 +7507,8 @@ that there are full range checks, to ensure that the result is in range.\n This attribute is primarily intended for use in implementation of the\n input-output functions for fixed-point values.\n \n-@node Has_Access_Values\n-@unnumberedsec Has_Access_Values\n+@node Attribute Has_Access_Values\n+@unnumberedsec Attribute Has_Access_Values\n @cindex Access values, testing for\n @findex Has_Access_Values\n @noindent\n@@ -7097,8 +7520,8 @@ The intended use of this attribute is in conjunction with generic\n definitions.  If the attribute is applied to a generic private type, it\n indicates whether or not the corresponding actual type has access values.\n \n-@node Has_Discriminants\n-@unnumberedsec Has_Discriminants\n+@node Attribute Has_Discriminants\n+@unnumberedsec Attribute Has_Discriminants\n @cindex Discriminants, testing for\n @findex Has_Discriminants\n @noindent\n@@ -7108,8 +7531,8 @@ otherwise.  The intended use of this attribute is in conjunction with generic\n definitions.  If the attribute is applied to a generic private type, it\n indicates whether or not the corresponding actual type has discriminants.\n \n-@node Img\n-@unnumberedsec Img\n+@node Attribute Img\n+@unnumberedsec Attribute Img\n @findex Img\n @noindent\n The @code{Img} attribute differs from @code{Image} in that it may be\n@@ -7131,8 +7554,8 @@ Put_Line (\"X = \" & @var{T}'Image (X));\n @noindent\n where @var{T} is the (sub)type of the object @code{X}.\n \n-@node Integer_Value\n-@unnumberedsec Integer_Value\n+@node Attribute Integer_Value\n+@unnumberedsec Attribute Integer_Value\n @findex Integer_Value\n @noindent\n For every integer type @var{S}, @code{@var{S}'Integer_Value} denotes a\n@@ -7159,8 +7582,8 @@ that there are full range checks, to ensure that the result is in range.\n This attribute is primarily intended for use in implementation of the\n standard input-output functions for fixed-point values.\n \n-@node Invalid_Value\n-@unnumberedsec Invalid_Value\n+@node Attribute Invalid_Value\n+@unnumberedsec Attribute Invalid_Value\n @findex Invalid_Value\n @noindent\n For every scalar type S, S'Invalid_Value returns an undefined value of the\n@@ -7170,17 +7593,17 @@ uninitialized value of the type if pragma Initialize_Scalars is used,\n including the ability to modify the value with the binder -Sxx flag and\n relevant environment variables at run time.\n \n-@node Large\n-@unnumberedsec Large\n+@node Attribute Large\n+@unnumberedsec Attribute Large\n @cindex Ada 83 attributes\n @findex Large\n @noindent\n The @code{Large} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Loop_Entry\n-@unnumberedsec Loop_Entry\n+@node Attribute Loop_Entry\n+@unnumberedsec Attribute Loop_Entry\n @findex Loop_Entry\n @noindent\n Syntax:\n@@ -7209,41 +7632,41 @@ a constant initialized with the initial value of @code{X} at loop\n entry. This copy is not performed if the loop is not entered, or if the\n corresponding pragmas are ignored or disabled.\n \n-@node Machine_Size\n-@unnumberedsec Machine_Size\n+@node Attribute Machine_Size\n+@unnumberedsec Attribute Machine_Size\n @findex Machine_Size\n @noindent\n This attribute is identical to the @code{Object_Size} attribute.  It is\n provided for compatibility with the DEC Ada 83 attribute of this name.\n \n-@node Mantissa\n-@unnumberedsec Mantissa\n+@node Attribute Mantissa\n+@unnumberedsec Attribute Mantissa\n @cindex Ada 83 attributes\n @findex Mantissa\n @noindent\n The @code{Mantissa} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Max_Interrupt_Priority\n-@unnumberedsec Max_Interrupt_Priority\n+@node Attribute Max_Interrupt_Priority\n+@unnumberedsec Attribute Max_Interrupt_Priority\n @cindex Interrupt priority, maximum\n @findex Max_Interrupt_Priority\n @noindent\n @code{Standard'Max_Interrupt_Priority} (@code{Standard} is the only\n permissible prefix), provides the same value as\n @code{System.Max_Interrupt_Priority}.\n \n-@node Max_Priority\n-@unnumberedsec Max_Priority\n+@node Attribute Max_Priority\n+@unnumberedsec Attribute Max_Priority\n @cindex Priority, maximum\n @findex Max_Priority\n @noindent\n @code{Standard'Max_Priority} (@code{Standard} is the only permissible\n prefix) provides the same value as @code{System.Max_Priority}.\n \n-@node Maximum_Alignment\n-@unnumberedsec Maximum_Alignment\n+@node Attribute Maximum_Alignment\n+@unnumberedsec Attribute Maximum_Alignment\n @cindex Alignment, maximum\n @findex Maximum_Alignment\n @noindent\n@@ -7253,8 +7676,8 @@ target.  This is a static value that can be used to specify the alignment\n for an object, guaranteeing that it is properly aligned in all\n cases.\n \n-@node Mechanism_Code\n-@unnumberedsec Mechanism_Code\n+@node Attribute Mechanism_Code\n+@unnumberedsec Attribute Mechanism_Code\n @cindex Return values, passing mechanism\n @cindex Parameters, passing mechanism\n @findex Mechanism_Code\n@@ -7292,8 +7715,8 @@ by descriptor (NCA: non-contiguous array)\n Values from 3 through 10 are only relevant to Digital OpenVMS implementations.\n @cindex OpenVMS\n \n-@node Null_Parameter\n-@unnumberedsec Null_Parameter\n+@node Attribute Null_Parameter\n+@unnumberedsec Attribute Null_Parameter\n @cindex Zero address, passing\n @findex Null_Parameter\n @noindent\n@@ -7312,8 +7735,8 @@ passed for a record or other composite object passed by reference.\n There is no way of indicating this without the @code{Null_Parameter}\n attribute.\n \n-@node Object_Size\n-@unnumberedsec Object_Size\n+@node Attribute Object_Size\n+@unnumberedsec Attribute Object_Size\n @cindex Size, used for objects\n @findex Object_Size\n @noindent\n@@ -7337,8 +7760,8 @@ alignment will be 4, because of the\n integer field, and so the default size of record objects for this type\n will be 64 (8 bytes).\n \n-@node Passed_By_Reference\n-@unnumberedsec Passed_By_Reference\n+@node Attribute Passed_By_Reference\n+@unnumberedsec Attribute Passed_By_Reference\n @cindex Parameters, when passed by reference\n @findex Passed_By_Reference\n @noindent\n@@ -7348,8 +7771,8 @@ normally passed by reference and @code{False} if the type is normally\n passed by copy in calls.  For scalar types, the result is always @code{False}\n and is static.  For non-scalar types, the result is non-static.\n \n-@node Pool_Address\n-@unnumberedsec Pool_Address\n+@node Attribute Pool_Address\n+@unnumberedsec Attribute Pool_Address\n @cindex Parameters, when passed by reference\n @findex Pool_Address\n @noindent\n@@ -7367,8 +7790,8 @@ the global heap, on the stack, or in a static memory area. For an\n object created by @code{new}, @code{@var{Ptr.all}'Pool_Address} is\n what is passed to @code{Allocate} and returned from @code{Deallocate}.\n \n-@node Range_Length\n-@unnumberedsec Range_Length\n+@node Attribute Range_Length\n+@unnumberedsec Attribute Range_Length\n @findex Range_Length\n @noindent\n @code{@var{type}'Range_Length} for any discrete type @var{type} yields\n@@ -7377,18 +7800,18 @@ range).  The result is static for static subtypes.  @code{Range_Length}\n applied to the index subtype of a one dimensional array always gives the\n same result as @code{Length} applied to the array itself.\n \n-@node Ref\n-@unnumberedsec Ref\n+@node Attribute Ref\n+@unnumberedsec Attribute Ref\n @findex Ref\n @noindent\n The @code{System.Address'Ref}\n (@code{System.Address} is the only permissible prefix)\n denotes a function identical to\n @code{System.Storage_Elements.To_Address} except that\n-it is a static attribute.  See @ref{To_Address} for more details.\n+it is a static attribute.  See @ref{Attribute To_Address} for more details.\n \n-@node Result\n-@unnumberedsec Result\n+@node Attribute Result\n+@unnumberedsec Attribute Result\n @findex Result\n @noindent\n @code{@var{function}'Result} can only be used with in a Postcondition pragma\n@@ -7397,26 +7820,26 @@ is used to refer to the result of the function in the postcondition expression.\n For a further discussion of the use of this attribute and examples of its use,\n see the description of pragma Postcondition.\n \n-@node Safe_Emax\n-@unnumberedsec Safe_Emax\n+@node Attribute Safe_Emax\n+@unnumberedsec Attribute Safe_Emax\n @cindex Ada 83 attributes\n @findex Safe_Emax\n @noindent\n The @code{Safe_Emax} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Safe_Large\n-@unnumberedsec Safe_Large\n+@node Attribute Safe_Large\n+@unnumberedsec Attribute Safe_Large\n @cindex Ada 83 attributes\n @findex Safe_Large\n @noindent\n The @code{Safe_Large} attribute is provided for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute.\n \n-@node Scalar_Storage_Order\n-@unnumberedsec Scalar_Storage_Order\n+@node Attribute Scalar_Storage_Order\n+@unnumberedsec Attribute Scalar_Storage_Order\n @cindex Endianness\n @cindex Scalar storage order\n @findex Scalar_Storage_Order\n@@ -7508,8 +7931,8 @@ are relaxed. Instead, the following rules apply:\n \n @end itemize\n \n-@node Simple_Storage_Pool\n-@unnumberedsec Simple_Storage_Pool\n+@node Attribute Simple_Storage_Pool\n+@unnumberedsec Attribute Simple_Storage_Pool\n @cindex Storage pool, simple\n @cindex Simple storage pool\n @findex Simple_Storage_Pool\n@@ -7568,8 +7991,8 @@ parameter. The detailed semantics of such unchecked deallocations is the same\n as defined in section 13.11.2 of the Ada Reference Manual, except that the\n term ``simple storage pool'' is substituted for ``storage pool''.\n \n-@node Small\n-@unnumberedsec Small\n+@node Attribute Small\n+@unnumberedsec Attribute Small\n @cindex Ada 83 attributes\n @findex Small\n @noindent\n@@ -7580,15 +8003,15 @@ for compatibility with Ada 83.  See\n the Ada 83 reference manual for an exact description of the semantics of\n this attribute when applied to floating-point types.\n \n-@node Storage_Unit\n-@unnumberedsec Storage_Unit\n+@node Attribute Storage_Unit\n+@unnumberedsec Attribute Storage_Unit\n @findex Storage_Unit\n @noindent\n @code{Standard'Storage_Unit} (@code{Standard} is the only permissible\n prefix) provides the same value as @code{System.Storage_Unit}.\n \n-@node Stub_Type\n-@unnumberedsec Stub_Type\n+@node Attribute Stub_Type\n+@unnumberedsec Attribute Stub_Type\n @findex Stub_Type\n @noindent\n The GNAT implementation of remote access-to-classwide types is\n@@ -7608,8 +8031,8 @@ type @code{RACW_Stub_Type} declared in the internal implementation-defined\n unit @code{System.Partition_Interface}. Use of this attribute will create\n an implicit dependency on this unit.\n \n-@node System_Allocator_Alignment\n-@unnumberedsec System_Allocator_Alignment\n+@node Attribute System_Allocator_Alignment\n+@unnumberedsec Attribute System_Allocator_Alignment\n @cindex Alignment, allocator\n @findex System_Allocator_Alignment\n @noindent\n@@ -7620,8 +8043,8 @@ in user storage pools based on malloc either to reject allocation\n with alignment too large or to enable a realignment circuitry if the\n alignment request is larger than this value.\n \n-@node Target_Name\n-@unnumberedsec Target_Name\n+@node Attribute Target_Name\n+@unnumberedsec Attribute Target_Name\n @findex Target_Name\n @noindent\n @code{Standard'Target_Name} (@code{Standard} is the only permissible\n@@ -7630,15 +8053,15 @@ for the current compilation. For GCC implementations, this is the\n standard gcc target name without the terminating slash (for\n example, GNAT 5.0 on windows yields \"i586-pc-mingw32msv\").\n \n-@node Tick\n-@unnumberedsec Tick\n+@node Attribute Tick\n+@unnumberedsec Attribute Tick\n @findex Tick\n @noindent\n @code{Standard'Tick} (@code{Standard} is the only permissible prefix)\n provides the same value as @code{System.Tick},\n \n-@node To_Address\n-@unnumberedsec To_Address\n+@node Attribute To_Address\n+@unnumberedsec Attribute To_Address\n @findex To_Address\n @noindent\n The @code{System'To_Address}\n@@ -7653,8 +8076,8 @@ static expression and where the function call could not be used\n (since the function call is always non-static, even if its\n argument is static).\n \n-@node Type_Class\n-@unnumberedsec Type_Class\n+@node Attribute Type_Class\n+@unnumberedsec Attribute Type_Class\n @findex Type_Class\n @noindent\n @code{@var{type}'Type_Class} for any type or subtype @var{type} yields\n@@ -7681,8 +8104,8 @@ Protected types yield the value @code{Type_Class_Task}, which thus\n applies to all concurrent types.  This attribute is designed to\n be compatible with the DEC Ada 83 attribute of the same name.\n \n-@node UET_Address\n-@unnumberedsec UET_Address\n+@node Attribute UET_Address\n+@unnumberedsec Attribute UET_Address\n @findex UET_Address\n @noindent\n The @code{UET_Address} attribute can only be used for a prefix which\n@@ -7692,8 +8115,8 @@ intended only for use within the GNAT implementation.  See the unit\n @code{Ada.Exceptions} in files @file{a-except.ads} and @file{a-except.adb}\n for details on how this attribute is used in the implementation.\n \n-@node Unconstrained_Array\n-@unnumberedsec Unconstrained_Array\n+@node Attribute Unconstrained_Array\n+@unnumberedsec Attribute Unconstrained_Array\n @findex Unconstrained_Array\n @noindent\n The @code{Unconstrained_Array} attribute can be used with a prefix that\n@@ -7703,8 +8126,8 @@ and @code{False} otherwise. In a generic instance, the result is\n still static, and yields the result of applying this test to the\n generic actual.\n \n-@node Universal_Literal_String\n-@unnumberedsec Universal_Literal_String\n+@node Attribute Universal_Literal_String\n+@unnumberedsec Attribute Universal_Literal_String\n @cindex Named numbers, representation of\n @findex Universal_Literal_String\n @noindent\n@@ -7726,8 +8149,8 @@ begin\n end;\n @end smallexample\n \n-@node Unrestricted_Access\n-@unnumberedsec Unrestricted_Access\n+@node Attribute Unrestricted_Access\n+@unnumberedsec Attribute Unrestricted_Access\n @cindex @code{Access}, unrestricted\n @findex Unrestricted_Access\n @noindent\n@@ -7751,8 +8174,8 @@ scope. For instance, a function cannot use @code{Unrestricted_Access}\n to create a unconstrained pointer and then return that value to the\n caller.\n \n-@node Update\n-@unnumberedsec Update\n+@node Attribute Update\n+@unnumberedsec Attribute Update\n @findex Update\n @noindent\n The @code{Update} attribute creates a copy of an array or record value\n@@ -7823,8 +8246,8 @@ A := A'Update (1 => (2 => 20), 3 => (4 => 30));\n @noindent\n which changes element (1,2) to 20 and (3,4) to 30.\n \n-@node Valid_Scalars\n-@unnumberedsec Valid_Scalars\n+@node Attribute Valid_Scalars\n+@unnumberedsec Attribute Valid_Scalars\n @findex Valid_Scalars\n @noindent\n The @code{'Valid_Scalars} attribute is intended to make it easier to\n@@ -7845,8 +8268,8 @@ be determined at compile time that the prefix of the attribute has no\n scalar parts (e.g., if the prefix is of an access type, an interface type,\n an undiscriminated task type, or an undiscriminated protected type).\n \n-@node VADS_Size\n-@unnumberedsec VADS_Size\n+@node Attribute VADS_Size\n+@unnumberedsec Attribute VADS_Size\n @cindex @code{Size}, VADS compatibility\n @findex VADS_Size\n @noindent\n@@ -7860,24 +8283,24 @@ typical machines).  In addition @code{'VADS_Size} applied to an object\n gives the result that would be obtained by applying the attribute to\n the corresponding type.\n \n-@node Value_Size\n-@unnumberedsec Value_Size\n+@node Attribute Value_Size\n+@unnumberedsec Attribute Value_Size\n @cindex @code{Size}, setting for not-first subtype\n @findex Value_Size\n @code{@var{type}'Value_Size} is the number of bits required to represent\n a value of the given subtype.  It is the same as @code{@var{type}'Size},\n but, unlike @code{Size}, may be set for non-first subtypes.\n \n-@node Wchar_T_Size\n-@unnumberedsec Wchar_T_Size\n+@node Attribute Wchar_T_Size\n+@unnumberedsec Attribute Wchar_T_Size\n @findex Wchar_T_Size\n @code{Standard'Wchar_T_Size} (@code{Standard} is the only permissible\n prefix) provides the size in bits of the C @code{wchar_t} type\n primarily for constructing the definition of this type in\n package @code{Interfaces.C}.\n \n-@node Word_Size\n-@unnumberedsec Word_Size\n+@node Attribute Word_Size\n+@unnumberedsec Attribute Word_Size\n @findex Word_Size\n @code{Standard'Word_Size} (@code{Standard} is the only permissible\n prefix) provides the value @code{System.Word_Size}.\n@@ -12165,7 +12588,7 @@ For primitive types, the alignment is the minimum of the actual size of\n objects of the type divided by @code{Storage_Unit},\n and the maximum alignment supported by the target.\n (This maximum alignment is given by the GNAT-specific attribute\n-@code{Standard'Maximum_Alignment}; see @ref{Maximum_Alignment}.)\n+@code{Standard'Maximum_Alignment}; see @ref{Attribute Maximum_Alignment}.)\n @cindex @code{Maximum_Alignment} attribute\n For example, for type @code{Long_Float}, the object size is 8 bytes, and the\n default alignment will be 8 on any target that supports alignments\n@@ -18432,7 +18855,7 @@ A complete description of the AIs may be found in\n @item @code{Atomic_Components} @tab\n @item @code{Bit_Order} @tab\n @item @code{Component_Size} @tab\n-@item @code{Contract_Cases} @tab                 -- GNAT\n+@item @code{Contract_Cases} @tab                -- GNAT\n @item @code{Discard_Names} @tab\n @item @code{External_Tag} @tab\n @item @code{Favor_Top_Level} @tab               -- GNAT\n@@ -18475,7 +18898,7 @@ A complete description of the AIs may be found in\n   Note that for aspects with an expression, e.g. @code{Size}, the expression is\n   treated like a default expression (visibility is analyzed at the point of\n   occurrence of the aspect, but evaluation of the expression occurs at the\n-  freeze point of the entity involved.\n+  freeze point of the entity involved).\n \n @noindent\n   RM References:  3.02.01 (3)   3.02.02 (2)   3.03.01 (2/2)   3.08 (6)"}, {"sha": "83608c62ca8e5a19d954d5a23442e28297048ffe", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -19260,7 +19260,7 @@ familiar to engineering practice. The dimensions of algebraic expressions\n \n This feature depends on Ada 2012 aspect specifications, and is available from\n version 7.0.1 of GNAT onwards. The GNAT-specific aspect Dimension_System allows\n-the user to define a system of units; the aspect Dimension then allows the user\n+you to define a system of units; the aspect Dimension then allows the user\n to declare dimensioned quantities within a given system.\n \n The major advantage of this model is that it does not require the declaration of\n@@ -19293,9 +19293,7 @@ conventional units. For example:\n @smallexample @c ada\n    subtype Length is Mks_Type\n      with\n-      Dimension => (Symbol => 'm',\n-        Meter  => 1,\n-        others => 0);\n+      Dimension => (Symbol => 'm', Meter  => 1, others => 0);\n @end smallexample\n @noindent\n and similarly for Mass, Time, Electric_Current, Thermodynamic_Temperature,\n@@ -19324,13 +19322,17 @@ as well as useful multiples of these units:\n @end smallexample\n \n @noindent\n-The user can then define a derived unit by providing the aspect that\n+Using this package, you can then define a derived unit by\n+providing the aspect that\n specifies its dimensions within the MKS system, as well as the string to\n be used for output of a value of that unit:\n \n @smallexample @c ada\n   subtype Acceleration is Mks_Type\n-    with Dimension => (\"m/sec^^^2\", Meter => 1, Second => -2, others => 0);\n+    with Dimension => (\"m/sec^^^2\",\n+                       Meter => 1,\n+                       Second => -2,\n+                       others => 0);\n @end smallexample\n \n @noindent"}, {"sha": "879f5d740a994967eac745164e1dc9bda9545520", "filename": "gcc/ada/s-dimmks.ads", "status": "modified", "additions": 82, "deletions": 74, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fs-dimmks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fs-dimmks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-dimmks.ads?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  S p e c                                 --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -57,7 +57,7 @@ package System.Dim.Mks is\n         (Unit_Name => Mole,     Unit_Symbol => \"mol\", Dim_Symbol => 'N'),\n         (Unit_Name => Candela,  Unit_Symbol => \"cd\",  Dim_Symbol => 'J'));\n \n-   --  SI Base dimensioned subtype\n+   --  SI Base dimensioned subtypes\n \n    subtype Length is Mks_Type\n      with\n@@ -69,7 +69,7 @@ package System.Dim.Mks is\n      with\n       Dimension => (Symbol => \"kg\",\n         Kilogram => 1,\n-        others =>   0);\n+        others   => 0);\n \n    subtype Time is Mks_Type\n      with\n@@ -92,19 +92,22 @@ package System.Dim.Mks is\n    subtype Amount_Of_Substance is Mks_Type\n      with\n       Dimension => (Symbol => \"mol\",\n-        Mole =>   1,\n+        Mole   => 1,\n         others => 0);\n \n    subtype Luminous_Intensity is Mks_Type\n      with\n       Dimension => (Symbol => \"cd\",\n         Candela => 1,\n-        others =>  0);\n+        others  => 0);\n+\n+   --  Initialize SI Base unit values\n \n-   --  SI Base units\n+   --  Turn off the all the dimension warnings for these basic assignments\n+   --  since otherwise we would get complaints about assigning dimensionless\n+   --  values to dimensioned subtypes (we can't assign 1.0*m to m!).\n \n-   pragma Warnings (Off);\n-   --  Turn off the all the dimension warnings\n+   pragma Warnings (Off, \"*assumed to be*\");\n \n    m   : constant Length                    := 1.0;\n    kg  : constant Mass                      := 1.0;\n@@ -114,16 +117,16 @@ package System.Dim.Mks is\n    mol : constant Amount_Of_Substance       := 1.0;\n    cd  : constant Luminous_Intensity        := 1.0;\n \n-   pragma Warnings (On);\n+   pragma Warnings (On, \"*assumed to be*\");\n \n    --  SI Derived dimensioned subtypes\n \n    subtype Absorbed_Dose is Mks_Type\n      with\n       Dimension => (Symbol => \"Gy\",\n-        Meter =>  2,\n+        Meter  =>  2,\n         Second => -2,\n-        others => 0);\n+        others =>  0);\n \n    subtype Angle is Mks_Type\n      with\n@@ -133,14 +136,14 @@ package System.Dim.Mks is\n    subtype Area is Mks_Type\n      with\n       Dimension => (\n-        Meter =>  2,\n+        Meter  => 2,\n         others => 0);\n \n    subtype Catalytic_Activity is Mks_Type\n      with\n       Dimension => (Symbol => \"kat\",\n         Second => -1,\n-        Mole =>   1,\n+        Mole   => 1,\n         others => 0);\n \n    subtype Celsius_Temperature is Mks_Type\n@@ -152,11 +155,11 @@ package System.Dim.Mks is\n    subtype Electric_Capacitance is Mks_Type\n      with\n       Dimension => (Symbol => 'F',\n-        Meter =>    -2,\n+        Meter    => -2,\n         Kilogram => -1,\n-        Second =>   4,\n-        Ampere =>   2,\n-        others =>   0);\n+        Second   =>  4,\n+        Ampere   =>  2,\n+        others   =>  0);\n \n    subtype Electric_Charge is Mks_Type\n      with\n@@ -168,119 +171,119 @@ package System.Dim.Mks is\n    subtype Electric_Conductance is Mks_Type\n      with\n       Dimension => (Symbol => 'S',\n-        Meter =>    -2,\n+        Meter    => -2,\n         Kilogram => -1,\n-        Second =>   3,\n-        Ampere =>   2,\n-        others =>   0);\n+        Second   =>  3,\n+        Ampere   =>  2,\n+        others   =>  0);\n \n    subtype Electric_Potential_Difference is Mks_Type\n      with\n       Dimension => (Symbol => 'V',\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -3,\n-        Ampere =>   -1,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -3,\n+        Ampere   => -1,\n+        others   =>  0);\n \n    subtype Electric_Resistance is Mks_Type\n      with\n       Dimension => (Symbol => \"\u03a9\",\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -3,\n-        Ampere =>   -2,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -3,\n+        Ampere   => -2,\n+        others   =>  0);\n \n    subtype Energy is Mks_Type\n      with\n       Dimension => (Symbol => 'J',\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -2,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -2,\n+        others   =>  0);\n \n    subtype Equivalent_Dose is Mks_Type\n      with\n       Dimension => (Symbol => \"Sv\",\n-        Meter =>  2,\n+        Meter  =>  2,\n         Second => -2,\n-        others => 0);\n+        others =>  0);\n \n    subtype Force is Mks_Type\n      with\n       Dimension => (Symbol => 'N',\n-        Meter =>    1,\n+        Meter    => 1,\n         Kilogram => 1,\n-        Second =>  -2,\n-        others =>   0);\n+        Second   => -2,\n+        others   => 0);\n \n    subtype Frequency is Mks_Type\n      with\n       Dimension => (Symbol => \"Hz\",\n         Second => -1,\n-        others => 0);\n+        others =>  0);\n \n    subtype Illuminance is Mks_Type\n      with\n       Dimension => (Symbol => \"lx\",\n-        Meter =>   -2,\n-        Candela => 1,\n-        others =>  0);\n+        Meter   => -2,\n+        Candela =>  1,\n+        others  =>  0);\n \n    subtype Inductance is Mks_Type\n      with\n       Dimension => (Symbol => 'H',\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -2,\n-        Ampere =>   -2,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -2,\n+        Ampere   => -2,\n+        others   =>  0);\n \n    subtype Luminous_Flux is Mks_Type\n      with\n       Dimension => (Symbol => \"lm\",\n         Candela => 1,\n-        others =>  0);\n+        others  => 0);\n \n    subtype Magnetic_Flux is Mks_Type\n      with\n       Dimension => (Symbol => \"Wb\",\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -2,\n-        Ampere =>   -1,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -2,\n+        Ampere   => -1,\n+        others   =>  0);\n \n    subtype Magnetic_Flux_Density is Mks_Type\n      with\n       Dimension => (Symbol => 'T',\n-        Kilogram => 1,\n-        Second =>   -2,\n-        Ampere =>   -1,\n-        others =>   0);\n+        Kilogram =>  1,\n+        Second   => -2,\n+        Ampere   => -1,\n+        others   =>  0);\n \n    subtype Power is Mks_Type\n      with\n       Dimension => (Symbol => 'W',\n-        Meter =>    2,\n-        Kilogram => 1,\n-        Second =>   -3,\n-        others =>   0);\n+        Meter    =>  2,\n+        Kilogram =>  1,\n+        Second   => -3,\n+        others   =>  0);\n \n    subtype Pressure is Mks_Type\n      with\n       Dimension => (Symbol => \"Pa\",\n-        Meter =>    -1,\n-        Kilogram => 1,\n-        Second =>   -2,\n-        others =>   0);\n+        Meter    => -1,\n+        Kilogram =>  1,\n+        Second   => -2,\n+        others   =>  0);\n \n    subtype Radioactivity is Mks_Type\n      with\n       Dimension => (Symbol => \"Bq\",\n         Second => -1,\n-        others => 0);\n+        others =>  0);\n \n    subtype Solid_Angle is Mks_Type\n      with\n@@ -290,18 +293,23 @@ package System.Dim.Mks is\n    subtype Speed is Mks_Type\n      with\n       Dimension => (\n-        Meter =>  1,\n+        Meter  =>  1,\n         Second => -1,\n-        others => 0);\n+        others =>  0);\n \n    subtype Volume is Mks_Type\n      with\n       Dimension => (\n-        Meter =>  3,\n+        Meter  => 3,\n         others => 0);\n \n-   pragma Warnings (Off);\n-   --  Turn off the all the dimension warnings\n+   --  Initialize derived dimension values\n+\n+   --  Turn off the all the dimension warnings for these basic assignments\n+   --  since otherwise we would get complaints about assigning dimensionless\n+   --  values to dimensioned subtypes.\n+\n+   pragma Warnings (Off, \"*assumed to be*\");\n \n    rad : constant Angle                         := 1.0;\n    sr  : constant Solid_Angle                   := 1.0;\n@@ -376,5 +384,5 @@ package System.Dim.Mks is\n    kA  : constant Electric_Current := 1.0E+03;  -- kilo\n    MeA : constant Electric_Current := 1.0E+06;  -- mega\n \n-   pragma Warnings (On);\n+   pragma Warnings (On, \"*assumed to be*\");\n end System.Dim.Mks;"}, {"sha": "680f11ef994fd10c934a4ba208782f4a6b1e954d", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -11655,7 +11655,7 @@ package body Sem_Ch6 is\n \n                --  Check possible overlap between a case guard and \"others\"\n \n-               if Multiple_PCs and then Exception_Extra_Info then\n+               if Multiple_PCs and Exception_Extra_Info then\n                   Case_Guard_Error\n                     (Decls     => Error_Decls,\n                      Flag      => Others_Flag,\n@@ -11692,10 +11692,9 @@ package body Sem_Ch6 is\n                      Set (Flag),\n                      Increment (Count))));\n \n-               --  Check whether this case guard overlaps with another case\n-               --  guard.\n+               --  Check whether this case guard overlaps with another one\n \n-               if Multiple_PCs and then Exception_Extra_Info then\n+               if Multiple_PCs and Exception_Extra_Info then\n                   Case_Guard_Error\n                     (Decls     => Error_Decls,\n                      Flag      => Flag,"}, {"sha": "1f91d9612e0e82461b535e5ba2c7139daf66ccc1", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -52,7 +52,7 @@ with GNAT.HTable;\n package body Sem_Dim is\n \n    -------------------------\n-   -- Rational arithmetic --\n+   -- Rational Arithmetic --\n    -------------------------\n \n    type Whole is new Int;\n@@ -91,7 +91,7 @@ package body Sem_Dim is\n    function \"/\" (Left, Right : Rational) return Rational;\n \n    ------------------\n-   -- System types --\n+   -- System Types --\n    ------------------\n \n    Max_Number_Of_Dimensions : constant := 7;\n@@ -144,7 +144,7 @@ package body Sem_Dim is\n      Table_Name           => \"System_Table\");\n \n    --------------------\n-   -- Dimension type --\n+   -- Dimension Type --\n    --------------------\n \n    type Dimension_Type is\n@@ -168,7 +168,7 @@ package body Sem_Dim is\n         Equal      => \"=\");\n \n    ------------------\n-   -- Symbol types --\n+   -- Symbol Types --\n    ------------------\n \n    type Symbol_Table_Range is range 0 .. 510;\n@@ -441,24 +441,17 @@ package body Sem_Dim is\n    -- Analyze_Aspect_Dimension --\n    ------------------------------\n \n-   --  with Dimension => (\n-   --    [[Symbol =>]   SYMBOL,]\n-   --                   DIMENSION_VALUE\n-   --    [,             DIMENSION_VALUE]\n-   --    [,             DIMENSION_VALUE]\n-   --    [,             DIMENSION_VALUE]\n-   --    [,             DIMENSION_VALUE]\n-   --    [,             DIMENSION_VALUE]\n-   --    [,             DIMENSION_VALUE]);\n+   --  with Dimension =>\n+   --    ([Symbol =>] SYMBOL, DIMENSION_VALUE {, DIMENSION_Value})\n    --\n    --  SYMBOL ::= STRING_LITERAL | CHARACTER_LITERAL\n \n    --  DIMENSION_VALUE ::=\n    --    RATIONAL\n-   --  | others => RATIONAL\n+   --  | others               => RATIONAL\n    --  | DISCRETE_CHOICE_LIST => RATIONAL\n \n-   --  RATIONAL ::= [-] NUMERAL [/ NUMERAL]\n+   --  RATIONAL ::= [-] NUMERIC_LITERAL [/ NUMERIC_LITERAL]\n \n    --  Note that when the dimensioned type is an integer type, then any\n    --  dimension value must be an integer literal.\n@@ -468,7 +461,7 @@ package body Sem_Dim is\n       Id   : Entity_Id;\n       Aggr : Node_Id)\n    is\n-      Def_Id    : constant Entity_Id := Defining_Identifier (N);\n+      Def_Id : constant Entity_Id := Defining_Identifier (N);\n \n       Processed : array (Dimension_Type'Range) of Boolean := (others => False);\n       --  This array is used when processing ranges or Others_Choice as part of\n@@ -855,14 +848,7 @@ package body Sem_Dim is\n    -- Analyze_Aspect_Dimension_System --\n    -------------------------------------\n \n-   --  with Dimension_System => (\n-   --        DIMENSION\n-   --     [, DIMENSION]\n-   --     [, DIMENSION]\n-   --     [, DIMENSION]\n-   --     [, DIMENSION]\n-   --     [, DIMENSION]\n-   --     [, DIMENSION]);\n+   --  with Dimension_System => (DIMENSION {, DIMENSION});\n \n    --  DIMENSION ::= (\n    --    [Unit_Name   =>] IDENTIFIER,\n@@ -957,9 +943,9 @@ package body Sem_Dim is\n             if Present (Component_Associations (Dim_Aggr))\n               and then Present (Expressions (Dim_Aggr))\n             then\n-               Error_Msg_N (\"mixed positional/named aggregate not allowed \" &\n-                            \"here\",\n-                            Dim_Aggr);\n+               Error_Msg_N\n+                 (\"mixed positional/named aggregate not allowed here\",\n+                  Dim_Aggr);\n \n             --  Verify each dimension aggregate has three arguments\n \n@@ -1039,13 +1025,12 @@ package body Sem_Dim is\n                --  Check the second argument for each dimension aggregate is\n                --  a string or a character.\n \n-               if not Nkind_In\n-                        (Unit_Symbol,\n-                           N_String_Literal,\n-                           N_Character_Literal)\n+               if not Nkind_In (Unit_Symbol, N_String_Literal,\n+                                             N_Character_Literal)\n                then\n-                  Error_Msg_N (\"expected unit symbol (string or character)\",\n-                               Unit_Symbol);\n+                  Error_Msg_N\n+                    (\"expected unit symbol (string or character)\",\n+                     Unit_Symbol);\n \n                else\n                   --  String case\n@@ -1073,14 +1058,12 @@ package body Sem_Dim is\n                --  Check the third argument for each dimension aggregate is\n                --  a string or a character.\n \n-               if not Nkind_In\n-                        (Dim_Symbol,\n-                           N_String_Literal,\n-                           N_Character_Literal)\n+               if not Nkind_In (Dim_Symbol, N_String_Literal,\n+                                            N_Character_Literal)\n                then\n-                  Error_Msg_N (\"expected dimension symbol (string or \" &\n-                               \"character)\",\n-                               Dim_Symbol);\n+                  Error_Msg_N\n+                    (\"expected dimension symbol (string or character)\",\n+                     Dim_Symbol);\n \n                else\n                   --  String case"}, {"sha": "7393bf6cadd62ece7f00399b30c8f0f11557134a", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2011-2013, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -102,9 +102,9 @@ package Sem_Dim is\n       Aggr : Node_Id);\n    --  Analyze the contents of aspect Dimension_System. Extract the numerical\n    --  type, unit name and corresponding symbol from each indivitual dimension.\n-   --  Id is the corresponding Aspect_Id (Aspect_Dimension_System)\n-   --  Aggr is the corresponding expression for the aspect Dimension_System\n-   --  declared by the declaration of N.\n+   --  Id is the corresponding Aspect_Id (Aspect_Dimension_System). Aggr is\n+   --  the corresponding expression for the aspect Dimension_System from the\n+   --  declaration of N.\n \n    procedure Analyze_Dimension (N : Node_Id);\n    --  N may denote any of the following contexts:"}, {"sha": "c3c2a0ca296e9c8ac97dfc02d243ef5f84e7856b", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 9, "deletions": 16, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -1355,7 +1355,7 @@ package body Sem_Prag is\n          --  processing a global list. This routine verifies that Mode is not a\n          --  duplicate mode and sets the flag Status.\n \n-         procedure Check_Mode_Restiction_In_Enclosing_Context\n+         procedure Check_Mode_Restriction_In_Enclosing_Context\n            (Item    : Node_Id;\n             Item_Id : Entity_Id);\n          --  Verify that an item of mode In_Out or Output does not appear as an\n@@ -1464,7 +1464,7 @@ package body Sem_Prag is\n             --  enclosing subprogram.\n \n             if Nam_In (Global_Mode, Name_In_Out, Name_Output) then\n-               Check_Mode_Restiction_In_Enclosing_Context (Item, Item_Id);\n+               Check_Mode_Restriction_In_Enclosing_Context (Item, Item_Id);\n             end if;\n \n             --  The same entity might be referenced through various way. Check\n@@ -1497,11 +1497,11 @@ package body Sem_Prag is\n             Status := True;\n          end Check_Duplicate_Mode;\n \n-         ------------------------------------------------\n-         -- Check_Mode_Restiction_In_Enclosing_Context --\n-         ------------------------------------------------\n+         -------------------------------------------------\n+         -- Check_Mode_Restriction_In_Enclosing_Context --\n+         -------------------------------------------------\n \n-         procedure Check_Mode_Restiction_In_Enclosing_Context\n+         procedure Check_Mode_Restriction_In_Enclosing_Context\n            (Item    : Node_Id;\n             Item_Id : Entity_Id)\n          is\n@@ -1542,7 +1542,7 @@ package body Sem_Prag is\n \n                Subp_Id := Scope (Subp_Id);\n             end loop;\n-         end Check_Mode_Restiction_In_Enclosing_Context;\n+         end Check_Mode_Restriction_In_Enclosing_Context;\n \n          ----------------------------------------\n          -- Check_Mode_Restriction_In_Function --\n@@ -17966,19 +17966,14 @@ package body Sem_Prag is\n         (List : Node_Id;\n          Mode : Name_Id := Name_Input)\n       is\n-         procedure Collect_Global_Item\n-           (Item : Node_Id;\n-            Mode : Name_Id);\n+         procedure Collect_Global_Item (Item : Node_Id; Mode : Name_Id);\n          --  Add an item to the proper subprogram input or output collection\n \n          -------------------------\n          -- Collect_Global_Item --\n          -------------------------\n \n-         procedure Collect_Global_Item\n-           (Item : Node_Id;\n-            Mode : Name_Id)\n-         is\n+         procedure Collect_Global_Item (Item : Node_Id; Mode : Name_Id) is\n          begin\n             if Nam_In (Mode, Name_In_Out, Name_Input) then\n                Add_Item (Item, Subp_Inputs);\n@@ -18009,7 +18004,6 @@ package body Sem_Prag is\n                Item := First (Expressions (List));\n                while Present (Item) loop\n                   Collect_Global_Item (Item, Mode);\n-\n                   Next (Item);\n                end loop;\n \n@@ -18019,7 +18013,6 @@ package body Sem_Prag is\n                   Collect_Global_List\n                     (List => Expression (Assoc),\n                      Mode => Chars (First (Choices (Assoc))));\n-\n                   Next (Assoc);\n                end loop;\n             end if;"}, {"sha": "9bc7926e00ac25c60fa1474f249cf60124070cd1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7be8338dbcc4e915333cf484eec6ab61ff923aac/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=7be8338dbcc4e915333cf484eec6ab61ff923aac", "patch": "@@ -12975,6 +12975,10 @@ package body Sem_Util is\n       --  Determine whether node N denotes a reference to Id. If this is the\n       --  case, set global flag Seen to True and stop the traversal.\n \n+      ------------------\n+      -- Is_Reference --\n+      ------------------\n+\n       function Is_Reference (N : Node_Id) return Traverse_Result is\n       begin\n          if Is_Entity_Name (N)\n@@ -12994,7 +12998,6 @@ package body Sem_Util is\n \n    begin\n       Inspect_Expression (Expr);\n-\n       return Seen;\n    end Referenced;\n "}]}