{"sha": "3595231d9f5aec301422b152809b1322bdb525fe", "node_id": "C_kwDOANBUbNoAKDM1OTUyMzFkOWY1YWVjMzAxNDIyYjE1MjgwOWIxMzIyYmRiNTI1ZmU", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-05-30T19:38:16Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2022-05-30T19:38:16Z"}, "message": "i386: Remove constraints when used with constant integer predicates, take 2\n\nconst_int_operand and other const*_operand predicates do not need\nconstraints when the constraint is inherited from the range of\nconstant integer predicate.  Remove the constraint in case all\nalternatives use the same inherited constraint.\n\nHowever, when there are operands, commitative with a non-constant\noperand, the operand effectively matches e.g.\nnonimmediate_operand|const_int_operand rather than just\nconst_int_operand.  We should keep the constraint for\nconst_int_operand that are in a % pair. See PR 105624.\n\n2022-05-30  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386.md: Remove constraints when used with\n\tconst_int_operand, const0_operand, const_1_operand, constm1_operand,\n\tconst8_operand, const128_operand, const248_operand, const123_operand,\n\tconst2367_operand, const1248_operand, const359_operand,\n\tconst_4_or_8_to_11_operand, const48_operand, const_0_to_1_operand,\n\tconst_0_to_3_operand, const_0_to_4_operand, const_0_to_5_operand,\n\tconst_0_to_7_operand, const_0_to_15_operand, const_0_to_31_operand,\n\tconst_0_to_63_operand, const_0_to_127_operand, const_0_to_255_operand,\n\tconst_0_to_255_mul_8_operand, const_1_to_31_operand,\n\tconst_1_to_63_operand, const_2_to_3_operand, const_4_to_5_operand,\n\tconst_4_to_7_operand, const_6_to_7_operand, const_8_to_9_operand,\n\tconst_8_to_11_operand, const_8_to_15_operand, const_10_to_11_operand,\n\tconst_12_to_13_operand, const_12_to_15_operand, const_14_to_15_operand,\n\tconst_16_to_19_operand, const_16_to_31_operand, const_20_to_23_operand,\n\tconst_24_to_27_operand and const_28_to_31_operand.\n\t* config/i386/mmx.md: Ditto.\n\t* config/i386/sse.md: Ditto.\n\t* config/i386/subst.md: Ditto.\n\t* config/i386/sync.md: Ditto.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105624.c: New test.", "tree": {"sha": "e97f6acfe7aac15b95aac5dfaf5d074fa52b19ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e97f6acfe7aac15b95aac5dfaf5d074fa52b19ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3595231d9f5aec301422b152809b1322bdb525fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3595231d9f5aec301422b152809b1322bdb525fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3595231d9f5aec301422b152809b1322bdb525fe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3595231d9f5aec301422b152809b1322bdb525fe/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c89298404071e3b42eb7e2bfbdbaa45573538b53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c89298404071e3b42eb7e2bfbdbaa45573538b53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c89298404071e3b42eb7e2bfbdbaa45573538b53"}], "stats": {"total": 494, "additions": 247, "deletions": 247}, "files": [{"sha": "d070ccde19978c9f82f647e47e9fc527b0f9af8a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -6298,7 +6298,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (match_operand:SWI124 1 \"nonimmediate_operand\" \"0\")\n-\t  (match_operand:SWI124 2 \"const_int_operand\" \"n\")))\n+\t  (match_operand:SWI124 2 \"const_int_operand\")))\n    (clobber (match_scratch:SWI124 0 \"=<r>\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\"\n {\n@@ -6504,7 +6504,7 @@\n \t(eq:CCO (plus:<DWI>\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\"))\n \t\t(sign_extend:<DWI>\n \t\t   (plus:SWI\n \t\t     (match_dup 1)\n@@ -6577,7 +6577,7 @@\n \t  (plus:<QPWI>\n \t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"%0\"))\n-\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\" \"n\"))\n \t  (sign_extend:<QPWI>\n \t    (plus:<DWI>\n \t      (match_dup 1)\n@@ -6662,7 +6662,7 @@\n \t\t[(match_operand 3 \"flags_reg_operand\") (const_int 0)])\n \t      (sign_extend:<DWI>\n \t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0\")))\n-\t    (match_operand:<DWI> 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:<DWI> 6 \"const_int_operand\" \"n\"))\n \t  (sign_extend:<DWI>\n \t    (plus:SWI\n \t      (plus:SWI\n@@ -6827,8 +6827,8 @@\n \t(any_or:SWI12\n \t  (ashift:SWI12\n \t    (match_operand:SWI12 1 \"index_register_operand\" \"l\")\n-\t    (match_operand 2 \"const_0_to_3_operand\" \"n\"))\n-\t  (match_operand 3 \"const_int_operand\" \"n\")))]\n+\t    (match_operand 2 \"const_0_to_3_operand\"))\n+\t  (match_operand 3 \"const_int_operand\")))]\n   \"(!TARGET_PARTIAL_REG_STALL || optimize_function_for_size_p (cfun))\n    && ((unsigned HOST_WIDE_INT) INTVAL (operands[3])\n        < (HOST_WIDE_INT_1U << INTVAL (operands[2])))\"\n@@ -6851,8 +6851,8 @@\n \t(any_or:SWI48\n \t  (ashift:SWI48\n \t    (match_operand:SWI48 1 \"index_register_operand\" \"l\")\n-\t    (match_operand 2 \"const_0_to_3_operand\" \"n\"))\n-\t  (match_operand 3 \"const_int_operand\" \"n\")))]\n+\t    (match_operand 2 \"const_0_to_3_operand\"))\n+\t  (match_operand 3 \"const_int_operand\")))]\n   \"(unsigned HOST_WIDE_INT) INTVAL (operands[3])\n    < (HOST_WIDE_INT_1U << INTVAL (operands[2]))\"\n   \"#\"\n@@ -7048,7 +7048,7 @@\n \t(eq:CCO (minus:<DWI>\n \t\t   (sign_extend:<DWI>\n \t\t      (match_operand:SWI 1 \"nonimmediate_operand\" \"0\"))\n-\t\t   (match_operand:<DWI> 3 \"const_int_operand\" \"i\"))\n+\t\t   (match_operand:<DWI> 3 \"const_int_operand\"))\n \t\t(sign_extend:<DWI>\n \t\t   (minus:SWI\n \t\t     (match_dup 1)\n@@ -7116,7 +7116,7 @@\n \t  (minus:<QPWI>\n \t    (sign_extend:<QPWI>\n \t      (match_operand:<DWI> 1 \"nonimmediate_operand\" \"0\"))\n-\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\" \"\"))\n+\t    (match_operand:<QPWI> 3 \"const_scalar_int_operand\"))\n \t  (sign_extend:<QPWI>\n \t    (minus:<DWI>\n \t      (match_dup 1)\n@@ -7199,7 +7199,7 @@\n \t\t(match_operand:SWI 1 \"nonimmediate_operand\" \"%0\"))\n \t      (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n \t\t[(match_operand 3 \"flags_reg_operand\") (const_int 0)]))\n-\t    (match_operand:<DWI> 6 \"const_int_operand\" \"\"))\n+\t    (match_operand:<DWI> 6 \"const_int_operand\" \"n\"))\n \t  (sign_extend:<DWI>\n \t    (minus:SWI\n \t      (minus:SWI\n@@ -7469,7 +7469,7 @@\n \t\t(match_operand:SWI48 1 \"nonimmediate_operand\" \"%0\"))\n \t      (match_operand:SWI48 2 \"x86_64_immediate_operand\" \"e\")))\n \t  (plus:<DWI>\n-\t    (match_operand:<DWI> 6 \"const_scalar_int_operand\" \"\")\n+\t    (match_operand:<DWI> 6 \"const_scalar_int_operand\")\n \t    (match_operator:<DWI> 4 \"ix86_carry_flag_operator\"\n \t      [(match_dup 3) (const_int 0)]))))\n    (set (match_operand:SWI48 0 \"nonimmediate_operand\" \"=rm\")\n@@ -8463,7 +8463,7 @@\n \t  (lshiftrt:<DWI>\n \t    (mult:<DWI> (zero_extend:<DWI> (match_dup 2))\n \t\t\t(zero_extend:<DWI> (match_dup 3)))\n-\t    (match_operand:QI 4 \"const_int_operand\" \"n\"))))]\n+\t    (match_operand:QI 4 \"const_int_operand\"))))]\n   \"TARGET_BMI2 && INTVAL (operands[4]) == <MODE_SIZE> * BITS_PER_UNIT\n    && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"mulx\\t{%3, %0, %1|%1, %0, %3}\"\n@@ -9097,7 +9097,7 @@\n (define_insn_and_split \"*udivmod<mode>4_pow2\"\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n \t(udiv:SWI48 (match_operand:SWI48 2 \"register_operand\" \"0\")\n-\t\t    (match_operand:SWI48 3 \"const_int_operand\" \"n\")))\n+\t\t    (match_operand:SWI48 3 \"const_int_operand\")))\n    (set (match_operand:SWI48 1 \"register_operand\" \"=r\")\n \t(umod:SWI48 (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9178,7 +9178,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (udiv:SI (match_operand:SI 2 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 3 \"const_int_operand\" \"n\"))))\n+\t\t   (match_operand:SI 3 \"const_int_operand\"))))\n    (set (match_operand:SI 1 \"register_operand\" \"=r\")\n \t(umod:SI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9262,7 +9262,7 @@\n   [(set (match_operand:DI 1 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (umod:SI (match_operand:SI 2 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 3 \"const_int_operand\" \"n\"))))\n+\t\t   (match_operand:SI 3 \"const_int_operand\"))))\n    (set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(udiv:SI (match_dup 2) (match_dup 3)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -9329,7 +9329,7 @@\n ;; Avoid sign-extension (using cdq) for constant numerators.\n (define_insn_and_split \"*divmodsi4_const\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=&a\")\n-\t(div:SI (match_operand:SI 2 \"const_int_operand\" \"n\")\n+\t(div:SI (match_operand:SI 2 \"const_int_operand\")\n \t\t(match_operand:SI 3 \"nonimmediate_operand\" \"rm\")))\n    (set (match_operand:SI 1 \"register_operand\" \"=&d\")\n \t(mod:SI (match_dup 2) (match_dup 3)))\n@@ -9614,8 +9614,8 @@\n         (match_operator 1 \"compare_operator\"\n \t  [(zero_extract:SWI248\n \t     (match_operand 2 \"int_nonimmediate_operand\" \"rm\")\n-\t     (match_operand 3 \"const_int_operand\" \"n\")\n-\t     (match_operand 4 \"const_int_operand\" \"n\"))\n+\t     (match_operand 3 \"const_int_operand\")\n+\t     (match_operand 4 \"const_int_operand\"))\n \t   (const_int 0)]))]\n   \"/* Ensure that resulting mask is zero or sign extended operand.  */\n    INTVAL (operands[4]) >= 0\n@@ -11972,12 +11972,12 @@\n (define_insn \"*x86_64_shld_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (ashift:DI (match_dup 0)\n-\t\t\t   (match_operand:QI 2 \"const_0_to_63_operand\" \"J\"))\n+\t\t\t   (match_operand:QI 2 \"const_0_to_63_operand\"))\n \t\t(subreg:DI\n \t\t  (lshiftrt:TI\n \t\t    (zero_extend:TI\n \t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t\t    (match_operand:QI 3 \"const_0_to_255_operand\" \"N\")) 0)))\n+\t\t    (match_operand:QI 3 \"const_0_to_255_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n    && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\"\n@@ -12036,12 +12036,12 @@\n (define_insn \"*x86_shld_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (ashift:SI (match_dup 0)\n-\t\t\t   (match_operand:QI 2 \"const_0_to_31_operand\" \"I\"))\n+\t\t\t   (match_operand:QI 2 \"const_0_to_31_operand\"))\n \t\t(subreg:SI\n \t\t  (lshiftrt:DI\n \t\t    (zero_extend:DI\n \t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t    (match_operand:QI 3 \"const_0_to_63_operand\" \"J\")) 0)))\n+\t\t    (match_operand:QI 3 \"const_0_to_63_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\"\n   \"shld{l}\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -12561,7 +12561,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (ashift:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t\t     (match_operand:QI 2 \"const_1_to_31_operand\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (ashift:SI (match_dup 1) (match_dup 2))))]\n@@ -12895,12 +12895,12 @@\n (define_insn \"*x86_64_shrd_1\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (lshiftrt:DI (match_dup 0)\n-\t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\" \"J\"))\n+\t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\"))\n \t\t(subreg:DI\n \t\t  (ashift:TI\n \t\t    (zero_extend:TI\n \t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n-\t\t    (match_operand:QI 3 \"const_0_to_255_operand\" \"N\")) 0)))\n+\t\t    (match_operand:QI 3 \"const_0_to_255_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\n    && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\"\n@@ -12959,12 +12959,12 @@\n (define_insn \"*x86_shrd_1\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (lshiftrt:SI (match_dup 0)\n-\t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\" \"I\"))\n+\t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\"))\n \t\t(subreg:SI\n \t\t  (ashift:DI\n \t\t    (zero_extend:DI\n \t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t    (match_operand:QI 3 \"const_0_to_63_operand\" \"J\")) 0)))\n+\t\t    (match_operand:QI 3 \"const_0_to_63_operand\")) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\"\n   \"shrd{l}\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -13372,7 +13372,7 @@\n   [(set (reg FLAGS_REG)\n \t(compare\n \t  (any_shiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n-\t\t\t  (match_operand:QI 2 \"const_1_to_31_operand\" \"I\"))\n+\t\t\t  (match_operand:QI 2 \"const_1_to_31_operand\"))\n \t  (const_int 0)))\n    (set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI (any_shiftrt:SI (match_dup 1) (match_dup 2))))]\n@@ -13749,7 +13749,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n \t  (rotatert:SI (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t       (match_operand:QI 2 \"const_0_to_31_operand\" \"I\"))))]\n+\t\t       (match_operand:QI 2 \"const_0_to_31_operand\"))))]\n   \"TARGET_64BIT && TARGET_BMI2 && !optimize_function_for_size_p (cfun)\"\n   \"rorx\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"rotatex\")\n@@ -14102,7 +14102,7 @@\n (define_insn \"*btsq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\"))\n \t(const_int 1))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -14115,7 +14115,7 @@\n (define_insn \"*btrq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\"))\n \t(const_int 0))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -14128,7 +14128,7 @@\n (define_insn \"*btcq_imm\"\n   [(set (zero_extract:DI (match_operand:DI 0 \"nonimmediate_operand\" \"+rm\")\n \t\t\t (const_int 1)\n-\t\t\t (match_operand 1 \"const_0_to_63_operand\" \"J\"))\n+\t\t\t (match_operand 1 \"const_0_to_63_operand\"))\n \t(not:DI (zero_extract:DI (match_dup 0) (const_int 1) (match_dup 1))))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT && (TARGET_USE_BT || reload_completed)\"\n@@ -14656,7 +14656,7 @@\n \t(unspec:QI\n \t  [(match_operand:HF 1 \"register_operand\" \"v\")\n \t   (match_operand:HF 2 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_31_operand\")]\n \t  UNSPEC_PCMP))]\n   \"TARGET_AVX512FP16\"\n   \"vcmpsh\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -16673,7 +16673,7 @@\n \t  (zero_extract:SWI48\n \t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t    (umin:SWI48 (and:SWI48 (match_dup 2) (const_int 255))\n-\t\t\t(match_operand:SWI48 3 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:SWI48 3 \"const_int_operand\"))\n \t    (const_int 0))\n \t  (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -16690,7 +16690,7 @@\n \t  (zero_extract:SWI48\n \t    (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t    (umin:SWI48 (zero_extend:SWI48 (match_dup 2))\n-\t\t\t(match_operand:SWI48 3 \"const_int_operand\" \"n\"))\n+\t\t\t(match_operand:SWI48 3 \"const_int_operand\"))\n \t    (const_int 0))\n \t  (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n@@ -16708,7 +16708,7 @@\n \t    (zero_extract:SWI48\n \t      (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n \t      (umin:SWI48 (zero_extend:SWI48 (match_dup 2))\n-\t\t\t  (match_operand:SWI48 3 \"const_int_operand\" \"n\"))\n+\t\t\t  (match_operand:SWI48 3 \"const_int_operand\"))\n \t      (const_int 0))\n \t    (const_int 0))\n \t(const_int 0)))\n@@ -16791,8 +16791,8 @@\n   [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n         (zero_extract:SWI48\n           (match_operand:SWI48 1 \"nonimmediate_operand\" \"rm\")\n-          (match_operand 2 \"const_0_to_255_operand\" \"N\")\n-          (match_operand 3 \"const_0_to_255_operand\" \"N\")))\n+          (match_operand 2 \"const_0_to_255_operand\")\n+          (match_operand 3 \"const_0_to_255_operand\")))\n    (clobber (reg:CC FLAGS_REG))]\n    \"TARGET_TBM\"\n {\n@@ -19415,7 +19415,7 @@\n   [(set (match_operand:MODEFH 0 \"register_operand\" \"=x,x,x,v,v\")\n \t(unspec:MODEFH\n \t  [(match_operand:MODEFH 1 \"nonimmediate_operand\" \"0,x,m,v,m\")\n-\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n,n,n\")]\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"@\n@@ -21607,7 +21607,7 @@\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")]\n \t\t\t    UNSPECV_PROBE_STACK_RANGE))\n    (set (reg:P SP_REG)\n-        (minus:P (reg:P SP_REG) (match_operand:P 2 \"const_int_operand\" \"n\")))\n+        (minus:P (reg:P SP_REG) (match_operand:P 2 \"const_int_operand\")))\n    (clobber (reg:CC FLAGS_REG))\n    (clobber (mem:BLK (scratch)))]\n   \"\"\n@@ -21617,7 +21617,7 @@\n (define_insn \"@probe_stack_range_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(match_operand:P 1 \"register_operand\" \"0\")\n-\t\t\t    (match_operand:P 2 \"const_int_operand\" \"n\")]\n+\t\t\t    (match_operand:P 2 \"const_int_operand\")]\n \t\t\t    UNSPECV_PROBE_STACK_RANGE))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n@@ -23061,7 +23061,7 @@\n \n (define_insn \"*prefetch_3dnow\"\n   [(prefetch (match_operand 0 \"address_operand\" \"p\")\n-\t     (match_operand:SI 1 \"const_int_operand\" \"n\")\n+\t     (match_operand:SI 1 \"const_int_operand\")\n \t     (const_int 3))]\n   \"TARGET_3DNOW || TARGET_PRFCHW || TARGET_PREFETCHWT1\"\n {\n@@ -23611,7 +23611,7 @@\n (define_insn \"@lwp_lwpval<mode>\"\n   [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")\n     \t    \t     (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t     (match_operand:SI 2 \"const_int_operand\" \"i\")]\n+\t\t     (match_operand:SI 2 \"const_int_operand\")]\n \t\t    UNSPECV_LWPVAL_INTRINSIC)]\n   \"TARGET_LWP\"\n   \"lwpval\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -23624,7 +23624,7 @@\n   [(set (reg:CCC FLAGS_REG)\n \t(unspec_volatile:CCC [(match_operand:SWI48 0 \"register_operand\" \"r\")\n \t\t\t      (match_operand:SI 1 \"nonimmediate_operand\" \"rm\")\n-\t\t\t      (match_operand:SI 2 \"const_int_operand\" \"i\")]\n+\t\t\t      (match_operand:SI 2 \"const_int_operand\")]\n \t\t\t     UNSPECV_LWPINS_INTRINSIC))]\n   \"TARGET_LWP\"\n   \"lwpins\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -23830,7 +23830,7 @@\n    (set_attr \"length\" \"3\")])\n \n (define_insn \"xabort\"\n-  [(unspec_volatile [(match_operand:SI 0 \"const_0_to_255_operand\" \"n\")]\n+  [(unspec_volatile [(match_operand:SI 0 \"const_0_to_255_operand\")]\n \t\t    UNSPECV_XABORT)]\n   \"TARGET_RTM\"\n   \"xabort\\t%0\""}, {"sha": "03aa01f8693771432a223d46e31e932945b2a7c3", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -3454,7 +3454,7 @@\n   [(set (match_operand:HI 0 \"register_sse4nonimm_operand\" \"=r,r,m\")\n \t(vec_select:HI\n \t  (match_operand:V4HI 1 \"register_operand\" \"y,YW,YW\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"@\n@@ -3473,7 +3473,7 @@\n \t(zero_extend:SWI48\n \t  (vec_select:HI\n \t    (match_operand:V4HI 1 \"register_operand\" \"y,YW\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n\")]))))]\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")]))))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && (TARGET_SSE || TARGET_3DNOW_A)\"\n   \"@\n@@ -3490,7 +3490,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,m\")\n \t(vec_select:QI\n \t  (match_operand:V8QI 1 \"register_operand\" \"YW,YW\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n,n\")])))]\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_7_operand\")])))]\n   \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n   \"@\n    %vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\n@@ -3507,7 +3507,7 @@\n \t(zero_extend:SWI248\n \t  (vec_select:QI\n \t    (match_operand:V8QI 1 \"register_operand\" \"YW\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\" \"n\")]))))]\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_7_operand\")]))))]\n   \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n   \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n@@ -3630,7 +3630,7 @@\n \t(vec_merge:V4HI\n \t  (match_operand:V4HI 2 \"register_operand\" \"Yr,*x,x\")\n \t  (match_operand:V4HI 1 \"register_operand\" \"0,0,x\")\n-\t  (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n\")))]\n+\t  (match_operand:SI 3 \"const_0_to_15_operand\")))]\n   \"TARGET_SSE4_1 && TARGET_MMX_WITH_SSE\"\n   \"@\n    pblendw\\t{%3, %2, %0|%0, %2, %3}\n@@ -3648,7 +3648,7 @@\n \t(vec_merge:V2HI\n \t  (match_operand:V2HI 2 \"register_operand\" \"Yr,*x,x\")\n \t  (match_operand:V2HI 1 \"register_operand\" \"0,0,x\")\n-\t  (match_operand:SI 3 \"const_0_to_7_operand\" \"n,n,n\")))]\n+\t  (match_operand:SI 3 \"const_0_to_7_operand\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n    pblendw\\t{%3, %2, %0|%0, %2, %3}\n@@ -4035,7 +4035,7 @@\n   [(set (match_operand:HI 0 \"register_sse4nonimm_operand\" \"=r,m\")\n \t(vec_select:HI\n \t  (match_operand:V2HI 1 \"register_operand\" \"YW,YW\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_1_operand\" \"n,n\")])))]\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")])))]\n   \"TARGET_SSE2\"\n   \"@\n    %vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\n@@ -4051,7 +4051,7 @@\n \t(zero_extend:SWI48\n \t  (vec_select:HI\n \t    (match_operand:V2HI 1 \"register_operand\" \"YW\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\" \"n\")]))))]\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_1_operand\")]))))]\n   \"TARGET_SSE2\"\n   \"%vpextrw\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")\n@@ -4063,7 +4063,7 @@\n   [(set (match_operand:QI 0 \"nonimmediate_operand\" \"=r,m\")\n \t(vec_select:QI\n \t  (match_operand:V4QI 1 \"register_operand\" \"YW,YW\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n\")])))]\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"@\n    %vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\n@@ -4080,7 +4080,7 @@\n \t(zero_extend:SWI248\n \t  (vec_select:QI\n \t    (match_operand:V4QI 1 \"register_operand\" \"YW\")\n-\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n\")]))))]\n+\t    (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")]))))]\n   \"TARGET_SSE4_1\"\n   \"%vpextrb\\t{%2, %1, %k0|%k0, %1, %2}\"\n   [(set_attr \"type\" \"sselog1\")"}, {"sha": "5eb48c392c22a86a06fc12408807e360641b0a92", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 183, "deletions": 183, "changes": 366, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -1484,7 +1484,7 @@\n \t      (match_operand:MODEFH 1 \"memory_operand\" \"m\"))\n \t    (match_operand:<ssevecmode> 2 \"nonimm_or_0_operand\" \"0C\")\n \t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t  (match_operand:<ssevecmode> 4 \"const0_operand\" \"C\")\n+\t  (match_operand:<ssevecmode> 4 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n   \"vmov<ssescalarmodesuffix>\\t{%1, %0%{%3%}%N2|%0%{3%}%N2, %1}\"\n@@ -1624,7 +1624,7 @@\n \t  (vec_select:<ssescalarmode>\n \t    (match_operand:VI8F_128 1 \"nonimmediate_operand\" \"vm\")\n \t    (parallel [(const_int 0)]))\n-\t  (match_operand:<ssescalarmode> 2 \"const0_operand\" \"C\")))]\n+\t  (match_operand:<ssescalarmode> 2 \"const0_operand\")))]\n   \"TARGET_SSE2\"\n   \"%vmovq\\t{%1, %0|%0, %q1}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -2018,7 +2018,7 @@\n   [(set (match_operand:SWI1248_AVX512BWDQ 0 \"register_operand\" \"=k\")\n \t(any_lshift:SWI1248_AVX512BWDQ\n \t  (match_operand:SWI1248_AVX512BWDQ 1 \"register_operand\" \"k\")\n-\t  (match_operand 2 \"const_0_to_255_operand\" \"n\")))\n+\t  (match_operand 2 \"const_0_to_255_operand\")))\n    (unspec [(const_int 0)] UNSPEC_MASKOP)]\n   \"TARGET_AVX512F\"\n   \"k<mshift><mskmodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -3440,7 +3440,7 @@\n \t(unspec:VF_128_256\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"x\")\n \t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_31_operand\")]\n \t  UNSPEC_PCMP))]\n   \"TARGET_AVX\"\n   \"vcmp<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -3652,7 +3652,7 @@\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 1 \"register_operand\" \"x\")\n \t     (match_operand:VF_128 2 \"nonimmediate_operand\" \"xm\")\n-\t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t     (match_operand:SI 3 \"const_0_to_31_operand\")]\n \t    UNSPEC_PCMP)\n \t (match_dup 1)\n \t (const_int 1)))]\n@@ -3745,7 +3745,7 @@\n \t  (unspec:<V48H_AVX512VL:avx512fmaskmode>\n \t    [(match_operand:V48H_AVX512VL 1 \"nonimmediate_operand\")\n \t     (match_operand:V48H_AVX512VL 2 \"nonimmediate_operand\")\n-\t     (match_operand:SI 3 \"const_0_to_7_operand\" \"n\")]\n+\t     (match_operand:SI 3 \"const_0_to_7_operand\")]\n \t    UNSPEC_PCMP)))]\n   \"TARGET_AVX512F\n    && (!VALID_MASK_AVX512BW_MODE (<SWI248x:MODE>mode) || TARGET_AVX512BW)\n@@ -3951,7 +3951,7 @@\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n \t   (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 3 \"const_0_to_7_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_7_operand\")]\n \t  UNSPEC_UNSIGNED_PCMP))]\n   \"TARGET_AVX512BW\"\n   \"vpcmpu<ssemodesuffix>\\t{%3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %3}\"\n@@ -4049,7 +4049,7 @@\n \t(unspec:<avx512fmaskmode>\n \t  [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n \t   (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 3 \"const_0_to_7_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_7_operand\")]\n \t  UNSPEC_UNSIGNED_PCMP))]\n   \"TARGET_AVX512F\"\n   \"vpcmpu<ssemodesuffix>\\t{%3, %2, %1, %0<mask_scalar_merge_operand4>|%0<mask_scalar_merge_operand4>, %1, %2, %3}\"\n@@ -4189,7 +4189,7 @@\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n \t     (match_operand:VFH_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n-\t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t     (match_operand:SI 3 \"const_0_to_31_operand\")]\n \t    UNSPEC_PCMP)\n \t  (const_int 1)))]\n   \"TARGET_AVX512F\"\n@@ -4205,7 +4205,7 @@\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VFH_128 1 \"register_operand\" \"v\")\n \t     (match_operand:VFH_128 2 \"<round_saeonly_nimm_scalar_predicate>\" \"<round_saeonly_constraint>\")\n-\t     (match_operand:SI 3 \"const_0_to_31_operand\" \"n\")]\n+\t     (match_operand:SI 3 \"const_0_to_31_operand\")]\n \t    UNSPEC_PCMP)\n \t  (and:<avx512fmaskmode>\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\")\n@@ -6081,7 +6081,7 @@\n \t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n \t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n \t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n-\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:VFH_128 4 \"const0_operand\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6139,7 +6139,7 @@\n \t      (match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\")\n \t      (neg:VFH_128\n \t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n-\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:VFH_128 4 \"const0_operand\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6211,7 +6211,7 @@\n \t\t(match_operand:VFH_128 2 \"<round_nimm_scalar_predicate>\" \"<round_constraint>,v\"))\n \t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n \t      (match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\"))\n-\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:VFH_128 4 \"const0_operand\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6272,7 +6272,7 @@\n \t      (match_operand:VFH_128 1 \"register_operand\" \"0,0\")\n \t      (neg:VFH_128\n \t\t(match_operand:VFH_128 3 \"<round_nimm_scalar_predicate>\" \"v,<round_constraint>\")))\n-\t    (match_operand:VFH_128 4 \"const0_operand\" \"C,C\")\n+\t    (match_operand:VFH_128 4 \"const0_operand\")\n \t    (match_operand:QI 5 \"register_operand\" \"Yk,Yk\"))\n \t  (match_dup 1)\n \t  (const_int 1)))]\n@@ -6937,7 +6937,7 @@\n   [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V8HF\n \t    (any_float:V4HF (match_operand:VI4_128_8_256 1 \"vector_operand\" \"vm\"))\n-\t    (match_operand:V4HF 2 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V4HF 2 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -6966,7 +6966,7 @@\n                 (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n                 (parallel [(const_int 0) (const_int 1) (const_int 2) (const_int 3)]))\n             (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V4HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -6979,9 +6979,9 @@\n \t(vec_merge:V4HF\n \t\t(any_float:V4HF (match_operand:VI4_128_8_256 1\n \t\t\t\t  \"vector_operand\" \"vm\"))\n-\t    (match_operand:V4HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V4HF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V4HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix><sseintconvert>2ph<qq2phsuff>\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7013,7 +7013,7 @@\n   [(set (match_operand:V8HF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V8HF\n \t    (any_float:V2HF (match_operand:V2DI 1 \"vector_operand\" \"vm\"))\n-\t    (match_operand:V6HF 2 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V6HF 2 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7042,7 +7042,7 @@\n                 (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n                 (parallel [(const_int 0) (const_int 1)]))\n             (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V6HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7055,9 +7055,9 @@\n \t(vec_merge:V2HF\n \t\t(any_float:V2HF (match_operand:V2DI 1\n \t\t\t\t  \"vector_operand\" \"vm\"))\n-\t    (match_operand:V2HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V2HF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V6HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ph{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7360,7 +7360,7 @@\n \t(vec_concat:V8HF\n \t    (float_truncate:V4HF\n \t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n-\t    (match_operand:V4HF 2 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V4HF 2 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7393,7 +7393,7 @@\n \t      (parallel [(const_int 0) (const_int 1)\n \t\t\t (const_int 2) (const_int 3)]))\n \t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V4HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7406,9 +7406,9 @@\n \t  (vec_merge:V4HF\n \t    (float_truncate:V4HF\n \t      (match_operand:VF4_128_8_256 1 \"vector_operand\" \"vm\"))\n-\t    (match_operand:V4HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V4HF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V4HF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V4HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvt<castmode>2ph<ph2pssuffix><qq2phsuff>\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7439,7 +7439,7 @@\n \t(vec_concat:V8HF\n \t  (float_truncate:V2HF\n \t    (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n-\t  (match_operand:V6HF 2 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V6HF 2 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvtpd2ph{x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7469,7 +7469,7 @@\n \t      (match_operand:V8HF 2 \"nonimm_or_0_operand\" \"0C\")\n \t      (parallel [(const_int 0) (const_int 1)]))\n \t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V6HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvtpd2ph{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -7482,9 +7482,9 @@\n \t  (vec_merge:V2HF\n \t    (float_truncate:V2HF\n \t      (match_operand:V2DF 1 \"vector_operand\" \"vm\"))\n-\t    (match_operand:V2HF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V2HF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V6HF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V6HF 4 \"const0_operand\")))]\n   \"TARGET_AVX512FP16 && TARGET_AVX512VL\"\n   \"vcvtpd2ph{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -8268,7 +8268,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n \t(vec_concat:V4SF\n \t    (any_float:V2SF (match_operand:V2DI 1 \"nonimmediate_operand\" \"vm\"))\n-\t    (match_operand:V2SF 2 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V2SF 2 \"const0_operand\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -8343,7 +8343,7 @@\n                 (match_operand:V4SF 2 \"nonimm_or_0_operand\" \"0C\")\n                 (parallel [(const_int 0) (const_int 1)]))\n             (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V2SF 4 \"const0_operand\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -8356,9 +8356,9 @@\n \t(vec_merge:V2SF\n \t\t(any_float:V2SF (match_operand:V2DI 1\n \t\t\t\t  \"nonimmediate_operand\" \"vm\"))\n-\t    (match_operand:V2SF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V2SF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t    (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n+\t    (match_operand:V2SF 4 \"const0_operand\")))]\n   \"TARGET_AVX512DQ && TARGET_AVX512VL\"\n   \"vcvt<floatsuffix>qq2ps{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -8982,7 +8982,7 @@\n \t(vec_concat:V4SF\n \t  (float_truncate:V2SF\n \t    (match_operand:V2DF 1 \"vector_operand\" \"vBm\"))\n-\t  (match_operand:V2SF 2 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V2SF 2 \"const0_operand\")))]\n   \"TARGET_SSE2\"\n {\n   if (TARGET_AVX)\n@@ -9027,7 +9027,7 @@\n \t      (match_operand:V4SF 2 \"nonimm_or_0_operand\" \"0C\")\n \t      (parallel [(const_int 0) (const_int 1)]))\n \t    (match_operand:QI 3 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V2SF 4 \"const0_operand\")))]\n   \"TARGET_AVX512VL\"\n   \"vcvtpd2ps{x}\\t{%1, %0%{%3%}%N2|%0%{%3%}%N2, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -9040,9 +9040,9 @@\n \t  (vec_merge:V2SF\n \t    (float_truncate:V2SF\n \t      (match_operand:V2DF 1 \"nonimmediate_operand\" \"vm\"))\n-\t    (match_operand:V2SF 3 \"const0_operand\" \"C\")\n+\t    (match_operand:V2SF 3 \"const0_operand\")\n \t    (match_operand:QI 2 \"register_operand\" \"Yk\"))\n-\t  (match_operand:V2SF 4 \"const0_operand\" \"C\")))]\n+\t  (match_operand:V2SF 4 \"const0_operand\")))]\n   \"TARGET_AVX512VL\"\n   \"vcvtpd2ps{x}\\t{%1, %0%{%2%}%{z%}|%0%{%2%}%{z%}, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n@@ -10577,7 +10577,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\"       \"=v\")\n \t(vec_concat:V4SF\n \t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"vm\")\n-\t  (match_operand:V2SF 2 \"const0_operand\"       \" C\")))]\n+\t  (match_operand:V2SF 2 \"const0_operand\")))]\n   \"TARGET_SSE2\"\n   \"%vmovq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -10735,7 +10735,7 @@\n \t(vec_merge:VI2F_256_512\n \t  (vec_duplicate:VI2F_256_512\n \t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,m\"))\n-\t  (match_operand:VI2F_256_512 1 \"const0_operand\" \"C,C\")\n+\t  (match_operand:VI2F_256_512 1 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_AVX512FP16\"\n   \"@\n@@ -10835,7 +10835,7 @@\n \t(vec_merge:VI4F_256_512\n \t  (vec_duplicate:VI4F_256_512\n \t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"v,m,r\"))\n-\t  (match_operand:VI4F_256_512 1 \"const0_operand\" \"C,C,C\")\n+\t  (match_operand:VI4F_256_512 1 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_AVX\"\n   \"@\n@@ -10898,7 +10898,7 @@\n   [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,v\")\n \t(unspec:V4SF [(match_operand:V4SF 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t\t      (match_operand:V4SF 1 \"register_operand\" \"0,0,v\")\n-\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t\t      (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_INSERTPS))]\n   \"TARGET_SSE4_1\"\n {\n@@ -11015,7 +11015,7 @@\n   [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,rm,Yv,Yv\")\n \t(vec_select:SF\n \t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*x,v,0,v\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n,n,n\")])))]\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"@\n    extractps\\t{%2, %1, %0|%0, %1, %2}\n@@ -11057,7 +11057,7 @@\n   [(set (match_operand:SF 0 \"register_operand\" \"=v,*r,f\")\n \t(vec_select:SF\n \t  (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n-\t  (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+\t  (parallel [(match_operand 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -13540,7 +13540,7 @@\n \t(vec_merge:VF2_512_256\n \t  (vec_duplicate:VF2_512_256\n \t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:VF2_512_256 1 \"const0_operand\" \"C\")\n+\t  (match_operand:VF2_512_256 1 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_AVX\"\n   \"vmovq\\t{%2, %x0|%x0, %2}\"\n@@ -16028,7 +16028,7 @@\n   [(set (match_operand:VIMAX_AVX512VL 0 \"register_operand\" \"=v\")\n \t(any_lshift:VIMAX_AVX512VL\n \t (match_operand:VIMAX_AVX512VL 1 \"nonimmediate_operand\" \"vm\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\")))]\n   \"TARGET_AVX512BW\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n@@ -16043,7 +16043,7 @@\n   [(set (match_operand:VIMAX_AVX2 0 \"register_operand\" \"=x,Yw\")\n \t(any_lshift:VIMAX_AVX2\n \t (match_operand:VIMAX_AVX2 1 \"register_operand\" \"0,Yw\")\n-\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n,n\")))]\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\")))]\n   \"TARGET_SSE2\"\n {\n   operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n@@ -18102,7 +18102,7 @@\n \t  (match_operand:AVX512_VEC 1 \"reg_or_0_operand\" \"v,C,C\")\n \t  (vec_duplicate:AVX512_VEC\n \t\t(match_operand:<ssequartermode> 2 \"nonimmediate_operand\" \"vm,xm,vm\"))\n-\t  (match_operand:SI 3 \"const_int_operand\" \"n,n,n\")))]\n+\t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_AVX512F\n    && (INTVAL (operands[3])\n        == (GET_MODE_UNIT_SIZE (<MODE>mode) == 4 ? 0xFFF0 : 0xFC))\"\n@@ -18150,7 +18150,7 @@\n \t  (match_operand:AVX512_VEC 1 \"register_operand\" \"v\")\n \t  (vec_duplicate:AVX512_VEC\n \t\t(match_operand:<ssequartermode> 2 \"nonimmediate_operand\" \"vm\"))\n-\t  (match_operand:SI 3 \"const_int_operand\" \"n\")))]\n+\t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_AVX512F\"\n {\n   int mask;\n@@ -18818,7 +18818,7 @@\n   [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n \t(unspec:V32HI\n \t  [(match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_PSHUFLW))]\n   \"TARGET_AVX512BW\"\n   \"vpshuflw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -18994,7 +18994,7 @@\n   [(set (match_operand:V32HI 0 \"register_operand\" \"=v\")\n \t(unspec:V32HI\n \t  [(match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_PSHUFHW))]\n   \"TARGET_AVX512BW\"\n   \"vpshufhw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -19726,7 +19726,7 @@\n   [(set (match_operand:VI124_128 0 \"register_operand\"       \"=v,x\")\n \t(vec_concat:VI124_128\n \t  (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm,?!*y\")\n-\t  (match_operand:<ssehalfvecmode> 2 \"const0_operand\"       \" C,C\")))]\n+\t  (match_operand:<ssehalfvecmode> 2 \"const0_operand\")))]\n   \"TARGET_SSE2\"\n   \"@\n    %vmovq\\t{%1, %0|%0, %1}\n@@ -19800,7 +19800,7 @@\n   [(set (match_operand:V2DI 0 \"register_operand\"     \"=v,v ,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \" r,vm,?!*y\")\n-\t  (match_operand:DI 2 \"const0_operand\"       \" C,C ,C\")))]\n+\t  (match_operand:DI 2 \"const0_operand\")))]\n   \"TARGET_SSE2\"\n   \"@\n    * return HAVE_AS_IX86_INTERUNIT_MOVQ ? \\\"%vmovq\\t{%1, %0|%0, %1}\\\" : \\\"%vmovd\\t{%1, %0|%0, %1}\\\";\n@@ -19824,7 +19824,7 @@\n \t(vec_merge:VI8_AVX_AVX512F\n \t  (vec_duplicate:VI8_AVX_AVX512F\n \t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"r,vm\"))\n-\t  (match_operand:VI8_AVX_AVX512F 1 \"const0_operand\" \"C,C\")\n+\t  (match_operand:VI8_AVX_AVX512F 1 \"const0_operand\")\n \t  (const_int 1)))]\n   \"TARGET_AVX\"\n   \"vmovq\\t{%2, %x0|%x0, %2}\"\n@@ -20025,7 +20025,7 @@\n \t(unspec:SI\n \t  [(lt:VF_128_256\n \t     (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n-\t     (match_operand:<sseintvecmode> 2 \"const0_operand\" \"C\"))]\n+\t     (match_operand:<sseintvecmode> 2 \"const0_operand\"))]\n \t  UNSPEC_MOVMSK))]\n   \"TARGET_SSE\"\n   \"#\"\n@@ -20043,7 +20043,7 @@\n \t  (unspec:SI\n \t    [(lt:VF_128_256\n \t       (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n-\t       (match_operand:<sseintvecmode> 2 \"const0_operand\" \"C\"))]\n+\t       (match_operand:<sseintvecmode> 2 \"const0_operand\"))]\n \t    UNSPEC_MOVMSK)))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"#\"\n@@ -20061,7 +20061,7 @@\n \t  [(subreg:VF_128_256\n \t     (ashiftrt:<sseintvecmode>\n \t       (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n-\t       (match_operand:QI 2 \"const_int_operand\" \"n\")) 0)]\n+\t       (match_operand:QI 2 \"const_int_operand\")) 0)]\n \t  UNSPEC_MOVMSK))]\n   \"TARGET_SSE\"\n   \"#\"\n@@ -20080,7 +20080,7 @@\n \t    [(subreg:VF_128_256\n \t       (ashiftrt:<sseintvecmode>\n \t\t (match_operand:<sseintvecmode> 1 \"register_operand\" \"x\")\n-\t       (match_operand:QI 2 \"const_int_operand\" \"n\")) 0)]\n+\t       (match_operand:QI 2 \"const_int_operand\")) 0)]\n \t    UNSPEC_MOVMSK)))]\n   \"TARGET_64BIT && TARGET_SSE\"\n   \"#\"\n@@ -20221,7 +20221,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(unspec:SI\n \t  [(lt:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\" \"x\")\n-\t\t\t(match_operand:VI1_AVX2 2 \"const0_operand\" \"C\"))]\n+\t\t\t(match_operand:VI1_AVX2 2 \"const0_operand\"))]\n \t  UNSPEC_MOVMSK))]\n   \"TARGET_SSE2\"\n   \"#\"\n@@ -20243,7 +20243,7 @@\n \t(zero_extend:DI\n \t  (unspec:SI\n \t    [(lt:VI1_AVX2 (match_operand:VI1_AVX2 1 \"register_operand\" \"x\")\n-\t\t\t  (match_operand:VI1_AVX2 2 \"const0_operand\" \"C\"))]\n+\t\t\t  (match_operand:VI1_AVX2 2 \"const0_operand\"))]\n \t    UNSPEC_MOVMSK)))]\n   \"TARGET_64BIT && TARGET_SSE2\"\n   \"#\"\n@@ -20265,7 +20265,7 @@\n \t(sign_extend:DI\n \t  (unspec:SI\n \t    [(lt:V16QI (match_operand:V16QI 1 \"register_operand\" \"x\")\n-\t\t       (match_operand:V16QI 2 \"const0_operand\" \"C\"))]\n+\t\t       (match_operand:V16QI 2 \"const0_operand\"))]\n \t    UNSPEC_MOVMSK)))]\n   \"TARGET_64BIT && TARGET_SSE2\"\n   \"#\"\n@@ -21064,7 +21064,7 @@\n \t  (unspec:VI1_AVX512\n \t    [(match_operand:VI1_AVX512 1 \"register_operand\" \"v\")\n \t     (match_operand:VI1_AVX512 2 \"nonimmediate_operand\" \"vm\")\n-\t     (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n\")]\n+\t     (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n \t    UNSPEC_PALIGNR)\n \t(match_operand:VI1_AVX512 4 \"nonimm_or_0_operand\" \"0C\")\n \t(match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n@@ -21085,7 +21085,7 @@\n \t(unspec:SSESCALARMODE\n \t  [(match_operand:SSESCALARMODE 1 \"register_operand\" \"0,<v_Yw>\")\n \t   (match_operand:SSESCALARMODE 2 \"vector_operand\" \"xBm,<v_Yw>m\")\n-\t   (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n,n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n \t  UNSPEC_PALIGNR))]\n   \"TARGET_SSSE3\"\n {\n@@ -21114,7 +21114,7 @@\n   [(set (match_operand:DI 0 \"register_operand\" \"=y,x,Yv\")\n \t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0,0,Yv\")\n \t\t    (match_operand:DI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n-\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\" \"n,n,n\")]\n+\t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n \t\t   UNSPEC_PALIGNR))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n {\n@@ -21401,7 +21401,7 @@\n \t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (lt:VF_128_256\n \t     (match_operand:<sseintvecmode> 3 \"register_operand\" \"Yz,Yz,x\")\n-\t     (match_operand:<sseintvecmode> 4 \"const0_operand\" \"C,C,C\"))]\n+\t     (match_operand:<sseintvecmode> 4 \"const0_operand\"))]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n@@ -21433,7 +21433,7 @@\n \t   (subreg:<ssebytemode>\n \t     (lt:VI48_AVX\n \t       (match_operand:VI48_AVX 3 \"register_operand\" \"Yz,Yz,x\")\n-\t       (match_operand:VI48_AVX 4 \"const0_operand\" \"C,C,C\")) 0)]\n+\t       (match_operand:VI48_AVX 4 \"const0_operand\")) 0)]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n@@ -21488,7 +21488,7 @@\n \t(unspec:VF_128_256\n \t  [(match_operand:VF_128_256 1 \"vector_operand\" \"%0,0,x\")\n \t   (match_operand:VF_128_256 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_DP))]\n   \"TARGET_SSE4_1\"\n   \"@\n@@ -21526,7 +21526,7 @@\n \t(unspec:VI1_AVX2\n \t  [(match_operand:VI1_AVX2 1 \"register_operand\" \"0,0,x\")\n \t   (match_operand:VI1_AVX2 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_MPSADBW))]\n   \"TARGET_SSE4_1\"\n   \"@\n@@ -21615,7 +21615,7 @@\n \t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,0,x\")\n \t   (match_operand:VI1_AVX2 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t   (lt:VI1_AVX2 (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,Yz,x\")\n-\t\t\t(match_operand:VI1_AVX2 4 \"const0_operand\" \"C,C,C\"))]\n+\t\t\t(match_operand:VI1_AVX2 4 \"const0_operand\"))]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n@@ -21659,7 +21659,7 @@\n \t(vec_merge:V8_128\n \t  (match_operand:V8_128 2 \"vector_operand\" \"YrBm,*xBm,xm\")\n \t  (match_operand:V8_128 1 \"register_operand\" \"0,0,x\")\n-\t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")))]\n+\t  (match_operand:SI 3 \"const_0_to_255_operand\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n    pblendw\\t{%3, %2, %0|%0, %2, %3}\n@@ -21731,7 +21731,7 @@\n \t(vec_merge:V16_256\n \t  (match_operand:V16_256 2 \"nonimmediate_operand\" \"xm\")\n \t  (match_operand:V16_256 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 3 \"avx2_pblendw_operand\" \"n\")))]\n+\t  (match_operand:SI 3 \"avx2_pblendw_operand\")))]\n   \"TARGET_AVX2\"\n {\n   operands[3] = GEN_INT (INTVAL (operands[3]) & 0xff);\n@@ -21748,7 +21748,7 @@\n \t(vec_merge:VI4_AVX2\n \t  (match_operand:VI4_AVX2 2 \"nonimmediate_operand\" \"xm\")\n \t  (match_operand:VI4_AVX2 1 \"register_operand\" \"x\")\n-\t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")))]\n+\t  (match_operand:SI 3 \"const_0_to_255_operand\")))]\n   \"TARGET_AVX2\"\n   \"vpblendd\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n   [(set_attr \"type\" \"ssemov\")\n@@ -21785,9 +21785,9 @@\n \t(vec_select:V32QI\n \t  (vec_concat:V64QI\n \t    (match_operand:V32QI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V32QI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V32QI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21804,10 +21804,10 @@\n \t    (subreg:V32QI\n \t      (vec_concat:VI248_256\n \t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n-\t    (match_operand:V32QI 3 \"const0_operand\" \"C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V32QI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21839,9 +21839,9 @@\n \t(vec_select:V64QI\n \t  (vec_concat:V128QI\n \t    (match_operand:V64QI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V64QI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V64QI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX512BW\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21858,10 +21858,10 @@\n \t    (subreg:V64QI\n \t      (vec_concat:VI248_512\n \t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n-\t    (match_operand:V64QI 3 \"const0_operand\" \"C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V64QI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX512BW\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21931,9 +21931,9 @@\n \t(vec_select:V16QI\n \t  (vec_concat:V32QI\n \t    (match_operand:V16QI 1 \"vector_operand\" \"YrBm,*xBm,Ywm\")\n-\t    (match_operand:V16QI 2 \"const0_operand\" \"C,C,C\"))\n+\t    (match_operand:V16QI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -21964,10 +21964,10 @@\n \t    (subreg:V16QI\n \t      (vec_concat:VI248_128\n \t\t(match_operand:<ssehalfvecmode> 1 \"vector_operand\" \"YrBm,*xBm,Ywm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C,C,C\")) 0)\n-\t    (match_operand:V16QI 3 \"const0_operand\" \"C,C,C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V16QI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22170,9 +22170,9 @@\n \t(vec_select:V32HI\n \t  (vec_concat:V64HI\n \t    (match_operand:V32HI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V32HI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V32HI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX512F\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22189,10 +22189,10 @@\n \t    (subreg:V32HI\n \t      (vec_concat:VI148_512\n \t        (match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n-\t    (match_operand:V32HI 3 \"const0_operand\" \"C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V32HI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX512F\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22224,9 +22224,9 @@\n \t(vec_select:V16HI\n \t  (vec_concat:V32HI\n \t    (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V16HI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V16HI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22243,10 +22243,10 @@\n \t    (subreg:V16HI\n \t      (vec_concat:VI148_256\n \t\t(match_operand:<ssehalfvecmode> 1 \"nonimmediate_operand\" \"vm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C\")) 0)\n-\t    (match_operand:V16HI 3 \"const0_operand\" \"C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V16HI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22322,9 +22322,9 @@\n \t(vec_select:V8HI\n \t  (vec_concat:V16HI\n \t    (match_operand:V8HI 1 \"vector_operand\" \"YrBm,*xBm,vm\")\n-\t    (match_operand:V8HI 2 \"const0_operand\" \"C,C,C\"))\n+\t    (match_operand:V8HI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22353,10 +22353,10 @@\n \t    (subreg:V8HI\n \t      (vec_concat:VI148_128\n \t\t(match_operand:<ssehalfvecmode> 1 \"vector_operand\" \"YrBm,*xBm,vm\")\n-\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\" \"C,C,C\")) 0)\n-\t    (match_operand:V8HI 3 \"const0_operand\" \"C,C,C\"))\n+\t\t(match_operand:<ssehalfvecmode> 2 \"const0_operand\")) 0)\n+\t    (match_operand:V8HI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22714,9 +22714,9 @@\n \t(vec_select:V16SI\n \t  (vec_concat:V32SI\n \t    (match_operand:V16SI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V16SI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V16SI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX512F\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22732,10 +22732,10 @@\n \t  (vec_concat:V32SI\n \t    (vec_concat:V16SI\n \t      (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")\n-\t      (match_operand:V8SI 2 \"const0_operand\" \"C\"))\n-\t    (match_operand:V16SI 3 \"const0_operand\" \"C\"))\n+\t      (match_operand:V8SI 2 \"const0_operand\"))\n+\t    (match_operand:V16SI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX512F\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22766,9 +22766,9 @@\n \t(vec_select:V8SI\n \t  (vec_concat:V16SI\n \t    (match_operand:V8SI 1 \"nonimmediate_operand\" \"vm\")\n-\t    (match_operand:V8SI 2 \"const0_operand\" \"C\"))\n+\t    (match_operand:V8SI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22784,10 +22784,10 @@\n \t  (vec_concat:V16SI\n \t    (vec_concat:V8SI\n \t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n-\t      (match_operand:V4SI 2 \"const0_operand\" \"C\"))\n-\t    (match_operand:V8SI 3 \"const0_operand\" \"C\"))\n+\t      (match_operand:V4SI 2 \"const0_operand\"))\n+\t    (match_operand:V8SI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_AVX2\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22850,9 +22850,9 @@\n \t(vec_select:V4SI\n \t  (vec_concat:V8SI\n \t    (match_operand:V4SI 1 \"vector_operand\" \"YrBm,*xBm,vm\")\n-\t    (match_operand:V4SI 2 \"const0_operand\" \"C,C,C\"))\n+\t    (match_operand:V4SI 2 \"const0_operand\"))\n \t  (match_parallel 3 \"pmovzx_parallel\"\n-\t    [(match_operand 4 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 4 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22878,10 +22878,10 @@\n \t  (vec_concat:V8SI\n \t    (vec_concat:V4SI\n \t      (match_operand:V2SI 1 \"vector_operand\" \"YrBm, *xBm, vm\")\n-\t      (match_operand:V2SI 2 \"const0_operand\" \"C,C,C\"))\n-\t    (match_operand:V4SI 3 \"const0_operand\" \"C,C,C\"))\n+\t      (match_operand:V2SI 2 \"const0_operand\"))\n+\t    (match_operand:V4SI 3 \"const0_operand\"))\n \t  (match_parallel 4 \"pmovzx_parallel\"\n-\t    [(match_operand 5 \"const_int_operand\" \"n,n,n\")])))]\n+\t    [(match_operand 5 \"const_int_operand\")])))]\n   \"TARGET_SSE4_1\"\n   \"#\"\n   \"&& reload_completed\"\n@@ -22985,7 +22985,7 @@\n   [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n \t  [(match_operand:VF_128_256 1 \"vector_operand\" \"YrBm,*xBm,xm\")\n-\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n,n\")]\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_SSE4_1\"\n   \"%vround<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -23078,7 +23078,7 @@\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n \t    [(match_operand:VF_128 2 \"nonimmediate_operand\" \"Yrm,*xm,xm,vm\")\n-\t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n+\t     (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t    UNSPEC_ROUND)\n \t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n@@ -23102,7 +23102,7 @@\n \t  (vec_duplicate:VFH_128\n \t    (unspec:<ssescalarmode>\n \t      [(match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"Yrm,*xm,xm,vm\")\n-\t       (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n,n\")]\n+\t       (match_operand:SI 3 \"const_0_to_15_operand\")]\n \t      UNSPEC_ROUND))\n \t  (match_operand:VFH_128 1 \"register_operand\" \"0,0,x,v\")\n \t  (const_int 1)))]\n@@ -23215,7 +23215,7 @@\n \t   (match_operand:SI 3 \"register_operand\" \"a,a\")\n \t   (match_operand:V16QI 4 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 5 \"register_operand\" \"d,d\")\n-\t   (match_operand:SI 6 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 6 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPESTR))\n    (set (match_operand:V16QI 1 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n@@ -23275,7 +23275,7 @@\n \t   (match_operand:SI 2 \"register_operand\" \"a,a\")\n \t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 4 \"register_operand\" \"d,d\")\n-\t   (match_operand:SI 5 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 5 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPESTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n@@ -23303,7 +23303,7 @@\n \t   (match_operand:SI 2 \"register_operand\" \"a,a\")\n \t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:SI 4 \"register_operand\" \"d,d\")\n-\t   (match_operand:SI 5 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 5 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPESTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n@@ -23331,7 +23331,7 @@\n \t   (match_operand:SI 3 \"register_operand\" \"a,a,a,a\")\n \t   (match_operand:V16QI 4 \"nonimmediate_operand\" \"x,m,x,m\")\n \t   (match_operand:SI 5 \"register_operand\" \"d,d,d,d\")\n-\t   (match_operand:SI 6 \"const_0_to_255_operand\" \"n,n,n,n\")]\n+\t   (match_operand:SI 6 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPESTR))\n    (clobber (match_scratch:V16QI 0 \"=Yz,Yz,X,X\"))\n    (clobber (match_scratch:SI    1 \"= X, X,c,c\"))]\n@@ -23355,7 +23355,7 @@\n \t(unspec:SI\n \t  [(match_operand:V16QI 2 \"register_operand\" \"x,x\")\n \t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m\")\n-\t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPISTR))\n    (set (match_operand:V16QI 1 \"register_operand\" \"=Yz,Yz\")\n \t(unspec:V16QI\n@@ -23406,7 +23406,7 @@\n \t(unspec:SI\n \t  [(match_operand:V16QI 1 \"register_operand\" \"x,x\")\n \t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,m\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPISTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n@@ -23430,7 +23430,7 @@\n \t(unspec:V16QI\n \t  [(match_operand:V16QI 1 \"register_operand\" \"x,x\")\n \t   (match_operand:V16QI 2 \"nonimmediate_operand\" \"x,m\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPISTR))\n    (set (reg:CC FLAGS_REG)\n \t(unspec:CC\n@@ -23454,7 +23454,7 @@\n \t(unspec:CC\n \t  [(match_operand:V16QI 2 \"register_operand\" \"x,x,x,x\")\n \t   (match_operand:V16QI 3 \"nonimmediate_operand\" \"x,m,x,m\")\n-\t   (match_operand:SI 4 \"const_0_to_255_operand\" \"n,n,n,n\")]\n+\t   (match_operand:SI 4 \"const_0_to_255_operand\")]\n \t  UNSPEC_PCMPISTR))\n    (clobber (match_scratch:V16QI 0 \"=Yz,Yz,X,X\"))\n    (clobber (match_scratch:SI    1 \"= X, X,c,c\"))]\n@@ -23501,9 +23501,9 @@\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t    (match_operand:SI 3 \"const1248_operand\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_2_to_3_operand\" \"n\")]\n+      (match_operand:SI 4 \"const_2_to_3_operand\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -23548,9 +23548,9 @@\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t    (match_operand:SI 3 \"const1248_operand\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const_2_to_3_operand\" \"n\")]\n+      (match_operand:SI 4 \"const_2_to_3_operand\")]\n      UNSPEC_GATHER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -23595,9 +23595,9 @@\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI48_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t    (match_operand:SI 3 \"const1248_operand\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const2367_operand\" \"n\")]\n+      (match_operand:SI 4 \"const2367_operand\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -23644,9 +23644,9 @@\n \t[(unspec:P\n \t   [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t    (match_operand:VI4_256_8_512 1 \"register_operand\" \"v\")\n-\t    (match_operand:SI 3 \"const1248_operand\" \"n\")]\n+\t    (match_operand:SI 3 \"const1248_operand\")]\n \t   UNSPEC_VSIBADDR)])\n-      (match_operand:SI 4 \"const2367_operand\" \"n\")]\n+      (match_operand:SI 4 \"const2367_operand\")]\n      UNSPEC_SCATTER_PREFETCH)]\n   \"TARGET_AVX512PF\"\n {\n@@ -24184,7 +24184,7 @@\n   [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n \t(rotate:VI_128\n \t (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm\")\n-\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n+\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\")))]\n   \"TARGET_XOP\"\n   \"vprot<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"type\" \"sseishft\")\n@@ -24195,7 +24195,7 @@\n   [(set (match_operand:VI_128 0 \"register_operand\" \"=x\")\n \t(rotatert:VI_128\n \t (match_operand:VI_128 1 \"nonimmediate_operand\" \"xm\")\n-\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\" \"n\")))]\n+\t (match_operand:SI 2 \"const_0_to_<sserotatemax>_operand\")))]\n   \"TARGET_XOP\"\n {\n   operands[3]\n@@ -24802,7 +24802,7 @@\n \t(unspec:VI_128\n \t  [(match_operand:VI_128 1 \"register_operand\" \"x\")\n \t   (match_operand:VI_128 2 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 3 \"const_int_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_int_operand\")]\n \t  UNSPEC_XOP_TRUEFALSE))]\n   \"TARGET_XOP\"\n {\n@@ -24822,7 +24822,7 @@\n \t  [(match_operand:VF_128_256 1 \"register_operand\" \"x,x\")\n \t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"x,m\")\n \t   (match_operand:<sseintvecmode> 3 \"nonimmediate_operand\" \"xm,x\")\n-\t   (match_operand:SI 4 \"const_0_to_3_operand\" \"n,n\")]\n+\t   (match_operand:SI 4 \"const_0_to_3_operand\")]\n \t  UNSPEC_VPERMIL2))]\n   \"TARGET_XOP\"\n   \"vpermil2<ssemodesuffix>\\t{%4, %3, %2, %1, %0|%0, %1, %2, %3, %4}\"\n@@ -24910,7 +24910,7 @@\n (define_insn \"aeskeygenassist\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"vector_operand\" \"xBm\")\n-\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"n\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_AESKEYGENASSIST))]\n   \"TARGET_AES\"\n   \"%vaeskeygenassist\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -24924,7 +24924,7 @@\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n \t(unspec:V2DI [(match_operand:V2DI 1 \"register_operand\" \"0,x\")\n \t\t      (match_operand:V2DI 2 \"vector_operand\" \"xBm,xm\")\n-\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t\t      (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_PCLMUL))]\n   \"TARGET_PCLMUL\"\n   \"@\n@@ -25376,7 +25376,7 @@\n \t(unspec:V4DI\n \t  [(match_operand:V4DI 1 \"register_operand\" \"x\")\n \t   (match_operand:V4DI 2 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_VPERMTI))]\n   \"TARGET_AVX2\"\n   \"vperm2i128\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -25920,7 +25920,7 @@\n \t(unspec:AVX256MODE2P\n \t  [(match_operand:AVX256MODE2P 1 \"register_operand\" \"x\")\n \t   (match_operand:AVX256MODE2P 2 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_VPERMIL2F128))]\n   \"TARGET_AVX\"\n   \"vperm2<i128>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n@@ -25960,7 +25960,7 @@\n       (vec_select:V_128\n \t(match_operand:V_128 1 \"register_operand\" \"0,Yw\")\n \t(match_parallel 2 \"palignr_operand\"\n-\t  [(match_operand 3 \"const_int_operand\" \"n,n\")])))]\n+\t  [(match_operand 3 \"const_int_operand\")])))]\n   \"TARGET_SSSE3\"\n {\n   operands[2] = (GEN_INT (INTVAL (operands[3])\n@@ -26630,7 +26630,7 @@\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(vec_concat:V8HI\n \t  (unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t\t(match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t\t(match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t       UNSPEC_VCVTPS2PH)\n \t  (match_operand:V4HI 3 \"const0_operand\")))]\n   \"(TARGET_F16C || TARGET_AVX512VL) && <mask_avx512vl_condition>\"\n@@ -26642,7 +26642,7 @@\n (define_insn \"*vcvtps2ph_store<merge_mask_name>\"\n   [(set (match_operand:V4HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V4HI [(match_operand:V4SF 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C || TARGET_AVX512VL\"\n   \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n@@ -26653,7 +26653,7 @@\n (define_insn \"vcvtps2ph256<mask_name>\"\n   [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n \t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C || TARGET_AVX512VL\"\n   \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -26665,7 +26665,7 @@\n (define_insn \"*vcvtps2ph256<merge_mask_name>\"\n   [(set (match_operand:V8HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V8HI [(match_operand:V8SF 1 \"register_operand\" \"v\")\n-\t\t      (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t\t      (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t\t     UNSPEC_VCVTPS2PH))]\n   \"TARGET_F16C || TARGET_AVX512VL\"\n   \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n@@ -26678,7 +26678,7 @@\n   [(set (match_operand:V16HI 0 \"register_operand\" \"=v\")\n \t(unspec:V16HI\n \t  [(match_operand:V16SF 1 \"register_operand\" \"v\")\n-\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_VCVTPS2PH))]\n   \"TARGET_AVX512F\"\n   \"vcvtps2ph\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n@@ -26690,7 +26690,7 @@\n   [(set (match_operand:V16HI 0 \"memory_operand\" \"=m\")\n \t(unspec:V16HI\n \t  [(match_operand:V16SF 1 \"register_operand\" \"v\")\n-\t   (match_operand:SI 2 \"const_0_to_255_operand\" \"N\")]\n+\t   (match_operand:SI 2 \"const_0_to_255_operand\")]\n \t  UNSPEC_VCVTPS2PH))]\n   \"TARGET_AVX512F\"\n   \"vcvtps2ph\\t{%2, %1, %0<merge_mask_operand3>|%0<merge_mask_operand3>, %1, %2}\"\n@@ -26748,7 +26748,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 4 \"register_operand\" \"x\")\n-\t\t (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 6 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])\n \t   (mem:BLK (scratch))\n \t   (match_operand:VEC_GATHER_MODE 5 \"register_operand\" \"1\")]\n@@ -26768,7 +26768,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"x\")\n-\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 5 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])\n \t   (mem:BLK (scratch))\n \t   (match_operand:VEC_GATHER_MODE 4 \"register_operand\" \"1\")]\n@@ -26809,7 +26809,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 4 \"register_operand\" \"x\")\n-\t\t (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 6 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])\n \t   (mem:BLK (scratch))\n \t   (match_operand:<VEC_GATHER_SRCDI> 5 \"register_operand\" \"1\")]\n@@ -26829,7 +26829,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"x\")\n-\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 5 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])\n \t   (mem:BLK (scratch))\n \t   (match_operand:<VEC_GATHER_SRCDI> 4 \"register_operand\" \"1\")]\n@@ -26854,7 +26854,7 @@\n \t       [(unspec:P\n \t\t  [(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t   (match_operand:<VEC_GATHER_IDXDI> 4 \"register_operand\" \"x\")\n-\t\t   (match_operand:SI 6 \"const1248_operand\" \"n\")]\n+\t\t   (match_operand:SI 6 \"const1248_operand\")]\n \t\t  UNSPEC_VSIBADDR)])\n \t     (mem:BLK (scratch))\n \t     (match_operand:<VEC_GATHER_SRCDI> 5 \"register_operand\" \"1\")]\n@@ -26877,7 +26877,7 @@\n \t       [(unspec:P\n \t\t  [(match_operand:P 2 \"vsib_address_operand\" \"Tv\")\n \t\t   (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"x\")\n-\t\t   (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\t   (match_operand:SI 5 \"const1248_operand\")]\n \t\t  UNSPEC_VSIBADDR)])\n \t     (mem:BLK (scratch))\n \t     (match_operand:<VEC_GATHER_SRCDI> 4 \"register_operand\" \"1\")]\n@@ -26919,7 +26919,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 4 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 3 \"register_operand\" \"v\")\n-\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 5 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:<avx512fmaskmode> 2 \"=&Yk\"))]\n@@ -26940,7 +26940,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n-\t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 4 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:<avx512fmaskmode> 1 \"=&Yk\"))]\n@@ -26981,7 +26981,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 4 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 3 \"register_operand\" \"v\")\n-\t\t (match_operand:SI 5 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 5 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:QI 2 \"=&Yk\"))]\n@@ -27002,7 +27002,7 @@\n \t     [(unspec:P\n \t\t[(match_operand:P 3 \"vsib_address_operand\" \"Tv\")\n \t\t (match_operand:<VEC_GATHER_IDXDI> 2 \"register_operand\" \"v\")\n-\t\t (match_operand:SI 4 \"const1248_operand\" \"n\")]\n+\t\t (match_operand:SI 4 \"const1248_operand\")]\n \t\tUNSPEC_VSIBADDR)])]\n \t  UNSPEC_GATHER))\n    (clobber (match_scratch:QI 1 \"=&Yk\"))]\n@@ -27047,7 +27047,7 @@\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:<VEC_GATHER_IDXSI> 2 \"register_operand\" \"v\")\n-\t      (match_operand:SI 4 \"const1248_operand\" \"n\")\n+\t      (match_operand:SI 4 \"const1248_operand\")\n \t      (match_operand:<avx512fmaskmode> 6 \"register_operand\" \"1\")]\n \t     UNSPEC_VSIBADDR)])\n \t(unspec:VI48F\n@@ -27087,7 +27087,7 @@\n \t  [(unspec:P\n \t     [(match_operand:P 0 \"vsib_address_operand\" \"Tv\")\n \t      (match_operand:<VEC_GATHER_IDXDI> 2 \"register_operand\" \"v\")\n-\t      (match_operand:SI 4 \"const1248_operand\" \"n\")\n+\t      (match_operand:SI 4 \"const1248_operand\")\n \t      (match_operand:QI 6 \"register_operand\" \"1\")]\n \t     UNSPEC_VSIBADDR)])\n \t(unspec:VI48F\n@@ -27308,7 +27308,7 @@\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=k\")\n           (unspec:<avx512fmaskmode>\n             [(match_operand:VFH_AVX512VL 1 \"vector_operand\" \"vm\")\n-             (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n+             (match_operand 2 \"const_0_to_255_operand\")]\n              UNSPEC_FPCLASS))]\n    \"TARGET_AVX512DQ || VALID_AVX512FP16_REG_MODE(<MODE>mode)\"\n    \"vfpclass<ssemodesuffix><vecmemsuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\";\n@@ -27322,7 +27322,7 @@\n \t(and:<avx512fmaskmode>\n \t  (unspec:<avx512fmaskmode>\n \t    [(match_operand:VFH_128 1 \"nonimmediate_operand\" \"vm\")\n-             (match_operand 2 \"const_0_to_255_operand\" \"n\")]\n+             (match_operand 2 \"const_0_to_255_operand\")]\n \t    UNSPEC_FPCLASS)\n \t  (const_int 1)))]\n    \"TARGET_AVX512DQ || VALID_AVX512FP16_REG_MODE(<MODE>mode)\"\n@@ -27446,7 +27446,7 @@\n \t(unspec:V4SI\n \t  [(match_operand:V4SI 1 \"register_operand\" \"0\")\n \t   (match_operand:V4SI 2 \"vector_operand\" \"xBm\")\n-\t   (match_operand:SI 3 \"const_0_to_3_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_3_operand\")]\n \t  UNSPEC_SHA1RNDS4))]\n   \"TARGET_SHA\"\n   \"sha1rnds4\\t{%3, %2, %0|%0, %2, %3}\"\n@@ -27673,7 +27673,7 @@\n \t    [(match_operand:V16SF 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n-\t  (match_operand:V16SF 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V16SF 4 \"const0_operand\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fmaddps\\t{%3, %g2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %g2, %3}\"\n@@ -27714,7 +27714,7 @@\n \t    [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FMADD)\n-\t  (match_operand:V4SF 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V4SF 4 \"const0_operand\")\n \t  (match_operand:QI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fmaddss\\t{%3, %x2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %x2, %3}\"\n@@ -27755,7 +27755,7 @@\n \t    [(match_operand:V16SF 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n-\t  (match_operand:V16SF 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V16SF 4 \"const0_operand\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fnmaddps\\t{%3, %g2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %g2, %3}\"\n@@ -27796,7 +27796,7 @@\n \t    [(match_operand:V4SF 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SF 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SF 3 \"memory_operand\" \"m\")] UNSPEC_VP4FNMADD)\n-\t  (match_operand:V4SF 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V4SF 4 \"const0_operand\")\n \t  (match_operand:QI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124FMAPS\"\n   \"v4fnmaddss\\t{%3, %x2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %x2, %3}\"\n@@ -27837,7 +27837,7 @@\n \t    [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSD)\n-\t  (match_operand:V16SI 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V16SI 4 \"const0_operand\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124VNNIW\"\n   \"vp4dpwssd\\t{%3, %g2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %g2, %3}\"\n@@ -27878,7 +27878,7 @@\n \t    [(match_operand:V16SI 1 \"register_operand\" \"0\")\n \t     (match_operand:V64SI 2 \"register_operand\" \"v\")\n \t     (match_operand:V4SI 3 \"memory_operand\" \"m\")] UNSPEC_VP4DPWSSDS)\n-\t  (match_operand:V16SI 4 \"const0_operand\" \"C\")\n+\t  (match_operand:V16SI 4 \"const0_operand\")\n \t  (match_operand:HI 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX5124VNNIW\"\n   \"vp4dpwssds\\t{%3, %g2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %g2, %3}\"\n@@ -27954,7 +27954,7 @@\n \t(unspec:VI1_AVX512F\n \t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n \t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n-\t   (match_operand 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_GF2P8AFFINEINV))]\n   \"TARGET_GFNI\"\n   \"@\n@@ -27971,7 +27971,7 @@\n \t(unspec:VI1_AVX512F\n \t  [(match_operand:VI1_AVX512F 1 \"register_operand\" \"0,v\")\n \t   (match_operand:VI1_AVX512F 2 \"vector_operand\" \"xBm,vm\")\n-\t   (match_operand 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t   (match_operand 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_GF2P8AFFINE))]\n   \"TARGET_GFNI\"\n   \"@\n@@ -28004,7 +28004,7 @@\n \t(unspec:VI248_AVX512VL\n \t  [(match_operand:VI248_AVX512VL 1 \"register_operand\" \"v\")\n \t   (match_operand:VI248_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_VPSHRD))]\n   \"TARGET_AVX512VBMI2\"\n   \"vpshrd<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3 }\"\n@@ -28015,7 +28015,7 @@\n \t(unspec:VI248_AVX512VL\n \t  [(match_operand:VI248_AVX512VL 1 \"register_operand\" \"v\")\n \t   (match_operand:VI248_AVX512VL 2 \"nonimmediate_operand\" \"vm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t  UNSPEC_VPSHLD))]\n   \"TARGET_AVX512VBMI2\"\n   \"vpshld<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3 }\"\n@@ -28071,7 +28071,7 @@\n \t     (match_operand:VI248_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI248_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPSHRDV)\n-\t  (match_operand:VI248_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI248_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VBMI2\"\n   \"vpshrdv<ssemodesuffix>\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28128,7 +28128,7 @@\n \t     (match_operand:VI248_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI248_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPSHLDV)\n-\t  (match_operand:VI248_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI248_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VBMI2\"\n   \"vpshldv<ssemodesuffix>\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28224,7 +28224,7 @@\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")\n \t    ] UNSPEC_VPMADDUBSWACCD)\n-\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpbusd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28292,7 +28292,7 @@\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPMADDUBSWACCSSD)\n-\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpbusds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28360,7 +28360,7 @@\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPMADDWDACCD)\n-\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpwssd\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28428,7 +28428,7 @@\n \t     (match_operand:VI4_AVX512VL 2 \"register_operand\" \"v\")\n \t     (match_operand:VI4_AVX512VL 3 \"nonimmediate_operand\" \"vm\")]\n \t    UNSPEC_VPMADDWDACCSSD)\n-\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\" \"C\")\n+\t  (match_operand:VI4_AVX512VL 4 \"const0_operand\")\n \t  (match_operand:<avx512fmaskmode> 5 \"register_operand\" \"Yk\")))]\n   \"TARGET_AVX512VNNI\"\n   \"vpdpwssds\\t{%3, %2, %0%{%5%}%{z%}|%0%{%5%}%{z%}, %2, %3 }\"\n@@ -28478,7 +28478,7 @@\n   [(set (match_operand:VI8_FVL 0 \"register_operand\" \"=v\")\n \t(unspec:VI8_FVL [(match_operand:VI8_FVL 1 \"register_operand\" \"v\")\n \t\t\t (match_operand:VI8_FVL 2 \"vector_operand\" \"vm\")\n-\t\t\t (match_operand:SI 3 \"const_0_to_255_operand\" \"n\")]\n+\t\t\t (match_operand:SI 3 \"const_0_to_255_operand\")]\n \t\t\tUNSPEC_VPCLMULQDQ))]\n   \"TARGET_VPCLMULQDQ\"\n   \"vpclmulqdq\\t{%3, %2, %1, %0|%0, %1, %2, %3}\""}, {"sha": "0b7588237fe2d136f2c6fa67af1b16a88bc7f186", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -137,7 +137,7 @@\n  [(set (match_dup 0)\n        (vec_merge:SUBST_V\n \t (match_dup 1)\n-\t (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n+\t (match_operand:SUBST_V 2 \"const0_operand\")\n \t (match_operand:<avx512fmaskmode> 3 \"register_operand\" \"Yk\")))\n ])\n \n@@ -155,7 +155,7 @@\n \t(vec_merge:SUBST_V\n \t  (vec_merge:SUBST_V\n \t    (match_dup 1)\n-\t    (match_operand:SUBST_V 3 \"const0_operand\" \"C\")\n+\t    (match_operand:SUBST_V 3 \"const0_operand\")\n \t    (match_operand:<avx512fmaskmode> 4 \"register_operand\" \"Yk\"))\n \t  (match_dup 2)\n \t  (const_int 1)))])\n@@ -171,7 +171,7 @@\n  [(set (match_dup 0)\n        (vec_merge:SUBST_CV\n \t (match_dup 1)\n-\t (match_operand:SUBST_CV 2 \"const0_operand\" \"C\")\n+\t (match_operand:SUBST_CV 2 \"const0_operand\")\n \t (unspec:<avx512fmaskmode>\n \t   [(match_operand:<avx512fmaskcmode> 3 \"register_operand\" \"Yk\")]\n \t   UNSPEC_COMPLEX_MASK)))\n@@ -372,7 +372,7 @@\n \t(vec_merge:SUBST_CV\n \t  (vec_merge:SUBST_CV\n \t    (match_dup 1)\n-\t    (match_operand:SUBST_CV 3 \"const0_operand\" \"C\")\n+\t    (match_operand:SUBST_CV 3 \"const0_operand\")\n \t    (unspec:<avx512fmaskmode>\n \t      [(match_operand:<avx512fmaskcmode> 4 \"register_operand\" \"Yk\")]\n \t      UNSPEC_COMPLEX_MASK))\n@@ -478,5 +478,5 @@\n   [(set (match_dup 0)\n         (vec_merge:SUBST_V\n \t  (match_dup 1)\n-\t  (match_operand:SUBST_V 2 \"const0_operand\" \"C\")\n+\t  (match_operand:SUBST_V 2 \"const0_operand\")\n \t  (match_operand:<avx512fmaskhalfmode> 3 \"register_operand\" \"Yk\")))])"}, {"sha": "92634d538cb89d394657147c55153a88035f1ae7", "filename": "gcc/config/i386/sync.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Fconfig%2Fi386%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsync.md?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -745,10 +745,10 @@\n \t    [(match_operand:SWI 0 \"memory_operand\" \"+m\")\n \t     (match_operand:SI 3 \"const_int_operand\")]\t\t;; model\n \t    UNSPECV_XCHG)\n-\t  (match_operand:SWI 2 \"const_int_operand\" \"i\")))\n+\t  (match_operand:SWI 2 \"const_int_operand\")))\n    (set (match_dup 0)\n \t(plus:SWI (match_dup 0)\n-\t\t  (match_operand:SWI 1 \"const_int_operand\" \"i\")))]\n+\t\t  (match_operand:SWI 1 \"const_int_operand\")))]\n   \"(unsigned HOST_WIDE_INT) INTVAL (operands[1])\n    == -(unsigned HOST_WIDE_INT) INTVAL (operands[2])\"\n {"}, {"sha": "aa5895bc0f9f3714c27683256b691aad3c8192a3", "filename": "gcc/testsuite/gcc.target/i386/pr105624.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105624.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3595231d9f5aec301422b152809b1322bdb525fe/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105624.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105624.c?ref=3595231d9f5aec301422b152809b1322bdb525fe", "patch": "@@ -1,5 +1,5 @@\n /* PR target/105624 */\n-/* { dg-do compile } */\n+/* { dg-do compile { target { ! ia32 } } } */\n /* { dg-options \"-O1 -march=k8\" } */\n \n union U {"}]}