{"sha": "6d5eb739f069e41a8789c15b199893acf06915a8", "node_id": "C_kwDOANBUbNoAKDZkNWViNzM5ZjA2OWU0MWE4Nzg5YzE1YjE5OTg5M2FjZjA2OTE1YTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-07-28T15:37:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-28T15:37:41Z"}, "message": "Merge #1416\n\n1416: unsafe: Add checks for union field accesses r=CohenArthur a=CohenArthur\n\nAddresses #1411 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "7755f2c23856c20a9ebd60c7a796d4cd3efed242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7755f2c23856c20a9ebd60c7a796d4cd3efed242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d5eb739f069e41a8789c15b199893acf06915a8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4q1FCRBK7hj4Ov3rIwAAww8IAAIHV1rRhJPG0ptpcsliXj2w\nQF2nkBK/DcxJvz2zbaT1UMWSoLOFKfHD5jp2mbQDEceachbVy8nYQcd3ONUDxlgL\nBWlfZvf6DRz+RPN2vv0bP5+xoUxB0nM/oSHnFfbXYYs6FvJhtUYEYCzPxyhuFuhE\nuqy/K3Qob8+Q+a/0Dcs7+lMTYj0TfW2fBE9n1en3DnJKnAgn7XU8tALiw2I+ipFc\nRGfb9WFbg9bzKD5ICY4sjc4BcXubniMCHTuO2RY1oQvqm8R6tShyK7CZd63AaRMy\ntlRUb6dIwzyA5gwqxac5BRb7Vs78/W9abyT1HFSYE993YVJs69wu11V02E6mICI=\n=TnCM\n-----END PGP SIGNATURE-----\n", "payload": "tree 7755f2c23856c20a9ebd60c7a796d4cd3efed242\nparent add0846629c918618a0a9196ba62ccb466d05beb\nparent f532ae5aa37c8555dd6a99d8502436509db7930f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1659022661 +0000\ncommitter GitHub <noreply@github.com> 1659022661 +0000\n\nMerge #1416\n\n1416: unsafe: Add checks for union field accesses r=CohenArthur a=CohenArthur\n\nAddresses #1411 \n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5eb739f069e41a8789c15b199893acf06915a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d5eb739f069e41a8789c15b199893acf06915a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d5eb739f069e41a8789c15b199893acf06915a8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "add0846629c918618a0a9196ba62ccb466d05beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/add0846629c918618a0a9196ba62ccb466d05beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/add0846629c918618a0a9196ba62ccb466d05beb"}, {"sha": "f532ae5aa37c8555dd6a99d8502436509db7930f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f532ae5aa37c8555dd6a99d8502436509db7930f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f532ae5aa37c8555dd6a99d8502436509db7930f"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "683a803c3b297025b6aa2241f6349ccc5c703648", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d5eb739f069e41a8789c15b199893acf06915a8/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d5eb739f069e41a8789c15b199893acf06915a8/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=6d5eb739f069e41a8789c15b199893acf06915a8", "patch": "@@ -332,10 +332,24 @@ UnsafeChecker::visit (MethodCallExpr &expr)\n void\n UnsafeChecker::visit (FieldAccessExpr &expr)\n {\n-  // FIXME: If the receiver is an union, we need to be in an unsafe context to\n-  // access it. Make sure to check.\n-\n   expr.get_receiver_expr ()->accept_vis (*this);\n+\n+  if (is_unsafe_context ())\n+    return;\n+\n+  TyTy::BaseType *receiver_ty;\n+  auto ok = context.lookup_type (\n+    expr.get_receiver_expr ()->get_mappings ().get_hirid (), &receiver_ty);\n+  rust_assert (ok);\n+\n+  if (receiver_ty->get_kind () == TyTy::TypeKind::ADT)\n+    {\n+      auto maybe_union = static_cast<TyTy::ADTType *> (receiver_ty);\n+      if (maybe_union->is_union ())\n+\trust_error_at (\n+\t  expr.get_locus (),\n+\t  \"access to union field requires unsafe function or block\");\n+    }\n }\n \n void"}, {"sha": "fb46c8ffde377d8a076bb16cce5ca5caaf4d421d", "filename": "gcc/testsuite/rust/compile/unsafe9.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d5eb739f069e41a8789c15b199893acf06915a8/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe9.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d5eb739f069e41a8789c15b199893acf06915a8/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe9.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe9.rs?ref=6d5eb739f069e41a8789c15b199893acf06915a8", "patch": "@@ -0,0 +1,10 @@\n+union U {\n+    a: i32,\n+    b: f32,\n+    c: u8,\n+}\n+\n+fn main() {\n+    let u = U { a: 14 };\n+    let _ = u.a; // { dg-error \"access to union\" }\n+}"}]}