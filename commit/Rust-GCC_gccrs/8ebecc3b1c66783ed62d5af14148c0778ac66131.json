{"sha": "8ebecc3b1c66783ed62d5af14148c0778ac66131", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGViZWNjM2IxYzY2NzgzZWQ2MmQ1YWYxNDE0OGMwNzc4YWM2NjEzMQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1999-09-28T08:15:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-09-28T08:15:38Z"}, "message": "builtins.c (stabilize_va_list): Stabilize array type va_list to a pointer type, not the base record type.\n\n        * builtins.c (stabilize_va_list): Stabilize array type va_list\n        to a pointer type, not the base record type.\n        (expand_builtin_va_copy): Dereference the pointers explicitly;\n        use the correct size for the copy.\n\n        * rs6000.c (rs6000_va_start): Dereference valist to get to the record.\n        (rs6000_va_arg): Likewise.\n\nFrom-SVN: r29690", "tree": {"sha": "a14d3c43fc5eb3c00ec2e264f337dbe3bd05f7e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a14d3c43fc5eb3c00ec2e264f337dbe3bd05f7e3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ebecc3b1c66783ed62d5af14148c0778ac66131", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebecc3b1c66783ed62d5af14148c0778ac66131", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ebecc3b1c66783ed62d5af14148c0778ac66131", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ebecc3b1c66783ed62d5af14148c0778ac66131/comments", "author": null, "committer": null, "parents": [{"sha": "5e49cb95ea7a100ec8b737938efbaf389be31309", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e49cb95ea7a100ec8b737938efbaf389be31309", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e49cb95ea7a100ec8b737938efbaf389be31309"}], "stats": {"total": 94, "additions": 71, "deletions": 23}, "files": [{"sha": "c1bbe79475293361b1ff58d62a6b742d7fe93b1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ebecc3b1c66783ed62d5af14148c0778ac66131", "patch": "@@ -1,3 +1,13 @@\n+Tue Sep 28 01:11:05 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* builtins.c (stabilize_va_list): Stabilize array type va_list\n+\tto a pointer type, not the base record type.\n+\t(expand_builtin_va_copy): Dereference the pointers explicitly;\n+\tuse the correct size for the copy.\n+\n+\t* rs6000.c (rs6000_va_start): Dereference valist to get to the record.\n+\t(rs6000_va_arg): Likewise.\n+\n Mon Sep 27 23:27:21 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* rtl.h (struct rtx_def): Move gc_mark to align mode field."}, {"sha": "36a6493d64526e3a9111ed2745ac1f4c2fcca0b7", "filename": "gcc/builtins.c", "status": "modified", "additions": 59, "deletions": 23, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=8ebecc3b1c66783ed62d5af14148c0778ac66131", "patch": "@@ -1826,40 +1826,64 @@ stabilize_va_list (valist, was_ptr)\n      tree valist;\n      int was_ptr;\n {\n-  int is_array = TREE_CODE (va_list_type_node) == ARRAY_TYPE;\n-\n-  if (was_ptr)\n+  if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)\n     {\n       /* If stdarg.h took the address of an array-type valist that was passed\n          as a parameter, we'll have taken the address of the parameter itself\n          rather than the array as we'd intended.  Undo this mistake.  */\n-      if (is_array\n-\t  && TREE_CODE (valist) == ADDR_EXPR\n-\t  && TREE_CODE (TREE_TYPE (TREE_OPERAND (valist, 0))) == POINTER_TYPE)\n+\n+      if (was_ptr)\n \t{\n+\t  STRIP_NOPS (valist);\n+\n+\t  /* Two cases: either &array, which decomposed to \n+\t        <ptr <array <record> valist>>\n+\t     or &ptr, which turned into\n+\t\t<ptr <ptr <record>>>\n+\t     In the first case we'll need to put the ADDR_EXPR back\n+\t     after frobbing the types as if &array[0].  */\n+\n+\t  if (TREE_CODE (valist) != ADDR_EXPR)\n+\t    abort ();\n \t  valist = TREE_OPERAND (valist, 0);\n-\t  if (TREE_SIDE_EFFECTS (valist))\n-\t    valist = save_expr (valist);\n+\t}\n+\n+      if (TYPE_MAIN_VARIANT (TREE_TYPE (valist))\n+\t  == TYPE_MAIN_VARIANT (va_list_type_node))\n+\t{\n+\t  tree pt = build_pointer_type (TREE_TYPE (va_list_type_node));\n+\t  valist = build1 (ADDR_EXPR, pt, valist);\n+\t  TREE_SIDE_EFFECTS (valist)\n+\t    = TREE_SIDE_EFFECTS (TREE_OPERAND (valist, 0));\n \t}\n       else\n \t{\n-\t  if (TREE_SIDE_EFFECTS (valist))\n-\t    valist = save_expr (valist);\n-\t  valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n+\t  if (! POINTER_TYPE_P (TREE_TYPE (valist))\n+\t      || (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (valist)))\n+\t\t  != TYPE_MAIN_VARIANT (TREE_TYPE (va_list_type_node))))\n+\t    abort ();\n \t}\n+\n+      if (TREE_SIDE_EFFECTS (valist))\n+\tvalist = save_expr (valist);\n     }\n-  else if (TREE_SIDE_EFFECTS (valist))\n+  else\n     {\n-      if (is_array)\n-\tvalist = save_expr (valist);\n-      else\n+      if (! was_ptr)\n \t{\n-          valist = build1 (ADDR_EXPR, build_pointer_type (va_list_type_node),\n-\t\t\t   valist);\n+\t  tree pt;\n+\n+\t  if (! TREE_SIDE_EFFECTS (valist))\n+\t    return valist;\n+\n+\t  pt = build_pointer_type (va_list_type_node);\n+          valist = fold (build1 (ADDR_EXPR, pt, valist));\n \t  TREE_SIDE_EFFECTS (valist) = 1;\n-\t  valist = save_expr (valist);\n-\t  valist = fold (build1 (INDIRECT_REF, va_list_type_node, valist));\n \t}\n+      if (TREE_SIDE_EFFECTS (valist))\n+        valist = save_expr (valist);\n+      valist = fold (build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (valist)),\n+\t\t\t     valist));\n     }\n \n   return valist;\n@@ -2095,10 +2119,22 @@ expand_builtin_va_copy (arglist)\n     }\n   else\n     {\n-      emit_block_move (expand_expr (dst, NULL_RTX, Pmode, EXPAND_NORMAL),\n-\t\t       expand_expr (src, NULL_RTX, Pmode, EXPAND_NORMAL),\n-\t\t       expand_expr (TYPE_SIZE (va_list_type_node), NULL_RTX,\n-\t\t\t\t    VOIDmode, EXPAND_NORMAL),\n+      rtx dstb, srcb, size;\n+\n+      /* Evaluate to pointers.  */\n+      dstb = expand_expr (dst, NULL_RTX, Pmode, EXPAND_NORMAL);\n+      srcb = expand_expr (src, NULL_RTX, Pmode, EXPAND_NORMAL);\n+      size = expand_expr (TYPE_SIZE_UNIT (va_list_type_node), NULL_RTX,\n+\t\t\t  VOIDmode, EXPAND_NORMAL);\n+\n+      /* \"Dereference\" to BLKmode memories.  */\n+      dstb = gen_rtx_MEM (BLKmode, dstb);\n+      MEM_ALIAS_SET (dstb) = get_alias_set (TREE_TYPE (TREE_TYPE (dst)));\n+      srcb = gen_rtx_MEM (BLKmode, srcb);\n+      MEM_ALIAS_SET (srcb) = get_alias_set (TREE_TYPE (TREE_TYPE (src)));\n+\n+      /* Copy.  */\n+      emit_block_move (dstb, srcb, size, \n \t\t       TYPE_ALIGN (va_list_type_node) / BITS_PER_UNIT);\n     }\n "}, {"sha": "a4324615869f85a614b6e9098eb2de53ec48064d", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ebecc3b1c66783ed62d5af14148c0778ac66131/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8ebecc3b1c66783ed62d5af14148c0778ac66131", "patch": "@@ -1833,6 +1833,7 @@ rs6000_va_start (stdarg_p, valist, nextarg)\n   f_ovf = TREE_CHAIN (f_fpr);\n   f_sav = TREE_CHAIN (f_ovf);\n \n+  valist = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (valist)), valist);\n   gpr = build (COMPONENT_REF, TREE_TYPE (f_gpr), valist, f_gpr);\n   fpr = build (COMPONENT_REF, TREE_TYPE (f_fpr), valist, f_fpr);\n   ovf = build (COMPONENT_REF, TREE_TYPE (f_ovf), valist, f_ovf);\n@@ -1893,6 +1894,7 @@ rs6000_va_arg (valist, type)\n   f_ovf = TREE_CHAIN (f_fpr);\n   f_sav = TREE_CHAIN (f_ovf);\n \n+  valist = build1 (INDIRECT_REF, TREE_TYPE (TREE_TYPE (valist)), valist);\n   gpr = build (COMPONENT_REF, TREE_TYPE (f_gpr), valist, f_gpr);\n   fpr = build (COMPONENT_REF, TREE_TYPE (f_fpr), valist, f_fpr);\n   ovf = build (COMPONENT_REF, TREE_TYPE (f_ovf), valist, f_ovf);"}]}