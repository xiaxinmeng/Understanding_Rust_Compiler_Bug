{"sha": "0cf0a7b8fcf00b653816e981b53ba25ac38607f1", "node_id": "C_kwDOANBUbNoAKDBjZjBhN2I4ZmNmMDBiNjUzODE2ZTk4MWI1M2JhMjVhYzM4NjA3ZjE", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-20T21:05:41Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-02-28T22:46:19Z"}, "message": "Fix formatting\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-pattern.h\n\t(class TupleStructItemsNoRange): Fix formatting.\n\t(class TupleStructItemsRange): Fix formatting.\n\t(class TuplePatternItemsMultiple): Fix formatting.\n\t(class TuplePatternItemsRanged): Fix formatting.\n\t(class SlicePattern): Fix formatting.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "dd4ef1fa03677196943eeb62e93ce0443ac3e4cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd4ef1fa03677196943eeb62e93ce0443ac3e4cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cf0a7b8fcf00b653816e981b53ba25ac38607f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf0a7b8fcf00b653816e981b53ba25ac38607f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cf0a7b8fcf00b653816e981b53ba25ac38607f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cf0a7b8fcf00b653816e981b53ba25ac38607f1/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a3b370a9f42846f7d82512719d4127fa3fca4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2a3b370a9f42846f7d82512719d4127fa3fca4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2a3b370a9f42846f7d82512719d4127fa3fca4b"}], "stats": {"total": 62, "additions": 30, "deletions": 32}, "files": [{"sha": "ead6cafc90326171df2d92e8e9f93b4d98632698", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 30, "deletions": 32, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cf0a7b8fcf00b653816e981b53ba25ac38607f1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cf0a7b8fcf00b653816e981b53ba25ac38607f1/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=0cf0a7b8fcf00b653816e981b53ba25ac38607f1", "patch": "@@ -670,7 +670,7 @@ class StructPatternFieldIdent : public StructPatternField\n struct StructPatternElements\n {\n private:\n-  std::vector<std::unique_ptr<StructPatternField> > fields;\n+  std::vector<std::unique_ptr<StructPatternField>> fields;\n \n public:\n   // Returns whether there are any struct pattern fields\n@@ -682,7 +682,7 @@ struct StructPatternElements\n \n   // Constructor for StructPatternElements with both (potentially)\n   StructPatternElements (\n-    std::vector<std::unique_ptr<StructPatternField> > fields)\n+    std::vector<std::unique_ptr<StructPatternField>> fields)\n     : fields (std::move (fields))\n   {}\n \n@@ -712,13 +712,12 @@ struct StructPatternElements\n   static StructPatternElements create_empty ()\n   {\n     return StructPatternElements (\n-      std::vector<std::unique_ptr<StructPatternField> > ());\n+      std::vector<std::unique_ptr<StructPatternField>> ());\n   }\n \n   std::string as_string () const;\n \n-  std::vector<std::unique_ptr<StructPatternField> > &\n-  get_struct_pattern_fields ()\n+  std::vector<std::unique_ptr<StructPatternField>> &get_struct_pattern_fields ()\n   {\n     return fields;\n   }\n@@ -803,10 +802,10 @@ class TupleStructItems\n // Class for non-ranged tuple struct pattern patterns\n class TupleStructItemsNoRange : public TupleStructItems\n {\n-  std::vector<std::unique_ptr<Pattern> > patterns;\n+  std::vector<std::unique_ptr<Pattern>> patterns;\n \n public:\n-  TupleStructItemsNoRange (std::vector<std::unique_ptr<Pattern> > patterns)\n+  TupleStructItemsNoRange (std::vector<std::unique_ptr<Pattern>> patterns)\n     : patterns (std::move (patterns))\n   {}\n \n@@ -837,8 +836,8 @@ class TupleStructItemsNoRange : public TupleStructItems\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<Pattern> > &get_patterns () { return patterns; }\n-  const std::vector<std::unique_ptr<Pattern> > &get_patterns () const\n+  std::vector<std::unique_ptr<Pattern>> &get_patterns () { return patterns; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_patterns () const\n   {\n     return patterns;\n   }\n@@ -857,12 +856,12 @@ class TupleStructItemsNoRange : public TupleStructItems\n // Class for ranged tuple struct pattern patterns\n class TupleStructItemsRange : public TupleStructItems\n {\n-  std::vector<std::unique_ptr<Pattern> > lower_patterns;\n-  std::vector<std::unique_ptr<Pattern> > upper_patterns;\n+  std::vector<std::unique_ptr<Pattern>> lower_patterns;\n+  std::vector<std::unique_ptr<Pattern>> upper_patterns;\n \n public:\n-  TupleStructItemsRange (std::vector<std::unique_ptr<Pattern> > lower_patterns,\n-\t\t\t std::vector<std::unique_ptr<Pattern> > upper_patterns)\n+  TupleStructItemsRange (std::vector<std::unique_ptr<Pattern>> lower_patterns,\n+\t\t\t std::vector<std::unique_ptr<Pattern>> upper_patterns)\n     : lower_patterns (std::move (lower_patterns)),\n       upper_patterns (std::move (upper_patterns))\n   {}\n@@ -901,21 +900,21 @@ class TupleStructItemsRange : public TupleStructItems\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n-  std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_lower_patterns ()\n   {\n     return lower_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_lower_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_lower_patterns () const\n   {\n     return lower_patterns;\n   }\n \n   // TODO: seems kinda dodgy. Think of better way.\n-  std::vector<std::unique_ptr<Pattern> > &get_upper_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_upper_patterns ()\n   {\n     return upper_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_upper_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_upper_patterns () const\n   {\n     return upper_patterns;\n   }\n@@ -1034,10 +1033,10 @@ class TuplePatternItems\n // Class representing TuplePattern patterns where there are multiple patterns\n class TuplePatternItemsMultiple : public TuplePatternItems\n {\n-  std::vector<std::unique_ptr<Pattern> > patterns;\n+  std::vector<std::unique_ptr<Pattern>> patterns;\n \n public:\n-  TuplePatternItemsMultiple (std::vector<std::unique_ptr<Pattern> > patterns)\n+  TuplePatternItemsMultiple (std::vector<std::unique_ptr<Pattern>> patterns)\n     : patterns (std::move (patterns))\n   {}\n \n@@ -1073,8 +1072,8 @@ class TuplePatternItemsMultiple : public TuplePatternItems\n     return TuplePatternItemType::MULTIPLE;\n   }\n \n-  std::vector<std::unique_ptr<Pattern> > &get_patterns () { return patterns; }\n-  const std::vector<std::unique_ptr<Pattern> > &get_patterns () const\n+  std::vector<std::unique_ptr<Pattern>> &get_patterns () { return patterns; }\n+  const std::vector<std::unique_ptr<Pattern>> &get_patterns () const\n   {\n     return patterns;\n   }\n@@ -1091,13 +1090,12 @@ class TuplePatternItemsMultiple : public TuplePatternItems\n // Class representing TuplePattern patterns where there are a range of patterns\n class TuplePatternItemsRanged : public TuplePatternItems\n {\n-  std::vector<std::unique_ptr<Pattern> > lower_patterns;\n-  std::vector<std::unique_ptr<Pattern> > upper_patterns;\n+  std::vector<std::unique_ptr<Pattern>> lower_patterns;\n+  std::vector<std::unique_ptr<Pattern>> upper_patterns;\n \n public:\n-  TuplePatternItemsRanged (\n-    std::vector<std::unique_ptr<Pattern> > lower_patterns,\n-    std::vector<std::unique_ptr<Pattern> > upper_patterns)\n+  TuplePatternItemsRanged (std::vector<std::unique_ptr<Pattern>> lower_patterns,\n+\t\t\t   std::vector<std::unique_ptr<Pattern>> upper_patterns)\n     : lower_patterns (std::move (lower_patterns)),\n       upper_patterns (std::move (upper_patterns))\n   {}\n@@ -1142,20 +1140,20 @@ class TuplePatternItemsRanged : public TuplePatternItems\n     return TuplePatternItemType::RANGED;\n   }\n \n-  std::vector<std::unique_ptr<Pattern> > &get_lower_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_lower_patterns ()\n   {\n     return lower_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_lower_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_lower_patterns () const\n   {\n     return lower_patterns;\n   }\n \n-  std::vector<std::unique_ptr<Pattern> > &get_upper_patterns ()\n+  std::vector<std::unique_ptr<Pattern>> &get_upper_patterns ()\n   {\n     return upper_patterns;\n   }\n-  const std::vector<std::unique_ptr<Pattern> > &get_upper_patterns () const\n+  const std::vector<std::unique_ptr<Pattern>> &get_upper_patterns () const\n   {\n     return upper_patterns;\n   }\n@@ -1233,15 +1231,15 @@ class TuplePattern : public Pattern\n // HIR node representing patterns that can match slices and arrays\n class SlicePattern : public Pattern\n {\n-  std::vector<std::unique_ptr<Pattern> > items;\n+  std::vector<std::unique_ptr<Pattern>> items;\n   Location locus;\n   Analysis::NodeMapping mappings;\n \n public:\n   std::string as_string () const override;\n \n   SlicePattern (Analysis::NodeMapping mappings,\n-\t\tstd::vector<std::unique_ptr<Pattern> > items, Location locus)\n+\t\tstd::vector<std::unique_ptr<Pattern>> items, Location locus)\n     : items (std::move (items)), locus (locus), mappings (mappings)\n   {}\n "}]}