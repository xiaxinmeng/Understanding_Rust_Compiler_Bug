{"sha": "6d938a5d770d0e94ecd923d20006b05126659235", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5MzhhNWQ3NzBkMGU5NGVjZDkyM2QyMDAwNmIwNTEyNjY1OTIzNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-05T09:31:43Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-05-05T09:34:45Z"}, "message": "match.pd: Optimize (((type)A * B) >> prec) != 0 into __imag__ .MUL_OVERFLOW [PR94914]\n\nOn x86 (the only target with umulv4_optab) one can use mull; seto to check\nfor overflow instead of performing wider multiplication and performing\ncomparison on the high bits.\n\n2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94914\n\t* match.pd ((((type)A * B) >> prec) != 0 to .MUL_OVERFLOW(A, B) != 0):\n\tNew simplification.\n\n\t* gcc.target/i386/pr94914.c: New test.", "tree": {"sha": "3f679604b715d12a623eb19e7df56d4171024b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f679604b715d12a623eb19e7df56d4171024b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d938a5d770d0e94ecd923d20006b05126659235", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d938a5d770d0e94ecd923d20006b05126659235", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d938a5d770d0e94ecd923d20006b05126659235", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d938a5d770d0e94ecd923d20006b05126659235/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59e4474a22cbf23b777f244d2a28d1ee4b54d3ce"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "e51c0e097228a4f8ac57441f37bb9bb025c47f87", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d938a5d770d0e94ecd923d20006b05126659235", "patch": "@@ -1,3 +1,9 @@\n+2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94914\n+\t* match.pd ((((type)A * B) >> prec) != 0 to .MUL_OVERFLOW(A, B) != 0):\n+\tNew simplification.\n+\n 2020-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*testqi_ext_3): Use"}, {"sha": "c45e94c0c6a99b59cdbea41cd02ada430e74f5f0", "filename": "gcc/match.pd", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=6d938a5d770d0e94ecd923d20006b05126659235", "patch": "@@ -4776,6 +4776,27 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    (with { tree t = TREE_TYPE (@0), cpx = build_complex_type (t); }\n     (out (imagpart (IFN_MUL_OVERFLOW:cpx @0 @1)) { build_zero_cst (t); })))))\n \n+/* Similarly, for unsigned operands, (((type) A * B) >> prec) != 0 where type\n+   is at least twice as wide as type of A and B, simplify to\n+   __builtin_mul_overflow (A, B, <unused>).  */\n+(for cmp (eq ne)\n+ (simplify\n+  (cmp (rshift (mult:s (convert@3 @0) (convert @1)) INTEGER_CST@2)\n+       integer_zerop)\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@3))\n+       && TYPE_UNSIGNED (TREE_TYPE (@0))\n+       && (TYPE_PRECISION (TREE_TYPE (@3))\n+\t   >= 2 * TYPE_PRECISION (TREE_TYPE (@0)))\n+       && tree_fits_uhwi_p (@2)\n+       && tree_to_uhwi (@2) == TYPE_PRECISION (TREE_TYPE (@0))\n+       && types_match (@0, @1)\n+       && type_has_mode_precision_p (TREE_TYPE (@0))\n+       && (optab_handler (umulv4_optab, TYPE_MODE (TREE_TYPE (@0)))\n+\t   != CODE_FOR_nothing))\n+   (with { tree t = TREE_TYPE (@0), cpx = build_complex_type (t); }\n+    (cmp (imagpart (IFN_MUL_OVERFLOW:cpx @0 @1)) { build_zero_cst (t); })))))\n+\n /* Simplification of math builtins.  These rules must all be optimizations\n    as well as IL simplifications.  If there is a possibility that the new\n    form could be a pessimization, the rule should go in the canonicalization"}, {"sha": "2a44c70a777b60b4c84f06519419cb60ac7cbe46", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d938a5d770d0e94ecd923d20006b05126659235", "patch": "@@ -1,3 +1,8 @@\n+2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/94914\n+\t* gcc.target/i386/pr94914.c: New test.\n+\n 2020-05-04  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94038"}, {"sha": "932bd21473d7c1420a24db1c779250d9f9f464b8", "filename": "gcc/testsuite/gcc.target/i386/pr94914.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94914.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d938a5d770d0e94ecd923d20006b05126659235/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94914.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr94914.c?ref=6d938a5d770d0e94ecd923d20006b05126659235", "patch": "@@ -0,0 +1,17 @@\n+/* PR tree-optimization/94914 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-final { scan-assembler \"\\tseto\\t\" } } */\n+/* { dg-final { scan-assembler \"\\tsetno\\t\" } } */\n+\n+int\n+foo (unsigned int x, unsigned int y)\n+{\n+  return (((unsigned long long)x * y) >> 32) != 0;\n+}\n+\n+int\n+bar (unsigned int x, unsigned int y)\n+{\n+  return (((unsigned long long)x * y) >> 32) == 0;\n+}"}]}