{"sha": "9e8aab55f66575920351b391c688bf46c4fd7308", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWU4YWFiNTVmNjY1NzU5MjAzNTFiMzkxYzY4OGJmNDZjNGZkNzMwOA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-03-03T05:20:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-03-03T05:20:04Z"}, "message": "i386.h (ix86_expand_prologue): Do not emit pic register load if \"internal\" visibility.\n\n        * config/i386/i386.h (ix86_expand_prologue): Do not emit pic register\n        load if \"internal\" visibility.\n        * doc/extend.texi: Document visibility meanings.\n\nFrom-SVN: r50240", "tree": {"sha": "8071f08eb21e8a1bd5948f25108a5f11a4689e60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8071f08eb21e8a1bd5948f25108a5f11a4689e60"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e8aab55f66575920351b391c688bf46c4fd7308", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8aab55f66575920351b391c688bf46c4fd7308", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e8aab55f66575920351b391c688bf46c4fd7308", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e8aab55f66575920351b391c688bf46c4fd7308/comments", "author": null, "committer": null, "parents": [{"sha": "b3bbd220eab5ff82a0f57d47d8941339781dfb35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3bbd220eab5ff82a0f57d47d8941339781dfb35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3bbd220eab5ff82a0f57d47d8941339781dfb35"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "3f70e67d95e62154ba0f975b96a0983d17e7b06f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9e8aab55f66575920351b391c688bf46c4fd7308", "patch": "@@ -1,3 +1,9 @@\n+2002-03-02  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.h (ix86_expand_prologue): Do not emit pic register\n+\tload if \"internal\" visibility.\n+\t* doc/extend.texi: Document visibility meanings.\n+\n 2002-03-02  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.h (ENCODE_SECTION_INFO): MODULE_LOCAL_P applies"}, {"sha": "11c128c3689c7ce8d555589b371ed9c498c16c5b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9e8aab55f66575920351b391c688bf46c4fd7308", "patch": "@@ -4184,7 +4184,13 @@ ix86_expand_prologue ()\n #endif\n \n   if (pic_reg_used)\n-    load_pic_register ();\n+    {\n+      tree vis = lookup_attribute (\"visibility\", DECL_ATTRIBUTES (cfun->decl));\n+      if (!vis\n+\t  || strcmp (\"internal\",\n+\t\t     TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (vis)))))\n+        load_pic_register ();\n+    }\n \n   /* If we are profiling, make sure no instructions are scheduled before\n      the call to mcount.  However, if -fpic, the above call will have"}, {"sha": "59297d257a553ab32f96cacdbe24e9dcb3095e50", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e8aab55f66575920351b391c688bf46c4fd7308/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9e8aab55f66575920351b391c688bf46c4fd7308", "patch": "@@ -2218,6 +2218,31 @@ f () @{ /* @r{Do something.} */; @}\n int i __attribute__ ((visibility (\"hidden\")));\n @end smallexample\n \n+See the ELF gABI for complete details, but the short story is\n+\n+@table @dfn\n+@item hidden\n+Hidden visibility indicates that the symbol will not be placed into\n+the dynamic symbol table, so no other @dfn{module} (executable or\n+shared library) can reference it directly.\n+\n+@item protected\n+Protected visibility indicates that the symbol will be placed in the\n+dynamic symbol table, but that references within the defining module\n+will bind to the local symbol.  That is, the symbol cannot be overridden\n+by another module.\n+\n+@item internal\n+Internal visibility is like hidden visibility, but with additional\n+processor specific semantics.  Unless otherwise specified by the psABI,\n+gcc defines internal visibility to mean that the function is @emph{never}\n+called from another module.  Note that hidden symbols, while then cannot\n+be referenced directly by other modules, can be referenced indirectly via\n+function pointers.  By indicating that a symbol cannot be called from\n+outside the module, gcc may for instance omit the load of a PIC register\n+since it is known that the calling function loaded the correct value.\n+@end table\n+\n Not all ELF targets support this attribute.\n \n @item regparm (@var{number})"}]}