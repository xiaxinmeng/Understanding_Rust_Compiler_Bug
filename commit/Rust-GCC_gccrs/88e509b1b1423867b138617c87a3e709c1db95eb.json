{"sha": "88e509b1b1423867b138617c87a3e709c1db95eb", "node_id": "C_kwDOANBUbNoAKDg4ZTUwOWIxYjE0MjM4NjdiMTM4NjE3Yzg3YTNlNzA5YzFkYjk1ZWI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-11-17T15:50:58Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-12-09T09:44:48Z"}, "message": "const evaluator: Remove get_nth_callarg\n\nWe only used one path of the C++ folder's get_nth_callarg function:\nCALL_EXPR_ARG. Replace all calls to get_nth_callarg by macro calls to\nCALL_EXPR_ARG", "tree": {"sha": "4da99900199b170008f489859d820cb23f6daa2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4da99900199b170008f489859d820cb23f6daa2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/88e509b1b1423867b138617c87a3e709c1db95eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e509b1b1423867b138617c87a3e709c1db95eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e509b1b1423867b138617c87a3e709c1db95eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e509b1b1423867b138617c87a3e709c1db95eb/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9666f2b169b5192b5c827d605cc80e6987e1aac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9666f2b169b5192b5c827d605cc80e6987e1aac5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9666f2b169b5192b5c827d605cc80e6987e1aac5"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "438747e93884c100d67a598e734528666101f767", "filename": "gcc/rust/backend/rust-constexpr.cc", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/88e509b1b1423867b138617c87a3e709c1db95eb/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/88e509b1b1423867b138617c87a3e709c1db95eb/gcc%2Frust%2Fbackend%2Frust-constexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-constexpr.cc?ref=88e509b1b1423867b138617c87a3e709c1db95eb", "patch": "@@ -81,8 +81,6 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n bool\n potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t\t\t tsubst_flags_t flags);\n-inline tree\n-get_nth_callarg (tree t, int n);\n tree\n unshare_constructor (tree t MEM_STAT_DECL);\n void\n@@ -3081,7 +3079,7 @@ rs_bind_parameters_in_call (const constexpr_ctx *ctx, tree t, tree fun,\n       tree type = parms ? TREE_TYPE (parms) : void_type_node;\n       if (parms && DECL_BY_REFERENCE (parms))\n \ttype = TREE_TYPE (type);\n-      x = get_nth_callarg (t, i);\n+      x = CALL_EXPR_ARG (t, i);\n \n       if (TREE_ADDRESSABLE (type))\n \t/* Undo convert_for_arg_passing work here.  */\n@@ -4081,25 +4079,6 @@ maybe_constexpr_fn (tree t)\n   return (DECL_DECLARED_CONSTEXPR_P (t));\n }\n \n-// forked from gcc/cp/constexpr.cc get_nth_callarg\n-\n-/* We have an expression tree T that represents a call, either CALL_EXPR.\n-  Return the Nth argument.  */\n-\n-inline tree\n-get_nth_callarg (tree t, int n)\n-{\n-  switch (TREE_CODE (t))\n-    {\n-    case CALL_EXPR:\n-      return CALL_EXPR_ARG (t, n);\n-\n-    default:\n-      gcc_unreachable ();\n-      return NULL;\n-    }\n-}\n-\n // forked from gcc/cp/constexpr.cc var_in_maybe_constexpr_fn\n \n /* True if T was declared in a function that might be constexpr: either a\n@@ -5817,7 +5796,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\tif (DECL_NONSTATIC_MEMBER_FUNCTION_P (fun)\n \t\t    && !DECL_CONSTRUCTOR_P (fun))\n \t\t  {\n-\t\t    tree x = get_nth_callarg (t, 0);\n+\t\t    tree x = CALL_EXPR_ARG (t, 0);\n \n \t\t    /* Don't require an immediately constant value, as\n \t\t       constexpr substitution might not use the value.  */\n@@ -5846,7 +5825,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t  }\n \tfor (; i < nargs; ++i)\n \t  {\n-\t    tree x = get_nth_callarg (t, i);\n+\t    tree x = CALL_EXPR_ARG (t, i);\n \t    /* In a template, reference arguments haven't been converted to\n \t       REFERENCE_TYPE and we might not even know if the parameter\n \t       is a reference, so accept lvalue constants too.  */"}]}