{"sha": "b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjllNmEyZTVkZTRlOTRiNWMzYmZiZTZjNjBlMzIzMWEyMDBlNDZiYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-09-27T20:03:09Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-09-27T20:03:09Z"}, "message": "re PR libgcj/23367 (_Jv_FindMethodInCache is not thread-safe)\n\n\tPR libgcj/23367:\n\t* include/jvm.h (_Jv_FreeMethodCache): Declare.\n\t* java/lang/natClass.cc (MCACHE_SIZE): Conditional on HAVE_TLS.\n\t(struct _Jv_mcache): Likewise.\n\t(method_cache): Likewise.\n\t(_Jv_FindMethodInCache): Do nothing unless TLS is available.\n\t(_Jv_AddMethodToCache): Likewise.\n\t(_Jv_FreeMethodCache): New function.\n\t* java/lang/natThread.cc (finish_): Call _Jv_FreeMethodCache.\n\t* aclocal.m4, configure, include/config.h.in: Rebuilt.\n\t* configure.ac: Invoke GCC_CHECK_TLS.\n\nFrom-SVN: r104707", "tree": {"sha": "18763461cdb28ee640435eb7d63f5a857583660c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18763461cdb28ee640435eb7d63f5a857583660c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/comments", "author": null, "committer": null, "parents": [{"sha": "ab3fa9d34434e2aa491c216a3b9b20122179db64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab3fa9d34434e2aa491c216a3b9b20122179db64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab3fa9d34434e2aa491c216a3b9b20122179db64"}], "stats": {"total": 257, "additions": 222, "deletions": 35}, "files": [{"sha": "fd0bd3fd64f770cd67520058f6da41b7007b8fb6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -1,3 +1,17 @@\n+2005-09-27  Tom Tromey  <tromey@redhat.com>\n+\n+\tPR libgcj/23367:\n+\t* include/jvm.h (_Jv_FreeMethodCache): Declare.\n+\t* java/lang/natClass.cc (MCACHE_SIZE): Conditional on HAVE_TLS.\n+\t(struct _Jv_mcache): Likewise.\n+\t(method_cache): Likewise.\n+\t(_Jv_FindMethodInCache): Do nothing unless TLS is available.\n+\t(_Jv_AddMethodToCache): Likewise.\n+\t(_Jv_FreeMethodCache): New function.\n+\t* java/lang/natThread.cc (finish_): Call _Jv_FreeMethodCache.\n+\t* aclocal.m4, configure, include/config.h.in: Rebuilt.\n+\t* configure.ac: Invoke GCC_CHECK_TLS.\n+\n 2005-09-27  Tom Tromey  <tromey@redhat.com>\n \n \t* configure, Makefile.in: Rebuilt."}, {"sha": "9218b5358f340f4f0554095bf2046cdae3308b8a", "filename": "libjava/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -74,6 +74,7 @@ subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lcmessage.m4 \\\n@@ -82,9 +83,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/lib-link.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/mingwld.m4 \\\n-\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n+\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\"}, {"sha": "02f34e6d2acd2ab7e971407971ca4f6575fc31c4", "filename": "libjava/aclocal.m4", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Faclocal.m4?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -1097,6 +1097,7 @@ AC_SUBST([am__untar])\n \n m4_include([../config/acx.m4])\n m4_include([../config/depstand.m4])\n+m4_include([../config/enable.m4])\n m4_include([../config/gxx-include-dir.m4])\n m4_include([../config/iconv.m4])\n m4_include([../config/lcmessage.m4])\n@@ -1105,6 +1106,7 @@ m4_include([../config/lib-ld.m4])\n m4_include([../config/lib-link.m4])\n m4_include([../config/lib-prefix.m4])\n m4_include([../config/no-executables.m4])\n+m4_include([../config/tls.m4])\n m4_include([../libtool.m4])\n m4_include([mingwld.m4])\n m4_include([pkg.m4])"}, {"sha": "8b3a80b23bceba46e9132804478c6ff27e3df772", "filename": "libjava/configure", "status": "modified", "additions": 132, "deletions": 2, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -876,6 +876,8 @@ Optional Features:\n   --enable-gtk-cairo      build the cairo Graphics2D implementation on GTK\n   --enable-java-gc=TYPE   choose garbage collector (default is boehm)\n   --disable-rpath         do not hardcode runtime library paths\n+  _g_switchUse thread-local storage\n+                          [default=yes]\n \n Optional Packages:\n   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n@@ -5584,7 +5586,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 5587 \"configure\"' > conftest.$ac_ext\n+  echo '#line 5589 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -6587,7 +6589,7 @@ if test \"${enable_sjlj_exceptions+set}\" = set; then\n   :\n else\n   cat > conftest.$ac_ext << EOF\n-#line 6590 \"configure\"\n+#line 6592 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -16740,6 +16742,134 @@ else\n   multilib_arg=\n fi\n \n+# See if we support thread-local storage.\n+\n+   # Check whether --enable-tls or --disable-tls was given.\n+if test \"${enable_tls+set}\" = set; then\n+  enableval=\"$enable_tls\"\n+\n+      case \"$enableval\" in\n+       yes|no) ;;\n+       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable tls must be yes or no\" >&5\n+echo \"$as_me: error: Argument to enable/disable tls must be yes or no\" >&2;}\n+   { (exit 1); exit 1; }; } ;;\n+      esac\n+\n+else\n+  enable_tls=yes\n+fi;\n+\n+  echo \"$as_me:$LINENO: checking whether the target supports thread-local storage\" >&5\n+echo $ECHO_N \"checking whether the target supports thread-local storage... $ECHO_C\" >&6\n+if test \"${have_tls+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+    if test \"$cross_compiling\" = yes; then\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int foo;\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_c_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_tls=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+have_tls=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+                    save_LDFLAGS=\"$LDFLAGS\"\n+      LDFLAGS=\"-static $LDFLAGS\"\n+      if test \"$cross_compiling\" = yes; then\n+  { { echo \"$as_me:$LINENO: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&5\n+echo \"$as_me: error: cannot run test program while cross compiling\n+See \\`config.log' for more details.\" >&2;}\n+   { (exit 1); exit 1; }; }\n+else\n+  cat >conftest.$ac_ext <<_ACEOF\n+__thread int a; int b; int main() { return a = b; }\n+_ACEOF\n+rm -f conftest$ac_exeext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_link\\\"\") >&5\n+  (eval $ac_link) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } && { ac_try='./conftest$ac_exeext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  have_tls=yes\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+have_tls=no\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+      LDFLAGS=\"$save_LDFLAGS\"\n+else\n+  echo \"$as_me: program exited with status $ac_status\" >&5\n+echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+( exit $ac_status )\n+have_tls=no\n+fi\n+rm -f core *.core gmon.out bb.out conftest$ac_exeext conftest.$ac_objext conftest.$ac_ext\n+fi\n+fi\n+echo \"$as_me:$LINENO: result: $have_tls\" >&5\n+echo \"${ECHO_T}$have_tls\" >&6\n+  if test \"$enable_tls $have_tls\" = \"yes yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define HAVE_TLS 1\n+_ACEOF\n+\n+  fi\n \n \n here=`${PWDCMD-pwd}`"}, {"sha": "fbd2a3d15e7c4fdeb51c4ec4a02989ae7668d768", "filename": "libjava/configure.ac", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.ac?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -1439,6 +1439,8 @@ else\n   multilib_arg=\n fi\n \n+# See if we support thread-local storage.\n+GCC_CHECK_TLS\n \n \n here=`${PWDCMD-pwd}`"}, {"sha": "5f0efcef1a52d886956210fecbf187d69d6d443e", "filename": "libjava/gcj/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fgcj%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fgcj%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2FMakefile.in?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -44,6 +44,7 @@ DIST_COMMON = $(gcj_HEADERS) $(srcdir)/Makefile.am \\\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lcmessage.m4 \\\n@@ -52,9 +53,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/lib-link.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/mingwld.m4 \\\n-\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n+\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/include/config.h libgcj-config.h"}, {"sha": "77775a1372b9204dd61ca2252ef08a502967aaba", "filename": "libjava/include/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2FMakefile.in?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -43,6 +43,7 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \\\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lcmessage.m4 \\\n@@ -51,9 +52,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/lib-link.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/mingwld.m4 \\\n-\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n+\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = config.h $(top_builddir)/gcj/libgcj-config.h"}, {"sha": "990b88562fb068235c84d4e6d7380e1c59969989", "filename": "libjava/include/config.h.in", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fconfig.h.in?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -319,6 +319,9 @@\n /* Define if global 'timezone' exists. */\n #undef HAVE_TIMEZONE\n \n+/* Define to 1 if the target supports thread-local storage. */\n+#undef HAVE_TLS\n+\n /* Define to 1 if your `struct tm' has `tm_zone'. Deprecated, use\n    `HAVE_STRUCT_TM_TM_ZONE' instead. */\n #undef HAVE_TM_ZONE"}, {"sha": "6061300a74ddc77d9dcef6d6c2dbc33d95fb87d1", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -359,6 +359,10 @@ void _Jv_SetInitialHeapSize (const char *arg);\n    _Jv_GCSetMaximumHeapSize.  */\n void _Jv_SetMaximumHeapSize (const char *arg);\n \n+/* Free the method cache, if one was allocated.  This is only called\n+   during thread deregistration.  */\n+void _Jv_FreeMethodCache ();\n+\n extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n \t\t  bool is_jar);"}, {"sha": "bd68eb224358375ad40687b9125770126ce2857b", "filename": "libjava/java/lang/natClass.cc", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fjava%2Flang%2FnatClass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fjava%2Flang%2FnatClass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClass.cc?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -879,46 +879,71 @@ _Jv_LookupDeclaredMethod (jclass klass, _Jv_Utf8Const *name,\n   return NULL;\n }\n \n+#ifdef HAVE_TLS\n+\n // NOTE: MCACHE_SIZE should be a power of 2 minus one.\n-#define MCACHE_SIZE 1023\n+#define MCACHE_SIZE 31\n \n struct _Jv_mcache\n {\n   jclass klass;\n   _Jv_Method *method;\n };\n \n-static _Jv_mcache method_cache[MCACHE_SIZE + 1];\n+static __thread _Jv_mcache *method_cache;\n+#endif // HAVE_TLS\n \n static void *\n _Jv_FindMethodInCache (jclass klass,\n                        _Jv_Utf8Const *name,\n                        _Jv_Utf8Const *signature)\n {\n-  int index = name->hash16 () & MCACHE_SIZE;\n-  _Jv_mcache *mc = method_cache + index;\n-  _Jv_Method *m = mc->method;\n-\n-  if (mc->klass == klass\n-      && m != NULL             // thread safe check\n-      && _Jv_equalUtf8Consts (m->name, name)\n-      && _Jv_equalUtf8Consts (m->signature, signature))\n-    return mc->method->ncode;\n+#ifdef HAVE_TLS\n+  _Jv_mcache *cache = method_cache;\n+  if (cache)\n+    {\n+      int index = name->hash16 () & MCACHE_SIZE;\n+      _Jv_mcache *mc = &cache[index];\n+      _Jv_Method *m = mc->method;\n+\n+      if (mc->klass == klass\n+\t  && _Jv_equalUtf8Consts (m->name, name)\n+\t  && _Jv_equalUtf8Consts (m->signature, signature))\n+\treturn mc->method->ncode;\n+    }\n+#endif // HAVE_TLS\n   return NULL;\n }\n \n static void\n-_Jv_AddMethodToCache (jclass klass,\n-                       _Jv_Method *method)\n+_Jv_AddMethodToCache (jclass klass, _Jv_Method *method)\n {\n-  _Jv_MonitorEnter (&java::lang::Class::class$); \n-\n-  int index = method->name->hash16 () & MCACHE_SIZE;\n-\n-  method_cache[index].method = method;\n-  method_cache[index].klass = klass;\n+#ifdef HAVE_TLS\n+  if (method_cache == NULL)\n+    method_cache = (_Jv_mcache *) _Jv_MallocUnchecked((MCACHE_SIZE + 1)\n+\t\t\t\t\t\t      * sizeof (_Jv_mcache));\n+  // If the allocation failed, just keep going.\n+  if (method_cache != NULL)\n+    {\n+      int index = method->name->hash16 () & MCACHE_SIZE;\n+      method_cache[index].method = method;\n+      method_cache[index].klass = klass;\n+    }\n+#endif // HAVE_TLS\n+}\n \n-  _Jv_MonitorExit (&java::lang::Class::class$);\n+// Free this thread's method cache.  We explicitly manage this memory\n+// as the GC does not yet know how to scan TLS on all platforms.\n+void\n+_Jv_FreeMethodCache ()\n+{\n+#ifdef HAVE_TLS\n+  if (method_cache != NULL)\n+    {\n+      _Jv_Free(method_cache);\n+      method_cache = NULL;\n+    }\n+#endif // HAVE_TLS\n }\n \n void *"}, {"sha": "80cdae324ff90472279911339b3f6d67e49e08d0", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -214,7 +214,10 @@ java::lang::Thread::finish_ ()\n #endif\n \n   group = NULL;\n-  \n+\n+  // If a method cache was created, free it.\n+  _Jv_FreeMethodCache();\n+\n   // Signal any threads that are waiting to join() us.\n   _Jv_MutexLock (&nt->join_mutex);\n "}, {"sha": "270c23d828c1089f00bc04430f401e736d0e81c1", "filename": "libjava/testsuite/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc/libjava%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2FMakefile.in?ref=b9e6a2e5de4e94b5c3bfbe6c60e3231a200e46bc", "patch": "@@ -41,6 +41,7 @@ DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n+\t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gxx-include-dir.m4 \\\n \t$(top_srcdir)/../config/iconv.m4 \\\n \t$(top_srcdir)/../config/lcmessage.m4 \\\n@@ -49,9 +50,9 @@ am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n \t$(top_srcdir)/../config/lib-link.m4 \\\n \t$(top_srcdir)/../config/lib-prefix.m4 \\\n \t$(top_srcdir)/../config/no-executables.m4 \\\n-\t$(top_srcdir)/../libtool.m4 $(top_srcdir)/mingwld.m4 \\\n-\t$(top_srcdir)/pkg.m4 $(top_srcdir)/shlibpath.m4 \\\n-\t$(top_srcdir)/configure.ac\n+\t$(top_srcdir)/../config/tls.m4 $(top_srcdir)/../libtool.m4 \\\n+\t$(top_srcdir)/mingwld.m4 $(top_srcdir)/pkg.m4 \\\n+\t$(top_srcdir)/shlibpath.m4 $(top_srcdir)/configure.ac\n am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n \t$(ACLOCAL_M4)\n CONFIG_HEADER = $(top_builddir)/include/config.h \\"}]}