{"sha": "5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWYyODUyNGEwMTFhZDNiOGJmNzYxMmE2MDRlMGFkNGM1NTdlNDdkMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2013-05-13T11:33:50Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2013-05-13T11:33:50Z"}, "message": "mode-switching.c (optimize_mode_switching): Set correct RTL profile.\n\n\t* mode-switching.c (optimize_mode_switching): Set correct RTL profile.\n\t* config/i386/i386.c (ix86_compute_frame_layout,\n\tix86_expand_epilogue, emit_i387_cw_initialization, ix86_expand_vector_move_misalign,\n\tix86_fp_comparison_strategy, ix86_local_alignment): Fix use of size/speed predicates.\n\nFrom-SVN: r198825", "tree": {"sha": "812127d45949f458b96c1e4453fe5a81c195c607", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/812127d45949f458b96c1e4453fe5a81c195c607"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/comments", "author": null, "committer": null, "parents": [{"sha": "a164a17b5e1471d556c51257e59e46681f2d6073", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a164a17b5e1471d556c51257e59e46681f2d6073", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a164a17b5e1471d556c51257e59e46681f2d6073"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "a2fe4ec6acc794772031b724fd50e42e616edb3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "patch": "@@ -1,3 +1,10 @@\n+2013-05-13  Jan Hubicka  <jh@suse.cz>\n+\n+\t* mode-switching.c (optimize_mode_switching): Set correct RTL profile.\n+\t* config/i386/i386.c (ix86_compute_frame_layout,\n+\tix86_expand_epilogue, emit_i387_cw_initialization, ix86_expand_vector_move_misalign,\n+\tix86_fp_comparison_strategy, ix86_local_alignment): Fix use of size/speed predicates.\n+\n 2013-05-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/45216"}, {"sha": "0999b6e608b4ed4f4219a1f4a2b0ff029feab7ba", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "patch": "@@ -9003,7 +9003,7 @@ ix86_compute_frame_layout (struct ix86_frame *frame)\n      Recompute the value as needed.  Do not recompute when amount of registers\n      didn't change as reload does multiple calls to the function and does not\n      expect the decision to change within single iteration.  */\n-  else if (!optimize_function_for_size_p (cfun)\n+  else if (!optimize_bb_for_size_p (ENTRY_BLOCK_PTR)\n            && cfun->machine->use_fast_prologue_epilogue_nregs != frame->nregs)\n     {\n       int count = frame->nregs;\n@@ -11071,7 +11071,7 @@ ix86_expand_epilogue (int style)\n       /* Leave results in shorter dependency chains on CPUs that are\n \t able to grok it fast.  */\n       else if (TARGET_USE_LEAVE\n-\t       || optimize_function_for_size_p (cfun)\n+\t       || optimize_bb_for_size_p (EXIT_BLOCK_PTR)\n \t       || !cfun->machine->use_fast_prologue_epilogue)\n \tix86_emit_leave ();\n       else\n@@ -15668,7 +15668,7 @@ emit_i387_cw_initialization (int mode)\n   emit_move_insn (reg, copy_rtx (stored_mode));\n \n   if (TARGET_64BIT || TARGET_PARTIAL_REG_STALL\n-      || optimize_function_for_size_p (cfun))\n+      || optimize_insn_for_size_p ())\n     {\n       switch (mode)\n \t{\n@@ -16426,7 +16426,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  if (TARGET_AVX\n \t      || TARGET_SSE_UNALIGNED_LOAD_OPTIMAL\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n-\t      || optimize_function_for_size_p (cfun))\n+\t      || optimize_insn_for_size_p ())\n \t    {\n \t      /* We will eventually emit movups based on insn attributes.  */\n \t      emit_insn (gen_sse2_loadupd (op0, op1));\n@@ -16463,7 +16463,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  if (TARGET_AVX\n \t      || TARGET_SSE_UNALIGNED_LOAD_OPTIMAL\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n-\t      || optimize_function_for_size_p (cfun))\n+\t      || optimize_insn_for_size_p ())\n \t    {\n \t      op0 = gen_lowpart (V4SFmode, op0);\n \t      op1 = gen_lowpart (V4SFmode, op1);\n@@ -16499,7 +16499,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  if (TARGET_AVX\n \t      || TARGET_SSE_UNALIGNED_STORE_OPTIMAL\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n-\t      || optimize_function_for_size_p (cfun))\n+\t      || optimize_insn_for_size_p ())\n \t    /* We will eventually emit movups based on insn attributes.  */\n \t    emit_insn (gen_sse2_storeupd (op0, op1));\n \t  else\n@@ -16518,7 +16518,7 @@ ix86_expand_vector_move_misalign (enum machine_mode mode, rtx operands[])\n \t  if (TARGET_AVX\n \t      || TARGET_SSE_UNALIGNED_STORE_OPTIMAL\n \t      || TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\n-\t      || optimize_function_for_size_p (cfun))\n+\t      || optimize_insn_for_size_p ())\n \t    {\n \t      op0 = gen_lowpart (V4SFmode, op0);\n \t      emit_insn (gen_sse_storeups (op0, op1));\n@@ -18764,7 +18764,7 @@ ix86_fp_comparison_strategy (enum rtx_code code ATTRIBUTE_UNUSED)\n   if (TARGET_CMOVE)\n     return IX86_FPCMP_COMI;\n \n-  if (TARGET_SAHF && (TARGET_USE_SAHF || optimize_function_for_size_p (cfun)))\n+  if (TARGET_SAHF && (TARGET_USE_SAHF || optimize_insn_for_size_p ()))\n     return IX86_FPCMP_SAHF;\n \n   return IX86_FPCMP_ARITH;\n@@ -25193,7 +25193,9 @@ ix86_local_alignment (tree exp, enum machine_mode mode,\n      other unit can not rely on the alignment.\n \n      Exclude va_list type.  It is the common case of local array where\n-     we can not benefit from the alignment.  */\n+     we can not benefit from the alignment.  \n+\n+     TODO: Probably one should optimize for size only when var is not escaping.  */\n   if (TARGET_64BIT && optimize_function_for_speed_p (cfun)\n       && TARGET_SSE)\n     {"}, {"sha": "70a77d081a47cf89998d32f0cccbf250485d3194", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f28524a011ad3b8bf7612a604e0ad4c557e47d3/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=5f28524a011ad3b8bf7612a604e0ad4c557e47d3", "patch": "@@ -667,10 +667,12 @@ optimize_mode_switching (void)\n \n \t      REG_SET_TO_HARD_REG_SET (live_at_edge, df_get_live_out (src_bb));\n \n+\t      rtl_profile_for_edge (eg);\n \t      start_sequence ();\n \t      EMIT_MODE_SET (entity_map[j], mode, live_at_edge);\n \t      mode_set = get_insns ();\n \t      end_sequence ();\n+\t      default_rtl_profile ();\n \n \t      /* Do not bother to insert empty sequence.  */\n \t      if (mode_set == NULL_RTX)\n@@ -713,6 +715,7 @@ optimize_mode_switching (void)\n \t\t{\n \t\t  rtx mode_set;\n \n+\t\t  rtl_profile_for_bb (bb);\n \t\t  start_sequence ();\n \t\t  EMIT_MODE_SET (entity_map[j], ptr->mode, ptr->regs_live);\n \t\t  mode_set = get_insns ();\n@@ -727,6 +730,8 @@ optimize_mode_switching (void)\n \t\t      else\n \t\t\temit_insn_before (mode_set, ptr->insn_ptr);\n \t\t    }\n+\n+\t\t  default_rtl_profile ();\n \t\t}\n \n \t      free (ptr);"}]}