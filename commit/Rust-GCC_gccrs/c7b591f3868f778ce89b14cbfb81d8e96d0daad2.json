{"sha": "c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdiNTkxZjM4NjhmNzc4Y2U4OWIxNGNiZmI4MWQ4ZTk2ZDBkYWFkMg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-07T20:28:06Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-20T11:30:19Z"}, "message": "libstdc++: Add <=> to thread::id\n\n\t* include/std/thread (thread::id::operator<=>): Define for C++20.\n\t* testsuite/30_threads/thread/id/70294.cc: Do not take addresses of\n\tfunctions in namespace std.\n\t* testsuite/30_threads/thread/id/operators_c++20.cc: New test.", "tree": {"sha": "ff6b7d6b631b2f92beda643b0bef013f05ea37a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff6b7d6b631b2f92beda643b0bef013f05ea37a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a172be3e5e849ef82f07ce034837630e73f025b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a172be3e5e849ef82f07ce034837630e73f025b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a172be3e5e849ef82f07ce034837630e73f025b"}], "stats": {"total": 122, "additions": 104, "deletions": 18}, "files": [{"sha": "a80c608d80faaae154f190ba8c8639d8e580eeb1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "patch": "@@ -1,3 +1,10 @@\n+2020-02-20  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/thread (thread::id::operator<=>): Define for C++20.\n+\t* testsuite/30_threads/thread/id/70294.cc: Do not take addresses of\n+\tfunctions in namespace std.\n+\t* testsuite/30_threads/thread/id/operators_c++20.cc: New test.\n+\n 2020-02-19  Patrick Palka  <ppalka@redhat.com>\n \n \t* testsuite/std/ranges/adaptors/split.cc (test03): Don't include the"}, {"sha": "1f9c13ff7d1a7a7b807c97019ff4ef0f10498a85", "filename": "libstdc++-v3/include/std/thread", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fthread?ref=c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "patch": "@@ -45,7 +45,8 @@\n #include <tuple>  // std::tuple\n \n #if __cplusplus > 201703L\n-# include <stop_token> // std::stop_source, std::stop_token, std::nostopstate\n+# include <compare>\t// std::strong_ordering\n+# include <stop_token>\t// std::stop_source, std::stop_token, std::nostopstate\n #endif\n \n #ifdef _GLIBCXX_USE_NANOSLEEP\n@@ -96,17 +97,22 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n     private:\n       friend class thread;\n-      friend class hash<thread::id>;\n+      friend class hash<id>;\n \n       friend bool\n-      operator==(thread::id __x, thread::id __y) noexcept;\n+      operator==(id __x, id __y) noexcept;\n \n+#if __cpp_lib_three_way_comparison\n+      friend strong_ordering\n+      operator<=>(id __x, id __y) noexcept;\n+#else\n       friend bool\n-      operator<(thread::id __x, thread::id __y) noexcept;\n+      operator<(id __x, id __y) noexcept;\n+#endif\n \n       template<class _CharT, class _Traits>\n \tfriend basic_ostream<_CharT, _Traits>&\n-\toperator<<(basic_ostream<_CharT, _Traits>& __out, thread::id __id);\n+\toperator<<(basic_ostream<_CharT, _Traits>& __out, id __id);\n     };\n \n   private:\n@@ -180,7 +186,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void\n     detach();\n \n-    thread::id\n+    id\n     get_id() const noexcept\n     { return _M_id; }\n \n@@ -296,6 +302,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     return __x._M_thread == __y._M_thread;\n   }\n \n+#if __cpp_lib_three_way_comparison\n+  inline strong_ordering\n+  operator<=>(thread::id __x, thread::id __y) noexcept\n+  { return __x._M_thread <=> __y._M_thread; }\n+#else\n   inline bool\n   operator!=(thread::id __x, thread::id __y) noexcept\n   { return !(__x == __y); }\n@@ -319,6 +330,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline bool\n   operator>=(thread::id __x, thread::id __y) noexcept\n   { return !(__x < __y); }\n+#endif // __cpp_lib_three_way_comparison\n \n   // DR 889.\n   /// std::hash specialization for thread::id.\n@@ -424,8 +436,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   class jthread\n   {\n   public:\n-    using id = std::thread::id;\n-    using native_handle_type = std::thread::native_handle_type;\n+    using id = thread::id;\n+    using native_handle_type = thread::native_handle_type;\n \n     jthread() noexcept\n     : _M_stop_source{nostopstate}\n@@ -498,7 +510,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     [[nodiscard]] static unsigned\n     hardware_concurrency() noexcept\n     {\n-      return std::thread::hardware_concurrency();\n+      return thread::hardware_concurrency();\n     }\n \n     [[nodiscard]] stop_source\n@@ -544,7 +556,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n     stop_source _M_stop_source;\n-    std::thread _M_thread;\n+    thread _M_thread;\n   };\n #endif // __cpp_lib_jthread\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "d9c61f7435155f4470c43e9e9b72451f402b08d6", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/70294.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2F70294.cc?ref=c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "patch": "@@ -19,5 +19,14 @@\n \n #include <thread>\n \n-bool (*lt)(std::thread::id, std::thread::id) = &std::operator<;\n-bool (*eq)(std::thread::id, std::thread::id) = &std::operator==;\n+struct T\n+{\n+  operator std::thread::id() const;\n+} const t;\n+\n+using namespace std;\n+\n+// std::thread::id comparison operators are not hidden friends,\n+// so should be candidates for these expressions:\n+bool lt = t < t;\n+bool eq = t == t;"}, {"sha": "3d84afafd1595eaf3c28c34b132c0b6026d2a3fe", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/operators.cc", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators.cc?ref=c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "patch": "@@ -20,16 +20,26 @@\n \n #include <thread>\n \n+template<typename Expected, typename T>\n+  struct check_type\n+  : std::false_type\n+  { };\n+\n+template<typename Expected>\n+  struct check_type<Expected, Expected>\n+  : std::true_type\n+  { };\n+\n void test01()\n {\n   // thread::id operators\n   std::thread::id id1;\n   std::thread::id id2;\n \n-  id1 == id2;\n-  id1 != id2;\n-  id1 < id2;\n-  id1 > id2;\n-  id1 >= id2;\n-  id1 <= id2;\n+  static_assert( check_type<bool, decltype(id1 == id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 != id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 < id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 > id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 >= id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 <= id2)>{} );\n }"}, {"sha": "6094b0e1501f9263707a15433e9f1b33a351b54f", "filename": "libstdc++-v3/testsuite/30_threads/thread/id/operators_c++20.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7b591f3868f778ce89b14cbfb81d8e96d0daad2/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fid%2Foperators_c%2B%2B20.cc?ref=c7b591f3868f778ce89b14cbfb81d8e96d0daad2", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <thread>\n+\n+template<typename Expected, typename T>\n+  struct check_type\n+  : std::false_type\n+  { };\n+\n+template<typename Expected>\n+  struct check_type<Expected, Expected>\n+  : std::true_type\n+  { };\n+\n+void test01()\n+{\n+  // thread::id operators\n+  std::thread::id id1;\n+  std::thread::id id2;\n+\n+  static_assert( check_type<bool, decltype(id1 == id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 != id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 < id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 > id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 >= id2)>{} );\n+  static_assert( check_type<bool, decltype(id1 <= id2)>{} );\n+\n+  static_assert( check_type<std::strong_ordering, decltype(id1 <=> id2)>{} );\n+}"}]}