{"sha": "856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU2YjYyNDQyZjZmYzVlNDMwMmFlOWVlMWViY2U4YTE5YmJkODY4MQ==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@codesourcery.com", "date": "2000-05-14T08:44:48Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2000-05-14T08:44:48Z"}, "message": "diagnostic.h (DIAGNOSTICS_SHOW_PREFIX_ONCE): New macro.\n\n2000-05-13  Gabriel Dos Reis <gdr@codesourcery.com>\n\n        * diagnostic.h (DIAGNOSTICS_SHOW_PREFIX_ONCE): New macro.\n        (DIAGNOSTICS_SHOW_PREFIX_NEVER): Likewise.\n        (DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE): Likewise.\n        (struct output_buffer: emitted_prefix_p, prefixing_rule): New\n        fields.\n        (set_message_prefixing_rule): Declare.\n\n        * diagnostic.c: (current_prefixing_rule): New variable.\n        (set_message_prefixing_rule): Define.\n        (output_set_prefix): Adjust buffer->emitted_prefix_p.\n        (init_output_buffer): Adjust Initialization.\n        (output_emit_prefix): Rewrite.  Take prefixing rules into account.\n\ncp/\n\n2000-05-13  Gabriel Dos Reis <gdr@codesourcery.com>\n\n        * lex.c: #include diagnostic.h.\n        (lang_init_options): Set default prefixing rules.\n\n        * lang-options.h: Add -fdiagnostics-show-location=.\n\n        * decl2.c: #include diagnostic.h.\n        (lang_decode_option): Handle -fdiagnostics-show-location=.\n\nFrom-SVN: r33890", "tree": {"sha": "dac211226e72c1c066f0126c59594854c2e7a190", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dac211226e72c1c066f0126c59594854c2e7a190"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "html_url": "https://github.com/Rust-GCC/gccrs/commit/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/comments", "author": null, "committer": null, "parents": [{"sha": "54dce48b80a26bce6c05a38f2faa68ee87d41e98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54dce48b80a26bce6c05a38f2faa68ee87d41e98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54dce48b80a26bce6c05a38f2faa68ee87d41e98"}], "stats": {"total": 88, "additions": 86, "deletions": 2}, "files": [{"sha": "886b022d7f63f885e43f1c2df7408ccbb76fbba8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -1,3 +1,18 @@\n+2000-05-13  Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+\t* diagnostic.h (DIAGNOSTICS_SHOW_PREFIX_ONCE): New macro.\n+\t(DIAGNOSTICS_SHOW_PREFIX_NEVER): Likewise.\n+\t(DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE): Likewise.\n+\t(struct output_buffer: emitted_prefix_p, prefixing_rule): New\n+\tfields. \n+\t(set_message_prefixing_rule): Declare.\n+\n+\t* diagnostic.c: (current_prefixing_rule): New variable.\n+\t(set_message_prefixing_rule): Define.\n+\t(output_set_prefix): Adjust buffer->emitted_prefix_p.\n+\t(init_output_buffer): Adjust Initialization.\n+\t(output_emit_prefix): Rewrite.  Take prefixing rules into account.\n+\t\n Sat May 13 11:05:47 2000  Philippe De Muyter  <phdm@macqel.be>\n \n \t* ifcvt.c (if_convert): Do not free NULL."}, {"sha": "be2d29539c99ee7e9721378910c0969f4e8c56c1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -1,3 +1,13 @@\n+2000-05-13  Gabriel Dos Reis <gdr@codesourcery.com>\n+\n+\t* lex.c: #include diagnostic.h.\n+\t(lang_init_options): Set default prefixing rules.\n+\n+\t* lang-options.h: Add -fdiagnostics-show-location=.\n+\t\n+\t* decl2.c: #include diagnostic.h.\n+\t(lang_decode_option): Handle -fdiagnostics-show-location=.\n+\n 2000-05-12  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tinfo.cc: Revert my 2000-05-08 and 2000-05-07 changes."}, {"sha": "de72cc394433e319ccf9cdf765e9f17477124c09", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"dwarfout.h\"\n #include \"ggc.h\"\n #include \"timevar.h\"\n+#include \"diagnostic.h\"\n \n #if USE_CPPLIB\n #include \"cpplib.h\"\n@@ -648,6 +649,15 @@ lang_decode_option (argc, argv)\n \tset_message_length\n \t  (read_integral_parameter (p + 15, p - 2,\n \t\t\t\t    /* default line-wrap length */ 72));\n+      else if (!strncmp (p, \"diagnostics-show-location=\", 24))\n+        {\n+          if (!strncmp (p + 24, \"once\", 4))\n+            set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+          else if (!strncmp (p + 24, \"every-line\", 10))\n+            set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE);\n+          else\n+            error (\"Unrecognized option `%s'\", p - 2);\n+        }\n       else if (!strncmp (p, \"dump-translation-unit-\", 22))\n \t{\n \t  if (p[22] == '\\0')"}, {"sha": "232a40cbaff4c6e1fe1fde36f9267c397b575e17", "filename": "gcc/cp/lang-options.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Flang-options.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Flang-options.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flang-options.h?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -75,6 +75,7 @@ DEFINE_LANG_NAME (\"C++\")\n   { \"-fno-labels-ok\", \"\" },\n   { \"-fmemoize-lookups\", \"\" },\n   { \"-fmessage-length=\", \"\" },\n+  { \"-fdiagnostics-show-location=\", \"\" },  \n   { \"-fno-memoize-lookups\", \"\" },\n   { \"-fms-extensions\", \"Don't pedwarn about uses of Microsoft extensions\" },\n   { \"-fno-ms-extensions\", \"\" },"}, {"sha": "279b42d44e43cd9bd06d514e0a9be8ae165cc0fe", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"timevar.h\"\n+#include \"diagnostic.h\"\n \n #ifdef MULTIBYTE_CHARS\n #include \"mbchar.h\"\n@@ -441,6 +442,9 @@ lang_init_options ()\n   flag_bounds_check = -1;\n   /* By default wrap lines at 72 characters.  */\n   set_message_length (72);\n+  /* By default, emit location information once for every\n+     diagnostic message.  */\n+  set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n }\n \n void"}, {"sha": "5c498c9b599e3c72f81be2814eab6faf54bbdcef", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -109,6 +109,10 @@ void (*print_error_function) PARAMS ((const char *)) =\n    Zero means don't wrap lines. */\n \n static int output_maximum_width = 0;\n+\n+/* Used to control every diagnostic message formatting.  Front-ends should\n+   call set_message_prefixing_rule to set up their politics.  */\n+static current_prefixing_rule = DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE;\n \f\n /* Predicate. Return 1 if we're in automatic line wrapping mode.  */\n \n@@ -127,6 +131,13 @@ set_message_length (n)\n     output_maximum_width = n;\n }\n \n+void\n+set_message_prefixing_rule (rule)\n+     int rule;\n+{\n+  current_prefixing_rule = rule;\n+}\n+\n /* Returns true if BUFFER is in line-wrappind mode.  */\n int\n output_is_line_wrapping (buffer)\n@@ -183,6 +194,7 @@ output_set_prefix (buffer, prefix)\n {\n   buffer->prefix = prefix;\n   set_real_maximum_length (buffer);\n+  buffer->emitted_prefix_p = 0;\n }\n \n /* Construct an output BUFFER with PREFIX and of MAXIMUM_LENGTH\n@@ -197,6 +209,8 @@ init_output_buffer (buffer, prefix, maximum_length)\n   buffer->ideal_maximum_length = maximum_length;\n   buffer->line_length = 0;\n   output_set_prefix (buffer, prefix);\n+  buffer->emitted_prefix_p = 0;\n+  buffer->prefixing_rule = current_prefixing_rule;\n   \n   buffer->cursor = NULL;\n }\n@@ -237,8 +251,25 @@ output_emit_prefix (buffer)\n {\n   if (buffer->prefix)\n     {\n-      buffer->line_length = strlen (buffer->prefix);\n-      obstack_grow (&buffer->obstack, buffer->prefix, buffer->line_length);\n+      switch (buffer->prefixing_rule)\n+        {\n+        default:\n+        case DIAGNOSTICS_SHOW_PREFIX_NEVER:\n+          break;\n+\n+        case DIAGNOSTICS_SHOW_PREFIX_ONCE:\n+          if (buffer->emitted_prefix_p)\n+            break;\n+          else\n+            buffer->emitted_prefix_p = 1;\n+          /* Fall through.  */\n+\n+        case DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE:\n+          buffer->line_length += strlen (buffer->prefix);\n+          obstack_grow\n+            (&buffer->obstack, buffer->prefix, buffer->line_length);\n+          break;\n+        }\n     }\n }\n "}, {"sha": "38edfc9c3dbfd61d1ca988fff30aff651023067d", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/856b62442f6fc5e4302ae9ee1ebce8a19bbd8681/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=856b62442f6fc5e4302ae9ee1ebce8a19bbd8681", "patch": "@@ -27,6 +27,10 @@ Boston, MA 02111-1307, USA.  */\n /*  Forward declarations.  */\n typedef struct output_buffer output_buffer;\n \n+#define DIAGNOSTICS_SHOW_PREFIX_ONCE       0x0\n+#define DIAGNOSTICS_SHOW_PREFIX_NEVER      0x1\n+#define DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE 0x2\n+\n /* The type of front-end specific hook that formats trees into an\n    output_buffer.  */\n typedef void (*printer_fn) PARAMS ((output_buffer *));\n@@ -49,6 +53,14 @@ struct output_buffer\n   /* The ideal upper bound of number of characters per line, as suggested\n      by front-end. */  \n   int ideal_maximum_length;\n+  /* Nonzero if current PREFIX was emitted at least once.  */\n+  int emitted_prefix_p;\n+  /* Tells how often current PREFIX should be emitted:\n+     o DIAGNOSTICS_SHOW_PREFIX_NEVER: never - not yet supported;\n+     o DIAGNOSTICS_SHOW_PREFIX_ONCE: emit current PREFIX only once;\n+     o DIAGNOSTICS_SHOW_PREFIX_EVERY_LINE: emit current PREFIX each time\n+       a physical line is started.  */\n+  int prefixing_rule;\n \n   /* Public fields.  These are used by front-ends to extract formats and\n      arguments from the variable argument-list passed to output_format.  */\n@@ -92,5 +104,6 @@ void output_printf\t\tPARAMS ((output_buffer *, const char *,\n                                          ...)) ATTRIBUTE_PRINTF_2;\n void output_format\t\tPARAMS ((output_buffer *, const char *));\n int output_is_line_wrapping\tPARAMS ((output_buffer *));\n+void set_message_prefixing_rule PARAMS ((int));\n \n #endif /* __GCC_DIAGNOSTIC_H__ */"}]}