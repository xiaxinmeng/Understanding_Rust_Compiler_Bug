{"sha": "f3eb9681f02a415755730a84f4a4174fbf2e2b27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNlYjk2ODFmMDJhNDE1NzU1NzMwYTg0ZjRhNDE3NGZiZjJlMmIyNw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-13T00:25:16Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2009-02-13T00:25:16Z"}, "message": "all.h (compare_type_to_native_type_sizes): To...\n\n2009-02-12  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* testsuite/util/thread/all.h (compare_type_to_native_type_sizes): To...\n\t(compare_type_to_native_type): ...this, add alignment check.\n\t* testsuite/30_threads/condition_variable_any/native_handle/\n\ttypesizes.cc: Modify as above.\n\t* testsuite/30_threads/mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/timed_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/thread/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/recursive_mutex/native_handle/typesizes.cc: Same.\n\t* testsuite/30_threads/condition_variable/native_handle/\n\ttypesizes.cc: Same.\n\t* testsuite/30_threads/recursive_timed_mutex/native_handle/\n\ttypesizes.cc: Same.\n\n\t* testsuite/30_threads/thread/cons/1.cc: Add comments.\n\t* testsuite/30_threads/thread/cons/2.cc: Same.\n\t* testsuite/30_threads/thread/cons/3.cc: Same.\n\t* testsuite/30_threads/thread/cons/4.cc: Same.\n\t* testsuite/30_threads/thread/cons/5.cc: Same.\n\t* testsuite/30_threads/thread/cons/6.cc: Same.\n\t* testsuite/30_threads/thread/cons/7.cc: Same.\n\t* testsuite/30_threads/thread/cons/8.cc: Same.\n\n\t* testsuite/30_threads/thread/cons/9.cc: New.\n\t* testsuite/30_threads/thread/cons/moveable.cc: New.\n\n\t* src/condition_variable.cc: Clean up whitespace.\n\t* include/std/condition_variable: Same.\n\nFrom-SVN: r144147", "tree": {"sha": "be2c80ca810b2989aec64480acf5b7a3ea77597e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/be2c80ca810b2989aec64480acf5b7a3ea77597e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3eb9681f02a415755730a84f4a4174fbf2e2b27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3eb9681f02a415755730a84f4a4174fbf2e2b27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3eb9681f02a415755730a84f4a4174fbf2e2b27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3eb9681f02a415755730a84f4a4174fbf2e2b27/comments", "author": null, "committer": null, "parents": [{"sha": "49547707b8850b22e95fd752b407faf1918125bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49547707b8850b22e95fd752b407faf1918125bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49547707b8850b22e95fd752b407faf1918125bc"}], "stats": {"total": 180, "additions": 180, "deletions": 0}, "files": [{"sha": "e93b19a5d08d979767135c4b8c79d9629762276e", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/9.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3eb9681f02a415755730a84f4a4174fbf2e2b27/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3eb9681f02a415755730a84f4a4174fbf2e2b27/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2F9.cc?ref=f3eb9681f02a415755730a84f4a4174fbf2e2b27", "patch": "@@ -0,0 +1,92 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <system_error>\n+#include <testsuite_hooks.h>\n+\n+int total = 0;\n+\n+// Functor has internal state.\n+struct moveable\n+{\n+  int i;\n+\n+  moveable() = default;\n+  ~moveable() = default;\n+  moveable(const moveable& c) = delete;\n+  moveable& operator=(const moveable&) = delete;\n+\n+  moveable(int j): i(j) { }\n+  moveable(moveable&& m): i(m.i) { }\n+\n+  void operator()() const { total += i; }\n+};\n+\n+// Two threads called by same functor type, different functor objects\n+// that have different state. Make sure each thread calls the correct\n+// functor.\n+void test09()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  try\n+    {\n+      // first\n+      moveable m1(60);\n+      std::thread t1(std::move(m1));\n+      t1.join();\n+      VERIFY( total == 60 );\n+\n+      // second\n+      moveable m2(600);\n+      std::thread t2(std::move(m2));\n+      t2.join();\n+      VERIFY( total == 660 ); // Not 120...\n+    }\n+  catch (const std::system_error&)\n+    {\n+      VERIFY( false );\n+    }\n+  catch (...)\n+    {\n+      VERIFY( false );\n+    }\n+}\n+\n+int main()\n+{\n+  test09();\n+  return 0;\n+}"}, {"sha": "970931d5dbcad9bf3de608ea20dc1f4e4e4bf713", "filename": "libstdc++-v3/testsuite/30_threads/thread/cons/moveable.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3eb9681f02a415755730a84f4a4174fbf2e2b27/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3eb9681f02a415755730a84f4a4174fbf2e2b27/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fthread%2Fcons%2Fmoveable.cc?ref=f3eb9681f02a415755730a84f4a4174fbf2e2b27", "patch": "@@ -0,0 +1,88 @@\n+// { dg-do run { target *-*-freebsd* *-*-netbsd* *-*-linux* *-*-solaris* *-*-cygwin *-*-darwin* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthread\" { target *-*-freebsd* *-*-netbsd* *-*-linux* alpha*-*-osf* mips-sgi-irix6* } }\n+// { dg-options \" -std=gnu++0x -pthreads\" { target *-*-solaris* } }\n+// { dg-options \" -std=gnu++0x \" { target *-*-cygwin *-*-darwin* } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-gthreads \"\" }\n+\n+// Copyright (C) 2009 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <thread>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+\n+bool functor_was_called = false;\n+\n+struct moveable\n+{\n+  moveable() = default;\n+  ~moveable() = default;\n+  moveable(const moveable& c) = delete;\n+  moveable& operator=(const moveable&) = delete;\n+  moveable(moveable&&) { }\n+\n+  void operator()() const { }\n+};\n+\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+\n+  moveable m;\n+  std::thread b(std::move(m));\n+  std::thread::id id_initial = b.get_id();\n+  VERIFY( b.joinable() );\n+  VERIFY( id_initial != std::thread::id() );\n+\n+  // copy move construct\n+  // copied new thread old id, original thread default id\n+  std::thread c(std::move(b));\n+  VERIFY( c.joinable() );\n+  VERIFY( c.get_id() == id_initial );\n+  VERIFY( !b.joinable() );\n+  VERIFY( b.get_id() == std::thread::id() );\n+\n+  // copy move assign\n+  std::thread d;\n+  VERIFY( !d.joinable() );\n+  VERIFY( d.get_id() == std::thread::id() );\n+  d = std::move(c);\n+  VERIFY( d.joinable() );\n+  VERIFY( d.get_id() == id_initial );\n+  VERIFY( !c.joinable() );\n+  VERIFY( c.get_id() == std::thread::id() );\n+  \n+  d.join();\n+}\n+\n+int main(void)\n+{\n+  test01();\n+  return 0;\n+}"}]}