{"sha": "30c34af582f54fa59d3983ef5d091b427dab8f7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBjMzRhZjU4MmY1NGZhNTlkMzk4M2VmNWQwOTFiNDI3ZGFiOGY3Zg==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2011-12-30T18:56:49Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2011-12-30T18:56:49Z"}, "message": "bfin.h (REGISTER_MOVE_COST, [...]): Remove.\n\n\t* config/bfin/bfin.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n\t* config/bfin/bfin-protos.h (bfin_register_move_cost,\n\tbfin_memory_move_cost): Remove.\n\t* config/bfin/bfin.c (bfin_register_move_cost,\n\tbfin_memory_move_cost): Make static. Change arguments type from\n\tenum reg_class to reg_class_t and from int to bool.\n\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n\nFrom-SVN: r182745", "tree": {"sha": "6f3bebf5a53f983781354f6898c21fc8b908aa11", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f3bebf5a53f983781354f6898c21fc8b908aa11"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c34af582f54fa59d3983ef5d091b427dab8f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c34af582f54fa59d3983ef5d091b427dab8f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c34af582f54fa59d3983ef5d091b427dab8f7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c34af582f54fa59d3983ef5d091b427dab8f7f/comments", "author": null, "committer": null, "parents": [{"sha": "bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdbdc4e1cd20223c54e0ae4d1e31cc6ea78fa882"}], "stats": {"total": 59, "additions": 23, "deletions": 36}, "files": [{"sha": "60e915fb2040b2ad6be6c5a67ad40b0c4b23ce19", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30c34af582f54fa59d3983ef5d091b427dab8f7f", "patch": "@@ -1,3 +1,13 @@\n+2011-12-30  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/bfin/bfin.h (REGISTER_MOVE_COST, MEMORY_MOVE_COST): Remove.\n+\t* config/bfin/bfin-protos.h (bfin_register_move_cost,\n+\tbfin_memory_move_cost): Remove.\n+\t* config/bfin/bfin.c (bfin_register_move_cost,\n+\tbfin_memory_move_cost): Make static. Change arguments type from\n+\tenum reg_class to reg_class_t and from int to bool.\n+\t(TARGET_REGISTER_MOVE_COST, TARGET_MEMORY_MOVE_COST): Define.\n+\n 2011-12-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* gcov.c (total_lines, total_executed): New global vars."}, {"sha": "a76210f591a30e47d109cadb5fdd34b98bfb539c", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=30c34af582f54fa59d3983ef5d091b427dab8f7f", "patch": "@@ -85,9 +85,6 @@ extern bool bfin_longcall_p (rtx, int);\n extern bool bfin_dsp_memref_p (rtx);\n extern bool bfin_expand_movmem (rtx, rtx, rtx, rtx);\n \n-extern int bfin_register_move_cost (enum machine_mode, enum reg_class,\n-\t\t\t\t    enum reg_class);\n-extern int bfin_memory_move_cost (enum machine_mode, enum reg_class, int in);\n extern enum reg_class secondary_input_reload_class (enum reg_class,\n \t\t\t\t\t\t    enum machine_mode,\n \t\t\t\t\t\t    rtx);"}, {"sha": "28ec6ef0b0ccfac6b0f7ba97a5d775c7a589ae00", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=30c34af582f54fa59d3983ef5d091b427dab8f7f", "patch": "@@ -2149,12 +2149,11 @@ bfin_vector_mode_supported_p (enum machine_mode mode)\n   return mode == V2HImode;\n }\n \n-/* Return the cost of moving data from a register in class CLASS1 to\n-   one in class CLASS2.  A cost of 2 is the default.  */\n+/* Worker function for TARGET_REGISTER_MOVE_COST.  */\n \n-int\n+static int\n bfin_register_move_cost (enum machine_mode mode,\n-\t\t\t enum reg_class class1, enum reg_class class2)\n+\t\t\t reg_class_t class1, reg_class_t class2)\n {\n   /* These need secondary reloads, so they're more expensive.  */\n   if ((class1 == CCREGS && !reg_class_subset_p (class2, DREGS))\n@@ -2177,18 +2176,16 @@ bfin_register_move_cost (enum machine_mode mode,\n   return 2;\n }\n \n-/* Return the cost of moving data of mode M between a\n-   register and memory.  A value of 2 is the default; this cost is\n-   relative to those in `REGISTER_MOVE_COST'.\n+/* Worker function for TARGET_MEMORY_MOVE_COST.\n \n    ??? In theory L1 memory has single-cycle latency.  We should add a switch\n    that tells the compiler whether we expect to use only L1 memory for the\n    program; it'll make the costs more accurate.  */\n \n-int\n+static int\n bfin_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n-\t\t       enum reg_class rclass,\n-\t\t       int in ATTRIBUTE_UNUSED)\n+\t\t       reg_class_t rclass,\n+\t\t       bool in ATTRIBUTE_UNUSED)\n {\n   /* Make memory accesses slightly more expensive than any register-register\n      move.  Also, penalize non-DP registers, since they need secondary\n@@ -5703,6 +5700,12 @@ bfin_conditional_register_usage (void)\n #undef  TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST bfin_address_cost\n \n+#undef TARGET_REGISTER_MOVE_COST\n+#define TARGET_REGISTER_MOVE_COST bfin_register_move_cost\n+\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST bfin_memory_move_cost\n+\n #undef  TARGET_ASM_INTEGER\n #define TARGET_ASM_INTEGER bfin_assemble_integer\n "}, {"sha": "cc3b14f504b41cf4c58ea7bf6df304e2caff0997", "filename": "gcc/config/bfin/bfin.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c34af582f54fa59d3983ef5d091b427dab8f7f/gcc%2Fconfig%2Fbfin%2Fbfin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.h?ref=30c34af582f54fa59d3983ef5d091b427dab8f7f", "patch": "@@ -975,29 +975,6 @@ typedef struct {\n /* Do not put function addr into constant pool */\n #define NO_FUNCTION_CSE 1\n \n-/* A C expression for the cost of moving data from a register in class FROM to\n-   one in class TO.  The classes are expressed using the enumeration values\n-   such as `GENERAL_REGS'.  A value of 2 is the default; other values are\n-   interpreted relative to that.\n-\n-   It is not required that the cost always equal 2 when FROM is the same as TO;\n-   on some machines it is expensive to move between registers if they are not\n-   general registers.  */\n-\n-#define REGISTER_MOVE_COST(MODE, CLASS1, CLASS2) \\\n-   bfin_register_move_cost ((MODE), (CLASS1), (CLASS2))\n-\n-/* A C expression for the cost of moving data of mode M between a\n-   register and memory.  A value of 2 is the default; this cost is\n-   relative to those in `REGISTER_MOVE_COST'.\n-\n-   If moving between registers and memory is more expensive than\n-   between two registers, you should define this macro to express the\n-   relative cost.  */\n-\n-#define MEMORY_MOVE_COST(MODE, CLASS, IN)\t\\\n-  bfin_memory_move_cost ((MODE), (CLASS), (IN))\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE SImode"}]}