{"sha": "5d5832bc7e9f9712490733aa5207576fffd53528", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1ODMyYmM3ZTlmOTcxMjQ5MDczM2FhNTIwNzU3NmZmZmQ1MzUyOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:29:13Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T13:29:13Z"}, "message": "sem_ch6.adb (Analye_Subprogram_Declaration): Code reorganization, for better handling of null procedures.\n\n2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Analye_Subprogram_Declaration): Code reorganization,\n\tfor better handling of null procedures.\n\t(Check_Overriding_Indicator): Do not emit a warning on a missing\n\toverriding indicator on an operator when the type of which the operator\n\tis a primitive is private.\n\nFrom-SVN: r146421", "tree": {"sha": "283a539c686a5714efd4494913ccd87ed59bb2fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/283a539c686a5714efd4494913ccd87ed59bb2fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d5832bc7e9f9712490733aa5207576fffd53528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5832bc7e9f9712490733aa5207576fffd53528", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d5832bc7e9f9712490733aa5207576fffd53528", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d5832bc7e9f9712490733aa5207576fffd53528/comments", "author": null, "committer": null, "parents": [{"sha": "af02a866e673002ed038f42de832dc179c2be70f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af02a866e673002ed038f42de832dc179c2be70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af02a866e673002ed038f42de832dc179c2be70f"}], "stats": {"total": 112, "additions": 84, "deletions": 28}, "files": [{"sha": "05c5b293f87945bf976cbee81b90702f79858917", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5832bc7e9f9712490733aa5207576fffd53528/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5832bc7e9f9712490733aa5207576fffd53528/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5d5832bc7e9f9712490733aa5207576fffd53528", "patch": "@@ -1,3 +1,19 @@\n+2009-04-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_attr.adb (Eval_Attribute, case Length): Catch more cases where\n+\tthis attribute can be evaluated at compile time.\n+\t(Eval_Attribute, case Range_Length): Same improvement\n+\n+\t* sem_eval.ads, sem_eval.adb (Compile_Time_Compare): New procedure\n+\n+2009-04-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Analye_Subprogram_Declaration): Code reorganization,\n+\tfor better handling of null procedures.\n+\t(Check_Overriding_Indicator): Do not emit a warning on a missing\n+\toverriding indicator on an operator when the type of which the operator\n+\tis a primitive is private.\n+\n 2009-04-20  Bob Duff  <duff@adacore.com>\n \n \t* sem.adb, gnat1drv.adb, debug.adb: Use the -gnatd.W switch to control"}, {"sha": "569800c3b6de360f536ebb64ddcf273f056019c7", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 68, "deletions": 28, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d5832bc7e9f9712490733aa5207576fffd53528/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d5832bc7e9f9712490733aa5207576fffd53528/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=5d5832bc7e9f9712490733aa5207576fffd53528", "patch": "@@ -2609,13 +2609,56 @@ package body Sem_Ch6 is\n    ------------------------------------\n \n    procedure Analyze_Subprogram_Declaration (N : Node_Id) is\n-      Designator : constant Entity_Id :=\n-                     Analyze_Subprogram_Specification (Specification (N));\n+      Loc        : constant Source_Ptr := Sloc (N);\n+      Designator : Entity_Id;\n+      Form       : Node_Id;\n       Scop       : constant Entity_Id := Current_Scope;\n+      Null_Body  : Node_Id := Empty;\n \n    --  Start of processing for Analyze_Subprogram_Declaration\n \n    begin\n+      --  For a null procedure. capture the profile before analysis, for\n+      --  expansion at the freeze point, and at each point of call.\n+      --  The body will only be used if the procedure has preconditions.\n+      --  In that case the body is analyzed at the freeze point.\n+\n+      if Nkind (Specification (N)) = N_Procedure_Specification\n+        and then Null_Present (Specification (N))\n+        and then Expander_Active\n+      then\n+         Null_Body :=\n+           Make_Subprogram_Body (Loc,\n+             Specification =>\n+               New_Copy_Tree (Specification (N)),\n+             Declarations => New_List,\n+             Handled_Statement_Sequence =>\n+               Make_Handled_Sequence_Of_Statements (Loc,\n+                 Statements => New_List (Make_Null_Statement (Loc))));\n+\n+         --  Create new entities for body and formals.\n+\n+         Set_Defining_Unit_Name (Specification (Null_Body),\n+           Make_Defining_Identifier (Loc, Chars (Defining_Entity (N))));\n+         Set_Corresponding_Body (N, Defining_Entity (Null_Body));\n+\n+         Form := First (Parameter_Specifications (Specification (Null_Body)));\n+         while Present (Form) loop\n+            Set_Defining_Identifier (Form,\n+              Make_Defining_Identifier (Loc,\n+                Chars (Defining_Identifier (Form))));\n+            Next (Form);\n+         end loop;\n+\n+         if Is_Protected_Type (Current_Scope) then\n+            Error_Msg_N\n+              (\"protected operation cannot be a null procedure\", N);\n+         end if;\n+      end if;\n+\n+      Designator :=  Analyze_Subprogram_Specification (Specification (N));\n+      Generate_Definition (Designator);\n+\n       if Debug_Flag_C then\n          Write_Str (\"==> subprogram spec \");\n          Write_Name (Chars (Designator));\n@@ -2625,19 +2668,19 @@ package body Sem_Ch6 is\n          Indent;\n       end if;\n \n-      Generate_Definition (Designator);\n+      if Nkind (Specification (N)) = N_Procedure_Specification\n+        and then Null_Present (Specification (N))\n+      then\n+         Set_Has_Completion (Designator);\n \n-      --  Check for RCI unit subprogram declarations for illegal inlined\n-      --  subprograms and subprograms having access parameter or limited\n-      --  parameter without Read and Write attributes (RM E.2.3(12-13)).\n+         if Present (Null_Body) then\n+            Set_Corresponding_Body (N, Defining_Entity (Null_Body));\n+            Set_Body_To_Inline (N, Null_Body);\n+            Set_Is_Inlined (Designator);\n+         end if;\n+      end if;\n \n       Validate_RCI_Subprogram_Declaration (N);\n-\n-      Trace_Scope\n-        (N,\n-         Defining_Entity (N),\n-         \" Analyze subprogram spec: \");\n-\n       New_Overloaded_Entity (Designator);\n       Check_Delayed_Subprogram (Designator);\n \n@@ -2743,21 +2786,6 @@ package body Sem_Ch6 is\n       Generate_Reference_To_Formals (Designator);\n       Check_Eliminated (Designator);\n \n-      --  Ada 2005: if procedure is declared with \"is null\" qualifier,\n-      --  it requires no body.\n-\n-      if Nkind (Specification (N)) = N_Procedure_Specification\n-        and then Null_Present (Specification (N))\n-      then\n-         Set_Has_Completion (Designator);\n-         Set_Is_Inlined (Designator);\n-\n-         if Is_Protected_Type (Current_Scope) then\n-            Error_Msg_N\n-              (\"protected operation cannot be a null procedure\", N);\n-         end if;\n-      end if;\n-\n       if Debug_Flag_C then\n          Outdent;\n          Write_Str (\"<== subprogram spec \");\n@@ -4395,7 +4423,19 @@ package body Sem_Ch6 is\n                  (Unit_File_Name (Get_Source_Unit (Subp)))\n          then\n             Set_Is_Overriding_Operation (Subp);\n-            Style.Missing_Overriding (Decl, Subp);\n+\n+            --  If style checks are enabled, indicate that the indicator\n+            --  is missing. However, at the point of declaration, the type\n+            --  of which this is a primitive operation may be private, in\n+            --  which case the indicator would be premature.\n+\n+            if Has_Private_Declaration (Etype (Subp))\n+              or else Has_Private_Declaration (Etype (First_Formal (Subp)))\n+            then\n+               null;\n+            else\n+               Style.Missing_Overriding (Decl, Subp);\n+            end if;\n          end if;\n \n       elsif Must_Override (Spec) then"}]}