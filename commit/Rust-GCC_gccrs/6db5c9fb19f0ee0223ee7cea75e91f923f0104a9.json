{"sha": "6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "node_id": "C_kwDOANBUbNoAKDZkYjVjOWZiMTlmMGVlMDIyM2VlN2NlYTc1ZTkxZjkyM2YwMTA0YTk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-07T09:52:11Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T13:26:08Z"}, "message": "privacy: reachability: Add better implementation for StructStruct", "tree": {"sha": "77eee933a1b1798d36eba90edffccaef2a1bb5af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77eee933a1b1798d36eba90edffccaef2a1bb5af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bb4d746a037f9ebea8f91a32b8785223c4e2d33", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bb4d746a037f9ebea8f91a32b8785223c4e2d33"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "ea92fa50fef11c488ead9c65270847fc20ef0d52", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "patch": "@@ -65,17 +65,14 @@ void\n ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n {\n   auto struct_reach = ReachLevel::Unreachable;\n-  // FIXME: This feels very wrong. Should we check for `has_visibility`\n-  // beforehand? Is it just private otherwise? Should the `HIR::Visibility` also\n-  // keep variants for private items?\n   if (struct_item.get_visibility ().is_public ())\n-    struct_reach = ReachLevel::Reachable;\n+    struct_reach = current_level;\n \n   struct_reach\n     = ctx.update_reachability (struct_item.get_mappings (), struct_reach);\n \n-  // FIXME: We need to also visit the fields as they might have their own set\n-  // of reachability levels\n+  // FIXME: Do we need to also visit the fields as they might have their own set\n+  // of reachability levels? Can they?\n \n   for (auto &field : struct_item.get_fields ())\n     ctx.update_reachability (field.get_mappings (), struct_reach);"}, {"sha": "7518ad9aeb9966cc21ed70e44768ce6592322376", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6db5c9fb19f0ee0223ee7cea75e91f923f0104a9/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=6db5c9fb19f0ee0223ee7cea75e91f923f0104a9", "patch": "@@ -33,11 +33,15 @@ namespace Privacy {\n // to reach more and more nodes until nothing has changed anymore.\n // Do we need to reproduce this behavior? How long does it take to do this?\n \n+/**\n+ * The ReachabilityVisitor tries to reach all items possible in the crate,\n+ * according to their privacy level.\n+ */\n class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n {\n public:\n   ReachabilityVisitor (PrivacyContext &ctx)\n-    : current_level (ReachLevel::Unreachable), ctx (ctx)\n+    : current_level (ReachLevel::Reachable), ctx (ctx)\n   {}\n \n   virtual void visit (HIR::Module &mod);"}]}