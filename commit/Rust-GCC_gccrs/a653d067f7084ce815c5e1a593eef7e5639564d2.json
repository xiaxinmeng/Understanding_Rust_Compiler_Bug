{"sha": "a653d067f7084ce815c5e1a593eef7e5639564d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY1M2QwNjdmNzA4NGNlODE1YzVlMWE1OTNlZWY3ZTU2Mzk1NjRkMg==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-08-23T13:02:17Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-08-23T13:02:17Z"}, "message": "re PR c++/3765 (member using declaration can't change access from public)\n\n\tPR c++/3765\n\t* search.c (dfs_access_in_type): Fix typo in comment.\n\t(dfs_accessible_queue_p): Likewise.\n\t(dfs_accessible_p): Only terminate when a friend is found.\n\t(accessible_p): Return immediately if access_in_type allows\n\taccess.\n\n\t* g++.dg/parse/access6.C: New test.\n\nFrom-SVN: r70733", "tree": {"sha": "d0952b4220f2626a3bb10135e5bd3d812fa871c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0952b4220f2626a3bb10135e5bd3d812fa871c2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a653d067f7084ce815c5e1a593eef7e5639564d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a653d067f7084ce815c5e1a593eef7e5639564d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a653d067f7084ce815c5e1a593eef7e5639564d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a653d067f7084ce815c5e1a593eef7e5639564d2/comments", "author": null, "committer": null, "parents": [{"sha": "19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19db77cefec38a1a0a3eb69007f01e8a1c108d5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19db77cefec38a1a0a3eb69007f01e8a1c108d5d"}], "stats": {"total": 82, "additions": 61, "deletions": 21}, "files": [{"sha": "5ae0891f7c196bc996403092e69c9269af66a911", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a653d067f7084ce815c5e1a593eef7e5639564d2", "patch": "@@ -1,3 +1,12 @@\n+2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/3765\n+\t* search.c (dfs_access_in_type): Fix typo in comment.\n+\t(dfs_accessible_queue_p): Likewise.\n+\t(dfs_accessible_p): Only terminate when a friend is found.\n+\t(accessible_p): Return immediately if access_in_type allows\n+\taccess.\n+\n 2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/641, c++/11876"}, {"sha": "29e6172c325fc2003ee73b5c8d43a637240440a1", "filename": "gcc/cp/search.c", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=a653d067f7084ce815c5e1a593eef7e5639564d2", "patch": "@@ -625,7 +625,7 @@ dfs_access_in_type (tree binfo, void *data)\n \n   if (context_for_name_lookup (decl) == type)\n     {\n-      /* If we have desceneded to the scope of DECL, just note the\n+      /* If we have descended to the scope of DECL, just note the\n \t appropriate access.  */\n       if (TREE_PRIVATE (decl))\n \taccess = ak_private;\n@@ -739,7 +739,7 @@ access_in_type (tree type, tree decl)\n   return BINFO_ACCESS (binfo);\n }\n \n-/* Called from dfs_accessible_p via dfs_walk.  */\n+/* Called from accessible_p via dfs_walk.  */\n \n static tree\n dfs_accessible_queue_p (tree derived, int ix, void *data ATTRIBUTE_UNUSED)\n@@ -758,20 +758,17 @@ dfs_accessible_queue_p (tree derived, int ix, void *data ATTRIBUTE_UNUSED)\n   return binfo;\n }\n \n-/* Called from dfs_accessible_p via dfs_walk.  */\n+/* Called from accessible_p via dfs_walk.  */\n \n static tree\n-dfs_accessible_p (tree binfo, void *data)\n+dfs_accessible_p (tree binfo, void *data ATTRIBUTE_UNUSED)\n {\n-  int protected_ok = data != 0;\n   access_kind access;\n \n   BINFO_MARKED (binfo) = 1;\n   access = BINFO_ACCESS (binfo);\n-  if (access == ak_public || (access == ak_protected && protected_ok))\n-    return binfo;\n-  else if (access != ak_none\n-\t   && is_friend (BINFO_TYPE (binfo), current_scope ()))\n+  if (access != ak_none\n+      && is_friend (BINFO_TYPE (binfo), current_scope ()))\n     return binfo;\n \n   return NULL_TREE;\n@@ -898,6 +895,7 @@ accessible_p (tree type, tree decl)\n {\n   tree binfo;\n   tree t;\n+  access_kind access;\n \n   /* Nonzero if it's OK to access DECL if it has protected\n      accessibility in TYPE.  */\n@@ -958,18 +956,22 @@ accessible_p (tree type, tree decl)\n \n   /* Compute the accessibility of DECL in the class hierarchy\n      dominated by type.  */\n-  access_in_type (type, decl);\n-  /* Walk the hierarchy again, looking for a base class that allows\n-     access.  */\n-  t = dfs_walk (binfo, dfs_accessible_p, \n-\t\tdfs_accessible_queue_p,\n-\t\tprotected_ok ? &protected_ok : 0);\n-  /* Clear any mark bits.  Note that we have to walk the whole tree\n-     here, since we have aborted the previous walk from some point\n-     deep in the tree.  */\n-  dfs_walk (binfo, dfs_unmark, 0,  0);\n-\n-  return t != NULL_TREE;\n+  access = access_in_type (type, decl);\n+  if (access == ak_public\n+      || (access == ak_protected && protected_ok))\n+    return 1;\n+  else\n+    {\n+      /* Walk the hierarchy again, looking for a base class that allows\n+\t access.  */\n+      t = dfs_walk (binfo, dfs_accessible_p, dfs_accessible_queue_p, 0);\n+      /* Clear any mark bits.  Note that we have to walk the whole tree\n+\t here, since we have aborted the previous walk from some point\n+\t deep in the tree.  */\n+      dfs_walk (binfo, dfs_unmark, 0,  0);\n+\n+      return t != NULL_TREE;\n+    }\n }\n \n struct lookup_field_info {"}, {"sha": "0432dafa6b538362398c03bf3109027b6a8496b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a653d067f7084ce815c5e1a593eef7e5639564d2", "patch": "@@ -1,3 +1,8 @@\n+2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/3765\n+\t* g++.dg/parse/access6.C: New test.\n+\n 2003-08-23  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/641, c++/11876"}, {"sha": "33d5090585491132cd922fc774017460c1000f9b", "filename": "gcc/testsuite/g++.dg/parse/access6.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a653d067f7084ce815c5e1a593eef7e5639564d2/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Faccess6.C?ref=a653d067f7084ce815c5e1a593eef7e5639564d2", "patch": "@@ -0,0 +1,24 @@\n+// { dg-do compile }\n+\n+// Origin: David Baron <dbaron@fas.harvard.edu>\n+\n+// PR c++/3765: Changing access from public to private by member\n+// using declaration.\n+\n+class A\n+{\n+  public:\n+    int foo() { return 1; }\t// { dg-error \"inaccessible\" }\n+};\n+\n+class B : public A\n+{\n+  private:\n+    using A::foo;\n+};\n+\n+int main()\n+{\n+  B b;\n+  return b.foo();\t\t// { dg-error \"this context\" }\n+}"}]}