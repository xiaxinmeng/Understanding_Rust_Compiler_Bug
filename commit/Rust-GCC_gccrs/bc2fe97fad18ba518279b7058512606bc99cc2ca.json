{"sha": "bc2fe97fad18ba518279b7058512606bc99cc2ca", "node_id": "C_kwDOANBUbNoAKGJjMmZlOTdmYWQxOGJhNTE4Mjc5YjcwNTg1MTI2MDZiYzk5Y2MyY2E", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-07-21T22:35:35Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-08-29T08:39:36Z"}, "message": "Experiment with adding an error code to an error", "tree": {"sha": "cd802e34bf2e896ec27ff69fc05cdec4037c4af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cd802e34bf2e896ec27ff69fc05cdec4037c4af2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc2fe97fad18ba518279b7058512606bc99cc2ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2fe97fad18ba518279b7058512606bc99cc2ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc2fe97fad18ba518279b7058512606bc99cc2ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc2fe97fad18ba518279b7058512606bc99cc2ca/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05f1f87274a4ed13c0ab84de77d4253776b46637", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f1f87274a4ed13c0ab84de77d4253776b46637", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f1f87274a4ed13c0ab84de77d4253776b46637"}], "stats": {"total": 69, "additions": 66, "deletions": 3}, "files": [{"sha": "79daf6b163c9fcacae33ef6d975c93ad3cbf828d", "filename": "gcc/rust/rust-diagnostics.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.cc?ref=bc2fe97fad18ba518279b7058512606bc99cc2ca", "patch": "@@ -166,6 +166,17 @@ rust_error_at (const Location location, const char *fmt, ...)\n   va_end (ap);\n }\n \n+void\n+rust_error_at (const RichLocation &location, const ErrorCode code,\n+\t       const char *fmt, ...)\n+{\n+  va_list ap;\n+\n+  va_start (ap, fmt);\n+  rust_be_error_at (location, code, expand_message (fmt, ap));\n+  va_end (ap);\n+}\n+\n void\n rust_warning_at (const Location location, int opt, const char *fmt, ...)\n {"}, {"sha": "35a1727f6a3823ee9d8b3907a5d442469b01fa10", "filename": "gcc/rust/rust-diagnostics.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-diagnostics.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-diagnostics.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-diagnostics.h?ref=bc2fe97fad18ba518279b7058512606bc99cc2ca", "patch": "@@ -50,6 +50,18 @@\n \n // clang-format off\n // simple location\n+\n+struct ErrorCode\n+{\n+  explicit ErrorCode (const char *str) : m_str (str)\n+  {\n+    gcc_assert (str);\n+    gcc_assert (str[0] == 'E');\n+  }\n+\n+  const char *m_str;\n+};\n+\n extern void\n rust_internal_error_at (const Location, const char *fmt, ...)\n   RUST_ATTRIBUTE_GCC_DIAG (2, 3)\n@@ -72,6 +84,9 @@ rust_inform (const Location, const char *fmt, ...)\n extern void\n rust_error_at (const RichLocation &, const char *fmt, ...)\n   RUST_ATTRIBUTE_GCC_DIAG (2, 3);\n+extern void\n+rust_error_at (const RichLocation &, const ErrorCode, const char *fmt, ...)\n+  RUST_ATTRIBUTE_GCC_DIAG (3, 4);\n // clang-format on\n \n // These interfaces provide a way for the front end to ask for\n@@ -97,6 +112,9 @@ rust_be_error_at (const Location, const std::string &errmsg);\n extern void\n rust_be_error_at (const RichLocation &, const std::string &errmsg);\n extern void\n+rust_be_error_at (const RichLocation &, const ErrorCode,\n+\t\t  const std::string &errmsg);\n+extern void\n rust_be_warning_at (const Location, int opt, const std::string &warningmsg);\n extern void\n rust_be_fatal_error (const Location, const std::string &errmsg)"}, {"sha": "70b3cf267a1d19253eff1c714630158bcedcaf21", "filename": "gcc/rust/rust-gcc-diagnostics.cc", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-gcc-diagnostics.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Frust-gcc-diagnostics.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc-diagnostics.cc?ref=bc2fe97fad18ba518279b7058512606bc99cc2ca", "patch": "@@ -22,6 +22,7 @@\n #include \"rust-diagnostics.h\"\n \n #include \"options.h\"\n+#include \"diagnostic-metadata.h\"\n \n void\n rust_be_internal_error_at (const Location location, const std::string &errmsg)\n@@ -70,6 +71,39 @@ rust_be_error_at (const RichLocation &location, const std::string &errmsg)\n   error_at (&gcc_loc, \"%s\", errmsg.c_str ());\n }\n \n+class rust_error_code_rule : public diagnostic_metadata::rule\n+{\n+public:\n+  rust_error_code_rule (const ErrorCode code) : m_code (code) {}\n+\n+  char *make_description () const final override\n+  {\n+    return xstrdup (m_code.m_str);\n+  }\n+\n+  char *make_url () const final override\n+  {\n+    return concat (\"https://doc.rust-lang.org/error-index.html#\",\n+\t\t   m_code.m_str,\n+\t\t   NULL);\n+  }\n+\n+private:\n+  const ErrorCode m_code;\n+};\n+\n+void\n+rust_be_error_at (const RichLocation &location, const ErrorCode code,\n+\t\t  const std::string &errmsg)\n+{\n+  /* TODO: 'error_at' would like a non-'const' 'rich_location *'.  */\n+  rich_location &gcc_loc = const_cast<rich_location &> (location.get ());\n+  diagnostic_metadata m;\n+  rust_error_code_rule rule (code);\n+  m.add_rule (rule);\n+  error_meta (&gcc_loc, m, \"%s\", errmsg.c_str ());\n+}\n+\n void\n rust_be_get_quotechars (const char **open_qu, const char **close_qu)\n {"}, {"sha": "708880e0019f042fb504405cf475e3eddf4bdef3", "filename": "gcc/rust/typecheck/rust-casts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Frust%2Ftypecheck%2Frust-casts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-casts.cc?ref=bc2fe97fad18ba518279b7058512606bc99cc2ca", "patch": "@@ -283,7 +283,7 @@ TypeCastRules::emit_cast_error () const\n   RichLocation r (locus);\n   r.add_range (from.get_locus ());\n   r.add_range (to.get_locus ());\n-  rust_error_at (r, \"invalid cast %<%s%> to %<%s%>\",\n+  rust_error_at (r, ErrorCode (\"E0054\"), \"invalid cast %<%s%> to %<%s%>\",\n \t\t from.get_ty ()->get_name ().c_str (),\n \t\t to.get_ty ()->get_name ().c_str ());\n }"}, {"sha": "9652915fe1170e10add8b4b12234afd15efa256a", "filename": "gcc/testsuite/rust/compile/bad_as_bool_char.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc2fe97fad18ba518279b7058512606bc99cc2ca/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbad_as_bool_char.rs?ref=bc2fe97fad18ba518279b7058512606bc99cc2ca", "patch": "@@ -5,13 +5,13 @@ pub fn main ()\n   let fone = t as f32;   // { dg-error \"invalid cast\" }\n   let fzero = f as f64;  // { dg-error \"invalid cast\" }\n \n-  let nb = 0u8 as bool;  // { dg-error \"invalid cast\" }\n+  let nb = 0u8 as bool;  // { dg-error \"invalid cast .u8. to .bool. \\\\\\[E0054\\\\\\]\" }\n   let nc = true as char; // { dg-error \"invalid cast\" }\n \n   let a = 'a';\n   let b = 'b';\n   let fa = a as f32;     // { dg-error \"invalid cast\" }\n-  let bb = b as bool;    // { dg-error \"invalid cast\" }\n+  let bb = b as bool;    // { dg-error \"invalid cast .char. to .bool. \\\\\\[E0054\\\\\\]\" }\n \n   let t32: u32 = 33;\n   let ab = t32 as char;  // { dg-error \"invalid cast\" }"}]}