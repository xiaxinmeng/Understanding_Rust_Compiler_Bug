{"sha": "e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBlMzMwMGNiMTJiMjRhZTFjMjg5OGM3MjUzYmIzZDgwZjMwZDQxOQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2010-03-23T15:03:50Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2010-03-23T15:03:50Z"}, "message": "value.cc: New.\n\n2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* testsuite/20_util/is_trivial/value.cc: New.\n\t* testsuite/20_util/is_standard_layout/value.cc: Likewise.\n\t* testsuite/20_util/is_pod/value.cc: Extend.\n\nFrom-SVN: r157671", "tree": {"sha": "a70515e673fdee206e3db91b193c61b14845df37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a70515e673fdee206e3db91b193c61b14845df37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/comments", "author": null, "committer": null, "parents": [{"sha": "d85b51449bb71a8366587f484e02b74bb9038114", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d85b51449bb71a8366587f484e02b74bb9038114", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d85b51449bb71a8366587f484e02b74bb9038114"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "35da60f4a57c5056226fb7a47a2e6e51decc60b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "patch": "@@ -1,3 +1,9 @@\n+2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* testsuite/20_util/is_trivial/value.cc: New.\n+\t* testsuite/20_util/is_standard_layout/value.cc: Likewise.\n+\t* testsuite/20_util/is_pod/value.cc: Extend.\n+\n 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* include/bits/stl_algobase.h (lower_bound(_ForwardIterator,"}, {"sha": "6f3d109143d0e1f7eaf7f88794bbf3d07e44cf67", "filename": "libstdc++-v3/testsuite/20_util/is_pod/value.cc", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_pod%2Fvalue.cc?ref=e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "patch": "@@ -22,6 +22,34 @@\n #include <testsuite_hooks.h>\n #include <testsuite_tr1.h>\n \n+struct NType   // neither trivial nor standard-layout\n+{\n+  int i;\n+  int j;\n+  virtual ~NType();\n+};\n+\n+struct TType   // trivial but not standard-layout\n+{\n+  int i;\n+\n+private:\n+  int j;\n+};\n+\n+struct SLType  // standard-layout but not trivial\n+{\n+  int i;\n+  int j;\n+  ~SLType();\n+};\n+\n+struct PODType // both trivial and standard-layout\n+{\n+  int i;\n+  int j;\n+};\n+\n void test01()\n {\n   bool test __attribute__((unused)) = true;\n@@ -43,8 +71,12 @@ void test01()\n   VERIFY( (test_category<is_pod, int (ClassType::*[2][3])>(true)) );\n   VERIFY( (test_category<is_pod, int (ClassType::*[][2][3]) (int)>(true)) );\n   VERIFY( (test_category<is_pod, ClassType>(true)) );\n+  VERIFY( (test_category<is_pod, PODType>(true)) );\n \n   VERIFY( (test_category<is_pod, void>(false)) );\n+  VERIFY( (test_category<is_pod, NType>(false)) );\n+  VERIFY( (test_category<is_pod, TType>(false)) );\n+  VERIFY( (test_category<is_pod, SLType>(false)) );\n }\n \n int main()"}, {"sha": "dbbb7fadd30aa2c80cef6a4d7e1d1771617f66b7", "filename": "libstdc++-v3/testsuite/20_util/is_standard_layout/value.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_standard_layout%2Fvalue.cc?ref=e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+struct NType   // neither trivial nor standard-layout\n+{\n+  int i;\n+  int j;\n+  virtual ~NType();\n+};\n+\n+struct TType   // trivial but not standard-layout\n+{\n+  int i;\n+\n+private:\n+  int j;\n+};\n+\n+struct SLType  // standard-layout but not trivial\n+{\n+  int i;\n+  int j;\n+  ~SLType();\n+};\n+\n+struct PODType // both trivial and standard-layout\n+{\n+  int i;\n+  int j;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_standard_layout;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_standard_layout, SLType>(true)) );\n+  VERIFY( (test_category<is_standard_layout, PODType>(true)) );\n+\n+  VERIFY( (test_category<is_standard_layout, NType>(false)) );\n+  VERIFY( (test_category<is_standard_layout, TType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2024e8e36530a0bd4bba5fc6b1e21a013e2d362a", "filename": "libstdc++-v3/testsuite/20_util/is_trivial/value.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0e3300cb12b24ae1c2898c7253bb3d80f30d419/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_trivial%2Fvalue.cc?ref=e0e3300cb12b24ae1c2898c7253bb3d80f30d419", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// 2010-03-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+//\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+#include <testsuite_hooks.h>\n+#include <testsuite_tr1.h>\n+\n+struct NType   // neither trivial nor standard-layout\n+{\n+  int i;\n+  int j;\n+  virtual ~NType();\n+};\n+\n+struct TType   // trivial but not standard-layout\n+{\n+  int i;\n+\n+private:\n+  int j;\n+};\n+\n+struct SLType  // standard-layout but not trivial\n+{\n+  int i;\n+  int j;\n+  ~SLType();\n+};\n+\n+struct PODType // both trivial and standard-layout\n+{\n+  int i;\n+  int j;\n+};\n+\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using std::is_trivial;\n+  using namespace __gnu_test;\n+\n+  VERIFY( (test_category<is_trivial, TType>(true)) );\n+  VERIFY( (test_category<is_trivial, PODType>(true)) );\n+\n+  VERIFY( (test_category<is_trivial, NType>(false)) );\n+  VERIFY( (test_category<is_trivial, SLType>(false)) );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}