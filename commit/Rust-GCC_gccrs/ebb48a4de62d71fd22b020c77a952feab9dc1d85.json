{"sha": "ebb48a4de62d71fd22b020c77a952feab9dc1d85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJiNDhhNGRlNjJkNzFmZDIyYjAyMGM3N2E5NTJmZWFiOWRjMWQ4NQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2001-05-28T20:57:50Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2001-05-28T20:57:50Z"}, "message": "c-tree.texi, [...]: Remove trailing whitespace.\n\n\t* c-tree.texi, contrib.texi, cpp.texi, extend.texi, gcc.texi,\n\tgcov.texi, install.texi, md.texi, objc.texi, rtl.texi, tm.texi:\n\tRemove trailing whitespace.\n\nFrom-SVN: r42678", "tree": {"sha": "4069e7efc940c56a2529eab139999fa2f8d3ecde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4069e7efc940c56a2529eab139999fa2f8d3ecde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebb48a4de62d71fd22b020c77a952feab9dc1d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb48a4de62d71fd22b020c77a952feab9dc1d85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebb48a4de62d71fd22b020c77a952feab9dc1d85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebb48a4de62d71fd22b020c77a952feab9dc1d85/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f7de4b812cea8e33c0185e68b03f9f489e42282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f7de4b812cea8e33c0185e68b03f9f489e42282", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f7de4b812cea8e33c0185e68b03f9f489e42282"}], "stats": {"total": 344, "additions": 175, "deletions": 169}, "files": [{"sha": "866f6fe5f91825c5f2aa9f21851f890d3f01806f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -1,3 +1,9 @@\n+2001-05-28  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* c-tree.texi, contrib.texi, cpp.texi, extend.texi, gcc.texi,\n+\tgcov.texi, install.texi, md.texi, objc.texi, rtl.texi, tm.texi:\n+\tRemove trailing whitespace.\n+\n 2001-05-28  Gerald Pfeifer  <pfeifer@dbai.tuwien.ac.at>\n \n \t* doc/install.texi (Specific): http://reality.sgi.com/ariel/freeware/"}, {"sha": "ad9cb94f05190593d1692f22c5701965aef252bb", "filename": "gcc/c-tree.texi", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -49,7 +49,7 @@ should submit your patches for inclusion in GCC.\n @menu\n * Deficiencies::        Topics net yet covered in this document.\n * Tree overview::       All about @code{tree}s.\n-* Types::               Fundamental and aggregate types.        \n+* Types::               Fundamental and aggregate types.\n * Scopes::              Namespaces and classes.\n * Functions::           Overloading, function bodies, and linkage.\n * Declarations::        Type declarations and variables.\n@@ -348,7 +348,7 @@ This macro holds if the type is @code{restrict}-qualified.\n @item CP_TYPE_CONST_NON_VOLATILE_P\n This predicate holds for a type that is @code{const}-qualified, but\n @emph{not} @code{volatile}-qualified; other cv-qualifiers are ignored as\n-well: only the @code{const}-ness is tested. \n+well: only the @code{const}-ness is tested.\n \n @item TYPE_MAIN_VARIANT\n This macro returns the unqualified version of a type.  It may be applied\n@@ -377,7 +377,7 @@ named class type.\n \n @item CP_INTEGRAL_TYPE\n This predicate holds if the type is an integral type.  Notice that in\n-C++, enumerations are @emph{not} integral types. \n+C++, enumerations are @emph{not} integral types.\n \n @item ARITHMETIC_TYPE_P\n This predicate holds if the type is an integral type (in the C++ sense)\n@@ -394,7 +394,7 @@ This predicate holds if the type is a pointer to data member.\n \n @item TYPE_PTR_P\n This predicate holds if the type is a pointer type, and the pointee is\n-not a data member. \n+not a data member.\n \n @item TYPE_PTRFN_P\n This predicate holds for a pointer to function type.\n@@ -450,7 +450,7 @@ double} types.  The number of bits in the floating-point representation\n is given by @code{TYPE_PRECISION}, as in the @code{INTEGER_TYPE} case.\n \n @item COMPLEX_TYPE\n-Used to represent GCC builtin @code{__complex__} data types.  The \n+Used to represent GCC builtin @code{__complex__} data types.  The\n @code{TREE_TYPE} is the type of the real and imaginary parts.\n \n @item ENUMERAL_TYPE\n@@ -554,7 +554,7 @@ base-class.\n @item TYPEOF_TYPE\n Used to represent the @code{__typeof__} extension.  The\n @code{TYPE_FIELDS} is the expression the type of which is being\n-represented. \n+represented.\n \n @item UNION_TYPE\n Used to represent @code{union} types.  For more information, @pxref{Classes}.\n@@ -659,7 +659,7 @@ the @code{global_namespace} is @code{NULL_TREE}.\n @item DECL_NAMESPACE_ALIAS\n If this declaration is for a namespace alias, then\n @code{DECL_NAMESPACE_ALIAS} is the namespace for which this one is an\n-alias.  \n+alias.\n \n Do not attempt to use @code{cp_namespace_decls} for a namespace which is\n an alias.  Instead, follow @code{DECL_NAMESPACE_ALIAS} links until you\n@@ -668,14 +668,14 @@ reach an ordinary, non-alias, namespace, and call\n \n @item DECL_NAMESPACE_STD_P\n This predicate holds if the namespace is the special @code{::std}\n-namespace. \n+namespace.\n \n @item cp_namespace_decls\n This function will return the declarations contained in the namespace,\n including types, overloaded functions, other namespaces, and so forth.\n If there are no declarations, this function will return\n @code{NULL_TREE}.  The declarations are connected through their\n-@code{TREE_CHAIN} fields.  \n+@code{TREE_CHAIN} fields.\n \n Although most entries on this list will be declarations,\n @code{TREE_LIST} nodes may also appear.  In this case, the\n@@ -778,7 +778,7 @@ virtually.\n \n FIXME: Talk about @code{TYPE_NONCOPIED_PARTS}.\n \n-The following macros can be used on a tree node representing a class-type. \n+The following macros can be used on a tree node representing a class-type.\n \n @ftable @code\n @item LOCAL_CLASS_P\n@@ -795,30 +795,30 @@ default constructor.\n \n @item CLASSTYPE_HAS_MUTABLE\n @item TYPE_HAS_MUTABLE_P\n-These predicates hold for a class-type having a mutable data member. \n+These predicates hold for a class-type having a mutable data member.\n \n @item CLASSTYPE_NON_POD_P\n This predicate holds only for class-types that are not PODs.\n \n @item TYPE_HAS_NEW_OPERATOR\n-This predicate holds for a class-type that defines \n+This predicate holds for a class-type that defines\n @code{operator new}.\n \n @item TYPE_HAS_ARRAY_NEW_OPERATOR\n-This predicate holds for a class-type for which \n+This predicate holds for a class-type for which\n @code{operator new[]} is defined.\n \n @item TYPE_OVERLOADS_CALL_EXPR\n-This predicate holds for class-type for which the function call \n+This predicate holds for class-type for which the function call\n @code{operator()} is overloaded.\n \n @item TYPE_OVERLOADS_ARRAY_REF\n-This predicate holds for a class-type that overloads \n+This predicate holds for a class-type that overloads\n @code{operator[]}\n \n @item TYPE_OVERLOADS_ARROW\n This predicate holds for a class-type for which @code{operator->} is\n-overloaded. \n+overloaded.\n \n @end ftable\n \n@@ -872,7 +872,7 @@ compiler (like @code{__builtin_memcpy}), this will be the string\n This macro returns the line number at which the entity was declared, as\n an @code{int}.\n \n-@item DECL_ARTIFICIAL \n+@item DECL_ARTIFICIAL\n This predicate holds if the declaration was implicitly generated by the\n compiler.  For example, this predicate will hold of an implicitly\n declared member function, or of the @code{TYPE_DECL} implicitly\n@@ -897,7 +897,7 @@ This predicate holds if the entity was declared at a class scope.\n \n @item DECL_FUNCTION_SCOPE_P\n This predicate holds if the entity was declared inside a function\n-body. \n+body.\n \n @end ftable\n \n@@ -936,7 +936,7 @@ than the @code{TYPE_SIZE} and @code{TYPE_ALIGN} given by the\n variable to give it a particular size and alignment. You may use the\n predicates @code{DECL_THIS_STATIC} or @code{DECL_THIS_EXTERN} to test\n whether the storage class specifiers @code{static} or @code{extern} were\n-used to declare a variable. \n+used to declare a variable.\n \n If this variable is initialized (but does not require a constructor),\n the @code{DECL_INITIAL} will be an expression for the initializer.  The\n@@ -1088,7 +1088,7 @@ The following macros and functions can be used on a @code{FUNCTION_DECL}:\n @ftable @code\n @item DECL_MAIN_P\n This predicate holds for a function that is the program entry point\n-@code{::code}. \n+@code{::code}.\n \n @item DECL_NAME\n This macro returns the unqualified name of the function, as an\n@@ -1122,7 +1122,7 @@ though it has a global scope.\n \n @item DECL_ANTICIPATED\n This predicate holds if the function is a built-in function but its\n-prototype is not yet explicitly declared. \n+prototype is not yet explicitly declared.\n \n @item DECL_EXTERN_C_FUNCTION_P\n This predicate holds if the function is declared as an\n@@ -1201,7 +1201,7 @@ returns, control is transferred directly to the caller, without\n returning to the thunk.  The first parameter to the thunk is always the\n @code{this} pointer; the thunk should add @code{THUNK_DELTA} to this\n value.  (The @code{THUNK_DELTA} is an @code{int}, not an\n-@code{INTEGER_CST}.)  \n+@code{INTEGER_CST}.)\n \n Then, if @code{THUNK_VCALL_OFFSET} (an @code{INTEGER_CST}) is non-zero\n the adjusted @code{this} pointer must be adjusted again.  The complete\n@@ -1370,7 +1370,7 @@ Here is the list of the various statement nodes, and the macros used to\n access them.  This documentation describes the use of these nodes in\n non-template functions (including instantiations of template functions).\n In template functions, the same nodes are used, but sometimes in\n-slightly different ways.  \n+slightly different ways.\n \n Many of the statements have substatements.  For example, a @code{while}\n loop will have a body, which is itself a statement.  If the substatement\n@@ -1392,7 +1392,7 @@ void process_stmt (stmt)\n           process_stmt (THEN_CLAUSE (stmt));\n           /* More processing here.  */\n           break;\n-        \n+\n         ...\n         @}\n \n@@ -1414,7 +1414,7 @@ statement like:\n asm (\"mov x, y\");\n @end example\n The @code{ASM_STRING} macro will return a @code{STRING_CST} node for\n-@code{\"mov x, y\"}.  If the original statement made use of the \n+@code{\"mov x, y\"}.  If the original statement made use of the\n extended-assembly syntax, then @code{ASM_OUTPUTS},\n @code{ASM_INPUTS}, and @code{ASM_CLOBBERS} will be the outputs, inputs,\n and clobbers for the statement, represented as @code{STRING_CST} nodes.\n@@ -1547,7 +1547,7 @@ the catch parameter, and @code{HANDLER_BODY} is the\n @item IF_STMT\n \n Used to represent an @code{if} statement.  The @code{IF_COND} is the\n-expression. \n+expression.\n \n If the condition is a @code{TREE_LIST}, then the @code{TREE_PURPOSE} is\n a statement (usually a @code{DECL_STMT}).  Each time the coondition is\n@@ -1776,7 +1776,7 @@ constants is obtained with @code{TREE_TYPE}; they are not always of type\n @code{int}.  In particular, @code{char} constants are represented with\n @code{INTEGER_CST} nodes.  The value of the integer constant @code{e} is\n given by @example\n-((TREE_INT_CST_HIGH (e) << HOST_BITS_PER_WIDE_INT) \n+((TREE_INT_CST_HIGH (e) << HOST_BITS_PER_WIDE_INT)\n + TREE_INST_CST_LOW (e))\n @end example\n @noindent\n@@ -1812,7 +1812,7 @@ comparisons, and so forth.\n \n @item COMPLEX_CST\n These nodes are used to represent complex number constants, that is a\n-@code{__complex__} whose parts are constant nodes.  The \n+@code{__complex__} whose parts are constant nodes.  The\n @code{TREE_REALPART} and @code{TREE_IMAGPART} return the real and the\n imaginary parts respectively.\n \n@@ -1896,7 +1896,7 @@ this case, the operand of the @code{ADDR_EXPR} will be a\n If the object addressed is not an lvalue, a temporary is created, and\n the address of the temporary is used.\n \n-@item INDIRECT_REF \n+@item INDIRECT_REF\n These nodes are used to represent the object pointed to by a pointer.\n The operand is the pointer being dereferenced; it will always have\n pointer or reference type.\n@@ -1910,7 +1910,7 @@ operand is rounded towards zero.\n @item FLOAT_EXPR\n These nodes represent conversion of an integral (or boolean) value to a\n floating-point value.  The single operand will have integral type, while\n-the complete expression will have a floating-point type.  \n+the complete expression will have a floating-point type.\n \n FIXME: How is the operand supposed to be rounded?  Is this dependent on\n -mieee?\n@@ -2073,7 +2073,7 @@ the @code{?:} operator may be omitted in the source, like this:\n x ? : 3\n @end example\n @noindent\n-which is equivalent to \n+which is equivalent to\n \n @example\n x ? x : 3"}, {"sha": "7b4db8da804d9b15c7042e0bcf0190bf5e679ea1", "filename": "gcc/contrib.texi", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fcontrib.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fcontrib.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcontrib.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -91,7 +91,7 @@ Dario Dariol contributed the four varieties of sample programs\n that print a copy of their source.\n \n @item\n-Ulrich Drepper for his work on the C++ runtime libraries, glibc, \n+Ulrich Drepper for his work on the C++ runtime libraries, glibc,\n  testing of GCC using glibc, ISO C99 support, CFG dumping support, etc.\n \n @item\n@@ -128,7 +128,7 @@ Peter Gerwinski for various bugfixes and the Pascal front end.\n @item\n Anthony Green for his -Os contributions and Java front end work.\n \n-@item \n+@item\n Kaveh Ghazi for his direction via the steering committee and\n amazing work to make -W -Wall useful.\n \n@@ -289,7 +289,7 @@ Martin von L&ouml;wis for internal consistency checking infrastructure,\n and various C++ improvements including namespace support.\n \n @item\n-Dave Love for his ongoing work with the Fortran front end and \n+Dave Love for his ongoing work with the Fortran front end and\n runtime libraries.\n \n @item\n@@ -510,8 +510,8 @@ fixincludes, etc.\n Holger Teutsch provided the support for the Clipper cpu.\n \n @item\n-Michael Tiemann for random bugfixes the first instruction scheduler, \n-initial C++ support, function integration, NS32k, sparc and M88k \n+Michael Tiemann for random bugfixes the first instruction scheduler,\n+initial C++ support, function integration, NS32k, sparc and M88k\n machine description work, delay slot scheduling.\n \n @item"}, {"sha": "ef689feaa7b8a5a199457286d744aa2fdcb21e2a", "filename": "gcc/cpp.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -47,7 +47,7 @@ into another language, under the above conditions for modified versions.\n @author Richard M. Stallman\n @page\n @vskip 2pc\n-This booklet is eventually intended to form the first chapter of a GNU \n+This booklet is eventually intended to form the first chapter of a GNU\n C Language manual.\n \n @vskip 0pt plus 1filll\n@@ -553,7 +553,7 @@ this goal.\n \n @dfn{Inheritance} is what happens when one object or file derives some\n of its contents by virtual copying from another object or file.  In\n-the case of C header files, inheritance means that one header file \n+the case of C header files, inheritance means that one header file\n includes another header file and then replaces or adds something.\n \n If the inheriting header file and the base header file have different\n@@ -585,7 +585,7 @@ means that any change in where the system's header files are kept\n requires a change somewhere else.\n \n @findex #include_next\n-The clean way to solve this problem is to use \n+The clean way to solve this problem is to use\n @samp{#include_next}, which means, ``Include the @emph{next} file with\n this name.''  This directive works like @samp{#include} except in\n searching for the specified file: it starts searching the list of header\n@@ -1138,7 +1138,7 @@ used to work around differences between different patch level releases\n of the compiler (for example, if GCC 2.6.2 is known to contain a bug,\n whereas GCC 2.6.3 contains a fix, and you have code which can workaround\n the problem depending on whether the bug is fixed or not, you can test for\n-@code{__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 6) || \n+@code{__GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 6) ||\n (__GNUC__ == 2 && __GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ >= 3)}).\n \n @item __GNUG__\n@@ -1147,8 +1147,8 @@ The GNU C compiler defines this when the compilation language is\n C++; use @samp{__GNUG__} to distinguish between GNU C and GNU\n C++.\n \n-@item __cplusplus \n-@findex __cplusplus \n+@item __cplusplus\n+@findex __cplusplus\n The ISO standard for C++ requires predefining this variable.  You can\n use @samp{__cplusplus} to test whether a header is compiled by a C\n compiler or a C++ compiler. The compiler currently uses a value of\n@@ -1353,7 +1353,7 @@ following definition:\n #define CPP_PREDEFINES \"-Dmc68000 -Dsun -Dunix -Dm68k\"\n @end example\n \n-@noindent \n+@noindent\n This macro is usually specified in @file{tm.h}.\n \n @node Stringification, Concatenation, Predefined, Macros\n@@ -2317,7 +2317,7 @@ it looks like:\n #endif /* Not @var{expression} */\n @end example\n \n-If @var{expression} is nonzero, and thus the @var{text-if-true} is \n+If @var{expression} is nonzero, and thus the @var{text-if-true} is\n active, then @samp{#else} acts like a failing conditional and the\n @var{text-if-false} is ignored.  Conversely, if the @samp{#if}\n conditional fails, the @var{text-if-false} is considered included.\n@@ -3041,7 +3041,7 @@ In the current version of the preprocessor, if @samp{##} appears between\n a comma and a variable arguments parameter, and the variable argument is\n omitted entirely, the comma will be removed from the expansion.  If the\n variable argument is empty, or the token before @samp{##} is not a\n-comma, then @samp{##} behaves as a normal token paste.  \n+comma, then @samp{##} behaves as a normal token paste.\n \n Portable code should avoid this extension at all costs.\n \n@@ -3489,7 +3489,7 @@ preprocessor; assuming you have no file @samp{foo.h}, the command\n touch foo.h; cpp -dM foo.h\n @end example\n \n-@noindent \n+@noindent\n will show the values of any predefined macros.\n \n @item -dD"}, {"sha": "7f486c5f4a744684e407f920fe86dc3a29b6f05c", "filename": "gcc/extend.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -3146,7 +3146,7 @@ across a volatile @code{asm} instruction.  For example:\n asm volatile (\"eieio\" : : );\n @end example\n \n-@noindent \n+@noindent\n Assume @code{addr} contains the address of a memory mapped device\n register.  The PowerPC @code{eieio} instruction (Enforce In-order\n Execution of I/O) tells the cpu to make sure that the store to that"}, {"sha": "e3fa7fe6e5f64c38f63dd19e2931509a70b1a5b4", "filename": "gcc/gcc.texi", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -28,7 +28,7 @@\n @c NOTE: checks/things to do:\n @c\n @c -have bob do a search in all seven files for \"mew\" (ideally --mew,\n-@c  but i may have forgotten the occasional \"--\"..).  \n+@c  but i may have forgotten the occasional \"--\"..).\n @c     Just checked... all have `--'!  Bob 22Jul96\n @c     Use this to search:   grep -n '\\-\\-mew' *.texi\n @c -item/itemx, text after all (sub/sub)section titles, etc..\n@@ -271,9 +271,9 @@ bugs.  It corresponds to GCC version 3.1.\n \n @cindex Objective C\n Several versions of the compiler (C, C++, Objective C, Fortran, Java\n-and CHILL) are integrated; this is why we use the name \n+and CHILL) are integrated; this is why we use the name\n ``GNU Compiler Collection''. GCC can compile programs written in any of these\n-languages. The Fortran, CHILL, and Java compilers are described in \n+languages. The Fortran, CHILL, and Java compilers are described in\n separate manuals.\n \n @cindex GCC\n@@ -295,7 +295,7 @@ compiler.  For example, we refer to the optimization options as\n affecting the behavior of ``GCC'' or sometimes just ``the compiler''.\n \n Front ends for other languages, such as Ada 95 and Pascal exist but\n-have not yet been integrated into GCC. These front-ends, like that for C++, \n+have not yet been integrated into GCC. These front-ends, like that for C++,\n are built in subdirectories of GCC and link to it.  The result is an\n integrated compiler that can compile programs written in C, C++,\n Objective C, or any of the languages for which you have installed front\n@@ -1282,7 +1282,7 @@ MALLOC=gmalloc.o\n @section Incompatibilities of GCC\n @cindex incompatibilities of GCC\n \n-There are several noteworthy incompatibilities between GNU C and K&R \n+There are several noteworthy incompatibilities between GNU C and K&R\n (non-ISO) versions of C.  The @samp{-traditional} option\n eliminates many of these incompatibilities, @emph{but not all}, by\n telling GNU C to behave like a K&R C compiler.\n@@ -1801,7 +1801,7 @@ operates on pointers to @code{char}:\n string strfunc ();\n void charfunc (const char *);\n \n-void \n+void\n f ()\n @{\n   const char *p = strfunc().c_str();\n@@ -2334,7 +2334,7 @@ that is a compiler bug.  However, you should note that your idea of\n for traditional practice''.\n \n @item\n-If you are an experienced user of one of the languages GCC supports, your \n+If you are an experienced user of one of the languages GCC supports, your\n suggestions for improvement of GCC are welcome in any case.\n @end itemize\n \n@@ -3430,11 +3430,11 @@ along with header files\n The source files for parsing C++ are in @file{cp/}.\n They are @file{parse.y},\n @file{class.c},@*\n-@file{cvt.c}, @file{decl.c}, @file{decl2.c}, \n+@file{cvt.c}, @file{decl.c}, @file{decl2.c},\n @file{except.c},@*\n @file{expr.c}, @file{init.c}, @file{lex.c},\n @file{method.c}, @file{ptree.c},@*\n-@file{search.c}, @file{tree.c}, \n+@file{search.c}, @file{tree.c},\n @file{typeck2.c}, and\n @file{typeck.c}, along with header files @file{cp-tree.def},\n @file{cp-tree.h}, and @file{decl.h}.\n@@ -3562,7 +3562,7 @@ the input file name.\n @cindex global common subexpression elimination\n @cindex constant propagation\n @cindex copy propagation\n-@item               \n+@item\n Global common subexpression elimination.  This pass performs GCSE\n using Morel-Renvoise Partial Redundancy Elimination, with the exception\n that it does not try to move invariants out of loops - that is left to\n@@ -3738,11 +3738,11 @@ to the input file name.\n @cindex branch shortening\n @item\n Branch shortening.  On many RISC machines, branch instructions have a\n-limited range.  Thus, longer sequences of instructions must be used for \n+limited range.  Thus, longer sequences of instructions must be used for\n long branches.  In this pass, the compiler figures out what how far each\n instruction will be from each other instruction, and therefore whether\n the usual instructions, or the longer sequences, must be used for each\n-branch. \n+branch.\n \n @cindex register-to-stack conversion\n @item\n@@ -4151,7 +4151,7 @@ procedure will build all combinations of compatible options.\n For example, if you set @code{MULTILIB_OPTIONS} to @samp{m68000/m68020\n msoft-float}, @file{Makefile} will build special versions of\n @file{libgcc.a} using the following sets of options:  @samp{-m68000},\n-@samp{-m68020}, @samp{-msoft-float}, @samp{-m68000 -msoft-float}, and \n+@samp{-m68020}, @samp{-msoft-float}, @samp{-m68000 -msoft-float}, and\n @samp{-m68020 -msoft-float}.\n \n @findex MULTILIB_DIRNAMES\n@@ -4295,7 +4295,7 @@ already available.\n What they found was no accident---it was the GNU system.  The available\n free software added up to a complete system because the GNU Project\n had been working since 1984 to make one.  The GNU Manifesto\n-had set forth the goal of developing a free Unix-like system, called \n+had set forth the goal of developing a free Unix-like system, called\n GNU.  By the time Linux was written, the system was almost finished.\n \n Most free software projects have the goal of developing a particular"}, {"sha": "5fc46d297a554ca5e3208e6bafa32527c6959a93", "filename": "gcc/gcov.texi", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fgcov.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fgcov.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -128,7 +128,7 @@ info to the standard output.  This option allows you to see how often\n each branch in your program was taken.\n \n @item -c\n-Write branch frequencies as the number of branches taken, rather than \n+Write branch frequencies as the number of branches taken, rather than\n the percentage of branches taken.\n \n @item -v\n@@ -178,19 +178,19 @@ $ gcov tmp.c\n Creating tmp.c.gcov.\n @end smallexample\n \n-The file @file{tmp.c.gcov} contains output from @code{gcov}. \n+The file @file{tmp.c.gcov} contains output from @code{gcov}.\n Here is a sample:\n \n @smallexample\n                 main()\n                 @{\n            1      int i, total;\n-                \n+\n            1      total = 0;\n-                \n+\n           11      for (i = 0; i < 10; i++)\n           10        total += i;\n-                \n+\n            1      if (total != 45)\n       ######        printf (\"Failure\\n\");\n                   else\n@@ -216,15 +216,15 @@ Here is a sample of a resulting @file{tmp.c.gcov} file:\n                 main()\n                 @{\n            1      int i, total;\n-                \n+\n            1      total = 0;\n-                \n+\n           11      for (i = 0; i < 10; i++)\n branch 0 taken = 91%\n branch 1 taken = 100%\n branch 2 taken = 100%\n           10        total += i;\n-                \n+\n            1      if (total != 45)\n branch 0 taken = 100%\n       ######        printf (\"Failure\\n\");"}, {"sha": "be00cd49cc78a601a2f78e5041892d6ee40e1791", "filename": "gcc/install.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finstall.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -236,7 +236,7 @@ are building the compiler with GNU C.\n @itemx --disable-nls\n The @samp{--enable-nls} option enables Native Language Support (NLS),\n which lets GCC output diagnostics in languages other than American\n-English. Native Language Support is enabled by default if not doing a \n+English. Native Language Support is enabled by default if not doing a\n canadian cross build. The @samp{--disable-nls} option disables NLS.\n \n @cindex @code{gettext}\n@@ -747,7 +747,7 @@ MIL-STD-1750A processors.\n \n The MIL-STD-1750A cross configuration produces output for\n @code{as1750}, an assembler/linker available under the GNU Public\n-License for the 1750A. @code{as1750} can be obtained at \n+License for the 1750A. @code{as1750} can be obtained at\n @uref{ftp://ftp.fta-berlin.de/pub/crossgcc/1750gals/}.\n A similarly licensed simulator for\n the 1750A is available from same address.\n@@ -856,7 +856,7 @@ of the GNU/Linux binutils, which you can download from\n @uref{ftp://ftp.varesearch.com/pub/support/hjl/binutils/}.\n \n These two configurations differ only in the required version of GNU\n-binutils.  For binutils 2.9.1.0.x, use @samp{arm-*-linux-gnuoldld}.  For \n+binutils.  For binutils 2.9.1.0.x, use @samp{arm-*-linux-gnuoldld}.  For\n newer versions of binutils, use @samp{arm-*-linux-gnu}.\n \n @item arm-*-riscix"}, {"sha": "eec92cb5ebb414e34ee92c879ded3197c664677a", "filename": "gcc/md.texi", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmd.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -1197,10 +1197,10 @@ constraints with multiple alternatives, sometimes one alternative\n requires @samp{&} while others do not.  See, for example, the\n @samp{movdf} insn of the 68000.\n \n-An input operand can be tied to an earlyclobber operand if its only \n+An input operand can be tied to an earlyclobber operand if its only\n use as an input occurs before the early result is written.  Adding\n alternatives of this form often allows GCC to produce better code\n-when only some of the inputs can be affected by the earlyclobber. \n+when only some of the inputs can be affected by the earlyclobber.\n See, for example, the @samp{mulsi3} insn of the ARM.\n \n @samp{&} does not obviate the need to write @samp{=}.\n@@ -1493,7 +1493,7 @@ Floating point register\n Signed 16-bit constant\n \n @item J\n-Unsigned 16-bit constant shifted left 16 bits (use @samp{L} instead for \n+Unsigned 16-bit constant shifted left 16 bits (use @samp{L} instead for\n @code{SImode} constants)\n \n @item K\n@@ -1925,13 +1925,13 @@ Ones complement of unsigned 16-bit constant\n High 16-bit constant (32-bit constant with 16 LSBs zero)\n \n @item Q\n-Indirect memory reference with signed 8-bit or index register displacement \n+Indirect memory reference with signed 8-bit or index register displacement\n \n @item R\n Indirect memory reference with unsigned 5-bit displacement\n \n @item S\n-Indirect memory reference with 1 bit or index register displacement \n+Indirect memory reference with 1 bit or index register displacement\n \n @item T\n Direct memory reference\n@@ -2867,7 +2867,7 @@ the abnormal return path.\n The pattern takes two arguments.  The first is an offset to be applied\n to the stack pointer.  It will have been copied to some appropriate\n location (typically @code{EH_RETURN_STACKADJ_RTX}) which will survive\n-until after reload to when the normal epilogue is generated. \n+until after reload to when the normal epilogue is generated.\n The second argument is the address of the exception handler to which\n the function should return.  This will normally need to copied by the\n pattern to some special register or memory location.\n@@ -2908,7 +2908,7 @@ sibling call (aka tail call) sites.\n \n The @code{sibcall_epilogue} pattern must not clobber any arguments used for\n parameter passing or any stack slots for arguments passed to the current\n-function.  \n+function.\n \n @cindex @code{trap} instruction pattern\n @item @samp{trap}\n@@ -2925,7 +2925,7 @@ A typical @code{conditional_trap} pattern looks like\n \n @smallexample\n (define_insn \"conditional_trap\"\n-  [(trap_if (match_operator 0 \"trap_operator\" \n+  [(trap_if (match_operator 0 \"trap_operator\"\n              [(cc0) (const_int 0)])\n             (match_operand 1 \"const_int_operand\" \"i\"))]\n   \"\"\n@@ -3234,7 +3234,7 @@ pattern will not be matched by the combiner.\n The other two special looping patterns, @samp{doloop_begin} and\n @samp{doloop_end}, are emitted by the loop optimiser for certain\n well-behaved loops with a finite number of loop iterations using\n-information collected during strength reduction.  \n+information collected during strength reduction.\n \n The @samp{doloop_end} pattern describes the actual looping instruction\n (or the implicit looping operation) and the @samp{doloop_begin} pattern\n@@ -3803,7 +3803,7 @@ from i386.md:\n \n @end smallexample\n \n-In this case, the actual split condition will be \n+In this case, the actual split condition will be\n \"TARGET_ZERO_EXTEND_WITH_AND && !optimize_size && reload_completed.\"\n \n The @code{define_insn_and_split} construction provides exactly the same\n@@ -3833,7 +3833,7 @@ is deprecated.\n \n A newer @code{define_peephole2} matches insns and substitutes new\n insns.  The @code{peephole2} pass is run after register allocation\n-but before scheduling, which may result in much better code for \n+but before scheduling, which may result in much better code for\n targets that do scheduling.\n \n @menu\n@@ -4039,7 +4039,7 @@ then the way to mention this insn in a peephole is as follows:\n @findex define_peephole2\n \n The @code{define_peephole2} definition tells the compiler how to\n-substitute one sequence of instructions for another sequence, \n+substitute one sequence of instructions for another sequence,\n what additional scratch registers may be needed and what their\n lifetimes must be.\n \n@@ -4927,15 +4927,15 @@ In order to handle the general case, there is a global variable\n @code{current_insn_predicate} that will contain the entire predicate\n if the current insn is predicated, and will otherwise be @code{NULL}.\n \n-When @code{define_cond_exec} is used, an implicit reference to \n-the @code{predicable} instruction attribute is made. \n+When @code{define_cond_exec} is used, an implicit reference to\n+the @code{predicable} instruction attribute is made.\n @xref{Insn Attributes}.  This attribute must be boolean (i.e. have\n exactly two elements in its @var{list-of-values}).  Further, it must\n not be used with complex expressions.  That is, the default and all\n-uses in the insns must be a simple constant, not dependent on the \n+uses in the insns must be a simple constant, not dependent on the\n alternative or anything else.\n \n-For each @code{define_insn} for which the @code{predicable} \n+For each @code{define_insn} for which the @code{predicable}\n attribute is true, a new @code{define_insn} pattern will be\n generated that matches a predicated version of the instruction.\n For example,"}, {"sha": "b2e5c21bfeb899a0466f7cb65ba777b0eb1f6e44", "filename": "gcc/objc.texi", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fobjc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Fobjc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -15,10 +15,10 @@ comments about this document to Ovidiu Predescu\n @email{ovidiu@@cup.hp.com}.\n \n @menu\n-* Executing code before main::  \n-* Type encoding::               \n-* Garbage Collection::          \n-* Constant string objects::     \n+* Executing code before main::\n+* Type encoding::\n+* Garbage Collection::\n+* Constant string objects::\n * compatibility_alias::\n @end menu\n \n@@ -43,20 +43,20 @@ Suppose for example you have a @code{FileStream} class that declares\n below:\n \n @example\n-            \n-FileStream *Stdin = nil;                                              \n-FileStream *Stdout = nil;                                          \n-FileStream *Stderr = nil;                                                \n-            \n-@@implementation FileStream                                               \n-          \n-+ (void)initialize                                                 \n+\n+FileStream *Stdin = nil;\n+FileStream *Stdout = nil;\n+FileStream *Stderr = nil;\n+\n+@@implementation FileStream\n+\n++ (void)initialize\n @{\n-    Stdin = [[FileStream new] initWithFd:0];                           \n-    Stdout = [[FileStream new] initWithFd:1];                           \n+    Stdin = [[FileStream new] initWithFd:0];\n+    Stdout = [[FileStream new] initWithFd:1];\n     Stderr = [[FileStream new] initWithFd:2];\n @}\n- \n+\n /* Other methods here */\n @@end\n \n@@ -76,31 +76,31 @@ method instead of @code{+initialize}:\n \n @example\n \n-@@implementation FileStream                                             \n- \n-+ (void)load                                 \n+@@implementation FileStream\n+\n++ (void)load\n @{\n     Stdin = [[FileStream new] initWithFd:0];\n     Stdout = [[FileStream new] initWithFd:1];\n     Stderr = [[FileStream new] initWithFd:2];\n @}\n- \n-/* Other methods here */                                               \n+\n+/* Other methods here */\n @@end\n \n @end example\n- \n+\n The @code{+load} is a method that is not overridden by categories. If a\n class and a category of it both implement @code{+load}, both methods are\n invoked.  This allows some additional initializations to be performed in\n a category.\n-   \n+\n This mechanism is not intended to be a replacement for @code{+initialize}.\n You should be aware of its limitations when you decide to use it\n instead of @code{+initialize}.\n \n @menu\n-* What you can and what you cannot do in +load::  \n+* What you can and what you cannot do in +load::\n @end menu\n \n \n@@ -149,7 +149,7 @@ category implemented in the same file;\n You should make no assumptions about receiving @code{+load} in sibling\n classes when you write @code{+load} of a class. The order in which\n sibling classes receive @code{+load} is not guaranteed.\n-    \n+\n The order in which @code{+load} and @code{+initialize} are called could\n be problematic if this matters. If you don't allocate objects inside\n @code{+load}, it is guaranteed that @code{+load} is called before\n@@ -180,43 +180,43 @@ The types are encoded in the following way:\n @c @sp 1\n \n @multitable @columnfractions .25 .75\n-@item @code{char}                      \n+@item @code{char}\n @tab @code{c}\n-@item @code{unsigned char}             \n+@item @code{unsigned char}\n @tab @code{C}\n-@item @code{short}                     \n+@item @code{short}\n @tab @code{s}\n-@item @code{unsigned short}            \n+@item @code{unsigned short}\n @tab @code{S}\n-@item @code{int}                       \n+@item @code{int}\n @tab @code{i}\n-@item @code{unsigned int}              \n+@item @code{unsigned int}\n @tab @code{I}\n-@item @code{long}                      \n+@item @code{long}\n @tab @code{l}\n-@item @code{unsigned long}             \n+@item @code{unsigned long}\n @tab @code{L}\n-@item @code{long long}                 \n+@item @code{long long}\n @tab @code{q}\n-@item @code{unsigned long long}        \n+@item @code{unsigned long long}\n @tab @code{Q}\n-@item @code{float}                     \n+@item @code{float}\n @tab @code{f}\n-@item @code{double}                    \n+@item @code{double}\n @tab @code{d}\n-@item @code{void}                      \n+@item @code{void}\n @tab @code{v}\n-@item @code{id}                        \n+@item @code{id}\n @tab @code{@@}\n-@item @code{Class}                     \n+@item @code{Class}\n @tab @code{#}\n-@item @code{SEL}                       \n+@item @code{SEL}\n @tab @code{:}\n-@item @code{char*}                     \n+@item @code{char*}\n @tab @code{*}\n-@item unknown type                     \n+@item unknown type\n @tab @code{?}\n-@item bitfields                 \n+@item bitfields\n @tab @code{b} followed by the starting position of the bitfield, the type of the bitfield and the size of the bitfield (the bitfields encoding was changed from the NeXT's compiler encoding, see below)\n @end multitable\n \n@@ -240,7 +240,7 @@ The non-atomic types are encoded as follows:\n @c @sp 1\n \n @multitable @columnfractions .2 .8\n-@item pointers          \n+@item pointers\n @tab @code{'^'} followed by the pointed type.\n @item arrays\n @tab @code{'['} followed by the number of elements in the array followed by the type of the elements followed by @code{']'}\n@@ -287,17 +287,17 @@ Objective-C type specifiers:\n @multitable @columnfractions .25 .75\n @item Specifier\n @tab Encoding\n-@item @code{const}              \n+@item @code{const}\n @tab @code{r}\n-@item @code{in}                 \n+@item @code{in}\n @tab @code{n}\n-@item @code{inout}              \n+@item @code{inout}\n @tab @code{N}\n-@item @code{out}                \n+@item @code{out}\n @tab @code{o}\n-@item @code{bycopy}             \n+@item @code{bycopy}\n @tab @code{O}\n-@item @code{oneway}             \n+@item @code{oneway}\n @tab @code{V}\n @end multitable\n \n@@ -436,20 +436,20 @@ This is a feature of the Objective-C compiler rather than of the\n runtime, anyway since it is documented nowhere and its existence was\n forgotten, we are documenting it here.\n \n-The keyword @code{@@compatibility_alias} allows you to define a class name \n-as equivalent to another class name.  For example: \n+The keyword @code{@@compatibility_alias} allows you to define a class name\n+as equivalent to another class name.  For example:\n \n @example\n @@compatibility_alias WOApplication GSWApplication;\n @end example\n \n-tells the compiler that each time it encounters @code{WOApplication} as \n-a class name, it should replace it with @code{GSWApplication} (that is, \n+tells the compiler that each time it encounters @code{WOApplication} as\n+a class name, it should replace it with @code{GSWApplication} (that is,\n @code{WOApplication} is just an alias for @code{GSWApplication}).\n \n-There are some constraints on how this can be used - \n+There are some constraints on how this can be used -\n \n-@itemize @bullet \n+@itemize @bullet\n \n @item @code{WOApplication} (the alias) must not be an existing class;\n "}, {"sha": "2b393589d9dfd700a390e0f9602edf06d0085ed2", "filename": "gcc/rtl.texi", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Frtl.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Frtl.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -68,7 +68,7 @@ a machine description, it is represented in core as a null pointer rather\n than as a pointer to a null character.  In certain contexts, these null\n pointers instead of strings are valid.  Within RTL code, strings are most\n commonly found inside @code{symbol_ref} expressions, but they appear in\n-other contexts in the RTL expressions that make up machine descriptions.  \n+other contexts in the RTL expressions that make up machine descriptions.\n \n A vector contains an arbitrary number of pointers to expressions.  The\n number of elements in the vector is explicitly present in the vector.\n@@ -392,7 +392,7 @@ In @code{reg} expressions, nonzero if this register's entire life is\n contained in the exit test code for some loop.  Stored in the\n @code{in_struct} field and printed as @samp{/s}.\n \n-@findex REG_USERVAR_P \n+@findex REG_USERVAR_P\n @cindex @code{reg} and @samp{/v}\n @cindex @code{volatil}, in @code{reg}\n @item REG_USERVAR_P (@var{x})\n@@ -402,7 +402,7 @@ the compiler.  Stored in the @code{volatil} field and printed as\n @samp{/v}.\n \n @cindex @samp{/i} in RTL dump\n-@findex REG_FUNCTION_VALUE_P \n+@findex REG_FUNCTION_VALUE_P\n @cindex @code{reg} and @samp{/i}\n @cindex @code{integrated}, in @code{reg}\n @item REG_FUNCTION_VALUE_P (@var{x})\n@@ -437,7 +437,7 @@ if the object being referenced is kept zero-extended and zero if it\n is kept sign-extended.  Stored in the @code{unchanging} field and\n printed as @samp{/u}.\n \n-@findex RTX_UNCHANGING_P \n+@findex RTX_UNCHANGING_P\n @cindex @code{reg} and @samp{/u}\n @cindex @code{mem} and @samp{/u}\n @cindex @code{unchanging}, in @code{reg} and @code{mem}\n@@ -450,7 +450,7 @@ explicitly by the current function.  The object might be changed by\n other functions or by aliasing.)  Stored in the\n @code{unchanging} field and printed as @samp{/u}.\n \n-@findex RTX_INTEGRATED_P \n+@findex RTX_INTEGRATED_P\n @cindex @code{integrated}, in @code{insn}\n @item RTX_INTEGRATED_P (@var{insn})\n Nonzero in an insn if it resulted from an in-line function call.\n@@ -511,7 +511,7 @@ In @code{label_ref} expressions, nonzero if this is a reference to a\n label that is outside the innermost loop containing the reference to the\n label.  Stored in the @code{in_struct} field and printed as @samp{/s}.\n \n-@findex INSN_DELETED_P \n+@findex INSN_DELETED_P\n @cindex @code{volatil}, in @code{insn}\n @item INSN_DELETED_P (@var{insn})\n In an insn, nonzero if the insn has been deleted.  Stored in the\n@@ -540,7 +540,7 @@ branch is not taken.  When @code{INSN_ANNULLED_BRANCH_P} is not set,\n this insn will always be executed.  Stored in the @code{in_struct}\n field and printed as @samp{/s}.\n \n-@findex CONSTANT_POOL_ADDRESS_P \n+@findex CONSTANT_POOL_ADDRESS_P\n @cindex @code{symbol_ref} and @samp{/u}\n @cindex @code{unchanging}, in @code{symbol_ref}\n @item CONSTANT_POOL_ADDRESS_P (@var{x})\n@@ -603,7 +603,7 @@ expressions and in insns.  In RTL dump files, it is printed as\n In a @code{mem} expression, it is 1 if the memory reference is volatile.\n Volatile memory references may not be deleted, reordered or combined.\n \n-In a @code{symbol_ref} expression, it is used for machine-specific \n+In a @code{symbol_ref} expression, it is used for machine-specific\n purposes.\n \n In a @code{reg} expression, it is 1 if the value is a user-level variable.\n@@ -1252,7 +1252,7 @@ expressions such as these from being formed.\n \n @findex SUBREG_REG\n @findex SUBREG_BYTE\n-The first operand of a @code{subreg} expression is customarily accessed \n+The first operand of a @code{subreg} expression is customarily accessed\n with the @code{SUBREG_REG} macro and the second operand is customarily\n accessed with the @code{SUBREG_BYTE} macro.\n \n@@ -1374,7 +1374,7 @@ second operand.\n @cindex RTL sum\n @item (plus:@var{m} @var{x} @var{y})\n Represents the sum of the values represented by @var{x} and @var{y}\n-carried out in machine mode @var{m}. \n+carried out in machine mode @var{m}.\n \n @findex lo_sum\n @item (lo_sum:@var{m} @var{x} @var{y})\n@@ -1448,7 +1448,7 @@ determines what mode the comparison is to be done in; thus it must not\n be @code{VOIDmode}.\n \n If one of the operands is a constant, it should be placed in the\n-second operand and the comparison code adjusted as appropriate.  \n+second operand and the comparison code adjusted as appropriate.\n \n A @code{compare} specifying two @code{VOIDmode} constants is not valid\n since there is no way to know in what mode the comparison is to be\n@@ -1492,7 +1492,7 @@ mode, it represents the exact quotient; otherwise, the integerized\n quotient.\n \n Some machines have division instructions in which the operands and\n-quotient widths are not all the same; you should represent \n+quotient widths are not all the same; you should represent\n such instructions using @code{truncate} and @code{sign_extend} as in,\n \n @example\n@@ -1583,7 +1583,7 @@ Like @code{ashift} but for right shift.  Unlike the case for left shift,\n these two operations are distinct.\n \n @findex rotate\n-@cindex rotate \n+@cindex rotate\n @cindex left rotate\n @findex rotatert\n @cindex right rotate\n@@ -2014,7 +2014,7 @@ valid for the mode of @var{lval}.\n \n @findex SET_DEST\n @findex SET_SRC\n-@var{lval} is customarily accessed with the @code{SET_DEST} macro and \n+@var{lval} is customarily accessed with the @code{SET_DEST} macro and\n @var{x} with the @code{SET_SRC} macro.\n \n @findex return\n@@ -2642,7 +2642,7 @@ Appears at the place in a loop that @code{continue} statements jump to.\n This note indicates the place in a loop where the exit test begins for\n those loops in which the exit test has been duplicated.  This position\n becomes another virtual start of the loop when considering loop\n-invariants. \n+invariants.\n \n @findex NOTE_INSN_FUNCTION_END\n @item NOTE_INSN_FUNCTION_END\n@@ -2663,15 +2663,15 @@ These codes are printed symbolically when they appear in debugging dumps.\n @cindex @code{HImode}, in @code{insn}\n @cindex @code{QImode}, in @code{insn}\n The machine mode of an insn is normally @code{VOIDmode}, but some\n-phases use the mode for various purposes. \n+phases use the mode for various purposes.\n \n The common subexpression elimination pass sets the mode of an insn to\n @code{QImode} when it is the first insn in a block that has already\n been processed.\n \n The second Haifa scheduling pass, for targets that can multiple issue,\n sets the mode of an insn to @code{TImode} when it is believed that the\n-instruction begins an issue group.  That is, when the instruction \n+instruction begins an issue group.  That is, when the instruction\n cannot issue simultaneously with the previous.  This may be relied on\n by later passes, in particular machine-dependant reorg.\n \n@@ -2765,11 +2765,11 @@ of values that are only used in @code{LOG_LINKS}.\n These register notes annotate inputs to an insn:\n \n @table @code\n-@findex REG_DEAD \n+@findex REG_DEAD\n @item REG_DEAD\n The value in @var{op} dies in this insn; that is to say, altering the\n value immediately after this insn would not affect the future behavior\n-of the program.  \n+of the program.\n \n This does not necessarily mean that the register @var{op} has no useful\n value after this insn since it may also be an output of the insn.  In\n@@ -2834,7 +2834,7 @@ different from @var{op}, but they will be equal at run time.  If the\n output of the single @code{set} is a @code{strict_low_part} expression,\n the note refers to the register that is contained in @code{SUBREG_REG}\n of the @code{subreg} expression.\n- \n+\n For @code{REG_EQUIV}, the register is equivalent to @var{op} throughout\n the entire function, and could validly be replaced in all its\n occurrences by @var{op}.  (``Validly'' here refers to the data flow of\n@@ -2922,7 +2922,7 @@ Loop optimization uses this note to treat such a sequence as a single\n operation for code motion purposes and flow analysis uses this note to\n delete such sequences whose results are dead.\n \n-A @code{REG_EQUAL} note will also usually be attached to this insn to \n+A @code{REG_EQUAL} note will also usually be attached to this insn to\n provide the expression being computed by the sequence.\n \n These notes will be deleted after reload, since they are no longer\n@@ -2933,7 +2933,7 @@ accurate or useful.\n This is the inverse of @code{REG_RETVAL}: it is placed on the first\n insn of a multi-insn sequence, and it points to the last one.\n \n-These notes are deleted after reload, since they are no longer useful or \n+These notes are deleted after reload, since they are no longer useful or\n accurate.\n \n @findex REG_CC_SETTER"}, {"sha": "2e90a6f6095264af0a5d386561084d5acec8dfae", "filename": "gcc/tm.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebb48a4de62d71fd22b020c77a952feab9dc1d85/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=ebb48a4de62d71fd22b020c77a952feab9dc1d85", "patch": "@@ -2614,7 +2614,7 @@ and so may be read-only.\n The macro should return a combination of the @code{DW_EH_PE_*} defines\n as found in @file{dwarf2.h}.\n \n-If this macro is not defined, pointers will not be encoded but \n+If this macro is not defined, pointers will not be encoded but\n represented directly.\n \n @findex ASM_MAYBE_OUTPUT_ENCODED_ADDR_RTX\n@@ -3996,9 +3996,9 @@ support block profiling.\n @findex TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n @item TARGET_ALLOWS_PROFILING_WITHOUT_FRAME_POINTER\n On some targets, it is impossible to use profiling when the frame\n-pointer has been omitted.  For example, on x86 GNU/Linux systems, \n+pointer has been omitted.  For example, on x86 GNU/Linux systems,\n the @code{mcount} routine provided by the GNU C Library finds the\n-address of the routine that called the routine that called @code{mcount} \n+address of the routine that called the routine that called @code{mcount}\n by looking in the immediate caller's stack frame.  If the immediate\n caller has no frame pointer, this lookup will fail.\n "}]}