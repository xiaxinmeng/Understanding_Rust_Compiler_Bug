{"sha": "b4e77f9b76f4cafc0f3de2466de06c84e7102877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlNzdmOWI3NmY0Y2FmYzBmM2RlMjQ2NmRlMDZjODRlNzEwMjg3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely.gcc@gmail.com", "date": "2010-06-06T13:27:23Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2010-06-06T13:27:23Z"}, "message": "re PR libstdc++/40296 ([C++0x] std::exception_ptr comparisons)\n\n2010-06-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n\n\tPR libstdc++/40296\n\t* libsupc++/exception_ptr.h (exception_ptr::exception_ptr): Replace\n\t__safe_bool constructor with nullptr_t constructor in C++0x mode.\n\t(exception_ptr::operator bool): Add explicit conversion to bool.\n\t(swap(exception_ptr&, exception_ptr&)): Add.\n\t(exception_ptr::_M_safe_bool_dummy): Only declare for old ABI.\n\t* libsupc++/eh_ptr.cc (exception_ptr::_M_safe_bool_dummy): Move\n\tnext to other functions retained for ABI compatibility.\n\t* testsuite/18_support/exception_ptr/requirements.cc: New.\n\t* testsuite/18_support/exception_ptr/requirements_neg.cc: New.\n\nFrom-SVN: r160340", "tree": {"sha": "c4d14bcb974fd2b861009c6196a51f477ed8e805", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4d14bcb974fd2b861009c6196a51f477ed8e805"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e77f9b76f4cafc0f3de2466de06c84e7102877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e77f9b76f4cafc0f3de2466de06c84e7102877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e77f9b76f4cafc0f3de2466de06c84e7102877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e77f9b76f4cafc0f3de2466de06c84e7102877/comments", "author": null, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346967d1cf5cf5f53a48aa8483365e3d1405ff2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/346967d1cf5cf5f53a48aa8483365e3d1405ff2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/346967d1cf5cf5f53a48aa8483365e3d1405ff2d"}], "stats": {"total": 142, "additions": 131, "deletions": 11}, "files": [{"sha": "44a1662e63ea659ddd4df0724ef0fa7731acaf95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b4e77f9b76f4cafc0f3de2466de06c84e7102877", "patch": "@@ -1,3 +1,16 @@\n+2010-06-06  Jonathan Wakely  <jwakely.gcc@gmail.com>\n+\n+\tPR libstdc++/40296\n+\t* libsupc++/exception_ptr.h (exception_ptr::exception_ptr): Replace\n+\t__safe_bool constructor with nullptr_t constructor in C++0x mode.\n+\t(exception_ptr::operator bool): Add explicit conversion to bool.\n+\t(swap(exception_ptr&, exception_ptr&)): Add.\n+\t(exception_ptr::_M_safe_bool_dummy): Only declare for old ABI.\n+\t* libsupc++/eh_ptr.cc (exception_ptr::_M_safe_bool_dummy): Move\n+\tnext to other functions retained for ABI compatibility.\n+\t* testsuite/18_support/exception_ptr/requirements.cc: New.\n+\t* testsuite/18_support/exception_ptr/requirements_neg.cc: New.\n+\n 2010-06-05  Jonathan Wakely  <jwakely.gcc@gmail.com>\n \n \t* include/bits/shared_ptr_base.h (_Sp_counted_ptr::_M_dispose): Make"}, {"sha": "abe59a214be6df4be17e3156a8e3b12b996b5bf3", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=b4e77f9b76f4cafc0f3de2466de06c84e7102877", "patch": "@@ -101,10 +101,6 @@ std::__exception_ptr::exception_ptr::_M_get() const throw()\n { return _M_exception_object; }\n \n \n-void\n-std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() throw () { }\n-\n-\n void\n std::__exception_ptr::exception_ptr::swap(exception_ptr &other) throw()\n {\n@@ -114,6 +110,11 @@ std::__exception_ptr::exception_ptr::swap(exception_ptr &other) throw()\n }\n \n \n+// Retained for compatibility with CXXABI_1.3.\n+void\n+std::__exception_ptr::exception_ptr::_M_safe_bool_dummy() throw () { }\n+\n+\n // Retained for compatibility with CXXABI_1.3.\n bool\n std::__exception_ptr::exception_ptr::operator!() const throw()"}, {"sha": "4ccb4fb2d6e652581898ee5dd220fa14c7894f2f", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=b4e77f9b76f4cafc0f3de2466de06c84e7102877", "patch": "@@ -81,25 +81,27 @@ namespace std\n \n       void *_M_get() const throw() __attribute__ ((__pure__));\n \n-      void _M_safe_bool_dummy() throw() __attribute__ ((__const__));\n-\n       friend exception_ptr std::current_exception() throw();\n       friend void std::rethrow_exception(exception_ptr);\n \n     public:\n       exception_ptr() throw();\n \n-      typedef void (exception_ptr::*__safe_bool)();\n-\n-      // For construction from nullptr or 0.\n-      exception_ptr(__safe_bool) throw();\n-\n       exception_ptr(const exception_ptr&) throw();\n \n #ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      exception_ptr(nullptr_t) throw()\n+      : _M_exception_object(0)\n+      { }\n+\n       exception_ptr(exception_ptr&& __o) throw()\n       : _M_exception_object(__o._M_exception_object)\n       { __o._M_exception_object = 0; }\n+#else\n+      typedef void (exception_ptr::*__safe_bool)();\n+\n+      // For construction from nullptr or 0.\n+      exception_ptr(__safe_bool) throw();\n #endif\n \n       exception_ptr& \n@@ -121,10 +123,16 @@ namespace std\n \n #ifdef _GLIBCXX_EH_PTR_COMPAT\n       // Retained for compatibility with CXXABI_1.3.\n+      void _M_safe_bool_dummy() throw() __attribute__ ((__const__));\n       bool operator!() const throw() __attribute__ ((__pure__));\n       operator __safe_bool() const throw();\n #endif\n \n+#ifdef __GXX_EXPERIMENTAL_CXX0X__\n+      explicit operator bool() const\n+      { return _M_exception_object; }\n+#endif\n+\n       friend bool \n       operator==(const exception_ptr&, const exception_ptr&) throw() \n       __attribute__ ((__pure__));\n@@ -140,6 +148,11 @@ namespace std\n     bool \n     operator!=(const exception_ptr&, const exception_ptr&) throw() \n     __attribute__ ((__pure__));\n+\n+    inline void\n+    swap(exception_ptr& __lhs, exception_ptr& __rhs)\n+    { __lhs.swap(__rhs); }\n+\n   } // namespace __exception_ptr\n \n "}, {"sha": "36e6375d9a93892c86bfbb32f9df42baf13cf394", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/requirements.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements.cc?ref=b4e77f9b76f4cafc0f3de2466de06c84e7102877", "patch": "@@ -0,0 +1,60 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+#include <testsuite_hooks.h>\n+\n+// test NullablePointer requirements\n+void test01()\n+{\n+  std::exception_ptr p1;        // DefaultConstructible\n+  std::exception_ptr p2(p1);    // CopyConstructible\n+  p1 = p2;                      // CopyAssignable\n+  VERIFY( p1 == p2 );           // EqualityComparable\n+  VERIFY( !bool(p1) );          // contextually convertible to bool\n+  swap(p1, p2);                 // Swappable\n+\n+  // Table 39 expressions\n+  std::exception_ptr p3 = nullptr;\n+  std::exception_ptr p4(nullptr);\n+  VERIFY( std::exception_ptr() == nullptr );\n+  p4 = nullptr;\n+  VERIFY( p4 == nullptr );\n+  VERIFY( nullptr == p4 );\n+  VERIFY( (p4 != nullptr) == !(p4 == nullptr) );\n+  VERIFY( (nullptr != p4) == !(p4 == nullptr) );\n+\n+  std::exception_ptr p5{};      // value initialized ...\n+  VERIFY( p5 == nullptr );      // ... is equivalent to null\n+}\n+\n+// additional exception_ptr requirements\n+void test02()\n+{\n+  std::exception_ptr p1;\n+  VERIFY( p1 == nullptr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+  return 0;\n+}"}, {"sha": "b897b506dfe3236678578fae72f5ede5057ec637", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/requirements_neg.cc", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e77f9b76f4cafc0f3de2466de06c84e7102877/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frequirements_neg.cc?ref=b4e77f9b76f4cafc0f3de2466de06c84e7102877", "patch": "@@ -0,0 +1,33 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-require-atomic-builtins \"\" }\n+\n+// Copyright (C) 2010 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <exception>\n+\n+// test implicit conversions\n+void test01()\n+{\n+  std::exception_ptr p;\n+\n+  int   __attribute__((unused)) i = p; // { dg-error \"cannot convert\" }\n+  bool  __attribute__((unused)) b = p; // { dg-error \"cannot convert\" }\n+  void* __attribute__((unused)) v = p; // { dg-error \"cannot convert\" }\n+}\n+"}]}