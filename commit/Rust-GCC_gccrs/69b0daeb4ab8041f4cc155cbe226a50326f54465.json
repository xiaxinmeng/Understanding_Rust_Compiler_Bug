{"sha": "69b0daeb4ab8041f4cc155cbe226a50326f54465", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjliMGRhZWI0YWI4MDQxZjRjYzE1NWNiZTIyNmE1MDMyNmY1NDQ2NQ==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-01-28T13:09:23Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2016-01-28T13:09:23Z"}, "message": "re PR libstdc++/69450 (libstdc++-v3/include/math.h:66:1 2: error: 'constexpr bool std::isnan(double)' conflicts with a previous declaration)\n\n\tPR libstdc++/69450\n\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Split check for obsolete\n\tisinf and isnan functions into two independent checks.  Check on hpux.\n\t* config.h.in: Regenerate.\n\t* configure: Regenerate.\n\t* include/c_global/cmath (isinf(double), isnan(double)): Use\n\t_GLIBCXX_HAVE_OBSOLETE_ISINF and _GLIBCXX_HAVE_OBSOLETE_ISNAN,\n\trespectively.\n\nFrom-SVN: r232925", "tree": {"sha": "4a4169f93a0133786a902730ecf8e329aba6e37a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a4169f93a0133786a902730ecf8e329aba6e37a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69b0daeb4ab8041f4cc155cbe226a50326f54465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b0daeb4ab8041f4cc155cbe226a50326f54465", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69b0daeb4ab8041f4cc155cbe226a50326f54465", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69b0daeb4ab8041f4cc155cbe226a50326f54465/comments", "author": null, "committer": null, "parents": [{"sha": "e0ef6912de884d6524c64df043c3d56616fb96ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0ef6912de884d6524c64df043c3d56616fb96ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0ef6912de884d6524c64df043c3d56616fb96ef"}], "stats": {"total": 124, "additions": 91, "deletions": 33}, "files": [{"sha": "532ece64304325905f23e27a0453f0b0176b9501", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=69b0daeb4ab8041f4cc155cbe226a50326f54465", "patch": "@@ -1,3 +1,14 @@\n+2016-01-28  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR libstdc++/69450\n+\t* acinclude.m4 (GLIBCXX_CHECK_MATH11_PROTO): Split check for obsolete\n+\tisinf and isnan functions into two independent checks.  Check on hpux.\n+\t* config.h.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* include/c_global/cmath (isinf(double), isnan(double)): Use\n+\t_GLIBCXX_HAVE_OBSOLETE_ISINF and _GLIBCXX_HAVE_OBSOLETE_ISNAN,\n+\trespectively.\n+\n 2016-01-27  Jakub Jelinek  <jakub@redhat.com>\n \n \t* testsuite/libstdc++-prettyprinters/whatis.cc: Include <random>."}, {"sha": "2d066701aece05e6ef41420c4552a7532867079e", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=69b0daeb4ab8041f4cc155cbe226a50326f54465", "patch": "@@ -2186,39 +2186,54 @@ AC_DEFUN([GLIBCXX_CHECK_MATH11_PROTO], [\n       fi\n       AC_MSG_RESULT([$glibcxx_cv_math11_overload])\n       ;;\n-    *-*-*gnu* | *-*-aix*)\n+    *-*-*gnu* | *-*-aix* | *-*-hpux*)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)\n       # functions (instead of or as well as the C99 generic macros) then we\n       # can't define std::isinf(double) and std::isnan(double) in <cmath>\n       # and must use the ones from <math.h> instead.\n-      AC_MSG_CHECKING([for obsolete isinf and isnan functions in <math.h>])\n-        AC_CACHE_VAL(glibcxx_cv_obsolete_isinf_isnan, [\n+      AC_MSG_CHECKING([for obsolete isinf function in <math.h>])\n+        AC_CACHE_VAL(glibcxx_cv_obsolete_isinf, [\n           AC_COMPILE_IFELSE([AC_LANG_SOURCE(\n             [#include <math.h>\n              #undef isinf\n-             #undef isnan\n              namespace std {\n                using ::isinf;\n                bool isinf(float);\n                bool isinf(long double);\n+             }\n+             using std::isinf;\n+             bool b = isinf(0.0);\n+          ])],\n+          [glibcxx_cv_obsolete_isinf=yes],\n+          [glibcxx_cv_obsolete_isinf=no]\n+        )])\n+      AC_MSG_RESULT([$glibcxx_cv_obsolete_isinf])\n+      if test $glibcxx_cv_obsolete_isinf = yes; then\n+        AC_DEFINE(HAVE_OBSOLETE_ISINF, 1,\n+                  [Define if <math.h> defines obsolete isinf function.])\n+      fi\n+\n+      AC_MSG_CHECKING([for obsolete isnan function in <math.h>])\n+        AC_CACHE_VAL(glibcxx_cv_obsolete_isnan, [\n+          AC_COMPILE_IFELSE([AC_LANG_SOURCE(\n+            [#include <math.h>\n+             #undef isnan\n+             namespace std {\n                using ::isnan;\n                bool isnan(float);\n                bool isnan(long double);\n              }\n-             using std::isinf;\n              using std::isnan;\n-             bool b = isinf(0.0) || isnan(0.0);\n+             bool b = isnan(0.0);\n           ])],\n-          [glibcxx_cv_obsolete_isinf_isnan=yes],\n-          [glibcxx_cv_obsolete_isinf_isnan=no]\n+          [glibcxx_cv_obsolete_isnan=yes],\n+          [glibcxx_cv_obsolete_isnan=no]\n         )])\n-\n-\n-      if test $glibcxx_cv_obsolete_isinf_isnan = yes; then\n-        AC_DEFINE(HAVE_OBSOLETE_ISINF_ISNAN, 1,\n-                  [Define if <math.h> defines obsolete isinf and isnan functions.])\n+      AC_MSG_RESULT([$glibcxx_cv_obsolete_isnan])\n+      if test $glibcxx_cv_obsolete_isnan = yes; then\n+        AC_DEFINE(HAVE_OBSOLETE_ISNAN, 1,\n+                  [Define if <math.h> defines obsolete isnan function.])\n       fi\n-      AC_MSG_RESULT([$glibcxx_cv_obsolete_isinf_isnan])\n       ;;\n   esac\n "}, {"sha": "5834154abf4b627fba7f2318e8ac98842448b4d3", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=69b0daeb4ab8041f4cc155cbe226a50326f54465", "patch": "@@ -300,8 +300,11 @@\n /* Define to 1 if you have the <nan.h> header file. */\n #undef HAVE_NAN_H\n \n-/* Define if <math.h> defines obsolete isinf and isnan functions. */\n-#undef HAVE_OBSOLETE_ISINF_ISNAN\n+/* Define if <math.h> defines obsolete isinf function. */\n+#undef HAVE_OBSOLETE_ISINF\n+\n+/* Define if <math.h> defines obsolete isnan function. */\n+#undef HAVE_OBSOLETE_ISNAN\n \n /* Define if poll is available in <poll.h>. */\n #undef HAVE_POLL"}, {"sha": "efba47a1b0432e9ea5426d97f9606138948a951e", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=69b0daeb4ab8041f4cc155cbe226a50326f54465", "patch": "@@ -18177,53 +18177,82 @@ fi\n       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_math11_overload\" >&5\n $as_echo \"$glibcxx_cv_math11_overload\" >&6; }\n       ;;\n-    *-*-*gnu* | *-*-aix*)\n+    *-*-*gnu* | *-*-aix* | *-*-hpux*)\n       # If <math.h> defines the obsolete isinf(double) and isnan(double)\n       # functions (instead of or as well as the C99 generic macros) then we\n       # can't define std::isinf(double) and std::isnan(double) in <cmath>\n       # and must use the ones from <math.h> instead.\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for obsolete isinf and isnan functions in <math.h>\" >&5\n-$as_echo_n \"checking for obsolete isinf and isnan functions in <math.h>... \" >&6; }\n-        if test \"${glibcxx_cv_obsolete_isinf_isnan+set}\" = set; then :\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for obsolete isinf function in <math.h>\" >&5\n+$as_echo_n \"checking for obsolete isinf function in <math.h>... \" >&6; }\n+        if test \"${glibcxx_cv_obsolete_isinf+set}\" = set; then :\n   $as_echo_n \"(cached) \" >&6\n else\n \n           cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include <math.h>\n              #undef isinf\n-             #undef isnan\n              namespace std {\n                using ::isinf;\n                bool isinf(float);\n                bool isinf(long double);\n+             }\n+             using std::isinf;\n+             bool b = isinf(0.0);\n+\n+_ACEOF\n+if ac_fn_cxx_try_compile \"$LINENO\"; then :\n+  glibcxx_cv_obsolete_isinf=yes\n+else\n+  glibcxx_cv_obsolete_isinf=no\n+\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_obsolete_isinf\" >&5\n+$as_echo \"$glibcxx_cv_obsolete_isinf\" >&6; }\n+      if test $glibcxx_cv_obsolete_isinf = yes; then\n+\n+$as_echo \"#define HAVE_OBSOLETE_ISINF 1\" >>confdefs.h\n+\n+      fi\n+\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for obsolete isnan function in <math.h>\" >&5\n+$as_echo_n \"checking for obsolete isnan function in <math.h>... \" >&6; }\n+        if test \"${glibcxx_cv_obsolete_isnan+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+\n+          cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <math.h>\n+             #undef isnan\n+             namespace std {\n                using ::isnan;\n                bool isnan(float);\n                bool isnan(long double);\n              }\n-             using std::isinf;\n              using std::isnan;\n-             bool b = isinf(0.0) || isnan(0.0);\n+             bool b = isnan(0.0);\n \n _ACEOF\n if ac_fn_cxx_try_compile \"$LINENO\"; then :\n-  glibcxx_cv_obsolete_isinf_isnan=yes\n+  glibcxx_cv_obsolete_isnan=yes\n else\n-  glibcxx_cv_obsolete_isinf_isnan=no\n+  glibcxx_cv_obsolete_isnan=no\n \n fi\n rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n fi\n \n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_obsolete_isnan\" >&5\n+$as_echo \"$glibcxx_cv_obsolete_isnan\" >&6; }\n+      if test $glibcxx_cv_obsolete_isnan = yes; then\n \n-\n-      if test $glibcxx_cv_obsolete_isinf_isnan = yes; then\n-\n-$as_echo \"#define HAVE_OBSOLETE_ISINF_ISNAN 1\" >>confdefs.h\n+$as_echo \"#define HAVE_OBSOLETE_ISNAN 1\" >>confdefs.h\n \n       fi\n-      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibcxx_cv_obsolete_isinf_isnan\" >&5\n-$as_echo \"$glibcxx_cv_obsolete_isinf_isnan\" >&6; }\n       ;;\n   esac\n "}, {"sha": "6a24ebfec5b84922ec6ebc4da5d3d2e50a1758a6", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69b0daeb4ab8041f4cc155cbe226a50326f54465/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=69b0daeb4ab8041f4cc155cbe226a50326f54465", "patch": "@@ -610,7 +610,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   isinf(float __x)\n   { return __builtin_isinf(__x); }\n \n-#if _GLIBCXX_HAVE_OBSOLETE_ISINF_ISNAN \\\n+#if _GLIBCXX_HAVE_OBSOLETE_ISINF \\\n   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC\n   using ::isinf;\n #else\n@@ -635,7 +635,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   isnan(float __x)\n   { return __builtin_isnan(__x); }\n \n-#if _GLIBCXX_HAVE_OBSOLETE_ISINF_ISNAN \\\n+#if _GLIBCXX_HAVE_OBSOLETE_ISNAN \\\n   && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC\n   using ::isnan;\n #else"}]}