{"sha": "3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiZmIzZDkxZGQ2MTM3ZjQxOWM5ZDg1Y2U3Yzc1YmI5NmU4NjBiMA==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-27T00:03:17Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2002-12-27T00:03:17Z"}, "message": "std_bitset.h (_Base_bitset::_M_do_left_shift, [...]): Expect a non-zero shift.\n\n2002-12-26  Phil Edwards  <pme@gcc.gnu.org>\n\n\t* include/std/std_bitset.h (_Base_bitset::_M_do_left_shift,\n\t_Base_bitset::_M_do_right_shift): Expect a non-zero shift.\n\t(bitset::operator<<=, bitset::operator>>=):  When shifting more bits\n\tthan are in the bitset, zero memory rather than segfault.\n\t(operator>>(basic_istream,bitset):  Only call setstate once, after\n\tall work has been done.\n\n\t* testsuite/23_containers/bitset_members.cc (test03):  New test.\n\t* testsuite/23_containers/bitset_shift.cc (test02):  New test.\n\nFrom-SVN: r60533", "tree": {"sha": "aeb9947904387c32a63d66db431bc706d6280a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aeb9947904387c32a63d66db431bc706d6280a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/comments", "author": null, "committer": null, "parents": [{"sha": "9795acc64a1e348ebe9b32d21311d6cae6b20088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9795acc64a1e348ebe9b32d21311d6cae6b20088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9795acc64a1e348ebe9b32d21311d6cae6b20088"}], "stats": {"total": 89, "additions": 75, "deletions": 14}, "files": [{"sha": "f613267f9326776ed775ebc7c1c6863dc2b529d7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "patch": "@@ -1,3 +1,15 @@\n+2002-12-26  Phil Edwards  <pme@gcc.gnu.org>\n+\n+\t* include/std/std_bitset.h (_Base_bitset::_M_do_left_shift,\n+\t_Base_bitset::_M_do_right_shift): Expect a non-zero shift.\n+\t(bitset::operator<<=, bitset::operator>>=):  When shifting more bits\n+\tthan are in the bitset, zero memory rather than segfault.\n+\t(operator>>(basic_istream,bitset):  Only call setstate once, after\n+\tall work has been done.\n+\n+\t* testsuite/23_containers/bitset_members.cc (test03):  New test.\n+\t* testsuite/23_containers/bitset_shift.cc (test02):  New test.\n+\n 2002-12-26  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* libsupc++/vterminate.cc (writestr):  Use __builtin_strlen."}, {"sha": "83693f5e0b2953417e7a4b38f7c61e9b5b1a95ac", "filename": "libstdc++-v3/include/std/std_bitset.h", "status": "modified", "additions": 29, "deletions": 14, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_bitset.h?ref=3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "patch": "@@ -219,7 +219,7 @@ namespace std\n     void\n     _Base_bitset<_Nw>::_M_do_left_shift(size_t __shift)\n     {\n-      if (__shift != 0)\n+      if (__builtin_expect(__shift != 0, 1))\n \t{\n \t  const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n \t  const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n@@ -244,7 +244,7 @@ namespace std\n     void\n     _Base_bitset<_Nw>::_M_do_right_shift(size_t __shift)\n     {\n-      if (__shift != 0)\n+      if (__builtin_expect(__shift != 0, 1))\n \t{\n \t  const size_t __wshift = __shift / _GLIBCPP_BITSET_BITS_PER_WORD;\n \t  const size_t __offset = __shift % _GLIBCPP_BITSET_BITS_PER_WORD;\n@@ -581,9 +581,11 @@ namespace std\n    *  The template argument, @a _Nb, may be any non-negative number of type\n    *  size_t.\n    *\n-   *  A %bitset of size N has N % (sizeof(unsigned long) * CHAR_BIT) unused\n-   *  bits.  (They are the high-order bits in the highest word.)  It is\n-   *  a class invariant that those unused bits are always zero.\n+   *  A %bitset of size N uses U bits, where\n+   *  U = (N % (sizeof(unsigned long) * CHAR_BIT)).\n+   *  Thus, N - U bits are unused.  (They are the high-order bits in the\n+   *  highest word.)  It is a class invariant that those unused bits are\n+   *  always zero.\n    *\n    *  If you think of %bitset as \"a simple array of bits,\" be aware that\n    *  your mental picture is reversed:  a %bitset behaves the same way as\n@@ -805,16 +807,26 @@ namespace std\n     bitset<_Nb>&\n     operator<<=(size_t __pos)\n     {\n-      this->_M_do_left_shift(__pos);\n-      this->_M_do_sanitize();\n+      if (__builtin_expect(__pos < _Nb, 1))\n+        {\n+          this->_M_do_left_shift(__pos);\n+          this->_M_do_sanitize();\n+        }\n+      else\n+\tthis->_M_do_reset();\n       return *this;\n     }\n \n     bitset<_Nb>&\n     operator>>=(size_t __pos)\n     {\n-      this->_M_do_right_shift(__pos);\n-      this->_M_do_sanitize();\n+      if (__builtin_expect(__pos < _Nb, 1))\n+        {\n+          this->_M_do_right_shift(__pos);\n+          this->_M_do_sanitize();\n+        }\n+      else\n+\tthis->_M_do_reset();\n       return *this;\n     }\n     //@}\n@@ -1183,6 +1195,7 @@ namespace std\n       typename basic_istream<_CharT, _Traits>::sentry __sentry(__is);\n       if (__sentry)\n \t{\n+\t  ios_base::iostate  __state = ios_base::goodbit;\n \t  basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();\n \t  for (size_t __i = 0; __i < _Nb; ++__i)\n \t    {\n@@ -1191,7 +1204,7 @@ namespace std\n \t      typename _Traits::int_type __c1 = __buf->sbumpc();\n \t      if (_Traits::eq_int_type(__c1, __eof))\n \t\t{\n-\t\t  __is.setstate(ios_base::eofbit);\n+\t\t  __state |= ios_base::eofbit;\n \t\t  break;\n \t\t}\n \t      else\n@@ -1201,19 +1214,21 @@ namespace std\n \n \t\t  if (__c == '0' || __c == '1')\n \t\t    __tmp.push_back(__c);\n-\t\t  else if (_Traits::eq_int_type(__buf->sputbackc(__c2),\n-\t\t\t\t\t\t__eof))\n+\t\t  else if (_Traits::eq_int_type(__buf->sputbackc(__c2), __eof))\n \t\t    {\n-\t\t      __is.setstate(ios_base::failbit);\n+\t\t      __state |= ios_base::failbit;\n \t\t      break;\n \t\t    }\n \t\t}\n \t    }\n \n \t  if (__tmp.empty() && !_Nb)\n-\t    __is.setstate(ios_base::failbit);\n+\t    __state |= ios_base::failbit;\n \t  else\n \t    __x._M_copy_from_string(__tmp, static_cast<size_t>(0), _Nb);\n+\n+\t  if (__state != ios_base::goodbit)\n+\t    __is.setstate(__state);    // may throw an exception\n \t}\n \n       return __is;"}, {"sha": "054018df66280d988a984952b84963a4792af7bc", "filename": "libstdc++-v3/testsuite/23_containers/bitset_members.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_members.cc?ref=3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "patch": "@@ -22,6 +22,7 @@\n \n #include <bitset>\n #include <stdexcept>\n+#include <sstream>\n #include <testsuite_hooks.h>\n \n void \n@@ -52,9 +53,26 @@ void test02()\n   bs.count();\n }\n \n+void test03()\n+{\n+  std::bitset<5>      b;\n+  std::stringstream   ss (\"101\");\n+\n+  ss.exceptions(std::ios_base::eofbit);\n+\n+  try\n+  {\n+    ss >> b;\n+  }\n+  catch (std::exception&) {}\n+\n+  VERIFY( b.to_ulong() == 5 );\n+}\n+\n int main()\n {\n   test01();\n   test02();\n+  test03();\n   return 0;\n }"}, {"sha": "01fdd2fbc4ba6055a72292a7d80eca26915afbda", "filename": "libstdc++-v3/testsuite/23_containers/bitset_shift.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fbitset_shift.cc?ref=3bbfb3d91dd6137f419c9d85ce7c75bb96e860b0", "patch": "@@ -106,9 +106,25 @@ test01() {\n   return test;\n }\n \n+bool\n+test02()\n+{\n+  bool test = true;\n+\n+  std::bitset<66>  b;\n+  b <<= 400;\n+  VERIFY( b.count() == 0 );\n+\n+#ifdef DEBUG_ASSERT\n+  assert(test);\n+#endif\n+  return test;\n+}\n+\n int\n main() {\n   test01();\n+  test02();\n \n   return 0;\n }"}]}