{"sha": "3075affdbcb3232fe549fbeed87bd94114c14758", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA3NWFmZmRiY2IzMjMyZmU1NDlmYmVlZDg3YmQ5NDExNGMxNDc1OA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-09-08T16:00:02Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-09-08T16:00:02Z"}, "message": "PR c++/86678 - constexpr function with non-constant after return.\n\n\tIn this testcase, the call to f() can never be a constant\n\texpression, but that's not a problem because it isn't always\n\treached by calls to g.  We were wrongly rejecting this because\n\tpotential_constant_expression_1 lacked the jump tracking that\n\tcxx_eval_constant_expression has.  So this patch adds a simpler\n\tversion of that tracking.\n\n\t* constexpr.c (potential_constant_expression_1): Add jump_target.\n\t(breaks): Check for BREAK_STMT.\n\t(continues): Check for CONTINUE_STMT.\n\nFrom-SVN: r264171", "tree": {"sha": "86657620d81c1d04427d724399e476545acab7d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86657620d81c1d04427d724399e476545acab7d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3075affdbcb3232fe549fbeed87bd94114c14758", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3075affdbcb3232fe549fbeed87bd94114c14758", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3075affdbcb3232fe549fbeed87bd94114c14758", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3075affdbcb3232fe549fbeed87bd94114c14758/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "61856507f42eef2a1474d4b629ed7db641b48a4f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61856507f42eef2a1474d4b629ed7db641b48a4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61856507f42eef2a1474d4b629ed7db641b48a4f"}], "stats": {"total": 83, "additions": 70, "deletions": 13}, "files": [{"sha": "c0fa4660df9069cfb8c594c172e70346dd039edf", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3075affdbcb3232fe549fbeed87bd94114c14758", "patch": "@@ -1,3 +1,10 @@\n+2018-09-08  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/86678 - constexpr function with non-constant after return.\n+\t* constexpr.c (potential_constant_expression_1): Add jump_target.\n+\t(breaks): Check for BREAK_STMT.\n+\t(continues): Check for CONTINUE_STMT.\n+\n 2018-09-08  Marek Polacek  <polacek@redhat.com>\n \n \t* cxx-pretty-print.c (cxx_pretty_printer::statement) <case"}, {"sha": "68cdd8dc88e891cc9aff3db30f6e3af1a336b760", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=3075affdbcb3232fe549fbeed87bd94114c14758", "patch": "@@ -3893,15 +3893,18 @@ breaks (tree *jump_target)\n   return *jump_target\n     && ((TREE_CODE (*jump_target) == LABEL_DECL\n \t && LABEL_DECL_BREAK (*jump_target))\n+\t|| TREE_CODE (*jump_target) == BREAK_STMT\n \t|| TREE_CODE (*jump_target) == EXIT_EXPR);\n }\n \n static bool\n continues (tree *jump_target)\n {\n   return *jump_target\n-    && TREE_CODE (*jump_target) == LABEL_DECL\n-    && LABEL_DECL_CONTINUE (*jump_target);\n+    && ((TREE_CODE (*jump_target) == LABEL_DECL\n+\t && LABEL_DECL_CONTINUE (*jump_target))\n+\t|| TREE_CODE (*jump_target) == CONTINUE_STMT);\n+\n }\n \n static bool\n@@ -4123,7 +4126,7 @@ static tree\n cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t      bool lval,\n \t\t\t      bool *non_constant_p, bool *overflow_p,\n-\t\t\t      tree *jump_target)\n+\t\t\t      tree *jump_target /* = NULL */)\n {\n   constexpr_ctx new_ctx;\n   tree r = t;\n@@ -4149,7 +4152,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  return NULL_TREE;\n \t}\n     }\n-  if (t == error_mark_node)\n+  if (error_operand_p (t))\n     {\n       *non_constant_p = true;\n       return t;\n@@ -5398,10 +5401,10 @@ check_automatic_or_tls (tree ref)\n \n static bool\n potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n-\t\t\t\t tsubst_flags_t flags)\n+\t\t\t\t tsubst_flags_t flags, tree *jump_target)\n {\n #define RECUR(T,RV) \\\n-  potential_constant_expression_1 ((T), (RV), strict, now, flags)\n+  potential_constant_expression_1 ((T), (RV), strict, now, flags, jump_target)\n \n   enum { any = false, rval = true };\n   int i;\n@@ -5412,6 +5415,14 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n   if (t == NULL_TREE)\n     return true;\n   location_t loc = cp_expr_loc_or_loc (t, input_location);\n+\n+  if (*jump_target)\n+    /* If we are jumping, ignore everything.  This is simpler than the\n+       cxx_eval_constant_expression handling because we only need to be\n+       conservatively correct, and we don't necessarily have a constant value\n+       available, so we don't bother with switch tracking.  */\n+    return true;\n+\n   if (TREE_THIS_VOLATILE (t) && !DECL_P (t))\n     {\n       if (flags & tf_error)\n@@ -5449,13 +5460,21 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case USING_DECL:\n     case USING_STMT:\n     case PLACEHOLDER_EXPR:\n-    case BREAK_STMT:\n-    case CONTINUE_STMT:\n     case REQUIRES_EXPR:\n     case STATIC_ASSERT:\n     case DEBUG_BEGIN_STMT:\n       return true;\n \n+    case RETURN_EXPR:\n+      if (!RECUR (TREE_OPERAND (t, 0), any))\n+\treturn false;\n+      /* FALLTHROUGH */\n+\n+    case BREAK_STMT:\n+    case CONTINUE_STMT:\n+      *jump_target = t;\n+      return true;\n+\n     case PARM_DECL:\n       if (now)\n \t{\n@@ -5544,7 +5563,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t       constexpr substitution might not use the value.  */\n \t\t    bool sub_now = false;\n \t\t    if (!potential_constant_expression_1 (x, rval, strict,\n-\t\t\t\t\t\t\t  sub_now, flags))\n+\t\t\t\t\t\t\t  sub_now, flags,\n+\t\t\t\t\t\t\t  jump_target))\n \t\t      return false;\n \t\t    i = 1;\n \t\t  }\n@@ -5578,7 +5598,7 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t       substitution might not use the value of the argument.  */\n \t    bool sub_now = false;\n \t    if (!potential_constant_expression_1 (x, rv, strict,\n-\t\t\t\t\t\t  sub_now, flags))\n+\t\t\t\t\t\t  sub_now, flags, jump_target))\n \t      return false;\n           }\n         return true;\n@@ -5753,6 +5773,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \treturn false;\n       if (!RECUR (DO_BODY (t), any))\n \treturn false;\n+      if (breaks (jump_target) || continues (jump_target))\n+\t*jump_target = NULL_TREE;\n       return true;\n \n     case FOR_STMT:\n@@ -5764,6 +5786,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \treturn false;\n       if (!RECUR (FOR_BODY (t), any))\n \treturn false;\n+      if (breaks (jump_target) || continues (jump_target))\n+\t*jump_target = NULL_TREE;\n       return true;\n \n     case RANGE_FOR_STMT:\n@@ -5773,13 +5797,17 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \treturn false;\n       if (!RECUR (RANGE_FOR_BODY (t), any))\n \treturn false;\n+      if (breaks (jump_target) || continues (jump_target))\n+\t*jump_target = NULL_TREE;\n       return true;\n \n     case WHILE_STMT:\n       if (!RECUR (WHILE_COND (t), rval))\n \treturn false;\n       if (!RECUR (WHILE_BODY (t), any))\n \treturn false;\n+      if (breaks (jump_target) || continues (jump_target))\n+\t*jump_target = NULL_TREE;\n       return true;\n \n     case SWITCH_STMT:\n@@ -5963,7 +5991,6 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n     case PAREN_EXPR:\n     case NON_DEPENDENT_EXPR:\n       /* For convenience.  */\n-    case RETURN_EXPR:\n     case LOOP_EXPR:\n     case EXIT_EXPR:\n       return RECUR (TREE_OPERAND (t, 0), want_rval);\n@@ -6173,7 +6200,8 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \treturn RECUR (TREE_OPERAND (t, 1), want_rval);\n       for (i = 1; i < 3; ++i)\n \tif (potential_constant_expression_1 (TREE_OPERAND (t, i),\n-\t\t\t\t\t     want_rval, strict, now, tf_none))\n+\t\t\t\t\t     want_rval, strict, now,\n+\t\t\t\t\t     tf_none, jump_target))\n \t  return true;\n       if (flags & tf_error)\n \terror_at (loc, \"expression %qE is not a constant expression\", t);\n@@ -6204,7 +6232,10 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \ttree *target = &TREE_OPERAND (t, 0);\n \t/* Gotos representing break and continue are OK.  */\n \tif (breaks (target) || continues (target))\n-\t  return true;\n+\t  {\n+\t    *jump_target = *target;\n+\t    return true;\n+\t  }\n \tif (flags & tf_error)\n \t  error_at (loc, \"%<goto%> is not a constant expression\");\n \treturn false;\n@@ -6224,6 +6255,15 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n #undef RECUR\n }\n \n+bool\n+potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n+\t\t\t\t tsubst_flags_t flags)\n+{\n+  tree target = NULL_TREE;\n+  return potential_constant_expression_1 (t, want_rval, strict, now,\n+\t\t\t\t\t  flags, &target);\n+}\n+\n /* The main entry point to the above.  */\n \n bool"}, {"sha": "8f29628148fafa486ec7b35fd23d30a7ada51418", "filename": "gcc/testsuite/g++.dg/cpp1y/constexpr-return4.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3075affdbcb3232fe549fbeed87bd94114c14758/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fconstexpr-return4.C?ref=3075affdbcb3232fe549fbeed87bd94114c14758", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/86678\n+// { dg-do compile { target c++14 } }\n+\n+constexpr bool always_true() { return true; }\n+int f() { return 1; }\n+constexpr int g() {\n+  if (always_true())\n+    return 0;\n+  return f();\n+}"}]}