{"sha": "9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZjNzc3YWQyNTYxZTU0MmVmMGVlYzlkOTRlZThjYjVlZGM2ODU1NA==", "commit": {"author": {"name": "Chao-ying Fu", "email": "fu@mips.com", "date": "2007-09-11T01:04:08Z"}, "committer": {"name": "Chao-ying Fu", "email": "chaoyingfu@gcc.gnu.org", "date": "2007-09-11T01:04:08Z"}, "message": "mips.c (mips_scalar_mode_supported_p): Declare.\n\n\t* config/mips/mips.c (mips_scalar_mode_supported_p): Declare.\n\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n\t(mips_emit_compare): Process fixed-point modes.\n\t(mips_pad_arg_upward): Support fixed-point types.\n\t(override_options): Allow fixed-point modes in accumulators.\n\t(mips_pass_by_reference): Pass DQ, UDQ, DA, and UDA modes in registers.\n\t(mips_vector_mode_supported_p): Support V2HQmode, V2UHQmode, V2HAmode,\n\tV2UHAmode, V4QQmode, and V4UQQmode when TARGET_DSP.\n\t(mips_scalar_mode_supported_p): New function to accept fixed-point\n\tmodes if the width is not greater than two BITS_PER_WORD.\n\t* config/mips/mips.h (SHORT_FRACT_TYPE_SIZE, FRACT_TYPE_SIZE,\n\tLONG_FRACT_TYPE_SIZE, LONG_LONG_FRACT_TYPE_SIZE,\n\tSHORT_ACCUM_TYPE_SIZE, ACCUM_TYPE_SIZE, LONG_ACCUM_TYPE_SIZE,\n\tLONG_LONG_ACCUM_TYPE_SIZE): Define.\n\t* config/mips/mips.md (\"d\"): Update mode attribute for fixed-point\n\tmodes.\n\t(\"IMODE\"): New mode attribute.\n\t(mips-fixed.md): Include.\n\t* config/mips/mips-modes.def: Create VECTOR_MODES for FRACT, UFRACT,\n\tACCUM, UACCUM.\n\t* config/mips/mips-fixed.md: New file.\n\nFrom-SVN: r128360", "tree": {"sha": "90489292cc9aae88f88ecd159e05429ec37d914c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/90489292cc9aae88f88ecd159e05429ec37d914c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/comments", "author": null, "committer": null, "parents": [{"sha": "9ccaf0a6285b6b9d346cb0e3b8593ab89ef8fd46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccaf0a6285b6b9d346cb0e3b8593ab89ef8fd46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccaf0a6285b6b9d346cb0e3b8593ab89ef8fd46"}], "stats": {"total": 240, "additions": 235, "deletions": 5}, "files": [{"sha": "223e8fe90c3f73ec2d927be157e37cac147060f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -1,3 +1,27 @@\n+2007-09-10  Chao-ying Fu  <fu@mips.com>\n+\n+\t* config/mips/mips.c (mips_scalar_mode_supported_p): Declare.\n+\t(TARGET_SCALAR_MODE_SUPPORTED_P): Define.\n+\t(mips_emit_compare): Process fixed-point modes.\n+\t(mips_pad_arg_upward): Support fixed-point types.\n+\t(override_options): Allow fixed-point modes in accumulators.\n+\t(mips_pass_by_reference): Pass DQ, UDQ, DA, and UDA modes in registers.\n+\t(mips_vector_mode_supported_p): Support V2HQmode, V2UHQmode, V2HAmode,\n+\tV2UHAmode, V4QQmode, and V4UQQmode when TARGET_DSP.\n+\t(mips_scalar_mode_supported_p): New function to accept fixed-point\n+\tmodes if the width is not greater than two BITS_PER_WORD.\n+\t* config/mips/mips.h (SHORT_FRACT_TYPE_SIZE, FRACT_TYPE_SIZE,\n+\tLONG_FRACT_TYPE_SIZE, LONG_LONG_FRACT_TYPE_SIZE,\n+\tSHORT_ACCUM_TYPE_SIZE, ACCUM_TYPE_SIZE, LONG_ACCUM_TYPE_SIZE,\n+\tLONG_LONG_ACCUM_TYPE_SIZE): Define.\n+\t* config/mips/mips.md (\"d\"): Update mode attribute for fixed-point\n+\tmodes.\n+\t(\"IMODE\"): New mode attribute.\n+\t(mips-fixed.md): Include.\n+\t* config/mips/mips-modes.def: Create VECTOR_MODES for FRACT, UFRACT,\n+\tACCUM, UACCUM.\n+\t* config/mips/mips-fixed.md: New file.\n+\n 2007-09-11  Ben Elliston  <bje@au.ibm.com>\n \n \t* config/spu/spu.md: Formatting fixes."}, {"sha": "3305be8b35a149fae1c46023549c7e5f8dcbb5f1", "filename": "gcc/config/mips/mips-fixed.md", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-fixed.md?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -0,0 +1,138 @@\n+;; This file contains MIPS instructions that support fixed-point operations.\n+\n+;; All supported fixed-point modes\n+(define_mode_iterator FIXED [(QQ \"\") (HQ \"\") (SQ \"\") (DQ \"TARGET_64BIT\")\n+\t\t\t     (UQQ \"\") (UHQ \"\") (USQ \"\") (UDQ \"TARGET_64BIT\")\n+\t\t\t     (HA \"\") (SA \"\") (DA \"TARGET_64BIT\")\n+\t\t\t     (UHA \"\") (USA \"\") (UDA \"TARGET_64BIT\")])\n+\n+;; For signed add/sub with saturation\n+(define_mode_iterator ADDSUB [(HQ \"\") (SQ \"\") (HA \"\") (SA \"\") (V2HQ \"\")\n+\t\t\t      (V2HA \"\")])\n+(define_mode_attr addsubfmt [(HQ \"ph\") (SQ \"w\") (HA \"ph\") (SA \"w\")\n+\t\t\t     (V2HQ \"ph\") (V2HA \"ph\")])\n+\n+;; For unsigned add/sub with saturation\n+(define_mode_iterator UADDSUB [(UQQ \"TARGET_DSP\") (UHQ \"TARGET_DSPR2\")\n+\t\t\t       (UHA \"TARGET_DSPR2\") (V4UQQ \"TARGET_DSP\")\n+\t\t\t       (V2UHQ \"TARGET_DSPR2\") (V2UHA \"TARGET_DSPR2\")])\n+(define_mode_attr uaddsubfmt [(UQQ \"qb\") (UHQ \"ph\") (UHA \"ph\")\n+\t\t\t      (V4UQQ \"qb\") (V2UHQ \"ph\") (V2UHA \"ph\")])\n+\n+;; For signed multiplication with saturation\n+(define_mode_iterator MULQ [(V2HQ \"TARGET_DSP\") (HQ \"TARGET_DSP\")\n+\t\t\t    (SQ \"TARGET_DSPR2\")])\n+(define_mode_attr mulqfmt [(V2HQ \"ph\") (HQ \"ph\") (SQ \"w\")])\n+\n+(define_insn \"add<mode>3\"\n+  [(set (match_operand:FIXED 0 \"register_operand\" \"=d\")\n+\t(plus:FIXED (match_operand:FIXED 1 \"register_operand\" \"d\")\n+\t\t    (match_operand:FIXED 2 \"register_operand\" \"d\")))]\n+  \"\"\n+  \"<d>addu\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"usadd<mode>3\"\n+  [(parallel\n+    [(set (match_operand:UADDSUB 0 \"register_operand\" \"=d\")\n+\t  (us_plus:UADDSUB (match_operand:UADDSUB 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:UADDSUB 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_ADDQ_S))])]\n+  \"\"\n+  \"addu_s.<uaddsubfmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"ssadd<mode>3\"\n+  [(parallel\n+    [(set (match_operand:ADDSUB 0 \"register_operand\" \"=d\")\n+\t  (ss_plus:ADDSUB (match_operand:ADDSUB 1 \"register_operand\" \"d\")\n+\t\t\t  (match_operand:ADDSUB 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_ADDQ_S))])]\n+  \"TARGET_DSP\"\n+  \"addq_s.<addsubfmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"sub<mode>3\"\n+  [(set (match_operand:FIXED 0 \"register_operand\" \"=d\")\n+        (minus:FIXED (match_operand:FIXED 1 \"register_operand\" \"d\")\n+\t\t     (match_operand:FIXED 2 \"register_operand\" \"d\")))]\n+  \"\"\n+  \"<d>subu\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"ussub<mode>3\"\n+  [(parallel\n+    [(set (match_operand:UADDSUB 0 \"register_operand\" \"=d\")\n+\t  (us_minus:UADDSUB (match_operand:UADDSUB 1 \"register_operand\" \"d\")\n+\t\t\t    (match_operand:UADDSUB 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_SUBQ_S))])]\n+  \"\"\n+  \"subu_s.<uaddsubfmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"sssub<mode>3\"\n+  [(parallel\n+    [(set (match_operand:ADDSUB 0 \"register_operand\" \"=d\")\n+\t  (ss_minus:ADDSUB (match_operand:ADDSUB 1 \"register_operand\" \"d\")\n+\t\t\t   (match_operand:ADDSUB 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_SUBQ_S))])]\n+  \"TARGET_DSP\"\n+  \"subq_s.<addsubfmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"arith\")\n+   (set_attr \"mode\" \"<IMODE>\")])\n+\n+(define_insn \"ssmul<mode>3\"\n+  [(parallel\n+    [(set (match_operand:MULQ 0 \"register_operand\" \"=d\")\n+          (ss_mult:MULQ (match_operand:MULQ 1 \"register_operand\" \"d\")\n+\t\t\t(match_operand:MULQ 2 \"register_operand\" \"d\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+          (unspec:CCDSP [(match_dup 1) (match_dup 2)] UNSPEC_MULQ_RS_PH))\n+     (clobber (match_scratch:DI 3 \"=x\"))])]\n+  \"\"\n+  \"mulq_rs.<mulqfmt>\\t%0,%1,%2\"\n+  [(set_attr \"type\"     \"imul3\")\n+   (set_attr \"mode\"     \"<IMODE>\")])\n+\n+(define_insn \"ssmaddsqdq4\"\n+  [(parallel\n+    [(set (match_operand:DQ 0 \"register_operand\" \"=a\")\n+\t  (ss_plus:DQ\n+\t  (ss_mult:DQ (sat_fract:DQ (match_operand:SQ 1\n+\t\t\t\t     \"register_operand\" \"d\"))\n+                      (sat_fract:DQ (match_operand:SQ 2\n+\t\t\t\t     \"register_operand\" \"d\")))\n+          (match_operand:DQ 3 \"register_operand\" \"0\")))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPAQ_SA_L_W))])]\n+  \"TARGET_DSP && !TARGET_64BIT\"\n+  \"dpaq_sa.l.w\\t%q0,%1,%2\"\n+  [(set_attr \"type\" \"imadd\")\n+   (set_attr \"mode\" \"SI\")])\n+\n+(define_insn \"ssmsubsqdq4\"\n+  [(parallel\n+    [(set (match_operand:DQ 0 \"register_operand\" \"=a\")\n+          (ss_minus:DQ\n+\t   (match_operand:DQ 3 \"register_operand\" \"0\")\n+           (ss_mult:DQ (sat_fract:DQ (match_operand:SQ 1\n+\t\t\t\t      \"register_operand\" \"d\"))\n+                       (sat_fract:DQ (match_operand:SQ 2\n+\t\t\t\t      \"register_operand\" \"d\")))))\n+     (set (reg:CCDSP CCDSP_OU_REGNUM)\n+\t  (unspec:CCDSP [(match_dup 1) (match_dup 2) (match_dup 3)]\n+\t\t\tUNSPEC_DPSQ_SA_L_W))])]\n+  \"TARGET_DSP && !TARGET_64BIT\"\n+  \"dpsq_sa.l.w\\t%q0,%1,%2\"\n+  [(set_attr \"type\" \"imadd\")\n+   (set_attr \"mode\" \"SI\")])"}, {"sha": "207f6da060b770f8fd5f37c7e93c33cae7535eaa", "filename": "gcc/config/mips/mips-modes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-modes.def?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -29,6 +29,11 @@ FLOAT_MODE (TF, 16, mips_quad_format);\n VECTOR_MODES (FLOAT, 8);      /*            V4HF V2SF */\n VECTOR_MODES (INT, 4);        /*            V4QI V2HI */\n \n+VECTOR_MODES (FRACT, 4);\t/* V4QQ  V2HQ */\n+VECTOR_MODES (UFRACT, 4);\t/* V4UQQ V2UHQ */\n+VECTOR_MODES (ACCUM, 4);\t/*       V2HA */\n+VECTOR_MODES (UACCUM, 4);\t/*       V2UHA */\n+\n /* Paired single comparison instructions use 2 or 4 CC.  */\n CC_MODE (CCV2);\n ADJUST_BYTESIZE (CCV2, 8);"}, {"sha": "14f0de2f9451db451659d7096802bcda7e3e1aee", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -408,6 +408,7 @@ static bool mips_callee_copies (CUMULATIVE_ARGS *, enum machine_mode mode,\n static int mips_arg_partial_bytes (CUMULATIVE_ARGS *, enum machine_mode mode,\n \t\t\t\t   tree, bool);\n static bool mips_valid_pointer_mode (enum machine_mode);\n+static bool mips_scalar_mode_supported_p (enum machine_mode);\n static bool mips_vector_mode_supported_p (enum machine_mode);\n static rtx mips_prepare_builtin_arg (enum insn_code, unsigned int, tree, unsigned int);\n static rtx mips_prepare_builtin_target (enum insn_code, unsigned int, rtx);\n@@ -1329,6 +1330,9 @@ static const unsigned char mips16e_save_restore_regs[] = {\n #undef TARGET_VECTOR_MODE_SUPPORTED_P\n #define TARGET_VECTOR_MODE_SUPPORTED_P mips_vector_mode_supported_p\n \n+#undef TARGET_SCALAR_MODE_SUPPORTED_P\n+#define TARGET_SCALAR_MODE_SUPPORTED_P mips_scalar_mode_supported_p\n+\n #undef TARGET_INIT_BUILTINS\n #define TARGET_INIT_BUILTINS mips_init_builtins\n #undef TARGET_EXPAND_BUILTIN\n@@ -3626,6 +3630,13 @@ mips_emit_compare (enum rtx_code *code, rtx *op0, rtx *op1, bool need_eq_ne_p)\n \t  *code = (invert ? EQ : NE);\n \t}\n     }\n+  else if (ALL_FIXED_POINT_MODE_P (GET_MODE (cmp_operands[0])))\n+    {\n+      *op0 = gen_rtx_REG (CCDSPmode, CCDSP_CC_REGNUM);\n+      mips_emit_binary (*code, *op0, cmp_operands[0], cmp_operands[1]);\n+      *code = NE;\n+      *op1 = const0_rtx;\n+    }\n   else\n     {\n       enum rtx_code cmp_code;\n@@ -4470,8 +4481,11 @@ mips_pad_arg_upward (enum machine_mode mode, const_tree type)\n   /* Otherwise, integral types are padded downward: the last byte of a\n      stack argument is passed in the last byte of the stack slot.  */\n   if (type != 0\n-      ? INTEGRAL_TYPE_P (type) || POINTER_TYPE_P (type)\n-      : GET_MODE_CLASS (mode) == MODE_INT)\n+      ? (INTEGRAL_TYPE_P (type)\n+\t || POINTER_TYPE_P (type)\n+\t || FIXED_POINT_TYPE_P (type))\n+      : (GET_MODE_CLASS (mode) == MODE_INT\n+\t || ALL_SCALAR_FIXED_POINT_MODE_P (mode)))\n     return false;\n \n   /* Big-endian o64 pads floating-point arguments downward.  */\n@@ -5737,7 +5751,7 @@ override_options (void)\n \t\t\t|| (ISA_HAS_8CC && mode == TFmode)));\n \n           else if (ACC_REG_P (regno))\n-\t    temp = (INTEGRAL_MODE_P (mode)\n+\t    temp = ((INTEGRAL_MODE_P (mode) || ALL_FIXED_POINT_MODE_P (mode))\n \t\t    && size <= UNITS_PER_WORD * 2\n \t\t    && (size <= UNITS_PER_WORD\n \t\t\t|| regno == MD_REG_FIRST\n@@ -8749,7 +8763,9 @@ mips_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n       int size;\n \n       /* ??? How should SCmode be handled?  */\n-      if (mode == DImode || mode == DFmode)\n+      if (mode == DImode || mode == DFmode\n+\t  || mode == DQmode || mode == UDQmode\n+\t  || mode == DAmode || mode == UDAmode)\n \treturn 0;\n \n       size = type ? int_size_in_bytes (type) : GET_MODE_SIZE (mode);\n@@ -9011,12 +9027,30 @@ mips_vector_mode_supported_p (enum machine_mode mode)\n \n     case V2HImode:\n     case V4QImode:\n+    case V2HQmode:\n+    case V2UHQmode:\n+    case V2HAmode:\n+    case V2UHAmode:\n+    case V4QQmode:\n+    case V4UQQmode:\n       return TARGET_DSP;\n \n     default:\n       return false;\n     }\n }\n+\n+/* Implement TARGET_SCALAR_MODE_SUPPORTED_P.  */\n+\n+static bool\n+mips_scalar_mode_supported_p (enum machine_mode mode)\n+{\n+  if (ALL_FIXED_POINT_MODE_P (mode)\n+      && GET_MODE_PRECISION (mode) <= 2 * BITS_PER_WORD)\n+    return true;\n+\n+  return default_scalar_mode_supported_p (mode);\n+}\n \f\n /* If we can access small data directly (using gp-relative relocation\n    operators) return the small data pointer, otherwise return null."}, {"sha": "a8957686240dac9bd045563cc10fe74fe1ee19a9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -1189,6 +1189,19 @@ extern enum mips_code_readable_setting mips_code_readable;\n #define DOUBLE_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE (TARGET_NEWABI ? 128 : 64)\n \n+/* Define the sizes of fixed-point types.  */\n+#define SHORT_FRACT_TYPE_SIZE 8\n+#define FRACT_TYPE_SIZE 16\n+#define LONG_FRACT_TYPE_SIZE 32\n+#define LONG_LONG_FRACT_TYPE_SIZE 64\n+\n+#define SHORT_ACCUM_TYPE_SIZE 16\n+#define ACCUM_TYPE_SIZE 32\n+#define LONG_ACCUM_TYPE_SIZE 64\n+/* FIXME.  LONG_LONG_ACCUM_TYPE_SIZE should be 128 bits, but GCC\n+   doesn't support 128-bit integers for MIPS32 currently.  */\n+#define LONG_LONG_ACCUM_TYPE_SIZE (TARGET_64BIT ? 128 : 64)\n+\n /* long double is not a fixed mode, but the idea is that, if we\n    support long double, we also want a 128-bit integer type.  */\n #define MAX_FIXED_MODE_SIZE LONG_DOUBLE_TYPE_SIZE"}, {"sha": "a6a5ea4a20f04ac89b413d34ff9b0e9f34da7561", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc777ad2561e542ef0eec9d94ee8cb5edc68554/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=9fc777ad2561e542ef0eec9d94ee8cb5edc68554", "patch": "@@ -497,7 +497,11 @@\n \n ;; In GPR templates, a string like \"<d>subu\" will expand to \"subu\" in the\n ;; 32-bit version and \"dsubu\" in the 64-bit version.\n-(define_mode_attr d [(SI \"\") (DI \"d\")])\n+(define_mode_attr d [(SI \"\") (DI \"d\")\n+\t\t     (QQ \"\") (HQ \"\") (SQ \"\") (DQ \"d\")\n+\t\t     (UQQ \"\") (UHQ \"\") (USQ \"\") (UDQ \"d\")\n+\t\t     (HA \"\") (SA \"\") (DA \"d\")\n+\t\t     (UHA \"\") (USA \"\") (UDA \"d\")])\n \n ;; This attribute gives the length suffix for a sign- or zero-extension\n ;; instruction.\n@@ -530,6 +534,15 @@\n ;; floating-point mode.\n (define_mode_attr UNITMODE [(SF \"SF\") (DF \"DF\") (V2SF \"SF\")])\n \n+;; This attribute gives the integer mode that has the same size as a\n+;; fixed-point mode.\n+(define_mode_attr IMODE [(QQ \"QI\") (HQ \"HI\") (SQ \"SI\") (DQ \"DI\")\n+\t\t\t (UQQ \"QI\") (UHQ \"HI\") (USQ \"SI\") (UDQ \"DI\")\n+\t\t\t (HA \"HI\") (SA \"SI\") (DA \"DI\")\n+\t\t\t (UHA \"HI\") (USA \"SI\") (UDA \"DI\")\n+\t\t\t (V4UQQ \"SI\") (V2UHQ \"SI\") (V2UHA \"SI\")\n+\t\t\t (V2HQ \"SI\") (V2HA \"SI\")])\n+\n ;; This attribute works around the early SB-1 rev2 core \"F2\" erratum:\n ;;\n ;; In certain cases, div.s and div.ps may have a rounding error\n@@ -6009,3 +6022,6 @@\n ; The MIPS DSP REV 2 Instructions.\n \n (include \"mips-dspr2.md\")\n+\n+; MIPS fixed-point instructions.\n+(include \"mips-fixed.md\")"}]}