{"sha": "747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ3YjYxZmNiM2IzYWZiYjczMDBhZmMwYzBiNGNkNmJjYzEwNjA4Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-02-19T06:25:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-02-19T06:25:05Z"}, "message": "mangle.c (maybe_check_abi_tags): Add for_decl parm.\n\n\t* mangle.c (maybe_check_abi_tags): Add for_decl parm.  Call\n\tmangle_decl.\n\t(mangle_decl): Call maybe_check_abi_tags for function scope.\n\t(mangle_guard_variable): Call maybe_check_abi_tags here.\n\t(write_guarded_var_name): Not here.\n\nFrom-SVN: r233544", "tree": {"sha": "e194a1323865025cd46f4bcc67147d1d564fac21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e194a1323865025cd46f4bcc67147d1d564fac21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "654f089a925617d225457e18d4482ba553742735", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654f089a925617d225457e18d4482ba553742735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654f089a925617d225457e18d4482ba553742735"}], "stats": {"total": 95, "additions": 77, "deletions": 18}, "files": [{"sha": "96150be59f225fe01f400b2b68e48bebf31422cb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "patch": "@@ -1,3 +1,11 @@\n+2016-02-18  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (maybe_check_abi_tags): Add for_decl parm.  Call\n+\tmangle_decl.\n+\t(mangle_decl): Call maybe_check_abi_tags for function scope.\n+\t(mangle_guard_variable): Call maybe_check_abi_tags here.\n+\t(write_guarded_var_name): Not here.\n+\n 2016-02-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65985"}, {"sha": "5d38373765bbfb8382cb80bac9825a73b2b9be8f", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "patch": "@@ -223,6 +223,7 @@ static void write_local_name (tree, const tree, const tree);\n static void dump_substitution_candidates (void);\n static tree mangle_decl_string (const tree);\n static int local_class_index (tree);\n+static void maybe_check_abi_tags (tree, tree = NULL_TREE);\n \n /* Control functions.  */\n \n@@ -3599,6 +3600,9 @@ mangle_decl (const tree decl)\n     {\n       gcc_assert (TREE_CODE (decl) != TYPE_DECL\n \t\t  || !no_linkage_check (TREE_TYPE (decl), true));\n+      if (abi_version_at_least (10))\n+\tif (tree fn = decl_function_context (decl))\n+\t  maybe_check_abi_tags (fn, decl);\n       id = get_mangled_id (decl);\n     }\n   SET_DECL_ASSEMBLER_NAME (decl, id);\n@@ -3937,26 +3941,39 @@ mangle_conv_op_name_for_type (const tree type)\n \n /* Handle ABI backwards compatibility for past bugs where we didn't call\n    check_abi_tags in places where it's needed: call check_abi_tags and warn if\n-   it makes a difference.  */\n+   it makes a difference.  If FOR_DECL is non-null, it's the declaration\n+   that we're actually trying to mangle; if it's null, we're mangling the\n+   guard variable for T.  */\n \n static void\n-maybe_check_abi_tags (tree t)\n+maybe_check_abi_tags (tree t, tree for_decl)\n {\n+  if (DECL_ASSEMBLER_NAME_SET_P (t))\n+    return;\n+\n   tree attr = lookup_attribute (\"abi_tag\", DECL_ATTRIBUTES (t));\n   tree oldtags = NULL_TREE;\n   if (attr)\n     oldtags = TREE_VALUE (attr);\n \n-  check_abi_tags (t);\n+  mangle_decl (t);\n \n   if (!attr)\n     attr = lookup_attribute (\"abi_tag\", DECL_ATTRIBUTES (t));\n   if (attr && TREE_VALUE (attr) != oldtags\n       && abi_version_crosses (10))\n-    warning_at (DECL_SOURCE_LOCATION (t), OPT_Wabi,\n-\t\t\"the mangled name of the initialization guard variable for\"\n-\t\t\"%qD changes between -fabi-version=%d and -fabi-version=%d\",\n-\t\tt, flag_abi_version, warn_abi_version);\n+    {\n+      if (for_decl)\n+\twarning_at (DECL_SOURCE_LOCATION (for_decl), OPT_Wabi,\n+\t\t    \"the mangled name of %qD changes between \"\n+\t\t    \"-fabi-version=%d and -fabi-version=%d\",\n+\t\t    for_decl, flag_abi_version, warn_abi_version);\n+      else\n+\twarning_at (DECL_SOURCE_LOCATION (t), OPT_Wabi,\n+\t\t    \"the mangled name of the initialization guard variable for\"\n+\t\t    \"%qD changes between -fabi-version=%d and -fabi-version=%d\",\n+\t\t    t, flag_abi_version, warn_abi_version);\n+    }\n }\n \n /* Write out the appropriate string for this variable when generating\n@@ -3971,15 +3988,7 @@ write_guarded_var_name (const tree variable)\n        to the reference, not the temporary.  */\n     write_string (IDENTIFIER_POINTER (DECL_NAME (variable)) + 4);\n   else\n-    {\n-      /* Before ABI v10 we were failing to call check_abi_tags here.  So if\n-\t we're in pre-10 mode, wait until after write_name to call it.  */\n-      if (abi_version_at_least (10))\n-\tmaybe_check_abi_tags (variable);\n-      write_name (variable, /*ignore_local_scope=*/0);\n-      if (!abi_version_at_least (10))\n-\tmaybe_check_abi_tags (variable);\n-    }\n+    write_name (variable, /*ignore_local_scope=*/0);\n }\n \n /* Return an identifier for the name of an initialization guard\n@@ -3988,6 +3997,8 @@ write_guarded_var_name (const tree variable)\n tree\n mangle_guard_variable (const tree variable)\n {\n+  if (abi_version_at_least (10))\n+    maybe_check_abi_tags (variable);\n   start_mangling (variable);\n   write_string (\"_ZGV\");\n   write_guarded_var_name (variable);"}, {"sha": "12fe312595fa11a22b50d18eaf7a7cc3d0cf76f4", "filename": "gcc/testsuite/g++.dg/abi/abi-tag16a.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag16a.C?ref=747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "patch": "@@ -1,4 +1,4 @@\n-// { dg-options \"-fabi-version=9 -Wabi\" }\n+// { dg-options \"-fabi-version=9\" }\n // { dg-final { scan-assembler \"_ZGVZN1N1FEvE4Name\" } }\n namespace std {\n   __extension__ inline namespace __cxx11 __attribute__((abi_tag(\"cxx11\"))) {\n@@ -10,7 +10,7 @@ namespace std {\n namespace N {\n   inline void F() {\n     {\n-      static std::String Name;\t// { dg-warning \"mangled name\" }\n+      static std::String Name;\n     }\n   }\n   void F2() {"}, {"sha": "89ee737bf57ffcf47a5323e330191982410148a4", "filename": "gcc/testsuite/g++.dg/abi/abi-tag18.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18.C?ref=747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options -Wabi=9 }\n+// { dg-final { scan-assembler \"_Z1fB7__test1v\" } }\n+// { dg-final { scan-assembler \"_ZZ1fB7__test1vEN1T1gB7__test2Ev\" } }\n+// { dg-final { scan-assembler \"_ZZZ1fB7__test1vEN1T1gB7__test2EvE1x\" } }\n+// { dg-final { scan-assembler \"_ZGVZZ1fB7__test1vEN1T1gB7__test2EvE1x\" } }\n+\n+struct X { ~X(); };\n+inline namespace __test1 __attribute__((abi_tag)) { struct A1 { }; }\n+inline namespace __test2 __attribute__((abi_tag)) { struct A2 { }; }\n+inline A1 f() {\n+  struct T {\n+    A2 g() {\t\t\t// { dg-warning \"mangled name\" }\n+      static X x;\t\t// { dg-warning \"mangled name\" }\n+    }\n+  };\n+  T().g();\n+}\n+int main() {\n+  f();\n+}"}, {"sha": "f65f629bd94c374a2271d5d072935ef1554a77b4", "filename": "gcc/testsuite/g++.dg/abi/abi-tag18a.C", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag18a.C?ref=747b61fcb3b3afbb7300afc0c0b4cd6bcc10608c", "patch": "@@ -0,0 +1,20 @@\n+// { dg-options -fabi-version=9 }\n+// { dg-final { scan-assembler \"_Z1fB7__test1v\" } }\n+// { dg-final { scan-assembler \"_ZZ1fB7__test1vEN1T1gB7__test2Ev\" } }\n+// { dg-final { scan-assembler \"_ZZZ1fB7__test1vEN1T1gEvE1x\" } }\n+// { dg-final { scan-assembler \"_ZGVZZ1fvEN1T1gEvE1x\" } }\n+\n+struct X { ~X(); };\n+inline namespace __test1 __attribute__((abi_tag)) { struct A1 { }; }\n+inline namespace __test2 __attribute__((abi_tag)) { struct A2 { }; }\n+inline A1 f() {\n+  struct T {\n+    A2 g() {\n+      static X x;\n+    }\n+  };\n+  T().g();\n+}\n+int main() {\n+  f();\n+}"}]}