{"sha": "644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ0YzJjYzVmMmMwOTUwNmE3YmZlZjI5M2E3ZjkwZWZhOGQ3ZTVmYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-21T11:30:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-06-21T11:32:36Z"}, "message": "inline-asm: Fix ICE with bitfields in \"m\" operands [PR100785]\n\nBitfields, while they live in memory, aren't something inline-asm can easily\noperate on.\nFor C and \"=m\" or \"+m\", we were diagnosing bitfields in the past in the\nFE, where c_mark_addressable had:\n      case COMPONENT_REF:\n        if (DECL_C_BIT_FIELD (TREE_OPERAND (x, 1)))\n          {\n            error\n              (\"cannot take address of bit-field %qD\", TREE_OPERAND (x, 1));\n            return false;\n          }\nbut that check got moved in GCC 6 to build_unary_op instead and now we\nemit an error during expansion and ICE afterwards (i.e. error-recovery).\nFor \"m\" it used to be diagnosed in c_mark_addressable too, but since\nGCC 6 it is ice-on-invalid.\nFor C++, this was never diagnosed in the FE, but used to be diagnosed\nin the gimplifier and/or during expansion before 4.8.\n\nThe following patch does multiple things:\n1) diagnoses it in the FEs\n2) stops emitting a redundant diagnostic in the gimplifier using the\n   usual way, if we already see error_mark_node, we assume error has\n   been emitted already and only diagnose if it wasn't error_mark_node;\n   this helps diagnosing the same bug with multiple different\n   errors\n3) simplifies during expansion the inline asm if any errors have been\n   reported (similarly how e.g. vregs pass if it detects errors on\n   inline-asm either deletes them or simplifies to bare minimum -\n   just labels), so that we don't have error-recovery ICEs there\n\n2021-06-11  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR inline-asm/100785\ngcc/\n\t* gimplify.c (gimplify_asm_expr): Don't diagnose errors if\n\toutput or input operands were already error_mark_node.\n\t* cfgexpand.c (expand_asm_stmt): If errors are emitted,\n\tremove all inputs, outputs and clobbers from the asm and\n\tset template to \"\".\ngcc/c/\n\t* c-typeck.c (c_mark_addressable): Diagnose trying to make\n\tbit-fields addressable.\ngcc/cp/\n\t* typeck.c (cxx_mark_addressable): Diagnose trying to make\n\tbit-fields addressable.\ngcc/testsuite/\n\t* c-c++-common/pr100785.c: New test.\n\t* gcc.dg/pr48552-1.c: Don't expect invalid lvalue errors.\n\t* gcc.dg/pr48552-2.c: Likewise.", "tree": {"sha": "d49b4fd8f9aa4d3b3ba153fd9d64d17b90c988f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d49b4fd8f9aa4d3b3ba153fd9d64d17b90c988f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62a3799f34939740c744328849910204e5cf48d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a3799f34939740c744328849910204e5cf48d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a3799f34939740c744328849910204e5cf48d5"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "77de881c14ad448803d386aa27f1624eb7d440f1", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -5034,8 +5034,17 @@ c_mark_addressable (tree exp, bool array_ref_p)\n \t    && TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n \t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (x, 0))))\n \t  return true;\n-\t/* FALLTHRU */\n+\tx = TREE_OPERAND (x, 0);\n+\tbreak;\n+\n       case COMPONENT_REF:\n+\tif (DECL_C_BIT_FIELD (TREE_OPERAND (x, 1)))\n+\t  {\n+\t    error (\"cannot take address of bit-field %qD\",\n+\t\t   TREE_OPERAND (x, 1));\n+\t    return false;\n+\t  }\n+\t/* FALLTHRU */\n       case ADDR_EXPR:\n       case ARRAY_REF:\n       case REALPART_EXPR:"}, {"sha": "6394cfdcb5611265cbba44b969c4e497ef55dd08", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -3082,6 +3082,7 @@ expand_asm_stmt (gasm *stmt)\n   unsigned ninputs = gimple_asm_ninputs (stmt);\n   unsigned nlabels = gimple_asm_nlabels (stmt);\n   unsigned i;\n+  bool error_seen = false;\n \n   /* ??? Diagnose during gimplification?  */\n   if (ninputs + noutputs + nlabels > MAX_RECOG_OPERANDS)\n@@ -3140,6 +3141,7 @@ expand_asm_stmt (gasm *stmt)\n \t\t{\n \t\t  /* ??? Diagnose during gimplification?  */\n \t\t  error (\"unknown register name %qs in %<asm%>\", regname);\n+\t\t  error_seen = true;\n \t\t}\n \t      else if (j == -4)\n \t\t{\n@@ -3202,7 +3204,10 @@ expand_asm_stmt (gasm *stmt)\n \t\t&& REG_P (DECL_RTL (output_tvec[j]))\n \t\t&& HARD_REGISTER_P (DECL_RTL (output_tvec[j]))\n \t\t&& output_hregno == REGNO (DECL_RTL (output_tvec[j])))\n-\t      error (\"invalid hard register usage between output operands\");\n+\t      {\n+\t\terror (\"invalid hard register usage between output operands\");\n+\t\terror_seen = true;\n+\t      }\n \n \t  /* Verify matching constraint operands use the same hard register\n \t     and that the non-matching constraint operands do not use the same\n@@ -3225,13 +3230,19 @@ expand_asm_stmt (gasm *stmt)\n \t\t  }\n \t\tif (i == match\n \t\t    && output_hregno != input_hregno)\n-\t\t  error (\"invalid hard register usage between output operand \"\n-\t\t\t \"and matching constraint operand\");\n+\t\t  {\n+\t\t    error (\"invalid hard register usage between output \"\n+\t\t\t   \"operand and matching constraint operand\");\n+\t\t    error_seen = true;\n+\t\t  }\n \t\telse if (early_clobber_p\n \t\t\t && i != match\n \t\t\t && output_hregno == input_hregno)\n-\t\t  error (\"invalid hard register usage between earlyclobber \"\n-\t\t\t \"operand and input operand\");\n+\t\t  {\n+\t\t    error (\"invalid hard register usage between \"\n+\t\t\t   \"earlyclobber operand and input operand\");\n+\t\t    error_seen = true;\n+\t\t  }\n \t      }\n \t}\n \n@@ -3307,7 +3318,10 @@ expand_asm_stmt (gasm *stmt)\n \t    op = validize_mem (op);\n \n \t  if (! allows_reg && !MEM_P (op))\n-\t    error (\"output number %d not directly addressable\", i);\n+\t    {\n+\t      error (\"output number %d not directly addressable\", i);\n+\t      error_seen = true;\n+\t    }\n \t  if ((! allows_mem && MEM_P (op) && GET_MODE (op) != BLKmode)\n \t      || GET_CODE (op) == CONCAT)\n \t    {\n@@ -3347,6 +3361,19 @@ expand_asm_stmt (gasm *stmt)\n \tinout_opnum.safe_push (i);\n     }\n \n+  const char *str = gimple_asm_string (stmt);\n+  if (error_seen)\n+    {\n+      ninputs = 0;\n+      noutputs = 0;\n+      inout_opnum.truncate (0);\n+      output_rvec.truncate (0);\n+      clobber_rvec.truncate (0);\n+      constraints.truncate (0);\n+      CLEAR_HARD_REG_SET (clobbered_regs);\n+      str = \"\";\n+    }\n+\n   auto_vec<rtx, MAX_RECOG_OPERANDS> input_rvec;\n   auto_vec<machine_mode, MAX_RECOG_OPERANDS> input_mode;\n \n@@ -3405,7 +3432,7 @@ expand_asm_stmt (gasm *stmt)\n     }\n \n   /* For in-out operands, copy output rtx to input rtx.  */\n-  unsigned ninout = inout_opnum.length();\n+  unsigned ninout = inout_opnum.length ();\n   for (i = 0; i < ninout; i++)\n     {\n       int j = inout_opnum[i];\n@@ -3459,7 +3486,7 @@ expand_asm_stmt (gasm *stmt)\n \n   rtx body = gen_rtx_ASM_OPERANDS ((noutputs == 0 ? VOIDmode\n \t\t\t\t    : GET_MODE (output_rvec[0])),\n-\t\t\t\t   ggc_strdup (gimple_asm_string (stmt)),\n+\t\t\t\t   ggc_strdup (str),\n \t\t\t\t   \"\", 0, argvec, constraintvec,\n \t\t\t\t   labelvec, locus);\n   MEM_VOLATILE_P (body) = gimple_asm_volatile_p (stmt);"}, {"sha": "5a9331b36e6fc6b246a5c12e0edda053f3f58c0d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -7119,9 +7119,14 @@ cxx_mark_addressable (tree exp, bool array_ref_p)\n \t    && TREE_CODE (TREE_TYPE (x)) == ARRAY_TYPE\n \t    && VECTOR_TYPE_P (TREE_TYPE (TREE_OPERAND (x, 0))))\n \t  return true;\n+\tx = TREE_OPERAND (x, 0);\n+\tbreak;\n+\n+      case COMPONENT_REF:\n+\tif (bitfield_p (x))\n+\t  error (\"attempt to take address of bit-field\");\n \t/* FALLTHRU */\n       case ADDR_EXPR:\n-      case COMPONENT_REF:\n       case ARRAY_REF:\n       case REALPART_EXPR:\n       case IMAGPART_EXPR:"}, {"sha": "41bae9c188f7d668a628b85262732f5aa9f040f1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -6323,12 +6323,14 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       if (!allows_reg && allows_mem)\n \tmark_addressable (TREE_VALUE (link));\n \n+      tree orig = TREE_VALUE (link);\n       tret = gimplify_expr (&TREE_VALUE (link), pre_p, post_p,\n \t\t\t    is_inout ? is_gimple_min_lval : is_gimple_lvalue,\n \t\t\t    fb_lvalue | fb_mayfail);\n       if (tret == GS_ERROR)\n \t{\n-\t  error (\"invalid lvalue in %<asm%> output %d\", i);\n+\t  if (orig != error_mark_node)\n+\t    error (\"invalid lvalue in %<asm%> output %d\", i);\n \t  ret = tret;\n \t}\n \n@@ -6523,8 +6525,9 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n \t  mark_addressable (TREE_VALUE (link));\n \t  if (tret == GS_ERROR)\n \t    {\n-\t      error_at (EXPR_LOC_OR_LOC (TREE_VALUE (link), input_location),\n-\t\t\t\"memory input %d is not directly addressable\", i);\n+\t      if (inputv != error_mark_node)\n+\t\terror_at (EXPR_LOC_OR_LOC (TREE_VALUE (link), input_location),\n+\t\t\t  \"memory input %d is not directly addressable\", i);\n \t      ret = tret;\n \t    }\n \t}"}, {"sha": "37ff0aa8925fcae7ecb7cb3210310b8ffaf54845", "filename": "gcc/testsuite/c-c++-common/pr100785.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr100785.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr100785.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr100785.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -0,0 +1,21 @@\n+/* PR inline-asm/100785 */\n+\n+struct S { int a : 1; };\n+\n+void\n+foo (struct S *x)\n+{\n+  __asm__ (\"\" : \"+m\" (x->a));\t/* { dg-error \"address of bit-field\" } */\n+}\n+\n+void\n+bar (struct S *x)\n+{\n+  __asm__ (\"\" : \"=m\" (x->a));\t/* { dg-error \"address of bit-field\" } */\n+}\n+\n+void\n+baz (struct S *x)\n+{\n+  __asm__ (\"\" : : \"m\" (x->a));\t/* { dg-error \"address of bit-field\" } */\n+}"}, {"sha": "4cd7c59011ef8135f9dfec072b425f9e95ef8ea2", "filename": "gcc/testsuite/gcc.dg/pr48552-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-1.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -15,7 +15,7 @@ f2 (void *x)\n {\n   __asm volatile (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\n void\n f3 (void *x)\n {\n@@ -39,7 +39,7 @@ f6 (void *x)\n {\n   __asm volatile (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\n void\n f7 (struct S *x)\n {"}, {"sha": "e22600a2476356548e74b8510f94c5e96e4a47c3", "filename": "gcc/testsuite/gcc.dg/pr48552-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr48552-2.c?ref=644c2cc5f2c09506a7bfef293a7f90efa8d7e5fa", "patch": "@@ -15,7 +15,7 @@ f2 (void *x)\n {\n   __asm (\"\" : \"=r\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\n void\n f3 (void *x)\n {\n@@ -39,7 +39,7 @@ f6 (void *x)\n {\n   __asm (\"\" : \"=g\" (*x));\t/* { dg-warning \"dereferencing\" \"deref\" } */\n }\t\t\t\t/* { dg-error \"invalid use of void expression\" \"void expr\" { target *-*-* } .-1 } */\n-\t\t\t\t/* { dg-error \"invalid lvalue in 'asm' output 0\" \"invalid lvalue\" { target *-*-* } .-2 } */\n+\n void\n f7 (struct S *x)\n {"}]}