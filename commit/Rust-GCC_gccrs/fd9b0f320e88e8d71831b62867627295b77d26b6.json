{"sha": "fd9b0f320e88e8d71831b62867627295b77d26b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5YjBmMzIwZTg4ZThkNzE4MzFiNjI4Njc2MjcyOTViNzdkMjZiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-08-05T22:03:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-08-05T22:03:52Z"}, "message": "re PR c++/58080 (internal compiler error, decltype in function declaration (for SFINAE purposes))\n\n/c-family\n2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58080\n\t* c-common.c (pointer_int_sum): Add bool parameter.\n\t* c-common.h (pointer_int_sum): Adjust declaration.\n\n/cp\n2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58080\n\t* typeck.c (cp_pointer_int_sum): Add tsubst_flags_t parameter.\n\t(cp_build_binary_op): Adjust.\n\n/testsuite\n2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/58080\n\t* g++.dg/cpp0x/pr58080.C: New.\n\nFrom-SVN: r201512", "tree": {"sha": "972828ab28f5fc63eb5a27940150211bbef325be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/972828ab28f5fc63eb5a27940150211bbef325be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9b0f320e88e8d71831b62867627295b77d26b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9b0f320e88e8d71831b62867627295b77d26b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9b0f320e88e8d71831b62867627295b77d26b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9b0f320e88e8d71831b62867627295b77d26b6/comments", "author": null, "committer": null, "parents": [{"sha": "8ac69a6c3230bd774a6f59f37b864a4bcee81c7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ac69a6c3230bd774a6f59f37b864a4bcee81c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ac69a6c3230bd774a6f59f37b864a4bcee81c7c"}], "stats": {"total": 61, "additions": 51, "deletions": 10}, "files": [{"sha": "823c0f79b5aec555a60cf8cafa5df71501756601", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -1,3 +1,9 @@\n+2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58080\n+\t* c-common.c (pointer_int_sum): Add bool parameter.\n+\t* c-common.h (pointer_int_sum): Adjust declaration.\n+\n 2013-08-05  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* c-pretty-print.c (print_c_tree): Simplify.  Use non-static local"}, {"sha": "5d1a1c6c2ce7c87cac65b581d22c88b3529c5d8f", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -4284,7 +4284,7 @@ shorten_compare (tree *op0_ptr, tree *op1_ptr, tree *restype_ptr,\n \n tree\n pointer_int_sum (location_t loc, enum tree_code resultcode,\n-\t\t tree ptrop, tree intop)\n+\t\t tree ptrop, tree intop, bool complain)\n {\n   tree size_exp, ret;\n \n@@ -4293,14 +4293,20 @@ pointer_int_sum (location_t loc, enum tree_code resultcode,\n \n   if (TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n     {\n-      pedwarn (loc, OPT_Wpointer_arith,\n-\t       \"pointer of type %<void *%> used in arithmetic\");\n+      if (complain && warn_pointer_arith)\n+\tpedwarn (loc, OPT_Wpointer_arith,\n+\t\t \"pointer of type %<void *%> used in arithmetic\");\n+      else if (!complain)\n+\treturn error_mark_node;\n       size_exp = integer_one_node;\n     }\n   else if (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE)\n     {\n-      pedwarn (loc, OPT_Wpointer_arith,\n-\t       \"pointer to a function used in arithmetic\");\n+      if (complain && warn_pointer_arith)\n+\tpedwarn (loc, OPT_Wpointer_arith,\n+\t\t \"pointer to a function used in arithmetic\");\n+      else if (!complain)\n+\treturn error_mark_node;\n       size_exp = integer_one_node;\n     }\n   else"}, {"sha": "cc09dbc008fc85557a4db241c10b8b641ddea766", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -790,7 +790,8 @@ extern tree shorten_binary_op (tree result_type, tree op0, tree op1, bool bitwis\n    and, if so, perhaps change them both back to their original type.  */\n extern tree shorten_compare (tree *, tree *, tree *, enum tree_code *);\n \n-extern tree pointer_int_sum (location_t, enum tree_code, tree, tree);\n+extern tree pointer_int_sum (location_t, enum tree_code, tree, tree,\n+\t\t\t     bool = true);\n \n /* Add qualifiers to a type, in the fashion for C.  */\n extern tree c_build_qualified_type (tree, int);"}, {"sha": "f85fd3f1b32c51c8ebaa779ade803d389bd07c5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -1,3 +1,9 @@\n+2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58080\n+\t* typeck.c (cp_pointer_int_sum): Add tsubst_flags_t parameter.\n+\t(cp_build_binary_op): Adjust.\n+\n 2013-08-04  Gabriel Dos Reis  <gdr@integrable-solutions.net>\n \n \t* cxx-pretty-print.h (pp_c_base): Remove."}, {"sha": "e09c325d51bac4c262221f866659c19212dfedf1", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -43,7 +43,7 @@ static tree pfn_from_ptrmemfunc (tree);\n static tree delta_from_ptrmemfunc (tree);\n static tree convert_for_assignment (tree, tree, impl_conv_rhs, tree, int,\n \t\t\t\t    tsubst_flags_t, int);\n-static tree cp_pointer_int_sum (enum tree_code, tree, tree);\n+static tree cp_pointer_int_sum (enum tree_code, tree, tree, tsubst_flags_t);\n static tree rationalize_conditional_expr (enum tree_code, tree, \n \t\t\t\t\t  tsubst_flags_t);\n static int comp_ptr_ttypes_real (tree, tree, int);\n@@ -4064,7 +4064,8 @@ cp_build_binary_op (location_t location,\n \t    }\n \t  return cp_pointer_int_sum (code,\n \t\t\t\t     ptr_operand, \n-\t\t\t\t     int_operand);\n+\t\t\t\t     int_operand,\n+\t\t\t\t     complain);\n \t}\n       common = 1;\n       break;\n@@ -4894,7 +4895,8 @@ build_x_vec_perm_expr (location_t loc,\n    of pointer PTROP and integer INTOP.  */\n \n static tree\n-cp_pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n+cp_pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop,\n+\t\t    tsubst_flags_t complain)\n {\n   tree res_type = TREE_TYPE (ptrop);\n \n@@ -4906,7 +4908,8 @@ cp_pointer_int_sum (enum tree_code resultcode, tree ptrop, tree intop)\n   complete_type (TREE_TYPE (res_type));\n \n   return pointer_int_sum (input_location, resultcode, ptrop,\n-\t\t\t  fold_if_not_in_template (intop));\n+\t\t\t  fold_if_not_in_template (intop),\n+\t\t\t  complain & tf_warning_or_error);\n }\n \n /* Return a tree for the difference of pointers OP0 and OP1."}, {"sha": "92aff7a9f5116067a44516a790eee08d87efce7f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -1,3 +1,8 @@\n+2013-08-05  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/58080\n+\t* g++.dg/cpp0x/pr58080.C: New.\n+\n 2013-08-05  David Malcolm  <dmalcolm@redhat.com>\n \n \t* lib/plugin-support.exp (plugin-test-execute): Add -fno-rtti"}, {"sha": "82f200df0442916e467b6476042f8da7c173ee21", "filename": "gcc/testsuite/g++.dg/cpp0x/pr58080.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58080.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9b0f320e88e8d71831b62867627295b77d26b6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58080.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr58080.C?ref=fd9b0f320e88e8d71831b62867627295b77d26b6", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/58080\n+// { dg-do compile { target c++11 } }\n+\n+template<class A, class B>\n+struct Eval\n+{\n+  void foo(A a, B b) { bar(a,b, 0); }\n+  auto bar(A a, B b, decltype(a+b)* _) -> decltype(a+b) { return a+b; }  // { dg-error \"pointer\" }\n+};\n+\n+int main()\n+{\n+  Eval<int,void*> eiv; eiv.foo(0,0);\n+}"}]}