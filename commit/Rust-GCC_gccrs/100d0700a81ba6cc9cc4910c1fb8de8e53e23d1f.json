{"sha": "100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTAwZDA3MDBhODFiYTZjYzljYzQ5MTBjMWZiOGRlOGU1M2UyM2QxZg==", "commit": {"author": {"name": "David S. Miller", "email": "davem@davemloft.net", "date": "2017-06-06T17:02:22Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "2017-06-06T17:02:22Z"}, "message": "sparc: Fix stack references in return delay slot.\n\ngcc/\n\n\tPR target/80968\n\t* config/sparc/sparc.c (sparc_expand_prologue): Emit frame\n\tblockage if function uses alloca.\n\ngcc/testsuite/\n\n\t* gcc.target/sparc/sparc-ret-3.c: New test.\n\nFrom-SVN: r248926", "tree": {"sha": "437601299aaae6cf617c03b21cb51c297a9c8856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/437601299aaae6cf617c03b21cb51c297a9c8856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/comments", "author": {"login": "davem330", "id": 1053866, "node_id": "MDQ6VXNlcjEwNTM4NjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1053866?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davem330", "html_url": "https://github.com/davem330", "followers_url": "https://api.github.com/users/davem330/followers", "following_url": "https://api.github.com/users/davem330/following{/other_user}", "gists_url": "https://api.github.com/users/davem330/gists{/gist_id}", "starred_url": "https://api.github.com/users/davem330/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davem330/subscriptions", "organizations_url": "https://api.github.com/users/davem330/orgs", "repos_url": "https://api.github.com/users/davem330/repos", "events_url": "https://api.github.com/users/davem330/events{/privacy}", "received_events_url": "https://api.github.com/users/davem330/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23b0f9f81d16e8fd30c79c67ea2142af3b6cf590", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b0f9f81d16e8fd30c79c67ea2142af3b6cf590", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b0f9f81d16e8fd30c79c67ea2142af3b6cf590"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "a394bcbb1f061b2bda86066407b5b5c50eadf308", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "patch": "@@ -1,3 +1,9 @@\n+2017-06-06  David S. Miller  <davem@davemloft.net>\n+\n+\tPR target/80968\n+\t* config/sparc/sparc.c (sparc_expand_prologue): Emit frame\n+\tblockage if function uses alloca.\n+\n 2017-06-06  Maxim Kuvyrkov  <maxim.kuvyrkov@linaro.org>\n \n         * tree-ssa-loop-prefetch.c (struct mem_ref_group, struct mem_ref):"}, {"sha": "95a64a41f987ee60b27d0ef9662aca853dc8cade", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "patch": "@@ -5792,6 +5792,9 @@ sparc_expand_epilogue (bool for_eh)\n {\n   HOST_WIDE_INT size = sparc_frame_size;\n \n+  if (cfun->calls_alloca)\n+    emit_insn (gen_frame_blockage ());\n+\n   if (sparc_n_global_fp_regs > 0)\n     emit_save_or_restore_global_fp_regs (sparc_frame_base_reg,\n \t\t\t\t         sparc_frame_base_offset"}, {"sha": "8b456276571039eebed9e805502003a5b142fc06", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "patch": "@@ -1,3 +1,7 @@\n+2017-06-06  David S. Miller  <davem@davemloft.net>\n+\n+\t* gcc.target/sparc/sparc-ret-3.c: New test.\n+\n 2017-06-06  Tom de Vries  <tom@codesourcery.com>\n \n \t* gcc.c-torture/compile/20000326-2.c: Use dg-require-effective-target"}, {"sha": "7a151f80b42b07f1db19cb18f023e0d4065f03c7", "filename": "gcc/testsuite/gcc.target/sparc/sparc-ret-3.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-ret-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-ret-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsparc%2Fsparc-ret-3.c?ref=100d0700a81ba6cc9cc4910c1fb8de8e53e23d1f", "patch": "@@ -0,0 +1,53 @@\n+/* PR target/80968 */\n+/* { dg-do compile } */\n+/* { dg-skip-if \"no register windows\" { *-*-* } { \"-mflat\" } { \"\" } } */\n+/* { dg-require-effective-target ilp32 } */\n+/* { dg-options \"-mcpu=ultrasparc -O\" } */\n+\n+/* Make sure references to the stack frame do not slip into the delay slot\n+   of a return instruction.  */\n+\n+struct crypto_shash {\n+\tunsigned int descsize;\n+};\n+struct crypto_shash *tfm;\n+\n+struct shash_desc {\n+\tstruct crypto_shash *tfm;\n+\tunsigned int flags;\n+\n+\tvoid *__ctx[] __attribute__((aligned(8)));\n+};\n+\n+static inline unsigned int crypto_shash_descsize(struct crypto_shash *tfm)\n+{\n+\treturn tfm->descsize;\n+}\n+\n+static inline void *shash_desc_ctx(struct shash_desc *desc)\n+{\n+\treturn desc->__ctx;\n+}\n+\n+#define SHASH_DESC_ON_STACK(shash, ctx)\t\t\t\t  \\\n+\tchar __##shash##_desc[sizeof(struct shash_desc) +\t  \\\n+\t\t\t      crypto_shash_descsize(ctx)] __attribute__((aligned(8))); \\\n+\tstruct shash_desc *shash = (struct shash_desc *)__##shash##_desc\n+\n+extern int crypto_shash_update(struct shash_desc *, const void *, unsigned int);\n+\n+unsigned int bug(unsigned int crc, const void *address, unsigned int length)\n+{\n+\tSHASH_DESC_ON_STACK(shash, tfm);\n+\tunsigned int *ctx = (unsigned int *)shash_desc_ctx(shash);\n+\tint err;\n+\n+\tshash->tfm = tfm;\n+\tshash->flags = 0;\n+\t*ctx = crc;\n+\n+\terr = crypto_shash_update(shash, address, length);\n+\n+\treturn *ctx;\n+}\n+/* { dg-final { scan-assembler \"ld\\[ \\t\\]*\\\\\\[%i5\\\\+8\\\\\\], %i0\\n\\[^\\n\\]*return\\[ \\t\\]*%i7\\\\+8\" } } */"}]}