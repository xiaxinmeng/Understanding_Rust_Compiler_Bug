{"sha": "78e0ba39dcad4d5deb84479ccd108a89f53ea853", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzhlMGJhMzlkY2FkNGQ1ZGViODQ0NzljY2QxMDhhODlmNTNlYTg1Mw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-01-25T21:56:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-01-25T21:56:21Z"}, "message": "acconfig.h: Define `const' to the empty string if neither __STDC__ nor __cplusplus is defined.\n\n\t* acconfig.h: Define `const' to the empty string if neither\n\t__STDC__ nor __cplusplus is defined.\n\t* config.in: Regenerated.\n\nFrom-SVN: r39272", "tree": {"sha": "a43596b0de85765570d75dbad446df2dd4110a0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a43596b0de85765570d75dbad446df2dd4110a0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78e0ba39dcad4d5deb84479ccd108a89f53ea853", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e0ba39dcad4d5deb84479ccd108a89f53ea853", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78e0ba39dcad4d5deb84479ccd108a89f53ea853", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78e0ba39dcad4d5deb84479ccd108a89f53ea853/comments", "author": null, "committer": null, "parents": [{"sha": "05dba9ee7c8fb0cb0135c6120a21738503a3fe27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05dba9ee7c8fb0cb0135c6120a21738503a3fe27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05dba9ee7c8fb0cb0135c6120a21738503a3fe27"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "4a7417f9bd26cbf7111e98b2d01c5a1695966b7a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=78e0ba39dcad4d5deb84479ccd108a89f53ea853", "patch": "@@ -1,3 +1,9 @@\n+2001-01-25  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* acconfig.h: Define `const' to the empty string if neither\n+\t__STDC__ nor __cplusplus is defined.\n+\t* config.in: Regenerated.\n+\n 2001-01-25  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config.gcc (rs6000-ibm-aix[5-9]*): Change to aix51.h."}, {"sha": "dec619b84b0e42579dbd1bbea029c4888ae84b74", "filename": "gcc/acconfig.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2Facconfig.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2Facconfig.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Facconfig.h?ref=78e0ba39dcad4d5deb84479ccd108a89f53ea853", "patch": "@@ -25,3 +25,17 @@\n \n /* Define to `int' if <sys/types.h> doesn't define.  */\n #undef ssize_t\n+\n+@BOTTOM@\n+\n+/* Bison unconditionally undefines `const' if neither `__STDC__' nor\n+   __cplusplus are defined.  That's a problem since we use `const' in\n+   the GCC headers, and the resulting bison code is therefore type\n+   unsafe.  Thus, we must match the bison behavior here.  */\n+\n+#ifndef __STDC__\n+#ifndef __cplusplus\n+#undef const\n+#define const\n+#endif\n+#endif"}, {"sha": "a4336876c5671c0f9a4dea157a64bf66b71a2bc1", "filename": "gcc/config.in", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78e0ba39dcad4d5deb84479ccd108a89f53ea853/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=78e0ba39dcad4d5deb84479ccd108a89f53ea853", "patch": "@@ -452,3 +452,15 @@\n /* Define to 1 if you want to enable namespaces (-fhonor-std) by default. */\n #undef ENABLE_STD_NAMESPACE\n \n+\n+/* Bison unconditionally undefines `const' if neither `__STDC__' nor\n+   __cplusplus are defined.  That's a problem since we use `const' in\n+   the GCC headers, and the resulting bison code is therefore type\n+   unsafe.  Thus, we must match the bison behavior here.  */\n+\n+#ifndef __STDC__\n+#ifndef __cplusplus\n+#undef const\n+#define const\n+#endif\n+#endif"}]}