{"sha": "ff861d65950ede95b6c28ac720c56d44cff784de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4NjFkNjU5NTBlZGU5NWI2YzI4YWM3MjBjNTZkNDRjZmY3ODRkZQ==", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-05T19:21:42Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2020-02-06T10:20:08Z"}, "message": "    [GCC][BUG][ARM] Fix ICE due to BFmode libfunc call (PR93300)\n\n    This was sent and approved on gcc-patches as \"[GCC][BUG][Aarch64][ARM]\n    (PR93300) Fix ICE due to BFmode placement in GET_MODES_WIDER chain\".\n\n    The observed error came about because BFmode was placed between HFmode\n    and SFmode in the GET_MODES_WIDER chain, resulting in convert_mode_scalar\n    attempting to gen a libfunc for a HFmode -> BFmode conversion.\n\n    This patch registers NULL for all libfuncs in BFmode, which stops the\n    middle-end from attempting to generate them.\n\n    gcc/ChangeLog:\n    2020-02-06  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n\n\tPR target/93300\n\t* config/arm/arm.c (arm_block_arith_comp_libfuncs_for_mode): New.\n\t(arm_init_libfuncs): Add BFmode support to block spurious BF libfuncs.\n\tUse arm_block_arith_comp_libfuncs_for_mode for HFmode.", "tree": {"sha": "ab66f3293322c46e53e720930c0cc08a2caeb73a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ab66f3293322c46e53e720930c0cc08a2caeb73a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff861d65950ede95b6c28ac720c56d44cff784de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff861d65950ede95b6c28ac720c56d44cff784de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff861d65950ede95b6c28ac720c56d44cff784de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff861d65950ede95b6c28ac720c56d44cff784de/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f740c67dbb90177aa71d3c60ef9b0fd2f44dbd9"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "82079c763256a71f84ec7ba632042d3e8af75c00", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff861d65950ede95b6c28ac720c56d44cff784de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff861d65950ede95b6c28ac720c56d44cff784de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff861d65950ede95b6c28ac720c56d44cff784de", "patch": "@@ -1,3 +1,10 @@\n+2020-02-06  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n+\n+\tPR target/93300\n+\t* config/arm/arm.c (arm_block_arith_comp_libfuncs_for_mode): New.\n+\t(arm_init_libfuncs): Add BFmode support to block spurious BF libfuncs.\n+\tUse arm_block_arith_comp_libfuncs_for_mode for HFmode.\n+\n 2020-02-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/93594"}, {"sha": "9cc7bc0e56217574d436e257d2d7a03b132912e4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 36, "deletions": 15, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff861d65950ede95b6c28ac720c56d44cff784de/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff861d65950ede95b6c28ac720c56d44cff784de/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=ff861d65950ede95b6c28ac720c56d44cff784de", "patch": "@@ -2491,10 +2491,35 @@ arm_set_fixed_conv_libfunc (convert_optab optable, machine_mode to,\n \n static GTY(()) rtx speculation_barrier_libfunc;\n \n+/* Record that we have no arithmetic or comparison libfuncs for\n+   machine mode MODE.  */\n+\n+static void\n+arm_block_arith_comp_libfuncs_for_mode (machine_mode mode)\n+{\n+  /* Arithmetic.  */\n+  set_optab_libfunc (add_optab, mode, NULL);\n+  set_optab_libfunc (sdiv_optab, mode, NULL);\n+  set_optab_libfunc (smul_optab, mode, NULL);\n+  set_optab_libfunc (neg_optab, mode, NULL);\n+  set_optab_libfunc (sub_optab, mode, NULL);\n+\n+  /* Comparisons.  */\n+  set_optab_libfunc (eq_optab, mode, NULL);\n+  set_optab_libfunc (ne_optab, mode, NULL);\n+  set_optab_libfunc (lt_optab, mode, NULL);\n+  set_optab_libfunc (le_optab, mode, NULL);\n+  set_optab_libfunc (ge_optab, mode, NULL);\n+  set_optab_libfunc (gt_optab, mode, NULL);\n+  set_optab_libfunc (unord_optab, mode, NULL);\n+}\n+\n /* Set up library functions unique to ARM.  */\n static void\n arm_init_libfuncs (void)\n {\n+  machine_mode mode_iter;\n+\n   /* For Linux, we have access to kernel support for atomic operations.  */\n   if (arm_abi == ARM_ABI_AAPCS_LINUX)\n     init_sync_libfuncs (MAX_SYNC_LIBFUNC_SIZE);\n@@ -2623,27 +2648,23 @@ arm_init_libfuncs (void)\n \t\t\t ? \"__gnu_d2h_ieee\"\n \t\t\t : \"__gnu_d2h_alternative\"));\n \n-      /* Arithmetic.  */\n-      set_optab_libfunc (add_optab, HFmode, NULL);\n-      set_optab_libfunc (sdiv_optab, HFmode, NULL);\n-      set_optab_libfunc (smul_optab, HFmode, NULL);\n-      set_optab_libfunc (neg_optab, HFmode, NULL);\n-      set_optab_libfunc (sub_optab, HFmode, NULL);\n-\n-      /* Comparisons.  */\n-      set_optab_libfunc (eq_optab, HFmode, NULL);\n-      set_optab_libfunc (ne_optab, HFmode, NULL);\n-      set_optab_libfunc (lt_optab, HFmode, NULL);\n-      set_optab_libfunc (le_optab, HFmode, NULL);\n-      set_optab_libfunc (ge_optab, HFmode, NULL);\n-      set_optab_libfunc (gt_optab, HFmode, NULL);\n-      set_optab_libfunc (unord_optab, HFmode, NULL);\n+      arm_block_arith_comp_libfuncs_for_mode (HFmode);\n       break;\n \n     default:\n       break;\n     }\n \n+  /* For all possible libcalls in BFmode, record NULL.  */\n+  FOR_EACH_MODE_IN_CLASS (mode_iter, MODE_FLOAT)\n+    {\n+      set_conv_libfunc (trunc_optab, BFmode, mode_iter, NULL);\n+      set_conv_libfunc (trunc_optab, mode_iter, BFmode, NULL);\n+      set_conv_libfunc (sext_optab, mode_iter, BFmode, NULL);\n+      set_conv_libfunc (sext_optab, BFmode, mode_iter, NULL);\n+    }\n+  arm_block_arith_comp_libfuncs_for_mode (BFmode);\n+\n   /* Use names prefixed with __gnu_ for fixed-point helper functions.  */\n   {\n     const arm_fixed_mode_set fixed_arith_modes[] ="}]}