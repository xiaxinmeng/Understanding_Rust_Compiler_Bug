{"sha": "cd1d3445e34add252dbac135d12fe59b77fbf70f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2QxZDM0NDVlMzRhZGQyNTJkYmFjMTM1ZDEyZmU1OWI3N2ZiZjcwZg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2002-11-04T03:04:10Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2002-11-04T03:04:10Z"}, "message": "* config/rs6000/rs6000.md (movti_string): Use string instructions.\n\nFrom-SVN: r58781", "tree": {"sha": "4d3453f68ac71571a0000e0300bb90494e949070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d3453f68ac71571a0000e0300bb90494e949070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd1d3445e34add252dbac135d12fe59b77fbf70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1d3445e34add252dbac135d12fe59b77fbf70f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd1d3445e34add252dbac135d12fe59b77fbf70f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd1d3445e34add252dbac135d12fe59b77fbf70f/comments", "author": null, "committer": null, "parents": [{"sha": "a5db0683cb7693e65b162883a755fe2a5f4ed3d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5db0683cb7693e65b162883a755fe2a5f4ed3d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5db0683cb7693e65b162883a755fe2a5f4ed3d8"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "76d0d4407ebbc4571fafc6968755482dd7617a30", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1d3445e34add252dbac135d12fe59b77fbf70f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1d3445e34add252dbac135d12fe59b77fbf70f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cd1d3445e34add252dbac135d12fe59b77fbf70f", "patch": "@@ -1,3 +1,7 @@\n+2002-11-03  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.md (movti_string): Use string instructions.\n+\n 2002-11-03  Roger Sayle  <roger@eyesopen.com>\n \n \tPR c/7128"}, {"sha": "53c6f8a9f4eb20356c34ff0243e4537b9b5daebd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd1d3445e34add252dbac135d12fe59b77fbf70f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd1d3445e34add252dbac135d12fe59b77fbf70f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=cd1d3445e34add252dbac135d12fe59b77fbf70f", "patch": "@@ -9248,9 +9248,9 @@\n    (set_attr \"length\" \"4,16,16,4,16\")])\n \n (define_insn \"*movti_string\"\n-  [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=m,????r,????r\")\n-\t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,m\"))\n-   (clobber (match_scratch:SI 2 \"=X,X,X\"))]\n+  [(set (match_operand:TI 0 \"reg_or_mem_operand\" \"=Q,m,????r,????r,????r\")\n+\t(match_operand:TI 1 \"reg_or_mem_operand\" \"r,r,r,Q,m\"))\n+   (clobber (match_scratch:SI 2 \"=X,X,X,X,X\"))]\n   \"TARGET_STRING && ! TARGET_POWER && ! TARGET_POWERPC64\n    && (gpc_reg_operand (operands[0], TImode) || gpc_reg_operand (operands[1], TImode))\"\n   \"*\n@@ -9261,9 +9261,10 @@\n       abort ();\n \n     case 0:\n-      return \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\;{st|stw} %Y1,%Y0\\;{st|stw} %Z1,%Z0\\\";\n-\n+      return \\\"{stsi|stswi} %1,%P0,16\\\";\n     case 1:\n+      return \\\"{st%U0|stw%U0} %1,%0\\;{st|stw} %L1,%L0\\;{st|stw} %Y1,%Y0\\;{st|stw} %Z1,%Z0\\\";\n+    case 2:\n       /* Normally copy registers with lowest numbered register copied first.\n \t But copy in the other order if the first register of the output\n \t is the second, third, or fourth register in the input.  */\n@@ -9272,7 +9273,13 @@\n \treturn \\\"mr %Z0,%Z1\\;mr %Y0,%Y1\\;mr %L0,%L1\\;mr %0,%1\\\";\n       else\n \treturn \\\"mr %0,%1\\;mr %L0,%L1\\;mr %Y0,%Y1\\;mr %Z0,%Z1\\\";\n-    case 2:\n+    case 3:\n+      /* If the address is not used in the output, we can use lsi.  Otherwise,\n+\t fall through to generating four loads.  */\n+      if (! reg_overlap_mentioned_p (operands[0], operands[1]))\n+\treturn \\\"{lsi|lswi} %0,%P1,16\\\";\n+      /* ... fall through ...  */\n+    case 4:\n       /* If the address register is the same as the register for the lowest-\n \t addressed word, load it last.  Similarly for the next two words.\n \t Otherwise load lowest address to highest.  */\n@@ -9289,8 +9296,8 @@\n \treturn \\\"{l%U1|lwz%U1} %0,%1\\;{l|lwz} %L0,%L1\\;{l|lwz} %Y0,%Y1\\;{l|lwz} %Z0,%Z1\\\";\n     }\n }\"\n-  [(set_attr \"type\" \"store,*,load\")\n-   (set_attr \"length\" \"16,16,16\")])\n+  [(set_attr \"type\" \"store,store,*,load,load\")\n+   (set_attr \"length\" \"4,16,16,4,16\")])\n \n (define_insn \"*movti_ppc64\"\n   [(set (match_operand:TI 0 \"nonimmediate_operand\" \"=r,r,m\")"}]}