{"sha": "75c6bd46fe011b1c8187eb918eac774bb704170b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzVjNmJkNDZmZTAxMWIxYzgxODdlYjkxOGVhYzc3NGJiNzA0MTcwYg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-04T20:51:04Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1999-11-04T20:51:04Z"}, "message": "cse.c (cse_main): Use xmalloc, not alloca.\n\n        * cse.c (cse_main): Use xmalloc, not alloca.\n        (cse_basic_block): Likewise.\n        * local-alloc.c (local_alloc): Likewise.\n\nFrom-SVN: r30399", "tree": {"sha": "4d5e2ea7782f490dbfe2fcc8ee7763b1622c4305", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d5e2ea7782f490dbfe2fcc8ee7763b1622c4305"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/75c6bd46fe011b1c8187eb918eac774bb704170b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6bd46fe011b1c8187eb918eac774bb704170b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75c6bd46fe011b1c8187eb918eac774bb704170b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75c6bd46fe011b1c8187eb918eac774bb704170b/comments", "author": null, "committer": null, "parents": [{"sha": "17074a35df5c8c5de3f24cef85585b0f738d1ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17074a35df5c8c5de3f24cef85585b0f738d1ec9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17074a35df5c8c5de3f24cef85585b0f738d1ec9"}], "stats": {"total": 90, "additions": 62, "deletions": 28}, "files": [{"sha": "66468139e0ce815f39cc4572f3ee116eed347451", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=75c6bd46fe011b1c8187eb918eac774bb704170b", "patch": "@@ -1,4 +1,11 @@\n-Thu Nov  4 14:22:12 1999  David Billinghurst  <David.Billinghurst@riotinto.com.au>,  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+Thu Nov  4 12:49:52 1999  Richard Henderson  <rth@cygnus.com>\n+\n+\t* cse.c (cse_main): Use xmalloc, not alloca.\n+\t(cse_basic_block): Likewise.\n+\t* local-alloc.c (local_alloc): Likewise.\n+\n+Thu Nov  4 14:22:12 1999  David Billinghurst  <David.Billinghurst@riotinto.com.au>\n+\t\t\t  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* rtl.c: Include toplev.h.\n \t(fatal): Remove declaration."}, {"sha": "406f8798382fe034f090db2b09133250179b3bc1", "filename": "gcc/cse.c", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=75c6bd46fe011b1c8187eb918eac774bb704170b", "patch": "@@ -6877,8 +6877,8 @@ cse_main (f, nregs, after_loop, file)\n \n   max_insn_uid = get_max_uid ();\n \n-  reg_next_eqv = (int *) alloca (nregs * sizeof (int));\n-  reg_prev_eqv = (int *) alloca (nregs * sizeof (int));\n+  reg_next_eqv = (int *) xmalloc (nregs * sizeof (int));\n+  reg_prev_eqv = (int *) xmalloc (nregs * sizeof (int));\n \n #ifdef LOAD_EXTEND_OP\n \n@@ -6896,8 +6896,7 @@ cse_main (f, nregs, after_loop, file)\n   /* Find the largest uid.  */\n \n   max_uid = get_max_uid ();\n-  uid_cuid = (int *) alloca ((max_uid + 1) * sizeof (int));\n-  bzero ((char *) uid_cuid, (max_uid + 1) * sizeof (int));\n+  uid_cuid = (int *) xcalloc (max_uid + 1, sizeof (int));\n \n   /* Compute the mapping from uids to cuids.\n      CUIDs are numbers assigned to insns, like uids,\n@@ -7024,6 +7023,9 @@ cse_main (f, nregs, after_loop, file)\n \n   /* Clean up.  */\n   end_alias_analysis ();\n+  free (uid_cuid);\n+  free (reg_next_eqv);\n+  free (reg_prev_eqv);\n \n   return cse_jumps_altered || recorded_label_ref;\n }\n@@ -7050,16 +7052,16 @@ cse_basic_block (from, to, next_branch, around_loop)\n   /* Each of these arrays is undefined before max_reg, so only allocate\n      the space actually needed and adjust the start below.  */\n \n-  qty_first_reg = (int *) alloca ((max_qty - max_reg) * sizeof (int));\n-  qty_last_reg = (int *) alloca ((max_qty - max_reg) * sizeof (int));\n-  qty_mode = (enum machine_mode *) alloca ((max_qty - max_reg)\n+  qty_first_reg = (int *) xmalloc ((max_qty - max_reg) * sizeof (int));\n+  qty_last_reg = (int *) xmalloc ((max_qty - max_reg) * sizeof (int));\n+  qty_mode = (enum machine_mode *) xmalloc ((max_qty - max_reg)\n \t\t\t\t\t   * sizeof (enum machine_mode));\n-  qty_const = (rtx *) alloca ((max_qty - max_reg) * sizeof (rtx));\n-  qty_const_insn = (rtx *) alloca ((max_qty - max_reg) * sizeof (rtx));\n+  qty_const = (rtx *) xmalloc ((max_qty - max_reg) * sizeof (rtx));\n+  qty_const_insn = (rtx *) xmalloc ((max_qty - max_reg) * sizeof (rtx));\n   qty_comparison_code\n-    = (enum rtx_code *) alloca ((max_qty - max_reg) * sizeof (enum rtx_code));\n-  qty_comparison_qty = (int *) alloca ((max_qty - max_reg) * sizeof (int));\n-  qty_comparison_const = (rtx *) alloca ((max_qty - max_reg) * sizeof (rtx));\n+    = (enum rtx_code *) xmalloc ((max_qty - max_reg) * sizeof (enum rtx_code));\n+  qty_comparison_qty = (int *) xmalloc ((max_qty - max_reg) * sizeof (int));\n+  qty_comparison_const = (rtx *) xmalloc ((max_qty - max_reg) * sizeof (rtx));\n \n   qty_first_reg -= max_reg;\n   qty_last_reg -= max_reg;\n@@ -7236,6 +7238,15 @@ cse_basic_block (from, to, next_branch, around_loop)\n       && LABEL_NUSES (JUMP_LABEL (PREV_INSN (to))) == 1)\n     cse_around_loop (JUMP_LABEL (PREV_INSN (to)));\n \n+  free (qty_first_reg + max_reg);\n+  free (qty_last_reg + max_reg);\n+  free (qty_mode + max_reg);\n+  free (qty_const + max_reg);\n+  free (qty_const_insn + max_reg);\n+  free (qty_comparison_code + max_reg);\n+  free (qty_comparison_qty + max_reg);\n+  free (qty_comparison_const + max_reg);\n+\n   return to ? NEXT_INSN (to) : 0;\n }\n \f"}, {"sha": "3578f859794dfa545ecd21e2291e3fb7deab479b", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/75c6bd46fe011b1c8187eb918eac774bb704170b/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=75c6bd46fe011b1c8187eb918eac774bb704170b", "patch": "@@ -326,25 +326,25 @@ local_alloc ()\n      See the declarations of these variables, above,\n      for what they mean.  */\n \n-  qty_phys_reg = (short *) alloca (max_qty * sizeof (short));\n+  qty_phys_reg = (short *) xmalloc (max_qty * sizeof (short));\n   qty_phys_copy_sugg\n-    = (HARD_REG_SET *) alloca (max_qty * sizeof (HARD_REG_SET));\n-  qty_phys_num_copy_sugg = (short *) alloca (max_qty * sizeof (short));\n-  qty_phys_sugg = (HARD_REG_SET *) alloca (max_qty * sizeof (HARD_REG_SET));\n-  qty_phys_num_sugg = (short *) alloca (max_qty * sizeof (short));\n-  qty_birth = (int *) alloca (max_qty * sizeof (int));\n-  qty_death = (int *) alloca (max_qty * sizeof (int));\n-  qty_first_reg = (int *) alloca (max_qty * sizeof (int));\n-  qty_size = (int *) alloca (max_qty * sizeof (int));\n+    = (HARD_REG_SET *) xmalloc (max_qty * sizeof (HARD_REG_SET));\n+  qty_phys_num_copy_sugg = (short *) xmalloc (max_qty * sizeof (short));\n+  qty_phys_sugg = (HARD_REG_SET *) xmalloc (max_qty * sizeof (HARD_REG_SET));\n+  qty_phys_num_sugg = (short *) xmalloc (max_qty * sizeof (short));\n+  qty_birth = (int *) xmalloc (max_qty * sizeof (int));\n+  qty_death = (int *) xmalloc (max_qty * sizeof (int));\n+  qty_first_reg = (int *) xmalloc (max_qty * sizeof (int));\n+  qty_size = (int *) xmalloc (max_qty * sizeof (int));\n   qty_mode\n-    = (enum machine_mode *) alloca (max_qty * sizeof (enum machine_mode));\n-  qty_n_calls_crossed = (int *) alloca (max_qty * sizeof (int));\n+    = (enum machine_mode *) xmalloc (max_qty * sizeof (enum machine_mode));\n+  qty_n_calls_crossed = (int *) xmalloc (max_qty * sizeof (int));\n   qty_min_class\n-    = (enum reg_class *) alloca (max_qty * sizeof (enum reg_class));\n+    = (enum reg_class *) xmalloc (max_qty * sizeof (enum reg_class));\n   qty_alternate_class\n-    = (enum reg_class *) alloca (max_qty * sizeof (enum reg_class));\n-  qty_n_refs = (int *) alloca (max_qty * sizeof (int));\n-  qty_changes_size = (char *) alloca (max_qty * sizeof (char));\n+    = (enum reg_class *) xmalloc (max_qty * sizeof (enum reg_class));\n+  qty_n_refs = (int *) xmalloc (max_qty * sizeof (int));\n+  qty_changes_size = (char *) xmalloc (max_qty * sizeof (char));\n \n   reg_qty = (int *) xmalloc (max_regno * sizeof (int));\n   reg_offset = (char *) xmalloc (max_regno * sizeof (char));\n@@ -416,9 +416,25 @@ local_alloc ()\n #endif\n     }\n \n+  free (qty_phys_reg);\n+  free (qty_phys_copy_sugg);\n+  free (qty_phys_num_copy_sugg);\n+  free (qty_phys_sugg);\n+  free (qty_birth);\n+  free (qty_death);\n+  free (qty_first_reg);\n+  free (qty_size);\n+  free (qty_mode);\n+  free (qty_n_calls_crossed);\n+  free (qty_min_class);\n+  free (qty_alternate_class);\n+  free (qty_n_refs);\n+  free (qty_changes_size);\n+\n   free (reg_qty);\n   free (reg_offset);\n   free (reg_next_in_qty);\n+\n   return recorded_label_ref;\n }\n \f"}]}