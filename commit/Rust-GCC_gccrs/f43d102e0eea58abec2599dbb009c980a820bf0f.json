{"sha": "f43d102e0eea58abec2599dbb009c980a820bf0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQzZDEwMmUwZWVhNThhYmVjMjU5OWRiYjAwOWM5ODBhODIwYmYwZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-06-25T13:25:09Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-06-25T13:25:09Z"}, "message": "match.pd: Add patterns for vec_conds between 1 and 0.\n\ngcc/\n\t* match.pd: Add patterns for vec_conds between 1 and 0.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-add-sub-cond.c: New test.\n\nFrom-SVN: r224941", "tree": {"sha": "4ba20382e3ed805553f0e7c5a4ff3d4f2d774fab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ba20382e3ed805553f0e7c5a4ff3d4f2d774fab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f43d102e0eea58abec2599dbb009c980a820bf0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43d102e0eea58abec2599dbb009c980a820bf0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f43d102e0eea58abec2599dbb009c980a820bf0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f43d102e0eea58abec2599dbb009c980a820bf0f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "225ce44b67d26d7687454003691268f34d804e39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/225ce44b67d26d7687454003691268f34d804e39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/225ce44b67d26d7687454003691268f34d804e39"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "ce70cf7cf3ccf3a739b831a7a396592d49cd126d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f43d102e0eea58abec2599dbb009c980a820bf0f", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* match.pd: Add patterns for vec_conds between 1 and 0.\n+\n 2015-06-25  Richard Biener  <rguenther@suse.de>\n \n \t* tree-vect-stmts.c (vectorizable_conversion): Do not set"}, {"sha": "30383c649441687db7f3e68c9014d61e98ff349b", "filename": "gcc/match.pd", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f43d102e0eea58abec2599dbb009c980a820bf0f", "patch": "@@ -1014,6 +1014,26 @@ along with GCC; see the file COPYING3.  If not see\n   (cnd (logical_inverted_value truth_valued_p@0) @1 @2)\n   (cnd @0 @2 @1)))\n \n+/* A + (B vcmp C ? 1 : 0) -> A - (B vcmp C), since vector comparisons\n+   return all-1 or all-0 results.  */\n+/* ??? We could instead convert all instances of the vec_cond to negate,\n+   but that isn't necessarily a win on its own.  */\n+(simplify\n+ (plus:c @3 (view_convert? (vec_cond @0 integer_each_onep@1 integer_zerop@2)))\n+ (if (VECTOR_TYPE_P (type)\n+      && TYPE_VECTOR_SUBPARTS (type) == TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0))\n+      && (TYPE_MODE (TREE_TYPE (type))\n+          == TYPE_MODE (TREE_TYPE (TREE_TYPE (@0)))))\n+  (minus @3 (view_convert @0))))\n+\n+/* ... likewise A - (B vcmp C ? 1 : 0) -> A + (B vcmp C).  */\n+(simplify\n+ (minus @3 (view_convert? (vec_cond @0 integer_each_onep@1 integer_zerop@2)))\n+ (if (VECTOR_TYPE_P (type)\n+      && TYPE_VECTOR_SUBPARTS (type) == TYPE_VECTOR_SUBPARTS (TREE_TYPE (@0))\n+      && (TYPE_MODE (TREE_TYPE (type))\n+          == TYPE_MODE (TREE_TYPE (TREE_TYPE (@0)))))\n+  (plus @3 (view_convert @0))))\n \n /* Simplifications of comparisons.  */\n "}, {"sha": "2f3986877d27b107777b943c5caa6d113355ba13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f43d102e0eea58abec2599dbb009c980a820bf0f", "patch": "@@ -1,3 +1,7 @@\n+2015-06-25  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/vect-add-sub-cond.c: New test.\n+\n 2015-06-25  Richard Biener  <rguenther@suse.de>\n \n \t* gfortran.dg/vect/vect-9.f90: New testcase."}, {"sha": "69afff1dd14b799bdc58c72b0de6d12ac1e9f714", "filename": "gcc/testsuite/gcc.target/aarch64/vect-add-sub-cond.c", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f43d102e0eea58abec2599dbb009c980a820bf0f/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-add-sub-cond.c?ref=f43d102e0eea58abec2599dbb009c980a820bf0f", "patch": "@@ -0,0 +1,94 @@\n+/* Make sure that vector comaprison results are not unnecessarily ANDed\n+   with vectors of 1.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-vectorize\" } */\n+\n+#define COUNT1(X) if (X) count += 1\n+#define COUNT2(X) if (X) count -= 1\n+#define COUNT3(X) count += (X)\n+#define COUNT4(X) count -= (X)\n+\n+#define COND1(X) (X)\n+#define COND2(X) ((X) ? 1 : 0)\n+#define COND3(X) ((X) ? -1 : 0)\n+#define COND4(X) ((X) ? 0 : 1)\n+#define COND5(X) ((X) ? 0 : -1)\n+\n+#define TEST_LT(X, Y) ((X) < (Y))\n+#define TEST_LE(X, Y) ((X) <= (Y))\n+#define TEST_GT(X, Y) ((X) > (Y))\n+#define TEST_GE(X, Y) ((X) >= (Y))\n+#define TEST_EQ(X, Y) ((X) == (Y))\n+#define TEST_NE(X, Y) ((X) != (Y))\n+\n+#define COUNT_LOOP(ID, TYPE, CMP_ARRAY, TEST, COUNT) \\\n+  TYPE \\\n+  reduc_##ID (__typeof__ (CMP_ARRAY[0]) x) \\\n+  { \\\n+    TYPE count = 0; \\\n+    for (unsigned int i = 0; i < 1024; ++i) \\\n+      COUNT (TEST (CMP_ARRAY[i], x)); \\\n+    return count; \\\n+  }\n+\n+#define COND_LOOP(ID, ARRAY, CMP_ARRAY, TEST, COND) \\\n+  void \\\n+  plus_##ID (__typeof__ (CMP_ARRAY[0]) x) \\\n+  { \\\n+    for (unsigned int i = 0; i < 1024; ++i) \\\n+      ARRAY[i] += COND (TEST (CMP_ARRAY[i], x)); \\\n+  } \\\n+  void \\\n+  plusc_##ID (void) \\\n+  { \\\n+    for (unsigned int i = 0; i < 1024; ++i) \\\n+      ARRAY[i] += COND (TEST (CMP_ARRAY[i], 10)); \\\n+  } \\\n+  void \\\n+  minus_##ID (__typeof__ (CMP_ARRAY[0]) x) \\\n+  { \\\n+    for (unsigned int i = 0; i < 1024; ++i) \\\n+      ARRAY[i] -= COND (TEST (CMP_ARRAY[i], x)); \\\n+  } \\\n+  void \\\n+  minusc_##ID (void) \\\n+  { \\\n+    for (unsigned int i = 0; i < 1024; ++i) \\\n+      ARRAY[i] += COND (TEST (CMP_ARRAY[i], 1)); \\\n+  }\n+\n+#define ALL_LOOPS(ID, ARRAY, CMP_ARRAY, TEST) \\\n+  typedef __typeof__(ARRAY[0]) ID##_type; \\\n+  COUNT_LOOP (ID##_1, ID##_type, CMP_ARRAY, TEST, COUNT1) \\\n+  COUNT_LOOP (ID##_2, ID##_type, CMP_ARRAY, TEST, COUNT2) \\\n+  COUNT_LOOP (ID##_3, ID##_type, CMP_ARRAY, TEST, COUNT3) \\\n+  COUNT_LOOP (ID##_4, ID##_type, CMP_ARRAY, TEST, COUNT4) \\\n+  COND_LOOP (ID##_1, ARRAY, CMP_ARRAY, TEST, COND1) \\\n+  COND_LOOP (ID##_2, ARRAY, CMP_ARRAY, TEST, COND2) \\\n+  COND_LOOP (ID##_3, ARRAY, CMP_ARRAY, TEST, COND3) \\\n+  COND_LOOP (ID##_4, ARRAY, CMP_ARRAY, TEST, COND4) \\\n+  COND_LOOP (ID##_5, ARRAY, CMP_ARRAY, TEST, COND5)\n+\n+signed int asi[1024] __attribute__ ((aligned (16)));\n+unsigned int aui[1024] __attribute__ ((aligned (16)));\n+signed long long asl[1024] __attribute__ ((aligned (16)));\n+unsigned long long aul[1024] __attribute__ ((aligned (16)));\n+float af[1024] __attribute__ ((aligned (16)));\n+double ad[1024] __attribute__ ((aligned (16)));\n+\n+ALL_LOOPS (si_si, aui, asi, TEST_LT)\n+ALL_LOOPS (ui_si, aui, asi, TEST_LE)\n+ALL_LOOPS (si_ui, aui, asi, TEST_GT)\n+ALL_LOOPS (ui_ui, aui, asi, TEST_GE)\n+ALL_LOOPS (sl_sl, asl, asl, TEST_NE)\n+ALL_LOOPS (ul_ul, aul, aul, TEST_EQ)\n+ALL_LOOPS (si_f, asi, af, TEST_LE)\n+ALL_LOOPS (ui_f, aui, af, TEST_GT)\n+ALL_LOOPS (sl_d, asl, ad, TEST_GE)\n+ALL_LOOPS (ul_d, aul, ad, TEST_GT)\n+\n+/* { dg-final { scan-assembler-not \"\\tand\\t\" } } */\n+/* { dg-final { scan-assembler-not \"\\tld\\[^\\t\\]*\\t\\[wx\\]\" } } */\n+/* { dg-final { scan-assembler-not \"\\tst\\[^\\t\\]*\\t\\[wx\\]\" } } */\n+/* { dg-final { scan-assembler \"\\tldr\\tq\" } } */\n+/* { dg-final { scan-assembler \"\\tstr\\tq\" } } */"}]}