{"sha": "c7ff137489343e20405473156ed589ad791149d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdmZjEzNzQ4OTM0M2UyMDQwNTQ3MzE1NmVkNTg5YWQ3OTExNDlkMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-27T21:25:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2016-09-27T21:25:42Z"}, "message": "compiler: avoid call duplication during order eval.\n\n    \n    During the compiler's order_evaluations() pass, duplicate\n    call statements were being created and inserted into block\n    statement lists in situations where there were calls returning\n    multiple arguments. These duplicates were benign in that they\n    were ignored during backend code generation, however they\n    did cause duplicate calls in AST dumps. Tweak the order\n    evaluation code to handle this case better and avoid inserting\n    these duplicates.\n    \n    Fixes golang/go#17237\n    \n    Reviewed-on: https://go-review.googlesource.com/29857\n\nFrom-SVN: r240559", "tree": {"sha": "fd11b50b0605169cf1d4f1d098f40291ef7e6100", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd11b50b0605169cf1d4f1d098f40291ef7e6100"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7ff137489343e20405473156ed589ad791149d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff137489343e20405473156ed589ad791149d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7ff137489343e20405473156ed589ad791149d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7ff137489343e20405473156ed589ad791149d2/comments", "author": null, "committer": null, "parents": [{"sha": "437018ea2b6dc966ce40cd5dd684054126ddda6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/437018ea2b6dc966ce40cd5dd684054126ddda6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/437018ea2b6dc966ce40cd5dd684054126ddda6b"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "1b53f8c10655da2dd6ecfe4ec594154409ff085c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff137489343e20405473156ed589ad791149d2/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff137489343e20405473156ed589ad791149d2/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=c7ff137489343e20405473156ed589ad791149d2", "patch": "@@ -1,4 +1,4 @@\n-1d8d834b5eb9f683cc06529145b353bb5b08e7ea\n+8aca265d317059ae6d9721a4a231895d80d0a82c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "587ebd434a9057fe5e39f4dd39eb22d3c6d97f6b", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7ff137489343e20405473156ed589ad791149d2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7ff137489343e20405473156ed589ad791149d2/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=c7ff137489343e20405473156ed589ad791149d2", "patch": "@@ -3616,11 +3616,21 @@ Order_eval::statement(Block* block, size_t* pindex, Statement* s)\n \t  // be handled specially.  We can't create a temporary\n \t  // because there is no type to give it.  Any actual uses of\n \t  // the values will be done via Call_result_expressions.\n-\t  s = Statement::make_statement(*pexpr, true);\n-\t}\n+          //\n+          // Since a given call expression can be shared by multiple\n+          // Call_result_expressions, avoid hoisting the call the\n+          // second time we see it here.\n+          if (this->remember_expression(*pexpr))\n+            s = NULL;\n+          else\n+            s = Statement::make_statement(*pexpr, true);\n+        }\n \n-      block->insert_statement_before(*pindex, s);\n-      ++*pindex;\n+      if (s != NULL)\n+        {\n+          block->insert_statement_before(*pindex, s);\n+          ++*pindex;\n+        }\n     }\n \n   if (init != orig_init)\n@@ -7949,13 +7959,14 @@ Traverse::remember_type(const Type* type)\n }\n \n // Record that we are looking at an expression, and return true if we\n-// have already seen it.\n+// have already seen it. NB: this routine used to assert if the traverse\n+// mask did not include expressions/types -- this is no longer the case,\n+// since it can be useful to remember specific expressions during\n+// walks that only cover statements.\n \n bool\n Traverse::remember_expression(const Expression* expression)\n {\n-  go_assert((this->traverse_mask() & traverse_types) != 0\n-\t     || (this->traverse_mask() & traverse_expressions) != 0);\n   if (this->expressions_seen_ == NULL)\n     this->expressions_seen_ = new Expressions_seen();\n   std::pair<Expressions_seen::iterator, bool> ins ="}]}