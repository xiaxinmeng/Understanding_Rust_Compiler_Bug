{"sha": "d7871114286c18b184f5fca2ff1506927f6cc3cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4NzExMTQyODZjMThiMTg0ZjVmY2EyZmYxNTA2OTI3ZjZjYzNjZg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-11-09T15:53:41Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-11-09T15:53:41Z"}, "message": "rs6000: Separate shrink-wrapping for the TOC register\n\nThis makes the TOC register save a component.  If -msave-toc-indirect\nis not explicitly disabled, it enables it, and then moves the prologue\ncode generated for that to a better place.  So far this only matters\nfor indirect calls (for direct calls the save is done in the PLT stub).\nThe restore is always done directly after the bl insn (the compiler\ngenerates a nop there, the linker replaces it with a load).\n\n\n\t* config/rs6000/rs6000.c (machine_function): Add a bool,\n\t\"toc_is_wrapped_separately\".\n\t(rs6000_option_override_internal): Enable OPTION_MASK_SAVE_TOC_INDIRECT\n\tif it wasn't explicitly set or unset, we are optimizing for speed, and\n\tdoing separate shrink-wrapping.\n\t(rs6000_get_separate_components): Enable the TOC component if\n\tsaving the TOC register in the prologue.\n\t(rs6000_components_for_bb): Handle the TOC component.\n\t(rs6000_emit_prologue_components): Store the TOC register where needed.\n\t(rs6000_set_handled_components): Mark TOC as handled, if handled.\n\t(rs6000_emit_prologue): Don't save the TOC if that is already done.\n\nFrom-SVN: r254599", "tree": {"sha": "a7d8e9fe00b298f4cc5b16784f33744a0092ef95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7d8e9fe00b298f4cc5b16784f33744a0092ef95"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d7871114286c18b184f5fca2ff1506927f6cc3cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7871114286c18b184f5fca2ff1506927f6cc3cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7871114286c18b184f5fca2ff1506927f6cc3cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7871114286c18b184f5fca2ff1506927f6cc3cf/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4d99a8487287e94b9bd42807cbe864991a0d1d3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d99a8487287e94b9bd42807cbe864991a0d1d3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d99a8487287e94b9bd42807cbe864991a0d1d3b"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "b223f61b0d7bbf08f74927a503013ee222ddf120", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7871114286c18b184f5fca2ff1506927f6cc3cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7871114286c18b184f5fca2ff1506927f6cc3cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d7871114286c18b184f5fca2ff1506927f6cc3cf", "patch": "@@ -1,3 +1,17 @@\n+2017-11-09  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (machine_function): Add a bool,\n+\t\"toc_is_wrapped_separately\".\n+\t(rs6000_option_override_internal): Enable OPTION_MASK_SAVE_TOC_INDIRECT\n+\tif it wasn't explicitly set or unset, we are optimizing for speed, and\n+\tdoing separate shrink-wrapping.\n+\t(rs6000_get_separate_components): Enable the TOC component if\n+\tsaving the TOC register in the prologue.\n+\t(rs6000_components_for_bb): Handle the TOC component.\n+\t(rs6000_emit_prologue_components): Store the TOC register where needed.\n+\t(rs6000_set_handled_components): Mark TOC as handled, if handled.\n+\t(rs6000_emit_prologue): Don't save the TOC if that is already done.\n+\n 2017-11-09  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-param-manipulation.c: New file."}, {"sha": "2c80a2f2bd6a2b31656be4f3ca52725e9f0318fc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d7871114286c18b184f5fca2ff1506927f6cc3cf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d7871114286c18b184f5fca2ff1506927f6cc3cf/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d7871114286c18b184f5fca2ff1506927f6cc3cf", "patch": "@@ -171,6 +171,7 @@ typedef struct GTY(()) machine_function\n   bool gpr_is_wrapped_separately[32];\n   bool fpr_is_wrapped_separately[32];\n   bool lr_is_wrapped_separately;\n+  bool toc_is_wrapped_separately;\n } machine_function;\n \n /* Support targetm.vectorize.builtin_mask_for_load.  */\n@@ -4426,6 +4427,13 @@ rs6000_option_override_internal (bool global_init_p)\n       && ((rs6000_isa_flags_explicit & OPTION_MASK_QUAD_MEMORY_ATOMIC) == 0))\n     rs6000_isa_flags |= OPTION_MASK_QUAD_MEMORY_ATOMIC;\n \n+  /* If we can shrink-wrap the TOC register save separately, then use\n+     -msave-toc-indirect unless explicitly disabled.  */\n+  if ((rs6000_isa_flags_explicit & OPTION_MASK_SAVE_TOC_INDIRECT) == 0\n+      && flag_shrink_wrap_separate\n+      && optimize_function_for_speed_p (cfun))\n+    rs6000_isa_flags |= OPTION_MASK_SAVE_TOC_INDIRECT;\n+\n   /* Enable power8 fusion if we are tuning for power8, even if we aren't\n      generating power8 instructions.  */\n   if (!(rs6000_isa_flags_explicit & OPTION_MASK_P8_FUSION))\n@@ -26721,6 +26729,7 @@ rs6000_get_separate_components (void)\n \t      && !(info->savres_strategy & REST_MULTIPLE));\n \n   /* Component 0 is the save/restore of LR (done via GPR0).\n+     Component 2 is the save of the TOC (GPR2).\n      Components 13..31 are the save/restore of GPR13..GPR31.\n      Components 46..63 are the save/restore of FPR14..FPR31.  */\n \n@@ -26795,6 +26804,10 @@ rs6000_get_separate_components (void)\n \tbitmap_set_bit (components, 0);\n     }\n \n+  /* Optimize saving the TOC.  This is component 2.  */\n+  if (cfun->machine->save_toc_in_prologue)\n+    bitmap_set_bit (components, 2);\n+\n   return components;\n }\n \n@@ -26833,6 +26846,12 @@ rs6000_components_for_bb (basic_block bb)\n       || bitmap_bit_p (kill, LR_REGNO))\n     bitmap_set_bit (components, 0);\n \n+  /* The TOC save.  */\n+  if (bitmap_bit_p (in, TOC_REGNUM)\n+      || bitmap_bit_p (gen, TOC_REGNUM)\n+      || bitmap_bit_p (kill, TOC_REGNUM))\n+    bitmap_set_bit (components, 2);\n+\n   return components;\n }\n \n@@ -26887,6 +26906,14 @@ rs6000_emit_prologue_components (sbitmap components)\n       add_reg_note (insn, REG_CFA_OFFSET, gen_rtx_SET (mem, lr));\n     }\n \n+  /* Prologue for TOC.  */\n+  if (bitmap_bit_p (components, 2))\n+    {\n+      rtx reg = gen_rtx_REG (reg_mode, TOC_REGNUM);\n+      rtx sp_reg = gen_rtx_REG (Pmode, STACK_POINTER_REGNUM);\n+      emit_insn (gen_frame_store (reg, sp_reg, RS6000_TOC_SAVE_SLOT));\n+    }\n+\n   /* Prologue for the GPRs.  */\n   int offset = info->gp_save_offset;\n   if (info->push_p)\n@@ -27011,6 +27038,9 @@ rs6000_set_handled_components (sbitmap components)\n \n   if (bitmap_bit_p (components, 0))\n     cfun->machine->lr_is_wrapped_separately = true;\n+\n+  if (bitmap_bit_p (components, 2))\n+    cfun->machine->toc_is_wrapped_separately = true;\n }\n \n /* VRSAVE is a bit vector representing which AltiVec registers\n@@ -27968,7 +27998,8 @@ rs6000_emit_prologue (void)\n      unwinder to interpret it.  R2 changes, apart from the\n      calls_eh_return case earlier in this function, are handled by\n      linux-unwind.h frob_update_context.  */\n-  if (rs6000_save_toc_in_prologue_p ())\n+  if (rs6000_save_toc_in_prologue_p ()\n+      && !cfun->machine->toc_is_wrapped_separately)\n     {\n       rtx reg = gen_rtx_REG (reg_mode, TOC_REGNUM);\n       emit_insn (gen_frame_store (reg, sp_reg_rtx, RS6000_TOC_SAVE_SLOT));"}]}