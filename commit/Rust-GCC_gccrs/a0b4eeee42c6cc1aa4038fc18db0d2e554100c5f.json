{"sha": "a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBiNGVlZWU0MmM2Y2MxYWE0MDM4ZmMxOGRiMGQyZTU1NDEwMGM1Zg==", "commit": {"author": {"name": "Michael Hayes", "email": "m.hayes@elec.canterbury.ac.nz", "date": "2000-02-05T05:41:22Z"}, "committer": {"name": "Michael Hayes", "email": "m.hayes@gcc.gnu.org", "date": "2000-02-05T05:41:22Z"}, "message": "Makefile.in (libgcc.a): Add $(LIBGCC1) to libgcc.a after $(LIBGCC2).\n\n2000-02-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n\n\t* Makefile.in (libgcc.a): Add $(LIBGCC1) to libgcc.a after $(LIBGCC2).\n\nFrom-SVN: r31804", "tree": {"sha": "11568782b5d5c21dfb2d5c62fc787c1617f8143e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/11568782b5d5c21dfb2d5c62fc787c1617f8143e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f/comments", "author": null, "committer": null, "parents": [{"sha": "b492151d0231d86838318dae3daa80fe8edbb2f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b492151d0231d86838318dae3daa80fe8edbb2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b492151d0231d86838318dae3daa80fe8edbb2f4"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "a4b8c8d63a57d597db04c13365349ddc1f3d3c58", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "patch": "@@ -1,3 +1,7 @@\n+2000-02-05  Michael Hayes  <m.hayes@elec.canterbury.ac.nz>\n+\n+\t* Makefile.in (libgcc.a): Add $(LIBGCC1) to libgcc.a after $(LIBGCC2).\n+\n 2000-02-04  Neil Booth  <NeilB@earthling.net>\n \n \t* cccp.c (main): Check 'dir' for a NULL pointer before passing"}, {"sha": "92938238a6aee6b649cded3f985c6af1e28625a1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a0b4eeee42c6cc1aa4038fc18db0d2e554100c5f", "patch": "@@ -1149,19 +1149,21 @@ libgcc2.a: libgcc2.c libgcc2.ready $(CONFIG_H) $(FPBIT) $(DPBIT) $(LIB2ADD) \\\n #\telse true; fi\n \n # Combine the various libraries into a single library, libgcc.a.\n+# $(LIBGCC1) is added after $(LIBGCC2) so that routines written in\n+# assembler will be used in preference to the C versions.\n libgcc.a: $(LIBGCC1) $(LIBGCC2)\n \t-rm -rf tmplibgcc.a libgcc.a tmpcopy\n \tmkdir tmpcopy\n-\t-if [ x$(LIBGCC1) != x ];\t\t\t\\\n-\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1));\t\\\n-\telse true;\t\t\t\t\t\\\n-\tfi\n+\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n # Some versions of ar (specifically the one in RISC/os 5.x), create an\n # unwritable table of contents file, and then print an error message when\n # the second ar command tries to overwrite this file.  To avoid the error\n # message from ar, we make sure all files are writable.\n \t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n-\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\t-if [ x$(LIBGCC1) != x ];\t\t\t\\\n+\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1));\t\\\n+\telse true;\t\t\t\t\t\\\n+\tfi\n \t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf tmpcopy\n \t-if $(RANLIB_TEST_FOR_TARGET) ; then \\\n@@ -1240,16 +1242,16 @@ stmp-multilib-sub:\n \tfi\n \trm -rf tmplibgcc.a tmpcopy\n \tmkdir tmpcopy\n-\tif [ x$(LIBGCC1) != x ]; \\\n-\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1)); \\\n-\telse true; \\\n-\tfi\n+\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n # Some versions of ar (specifically the one in RISC/os 5.x), create an\n # unwritable table of contents file, and then print an error message when\n # the second ar command tries to overwrite this file.  To avoid the error\n # message from ar, we make sure all files are writable.\n \t-(cd tmpcopy; chmod +w * > /dev/null 2>&1)\n-\t(cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC2))\n+\tif [ x$(LIBGCC1) != x ]; \\\n+\tthen (cd tmpcopy; $(AR_FOR_TARGET) x ../$(LIBGCC1)); \\\n+\telse true; \\\n+\tfi\n \t(cd tmpcopy; $(AR_FOR_TARGET) $(AR_FLAGS_FOR_TARGET) ../tmplibgcc.a *$(objext))\n \trm -rf libgcc2.a tmpcopy\n \tif $(RANLIB_TEST_FOR_TARGET) ; then \\"}]}