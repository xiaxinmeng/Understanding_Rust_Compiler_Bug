{"sha": "62f7fd21955367a875adbd2d6e31c9f7c08e3764", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJmN2ZkMjE5NTUzNjdhODc1YWRiZDJkNmUzMWM5ZjdjMDhlMzc2NA==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2010-03-27T10:27:39Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2010-03-27T10:27:39Z"}, "message": "PR 43544, change TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION to take a tree argument\n\nFrom-SVN: r157770", "tree": {"sha": "73ad6eb95633d4417f631f17d1389bca7e91e78f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/73ad6eb95633d4417f631f17d1389bca7e91e78f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62f7fd21955367a875adbd2d6e31c9f7c08e3764", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f7fd21955367a875adbd2d6e31c9f7c08e3764", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62f7fd21955367a875adbd2d6e31c9f7c08e3764", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62f7fd21955367a875adbd2d6e31c9f7c08e3764/comments", "author": null, "committer": null, "parents": [{"sha": "527a6a9c35557825b3363411bd08b178e50c4d9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/527a6a9c35557825b3363411bd08b178e50c4d9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/527a6a9c35557825b3363411bd08b178e50c4d9d"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "c89990b86e057ba98493004572c91487f2c07675", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -1,3 +1,18 @@\n+2010-03-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR tree-optimization/43544\n+\t* doc/tm.texi (TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION):\n+\tFirst argument for builtin vectorized function hook is now a\n+\ttree to be able to distinguish between machine specific and\n+\tstandard builtins.\n+\t* targhooks.c (default_builtin_vectorized_function): Ditto.\n+\t* targhooks.h (default_builtin_vectorized_function): Ditto.\n+\t* target.h (struct gcc_target): Ditto.\n+\t* tree-vect-stmts.c (vectorizable_function): Ditto.\n+\t* config/i386/i386.c (ix86_builtin_vectorized_function): Ditto.\n+\t* config/rs6000/rs6000.c (rs6000_builtin_vectorized_function):\n+\tDitto.\n+\n 2010-03-26  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/43381"}, {"sha": "39b1da478c6c1853785263e076ae28127dd30d2a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -24375,14 +24375,16 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n    if it is not available.  */\n \n static tree\n-ix86_builtin_vectorized_function (unsigned int fn, tree type_out,\n+ix86_builtin_vectorized_function (tree fndecl, tree type_out,\n \t\t\t\t  tree type_in)\n {\n   enum machine_mode in_mode, out_mode;\n   int in_n, out_n;\n+  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE)\n+      || TREE_CODE (type_in) != VECTOR_TYPE\n+      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n     return NULL_TREE;\n \n   out_mode = TYPE_MODE (TREE_TYPE (type_out));"}, {"sha": "91f66a9d59b1d8bbadf8447dc64535e67306ea13", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -909,7 +909,7 @@ static rtx rs6000_emit_stack_reset (rs6000_stack_t *, rtx, rtx, int, bool);\n static rtx rs6000_make_savres_rtx (rs6000_stack_t *, rtx, int,\n \t\t\t\t   enum machine_mode, bool, bool, bool);\n static bool rs6000_reg_live_or_pic_offset_p (int);\n-static tree rs6000_builtin_vectorized_function (unsigned int, tree, tree);\n+static tree rs6000_builtin_vectorized_function (tree, tree, tree);\n static int rs6000_savres_strategy (rs6000_stack_t *, bool, int, int);\n static void rs6000_restore_saved_cr (rtx, int);\n static void rs6000_output_function_prologue (FILE *, HOST_WIDE_INT);\n@@ -3179,15 +3179,17 @@ rs6000_parse_fpu_option (const char *option)\n    if it is not available.  */\n \n static tree\n-rs6000_builtin_vectorized_function (unsigned int fn, tree type_out,\n+rs6000_builtin_vectorized_function (tree fndecl, tree type_out,\n \t\t\t\t    tree type_in)\n {\n   enum machine_mode in_mode, out_mode;\n   int in_n, out_n;\n+  enum built_in_function fn = DECL_FUNCTION_CODE (fndecl);\n \n   if (TREE_CODE (type_out) != VECTOR_TYPE\n       || TREE_CODE (type_in) != VECTOR_TYPE\n-      || !TARGET_VECTORIZE_BUILTINS)\n+      || !TARGET_VECTORIZE_BUILTINS\n+      || DECL_BUILT_IN_CLASS (fndecl) != BUILT_IN_NORMAL)\n     return NULL_TREE;\n \n   out_mode = TYPE_MODE (TREE_TYPE (type_out));"}, {"sha": "012edd776a7f802f40cec2c2f5677a9568fa568a", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -5717,13 +5717,13 @@ If this hook is defined, the autovectorizer will use the\n conversion. Otherwise, it will return @code{NULL_TREE}.\n @end deftypefn\n \n-@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (unsigned @var{code}, tree @var{vec_type_out}, tree @var{vec_type_in})\n-This hook should return the decl of a function that implements the vectorized\n-variant of the builtin function with builtin function code @var{code} or\n-@code{NULL_TREE} if such a function is not available.  The value of @var{code}\n-is one of the enumerators in @code{enum built_in_function}.  The return type of\n-the vectorized function shall be of vector type @var{vec_type_out} and the\n-argument types should be @var{vec_type_in}.\n+@deftypefn {Target Hook} tree TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION (tree @var{fndecl}, tree @var{vec_type_out}, tree @var{vec_type_in})\n+This hook should return the decl of a function that implements the\n+vectorized variant of the builtin function with builtin function code\n+@var{code} or @code{NULL_TREE} if such a function is not available.\n+The value of @var{fndecl} is the builtin function declaration.  The\n+return type of the vectorized function shall be of vector type\n+@var{vec_type_out} and the argument types should be @var{vec_type_in}.\n @end deftypefn\n \n @deftypefn {Target Hook} bool TARGET_SUPPORT_VECTOR_MISALIGNMENT (enum machine_mode @var{mode}, const_tree @var{type}, int @var{misalignment}, bool @var{is_packed})"}, {"sha": "41ae3e3e81201078fe33598c85dc62777e7988f8", "filename": "gcc/target.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -471,7 +471,7 @@ struct gcc_target\n \n     /* Returns a code for builtin that realizes vectorized version of\n        function, or NULL_TREE if not available.  */\n-    tree (* builtin_vectorized_function) (unsigned, tree, tree);\n+    tree (* builtin_vectorized_function) (tree, tree, tree);\n \n     /* Returns a code for builtin that realizes vectorized version of\n        conversion, or NULL_TREE if not available.  */"}, {"sha": "d9a7a9dcc14341c70b680d18df5745da444721bf", "filename": "gcc/targhooks.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.c?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -419,7 +419,7 @@ default_invalid_within_doloop (const_rtx insn)\n /* Mapping of builtin functions to vectorized variants.  */\n \n tree\n-default_builtin_vectorized_function (unsigned int fn ATTRIBUTE_UNUSED,\n+default_builtin_vectorized_function (tree fndecl ATTRIBUTE_UNUSED,\n \t\t\t\t     tree type_out ATTRIBUTE_UNUSED,\n \t\t\t\t     tree type_in ATTRIBUTE_UNUSED)\n {"}, {"sha": "b2b90971f09327616979379f5669a1b9e34431e3", "filename": "gcc/targhooks.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftarghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarghooks.h?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -1,5 +1,5 @@\n /* Default target hook functions.\n-   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009\n+   Copyright (C) 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -70,7 +70,7 @@ extern bool default_fixed_point_supported_p (void);\n \n extern const char * default_invalid_within_doloop (const_rtx);\n \n-extern tree default_builtin_vectorized_function (unsigned int, tree, tree);\n+extern tree default_builtin_vectorized_function (tree, tree, tree);\n \n extern tree default_builtin_vectorized_conversion (unsigned int, tree);\n "}, {"sha": "c280e818a898e29b71753d6c6e62eab7a65b9ffe", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62f7fd21955367a875adbd2d6e31c9f7c08e3764/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=62f7fd21955367a875adbd2d6e31c9f7c08e3764", "patch": "@@ -1,6 +1,6 @@\n /* Statement Analysis and Transformation for Vectorization\n-   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free Software\n-   Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Dorit Naishlos <dorit@il.ibm.com>\n    and Ira Rosen <irar@il.ibm.com>\n \n@@ -1189,7 +1189,6 @@ tree\n vectorizable_function (gimple call, tree vectype_out, tree vectype_in)\n {\n   tree fndecl = gimple_call_fndecl (call);\n-  enum built_in_function code;\n \n   /* We only handle functions that do not read or clobber memory -- i.e.\n      const or novops ones.  */\n@@ -1201,8 +1200,7 @@ vectorizable_function (gimple call, tree vectype_out, tree vectype_in)\n       || !DECL_BUILT_IN (fndecl))\n     return NULL_TREE;\n \n-  code = DECL_FUNCTION_CODE (fndecl);\n-  return targetm.vectorize.builtin_vectorized_function (code, vectype_out,\n+  return targetm.vectorize.builtin_vectorized_function (fndecl, vectype_out,\n \t\t\t\t\t\t        vectype_in);\n }\n "}]}