{"sha": "8f7b7c1495f92c72da154d32317943a2cc276ca8", "node_id": "C_kwDOANBUbNoAKDhmN2I3YzE0OTVmOTJjNzJkYTE1NGQzMjMxNzk0M2EyY2MyNzZjYTg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-11T14:52:38Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-03-14T13:08:02Z"}, "message": "libstdc++: Fix reading UTF-8 characters for 16-bit targets [PR104875]\n\nThe current code in read_utf8_code_point assumes that integer promotion\nwill create a 32-bit int, but that's not true for 16-bit targets like\nmsp430 and avr. This changes the intermediate variables used for each\noctet from unsigned char to char32_t, so that (c << N) works correctly\nwhen N > 8.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/104875\n\t* src/c++11/codecvt.cc (read_utf8_code_point): Use char32_t to\n\thold octets that will be left-shifted.", "tree": {"sha": "e137f7fadc371339cd5e06afae5a63fb8e9213a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e137f7fadc371339cd5e06afae5a63fb8e9213a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f7b7c1495f92c72da154d32317943a2cc276ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7b7c1495f92c72da154d32317943a2cc276ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f7b7c1495f92c72da154d32317943a2cc276ca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f7b7c1495f92c72da154d32317943a2cc276ca8/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67a1cb2ad16ff9ff5a7dc4532d0e0fe98be42382", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a1cb2ad16ff9ff5a7dc4532d0e0fe98be42382", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a1cb2ad16ff9ff5a7dc4532d0e0fe98be42382"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "9f8cb76773230596d862b56f561e1f0aa44d0058", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f7b7c1495f92c72da154d32317943a2cc276ca8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f7b7c1495f92c72da154d32317943a2cc276ca8/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=8f7b7c1495f92c72da154d32317943a2cc276ca8", "patch": "@@ -254,7 +254,7 @@ namespace\n     const size_t avail = from.size();\n     if (avail == 0)\n       return incomplete_mb_character;\n-    unsigned char c1 = from[0];\n+    char32_t c1 = (unsigned char) from[0];\n     // https://en.wikipedia.org/wiki/UTF-8#Sample_code\n     if (c1 < 0x80)\n     {\n@@ -267,7 +267,7 @@ namespace\n     {\n       if (avail < 2)\n \treturn incomplete_mb_character;\n-      unsigned char c2 = from[1];\n+      char32_t c2 = (unsigned char) from[1];\n       if ((c2 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 6) + c2 - 0x3080;\n@@ -279,12 +279,12 @@ namespace\n     {\n       if (avail < 3)\n \treturn incomplete_mb_character;\n-      unsigned char c2 = from[1];\n+      char32_t c2 = (unsigned char) from[1];\n       if ((c2 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n       if (c1 == 0xE0 && c2 < 0xA0) // overlong\n \treturn invalid_mb_sequence;\n-      unsigned char c3 = from[2];\n+      char32_t c3 = (unsigned char) from[2];\n       if ((c3 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 12) + (c2 << 6) + c3 - 0xE2080;\n@@ -296,17 +296,17 @@ namespace\n     {\n       if (avail < 4)\n \treturn incomplete_mb_character;\n-      unsigned char c2 = from[1];\n+      char32_t c2 = (unsigned char) from[1];\n       if ((c2 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n       if (c1 == 0xF0 && c2 < 0x90) // overlong\n \treturn invalid_mb_sequence;\n       if (c1 == 0xF4 && c2 >= 0x90) // > U+10FFFF\n       return invalid_mb_sequence;\n-      unsigned char c3 = from[2];\n+      char32_t c3 = (unsigned char) from[2];\n       if ((c3 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n-      unsigned char c4 = from[3];\n+      char32_t c4 = (unsigned char) from[3];\n       if ((c4 & 0xC0) != 0x80)\n \treturn invalid_mb_sequence;\n       char32_t c = (c1 << 18) + (c2 << 12) + (c3 << 6) + c4 - 0x3C82080;"}]}