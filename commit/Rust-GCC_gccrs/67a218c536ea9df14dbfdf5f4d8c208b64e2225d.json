{"sha": "67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjdhMjE4YzUzNmVhOWRmMTRkYmZkZjVmNGQ4YzIwOGI2NGUyMjI1ZA==", "commit": {"author": {"name": "Roland McGrath", "email": "mcgrathr@google.com", "date": "2012-06-11T21:15:38Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2012-06-11T21:15:38Z"}, "message": "gthr-posix.h [...] (__gthread_active_p): If __GLIBC__ is defined, refer to __pthread_key_create instead of pthread_cancel.\n\n\t* gthr-posix.h [neither FreeBSD nor Solaris] (__gthread_active_p):\n\tIf __GLIBC__ is defined, refer to __pthread_key_create instead of\n\tpthread_cancel.\n\nFrom-SVN: r188400", "tree": {"sha": "e6c3bc6e891d604f2856261072188f5d68597d40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6c3bc6e891d604f2856261072188f5d68597d40"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67a218c536ea9df14dbfdf5f4d8c208b64e2225d/comments", "author": {"login": "frobtech", "id": 972096, "node_id": "MDQ6VXNlcjk3MjA5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/972096?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frobtech", "html_url": "https://github.com/frobtech", "followers_url": "https://api.github.com/users/frobtech/followers", "following_url": "https://api.github.com/users/frobtech/following{/other_user}", "gists_url": "https://api.github.com/users/frobtech/gists{/gist_id}", "starred_url": "https://api.github.com/users/frobtech/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frobtech/subscriptions", "organizations_url": "https://api.github.com/users/frobtech/orgs", "repos_url": "https://api.github.com/users/frobtech/repos", "events_url": "https://api.github.com/users/frobtech/events{/privacy}", "received_events_url": "https://api.github.com/users/frobtech/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d3843c672639d3bdd8242e2eb72572855d97216d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3843c672639d3bdd8242e2eb72572855d97216d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3843c672639d3bdd8242e2eb72572855d97216d"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "d2093daa9de5c6ffa8cc855afa2bb32d0eb621c5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a218c536ea9df14dbfdf5f4d8c208b64e2225d/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a218c536ea9df14dbfdf5f4d8c208b64e2225d/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "patch": "@@ -1,3 +1,9 @@\n+2012-06-11  Roland McGrath  <mcgrathr@google.com>\n+\n+\t* gthr-posix.h [neither FreeBSD nor Solaris] (__gthread_active_p):\n+\tIf __GLIBC__ is defined, refer to __pthread_key_create instead of\n+\tpthread_cancel.\n+\n 2012-06-09  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/32/sfp-machine.h (__gcc_CMPtype, CMPtype,"}, {"sha": "cc4e518f5b9907db18cdfc0a37fbeb67451b63d5", "filename": "libgcc/gthr-posix.h", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/67a218c536ea9df14dbfdf5f4d8c208b64e2225d/libgcc%2Fgthr-posix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/67a218c536ea9df14dbfdf5f4d8c208b64e2225d/libgcc%2Fgthr-posix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fgthr-posix.h?ref=67a218c536ea9df14dbfdf5f4d8c208b64e2225d", "patch": "@@ -212,18 +212,43 @@ __gthread_active_p (void)\n \n #else /* neither FreeBSD nor Solaris */\n \n+/* For a program to be multi-threaded the only thing that it certainly must\n+   be using is pthread_create.  However, there may be other libraries that\n+   intercept pthread_create with their own definitions to wrap pthreads\n+   functionality for some purpose.  In those cases, pthread_create being\n+   defined might not necessarily mean that libpthread is actually linked\n+   in.\n+\n+   For the GNU C library, we can use a known internal name.  This is always\n+   available in the ABI, but no other library would define it.  That is\n+   ideal, since any public pthread function might be intercepted just as\n+   pthread_create might be.  __pthread_key_create is an \"internal\"\n+   implementation symbol, but it is part of the public exported ABI.  Also,\n+   it's among the symbols that the static libpthread.a always links in\n+   whenever pthread_create is used, so there is no danger of a false\n+   negative result in any statically-linked, multi-threaded program.\n+\n+   For others, we choose pthread_cancel as a function that seems unlikely\n+   to be redefined by an interceptor library.  The bionic (Android) C\n+   library does not provide pthread_cancel, so we do use pthread_create\n+   there (and interceptor libraries lose).  */\n+\n+#ifdef __GLIBC__\n+__gthrw2(__gthrw_(__pthread_key_create),\n+\t __pthread_key_create,\n+\t pthread_key_create)\n+# define GTHR_ACTIVE_PROXY\t__gthrw_(__pthread_key_create)\n+#elif defined (__BIONIC__)\n+# define GTHR_ACTIVE_PROXY\t__gthrw_(pthread_create)\n+#else\n+# define GTHR_ACTIVE_PROXY\t__gthrw_(pthread_cancel)\n+#endif\n+\n static inline int\n __gthread_active_p (void)\n {\n-/* Android's C library does not provide pthread_cancel, check for\n-   `pthread_create' instead.  */\n-#ifndef __BIONIC__\n   static void *const __gthread_active_ptr\n-    = __extension__ (void *) &__gthrw_(pthread_cancel);\n-#else\n-  static void *const __gthread_active_ptr\n-    = __extension__ (void *) &__gthrw_(pthread_create);\n-#endif\n+    = __extension__ (void *) &GTHR_ACTIVE_PROXY;\n   return __gthread_active_ptr != 0;\n }\n "}]}