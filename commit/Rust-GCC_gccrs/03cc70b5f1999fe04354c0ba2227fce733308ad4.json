{"sha": "03cc70b5f1999fe04354c0ba2227fce733308ad4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNjYzcwYjVmMTk5OWZlMDQzNTRjMGJhMjIyN2ZjZTczMzMwOGFkNA==", "commit": {"author": {"name": "MCC CS", "email": "deswurstes@users.noreply.github.com", "date": "2018-10-01T11:25:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-10-01T11:25:45Z"}, "message": "re PR tree-optimization/87261 (Optimize bool expressions)\n\n2018-10-01  MCC CS <deswurstes@users.noreply.github.com>\n\n\tPR tree-optimization/87261\n\t* match.pd: Remove trailing whitespace.\n\tAdd (x & y) | ~(x | y) -> ~(x ^ y),\n\t(~x | y) ^ (x ^ y) -> x | ~y and (x ^ y) | ~(x | y) -> ~(x & y)\n\n\t* gcc.dg/pr87261.c: New test.\n\nFrom-SVN: r264744", "tree": {"sha": "5a3793f5ff39ac349b32705b43bfed6b3c5d1f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a3793f5ff39ac349b32705b43bfed6b3c5d1f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03cc70b5f1999fe04354c0ba2227fce733308ad4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cc70b5f1999fe04354c0ba2227fce733308ad4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03cc70b5f1999fe04354c0ba2227fce733308ad4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03cc70b5f1999fe04354c0ba2227fce733308ad4/comments", "author": {"login": "DesWurstes", "id": 23437045, "node_id": "MDQ6VXNlcjIzNDM3MDQ1", "avatar_url": "https://avatars.githubusercontent.com/u/23437045?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesWurstes", "html_url": "https://github.com/DesWurstes", "followers_url": "https://api.github.com/users/DesWurstes/followers", "following_url": "https://api.github.com/users/DesWurstes/following{/other_user}", "gists_url": "https://api.github.com/users/DesWurstes/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesWurstes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesWurstes/subscriptions", "organizations_url": "https://api.github.com/users/DesWurstes/orgs", "repos_url": "https://api.github.com/users/DesWurstes/repos", "events_url": "https://api.github.com/users/DesWurstes/events{/privacy}", "received_events_url": "https://api.github.com/users/DesWurstes/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6cc430c19a9c94835d31f171065f32f5b1863183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cc430c19a9c94835d31f171065f32f5b1863183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cc430c19a9c94835d31f171065f32f5b1863183"}], "stats": {"total": 96, "additions": 84, "deletions": 12}, "files": [{"sha": "70bfeb6d92157e54046271dd044cda7e2e13bd64", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03cc70b5f1999fe04354c0ba2227fce733308ad4", "patch": "@@ -1,3 +1,10 @@\n+2018-10-01  MCC CS <deswurstes@users.noreply.github.com>\n+\n+\tPR tree-optimization/87261\n+\t* match.pd: Remove trailing whitespace.\n+\tAdd (x & y) | ~(x | y) -> ~(x ^ y),\n+\t(~x | y) ^ (x ^ y) -> x | ~y and (x ^ y) | ~(x | y) -> ~(x & y)\n+\n 2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.md (*add_n): Clean up pattern, update instruction"}, {"sha": "db0e4a8c4b918c306c8f466851dfbd370b91601b", "filename": "gcc/match.pd", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=03cc70b5f1999fe04354c0ba2227fce733308ad4", "patch": "@@ -92,7 +92,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   IFN_FMA IFN_FMS IFN_FNMA IFN_FNMS)\n (define_operator_list COND_TERNARY\n   IFN_COND_FMA IFN_COND_FMS IFN_COND_FNMA IFN_COND_FNMS)\n-    \n+\n /* As opposed to convert?, this still creates a single pattern, so\n    it is not a suitable replacement for convert? in all cases.  */\n (match (nop_convert @0)\n@@ -106,7 +106,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       && tree_nop_conversion_p (TREE_TYPE (type), TREE_TYPE (TREE_TYPE (@0))))))\n /* This one has to be last, or it shadows the others.  */\n (match (nop_convert @0)\n- @0) \n+ @0)\n \n /* Transform likes of (char) ABS_EXPR <(int) x> into (char) ABSU_EXPR <x>\n    ABSU_EXPR returns unsigned absolute value of the operand and the operand\n@@ -285,7 +285,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      And not for _Fract types where we can't build 1.  */\n   (if (!integer_zerop (@0) && !ALL_FRACT_MODE_P (TYPE_MODE (type)))\n    { build_one_cst (type); }))\n- /* X / abs (X) is X < 0 ? -1 : 1.  */ \n+ /* X / abs (X) is X < 0 ? -1 : 1.  */\n  (simplify\n    (div:C @0 (abs @0))\n    (if (INTEGRAL_TYPE_P (type)\n@@ -929,6 +929,31 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (bitop:c @0 (bit_not (bitop:cs @0 @1)))\n   (bitop @0 (bit_not @1))))\n \n+/* (~x & y) | ~(x | y) -> ~x */\n+(simplify\n+ (bit_ior:c (bit_and:c (bit_not@2 @0) @1) (bit_not (bit_ior:c @0 @1)))\n+ @2)\n+\n+/* (x | y) ^ (x | ~y) -> ~x */\n+(simplify\n+ (bit_xor:c (bit_ior:c @0 @1) (bit_ior:c @0 (bit_not @1)))\n+ (bit_not @0))\n+\n+/* (x & y) | ~(x | y) -> ~(x ^ y) */\n+(simplify\n+ (bit_ior:c (bit_and:s @0 @1) (bit_not:s (bit_ior:s @0 @1)))\n+ (bit_not (bit_xor @0 @1)))\n+\n+/* (~x | y) ^ (x ^ y) -> x | ~y */\n+(simplify\n+ (bit_xor:c (bit_ior:cs (bit_not @0) @1) (bit_xor:s @0 @1))\n+ (bit_ior @0 (bit_not @1)))\n+\n+/* (x ^ y) | ~(x | y) -> ~(x & y) */\n+(simplify\n+ (bit_ior:c (bit_xor:s @0 @1) (bit_not:s (bit_ior:s @0 @1)))\n+ (bit_not (bit_and @0 @1)))\n+\n /* (x | y) & ~x -> y & ~x */\n /* (x & y) | ~x -> y | ~x */\n (for bitop (bit_and bit_ior)\n@@ -1139,7 +1164,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (tree_nop_conversion_p (type, TREE_TYPE (@0))\n        && tree_nop_conversion_p (type, TREE_TYPE (@1)))\n    (mult (convert @0) (convert (negate @1)))))\n- \n+\n /* -(A + B) -> (-B) - A.  */\n (simplify\n  (negate (plus:c @0 negate_expr_p@1))\n@@ -3099,7 +3124,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n     (if (tree_int_cst_sgn (@1) < 0)\n      (scmp @0 @2)\n      (cmp @0 @2))))))\n- \n+\n /* Simplify comparison of something with itself.  For IEEE\n    floating-point, we can only do some of these simplifications.  */\n (for cmp (eq ge le)\n@@ -3170,11 +3195,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n         }\n       tree newtype\n         = (TYPE_PRECISION (TREE_TYPE (@0)) > TYPE_PRECISION (type1)\n-\t   ? TREE_TYPE (@0) : type1); \n+\t   ? TREE_TYPE (@0) : type1);\n     }\n     (if (TYPE_PRECISION (TREE_TYPE (@2)) > TYPE_PRECISION (newtype))\n      (cmp (convert:newtype @0) (convert:newtype @1))))))\n- \n+\n  (simplify\n   (cmp @0 REAL_CST@1)\n   /* IEEE doesn't distinguish +0 and -0 in comparisons.  */\n@@ -3422,7 +3447,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t    (FTYPE) N == CST -> 0\n \t    (FTYPE) N != CST -> 1.  */\n \t(if (cmp == EQ_EXPR || cmp == NE_EXPR)\n-\t { constant_boolean_node (cmp == NE_EXPR, type); }) \n+\t { constant_boolean_node (cmp == NE_EXPR, type); })\n \t/* Otherwise replace with sensible integer constant.  */\n \t(with\n \t {\n@@ -3666,7 +3691,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (cmp (bit_and@2 @0 integer_pow2p@1) @1)\n   (icmp @2 { build_zero_cst (TREE_TYPE (@0)); })))\n- \n+\n /* If we have (A & C) != 0 ? D : 0 where C and D are powers of 2,\n    convert this into a shift followed by ANDing with D.  */\n (simplify\n@@ -3886,7 +3911,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n         (if (cmp == LE_EXPR)\n \t (ge (convert:st @0) { build_zero_cst (st); })\n \t (lt (convert:st @0) { build_zero_cst (st); }))))))))))\n- \n+\n (for cmp (unordered ordered unlt unle ungt unge uneq ltgt)\n  /* If the second operand is NaN, the result is constant.  */\n  (simplify\n@@ -4540,7 +4565,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (if (wi::to_wide (@1) == -1)\n    (rdiv { build_real (type, dconst1); } @0))))\n \n-/* Narrowing of arithmetic and logical operations. \n+/* Narrowing of arithmetic and logical operations.\n \n    These are conceptually similar to the transformations performed for\n    the C/C++ front-ends by shorten_binary_op and shorten_compare.  Long\n@@ -4612,7 +4637,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      (convert (bit_and (op (convert:utype @0) (convert:utype @1))\n \t       (convert:utype @4))))))))\n \n-/* Transform (@0 < @1 and @0 < @2) to use min, \n+/* Transform (@0 < @1 and @0 < @2) to use min,\n    (@0 > @1 and @0 > @2) to use max */\n (for logic (bit_and bit_and bit_and bit_and bit_ior bit_ior bit_ior bit_ior)\n      op    (lt      le      gt      ge      lt      le      gt      ge     )"}, {"sha": "5dbb34ebc5c46a42c8f3b60f22ff193996fcf1db", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03cc70b5f1999fe04354c0ba2227fce733308ad4", "patch": "@@ -1,3 +1,8 @@\n+2018-10-01  MCC CS <deswurstes@users.noreply.github.com>\n+\n+\tPR tree-optimization/87261\n+\t* gcc.dg/pr87261.c: New test.\n+\n 2018-10-01  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* gcc.target/arc/tph_addx.c: New test."}, {"sha": "9b10d03454d1ce97a3800d0a91923b976c9933d3", "filename": "gcc/testsuite/gcc.dg/pr87261.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87261.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03cc70b5f1999fe04354c0ba2227fce733308ad4/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87261.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr87261.c?ref=03cc70b5f1999fe04354c0ba2227fce733308ad4", "patch": "@@ -0,0 +1,35 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-original\" } */\n+\n+int f1 (int a, int b)\n+{\n+ return ~(a|b)|(~a&b);\n+}\n+\n+int f2 (int a, int b)\n+{\n+ return (a|b)^(a|~b);\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return \\\\~a;\" 2 \"original\" } } */\n+\n+int f3 (int a, int b)\n+{\n+ return ~(a|b)|(a&b);\n+}\n+\n+/* { dg-final { scan-tree-dump \"return \\\\~\\\\(a \\\\^ b\\\\);\" \"original\" } } */\n+\n+int f4 (int a, int b)\n+{\n+ return a^b^(~a|b);\n+}\n+\n+/* { dg-final { scan-tree-dump \"return \\\\~b \\\\| a;\" \"original\" } } */\n+\n+int f5 (int a, int b)\n+{\n+ return (a^b)|~(a|b);\n+}\n+\n+/* { dg-final { scan-tree-dump \"return \\\\~\\\\(a \\\\& b\\\\);\" \"original\" } } */"}]}