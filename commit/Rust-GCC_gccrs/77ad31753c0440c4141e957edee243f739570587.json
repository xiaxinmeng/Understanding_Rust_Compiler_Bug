{"sha": "77ad31753c0440c4141e957edee243f739570587", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhZDMxNzUzYzA0NDBjNDE0MWU5NTdlZGVlMjQzZjczOTU3MDU4Nw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-12-10T09:00:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-12-10T09:00:58Z"}, "message": "re PR tree-optimization/68806 (internal compiler error: Segmentation fault)\n\n2015-12-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/68806\n\t* tree-vect-loop.c (vect_analyze_loop_2): Properly detect\n\treduction chains and ignore SLP reductions.\n\n\t* gcc.dg/torture/pr68806.c: New testcase.\n\nFrom-SVN: r231493", "tree": {"sha": "5328b717f19d7bac98d91a9f176e50a68f597d1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5328b717f19d7bac98d91a9f176e50a68f597d1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77ad31753c0440c4141e957edee243f739570587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ad31753c0440c4141e957edee243f739570587", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77ad31753c0440c4141e957edee243f739570587", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77ad31753c0440c4141e957edee243f739570587/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a839a8f708dcd6087e3cf3cdfbbaf879f549e1ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a839a8f708dcd6087e3cf3cdfbbaf879f549e1ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a839a8f708dcd6087e3cf3cdfbbaf879f549e1ab"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "c990fc3fc6673de475efbd9690f9f7639a6396aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ad31753c0440c4141e957edee243f739570587/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ad31753c0440c4141e957edee243f739570587/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77ad31753c0440c4141e957edee243f739570587", "patch": "@@ -1,3 +1,9 @@\n+2015-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68806\n+\t* tree-vect-loop.c (vect_analyze_loop_2): Properly detect\n+\treduction chains and ignore SLP reductions.\n+\n 2015-12-10  Richard Biener  <rguenther@suse.de>\n \n \t* tree-if-conv.c (if_convertible_loop_p_1): Do not compute"}, {"sha": "a24de4266cd0cc99ff5da33885bfa4b81b515097", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77ad31753c0440c4141e957edee243f739570587", "patch": "@@ -1,3 +1,8 @@\n+2015-12-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/68806\n+\t* gcc.dg/torture/pr68806.c: New testcase.\n+\n 2015-12-08  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/61886"}, {"sha": "dbb743b80338e51f776e843d00401e6f14397557", "filename": "gcc/testsuite/gcc.dg/torture/pr68806.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68806.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68806.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr68806.c?ref=77ad31753c0440c4141e957edee243f739570587", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+\n+int sad(const unsigned char *p1, long p2)\n+{\n+  int a = 0;\n+  for (int y = 0; y < 16; y++)\n+    {\n+      for (int x = 0; x < 12; x++)\n+\ta += p1[x];\n+      p1 += p2;\n+    }\n+  return a;\n+}"}, {"sha": "77ad76091c12de5acf1062cd47acd25b20b2670e", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77ad31753c0440c4141e957edee243f739570587/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=77ad31753c0440c4141e957edee243f739570587", "patch": "@@ -2123,9 +2123,12 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n   if (!slp)\n     return false;\n \n+  /* If there are reduction chains re-trying will fail anyway.  */\n+  if (! LOOP_VINFO_REDUCTION_CHAINS (loop_vinfo).is_empty ())\n+    return false;\n+\n   /* Likewise if the grouped loads or stores in the SLP cannot be handled\n-     via interleaving or lane instructions or if there were any SLP\n-     reductions.  */\n+     via interleaving or lane instructions.  */\n   slp_instance instance;\n   slp_tree node;\n   unsigned i, j;\n@@ -2135,7 +2138,7 @@ vect_analyze_loop_2 (loop_vec_info loop_vinfo, bool &fatal)\n       vinfo = vinfo_for_stmt\n \t  (SLP_TREE_SCALAR_STMTS (SLP_INSTANCE_TREE (instance))[0]);\n       if (! STMT_VINFO_GROUPED_ACCESS (vinfo))\n-\treturn false;\n+\tcontinue;\n       vinfo = vinfo_for_stmt (STMT_VINFO_GROUP_FIRST_ELEMENT (vinfo));\n       unsigned int size = STMT_VINFO_GROUP_SIZE (vinfo);\n       tree vectype = STMT_VINFO_VECTYPE (vinfo);"}]}