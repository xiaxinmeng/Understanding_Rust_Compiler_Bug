{"sha": "e87afe54b86c478ae63569e51e7abb67d3fe3fce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg3YWZlNTRiODZjNDc4YWU2MzU2OWU1MWU3YWJiNjdkM2ZlM2ZjZQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2017-06-16T21:02:52Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2017-06-16T21:02:52Z"}, "message": "[arm] Add default FPUs for CPUs.\n\n\nThis patch adds the default CPUs for each cpu and provides options for\nchanging the FPU variant when appropriate.\n\nIt turns out to be easier to describe removal options using general\nmask operations that disable a concept rather than specific bits.\nSometimes the helper definitions for enabling a feature are not excat\nduals when it comes to disabling them - for example, +simd forcibly\nturns on double-precision capabilities in the FPU, but disabling just\nsimd (+nosimd) should not forcibly disable that.\n\n\t* config/arm/arm-isa.h (ISA_ALL_FPU_INTERNAL): Renamed from ISA_ALL_FPU.\n\t(ISA_ALL_CRYPTO): New macro.\n\t(ISA_ALL_SIMD): New macro\n\t(ISA_ALL_FP): New macro.\n\t* config/arm/arm.c (fpu_bitlist): Update initializer.\n\t* config/arm/arm-cpus.in: Use new ISA_ALL macros to disable crypto,\n\tsimd or fp.\n\t(arm9e): Add fpu.  Add option for nofp\n\t(arm946e-s, arm966e-s, arm968e-s, arm10e, arm1020e, arm1022e): Likewise.\n\t(arm926ej-s, arm1026ej-s): Likewise.\n\t(generic-armv7-a): Add fpu.  Add options for simd, vfpv3, vfpv3-d16,\n\tvfpv3-fp16, vfpv3-d16-fp16, vfpv4, vfpv4-d16, neon, neon-vfp3,\n\tneon-fp16, neon-vfpv4, nofp and nosimd.\n\t(cortex-a5, cortex-a7): Add fpu.  Add options for nosimd and nofp.\n\t(cortex-a8): Add fpu.  Add option for nofp.\n\t(cortex-a9): Add fpu.  Add options for nosimd and nofp.\n\t(cortex-a12, cortex-a15, cortex-a17): Add fpu.  Add option for nofp.\n\t(cortex-r4f): Add fpu.\n\t(cortex-r5): Add fpu.  Add options for nofp.dp and nofp.\n\t(cortex-r7): Use idiv option from architecture.  Add fpu.  Add option\n\tfor nofp.\n\t(cortex-r8): Likewise.\n\t(cortex-m4): Add fpu.  Add option for nofp.\n\t(cortex-a15.cortex-a7): Add fpu.  Add option for nofp.\n\t(cortex-a17.cortex-a7): Likewise.\n\t(cortex-a32): Add fpu.  Add options for crypto and nofp.\n\t(cortex-a35, cortex-a53): Likewise.\n\t(cortex-a57): Add fpu.  Add option for crypto.\n\t(cortex-a72, cortex-a73): Likewise.\n\t(exynos-m1): Likewise.\n\t(cortex-a57.cortex-a53, cortex-a72.cortex-a53): Likewise.\n\t(cortex-a73.cortex-a35, cortex-a73.cortex-a53): Likewise.\n\t(cortex-m33): Add fpu.  Add option for nofp.\n\t* config/arm/arm-cpu-cdata.h: Regenerated\n\t* config/arm/arm-cpu-data.h: Regenerated.\n\nFrom-SVN: r249284", "tree": {"sha": "4c4b81420d6d8756c835184d9989e81eedca1814", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4b81420d6d8756c835184d9989e81eedca1814"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e87afe54b86c478ae63569e51e7abb67d3fe3fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87afe54b86c478ae63569e51e7abb67d3fe3fce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e87afe54b86c478ae63569e51e7abb67d3fe3fce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e87afe54b86c478ae63569e51e7abb67d3fe3fce/comments", "author": null, "committer": null, "parents": [{"sha": "76d7d5334991a5646026e5aa8c3e7d23629f383a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d7d5334991a5646026e5aa8c3e7d23629f383a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d7d5334991a5646026e5aa8c3e7d23629f383a"}], "stats": {"total": 894, "additions": 730, "deletions": 164}, "files": [{"sha": "9eadbce391a99babff31c9852a843f202514db20", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -1,3 +1,41 @@\n+2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-isa.h (ISA_ALL_FPU_INTERNAL): Renamed from ISA_ALL_FPU.\n+\t(ISA_ALL_CRYPTO): New macro.\n+\t(ISA_ALL_SIMD): New macro\n+\t(ISA_ALL_FP): New macro.\n+\t* config/arm/arm.c (fpu_bitlist): Update initializer.\n+\t* config/arm/arm-cpus.in: Use new ISA_ALL macros to disable crypto,\n+\tsimd or fp.\n+\t(arm9e): Add fpu.  Add option for nofp\n+\t(arm946e-s, arm966e-s, arm968e-s, arm10e, arm1020e, arm1022e): Likewise.\n+\t(arm926ej-s, arm1026ej-s): Likewise.\n+\t(generic-armv7-a): Add fpu.  Add options for simd, vfpv3, vfpv3-d16,\n+\tvfpv3-fp16, vfpv3-d16-fp16, vfpv4, vfpv4-d16, neon, neon-vfp3,\n+\tneon-fp16, neon-vfpv4, nofp and nosimd.\n+\t(cortex-a5, cortex-a7): Add fpu.  Add options for nosimd and nofp.\n+\t(cortex-a8): Add fpu.  Add option for nofp.\n+\t(cortex-a9): Add fpu.  Add options for nosimd and nofp.\n+\t(cortex-a12, cortex-a15, cortex-a17): Add fpu.\tAdd option for nofp.\n+\t(cortex-r4f): Add fpu.\n+\t(cortex-r5): Add fpu.  Add options for nofp.dp and nofp.\n+\t(cortex-r7): Use idiv option from architecture.\t Add fpu.  Add option\n+\tfor nofp.\n+\t(cortex-r8): Likewise.\n+\t(cortex-m4): Add fpu.  Add option for nofp.\n+\t(cortex-a15.cortex-a7): Add fpu.  Add option for nofp.\n+\t(cortex-a17.cortex-a7): Likewise.\n+\t(cortex-a32): Add fpu.\tAdd options for crypto and nofp.\n+\t(cortex-a35, cortex-a53): Likewise.\n+\t(cortex-a57): Add fpu.\tAdd option for crypto.\n+\t(cortex-a72, cortex-a73): Likewise.\n+\t(exynos-m1): Likewise.\n+\t(cortex-a57.cortex-a53, cortex-a72.cortex-a53): Likewise.\n+\t(cortex-a73.cortex-a35, cortex-a73.cortex-a53): Likewise.\n+\t(cortex-m33): Add fpu.\tAdd option for nofp.\n+\t* config/arm/arm-cpu-cdata.h: Regenerated\n+\t* config/arm/arm-cpu-data.h: Regenerated.\n+\n 2017-06-16  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* arm-cpus.in (armv5e): Add options fp, vfpv2 and nofp."}, {"sha": "aced3ac5c87137cb3bbe86f99254d1ef68fe7c12", "filename": "gcc/config/arm/arm-cpu-cdata.h", "status": "modified", "additions": 37, "deletions": 4, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-cdata.h?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -341,48 +341,55 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"arm9e\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm946e-s\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm966e-s\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm968e-s\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm10e\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm1020e\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm1022e\",\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n@@ -440,13 +447,15 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"arm926ej-s\",\n     {\n       ISA_ARMv5tej,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"arm1026ej-s\",\n     {\n       ISA_ARMv5tej,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n@@ -556,20 +565,23 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"generic-armv7-a\",\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a5\",\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a7\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n@@ -585,28 +597,31 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-a9\",\n     {\n       ISA_ARMv7a,\n-      ISA_VFPv3,ISA_NEON,\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a12\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a15\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a17\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n@@ -621,37 +636,39 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-r4f\",\n     {\n       ISA_ARMv7r,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-r5\",\n     {\n       ISA_ARMv7r,\n-      isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-r7\",\n     {\n       ISA_ARMv7r,\n-      isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-r8\",\n     {\n       ISA_ARMv7r,\n-      isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-m7\",\n     {\n       ISA_ARMv7em,\n+      ISA_FPv5,ISA_FP_DBL,\n       isa_quirk_no_volatile_ce,\n       isa_nobit\n     },\n@@ -660,6 +677,7 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-m4\",\n     {\n       ISA_ARMv7em,\n+      ISA_VFPv4,\n       isa_nobit\n     },\n   },\n@@ -682,97 +700,111 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-a15.cortex-a7\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a17.cortex-a7\",\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a32\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a35\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a53\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a57\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a72\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"exynos-m1\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"xgene1\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a57.cortex-a53\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a72.cortex-a53\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73.cortex-a35\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n   {\n     \"cortex-a73.cortex-a53\",\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n   },\n@@ -787,6 +819,7 @@ static const struct arm_arch_core_flag arm_arch_core_flags[] =\n     \"cortex-m33\",\n     {\n       ISA_ARMv8m_main,\n+      ISA_FPv5,\n       isa_nobit\n     },\n   },"}, {"sha": "b34247c564185f566422937269807468e4af3b9e", "filename": "gcc/config/arm/arm-cpu-data.h", "status": "modified", "additions": 488, "deletions": 96, "changes": 584, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpu-data.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpu-data.h?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -20,22 +20,378 @@\n    License along with GCC; see the file COPYING3.  If not see\n    <http://www.gnu.org/licenses/>.  */\n \n+static const struct cpu_option cpu_opttab_arm9e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm946es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm966es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm968es[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm10e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm1020e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm1022e[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm926ejs[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_arm1026ejs[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_genericv7a[] = {\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"vfpv3\", false,\n+    { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv3-d16-fp16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"neon\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv3\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"neon-fp16\", false,\n+    { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n+  },\n+  {\n+    \"neon-vfpv4\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa5[] = {\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa7[] = {\n+  {\n+    \"nosimd\", true,\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n static const struct cpu_option cpu_opttab_cortexa8[] = {\n   {\n     \"nofp\", true,\n-    { ISA_NEON,ISA_VFPv3, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n \n static const struct cpu_option cpu_opttab_cortexa9[] = {\n   {\n     \"nofp\", true,\n-    { ISA_NEON,ISA_VFPv3, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nosimd\", true,\n-    { ISA_NEON, isa_nobit }\n+    { ISA_ALL_SIMD, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa12[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa15[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa17[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexr5[] = {\n+  {\n+    \"nofp.dp\", true,\n+    { ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexr7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexr8[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexm7[] = {\n+  {\n+    \"nofp.dp\", true,\n+    { ISA_FP_DBL, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexm4[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa15cortexa7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa17cortexa7[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa32[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa35[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa57[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa72[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa73[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_exynosm1[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_xgene1[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa57cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa72cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa73cortexa35[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexa73cortexa53[] = {\n+  {\n+    \"crypto\", false,\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n+  },\n+  { NULL, false, {isa_nobit}}\n+};\n+\n+static const struct cpu_option cpu_opttab_cortexm33[] = {\n+  {\n+    \"nofp\", true,\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -589,9 +945,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm9e,\n     &arm_9e_tune\n   },\n   {\n@@ -601,9 +958,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm946es,\n     &arm_9e_tune\n   },\n   {\n@@ -613,9 +971,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm966es,\n     &arm_9e_tune\n   },\n   {\n@@ -625,9 +984,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm968es,\n     &arm_9e_tune\n   },\n   {\n@@ -637,9 +997,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm10e,\n     &arm_fastmul_tune\n   },\n   {\n@@ -649,9 +1010,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm1020e,\n     &arm_fastmul_tune\n   },\n   {\n@@ -661,9 +1023,10 @@ static const struct processors all_cores[] =\n     \"5TE\", BASE_ARCH_5TE,\n     {\n       ISA_ARMv5te,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm1022e,\n     &arm_fastmul_tune\n   },\n   {\n@@ -758,9 +1121,10 @@ static const struct processors all_cores[] =\n     \"5TEJ\", BASE_ARCH_5TEJ,\n     {\n       ISA_ARMv5tej,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm926ejs,\n     &arm_9e_tune\n   },\n   {\n@@ -770,9 +1134,10 @@ static const struct processors all_cores[] =\n     \"5TEJ\", BASE_ARCH_5TEJ,\n     {\n       ISA_ARMv5tej,\n+      ISA_VFPv2,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_arm1026ejs,\n     &arm_9e_tune\n   },\n   {\n@@ -954,9 +1319,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_genericv7a,\n     &arm_cortex_tune\n   },\n   {\n@@ -966,9 +1332,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7a,\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa5,\n     &arm_cortex_a5_tune\n   },\n   {\n@@ -978,9 +1345,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa7,\n     &arm_cortex_a7_tune\n   },\n   {\n@@ -1003,7 +1371,7 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7a,\n-      ISA_VFPv3,ISA_NEON,\n+      ISA_VFPv3,ISA_NEON,isa_bit_fp16conv,\n       isa_nobit\n     },\n     cpu_opttab_cortexa9,\n@@ -1016,9 +1384,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa12,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -1028,9 +1397,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa15,\n     &arm_cortex_a15_tune\n   },\n   {\n@@ -1040,9 +1410,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa17,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -1064,6 +1435,7 @@ static const struct processors all_cores[] =\n     \"7R\", BASE_ARCH_7R,\n     {\n       ISA_ARMv7r,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n     NULL,\n@@ -1077,9 +1449,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv7r,\n       isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexr5,\n     &arm_cortex_tune\n   },\n   {\n@@ -1090,9 +1463,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv7r,\n       isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexr7,\n     &arm_cortex_tune\n   },\n   {\n@@ -1103,9 +1477,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv7r,\n       isa_bit_adiv,\n+      ISA_VFPv3,ISA_FP_DBL,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexr8,\n     &arm_cortex_tune\n   },\n   {\n@@ -1115,10 +1490,11 @@ static const struct processors all_cores[] =\n     \"7EM\", BASE_ARCH_7EM,\n     {\n       ISA_ARMv7em,\n+      ISA_FPv5,ISA_FP_DBL,\n       isa_quirk_no_volatile_ce,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexm7,\n     &arm_cortex_m7_tune\n   },\n   {\n@@ -1128,9 +1504,10 @@ static const struct processors all_cores[] =\n     \"7EM\", BASE_ARCH_7EM,\n     {\n       ISA_ARMv7em,\n+      ISA_VFPv4,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexm4,\n     &arm_v7m_tune\n   },\n   {\n@@ -1165,9 +1542,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa15cortexa7,\n     &arm_cortex_a15_tune\n   },\n   {\n@@ -1177,9 +1555,10 @@ static const struct processors all_cores[] =\n     \"7A\", BASE_ARCH_7A,\n     {\n       ISA_ARMv7ve,\n+      ISA_VFPv4,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa17cortexa7,\n     &arm_cortex_a12_tune\n   },\n   {\n@@ -1190,9 +1569,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa32,\n     &arm_cortex_a35_tune\n   },\n   {\n@@ -1203,9 +1583,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa35,\n     &arm_cortex_a35_tune\n   },\n   {\n@@ -1216,9 +1597,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa53,\n     &arm_cortex_a53_tune\n   },\n   {\n@@ -1229,9 +1611,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa57,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1242,9 +1625,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa72,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1255,9 +1639,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa73,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1268,9 +1653,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_exynosm1,\n     &arm_exynosm1_tune\n   },\n   {\n@@ -1280,9 +1666,10 @@ static const struct processors all_cores[] =\n     \"8A\", BASE_ARCH_8A,\n     {\n       ISA_ARMv8a,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_xgene1,\n     &arm_xgene1_tune\n   },\n   {\n@@ -1293,9 +1680,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa57cortexa53,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1306,9 +1694,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa72cortexa53,\n     &arm_cortex_a57_tune\n   },\n   {\n@@ -1319,9 +1708,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa73cortexa35,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1332,9 +1722,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8a,\n       isa_bit_crc32,\n+      ISA_FP_ARMv8,ISA_NEON,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexa73cortexa53,\n     &arm_cortex_a73_tune\n   },\n   {\n@@ -1357,9 +1748,10 @@ static const struct processors all_cores[] =\n     {\n       ISA_ARMv8m_main,\n       isa_bit_ARMv7em,\n+      ISA_FPv5,\n       isa_nobit\n     },\n-    NULL,\n+    cpu_opttab_cortexm33,\n     &arm_v7m_tune\n   },\n   {NULL, TARGET_CPU_arm_none, 0, NULL, BASE_ARCH_0, {isa_nobit}, NULL, NULL}\n@@ -1376,7 +1768,7 @@ static const struct cpu_option arch_opttab_armv5e[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1392,7 +1784,7 @@ static const struct cpu_option arch_opttab_armv5te[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1408,7 +1800,7 @@ static const struct cpu_option arch_opttab_armv5tej[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1424,7 +1816,7 @@ static const struct cpu_option arch_opttab_armv6[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1440,7 +1832,7 @@ static const struct cpu_option arch_opttab_armv6j[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1456,7 +1848,7 @@ static const struct cpu_option arch_opttab_armv6k[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1472,7 +1864,7 @@ static const struct cpu_option arch_opttab_armv6z[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1488,7 +1880,7 @@ static const struct cpu_option arch_opttab_armv6kz[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1504,7 +1896,7 @@ static const struct cpu_option arch_opttab_armv6zk[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1520,7 +1912,7 @@ static const struct cpu_option arch_opttab_armv6t2[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv2,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1543,17 +1935,13 @@ static const struct cpu_option arch_opttab_armv7_a[] = {\n     { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"simd\", false,\n-    { ISA_VFPv3,ISA_NEON, isa_nobit }\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n     \"vfpv3\", false,\n     { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n   },\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n   {\n     \"vfpv3-d16-fp16\", false,\n     { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n@@ -1562,13 +1950,17 @@ static const struct cpu_option arch_opttab_armv7_a[] = {\n     \"vfpv3-fp16\", false,\n     { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n   },\n+  {\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+  },\n   {\n     \"vfpv4\", false,\n     { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n   },\n   {\n-    \"vfpv4-d16\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n+    \"simd\", false,\n+    { ISA_VFPv3,ISA_NEON, isa_nobit }\n   },\n   {\n     \"neon\", false,\n@@ -1588,32 +1980,24 @@ static const struct cpu_option arch_opttab_armv7_a[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nosimd\", true,\n-    { ISA_NEON, isa_nobit }\n+    { ISA_ALL_SIMD, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n \n static const struct cpu_option arch_opttab_armv7ve[] = {\n   {\n-    \"fp\", false,\n-    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n-  },\n-  {\n-    \"simd\", false,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+    \"vfpv3-d16\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n   },\n   {\n     \"vfpv3\", false,\n     { ISA_VFPv3,ISA_FP_D32, isa_nobit }\n   },\n-  {\n-    \"vfpv3-d16\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n   {\n     \"vfpv3-d16-fp16\", false,\n     { ISA_VFPv3,ISA_FP_DBL,isa_bit_fp16conv, isa_nobit }\n@@ -1623,13 +2007,17 @@ static const struct cpu_option arch_opttab_armv7ve[] = {\n     { ISA_VFPv3,ISA_FP_DBL,ISA_FP_D32,isa_bit_fp16conv, isa_nobit }\n   },\n   {\n-    \"vfpv4\", false,\n-    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+    \"vfpv4-d16\", false,\n+    { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n   {\n-    \"vfpv4-d16\", false,\n+    \"fp\", false,\n     { ISA_VFPv4,ISA_FP_DBL, isa_nobit }\n   },\n+  {\n+    \"vfpv4\", false,\n+    { ISA_VFPv4,ISA_FP_D32, isa_nobit }\n+  },\n   {\n     \"neon\", false,\n     { ISA_VFPv3,ISA_NEON, isa_nobit }\n@@ -1642,37 +2030,41 @@ static const struct cpu_option arch_opttab_armv7ve[] = {\n     \"neon-fp16\", false,\n     { ISA_VFPv3,ISA_NEON,isa_bit_fp16conv, isa_nobit }\n   },\n+  {\n+    \"simd\", false,\n+    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+  },\n   {\n     \"neon-vfpv4\", false,\n     { ISA_VFPv4,ISA_NEON, isa_nobit }\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv4,ISA_NEON, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nosimd\", true,\n-    { ISA_NEON, isa_nobit }\n+    { ISA_ALL_SIMD, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n \n static const struct cpu_option arch_opttab_armv7_r[] = {\n-  {\n-    \"fp\", false,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n-  },\n   {\n     \"fp.sp\", false,\n     { ISA_VFPv3, isa_nobit }\n   },\n+  {\n+    \"fp\", false,\n+    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+  },\n   {\n     \"idiv\", false,\n     { isa_bit_adiv, isa_nobit }\n   },\n   {\n     \"nofp\", true,\n-    { ISA_VFPv3,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"noidiv\", true,\n@@ -1696,7 +2088,7 @@ static const struct cpu_option arch_opttab_armv7e_m[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_FPv5,ISA_FP_DBL, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1712,15 +2104,15 @@ static const struct cpu_option arch_opttab_armv8_a[] = {\n   },\n   {\n     \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n     \"nofp\", true,\n-    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nocrypto\", true,\n-    { ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1732,39 +2124,39 @@ static const struct cpu_option arch_opttab_armv8_1_a[] = {\n   },\n   {\n     \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n     \"nofp\", true,\n-    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nocrypto\", true,\n-    { ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n \n static const struct cpu_option arch_opttab_armv8_2_a[] = {\n-  {\n-    \"fp16\", false,\n-    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n-  },\n   {\n     \"simd\", false,\n     { ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n   },\n+  {\n+    \"fp16\", false,\n+    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON, isa_nobit }\n+  },\n   {\n     \"crypto\", false,\n-    { ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_FP_ARMv8,ISA_CRYPTO, isa_nobit }\n   },\n   {\n     \"nofp\", true,\n-    { isa_bit_fp16,ISA_FP_ARMv8,ISA_NEON,ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   {\n     \"nocrypto\", true,\n-    { ISA_CRYPTO, isa_nobit }\n+    { ISA_ALL_CRYPTO, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1784,7 +2176,7 @@ static const struct cpu_option arch_opttab_armv8_m_main[] = {\n   },\n   {\n     \"nofp\", true,\n-    { ISA_FPv5, isa_nobit }\n+    { ISA_ALL_FP, isa_nobit }\n   },\n   { NULL, false, {isa_nobit}}\n };\n@@ -1964,7 +2356,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n-    arch_opttab_armv6zk,\n+    arch_opttab_armv6kz,\n     NULL\n   },\n   {\n@@ -1975,7 +2367,7 @@ static const struct processors all_architectures[] =\n       ISA_ARMv6kz,\n       isa_nobit\n     },\n-    arch_opttab_armv6kz,\n+    arch_opttab_armv6zk,\n     NULL\n   },\n   {"}, {"sha": "fdd5e83ac38acbfccea47caeabb381dc77b67339", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 148, "deletions": 60, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -115,7 +115,7 @@ begin arch armv5e\n  isa ARMv5e\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv5e\n \n begin arch armv5te\n@@ -125,7 +125,7 @@ begin arch armv5te\n  isa ARMv5te\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv5te\n \n begin arch armv5tej\n@@ -135,7 +135,7 @@ begin arch armv5tej\n  isa ARMv5tej\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv5tej\n \n begin arch armv6\n@@ -145,7 +145,7 @@ begin arch armv6\n  isa ARMv6\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6\n \n begin arch armv6j\n@@ -155,7 +155,7 @@ begin arch armv6j\n  isa ARMv6j\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6j\n \n begin arch armv6k\n@@ -165,7 +165,7 @@ begin arch armv6k\n  isa ARMv6k\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6k\n \n begin arch armv6z\n@@ -175,7 +175,7 @@ begin arch armv6z\n  isa ARMv6z\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6z\n \n begin arch armv6kz\n@@ -185,7 +185,7 @@ begin arch armv6kz\n  isa ARMv6kz\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6kz\n \n begin arch armv6zk\n@@ -195,7 +195,7 @@ begin arch armv6zk\n  isa ARMv6kz\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6zk\n \n begin arch armv6t2\n@@ -205,7 +205,7 @@ begin arch armv6t2\n  isa ARMv6t2\n  option fp add VFPv2 FP_DBL\n  option vfpv2 add VFPv2 FP_DBL\n- option nofp remove VFPv2 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv6t2\n \n begin arch armv6-m\n@@ -236,20 +236,20 @@ begin arch armv7-a\n  base 7A\n  isa ARMv7a\n # fp => VFPv3-d16, simd => neon-vfpv3\n- option fp add VFPv3 FP_DBL\n- option simd add VFPv3 NEON\n- option vfpv3 add VFPv3 FP_D32\n- option vfpv3-d16 add VFPv3 FP_DBL\n+ option fp             add VFPv3 FP_DBL\n+ option vfpv3-d16      add VFPv3 FP_DBL\n+ option vfpv3 \t       add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n- option vfpv3-fp16 add VFPv3 FP_DBL FP_D32 bit_fp16conv\n- option vfpv4 add VFPv4 FP_D32\n- option vfpv4-d16 add VFPv4 FP_DBL\n- option neon add VFPv3 NEON\n- option neon-vfpv3 add VFPv3 NEON\n- option neon-fp16 add VFPv3 NEON bit_fp16conv\n- option neon-vfpv4 add VFPv4 NEON\n- option nofp remove VFPv4 NEON\n- option nosimd remove NEON\n+ option vfpv3-fp16     add VFPv3 FP_DBL FP_D32 bit_fp16conv\n+ option vfpv4-d16      add VFPv4 FP_DBL\n+ option vfpv4 \t       add VFPv4 FP_D32\n+ option simd \t       add VFPv3 NEON\n+ option neon \t       add VFPv3 NEON\n+ option neon-vfpv3     add VFPv3 NEON\n+ option neon-fp16      add VFPv3 NEON bit_fp16conv\n+ option neon-vfpv4     add VFPv4 NEON\n+ option nofp \t    remove ALL_FP\n+ option nosimd \t    remove ALL_SIMD\n end arch armv7-a\n \n begin arch armv7ve\n@@ -258,20 +258,20 @@ begin arch armv7ve\n  base 7A\n  isa ARMv7ve\n # fp => VFPv4-d16, simd => neon-vfpv4\n- option fp add VFPv4 FP_DBL\n- option simd add VFPv4 NEON\n- option vfpv3 add VFPv3 FP_D32\n- option vfpv3-d16 add VFPv3 FP_DBL\n+ option vfpv3-d16      add VFPv3 FP_DBL\n+ option vfpv3 \t       add VFPv3 FP_D32\n  option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n- option vfpv3-fp16 add VFPv3 FP_DBL FP_D32 bit_fp16conv\n- option vfpv4 add VFPv4 FP_D32\n- option vfpv4-d16 add VFPv4 FP_DBL\n- option neon add VFPv3 NEON\n- option neon-vfpv3 add VFPv3 NEON\n- option neon-fp16 add VFPv3 NEON bit_fp16conv\n- option neon-vfpv4 add VFPv4 NEON\n- option nofp remove VFPv4 NEON\n- option nosimd remove NEON\n+ option vfpv3-fp16     add VFPv3 FP_DBL FP_D32 bit_fp16conv\n+ option vfpv4-d16      add VFPv4 FP_DBL\n+ option fp \t       add VFPv4 FP_DBL\n+ option vfpv4 \t       add VFPv4 FP_D32\n+ option neon \t       add VFPv3 NEON\n+ option neon-vfpv3     add VFPv3 NEON\n+ option neon-fp16      add VFPv3 NEON bit_fp16conv\n+ option simd \t       add VFPv4 NEON\n+ option neon-vfpv4     add VFPv4 NEON\n+ option nofp \t    remove ALL_FP\n+ option nosimd \t    remove ALL_SIMD\n end arch armv7ve\n \n begin arch armv7-r\n@@ -280,10 +280,10 @@ begin arch armv7-r\n  base 7R\n  isa ARMv7r\n # ARMv7-r uses VFPv3-d16\n- option fp add VFPv3 FP_DBL\n  option fp.sp add VFPv3\n+ option fp add VFPv3 FP_DBL\n  option idiv add bit_adiv\n- option nofp remove VFPv3 FP_DBL\n+ option nofp remove ALL_FP\n  option noidiv remove bit_adiv\n end arch armv7-r\n \n@@ -305,7 +305,7 @@ begin arch armv7e-m\n  option fp add VFPv4\n  option fpv5 add FPv5\n  option fp.dp add FPv5 FP_DBL\n- option nofp remove FPv5 FP_DBL\n+ option nofp remove ALL_FP\n end arch armv7e-m\n \n begin arch armv8-a\n@@ -315,9 +315,9 @@ begin arch armv8-a\n  isa ARMv8a\n  option crc add bit_crc32\n  option simd add FP_ARMv8 NEON\n- option crypto add FP_ARMv8 NEON CRYPTO\n- option nofp remove FP_ARMv8 NEON CRYPTO\n- option nocrypto remove CRYPTO\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n+ option nocrypto remove ALL_CRYPTO\n end arch armv8-a\n \n begin arch armv8.1-a\n@@ -326,21 +326,21 @@ begin arch armv8.1-a\n  base 8A\n  isa ARMv8_1a\n  option simd add FP_ARMv8 NEON\n- option crypto add FP_ARMv8 NEON CRYPTO\n- option nofp remove FP_ARMv8 NEON CRYPTO\n- option nocrypto remove CRYPTO\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n+ option nocrypto remove ALL_CRYPTO\n end arch armv8.1-a\n \n begin arch armv8.2-a\n  tune for cortex-a53\n  tune flags CO_PROC\n  base 8A\n  isa ARMv8_2a\n- option fp16 add bit_fp16 FP_ARMv8 NEON\n  option simd add FP_ARMv8 NEON\n- option crypto add FP_ARMv8 NEON CRYPTO\n- option nofp remove bit_fp16 FP_ARMv8 NEON CRYPTO\n- option nocrypto remove CRYPTO\n+ option fp16 add bit_fp16 FP_ARMv8 NEON\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n+ option nocrypto remove ALL_CRYPTO\n end arch armv8.2-a\n \n begin arch armv8-m.base\n@@ -358,7 +358,7 @@ begin arch armv8-m.main\n # fp => FPv5-sp-d16; fp.dp => FPv5-d16\n  option fp add FPv5\n  option fp.dp add FPv5 FP_DBL\n- option nofp remove FPv5\n+ option nofp remove ALL_FP\n end arch armv8-m.main\n \n begin arch iwmmxt\n@@ -668,6 +668,7 @@ end cpu ep9312\n \n \n # V5T Architecture Processors\n+# These used VFPv1 which isn't supported by GCC\n begin cpu arm10tdmi\n  tune flags LDSCHED\n  architecture armv5t\n@@ -685,45 +686,59 @@ end cpu arm1020t\n begin cpu arm9e\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm9e\n \n begin cpu arm946e-s\n  cname arm946es\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm946e-s\n \n begin cpu arm966e-s\n  cname arm966es\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm966e-s\n \n begin cpu arm968e-s\n  cname arm968es\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm968e-s\n \n begin cpu arm10e\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs fastmul\n end cpu arm10e\n \n begin cpu arm1020e\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs fastmul\n end cpu arm1020e\n \n begin cpu arm1022e\n  tune flags LDSCHED\n  architecture armv5te\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs fastmul\n end cpu arm1022e\n \n@@ -776,13 +791,17 @@ begin cpu arm926ej-s\n  cname arm926ejs\n  tune flags LDSCHED\n  architecture armv5tej\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm926ej-s\n \n begin cpu arm1026ej-s\n  cname arm1026ejs\n  tune flags LDSCHED\n  architecture armv5tej\n+ fpu vfpv2\n+ option nofp remove ALL_FP\n  costs 9e\n end cpu arm1026ej-s\n \n@@ -901,20 +920,40 @@ begin cpu generic-armv7-a\n  cname genericv7a\n  tune flags LDSCHED\n  architecture armv7-a\n+ fpu vfpv3-d16\n+ option simd add VFPv3 NEON\n+ option vfpv3 add VFPv3 FP_D32\n+ option vfpv3-d16 add VFPv3 FP_DBL\n+ option vfpv3-fp16 add VFPv3 FP_D32 bit_fp16conv\n+ option vfpv3-d16-fp16 add VFPv3 FP_DBL bit_fp16conv\n+ option vfpv4 add VFPv4 FP_D32\n+ option vfpv4-d16 add VFPv4 FP_DBL\n+ option neon add VFPv3 NEON\n+ option neon-vfpv3 add VFPv3 NEON\n+ option neon-fp16 add VFPv3 NEON bit_fp16conv\n+ option neon-vfpv4 add VFPv4 NEON\n+ option nofp remove ALL_FP\n+ option nosimd remove ALL_SIMD\n  costs cortex\n end cpu generic-armv7-a\n \n begin cpu cortex-a5\n  cname cortexa5\n  tune flags LDSCHED\n  architecture armv7-a\n+ fpu neon-fp16\n+ option nosimd remove ALL_SIMD\n+ option nofp remove ALL_FP\n  costs cortex_a5\n end cpu cortex-a5\n \n begin cpu cortex-a7\n  cname cortexa7\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nosimd remove ALL_SIMD\n+ option nofp remove ALL_FP\n  costs cortex_a7\n end cpu cortex-a7\n \n@@ -923,17 +962,17 @@ begin cpu cortex-a8\n  tune flags LDSCHED\n  architecture armv7-a\n  fpu neon-vfpv3\n- option nofp remove NEON VFPv3\n+ option nofp remove ALL_FP\n  costs cortex_a8\n end cpu cortex-a8\n \n begin cpu cortex-a9\n  cname cortexa9\n  tune flags LDSCHED\n  architecture armv7-a\n- fpu neon-vfpv3\n- option nofp remove NEON VFPv3\n- option nosimd remove NEON\n+ fpu neon-fp16\n+ option nofp remove ALL_FP\n+ option nosimd remove ALL_SIMD\n  costs cortex_a9\n end cpu cortex-a9\n \n@@ -942,20 +981,26 @@ begin cpu cortex-a12\n  tune for cortex-a17\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nofp remove ALL_FP\n  costs cortex_a12\n end cpu cortex-a12\n \n begin cpu cortex-a15\n  cname cortexa15\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nofp remove ALL_FP\n  costs cortex_a15\n end cpu cortex-a15\n \n begin cpu cortex-a17\n  cname cortexa17\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nofp remove ALL_FP\n  costs cortex_a12\n end cpu cortex-a17\n \n@@ -970,31 +1015,36 @@ begin cpu cortex-r4f\n  cname cortexr4f\n  tune flags LDSCHED\n  architecture armv7-r\n+ fpu vfpv3-d16\n  costs cortex\n end cpu cortex-r4f\n \n begin cpu cortex-r5\n  cname cortexr5\n  tune flags LDSCHED\n- architecture armv7-r\n- isa bit_adiv\n+ architecture armv7-r+idiv\n+ fpu vfpv3-d16\n+ option nofp.dp remove FP_DBL\n+ option nofp remove ALL_FP\n  costs cortex\n end cpu cortex-r5\n \n begin cpu cortex-r7\n  cname cortexr7\n  tune flags LDSCHED\n- architecture armv7-r\n- isa bit_adiv\n+ architecture armv7-r+idiv\n+ fpu vfpv3-d16\n+ option nofp remove ALL_FP\n  costs cortex\n end cpu cortex-r7\n \n begin cpu cortex-r8\n  cname cortexr8\n  tune for cortex-r7\n  tune flags LDSCHED\n- architecture armv7-r\n- isa bit_adiv\n+ architecture armv7-r+idiv\n+ fpu vfpv3-d16\n+ option nofp remove ALL_FP\n  costs cortex\n end cpu cortex-r8\n \n@@ -1003,13 +1053,18 @@ begin cpu cortex-m7\n  tune flags LDSCHED\n  architecture armv7e-m\n  isa quirk_no_volatile_ce\n+ fpu fpv5-d16\n+ option nofp.dp remove FP_DBL\n+ option nofp remove ALL_FP\n  costs cortex_m7\n end cpu cortex-m7\n \n begin cpu cortex-m4\n  cname cortexm4\n  tune flags LDSCHED\n  architecture armv7e-m\n+ fpu fpv4-sp-d16\n+ option nofp remove ALL_FP\n  costs v7m\n end cpu cortex-m4\n \n@@ -1034,6 +1089,8 @@ begin cpu cortex-a15.cortex-a7\n  tune for cortex-a7\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nofp remove ALL_FP\n  costs cortex_a15\n end cpu cortex-a15.cortex-a7\n \n@@ -1042,6 +1099,8 @@ begin cpu cortex-a17.cortex-a7\n  tune for cortex-a7\n  tune flags LDSCHED\n  architecture armv7ve\n+ fpu neon-vfpv4\n+ option nofp remove ALL_FP\n  costs cortex_a12\n end cpu cortex-a17.cortex-a7\n \n@@ -1052,6 +1111,9 @@ begin cpu cortex-a32\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n  costs cortex_a35\n end cpu cortex-a32\n \n@@ -1060,20 +1122,28 @@ begin cpu cortex-a35\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n  costs cortex_a35\n end cpu cortex-a35\n \n begin cpu cortex-a53\n  cname cortexa53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n+ option nofp remove ALL_FP\n  costs cortex_a53\n end cpu cortex-a53\n \n begin cpu cortex-a57\n  cname cortexa57\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a57\n \n@@ -1082,6 +1152,8 @@ begin cpu cortex-a72\n  tune for cortex-a57\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a72\n \n@@ -1090,19 +1162,25 @@ begin cpu cortex-a73\n  tune for cortex-a57\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n end cpu cortex-a73\n \n begin cpu exynos-m1\n  cname exynosm1\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs exynosm1\n end cpu exynos-m1\n \n begin cpu xgene1\n  tune flags LDSCHED\n  architecture armv8-a\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs xgene1\n end cpu xgene1\n \n@@ -1113,6 +1191,8 @@ begin cpu cortex-a57.cortex-a53\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a57.cortex-a53\n \n@@ -1121,6 +1201,8 @@ begin cpu cortex-a72.cortex-a53\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a72.cortex-a53\n \n@@ -1129,6 +1211,8 @@ begin cpu cortex-a73.cortex-a35\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n end cpu cortex-a73.cortex-a35\n \n@@ -1137,6 +1221,8 @@ begin cpu cortex-a73.cortex-a53\n  tune for cortex-a53\n  tune flags LDSCHED\n  architecture armv8-a+crc\n+ fpu neon-fp-armv8\n+ option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n end cpu cortex-a73.cortex-a53\n \n@@ -1153,6 +1239,8 @@ begin cpu cortex-m33\n  cname cortexm33\n  tune flags LDSCHED\n  architecture armv8-m.main+dsp\n+ fpu fpv5-sp-d16\n+ option nofp remove ALL_FP\n  costs v7m\n end cpu cortex-m33\n "}, {"sha": "4b5a0f658e648a02e27c7285ada4e61198b8169e", "filename": "gcc/config/arm/arm-isa.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-isa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm-isa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-isa.h?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -127,11 +127,25 @@ enum isa_feature\n #define ISA_ARMv8m_base ISA_ARMv6m, isa_bit_ARMv8, isa_bit_cmse, isa_bit_tdiv\n #define ISA_ARMv8m_main ISA_ARMv7m, isa_bit_ARMv8, isa_bit_cmse\n \n+/* List of all cryptographic extensions to stripout if crypto is\n+   disabled.  Currently, that's trivial, but we define it anyway for\n+   consistency with the SIMD and FP disable lists.  */\n+#define ISA_ALL_CRYPTO\tisa_bit_crypto\n+\n+/* List of all SIMD bits to strip out if SIMD is disabled.  This does\n+   strip off 32 D-registers, but does not remove support for\n+   double-precision FP.  */\n+#define ISA_ALL_SIMD\tisa_bit_fp_d32, isa_bit_neon, ISA_ALL_CRYPTO\n+\n /* List of all FPU bits to strip out if -mfpu is used to override the\n    default.  isa_bit_fp16 is deliberately missing from this list.  */\n-#define ISA_ALL_FPU\tisa_bit_VFPv2, isa_bit_VFPv3, isa_bit_VFPv4, \\\n-    isa_bit_FPv5, isa_bit_FP_ARMv8, isa_bit_neon, isa_bit_fp16conv, \\\n-    isa_bit_fp_dbl, isa_bit_fp_d32, isa_bit_crypto\n+#define ISA_ALL_FPU_INTERNAL\t\t\t\t\t\t\\\n+  isa_bit_VFPv2, isa_bit_VFPv3, isa_bit_VFPv4, isa_bit_FPv5,\t\t\\\n+  isa_bit_FP_ARMv8, isa_bit_fp16conv, isa_bit_fp_dbl, ISA_ALL_SIMD\n+\n+/* Similarly, but including fp16 and other extensions that aren't part of\n+   -mfpu support.  */\n+#define ISA_ALL_FP\tisa_bit_fp16, ISA_ALL_FPU_INTERNAL\n \n /* Useful combinations.  */\n #define ISA_VFPv2\tisa_bit_VFPv2"}, {"sha": "2cffd495fb2a5cacbac9a1e95a86f88d141c923e", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e87afe54b86c478ae63569e51e7abb67d3fe3fce/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=e87afe54b86c478ae63569e51e7abb67d3fe3fce", "patch": "@@ -3418,7 +3418,8 @@ arm_configure_build_target (struct arm_build_target *target,\n static void\n arm_option_override (void)\n {\n-  static const enum isa_feature fpu_bitlist[] = { ISA_ALL_FPU, isa_nobit };\n+  static const enum isa_feature fpu_bitlist[]\n+    = { ISA_ALL_FPU_INTERNAL, isa_nobit };\n   static const enum isa_feature quirk_bitlist[] = { ISA_ALL_QUIRKS, isa_nobit};\n   cl_target_option opts;\n "}]}