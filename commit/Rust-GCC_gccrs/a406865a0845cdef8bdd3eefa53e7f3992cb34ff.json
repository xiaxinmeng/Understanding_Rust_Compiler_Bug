{"sha": "a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQwNjg2NWEwODQ1Y2RlZjhiZGQzZWVmYTUzZTdmMzk5MmNiMzRmZg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2009-07-17T15:49:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2009-07-17T15:49:34Z"}, "message": "re PR c/40401 (ICE: verify_gimple failed)\n\n2009-07-17  Richard Guenther  <rguenther@suse.de>\n\n\tPR c/40401\n\t* tree-pass.h (pass_diagnose_omp_blocks): Declare.\n\t(pass_warn_unused_result): Likewise.\n\t(TODO_set_props): Remove.\n\t* omp-low.c (diagnose_omp_structured_block_errors): Change to\n\trun as a pass.\n\t(pass_diagnose_omp_blocks): Define.\n\t* c-decl.c (pop_file_scope): Do not finalize the CU here.\n\t(c_gimple_diagnostics_recursively): Remove.\n\t(finish_function): Do not call it.\n\t(c_write_global_declarations): Continue after errors.\n\tFinalize the CU here.\n\t* c-gimplify.c (c_genericize): Do not gimplify here.\n\t* c-common.c (c_warn_unused_result): Move ...\n\t* tree-cfg.c (do_warn_unused_result): ... here.\n\t(run_warn_unused_result): New function.\n\t(gate_warn_unused_result): New function.\n\t(pass_warn_unused_result): New pass.\n\t* c-common.h (c_warn_unused_result): Remove.\n\t* flags.h (flag_warn_unused_result): Declare.\n\t* c-opts.c (c_common_init_options): Enable flag_warn_unused_result.\n\t* opts.c (flag_warn_unused_result): Initialize to false.\n\n\t* toplev.c (compile_file): Add comment.\n\t* omp-low.c (create_omp_child_function): Do not register\n\tthe function with the frontend.\n\t(diagnose_omp_structured_block_errors): Prepare to be\n\tcalled as optimization pass.\n\t(gate_diagnose_omp_blocks): New function.\n\t(pass_diagnose_omp_blocks): New pass.\n\t* cgraph.h (cgraph_optimize): Remove.\n\t(cgraph_analyze_function): Likewise.\n\t* cgraph.c (cgraph_add_new_function): Gimplify C++ thunks.\n\t* cgraphunit.c (cgraph_lower_function): Lower nested functions\n\tbefore their parents here.\n\t(cgraph_finalize_function): Not here.\n\t(cgraph_analyze_function): Gimplify functions here.\n\t(cgraph_finalize_compilation_unit): Continue after errors.\n\tOptimize the callgraph from here.\n\t(cgraph_optimize): Make static.\n\t* langhooks.c (write_global_declarations): Finalize the CU.\n\t* gimplify.c (gimplify_asm_expr): Do not emit ASMs with errors.\n\t(gimplify_function_tree): Assert we gimplify only once.\n\tSet PROP_gimple_any property.\n\t* tree-nested.c (gimplify_all_functions): New function.\n\t(lower_nested_functions): Gimplify all nested functions.\n\t* gimple.h (diagnose_omp_structured_block_errors): Remove.\n\t* passes.c (init_optimization_passes): Add pass_warn_unused_result\n\tand pass_diagnose_omp_blocks after gimplification.  Do not\n\tset TODO_set_props on all_lowering_passes.\n\t(execute_one_pass): Do not handle TODO_set_props.\n\t* Makefile.in (cgraphunit.o): Add $(TREE_DUMP_H) dependency.\n\t(gimplify.o): Add tree-pass.h dependency.\n\t* tree-inline.c (copy_statement_list): Properly copy STATEMENT_LIST.\n\t(copy_tree_body_r): Properly handle TARGET_EXPR like SAVE_EXPR.\n\t(unsave_r): Likewise.\n\t* c-omp.c (c_finish_omp_atomic): Set DECL_CONTEXT on the\n\ttemporary variable.\n\n\tcp/\n\t* decl.c (finish_function): Do not emit unused result warnings\n\tfrom here.\n\t* cp-objcp-common.h (LANG_HOOKS_POST_GIMPLIFY_PASS): Use\n\tc_warn_unused_result_pass.\n\t* semantics.c (expand_or_defer_fn): Adjust assertion about IL status.\n\t* optimize.c (clone_body): Clone in GENERIC.\n\t(maybe_clone_body): Do not clear DECL_SAVED_TREE.\n\t* decl2.c (cp_write_global_declarations): Fix body test.\n\tDo not call cgraph_optimize.\n\t* Make-lang.in (optimize.o): Add tree-iterator.h dependency.\n\t* method.c (use_thunk): Register thunk with\n\tcgraph_finalize_function.\n\t* error.c (function_category): Guard access of DECL_LANG_SPECIFIC.\n\n\tjava/\n\t* java-gimplify.c (java_genericize): Do not gimplify here.\n\tBut replace all local references.\n\t(java_gimplify_expr): Do not replace local references here.\n\t(java_gimplify_modify_expr): Likewise.\n\t* jcf-parse.c (java_parse_file): Do not finalize the CU or\n\toptimize the cgraph here.\n\t* decl.c (java_replace_reference): Make static.\n\t(java_replace_references): New function.\n\t(end_java_method): Clear base_decl_map.\n\t* java-tree.h (java_replace_references): Declare.\n\t(java_replace_reference): Remove.\n\n\tada/\n\t* utils.c (end_subprog_body): Revert to pre-tuples state.  Remove\n\tunused parameter.\n\t(gnat_gimplify_function): Do not gimplify here.\n\tFold into its only caller and remove.\n\t(gnat_builtin_function): Adjust for end_subprog_body signature change.\n\t(gnat_write_global_declarations): Also finalize the CU.\n\t* misc.c (gnat_parse_file): Do not finalize the CU here.\n\t* trans.c (gigi): Revert to pre-tuples state.\n\t(Subprogram_Body_to_gnu): Adjust for end_subprog_body signature\n\tchange.\n\t* gigi.h (end_subprog_body): Remove unused parameter.\n\n\tfortran/\n\t* f95-lang.c (gfc_be_parse_file): Do not finalize the CU here.\n\t* trans-decl.c (gfc_gimplify_function): Remove.\n\t(build_entry_thunks): Do not gimplify here.\n\t(create_main_function): Likewise.\n\t(gfc_generate_function_code): Likewise.\n\n\t* g++.dg/rtti/crash4.C: New testcase.\n\t* g++.dg/torture/20090706-1.C: Likewise.\n\t* gcc.dg/redecl-17.c: Likewise.\n\n\t* gfortran.dg/missing_optional_dummy_5.f90: Adjust pattern.\n\t* gcc.dg/declspec-9.c: Expect extra error.\n\t* gcc.dg/declspec-10.c: Likewise.\n\t* gcc.dg/declspec-11.c: Likewise.\n\t* gcc.dg/redecl-10.c: Expect extra warnings.\n\t* gcc.target/i386/pr39082-1.c: Adjust diagnostic location.\n\t* gcc.target/i386/pr39545-1.c: Likewise.\n\t* g++.dg/ext/asm3.C: Expect more errors.\n\t* g++.dg/gomp/block-1.C: Likewise.\n\t* g++.dg/gomp/block-2.C: Likewise.\n\t* g++.dg/gomp/block-3.C: Likewise.\n\t* g++.dg/gomp/block-5.C: Likewise.\n\t* g++.old-deja/g++.jason/report.C: Expect extra warnings.\n\t* g++.dg/warn/unused-result1.C: XFAIL.\n\nFrom-SVN: r149750", "tree": {"sha": "9b2cab79aaf97c242bb77cbc530d76b88b5a1734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b2cab79aaf97c242bb77cbc530d76b88b5a1734"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7d5b5b9c426b3b2f64c49d8a0eac9ab9d3b0c57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7d5b5b9c426b3b2f64c49d8a0eac9ab9d3b0c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7d5b5b9c426b3b2f64c49d8a0eac9ab9d3b0c57"}], "stats": {"total": 842, "additions": 542, "deletions": 300}, "files": [{"sha": "046c1efe67952007b3875d5b418302adf092b45a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,63 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* tree-pass.h (pass_diagnose_omp_blocks): Declare.\n+\t(pass_warn_unused_result): Likewise.\n+\t(TODO_set_props): Remove.\n+\t* omp-low.c (diagnose_omp_structured_block_errors): Change to\n+\trun as a pass.\n+\t(pass_diagnose_omp_blocks): Define.\n+\t* c-decl.c (pop_file_scope): Do not finalize the CU here.\n+\t(c_gimple_diagnostics_recursively): Remove.\n+\t(finish_function): Do not call it.\n+\t(c_write_global_declarations): Continue after errors.\n+\tFinalize the CU here.\n+\t* c-gimplify.c (c_genericize): Do not gimplify here.\n+\t* c-common.c (c_warn_unused_result): Move ...\n+\t* tree-cfg.c (do_warn_unused_result): ... here.\n+\t(run_warn_unused_result): New function.\n+\t(gate_warn_unused_result): New function.\n+\t(pass_warn_unused_result): New pass.\n+\t* c-common.h (c_warn_unused_result): Remove.\n+\t* flags.h (flag_warn_unused_result): Declare.\n+\t* c-opts.c (c_common_init_options): Enable flag_warn_unused_result.\n+\t* opts.c (flag_warn_unused_result): Initialize to false.\n+\t* toplev.c (compile_file): Add comment.\n+\t* omp-low.c (create_omp_child_function): Do not register\n+\tthe function with the frontend.\n+\t(diagnose_omp_structured_block_errors): Prepare to be\n+\tcalled as optimization pass.\n+\t(gate_diagnose_omp_blocks): New function.\n+\t(pass_diagnose_omp_blocks): New pass.\n+\t* cgraph.h (cgraph_optimize): Remove.\n+\t(cgraph_analyze_function): Likewise.\n+\t* cgraph.c (cgraph_add_new_function): Gimplify C++ thunks.\n+\t* cgraphunit.c (cgraph_lower_function): Lower nested functions\n+\tbefore their parents here.\n+\t(cgraph_finalize_function): Not here.\n+\t(cgraph_analyze_function): Gimplify functions here.\n+\t(cgraph_finalize_compilation_unit): Continue after errors.\n+\tOptimize the callgraph from here.\n+\t(cgraph_optimize): Make static.\n+\t* langhooks.c (write_global_declarations): Finalize the CU.\n+\t* gimplify.c (gimplify_asm_expr): Do not emit ASMs with errors.\n+\t(gimplify_function_tree): Assert we gimplify only once.\n+\tSet PROP_gimple_any property.\n+\t* tree-nested.c (gimplify_all_functions): New function.\n+\t(lower_nested_functions): Gimplify all nested functions.\n+\t* gimple.h (diagnose_omp_structured_block_errors): Remove.\n+\t* passes.c (init_optimization_passes): Add pass_warn_unused_result\n+\tand pass_diagnose_omp_blocks after gimplification.  Do not\n+\tset TODO_set_props on all_lowering_passes.\n+\t(execute_one_pass): Do not handle TODO_set_props.\n+\t* Makefile.in (cgraphunit.o): Add $(TREE_DUMP_H) dependency.\n+\t(gimplify.o): Add tree-pass.h dependency.\n+\t* tree-inline.c (copy_statement_list): Properly copy STATEMENT_LIST.\n+\t(copy_tree_body_r): Properly handle TARGET_EXPR like SAVE_EXPR.\n+\t(unsave_r): Likewise.\n+\t* c-omp.c (c_finish_omp_atomic): Set DECL_CONTEXT on the\n+\ttemporary variable.\n+\n 2009-07-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/service.texi (Service): Restore previously removed link,"}, {"sha": "efdeab69d3e04f886c30a03d6c33193f5c9b4c43", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -2394,7 +2394,7 @@ gimplify.o : gimplify.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GIMPLE_H) \\\n    $(LANGHOOKS_DEF_H) $(TREE_FLOW_H) $(CGRAPH_H) $(TIMEVAR_H) $(TM_H) \\\n    coretypes.h $(EXCEPT_H) $(FLAGS_H) $(RTL_H) $(FUNCTION_H) $(EXPR_H) output.h \\\n    $(GGC_H) gt-gimplify.h $(HASHTAB_H) $(TARGET_H) $(TOPLEV_H) $(OPTABS_H) \\\n-   $(REAL_H) $(SPLAY_TREE_H) vec.h tree-iterator.h\n+   $(REAL_H) $(SPLAY_TREE_H) vec.h tree-iterator.h tree-pass.h\n gimple-iterator.o : gimple-iterator.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\\n    $(TREE_H) $(GIMPLE_H) $(TREE_FLOW_H) value-prof.h\n gimple-low.o : gimple-low.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) \\\n@@ -2683,7 +2683,7 @@ cgraphunit.o : cgraphunit.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TARGET_H) $(CGRAPH_H) intl.h pointer-set.h $(FUNCTION_H) $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H) debug.h $(DIAGNOSTIC_H) \\\n    $(FIBHEAP_H) output.h $(PARAMS_H) $(RTL_H) $(TIMEVAR_H) $(IPA_PROP_H) \\\n-   gt-cgraphunit.h tree-iterator.h $(COVERAGE_H)\n+   gt-cgraphunit.h tree-iterator.h $(COVERAGE_H) $(TREE_DUMP_H)\n cgraphbuild.o : cgraphbuild.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n    $(TREE_H) langhooks.h $(CGRAPH_H) intl.h pointer-set.h $(GIMPLE_H) \\\n    $(TREE_FLOW_H) $(TREE_PASS_H)"}, {"sha": "55de47c1300797bf46fadb0a968c77bc20dbec4e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,18 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* utils.c (end_subprog_body): Revert to pre-tuples state.  Remove\n+\tunused parameter.\n+\t(gnat_gimplify_function): Do not gimplify here.\n+\tFold into its only caller and remove.\n+\t(gnat_builtin_function): Adjust for end_subprog_body signature change.\n+\t(gnat_write_global_declarations): Also finalize the CU.\n+\t* misc.c (gnat_parse_file): Do not finalize the CU here.\n+\t* trans.c (gigi): Revert to pre-tuples state.\n+\t(Subprogram_Body_to_gnu): Adjust for end_subprog_body signature\n+\tchange.\n+\t* gigi.h (end_subprog_body): Remove unused parameter.\n+\n 2009-07-15  Arnaud Charlet  <charlet@adacore.com>\n \n \t* gcc-interface/Make-lang.in: Update dependencies"}, {"sha": "05a46869f6eb1b69c6c14b2d2c6903f95c1cd0d7", "filename": "gcc/ada/gcc-interface/gigi.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Fgigi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fgigi.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -678,9 +678,8 @@ extern tree create_label_decl (tree label_name);\n extern void begin_subprog_body (tree subprog_decl);\n \n /* Finish the definition of the current subprogram BODY and compile it all the\n-   way to assembler language output.  ELAB_P tells if this is called for an\n-   elaboration routine, to be entirely discarded if empty.  */\n-extern void end_subprog_body (tree body, bool elab_p);\n+   way to assembler language output.  */\n+extern void end_subprog_body (tree body);\n \n /* Build a template of type TEMPLATE_TYPE from the array bounds of ARRAY_TYPE.\n    EXPR is an expression that we can use to locate any PLACEHOLDER_EXPRs."}, {"sha": "4b68227e3cd2484e2c369dcba9352113558fbe1a", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -176,9 +176,6 @@ gnat_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \n   /* Call the front end.  */\n   _ada_gnat1drv ();\n-\n-  /* We always have a single compilation unit in Ada.  */\n-  cgraph_finalize_compilation_unit ();\n }\n \n /* Decode all the language specific options that cannot be decoded by GCC."}, {"sha": "12599675d83e6496d86f087e352f1092de108e9a", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -627,6 +627,7 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n   for (info = elab_info_list; info; info = info->next)\n     {\n       tree gnu_body = DECL_SAVED_TREE (info->elab_proc);\n+      tree gnu_stmts;\n \n       /* Unshare SAVE_EXPRs between subprograms.  These are not unshared by\n \t the gimplifier for obvious reasons, but it turns out that we need to\n@@ -638,14 +639,24 @@ gigi (Node_Id gnat_root, int max_gnat_node, int number_name,\n \t an upstream bug for which we would not change the outcome.  */\n       walk_tree_without_duplicates (&gnu_body, unshare_save_expr, NULL);\n \n-      /* Process the function as others, but for indicating this is an\n-\t elab proc, to be discarded if empty, then propagate the status\n-\t up to the GNAT tree node.  */\n-      begin_subprog_body (info->elab_proc);\n-      end_subprog_body (gnu_body, true);\n \n-      if (empty_body_p (gimple_body (info->elab_proc)))\n-\tSet_Has_No_Elaboration_Code (info->gnat_node, 1);\n+      /* We should have a BIND_EXPR, but it may or may not have any statements\n+\t in it.  If it doesn't have any, we have nothing to do.  */\n+      gnu_stmts = gnu_body;\n+      if (TREE_CODE (gnu_stmts) == BIND_EXPR)\n+\tgnu_stmts = BIND_EXPR_BODY (gnu_stmts);\n+\n+      /* If there are no statements, there is no elaboration code.  */\n+      if (!gnu_stmts || !STATEMENT_LIST_HEAD (gnu_stmts))\n+\t{\n+\t  Set_Has_No_Elaboration_Code (info->gnat_node, 1);\n+\t}\n+      else\n+\t{\n+\t  /* Process the function as others.  */\n+\t  begin_subprog_body (info->elab_proc);\n+\t  end_subprog_body (gnu_body);\n+\t}\n     }\n \n   /* We cannot track the location of errors past this point.  */\n@@ -2326,7 +2337,7 @@ Subprogram_Body_to_gnu (Node_Id gnat_node)\n       : Sloc (gnat_node)),\n      &DECL_STRUCT_FUNCTION (gnu_subprog_decl)->function_end_locus);\n \n-  end_subprog_body (gnu_result, false);\n+  end_subprog_body (gnu_result);\n \n   /* Finally annotate the parameters and disconnect the trees for parameters\n      that we have turned into variables since they are now unusable.  */"}, {"sha": "59d9477a44d22b187bd14aeb4da1a6b94bb7173f", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 8, "deletions": 35, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -203,7 +203,6 @@ static GTY((deletable)) tree free_block_chain;\n static tree merge_sizes (tree, tree, tree, bool, bool);\n static tree compute_related_constant (tree, tree);\n static tree split_plus (tree, tree *);\n-static void gnat_gimplify_function (tree);\n static tree float_type_for_precision (int, enum machine_mode);\n static tree convert_to_fat_pointer (tree, tree);\n static tree convert_to_thin_pointer (tree, tree);\n@@ -2070,11 +2069,10 @@ gnat_genericize (tree fndecl)\n }\n \n /* Finish the definition of the current subprogram BODY and compile it all the\n-   way to assembler language output.  ELAB_P tells if this is called for an\n-   elaboration routine, to be entirely discarded if empty.  */\n+   way to assembler language output.  */\n \n void\n-end_subprog_body (tree body, bool elab_p)\n+end_subprog_body (tree body)\n {\n   tree fndecl = current_function_decl;\n \n@@ -2107,44 +2105,19 @@ end_subprog_body (tree body, bool elab_p)\n   /* Perform the required pre-gimplification transformations on the tree.  */\n   gnat_genericize (fndecl);\n \n+  /* Dump functions before gimplification.  */\n+  dump_function (TDI_original, fndecl);\n+\n   /* We do different things for nested and non-nested functions.\n      ??? This should be in cgraph.  */\n   if (!DECL_CONTEXT (fndecl))\n-    {\n-      gnat_gimplify_function (fndecl);\n-\n-      /* If this is an empty elaboration proc, just discard the node.\n-\t Otherwise, compile further.  */\n-      if (elab_p && empty_body_p (gimple_body (fndecl)))\n-\tcgraph_remove_node (cgraph_node (fndecl));\n-      else\n-\tcgraph_finalize_function (fndecl, false);\n-    }\n+    cgraph_finalize_function (fndecl, false);\n   else\n     /* Register this function with cgraph just far enough to get it\n        added to our parent's nested function list.  */\n     (void) cgraph_node (fndecl);\n }\n \n-/* Convert FNDECL's code to GIMPLE and handle any nested functions.  */\n-\n-static void\n-gnat_gimplify_function (tree fndecl)\n-{\n-  struct cgraph_node *cgn;\n-\n-  dump_function (TDI_original, fndecl);\n-  gimplify_function_tree (fndecl);\n-  dump_function (TDI_generic, fndecl);\n-\n-  /* Convert all nested functions to GIMPLE now.  We do things in this order\n-     so that items like VLA sizes are expanded properly in the context of the\n-     correct function.  */\n-  cgn = cgraph_node (fndecl);\n-  for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)\n-    gnat_gimplify_function (cgn->decl);\n-}\n-\n tree\n gnat_builtin_function (tree decl)\n {\n@@ -3520,7 +3493,7 @@ build_function_stub (tree gnu_subprog, Entity_Id gnat_subprog)\n   gnat_poplevel ();\n \n   allocate_struct_function (gnu_stub_decl, false);\n-  end_subprog_body (gnu_body, false);\n+  end_subprog_body (gnu_body);\n }\n \f\n /* Build a type to be used to represent an aliased object whose nominal\n@@ -4693,7 +4666,7 @@ gnat_write_global_declarations (void)\n {\n   /* Proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n-  cgraph_optimize ();\n+  cgraph_finalize_compilation_unit ();\n \n   /* Emit debug info for all global declarations.  */\n   emit_debug_global_declarations (VEC_address (tree, global_decls),"}, {"sha": "328e0fdae8e8d6c3e4a4eef19fc24a77188ab9b8", "filename": "gcc/c-common.c", "status": "modified", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -8226,69 +8226,6 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n   return ret;\n }\n \n-/* Walk a gimplified function and warn for functions whose return value is\n-   ignored and attribute((warn_unused_result)) is set.  This is done before\n-   inlining, so we don't have to worry about that.  */\n-\n-void\n-c_warn_unused_result (gimple_seq seq)\n-{\n-  tree fdecl, ftype;\n-  gimple_stmt_iterator i;\n-\n-  for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n-    {\n-      gimple g = gsi_stmt (i);\n-\n-      switch (gimple_code (g))\n-\t{\n-\tcase GIMPLE_BIND:\n-\t  c_warn_unused_result (gimple_bind_body (g));\n-\t  break;\n-\tcase GIMPLE_TRY:\n-\t  c_warn_unused_result (gimple_try_eval (g));\n-\t  c_warn_unused_result (gimple_try_cleanup (g));\n-\t  break;\n-\tcase GIMPLE_CATCH:\n-\t  c_warn_unused_result (gimple_catch_handler (g));\n-\t  break;\n-\tcase GIMPLE_EH_FILTER:\n-\t  c_warn_unused_result (gimple_eh_filter_failure (g));\n-\t  break;\n-\n-\tcase GIMPLE_CALL:\n-\t  if (gimple_call_lhs (g))\n-\t    break;\n-\n-\t  /* This is a naked call, as opposed to a GIMPLE_CALL with an\n-\t     LHS.  All calls whose value is ignored should be\n-\t     represented like this.  Look for the attribute.  */\n-\t  fdecl = gimple_call_fndecl (g);\n-\t  ftype = TREE_TYPE (TREE_TYPE (gimple_call_fn (g)));\n-\n-\t  if (lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (ftype)))\n-\t    {\n-\t      location_t loc = gimple_location (g);\n-\n-\t      if (fdecl)\n-\t\twarning_at (loc, OPT_Wunused_result, \n-\t\t\t    \"ignoring return value of %qD, \"\n-\t\t\t    \"declared with attribute warn_unused_result\",\n-\t\t\t    fdecl);\n-\t      else\n-\t\twarning_at (loc, OPT_Wunused_result,\n-\t\t\t    \"ignoring return value of function \"\n-\t\t\t    \"declared with attribute warn_unused_result\");\n-\t    }\n-\t  break;\n-\n-\tdefault:\n-\t  /* Not a container, not a call, or a call whose value is used.  */\n-\t  break;\n-\t}\n-    }\n-}\n-\n /* Convert a character from the host to the target execution character\n    set.  cpplib handles this, mostly.  */\n "}, {"sha": "d372e70631e6d74756252e95ecd77d9b88956ca1", "filename": "gcc/c-common.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -982,8 +982,6 @@ extern void dump_time_statistics (void);\n \n extern bool c_dump_tree (void *, tree);\n \n-extern void c_warn_unused_result (gimple_seq);\n-\n extern void verify_sequence_points (tree);\n \n extern tree fold_offsetof (tree, tree);"}, {"sha": "b594767d04c48835f7570efc48d1c4f390c49f66", "filename": "gcc/c-decl.c", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1327,7 +1327,6 @@ pop_file_scope (void)\n   file_scope = 0;\n \n   maybe_apply_pending_pragma_weaks ();\n-  cgraph_finalize_compilation_unit ();\n }\n \f\n /* Adjust the bindings for the start of a statement expression.  */\n@@ -7870,27 +7869,6 @@ store_parm_decls (void)\n   cfun->dont_save_pending_sizes_p = 1;\n }\n \f\n-/* Emit diagnostics that require gimple input for detection.  Operate on\n-   FNDECL and all its nested functions.  */\n-\n-static void\n-c_gimple_diagnostics_recursively (tree fndecl)\n-{\n-  struct cgraph_node *cgn;\n-  gimple_seq body = gimple_body (fndecl);\n-\n-  /* Handle attribute((warn_unused_result)).  Relies on gimple input.  */\n-  c_warn_unused_result (body);\n-\n-  /* Notice when OpenMP structured block constraints are violated.  */\n-  if (flag_openmp)\n-    diagnose_omp_structured_block_errors (fndecl);\n-\n-  /* Finalize all nested functions now.  */\n-  cgn = cgraph_node (fndecl);\n-  for (cgn = cgn->nested; cgn ; cgn = cgn->next_nested)\n-    c_gimple_diagnostics_recursively (cgn->decl);\n-}\n \n /* Finish up a function declaration and compile that function\n    all the way to assembler language output.  The free the storage\n@@ -7983,7 +7961,6 @@ finish_function (void)\n       if (!decl_function_context (fndecl))\n \t{\n \t  c_genericize (fndecl);\n-\t  c_gimple_diagnostics_recursively (fndecl);\n \n \t  /* ??? Objc emits functions after finalizing the compilation unit.\n \t     This should be cleaned up later and this conditional removed.  */\n@@ -9382,9 +9359,9 @@ c_write_global_declarations (void)\n   if (pch_file)\n     return;\n \n-  /* Don't waste time on further processing if -fsyntax-only or we've\n-     encountered errors.  */\n-  if (flag_syntax_only || errorcount || sorrycount)\n+  /* Don't waste time on further processing if -fsyntax-only.\n+     Continue for warning and errors issued during lowering though.  */\n+  if (flag_syntax_only)\n     return;\n \n   /* Close the external scope.  */\n@@ -9412,7 +9389,7 @@ c_write_global_declarations (void)\n \n   /* We're done parsing; proceed to optimize and emit assembly.\n      FIXME: shouldn't be the front end's responsibility to call this.  */\n-  cgraph_optimize ();\n+  cgraph_finalize_compilation_unit ();\n \n   /* After cgraph has had a chance to emit everything that's going to\n      be emitted, output debug information for globals.  */"}, {"sha": "e50050c2324cff5e7a71792e95a49b4c2b804add", "filename": "gcc/c-gimplify.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-gimplify.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -103,14 +103,7 @@ c_genericize (tree fndecl)\n       dump_end (TDI_original, dump_orig);\n     }\n \n-  /* Go ahead and gimplify for now.  */\n-  gimplify_function_tree (fndecl);\n-\n-  dump_function (TDI_generic, fndecl);\n-\n-  /* Genericize all nested functions now.  We do things in this order so\n-     that items like VLA sizes are expanded properly in the context of\n-     the correct function.  */\n+  /* Dump all nested functions now.  */\n   cgn = cgraph_node (fndecl);\n   for (cgn = cgn->nested; cgn ; cgn = cgn->next_nested)\n     c_genericize (cgn->decl);"}, {"sha": "6445e5d42eea0ab4b13833e556f9b2ce07b84e51", "filename": "gcc/c-omp.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-omp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-omp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-omp.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -142,6 +142,7 @@ c_finish_omp_atomic (location_t loc, enum tree_code code, tree lhs, tree rhs)\n       /* Make sure LHS is simple enough so that goa_lhs_expr_p can recognize\n \t it even after unsharing function body.  */\n       tree var = create_tmp_var_raw (TREE_TYPE (addr), NULL);\n+      DECL_CONTEXT (var) = current_function_decl;\n       addr = build4 (TARGET_EXPR, TREE_TYPE (addr), var, addr, NULL, NULL);\n     }\n   lhs = build_indirect_ref (loc, addr, NULL);"}, {"sha": "3b9b34bdc3f7e88ecce82cbeb9a6a889a8ae32a9", "filename": "gcc/c-opts.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -232,6 +232,7 @@ c_common_init_options (unsigned int argc, const char **argv)\n   flag_exceptions = c_dialect_cxx ();\n   warn_pointer_arith = c_dialect_cxx ();\n   warn_write_strings = c_dialect_cxx();\n+  flag_warn_unused_result = true;\n \n   /* By default, C99-like requirements for complex multiply and divide.  */\n   flag_complex_method = 2;"}, {"sha": "3d0fee5ba941875bb607c9c70f564967d5e67d4e", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1836,6 +1836,9 @@ cgraph_add_new_function (tree fndecl, bool lowered)\n \t    push_cfun (DECL_STRUCT_FUNCTION (fndecl));\n \t    current_function_decl = fndecl;\n \t    gimple_register_cfg_hooks ();\n+\t    /* C++ Thunks are emitted late via this function, gimplify them.  */\n+\t    if (!gimple_body (fndecl))\n+\t      gimplify_function_tree (fndecl);\n \t    tree_lowering_passes (fndecl);\n \t    bitmap_obstack_initialize (NULL);\n \t    if (!gimple_in_ssa_p (DECL_STRUCT_FUNCTION (fndecl)))"}, {"sha": "3e9a6d4201c6f2af2ee9d9320ac3b512c38b70bb", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -426,7 +426,6 @@ struct cgraph_node * cgraph_create_virtual_clone (struct cgraph_node *old_node,\n void cgraph_finalize_function (tree, bool);\n void cgraph_mark_if_needed (tree);\n void cgraph_finalize_compilation_unit (void);\n-void cgraph_optimize (void);\n void cgraph_mark_needed_node (struct cgraph_node *);\n void cgraph_mark_address_taken_node (struct cgraph_node *);\n void cgraph_mark_reachable_node (struct cgraph_node *);\n@@ -442,7 +441,6 @@ struct cgraph_node *cgraph_function_versioning (struct cgraph_node *,\n \t\t\t\t\t\tVEC(ipa_replace_map_p,gc)*,\n \t\t\t\t\t\tbitmap);\n void tree_function_versioning (tree, tree, VEC (ipa_replace_map_p,gc)*, bool, bitmap);\n-void cgraph_analyze_function (struct cgraph_node *);\n struct cgraph_node *save_inline_function_body (struct cgraph_node *);\n void record_references_in_initializer (tree);\n bool cgraph_process_new_functions (void);"}, {"sha": "d329dc1c0a2a4f4ae5c5068e7275693429a6e5a2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -132,13 +132,16 @@ along with GCC; see the file COPYING3.  If not see\n #include \"gimple.h\"\n #include \"tree-iterator.h\"\n #include \"tree-pass.h\"\n+#include \"tree-dump.h\"\n #include \"output.h\"\n #include \"coverage.h\"\n \n static void cgraph_expand_all_functions (void);\n static void cgraph_mark_functions_to_output (void);\n static void cgraph_expand_function (struct cgraph_node *);\n static void cgraph_output_pending_asms (void);\n+static void cgraph_optimize (void);\n+static void cgraph_analyze_function (struct cgraph_node *);\n \n static FILE *cgraph_dump_file;\n \n@@ -490,6 +493,11 @@ cgraph_lower_function (struct cgraph_node *node)\n {\n   if (node->lowered)\n     return;\n+\n+  if (node->nested)\n+    lower_nested_functions (node->decl);\n+  gcc_assert (!node->nested);\n+\n   tree_lowering_passes (node->decl);\n   node->lowered = true;\n }\n@@ -513,9 +521,6 @@ cgraph_finalize_function (tree decl, bool nested)\n   node->lowered = DECL_STRUCT_FUNCTION (decl)->cfg != NULL;\n   node->finalized_by_frontend = true;\n   record_cdtor_fn (node->decl);\n-  if (node->nested)\n-    lower_nested_functions (decl);\n-  gcc_assert (!node->nested);\n \n   if (decide_is_function_needed (node, decl))\n     cgraph_mark_needed_node (node);\n@@ -789,18 +794,28 @@ cgraph_output_pending_asms (void)\n }\n \n /* Analyze the function scheduled to be output.  */\n-void\n+static void\n cgraph_analyze_function (struct cgraph_node *node)\n {\n+  tree save = current_function_decl;\n   tree decl = node->decl;\n \n   current_function_decl = decl;\n   push_cfun (DECL_STRUCT_FUNCTION (decl));\n+\n+  /* Make sure to gimplify bodies only once.  During analyzing a\n+     function we lower it, which will require gimplified nested\n+     functions, so we can end up here with an already gimplified\n+     body.  */\n+  if (!gimple_body (decl))\n+    gimplify_function_tree (decl);\n+  dump_function (TDI_generic, decl);\n+\n   cgraph_lower_function (node);\n   node->analyzed = true;\n \n   pop_cfun ();\n-  current_function_decl = NULL;\n+  current_function_decl = save;\n }\n \n /* Look for externally_visible and used attributes and mark cgraph nodes\n@@ -935,8 +950,6 @@ cgraph_analyze_functions (void)\n \t}\n \n       gcc_assert (!node->analyzed && node->reachable);\n-      gcc_assert (gimple_body (decl));\n-\n       cgraph_analyze_function (node);\n \n       for (edge = node->callees; edge; edge = edge->next_callee)\n@@ -1010,8 +1023,8 @@ cgraph_analyze_functions (void)\n void\n cgraph_finalize_compilation_unit (void)\n {\n-  if (errorcount || sorrycount)\n-    return;\n+  /* Do not skip analyzing the functions if there were errors, we\n+     miss diagnostics for following functions otherwise.  */\n \n   finalize_size_functions ();\n   finish_aliases_1 ();\n@@ -1025,6 +1038,8 @@ cgraph_finalize_compilation_unit (void)\n   timevar_push (TV_CGRAPH);\n   cgraph_analyze_functions ();\n   timevar_pop (TV_CGRAPH);\n+\n+  cgraph_optimize ();\n }\n \n \n@@ -1311,7 +1326,7 @@ ipa_passes (void)\n \n /* Perform simple optimizations based on callgraph.  */\n \n-void\n+static void\n cgraph_optimize (void)\n {\n   if (errorcount || sorrycount)"}, {"sha": "520ae54629fe8fac96b420c7e9c0aa7ed09491e4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,20 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* decl.c (finish_function): Do not emit unused result warnings\n+\tfrom here.\n+\t* cp-objcp-common.h (LANG_HOOKS_POST_GIMPLIFY_PASS): Use\n+\tc_warn_unused_result_pass.\n+\t* semantics.c (expand_or_defer_fn): Adjust assertion about IL status.\n+\t* optimize.c (clone_body): Clone in GENERIC.\n+\t(maybe_clone_body): Do not clear DECL_SAVED_TREE.\n+\t* decl2.c (cp_write_global_declarations): Fix body test.\n+\tDo not call cgraph_optimize.\n+\t* Make-lang.in (optimize.o): Add tree-iterator.h dependency.\n+\t* method.c (use_thunk): Register thunk with\n+\tcgraph_finalize_function.\n+\t* error.c (function_category): Guard access of DECL_LANG_SPECIFIC.\n+\n 2009-07-17  Richard Guenther  <rguenther@suse.de>\n \n \t* init.c (build_vec_delete_1): Do not set DECL_REGISTER on the"}, {"sha": "c7d1a449a901487499772cda5cac8e9885d4262c", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -303,7 +303,7 @@ cp/semantics.o: cp/semantics.c $(CXX_TREE_H) $(TM_H) except.h toplev.h \\\n cp/dump.o: cp/dump.c $(CXX_TREE_H) $(TM_H) $(TREE_DUMP_H)\n cp/optimize.o: cp/optimize.c $(CXX_TREE_H) $(TM_H) rtl.h $(INTEGRATE_H) \\\n   insn-config.h input.h $(PARAMS_H) debug.h $(TREE_INLINE_H) $(GIMPLE_H) \\\n-  $(TARGET_H)\n+  $(TARGET_H) tree-iterator.h\n cp/mangle.o: cp/mangle.c $(CXX_TREE_H) $(TM_H) toplev.h $(REAL_H) \\\n   gt-cp-mangle.h $(TARGET_H) $(TM_P_H)\n cp/parser.o: cp/parser.c $(CXX_TREE_H) $(TM_H) $(DIAGNOSTIC_H) gt-cp-parser.h \\"}, {"sha": "251d0a3a5d2b92cc9b61214af1fb218028d13449", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -12434,9 +12434,6 @@ finish_function (int flags)\n       f->x_return_value = NULL;\n       f->bindings = NULL;\n       f->extern_decl_map = NULL;\n-\n-      /* Handle attribute((warn_unused_result)).  Relies on gimple input.  */\n-      c_warn_unused_result (gimple_body (fndecl));\n     }\n   /* Clear out the bits we don't need.  */\n   local_names = NULL;"}, {"sha": "df79e9c4e1c0d3ed6be40b6a0445f5d0e00e7b3f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -3518,7 +3518,7 @@ cp_write_global_declarations (void)\n \t      reconsider = true;\n \t    }\n \n-\t  if (!gimple_body (decl))\n+\t  if (!DECL_SAVED_TREE (decl))\n \t    continue;\n \n \t  /* We lie to the back end, pretending that some functions\n@@ -3640,7 +3640,6 @@ cp_write_global_declarations (void)\n   pop_lang_context ();\n \n   cgraph_finalize_compilation_unit ();\n-  cgraph_optimize ();\n \n   /* Now, issue warnings about static, but not defined, functions,\n      etc., and emit debugging information.  */"}, {"sha": "c5310ff6ca05071a8819ab28606c39719c8a7728", "filename": "gcc/cp/error.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -2647,7 +2647,11 @@ cp_print_error_function (diagnostic_context *context,\n static const char *\n function_category (tree fn)\n {\n-  if (DECL_FUNCTION_MEMBER_P (fn))\n+  /* We can get called from the middle-end for diagnostics of function\n+     clones.  Make sure we have language specific information before\n+     dereferencing it.  */\n+  if (DECL_LANG_SPECIFIC (STRIP_TEMPLATE (fn))\n+      && DECL_FUNCTION_MEMBER_P (fn))\n     {\n       if (DECL_STATIC_FUNCTION_P (fn))\n \treturn _(\"In static member function %qs\");"}, {"sha": "c9d6cebb817811166fddf4f4a9fbd1b59a8df170", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -41,6 +41,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic.h\"\n #include \"tree-dump.h\"\n #include \"gimple.h\"\n+#include \"tree-iterator.h\"\n \n /* Prototypes.  */\n \n@@ -81,10 +82,7 @@ static void\n clone_body (tree clone, tree fn, void *arg_map)\n {\n   copy_body_data id;\n-  gimple_seq new_body;\n-\n-  /* FN must already be in GIMPLE form.  */\n-  gcc_assert (gimple_body (fn));\n+  tree stmts;\n \n   /* Clone the body, as if we were making an inline call.  But, remap\n      the parameters in the callee to the parameters of caller.  */\n@@ -103,9 +101,9 @@ clone_body (tree clone, tree fn, void *arg_map)\n   /* We're not inside any EH region.  */\n   id.eh_region = -1;\n \n-  /* Actually copy the body.  */\n-  new_body = remap_gimple_seq (gimple_body (fn), &id);\n-  gimple_set_body (clone, new_body);\n+  stmts = DECL_SAVED_TREE (fn);\n+  walk_tree (&stmts, copy_tree_body_r, &id, NULL);\n+  append_to_statement_list_force (stmts, &DECL_SAVED_TREE (clone));\n }\n \n /* FN is a function that has a complete body.  Clone the body as\n@@ -208,7 +206,8 @@ maybe_clone_body (tree fn)\n \t\t}\n \t      /* Otherwise, map the VTT parameter to `NULL'.  */\n \t      else\n-\t\t*pointer_map_insert (decl_map, parm) = null_pointer_node;\n+\t\t*pointer_map_insert (decl_map, parm)\n+\t\t   = fold_convert (TREE_TYPE (parm), null_pointer_node);\n \t    }\n \t  /* Map other parameters to their equivalents in the cloned\n \t     function.  */\n@@ -237,7 +236,6 @@ maybe_clone_body (tree fn)\n       /* Now, expand this function into RTL, if appropriate.  */\n       finish_function (0);\n       BLOCK_ABSTRACT_ORIGIN (DECL_INITIAL (clone)) = DECL_INITIAL (fn);\n-      DECL_SAVED_TREE (clone) = NULL;\n       expand_or_defer_fn (clone);\n       first = false;\n     }"}, {"sha": "23db832143179853b15c2ead55ffc4bd6f984e53", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -3230,7 +3230,7 @@ expand_or_defer_fn (tree fn)\n       return;\n     }\n \n-  gcc_assert (gimple_body (fn));\n+  gcc_assert (DECL_SAVED_TREE (fn));\n \n   /* If this is a constructor or destructor body, we have to clone\n      it.  */"}, {"sha": "8b71302f3e4a66c4da514430cb0ccd5bc8720243", "filename": "gcc/flags.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fflags.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fflags.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflags.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -250,6 +250,9 @@ extern bool g_switch_set;\n /* Same for selective scheduling.  */\n extern bool sel_sched_switch_set;\n \n+/* Whether to run the warn_unused_result attribute pass.  */\n+extern bool flag_warn_unused_result;\n+\n /* Values of the -falign-* flags: how much to align labels in code. \n    0 means `use default', 1 means `don't align'.  \n    For each variable, there is an _log variant which is the power"}, {"sha": "44289a6b66e5e6057b61a391fc99748efe626143", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,12 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* f95-lang.c (gfc_be_parse_file): Do not finalize the CU here.\n+\t* trans-decl.c (gfc_gimplify_function): Remove.\n+\t(build_entry_thunks): Do not gimplify here.\n+\t(create_main_function): Likewise.\n+\t(gfc_generate_function_code): Likewise.\n+\n 2009-07-17  Aldy Hernandez  <aldyh@redhat.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "f9d1878d379f5c339bf6cfb31191b3742023636a", "filename": "gcc/fortran/f95-lang.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2Ff95-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2Ff95-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ff95-lang.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -241,9 +241,6 @@ gfc_be_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n   gfc_parse_file ();\n   gfc_generate_constructors ();\n \n-  cgraph_finalize_compilation_unit ();\n-  cgraph_optimize ();\n-\n   /* Tell the frontend about any errors.  */\n   gfc_get_errors (&warnings, &errors);\n   errorcount += errors;"}, {"sha": "5133888fa134bf67d3eafa0ee2ff07d68539b62b", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1839,30 +1839,6 @@ create_function_arglist (gfc_symbol * sym)\n   DECL_ARGUMENTS (fndecl) = arglist;\n }\n \n-/* Convert FNDECL's code to GIMPLE and handle any nested functions.  */\n-\n-static void\n-gfc_gimplify_function (tree fndecl)\n-{\n-  struct cgraph_node *cgn;\n-\n-  gimplify_function_tree (fndecl);\n-  dump_function (TDI_generic, fndecl);\n-\n-  /* Generate errors for structured block violations.  */\n-  /* ??? Could be done as part of resolve_labels.  */\n-  if (flag_openmp)\n-    diagnose_omp_structured_block_errors (fndecl);\n-\n-  /* Convert all nested functions to GIMPLE now.  We do things in this order\n-     so that items like VLA sizes are expanded properly in the context of the\n-     correct function.  */\n-  cgn = cgraph_node (fndecl);\n-  for (cgn = cgn->nested; cgn; cgn = cgn->next_nested)\n-    gfc_gimplify_function (cgn->decl);\n-}\n-\n-\n /* Do the setup necessary before generating the body of a function.  */\n \n static void\n@@ -2060,7 +2036,6 @@ build_entry_thunks (gfc_namespace * ns)\n \n       current_function_decl = NULL_TREE;\n \n-      gfc_gimplify_function (thunk_fndecl);\n       cgraph_finalize_function (thunk_fndecl, false);\n \n       /* We share the symbols in the formal argument list with other entry\n@@ -4142,7 +4117,6 @@ create_main_function (tree fndecl)\n   /* Output the GENERIC tree.  */\n   dump_function (TDI_original, ftn_main);\n \n-  gfc_gimplify_function (ftn_main);\n   cgraph_finalize_function (ftn_main, false);\n \n   if (old_context)\n@@ -4414,10 +4388,7 @@ gfc_generate_function_code (gfc_namespace * ns)\n        added to our parent's nested function list.  */\n     (void) cgraph_node (fndecl);\n   else\n-    {\n-      gfc_gimplify_function (fndecl);\n-      cgraph_finalize_function (fndecl, false);\n-    }\n+    cgraph_finalize_function (fndecl, false);\n \n   gfc_trans_use_stmts (ns);\n   gfc_traverse_ns (ns, gfc_emit_parameter_debug_info);"}, {"sha": "2f16c60538a2089d01d84215a6eb63590e8ecc5e", "filename": "gcc/gimple.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -979,7 +979,6 @@ extern gimple_predicate rhs_predicate_for (tree);\n extern tree canonicalize_cond_expr_cond (tree);\n \n /* In omp-low.c.  */\n-extern void diagnose_omp_structured_block_errors (tree);\n extern tree omp_reduction_init (tree, tree);\n \n /* In tree-nested.c.  */"}, {"sha": "884d00f07220feaa52c48684bb7585e3c4f25fa7", "filename": "gcc/gimplify.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -52,6 +52,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"splay-tree.h\"\n #include \"vec.h\"\n #include \"gimple.h\"\n+#include \"tree-pass.h\"\n \n \n enum gimplify_omp_var_data\n@@ -4913,14 +4914,18 @@ gimplify_asm_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n   \n   for (link = ASM_CLOBBERS (expr); link; ++i, link = TREE_CHAIN (link))\n       VEC_safe_push (tree, gc, clobbers, link);\n-    \n-  stmt = gimple_build_asm_vec (TREE_STRING_POINTER (ASM_STRING (expr)),\n-                               inputs, outputs, clobbers);\n \n-  gimple_asm_set_volatile (stmt, ASM_VOLATILE_P (expr));\n-  gimple_asm_set_input (stmt, ASM_INPUT_P (expr));\n+  /* Do not add ASMs with errors to the gimple IL stream.  */\n+  if (ret != GS_ERROR)\n+    {\n+      stmt = gimple_build_asm_vec (TREE_STRING_POINTER (ASM_STRING (expr)),\n+\t\t\t\t   inputs, outputs, clobbers);\n \n-  gimplify_seq_add_stmt (pre_p, stmt);\n+      gimple_asm_set_volatile (stmt, ASM_VOLATILE_P (expr));\n+      gimple_asm_set_input (stmt, ASM_INPUT_P (expr));\n+\n+      gimplify_seq_add_stmt (pre_p, stmt);\n+    }\n \n   return ret;\n }\n@@ -7482,6 +7487,8 @@ gimplify_function_tree (tree fndecl)\n   gimple_seq seq;\n   gimple bind;\n \n+  gcc_assert (!gimple_body (fndecl));\n+\n   oldfn = current_function_decl;\n   current_function_decl = fndecl;\n   if (DECL_STRUCT_FUNCTION (fndecl))\n@@ -7548,6 +7555,7 @@ gimplify_function_tree (tree fndecl)\n     }\n \n   DECL_SAVED_TREE (fndecl) = NULL_TREE;\n+  cfun->curr_properties = PROP_gimple_any;\n \n   current_function_decl = oldfn;\n   pop_cfun ();"}, {"sha": "d6c87f45a10af7400821f34af073f40a2ec72a56", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,18 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* java-gimplify.c (java_genericize): Do not gimplify here.\n+\tBut replace all local references.\n+\t(java_gimplify_expr): Do not replace local references here.\n+\t(java_gimplify_modify_expr): Likewise.\n+\t* jcf-parse.c (java_parse_file): Do not finalize the CU or\n+\toptimize the cgraph here.\n+\t* decl.c (java_replace_reference): Make static.\n+\t(java_replace_references): New function.\n+\t(end_java_method): Clear base_decl_map.\n+\t* java-tree.h (java_replace_references): Declare.\n+\t(java_replace_reference): Remove.\n+\n 2009-07-14  Taras Glek  <tglek@mozilla.com>\n \t    Rafael Espindola  <espindola@google.com>\n "}, {"sha": "8c327fa97d3d369760aecb6b4a3f5f925f7f12ae", "filename": "gcc/java/decl.c", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -306,13 +306,13 @@ find_local_variable (int index, tree type, int pc ATTRIBUTE_UNUSED)\n   return decl;\n }\n \n-/* Called during gimplification for every variable.  If the variable\n+/* Called during genericization for every variable.  If the variable\n    is a temporary of pointer type, replace it with a common variable\n    thath is used to hold all pointer types that are ever stored in\n    that slot.  Set WANT_LVALUE if you want a variable that is to be\n    written to.  */\n \n-tree \n+static tree \n java_replace_reference (tree var_decl, bool want_lvalue)\n {\n   tree decl_type;\n@@ -341,6 +341,39 @@ java_replace_reference (tree var_decl, bool want_lvalue)\n   return var_decl;\n }\n \n+/* Helper for java_genericize.  */\n+\n+tree\n+java_replace_references (tree *tp, int *walk_subtrees,\n+\t\t\t void *data ATTRIBUTE_UNUSED)\n+{\n+  if (TREE_CODE (*tp) == MODIFY_EXPR)\n+    {\n+      tree lhs = TREE_OPERAND (*tp, 0);\n+      /* This is specific to the bytecode compiler.  If a variable has\n+\t LOCAL_SLOT_P set, replace an assignment to it with an assignment\n+\t to the corresponding variable that holds all its aliases.  */\n+      if (TREE_CODE (lhs) == VAR_DECL\n+\t  && DECL_LANG_SPECIFIC (lhs)\n+\t  && LOCAL_SLOT_P (lhs)\n+\t  && TREE_CODE (TREE_TYPE (lhs)) == POINTER_TYPE)\n+\t{\n+\t  tree new_lhs = java_replace_reference (lhs, /* want_lvalue */ true);\n+\t  tree new_rhs = build1 (NOP_EXPR, TREE_TYPE (new_lhs),\n+\t\t\t\t TREE_OPERAND (*tp, 1));\n+\t  *tp = build2 (MODIFY_EXPR, TREE_TYPE (new_lhs),\n+\t\t\tnew_lhs, new_rhs);\n+\t  *tp = build1 (NOP_EXPR, TREE_TYPE (lhs), *tp);\n+\t}\n+    }\n+  if (TREE_CODE (*tp) == VAR_DECL)\n+    {\n+      *tp = java_replace_reference (*tp, /* want_lvalue */ false);\n+      *walk_subtrees = 0;\n+    }\n+\n+  return NULL_TREE;\n+}\n \n /* Same as find_local_index, except that INDEX is a stack index. */\n \n@@ -1877,6 +1910,7 @@ end_java_method (void)\n   finish_method (fndecl);\n \n   current_function_decl = NULL_TREE;\n+  base_decl_map = NULL_TREE;\n }\n \n /* Prepare a method for expansion.  */"}, {"sha": "dd75fb995c29f2900f98f9ba730be5dc18ceac4a", "filename": "gcc/java/java-gimplify.c", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjava-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjava-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-gimplify.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -44,12 +44,8 @@ static void dump_java_tree (enum tree_dump_index, tree);\n void\n java_genericize (tree fndecl)\n {\n+  walk_tree (&DECL_SAVED_TREE (fndecl), java_replace_references, NULL, NULL);\n   dump_java_tree (TDI_original, fndecl);\n-\n-  /* Genericize with the gimplifier.  */\n-  gimplify_function_tree (fndecl);\n-\n-  dump_function (TDI_generic, fndecl);\n }\n \n /* Gimplify a Java tree.  */\n@@ -65,23 +61,9 @@ java_gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p)\n       *expr_p = java_gimplify_block (*expr_p);\n       break;\n \n-    case VAR_DECL:\n-      *expr_p = java_replace_reference (*expr_p, /* want_lvalue */ false);\n-      return GS_UNHANDLED;\n-\n     case MODIFY_EXPR:\n       return java_gimplify_modify_expr (expr_p);\n \n-    case SAVE_EXPR:\n-      /* Note that we can see <save_expr NULL> if the save_expr was\n-\t already handled by gimplify_save_expr.  */\n-      if (TREE_OPERAND (*expr_p, 0) != NULL_TREE\n-\t  && TREE_CODE (TREE_OPERAND (*expr_p, 0)) == VAR_DECL)\n-\tTREE_OPERAND (*expr_p, 0) \n-\t  = java_replace_reference (TREE_OPERAND (*expr_p, 0), \n-\t\t\t       /* want_lvalue */ false);\n-      return GS_UNHANDLED;\n-\n     case POSTINCREMENT_EXPR:\n     case POSTDECREMENT_EXPR:\n     case PREINCREMENT_EXPR:\n@@ -110,27 +92,12 @@ java_gimplify_modify_expr (tree *modify_expr_p)\n   tree rhs = TREE_OPERAND (modify_expr, 1);\n   tree lhs_type = TREE_TYPE (lhs);\n \n-  /* This is specific to the bytecode compiler.  If a variable has\n-     LOCAL_SLOT_P set, replace an assignment to it with an assignment\n-     to the corresponding variable that holds all its aliases.  */\n-  if (TREE_CODE (lhs) == VAR_DECL\n-      && DECL_LANG_SPECIFIC (lhs)\n-      && LOCAL_SLOT_P (lhs)\n-      && TREE_CODE (lhs_type) == POINTER_TYPE)\n-    {\n-      tree new_lhs = java_replace_reference (lhs, /* want_lvalue */ true);\n-      tree new_rhs = build1 (NOP_EXPR, TREE_TYPE (new_lhs), rhs);\n-      modify_expr = build2 (MODIFY_EXPR, TREE_TYPE (new_lhs),\n-\t\t\t    new_lhs, new_rhs);\n-      modify_expr = build1 (NOP_EXPR, lhs_type, modify_expr);\n-    }\n-  else if (lhs_type != TREE_TYPE (rhs))\n+  if (lhs_type != TREE_TYPE (rhs))\n     /* Fix up type mismatches to make legal GIMPLE.  These are\n        generated in several places, in particular null pointer\n        assignment and subclass assignment.  */\n     TREE_OPERAND (modify_expr, 1) = convert (lhs_type, rhs);\n \n-  *modify_expr_p = modify_expr;\n   return GS_UNHANDLED;\n }\n "}, {"sha": "e68b136db711e208acfd0c5794b722c3a1ab4ae5", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1119,7 +1119,7 @@ extern int find_class_or_string_constant (struct CPool *, int, tree);\n \n extern tree pushdecl_top_level (tree);\n extern tree pushdecl_function_level (tree);\n-extern tree java_replace_reference (tree, bool);\n+extern tree java_replace_references (tree *, int *, void *);\n extern int alloc_class_constant (tree);\n extern void init_expr_processing (void);\n extern void push_super_field (tree, tree);"}, {"sha": "1a2de9ee8b0c962a217b5ad5456f1546b41d36d9", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1982,11 +1982,6 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n   /* Arrange for any necessary initialization to happen.  */\n   java_emit_static_constructor ();\n   gcc_assert (global_bindings_p ());\n-\n-  /* Only finalize the compilation unit after we've told cgraph which\n-     functions have their addresses stored.  */\n-  cgraph_finalize_compilation_unit ();\n-  cgraph_optimize ();\n }\n \n "}, {"sha": "194993f7ab342aa440acecaff14386df32513cb2", "filename": "gcc/langhooks.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks-def.h\"\n #include \"ggc.h\"\n #include \"diagnostic.h\"\n+#include \"cgraph.h\"\n \n /* Do nothing; in many cases the default hook.  */\n \n@@ -305,15 +306,20 @@ lhd_decl_ok_for_sibcall (const_tree decl ATTRIBUTE_UNUSED)\n void\n write_global_declarations (void)\n {\n+  tree globals, decl, *vec;\n+  int len, i;\n+\n+  /* This lang hook is dual-purposed, and also finalizes the\n+     compilation unit.  */\n+  cgraph_finalize_compilation_unit ();\n+\n   /* Really define vars that have had only a tentative definition.\n      Really output inline functions that must actually be callable\n      and have not been output so far.  */\n \n-  tree globals = lang_hooks.decls.getdecls ();\n-  int len = list_length (globals);\n-  tree *vec = XNEWVEC (tree, len);\n-  int i;\n-  tree decl;\n+  globals = lang_hooks.decls.getdecls ();\n+  len = list_length (globals);\n+  vec = XNEWVEC (tree, len);\n \n   /* Process the decls in reverse order--earliest first.\n      Put them into VEC from back to front, then take out from front.  */"}, {"sha": "82827bf762a647d912d8e3f9fde0ade6e43810ac", "filename": "gcc/omp-low.c", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1572,7 +1572,6 @@ create_omp_child_function (omp_context *ctx, bool task_copy)\n \n   decl = build_decl (gimple_location (ctx->stmt),\n \t\t     FUNCTION_DECL, name, type);\n-  decl = lang_hooks.decls.pushdecl (decl);\n \n   if (!task_copy)\n     ctx->cb.dst_fn = decl;\n@@ -6895,16 +6894,11 @@ diagnose_sb_2 (gimple_stmt_iterator *gsi_p, bool *handled_ops_p,\n   return NULL_TREE;\n }\n \n-void\n-diagnose_omp_structured_block_errors (tree fndecl)\n+static unsigned int\n+diagnose_omp_structured_block_errors (void)\n {\n-  tree save_current = current_function_decl;\n   struct walk_stmt_info wi;\n-  struct function *old_cfun = cfun;\n-  gimple_seq body = gimple_body (fndecl);\n-\n-  current_function_decl = fndecl;\n-  set_cfun (DECL_STRUCT_FUNCTION (fndecl));\n+  gimple_seq body = gimple_body (current_function_decl);\n \n   all_labels = splay_tree_new (splay_tree_compare_pointers, 0, 0);\n \n@@ -6918,8 +6912,32 @@ diagnose_omp_structured_block_errors (tree fndecl)\n   splay_tree_delete (all_labels);\n   all_labels = NULL;\n \n-  set_cfun (old_cfun);\n-  current_function_decl = save_current;\n+  return 0;\n }\n \n+static bool\n+gate_diagnose_omp_blocks (void)\n+{\n+  return flag_openmp != 0;\n+}\n+\n+struct gimple_opt_pass pass_diagnose_omp_blocks =\n+{\n+  {\n+    GIMPLE_PASS,\n+    \"diagnose_omp_blocks\",\t\t/* name */\n+    gate_diagnose_omp_blocks,\t\t/* gate */\n+    diagnose_omp_structured_block_errors,\t/* execute */\n+    NULL,\t\t\t\t/* sub */\n+    NULL,\t\t\t\t/* next */\n+    0,\t\t\t\t\t/* static_pass_number */\n+    TV_NONE,\t\t\t\t/* tv_id */\n+    PROP_gimple_any,\t\t\t/* properties_required */\n+    0,\t\t\t\t\t/* properties_provided */\n+    0,\t\t\t\t\t/* properties_destroyed */\n+    0,\t\t\t\t\t/* todo_flags_start */\n+    0,\t\t\t\t\t/* todo_flags_finish */\n+  }\n+};\n+\n #include \"gt-omp-low.h\""}, {"sha": "33635dd979daa5d0b0dcd5bde84ef4abac1fe37a", "filename": "gcc/opts.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -362,6 +362,9 @@ DEF_VEC_ALLOC_P(const_char_p,heap);\n \n static VEC(const_char_p,heap) *ignored_options;\n \n+/* Language specific warning pass for unused results.  */\n+bool flag_warn_unused_result = false;\n+\n /* Input file names.  */\n const char **in_fnames;\n unsigned num_in_fnames;"}, {"sha": "9ad672c477a85f3bc23df75e41645e34720cdd9b", "filename": "gcc/passes.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fpasses.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Fpasses.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -509,6 +509,8 @@ init_optimization_passes (void)\n     backend might produce already lowered functions that are not processed\n     by these passes.  */\n   p = &all_lowering_passes;\n+  NEXT_PASS (pass_warn_unused_result);\n+  NEXT_PASS (pass_diagnose_omp_blocks);\n   NEXT_PASS (pass_remove_useless_stmts);\n   NEXT_PASS (pass_mudflap_1);\n   NEXT_PASS (pass_lower_omp);\n@@ -821,7 +823,6 @@ init_optimization_passes (void)\n \n   /* Register the passes with the tree dump code.  */\n   register_dump_files (all_lowering_passes, PROP_gimple_any);\n-  all_lowering_passes->todo_flags_start |= TODO_set_props;\n   register_dump_files (all_ipa_passes, \n \t\t       PROP_gimple_any | PROP_gimple_lcf | PROP_gimple_leh\n \t\t       | PROP_cfg);\n@@ -1261,9 +1262,6 @@ execute_one_pass (struct opt_pass *pass)\n   if (!quiet_flag && !cfun)\n     fprintf (stderr, \" <%s>\", pass->name ? pass->name : \"\");\n \n-  if (pass->todo_flags_start & TODO_set_props)\n-    cfun->curr_properties = pass->properties_required;\n-\n   /* Note that the folders should only create gimple expressions.\n      This is a hack until the new folder is ready.  */\n   in_gimple_form = (cfun && (cfun->curr_properties & PROP_trees)) != 0;"}, {"sha": "3b704d52235718441f33dd3b98da6367570cd5fc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1,3 +1,24 @@\n+2009-07-17  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR c/40401\n+\t* g++.dg/rtti/crash4.C: New testcase.\n+\t* g++.dg/torture/20090706-1.C: Likewise.\n+\t* gcc.dg/redecl-17.c: Likewise.\n+\t* gfortran.dg/missing_optional_dummy_5.f90: Adjust pattern.\n+\t* gcc.dg/declspec-9.c: Expect extra error.\n+\t* gcc.dg/declspec-10.c: Likewise.\n+\t* gcc.dg/declspec-11.c: Likewise.\n+\t* gcc.dg/redecl-10.c: Expect extra warnings.\n+\t* gcc.target/i386/pr39082-1.c: Adjust diagnostic location.\n+\t* gcc.target/i386/pr39545-1.c: Likewise.\n+\t* g++.dg/ext/asm3.C: Expect more errors.\n+\t* g++.dg/gomp/block-1.C: Likewise.\n+\t* g++.dg/gomp/block-2.C: Likewise.\n+\t* g++.dg/gomp/block-3.C: Likewise.\n+\t* g++.dg/gomp/block-5.C: Likewise.\n+\t* g++.old-deja/g++.jason/report.C: Expect extra warnings.\n+\t* g++.dg/warn/unused-result1.C: XFAIL.\n+\n 2009-07-17  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/40321"}, {"sha": "090218fe61f9fe9a505ed01a662067a11e968830", "filename": "gcc/testsuite/g++.dg/ext/asm3.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fasm3.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -8,6 +8,8 @@\n int two(int in)\n {\n   register int out;\n-  __asm__ (\"\" : \"r\" (out) : \"r\" (in)); // { dg-error \"\" \"\" }\n+  __asm__ (\"\" : \"r\" (out) : \"r\" (in));\n   return out;\n }\n+\n+// { dg-message \"error:\" \"\" { target *-*-* } 11 }"}, {"sha": "d2b86645af8d66eac5214602585cedce9d2c0db2", "filename": "gcc/testsuite/g++.dg/gomp/block-1.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-1.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -20,3 +20,6 @@ void foo()\n \t{ ok1: break; }\n     }\n }\n+\n+// { dg-message \"error: invalid branch to/from an OpenMP structured block\" \"\" { target *-*-* } 7 }\n+// { dg-message \"error: invalid entry to OpenMP structured block\" \"\" { target *-*-* } 9 }"}, {"sha": "17d98d845a567142024e1b35bd522ea41971a4e8", "filename": "gcc/testsuite/g++.dg/gomp/block-2.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-2.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -30,3 +30,6 @@ void foo()\n   for (i = 0; i < 10; ++i)\n     continue;\n }\n+\n+// { dg-message \"error: invalid branch to/from an OpenMP structured block\" \"\" { target *-*-* } 14 }\n+// { dg-message \"error: invalid entry to OpenMP structured block\" \"\" { target *-*-* } 16 }"}, {"sha": "aeb0c7795a005075d3e833334724cd24c9d0e673", "filename": "gcc/testsuite/g++.dg/gomp/block-3.C", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-3.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -55,3 +55,7 @@ void foo()\n \t}\n     }\n }\n+\n+// { dg-message \"error: invalid branch to/from an OpenMP structured block\" \"\" { target *-*-* } 21 }\n+// { dg-message \"error: invalid branch to/from an OpenMP structured block\" \"\" { target *-*-* } 26 }\n+// { dg-message \"error: invalid entry to OpenMP structured block\" \"\" { target *-*-* } 30 }"}, {"sha": "391f8b660a60d8a3e490bd7b84ea29247739ce2a", "filename": "gcc/testsuite/g++.dg/gomp/block-5.C", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fblock-5.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -13,3 +13,5 @@ void foo()\n       return;\t\t// { dg-error \"invalid exit\" }\n     }\n }\n+\n+// { dg-message \"error: invalid branch to/from an OpenMP structured block\" \"\" { target *-*-* } 7 }"}, {"sha": "49807e99f08f39eeba001dfd2eacb8c85e177b3f", "filename": "gcc/testsuite/g++.dg/rtti/crash4.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Frtti%2Fcrash4.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O\" } */\n+\n+class ios_base   {\n+public:\n+    virtual ~ios_base();\n+};\n+template<typename _CharT>\n+class basic_ostream : virtual public ios_base {\n+public:\n+    virtual ~basic_ostream() { }\n+};\n+extern template class basic_ostream<char>;\n+template <typename _CharT>\n+class basic_ostringstream : public basic_ostream<_CharT> { };\n+template class basic_ostringstream<char>;"}, {"sha": "43a59f0e682a417460cf804241f1e796f4f7a976", "filename": "gcc/testsuite/g++.dg/torture/20090706-1.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20090706-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20090706-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2F20090706-1.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do compile } */\n+\n+namespace std __attribute__ ((__visibility__ (\"default\"))) {\n+    template<typename _Tp>     class new_allocator     { };\n+    template<typename _Tp>     class allocator: public new_allocator<_Tp> { };\n+    template<typename _Tp, typename _Alloc>     struct _Vector_base     { };\n+    template<typename _Tp, typename _Alloc = std::allocator<_Tp> >\n+    class vector : protected _Vector_base<_Tp, _Alloc>     { };\n+};\n+template<int Dim> class Vector { };\n+enum CenteringType { VertexType,  EdgeType,  FaceType,  CellType };\n+enum ContinuityType { XDim = 1,  YDim = XDim << 1,  ZDim = YDim << 1 };\n+template <int Dim> class Centering {\n+public:\n+    typedef Vector<Dim> Position;\n+    typedef std::vector<Position> Positions;\n+    Centering(const Positions &positions);\n+    Positions positions_m;\n+};\n+template <int Dim> class CanonicalCentering {\n+    CanonicalCentering();\n+    template <class T> static T combine(const T &op1, const T &op2);\n+    static Centering<Dim>*** centering_table_m;\n+};\n+template <int Dim> CanonicalCentering<Dim>::CanonicalCentering()\n+{\n+  typename Centering<Dim>::Positions positions[Dim][2];\n+  enum { x = 0, y, z };\n+  int cont = 0;\n+  if (Dim > 1)\n+    {\n+      centering_table_m[EdgeType][cont][YDim] =  Centering<Dim>(positions[y][cont]);\n+      centering_table_m[EdgeType][cont][XDim|YDim] =  Centering<Dim>(combine(positions[x][cont], positions[y][cont]));\n+    }\n+  if (Dim > 2)\n+    {\n+      centering_table_m[EdgeType][cont][ZDim] =  Centering<Dim>(positions[z][cont]);\n+      centering_table_m[EdgeType][cont][XDim|ZDim] =  Centering<Dim>(combine(positions[x][cont], positions[z][cont]));\n+    }\n+}\n+template class CanonicalCentering<2>;"}, {"sha": "466c99e7d97b92620e5b7e3eae729e806d26c24b", "filename": "gcc/testsuite/g++.dg/warn/unused-result1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2Funused-result1.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -6,5 +6,5 @@ public:\n };\n class QString {\n   QByteArray toLocal8Bit() const __attribute__ ((warn_unused_result));\n-  void fooWarnHere() const { toLocal8Bit(); } // { dg-warning \"ignoring\" }\n+  void fooWarnHere() const { toLocal8Bit(); } // { dg-warning \"ignoring\" \"\" { xfail *-*-* } }\n };"}, {"sha": "b595662c22850b7bc27c9f4c0c39f28e9897f049", "filename": "gcc/testsuite/g++.old-deja/g++.jason/report.C", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Freport.C?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -72,3 +72,6 @@ int darg (char X::*p)\n {\n    undef3 (1); // { dg-error \"\" } implicit declaration\n }\t\t\t\t// { dg-warning \"no return statement\" }\n+\n+// { dg-message \"warning: control reaches end of non-void function\" \"\" { target *-*-* } 36 }\n+// { dg-message \"warning: control reaches end of non-void function\" \"\" { target *-*-* } 65 }"}, {"sha": "ddc60646ab0623f30cb604e7345762b4e03b694b", "filename": "gcc/testsuite/gcc.dg/declspec-10.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-10.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -43,3 +43,5 @@ void i (void) { auto void y (void) {} } /* { dg-warning \"ISO C forbids nested fu\n /* { dg-warning \"function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n \n inline int main (void) { return 0; } /* { dg-warning \"cannot inline function 'main'\" } */\n+\n+/* { dg-message \"error: register name not specified for 'y'\" \"\" { target *-*-* } 19 } */"}, {"sha": "9dfe63f99e32985122b0c4e9fc030ed0aa609ab2", "filename": "gcc/testsuite/gcc.dg/declspec-11.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-11.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -43,3 +43,5 @@ void i (void) { auto void y (void) {} } /* { dg-error \"ISO C forbids nested func\n /* { dg-error \"function definition declared 'auto'\" \"nested\" { target *-*-* } 42 } */\n \n inline int main (void) { return 0; } /* { dg-error \"cannot inline function 'main'\" } */\n+\n+/* { dg-message \"error: register name not specified for 'y'\" \"\" { target *-*-* } 19 } */"}, {"sha": "7766ed6a4b8beb03812b43961aa0002410a97bbc", "filename": "gcc/testsuite/gcc.dg/declspec-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdeclspec-9.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -17,7 +17,7 @@ void f6 (static int); /* { dg-error \"storage class specified for unnamed paramet\n void f7 (typedef int); /* { dg-error \"storage class specified for unnamed parameter\" } */\n \n auto int x; /* { dg-error \"file-scope declaration of 'x' specifies 'auto'\" } */\n-register int y;\n+register int y; /* { dg-error \"register name not specified for 'y'\" } */\n \n void h (void) { extern void x (void) {} } /* { dg-error \"nested function 'x' declared 'extern'\" } */\n "}, {"sha": "525961e7e3a62c83d031629370457a3ea901f0ef", "filename": "gcc/testsuite/gcc.dg/redecl-10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-10.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -12,7 +12,7 @@ f (void)\n   extern int w[] = { 1, 2 }; /* { dg-error \"has both\" } */\n }\n \n-int x[];\n+int x[]; /* { dg-warning \"array 'x' assumed to have one element\" } */\n void\n g (void)\n {\n@@ -26,7 +26,7 @@ h (void)\n   extern int y[] = { 6 }; /* { dg-error \"has both\" } */\n }\n \n-int z[];\n+int z[]; /* { dg-warning \"array 'z' assumed to have one element\" } */\n void\n i (void)\n {"}, {"sha": "686ebc5897195e76a47877b00192394c3b60a47b", "filename": "gcc/testsuite/gcc.dg/redecl-17.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fredecl-17.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+\n+void (*fp)(const int i);\n+void (*fp)(int i);\n+\n+void foo()\n+{\n+  (*fp)(0);\n+}\n+"}, {"sha": "81b5bb66d2b897ad9c60cf363c0e1b4c9317da02", "filename": "gcc/testsuite/gcc.target/i386/pr39082-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39082-1.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -13,7 +13,7 @@ extern int bar1 (union un);\n extern union un bar2 (int);\n \n int\n-foo1 (union un u) /* { dg-message \"note: The ABI of passing union with long double has changed in GCC 4.4\" } */\n+foo1 (union un u)\n {\n   bar1 (u);\n   return u.i;\n@@ -30,6 +30,6 @@ foo2 (void)\n int\n foo3 (int x)\n {\n-  union un u = bar2 (x);\n+  union un u = bar2 (x); /* { dg-message \"note: The ABI of passing union with long double has changed in GCC 4.4\" } */\n   return u.i;\n }"}, {"sha": "281c8cbf369ef66789c8faea664ab527dcdbb57e", "filename": "gcc/testsuite/gcc.target/i386/pr39545-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr39545-1.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -10,14 +10,14 @@ struct flex\n };\n \n int\n-foo (struct flex s) /* { dg-message \"note: The ABI of passing struct with a flexible array member has changed in GCC 4.4\" } */\n+foo (struct flex s)\n {\n   return s.i;\n }\n \n struct flex\n bar (int x)\n-{\n+{ /* { dg-message \"note: The ABI of passing struct with a flexible array member has changed in GCC 4.4\" } */\n   struct flex s;\n   s.i = x;\n   return s;"}, {"sha": "29a9d70f899800c3b2e70ba54dd185d2f2eeca18", "filename": "gcc/testsuite/gfortran.dg/missing_optional_dummy_5.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmissing_optional_dummy_5.f90?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -23,7 +23,7 @@ function tm_doit(genloc)\n  end function tm_doit\n end module krmod\n \n-! { dg-final { scan-tree-dump \" tm_doit \\\\(&parm.\\(6|7\\), 0B, 0\\\\);\" \"original\" } }\n+! { dg-final { scan-tree-dump \" tm_doit \\\\(&parm\\.., 0B, 0\\\\);\" \"original\" } }\n ! { dg-final { cleanup-tree-dump \"original\" } }\n ! { dg-final { cleanup-modules \"krmod\" } }\n "}, {"sha": "6fa3f1a44ec79194fcf25da508c7a6d2576b1a72", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -1034,6 +1034,8 @@ compile_file (void)\n \n   ggc_protect_identifiers = false;\n \n+  /* This must also call cgraph_finalize_compilation_unit and\n+     cgraph_optimize.  */\n   lang_hooks.decls.final_write_globals ();\n \n   if (errorcount || sorrycount)"}, {"sha": "964a537266fc7840634244015ae06dec5a5c67ae", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -7370,3 +7370,100 @@ struct gimple_opt_pass pass_warn_function_noreturn =\n   0\t\t\t\t\t/* todo_flags_finish */\n  }\n };\n+\n+\n+/* Walk a gimplified function and warn for functions whose return value is\n+   ignored and attribute((warn_unused_result)) is set.  This is done before\n+   inlining, so we don't have to worry about that.  */\n+\n+static void\n+do_warn_unused_result (gimple_seq seq)\n+{\n+  tree fdecl, ftype;\n+  gimple_stmt_iterator i;\n+\n+  for (i = gsi_start (seq); !gsi_end_p (i); gsi_next (&i))\n+    {\n+      gimple g = gsi_stmt (i);\n+\n+      switch (gimple_code (g))\n+\t{\n+\tcase GIMPLE_BIND:\n+\t  do_warn_unused_result (gimple_bind_body (g));\n+\t  break;\n+\tcase GIMPLE_TRY:\n+\t  do_warn_unused_result (gimple_try_eval (g));\n+\t  do_warn_unused_result (gimple_try_cleanup (g));\n+\t  break;\n+\tcase GIMPLE_CATCH:\n+\t  do_warn_unused_result (gimple_catch_handler (g));\n+\t  break;\n+\tcase GIMPLE_EH_FILTER:\n+\t  do_warn_unused_result (gimple_eh_filter_failure (g));\n+\t  break;\n+\n+\tcase GIMPLE_CALL:\n+\t  if (gimple_call_lhs (g))\n+\t    break;\n+\n+\t  /* This is a naked call, as opposed to a GIMPLE_CALL with an\n+\t     LHS.  All calls whose value is ignored should be\n+\t     represented like this.  Look for the attribute.  */\n+\t  fdecl = gimple_call_fndecl (g);\n+\t  ftype = TREE_TYPE (TREE_TYPE (gimple_call_fn (g)));\n+\n+\t  if (lookup_attribute (\"warn_unused_result\", TYPE_ATTRIBUTES (ftype)))\n+\t    {\n+\t      location_t loc = gimple_location (g);\n+\n+\t      if (fdecl)\n+\t\twarning_at (loc, OPT_Wunused_result,\n+\t\t\t    \"ignoring return value of %qD, \"\n+\t\t\t    \"declared with attribute warn_unused_result\",\n+\t\t\t    fdecl);\n+\t      else\n+\t\twarning_at (loc, OPT_Wunused_result,\n+\t\t\t    \"ignoring return value of function \"\n+\t\t\t    \"declared with attribute warn_unused_result\");\n+\t    }\n+\t  break;\n+\n+\tdefault:\n+\t  /* Not a container, not a call, or a call whose value is used.  */\n+\t  break;\n+\t}\n+    }\n+}\n+\n+static unsigned int\n+run_warn_unused_result (void)\n+{\n+  do_warn_unused_result (gimple_body (current_function_decl));\n+  return 0;\n+}\n+\n+static bool\n+gate_warn_unused_result (void)\n+{\n+  return flag_warn_unused_result;\n+}\n+\n+struct gimple_opt_pass pass_warn_unused_result =\n+{\n+  {\n+    GIMPLE_PASS,\n+    \"warn_unused_result\",\t\t/* name */\n+    gate_warn_unused_result,\t\t/* gate */\n+    run_warn_unused_result,\t\t/* execute */\n+    NULL,\t\t\t\t/* sub */\n+    NULL,\t\t\t\t/* next */\n+    0,\t\t\t\t\t/* static_pass_number */\n+    TV_NONE,\t\t\t\t/* tv_id */\n+    PROP_gimple_any,\t\t\t/* properties_required */\n+    0,\t\t\t\t\t/* properties_provided */\n+    0,\t\t\t\t\t/* properties_destroyed */\n+    0,\t\t\t\t\t/* todo_flags_start */\n+    0,\t\t\t\t\t/* todo_flags_finish */\n+  }\n+};\n+"}, {"sha": "a28f0a4cbbc9925f1e9cb5dc8ea84eaf720f777a", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -603,7 +603,12 @@ copy_statement_list (tree *tp)\n   *tp = new_tree;\n \n   for (; !tsi_end_p (oi); tsi_next (&oi))\n-    tsi_link_after (&ni, tsi_stmt (oi), TSI_NEW_STMT);\n+    {\n+      tree stmt = tsi_stmt (oi);\n+      if (TREE_CODE (stmt) == STATEMENT_LIST)\n+\tcopy_statement_list (&stmt);\n+      tsi_link_after (&ni, stmt, TSI_CONTINUE_LINKING);\n+    }\n }\n \n static void\n@@ -921,7 +926,8 @@ copy_tree_body_r (tree *tp, int *walk_subtrees, void *data)\n     }\n   else if (TREE_CODE (*tp) == STATEMENT_LIST)\n     copy_statement_list (tp);\n-  else if (TREE_CODE (*tp) == SAVE_EXPR)\n+  else if (TREE_CODE (*tp) == SAVE_EXPR\n+\t   || TREE_CODE (*tp) == TARGET_EXPR)\n     remap_save_expr (tp, id->decl_map, walk_subtrees);\n   else if (TREE_CODE (*tp) == LABEL_DECL\n \t   && (! DECL_CONTEXT (*tp)\n@@ -3919,7 +3925,8 @@ unsave_r (tree *tp, int *walk_subtrees, void *data)\n     gcc_unreachable ();\n   else if (TREE_CODE (*tp) == BIND_EXPR)\n     copy_bind_expr (tp, walk_subtrees, id);\n-  else if (TREE_CODE (*tp) == SAVE_EXPR)\n+  else if (TREE_CODE (*tp) == SAVE_EXPR\n+\t   || TREE_CODE (*tp) == TARGET_EXPR)\n     remap_save_expr (tp, st, walk_subtrees);\n   else\n     {"}, {"sha": "7c55c8adc2346fa72edacbe2674a135444dc4801", "filename": "gcc/tree-nested.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-nested.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-nested.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-nested.c?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -2443,6 +2443,17 @@ free_nesting_tree (struct nesting_info *root)\n   while (root);\n }\n \n+/* Gimplify a function and all its nested functions.  */\n+static void\n+gimplify_all_functions (struct cgraph_node *root)\n+{\n+  struct cgraph_node *iter;\n+  if (!gimple_body (root->decl))\n+    gimplify_function_tree (root->decl);\n+  for (iter = root->nested; iter; iter = iter->next_nested)\n+    gimplify_all_functions (iter);\n+}\n+\n /* Main entry point for this pass.  Process FNDECL and all of its nested\n    subroutines and turn them into something less tightly bound.  */\n \n@@ -2457,6 +2468,8 @@ lower_nested_functions (tree fndecl)\n   if (!cgn->nested)\n     return;\n \n+  gimplify_all_functions (cgn);\n+\n   bitmap_obstack_initialize (&nesting_info_bitmap_obstack);\n   root = create_nesting_tree (cgn);\n   walk_all_functions (convert_nonlocal_reference_stmt,"}, {"sha": "a68cb16350b2d5ff48eedf984b3368aa2775e662", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a406865a0845cdef8bdd3eefa53e7f3992cb34ff/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=a406865a0845cdef8bdd3eefa53e7f3992cb34ff", "patch": "@@ -279,10 +279,6 @@ struct dump_file_info\n    and the memory footprint for VAR_DECLs.  */\n #define TODO_remove_unused_locals\t(1 << 15)\n \n-/* Internally used for the first in a sequence of passes.  It is set\n-   for the passes that are handed to register_dump_files.  */\n-#define TODO_set_props\t\t\t(1 << 16)\n-\n /* Call df_finish at the end of the pass.  This is done after all of\n    the dumpers have been allowed to run so that they have access to\n    the instance before it is destroyed.  */\n@@ -370,6 +366,7 @@ extern struct gimple_opt_pass pass_lower_complex;\n extern struct gimple_opt_pass pass_lower_vector;\n extern struct gimple_opt_pass pass_lower_vector_ssa;\n extern struct gimple_opt_pass pass_lower_omp;\n+extern struct gimple_opt_pass pass_diagnose_omp_blocks;\n extern struct gimple_opt_pass pass_expand_omp;\n extern struct gimple_opt_pass pass_expand_omp_ssa;\n extern struct gimple_opt_pass pass_object_sizes;\n@@ -406,6 +403,7 @@ extern struct gimple_opt_pass pass_remove_cgraph_callee_edges;\n extern struct gimple_opt_pass pass_build_cgraph_edges;\n extern struct gimple_opt_pass pass_local_pure_const;\n extern struct gimple_opt_pass pass_tracer;\n+extern struct gimple_opt_pass pass_warn_unused_result;\n \n /* IPA Passes */\n extern struct ipa_opt_pass_d pass_ipa_inline;"}]}