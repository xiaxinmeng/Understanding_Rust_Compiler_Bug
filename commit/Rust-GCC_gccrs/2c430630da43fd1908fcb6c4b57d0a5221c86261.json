{"sha": "2c430630da43fd1908fcb6c4b57d0a5221c86261", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM0MzA2MzBkYTQzZmQxOTA4ZmNiNmM0YjU3ZDBhNTIyMWM4NjI2MQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-07-07T18:54:28Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-07-07T18:54:28Z"}, "message": "re PR rtl-optimization/11059 (empty union optimization ice)\n\n\n\tPR optimization/11059\n\t* expr.c (can_store_by_pieces): Return true if length is zero.\n\t(store_by_pieces): If length is zero and endp is two, abort,\n\tothwerise, if length is zero and endp is not two, return \"to\".\n\t(clear_by_pieces): Do nothing if length is zero.\n\t(clear_storage): Do nothing if length is zero.\n\t(store_constructor): Simplify code when size is zero, or the\n\ttarget has already been cleared.  This avoids emitting a\n\tblockage instruction when initializing empty structures.\n\n\t* g++.dg/opt/emptyunion.C: New testcase.\n\nFrom-SVN: r69049", "tree": {"sha": "6db930741a1591471ed698ee5312a1c604315210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6db930741a1591471ed698ee5312a1c604315210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c430630da43fd1908fcb6c4b57d0a5221c86261", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c430630da43fd1908fcb6c4b57d0a5221c86261", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c430630da43fd1908fcb6c4b57d0a5221c86261", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c430630da43fd1908fcb6c4b57d0a5221c86261/comments", "author": null, "committer": null, "parents": [{"sha": "cf633f5be8e81fa2314c0cdf74476dc5823e5df2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf633f5be8e81fa2314c0cdf74476dc5823e5df2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf633f5be8e81fa2314c0cdf74476dc5823e5df2"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "c5e3dfdb5f998faa8d066ba1d443be3836a61ce4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c430630da43fd1908fcb6c4b57d0a5221c86261", "patch": "@@ -1,3 +1,15 @@\n+2003-07-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/11059\n+\t* expr.c (can_store_by_pieces): Return true if length is zero.\n+\t(store_by_pieces): If length is zero and endp is two, abort,\n+\tothwerise, if length is zero and endp is not two, return \"to\".\n+\t(clear_by_pieces): Do nothing if length is zero.\n+\t(clear_storage): Do nothing if length is zero.\n+\t(store_constructor): Simplify code when size is zero, or the\n+\ttarget has already been cleared.  This avoids emitting a\n+\tblockage instruction when initializing empty structures.\n+\n 2003-07-07  Andreas Jaeger  <aj@suse.de>\n \n \t* mips-tfile.c: Convert prototypes to ISO C90."}, {"sha": "87ada15337e016cb05ca3915628dbfefbd57ded6", "filename": "gcc/expr.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=2c430630da43fd1908fcb6c4b57d0a5221c86261", "patch": "@@ -2669,6 +2669,9 @@ can_store_by_pieces (unsigned HOST_WIDE_INT len,\n   int reverse;\n   rtx cst;\n \n+  if (len == 0)\n+    return 1;\n+\n   if (! STORE_BY_PIECES_P (len, align))\n     return 0;\n \n@@ -2744,6 +2747,13 @@ store_by_pieces (rtx to, unsigned HOST_WIDE_INT len,\n {\n   struct store_by_pieces data;\n \n+  if (len == 0)\n+    {\n+      if (endp == 2)\n+\tabort ();\n+      return to;\n+    }\n+\n   if (! STORE_BY_PIECES_P (len, align))\n     abort ();\n   to = protect_from_queue (to, 1);\n@@ -2792,6 +2802,9 @@ clear_by_pieces (rtx to, unsigned HOST_WIDE_INT len, unsigned int align)\n {\n   struct store_by_pieces data;\n \n+  if (len == 0)\n+    return;\n+\n   data.constfun = clear_by_pieces_1;\n   data.constfundata = NULL;\n   data.len = len;\n@@ -2956,7 +2969,9 @@ clear_storage (rtx object, rtx size)\n       object = protect_from_queue (object, 1);\n       size = protect_from_queue (size, 0);\n \n-      if (GET_CODE (size) == CONST_INT\n+      if (GET_CODE (size) == CONST_INT && INTVAL (size) == 0)\n+\t;\n+      else if (GET_CODE (size) == CONST_INT\n \t  && CLEAR_BY_PIECES_P (INTVAL (size), align))\n \tclear_by_pieces (object, INTVAL (size), align);\n       else if (clear_storage_via_clrstr (object, size, align))\n@@ -4892,11 +4907,13 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n     {\n       tree elt;\n \n+      /* If size is zero or the target is already cleared, do nothing.  */\n+      if (size == 0 || cleared)\n+\tcleared = 1;\n       /* We either clear the aggregate or indicate the value is dead.  */\n-      if ((TREE_CODE (type) == UNION_TYPE\n-\t   || TREE_CODE (type) == QUAL_UNION_TYPE)\n-\t  && ! cleared\n-\t  && ! CONSTRUCTOR_ELTS (exp))\n+      else if ((TREE_CODE (type) == UNION_TYPE\n+\t\t|| TREE_CODE (type) == QUAL_UNION_TYPE)\n+\t       && ! CONSTRUCTOR_ELTS (exp))\n \t/* If the constructor is empty, clear the union.  */\n \t{\n \t  clear_storage (target, expr_size (exp));\n@@ -4907,7 +4924,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t set the initial value as zero so we can fold the value into\n \t a constant.  But if more than one register is involved,\n \t this probably loses.  */\n-      else if (! cleared && GET_CODE (target) == REG && TREE_STATIC (exp)\n+      else if (GET_CODE (target) == REG && TREE_STATIC (exp)\n \t       && GET_MODE_SIZE (GET_MODE (target)) <= UNITS_PER_WORD)\n \t{\n \t  emit_move_insn (target, CONST0_RTX (GET_MODE (target)));\n@@ -4919,10 +4936,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t clear the whole structure first.  Don't do this if TARGET is a\n \t register whose mode size isn't equal to SIZE since clear_storage\n \t can't handle this case.  */\n-      else if (! cleared && size > 0\n-\t       && ((list_length (CONSTRUCTOR_ELTS (exp))\n-\t\t    != fields_length (type))\n-\t\t   || mostly_zeros_p (exp))\n+      else if (((list_length (CONSTRUCTOR_ELTS (exp)) != fields_length (type))\n+\t\t|| mostly_zeros_p (exp))\n \t       && (GET_CODE (target) != REG\n \t\t   || ((HOST_WIDE_INT) GET_MODE_SIZE (GET_MODE (target))\n \t\t       == size)))"}, {"sha": "c81312a8ee2b7610bd9eec5cf5a6a024967f7879", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2c430630da43fd1908fcb6c4b57d0a5221c86261", "patch": "@@ -1,3 +1,8 @@\n+2003-07-07  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR optimization/11059\n+\t* g++.dg/opt/emptyunion.C: New testcase.\n+\n 2003-07-07  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n             Eric Botcazou  <ebotcazou@libertysurf.fr>\n "}, {"sha": "105faed58440f34c569570a128c390e31d3d1692", "filename": "gcc/testsuite/g++.dg/opt/emptyunion.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Femptyunion.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c430630da43fd1908fcb6c4b57d0a5221c86261/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Femptyunion.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Femptyunion.C?ref=2c430630da43fd1908fcb6c4b57d0a5221c86261", "patch": "@@ -0,0 +1,13 @@\n+// PR optimization/11059\n+// This testcase ICEd because clear_by_pieces was called with zero length.\n+// { dg-do compile }\n+// { dg-options \"-O2\" }\n+\n+union uni {};\n+\n+int main() {\n+  uni *h;\n+\n+  h = (uni *)new uni();\n+}\n+"}]}