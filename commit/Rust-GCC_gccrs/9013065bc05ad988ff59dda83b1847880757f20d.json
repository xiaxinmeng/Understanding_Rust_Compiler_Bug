{"sha": "9013065bc05ad988ff59dda83b1847880757f20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAxMzA2NWJjMDVhZDk4OGZmNTlkZGE4M2IxODQ3ODgwNzU3ZjIwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T10:18:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-04-20T10:18:48Z"}, "message": "[multiple changes]\n\n2009-04-20  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.ads, einfo.adb (Is_Underlying_Record_View): New subprogram\n\t(Set_Is_Underlying_Record_View): New subprogram\n\n\t* sem_aggr.adb (Discr_Present, Resolve_Record_Aggregate): In case of\n\tprivate types with unknown discriminants use the underlying record view\n\tif available.\n\n\t* sem_ch3.adb (Build_Derived_Private_Type): Enable construction of the\n\tunderlying record view in the full view of private types whose parent\n\thas unknown discriminants.\n\t(Build_Derived_Record_Type): Avoid generating the class-wide entity\n\tassociated with an underlying record view.\n\t(Derived_Type_Declaration): Avoid deriving parent primitives in\n\tunderlying record views.\n\n\t* sem_ch6.adb (Check_Return_Subtype_Indication): Add support for\n\trecords with unknown discriminants.\n\n\t* sem_type.adb (Covers): Handle underlying record views.\n\t(Is_Ancestor): Add support for underlying record views.\n\n\t* exp_attr.adb (Expand_Attribute): Expand attribute 'size into a\n\tdispatching call if the type of the target object is tagged and has\n\tunknown discriminants.\n\n\t* exp_aggr.adb (Resolve_Record_Aggregate): Add support for records with\n\tunknown discriminants.\n\n\t* exp_disp.adb (Build_Dispatch_Tables): Avoid generating dispatch\n\ttables for internally built underlying record views.\n\n\t* sprint.adb (sprint_node_actual): Improve output of aggregates with an\n\tempty list of component associations.\n\n2009-04-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch10.adb: Minor reformatting\n\n\t* socket.c, g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.ads,\n\tg-socthi-mingw.ads, g-socthi.ads, g-socket.adb\n\t(GNAT.Sockets.Inet_Addr): Do not use non-portable inet_aton, instead use\n\tstandard inet_pton API (and emulate it on platforms that do not\n\tsupport it).\n\t(GNAT.Sockets.Thin.Inet_Pton, VMS case): Implement in terms of\n\tDECC$INET_ADDR, imported in Ada.\n\t(GNAT.Sockets.Thin.Inet_Pton, VxWorks and Windows cases): Use C\n\timplementation provided by GNAT runtime.\n\t(__gnat_inet_pton): C implementation of inet_pton(3) for VxWorks and\n\tWindows.\n\nFrom-SVN: r146391", "tree": {"sha": "d29723f3d3f8d6cc89ae08b5d744fe3c8fa864b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29723f3d3f8d6cc89ae08b5d744fe3c8fa864b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9013065bc05ad988ff59dda83b1847880757f20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9013065bc05ad988ff59dda83b1847880757f20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9013065bc05ad988ff59dda83b1847880757f20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9013065bc05ad988ff59dda83b1847880757f20d/comments", "author": null, "committer": null, "parents": [{"sha": "7289b80c09ea86586ad7663e76400878bf2a8b7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7289b80c09ea86586ad7663e76400878bf2a8b7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7289b80c09ea86586ad7663e76400878bf2a8b7e"}], "stats": {"total": 407, "additions": 338, "deletions": 69}, "files": [{"sha": "80163b61035d197a08a51ba4e6df0af076185575", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -1,3 +1,55 @@\n+2009-04-20  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.ads, einfo.adb (Is_Underlying_Record_View): New subprogram\n+\t(Set_Is_Underlying_Record_View): New subprogram\n+\n+\t* sem_aggr.adb (Discr_Present, Resolve_Record_Aggregate): In case of\n+\tprivate types with unknown discriminants use the underlying record view\n+\tif available.\n+\n+\t* sem_ch3.adb (Build_Derived_Private_Type): Enable construction of the\n+\tunderlying record view in the full view of private types whose parent\n+\thas unknown discriminants.\n+\t(Build_Derived_Record_Type): Avoid generating the class-wide entity\n+\tassociated with an underlying record view.\n+\t(Derived_Type_Declaration): Avoid deriving parent primitives in\n+\tunderlying record views.\n+\n+\t* sem_ch6.adb (Check_Return_Subtype_Indication): Add support for\n+\trecords with unknown discriminants.\n+\n+\t* sem_type.adb (Covers): Handle underlying record views.\n+\t(Is_Ancestor): Add support for underlying record views.\n+\n+\t* exp_attr.adb (Expand_Attribute): Expand attribute 'size into a\n+\tdispatching call if the type of the target object is tagged and has\n+\tunknown discriminants.\n+\n+\t* exp_aggr.adb (Resolve_Record_Aggregate): Add support for records with\n+\tunknown discriminants.\n+\n+\t* exp_disp.adb (Build_Dispatch_Tables): Avoid generating dispatch\n+\ttables for internally built underlying record views.\n+\n+\t* sprint.adb (sprint_node_actual): Improve output of aggregates with an\n+\tempty list of component associations.\n+\n+2009-04-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch10.adb: Minor reformatting\n+\n+\t* socket.c, g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.ads,\n+\tg-socthi-mingw.ads, g-socthi.ads, g-socket.adb\n+\t(GNAT.Sockets.Inet_Addr): Do not use non-portable inet_aton, instead use\n+\tstandard inet_pton API (and emulate it on platforms that do not\n+\tsupport it).\n+\t(GNAT.Sockets.Thin.Inet_Pton, VMS case): Implement in terms of\n+\tDECC$INET_ADDR, imported in Ada.\n+\t(GNAT.Sockets.Thin.Inet_Pton, VxWorks and Windows cases): Use C\n+\timplementation provided by GNAT runtime.\n+\t(__gnat_inet_pton): C implementation of inet_pton(3) for VxWorks and\n+\tWindows.\n+\n 2009-04-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat_ugn.texi: Add documentation for -fno-ivopts."}, {"sha": "0146c649699a0ce68e43fe674b3b6d68f771edd4", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -506,8 +506,8 @@ package body Einfo is\n    --    Overlays_Constant               Flag243\n    --    Is_RACW_Stub_Type               Flag244\n    --    Is_Private_Primitive            Flag245\n+   --    Is_Underlying_Record_View       Flag246\n \n-   --    (unused)                        Flag246\n    --    (unused)                        Flag247\n \n    -----------------------\n@@ -2066,6 +2066,11 @@ package body Einfo is\n       return Flag117 (Implementation_Base_Type (Id));\n    end Is_Unchecked_Union;\n \n+   function Is_Underlying_Record_View (Id : E) return B is\n+   begin\n+      return Flag246 (Id);\n+   end Is_Underlying_Record_View;\n+\n    function Is_Unsigned_Type (Id : E) return B is\n    begin\n       pragma Assert (Is_Type (Id));\n@@ -2675,7 +2680,6 @@ package body Einfo is\n \n    function Underlying_Record_View (Id : E) return E is\n    begin\n-      pragma Assert (Ekind (Id) = E_Record_Type);\n       return Node24 (Id);\n    end Underlying_Record_View;\n \n@@ -4543,6 +4547,12 @@ package body Einfo is\n       Set_Flag117 (Id, V);\n    end Set_Is_Unchecked_Union;\n \n+   procedure Set_Is_Underlying_Record_View (Id : E; V : B := True) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Record_Type);\n+      Set_Flag246 (Id, V);\n+   end Set_Is_Underlying_Record_View;\n+\n    procedure Set_Is_Unsigned_Type (Id : E; V : B := True) is\n    begin\n       pragma Assert (Is_Discrete_Or_Fixed_Point_Type (Id));\n@@ -6973,6 +6983,7 @@ package body Einfo is\n       W (\"Is_Trivial_Subprogram\",           Flag235 (Id));\n       W (\"Is_True_Constant\",                Flag163 (Id));\n       W (\"Is_Unchecked_Union\",              Flag117 (Id));\n+      W (\"Is_Underlying_Record_View\",       Flag246 (Id));\n       W (\"Is_Unsigned_Type\",                Flag144 (Id));\n       W (\"Is_VMS_Exception\",                Flag133 (Id));\n       W (\"Is_Valued_Procedure\",             Flag127 (Id));"}, {"sha": "87bddb9a7f2e7a920a0466522f4865c841a976b5", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -2633,6 +2633,13 @@ package Einfo is\n --       Present in all entities. Set only in record types to which the\n --       pragma Unchecked_Union has been validly applied.\n \n+--    Is_Underlying_Record_View (Flag246) [base type only]\n+--       Present in all entities. Set only in record types that represent the\n+--       underlying record view. This view is built for derivations of types\n+--       with unknown discriminants; it is a record with the same structure\n+--       than its corresponding record type, and whose parent is the full view\n+--       of the parent in the original type extension.\n+\n --    Is_Unsigned_Type (Flag144)\n --       Present in all types, but can be set only for discrete and fixed-point\n --       type and subtype entities. This flag is only valid if the entity is\n@@ -3560,10 +3567,13 @@ package Einfo is\n \n --    Underlying_Record_View (Node24)\n --       Present in record types. Set for record types that are extensions of\n---       types with unknown discriminants. Such types do not have a completion,\n---       but they cannot be used without having some discriminated view at\n---       hand. This view is a record type with the same structure, whose parent\n---       type is the full view of the parent in the original type extension.\n+--       types with unknown discriminants, and also set for internally built\n+--       underlying record views to reference its original record type. Record\n+--       types that are extensions of types with unknown discriminants do not\n+--       have a completion, but they cannot be used without having some\n+--       discriminated view at hand. This view is a record type with the same\n+--       structure, whose parent type is the full view of the parent in the\n+--       original type extension.\n \n --    Underlying_Type (synthesized)\n --       Applies to all entities. This is the identity function except in the\n@@ -5889,6 +5899,7 @@ package Einfo is\n    function Is_Trivial_Subprogram               (Id : E) return B;\n    function Is_True_Constant                    (Id : E) return B;\n    function Is_Unchecked_Union                  (Id : E) return B;\n+   function Is_Underlying_Record_View           (Id : E) return B;\n    function Is_Unsigned_Type                    (Id : E) return B;\n    function Is_VMS_Exception                    (Id : E) return B;\n    function Is_Valued_Procedure                 (Id : E) return B;\n@@ -6441,6 +6452,7 @@ package Einfo is\n    procedure Set_Is_Trivial_Subprogram           (Id : E; V : B := True);\n    procedure Set_Is_True_Constant                (Id : E; V : B := True);\n    procedure Set_Is_Unchecked_Union              (Id : E; V : B := True);\n+   procedure Set_Is_Underlying_Record_View       (Id : E; V : B := True);\n    procedure Set_Is_Unsigned_Type                (Id : E; V : B := True);\n    procedure Set_Is_VMS_Exception                (Id : E; V : B := True);\n    procedure Set_Is_Valued_Procedure             (Id : E; V : B := True);\n@@ -7132,6 +7144,7 @@ package Einfo is\n    pragma Inline (Is_Trivial_Subprogram);\n    pragma Inline (Is_Type);\n    pragma Inline (Is_Unchecked_Union);\n+   pragma Inline (Is_Underlying_Record_View);\n    pragma Inline (Is_Unsigned_Type);\n    pragma Inline (Is_VMS_Exception);\n    pragma Inline (Is_Valued_Procedure);\n@@ -7520,6 +7533,7 @@ package Einfo is\n    pragma Inline (Set_Is_Trivial_Subprogram);\n    pragma Inline (Set_Is_True_Constant);\n    pragma Inline (Set_Is_Unchecked_Union);\n+   pragma Inline (Set_Is_Underlying_Record_View);\n    pragma Inline (Set_Is_Unsigned_Type);\n    pragma Inline (Set_Is_VMS_Exception);\n    pragma Inline (Set_Is_Valued_Procedure);"}, {"sha": "0ffbb453adeec7119e0bed9b4172759c99e5c6a4", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -1869,7 +1869,9 @@ package body Exp_Aggr is\n \n          Parent_Typ := Etype (Current_Typ);\n          while Current_Typ /= Parent_Typ loop\n-            if Has_Discriminants (Parent_Typ) then\n+            if Has_Discriminants (Parent_Typ)\n+              and then not Has_Unknown_Discriminants (Parent_Typ)\n+            then\n                Parent_Disc := First_Discriminant (Parent_Typ);\n \n                --  We either get the association from the subtype indication"}, {"sha": "5772d58487e493192995cab485f8ed297137ce58", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -3908,8 +3908,11 @@ package body Exp_Attr is\n          --  For X'Size applied to an object of a class-wide type, transform\n          --  X'Size into a call to the primitive operation _Size applied to X.\n \n-         elsif Is_Class_Wide_Type (Ptyp) then\n-\n+         elsif Is_Class_Wide_Type (Ptyp)\n+           or else (Id = Attribute_Size\n+                      and then Is_Tagged_Type (Ptyp)\n+                      and then Has_Unknown_Discriminants (Ptyp))\n+         then\n             --  No need to do anything else compiling under restriction\n             --  No_Dispatching_Calls. During the semantic analysis we\n             --  already notified such violation.\n@@ -3936,7 +3939,7 @@ package body Exp_Attr is\n \n             Rewrite (N, New_Node);\n             Analyze_And_Resolve (N, Typ);\n-               return;\n+            return;\n \n          --  Case of known RM_Size of a type\n "}, {"sha": "85a51f3e633b4b1d5d0a1a4037261fa44528f76b", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -170,16 +170,18 @@ package body Exp_Disp is\n               and then Ekind (Defining_Entity (D)) /= E_Record_Subtype\n               and then not Is_Private_Type (Defining_Entity (D))\n             then\n-               --  We do not generate dispatch tables for the internal type\n+               --  We do not generate dispatch tables for the internal types\n                --  created for a type extension with unknown discriminants\n                --  The needed information is shared with the source type,\n                --  See Expand_N_Record_Extension.\n \n-               if not Comes_From_Source (Defining_Entity (D))\n-                 and then\n+               if Is_Underlying_Record_View (Defining_Entity (D))\n+                 or else\n+                  (not Comes_From_Source (Defining_Entity (D))\n+                     and then\n                    Has_Unknown_Discriminants (Etype (Defining_Entity (D)))\n-                 and then\n-                   not Comes_From_Source (First_Subtype (Defining_Entity (D)))\n+                     and then\n+                   not Comes_From_Source (First_Subtype (Defining_Entity (D))))\n                then\n                   null;\n "}, {"sha": "cc31d142c57dcb0db22b9f379be0f65da1450ee7", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -1278,6 +1278,7 @@ package body GNAT.Sockets is\n       use Interfaces.C.Strings;\n \n       Img    : aliased char_array := To_C (Image);\n+      Cp     : constant chars_ptr := To_Chars_Ptr (Img'Unchecked_Access);\n       Addr   : aliased C.int;\n       Res    : C.int;\n       Result : Inet_Addr_Type;\n@@ -1290,9 +1291,12 @@ package body GNAT.Sockets is\n          Raise_Socket_Error (SOSC.EINVAL);\n       end if;\n \n-      Res := Inet_Aton (To_Chars_Ptr (Img'Unchecked_Access), Addr'Address);\n+      Res := Inet_Pton (SOSC.AF_INET, Cp, Addr'Address);\n \n-      if Res = 0 then\n+      if Res < 0 then\n+         Raise_Socket_Error (Socket_Errno);\n+\n+      elsif Res = 0 then\n          Raise_Socket_Error (SOSC.EINVAL);\n       end if;\n "}, {"sha": "9c3ab0c0145b5d28ea3210426fac6de886a36c26", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -115,8 +115,9 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function Inet_Aton\n-     (Cp  : C.Strings.chars_ptr;\n+   function Inet_Pton\n+     (Af  : C.int;\n+      Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int;\n \n    function C_Ioctl\n@@ -233,7 +234,7 @@ private\n    pragma Import (Stdcall, C_Getpeername, \"getpeername\");\n    pragma Import (Stdcall, C_Getsockname, \"getsockname\");\n    pragma Import (Stdcall, C_Getsockopt, \"getsockopt\");\n-   pragma Import (Stdcall, Inet_Aton, \"inet_aton\");\n+   pragma Import (Stdcall, Inet_Pton, \"__gnat_inet_pton\");\n    pragma Import (Stdcall, C_Ioctl, \"ioctlsocket\");\n    pragma Import (Stdcall, C_Listen, \"listen\");\n    pragma Import (Stdcall, C_Recv, \"recv\");"}, {"sha": "9ca32f3c4f5eedadffa4a319662f648773ceb0b8", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -354,15 +354,15 @@ package body GNAT.Sockets.Thin is\n    package body Host_Error_Messages is separate;\n \n    ---------------\n-   -- Inet_Aton --\n+   -- Inet_Pton --\n    ---------------\n \n-   --  VMS does not support inet_aton(3), so emulate it here in terms of\n-   --  inet_addr(3). Note: unlike other C functions, inet_aton reports\n-   --  failure with a 0 return, and success with a non-zero return.\n+   --  VMS does not support inet_pton(3), so emulate it here in terms of\n+   --  inet_addr(3).\n \n-   function Inet_Aton\n-     (Cp  : C.Strings.chars_ptr;\n+   function Inet_Pton\n+     (Af  : C.int;\n+      Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int\n    is\n       use C.Strings;\n@@ -373,6 +373,11 @@ package body GNAT.Sockets.Thin is\n       function C_Inet_Addr (Cp : C.Strings.chars_ptr) return C.int;\n       pragma Import (C, C_Inet_Addr, \"DECC$INET_ADDR\");\n    begin\n+      if Af /= SOSC.AF_INET then\n+         Set_Socket_Errno (SOSC.EAFNOSUPPORT);\n+         return -1;\n+      end if;\n+\n       if Cp = Null_Ptr or else Inp = Null_Address then\n          return 0;\n       end if;\n@@ -387,13 +392,18 @@ package body GNAT.Sockets.Thin is\n       end if;\n \n       Res := C_Inet_Addr (Cp);\n+\n+      --  String is not a valid dotted quad\n+\n       if Res = -1 then\n          return 0;\n       end if;\n \n+      --  Success\n+\n       Conv.To_Pointer (Inp).all := Res;\n       return 1;\n-   end Inet_Aton;\n+   end Inet_Pton;\n \n    ----------------\n    -- Initialize --"}, {"sha": "1a6e5af99ae6b95c0d7ed75735da58c41100fc64", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -118,8 +118,9 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function Inet_Aton\n-     (Cp  : C.Strings.chars_ptr;\n+   function Inet_Pton\n+     (Af  : C.int;\n+      Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int;\n \n    function C_Ioctl"}, {"sha": "30c2b5057b05f2926f0ff880831ce67e5318d9db", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -116,8 +116,9 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function Inet_Aton\n-     (Cp  : C.Strings.chars_ptr;\n+   function Inet_Pton\n+     (Af  : C.int;\n+      Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int;\n \n    function C_Ioctl\n@@ -227,7 +228,7 @@ private\n    pragma Import (C, C_Getpeername, \"getpeername\");\n    pragma Import (C, C_Getsockname, \"getsockname\");\n    pragma Import (C, C_Getsockopt, \"getsockopt\");\n-   pragma Import (C, Inet_Aton, \"inet_aton\");\n+   pragma Import (C, Inet_Pton, \"__gnat_inet_pton\");\n    pragma Import (C, C_Listen, \"listen\");\n    pragma Import (C, C_Readv, \"readv\");\n    pragma Import (C, C_Select, \"select\");"}, {"sha": "720efcdee95e86c3f33030bff00ed40998bea6d0", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -117,8 +117,9 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function Inet_Aton\n-     (Cp  : C.Strings.chars_ptr;\n+   function Inet_Pton\n+     (Af  : C.int;\n+      Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int;\n \n    function C_Ioctl\n@@ -252,7 +253,7 @@ private\n    pragma Import (C, C_Getpeername, \"getpeername\");\n    pragma Import (C, C_Getsockname, \"getsockname\");\n    pragma Import (C, C_Getsockopt, \"getsockopt\");\n-   pragma Import (C, Inet_Aton, \"inet_aton\");\n+   pragma Import (C, Inet_Pton, \"inet_pton\");\n    pragma Import (C, C_Listen, \"listen\");\n    pragma Import (C, C_Readv, \"readv\");\n    pragma Import (C, C_Select, \"select\");"}, {"sha": "e29bca991c79447fd17e061a1625ac1aff0d5d12", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 37, "deletions": 7, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -2427,6 +2427,16 @@ package body Sem_Aggr is\n          Ancestor_Typ := Etype (Ancestor);\n          Loc          := Sloc (Ancestor);\n \n+         --  In case of private types with unknown discriminants use the\n+         --  underlying record view if it is available\n+\n+         if Has_Unknown_Discriminants (Ancestor_Typ)\n+           and then Present (Full_View (Ancestor_Typ))\n+           and then Present (Underlying_Record_View (Full_View (Ancestor_Typ)))\n+         then\n+            Ancestor_Typ := Underlying_Record_View (Full_View (Ancestor_Typ));\n+         end if;\n+\n          Ancestor_Is_Subtyp :=\n            Is_Entity_Name (Ancestor) and then Is_Type (Entity (Ancestor));\n \n@@ -2868,7 +2878,11 @@ package body Sem_Aggr is\n             Positional_Expr := Empty;\n          end if;\n \n-         if Has_Discriminants (Typ) then\n+         if Has_Unknown_Discriminants (Typ)\n+           and then Present (Underlying_Record_View (Typ))\n+         then\n+            Discrim := First_Discriminant (Underlying_Record_View (Typ));\n+         elsif Has_Discriminants (Typ) then\n             Discrim := First_Discriminant (Typ);\n          else\n             Discrim := Empty;\n@@ -2948,7 +2962,10 @@ package body Sem_Aggr is\n       --  this may be a problem. What should be done in this case is\n       --  to reuse itypes as much as possible.\n \n-      if Has_Discriminants (Typ) then\n+      if Has_Discriminants (Typ)\n+        or else (Has_Unknown_Discriminants (Typ)\n+                   and then Present (Underlying_Record_View (Typ)))\n+      then\n          Build_Constrained_Itype : declare\n             Loc         : constant Source_Ptr := Sloc (N);\n             Indic       : Node_Id;\n@@ -2964,10 +2981,23 @@ package body Sem_Aggr is\n                Next (New_Assoc);\n             end loop;\n \n-            Indic :=\n-              Make_Subtype_Indication (Loc,\n-                Subtype_Mark => New_Occurrence_Of (Base_Type (Typ), Loc),\n-                Constraint  => Make_Index_Or_Discriminant_Constraint (Loc, C));\n+            if Has_Unknown_Discriminants (Typ)\n+              and then Present (Underlying_Record_View (Typ))\n+            then\n+               Indic :=\n+                 Make_Subtype_Indication (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Underlying_Record_View (Typ), Loc),\n+                   Constraint  =>\n+                     Make_Index_Or_Discriminant_Constraint (Loc, C));\n+            else\n+               Indic :=\n+                 Make_Subtype_Indication (Loc,\n+                   Subtype_Mark =>\n+                     New_Occurrence_Of (Base_Type (Typ), Loc),\n+                   Constraint  =>\n+                     Make_Index_Or_Discriminant_Constraint (Loc, C));\n+            end if;\n \n             Def_Id := Create_Itype (Ekind (Typ), N);\n \n@@ -3044,7 +3074,7 @@ package body Sem_Aggr is\n                end if;\n             end if;\n \n-            Parent_Typ  := Base_Type (Typ);\n+            Parent_Typ := Base_Type (Typ);\n             while Parent_Typ /= Root_Typ loop\n                Prepend_Elmt (Parent_Typ, To => Parent_Typ_List);\n                Parent_Typ := Etype (Parent_Typ);"}, {"sha": "cd713c84f77192f8d0f576aa036ca0516c3e52b3", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -774,7 +774,7 @@ package body Sem_Ch10 is\n             Version_Update (N, Lib_Unit);\n          end if;\n \n-         --  If this is a child unit, generate references to the parents.\n+         --  If this is a child unit, generate references to the parents\n \n          if Nkind (Defining_Unit_Name (Specification (Unit_Node))) =\n                                              N_Defining_Program_Unit_Name\n@@ -785,8 +785,8 @@ package body Sem_Ch10 is\n          end if;\n       end if;\n \n-      --  If it is a child unit, the parent must be elaborated first\n-      --  and we update version, since we are dependent on our parent.\n+      --  If it is a child unit, the parent must be elaborated first and we\n+      --  update version, since we are dependent on our parent.\n \n       if Is_Child_Spec (Unit_Node) then\n "}, {"sha": "b72fb2f06692341a179240492920afed08f33c4c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 65, "deletions": 12, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -5523,29 +5523,38 @@ package body Sem_Ch3 is\n \n    begin\n       if Is_Tagged_Type (Parent_Type) then\n+         Full_P := Full_View (Parent_Type);\n \n          --  A type extension of a type with unknown discriminants is an\n          --  indefinite type that the back-end cannot handle directly.\n          --  We treat it as a private type, and build a completion that is\n          --  derived from the full view of the parent, and hopefully has\n-         --  known discriminants.  The implementation of more complex chains\n-         --  of derivation with unknown discriminants is left to the more\n-         --  enterprising reader.\n+         --  known discriminants.\n+\n+         --  If the full view of the parent type has its underlying record view\n+         --  available then use it to generate the underlying record view of\n+         --  this Derived_Type (required to handle chains of derivations with\n+         --  unknown discriminants).\n+\n+         --  Minor optimization: We avoid the generation of useless underlying\n+         --  record view entities if the private type declaration has unknown\n+         --  discriminants but its corresponding full view has no discriminants\n \n          if Has_Unknown_Discriminants (Parent_Type)\n-           and then Present (Full_View (Parent_Type))\n+           and then Present (Full_P)\n+           and then (Has_Discriminants (Full_P)\n+                      or else Present (Underlying_Record_View (Full_P)))\n            and then not In_Open_Scopes (Par_Scope)\n-           and then not Is_Completion\n            and then Expander_Active\n          then\n             declare\n                Full_Der : constant Entity_Id :=\n                             Make_Defining_Identifier (Loc,\n                               Chars => New_Internal_Name ('T'));\n-               Decl     : Node_Id;\n                New_Ext  : constant Node_Id :=\n                             Copy_Separate_Tree\n                               (Record_Extension_Part (Type_Definition (N)));\n+               Decl     : Node_Id;\n \n             begin\n                Build_Derived_Record_Type\n@@ -5566,21 +5575,53 @@ package body Sem_Ch3 is\n                          New_Copy_Tree\n                            (Subtype_Indication (Type_Definition (N))),\n                        Record_Extension_Part => New_Ext));\n+\n                Set_Has_Private_Declaration (Full_Der);\n                Set_Has_Private_Declaration (Derived_Type);\n \n+               --  If the parent type has its underlying record view then we\n+               --  force here its use to derive the new underlying record view.\n+\n+               if Present (Underlying_Record_View (Full_P)) then\n+                  pragma Assert\n+                    (Nkind (Subtype_Indication (Type_Definition (Decl)))\n+                       = N_Identifier);\n+                  Set_Entity (Subtype_Indication (Type_Definition (Decl)),\n+                    Underlying_Record_View (Full_P));\n+               end if;\n+\n                Install_Private_Declarations (Par_Scope);\n                Install_Visible_Declarations (Par_Scope);\n                Insert_After (N, Decl);\n+\n+               --  Mark the entity as underlying record view before its\n+               --  analysis. Done to avoid the generation of its list of\n+               --  primitives (which is not really required for this entity)\n+               --  and thus avoid supurious errors associated with missing\n+               --  overriding of its abstract primitives (because they are\n+               --  overriden in the list of primitives of Derived_Type).\n+\n+               Set_Ekind (Full_Der, E_Record_Type);\n+               Set_Is_Underlying_Record_View (Full_Der);\n+\n                Analyze (Decl);\n+\n+               pragma Assert (Has_Discriminants (Full_Der)\n+                 and then not Has_Unknown_Discriminants (Full_Der));\n+\n                Uninstall_Declarations (Par_Scope);\n \n                --  Freeze the underlying record view, to prevent generation\n                --  of useless dispatching information, which is simply shared\n                --  with the real derived type.\n \n                Set_Is_Frozen (Full_Der);\n-               Set_Underlying_Record_View (Derived_Type, Full_Der);\n+\n+               --  Keep fully linked the real entity and its underlying record\n+               --  view entity\n+\n+               Set_Underlying_Record_View (Derived_Type, Base_Type (Full_Der));\n+               Set_Underlying_Record_View (Base_Type (Full_Der), Derived_Type);\n             end;\n \n          --  if discriminants are known, build derived record\n@@ -7084,7 +7125,13 @@ package body Sem_Ch3 is\n             Set_Is_Controlled (Derived_Type, Is_Controlled (Parent_Base));\n          end if;\n \n-         Make_Class_Wide_Type (Derived_Type);\n+         --  Minor optimization: There is no need to generate the class wide\n+         --  entity associated with an underlying record view\n+\n+         if not Is_Underlying_Record_View (Derived_Type) then\n+            Make_Class_Wide_Type (Derived_Type);\n+         end if;\n+\n          Set_Is_Abstract_Type (Derived_Type, Abstract_Present (Type_Def));\n \n          if Has_Discriminants (Derived_Type)\n@@ -7279,10 +7326,13 @@ package body Sem_Ch3 is\n          end if;\n       end if;\n \n-      --  Update the class_wide type, which shares the now-completed\n-      --  entity list with its specific type.\n+      --  Update the class_wide type, which shares the now-completed entity\n+      --  list with its specific type. In case of underlying record views\n+      --  we do not generate the corresponding class wide entity.\n \n-      if Is_Tagged then\n+      if Is_Tagged\n+        and then not Is_Underlying_Record_View (Derived_Type)\n+      then\n          Set_First_Entity\n            (Class_Wide_Type (Derived_Type), First_Entity (Derived_Type));\n          Set_Last_Entity\n@@ -13143,7 +13193,10 @@ package body Sem_Ch3 is\n          Error_Msg_N (\"null exclusion can only apply to an access type\", N);\n       end if;\n \n-      Build_Derived_Type (N, Parent_Type, T, Is_Completion);\n+      --  Avoid deriving parent primitives in underlying record views\n+\n+      Build_Derived_Type (N, Parent_Type, T, Is_Completion,\n+        Derive_Subps => not Is_Underlying_Record_View (T));\n \n       --  AI-419: The parent type of an explicitly limited derived type must\n       --  be a limited type or a limited interface."}, {"sha": "2670c3d25317b73cb7708eae40c1fd96f7769453", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -584,11 +584,19 @@ package body Sem_Ch6 is\n             end if;\n \n          --  Subtype_indication case; check that the types are the same, and\n-         --  statically match if appropriate. A null exclusion may be present\n-         --  on the return type, on the function specification, on the object\n-         --  declaration or on the subtype itself.\n+         --  statically match if appropriate. Handle also record types with\n+         --  unknown discriminants for which we have built the underlying\n+         --  record view.\n+\n+         elsif Base_Type (R_Stm_Type) = Base_Type (R_Type)\n+           or else (Is_Underlying_Record_View (Base_Type (R_Stm_Type))\n+                      and then Underlying_Record_View (Base_Type (R_Stm_Type))\n+                                 = Base_Type (R_Type))\n+         then\n+            --  A null exclusion may be present on the return type, on the\n+            --  function specification, on the object declaration or on the\n+            --  subtype itself.\n \n-         elsif Base_Type (R_Stm_Type) = Base_Type (R_Type) then\n             if Is_Access_Type (R_Type)\n               and then\n                (Can_Never_Be_Null (R_Type)"}, {"sha": "e5f790011c1e972db05e7a0babcd17cab0b53802", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -745,6 +745,18 @@ package body Sem_Type is\n       else\n          BT1 := Base_Type (T1);\n          BT2 := Base_Type (T2);\n+\n+         --  Handle underlying view of records with unknown discriminants\n+         --  using the original entity that motivated the construction of\n+         --  this underlying record view (see Build_Derived_Private_Type).\n+\n+         if Is_Underlying_Record_View (BT1) then\n+            BT1 := Underlying_Record_View (BT1);\n+         end if;\n+\n+         if Is_Underlying_Record_View (BT2) then\n+            BT2 := Underlying_Record_View (BT2);\n+         end if;\n       end if;\n \n       --  Simplest case: same types are compatible, and types that have the\n@@ -2486,28 +2498,45 @@ package body Sem_Type is\n    -----------------\n \n    function Is_Ancestor (T1, T2 : Entity_Id) return Boolean is\n+      BT1 : Entity_Id;\n+      BT2 : Entity_Id;\n       Par : Entity_Id;\n \n    begin\n-      if Base_Type (T1) = Base_Type (T2) then\n+      BT1 := Base_Type (T1);\n+      BT2 := Base_Type (T2);\n+\n+      --  Handle underlying view of records with unknown discriminants\n+      --  using the original entity that motivated the construction of\n+      --  this underlying record view (see Build_Derived_Private_Type).\n+\n+      if Is_Underlying_Record_View (BT1) then\n+         BT1 := Underlying_Record_View (BT1);\n+      end if;\n+\n+      if Is_Underlying_Record_View (BT2) then\n+         BT2 := Underlying_Record_View (BT2);\n+      end if;\n+\n+      if BT1 = BT2 then\n          return True;\n \n       elsif Is_Private_Type (T1)\n         and then Present (Full_View (T1))\n-        and then Base_Type (T2) = Base_Type (Full_View (T1))\n+        and then BT2 = Base_Type (Full_View (T1))\n       then\n          return True;\n \n       else\n-         Par := Etype (T2);\n+         Par := Etype (BT2);\n \n          loop\n             --  If there was a error on the type declaration, do not recurse\n \n             if Error_Posted (Par) then\n                return False;\n \n-            elsif Base_Type (T1) = Base_Type (Par)\n+            elsif BT1 = Base_Type (Par)\n               or else (Is_Private_Type (T1)\n                          and then Present (Full_View (T1))\n                          and then Base_Type (Par) = Base_Type (Full_View (T1)))\n@@ -2516,7 +2545,7 @@ package body Sem_Type is\n \n             elsif Is_Private_Type (Par)\n               and then Present (Full_View (Par))\n-              and then Full_View (Par) = Base_Type (T1)\n+              and then Full_View (Par) = BT1\n             then\n                return True;\n "}, {"sha": "5ddaa39d6a2de5fa69a206ff8330198ff6686153", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -62,8 +62,11 @@ extern void __gnat_insert_socket_in_set (fd_set *, int);\n extern int __gnat_is_socket_in_set (fd_set *, int);\n extern fd_set *__gnat_new_socket_set (fd_set *);\n extern void __gnat_remove_socket_from_set (fd_set *, int);\n-extern void __gnat_reset_socket_set (fd_set *set);\n+extern void __gnat_reset_socket_set (fd_set *);\n extern int  __gnat_get_h_errno (void);\n+#if defined (__vxworks) || defined (_WIN32)\n+extern int  __gnat_inet_pton (int, const char *, void *);\n+#endif\n \f\n /* Disable the sending of SIGPIPE for writes on a broken stream */\n \n@@ -397,6 +400,46 @@ __gnat_get_h_errno (void) {\n #endif\n }\n \n+#if defined (__vxworks) || defined (_WIN32)\n+int\n+__gnat_inet_pton (int af, const char *src, void *dst) {\n+  switch (af) {\n+#if defined (_WIN32) && defined (AF_INET6)\n+    case AF_INET6:\n+#endif\n+    case AF_INET:\n+      break;\n+    default:\n+      errno = EAFNOSUPPORT;\n+      return -1;\n+  }\n+\n+#ifdef __vxworks\n+  return (inet_aton (src, dst) == OK);\n+#else\n+  struct sockaddr_storage ss;\n+  int sslen = sizeof ss;\n+  int rc;\n+\n+  ss.ss_family = af;\n+  rc = WSAStringToAddress (src, af, NULL, (struct sockaddr *)&ss, &sslen);\n+  if (rc > 0) {\n+    switch (af) {\n+      case AF_INET:\n+        *(struct in_addr *)dst = ((struct sockaddr_in *)&ss)->sin_addr;\n+        break;\n+#ifdef AF_INET6\n+      case AF_INET6:\n+        *(struct in6_addr *)dst = ((struct sockaddr_in6 *)&ss)->sin6_addr;\n+        break;\n+#endif\n+    }\n+  }\n+  return rc;\n+#endif\n+}\n+#endif\n+\n #else\n #warning Sockets are not supported on this platform\n #endif /* defined(HAVE_SOCKETS) */"}, {"sha": "3ae79182c8cc1724c6d9afd531843e6fe1c68b0e", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9013065bc05ad988ff59dda83b1847880757f20d/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=9013065bc05ad988ff59dda83b1847880757f20d", "patch": "@@ -961,12 +961,16 @@ package body Sprint is\n                if Present (Expressions (Node)) then\n                   Sprint_Comma_List (Expressions (Node));\n \n-                  if Present (Component_Associations (Node)) then\n+                  if Present (Component_Associations (Node))\n+                    and then not Is_Empty_List (Component_Associations (Node))\n+                  then\n                      Write_Str (\", \");\n                   end if;\n                end if;\n \n-               if Present (Component_Associations (Node)) then\n+               if Present (Component_Associations (Node))\n+                 and then not Is_Empty_List (Component_Associations (Node))\n+               then\n                   Indent_Begin;\n \n                   declare"}]}