{"sha": "2af5e9e20d8021b239970bd72d78ec60efc38f2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmFmNWU5ZTIwZDgwMjFiMjM5OTcwYmQ3MmQ3OGVjNjBlZmMzOGYyYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T15:46:21Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-27T15:46:21Z"}, "message": "(main, args case 'D'): Rewrite to avoid uninitialized var.\n\n(main, args case 'A'): Delete unused var P1.\n(rescan): Initialize STR.\n(do_xifdef, do_endif): Initialize arg to skip_to_end_of_comment.\n\nFrom-SVN: r6641", "tree": {"sha": "de3cea444bda8bf10060100224e6615d39108a1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de3cea444bda8bf10060100224e6615d39108a1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2af5e9e20d8021b239970bd72d78ec60efc38f2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af5e9e20d8021b239970bd72d78ec60efc38f2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2af5e9e20d8021b239970bd72d78ec60efc38f2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2af5e9e20d8021b239970bd72d78ec60efc38f2b/comments", "author": null, "committer": null, "parents": [{"sha": "79be3418ff856cbc29c390e53a0a5f99a4ca6fdb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79be3418ff856cbc29c390e53a0a5f99a4ca6fdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79be3418ff856cbc29c390e53a0a5f99a4ca6fdb"}], "stats": {"total": 76, "additions": 37, "deletions": 39}, "files": [{"sha": "b8e5659534b4564688bc862370bffc44998294d1", "filename": "gcc/cccp.c", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2af5e9e20d8021b239970bd72d78ec60efc38f2b/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2af5e9e20d8021b239970bd72d78ec60efc38f2b/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=2af5e9e20d8021b239970bd72d78ec60efc38f2b", "patch": "@@ -1,7 +1,7 @@\n /* C Compatible Compiler Preprocessor (CCCP)\n-Copyright (C) 1986, 1987, 1989, 1992, 1993 Free Software Foundation, Inc.\n-                    Written by Paul Rubin, June 1986\n-\t\t    Adapted to ANSI C, Richard Stallman, Jan 1987\n+   Copyright (C) 1986, 87, 89, 92, 93, 1994 Free Software Foundation, Inc.\n+   Written by Paul Rubin, June 1986\n+   Adapted to ANSI C, Richard Stallman, Jan 1987\n \n This program is free software; you can redistribute it and/or modify it\n under the terms of the GNU General Public License as published by the\n@@ -1418,23 +1418,17 @@ main (argc, argv)\n \tbreak;\n \n       case 'D':\n-\t{\n-\t  char *p, *p1;\n-\n-\t  if (argv[i][2] != 0)\n-\t    p = argv[i] + 2;\n-\t  else if (i + 1 == argc)\n-\t    fatal (\"Macro name missing after -D option\");\n-\t  else\n-\t    p = argv[++i];\n-\n-\t  pend_defs[i] = p;\n-\t}\n+\tif (argv[i][2] != 0)\n+\t  pend_defs[i] = argv[i] + 2;\n+\telse if (i + 1 == argc)\n+\t  fatal (\"Macro name missing after -D option\");\n+\telse\n+\t  i++, pend_defs[i] = argv[i];\n \tbreak;\n \n       case 'A':\n \t{\n-\t  char *p, *p1;\n+\t  char *p;\n \n \t  if (argv[i][2] != 0)\n \t    p = argv[i] + 2;\n@@ -3199,27 +3193,31 @@ do { ip = &instack[indepth];\t\t\\\n   /* Come here to return -- but first give an error message\n      if there was an unterminated successful conditional.  */\n  ending:\n-  if (if_stack != ip->if_stack) {\n-    char *str;\n-    switch (if_stack->type) {\n-    case T_IF:\n-      str = \"if\";\n-      break;\n-    case T_IFDEF:\n-      str = \"ifdef\";\n-      break;\n-    case T_IFNDEF:\n-      str = \"ifndef\";\n-      break;\n-    case T_ELSE:\n-      str = \"else\";\n-      break;\n-    case T_ELIF:\n-      str = \"elif\";\n-      break;\n-    }\n-    error_with_line (line_for_error (if_stack->lineno),\n-\t\t     \"unterminated `#%s' conditional\", str);\n+  if (if_stack != ip->if_stack)\n+    {\n+      char *str = \"unknown\";\n+\n+      switch (if_stack->type)\n+\t{\n+\tcase T_IF:\n+\t  str = \"if\";\n+\t  break;\n+\tcase T_IFDEF:\n+\t  str = \"ifdef\";\n+\t  break;\n+\tcase T_IFNDEF:\n+\t  str = \"ifndef\";\n+\t  break;\n+\tcase T_ELSE:\n+\t  str = \"else\";\n+\t  break;\n+\tcase T_ELIF:\n+\t  str = \"elif\";\n+\t  break;\n+\t}\n+\n+      error_with_line (line_for_error (if_stack->lineno),\n+\t\t       \"unterminated `#%s' conditional\", str);\n   }\n   if_stack = ip->if_stack;\n }\n@@ -6651,7 +6649,7 @@ do_xifdef (buf, limit, op, keyword)\n \t;\n       else if (c == '/' && p != ip->bufp && *p == '*') {\n \t/* Skip this comment.  */\n-\tint junk;\n+\tint junk = 0;\n \tU_CHAR *save_bufp = ip->bufp;\n \tip->bufp = p + 1;\n \tp = skip_to_end_of_comment (ip, &junk, 1);\n@@ -7046,7 +7044,7 @@ do_endif (buf, limit, op, keyword)\n \tcase '/':\n \t  if (p != ep && *p == '*') {\n \t    /* Skip this comment.  */\n-\t    int junk;\n+\t    int junk = 0;\n \t    U_CHAR *save_bufp = ip->bufp;\n \t    ip->bufp = p + 1;\n \t    p = skip_to_end_of_comment (ip, &junk, 1);"}]}