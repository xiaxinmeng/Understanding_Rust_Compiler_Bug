{"sha": "e5958492a23a325cc3587a214e5fb6d6ae27f6ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5NTg0OTJhMjNhMzI1Y2MzNTg3YTIxNGU1ZmI2ZDZhZTI3ZjZjYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-16T11:06:37Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-11-16T11:06:37Z"}, "message": "({MASK,TARGET}_{OPEN_VMS,FLOAT_VAX}): New macros.\n\n(TARGET_SWITCHES): Add float-vax and float-ieee.\n({FUNCTION,LIBCALL}_VALUE, FUNCTION_VALUE_REGNO_P): R1 and R33 are also return\nregisters.\n(ASM_OUTPUT_DOUBLE): Support both floating-point formats.\n(PRINT_OPERAND_FUNCT_VALID_P): Add ',' and '-'.\n\nFrom-SVN: r13184", "tree": {"sha": "8b5714dacbc6879f613d3de67db2e664c865d87e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8b5714dacbc6879f613d3de67db2e664c865d87e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5958492a23a325cc3587a214e5fb6d6ae27f6ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5958492a23a325cc3587a214e5fb6d6ae27f6ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5958492a23a325cc3587a214e5fb6d6ae27f6ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5958492a23a325cc3587a214e5fb6d6ae27f6ca/comments", "author": null, "committer": null, "parents": [{"sha": "89cfc2c663f6fef2ca8e7462ca798d22a2bdfa3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89cfc2c663f6fef2ca8e7462ca798d22a2bdfa3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89cfc2c663f6fef2ca8e7462ca798d22a2bdfa3c"}], "stats": {"total": 52, "additions": 42, "deletions": 10}, "files": [{"sha": "2c41d9db3a3e1208a0c3fce68da810ba58ae1507", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5958492a23a325cc3587a214e5fb6d6ae27f6ca/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5958492a23a325cc3587a214e5fb6d6ae27f6ca/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e5958492a23a325cc3587a214e5fb6d6ae27f6ca", "patch": "@@ -162,6 +162,17 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n #define MASK_BYTE_OPS 256\n #define TARGET_BYTE_OPS\t(target_flags & MASK_BYTE_OPS)\n \n+/* This means we are compiling for openVMS.  */\n+\n+#define MASK_OPEN_VMS\t256\n+#define TARGET_OPEN_VMS (target_flags & MASK_OPEN_VMS)\n+\n+/* This means we handle floating points in VAX F- (float)\n+   or G- (double) Format.  */\n+\n+#define MASK_FLOAT_VAX 512\n+#define TARGET_FLOAT_VAX (target_flags & MASK_FLOAT_VAX)\n+\n /* Macro to define tables used to set the flags.\n    This is a list in braces of pairs in braces,\n    each pair being { \"NAME\", VALUE }\n@@ -179,6 +190,8 @@ extern enum alpha_fp_trap_mode alpha_fptm;\n     {\"ieee\", MASK_IEEE|MASK_IEEE_CONFORMANT},\t\\\n     {\"ieee-with-inexact\", MASK_IEEE_WITH_INEXACT|MASK_IEEE_CONFORMANT}, \\\n     {\"build-constants\", MASK_BUILD_CONSTANTS},  \\\n+    {\"float-vax\", MASK_FLOAT_VAX},\t\t\\\n+    {\"float-ieee\", -MASK_FLOAT_VAX},\t\t\\\n     {\"byte\", MASK_BYTE_OPS},\t\t\t\\\n     {\"\", TARGET_DEFAULT | TARGET_CPU_DEFAULT} }\n \n@@ -846,18 +859,24 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n    $f0 for floating-point functions.  */\n \n #define FUNCTION_VALUE(VALTYPE, FUNC)\t\\\n-  gen_rtx (REG,\t\t\t\t\t\t\\\n-\t   (INTEGRAL_MODE_P (TYPE_MODE (VALTYPE))\t\\\n-\t    && TYPE_PRECISION (VALTYPE) < BITS_PER_WORD) \\\n-\t   ? word_mode : TYPE_MODE (VALTYPE),\t\t\\\n-\t   TARGET_FPREGS && TREE_CODE (VALTYPE) == REAL_TYPE ? 32 : 0)\n+  gen_rtx (REG,\t\t\t\t\t\t\t\\\n+\t   (INTEGRAL_MODE_P (TYPE_MODE (VALTYPE))\t\t\\\n+\t    && TYPE_PRECISION (VALTYPE) < BITS_PER_WORD) \t\\\n+\t   ? word_mode : TYPE_MODE (VALTYPE),\t\t\t\\\n+\t   ((TARGET_FPREGS\t\t\t\t\t\\\n+\t     && (TREE_CODE (VALTYPE) == REAL_TYPE\t\t\\\n+\t\t || TREE_CODE (VALTYPE) == COMPLEX_TYPE))\t\\\n+\t    ? 32 : 0))\n \n /* Define how to find the value returned by a library function\n    assuming the value has mode MODE.  */\n \n #define LIBCALL_VALUE(MODE)\t\\\n-   gen_rtx (REG, MODE,\t\t\\\n-\t    TARGET_FPREGS && GET_MODE_CLASS (MODE) == MODE_FLOAT ? 32 : 0)\n+   gen_rtx (REG, MODE,\t\t\t\t\t\t\\\n+\t    (TARGET_FPREGS\t\t\t\t\t\\\n+\t     && (GET_MODE_CLASS (MODE) == MODE_FLOAT\t\t\\\n+\t\t || GET_MODE_CLASS (MODE) == MODE_COMPLEX_FLOAT) \\\n+\t     ? 32 : 0))\n \n /* The definition of this macro implies that there are cases where\n    a scalar value cannot be returned in registers.\n@@ -872,7 +891,8 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n /* 1 if N is a possible register number for a function value\n    as seen by the caller.  */\n \n-#define FUNCTION_VALUE_REGNO_P(N) ((N) == 0 || (N) == 32)\n+#define FUNCTION_VALUE_REGNO_P(N)  \\\n+  ((N) == 0 || (N) == 1 || (N) == 32 || (N) == 33)\n \n /* 1 if N is a possible register number for function argument passing.\n    On Alpha, these are $16-$21 and $f16-$f21.  */\n@@ -1028,6 +1048,11 @@ extern struct rtx_def *alpha_builtin_saveregs ();\n extern struct rtx_def *alpha_compare_op0, *alpha_compare_op1;\n extern int alpha_compare_fp_p;\n \n+/* Make (or fake) .linkage entry for function call.\n+\n+   IS_LOCAL is 0 if name is used in call, 1 if name is used in definition.  */\n+extern void alpha_need_linkage ();\n+\n /* This macro produces the initial definition of a function name.  On the\n    Alpha, we need to save the function name for the prologue and epilogue.  */\n \n@@ -1812,7 +1837,7 @@ literal_section ()\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tchar str[30];\t\t\t\t\t\t\t\\\n \tREAL_VALUE_TO_DECIMAL (VALUE, \"%.20e\", str);\t\t\t\\\n-\tfprintf (FILE, \"\\t.t_floating %s\\n\", str);\t\t\t\\\n+\tfprintf (FILE, \"\\t.%c_floating %s\\n\", (TARGET_FLOAT_VAX)?'g':'t', str);\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   }\n \n@@ -2004,10 +2029,17 @@ literal_section ()\t\t\t\t\t\t\\\n \n    +    Generates trap-mode suffix for instructions that accept the\n \tsui suffix (cvtqt and cvtqs).\n+\n+   ,    Generates single precision suffix for floating point\n+\tinstructions (s for IEEE, f for VAX)\n+\n+   -\tGenerates double precision suffix for floating point\n+\tinstructions (t for IEEE, g for VAX)\n    */\n \n #define PRINT_OPERAND_PUNCT_VALID_P(CODE)\t\t\t\t\\\n-  ((CODE) == '&' || (CODE) == '\\'' || (CODE) == ')' || (CODE) == '+')\n+  ((CODE) == '&' || (CODE) == '\\'' || (CODE) == ')' || (CODE) == '+'\t\\\n+   || (CODE) == ',' || (CODE) == '-')\n \f\n /* Print a memory address as an operand to reference that memory location.  */\n "}]}