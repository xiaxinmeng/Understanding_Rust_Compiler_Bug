{"sha": "27be025d191e308b706cdd7f1f90f0fe490f9a2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZTAyNWQxOTFlMzA4YjcwNmNkZDdmMWY5MGYwZmU0OTBmOWEyYw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2017-08-14T20:21:44Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2017-08-14T20:21:44Z"}, "message": "PR c/81117 - Improve buffer overflow checking in strncpy - part 2\n\ngcc/ChangeLog:\n\n\tPR c/81117\n\t* doc/extend.texi (attribute nonstring): Document new attribute.\n\ngcc/c-family/ChangeLog:\n\n\tPR c/81117\n\t* c-attribs.c (c_common_attribute_table): Add nonstring entry.\n\t(handle_nonstring_attribute): New function.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c/81117\n\t* c-c++-common/attr-nonstring-1.c: New test.\n\nFrom-SVN: r251100", "tree": {"sha": "a055a2735dded9ec61ad2030b010e8a12e6dbd78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a055a2735dded9ec61ad2030b010e8a12e6dbd78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27be025d191e308b706cdd7f1f90f0fe490f9a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27be025d191e308b706cdd7f1f90f0fe490f9a2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27be025d191e308b706cdd7f1f90f0fe490f9a2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27be025d191e308b706cdd7f1f90f0fe490f9a2c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da67acb9b37cf139da014f5bc11e2dbf25a7d597", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da67acb9b37cf139da014f5bc11e2dbf25a7d597", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da67acb9b37cf139da014f5bc11e2dbf25a7d597"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "5902989dcd770e987275e96529a6910e583253db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27be025d191e308b706cdd7f1f90f0fe490f9a2c", "patch": "@@ -1,3 +1,8 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* doc/extend.texi (attribute nonstring): Document new attribute.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "a769350d69e7be9b25701938be0f2bf406945aa6", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=27be025d191e308b706cdd7f1f90f0fe490f9a2c", "patch": "@@ -1,3 +1,9 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* c-attribs.c (c_common_attribute_table): Add nonstring entry.\n+\t(handle_nonstring_attribute): New function.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}, {"sha": "ad2289cd91f68837cfece28b33ecdd98b8a6e981", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=27be025d191e308b706cdd7f1f90f0fe490f9a2c", "patch": "@@ -116,6 +116,7 @@ static tree handle_deprecated_attribute (tree *, tree, tree, int,\n static tree handle_vector_size_attribute (tree *, tree, tree, int,\n \t\t\t\t\t  bool *);\n static tree handle_nonnull_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_nonstring_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n static tree handle_cleanup_attribute (tree *, tree, tree, int, bool *);\n static tree handle_warn_unused_result_attribute (tree *, tree, tree, int,\n@@ -270,6 +271,8 @@ const struct attribute_spec c_common_attribute_table[] =\n \t\t\t      handle_tls_model_attribute, false },\n   { \"nonnull\",                0, -1, false, true, true,\n \t\t\t      handle_nonnull_attribute, false },\n+  { \"nonstring\",              0, 0, true, false, false,\n+\t\t\t      handle_nonstring_attribute, false },\n   { \"nothrow\",                0, 0, true,  false, false,\n \t\t\t      handle_nothrow_attribute, false },\n   { \"may_alias\",\t      0, 0, false, true, false, NULL, false },\n@@ -2970,6 +2973,48 @@ handle_nonnull_attribute (tree *node, tree ARG_UNUSED (name),\n   return NULL_TREE;\n }\n \n+/* Handle the \"nonstring\" variable attribute.  */\n+\n+static tree\n+handle_nonstring_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n+\t\t\t    int ARG_UNUSED (flags), bool *no_add_attrs)\n+{\n+  gcc_assert (!args);\n+  tree_code code = TREE_CODE (*node);\n+\n+  if (VAR_P (*node)\n+      || code == FIELD_DECL\n+      || code == PARM_DECL)\n+    {\n+      tree type = TREE_TYPE (*node);\n+\n+      if (POINTER_TYPE_P (type) || TREE_CODE (type) == ARRAY_TYPE)\n+\t{\n+\t  tree eltype = TREE_TYPE (type);\n+\t  if (eltype == char_type_node)\n+\t    return NULL_TREE;\n+\t}\n+\n+      warning (OPT_Wattributes,\n+\t       \"%qE attribute ignored on objects of type %qT\",\n+\t       name, type);\n+      *no_add_attrs = true;\n+      return NULL_TREE;\n+    }\n+\n+  if (code == FUNCTION_DECL)\n+    warning (OPT_Wattributes,\n+\t     \"%qE attribute does not apply to functions\", name);\n+  else if (code == TYPE_DECL)\n+    warning (OPT_Wattributes,\n+\t     \"%qE attribute does not apply to types\", name);\n+  else\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+\n+  *no_add_attrs = true;\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"nothrow\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "22062e65a894828747ca671d98a8a51e085e638f", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=27be025d191e308b706cdd7f1f90f0fe490f9a2c", "patch": "@@ -5835,6 +5835,30 @@ The @code{deprecated} attribute can also be used for functions and\n types (@pxref{Common Function Attributes},\n @pxref{Common Type Attributes}).\n \n+@item nonstring (@var{nonstring})\n+@cindex @code{nonstring} variable attribute\n+The @code{nonstring} variable attribute specifies that an object or member\n+declaration with type array of @code{char} or pointer to @code{char} is\n+intended to store character arrays that do not necessarily contain\n+a terminating @code{NUL} character.  This is useful to avoid warnings\n+when such an array or pointer is used as an argument to a bounded string\n+manipulation function such as @code{strncpy}.  For example, without the\n+attribute, GCC will issue a warning for the call below because it may\n+truncate the copy without appending the terminating NUL character.  Using\n+the attribute makes it possible to suppress the warning.\n+\n+@smallexample\n+struct Data\n+@{\n+  char name [32] __attribute__ ((nonstring));\n+@};\n+void f (struct Data *pd, const char *s)\n+@{\n+  strncpy (pd->name, s, sizeof pd->name);\n+  @dots{}\n+@}\n+@end smallexample\n+\n @item mode (@var{mode})\n @cindex @code{mode} variable attribute\n This attribute specifies the data type for the declaration---whichever"}, {"sha": "ddbafae0fe3a54dd9572e741af23039b6af6088f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be025d191e308b706cdd7f1f90f0fe490f9a2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27be025d191e308b706cdd7f1f90f0fe490f9a2c", "patch": "@@ -1,3 +1,8 @@\n+2017-08-14  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/81117\n+\t* c-c++-common/attr-nonstring-1.c: New test.\n+\n 2017-08-14  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/81117"}]}