{"sha": "096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDk2ZjBkOWRiYzllOTc0NmQzZGVmMjlhNGI0YmQyY2QxN2JmNWY3NA==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-12T20:39:18Z"}, "committer": {"name": "Fran\u00e7ois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2007-08-12T20:39:18Z"}, "message": "re PR fortran/32860 (Support %ld (for \"long\") for gfc_warning)\n\n\tPR fortran/32860\n\n\t* error.c (error_uinteger): New function.\n\t(error_integer): Call error_uinteger.\n\t(error_print): Handle %u, %lu, %li and %ld format specifiers.\n\t* interface.c (compare_actual_formal): Use the new %lu specifier.\n\n\t* c-format.c (gcc_gfc_length_specs): New array.\n\t(gcc_gfc_char_table): Add unsigned specifier, and references to\n\tthe l length modifier.\n\t(format_types_orig): Use the new gcc_gfc_length_specs.\n\n\t* gcc.dg/format/gcc_gfc-1.c: Updated with new formats.\n\nFrom-SVN: r127382", "tree": {"sha": "fdb16e18f1fa6652d43d535ded79415b2270355b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fdb16e18f1fa6652d43d535ded79415b2270355b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "html_url": "https://github.com/Rust-GCC/gccrs/commit/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "654b60732e6a604471862085f0037fd05df86887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/654b60732e6a604471862085f0037fd05df86887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/654b60732e6a604471862085f0037fd05df86887"}], "stats": {"total": 123, "additions": 104, "deletions": 19}, "files": [{"sha": "e2dbe3b758686caa567aa8f90fd0dbd49108e3ae", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -1,3 +1,11 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32860\n+\t* c-format.c (gcc_gfc_length_specs): New array.\n+\t(gcc_gfc_char_table): Add unsigned specifier, and references to\n+\tthe l length modifier.\n+\t(format_types_orig): Use the new gcc_gfc_length_specs.\n+\n 2007-08-12  Sa Liu  <saliu@de.ibm.com>\n \n \t* emit-rtl.c (try_split): Relink the insns with REG_LIBCALL note"}, {"sha": "8a36dd412fb041bdbdee35ea4c4b1cbdbf8ca816", "filename": "gcc/c-format.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -342,6 +342,15 @@ static const format_length_info strfmon_length_specs[] =\n   { NULL, 0, 0, NULL, 0, 0 }\n };\n \n+\n+/* For now, the Fortran front-end routines only use l as length modifier.  */\n+static const format_length_info gcc_gfc_length_specs[] =\n+{\n+  { \"l\", FMT_LEN_l, STD_C89, NULL, 0, 0 },\n+  { NULL, 0, 0, NULL, 0, 0 }\n+};\n+\n+\n static const format_flag_spec printf_flag_specs[] =\n {\n   { ' ',  0, 0, N_(\"' ' flag\"),        N_(\"the ' ' printf flag\"),              STD_C89 },\n@@ -631,7 +640,8 @@ static const format_char_info gcc_cxxdiag_char_table[] =\n static const format_char_info gcc_gfc_char_table[] =\n {\n   /* C89 conversion specifiers.  */\n-  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n+  { \"di\",  0, STD_C89, { T89_I,   BADLEN,  BADLEN,  T89_L,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n+  { \"u\",   0, STD_C89, { T89_UI,  BADLEN,  BADLEN,  T89_UL,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n   { \"c\",   0, STD_C89, { T89_I,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"\", NULL },\n   { \"s\",   1, STD_C89, { T89_C,   BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN,  BADLEN  }, \"\", \"cR\", NULL },\n \n@@ -738,7 +748,7 @@ static const format_kind_info format_types_orig[] =\n     0, 0, 'p', 0, 'L',\n     NULL, &integer_type_node\n   },\n-  { \"gcc_gfc\", NULL, gcc_gfc_char_table, \"\", NULL,\n+  { \"gcc_gfc\", gcc_gfc_length_specs, gcc_gfc_char_table, \"\", NULL,\n     NULL, gcc_gfc_flag_pairs,\n     FMT_FLAG_ARG_CONVERT,\n     0, 0, 0, 0, 0,"}, {"sha": "a6e5c9edc1a4bee154d3aa5c013143d5256f82de", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -1,3 +1,11 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32860\n+\t* error.c (error_uinteger): New function.\n+\t(error_integer): Call error_uinteger.\n+\t(error_print): Handle %u, %lu, %li and %ld format specifiers.\n+\t* interface.c (compare_actual_formal): Use the new %lu specifier.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31629"}, {"sha": "add23ce0fb3a753bd9b7add50b0eaa17ec32292d", "filename": "gcc/fortran/error.c", "status": "modified", "additions": 61, "deletions": 9, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ferror.c?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -113,19 +113,13 @@ error_string (const char *p)\n \n /* Print a formatted integer to the error buffer or output.  */\n \n-#define IBUF_LEN 30\n+#define IBUF_LEN 60\n \n static void\n-error_integer (int i)\n+error_uinteger (unsigned long int i)\n {\n   char *p, int_buf[IBUF_LEN];\n \n-  if (i < 0)\n-    {\n-      i = -i;\n-      error_char ('-');\n-    }\n-\n   p = int_buf + IBUF_LEN - 1;\n   *p-- = '\\0';\n \n@@ -141,6 +135,22 @@ error_integer (int i)\n   error_string (p + 1);\n }\n \n+static void\n+error_integer (long int i)\n+{\n+  unsigned long int u;\n+\n+  if (i < 0)\n+    {\n+      u = (unsigned long int) -i;\n+      error_char ('-');\n+    }\n+  else\n+    u = i;\n+\n+  error_uinteger (u);\n+}\n+\n \n /* Show the file, where it was included, and the source line, give a\n    locus.  Calls error_printf() recursively, but the recursion is at\n@@ -368,7 +378,8 @@ show_loci (locus *l1, locus *l2)\n static void ATTRIBUTE_GCC_GFC(2,0)\n error_print (const char *type, const char *format0, va_list argp)\n {\n-  enum { TYPE_CURRENTLOC, TYPE_LOCUS, TYPE_INTEGER, TYPE_CHAR, TYPE_STRING,\n+  enum { TYPE_CURRENTLOC, TYPE_LOCUS, TYPE_INTEGER, TYPE_UINTEGER,\n+         TYPE_LONGINT, TYPE_ULONGINT, TYPE_CHAR, TYPE_STRING,\n \t NOTYPE };\n   struct\n   {\n@@ -377,6 +388,9 @@ error_print (const char *type, const char *format0, va_list argp)\n     union\n     {\n       int intval;\n+      unsigned int uintval;\n+      long int longintval;\n+      unsigned long int ulongintval;\n       char charval;\n       const char * stringval;\n     } u;\n@@ -453,6 +467,19 @@ error_print (const char *type, const char *format0, va_list argp)\n \t    arg[pos].type = TYPE_INTEGER;\n \t    break;\n \n+\t  case 'u':\n+\t    arg[pos].type = TYPE_UINTEGER;\n+\n+\t  case 'l':\n+\t    c = *format++;\n+\t    if (c == 'u')\n+\t      arg[pos].type = TYPE_ULONGINT;\n+\t    else if (c == 'i' || c == 'd')\n+\t      arg[pos].type = TYPE_LONGINT;\n+\t    else\n+\t      gcc_unreachable ();\n+\t    break;\n+\n \t  case 'c':\n \t    arg[pos].type = TYPE_CHAR;\n \t    break;\n@@ -499,6 +526,18 @@ error_print (const char *type, const char *format0, va_list argp)\n \t    arg[pos].u.intval = va_arg (argp, int);\n \t    break;\n \n+\t  case TYPE_UINTEGER:\n+\t    arg[pos].u.uintval = va_arg (argp, unsigned int);\n+\t    break;\n+\n+\t  case TYPE_LONGINT:\n+\t    arg[pos].u.longintval = va_arg (argp, long int);\n+\t    break;\n+\n+\t  case TYPE_ULONGINT:\n+\t    arg[pos].u.ulongintval = va_arg (argp, unsigned long int);\n+\t    break;\n+\n \t  case TYPE_CHAR:\n \t    arg[pos].u.charval = (char) va_arg (argp, int);\n \t    break;\n@@ -568,6 +607,19 @@ error_print (const char *type, const char *format0, va_list argp)\n \tcase 'i':\n \t  error_integer (spec[n++].u.intval);\n \t  break;\n+\n+\tcase 'u':\n+\t  error_uinteger (spec[n++].u.uintval);\n+\t  break;\n+\n+\tcase 'l':\n+\t  format++;\n+\t  if (*format == 'u')\n+\t    error_uinteger (spec[n++].u.ulongintval);\n+\t  else\n+\t    error_integer (spec[n++].u.longintval);\n+\t  break;\n+\n \t}\n     }\n "}, {"sha": "dbd7538c80111ba8d53be29ebbc5cc4c881e6f48", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -1680,14 +1680,14 @@ compare_actual_formal (gfc_actual_arglist **ap, gfc_formal_arglist *formal,\n \t{\n \t  if (a->expr->ts.type == BT_CHARACTER && !f->sym->as && where)\n \t    gfc_warning (\"Character length of actual argument shorter \"\n-\t\t\t\"than of dummy argument '%s' (%d/%d) at %L\",\n-\t\t\tf->sym->name, (int) actual_size,\n-\t\t\t(int) formal_size, &a->expr->where);\n+\t\t\t\"than of dummy argument '%s' (%lu/%lu) at %L\",\n+\t\t\tf->sym->name, actual_size, formal_size,\n+\t\t\t&a->expr->where);\n           else if (where)\n \t    gfc_warning (\"Actual argument contains too few \"\n-\t\t\t\"elements for dummy argument '%s' (%d/%d) at %L\",\n-\t\t\tf->sym->name, (int) actual_size,\n-\t\t\t(int) formal_size, &a->expr->where);\n+\t\t\t\"elements for dummy argument '%s' (%lu/%lu) at %L\",\n+\t\t\tf->sym->name, actual_size, formal_size,\n+\t\t\t&a->expr->where);\n \t  return  0;\n \t}\n "}, {"sha": "106fe59623e4cfc42e2706d050e429f0a719a39c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -1,3 +1,8 @@\n+2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\n+\tPR fortran/32860\n+\t* gcc.dg/format/gcc_gfc-1.c: Updated with new formats.\n+\n 2007-08-12  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \tPR fortran/31629"}, {"sha": "7e079b776920cc3afdb3b73bd4aece2eca1ab5d6", "filename": "gcc/testsuite/gcc.dg/format/gcc_gfc-1.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fgcc_gfc-1.c?ref=096f0d9dbc9e9746d3def29a4b4bd2cd17bf5f74", "patch": "@@ -11,11 +11,13 @@ typedef struct locus locus;\n extern int gfc_warn (const char *, ...) __attribute__ ((__format__ (__gcc_gfc__, 1, 2))) __attribute__ ((__nonnull__));\n \n void\n-foo (int i, char *s, long int l, llong ll, locus *loc)\n+foo (unsigned int u, int i, char *s, unsigned long int ul, long int l,\n+     llong ll, locus *loc)\n {\n   /* Acceptable C90 specifiers, flags and modifiers.  */\n   gfc_warn (\"%%\");\n-  gfc_warn (\"%d%i%c%s%%\", i, i, i, s);\n+  gfc_warn (\"%u%d%i%c%s%%\", u, i, i, i, s);\n+  gfc_warn (\"%lu%ld%li%%\", ul, l, l);\n \n   /* Extensions provided in gfc_warn.  */\n   gfc_warn (\"%C\");"}]}