{"sha": "81b6ae1eabba39429cf94dbdae86614aafa7b960", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiNmFlMWVhYmJhMzk0MjljZjk0ZGJkYWU4NjYxNGFhZmE3Yjk2MA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2018-06-11T09:17:19Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2018-06-11T09:17:19Z"}, "message": "[Ada] Refactor compilation of Ada units in Makefile.rtl\n\n2018-06-11  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* Makefile.rtl: Compile Ada files with $(ADAC) instead of $(CC).\n\nFrom-SVN: r261404", "tree": {"sha": "cafe6d7226c42eddbf0b297d51235ca05d9a6eba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cafe6d7226c42eddbf0b297d51235ca05d9a6eba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b6ae1eabba39429cf94dbdae86614aafa7b960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b6ae1eabba39429cf94dbdae86614aafa7b960", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b6ae1eabba39429cf94dbdae86614aafa7b960", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b6ae1eabba39429cf94dbdae86614aafa7b960/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6778c2ca7b92a76c84c0affdc949d6f3e41c91c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6778c2ca7b92a76c84c0affdc949d6f3e41c91c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6778c2ca7b92a76c84c0affdc949d6f3e41c91c3"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "53934c4fcabbea1becdae912d6c8e00c9954605e", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b6ae1eabba39429cf94dbdae86614aafa7b960/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b6ae1eabba39429cf94dbdae86614aafa7b960/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=81b6ae1eabba39429cf94dbdae86614aafa7b960", "patch": "@@ -1,3 +1,7 @@\n+2018-06-11  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* Makefile.rtl: Compile Ada files with $(ADAC) instead of $(CC).\n+\n 2018-06-11  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* exp_ch11.adb, exp_unst.adb, inline.adb, sem_ch12.adb, sem_util.adb:"}, {"sha": "f69170d9fe38dd566817027dc99ec9c294d5c195", "filename": "gcc/ada/Makefile.rtl", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b6ae1eabba39429cf94dbdae86614aafa7b960/gcc%2Fada%2FMakefile.rtl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b6ae1eabba39429cf94dbdae86614aafa7b960/gcc%2Fada%2FMakefile.rtl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FMakefile.rtl?ref=81b6ae1eabba39429cf94dbdae86614aafa7b960", "patch": "@@ -17,11 +17,14 @@\n #along with GCC; see the file COPYING3.  If not see\n #<http://www.gnu.org/licenses/>.\n \n-# This makefile fragment is included in the ada Makefile (both Unix\n-# and Windows).\n+# This makefile fragment is included in the ada Makefile.\n \n-# Its purpose is to allow the separate maintainence of the list of\n-# GNATRTL objects, which frequently changes.\n+# Its purpose is to allow the separate maintenance of the list of\n+# GNATRTL objects and target pairs, which frequently changes.\n+\n+ifndef ADAC\n+ADAC=$(CC)\n+endif\n \n # Objects needed only for tasking\n GNATRTL_TASKING_OBJS= \\\n@@ -2682,15 +2685,16 @@ setup-rts: force\n # optimization. We don't want inlining, either.\n \n s-traceb.o  : s-traceb.adb s-traceb.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n-\t      $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) \\\n+\t  $(NO_INLINE_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) $< \\\n+\t  $(OUTPUT_OPTION)\n \n # compile s-tasdeb.o without optimization and with debug info so that it is\n # always possible to set conditional breakpoints on tasks.\n \n s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n # force no function reordering on a-except.o because of the exclusion bounds\n # mechanism (see the source file for more detailed information).\n@@ -2699,35 +2703,36 @@ s-tasdeb.o  : s-tasdeb.adb s-tasdeb.ads\n # use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.\n \n a-except.o  : a-except.adb a-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(NO_INLINE_ADAFLAGS) \\\n-\t      $(NO_REORDER_ADAFLAGS) -O1 $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) \\\n+\t  $(NO_INLINE_ADAFLAGS) $(NO_REORDER_ADAFLAGS) -O1 $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n # compile s-excdeb.o without optimization and with debug info to let the\n # debugger set breakpoints and inspect subprogram parameters on exception\n # related events.\n \n s-excdeb.o  : s-excdeb.adb s-excdeb.ads s-except.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) -O0 \\\n+\t  $(ADA_INCLUDES) $< $(OUTPUT_OPTION)\n \n # force debugging information on s-assert.o so that it is always\n # possible to set breakpoint on assert failures.\n \n s-assert.o  : s-assert.adb s-assert.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n # force debugging information on a-tags.o so that the debugger can find\n # the description of Ada.Tags.Type_Specific_Data.\n \n a-tags.o  : a-tags.adb a-tags.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(FORCE_DEBUG_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n \n # force no sibling call optimization on s-memory.o to avoid turning the\n # tail recursion in Alloc into a loop that confuses branch prediction.\n \n s-memory.o  : s-memory.adb s-memory.ads\n-\t$(CC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n-\t      $< $(OUTPUT_OPTION)\n+\t$(ADAC) -c $(ALL_ADAFLAGS) $(NO_SIBLING_ADAFLAGS) $(ADA_INCLUDES) \\\n+\t  $< $(OUTPUT_OPTION)\n "}]}