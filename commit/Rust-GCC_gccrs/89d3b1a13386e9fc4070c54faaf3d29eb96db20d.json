{"sha": "89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODlkM2IxYTEzMzg2ZTlmYzQwNzBjNTRmYWFmM2QyOWViOTZkYjIwZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:30:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:30:23Z"}, "message": "[multiple changes]\n\n2016-05-02  Javier Miranda  <miranda@adacore.com>\n\n\t* exp_util.ads, exp_util.adb (Force_Evaluation): Adding new formal.\n\t(Remove_Side_Effects): Adding a new formal.\n\t* exp_ch6.adb (Expand_Simple_Function_Return): Generating the\n\tcall to the _Postconditions procedure ensure that side-effects\n\tare unconditionally removed.\n\n2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Check_Formal_Package_Instance, Check_Mismatch):\n\tUse original node to determine whether the declaration is for\n\ta formal type declaration, to take into account that formwl\n\tprivate types are rewritten as private extension declarations\n\tto simplify semantic analysis.\n\nFrom-SVN: r235742", "tree": {"sha": "271a6c4ee60c778e8e7943ad16864e5140479d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/271a6c4ee60c778e8e7943ad16864e5140479d17"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/comments", "author": null, "committer": null, "parents": [{"sha": "ca90b9623d969a09ff5c54fca968d9cf65160049", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca90b9623d969a09ff5c54fca968d9cf65160049", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca90b9623d969a09ff5c54fca968d9cf65160049"}], "stats": {"total": 84, "additions": 61, "deletions": 23}, "files": [{"sha": "1ac765362cdd6a6a3066d3125e6b8e7c54ae10af", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "patch": "@@ -1,3 +1,19 @@\n+2016-05-02  Javier Miranda  <miranda@adacore.com>\n+\n+\t* exp_util.ads, exp_util.adb (Force_Evaluation): Adding new formal.\n+\t(Remove_Side_Effects): Adding a new formal.\n+\t* exp_ch6.adb (Expand_Simple_Function_Return): Generating the\n+\tcall to the _Postconditions procedure ensure that side-effects\n+\tare unconditionally removed.\n+\n+2016-05-02  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Check_Formal_Package_Instance, Check_Mismatch):\n+\tUse original node to determine whether the declaration is for\n+\ta formal type declaration, to take into account that formwl\n+\tprivate types are rewritten as private extension declarations\n+\tto simplify semantic analysis.\n+\n 2016-05-02  Gary Dismukes  <dismukes@adacore.com>\n \n \t* exp_ch9.adb, sem_ch6.adb, sem_ch6.ads: Minor reformatting and typo"}, {"sha": "4c89374f9d0a44610c591f3b904e85858d201530", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "patch": "@@ -6800,7 +6800,7 @@ package body Exp_Ch6 is\n          --  once in the call to _Postconditions, and once in the actual return\n          --  statement, but we can't have side effects happening twice.\n \n-         Remove_Side_Effects (Exp);\n+         Force_Evaluation (Exp, Mode => Strict);\n \n          --  Generate call to _Postconditions\n "}, {"sha": "06d3c32d941578b421fc32da3248b893ca01132b", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "patch": "@@ -3118,7 +3118,8 @@ package body Exp_Util is\n       Name_Req      : Boolean   := False;\n       Related_Id    : Entity_Id := Empty;\n       Is_Low_Bound  : Boolean   := False;\n-      Is_High_Bound : Boolean   := False)\n+      Is_High_Bound : Boolean   := False;\n+      Mode          : Force_Evaluation_Mode := Relaxed)\n    is\n    begin\n       Remove_Side_Effects\n@@ -3128,7 +3129,10 @@ package body Exp_Util is\n          Renaming_Req  => False,\n          Related_Id    => Related_Id,\n          Is_Low_Bound  => Is_Low_Bound,\n-         Is_High_Bound => Is_High_Bound);\n+         Is_High_Bound => Is_High_Bound,\n+         Check_Side_Effects =>\n+           Is_Static_Expression (Exp)\n+             or else Mode = Relaxed);\n    end Force_Evaluation;\n \n    ---------------------------------\n@@ -7545,13 +7549,14 @@ package body Exp_Util is\n    -------------------------\n \n    procedure Remove_Side_Effects\n-     (Exp           : Node_Id;\n-      Name_Req      : Boolean   := False;\n-      Renaming_Req  : Boolean   := False;\n-      Variable_Ref  : Boolean   := False;\n-      Related_Id    : Entity_Id := Empty;\n-      Is_Low_Bound  : Boolean   := False;\n-      Is_High_Bound : Boolean   := False)\n+     (Exp                : Node_Id;\n+      Name_Req           : Boolean   := False;\n+      Renaming_Req       : Boolean   := False;\n+      Variable_Ref       : Boolean   := False;\n+      Related_Id         : Entity_Id := Empty;\n+      Is_Low_Bound       : Boolean   := False;\n+      Is_High_Bound      : Boolean   := False;\n+      Check_Side_Effects : Boolean   := True)\n    is\n       function Build_Temporary\n         (Loc         : Source_Ptr;\n@@ -7685,7 +7690,9 @@ package body Exp_Util is\n \n       --  No action needed for side-effect free expressions\n \n-      elsif Side_Effect_Free (Exp, Name_Req, Variable_Ref) then\n+      elsif Check_Side_Effects\n+        and then Side_Effect_Free (Exp, Name_Req, Variable_Ref)\n+      then\n          return;\n       end if;\n "}, {"sha": "9beb054fca488b23de42224c5004919aa750307c", "filename": "gcc/ada/exp_util.ads", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fexp_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.ads?ref=89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "patch": "@@ -526,19 +526,25 @@ package Exp_Util is\n    --  Note: currently this function does not scan the private part, that seems\n    --  like a potential bug ???\n \n+   type Force_Evaluation_Mode is (Relaxed, Strict);\n+\n    procedure Force_Evaluation\n      (Exp           : Node_Id;\n       Name_Req      : Boolean   := False;\n       Related_Id    : Entity_Id := Empty;\n       Is_Low_Bound  : Boolean   := False;\n-      Is_High_Bound : Boolean   := False);\n+      Is_High_Bound : Boolean   := False;\n+      Mode          : Force_Evaluation_Mode := Relaxed);\n    --  Force the evaluation of the expression right away. Similar behavior\n    --  to Remove_Side_Effects when Variable_Ref is set to TRUE. That is to\n    --  say, it removes the side effects and captures the values of the\n    --  variables. Remove_Side_Effects guarantees that multiple evaluations\n    --  of the same expression won't generate multiple side effects, whereas\n    --  Force_Evaluation further guarantees that all evaluations will yield\n-   --  the same result.\n+   --  the same result. If Mode is Relaxed then calls to this subprogram have\n+   --  no effect if Exp is side-effects free; if Mode is Strict and Exp is not\n+   --  a static expression then no side-effects check is performed on Exp and\n+   --  temporaries are unconditionally generated.\n    --\n    --  Related_Id denotes the entity of the context where Expr appears. Flags\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check\n@@ -861,13 +867,14 @@ package Exp_Util is\n    --  associated with Var, and if found, remove and return that call node.\n \n    procedure Remove_Side_Effects\n-     (Exp           : Node_Id;\n-      Name_Req      : Boolean   := False;\n-      Renaming_Req  : Boolean   := False;\n-      Variable_Ref  : Boolean   := False;\n-      Related_Id    : Entity_Id := Empty;\n-      Is_Low_Bound  : Boolean   := False;\n-      Is_High_Bound : Boolean   := False);\n+     (Exp                : Node_Id;\n+      Name_Req           : Boolean   := False;\n+      Renaming_Req       : Boolean   := False;\n+      Variable_Ref       : Boolean   := False;\n+      Related_Id         : Entity_Id := Empty;\n+      Is_Low_Bound       : Boolean   := False;\n+      Is_High_Bound      : Boolean   := False;\n+      Check_Side_Effects : Boolean   := True);\n    --  Given the node for a subexpression, this function replaces the node if\n    --  necessary by an equivalent subexpression that is guaranteed to be side\n    --  effect free. This is done by extracting any actions that could cause\n@@ -880,7 +887,8 @@ package Exp_Util is\n    --  expression. If Variable_Ref is set to True, a variable is considered as\n    --  side effect (used in implementing Force_Evaluation). Note: after call to\n    --  Remove_Side_Effects, it is safe to call New_Copy_Tree to obtain a copy\n-   --  of the resulting expression.\n+   --  of the resulting expression. If Check_Side_Effects is set to True then\n+   --  no action is performed if Exp is known to be side-effect free.\n    --\n    --  Related_Id denotes the entity of the context where Expr appears. Flags\n    --  Is_Low_Bound and Is_High_Bound specify whether the expression to check"}, {"sha": "0d8446df96cf50bb26b2a9a4f9e03d97107f49d6", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89d3b1a13386e9fc4070c54faaf3d29eb96db20d/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=89d3b1a13386e9fc4070c54faaf3d29eb96db20d", "patch": "@@ -5759,7 +5759,11 @@ package body Sem_Ch12 is\n       --------------------\n \n       procedure Check_Mismatch (B : Boolean) is\n-         Kind : constant Node_Kind := Nkind (Parent (E2));\n+         --  a Formal_Type_Declaration for a derived private type is rewritten\n+         --  as a private extension decl. (see Analyze_Formal_Derived_Type),\n+         --  which is why we examine the original node.\n+\n+         Kind : constant Node_Kind := Nkind (Original_Node (Parent (E2)));\n \n       begin\n          if Kind = N_Formal_Type_Declaration then\n@@ -5923,7 +5927,10 @@ package body Sem_Ch12 is\n          --  If the formal entity comes from a formal declaration, it was\n          --  defaulted in the formal package, and no check is needed on it.\n \n-         elsif Nkind (Parent (E2)) = N_Formal_Object_Declaration then\n+         elsif\n+           Nkind_In (Original_Node (Parent (E2)),\n+             N_Formal_Object_Declaration, N_Formal_Type_Declaration)\n+         then\n             goto Next_E;\n \n          --  Ditto for defaulted formal subprograms."}]}