{"sha": "e9da788c505b9077a18ead1bb76372180e3d38d4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTlkYTc4OGM1MDViOTA3N2ExOGVhZDFiYjc2MzcyMTgwZTNkMzhkNA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-03-06T17:23:03Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-03-06T17:23:03Z"}, "message": "fold-const.c (fold_binary_op_with_conditional_arg): Take decomposed arguments code, type, op0, and op1 instead of t.\n\n\t* fold-const.c (fold_binary_op_with_conditional_arg): Take\n\tdecomposed arguments code, type, op0, and op1 instead of t.\n\t(fold_binary): Update a call to fold_range_test.\n\nFrom-SVN: r95978", "tree": {"sha": "aa7034910386e6fc4d8ead4b1c753bf91a4359c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aa7034910386e6fc4d8ead4b1c753bf91a4359c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9da788c505b9077a18ead1bb76372180e3d38d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9da788c505b9077a18ead1bb76372180e3d38d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9da788c505b9077a18ead1bb76372180e3d38d4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9da788c505b9077a18ead1bb76372180e3d38d4/comments", "author": null, "committer": null, "parents": [{"sha": "e1f04615c73d8f1f1e38c4cb2dbbb1d5e0d381a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f04615c73d8f1f1e38c4cb2dbbb1d5e0d381a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f04615c73d8f1f1e38c4cb2dbbb1d5e0d381a2"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "c57013152070e913768545048ff0c4a41aae62d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9da788c505b9077a18ead1bb76372180e3d38d4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9da788c505b9077a18ead1bb76372180e3d38d4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e9da788c505b9077a18ead1bb76372180e3d38d4", "patch": "@@ -14,6 +14,10 @@\n \tcode, type, op0, and op1 instead of t.\n \t(fold_binary): Update a call to fold_range_test.\n \n+\t* fold-const.c (fold_binary_op_with_conditional_arg): Take\n+\tdecomposed arguments code, type, op0, and op1 instead of t.\n+\t(fold_binary): Update a call to fold_range_test.\n+\n 2005-03-06  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* fold-const.c (fold_binary): Avoid directly using the original"}, {"sha": "d7d23582599a0bf7cd0216c6b92d11a52195e711", "filename": "gcc/fold-const.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9da788c505b9077a18ead1bb76372180e3d38d4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9da788c505b9077a18ead1bb76372180e3d38d4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e9da788c505b9077a18ead1bb76372180e3d38d4", "patch": "@@ -121,7 +121,8 @@ static tree optimize_minmax_comparison (enum tree_code, tree, tree, tree);\n static tree extract_muldiv (tree, tree, enum tree_code, tree);\n static tree extract_muldiv_1 (tree, tree, enum tree_code, tree);\n static int multiple_of_p (tree, tree, tree);\n-static tree fold_binary_op_with_conditional_arg (tree, enum tree_code, \n+static tree fold_binary_op_with_conditional_arg (enum tree_code, tree,\n+\t\t\t\t\t\t tree, tree,\n \t\t\t\t\t\t tree, tree, int);\n static bool fold_real_zero_addition_p (tree, tree, int);\n static tree fold_mathfn_compare (enum built_in_function, enum tree_code,\n@@ -5453,14 +5454,12 @@ extract_array_ref (tree expr, tree *base, tree *offset)\n    possible.  */\n \n static tree\n-fold_binary_op_with_conditional_arg (tree t, enum tree_code code, tree cond,\n-\t\t\t\t     tree arg, int cond_first_p)\n+fold_binary_op_with_conditional_arg (enum tree_code code,\n+\t\t\t\t     tree type, tree op0, tree op1,\n+\t\t\t\t     tree cond, tree arg, int cond_first_p)\n {\n-  const tree type = TREE_TYPE (t);\n-  tree cond_type = cond_first_p ? TREE_TYPE (TREE_OPERAND (t, 0)) \n-\t\t\t\t: TREE_TYPE (TREE_OPERAND (t, 1));\n-  tree arg_type = cond_first_p ? TREE_TYPE (TREE_OPERAND (t, 1)) \n-\t\t\t       : TREE_TYPE (TREE_OPERAND (t, 0));\n+  tree cond_type = cond_first_p ? TREE_TYPE (op0) : TREE_TYPE (op1);\n+  tree arg_type = cond_first_p ? TREE_TYPE (op0) : TREE_TYPE (op1);\n   tree test, true_value, false_value;\n   tree lhs = NULL_TREE;\n   tree rhs = NULL_TREE;\n@@ -7159,15 +7158,17 @@ fold_binary (tree expr)\n \n       if (TREE_CODE (arg0) == COND_EXPR || COMPARISON_CLASS_P (arg0))\n \t{\n-\t  tem = fold_binary_op_with_conditional_arg (t, code, arg0, arg1, \n+\t  tem = fold_binary_op_with_conditional_arg (code, type, op0, op1,\n+\t\t\t\t\t\t     arg0, arg1, \n \t\t\t\t\t\t     /*cond_first_p=*/1);\n \t  if (tem != NULL_TREE)\n \t    return tem;\n \t}\n \n       if (TREE_CODE (arg1) == COND_EXPR || COMPARISON_CLASS_P (arg1))\n \t{\n-\t  tem = fold_binary_op_with_conditional_arg (t, code, arg1, arg0, \n+\t  tem = fold_binary_op_with_conditional_arg (code, type, op0, op1,\n+\t\t\t\t\t\t     arg1, arg0, \n \t\t\t\t\t             /*cond_first_p=*/0);\n \t  if (tem != NULL_TREE)\n \t    return tem;"}]}