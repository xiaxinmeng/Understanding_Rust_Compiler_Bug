{"sha": "72df5c1f6212b258f2daef128db4e74723001dde", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkZjVjMWY2MjEyYjI1OGYyZGFlZjEyOGRiNGU3NDcyMzAwMWRkZQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2014-07-23T16:17:08Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-07-23T16:17:08Z"}, "message": "[AArch64] Use helper functions to handle multiple modes.\n\nFrom-SVN: r212954", "tree": {"sha": "a67a5ed5e47305628a5588c179feb10478501dce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a67a5ed5e47305628a5588c179feb10478501dce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72df5c1f6212b258f2daef128db4e74723001dde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72df5c1f6212b258f2daef128db4e74723001dde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72df5c1f6212b258f2daef128db4e74723001dde", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72df5c1f6212b258f2daef128db4e74723001dde/comments", "author": null, "committer": null, "parents": [{"sha": "64dedd72f61a8925812675d180d274c47e6511b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64dedd72f61a8925812675d180d274c47e6511b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64dedd72f61a8925812675d180d274c47e6511b3"}], "stats": {"total": 49, "additions": 45, "deletions": 4}, "files": [{"sha": "2900bc6ef1bda5af718a45abc271c8ac87b281c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72df5c1f6212b258f2daef128db4e74723001dde/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72df5c1f6212b258f2daef128db4e74723001dde/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72df5c1f6212b258f2daef128db4e74723001dde", "patch": "@@ -1,3 +1,10 @@\n+2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_gen_load_pair)\n+\t(aarch64_gen_store_pair): New helper function.\n+\t(aarch64_save_or_restore_callee_save_registers)\n+\t(aarch64_save_or_restore_fprs): Use new helper functions.\n+\n 2014-07-23  Jiong Wang  <jiong.wang@arm.com>\n \n \t* config/aarch64/aarch64.c (aarch64_next_callee_save): New function."}, {"sha": "21745a0ad0b6e94de500880b20f4a0eff7e1adb4", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72df5c1f6212b258f2daef128db4e74723001dde/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72df5c1f6212b258f2daef128db4e74723001dde/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=72df5c1f6212b258f2daef128db4e74723001dde", "patch": "@@ -1916,6 +1916,40 @@ aarch64_next_callee_save (unsigned regno, unsigned limit)\n   return regno;\n }\n \n+static rtx\n+aarch64_gen_store_pair (enum machine_mode mode, rtx mem1, rtx reg1, rtx mem2,\n+\t\t\trtx reg2)\n+{\n+  switch (mode)\n+    {\n+    case DImode:\n+      return gen_store_pairdi (mem1, reg1, mem2, reg2);\n+\n+    case DFmode:\n+      return gen_store_pairdf (mem1, reg1, mem2, reg2);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n+static rtx\n+aarch64_gen_load_pair (enum machine_mode mode, rtx reg1, rtx mem1, rtx reg2,\n+\t\t       rtx mem2)\n+{\n+  switch (mode)\n+    {\n+    case DImode:\n+      return gen_load_pairdi (reg1, mem1, reg2, mem2);\n+\n+    case DFmode:\n+      return gen_load_pairdf (reg1, mem1, reg2, mem2);\n+\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+\n static void\n aarch64_save_or_restore_fprs (HOST_WIDE_INT start_offset, bool restore)\n {\n@@ -1949,10 +1983,10 @@ aarch64_save_or_restore_fprs (HOST_WIDE_INT start_offset, bool restore)\n \t  mem2 = gen_mem_ref (DFmode,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx, offset));\n \t  if (restore == false)\n-\t    insn = emit_insn (gen_store_pairdf (mem, reg, mem2, reg2));\n+\t    insn = emit_insn (aarch64_gen_store_pair (DFmode, mem, reg, mem2, reg2));\n \t  else\n \t    {\n-\t      insn = emit_insn (gen_load_pairdf (reg, mem, reg2, mem2));\n+\t      insn = emit_insn (aarch64_gen_load_pair (DFmode, reg, mem, reg2, mem2));\n \t      add_reg_note (insn, REG_CFA_RESTORE, reg);\n \t      add_reg_note (insn, REG_CFA_RESTORE, reg2);\n \t    }\n@@ -2018,10 +2052,10 @@ aarch64_save_or_restore_callee_save_registers (HOST_WIDE_INT start_offset,\n \t  mem2 = gen_mem_ref (Pmode,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx, offset));\n \t  if (restore == false)\n-\t    insn = emit_insn (gen_store_pairdi (mem, reg, mem2, reg2));\n+\t    insn = emit_insn (aarch64_gen_store_pair (DImode, mem, reg, mem2, reg2));\n \t  else\n \t    {\n-\t      insn = emit_insn (gen_load_pairdi (reg, mem, reg2, mem2));\n+\t      insn = emit_insn (aarch64_gen_load_pair (DImode, reg, mem, reg2, mem2));\n \t      add_reg_note (insn, REG_CFA_RESTORE, reg);\n \t      add_reg_note (insn, REG_CFA_RESTORE, reg2);\n \t    }"}]}