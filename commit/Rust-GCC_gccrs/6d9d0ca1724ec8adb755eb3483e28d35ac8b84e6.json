{"sha": "6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5ZDBjYTE3MjRlYzhhZGI3NTVlYjM0ODNlMjhkMzVhYzhiODRlNg==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:12:54Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1993-04-05T00:12:54Z"}, "message": "pa.md (dbra pattern): Extend to allow any 5 bit increment...\n\n\t* pa.md (dbra pattern): Extend to allow any 5 bit increment,\n\tany comparison operator for the compare against zero, and\n\tno longer require the REG_NONNEG note.\n\nFrom-SVN: r4016", "tree": {"sha": "dea906c1c29fa9495c2f84bf62ce605cc8011059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dea906c1c29fa9495c2f84bf62ce605cc8011059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6/comments", "author": null, "committer": null, "parents": [{"sha": "4c1fcd13ccf765cbf135eae096d05dd7be84ae59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c1fcd13ccf765cbf135eae096d05dd7be84ae59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c1fcd13ccf765cbf135eae096d05dd7be84ae59"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "15c46f9f456b8b91044705b6f10d8ec0704236be", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=6d9d0ca1724ec8adb755eb3483e28d35ac8b84e6", "patch": "@@ -2806,16 +2806,16 @@\n (define_insn \"decrement_and_branch_until_zero\"\n   [(set (pc)\n \t(if_then_else\n-\t  (ge (plus:SI (match_operand:SI 0 \"register_operand\" \"+!r,m\")\n-\t\t       (const_int -1))\n-\t      (const_int 0))\n-\t  (label_ref (match_operand 1 \"\" \"\"))\n+\t  (match_operator 2 \"comparison_operator\"\n+\t   [(plus:SI (match_operand:SI 0 \"register_operand\" \"+!r,m\")\n+\t\t     (match_operand:SI 1 \"int5_operand\" \"L,L\"))\n+\t    (const_int 0)])\n+\t  (label_ref (match_operand 3 \"\" \"\"))\n \t  (pc)))\n    (set (match_dup 0)\n-\t(plus:SI (match_dup 0)\n-\t\t (const_int -1)))\n-   (clobber (match_scratch:SI 2 \"=X,r\"))]\n-  \"find_reg_note (insn, REG_NONNEG, 0)\"\n+\t(plus:SI (match_dup 0) (match_dup 1)))\n+   (clobber (match_scratch:SI 4 \"=X,r\"))]\n+  \"\"\n \"*\n {\n   if (INSN_ANNULLED_BRANCH_P (insn))\n@@ -2824,30 +2824,30 @@\n       if (which_alternative == 0)\n \t/* Short branch.  Normal handling of nullification.  */\n         if (get_attr_length (insn) == 1)\n-          return \\\"addib,>=,n -1,%0,%1\\\";\n+          return \\\"addib,%C2,n %1,%0,%3\\\";\n \t/* Long Conditional branch forward with delay slot nullified if\n \t   branch is taken.  */\n         else if (get_attr_length (insn) == 2)\n-          return \\\"addi,< -1,%0,%0\\;bl,n %1,0\\\";\n+          return \\\"addi,%N2 %1,%0,%0\\;bl,n %3,0\\\";\n \t/* Long Conditional branch backwards with delay slot nullified\n \t   if branch is not taken.  */\n         else\n-          return \\\"addib,< -1,%0,.+16\\;nop\\;bl %1,0\\\";\n+          return \\\"addib,%N2 %1,%0,.+16\\;nop\\;bl %3,0\\\";\n       else\n         {\n \t  /* Must reload loop counter from memory.  Ugly.  */\n-          output_asm_insn (\\\"ldw %0,%2\\;ldo -1(%2),%2\\;stw %2,%0\\\", operands);\n+          output_asm_insn (\\\"ldw %0,%4\\;ldo %1(%4),%4\\;stw %4,%0\\\", operands);\n \t  /* Short branch.  Normal handling of nullification.  */\n           if (get_attr_length (insn) == 4)\n-\t    return \\\"comb,>,n 0,%2,%1\\\";\n+\t    return \\\"comb,%B2,n 0,%4,%3\\\";\n \t  /* Long Conditional branch forward with delay slot nullified if\n \t     branch is taken.  */\n           else if (get_attr_length (insn) == 5)\n-\t    return \\\"comclr,<= 0,%2,0\\;bl,n %1,0\\\";\n+\t    return \\\"comclr,%S2 0,%4,0\\;bl,n %3,0\\\";\n \t  else \n \t  /* Long Conditional branch backwards with delay slot nullified\n \t     if branch is not taken.  */\n-\t    return \\\"comb,<= 0,%2,.+16\\;nop\\;bl %1,0\\\";\n+\t    return \\\"comb,%S2 0,%4,.+16\\;nop\\;bl %3,0\\\";\n         }\n     }\n   else\n@@ -2856,20 +2856,20 @@\n       if (which_alternative == 0)\n         if (get_attr_length (insn) == 1)\n \t  /* Short form.  */\n-          return \\\"addib,>= -1,%0,%1%#\\\";\n+          return \\\"addib,%C2 %1,%0,%3%#\\\";\n         else\n \t  /* Long form.  */\n-          return \\\"addi,< -1,%0,%0\\;bl%* %1,0\\\";\n+          return \\\"addi,%N2 %1,%0,%0\\;bl%* %3,0\\\";\n       else\n         {\n \t  /* Reload loop counter from memory.  */\n-          output_asm_insn (\\\"ldw %0,%2\\;ldo -1(%2),%2\\;stw %2,%0\\\", operands);\n+          output_asm_insn (\\\"ldw %0,%4\\;ldo %1(%4),%4\\;stw %4,%0\\\", operands);\n \t  /* Short form.  */\n           if (get_attr_length (insn) == 4)\n-\t    return \\\"comb,> 0,%2,%1%#\\\";\n+\t    return \\\"comb,%B2 0,%4,%3%#\\\";\n \t  /* Long form.  */\n           else\n-\t    return \\\"comclr,<= 0,%2,0\\;bl%* %1,0\\\";\n+\t    return \\\"comclr,%S2 0,%4,0\\;bl%* %3,0\\\";\n         }\n     }\n }\""}]}