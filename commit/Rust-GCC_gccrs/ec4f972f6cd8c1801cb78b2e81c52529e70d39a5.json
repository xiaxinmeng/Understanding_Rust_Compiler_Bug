{"sha": "ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM0Zjk3MmY2Y2Q4YzE4MDFjYjc4YjJlODFjNTI1MjllNzBkMzlhNQ==", "commit": {"author": {"name": "Alex Samuel", "email": "samuel@codesourcery.com", "date": "1999-09-02T17:29:11Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-02T17:29:11Z"}, "message": "decl2.c (arg_assoc_template_arg): New prototype.\n\n\t* decl2.c (arg_assoc_template_arg): New prototype.  New function.\n\t(arg_assoc_class): Use arg_assoc_template_arg for template\n\targuments.\n\t(arg_assoc): Likewise.\n\t* pt.c (mangle_class_name_for_template): Allow member template\n\ttemplate arguments.\n\nFrom-SVN: r29060", "tree": {"sha": "492aa30784ce56f2ba6a183212d10e2c1ca60463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/492aa30784ce56f2ba6a183212d10e2c1ca60463"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/comments", "author": null, "committer": null, "parents": [{"sha": "d0668a73936a55ac7dbb3d62d94a9da6c1cc46cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0668a73936a55ac7dbb3d62d94a9da6c1cc46cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0668a73936a55ac7dbb3d62d94a9da6c1cc46cf"}], "stats": {"total": 186, "additions": 155, "deletions": 31}, "files": [{"sha": "0577dfcd984279d5d66463fcef868decab94695a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "patch": "@@ -1,3 +1,12 @@\n+1999-09-01  Alex Samuel  <samuel@codesourcery.com>\n+\n+\t* decl2.c (arg_assoc_template_arg): New prototype.  New function.\n+\t(arg_assoc_class): Use arg_assoc_template_arg for template\n+\targuments. \n+\t(arg_assoc): Likewise.\n+\t* pt.c (mangle_class_name_for_template): Allow member template\n+\ttemplate arguments.\n+\n 1999-09-02  Nathan Sidwell  <nathan@acm.org>\n \n \t* call.c (build_conditional_expr): Warn on enum mismatches."}, {"sha": "f2aebe63f90d6b7ac281e942c26c31a88a860046", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 46, "deletions": 28, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "patch": "@@ -4544,6 +4544,7 @@ static int arg_assoc_type    PROTO((struct arg_lookup*, tree));\n static int add_function      PROTO((struct arg_lookup *, tree));\n static int arg_assoc_namespace PROTO((struct arg_lookup *, tree));\n static int arg_assoc_class   PROTO((struct arg_lookup *, tree));\n+static int arg_assoc_template_arg PROTO((struct arg_lookup*, tree));\n \n /* Add a function to the lookup structure.\n    Returns 1 on error.  */\n@@ -4607,6 +4608,46 @@ arg_assoc_namespace (k, scope)\n   return 0;\n }\n \n+/* Adds everything associated with a template argument to the lookup\n+   structure.  Returns 1 on error.  */\n+\n+static int\n+arg_assoc_template_arg (k, arg)\n+     struct arg_lookup* k;\n+     tree arg;\n+{\n+  /* [basic.lookup.koenig]\n+\n+     If T is a template-id, its associated namespaces and classes are\n+     ... the namespaces and classes associated with the types of the\n+     template arguments provided for template type parameters\n+     (excluding template template parameters); the namespaces in which\n+     any template template arguments are defined; and the classes in\n+     which any member templates used as template template arguments\n+     are defined.  [Note: non-type template arguments do not\n+     contribute to the set of associated namespaces.  ]  */\n+\n+  /* Consider first template template arguments.  */\n+  if (TREE_CODE (arg) == TEMPLATE_DECL)\n+    {\n+      tree ctx = CP_DECL_CONTEXT (arg);\n+\n+      /* It's not a member template.  */\n+      if (TREE_CODE (ctx) == NAMESPACE_DECL)\n+        return arg_assoc_namespace (k, ctx);\n+      /* Otherwise, it must be member template.  */\n+      else \n+        return arg_assoc_class (k, ctx);\n+    }\n+  /* It's not a template template argument, but it is a type template\n+     argument.  */\n+  else if (TREE_CODE_CLASS (TREE_CODE (arg)) == 't')\n+    return arg_assoc_type (k, arg);\n+  /* It's a non-type template argument.  */\n+  else\n+    return 0;\n+}\n+\n /* Adds everything associated with class to the lookup structure.\n    Returns 1 on error.  */\n \n@@ -4653,8 +4694,8 @@ arg_assoc_class (k, type)\n   if (CLASSTYPE_TEMPLATE_INFO (type))\n     {\n       list = innermost_args (CLASSTYPE_TI_ARGS (type));\n-      for (i = 0; i < TREE_VEC_LENGTH (list); ++i)\n-\targ_assoc (k, TREE_VEC_ELT (list, i));\n+      for (i = 0; i < TREE_VEC_LENGTH (list); ++i) \n+        arg_assoc_template_arg (k, TREE_VEC_ELT (list, i));\n     }\n \n   return 0;\n@@ -4761,14 +4802,7 @@ arg_assoc (k, n)\n \n \t If T is a template-id, its associated namespaces and classes\n \t are the namespace in which the template is defined; for\n-\t member templates, the member template's class; the namespaces\n-\t and classes associated with the types of the template\n-\t arguments provided for template type parameters (excluding\n-\t template template parameters); the namespaces in which any\n-\t template template arguments are defined; and the classes in\n-\t which any member templates used as template template\n-\t arguments are defined.  [Note: non-type template arguments do\n-\t not contribute to the set of associated namespaces.  ]   */\n+\t member templates, the member template's class...  */\n       tree template = TREE_OPERAND (n, 0);\n       tree args = TREE_OPERAND (n, 1);\n       tree ctx;\n@@ -4793,24 +4827,8 @@ arg_assoc (k, n)\n \n       /* Now the arguments.  */\n       for (arg = args; arg != NULL_TREE; arg = TREE_CHAIN (arg))\n-\t{\n-\t  tree t = TREE_VALUE (arg);\n-\n-\t  if (TREE_CODE (t) == TEMPLATE_DECL)\n-\t    {\n-\t      ctx = CP_DECL_CONTEXT (t);\n-\t      if (TREE_CODE (ctx) == NAMESPACE_DECL)\n-\t\t{\n-\t\t  if (arg_assoc_namespace (k, ctx) == 1)\n-\t\t    return 1;\n-\t\t}\n-\t      else if (arg_assoc_class (k, ctx) == 1)\n-\t\treturn 1;\n-\t    }\n-\t  else if (TREE_CODE_CLASS (TREE_CODE (t)) == 't'\n-\t\t   && arg_assoc_type (k, t) == 1)\n-\t    return 1;\n-\t}\n+\tif (arg_assoc_template_arg (k, TREE_VALUE (arg)) == 1)\n+\t  return 1;\n     }\n   else\n     {"}, {"sha": "bc50c0fc87b6d4cc8082aeaa76973e64ef10bd2c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "patch": "@@ -3538,9 +3538,13 @@ mangle_class_name_for_template (name, parms, arglist)\n \t      /* Already substituted with real template.  Just output \n \t\t the template name here */\n               tree context = DECL_CONTEXT (arg);\n-\t      if (context)\n-\t\t{\n-                  my_friendly_assert (TREE_CODE (context) == NAMESPACE_DECL, 980422);\n+              if (context)\n+                {\n+                  /* The template may be defined in a namespace, or\n+                     may be a member template.  */\n+                  my_friendly_assert (TREE_CODE (context) == NAMESPACE_DECL\n+                                      || CLASS_TYPE_P (context), \n+                                      980422);\n \t\t  cat(decl_as_string (DECL_CONTEXT (arg), 0));\n \t\t  cat(\"::\");\n \t\t}"}, {"sha": "7c7c9386f8a5532159461700b66043e0ec57ed02", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp57.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp57.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp57.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp57.C?ref=ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "patch": "@@ -0,0 +1,45 @@\n+// Build don't link:\n+// Origin: Alex Samuel <samuel@codesourcery.com>\n+\n+namespace NS \n+{ \n+\n+template <class T, int V>\n+struct Base\n+{\n+};\n+\n+template <class T>\n+struct Z\n+{\n+  const static int value_ = false;\n+};\n+\n+template <class T>\n+struct A : \n+  public Base <T, Z<T>::value_>\n+{\n+}; \n+\n+template <class T> \n+void f(T)\n+{\n+}\n+\n+}\n+\n+\n+template <template <class T> class U> \n+struct B \n+{\n+};\n+\n+\n+int \n+main ()\n+{\n+  B<NS::A> ba; \n+  f (ba);  // Koenig lookup\n+  return 0;\n+}\n+"}, {"sha": "662058037b72e8cdb362a0d20503bb2deb06fd69", "filename": "gcc/testsuite/g++.old-deja/g++.pt/ttp58.C", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec4f972f6cd8c1801cb78b2e81c52529e70d39a5/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fttp58.C?ref=ec4f972f6cd8c1801cb78b2e81c52529e70d39a5", "patch": "@@ -0,0 +1,48 @@\n+// Build don't link:\n+// Origin: Alex Samuel <samuel@codesourcery.com>\n+\n+namespace NS\n+{ \n+\n+template <class T, int V>\n+struct Base\n+{\n+};\n+\n+template <class T>\n+struct Z\n+{\n+  const static int value_ = false;\n+};\n+\n+class Outer\n+{\n+  template <class T>\n+  struct A : \n+    public Base <T, Z<T>::value_>\n+  {\n+  }; \n+};\n+\n+template <class T> \n+void f(T)\n+{\n+}\n+\n+}\n+\n+\n+template <template <class T> class U> \n+struct B \n+{\n+};\n+\n+\n+int \n+main ()\n+{\n+  B<NS::Outer::A> ba; \n+  f (ba);  // Koenig lookup\n+  return 0;\n+}\n+"}]}