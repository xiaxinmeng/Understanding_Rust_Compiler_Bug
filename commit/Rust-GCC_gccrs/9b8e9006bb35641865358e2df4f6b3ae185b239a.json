{"sha": "9b8e9006bb35641865358e2df4f6b3ae185b239a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWI4ZTkwMDZiYjM1NjQxODY1MzU4ZTJkZjRmNmIzYWUxODViMjM5YQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-27T19:14:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-04-27T21:28:25Z"}, "message": "x86: Fix up ix86_atomic_assign_expand_fenv [PR94780]\n\nThis function, because it is sometimes called even outside of function\nbodies, uses create_tmp_var_raw rather than create_tmp_var.  But in order\nfor that to work, when first referenced, the VAR_DECLs need to appear in a\nTARGET_EXPR so that during gimplification the var gets the right\nDECL_CONTEXT and is added to local decls.  Without that, e.g. tree-nested.c\nICEs on those.\n\n2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/94780\n\t* config/i386/i386.c (ix86_atomic_assign_expand_fenv): Use\n\tTARGET_EXPR instead of MODIFY_EXPR for first assignment to\n\tsw_var, exceptions_var, mxcsr_orig_var and mxcsr_mod_var.\n\n\t* gcc.dg/pr94780.c: New test.", "tree": {"sha": "4a34d42b7c650874c77a73a918b1a1f160b2d601", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a34d42b7c650874c77a73a918b1a1f160b2d601"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b8e9006bb35641865358e2df4f6b3ae185b239a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8e9006bb35641865358e2df4f6b3ae185b239a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b8e9006bb35641865358e2df4f6b3ae185b239a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b8e9006bb35641865358e2df4f6b3ae185b239a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1cd1da1a805c3d00332da45c3ab78a3931af63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f1cd1da1a805c3d00332da45c3ab78a3931af63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f1cd1da1a805c3d00332da45c3ab78a3931af63"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "a98cb47a521d8844ece9844e0f9dbff8608d69dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9b8e9006bb35641865358e2df4f6b3ae185b239a", "patch": "@@ -1,3 +1,10 @@\n+2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94780\n+\t* config/i386/i386.c (ix86_atomic_assign_expand_fenv): Use\n+\tTARGET_EXPR instead of MODIFY_EXPR for first assignment to\n+\tsw_var, exceptions_var, mxcsr_orig_var and mxcsr_mod_var.\n+\n 2020-04-27  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/arm/arm-builtins.c (arm_expand_builtin_args): Only apply"}, {"sha": "59101d8028a0a5304ddef90fe75d615edc05199d", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=9b8e9006bb35641865358e2df4f6b3ae185b239a", "patch": "@@ -22390,11 +22390,12 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n       *clear = build_call_expr (fnclex, 0);\n       tree sw_var = create_tmp_var_raw (short_unsigned_type_node);\n       tree fnstsw_call = build_call_expr (fnstsw, 0);\n-      tree sw_mod = build2 (MODIFY_EXPR, short_unsigned_type_node,\n-\t\t\t    sw_var, fnstsw_call);\n+      tree sw_mod = build4 (TARGET_EXPR, short_unsigned_type_node, sw_var,\n+\t\t\t    fnstsw_call, NULL_TREE, NULL_TREE);\n       tree exceptions_x87 = fold_convert (integer_type_node, sw_var);\n-      tree update_mod = build2 (MODIFY_EXPR, integer_type_node,\n-\t\t\t\texceptions_var, exceptions_x87);\n+      tree update_mod = build4 (TARGET_EXPR, integer_type_node,\n+\t\t\t\texceptions_var, exceptions_x87,\n+\t\t\t\tNULL_TREE, NULL_TREE);\n       *update = build2 (COMPOUND_EXPR, integer_type_node,\n \t\t\tsw_mod, update_mod);\n       tree update_fldenv = build_call_expr (fldenv, 1, fenv_addr);\n@@ -22407,15 +22408,17 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n       tree stmxcsr = get_ix86_builtin (IX86_BUILTIN_STMXCSR);\n       tree ldmxcsr = get_ix86_builtin (IX86_BUILTIN_LDMXCSR);\n       tree stmxcsr_hold_call = build_call_expr (stmxcsr, 0);\n-      tree hold_assign_orig = build2 (MODIFY_EXPR, unsigned_type_node,\n-\t\t\t\t      mxcsr_orig_var, stmxcsr_hold_call);\n+      tree hold_assign_orig = build4 (TARGET_EXPR, unsigned_type_node,\n+\t\t\t\t      mxcsr_orig_var, stmxcsr_hold_call,\n+\t\t\t\t      NULL_TREE, NULL_TREE);\n       tree hold_mod_val = build2 (BIT_IOR_EXPR, unsigned_type_node,\n \t\t\t\t  mxcsr_orig_var,\n \t\t\t\t  build_int_cst (unsigned_type_node, 0x1f80));\n       hold_mod_val = build2 (BIT_AND_EXPR, unsigned_type_node, hold_mod_val,\n \t\t\t     build_int_cst (unsigned_type_node, 0xffffffc0));\n-      tree hold_assign_mod = build2 (MODIFY_EXPR, unsigned_type_node,\n-\t\t\t\t     mxcsr_mod_var, hold_mod_val);\n+      tree hold_assign_mod = build4 (TARGET_EXPR, unsigned_type_node,\n+\t\t\t\t     mxcsr_mod_var, hold_mod_val,\n+\t\t\t\t     NULL_TREE, NULL_TREE);\n       tree ldmxcsr_hold_call = build_call_expr (ldmxcsr, 1, mxcsr_mod_var);\n       tree hold_all = build2 (COMPOUND_EXPR, unsigned_type_node,\n \t\t\t      hold_assign_orig, hold_assign_mod);\n@@ -22444,8 +22447,8 @@ ix86_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n \t\t\t    exceptions_assign);\n \t}\n       else\n-\t*update = build2 (MODIFY_EXPR, integer_type_node,\n-\t\t\t  exceptions_var, exceptions_sse);\n+\t*update = build4 (TARGET_EXPR, integer_type_node, exceptions_var,\n+\t\t\t  exceptions_sse, NULL_TREE, NULL_TREE);\n       tree ldmxcsr_update_call = build_call_expr (ldmxcsr, 1, mxcsr_orig_var);\n       *update = build2 (COMPOUND_EXPR, void_type_node, *update,\n \t\t\tldmxcsr_update_call);"}, {"sha": "6d948a52b608de7fbb9fa4e0ab4fa65b9c59955d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b8e9006bb35641865358e2df4f6b3ae185b239a", "patch": "@@ -1,3 +1,8 @@\n+2020-04-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/94780\n+\t* gcc.dg/pr94780.c: New test.\n+\n 2020-04-27  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94772"}, {"sha": "c4b723e24b2f47eb1b14bf195b5b25794cfd23a0", "filename": "gcc/testsuite/gcc.dg/pr94780.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94780.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b8e9006bb35641865358e2df4f6b3ae185b239a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94780.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr94780.c?ref=9b8e9006bb35641865358e2df4f6b3ae185b239a", "patch": "@@ -0,0 +1,13 @@\n+/* PR target/94780 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+_Atomic double x;\n+\n+double\n+foo (void)\n+{\n+  double bar () { return x; }\n+  x /= 3;\n+  return bar ();\n+}"}]}