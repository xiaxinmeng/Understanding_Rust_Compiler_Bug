{"sha": "6e0a7f2bdb195af927b40aa4dd689703b730a22b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwYTdmMmJkYjE5NWFmOTI3YjQwYWE0ZGQ2ODk3MDNiNzMwYTIyYg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-08-03T10:11:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-08-03T10:11:31Z"}, "message": "list.tcc: Trivial formatting fixes.\n\n2004-08-03  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/list.tcc: Trivial formatting fixes.\n\nFrom-SVN: r85470", "tree": {"sha": "91d9403a694c75413af05cd4ee9a97e3daaa4553", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91d9403a694c75413af05cd4ee9a97e3daaa4553"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e0a7f2bdb195af927b40aa4dd689703b730a22b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0a7f2bdb195af927b40aa4dd689703b730a22b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e0a7f2bdb195af927b40aa4dd689703b730a22b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e0a7f2bdb195af927b40aa4dd689703b730a22b/comments", "author": null, "committer": null, "parents": [{"sha": "1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a5d37a1239900afd24ddd0ffdc6d97d955d3f7f"}], "stats": {"total": 131, "additions": 68, "deletions": 63}, "files": [{"sha": "287efec3665c27e9825dd73bf7e76acaa158c1ce", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0a7f2bdb195af927b40aa4dd689703b730a22b/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0a7f2bdb195af927b40aa4dd689703b730a22b/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6e0a7f2bdb195af927b40aa4dd689703b730a22b", "patch": "@@ -1,3 +1,7 @@\n+2004-08-03  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/list.tcc: Trivial formatting fixes.\n+\n 2004-08-03  Mark Mitchell  <mark@codesourcery.com>\n \n \t* libsupc++/new_op.cc: Update comments."}, {"sha": "851c4ad70ccf42f31f0843773c33f44f10c95ae0", "filename": "libstdc++-v3/include/bits/list.tcc", "status": "modified", "additions": 64, "deletions": 63, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e0a7f2bdb195af927b40aa4dd689703b730a22b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e0a7f2bdb195af927b40aa4dd689703b730a22b/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flist.tcc?ref=6e0a7f2bdb195af927b40aa4dd689703b730a22b", "patch": "@@ -65,23 +65,23 @@ namespace _GLIBCXX_STD\n {\n   template<typename _Tp, typename _Alloc>\n     void\n-    _List_base<_Tp,_Alloc>::\n+    _List_base<_Tp, _Alloc>::\n     _M_clear()\n     {\n       typedef _List_node<_Tp>  _Node;\n       _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);\n       while (__cur != &this->_M_impl._M_node)\n-      {\n-        _Node* __tmp = __cur;\n-        __cur = static_cast<_Node*>(__cur->_M_next);\n-        this->get_allocator().destroy(&__tmp->_M_data);\n-        _M_put_node(__tmp);\n-      }\n+\t{\n+\t  _Node* __tmp = __cur;\n+\t  __cur = static_cast<_Node*>(__cur->_M_next);\n+\t  this->get_allocator().destroy(&__tmp->_M_data);\n+\t  _M_put_node(__tmp);\n+\t}\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    typename list<_Tp,_Alloc>::iterator\n-    list<_Tp,_Alloc>::\n+    typename list<_Tp, _Alloc>::iterator\n+    list<_Tp, _Alloc>::\n     insert(iterator __position, const value_type& __x)\n     {\n       _Node* __tmp = _M_create_node(__x);\n@@ -90,8 +90,8 @@ namespace _GLIBCXX_STD\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    typename list<_Tp,_Alloc>::iterator\n-    list<_Tp,_Alloc>::\n+    typename list<_Tp, _Alloc>::iterator\n+    list<_Tp, _Alloc>::\n     erase(iterator __position)\n     {\n       iterator __ret = __position._M_node->_M_next;\n@@ -101,12 +101,12 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     resize(size_type __new_size, const value_type& __x)\n     {\n       iterator __i = begin();\n       size_type __len = 0;\n-      for ( ; __i != end() && __len < __new_size; ++__i, ++__len)\n+      for (; __i != end() && __len < __new_size; ++__i, ++__len)\n         ;\n       if (__len == __new_size)\n         erase(__i, end());\n@@ -115,8 +115,8 @@ namespace _GLIBCXX_STD\n     }\n \n   template<typename _Tp, typename _Alloc>\n-    list<_Tp,_Alloc>&\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>&\n+    list<_Tp, _Alloc>::\n     operator=(const list& __x)\n     {\n       if (this != &__x)\n@@ -137,11 +137,11 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     _M_fill_assign(size_type __n, const value_type& __val)\n     {\n       iterator __i = begin();\n-      for ( ; __i != end() && __n > 0; ++__i, --__n)\n+      for (; __i != end() && __n > 0; ++__i, --__n)\n         *__i = __val;\n       if (__n > 0)\n         insert(end(), __n, __val);\n@@ -152,7 +152,7 @@ namespace _GLIBCXX_STD\n   template<typename _Tp, typename _Alloc>\n     template <typename _InputIterator>\n       void\n-      list<_Tp,_Alloc>::\n+      list<_Tp, _Alloc>::\n       _M_assign_dispatch(_InputIterator __first2, _InputIterator __last2,\n \t\t\t __false_type)\n       {\n@@ -169,24 +169,24 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     remove(const value_type& __value)\n     {\n       iterator __first = begin();\n       iterator __last = end();\n       while (__first != __last)\n-      {\n-        iterator __next = __first;\n-        ++__next;\n-        if (*__first == __value)\n-          _M_erase(__first);\n-        __first = __next;\n-      }\n+\t{\n+\t  iterator __next = __first;\n+\t  ++__next;\n+\t  if (*__first == __value)\n+\t    _M_erase(__first);\n+\t  __first = __next;\n+\t}\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     unique()\n     {\n       iterator __first = begin();\n@@ -195,18 +195,18 @@ namespace _GLIBCXX_STD\n \treturn;\n       iterator __next = __first;\n       while (++__next != __last)\n-      {\n-        if (*__first == *__next)\n-          _M_erase(__next);\n-        else\n-          __first = __next;\n-        __next = __first;\n-      }\n+\t{\n+\t  if (*__first == *__next)\n+\t    _M_erase(__next);\n+\t  else\n+\t    __first = __next;\n+\t  __next = __first;\n+\t}\n     }\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     merge(list& __x)\n     {\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -233,7 +233,7 @@ namespace _GLIBCXX_STD\n \n   template<typename _Tp, typename _Alloc>\n     void\n-    list<_Tp,_Alloc>::\n+    list<_Tp, _Alloc>::\n     sort()\n     {\n       // Do nothing if the list has length 0 or 1.\n@@ -250,7 +250,7 @@ namespace _GLIBCXX_STD\n \t    __carry.splice(__carry.begin(), *this, begin());\n \n \t    for(__counter = &__tmp[0];\n-\t\t(__counter != __fill) && !__counter->empty();\n+\t\t__counter != __fill && !__counter->empty();\n \t\t++__counter)\n \t      {\n \t\t__counter->merge(__carry);\n@@ -262,54 +262,55 @@ namespace _GLIBCXX_STD\n \t  }\n \twhile ( !empty() );\n \n-        for (__counter =  &__tmp[1]; __counter != __fill; ++__counter)\n-          __counter->merge( *(__counter-1) );\n-        swap( *(__fill-1) );\n+        for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n+          __counter->merge(*(__counter - 1));\n+        swap( *(__fill - 1) );\n       }\n     }\n \n   template<typename _Tp, typename _Alloc>\n     template <typename _Predicate>\n       void\n-      list<_Tp,_Alloc>::\n+      list<_Tp, _Alloc>::\n       remove_if(_Predicate __pred)\n       {\n         iterator __first = begin();\n         iterator __last = end();\n         while (__first != __last)\n-        {\n-          iterator __next = __first;\n-          ++__next;\n-          if (__pred(*__first))\n-\t    _M_erase(__first);\n-          __first = __next;\n-        }\n+\t  {\n+\t    iterator __next = __first;\n+\t    ++__next;\n+\t    if (__pred(*__first))\n+\t      _M_erase(__first);\n+\t    __first = __next;\n+\t  }\n       }\n \n   template<typename _Tp, typename _Alloc>\n     template <typename _BinaryPredicate>\n       void\n-      list<_Tp,_Alloc>::\n+      list<_Tp, _Alloc>::\n       unique(_BinaryPredicate __binary_pred)\n       {\n         iterator __first = begin();\n         iterator __last = end();\n-        if (__first == __last) return;\n+        if (__first == __last)\n+\t  return;\n         iterator __next = __first;\n         while (++__next != __last)\n-        {\n-          if (__binary_pred(*__first, *__next))\n-            _M_erase(__next);\n-          else\n-            __first = __next;\n-          __next = __first;\n-        }\n+\t  {\n+\t    if (__binary_pred(*__first, *__next))\n+\t      _M_erase(__next);\n+\t    else\n+\t      __first = __next;\n+\t    __next = __first;\n+\t  }\n       }\n \n   template<typename _Tp, typename _Alloc>\n     template <typename _StrictWeakOrdering>\n       void\n-      list<_Tp,_Alloc>::\n+      list<_Tp, _Alloc>::\n       merge(list& __x, _StrictWeakOrdering __comp)\n       {\n \t// _GLIBCXX_RESOLVE_LIB_DEFECTS\n@@ -337,7 +338,7 @@ namespace _GLIBCXX_STD\n   template<typename _Tp, typename _Alloc>\n     template <typename _StrictWeakOrdering>\n       void\n-      list<_Tp,_Alloc>::\n+      list<_Tp, _Alloc>::\n       sort(_StrictWeakOrdering __comp)\n       {\n \t// Do nothing if the list has length 0 or 1.\n@@ -354,7 +355,7 @@ namespace _GLIBCXX_STD\n \t\t__carry.splice(__carry.begin(), *this, begin());\n \n \t\tfor(__counter = &__tmp[0];\n-\t\t    (__counter != __fill) && !__counter->empty();\n+\t\t    __counter != __fill && !__counter->empty();\n \t\t    ++__counter)\n \t\t  {\n \t\t    __counter->merge(__carry, __comp);\n@@ -366,9 +367,9 @@ namespace _GLIBCXX_STD\n \t      }\n \t    while ( !empty() );\n \n-\t    for (__counter =  &__tmp[1]; __counter != __fill; ++__counter)\n-\t      __counter->merge( *(__counter-1), __comp );\n-\t    swap( *(__fill-1) );\n+\t    for (__counter = &__tmp[1]; __counter != __fill; ++__counter)\n+\t      __counter->merge(*(__counter - 1), __comp);\n+\t    swap(*(__fill - 1));\n \t  }\n       }\n } // namespace std"}]}