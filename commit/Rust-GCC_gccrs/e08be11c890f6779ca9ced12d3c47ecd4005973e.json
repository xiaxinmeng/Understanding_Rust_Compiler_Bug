{"sha": "e08be11c890f6779ca9ced12d3c47ecd4005973e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA4YmUxMWM4OTBmNjc3OWNhOWNlZDEyZDNjNDdlY2Q0MDA1OTczZQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2008-11-17T22:59:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2008-11-17T22:59:54Z"}, "message": "mips.h (REG_ALLOC_ORDER): Put accumulators first.\n\ngcc/\n\t* config/mips/mips.h (REG_ALLOC_ORDER): Put accumulators first.\n\tTweak formatting.\n\t* config/mips/mips.c (mips_ira_cover_classes): Don't use accumulator\n\tregisters when not optimizing.\n\ngcc/testsuite/\n\t* gcc.target/mips/dspr2-MULT.c: Just check for $ac1 and $ac2.\n\t* gcc.target/mips/dspr2-MULTU.c: Likewise.\n\nFrom-SVN: r141955", "tree": {"sha": "765d5dcbc3b9a8a0de57e3985b3cab442bfb69fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765d5dcbc3b9a8a0de57e3985b3cab442bfb69fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e08be11c890f6779ca9ced12d3c47ecd4005973e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08be11c890f6779ca9ced12d3c47ecd4005973e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08be11c890f6779ca9ced12d3c47ecd4005973e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08be11c890f6779ca9ced12d3c47ecd4005973e/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "839380ee609b06d30fd574b0396d66a58f58bb57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/839380ee609b06d30fd574b0396d66a58f58bb57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/839380ee609b06d30fd574b0396d66a58f58bb57"}], "stats": {"total": 56, "additions": 34, "deletions": 22}, "files": [{"sha": "0477d27532c54a1654339c6bcf0883073749b049", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -1,3 +1,10 @@\n+2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* config/mips/mips.h (REG_ALLOC_ORDER): Put accumulators first.\n+\tTweak formatting.\n+\t* config/mips/mips.c (mips_ira_cover_classes): Don't use accumulator\n+\tregisters when not optimizing.\n+\n 2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.md (*mul_acc_si): Remove middle alternative"}, {"sha": "0c2836dbd65816d1ff63b58650b8d09c3762d00e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -9886,8 +9886,12 @@ mips_ira_cover_classes (void)\n   };\n \n   /* Don't allow the register allocators to use LO and HI in MIPS16 mode,\n-     which has no MTLO or MTHI instructions.  */\n-  return TARGET_MIPS16 ? no_acc_classes : acc_classes;\n+     which has no MTLO or MTHI instructions.  Also, using GR_AND_ACC_REGS\n+     as a cover class only works well when we keep per-register costs.\n+     Using it when not optimizing can cause us to think accumulators\n+     have the same cost as GPRs in cases where GPRs are actually much\n+     cheaper.  */\n+  return TARGET_MIPS16 || !optimize ? no_acc_classes : acc_classes;\n }\n \n /* Return the register class required for a secondary register when"}, {"sha": "562c053337934e0360668f959b459145a0bbe3a9", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -1925,8 +1925,16 @@ enum reg_class\n    call-saved ones.  (IRA expects this.)  */\n \n #define REG_ALLOC_ORDER\t\t\t\t\t\t\t\\\n-{ /* Call-clobbered GPRs.  */\t\t\t\t\t\t\\\n-   1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\t\t\\\n+{ /* Accumulator registers.  When GPRs and accumulators have equal\t\\\n+     cost, we generally prefer to use accumulators.  For example,\t\\\n+     a division of multiplication result is better allocated to LO,\t\\\n+     so that we put the MFLO at the point of use instead of at the\t\\\n+     point of definition.  It's also needed if we're to take advantage\t\\\n+     of the extra accumulators available with -mdspr2.  In some cases,\t\\\n+     it can also help to reduce register pressure.  */\t\t\t\\\n+  64, 65,176,177,178,179,180,181,\t\t\t\t\t\\\n+  /* Call-clobbered GPRs.  */\t\t\t\t\t\t\\\n+  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\t\t\\\n   24, 25, 31,\t\t\t\t\t\t\t\t\\\n   /* The global pointer.  This is call-clobbered for o32 and o64\t\\\n      abicalls, call-saved for n32 and n64 abicalls, and a program\t\\\n@@ -1936,7 +1944,7 @@ enum reg_class\n   /* Call-saved GPRs.  */\t\t\t\t\t\t\\\n   16, 17, 18, 19, 20, 21, 22, 23, 30,\t\t\t\t\t\\\n   /* GPRs that can never be exposed to the register allocator.  */\t\\\n-   0, 26, 27, 29,\t\t\t\t\t\t\t\\\n+  0,  26, 27, 29,\t\t\t\t\t\t\t\\\n   /* Call-clobbered FPRs.  */\t\t\t\t\t\t\\\n   32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\t\\\n   48, 49, 50, 51,\t\t\t\t\t\t\t\\\n@@ -1949,14 +1957,14 @@ enum reg_class\n   52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,\t\t\t\\\n   /* None of the remaining classes have defined call-saved\t\t\\\n      registers.  */\t\t\t\t\t\t\t\\\n-  64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\t\\\n+  66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\t\t\\\n   80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\t\\\n   96, 97, 98, 99, 100,101,102,103,104,105,106,107,108,109,110,111,\t\\\n   112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,\t\\\n   128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,\t\\\n   144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,\t\\\n   160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,\t\\\n-  176,177,178,179,180,181,182,183,184,185,186,187\t\t\t\\\n+  182,183,184,185,186,187\t\t\t\t\t\t\\\n }\n \n /* ORDER_REGS_FOR_LOCAL_ALLOC is a macro which permits reg_alloc_order"}, {"sha": "2bc3201729925629593ab03b18dd60f4a18d198e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -1,3 +1,8 @@\n+2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.target/mips/dspr2-MULT.c: Just check for $ac1 and $ac2.\n+\t* gcc.target/mips/dspr2-MULTU.c: Likewise.\n+\n 2008-11-17  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc.target/mips/madd-5.c: New test."}, {"sha": "9aa95c69afaa196ed86524234d931761b165c159", "filename": "gcc/testsuite/gcc.target/mips/dspr2-MULT.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULT.c?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -5,17 +5,11 @@\n /* { dg-final { scan-assembler \"\\tmult\\t\" } } */\n /* { dg-final { scan-assembler \"ac1\" } } */\n /* { dg-final { scan-assembler \"ac2\" } } */\n-/* { dg-final { scan-assembler \"ac3\" } } */\n \n typedef long long a64;\n-a64 a[4];\n-int b[4], c[4];\n \n-NOMIPS16 void test ()\n+NOMIPS16 a64 test (a64 *a, int *b, int *c)\n {\n   a[0] = (a64) b[0] * c[0];\n   a[1] = (a64) b[1] * c[1];\n-  a[2] = (a64) b[2] * c[2];\n-  a[3] = (a64) b[3] * c[3];\n }\n-"}, {"sha": "ac8a7d80286ec3fc2bb0248799238cfe3d7a09a3", "filename": "gcc/testsuite/gcc.target/mips/dspr2-MULTU.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e08be11c890f6779ca9ced12d3c47ecd4005973e/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdspr2-MULTU.c?ref=e08be11c890f6779ca9ced12d3c47ecd4005973e", "patch": "@@ -5,17 +5,11 @@\n /* { dg-final { scan-assembler \"\\tmultu\\t\" } } */\n /* { dg-final { scan-assembler \"ac1\" } } */\n /* { dg-final { scan-assembler \"ac2\" } } */\n-/* { dg-final { scan-assembler \"ac3\" } } */\n \n-typedef long long a64;\n-a64 a[4];\n-unsigned int b[4], c[4];\n+typedef unsigned long long a64;\n \n-NOMIPS16 void test ()\n+NOMIPS16 a64 test (a64 *a, unsigned int *b, unsigned int *c)\n {\n   a[0] = (a64) b[0] * c[0];\n   a[1] = (a64) b[1] * c[1];\n-  a[2] = (a64) b[2] * c[2];\n-  a[3] = (a64) b[3] * c[3];\n }\n-"}]}