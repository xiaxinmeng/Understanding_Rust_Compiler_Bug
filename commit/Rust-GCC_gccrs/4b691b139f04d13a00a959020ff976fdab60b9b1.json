{"sha": "4b691b139f04d13a00a959020ff976fdab60b9b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI2OTFiMTM5ZjA0ZDEzYTAwYTk1OTAyMGZmOTc2ZmRhYjYwYjliMQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2017-06-19T18:20:10Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2017-06-19T18:20:10Z"}, "message": "PR c++/81073 - constexpr and static var in statement-expression.\n\n\t* typeck2.c (store_init_value): Always call\n\trequire_potential_constant_expression.\n\t* pt.c (convert_nontype_argument): Likewise.\n\t* constexpr.c (potential_constant_expression_1): Adjust message.\n\tUse decl_maybe_constant_var_p instead of decl_constant_var_p.\n\t* decl2.c (decl_maybe_constant_var_p): Consider initializer.\n\nFrom-SVN: r249382", "tree": {"sha": "49dff5d7a10ccfed86633f18d38020cbb01cabaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49dff5d7a10ccfed86633f18d38020cbb01cabaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b691b139f04d13a00a959020ff976fdab60b9b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b691b139f04d13a00a959020ff976fdab60b9b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b691b139f04d13a00a959020ff976fdab60b9b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b691b139f04d13a00a959020ff976fdab60b9b1/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c9f8853f9e74816ccb68a5a549f1f61295ce07ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9f8853f9e74816ccb68a5a549f1f61295ce07ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9f8853f9e74816ccb68a5a549f1f61295ce07ed"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "55ba486d9f226fde6ee277b027e4efc0eeab5fbd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -1,3 +1,13 @@\n+2017-06-19  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/81073 - constexpr and static var in statement-expression.\n+\t* typeck2.c (store_init_value): Always call\n+\trequire_potential_constant_expression.\n+\t* pt.c (convert_nontype_argument): Likewise.\n+\t* constexpr.c (potential_constant_expression_1): Adjust message.\n+\tUse decl_maybe_constant_var_p instead of decl_constant_var_p.\n+\t* decl2.c (decl_maybe_constant_var_p): Consider initializer.\n+\n 2017-06-19  Nathan Sidwell  <nathan@acm.org>\n \n \t* pt.c (coerce_template_parms): Fix indentation."}, {"sha": "569a247d6b0a81a41000856ebc2b0c7000730df9", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -5212,10 +5212,11 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n       if (want_rval\n \t  && !var_in_maybe_constexpr_fn (t)\n \t  && !type_dependent_expression_p (t)\n-\t  && !decl_constant_var_p (t)\n+\t  && !decl_maybe_constant_var_p (t)\n \t  && (strict\n \t      || !CP_TYPE_CONST_NON_VOLATILE_P (TREE_TYPE (t))\n-\t      || !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (t))\n+\t      || (DECL_INITIAL (t)\n+\t\t  && !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (t)))\n \t  && COMPLETE_TYPE_P (TREE_TYPE (t))\n \t  && !is_really_empty_class (TREE_TYPE (t)))\n         {\n@@ -5540,21 +5541,21 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict,\n \t    {\n \t      if (flags & tf_error)\n \t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n-\t\t\t  \"%<static%> in %<constexpr%> function\", tmp);\n+\t\t\t  \"%<static%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n \t  else if (CP_DECL_THREAD_LOCAL_P (tmp))\n \t    {\n \t      if (flags & tf_error)\n \t\terror_at (DECL_SOURCE_LOCATION (tmp), \"%qD declared \"\n-\t\t\t  \"%<thread_local%> in %<constexpr%> function\", tmp);\n+\t\t\t  \"%<thread_local%> in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n \t  else if (!DECL_NONTRIVIALLY_INITIALIZED_P (tmp))\n \t    {\n \t      if (flags & tf_error)\n \t\terror_at (DECL_SOURCE_LOCATION (tmp), \"uninitialized \"\n-\t\t\t  \"variable %qD in %<constexpr%> function\", tmp);\n+\t\t\t  \"variable %qD in %<constexpr%> context\", tmp);\n \t      return false;\n \t    }\n \t}"}, {"sha": "a4751460e065172821a49d4d0611d54068b2fd42", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -4145,10 +4145,19 @@ decl_maybe_constant_var_p (tree decl)\n     /* A proxy isn't constant.  */\n     return false;\n   if (TREE_CODE (type) == REFERENCE_TYPE)\n-    /* References can be constant.  */\n+    /* References can be constant.  */;\n+  else if (CP_TYPE_CONST_NON_VOLATILE_P (type)\n+\t   && INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n+    /* And const integers.  */;\n+  else\n+    return false;\n+\n+  if (DECL_INITIAL (decl)\n+      && !DECL_INITIALIZED_BY_CONSTANT_EXPRESSION_P (decl))\n+    /* We know the initializer, and it isn't constant.  */\n+    return false;\n+  else\n     return true;\n-  return (CP_TYPE_CONST_NON_VOLATILE_P (type)\n-\t  && INTEGRAL_OR_ENUMERATION_TYPE_P (type));\n }\n \n /* Complain that DECL uses a type with no linkage.  In C++98 mode this is"}, {"sha": "69ca9291960681fcdb62ca002c7f1eb2fd1e7e7c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -6585,10 +6585,10 @@ convert_nontype_argument (tree type, tree expr, tsubst_flags_t complain)\n \t  if (complain & tf_error)\n \t    {\n \t      int errs = errorcount, warns = warningcount + werrorcount;\n-\t      if (processing_template_decl\n-\t\t  && !require_potential_constant_expression (expr))\n-\t\treturn NULL_TREE;\n-\t      expr = cxx_constant_value (expr);\n+\t      if (!require_potential_constant_expression (expr))\n+\t\texpr = error_mark_node;\n+\t      else\n+\t\texpr = cxx_constant_value (expr);\n \t      if (errorcount > errs || warningcount + werrorcount > warns)\n \t\tinform (loc, \"in template argument for type %qT \", type);\n \t      if (expr == error_mark_node)"}, {"sha": "430ba30536a0f9719f0ef0cb3a21540138124060", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -821,8 +821,7 @@ store_init_value (tree decl, tree init, vec<tree, va_gc>** cleanups, int flags)\n \t  || (DECL_IN_AGGR_P (decl) && !DECL_VAR_DECLARED_INLINE_P (decl)))\n \t{\n \t  /* Diagnose a non-constant initializer for constexpr.  */\n-\t  if (processing_template_decl\n-\t      && !require_potential_constant_expression (value))\n+\t  if (!require_potential_constant_expression (value))\n \t    value = error_mark_node;\n \t  else\n \t    value = cxx_constant_value (value, decl);"}, {"sha": "ccb8d81adca6054a075a67b0b44cf22f46d21fbb", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -16,5 +16,5 @@ constexpr int i = ai.f();\n constexpr int b = A<B>().f();\t// { dg-error \"\" }\n \n template <class T>\n-constexpr int f (T t) { return 42; } // { dg-error \"parameter\" }\n-constexpr int x = f(B());\t     // { dg-error \"constexpr\" }\n+constexpr int f (T t) { return 42; }\n+constexpr int x = f(B());\t     // { dg-error \"non-literal\" }"}, {"sha": "005f07befb9cd9518b8326be5d54adc2fbaa4a5d", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-trivial2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-trivial2.C?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -10,5 +10,5 @@ struct T\n \n int main()\n {\n-    constexpr T t = (T{} = T{});\n+    constexpr T t = (T{} = T{}); // { dg-error \"\" \"\" { target c++11_only } }\n }"}, {"sha": "0c19a210f709b10c576593f0812bee18ca36e5ef", "filename": "gcc/testsuite/g++.dg/ext/stmtexpr19.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b691b139f04d13a00a959020ff976fdab60b9b1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fstmtexpr19.C?ref=4b691b139f04d13a00a959020ff976fdab60b9b1", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/81073\n+// { dg-options \"\" }\n+// { dg-do compile { target c++11 } }\n+\n+struct test { const int *addr; };\n+\n+const test* setup()\n+{\n+  static constexpr test atest =\n+    {\n+      ({ static const int inner = 123; &inner; }) // { dg-error \"static\" }\n+    };\n+\n+  return &atest;\n+}\n+\n+int main(){}"}]}