{"sha": "df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY2MWEzZDIyYWI1NGY5MTE1NjM4ZThmNWI3NjFmZmZiZjFhNGRiZQ==", "commit": {"author": {"name": "Adam Megacz", "email": "adam@xwt.org", "date": "2002-02-11T18:31:10Z"}, "committer": {"name": "Adam Megacz", "email": "megacz@gcc.gnu.org", "date": "2002-02-11T18:31:10Z"}, "message": "configure.in: support for win32, saner cross-compile options\n\n2002-02-11  Adam Megacz <adam@xwt.org>\n\n        * gcc/boehm-gc/configure.in: support for win32, saner\n        cross-compile options\n\nFrom-SVN: r49681", "tree": {"sha": "380aead484288c61e65327448a2aa5a3a50014ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/380aead484288c61e65327448a2aa5a3a50014ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/comments", "author": null, "committer": null, "parents": [{"sha": "b150efee3900a083ce69ea5d3b912bafa1837592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b150efee3900a083ce69ea5d3b912bafa1837592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b150efee3900a083ce69ea5d3b912bafa1837592"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "8512374d0176659971da1c8b53809663ae61a851", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "patch": "@@ -1,3 +1,8 @@\n+2001-02-11  Adam Megacz <adam@xwt.org\n+\n+        * gcc/boehm-gc/configure.in: support for win32, saner\n+\tcross-compile options\n+\n 2001-02-08  Anthony Green  <green@redhat.com>\n \n \t* include/private/gcconfig.h: Add XSCALE NOSYS support for bare"}, {"sha": "6e2a89cb137e73389ef7ab6f9f779401fdf6352e", "filename": "boehm-gc/configure", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure?ref=df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "patch": "@@ -2723,7 +2723,13 @@ EOF\n \t;;\n     esac\n     ;;\n- decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n+ win32)\n+    cat >> confdefs.h <<\\EOF\n+#define GC_WIN32_THREADS 1\n+EOF\n+\n+    ;;\n+ decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n     { echo \"configure: error: thread package $THREADS not yet supported\" 1>&2; exit 1; }\n     ;;\n  *)\n@@ -2733,15 +2739,15 @@ esac\n \n \n echo $ac_n \"checking for dlopen in -ldl\"\"... $ac_c\" 1>&6\n-echo \"configure:2737: checking for dlopen in -ldl\" >&5\n+echo \"configure:2743: checking for dlopen in -ldl\" >&5\n ac_lib_var=`echo dl'_'dlopen | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-ldl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 2745 \"configure\"\n+#line 2751 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -2752,7 +2758,7 @@ int main() {\n dlopen()\n ; return 0; }\n EOF\n-if { (eval echo configure:2756: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2762: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -2936,14 +2942,6 @@ EOF\n if test -n \"${with_cross_host}\"; then\n    cat >> confdefs.h <<\\EOF\n #define NO_SIGSET 1\n-EOF\n-\n-   cat >> confdefs.h <<\\EOF\n-#define NO_CLOCK 1\n-EOF\n-\n-   cat >> confdefs.h <<\\EOF\n-#define SMALL_CONFIG 1\n EOF\n \n    cat >> confdefs.h <<\\EOF"}, {"sha": "661d01897255016e9884d72d3c84b6dd752721c2", "filename": "boehm-gc/configure.in", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df61a3d22ab54f9115638e8f5b761fffbf1a4dbe/boehm-gc%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fconfigure.in?ref=df61a3d22ab54f9115638e8f5b761fffbf1a4dbe", "patch": "@@ -108,7 +108,10 @@ case \"$THREADS\" in\n \t;;\n     esac\n     ;;\n- decosf1 | irix | mach | os2 | solaris | win32 | dce | vxworks)\n+ win32)\n+    AC_DEFINE(GC_WIN32_THREADS)\n+    ;;\n+ decosf1 | irix | mach | os2 | solaris | dce | vxworks)\n     AC_MSG_ERROR(thread package $THREADS not yet supported)\n     ;;\n  *)\n@@ -226,12 +229,10 @@ AC_DEFINE(GC_GCJ_SUPPORT)\n AC_DEFINE(ATOMIC_UNCOLLECTABLE)\n \n dnl This is something of a hack.  When cross-compiling we turn off\n-dnl some functionality.  We also enable the \"small\" configuration.\n-dnl These is only correct when targetting an embedded system.  FIXME.\n+dnl some functionality. These is only correct when targetting an\n+dnl embedded system.  FIXME.\n if test -n \"${with_cross_host}\"; then\n    AC_DEFINE(NO_SIGSET)\n-   AC_DEFINE(NO_CLOCK)\n-   AC_DEFINE(SMALL_CONFIG)\n    AC_DEFINE(NO_DEBUGGING)\n fi\n "}]}