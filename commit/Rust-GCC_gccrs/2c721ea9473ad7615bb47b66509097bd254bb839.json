{"sha": "2c721ea9473ad7615bb47b66509097bd254bb839", "node_id": "C_kwDOANBUbNoAKDJjNzIxZWE5NDczYWQ3NjE1YmI0N2I2NjUwOTA5N2JkMjU0YmI4Mzk", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-15T22:25:13Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2022-08-24T19:15:33Z"}, "message": "[RISCV] Fix PR 106586: riscv32 vs ZBS\n\nThe problem here is two fold. With RISCV32, 32bit\nconst_int are always signed extended to 64bit in HWI.\nSo that means for SINGLE_BIT_MASK_OPERAND, it should\nmask off the upper bits to see it is a single bit\nfor !TARGET_64BIT.\nPlus there are a few locations which forget to call\ntrunc_int_for_mode when generating a SImode constant\nso they are not sign extended correctly for HWI.\nThe predicates single_bit_mask_operand and\nnot_single_bit_mask_operand need get the same handling\nas SINGLE_BIT_MASK_OPERAND so just use SINGLE_BIT_MASK_OPERAND.\n\nOK? Built and tested on riscv32-linux-gnu and riscv64-linux-gnu with\n--with-arch=rvNimafdc_zba_zbb_zbc_zbs where N is replaced with 32 or 64.\n\nThanks,\nAndrew Pinski\n\ngcc/ChangeLog:\n\n\tPR target/106586\n\t* config/riscv/predicates.md (single_bit_mask_operand):\n\tUse SINGLE_BIT_MASK_OPERAND instead of directly calling pow2p_hwi.\n\t(not_single_bit_mask_operand): Likewise.\n\t* config/riscv/riscv.cc (riscv_build_integer_1): Don't special case\n\t1<<31 for 32bits as it is already handled.\n\tCall trunc_int_for_mode on the upper part after the subtraction.\n\t(riscv_move_integer): Call trunc_int_for_mode before generating\n\tthe integer just make sure the constant has been sign extended\n\tcorectly.\n\t(riscv_emit_int_compare): Call trunc_int_for_mode after doing the\n\taddition for the new rhs.\n\t* config/riscv/riscv.h (SINGLE_BIT_MASK_OPERAND): If !TARGET64BIT,\n\tthen mask off the upper 32bits of the HWI as it will be sign extended.", "tree": {"sha": "1f82b2ddb193f88c83de0d8decfa8d58440c8289", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f82b2ddb193f88c83de0d8decfa8d58440c8289"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c721ea9473ad7615bb47b66509097bd254bb839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c721ea9473ad7615bb47b66509097bd254bb839", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c721ea9473ad7615bb47b66509097bd254bb839", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c721ea9473ad7615bb47b66509097bd254bb839/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95989ab39bbedd34e6f508de3109cb5c17db433e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95989ab39bbedd34e6f508de3109cb5c17db433e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95989ab39bbedd34e6f508de3109cb5c17db433e"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "862e72b0983338947a65053903bceecfa879748e", "filename": "gcc/config/riscv/predicates.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fpredicates.md?ref=2c721ea9473ad7615bb47b66509097bd254bb839", "patch": "@@ -226,11 +226,11 @@\n ;; Predicates for the ZBS extension.\n (define_predicate \"single_bit_mask_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"pow2p_hwi (INTVAL (op))\")))\n+       (match_test \"SINGLE_BIT_MASK_OPERAND (UINTVAL (op))\")))\n \n (define_predicate \"not_single_bit_mask_operand\"\n   (and (match_code \"const_int\")\n-       (match_test \"pow2p_hwi (~INTVAL (op))\")))\n+       (match_test \"SINGLE_BIT_MASK_OPERAND (~UINTVAL (op))\")))\n \n (define_predicate \"const31_operand\"\n   (and (match_code \"const_int\")"}, {"sha": "026c69ce40d68d574624272681a47e4a290b7914", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=2c721ea9473ad7615bb47b66509097bd254bb839", "patch": "@@ -432,7 +432,7 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],\n \t sign-extended (negative) representation (-1 << 31) for the\n \t value, if we want to build (1 << 31) in SImode.  This will\n \t then expand to an LUI instruction.  */\n-      if (mode == SImode && value == (HOST_WIDE_INT_1U << 31))\n+      if (TARGET_64BIT && mode == SImode && value == (HOST_WIDE_INT_1U << 31))\n \tcodes[0].value = (HOST_WIDE_INT_M1U << 31);\n \n       return 1;\n@@ -445,7 +445,11 @@ riscv_build_integer_1 (struct riscv_integer_op codes[RISCV_MAX_INTEGER_OPS],\n       && (mode != HImode\n \t  || value - low_part <= ((1 << (GET_MODE_BITSIZE (HImode) - 1)) - 1)))\n     {\n-      alt_cost = 1 + riscv_build_integer_1 (alt_codes, value - low_part, mode);\n+      HOST_WIDE_INT upper_part = value - low_part;\n+      if (mode != VOIDmode)\n+\tupper_part = trunc_int_for_mode (value - low_part, mode);\n+\n+      alt_cost = 1 + riscv_build_integer_1 (alt_codes, upper_part, mode);\n       if (alt_cost < cost)\n \t{\n \t  alt_codes[alt_cost-1].code = PLUS;\n@@ -1550,6 +1554,7 @@ riscv_move_integer (rtx temp, rtx dest, HOST_WIDE_INT value,\n     x = riscv_split_integer (value, mode);\n   else\n     {\n+      codes[0].value = trunc_int_for_mode (codes[0].value, mode);\n       /* Apply each binary operation to X. */\n       x = GEN_INT (codes[0].value);\n \n@@ -1559,7 +1564,7 @@ riscv_move_integer (rtx temp, rtx dest, HOST_WIDE_INT value,\n \t    x = riscv_emit_set (temp, x);\n \t  else\n \t    x = force_reg (mode, x);\n-\n+\t  codes[i].value = trunc_int_for_mode (codes[i].value, mode);\n \t  x = gen_rtx_fmt_ee (codes[i].code, mode, x, GEN_INT (codes[i].value));\n \t}\n     }\n@@ -2651,6 +2656,7 @@ riscv_emit_int_compare (enum rtx_code *code, rtx *op0, rtx *op1)\n \t\tcontinue;\n \n \t      new_rhs = rhs + (increment ? 1 : -1);\n+\t      new_rhs = trunc_int_for_mode (new_rhs, GET_MODE (*op0));\n \t      if (riscv_integer_cost (new_rhs) < riscv_integer_cost (rhs)\n \t\t  && (rhs < 0) == (new_rhs < 0))\n \t\t{"}, {"sha": "5394776eb5042573af724e4d0643a951a1c34729", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c721ea9473ad7615bb47b66509097bd254bb839/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=2c721ea9473ad7615bb47b66509097bd254bb839", "patch": "@@ -535,7 +535,9 @@ enum reg_class\n /* If this is a single bit mask, then we can load it with bseti.  Special\n    handling of SImode 0x80000000 on RV64 is done in riscv_build_integer_1. */\n #define SINGLE_BIT_MASK_OPERAND(VALUE)\t\t\t\t\t\\\n-  (pow2p_hwi (VALUE))\n+  (pow2p_hwi (TARGET_64BIT\t\t\t\t\t\t\\\n+\t\t? (VALUE)\t\t\t\t\t\t\\\n+\t\t: ((VALUE) & ((HOST_WIDE_INT_1U << 32)-1))))\n \n /* Stack layout; function entry, exit and calling.  */\n "}]}