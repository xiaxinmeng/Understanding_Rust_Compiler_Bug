{"sha": "30f86ec3fba12cb0574db51d75d3355f7264aa77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmODZlYzNmYmExMmNiMDU3NGRiNTFkNzVkMzM1NWY3MjY0YWE3Nw==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@apple.com", "date": "2005-08-15T20:38:23Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2005-08-15T20:38:23Z"}, "message": "Fix Infinite Stack Recursion Regression.\n\n        * cp-tree.h (can_convert_arg, fn_type_unification): New argument.\n        * call.c (add_template_candidate_real): Pass down 'flags' to\n        fn_type_unification.\n        (can_convert_arg): New 'flags' argument. Pass it to call to\n        implicit_conversion instead of LOOKUP_NORMAL.\n        (can_convert): Add LOOKUP_NORMAL to call to can_convert_arg.\n        * class.c (resolve_address_of_overloaded_function): Ditto.\n        (resolve_address_of_overloaded_function): Ditto.\n        * decl.c (reshape_init, check_default_argument): Ditto.\n        * typeck.c (build_ptrmemfunc): Ditto.\n        * pt.c (type_unification_real): Add 'flags' argument.\n        (fn_type_unification): Pass 'flags' to type_unification_real.\n        (type_unification_real): Pass new 'flags' argument to call to\n        can_convert_arg.\n\n\tOked by Geoff Keating.\n\nFrom-SVN: r103120", "tree": {"sha": "9eb1bd6359f4248ee64777e3f0ec9b93df966070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9eb1bd6359f4248ee64777e3f0ec9b93df966070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f86ec3fba12cb0574db51d75d3355f7264aa77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f86ec3fba12cb0574db51d75d3355f7264aa77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f86ec3fba12cb0574db51d75d3355f7264aa77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f86ec3fba12cb0574db51d75d3355f7264aa77/comments", "author": null, "committer": null, "parents": [{"sha": "be53afcf39fe960cc00e151afc7776683f0a677d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be53afcf39fe960cc00e151afc7776683f0a677d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be53afcf39fe960cc00e151afc7776683f0a677d"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "cdbd2b626f9bca311c4fe3a36781fcef11381e99", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -1,3 +1,20 @@\n+2005-08-15 Fariborz Jahanian <fjahanian@apple.com>\n+\n+        * cp-tree.h (can_convert_arg, fn_type_unification): New argument.\n+        * call.c (add_template_candidate_real): Pass down 'flags' to\n+        fn_type_unification.\n+        (can_convert_arg): New 'flags' argument. Pass it to call to\n+        implicit_conversion instead of LOOKUP_NORMAL.\n+\t(can_convert): Add LOOKUP_NORMAL to call to can_convert_arg.\n+        * class.c (resolve_address_of_overloaded_function): Ditto.\n+        (resolve_address_of_overloaded_function): Ditto.\n+        * decl.c (reshape_init, check_default_argument): Ditto.\n+        * typeck.c (build_ptrmemfunc): Ditto.\n+        * pt.c (type_unification_real): Add 'flags' argument.\n+        (fn_type_unification): Pass 'flags' to type_unification_real.\n+        (type_unification_real): Pass new 'flags' argument to call to\n+        can_convert_arg.\n+\n 2005-08-12  Giovanni Bajo  <giovannibajo@libero.it>\n \t    Nathan Sidwell  <nathan@codesourcery.com>\n "}, {"sha": "9f277cdc84a69454829c52cec20f960349da2191", "filename": "gcc/cp/call.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -2203,7 +2203,7 @@ add_template_candidate_real (struct z_candidate **candidates, tree tmpl,\n \n   i = fn_type_unification (tmpl, explicit_targs, targs,\n \t\t\t   args_without_in_chrg,\n-\t\t\t   return_type, strict);\n+\t\t\t   return_type, strict, flags);\n \n   if (i != 0)\n     return NULL;\n@@ -6286,13 +6286,13 @@ tourney (struct z_candidate *candidates)\n bool\n can_convert (tree to, tree from)\n {\n-  return can_convert_arg (to, from, NULL_TREE);\n+  return can_convert_arg (to, from, NULL_TREE, LOOKUP_NORMAL);\n }\n \n /* Returns nonzero if ARG (of type FROM) can be converted to TO.  */\n \n bool\n-can_convert_arg (tree to, tree from, tree arg)\n+can_convert_arg (tree to, tree from, tree arg, int flags)\n {\n   conversion *t;\n   void *p;\n@@ -6302,7 +6302,7 @@ can_convert_arg (tree to, tree from, tree arg)\n   p = conversion_obstack_alloc (0);\n \n   t  = implicit_conversion (to, from, arg, /*c_cast_p=*/false, \n-\t\t\t    LOOKUP_NORMAL);\n+\t\t\t    flags);\n   ok_p = (t && !t->bad_p);\n \n   /* Free all the conversions we allocated.  */"}, {"sha": "98a88004d40fc7e7b58bf7c96dba54637585dc98", "filename": "gcc/cp/class.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -5656,7 +5656,7 @@ resolve_address_of_overloaded_function (tree target_type,\n \t  else if (!is_reference)\n \t    fntype = build_pointer_type (fntype);\n \n-\t  if (can_convert_arg (target_type, fntype, fn))\n+\t  if (can_convert_arg (target_type, fntype, fn, LOOKUP_NORMAL))\n \t    matches = tree_cons (fn, NULL_TREE, matches);\n \t}\n     }\n@@ -5704,7 +5704,7 @@ resolve_address_of_overloaded_function (tree target_type,\n \t  targs = make_tree_vec (DECL_NTPARMS (fn));\n \t  if (fn_type_unification (fn, explicit_targs, targs,\n \t\t\t\t   target_arg_types, target_ret_type,\n-\t\t\t\t   DEDUCE_EXACT))\n+\t\t\t\t   DEDUCE_EXACT, LOOKUP_NORMAL))\n \t    /* Argument deduction failed.  */\n \t    continue;\n \n@@ -5721,7 +5721,8 @@ resolve_address_of_overloaded_function (tree target_type,\n \t      build_ptrmemfunc_type (build_pointer_type (instantiation_type));\n \t  else if (!is_reference)\n \t    instantiation_type = build_pointer_type (instantiation_type);\n-\t  if (can_convert_arg (target_type, instantiation_type, instantiation))\n+\t  if (can_convert_arg (target_type, instantiation_type, instantiation, \n+\t\t\t       LOOKUP_NORMAL))\n \t    matches = tree_cons (instantiation, fn, matches);\n \t}\n "}, {"sha": "ff9c8bbf0d0408591ee0987cb630263f38d60e68", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -3650,7 +3650,7 @@ extern tree build_special_member_call\t\t(tree, tree, tree, tree, int);\n extern tree build_new_op\t\t\t(enum tree_code, int, tree, tree, tree, bool *);\n extern tree build_op_delete_call\t\t(enum tree_code, tree, tree, bool, tree);\n extern bool can_convert\t\t\t\t(tree, tree);\n-extern bool can_convert_arg\t\t\t(tree, tree, tree);\n+extern bool can_convert_arg\t\t\t(tree, tree, tree, int);\n extern bool can_convert_arg_bad\t\t\t(tree, tree, tree);\n extern bool enforce_access\t\t\t(tree, tree);\n extern tree convert_default_arg\t\t\t(tree, tree, tree, int);\n@@ -3992,7 +3992,7 @@ extern int uses_template_parms_level\t\t(tree, int);\n extern tree instantiate_class_template\t\t(tree);\n extern tree instantiate_template\t\t(tree, tree, tsubst_flags_t);\n extern int fn_type_unification\t\t\t(tree, tree, tree, tree,\n-\t\t\t\t\t\t tree, unification_kind_t);\n+\t\t\t\t\t\t tree, unification_kind_t, int);\n extern void mark_decl_instantiated\t\t(tree, int);\n extern int more_specialized_fn\t\t\t(tree, tree, int);\n extern void mark_class_instantiated\t\t(tree, int);"}, {"sha": "eb212c27dce885f0c2a8c558c6389bd262e36f88", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -4347,7 +4347,7 @@ reshape_init_r (tree type, reshape_iter *d, bool first_initializer_p)\n      initializer is considered for the initialization of the first\n      member of the subaggregate.  */\n   if (TREE_CODE (init) != CONSTRUCTOR\n-      && can_convert_arg (type, TREE_TYPE (init), init))\n+      && can_convert_arg (type, TREE_TYPE (init), init, LOOKUP_NORMAL))\n     {\n       d->cur++;\n       return init;\n@@ -8406,7 +8406,7 @@ check_default_argument (tree decl, tree arg)\n      A default argument expression is implicitly converted to the\n      parameter type.  */\n   if (!TREE_TYPE (arg)\n-      || !can_convert_arg (decl_type, TREE_TYPE (arg), arg))\n+      || !can_convert_arg (decl_type, TREE_TYPE (arg), arg, LOOKUP_NORMAL))\n     {\n       if (decl)\n \terror (\"default argument for %q#D has type %qT\","}, {"sha": "73e2a259a0f4b5958261cebb5919e06a8a76a433", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -109,7 +109,7 @@ static tree add_outermost_template_args (tree, tree);\n static bool check_instantiated_args (tree, tree, tsubst_flags_t);\n static int maybe_adjust_types_for_deduction (unification_kind_t, tree*, tree*);\n static int  type_unification_real (tree, tree, tree, tree,\n-\t\t\t\t   int, unification_kind_t);\n+\t\t\t\t   int, unification_kind_t, int);\n static void note_template_header (int);\n static tree convert_nontype_argument_function (tree, tree);\n static tree convert_nontype_argument (tree, tree);\n@@ -9119,7 +9119,8 @@ fn_type_unification (tree fn,\n \t\t     tree targs,\n \t\t     tree args,\n \t\t     tree return_type,\n-\t\t     unification_kind_t strict)\n+\t\t     unification_kind_t strict,\n+\t\t     int flags)\n {\n   tree parms;\n   tree fntype;\n@@ -9197,7 +9198,7 @@ fn_type_unification (tree fn,\n      event.  */\n   result = type_unification_real (DECL_INNERMOST_TEMPLATE_PARMS (fn),\n \t\t\t\t  targs, parms, args, /*subr=*/0,\n-\t\t\t\t  strict);\n+\t\t\t\t  strict, flags);\n \n   if (result == 0)\n     /* All is well so far.  Now, check:\n@@ -9313,7 +9314,8 @@ type_unification_real (tree tparms,\n \t\t       tree xparms,\n \t\t       tree xargs,\n \t\t       int subr,\n-\t\t       unification_kind_t strict)\n+\t\t       unification_kind_t strict,\n+\t\t       int flags)\n {\n   tree parm, arg;\n   int i;\n@@ -9381,7 +9383,8 @@ type_unification_real (tree tparms,\n \t  if (same_type_p (parm, type))\n \t    continue;\n \t  if (strict != DEDUCE_EXACT\n-\t      && can_convert_arg (parm, type, TYPE_P (arg) ? NULL_TREE : arg))\n+\t      && can_convert_arg (parm, type, TYPE_P (arg) ? NULL_TREE : arg, \n+\t\t\t\t  flags))\n \t    continue;\n \t  \n \t  return 1;\n@@ -10280,7 +10283,8 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t\t TREE_TYPE (arg), UNIFY_ALLOW_NONE))\n \treturn 1;\n       return type_unification_real (tparms, targs, TYPE_ARG_TYPES (parm),\n-\t\t\t\t    TYPE_ARG_TYPES (arg), 1, DEDUCE_EXACT);\n+\t\t\t\t    TYPE_ARG_TYPES (arg), 1, DEDUCE_EXACT,\n+\t\t\t\t    LOOKUP_NORMAL);\n \n     case OFFSET_TYPE:\n       /* Unify a pointer to member with a pointer to member function, which\n@@ -10665,7 +10669,7 @@ get_bindings (tree fn, tree decl, tree explicit_args, bool check_rettype)\n \t\t\t   decl_arg_types,\n \t\t\t   (check_rettype || DECL_CONV_FN_P (fn)\n \t\t\t    ? TREE_TYPE (decl_type) : NULL_TREE),\n-\t\t\t   DEDUCE_EXACT))\n+\t\t\t   DEDUCE_EXACT, LOOKUP_NORMAL))\n     return NULL_TREE;\n \n   return targs;"}, {"sha": "3a3bbea957aad1590e90887eb460e3483c3d71f5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -5696,7 +5696,7 @@ build_ptrmemfunc (tree type, tree pfn, int force, bool c_cast_p)\n       tree n;\n \n       if (!force\n-\t  && !can_convert_arg (to_type, TREE_TYPE (pfn), pfn))\n+\t  && !can_convert_arg (to_type, TREE_TYPE (pfn), pfn, LOOKUP_NORMAL))\n \terror (\"invalid conversion to type %qT from type %qT\",\n \t       to_type, pfn_type);\n "}, {"sha": "c23ebecc8e484c8e5ecc416f5edf2a3008743b51", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -1,3 +1,7 @@\n+2005-08-15  Fariborz Jahanian <fjahanian@apple.com>\n+\n+\t* g++.dg/template/local6.C: New test.\n+\n 2005-08-14  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* execute/exceptions/finally-1.m: Check that the catch and finally are"}, {"sha": "3472f59a7d70e1db2a0565fbb1ab120e0f6b4da5", "filename": "gcc/testsuite/g++.dg/template/local6.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f86ec3fba12cb0574db51d75d3355f7264aa77/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Flocal6.C?ref=30f86ec3fba12cb0574db51d75d3355f7264aa77", "patch": "@@ -0,0 +1,19 @@\n+template <class T> struct PCVector2\n+{ // { dg-error \"\" }\n+    template <class T2> PCVector2(const PCVector2<T> &cv) ;\n+\n+    PCVector2<T> operator- (const PCVector2<T> &ov) const \n+\t{ \n+\t  return PCVector2<T>(ov.xFIELD, ov.yFIELD); // { dg-error \"\" }\n+\t}\n+\n+    T xFIELD, yFIELD;\n+};\n+\n+void findIntersection( PCVector2<double>& p0, PCVector2<double>& p1);\n+\n+\n+void findIntersection( PCVector2<double>& p0, PCVector2<double>& p1)\n+{\n+    PCVector2<double> e = p1 - p0;\t// { dg-error \"\" }\n+}"}]}