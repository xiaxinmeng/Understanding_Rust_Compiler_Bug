{"sha": "ef765ea99137b659f6d1c95b5dfcc34314193e06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY3NjVlYTk5MTM3YjY1OWY2ZDFjOTViNWRmY2MzNDMxNDE5M2UwNg==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2005-06-06T02:32:27Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2005-06-06T02:32:27Z"}, "message": "rs6000.c (rs6000_emit_swdivsf): New function.\n\n        * config/rs6000/rs6000.c (rs6000_emit_swdivsf): New function.\n        (rs6000_emit_swdivdf): New function.\n        * config/rs6000/rs6000.md (fres): New pattern.\n        (divsf3): Add approximation through rs6000_emit_swdivsf.\n        (fred): New pattern.\n        (divdf3): Add approximation through rs6000_emit_swdivdf.\n        * config/rs6000/rs6000-protos.h (rs6000_emit_swdivsf): Declare.\n        (rs6000_emit_swdivdf): Declare.\n        * config/rs6000/rs6000.opt (mswdiv): New option.\n        * doc/invoke.texi (RS/6000 and PowerPC Options): Document mswdiv.\n\nFrom-SVN: r100645", "tree": {"sha": "0f1235f2b78072790a5552cb4f522f677335fbe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f1235f2b78072790a5552cb4f522f677335fbe8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef765ea99137b659f6d1c95b5dfcc34314193e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef765ea99137b659f6d1c95b5dfcc34314193e06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef765ea99137b659f6d1c95b5dfcc34314193e06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef765ea99137b659f6d1c95b5dfcc34314193e06/comments", "author": null, "committer": null, "parents": [{"sha": "6c4b13a9ecd4100d77fb64b13edb15ec1eb7dcaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c4b13a9ecd4100d77fb64b13edb15ec1eb7dcaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c4b13a9ecd4100d77fb64b13edb15ec1eb7dcaa"}], "stats": {"total": 168, "additions": 165, "deletions": 3}, "files": [{"sha": "3d87d0a11c9d7129e4d28ffdf46cd484e7d768d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -1,3 +1,16 @@\n+2005-06-05  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/rs6000.c (rs6000_emit_swdivsf): New function.\n+\t(rs6000_emit_swdivdf): New function.\n+\t* config/rs6000/rs6000.md (fres): New pattern.\n+\t(divsf3): Add approximation through rs6000_emit_swdivsf.\n+\t(fred): New pattern.\n+\t(divdf3): Add approximation through rs6000_emit_swdivdf.\n+\t* config/rs6000/rs6000-protos.h (rs6000_emit_swdivsf): Declare.\n+\t(rs6000_emit_swdivdf): Declare.\n+\t* config/rs6000/rs6000.opt (mswdiv): New option.\n+\t* doc/invoke.texi (RS/6000 and PowerPC Options): Document mswdiv.\n+\n 2005-06-05  Zdenek Dvorak  <dvorakz@suse.cz>\n \n \tPR tree-optimization/21846"}, {"sha": "041169bde81e5ed2144439606df20366e027e51c", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -82,6 +82,8 @@ extern int rs6000_emit_vector_cond_expr (rtx, rtx, rtx, rtx, rtx, rtx);\n extern void rs6000_emit_minmax (rtx, enum rtx_code, rtx, rtx);\n extern void rs6000_emit_sync (enum rtx_code, enum machine_mode,\n \t\t\t      rtx, rtx, rtx, rtx, bool);\n+extern void rs6000_emit_swdivsf (rtx, rtx, rtx);\n+extern void rs6000_emit_swdivdf (rtx, rtx, rtx);\n extern void output_toc (FILE *, rtx, int, enum machine_mode);\n extern void rs6000_initialize_trampoline (rtx, rtx, rtx);\n extern rtx rs6000_longcall_ref (rtx);"}, {"sha": "9626885a6644abdf44481495146afe4cf21d3c31", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -17955,6 +17955,109 @@ rs6000_memory_move_cost (enum machine_mode mode, enum reg_class class,\n     return 4 + rs6000_register_move_cost (mode, class, GENERAL_REGS);\n }\n \n+/* Newton-Raphson approximation of single-precision floating point divide n/d.\n+   Assumes no trapping math and finite arguments.  */\n+\n+void\n+rs6000_emit_swdivsf (rtx res, rtx n, rtx d)\n+{\n+  rtx x0, e0, e1, y1, u0, v0, one;\n+\n+  x0 = gen_reg_rtx (SFmode);\n+  e0 = gen_reg_rtx (SFmode);\n+  e1 = gen_reg_rtx (SFmode);\n+  y1 = gen_reg_rtx (SFmode);\n+  u0 = gen_reg_rtx (SFmode);\n+  v0 = gen_reg_rtx (SFmode);\n+  one = force_reg (SFmode, CONST_DOUBLE_FROM_REAL_VALUE (dconst1, SFmode));\n+\n+  /* x0 = 1./d estimate */\n+  emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t  gen_rtx_UNSPEC (SFmode, gen_rtvec (1, d),\n+\t\t\t\t\t  UNSPEC_FRES)));\n+  /* e0 = 1. - d * x0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e0,\n+\t\t\t  gen_rtx_MINUS (SFmode, one,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, d, x0))));\n+  /* e1 = e0 + e0 * e0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e1,\n+\t\t\t  gen_rtx_PLUS (SFmode,\n+\t\t\t\t\tgen_rtx_MULT (SFmode, e0, e0), e0)));\n+  /* y1 = x0 + e1 * x0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, y1,\n+\t\t\t  gen_rtx_PLUS (SFmode,\n+\t\t\t\t\tgen_rtx_MULT (SFmode, e1, x0), x0)));\n+  /* u0 = n * y1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, u0,\n+\t\t\t  gen_rtx_MULT (SFmode, n, y1)));\n+  /* v0 = n - d * u0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, v0,\n+\t\t\t  gen_rtx_MINUS (SFmode, n,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, d, u0))));\n+  /* res = u0 + v0 * y1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, res,\n+\t\t\t  gen_rtx_PLUS (SFmode,\n+\t\t\t\t\tgen_rtx_MULT (SFmode, v0, y1), u0)));\n+}\n+\n+/* Newton-Raphson approximation of double-precision floating point divide n/d.\n+   Assumes no trapping math and finite arguments.  */\n+\n+void\n+rs6000_emit_swdivdf (rtx res, rtx n, rtx d)\n+{\n+  rtx x0, e0, e1, e2, y1, y2, y3, u0, v0, one;\n+\n+  x0 = gen_reg_rtx (DFmode);\n+  e0 = gen_reg_rtx (DFmode);\n+  e1 = gen_reg_rtx (DFmode);\n+  e2 = gen_reg_rtx (DFmode);\n+  y1 = gen_reg_rtx (DFmode);\n+  y2 = gen_reg_rtx (DFmode);\n+  y3 = gen_reg_rtx (DFmode);\n+  u0 = gen_reg_rtx (DFmode);\n+  v0 = gen_reg_rtx (DFmode);\n+  one = force_reg (DFmode, CONST_DOUBLE_FROM_REAL_VALUE (dconst1, DFmode));\n+\n+  /* x0 = 1./d estimate */\n+  emit_insn (gen_rtx_SET (VOIDmode, x0,\n+\t\t\t  gen_rtx_UNSPEC (DFmode, gen_rtvec (1, d),\n+\t\t\t\t\t  UNSPEC_FRES)));\n+  /* e0 = 1. - d * x0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e0,\n+\t\t\t  gen_rtx_MINUS (DFmode, one,\n+\t\t\t\t\t gen_rtx_MULT (SFmode, d, x0))));\n+  /* y1 = x0 + e0 * x0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, y1,\n+\t\t\t  gen_rtx_PLUS (DFmode,\n+\t\t\t\t\tgen_rtx_MULT (DFmode, e0, x0), x0)));\n+  /* e1 = e0 * e0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e1,\n+\t\t\t  gen_rtx_MULT (DFmode, e0, e0)));\n+  /* y2 = y1 + e1 * y1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, y2,\n+\t\t\t  gen_rtx_PLUS (DFmode,\n+\t\t\t\t\tgen_rtx_MULT (DFmode, e1, y1), y1)));\n+  /* e2 = e1 * e1 */\n+  emit_insn (gen_rtx_SET (VOIDmode, e2,\n+\t\t\t  gen_rtx_MULT (DFmode, e1, e1)));\n+  /* y3 = y2 + e2 * y2 */\n+  emit_insn (gen_rtx_SET (VOIDmode, y3,\n+\t\t\t  gen_rtx_PLUS (DFmode,\n+\t\t\t\t\tgen_rtx_MULT (DFmode, e2, y2), y2)));\n+  /* u0 = n * y3 */\n+  emit_insn (gen_rtx_SET (VOIDmode, u0,\n+\t\t\t  gen_rtx_MULT (DFmode, n, y3)));\n+  /* v0 = n - d * u0 */\n+  emit_insn (gen_rtx_SET (VOIDmode, v0,\n+\t\t\t  gen_rtx_MINUS (DFmode, n,\n+\t\t\t\t\t gen_rtx_MULT (DFmode, d, u0))));\n+  /* res = u0 + v0 * y3 */\n+  emit_insn (gen_rtx_SET (VOIDmode, res,\n+\t\t\t  gen_rtx_PLUS (DFmode,\n+\t\t\t\t\tgen_rtx_MULT (DFmode, v0, y3), u0)));\n+}\n+\n /* Return an RTX representing where to find the function value of a\n    function returning MODE.  */\n static rtx"}, {"sha": "633dd7c1ca312435463dcca483ec2a73b6c333d2", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -58,6 +58,7 @@\n    (UNSPEC_LWSYNC\t\t36)\n    (UNSPEC_ISYNC\t\t37)\n    (UNSPEC_POPCNTB\t\t38)\n+   (UNSPEC_FRES\t\t\t39)\n   ])\n \n ;;\n@@ -4640,12 +4641,26 @@\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n+(define_insn \"fres\"\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:SF [(match_operand:SF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_PPC_GFXOPT && flag_finite_math_only\"\n+  \"fres %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:SF 2 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\"\n-  \"\")\n+{\n+  if (swdiv && !optimize_size && TARGET_PPC_GFXOPT\n+  && flag_finite_math_only && !flag_trapping_math)\n+    {\n+      rs6000_emit_swdivsf (operands[0], operands[1], operands[2]);\n+      DONE;\n+    }\n+})\n \n (define_insn \"\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f\")\n@@ -5028,12 +5043,26 @@\n   \"{fm|fmul} %0,%1,%2\"\n   [(set_attr \"type\" \"dmul\")])\n \n+(define_insn \"fred\"\n+  [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n+\t(unspec:DF [(match_operand:DF 1 \"gpc_reg_operand\" \"f\")] UNSPEC_FRES))]\n+  \"TARGET_POPCNTB && flag_finite_math_only\"\n+  \"fre %0,%1\"\n+  [(set_attr \"type\" \"fp\")])\n+\n (define_expand \"divdf3\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"\")\n \t(div:DF (match_operand:DF 1 \"gpc_reg_operand\" \"\")\n \t\t(match_operand:DF 2 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\"\n-  \"\")\n+{\n+  if (swdiv && !optimize_size && TARGET_POPCNTB\n+  && flag_finite_math_only && !flag_trapping_math)\n+    {\n+      rs6000_emit_swdivdf (operands[0], operands[1], operands[2]);\n+      DONE;\n+    }\n+})\n \n (define_insn \"*divdf3_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")"}, {"sha": "7a08c678462fefb9bb9694cd8ad42208db3c59ae", "filename": "gcc/config/rs6000/rs6000.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fconfig%2Frs6000%2Frs6000.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.opt?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -123,6 +123,10 @@ mxl-compat\n Target Report Var(TARGET_XL_COMPAT)\n Conform more closely to IBM XLC semantics\n \n+mswdiv\n+Target Report Var(swdiv)\n+Generate software floating point divide for better throughput\n+\n mno-fp-in-toc\n Target Report RejectNegative Mask(NO_FP_IN_TOC)\n Do not place floating point constants in TOC"}, {"sha": "eef9a0f9c14f640cee0c2243229849ec6f30e604", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef765ea99137b659f6d1c95b5dfcc34314193e06/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ef765ea99137b659f6d1c95b5dfcc34314193e06", "patch": "@@ -631,7 +631,7 @@ See RS/6000 and PowerPC Options.\n -mstrict-align  -mno-strict-align  -mrelocatable @gol\n -mno-relocatable  -mrelocatable-lib  -mno-relocatable-lib @gol\n -mtoc  -mno-toc  -mlittle  -mlittle-endian  -mbig  -mbig-endian @gol\n--mdynamic-no-pic @gol\n+-mdynamic-no-pic  -maltivec  -mswdiv @gol\n -mprioritize-restricted-insns=@var{priority} @gol\n -msched-costly-dep=@var{dependence_type} @gol\n -minsert-sched-nops=@var{scheme} @gol\n@@ -10720,6 +10720,17 @@ values for @var{cpu_type} are used for @option{-mtune} as for\n architecture, registers, and mnemonics set by @option{-mcpu}, but the\n scheduling parameters set by @option{-mtune}.\n \n+@item -mswdiv\n+@itemx -mno-swdiv\n+@opindex mswdiv\n+@opindex mno-swdiv\n+Generate code to compute division as reciprocal estimate and iterative\n+refinement, creating opportunities for increased throughput.  This\n+feature requires: optional PowerPC Graphics instruction set for single\n+precision and FRE instruction for double precision, assuming divides\n+cannot generate user-visible traps, and the domain values not include\n+Infinities, denormals or zero denominator.\n+\n @item -maltivec\n @itemx -mno-altivec\n @opindex maltivec"}]}