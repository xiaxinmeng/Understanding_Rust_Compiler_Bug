{"sha": "30c286aa9377850c64aa35f5845a59d321a44be0", "node_id": "C_kwDOANBUbNoAKDMwYzI4NmFhOTM3Nzg1MGM2NGFhMzVmNTg0NWE1OWQzMjFhNDRiZTA", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-19T17:10:16Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-12-19T17:10:16Z"}, "message": "c++: local_specializations and recursive constrained fn [PR103714]\n\nHere during constraint checking for the inner call to A<0>::f<0>,\nsubstitution into the PARM_DECL d in the atomic constraint yields the\nwrong local specialization because local_specializations at this point\nis nonempty, and contains specializations for the caller A<0>::f<1>.\n\nThis patch makes us call push_to_top_level during satisfaction, which'll\ntemporarily clear local_specializations for us.\n\n\tPR c++/103714\n\ngcc/cp/ChangeLog:\n\n\t* constraint.cc (satisfy_declaration_constraints): Do\n\tpush_to_top_level and pop_from_top_level around the call to\n\tsatisfy_normalized_constraints.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp2a/concepts-uneval5.C: New test.", "tree": {"sha": "4dc86f960c6c70895553b14e5e71e5213f97747a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dc86f960c6c70895553b14e5e71e5213f97747a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30c286aa9377850c64aa35f5845a59d321a44be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c286aa9377850c64aa35f5845a59d321a44be0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c286aa9377850c64aa35f5845a59d321a44be0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c286aa9377850c64aa35f5845a59d321a44be0/comments", "author": null, "committer": null, "parents": [{"sha": "ba64166bf81b6eaa6e12e1aab786f22f6605401f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba64166bf81b6eaa6e12e1aab786f22f6605401f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba64166bf81b6eaa6e12e1aab786f22f6605401f"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "96fa6a75b7ab6c60b6e3cbc664516b5d1dfec249", "filename": "gcc/cp/constraint.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c286aa9377850c64aa35f5845a59d321a44be0/gcc%2Fcp%2Fconstraint.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c286aa9377850c64aa35f5845a59d321a44be0/gcc%2Fcp%2Fconstraint.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstraint.cc?ref=30c286aa9377850c64aa35f5845a59d321a44be0", "patch": "@@ -3177,9 +3177,11 @@ satisfy_declaration_constraints (tree t, sat_info info)\n     {\n       if (!push_tinst_level (t))\n \treturn result;\n+      push_to_top_level ();\n       push_access_scope (t);\n       result = satisfy_normalized_constraints (norm, args, info);\n       pop_access_scope (t);\n+      pop_from_top_level ();\n       pop_tinst_level ();\n     }\n \n@@ -3235,9 +3237,11 @@ satisfy_declaration_constraints (tree t, tree args, sat_info info)\n       if (!push_tinst_level (t, args))\n \treturn result;\n       tree pattern = DECL_TEMPLATE_RESULT (t);\n+      push_to_top_level ();\n       push_access_scope (pattern);\n       result = satisfy_normalized_constraints (norm, args, info);\n       pop_access_scope (pattern);\n+      pop_from_top_level ();\n       pop_tinst_level ();\n     }\n "}, {"sha": "a315a59b828638c08bd4e573438a118238f4b4a0", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-uneval5.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30c286aa9377850c64aa35f5845a59d321a44be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30c286aa9377850c64aa35f5845a59d321a44be0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-uneval5.C?ref=30c286aa9377850c64aa35f5845a59d321a44be0", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/103714\n+// { dg-do compile { target c++20 } }\n+\n+template<int I>\n+struct A {\n+  static const int i = I;\n+\n+  template<int J>\n+  void f(A<J> d = {}) requires (d.i != i) {\n+    f<I>(); // { dg-error \"no match\" }\n+  }\n+};\n+\n+int main() {\n+  A<0> a;\n+  a.f<1>();\n+}"}]}