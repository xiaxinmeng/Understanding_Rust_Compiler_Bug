{"sha": "3cc48399b878e39e334670e417741d6b3531185a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NjNDgzOTliODc4ZTM5ZTMzNDY3MGU0MTc3NDFkNmIzNTMxMTg1YQ==", "commit": {"author": {"name": "Per Bothner", "email": "per@bothner.com", "date": "2001-04-04T20:56:01Z"}, "committer": {"name": "Per Bothner", "email": "bothner@gcc.gnu.org", "date": "2001-04-04T20:56:01Z"}, "message": "java-tree.h (CONSTANT_VALUE_P): New macro.\n\n\n\t* java-tree.h (CONSTANT_VALUE_P):  New macro.\n\t* jcf-write.c (generate_classfile):  Use CONSTANT_VALUE_P.\n\t* parse.y (maybe_build_class_init_for_field):  New static function.\n\t(resolve_expression_name, resolve_field_access):  Use\n\tmaybe_build_class_init_for_field instead of build_class_init\n\tThis does not do the init if the field is compile-time-constant.\n\t(resolve_field_access):  Simplify.\n\n\t* parse.y (fold_constant_for_init):  Merge test into switch.\n\nFrom-SVN: r41094", "tree": {"sha": "5a388d102608c5d677efdc447fcc9f752c7506e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a388d102608c5d677efdc447fcc9f752c7506e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cc48399b878e39e334670e417741d6b3531185a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc48399b878e39e334670e417741d6b3531185a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cc48399b878e39e334670e417741d6b3531185a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cc48399b878e39e334670e417741d6b3531185a/comments", "author": {"login": "PerBothner", "id": 10293361, "node_id": "MDQ6VXNlcjEwMjkzMzYx", "avatar_url": "https://avatars.githubusercontent.com/u/10293361?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PerBothner", "html_url": "https://github.com/PerBothner", "followers_url": "https://api.github.com/users/PerBothner/followers", "following_url": "https://api.github.com/users/PerBothner/following{/other_user}", "gists_url": "https://api.github.com/users/PerBothner/gists{/gist_id}", "starred_url": "https://api.github.com/users/PerBothner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PerBothner/subscriptions", "organizations_url": "https://api.github.com/users/PerBothner/orgs", "repos_url": "https://api.github.com/users/PerBothner/repos", "events_url": "https://api.github.com/users/PerBothner/events{/privacy}", "received_events_url": "https://api.github.com/users/PerBothner/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8e184d9cc12b898bba2aebea0e0e8d5faac9e569", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e184d9cc12b898bba2aebea0e0e8d5faac9e569", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e184d9cc12b898bba2aebea0e0e8d5faac9e569"}], "stats": {"total": 86, "additions": 57, "deletions": 29}, "files": [{"sha": "8e4afa3af7841db1dee4083e3e7c193dc60c533a", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=3cc48399b878e39e334670e417741d6b3531185a", "patch": "@@ -1,3 +1,15 @@\n+2001-04-04  Per Bothner  <per@bothner.com>\n+\n+\t* java-tree.h (CONSTANT_VALUE_P):  New macro.\n+\t* jcf-write.c (generate_classfile):  Use CONSTANT_VALUE_P.\n+\t* parse.y (maybe_build_class_init_for_field):  New static function.\n+\t(resolve_expression_name, resolve_field_access):  Use\n+\tmaybe_build_class_init_for_field instead of build_class_init \n+\tThis does not do the init if the field is compile-time-constant.\n+\t(resolve_field_access):  Simplify.\n+\n+\t* parse.y (fold_constant_for_init):  Merge test into switch.\n+\n 2001-04-03  Zack Weinberg  <zackw@stanford.edu>\n \n \t* Make-lang.in (buffer.o, check-init.o, class.o): Don't depend"}, {"sha": "95cd99c9f9c322628137871f6a132ef1595dbd7e", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=3cc48399b878e39e334670e417741d6b3531185a", "patch": "@@ -829,6 +829,13 @@ struct lang_identifier\n \t   ggc_alloc_cleared (sizeof (struct lang_decl_var)));\t\\\n     }\n \n+/* A ConstantExpression, after folding and name resolution. */\n+#define CONSTANT_VALUE_P(NODE) \\\n+  (TREE_CODE (NODE) == STRING_CST \\\n+   || (TREE_CODE (NODE) == INTEGER_CST \\\n+       && TREE_CODE (TREE_TYPE (NODE)) != POINTER_TYPE) \\\n+   || TREE_CODE (NODE) == REAL_CST)\n+\n /* For a local VAR_DECL, holds the index into a words bitstring that\n    specifies if this decl is definitively assigned.\n    A DECL_BIT_INDEX of -1 means we no longer care. */"}, {"sha": "3e000daec34bbacff9334c5e12894bc94ccf476d", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=3cc48399b878e39e334670e417741d6b3531185a", "patch": "@@ -2885,11 +2885,7 @@ generate_classfile (clas, state)\n \t\t\t      build_java_signature (TREE_TYPE (part)));\n       PUT2(i);\n       have_value = DECL_INITIAL (part) != NULL_TREE \n-\t&& FIELD_STATIC (part)\n-\t&& (TREE_CODE (DECL_INITIAL (part)) == STRING_CST\n-\t    || (TREE_CODE (DECL_INITIAL (part)) == INTEGER_CST\n-\t\t&& TREE_CODE (TREE_TYPE (DECL_INITIAL (part))) != POINTER_TYPE)\n-\t    || TREE_CODE (DECL_INITIAL (part)) == REAL_CST);\n+\t&& FIELD_STATIC (part) && CONSTANT_VALUE_P (DECL_INITIAL (part));\n       if (have_value)\n \tattr_count++;\n "}, {"sha": "40e78011e1cdfbae5bfa632414049c846a75e345", "filename": "gcc/java/parse.y", "status": "modified", "additions": 37, "deletions": 24, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cc48399b878e39e334670e417741d6b3531185a/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=3cc48399b878e39e334670e417741d6b3531185a", "patch": "@@ -329,6 +329,7 @@ static tree build_dot_class_method PARAMS ((tree));\n static tree build_dot_class_method_invocation PARAMS ((tree));\n static void create_new_parser_context PARAMS ((int));\n static void mark_parser_ctxt PARAMS ((void *));\n+static tree maybe_build_class_init_for_field PARAMS ((tree, tree));\n \n /* Number of error found so far. */\n int java_error_count; \n@@ -8855,8 +8856,8 @@ resolve_expression_name (id, orig)\n \t      /* Otherwise build what it takes to access the field */\n \t      access = build_field_ref ((fs ? NULL_TREE : current_this),\n \t\t\t\t\tDECL_CONTEXT (decl), name);\n-\t      if (fs && !flag_emit_class_files && !flag_emit_xref)\n-\t\taccess = build_class_init (DECL_CONTEXT (access), access);\n+\t      if (fs)\n+\t\taccess = maybe_build_class_init_for_field (decl, access);\n \t      /* We may be asked to save the real field access node */\n \t      if (orig)\n \t\t*orig = access;\n@@ -8939,29 +8940,16 @@ resolve_field_access (qual_wfl, field_decl, field_type)\n     field_ref = decl;\n   else if (JDECL_P (decl))\n     {\n-      int static_final_found = 0;\n       if (!type_found)\n \ttype_found = DECL_CONTEXT (decl);\n-      is_static = JDECL_P (decl) && FIELD_STATIC (decl);\n-      if (CLASS_FINAL_VARIABLE_P (decl)\n-\t  && JPRIMITIVE_TYPE_P (TREE_TYPE (decl))\n-\t  && DECL_INITIAL (decl))\n-\t{\n-\t  /* When called on a FIELD_DECL of the right (primitive)\n-\t     type, java_complete_tree will try to substitue the decl\n-\t     for it's initial value. */\n-\t  field_ref = java_complete_tree (decl);\n-\t  static_final_found = 1;\n-\t}\n-      else\n-\tfield_ref = build_field_ref ((is_static && !flag_emit_xref? \n-\t\t\t\t      NULL_TREE : where_found), \n-\t\t\t\t     type_found, DECL_NAME (decl));\n+      is_static = FIELD_STATIC (decl);\n+      field_ref = build_field_ref ((is_static && !flag_emit_xref? \n+\t\t\t\t    NULL_TREE : where_found), \n+\t\t\t\t   type_found, DECL_NAME (decl));\n       if (field_ref == error_mark_node)\n \treturn error_mark_node;\n-      if (is_static && !static_final_found \n-\t  && !flag_emit_class_files && !flag_emit_xref)\n-\tfield_ref = build_class_init (DECL_CONTEXT (decl), field_ref);\n+      if (is_static)\n+\tfield_ref = maybe_build_class_init_for_field (decl, field_ref);\n     }\n   else\n     field_ref = decl;\n@@ -15489,6 +15477,29 @@ patch_conditional_expr (node, wfl_cond, wfl_op1)\n   return node;\n }\n \n+/* Wrap EXPR with code to initialize DECL's class, if appropriate. */\n+\n+static tree\n+maybe_build_class_init_for_field (decl, expr)\n+    tree decl, expr;\n+{\n+  tree clas = DECL_CONTEXT (decl);\n+  if (flag_emit_class_files || flag_emit_xref)\n+    return expr;\n+\n+  if (TREE_CODE (decl) == VAR_DECL && FIELD_STATIC (decl)\n+      && FIELD_FINAL (decl))\n+    {\n+      tree init = DECL_INITIAL (decl);\n+      if (init != NULL_TREE)\n+\tinit = fold_constant_for_init (init, decl);\n+      if (init != NULL_TREE && CONSTANT_VALUE_P (init))\n+\treturn expr;\n+    }\n+\n+  return build_class_init (clas, expr);\n+}\n+\n /* Try to constant fold NODE.\n    If NODE is not a constant expression, return NULL_EXPR.\n    CONTEXT is a static final VAR_DECL whose initializer we are folding. */\n@@ -15501,11 +15512,13 @@ fold_constant_for_init (node, context)\n   tree op0, op1, val;\n   enum tree_code code = TREE_CODE (node);\n \n-  if (code == STRING_CST || code == INTEGER_CST || code == REAL_CST)\n-    return node;\n-\n   switch (code)\n     {\n+    case STRING_CST:\n+    case INTEGER_CST:\n+    case REAL_CST:\n+      return node;\n+\n     case PLUS_EXPR:\n     case MINUS_EXPR:\n     case MULT_EXPR:"}]}