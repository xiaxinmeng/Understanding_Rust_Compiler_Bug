{"sha": "2c390a483bcbd114325bb27e47dcdebb49798fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzOTBhNDgzYmNiZDExNDMyNWJiMjdlNDdkY2RlYmI0OTc5OGZkZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-04-11T19:58:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-04-11T19:58:14Z"}, "message": "PR libstdc++/90046 fix build failure on epiphany-elf\n\nThe epiphany-elf target aligns structs to 8 bytes, which causes the\nstatic_assert(alignof(_Chunk) == 1) to fail.\n\nInstead of requiring _Chunks to be positionable at any alignment, ensure\nnew buffers are aligned to alignof(_Chunk). Because the buffer size is a\npower of two, we know that both the buffer size and sizeof(_Chunk) are\nmultiples of alignof(_Chunk). So is p is aligned to alignof(_Chunk) then\nso is (p + size - sizeof(_Chunk)). So just ensure the new buffer is\naligned to at least alignof(_Chunk), which should already be true\nbecause the caller requests at least alignof(max_align_t).\n\n\tPR libstdc++/90046\n\t* src/c++17/memory_resource.cc\n\t(monotonic_buffer_resource::_Chunk::allocate): Increase alignment if\n\tneeded to allow placing a _Chunk at the end of the buffer.\n\t(monotonic_buffer_resource::_M_new_buffer): Remove static_assert.\n\nFrom-SVN: r270291", "tree": {"sha": "c6c0720f0c7f85c677449ef59e07871973d6af2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6c0720f0c7f85c677449ef59e07871973d6af2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c390a483bcbd114325bb27e47dcdebb49798fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c390a483bcbd114325bb27e47dcdebb49798fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c390a483bcbd114325bb27e47dcdebb49798fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c390a483bcbd114325bb27e47dcdebb49798fdf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76d7e3f0246ed279d613e8c526168f48fe240afb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76d7e3f0246ed279d613e8c526168f48fe240afb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76d7e3f0246ed279d613e8c526168f48fe240afb"}], "stats": {"total": 25, "additions": 22, "deletions": 3}, "files": [{"sha": "d49ce7c050fff500c37234b8609d1b99cc019268", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c390a483bcbd114325bb27e47dcdebb49798fdf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c390a483bcbd114325bb27e47dcdebb49798fdf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2c390a483bcbd114325bb27e47dcdebb49798fdf", "patch": "@@ -1,3 +1,11 @@\n+2019-04-11  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/90046\n+\t* src/c++17/memory_resource.cc\n+\t(monotonic_buffer_resource::_Chunk::allocate): Increase alignment if\n+\tneeded to allow placing a _Chunk at the end of the buffer.\n+\t(monotonic_buffer_resource::_M_new_buffer): Remove static_assert.\n+\n 2019-04-10  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* doc/xml/faq.xml: Add information about emergency EH pool."}, {"sha": "b6698011f5cdec8bef88f338b51f332df5763ddf", "filename": "libstdc++-v3/src/c++17/memory_resource.cc", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c390a483bcbd114325bb27e47dcdebb49798fdf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c390a483bcbd114325bb27e47dcdebb49798fdf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Fmemory_resource.cc?ref=2c390a483bcbd114325bb27e47dcdebb49798fdf", "patch": "@@ -182,7 +182,21 @@ namespace pmr\n \t     _Chunk*& __head)\n     {\n       __size = std::__ceil2(__size + sizeof(_Chunk));\n+\n+      if constexpr (alignof(_Chunk) > 1)\n+\t{\n+\t  // PR libstdc++/90046\n+\t  // For targets like epiphany-elf where alignof(_Chunk) != 1\n+\t  // ensure that the last sizeof(_Chunk) bytes in the buffer\n+\t  // are suitably-aligned for a _Chunk.\n+\t  // This should be unnecessary, because the caller already\n+\t  // passes in max(__align, alignof(max_align_t)).\n+\t  if (__align < alignof(_Chunk))\n+\t    __align = alignof(_Chunk);\n+\t}\n+\n       void* __p = __r->allocate(__size, __align);\n+\n       // Add a chunk defined by (__p, __size, __align) to linked list __head.\n       void* const __back = (char*)__p + __size - sizeof(_Chunk);\n       __head = ::new(__back) _Chunk(__size, __align, __head);\n@@ -231,9 +245,6 @@ namespace pmr\n   void\n   monotonic_buffer_resource::_M_new_buffer(size_t bytes, size_t alignment)\n   {\n-    // Need to check this somewhere, so put it here:\n-    static_assert(alignof(monotonic_buffer_resource::_Chunk) == 1);\n-\n     const size_t n = std::max(bytes, _M_next_bufsiz);\n     const size_t m = std::max(alignment, alignof(std::max_align_t));\n     auto [p, size] = _Chunk::allocate(_M_upstream, n, m, _M_head);"}]}