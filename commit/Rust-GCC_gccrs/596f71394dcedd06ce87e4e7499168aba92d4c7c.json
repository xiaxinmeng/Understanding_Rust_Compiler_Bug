{"sha": "596f71394dcedd06ce87e4e7499168aba92d4c7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk2ZjcxMzk0ZGNlZGQwNmNlODdlNGU3NDk5MTY4YWJhOTJkNGM3Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:17:47Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T15:17:47Z"}, "message": "[multiple changes]\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* s-tassta.adb, exp_aggr.adb, s-taskin.adb, exp_strm.adb: Minor\n\treformatting.\n\t* comperr.adb (Compiler_Abort): New wording for bug box.\n\t* par-ch13.adb: Minor reformatting.\n\t* par-ch3.adb (P_Identifier_Declarations): Handle aspect\n\tspecifications given before initialization expression in object\n\tdeclaration cleanly.\n\t* gnat1drv.adb (Adjust_Global_Switches): Make sure static\n\telaboration mode is set if we are operating in SPARK mode.\n\t* sem_ch12.adb (Analyze_Package_Instantiation): Make\n\tsure static elab mode is set if we are in SPARK mode.\n\t(Analyze_Subprogram_Instantiation): ditto.\n\t(Set_Instance_Env): ditto.\n\t* sem_elab.adb (Check_A_Call): In SPARK mode, we require\n\tElaborate_All in the case of a call during elaboration to a\n\tsubprogram in another unit.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* inline.adb (Can_Split_Unconstrained_Function,\n\tBuild_Procedure): Copy parameter type rather than creating\n\treference to the entity, to capture class-wide reference, whose\n\tname is not retrieved by visibility.\n\nFrom-SVN: r217874", "tree": {"sha": "49280e053832bf89e7eedfcb2935b005943ffa5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49280e053832bf89e7eedfcb2935b005943ffa5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/596f71394dcedd06ce87e4e7499168aba92d4c7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596f71394dcedd06ce87e4e7499168aba92d4c7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/596f71394dcedd06ce87e4e7499168aba92d4c7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/596f71394dcedd06ce87e4e7499168aba92d4c7c/comments", "author": null, "committer": null, "parents": [{"sha": "7e4f00b47ce58c7a04810c419ff9a70e7bf99186", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e4f00b47ce58c7a04810c419ff9a70e7bf99186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e4f00b47ce58c7a04810c419ff9a70e7bf99186"}], "stats": {"total": 194, "additions": 152, "deletions": 42}, "files": [{"sha": "af1ecf521bc95f0eec88ce761c158c8e0dde1f41", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -1,3 +1,29 @@\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-tassta.adb, exp_aggr.adb, s-taskin.adb, exp_strm.adb: Minor\n+\treformatting.\n+\t* comperr.adb (Compiler_Abort): New wording for bug box.\n+\t* par-ch13.adb: Minor reformatting.\n+\t* par-ch3.adb (P_Identifier_Declarations): Handle aspect\n+\tspecifications given before initialization expression in object\n+\tdeclaration cleanly.\n+\t* gnat1drv.adb (Adjust_Global_Switches): Make sure static\n+\telaboration mode is set if we are operating in SPARK mode.\n+\t* sem_ch12.adb (Analyze_Package_Instantiation): Make\n+\tsure static elab mode is set if we are in SPARK mode.\n+\t(Analyze_Subprogram_Instantiation): ditto.\n+\t(Set_Instance_Env): ditto.\n+\t* sem_elab.adb (Check_A_Call): In SPARK mode, we require\n+\tElaborate_All in the case of a call during elaboration to a\n+\tsubprogram in another unit.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* inline.adb (Can_Split_Unconstrained_Function,\n+\tBuild_Procedure): Copy parameter type rather than creating\n+\treference to the entity, to capture class-wide reference, whose\n+\tname is not retrieved by visibility.\n+\n 2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n \n \t* s-taspri-solaris.ads: Replace 64 by long_long_integer'size."}, {"sha": "cabc028417bd8f2d9e2b4107933fc07e0ab8e54e", "filename": "gcc/ada/comperr.adb", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fcomperr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fcomperr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcomperr.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -367,21 +367,16 @@ package body Comperr is\n                End_Line;\n \n                Write_Str\n-                 (\"| Include the exact gcc or gnatmake command \" &\n-                  \"that you entered.\");\n+                 (\"| Include the exact command that you entered.\");\n                End_Line;\n \n                Write_Str\n-                 (\"| Also include sources listed below in gnatchop format\");\n-               End_Line;\n-\n-               Write_Str\n-                 (\"| (concatenated together with no headers between files).\");\n+                 (\"| Also include sources listed below.\");\n                End_Line;\n \n                if not Is_FSF_Version then\n                   Write_Str\n-                    (\"| Use plain ASCII or MIME attachment.\");\n+                    (\"| Use plain ASCII or MIME attachment(s).\");\n                   End_Line;\n                end if;\n             end if;"}, {"sha": "25c8db34782b3efb13c0980f285b33b07b2fca4d", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -2125,10 +2125,10 @@ package body Exp_Aggr is\n \n          Btype := Base_Type (Typ);\n          while Is_Derived_Type (Btype)\n-           and then (Present (Stored_Constraint (Btype))\n-                       or else\n-                     (In_Aggr_Type\n-                         and then Present (Stored_Constraint (Typ))))\n+           and then\n+             (Present (Stored_Constraint (Btype))\n+               or else\n+                 (In_Aggr_Type and then Present (Stored_Constraint (Typ))))\n          loop\n             Parent_Type := Etype (Btype);\n \n@@ -2155,7 +2155,7 @@ package body Exp_Aggr is\n                Discr_Val := First_Elmt (Stored_Constraint (Typ));\n             end if;\n \n-            while Present (Discr_Val) and Present (Disc) loop\n+            while Present (Discr_Val) and then Present (Disc) loop\n \n                --  Only those discriminants of the parent that are not\n                --  renamed by discriminants of the derived type need to"}, {"sha": "1c0713c3d30e0fa280d1cfe2128f69c18ec1e1ac", "filename": "gcc/ada/exp_strm.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fexp_strm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fexp_strm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_strm.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -966,10 +966,10 @@ package body Exp_Strm is\n         Make_Handled_Sequence_Of_Statements (Loc,\n           Statements => Stms));\n \n-      --  If Typ has controlled components (i.e. if it is classwide\n-      --  or Has_Controlled), or components constrained using the discriminants\n-      --  of Typ, then we need to ensure that all component assignments\n-      --  are performed on an object that has been appropriately constrained\n+      --  If Typ has controlled components (i.e. if it is classwide or\n+      --  Has_Controlled), or components constrained using the discriminants\n+      --  of Typ, then we need to ensure that all component assignments are\n+      --  performed on an object that has been appropriately constrained\n       --  prior to being initialized. To this effect, we wrap the component\n       --  assignments in a block where V is a constrained temporary.\n \n@@ -979,7 +979,7 @@ package body Exp_Strm is\n           Object_Definition   =>\n             Make_Subtype_Indication (Loc,\n               Subtype_Mark => New_Occurrence_Of (Base_Type (Typ), Loc),\n-              Constraint =>\n+              Constraint   =>\n                 Make_Index_Or_Discriminant_Constraint (Loc,\n                   Constraints => Cstr))));\n "}, {"sha": "81eb6397e5c0cef5be51f0e129cd817661a8c9d0", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -368,11 +368,8 @@ procedure Gnat1drv is\n \n          Suppress_Options.Suppress := (others => False);\n \n-         --  Turn off dynamic elaboration checks: generates inconsistencies in\n-         --  trees between specs compiled as part of a main unit or as part of\n-         --  a with-clause.\n-\n-         --  Comment is incomplete, SPARK semantics rely on static mode no???\n+         --  Turn off dynamic elaboration checks. SPARK mode depends on the\n+         --  use of the static elaboration mode.\n \n          Dynamic_Elaboration_Checks := False;\n "}, {"sha": "438be773d7fe7f960c2f3d0cb781e35d6a1f1211", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -1736,6 +1736,11 @@ package body Inline is\n                 Parameter_Type         => Param_Type));\n \n             Formal := First_Formal (Spec_Id);\n+\n+            --  Note that we copy the parameter type rather than creating\n+            --  a reference to it, because it may be a class-wide entity\n+            --  that will not be retrieved by name.\n+\n             while Present (Formal) loop\n                Append_To (Formal_List,\n                  Make_Parameter_Specification (Loc,\n@@ -1747,7 +1752,7 @@ package body Inline is\n                    Null_Exclusion_Present =>\n                      Null_Exclusion_Present (Parent (Formal)),\n                    Parameter_Type         =>\n-                     New_Occurrence_Of (Etype (Formal), Loc),\n+                     New_Copy_Tree (Parameter_Type (Parent (Formal))),\n                    Expression             =>\n                      Copy_Separate_Tree (Expression (Parent (Formal)))));\n "}, {"sha": "ba528faf62fa78f31c881720d2ea705491b6e1ce", "filename": "gcc/ada/par-ch13.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fpar-ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fpar-ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch13.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -568,8 +568,7 @@ package body Ch13 is\n                then\n                   Scan; -- past identifier\n \n-                  --  Attempt to detect ' or => following a potential aspect\n-                  --  mark.\n+                  --  Attempt to detect ' or => following potential aspect mark\n \n                   if Token = Tok_Apostrophe or else Token = Tok_Arrow then\n                      Restore_Scan_State (Scan_State);\n@@ -580,14 +579,13 @@ package body Ch13 is\n                   end if;\n                end if;\n \n-               --  The construct following the current aspect is not an\n-               --  aspect.\n+               --  Construct following the current aspect is not an aspect\n \n                Restore_Scan_State (Scan_State);\n             end;\n          end if;\n \n-         --  Must be terminator character\n+         --  Require semicolon if caller expects to scan this out\n \n          if Semicolon then\n             T_Semicolon;"}, {"sha": "80c95a9c63532e1a1392c68a9c3ff11c500b4409", "filename": "gcc/ada/par-ch3.adb", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fpar-ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fpar-ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch3.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -1858,7 +1858,26 @@ package body Ch3 is\n          end if;\n \n          Set_Defining_Identifier (Decl_Node, Idents (Ident));\n-         P_Aspect_Specifications (Decl_Node);\n+         P_Aspect_Specifications (Decl_Node, Semicolon => False);\n+\n+         --  Allow initialization expression to follow aspects (note that in\n+         --  this case P_Aspect_Specifications already issued an error msg).\n+\n+         if Token = Tok_Colon_Equal then\n+            if Is_Non_Empty_List (Aspect_Specifications (Decl_Node)) then\n+               Error_Msg\n+                 (\"aspect specifications must come after initialization \"\n+                  & \"expression\",\n+                  Sloc (First (Aspect_Specifications (Decl_Node))));\n+            end if;\n+\n+            Set_Expression (Decl_Node, Init_Expr_Opt);\n+            Set_Has_Init_Expression (Decl_Node);\n+         end if;\n+\n+         --  Now scan out the semicolon, which we deferred above\n+\n+         T_Semicolon;\n \n          if List_OK then\n             if Ident < Num_Idents then"}, {"sha": "310873b128816e70a6120a394946d2356547036d", "filename": "gcc/ada/s-taskin.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fs-taskin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fs-taskin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -110,6 +110,10 @@ package body System.Tasking is\n          return;\n       end if;\n \n+      --  Note that use of an aggregate here for this assignment\n+      --  would be illegal, because Common_ATCB is limited because\n+      --  Task_Primitives.Private_Data is limited.\n+\n       T.Common.Parent                   := Parent;\n       T.Common.Base_Priority            := Base_Priority;\n       T.Common.Base_CPU                 := Base_CPU;"}, {"sha": "5353326de454a01072e4a36c63adeed71c922939", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -662,6 +662,9 @@ package body System.Tasking.Stages is\n          T.Common.Task_Image_Len := Len;\n       end if;\n \n+      --  Note: we used to have code here to initialize T.Commmon.Domain, but\n+      --  that is not needed, since this is initialized in System.Tasking.\n+\n       Unlock (Self_ID);\n       Unlock_RTS;\n "}, {"sha": "3ded01acf0ef85a772991c74947eae15aef80975", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -4455,6 +4455,10 @@ package body Sem_Ch12 is\n       SPARK_Mode_Pragma        := Save_SMP;\n       Style_Check              := Save_Style_Check;\n \n+      if SPARK_Mode = On then\n+         Dynamic_Elaboration_Checks := False;\n+      end if;\n+\n       --  Check that if N is an instantiation of System.Dim_Float_IO or\n       --  System.Dim_Integer_IO, the formal type has a dimension system.\n \n@@ -4491,6 +4495,10 @@ package body Sem_Ch12 is\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n          Style_Check              := Save_Style_Check;\n+\n+         if SPARK_Mode = On then\n+            Dynamic_Elaboration_Checks := False;\n+         end if;\n    end Analyze_Package_Instantiation;\n \n    --------------------------\n@@ -5346,6 +5354,11 @@ package body Sem_Ch12 is\n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n+\n+         if SPARK_Mode = On then\n+            Dynamic_Elaboration_Checks := False;\n+         end if;\n+\n       end if;\n \n    <<Leave>>\n@@ -5366,6 +5379,10 @@ package body Sem_Ch12 is\n          Ignore_Pragma_SPARK_Mode := Save_IPSM;\n          SPARK_Mode               := Save_SM;\n          SPARK_Mode_Pragma        := Save_SMP;\n+\n+         if SPARK_Mode = On then\n+            Dynamic_Elaboration_Checks := False;\n+         end if;\n    end Analyze_Subprogram_Instantiation;\n \n    -------------------------\n@@ -9748,6 +9765,7 @@ package body Sem_Ch12 is\n       Loc        : Source_Ptr;\n       Nam        : Node_Id;\n       New_Spec   : Node_Id;\n+      New_Subp   : Entity_Id;\n \n    --  Start of processing for Instantiate_Formal_Subprogram\n \n@@ -9763,10 +9781,10 @@ package body Sem_Ch12 is\n       --  Create new entity for the actual (New_Copy_Tree does not), and\n       --  indicate that it is an actual.\n \n-      Set_Defining_Unit_Name\n-        (New_Spec, Make_Defining_Identifier (Loc, Chars (Formal_Sub)));\n-      Set_Ekind (Defining_Unit_Name (New_Spec), Ekind (Analyzed_S));\n-      Set_Is_Generic_Actual_Subprogram (Defining_Unit_Name (New_Spec));\n+      New_Subp := Make_Defining_Identifier (Loc, Chars (Formal_Sub));\n+      Set_Ekind (New_Subp, Ekind (Analyzed_S));\n+      Set_Is_Generic_Actual_Subprogram (New_Subp);\n+      Set_Defining_Unit_Name (New_Spec, New_Subp);\n \n       --  Create new entities for the each of the formals in the specification\n       --  of the renaming declaration built for the actual.\n@@ -10208,7 +10226,21 @@ package body Sem_Ch12 is\n             begin\n                Typ := Get_Instance_Of (Formal_Type);\n \n-               Freeze_Before (Instantiation_Node, Typ);\n+               --  If the actual appears in the current or an enclosing scope,\n+               --  use its type directly. This is relevant if it has an actual\n+               --  subtype that is distinct from its nominal one. This cannot\n+               --  be done in general because the type of the actual may\n+               --  depend on other actuals, and only be fully determined when\n+               --  the enclosing instance is analyzed.\n+\n+               if Present (Etype (Actual))\n+                  and then Is_Constr_Subt_For_U_Nominal (Etype (Actual))\n+               then\n+                  Freeze_Before (Instantiation_Node, Etype (Actual));\n+\n+               else\n+                  Freeze_Before (Instantiation_Node, Typ);\n+               end if;\n \n                --  If the actual is an aggregate, perform name resolution on\n                --  its components (the analysis of an aggregate does not do it)\n@@ -14424,6 +14456,12 @@ package body Sem_Ch12 is\n \n          SPARK_Mode := Save_SPARK_Mode;\n          SPARK_Mode_Pragma := Save_SPARK_Mode_Pragma;\n+\n+         --  Make sure dynamic elaboration checks are off in SPARK Mode\n+\n+         if SPARK_Mode = On then\n+            Dynamic_Elaboration_Checks := False;\n+         end if;\n       end if;\n \n       Current_Instantiated_Parent :="}, {"sha": "006e3201a0d43fcb8088240394be888557f292d1", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/596f71394dcedd06ce87e4e7499168aba92d4c7c/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=596f71394dcedd06ce87e4e7499168aba92d4c7c", "patch": "@@ -915,23 +915,31 @@ package body Sem_Elab is\n            and then not Elaboration_Checks_Suppressed (Ent)\n            and then not Suppress_Elaboration_Warnings (E_Scope)\n            and then not Elaboration_Checks_Suppressed (E_Scope)\n-           and then (Elab_Warnings or Elab_Info_Messages)\n+           and then ((Elab_Warnings or Elab_Info_Messages)\n+                      or else SPARK_Mode = On)\n            and then Generate_Warnings\n          then\n             --  Instantiation case\n \n             if Inst_Case then\n-               Elab_Warning\n-                 (\"instantiation of& may raise Program_Error?l?\",\n-                  \"info: instantiation of& during elaboration?$?\", Ent);\n+               if SPARK_Mode = On then\n+                  Error_Msg_NE\n+                    (\"instantiation of & during elaboration in SPARK mode\",\n+                     N, Ent);\n+\n+               else\n+                  Elab_Warning\n+                    (\"instantiation of & may raise Program_Error?l?\",\n+                     \"info: instantiation of & during elaboration?$?\", Ent);\n+               end if;\n \n             --  Indirect call case, info message only in static elaboration\n             --  case, because the attribute reference itself cannot raise an\n-            --  exception.\n+            --  exception. Note that SPARK does not  permit indirect calls.\n \n             elsif Access_Case then\n                Elab_Warning\n-                 (\"\", \"info: access to& during elaboration?$?\", Ent);\n+                 (\"\", \"info: access to & during elaboration?$?\", Ent);\n \n             --  Subprogram call case\n \n@@ -945,6 +953,10 @@ package body Sem_Elab is\n                      \"info: implicit call to & during elaboration?$?\",\n                      Ent);\n \n+               elsif SPARK_Mode = On then\n+                  Error_Msg_NE\n+                    (\"call to & during elaboration in SPARK mode\", N, Ent);\n+\n                else\n                   Elab_Warning\n                     (\"call to & may raise Program_Error?l?\",\n@@ -955,12 +967,25 @@ package body Sem_Elab is\n \n             Error_Msg_Qual_Level := Nat'Last;\n \n-            if Nkind (N) in N_Subprogram_Instantiation then\n+            --  Case of Elaborate_All not present and required, for SPARK this\n+            --  is an error, so give an error message.\n+\n+            if SPARK_Mode = On then\n+               Error_Msg_NE\n+                 (\"\\Elaborate_All pragma required for&\", N, W_Scope);\n+\n+            --  Otherwise we generate an implicit pragma. For a subprogram\n+            --  instantiation, Elaborate is good enough, since no transitive\n+            --  call is possible at elaboration time in this case.\n+\n+            elsif Nkind (N) in N_Subprogram_Instantiation then\n                Elab_Warning\n                  (\"\\missing pragma Elaborate for&?l?\",\n                   \"\\implicit pragma Elaborate for& generated?$?\",\n                   W_Scope);\n \n+            --  For all other cases, we need an implicit Elaborate_All\n+\n             else\n                Elab_Warning\n                  (\"\\missing pragma Elaborate_All for&?l?\","}]}