{"sha": "65e736c0efc463270764ea3012b9804c495c71bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlNzM2YzBlZmM0NjMyNzA3NjRlYTMwMTJiOTgwNGM0OTVjNzFiYw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-16T18:19:34Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-16T18:19:34Z"}, "message": "Fix caret locations in format_type_warning (PR c/72857)\n\ngcc/c-family/ChangeLog:\n\tPR c/72857\n\t* c-common.c (substring_loc::get_range): Rename to...\n\t(substring_loc::get_location): ...this, converting param from a\n\tsource_range * to a location_t *.  Call\n\tget_source_location_for_substring rather than\n\tget_source_range_for_substring, and pass in m_caret_idx.\n\t* c-common.h (substring_loc::substring_loc): Add param \"caret_idx\".\n\t(substring_loc::get_range): Replace with...\n\t(substring_loc::get_location): ...this.\n\t(substring_loc::set_caret_index): New method.\n\t(substring_loc): Add field m_caret_idx.\n\t* c-format.c (format_warning_va): Update for above changes.\n\tRename local \"substring_loc\" to \"fmt_substring_loc\" to avoid\n\tclashing with type name.\n\t(format_warning_at_char): Add caret_idx param to substring_loc ctor.\n\t(check_argument_type): Likewise.\n\t(format_type_warning): Rename param \"fmt_loc\" to \"whole_fmt_loc\"\n\tUse a copy when emitting warnings, setting the caret index from TYPE.\n\ngcc/ChangeLog:\n\tPR c/72857\n\t* input.c (get_source_range_for_substring): Rename to...\n\t(get_source_location_for_substring): ...this, adding param\n\t\"caret_idx\", and converting output param from source_range * to\n\tlocation_t *.\n\t(get_source_range_for_char): New function.\n\t(get_num_source_ranges_for_substring): Update comment to reflect\n\tabove renaming.\n\t(assert_char_at_range): Update to use get_source_range_for_char\n\trather than get_source_range_for_substring.\n\t(test_lexer_string_locations_concatenation_2): Likewise.\n\t* substring-locations.h (get_source_range_for_substring): Rename\n\tto...\n\t(get_source_location_for_substring): ...this, and adding param\n\t\"caret_idx\", and converting output param from source_range * to\n\tlocation_t *.\n\ngcc/testsuite/ChangeLog:\n\tPR c/72857\n\t* gcc.dg/format/asm_fprintf-1.c: Restore column numbers\n\tfor embedded NUL.\n\t* gcc.dg/format/c90-printf-1.c: Restore column numbers.\n\t* gcc.dg/format/diagnostic-ranges.c (test_hex): Update expected\n\tcaret placement.\n\t(test_oct): Likewise.\n\t(test_multiple): Likewise.\n\t(test_field_width_specifier): Likewise.\n\t(test_field_width_specifier_2): New function.\n\t(test_field_precision_specifier): New function.\n\t(test_embedded_nul): Update expected caret placement.\n\t(test_non_contiguous_strings): Update line number.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(__emit_string_literal_range): Add \"caret_idx\" param.\n\t(test_simple_string_literal): Add value for new param, updating\n\texpected output..\n\t(test_concatenated_string_literal): Likewise.\n\t(test_multiline_string_literal): Likewise.\n\t(test_hex): Likewise.\n\t(test_oct): Likewise.\n\t(test_multiple): Likewise.\n\t(test_ucn4): Likewise.\n\t(test_ucn8): Likewise.\n\t(test_u8): Likewise.\n\t(test_u): Likewise; update expected message, from \"range\" to\n\t\"location\".\n\t(test_U): Likewise.\n\t(test_L): Likewise.\n\t(test_macro): Add value for new param.\n\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c\n\t(__emit_string_literal_range): Add \"caret_idx\" param.\n\t(test_stringified_token_1): Add value for new param.  Update\n\texpected message, from \"range\" to \"location\".\n\t(test_stringized_token_2): Likewise, adding param to macro.\n\t(test_stringified_token_3): Likewise.\n\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c\n\t(emit_warning): Convert param from source_range to location_t.\n\t(test_string_literals): Add caret_idx param, and use it when\n\tconstructing a substring_loc.  Update error message, from\n\t\"range\" to \"location\".\n\nFrom-SVN: r239510", "tree": {"sha": "f13ad9e3631ebbae2255d5fef36928ccaf345409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f13ad9e3631ebbae2255d5fef36928ccaf345409"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e736c0efc463270764ea3012b9804c495c71bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e736c0efc463270764ea3012b9804c495c71bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e736c0efc463270764ea3012b9804c495c71bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e736c0efc463270764ea3012b9804c495c71bc/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb3a5bcc74b063c05ceb78f8e0bfee3e03b021a6"}], "stats": {"total": 428, "additions": 305, "deletions": 123}, "files": [{"sha": "8bd7dfc794fdde05fc76057a77cf16736364567d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1,3 +1,22 @@\n+2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/72857\n+\t* input.c (get_source_range_for_substring): Rename to...\n+\t(get_source_location_for_substring): ...this, adding param\n+\t\"caret_idx\", and converting output param from source_range * to\n+\tlocation_t *.\n+\t(get_source_range_for_char): New function.\n+\t(get_num_source_ranges_for_substring): Update comment to reflect\n+\tabove renaming.\n+\t(assert_char_at_range): Update to use get_source_range_for_char\n+\trather than get_source_range_for_substring.\n+\t(test_lexer_string_locations_concatenation_2): Likewise.\n+\t* substring-locations.h (get_source_range_for_substring): Rename\n+\tto...\n+\t(get_source_location_for_substring): ...this, and adding param\n+\t\"caret_idx\", and converting output param from source_range * to\n+\tlocation_t *.\n+\n 2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* input.c (class selftest::temp_source_file): Move to"}, {"sha": "ada2be00ffacbe3f7c6e0f3708585f8c0372c3c4", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1,3 +1,24 @@\n+2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/72857\n+\t* c-common.c (substring_loc::get_range): Rename to...\n+\t(substring_loc::get_location): ...this, converting param from a\n+\tsource_range * to a location_t *.  Call\n+\tget_source_location_for_substring rather than\n+\tget_source_range_for_substring, and pass in m_caret_idx.\n+\t* c-common.h (substring_loc::substring_loc): Add param \"caret_idx\".\n+\t(substring_loc::get_range): Replace with...\n+\t(substring_loc::get_location): ...this.\n+\t(substring_loc::set_caret_index): New method.\n+\t(substring_loc): Add field m_caret_idx.\n+\t* c-format.c (format_warning_va): Update for above changes.\n+\tRename local \"substring_loc\" to \"fmt_substring_loc\" to avoid\n+\tclashing with type name.\n+\t(format_warning_at_char): Add caret_idx param to substring_loc ctor.\n+\t(check_argument_type): Likewise.\n+\t(format_type_warning): Rename param \"fmt_loc\" to \"whole_fmt_loc\"\n+\tUse a copy when emitting warnings, setting the caret index from TYPE.\n+\n 2016-08-16  Eric Botcazou  <ebotcazou@adacore.com>\n             Arnaud Charlet  <charlet@adacore.com>\n "}, {"sha": "d41314693ca009fb1e701778f9064ebad13fbfbb", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1140,24 +1140,24 @@ get_cpp_ttype_from_string_type (tree string_type)\n \n GTY(()) string_concat_db *g_string_concat_db;\n \n-/* Attempt to determine the source range of the substring.\n-   If successful, return NULL and write the source range to *OUT_RANGE.\n+/* Attempt to determine the source location of the substring.\n+   If successful, return NULL and write the source location to *OUT_LOC.\n    Otherwise return an error message.  Error messages are intended\n    for GCC developers (to help debugging) rather than for end-users.  */\n \n const char *\n-substring_loc::get_range (source_range *out_range) const\n+substring_loc::get_location (location_t *out_loc) const\n {\n-  gcc_assert (out_range);\n+  gcc_assert (out_loc);\n \n   enum cpp_ttype tok_type = get_cpp_ttype_from_string_type (m_string_type);\n   if (tok_type == CPP_OTHER)\n     return \"unrecognized string type\";\n \n-  return get_source_range_for_substring (parse_in, g_string_concat_db,\n-\t\t\t\t\t m_fmt_string_loc, tok_type,\n-\t\t\t\t\t m_start_idx, m_end_idx,\n-\t\t\t\t\t out_range);\n+  return get_source_location_for_substring (parse_in, g_string_concat_db,\n+\t\t\t\t\t    m_fmt_string_loc, tok_type,\n+\t\t\t\t\t    m_caret_idx, m_start_idx, m_end_idx,\n+\t\t\t\t\t    out_loc);\n }\n \n \f"}, {"sha": "4673123fa745b733b32fe06d9b78c6ea0fa805fc", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1124,17 +1124,20 @@ class substring_loc\n {\n  public:\n   substring_loc (location_t fmt_string_loc, tree string_type,\n-\t\t int start_idx, int end_idx)\n+\t\t int caret_idx, int start_idx, int end_idx)\n   : m_fmt_string_loc (fmt_string_loc), m_string_type (string_type),\n-    m_start_idx (start_idx), m_end_idx (end_idx) {}\n+    m_caret_idx (caret_idx), m_start_idx (start_idx), m_end_idx (end_idx) {}\n \n-  const char *get_range (source_range *out_range) const;\n+  void set_caret_index (int caret_idx) { m_caret_idx = caret_idx; }\n+\n+  const char *get_location (location_t *out_loc) const;\n \n   location_t get_fmt_string_loc () const { return m_fmt_string_loc; }\n \n  private:\n   location_t m_fmt_string_loc;\n   tree m_string_type;\n+  int m_caret_idx;\n   int m_start_idx;\n   int m_end_idx;\n };"}, {"sha": "ad434f810ceebf2743e6f35183ed875b8264a756", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -146,26 +146,23 @@ format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n {\n   bool substring_within_range = false;\n   location_t primary_loc;\n-  location_t substring_loc = UNKNOWN_LOCATION;\n+  location_t fmt_substring_loc = UNKNOWN_LOCATION;\n   source_range fmt_loc_range\n     = get_range_from_loc (line_table, fmt_loc.get_fmt_string_loc ());\n-  source_range fmt_substring_range;\n-  const char *err = fmt_loc.get_range (&fmt_substring_range);\n+  const char *err = fmt_loc.get_location (&fmt_substring_loc);\n+  source_range fmt_substring_range\n+    = get_range_from_loc (line_table, fmt_substring_loc);\n   if (err)\n     /* Case 3: unable to get substring location.  */\n     primary_loc = fmt_loc.get_fmt_string_loc ();\n   else\n     {\n-      substring_loc = make_location (fmt_substring_range.m_finish,\n-\t\t\t\t     fmt_substring_range.m_start,\n-\t\t\t\t     fmt_substring_range.m_finish);\n-\n       if (fmt_substring_range.m_start >= fmt_loc_range.m_start\n \t  && fmt_substring_range.m_finish <= fmt_loc_range.m_finish)\n \t/* Case 1.  */\n \t{\n \t  substring_within_range = true;\n-\t  primary_loc = substring_loc;\n+\t  primary_loc = fmt_substring_loc;\n \t}\n       else\n \t/* Case 2.  */\n@@ -193,11 +190,11 @@ format_warning_va (const substring_loc &fmt_loc, source_range *param_range,\n   diagnostic.option_index = opt;\n   bool warned = report_diagnostic (&diagnostic);\n \n-  if (!err && substring_loc && !substring_within_range)\n+  if (!err && fmt_substring_loc && !substring_within_range)\n     /* Case 2.  */\n     if (warned)\n       {\n-\trich_location substring_richloc (line_table, substring_loc);\n+\trich_location substring_richloc (line_table, fmt_substring_loc);\n \tif (corrected_substring)\n \t  substring_richloc.add_fixit_replace (fmt_substring_range,\n \t\t\t\t\t       corrected_substring);\n@@ -247,7 +244,8 @@ format_warning_at_char (location_t fmt_string_loc, tree format_string_cst,\n       be emitted.  Fix it.  */\n   char_idx -= 1;\n \n-  substring_loc fmt_loc (fmt_string_loc, string_type, char_idx, char_idx);\n+  substring_loc fmt_loc (fmt_string_loc, string_type, char_idx, char_idx,\n+\t\t\t char_idx);\n   bool warned = format_warning_va (fmt_loc, NULL, NULL, opt, gmsgid, &ap);\n   va_end (ap);\n \n@@ -2809,7 +2807,9 @@ check_argument_type (const format_char_info *fci,\n     {\n       ptrdiff_t offset_to_format_start = (start_of_this_format - 1) - orig_format_chars;\n       ptrdiff_t offset_to_format_end = (format_chars - 1) - orig_format_chars;\n+      /* By default, use the end of the range for the caret location.  */\n       substring_loc fmt_loc (fmt_param_loc, TREE_TYPE (format_string_cst),\n+\t\t\t     offset_to_format_end,\n \t\t\t     offset_to_format_start, offset_to_format_end);\n       check_format_types (fmt_loc, first_wanted_type, fki);\n     }\n@@ -3262,16 +3262,18 @@ get_format_for_type (const format_kind_info *fki, tree arg_type)\n   return NULL;\n }\n \n-/* Give a warning at FMT_LOC about a format argument of different type\n-   from that expected.  If non-NULL, PARAM_RANGE is the source range of the\n+/* Give a warning about a format argument of different type from that expected.\n+   The range of the diagnostic is taken from WHOLE_FMT_LOC; the caret location\n+   is based on the location of the char at TYPE->offset_loc.\n+   If non-NULL, PARAM_RANGE is the source range of the\n    relevant argument.  WANTED_TYPE is the type the argument should have,\n    possibly stripped of pointer dereferences.  The description (such as \"field\n    precision\"), the placement in the format string, a possibly more\n    friendly name of WANTED_TYPE, and the number of pointer dereferences\n    are taken from TYPE.  ARG_TYPE is the type of the actual argument,\n    or NULL if it is missing.  */\n static void\n-format_type_warning (const substring_loc &fmt_loc,\n+format_type_warning (const substring_loc &whole_fmt_loc,\n \t\t     source_range *param_range,\n \t\t     format_wanted_type *type,\n \t\t     tree wanted_type, tree arg_type,\n@@ -3316,6 +3318,12 @@ format_type_warning (const substring_loc &fmt_loc,\n       p[pointer_count + 1] = 0;\n     }\n \n+  /* WHOLE_FMT_LOC has the caret at the end of the range.\n+     Set the caret to be at the offset from TYPE.  Subtract one\n+     from the offset for the same reason as in format_warning_at_char.  */\n+  substring_loc fmt_loc (whole_fmt_loc);\n+  fmt_loc.set_caret_index (type->offset_loc - 1);\n+\n   /* Attempt to provide hints for argument types, but not for field widths\n      and precisions.  */\n   char *format_for_type = NULL;"}, {"sha": "10cab77359d369a2d51feacbc063efeb192d45b5", "filename": "gcc/input.c", "status": "modified", "additions": 66, "deletions": 20, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1402,10 +1402,17 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n   return NULL;\n }\n \n-/* Attempt to populate *OUT_RANGE with source location information on the\n-   range of given characters within the string literal found at STRLOC.\n-   START_IDX and END_IDX refer to offsets within the execution character\n-   set.\n+/* Attempt to populate *OUT_LOC with source location information on the\n+   given characters within the string literal found at STRLOC.\n+   CARET_IDX, START_IDX, and END_IDX refer to offsets within the execution\n+   character set.\n+\n+   For example, given CARET_IDX = 4, START_IDX = 3, END_IDX  = 7\n+   and string literal \"012345\\n789\"\n+   *OUT_LOC is written to with:\n+     \"012345\\n789\"\n+         ~^~~~~\n+\n    If CONCATS is non-NULL, then any string literals that the token at\n    STRLOC was concatenated with are also considered.\n \n@@ -1416,34 +1423,74 @@ get_substring_ranges_for_loc (cpp_reader *pfile,\n    than for end-users.  */\n \n const char *\n-get_source_range_for_substring (cpp_reader *pfile,\n-\t\t\t\tstring_concat_db *concats,\n-\t\t\t\tlocation_t strloc,\n-\t\t\t\tenum cpp_ttype type,\n-\t\t\t\tint start_idx, int end_idx,\n-\t\t\t\tsource_range *out_range)\n-{\n+get_source_location_for_substring (cpp_reader *pfile,\n+\t\t\t\t   string_concat_db *concats,\n+\t\t\t\t   location_t strloc,\n+\t\t\t\t   enum cpp_ttype type,\n+\t\t\t\t   int caret_idx, int start_idx, int end_idx,\n+\t\t\t\t   source_location *out_loc)\n+{\n+  gcc_checking_assert (caret_idx >= 0);\n   gcc_checking_assert (start_idx >= 0);\n   gcc_checking_assert (end_idx >= 0);\n-  gcc_assert (out_range);\n+  gcc_assert (out_loc);\n \n   cpp_substring_ranges ranges;\n   const char *err\n     = get_substring_ranges_for_loc (pfile, concats, strloc, type, ranges);\n   if (err)\n     return err;\n \n+  if (caret_idx >= ranges.get_num_ranges ())\n+    return \"caret_idx out of range\";\n   if (start_idx >= ranges.get_num_ranges ())\n     return \"start_idx out of range\";\n   if (end_idx >= ranges.get_num_ranges ())\n     return \"end_idx out of range\";\n \n-  out_range->m_start = ranges.get_range (start_idx).m_start;\n-  out_range->m_finish = ranges.get_range (end_idx).m_finish;\n+  *out_loc = make_location (ranges.get_range (caret_idx).m_start,\n+\t\t\t    ranges.get_range (start_idx).m_start,\n+\t\t\t    ranges.get_range (end_idx).m_finish);\n+  return NULL;\n+}\n+\n+/* Attempt to populate *OUT_RANGE with source location information on the\n+   given character within the string literal found at STRLOC.\n+   CHAR_IDX refers to an offset within the execution character set.\n+   If CONCATS is non-NULL, then any string literals that the token at\n+   STRLOC was concatenated with are also considered.\n+\n+   This is implemented by re-parsing the relevant source line(s).\n+\n+   Return NULL if successful, or an error message if any errors occurred.\n+   Error messages are intended for GCC developers (to help debugging) rather\n+   than for end-users.  */\n+\n+static const char *\n+get_source_range_for_char (cpp_reader *pfile,\n+\t\t\t   string_concat_db *concats,\n+\t\t\t   location_t strloc,\n+\t\t\t   enum cpp_ttype type,\n+\t\t\t   int char_idx,\n+\t\t\t   source_range *out_range)\n+{\n+  gcc_checking_assert (char_idx >= 0);\n+  gcc_assert (out_range);\n+\n+  cpp_substring_ranges ranges;\n+  const char *err\n+    = get_substring_ranges_for_loc (pfile, concats, strloc, type, ranges);\n+  if (err)\n+    return err;\n+\n+  if (char_idx >= ranges.get_num_ranges ())\n+    return \"char_idx out of range\";\n+\n+  *out_range = ranges.get_range (char_idx);\n   return NULL;\n }\n \n-/* As get_source_range_for_substring, but write to *OUT the number\n+/* As get_source_range_for_char, but write to *OUT the number\n    of ranges that are available.  */\n \n const char *\n@@ -1939,8 +1986,8 @@ assert_char_at_range (const location &loc,\n \n   source_range actual_range;\n   const char *err\n-    = get_source_range_for_substring (pfile, concats, strloc, type,\n-\t\t\t\t      idx, idx, &actual_range);\n+    = get_source_range_for_char (pfile, concats, strloc, type, idx,\n+\t\t\t\t &actual_range);\n   if (should_have_column_data_p (strloc))\n     ASSERT_EQ_AT (loc, NULL, err);\n   else\n@@ -2789,9 +2836,8 @@ test_lexer_string_locations_concatenation_2 (const line_table_case &case_)\n \t this case.  */\n       source_range actual_range;\n       const char *err\n-\t= get_source_range_for_substring (test.m_parser, &test.m_concats,\n-\t\t\t\t\t  initial_loc, type, 0, 0,\n-\t\t\t\t\t  &actual_range);\n+\t= get_source_range_for_char (test.m_parser, &test.m_concats,\n+\t\t\t\t     initial_loc, type, 0, &actual_range);\n       ASSERT_STREQ (\"range starts after LINE_MAP_MAX_LOCATION_WITH_COLS\", err);\n       return;\n     }"}, {"sha": "f839c74563550b68e45243738f1d1b67033052b8", "filename": "gcc/substring-locations.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fsubstring-locations.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Fsubstring-locations.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsubstring-locations.h?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -20,11 +20,12 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef GCC_SUBSTRING_LOCATIONS_H\n #define GCC_SUBSTRING_LOCATIONS_H\n \n-extern const char *get_source_range_for_substring (cpp_reader *pfile,\n-\t\t\t\t\t\t   string_concat_db *concats,\n-\t\t\t\t\t\t   location_t strloc,\n-\t\t\t\t\t\t   enum cpp_ttype type,\n-\t\t\t\t\t\t   int start_idx, int end_idx,\n-\t\t\t\t\t\t   source_range *out_range);\n+extern const char *get_source_location_for_substring (cpp_reader *pfile,\n+\t\t\t\t\t\t      string_concat_db *concats,\n+\t\t\t\t\t\t      location_t strloc,\n+\t\t\t\t\t\t      enum cpp_ttype type,\n+\t\t\t\t\t\t      int caret_idx,\n+\t\t\t\t\t\t      int start_idx, int end_idx,\n+\t\t\t\t\t\t      location_t *out_loc);\n \n #endif /* ! GCC_SUBSTRING_LOCATIONS_H */"}, {"sha": "46141a4d7537e021aab3bb74c5843f54edddaf18", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -1,3 +1,47 @@\n+2016-08-16  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c/72857\n+\t* gcc.dg/format/asm_fprintf-1.c: Restore column numbers\n+\tfor embedded NUL.\n+\t* gcc.dg/format/c90-printf-1.c: Restore column numbers.\n+\t* gcc.dg/format/diagnostic-ranges.c (test_hex): Update expected\n+\tcaret placement.\n+\t(test_oct): Likewise.\n+\t(test_multiple): Likewise.\n+\t(test_field_width_specifier): Likewise.\n+\t(test_field_width_specifier_2): New function.\n+\t(test_field_precision_specifier): New function.\n+\t(test_embedded_nul): Update expected caret placement.\n+\t(test_non_contiguous_strings): Update line number.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(__emit_string_literal_range): Add \"caret_idx\" param.\n+\t(test_simple_string_literal): Add value for new param, updating\n+\texpected output..\n+\t(test_concatenated_string_literal): Likewise.\n+\t(test_multiline_string_literal): Likewise.\n+\t(test_hex): Likewise.\n+\t(test_oct): Likewise.\n+\t(test_multiple): Likewise.\n+\t(test_ucn4): Likewise.\n+\t(test_ucn8): Likewise.\n+\t(test_u8): Likewise.\n+\t(test_u): Likewise; update expected message, from \"range\" to\n+\t\"location\".\n+\t(test_U): Likewise.\n+\t(test_L): Likewise.\n+\t(test_macro): Add value for new param.\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-2.c\n+\t(__emit_string_literal_range): Add \"caret_idx\" param.\n+\t(test_stringified_token_1): Add value for new param.  Update\n+\texpected message, from \"range\" to \"location\".\n+\t(test_stringized_token_2): Likewise, adding param to macro.\n+\t(test_stringified_token_3): Likewise.\n+\t* gcc.dg/plugin/diagnostic_plugin_test_string_literals.c\n+\t(emit_warning): Convert param from source_range to location_t.\n+\t(test_string_literals): Add caret_idx param, and use it when\n+\tconstructing a substring_loc.  Update error message, from\n+\t\"range\" to \"location\".\n+\n 2016-08-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/71910"}, {"sha": "2eabbf9190e03ebab77e5a3bf2c96aff2d651e88", "filename": "gcc/testsuite/gcc.dg/format/asm_fprintf-1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fasm_fprintf-1.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -66,9 +66,9 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   asm_fprintf (\"%d\", i, i); /* { dg-warning \"16:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   asm_fprintf (\"\"); /* { dg-warning \"16:zero-length\" \"warning for empty format\" } */\n-  asm_fprintf (\"\\0\"); /* { dg-warning \"18:embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"20:embedded\" \"warning for embedded NUL\" } */\n-  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"20:embedded|too many\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"\\0\"); /* { dg-warning \"17:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0\", i); /* { dg-warning \"19:embedded\" \"warning for embedded NUL\" } */\n+  asm_fprintf (\"%d\\0%d\", i, i); /* { dg-warning \"19:embedded|too many\" \"warning for embedded NUL\" } */\n   asm_fprintf (NULL); /* { dg-warning \"null\" \"null format string warning\" } */\n   asm_fprintf (\"%\"); /* { dg-warning \"17:trailing\" \"trailing % warning\" } */\n   asm_fprintf (\"%++d\", i); /* { dg-warning \"19:repeated\" \"repeated flag warning\" } */"}, {"sha": "5329dad83a40d430bc0567e579be5b6ed3e348c8", "filename": "gcc/testsuite/gcc.dg/format/c90-printf-1.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fc90-printf-1.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -58,11 +58,11 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%-%\"); /* { dg-warning \"13:type\" \"missing type\" } */\n   /* { dg-warning \"14:trailing\" \"bogus %%\" { target *-*-* } 58 } */\n   printf (\"%-%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n-  /* { dg-warning \"16:format\" \"bogus %%\" { target *-*-* } 60 } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 60 } */\n   printf (\"%5%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n-  /* { dg-warning \"16:format\" \"bogus %%\" { target *-*-* } 62 } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 62 } */\n   printf (\"%h%\\n\"); /* { dg-warning \"13:format\" \"bogus %%\" } */\n-  /* { dg-warning \"16:format\" \"bogus %%\" { target *-*-* } 64 } */\n+  /* { dg-warning \"15:format\" \"bogus %%\" { target *-*-* } 64 } */\n   /* Valid and invalid %h, %l, %L constructions.  */\n   printf (\"%hd\", i);\n   printf (\"%hi\", i);\n@@ -184,8 +184,8 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%-08G\", d); /* { dg-warning \"11:flags|ignored\" \"0 flag ignored with - flag\" } */\n   /* Various tests of bad argument types.  */\n   printf (\"%d\", l); /* { dg-warning \"13:format\" \"bad argument types\" } */\n-  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"16:field\" \"bad * argument types\" } */\n-  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"16:field\" \"bad * argument types\" } */\n+  printf (\"%*.*d\", l, i2, i); /* { dg-warning \"13:field\" \"bad * argument types\" } */\n+  printf (\"%*.*d\", i1, l, i); /* { dg-warning \"15:field\" \"bad * argument types\" } */\n   printf (\"%ld\", i); /* { dg-warning \"14:format\" \"bad argument types\" } */\n   printf (\"%s\", n); /* { dg-warning \"13:format\" \"bad argument types\" } */\n   printf (\"%p\", i); /* { dg-warning \"13:format\" \"bad argument types\" } */\n@@ -231,8 +231,8 @@ foo (int i, int i1, int i2, unsigned int u, double d, char *s, void *p,\n   printf (\"%d\", i, i); /* { dg-warning \"11:arguments\" \"wrong number of args\" } */\n   /* Miscellaneous bogus constructions.  */\n   printf (\"\"); /* { dg-warning \"11:zero-length\" \"warning for empty format\" } */\n-  printf (\"\\0\"); /* { dg-warning \"13:embedded\" \"warning for embedded NUL\" } */\n-  printf (\"%d\\0\", i); /* { dg-warning \"15:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"\\0\"); /* { dg-warning \"12:embedded\" \"warning for embedded NUL\" } */\n+  printf (\"%d\\0\", i); /* { dg-warning \"14:embedded\" \"warning for embedded NUL\" } */\n   printf (\"%d\\0%d\", i, i); /* { dg-warning \"embedded|too many\" \"warning for embedded NUL\" } */\n   printf (NULL); /* { dg-warning \"3:null\" \"null format string warning\" } */\n   printf (\"%\"); /* { dg-warning \"12:trailing\" \"trailing % warning\" } */"}, {"sha": "63075c80609e1ca6d42d97a555d49edbce99399a", "filename": "gcc/testsuite/gcc.dg/format/diagnostic-ranges.c", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fdiagnostic-ranges.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -87,7 +87,7 @@ void test_hex (const char *msg)\n /* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\x25\\x69\", msg);\n-                 ~~~~~~~^\n+                 ~~~~^~~~\n                  %s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -101,7 +101,7 @@ void test_oct (const char *msg)\n /* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"hello \\045\\151\", msg);\n-                 ~~~~~~~^\n+                 ~~~~^~~~\n                  %s\n    { dg-end-multiline-output \"\" } */\n }\n@@ -120,7 +120,7 @@ void test_multiple (const char *msg)\n /* TODO: ideally would also underline \"msg\".  */\n /* { dg-begin-multiline-output \"\" }\n    printf(\"prefix\"  \"\\x25\"  \"\\151\"  \"suffix\",\n-                     ~~~~~~~~~~~^\n+                     ~~~~~~~~^~~~\n                      %s\n   { dg-end-multiline-output \"\" } */\n }\n@@ -148,10 +148,44 @@ void test_param (long long_i, long long_j)\n \n void test_field_width_specifier (long l, int i1, int i2)\n {\n-  printf (\" %*.*d \", l, i1, i2); /* { dg-warning \"17: field width specifier '\\\\*' expects argument of type 'int', but argument 2 has type 'long int'\" } */\n+  printf (\" %*.*d \", l, i1, i2); /* { dg-warning \"14: field width specifier '\\\\*' expects argument of type 'int', but argument 2 has type 'long int'\" } */\n /* { dg-begin-multiline-output \"\" }\n    printf (\" %*.*d \", l, i1, i2);\n-             ~~~~^\n+             ~^~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+/* PR c/72857.  */\n+\n+void test_field_width_specifier_2 (char *d, long foo, long bar)\n+{\n+  __builtin_sprintf (d, \" %*ld \", foo, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* TODO: ideally we'd underline the first \"foo\" here\".  */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %*ld \", foo, foo);\n+                           ~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (d, \" %*ld \", foo + bar, foo); /* { dg-warning \"28: field width specifier '\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %*ld \", foo + bar, foo);\n+                           ~^~~    ~~~~~~~~~\n+   { dg-end-multiline-output \"\" } */\n+}\n+\n+void test_field_precision_specifier (char *d, long foo, long bar)\n+{\n+  __builtin_sprintf (d, \" %.*ld \", foo, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* TODO: ideally we'd underline the first \"foo\" here\".  */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %.*ld \", foo, foo);\n+                           ~~^~~\n+   { dg-end-multiline-output \"\" } */\n+\n+  __builtin_sprintf (d, \" %.*ld \", foo + bar, foo); /* { dg-warning \"29: field precision specifier '\\\\.\\\\*' expects argument of type 'int', but argument 3 has type 'long int'\" } */\n+  /* { dg-begin-multiline-output \"\" }\n+   __builtin_sprintf (d, \" %.*ld \", foo + bar, foo);\n+                           ~~^~~    ~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -200,10 +234,10 @@ void test_conversion_lacks_type (void)\n \n void test_embedded_nul (void)\n {\n-  printf (\" \\0 \"); /* { dg-warning \"14:embedded\" \"warning for embedded NUL\" } */\n+  printf (\" \\0 \"); /* { dg-warning \"13:embedded\" \"warning for embedded NUL\" } */\n /* { dg-begin-multiline-output \"\" }\n    printf (\" \\0 \");\n-             ~^\n+             ^~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -225,7 +259,7 @@ void test_macro (const char *msg)\n void test_non_contiguous_strings (void)\n {\n   __builtin_printf(\" %\" \"d \", 0.5); /* { dg-warning \"20: format .%d. expects argument of type .int., but argument 2 has type .double.\" } */\n-                                    /* { dg-message \"26: format string is defined here\" \"\" { target *-*-* } 227 } */\n+                                    /* { dg-message \"26: format string is defined here\" \"\" { target *-*-* } 261 } */\n   /* { dg-begin-multiline-output \"\" }\n    __builtin_printf(\" %\" \"d \", 0.5);\n                     ^~~~"}, {"sha": "d5be021896ec8802732186f5a9eabad33fc5022d", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -13,14 +13,14 @@\n    LITERAL is a const void * to allow testing the various kinds of wide\n    string literal, rather than just const char *.  */\n \n-extern void __emit_string_literal_range (const void *literal,\n+extern void __emit_string_literal_range (const void *literal, int caret_idx,\n \t\t\t\t\t int start_idx, int end_idx);\n \n void\n test_simple_string_literal (void)\n {\n   __emit_string_literal_range (\"0123456789\", /* { dg-warning \"range\" } */\n-\t\t\t       6, 7);\n+\t\t\t       6, 6, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"0123456789\",\n                                        ^~\n@@ -31,10 +31,10 @@ void\n test_concatenated_string_literal (void)\n {\n   __emit_string_literal_range (\"01234\" \"56789\", /* { dg-warning \"range\" } */\n-\t\t\t       3, 6);\n+\t\t\t       4, 3, 6);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\" \"56789\",\n-                                    ^~~~~~~\n+                                    ~^~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -43,14 +43,14 @@ test_multiline_string_literal (void)\n {\n   __emit_string_literal_range (\"01234\" /* { dg-warning \"range\" } */\n                                \"56789\",\n-                               3, 6);\n+                               4, 3, 6);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\"\n-                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+                                    ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                 \"56789\",\n-                                ~~~  \n+                                ~~~   \n    { dg-end-multiline-output \"\" } */\n-  /* FIXME: why does the above need two trailing spaces?  */\n+  /* FIXME: why does the above need three trailing spaces?  */\n }\n \n /* Tests of various unicode encodings.\n@@ -79,10 +79,10 @@ test_hex (void)\n      and with a space in place of digit 6, to terminate the escaped\n      hex code.  */\n   __emit_string_literal_range (\"01234\\x35 789\", /* { dg-warning \"range\" } */\n-\t\t\t       3, 7);\n+\t\t\t       4, 3, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\\x35 789\"\n-                                    ^~~~~~~~\n+                                    ~^~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -93,10 +93,10 @@ test_oct (void)\n      and with a space in place of digit 6, to terminate the escaped\n      octal code.  */\n   __emit_string_literal_range (\"01234\\065 789\", /* { dg-warning \"range\" } */\n-\t\t\t       3, 7);\n+\t\t\t       4, 3, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\\065 789\"\n-                                    ^~~~~~~~\n+                                    ~^~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -106,10 +106,10 @@ test_multiple (void)\n   /* Digits 0-9, expressing digit 5 in ASCII as hex \"\\x35\"\n      digit 6 in ASCII as octal \"\\066\", concatenating multiple strings.  */\n   __emit_string_literal_range (\"01234\"  \"\\x35\"  \"\\066\"  \"789\", /* { dg-warning \"range\" } */\n-\t\t\t       3, 8);\n+\t\t\t       5, 3, 8);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\"  \"\\x35\"  \"\\066\"  \"789\",\n-                                    ^~~~~~~~~~~~~~~~~~~~~~~~\n+                                    ~~~~~~^~~~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -123,10 +123,10 @@ test_ucn4 (void)\n      Hence to underline digits 4-7 we need to underling using bytes 4-11 in\n      the UTF-8 encoding.  */\n   __emit_string_literal_range (\"01234\\u2174\\u2175789\", /* { dg-warning \"range\" } */\n-\t\t\t       4, 11);\n+\t\t\t       5, 4, 11);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\\u2174\\u2175789\",\n-                                     ^~~~~~~~~~~~~~\n+                                     ~^~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -138,10 +138,10 @@ test_ucn8 (void)\n      has the same UTF-8 encoding, and so we again need to underline bytes\n      4-11 in the UTF-8 encoding in order to underline digits 4-7.  */\n   __emit_string_literal_range (\"01234\\U00002174\\U00002175789\", /* { dg-warning \"range\" } */\n-\t\t\t       4, 11);\n+\t\t\t       5, 4, 11);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (\"01234\\U00002174\\U00002175789\",\n-                                     ^~~~~~~~~~~~~~~~~~~~~~\n+                                     ~^~~~~~~~~~~~~~~~~~~~~\n    { dg-end-multiline-output \"\" } */\n }\n \n@@ -150,19 +150,19 @@ test_u8 (void)\n {\n   /* Digits 0-9.  */\n   __emit_string_literal_range (u8\"0123456789\", /* { dg-warning \"range\" } */\n-\t\t\t       4, 7);\n+\t\t\t       6, 4, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (u8\"0123456789\",\n-                                       ^~~~\n+                                       ~~^~\n    { dg-end-multiline-output \"\" } */\n }\n \n void\n test_u (void)\n {\n   /* Digits 0-9.  */\n-  __emit_string_literal_range (u\"0123456789\", /* { dg-error \"unable to read substring range: execution character set != source character set\" } */\n-\t\t\t       4, 7);\n+  __emit_string_literal_range (u\"0123456789\", /* { dg-error \"unable to read substring location: execution character set != source character set\" } */\n+\t\t\t       6, 4, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (u\"0123456789\",\n                                 ^~~~~~~~~~~~~\n@@ -173,8 +173,8 @@ void\n test_U (void)\n {\n   /* Digits 0-9.  */\n-  __emit_string_literal_range (U\"0123456789\", /* { dg-error \"unable to read substring range: execution character set != source character set\" } */\n-\t\t\t       4, 7);\n+  __emit_string_literal_range (U\"0123456789\", /* { dg-error \"unable to read substring location: execution character set != source character set\" } */\n+\t\t\t       6, 4, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (U\"0123456789\",\n                                 ^~~~~~~~~~~~~\n@@ -185,8 +185,8 @@ void\n test_L (void)\n {\n   /* Digits 0-9.  */\n-  __emit_string_literal_range (L\"0123456789\", /* { dg-error \"unable to read substring range: execution character set != source character set\" } */\n-\t\t\t       4, 7);\n+  __emit_string_literal_range (L\"0123456789\", /* { dg-error \"unable to read substring location: execution character set != source character set\" } */\n+\t\t\t       6, 4, 7);\n /* { dg-begin-multiline-output \"\" }\n    __emit_string_literal_range (L\"0123456789\",\n                                 ^~~~~~~~~~~~~\n@@ -199,10 +199,10 @@ test_macro (void)\n #define START \"01234\"  /* { dg-warning \"range\" } */\n   __emit_string_literal_range (START\n                                \"56789\",\n-                               3, 6);\n+                               4, 3, 6);\n /* { dg-begin-multiline-output \"\" }\n  #define START \"01234\"\n-                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+                   ~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    __emit_string_literal_range (START\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                                 \"56789\","}, {"sha": "25cb3f055d33f0332586744e73a612b9d5c9952a", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-2.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-2.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -3,7 +3,7 @@\n /* See the notes in diagnostic-test-string-literals-1.c.\n    This test case has caret-printing disabled.  */\n \n-extern void __emit_string_literal_range (const void *literal,\n+extern void __emit_string_literal_range (const void *literal, int caret_idx,\n \t\t\t\t\t int start_idx, int end_idx);\n /* Test of a stringified macro argument, by itself.  */\n \n@@ -12,8 +12,8 @@ test_stringified_token_1 (int x)\n {\n #define STRINGIFY(EXPR) #EXPR\n \n-  __emit_string_literal_range (STRINGIFY(x > 0), /* { dg-error \"unable to read substring range: macro expansion\" } */\n-                               0, 4);\n+  __emit_string_literal_range (STRINGIFY(x > 0), /* { dg-error \"unable to read substring location: macro expansion\" } */\n+                               0, 0, 4);\n \n #undef STRINGIFY\n }\n@@ -23,14 +23,14 @@ test_stringified_token_1 (int x)\n void\n test_stringized_token_2 (int x)\n {\n-#define EXAMPLE(EXPR, START_IDX, END_IDX)\t\t\t\\\n+#define EXAMPLE(EXPR, CARET_IDX, START_IDX, END_IDX)\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     __emit_string_literal_range (\"  before \" #EXPR \" after \\n\",\t\\\n-\t\t\t\t START_IDX, END_IDX);\t\t\\\n+\t\t\t\t CARET_IDX, START_IDX, END_IDX);\t\\\n   } while (0)\n \n-  EXAMPLE(x > 0, 1, 6);\n-  /* { dg-error \"unable to read substring range: cpp_interpret_string_1 failed\" \"\" { target *-*-* } 28 } */\n+  EXAMPLE(x > 0, 1, 1, 6);\n+  /* { dg-error \"unable to read substring location: cpp_interpret_string_1 failed\" \"\" { target *-*-* } 28 } */\n \n #undef EXAMPLE\n }\n@@ -43,8 +43,8 @@ test_stringified_token_3 (int x)\n #define XSTR(s) STR(s)\n #define STR(s) #s\n #define FOO 123456789\n-  __emit_string_literal_range (XSTR (FOO), /* { dg-error \"unable to read substring range: macro expansion\" } */\n-                               2, 3);\n+  __emit_string_literal_range (XSTR (FOO), /* { dg-error \"unable to read substring location: macro expansion\" } */\n+                               2, 2, 3);\n \n #undef XSTR\n #undef STR"}, {"sha": "dff999c3aa96e9675da5c5ae30f352b7e6aa4729", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic_plugin_test_string_literals.c", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e736c0efc463270764ea3012b9804c495c71bc/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic_plugin_test_string_literals.c?ref=65e736c0efc463270764ea3012b9804c495c71bc", "patch": "@@ -95,14 +95,12 @@ check_for_named_call (gimple *stmt,\n   return call;\n }\n \n-/* Emit a warning covering SRC_RANGE, with the caret at the start of\n-   SRC_RANGE.  */\n+/* Emit a warning at LOC.  */\n \n static void\n-emit_warning (source_range src_range)\n+emit_warning (location_t loc)\n {\n-  location_t loc\n-    = make_location (src_range.m_start, src_range.m_start, src_range.m_finish);\n+  source_range src_range = get_range_from_loc (line_table, loc);\n   warning_at (loc, 0, \"range %i:%i-%i:%i\",\n \t      LOCATION_LINE (src_range.m_start),\n \t      LOCATION_COLUMN (src_range.m_start),\n@@ -114,14 +112,14 @@ emit_warning (source_range src_range)\n    within string literals, for use by diagnostic-test-string-literals-*.c.\n    Emit a warning showing the range of a string literal, for each call to\n    a function named \"__emit_string_literal_range\".\n-   The initial argument should be a string literal; arguments 2 and 3\n-   should be integer constants, giving the range within the string\n+   The initial argument should be a string literal; arguments 2, 3, and 4\n+   should be integer constants, giving the caret and range within the string\n    to be printed.  */\n \n static void\n test_string_literals (gimple *stmt)\n {\n-  gcall *call = check_for_named_call (stmt, \"__emit_string_literal_range\", 3);\n+  gcall *call = check_for_named_call (stmt, \"__emit_string_literal_range\", 4);\n   if (!call)\n     return;\n \n@@ -141,32 +139,40 @@ test_string_literals (gimple *stmt)\n       return;\n     }\n \n-  tree t_start_idx = gimple_call_arg (call, 1);\n-  if (TREE_CODE (t_start_idx) != INTEGER_CST)\n+  tree t_caret_idx = gimple_call_arg (call, 1);\n+  if (TREE_CODE (t_caret_idx) != INTEGER_CST)\n     {\n       error_at (call->location, \"integer constant required for arg 2\");\n       return;\n     }\n+  int caret_idx = TREE_INT_CST_LOW (t_caret_idx);\n+\n+  tree t_start_idx = gimple_call_arg (call, 2);\n+  if (TREE_CODE (t_start_idx) != INTEGER_CST)\n+    {\n+      error_at (call->location, \"integer constant required for arg 3\");\n+      return;\n+    }\n   int start_idx = TREE_INT_CST_LOW (t_start_idx);\n \n-  tree t_end_idx = gimple_call_arg (call, 2);\n+  tree t_end_idx = gimple_call_arg (call, 3);\n   if (TREE_CODE (t_end_idx) != INTEGER_CST)\n     {\n-      error_at (call->location, \"integer constant required for arg 3\");\n+      error_at (call->location, \"integer constant required for arg 4\");\n       return;\n     }\n   int end_idx = TREE_INT_CST_LOW (t_end_idx);\n \n   /* A STRING_CST doesn't have a location, but the ADDR_EXPR does.  */\n   location_t strloc = EXPR_LOCATION (t_addr_string);\n-  source_range src_range;\n+  location_t loc;\n   substring_loc substr_loc (strloc, TREE_TYPE (t_string),\n-\t\t\t    start_idx, end_idx);\n-  const char *err = substr_loc.get_range (&src_range);\n+\t\t\t    caret_idx, start_idx, end_idx);\n+  const char *err = substr_loc.get_location (&loc);\n   if (err)\n-    error_at (strloc, \"unable to read substring range: %s\", err);\n+    error_at (strloc, \"unable to read substring location: %s\", err);\n   else\n-    emit_warning (src_range);\n+    emit_warning (loc);\n }\n \n /* Call test_string_literals on every statement within FUN.  */"}]}