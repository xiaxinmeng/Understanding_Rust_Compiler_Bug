{"sha": "092444af0474ed194abe53ea7cbd950dd7e2cdbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkyNDQ0YWYwNDc0ZWQxOTRhYmU1M2VhN2NiZDk1MGRkN2UyY2RiZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2014-12-10T09:00:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-12-10T09:00:50Z"}, "message": "re PR target/63594 (ICE: in ix86_vector_duplicate_value, at config/i386/i386.c:39831 with -mavx512f)\n\n\tPR target/63594\n\t* config/i386/sse.md (vec_dupv4sf): Move after\n\t<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name> pattern.\n\t(*vec_dupv4si, *vec_dupv2di): Likewise.\n\t(<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>): Merge into ...\n\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>): ... this\n\tpattern.\n\t(*vec_dup<mode> AVX2_VEC_DUP_MODE splitter): Disable for\n\tTARGET_AVX512VL (for QI/HI scalar modes only if TARGET_AVX512BW\n\tis set too).\n\t* config/i386/i386.c (enum ix86_builtins): Remove\n\tIX86_BUILTIN_PBROADCASTQ256_MEM_MASK,\n\tIX86_BUILTIN_PBROADCASTQ128_MEM_MASK and\n\tIX86_BUILTIN_PBROADCASTQ512_MEM.\n\t(bdesc_args): Use __builtin_ia32_pbroadcastq512_gpr_mask,\n\t__builtin_ia32_pbroadcastq256_gpr_mask and\n\t__builtin_ia32_pbroadcastq128_gpr_mask instead of *_mem_mask\n\tregardless of OPTION_MASK_ISA_64BIT.\n\t* config/i386/avx512fintrin.h (_mm512_set1_epi64,\n\t_mm512_mask_set1_epi64, _mm512_maskz_set1_epi64): Use *_gpr_mask\n\tbuiltins regardless of whether TARGET_64BIT is defined or not.\n\t* config/i386/avx512vlintrin.h (_mm256_mask_set1_epi64,\n\t_mm256_maskz_set1_epi64, _mm_mask_set1_epi64, _mm_maskz_set1_epi64):\n\tLikewise.\n\nFrom-SVN: r218565", "tree": {"sha": "3150dd9808bf96ca60db0afc0b8e10d9b8d861d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3150dd9808bf96ca60db0afc0b8e10d9b8d861d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/092444af0474ed194abe53ea7cbd950dd7e2cdbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092444af0474ed194abe53ea7cbd950dd7e2cdbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/092444af0474ed194abe53ea7cbd950dd7e2cdbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/092444af0474ed194abe53ea7cbd950dd7e2cdbd/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f2864cc4e11bd3a72efbf44b5f77eddd0bdeb37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2864cc4e11bd3a72efbf44b5f77eddd0bdeb37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2864cc4e11bd3a72efbf44b5f77eddd0bdeb37c"}], "stats": {"total": 222, "additions": 95, "deletions": 127}, "files": [{"sha": "63008297238b016f3e5f9bb24af2ba62a93a1087", "filename": "gcc/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=092444af0474ed194abe53ea7cbd950dd7e2cdbd", "patch": "@@ -1,5 +1,30 @@\n 2014-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/63594\n+\t* config/i386/sse.md (vec_dupv4sf): Move after\n+\t<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name> pattern.\n+\t(*vec_dupv4si, *vec_dupv2di): Likewise.\n+\t(<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>): Merge into ...\n+\t(<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>): ... this\n+\tpattern.\n+\t(*vec_dup<mode> AVX2_VEC_DUP_MODE splitter): Disable for\n+\tTARGET_AVX512VL (for QI/HI scalar modes only if TARGET_AVX512BW\n+\tis set too).\n+\t* config/i386/i386.c (enum ix86_builtins): Remove\n+\tIX86_BUILTIN_PBROADCASTQ256_MEM_MASK,\n+\tIX86_BUILTIN_PBROADCASTQ128_MEM_MASK and\n+\tIX86_BUILTIN_PBROADCASTQ512_MEM.\n+\t(bdesc_args): Use __builtin_ia32_pbroadcastq512_gpr_mask,\n+\t__builtin_ia32_pbroadcastq256_gpr_mask and\n+\t__builtin_ia32_pbroadcastq128_gpr_mask instead of *_mem_mask\n+\tregardless of OPTION_MASK_ISA_64BIT.\n+\t* config/i386/avx512fintrin.h (_mm512_set1_epi64,\n+\t_mm512_mask_set1_epi64, _mm512_maskz_set1_epi64): Use *_gpr_mask\n+\tbuiltins regardless of whether TARGET_64BIT is defined or not.\n+\t* config/i386/avx512vlintrin.h (_mm256_mask_set1_epi64,\n+\t_mm256_maskz_set1_epi64, _mm_mask_set1_epi64, _mm_maskz_set1_epi64):\n+\tLikewise.\n+\n \t* config/i386/sse.md (*mov<mode>_internal, *avx512f_gatherdi<mode>_2):\n \tUse <MODE_SIZE> instead of GET_MODE_SIZE (<MODE>mode).\n "}, {"sha": "b4842b26d8b063c485ff8433c3403a95eeeaa67d", "filename": "gcc/config/i386/avx512fintrin.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Favx512fintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512fintrin.h?ref=092444af0474ed194abe53ea7cbd950dd7e2cdbd", "patch": "@@ -3603,47 +3603,28 @@ extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_set1_epi64 (long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A,\n \t\t\t\t\t\t\t   (__v8di)\n \t\t\t\t\t\t\t   _mm512_undefined_si512 (),\n \t\t\t\t\t\t\t   (__mmask8)(-1));\n-#else\n-  return (__m512i) __builtin_ia32_pbroadcastq512_mem_mask (__A,\n-\t\t\t\t\t\t\t   (__v8di)\n-\t\t\t\t\t\t\t   _mm512_undefined_si512 (),\n-\t\t\t\t\t\t\t   (__mmask8)(-1));\n-#endif\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_mask_set1_epi64 (__m512i __O, __mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m512i) __builtin_ia32_pbroadcastq512_gpr_mask (__A, (__v8di) __O,\n \t\t\t\t\t\t\t   __M);\n-#else\n-  return (__m512i) __builtin_ia32_pbroadcastq512_mem_mask (__A, (__v8di) __O,\n-\t\t\t\t\t\t\t   __M);\n-#endif\n }\n \n extern __inline __m512i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_maskz_set1_epi64 (__mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m512i)\n \t __builtin_ia32_pbroadcastq512_gpr_mask (__A,\n \t\t\t\t\t\t (__v8di) _mm512_setzero_si512 (),\n \t\t\t\t\t\t __M);\n-#else\n-  return (__m512i)\n-\t __builtin_ia32_pbroadcastq512_mem_mask (__A,\n-\t\t\t\t\t\t (__v8di) _mm512_setzero_si512 (),\n-\t\t\t\t\t\t __M);\n-#endif\n }\n \n extern __inline __m512"}, {"sha": "56aaa3ec68dd156827da41b78cb11f0ad2d14a36", "filename": "gcc/config/i386/avx512vlintrin.h", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vlintrin.h?ref=092444af0474ed194abe53ea7cbd950dd7e2cdbd", "patch": "@@ -2642,30 +2642,18 @@ extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_mask_set1_epi64 (__m256i __O, __mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A, (__v4di) __O,\n \t\t\t\t\t\t\t   __M);\n-#else\n-  return (__m256i) __builtin_ia32_pbroadcastq256_mem_mask (__A, (__v4di) __O,\n-\t\t\t\t\t\t\t   __M);\n-#endif\n }\n \n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_maskz_set1_epi64 (__mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m256i) __builtin_ia32_pbroadcastq256_gpr_mask (__A,\n \t\t\t\t\t\t\t   (__v4di)\n \t\t\t\t\t\t\t   _mm256_setzero_si256 (),\n \t\t\t\t\t\t\t   __M);\n-#else\n-  return (__m256i) __builtin_ia32_pbroadcastq256_mem_mask (__A,\n-\t\t\t\t\t\t\t   (__v4di)\n-\t\t\t\t\t\t\t   _mm256_setzero_si256 (),\n-\t\t\t\t\t\t\t   __M);\n-#endif\n }\n \n extern __inline __m128i\n@@ -2691,30 +2679,18 @@ extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_mask_set1_epi64 (__m128i __O, __mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A, (__v2di) __O,\n \t\t\t\t\t\t\t   __M);\n-#else\n-  return (__m128i) __builtin_ia32_pbroadcastq128_mem_mask (__A, (__v2di) __O,\n-\t\t\t\t\t\t\t   __M);\n-#endif\n }\n \n extern __inline __m128i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maskz_set1_epi64 (__mmask8 __M, long long __A)\n {\n-#ifdef TARGET_64BIT\n   return (__m128i) __builtin_ia32_pbroadcastq128_gpr_mask (__A,\n \t\t\t\t\t\t\t   (__v2di)\n \t\t\t\t\t\t\t   _mm_setzero_si128 (),\n \t\t\t\t\t\t\t   __M);\n-#else\n-  return (__m128i) __builtin_ia32_pbroadcastq128_mem_mask (__A,\n-\t\t\t\t\t\t\t   (__v2di)\n-\t\t\t\t\t\t\t   _mm_setzero_si128 (),\n-\t\t\t\t\t\t\t   __M);\n-#endif\n }\n \n extern __inline __m256"}, {"sha": "9fe69cc61f7bca7bfc6b2692550a4bb495556c76", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=092444af0474ed194abe53ea7cbd950dd7e2cdbd", "patch": "@@ -28823,7 +28823,6 @@ enum ix86_builtins\n   IX86_BUILTIN_PBROADCASTMW512,\n   IX86_BUILTIN_PBROADCASTQ512,\n   IX86_BUILTIN_PBROADCASTQ512_GPR,\n-  IX86_BUILTIN_PBROADCASTQ512_MEM,\n   IX86_BUILTIN_PCMPEQD512_MASK,\n   IX86_BUILTIN_PCMPEQQ512_MASK,\n   IX86_BUILTIN_PCMPGTD512_MASK,\n@@ -29261,10 +29260,8 @@ enum ix86_builtins\n   IX86_BUILTIN_PBROADCASTD128_GPR_MASK,\n   IX86_BUILTIN_PBROADCASTQ256_MASK,\n   IX86_BUILTIN_PBROADCASTQ256_GPR_MASK,\n-  IX86_BUILTIN_PBROADCASTQ256_MEM_MASK,\n   IX86_BUILTIN_PBROADCASTQ128_MASK,\n   IX86_BUILTIN_PBROADCASTQ128_GPR_MASK,\n-  IX86_BUILTIN_PBROADCASTQ128_MEM_MASK,\n   IX86_BUILTIN_BROADCASTSS256,\n   IX86_BUILTIN_BROADCASTSS128,\n   IX86_BUILTIN_BROADCASTSD256,\n@@ -31803,8 +31800,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512CD, CODE_FOR_avx512cd_maskb_vec_dupv8di, \"__builtin_ia32_broadcastmb512\", IX86_BUILTIN_PBROADCASTMB512, UNKNOWN, (int) V8DI_FTYPE_QI },\n   { OPTION_MASK_ISA_AVX512CD, CODE_FOR_avx512cd_maskw_vec_dupv16si, \"__builtin_ia32_broadcastmw512\", IX86_BUILTIN_PBROADCASTMW512, UNKNOWN, (int) V16SI_FTYPE_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vec_dupv8di_mask, \"__builtin_ia32_pbroadcastq512\", IX86_BUILTIN_PBROADCASTQ512, UNKNOWN, (int) V8DI_FTYPE_V2DI_V8DI_QI },\n-  { OPTION_MASK_ISA_AVX512F | OPTION_MASK_ISA_64BIT, CODE_FOR_avx512f_vec_dup_gprv8di_mask, \"__builtin_ia32_pbroadcastq512_gpr_mask\", IX86_BUILTIN_PBROADCASTQ512_GPR, UNKNOWN, (int) V8DI_FTYPE_DI_V8DI_QI },\n-  { OPTION_MASK_ISA_AVX512F & ~OPTION_MASK_ISA_64BIT, CODE_FOR_avx512f_vec_dup_memv8di_mask, \"__builtin_ia32_pbroadcastq512_mem_mask\", IX86_BUILTIN_PBROADCASTQ512_MEM, UNKNOWN, (int) V8DI_FTYPE_DI_V8DI_QI },\n+  { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_vec_dup_gprv8di_mask, \"__builtin_ia32_pbroadcastq512_gpr_mask\", IX86_BUILTIN_PBROADCASTQ512_GPR, UNKNOWN, (int) V8DI_FTYPE_DI_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_eqv16si3_mask, \"__builtin_ia32_pcmpeqd512_mask\", IX86_BUILTIN_PCMPEQD512_MASK, UNKNOWN, (int) HI_FTYPE_V16SI_V16SI_HI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_eqv8di3_mask, \"__builtin_ia32_pcmpeqq512_mask\", IX86_BUILTIN_PCMPEQQ512_MASK, UNKNOWN, (int) QI_FTYPE_V8DI_V8DI_QI },\n   { OPTION_MASK_ISA_AVX512F, CODE_FOR_avx512f_gtv16si3_mask, \"__builtin_ia32_pcmpgtd512_mask\", IX86_BUILTIN_PCMPGTD512_MASK, UNKNOWN, (int) HI_FTYPE_V16SI_V16SI_HI },\n@@ -32078,11 +32074,9 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv4si_mask, \"__builtin_ia32_pbroadcastd128_mask\", IX86_BUILTIN_PBROADCASTD128_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dup_gprv4si_mask, \"__builtin_ia32_pbroadcastd128_gpr_mask\", IX86_BUILTIN_PBROADCASTD128_GPR_MASK, UNKNOWN, (int) V4SI_FTYPE_SI_V4SI_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv4di_mask, \"__builtin_ia32_pbroadcastq256_mask\", IX86_BUILTIN_PBROADCASTQ256_MASK, UNKNOWN, (int) V4DI_FTYPE_V2DI_V4DI_QI },\n-  { OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_64BIT, CODE_FOR_avx512vl_vec_dup_gprv4di_mask, \"__builtin_ia32_pbroadcastq256_gpr_mask\", IX86_BUILTIN_PBROADCASTQ256_GPR_MASK, UNKNOWN, (int) V4DI_FTYPE_DI_V4DI_QI },\n-  { OPTION_MASK_ISA_AVX512VL & ~OPTION_MASK_ISA_64BIT, CODE_FOR_avx512vl_vec_dup_memv4di_mask, \"__builtin_ia32_pbroadcastq256_mem_mask\", IX86_BUILTIN_PBROADCASTQ256_MEM_MASK, UNKNOWN, (int) V4DI_FTYPE_DI_V4DI_QI },\n+  { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dup_gprv4di_mask, \"__builtin_ia32_pbroadcastq256_gpr_mask\", IX86_BUILTIN_PBROADCASTQ256_GPR_MASK, UNKNOWN, (int) V4DI_FTYPE_DI_V4DI_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv2di_mask, \"__builtin_ia32_pbroadcastq128_mask\", IX86_BUILTIN_PBROADCASTQ128_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_QI },\n-  { OPTION_MASK_ISA_AVX512VL | OPTION_MASK_ISA_64BIT, CODE_FOR_avx512vl_vec_dup_gprv2di_mask, \"__builtin_ia32_pbroadcastq128_gpr_mask\", IX86_BUILTIN_PBROADCASTQ128_GPR_MASK, UNKNOWN, (int) V2DI_FTYPE_DI_V2DI_QI },\n-  { OPTION_MASK_ISA_AVX512VL & ~OPTION_MASK_ISA_64BIT, CODE_FOR_avx512vl_vec_dup_memv2di_mask, \"__builtin_ia32_pbroadcastq128_mem_mask\", IX86_BUILTIN_PBROADCASTQ128_MEM_MASK, UNKNOWN, (int) V2DI_FTYPE_DI_V2DI_QI },\n+  { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dup_gprv2di_mask, \"__builtin_ia32_pbroadcastq128_gpr_mask\", IX86_BUILTIN_PBROADCASTQ128_GPR_MASK, UNKNOWN, (int) V2DI_FTYPE_DI_V2DI_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv8sf_mask, \"__builtin_ia32_broadcastss256_mask\", IX86_BUILTIN_BROADCASTSS256, UNKNOWN, (int) V8SF_FTYPE_V4SF_V8SF_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv4sf_mask, \"__builtin_ia32_broadcastss128_mask\", IX86_BUILTIN_BROADCASTSS128, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_QI },\n   { OPTION_MASK_ISA_AVX512VL, CODE_FOR_avx512vl_vec_dupv4df_mask, \"__builtin_ia32_broadcastsd256_mask\", IX86_BUILTIN_BROADCASTSD256, UNKNOWN, (int) V4DF_FTYPE_V2DF_V4DF_QI },"}, {"sha": "8548e16e9165210215c499ae838fc692caccd1e8", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 67, "deletions": 75, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/092444af0474ed194abe53ea7cbd950dd7e2cdbd/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=092444af0474ed194abe53ea7cbd950dd7e2cdbd", "patch": "@@ -6319,22 +6319,6 @@\n     (set_attr \"prefix\" \"evex\")\n     (set_attr \"mode\" \"<MODE>\")])\n \n-(define_insn \"vec_dupv4sf\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n-\t(vec_duplicate:V4SF\n-\t  (match_operand:SF 1 \"nonimmediate_operand\" \"x,m,0\")))]\n-  \"TARGET_SSE\"\n-  \"@\n-   vshufps\\t{$0, %1, %1, %0|%0, %1, %1, 0}\n-   vbroadcastss\\t{%1, %0|%0, %1}\n-   shufps\\t{$0, %0, %0|%0, %0, 0}\"\n-  [(set_attr \"isa\" \"avx,avx,noavx\")\n-   (set_attr \"type\" \"sseshuf1,ssemov,sseshuf1\")\n-   (set_attr \"length_immediate\" \"1,0,1\")\n-   (set_attr \"prefix_extra\" \"0,1,*\")\n-   (set_attr \"prefix\" \"vex,vex,orig\")\n-   (set_attr \"mode\" \"V4SF\")])\n-\n ;; Although insertps takes register source, we prefer\n ;; unpcklps with register source since it is shorter.\n (define_insn \"*vec_concatv2sf_sse4_1\"\n@@ -12821,37 +12805,6 @@\n   operands[1] = adjust_address (operands[1], <ssescalarmode>mode, offs);\n })\n \n-(define_insn \"*vec_dupv4si\"\n-  [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x,x\")\n-\t(vec_duplicate:V4SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \" x,m,0\")))]\n-  \"TARGET_SSE\"\n-  \"@\n-   %vpshufd\\t{$0, %1, %0|%0, %1, 0}\n-   vbroadcastss\\t{%1, %0|%0, %1}\n-   shufps\\t{$0, %0, %0|%0, %0, 0}\"\n-  [(set_attr \"isa\" \"sse2,avx,noavx\")\n-   (set_attr \"type\" \"sselog1,ssemov,sselog1\")\n-   (set_attr \"length_immediate\" \"1,0,1\")\n-   (set_attr \"prefix_extra\" \"0,1,*\")\n-   (set_attr \"prefix\" \"maybe_vex,vex,orig\")\n-   (set_attr \"mode\" \"TI,V4SF,V4SF\")])\n-\n-(define_insn \"*vec_dupv2di\"\n-  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,x,x\")\n-\t(vec_duplicate:V2DI\n-\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,x,m,0\")))]\n-  \"TARGET_SSE\"\n-  \"@\n-   punpcklqdq\\t%0, %0\n-   vpunpcklqdq\\t{%d1, %0|%0, %d1}\n-   %vmovddup\\t{%1, %0|%0, %1}\n-   movlhps\\t%0, %0\"\n-  [(set_attr \"isa\" \"sse2_noavx,avx,sse3,noavx\")\n-   (set_attr \"type\" \"sselog1,sselog1,sselog1,ssemov\")\n-   (set_attr \"prefix\" \"orig,vex,maybe_vex,orig\")\n-   (set_attr \"mode\" \"TI,TI,DF,V4SF\")])\n-\n (define_insn \"*vec_concatv2si_sse4_1\"\n   [(set (match_operand:V2SI 0 \"register_operand\"     \"=Yr,*x,x, Yr,*x,x, x, *y,*y\")\n \t(vec_concat:V2SI\n@@ -16665,46 +16618,78 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_duplicate:VI12_AVX512VL\n-\t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"r\")))]\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm,r\")))]\n   \"TARGET_AVX512BW\"\n-  \"vpbroadcast<bcstscalarsuff>\\t{%k1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n+  \"@\n+   vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\n+   vpbroadcast<bcstscalarsuff>\\t{%k1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<mask_codefor><avx512>_vec_dup_gpr<mode><mask_name>\"\n-  [(set (match_operand:VI48_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI48_AVX512VL\n-\t  (match_operand:<ssescalarmode> 1 \"register_operand\" \"r\")))]\n-  \"TARGET_AVX512F && (<ssescalarmode>mode != DImode || TARGET_64BIT)\"\n-{\n-  return \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\";\n-}\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n-\n-(define_insn \"<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>\"\n-  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V48_AVX512VL 0 \"register_operand\" \"=v,v\")\n \t(vec_duplicate:V48_AVX512VL\n-\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm\")))]\n+\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm,r\")))]\n   \"TARGET_AVX512F\"\n   \"v<sseintprefix>broadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+   (set_attr \"mode\" \"<sseinsnmode>\")\n+   (set (attr \"enabled\")\n+     (if_then_else (eq_attr \"alternative\" \"1\")\n+\t(symbol_ref \"GET_MODE_CLASS (<ssescalarmode>mode) == MODE_INT\n+\t\t     && (<ssescalarmode>mode != DImode || TARGET_64BIT)\")\n+\t(const_int 1)))])\n \n-(define_insn \"<mask_codefor><avx512>_vec_dup_mem<mode><mask_name>\"\n-  [(set (match_operand:VI12_AVX512VL 0 \"register_operand\" \"=v\")\n-\t(vec_duplicate:VI12_AVX512VL\n-\t  (match_operand:<ssescalarmode> 1 \"nonimmediate_operand\" \"vm\")))]\n-  \"TARGET_AVX512BW\"\n-  \"vpbroadcast<bcstscalarsuff>\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %1}\"\n-  [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\" \"<sseinsnmode>\")])\n+(define_insn \"vec_dupv4sf\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x,x\")\n+\t(vec_duplicate:V4SF\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"x,m,0\")))]\n+  \"TARGET_SSE\"\n+  \"@\n+   vshufps\\t{$0, %1, %1, %0|%0, %1, %1, 0}\n+   vbroadcastss\\t{%1, %0|%0, %1}\n+   shufps\\t{$0, %0, %0|%0, %0, 0}\"\n+  [(set_attr \"isa\" \"avx,avx,noavx\")\n+   (set_attr \"type\" \"sseshuf1,ssemov,sseshuf1\")\n+   (set_attr \"length_immediate\" \"1,0,1\")\n+   (set_attr \"prefix_extra\" \"0,1,*\")\n+   (set_attr \"prefix\" \"vex,vex,orig\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n+(define_insn \"*vec_dupv4si\"\n+  [(set (match_operand:V4SI 0 \"register_operand\"     \"=x,x,x\")\n+\t(vec_duplicate:V4SI\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \" x,m,0\")))]\n+  \"TARGET_SSE\"\n+  \"@\n+   %vpshufd\\t{$0, %1, %0|%0, %1, 0}\n+   vbroadcastss\\t{%1, %0|%0, %1}\n+   shufps\\t{$0, %0, %0|%0, %0, 0}\"\n+  [(set_attr \"isa\" \"sse2,avx,noavx\")\n+   (set_attr \"type\" \"sselog1,ssemov,sselog1\")\n+   (set_attr \"length_immediate\" \"1,0,1\")\n+   (set_attr \"prefix_extra\" \"0,1,*\")\n+   (set_attr \"prefix\" \"maybe_vex,vex,orig\")\n+   (set_attr \"mode\" \"TI,V4SF,V4SF\")])\n+\n+(define_insn \"*vec_dupv2di\"\n+  [(set (match_operand:V2DI 0 \"register_operand\"     \"=x,x,x,x\")\n+\t(vec_duplicate:V2DI\n+\t  (match_operand:DI 1 \"nonimmediate_operand\" \" 0,x,m,0\")))]\n+  \"TARGET_SSE\"\n+  \"@\n+   punpcklqdq\\t%0, %0\n+   vpunpcklqdq\\t{%d1, %0|%0, %d1}\n+   %vmovddup\\t{%1, %0|%0, %1}\n+   movlhps\\t%0, %0\"\n+  [(set_attr \"isa\" \"sse2_noavx,avx,sse3,noavx\")\n+   (set_attr \"type\" \"sselog1,sselog1,sselog1,ssemov\")\n+   (set_attr \"prefix\" \"orig,vex,maybe_vex,orig\")\n+   (set_attr \"mode\" \"TI,TI,DF,V4SF\")])\n \n (define_insn \"avx2_vbroadcasti128_<mode>\"\n   [(set (match_operand:VI_256 0 \"register_operand\" \"=x\")\n@@ -16759,7 +16744,14 @@\n   [(set (match_operand:AVX2_VEC_DUP_MODE 0 \"register_operand\")\n \t(vec_duplicate:AVX2_VEC_DUP_MODE\n \t  (match_operand:<ssescalarmode> 1 \"register_operand\")))]\n-  \"TARGET_AVX2 && reload_completed && GENERAL_REG_P (operands[1])\"\n+  \"TARGET_AVX2\n+   /* Disable this splitter if avx512vl_vec_dup_gprv*[qhs]i insn is\n+      available, because then we can broadcast from GPRs directly.\n+      For V*[QH]I modes it requires both -mavx512vl and -mavx512bw,\n+      for V*SI mode it requires just -mavx512vl.  */\n+   && !(TARGET_AVX512VL\n+\t&& (TARGET_AVX512BW || <ssescalarmode>mode == SImode))\n+   && reload_completed && GENERAL_REG_P (operands[1])\"\n   [(const_int 0)]\n {\n   emit_insn (gen_vec_setv4si_0 (gen_lowpart (V4SImode, operands[0]),"}]}