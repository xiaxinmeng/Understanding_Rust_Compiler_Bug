{"sha": "b70cef5d743a294b00b863f8caf80342f33f8100", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjcwY2VmNWQ3NDNhMjk0YjAwYjg2M2Y4Y2FmODAzNDJmMzNmODEwMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2008-11-15T09:53:02Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2008-11-15T09:53:02Z"}, "message": "re PR c++/37561 (Revision 140405 caused g++.old-deja/g++.mike/warn1.C)\n\n\tPR c++/37561\n\t* c-typeck.c (build_unary_op): Don't call get_unwidened.  Use\n\targtype instead of result_type.\n\n\t* typeck.c (cp_build_unary_op): Don't call get_unwidened.  Use\n\targtype instead of result_type.\n\n\t* gcc.dg/pr37561.c: New test.\n\t* g++.dg/other/increment1.C: New test.\n\nFrom-SVN: r141881", "tree": {"sha": "1e5e94a256aac8b6bf173d2f80f06cb0c584e226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1e5e94a256aac8b6bf173d2f80f06cb0c584e226"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b70cef5d743a294b00b863f8caf80342f33f8100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70cef5d743a294b00b863f8caf80342f33f8100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70cef5d743a294b00b863f8caf80342f33f8100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70cef5d743a294b00b863f8caf80342f33f8100/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "91ddf5a1e710ef71f8f4e0f4d84dc852d15eea89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91ddf5a1e710ef71f8f4e0f4d84dc852d15eea89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91ddf5a1e710ef71f8f4e0f4d84dc852d15eea89"}], "stats": {"total": 80, "additions": 66, "deletions": 14}, "files": [{"sha": "4c8b9a1dae03319ee67844fc05c03d562d16b8b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -1,3 +1,9 @@\n+2008-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37561\n+\t* c-typeck.c (build_unary_op): Don't call get_unwidened.  Use\n+\targtype instead of result_type.\n+\n 2008-11-14  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* ira-int.h (struct ira_loop_tree_node): Improve comments for"}, {"sha": "c751b4f0e917d67b025bc0fefef4b67b91a7cc7b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -3080,9 +3080,7 @@ build_unary_op (location_t location,\n \n       {\n \ttree inc;\n-\ttree result_type = TREE_TYPE (arg);\n \n-\targ = get_unwidened (arg, 0);\n \targtype = TREE_TYPE (arg);\n \n \t/* Compute the increment.  */\n@@ -3091,7 +3089,7 @@ build_unary_op (location_t location,\n \t  {\n \t    /* If pointer target is an undefined struct,\n \t       we just cannot know how to do the arithmetic.  */\n-\t    if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (result_type)))\n+\t    if (!COMPLETE_OR_VOID_TYPE_P (TREE_TYPE (argtype)))\n \t      {\n \t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n \t\t  error_at (location,\n@@ -3100,8 +3098,8 @@ build_unary_op (location_t location,\n \t\t  error_at (location,\n \t\t\t    \"decrement of pointer to unknown structure\");\n \t      }\n-\t    else if (TREE_CODE (TREE_TYPE (result_type)) == FUNCTION_TYPE\n-\t\t     || TREE_CODE (TREE_TYPE (result_type)) == VOID_TYPE)\n+\t    else if (TREE_CODE (TREE_TYPE (argtype)) == FUNCTION_TYPE\n+\t\t     || TREE_CODE (TREE_TYPE (argtype)) == VOID_TYPE)\n \t      {\n \t\tif (code == PREINCREMENT_EXPR || code == POSTINCREMENT_EXPR)\n \t\t  pedwarn (location, pedantic ? OPT_pedantic : OPT_Wpointer_arith, \n@@ -3111,10 +3109,10 @@ build_unary_op (location_t location,\n \t\t\t   \"wrong type argument to decrement\");\n \t      }\n \n-\t    inc = c_size_in_bytes (TREE_TYPE (result_type));\n+\t    inc = c_size_in_bytes (TREE_TYPE (argtype));\n \t    inc = fold_convert (sizetype, inc);\n \t  }\n-\telse if (FRACT_MODE_P (TYPE_MODE (result_type)))\n+\telse if (FRACT_MODE_P (TYPE_MODE (argtype)))\n \t  {\n \t    /* For signed fract types, we invert ++ to -- or\n \t       -- to ++, and change inc from 1 to -1, because\n@@ -3161,7 +3159,6 @@ build_unary_op (location_t location,\n \telse\n \t  val = build2 (code, TREE_TYPE (arg), arg, inc);\n \tTREE_SIDE_EFFECTS (val) = 1;\n-\tval = convert (result_type, val);\n \tif (TREE_CODE (val) != code)\n \t  TREE_NO_WARNING (val) = 1;\n \tret = val;"}, {"sha": "e6fbdfbd2913135a603f8cb76aea38d09660c2b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -1,3 +1,9 @@\n+2008-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37561\n+\t* typeck.c (cp_build_unary_op): Don't call get_unwidened.  Use\n+\targtype instead of result_type.\n+\n 2008-11-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/38030"}, {"sha": "7595b58da72eea6976115832fe0ae1c18f50032e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -4348,12 +4348,8 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \n       {\n \ttree inc;\n-\ttree declared_type;\n-\ttree result_type = TREE_TYPE (arg);\n+\ttree declared_type = unlowered_expr_type (arg);\n \n-\tdeclared_type = unlowered_expr_type (arg);\n-\n-\targ = get_unwidened (arg, 0);\n \targtype = TREE_TYPE (arg);\n \n \t/* ARM $5.2.5 last annotation says this should be forbidden.  */\n@@ -4427,7 +4423,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t  val = build2 (code, TREE_TYPE (arg), arg, inc);\n \n \tTREE_SIDE_EFFECTS (val) = 1;\n-\treturn cp_convert (result_type, val);\n+\treturn val;\n       }\n \n     case ADDR_EXPR:"}, {"sha": "b64bf6356f78a29913fa684dde9813927216ae28", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -1,3 +1,9 @@\n+2008-11-15  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/37561\n+\t* gcc.dg/pr37561.c: New test.\n+\t* g++.dg/other/increment1.C: New test.\n+\n 2008-11-14  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/37988"}, {"sha": "c36e5731f3b67a6278ed5d5dc0233976ae045778", "filename": "gcc/testsuite/g++.dg/other/increment1.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincrement1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincrement1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fincrement1.C?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/37561\n+// { dg-do compile }\n+\n+__PTRDIFF_TYPE__ p;\n+char q;\n+\n+void\n+foo ()\n+{\n+  ((char *) p)++;\t// { dg-error \"lvalue\" }\n+  ((char *) q)++;\t// { dg-error \"lvalue\" }\n+  ((char *) p)--;\t// { dg-error \"lvalue\" }\n+  ((char *) q)--;\t// { dg-error \"lvalue\" }\n+  ++(char *) p;\t\t// { dg-error \"lvalue\" }\n+  ++(char *) q;\t\t// { dg-error \"lvalue\" }\n+  --(char *) p;\t\t// { dg-error \"lvalue\" }\n+  --(char *) q;\t\t// { dg-error \"lvalue\" }\n+}"}, {"sha": "82eca96400810e8e83ce875b5973a09f48e4dd53", "filename": "gcc/testsuite/gcc.dg/pr37561.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b70cef5d743a294b00b863f8caf80342f33f8100/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr37561.c?ref=b70cef5d743a294b00b863f8caf80342f33f8100", "patch": "@@ -0,0 +1,23 @@\n+/* PR c++/37561 */\n+/* { dg-do compile } */\n+\n+__PTRDIFF_TYPE__ p;\n+char q;\n+\n+void\n+foo ()\n+{\n+  ((char *) p)++;\t/* { dg-error \"lvalue\" } */\n+  ((char *) q)++;\t/* { dg-error \"lvalue\" } */\n+  ((char *) p)--;\t/* { dg-error \"lvalue\" } */\n+  ((char *) q)--;\t/* { dg-error \"lvalue\" } */\n+  ++(char *) p;\t\t/* { dg-error \"lvalue\" } */\n+  ++(char *) q;\t\t/* { dg-error \"lvalue\" } */\n+  --(char *) p;\t\t/* { dg-error \"lvalue\" } */\n+  --(char *) q;\t\t/* { dg-error \"lvalue\" } */\n+}\n+\n+/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 11 } */\n+/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 13 } */\n+/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 15 } */\n+/* { dg-warning \"cast to pointer from integer of different size\" \"\" { target *-*-* } 17 } */"}]}