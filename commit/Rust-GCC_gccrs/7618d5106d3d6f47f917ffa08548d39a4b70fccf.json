{"sha": "7618d5106d3d6f47f917ffa08548d39a4b70fccf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYxOGQ1MTA2ZDNkNmY0N2Y5MTdmZmEwODU0OGQzOWE0YjcwZmNjZg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@act-europe.fr", "date": "2003-12-08T13:44:23Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2003-12-08T13:44:23Z"}, "message": "* nmake.adb: Removed.\n\nFrom-SVN: r74421", "tree": {"sha": "9effdddc5ab458258af20d634c395d1ad304d549", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9effdddc5ab458258af20d634c395d1ad304d549"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7618d5106d3d6f47f917ffa08548d39a4b70fccf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7618d5106d3d6f47f917ffa08548d39a4b70fccf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7618d5106d3d6f47f917ffa08548d39a4b70fccf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7618d5106d3d6f47f917ffa08548d39a4b70fccf/comments", "author": null, "committer": null, "parents": [{"sha": "cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f"}], "stats": {"total": 2864, "additions": 2, "deletions": 2862}, "files": [{"sha": "b1fba1a3189fdb9f46ae3149195247270b85b78d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7618d5106d3d6f47f917ffa08548d39a4b70fccf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7618d5106d3d6f47f917ffa08548d39a4b70fccf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7618d5106d3d6f47f917ffa08548d39a4b70fccf", "patch": "@@ -166,8 +166,8 @@\n \n 2003-12-08  Arnaud Charlet  <charlet@act-europe.fr>\n \n-\t* sinfo.h, einfo.h, nmake.ads, treeprs.ads: Removed, since they\n-\tare automatically generated by Make-lang.in and cause nothing but\n+\t* sinfo.h, einfo.h, nmake.ads, nmake.adb, treeprs.ads: Removed, since\n+\tthey are automatically generated by Make-lang.in and cause nothing but\n \tmaintenance troubles.\n \n 2003-12-05  Thomas Quinot  <quinot@act-europe.fr>"}, {"sha": "a873763de688346bfd474d09cf22476228efb671", "filename": "gcc/ada/nmake.adb", "status": "removed", "additions": 0, "deletions": 2860, "changes": 2860, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/gcc%2Fada%2Fnmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f/gcc%2Fada%2Fnmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnmake.adb?ref=cfeb18dbeca3b5d651152c183c68d4bdf9ae9b9f", "patch": "@@ -1,2860 +0,0 @@\n-------------------------------------------------------------------------------\n---                                                                          --\n---                         GNAT COMPILER COMPONENTS                         --\n---                                                                          --\n---                                N M A K E                                 --\n---                                                                          --\n---                                 B o d y                                  --\n---                                                                          --\n---          Copyright (C) 1992-2003 Free Software Foundation, Inc.          --\n---                                                                          --\n--- GNAT is free software;  you can  redistribute it  and/or modify it under --\n--- terms of the  GNU General Public License as published  by the Free Soft- --\n--- ware  Foundation;  either version 2,  or (at your option) any later ver- --\n--- sion.  GNAT is distributed in the hope that it will be useful, but WITH- --\n--- OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY --\n--- or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License --\n--- for  more details.  You should have  received  a copy of the GNU General --\n--- Public License  distributed with GNAT;  see file COPYING.  If not, write --\n--- to  the Free Software Foundation,  59 Temple Place - Suite 330,  Boston, --\n--- MA 02111-1307, USA.                                                      --\n---                                                                          --\n--- GNAT was originally developed  by the GNAT team at  New York University. --\n--- Extensive contributions were provided by Ada Core Technologies Inc.      --\n---                                                                          --\n-------------------------------------------------------------------------------\n-\n-pragma Style_Checks (All_Checks);\n---  Turn off subprogram order checking, since the routines here are\n---  generated automatically in order.\n-\n-\n-with Atree;  use Atree;\n-with Sinfo;  use Sinfo;\n-with Snames; use Snames;\n-with Stand;  use Stand;\n-\n-package body Nmake is\n-\n-   function Make_Unused_At_Start (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Unused_At_Start, Sloc);\n-   begin\n-      return N;\n-   end Make_Unused_At_Start;\n-\n-   function Make_Unused_At_End (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Unused_At_End, Sloc);\n-   begin\n-      return N;\n-   end Make_Unused_At_End;\n-\n-   function Make_Identifier (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Identifier, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      return N;\n-   end Make_Identifier;\n-\n-   function Make_Integer_Literal (Sloc : Source_Ptr;\n-      Intval                       : Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Integer_Literal, Sloc);\n-   begin\n-      Set_Intval (N, Intval);\n-      return N;\n-   end Make_Integer_Literal;\n-\n-   function Make_Real_Literal (Sloc : Source_Ptr;\n-      Realval                      : Ureal)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Real_Literal, Sloc);\n-   begin\n-      Set_Realval (N, Realval);\n-      return N;\n-   end Make_Real_Literal;\n-\n-   function Make_Character_Literal (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Char_Literal_Value           : Char_Code)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Character_Literal, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      Set_Char_Literal_Value (N, Char_Literal_Value);\n-      return N;\n-   end Make_Character_Literal;\n-\n-   function Make_String_Literal (Sloc : Source_Ptr;\n-      Strval                       : String_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_String_Literal, Sloc);\n-   begin\n-      Set_Strval (N, Strval);\n-      return N;\n-   end Make_String_Literal;\n-\n-   function Make_Pragma (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Pragma_Argument_Associations : List_Id := No_List;\n-      Debug_Statement              : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Pragma, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      Set_Pragma_Argument_Associations\n-        (N, Pragma_Argument_Associations);\n-      Set_Debug_Statement (N, Debug_Statement);\n-      return N;\n-   end Make_Pragma;\n-\n-   function Make_Pragma_Argument_Association (Sloc : Source_Ptr;\n-      Chars                        : Name_Id := No_Name;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Pragma_Argument_Association, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Pragma_Argument_Association;\n-\n-   function Make_Defining_Identifier (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Entity (N_Defining_Identifier, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      return N;\n-   end Make_Defining_Identifier;\n-\n-   function Make_Full_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Type_Definition              : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Full_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Type_Definition (N, Type_Definition);\n-      return N;\n-   end Make_Full_Type_Declaration;\n-\n-   function Make_Subtype_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subtype_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      return N;\n-   end Make_Subtype_Declaration;\n-\n-   function Make_Subtype_Indication (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Constraint                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subtype_Indication, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Constraint (N, Constraint);\n-      return N;\n-   end Make_Subtype_Indication;\n-\n-   function Make_Object_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Aliased_Present              : Boolean := False;\n-      Constant_Present             : Boolean := False;\n-      Object_Definition            : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Object_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Aliased_Present (N, Aliased_Present);\n-      Set_Constant_Present (N, Constant_Present);\n-      Set_Object_Definition (N, Object_Definition);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Object_Declaration;\n-\n-   function Make_Number_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Number_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Number_Declaration;\n-\n-   function Make_Derived_Type_Definition (Sloc : Source_Ptr;\n-      Abstract_Present             : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Record_Extension_Part        : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Derived_Type_Definition, Sloc);\n-   begin\n-      Set_Abstract_Present (N, Abstract_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      Set_Record_Extension_Part (N, Record_Extension_Part);\n-      return N;\n-   end Make_Derived_Type_Definition;\n-\n-   function Make_Range_Constraint (Sloc : Source_Ptr;\n-      Range_Expression             : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Range_Constraint, Sloc);\n-   begin\n-      Set_Range_Expression (N, Range_Expression);\n-      return N;\n-   end Make_Range_Constraint;\n-\n-   function Make_Range (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id;\n-      Includes_Infinities          : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Range, Sloc);\n-   begin\n-      Set_Low_Bound (N, Low_Bound);\n-      Set_High_Bound (N, High_Bound);\n-      Set_Includes_Infinities (N, Includes_Infinities);\n-      return N;\n-   end Make_Range;\n-\n-   function Make_Enumeration_Type_Definition (Sloc : Source_Ptr;\n-      Literals                     : List_Id;\n-      End_Label                    : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Enumeration_Type_Definition, Sloc);\n-   begin\n-      Set_Literals (N, Literals);\n-      Set_End_Label (N, End_Label);\n-      return N;\n-   end Make_Enumeration_Type_Definition;\n-\n-   function Make_Defining_Character_Literal (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Entity (N_Defining_Character_Literal, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      return N;\n-   end Make_Defining_Character_Literal;\n-\n-   function Make_Signed_Integer_Type_Definition (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Signed_Integer_Type_Definition, Sloc);\n-   begin\n-      Set_Low_Bound (N, Low_Bound);\n-      Set_High_Bound (N, High_Bound);\n-      return N;\n-   end Make_Signed_Integer_Type_Definition;\n-\n-   function Make_Modular_Type_Definition (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Modular_Type_Definition, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Modular_Type_Definition;\n-\n-   function Make_Floating_Point_Definition (Sloc : Source_Ptr;\n-      Digits_Expression            : Node_Id;\n-      Real_Range_Specification     : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Floating_Point_Definition, Sloc);\n-   begin\n-      Set_Digits_Expression (N, Digits_Expression);\n-      Set_Real_Range_Specification (N, Real_Range_Specification);\n-      return N;\n-   end Make_Floating_Point_Definition;\n-\n-   function Make_Real_Range_Specification (Sloc : Source_Ptr;\n-      Low_Bound                    : Node_Id;\n-      High_Bound                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Real_Range_Specification, Sloc);\n-   begin\n-      Set_Low_Bound (N, Low_Bound);\n-      Set_High_Bound (N, High_Bound);\n-      return N;\n-   end Make_Real_Range_Specification;\n-\n-   function Make_Ordinary_Fixed_Point_Definition (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Real_Range_Specification     : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Ordinary_Fixed_Point_Definition, Sloc);\n-   begin\n-      Set_Delta_Expression (N, Delta_Expression);\n-      Set_Real_Range_Specification (N, Real_Range_Specification);\n-      return N;\n-   end Make_Ordinary_Fixed_Point_Definition;\n-\n-   function Make_Decimal_Fixed_Point_Definition (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Digits_Expression            : Node_Id;\n-      Real_Range_Specification     : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Decimal_Fixed_Point_Definition, Sloc);\n-   begin\n-      Set_Delta_Expression (N, Delta_Expression);\n-      Set_Digits_Expression (N, Digits_Expression);\n-      Set_Real_Range_Specification (N, Real_Range_Specification);\n-      return N;\n-   end Make_Decimal_Fixed_Point_Definition;\n-\n-   function Make_Digits_Constraint (Sloc : Source_Ptr;\n-      Digits_Expression            : Node_Id;\n-      Range_Constraint             : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Digits_Constraint, Sloc);\n-   begin\n-      Set_Digits_Expression (N, Digits_Expression);\n-      Set_Range_Constraint (N, Range_Constraint);\n-      return N;\n-   end Make_Digits_Constraint;\n-\n-   function Make_Unconstrained_Array_Definition (Sloc : Source_Ptr;\n-      Subtype_Marks                : List_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Unconstrained_Array_Definition, Sloc);\n-   begin\n-      Set_Subtype_Marks (N, Subtype_Marks);\n-      Set_Aliased_Present (N, Aliased_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      return N;\n-   end Make_Unconstrained_Array_Definition;\n-\n-   function Make_Constrained_Array_Definition (Sloc : Source_Ptr;\n-      Discrete_Subtype_Definitions : List_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Constrained_Array_Definition, Sloc);\n-   begin\n-      Set_Discrete_Subtype_Definitions\n-        (N, Discrete_Subtype_Definitions);\n-      Set_Aliased_Present (N, Aliased_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      return N;\n-   end Make_Constrained_Array_Definition;\n-\n-   function Make_Discriminant_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Type            : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Discriminant_Specification, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Type (N, Discriminant_Type);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Discriminant_Specification;\n-\n-   function Make_Index_Or_Discriminant_Constraint (Sloc : Source_Ptr;\n-      Constraints                  : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Index_Or_Discriminant_Constraint, Sloc);\n-   begin\n-      Set_Constraints (N, Constraints);\n-      return N;\n-   end Make_Index_Or_Discriminant_Constraint;\n-\n-   function Make_Discriminant_Association (Sloc : Source_Ptr;\n-      Selector_Names               : List_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Discriminant_Association, Sloc);\n-   begin\n-      Set_Selector_Names (N, Selector_Names);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Discriminant_Association;\n-\n-   function Make_Record_Definition (Sloc : Source_Ptr;\n-      End_Label                    : Node_Id := Empty;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False;\n-      Component_List               : Node_Id;\n-      Null_Present                 : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Record_Definition, Sloc);\n-   begin\n-      Set_End_Label (N, End_Label);\n-      Set_Abstract_Present (N, Abstract_Present);\n-      Set_Tagged_Present (N, Tagged_Present);\n-      Set_Limited_Present (N, Limited_Present);\n-      Set_Component_List (N, Component_List);\n-      Set_Null_Present (N, Null_Present);\n-      return N;\n-   end Make_Record_Definition;\n-\n-   function Make_Component_List (Sloc : Source_Ptr;\n-      Component_Items              : List_Id;\n-      Variant_Part                 : Node_Id := Empty;\n-      Null_Present                 : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Component_List, Sloc);\n-   begin\n-      Set_Component_Items (N, Component_Items);\n-      Set_Variant_Part (N, Variant_Part);\n-      Set_Null_Present (N, Null_Present);\n-      return N;\n-   end Make_Component_List;\n-\n-   function Make_Component_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Aliased_Present              : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Component_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Aliased_Present (N, Aliased_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Component_Declaration;\n-\n-   function Make_Variant_Part (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Variants                     : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Variant_Part, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Variants (N, Variants);\n-      return N;\n-   end Make_Variant_Part;\n-\n-   function Make_Variant (Sloc : Source_Ptr;\n-      Discrete_Choices             : List_Id;\n-      Component_List               : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Variant, Sloc);\n-   begin\n-      Set_Discrete_Choices (N, Discrete_Choices);\n-      Set_Component_List (N, Component_List);\n-      return N;\n-   end Make_Variant;\n-\n-   function Make_Others_Choice (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Others_Choice, Sloc);\n-   begin\n-      return N;\n-   end Make_Others_Choice;\n-\n-   function Make_Access_To_Object_Definition (Sloc : Source_Ptr;\n-      All_Present                  : Boolean := False;\n-      Subtype_Indication           : Node_Id;\n-      Constant_Present             : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Access_To_Object_Definition, Sloc);\n-   begin\n-      Set_All_Present (N, All_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      Set_Constant_Present (N, Constant_Present);\n-      return N;\n-   end Make_Access_To_Object_Definition;\n-\n-   function Make_Access_Function_Definition (Sloc : Source_Ptr;\n-      Protected_Present            : Boolean := False;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Access_Function_Definition, Sloc);\n-   begin\n-      Set_Protected_Present (N, Protected_Present);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      return N;\n-   end Make_Access_Function_Definition;\n-\n-   function Make_Access_Procedure_Definition (Sloc : Source_Ptr;\n-      Protected_Present            : Boolean := False;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Access_Procedure_Definition, Sloc);\n-   begin\n-      Set_Protected_Present (N, Protected_Present);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      return N;\n-   end Make_Access_Procedure_Definition;\n-\n-   function Make_Access_Definition (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Access_Definition, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      return N;\n-   end Make_Access_Definition;\n-\n-   function Make_Incomplete_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Incomplete_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Unknown_Discriminants_Present\n-        (N, Unknown_Discriminants_Present);\n-      return N;\n-   end Make_Incomplete_Type_Declaration;\n-\n-   function Make_Explicit_Dereference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Explicit_Dereference, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      return N;\n-   end Make_Explicit_Dereference;\n-\n-   function Make_Indexed_Component (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Expressions                  : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Indexed_Component, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      Set_Expressions (N, Expressions);\n-      return N;\n-   end Make_Indexed_Component;\n-\n-   function Make_Slice (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Discrete_Range               : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Slice, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      Set_Discrete_Range (N, Discrete_Range);\n-      return N;\n-   end Make_Slice;\n-\n-   function Make_Selected_Component (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Selector_Name                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Selected_Component, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      Set_Selector_Name (N, Selector_Name);\n-      return N;\n-   end Make_Selected_Component;\n-\n-   function Make_Attribute_Reference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id;\n-      Attribute_Name               : Name_Id;\n-      Expressions                  : List_Id := No_List;\n-      Must_Be_Byte_Aligned         : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Attribute_Reference, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      Set_Attribute_Name (N, Attribute_Name);\n-      Set_Expressions (N, Expressions);\n-      Set_Must_Be_Byte_Aligned (N, Must_Be_Byte_Aligned);\n-      return N;\n-   end Make_Attribute_Reference;\n-\n-   function Make_Aggregate (Sloc : Source_Ptr;\n-      Expressions                  : List_Id := No_List;\n-      Component_Associations       : List_Id := No_List;\n-      Null_Record_Present          : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Aggregate, Sloc);\n-   begin\n-      Set_Expressions (N, Expressions);\n-      Set_Component_Associations (N, Component_Associations);\n-      Set_Null_Record_Present (N, Null_Record_Present);\n-      return N;\n-   end Make_Aggregate;\n-\n-   function Make_Component_Association (Sloc : Source_Ptr;\n-      Choices                      : List_Id;\n-      Expression                   : Node_Id;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Component_Association, Sloc);\n-   begin\n-      Set_Choices (N, Choices);\n-      Set_Expression (N, Expression);\n-      Set_Box_Present (N, Box_Present);\n-      return N;\n-   end Make_Component_Association;\n-\n-   function Make_Extension_Aggregate (Sloc : Source_Ptr;\n-      Ancestor_Part                : Node_Id;\n-      Expressions                  : List_Id := No_List;\n-      Component_Associations       : List_Id := No_List;\n-      Null_Record_Present          : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Extension_Aggregate, Sloc);\n-   begin\n-      Set_Ancestor_Part (N, Ancestor_Part);\n-      Set_Expressions (N, Expressions);\n-      Set_Component_Associations (N, Component_Associations);\n-      Set_Null_Record_Present (N, Null_Record_Present);\n-      return N;\n-   end Make_Extension_Aggregate;\n-\n-   function Make_Null (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Null, Sloc);\n-   begin\n-      return N;\n-   end Make_Null;\n-\n-   function Make_And_Then (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_And_Then, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      return N;\n-   end Make_And_Then;\n-\n-   function Make_Or_Else (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Or_Else, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      return N;\n-   end Make_Or_Else;\n-\n-   function Make_In (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_In, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      return N;\n-   end Make_In;\n-\n-   function Make_Not_In (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Not_In, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      return N;\n-   end Make_Not_In;\n-\n-   function Make_Op_And (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_And, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_And);\n-      Set_Entity (N, Standard_Op_And);\n-      return N;\n-   end Make_Op_And;\n-\n-   function Make_Op_Or (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Or, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Or);\n-      Set_Entity (N, Standard_Op_Or);\n-      return N;\n-   end Make_Op_Or;\n-\n-   function Make_Op_Xor (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Xor, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Xor);\n-      Set_Entity (N, Standard_Op_Xor);\n-      return N;\n-   end Make_Op_Xor;\n-\n-   function Make_Op_Eq (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Eq, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Eq);\n-      Set_Entity (N, Standard_Op_Eq);\n-      return N;\n-   end Make_Op_Eq;\n-\n-   function Make_Op_Ne (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Ne, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Ne);\n-      Set_Entity (N, Standard_Op_Ne);\n-      return N;\n-   end Make_Op_Ne;\n-\n-   function Make_Op_Lt (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Lt, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Lt);\n-      Set_Entity (N, Standard_Op_Lt);\n-      return N;\n-   end Make_Op_Lt;\n-\n-   function Make_Op_Le (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Le, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Le);\n-      Set_Entity (N, Standard_Op_Le);\n-      return N;\n-   end Make_Op_Le;\n-\n-   function Make_Op_Gt (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Gt, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Gt);\n-      Set_Entity (N, Standard_Op_Gt);\n-      return N;\n-   end Make_Op_Gt;\n-\n-   function Make_Op_Ge (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Ge, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Ge);\n-      Set_Entity (N, Standard_Op_Ge);\n-      return N;\n-   end Make_Op_Ge;\n-\n-   function Make_Op_Add (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Add, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Add);\n-      Set_Entity (N, Standard_Op_Add);\n-      return N;\n-   end Make_Op_Add;\n-\n-   function Make_Op_Subtract (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Subtract, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Subtract);\n-      Set_Entity (N, Standard_Op_Subtract);\n-      return N;\n-   end Make_Op_Subtract;\n-\n-   function Make_Op_Concat (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Concat, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Concat);\n-      Set_Entity (N, Standard_Op_Concat);\n-      return N;\n-   end Make_Op_Concat;\n-\n-   function Make_Op_Multiply (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Multiply, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Multiply);\n-      Set_Entity (N, Standard_Op_Multiply);\n-      return N;\n-   end Make_Op_Multiply;\n-\n-   function Make_Op_Divide (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Divide, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Divide);\n-      Set_Entity (N, Standard_Op_Divide);\n-      return N;\n-   end Make_Op_Divide;\n-\n-   function Make_Op_Mod (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Mod, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Mod);\n-      Set_Entity (N, Standard_Op_Mod);\n-      return N;\n-   end Make_Op_Mod;\n-\n-   function Make_Op_Rem (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Rem, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Rem);\n-      Set_Entity (N, Standard_Op_Rem);\n-      return N;\n-   end Make_Op_Rem;\n-\n-   function Make_Op_Expon (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Expon, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Expon);\n-      Set_Entity (N, Standard_Op_Expon);\n-      return N;\n-   end Make_Op_Expon;\n-\n-   function Make_Op_Plus (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Plus, Sloc);\n-   begin\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Add);\n-      Set_Entity (N, Standard_Op_Plus);\n-      return N;\n-   end Make_Op_Plus;\n-\n-   function Make_Op_Minus (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Minus, Sloc);\n-   begin\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Subtract);\n-      Set_Entity (N, Standard_Op_Minus);\n-      return N;\n-   end Make_Op_Minus;\n-\n-   function Make_Op_Abs (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Abs, Sloc);\n-   begin\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Abs);\n-      Set_Entity (N, Standard_Op_Abs);\n-      return N;\n-   end Make_Op_Abs;\n-\n-   function Make_Op_Not (Sloc : Source_Ptr;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Not, Sloc);\n-   begin\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Op_Not);\n-      Set_Entity (N, Standard_Op_Not);\n-      return N;\n-   end Make_Op_Not;\n-\n-   function Make_Type_Conversion (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Type_Conversion, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Type_Conversion;\n-\n-   function Make_Qualified_Expression (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Qualified_Expression, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Qualified_Expression;\n-\n-   function Make_Allocator (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Allocator, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Allocator;\n-\n-   function Make_Null_Statement (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Null_Statement, Sloc);\n-   begin\n-      return N;\n-   end Make_Null_Statement;\n-\n-   function Make_Label (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Label, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      return N;\n-   end Make_Label;\n-\n-   function Make_Assignment_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Assignment_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Assignment_Statement;\n-\n-   function Make_If_Statement (Sloc : Source_Ptr;\n-      Condition                    : Node_Id;\n-      Then_Statements              : List_Id;\n-      Elsif_Parts                  : List_Id := No_List;\n-      Else_Statements              : List_Id := No_List;\n-      End_Span                     : Uint := No_Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_If_Statement, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Then_Statements (N, Then_Statements);\n-      Set_Elsif_Parts (N, Elsif_Parts);\n-      Set_Else_Statements (N, Else_Statements);\n-      Set_End_Span (N, End_Span);\n-      return N;\n-   end Make_If_Statement;\n-\n-   function Make_Elsif_Part (Sloc : Source_Ptr;\n-      Condition                    : Node_Id;\n-      Then_Statements              : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Elsif_Part, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Then_Statements (N, Then_Statements);\n-      return N;\n-   end Make_Elsif_Part;\n-\n-   function Make_Case_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id;\n-      Alternatives                 : List_Id;\n-      End_Span                     : Uint := No_Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Case_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      Set_Alternatives (N, Alternatives);\n-      Set_End_Span (N, End_Span);\n-      return N;\n-   end Make_Case_Statement;\n-\n-   function Make_Case_Statement_Alternative (Sloc : Source_Ptr;\n-      Discrete_Choices             : List_Id;\n-      Statements                   : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Case_Statement_Alternative, Sloc);\n-   begin\n-      Set_Discrete_Choices (N, Discrete_Choices);\n-      Set_Statements (N, Statements);\n-      return N;\n-   end Make_Case_Statement_Alternative;\n-\n-   function Make_Loop_Statement (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id := Empty;\n-      Iteration_Scheme             : Node_Id := Empty;\n-      Statements                   : List_Id;\n-      End_Label                    : Node_Id;\n-      Has_Created_Identifier       : Boolean := False;\n-      Is_Null_Loop                 : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Loop_Statement, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      Set_Iteration_Scheme (N, Iteration_Scheme);\n-      Set_Statements (N, Statements);\n-      Set_End_Label (N, End_Label);\n-      Set_Has_Created_Identifier (N, Has_Created_Identifier);\n-      Set_Is_Null_Loop (N, Is_Null_Loop);\n-      return N;\n-   end Make_Loop_Statement;\n-\n-   function Make_Iteration_Scheme (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Loop_Parameter_Specification : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Iteration_Scheme, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Loop_Parameter_Specification\n-        (N, Loop_Parameter_Specification);\n-      return N;\n-   end Make_Iteration_Scheme;\n-\n-   function Make_Loop_Parameter_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Reverse_Present              : Boolean := False;\n-      Discrete_Subtype_Definition  : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Loop_Parameter_Specification, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Reverse_Present (N, Reverse_Present);\n-      Set_Discrete_Subtype_Definition (N, Discrete_Subtype_Definition);\n-      return N;\n-   end Make_Loop_Parameter_Specification;\n-\n-   function Make_Block_Statement (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id := Empty;\n-      Declarations                 : List_Id := No_List;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Has_Created_Identifier       : Boolean := False;\n-      Is_Task_Allocation_Block     : Boolean := False;\n-      Is_Asynchronous_Call_Block   : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Block_Statement, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      Set_Declarations (N, Declarations);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      Set_Has_Created_Identifier (N, Has_Created_Identifier);\n-      Set_Is_Task_Allocation_Block (N, Is_Task_Allocation_Block);\n-      Set_Is_Asynchronous_Call_Block (N, Is_Asynchronous_Call_Block);\n-      return N;\n-   end Make_Block_Statement;\n-\n-   function Make_Exit_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id := Empty;\n-      Condition                    : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Exit_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Condition (N, Condition);\n-      return N;\n-   end Make_Exit_Statement;\n-\n-   function Make_Goto_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Goto_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Goto_Statement;\n-\n-   function Make_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subprogram_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      return N;\n-   end Make_Subprogram_Declaration;\n-\n-   function Make_Abstract_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Abstract_Subprogram_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      return N;\n-   end Make_Abstract_Subprogram_Declaration;\n-\n-   function Make_Function_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Subtype_Mark                 : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Function_Specification, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      return N;\n-   end Make_Function_Specification;\n-\n-   function Make_Procedure_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Procedure_Specification, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      return N;\n-   end Make_Procedure_Specification;\n-\n-   function Make_Designator (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Identifier                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Designator, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Identifier (N, Identifier);\n-      return N;\n-   end Make_Designator;\n-\n-   function Make_Defining_Program_Unit_Name (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Defining_Program_Unit_Name, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Defining_Program_Unit_Name;\n-\n-   function Make_Operator_Symbol (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Strval                       : String_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Operator_Symbol, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      Set_Strval (N, Strval);\n-      return N;\n-   end Make_Operator_Symbol;\n-\n-   function Make_Defining_Operator_Symbol (Sloc : Source_Ptr;\n-      Chars                        : Name_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Entity (N_Defining_Operator_Symbol, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      return N;\n-   end Make_Defining_Operator_Symbol;\n-\n-   function Make_Parameter_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      In_Present                   : Boolean := False;\n-      Out_Present                  : Boolean := False;\n-      Parameter_Type               : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Parameter_Specification, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_In_Present (N, In_Present);\n-      Set_Out_Present (N, Out_Present);\n-      Set_Parameter_Type (N, Parameter_Type);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Parameter_Specification;\n-\n-   function Make_Subprogram_Body (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Bad_Is_Detected              : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subprogram_Body, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      Set_Declarations (N, Declarations);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      Set_Bad_Is_Detected (N, Bad_Is_Detected);\n-      return N;\n-   end Make_Subprogram_Body;\n-\n-   function Make_Procedure_Call_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Procedure_Call_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Parameter_Associations (N, Parameter_Associations);\n-      return N;\n-   end Make_Procedure_Call_Statement;\n-\n-   function Make_Function_Call (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Function_Call, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Parameter_Associations (N, Parameter_Associations);\n-      return N;\n-   end Make_Function_Call;\n-\n-   function Make_Parameter_Association (Sloc : Source_Ptr;\n-      Selector_Name                : Node_Id;\n-      Explicit_Actual_Parameter    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Parameter_Association, Sloc);\n-   begin\n-      Set_Selector_Name (N, Selector_Name);\n-      Set_Explicit_Actual_Parameter (N, Explicit_Actual_Parameter);\n-      return N;\n-   end Make_Parameter_Association;\n-\n-   function Make_Return_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Return_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Return_Statement;\n-\n-   function Make_Package_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      return N;\n-   end Make_Package_Declaration;\n-\n-   function Make_Package_Specification (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Specification, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Visible_Declarations (N, Visible_Declarations);\n-      Set_Private_Declarations (N, Private_Declarations);\n-      Set_End_Label (N, End_Label);\n-      return N;\n-   end Make_Package_Specification;\n-\n-   function Make_Package_Body (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Body, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Declarations (N, Declarations);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      return N;\n-   end Make_Package_Body;\n-\n-   function Make_Private_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Private_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Unknown_Discriminants_Present\n-        (N, Unknown_Discriminants_Present);\n-      Set_Abstract_Present (N, Abstract_Present);\n-      Set_Tagged_Present (N, Tagged_Present);\n-      Set_Limited_Present (N, Limited_Present);\n-      return N;\n-   end Make_Private_Type_Declaration;\n-\n-   function Make_Private_Extension_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False;\n-      Abstract_Present             : Boolean := False;\n-      Subtype_Indication           : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Private_Extension_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Unknown_Discriminants_Present\n-        (N, Unknown_Discriminants_Present);\n-      Set_Abstract_Present (N, Abstract_Present);\n-      Set_Subtype_Indication (N, Subtype_Indication);\n-      return N;\n-   end Make_Private_Extension_Declaration;\n-\n-   function Make_Use_Package_Clause (Sloc : Source_Ptr;\n-      Names                        : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Use_Package_Clause, Sloc);\n-   begin\n-      Set_Names (N, Names);\n-      return N;\n-   end Make_Use_Package_Clause;\n-\n-   function Make_Use_Type_Clause (Sloc : Source_Ptr;\n-      Subtype_Marks                : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Use_Type_Clause, Sloc);\n-   begin\n-      Set_Subtype_Marks (N, Subtype_Marks);\n-      return N;\n-   end Make_Use_Type_Clause;\n-\n-   function Make_Object_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Subtype_Mark                 : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Object_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Object_Renaming_Declaration;\n-\n-   function Make_Exception_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Exception_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Exception_Renaming_Declaration;\n-\n-   function Make_Package_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Package_Renaming_Declaration;\n-\n-   function Make_Subprogram_Renaming_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subprogram_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Subprogram_Renaming_Declaration;\n-\n-   function Make_Generic_Package_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Package_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Generic_Package_Renaming_Declaration;\n-\n-   function Make_Generic_Procedure_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Procedure_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Generic_Procedure_Renaming_Declaration;\n-\n-   function Make_Generic_Function_Renaming_Declaration (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Function_Renaming_Declaration, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Generic_Function_Renaming_Declaration;\n-\n-   function Make_Task_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Task_Definition              : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Task_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Task_Definition (N, Task_Definition);\n-      return N;\n-   end Make_Task_Type_Declaration;\n-\n-   function Make_Single_Task_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Task_Definition              : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Single_Task_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Task_Definition (N, Task_Definition);\n-      return N;\n-   end Make_Single_Task_Declaration;\n-\n-   function Make_Task_Definition (Sloc : Source_Ptr;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Task_Definition, Sloc);\n-   begin\n-      Set_Visible_Declarations (N, Visible_Declarations);\n-      Set_Private_Declarations (N, Private_Declarations);\n-      Set_End_Label (N, End_Label);\n-      return N;\n-   end Make_Task_Definition;\n-\n-   function Make_Task_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Task_Body, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Declarations (N, Declarations);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      return N;\n-   end Make_Task_Body;\n-\n-   function Make_Protected_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Protected_Definition         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Protected_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Protected_Definition (N, Protected_Definition);\n-      return N;\n-   end Make_Protected_Type_Declaration;\n-\n-   function Make_Single_Protected_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Protected_Definition         : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Single_Protected_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Protected_Definition (N, Protected_Definition);\n-      return N;\n-   end Make_Single_Protected_Declaration;\n-\n-   function Make_Protected_Definition (Sloc : Source_Ptr;\n-      Visible_Declarations         : List_Id;\n-      Private_Declarations         : List_Id := No_List;\n-      End_Label                    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Protected_Definition, Sloc);\n-   begin\n-      Set_Visible_Declarations (N, Visible_Declarations);\n-      Set_Private_Declarations (N, Private_Declarations);\n-      Set_End_Label (N, End_Label);\n-      return N;\n-   end Make_Protected_Definition;\n-\n-   function Make_Protected_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Declarations                 : List_Id;\n-      End_Label                    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Protected_Body, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Declarations (N, Declarations);\n-      Set_End_Label (N, End_Label);\n-      return N;\n-   end Make_Protected_Body;\n-\n-   function Make_Entry_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discrete_Subtype_Definition  : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discrete_Subtype_Definition (N, Discrete_Subtype_Definition);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      return N;\n-   end Make_Entry_Declaration;\n-\n-   function Make_Accept_Statement (Sloc : Source_Ptr;\n-      Entry_Direct_Name            : Node_Id;\n-      Entry_Index                  : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Handled_Statement_Sequence   : Node_Id;\n-      Declarations                 : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Accept_Statement, Sloc);\n-   begin\n-      Set_Entry_Direct_Name (N, Entry_Direct_Name);\n-      Set_Entry_Index (N, Entry_Index);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      Set_Declarations (N, Declarations);\n-      return N;\n-   end Make_Accept_Statement;\n-\n-   function Make_Entry_Body (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Entry_Body_Formal_Part       : Node_Id;\n-      Declarations                 : List_Id;\n-      Handled_Statement_Sequence   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Body, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Entry_Body_Formal_Part (N, Entry_Body_Formal_Part);\n-      Set_Declarations (N, Declarations);\n-      Set_Handled_Statement_Sequence (N, Handled_Statement_Sequence);\n-      return N;\n-   end Make_Entry_Body;\n-\n-   function Make_Entry_Body_Formal_Part (Sloc : Source_Ptr;\n-      Entry_Index_Specification    : Node_Id := Empty;\n-      Parameter_Specifications     : List_Id := No_List;\n-      Condition                    : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Body_Formal_Part, Sloc);\n-   begin\n-      Set_Entry_Index_Specification (N, Entry_Index_Specification);\n-      Set_Parameter_Specifications (N, Parameter_Specifications);\n-      Set_Condition (N, Condition);\n-      return N;\n-   end Make_Entry_Body_Formal_Part;\n-\n-   function Make_Entry_Index_Specification (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Discrete_Subtype_Definition  : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Index_Specification, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Discrete_Subtype_Definition (N, Discrete_Subtype_Definition);\n-      return N;\n-   end Make_Entry_Index_Specification;\n-\n-   function Make_Entry_Call_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Parameter_Associations       : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Call_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Parameter_Associations (N, Parameter_Associations);\n-      return N;\n-   end Make_Entry_Call_Statement;\n-\n-   function Make_Requeue_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Abort_Present                : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Requeue_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Abort_Present (N, Abort_Present);\n-      return N;\n-   end Make_Requeue_Statement;\n-\n-   function Make_Delay_Until_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Delay_Until_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Delay_Until_Statement;\n-\n-   function Make_Delay_Relative_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Delay_Relative_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Delay_Relative_Statement;\n-\n-   function Make_Selective_Accept (Sloc : Source_Ptr;\n-      Select_Alternatives          : List_Id;\n-      Else_Statements              : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Selective_Accept, Sloc);\n-   begin\n-      Set_Select_Alternatives (N, Select_Alternatives);\n-      Set_Else_Statements (N, Else_Statements);\n-      return N;\n-   end Make_Selective_Accept;\n-\n-   function Make_Accept_Alternative (Sloc : Source_Ptr;\n-      Accept_Statement             : Node_Id;\n-      Condition                    : Node_Id := Empty;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Accept_Alternative, Sloc);\n-   begin\n-      Set_Accept_Statement (N, Accept_Statement);\n-      Set_Condition (N, Condition);\n-      Set_Statements (N, Statements);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      return N;\n-   end Make_Accept_Alternative;\n-\n-   function Make_Delay_Alternative (Sloc : Source_Ptr;\n-      Delay_Statement              : Node_Id;\n-      Condition                    : Node_Id := Empty;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Delay_Alternative, Sloc);\n-   begin\n-      Set_Delay_Statement (N, Delay_Statement);\n-      Set_Condition (N, Condition);\n-      Set_Statements (N, Statements);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      return N;\n-   end Make_Delay_Alternative;\n-\n-   function Make_Terminate_Alternative (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Pragmas_Before               : List_Id := No_List;\n-      Pragmas_After                : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Terminate_Alternative, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      Set_Pragmas_After (N, Pragmas_After);\n-      return N;\n-   end Make_Terminate_Alternative;\n-\n-   function Make_Timed_Entry_Call (Sloc : Source_Ptr;\n-      Entry_Call_Alternative       : Node_Id;\n-      Delay_Alternative            : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Timed_Entry_Call, Sloc);\n-   begin\n-      Set_Entry_Call_Alternative (N, Entry_Call_Alternative);\n-      Set_Delay_Alternative (N, Delay_Alternative);\n-      return N;\n-   end Make_Timed_Entry_Call;\n-\n-   function Make_Entry_Call_Alternative (Sloc : Source_Ptr;\n-      Entry_Call_Statement         : Node_Id;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Entry_Call_Alternative, Sloc);\n-   begin\n-      Set_Entry_Call_Statement (N, Entry_Call_Statement);\n-      Set_Statements (N, Statements);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      return N;\n-   end Make_Entry_Call_Alternative;\n-\n-   function Make_Conditional_Entry_Call (Sloc : Source_Ptr;\n-      Entry_Call_Alternative       : Node_Id;\n-      Else_Statements              : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Conditional_Entry_Call, Sloc);\n-   begin\n-      Set_Entry_Call_Alternative (N, Entry_Call_Alternative);\n-      Set_Else_Statements (N, Else_Statements);\n-      return N;\n-   end Make_Conditional_Entry_Call;\n-\n-   function Make_Asynchronous_Select (Sloc : Source_Ptr;\n-      Triggering_Alternative       : Node_Id;\n-      Abortable_Part               : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Asynchronous_Select, Sloc);\n-   begin\n-      Set_Triggering_Alternative (N, Triggering_Alternative);\n-      Set_Abortable_Part (N, Abortable_Part);\n-      return N;\n-   end Make_Asynchronous_Select;\n-\n-   function Make_Triggering_Alternative (Sloc : Source_Ptr;\n-      Triggering_Statement         : Node_Id;\n-      Statements                   : List_Id := Empty_List;\n-      Pragmas_Before               : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Triggering_Alternative, Sloc);\n-   begin\n-      Set_Triggering_Statement (N, Triggering_Statement);\n-      Set_Statements (N, Statements);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      return N;\n-   end Make_Triggering_Alternative;\n-\n-   function Make_Abortable_Part (Sloc : Source_Ptr;\n-      Statements                   : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Abortable_Part, Sloc);\n-   begin\n-      Set_Statements (N, Statements);\n-      return N;\n-   end Make_Abortable_Part;\n-\n-   function Make_Abort_Statement (Sloc : Source_Ptr;\n-      Names                        : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Abort_Statement, Sloc);\n-   begin\n-      Set_Names (N, Names);\n-      return N;\n-   end Make_Abort_Statement;\n-\n-   function Make_Compilation_Unit (Sloc : Source_Ptr;\n-      Context_Items                : List_Id;\n-      Private_Present              : Boolean := False;\n-      Unit                         : Node_Id;\n-      Aux_Decls_Node               : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Compilation_Unit, Sloc);\n-   begin\n-      Set_Context_Items (N, Context_Items);\n-      Set_Private_Present (N, Private_Present);\n-      Set_Unit (N, Unit);\n-      Set_Aux_Decls_Node (N, Aux_Decls_Node);\n-      return N;\n-   end Make_Compilation_Unit;\n-\n-   function Make_Compilation_Unit_Aux (Sloc : Source_Ptr;\n-      Declarations                 : List_Id := No_List;\n-      Actions                      : List_Id := No_List;\n-      Pragmas_After                : List_Id := No_List;\n-      Config_Pragmas               : List_Id := Empty_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Compilation_Unit_Aux, Sloc);\n-   begin\n-      Set_Declarations (N, Declarations);\n-      Set_Actions (N, Actions);\n-      Set_Pragmas_After (N, Pragmas_After);\n-      Set_Config_Pragmas (N, Config_Pragmas);\n-      return N;\n-   end Make_Compilation_Unit_Aux;\n-\n-   function Make_With_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      First_Name                   : Boolean := True;\n-      Last_Name                    : Boolean := True;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_With_Clause, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_First_Name (N, First_Name);\n-      Set_Last_Name (N, Last_Name);\n-      Set_Limited_Present (N, Limited_Present);\n-      return N;\n-   end Make_With_Clause;\n-\n-   function Make_With_Type_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Tagged_Present               : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_With_Type_Clause, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Tagged_Present (N, Tagged_Present);\n-      return N;\n-   end Make_With_Type_Clause;\n-\n-   function Make_Subprogram_Body_Stub (Sloc : Source_Ptr;\n-      Specification                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subprogram_Body_Stub, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      return N;\n-   end Make_Subprogram_Body_Stub;\n-\n-   function Make_Package_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Body_Stub, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Package_Body_Stub;\n-\n-   function Make_Task_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Task_Body_Stub, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Task_Body_Stub;\n-\n-   function Make_Protected_Body_Stub (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Protected_Body_Stub, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Protected_Body_Stub;\n-\n-   function Make_Subunit (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Proper_Body                  : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subunit, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Proper_Body (N, Proper_Body);\n-      return N;\n-   end Make_Subunit;\n-\n-   function Make_Exception_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Exception_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Exception_Declaration;\n-\n-   function Make_Handled_Sequence_Of_Statements (Sloc : Source_Ptr;\n-      Statements                   : List_Id;\n-      End_Label                    : Node_Id := Empty;\n-      Exception_Handlers           : List_Id := No_List;\n-      At_End_Proc                  : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Handled_Sequence_Of_Statements, Sloc);\n-   begin\n-      Set_Statements (N, Statements);\n-      Set_End_Label (N, End_Label);\n-      Set_Exception_Handlers (N, Exception_Handlers);\n-      Set_At_End_Proc (N, At_End_Proc);\n-      return N;\n-   end Make_Handled_Sequence_Of_Statements;\n-\n-   function Make_Exception_Handler (Sloc : Source_Ptr;\n-      Choice_Parameter             : Node_Id := Empty;\n-      Exception_Choices            : List_Id;\n-      Statements                   : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Exception_Handler, Sloc);\n-   begin\n-      Set_Choice_Parameter (N, Choice_Parameter);\n-      Set_Exception_Choices (N, Exception_Choices);\n-      Set_Statements (N, Statements);\n-      return N;\n-   end Make_Exception_Handler;\n-\n-   function Make_Raise_Statement (Sloc : Source_Ptr;\n-      Name                         : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Raise_Statement, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      return N;\n-   end Make_Raise_Statement;\n-\n-   function Make_Generic_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Generic_Formal_Declarations  : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Subprogram_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      Set_Generic_Formal_Declarations (N, Generic_Formal_Declarations);\n-      return N;\n-   end Make_Generic_Subprogram_Declaration;\n-\n-   function Make_Generic_Package_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Generic_Formal_Declarations  : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Package_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      Set_Generic_Formal_Declarations (N, Generic_Formal_Declarations);\n-      return N;\n-   end Make_Generic_Package_Declaration;\n-\n-   function Make_Package_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Package_Instantiation, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      Set_Generic_Associations (N, Generic_Associations);\n-      return N;\n-   end Make_Package_Instantiation;\n-\n-   function Make_Procedure_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Procedure_Instantiation, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      Set_Generic_Associations (N, Generic_Associations);\n-      return N;\n-   end Make_Procedure_Instantiation;\n-\n-   function Make_Function_Instantiation (Sloc : Source_Ptr;\n-      Defining_Unit_Name           : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Function_Instantiation, Sloc);\n-   begin\n-      Set_Defining_Unit_Name (N, Defining_Unit_Name);\n-      Set_Name (N, Name);\n-      Set_Generic_Associations (N, Generic_Associations);\n-      return N;\n-   end Make_Function_Instantiation;\n-\n-   function Make_Generic_Association (Sloc : Source_Ptr;\n-      Selector_Name                : Node_Id := Empty;\n-      Explicit_Generic_Actual_Parameter : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Generic_Association, Sloc);\n-   begin\n-      Set_Selector_Name (N, Selector_Name);\n-      Set_Explicit_Generic_Actual_Parameter\n-        (N, Explicit_Generic_Actual_Parameter);\n-      return N;\n-   end Make_Generic_Association;\n-\n-   function Make_Formal_Object_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      In_Present                   : Boolean := False;\n-      Out_Present                  : Boolean := False;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Object_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_In_Present (N, In_Present);\n-      Set_Out_Present (N, Out_Present);\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Formal_Object_Declaration;\n-\n-   function Make_Formal_Type_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Formal_Type_Definition       : Node_Id;\n-      Discriminant_Specifications  : List_Id := No_List;\n-      Unknown_Discriminants_Present : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Type_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Formal_Type_Definition (N, Formal_Type_Definition);\n-      Set_Discriminant_Specifications (N, Discriminant_Specifications);\n-      Set_Unknown_Discriminants_Present\n-        (N, Unknown_Discriminants_Present);\n-      return N;\n-   end Make_Formal_Type_Declaration;\n-\n-   function Make_Formal_Private_Type_Definition (Sloc : Source_Ptr;\n-      Abstract_Present             : Boolean := False;\n-      Tagged_Present               : Boolean := False;\n-      Limited_Present              : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Private_Type_Definition, Sloc);\n-   begin\n-      Set_Abstract_Present (N, Abstract_Present);\n-      Set_Tagged_Present (N, Tagged_Present);\n-      Set_Limited_Present (N, Limited_Present);\n-      return N;\n-   end Make_Formal_Private_Type_Definition;\n-\n-   function Make_Formal_Derived_Type_Definition (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Private_Present              : Boolean := False;\n-      Abstract_Present             : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Derived_Type_Definition, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Private_Present (N, Private_Present);\n-      Set_Abstract_Present (N, Abstract_Present);\n-      return N;\n-   end Make_Formal_Derived_Type_Definition;\n-\n-   function Make_Formal_Discrete_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Discrete_Type_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Discrete_Type_Definition;\n-\n-   function Make_Formal_Signed_Integer_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Signed_Integer_Type_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Signed_Integer_Type_Definition;\n-\n-   function Make_Formal_Modular_Type_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Modular_Type_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Modular_Type_Definition;\n-\n-   function Make_Formal_Floating_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Floating_Point_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Floating_Point_Definition;\n-\n-   function Make_Formal_Ordinary_Fixed_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Ordinary_Fixed_Point_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Ordinary_Fixed_Point_Definition;\n-\n-   function Make_Formal_Decimal_Fixed_Point_Definition (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Decimal_Fixed_Point_Definition, Sloc);\n-   begin\n-      return N;\n-   end Make_Formal_Decimal_Fixed_Point_Definition;\n-\n-   function Make_Formal_Subprogram_Declaration (Sloc : Source_Ptr;\n-      Specification                : Node_Id;\n-      Default_Name                 : Node_Id := Empty;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Subprogram_Declaration, Sloc);\n-   begin\n-      Set_Specification (N, Specification);\n-      Set_Default_Name (N, Default_Name);\n-      Set_Box_Present (N, Box_Present);\n-      return N;\n-   end Make_Formal_Subprogram_Declaration;\n-\n-   function Make_Formal_Package_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id;\n-      Name                         : Node_Id;\n-      Generic_Associations         : List_Id := No_List;\n-      Box_Present                  : Boolean := False)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Formal_Package_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      Set_Name (N, Name);\n-      Set_Generic_Associations (N, Generic_Associations);\n-      Set_Box_Present (N, Box_Present);\n-      return N;\n-   end Make_Formal_Package_Declaration;\n-\n-   function Make_Attribute_Definition_Clause (Sloc : Source_Ptr;\n-      Name                         : Node_Id;\n-      Chars                        : Name_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Attribute_Definition_Clause, Sloc);\n-   begin\n-      Set_Name (N, Name);\n-      Set_Chars (N, Chars);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Attribute_Definition_Clause;\n-\n-   function Make_Enumeration_Representation_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Array_Aggregate              : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Enumeration_Representation_Clause, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      Set_Array_Aggregate (N, Array_Aggregate);\n-      return N;\n-   end Make_Enumeration_Representation_Clause;\n-\n-   function Make_Record_Representation_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Mod_Clause                   : Node_Id := Empty;\n-      Component_Clauses            : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Record_Representation_Clause, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      Set_Mod_Clause (N, Mod_Clause);\n-      Set_Component_Clauses (N, Component_Clauses);\n-      return N;\n-   end Make_Record_Representation_Clause;\n-\n-   function Make_Component_Clause (Sloc : Source_Ptr;\n-      Component_Name               : Node_Id;\n-      Position                     : Node_Id;\n-      First_Bit                    : Node_Id;\n-      Last_Bit                     : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Component_Clause, Sloc);\n-   begin\n-      Set_Component_Name (N, Component_Name);\n-      Set_Position (N, Position);\n-      Set_First_Bit (N, First_Bit);\n-      Set_Last_Bit (N, Last_Bit);\n-      return N;\n-   end Make_Component_Clause;\n-\n-   function Make_Code_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Code_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Code_Statement;\n-\n-   function Make_Op_Rotate_Left (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Rotate_Left, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Rotate_Left);\n-      Set_Entity (N, Standard_Op_Rotate_Left);\n-      return N;\n-   end Make_Op_Rotate_Left;\n-\n-   function Make_Op_Rotate_Right (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Rotate_Right, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Rotate_Right);\n-      Set_Entity (N, Standard_Op_Rotate_Right);\n-      return N;\n-   end Make_Op_Rotate_Right;\n-\n-   function Make_Op_Shift_Left (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Shift_Left, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Shift_Left);\n-      Set_Entity (N, Standard_Op_Shift_Left);\n-      return N;\n-   end Make_Op_Shift_Left;\n-\n-   function Make_Op_Shift_Right_Arithmetic (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Shift_Right_Arithmetic, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Shift_Right_Arithmetic);\n-      Set_Entity (N, Standard_Op_Shift_Right_Arithmetic);\n-      return N;\n-   end Make_Op_Shift_Right_Arithmetic;\n-\n-   function Make_Op_Shift_Right (Sloc : Source_Ptr;\n-      Left_Opnd                    : Node_Id;\n-      Right_Opnd                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Op_Shift_Right, Sloc);\n-   begin\n-      Set_Left_Opnd (N, Left_Opnd);\n-      Set_Right_Opnd (N, Right_Opnd);\n-      Set_Chars (N, Name_Shift_Right);\n-      Set_Entity (N, Standard_Op_Shift_Right);\n-      return N;\n-   end Make_Op_Shift_Right;\n-\n-   function Make_Delta_Constraint (Sloc : Source_Ptr;\n-      Delta_Expression             : Node_Id;\n-      Range_Constraint             : Node_Id := Empty)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Delta_Constraint, Sloc);\n-   begin\n-      Set_Delta_Expression (N, Delta_Expression);\n-      Set_Range_Constraint (N, Range_Constraint);\n-      return N;\n-   end Make_Delta_Constraint;\n-\n-   function Make_At_Clause (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_At_Clause, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_At_Clause;\n-\n-   function Make_Mod_Clause (Sloc : Source_Ptr;\n-      Expression                   : Node_Id;\n-      Pragmas_Before               : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Mod_Clause, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      Set_Pragmas_Before (N, Pragmas_Before);\n-      return N;\n-   end Make_Mod_Clause;\n-\n-   function Make_Conditional_Expression (Sloc : Source_Ptr;\n-      Expressions                  : List_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Conditional_Expression, Sloc);\n-   begin\n-      Set_Expressions (N, Expressions);\n-      return N;\n-   end Make_Conditional_Expression;\n-\n-   function Make_Expanded_Name (Sloc : Source_Ptr;\n-      Chars                        : Name_Id;\n-      Prefix                       : Node_Id;\n-      Selector_Name                : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Expanded_Name, Sloc);\n-   begin\n-      Set_Chars (N, Chars);\n-      Set_Prefix (N, Prefix);\n-      Set_Selector_Name (N, Selector_Name);\n-      return N;\n-   end Make_Expanded_Name;\n-\n-   function Make_Free_Statement (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Free_Statement, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Free_Statement;\n-\n-   function Make_Freeze_Entity (Sloc : Source_Ptr;\n-      Actions                      : List_Id := No_List)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Freeze_Entity, Sloc);\n-   begin\n-      Set_Actions (N, Actions);\n-      return N;\n-   end Make_Freeze_Entity;\n-\n-   function Make_Implicit_Label_Declaration (Sloc : Source_Ptr;\n-      Defining_Identifier          : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Implicit_Label_Declaration, Sloc);\n-   begin\n-      Set_Defining_Identifier (N, Defining_Identifier);\n-      return N;\n-   end Make_Implicit_Label_Declaration;\n-\n-   function Make_Itype_Reference (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Itype_Reference, Sloc);\n-   begin\n-      return N;\n-   end Make_Itype_Reference;\n-\n-   function Make_Raise_Constraint_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Raise_Constraint_Error, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Reason (N, Reason);\n-      return N;\n-   end Make_Raise_Constraint_Error;\n-\n-   function Make_Raise_Program_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Raise_Program_Error, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Reason (N, Reason);\n-      return N;\n-   end Make_Raise_Program_Error;\n-\n-   function Make_Raise_Storage_Error (Sloc : Source_Ptr;\n-      Condition                    : Node_Id := Empty;\n-      Reason                       : Uint)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Raise_Storage_Error, Sloc);\n-   begin\n-      Set_Condition (N, Condition);\n-      Set_Reason (N, Reason);\n-      return N;\n-   end Make_Raise_Storage_Error;\n-\n-   function Make_Reference (Sloc : Source_Ptr;\n-      Prefix                       : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Reference, Sloc);\n-   begin\n-      Set_Prefix (N, Prefix);\n-      return N;\n-   end Make_Reference;\n-\n-   function Make_Subprogram_Info (Sloc : Source_Ptr;\n-      Identifier                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Subprogram_Info, Sloc);\n-   begin\n-      Set_Identifier (N, Identifier);\n-      return N;\n-   end Make_Subprogram_Info;\n-\n-   function Make_Unchecked_Expression (Sloc : Source_Ptr;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Unchecked_Expression, Sloc);\n-   begin\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Unchecked_Expression;\n-\n-   function Make_Unchecked_Type_Conversion (Sloc : Source_Ptr;\n-      Subtype_Mark                 : Node_Id;\n-      Expression                   : Node_Id)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Unchecked_Type_Conversion, Sloc);\n-   begin\n-      Set_Subtype_Mark (N, Subtype_Mark);\n-      Set_Expression (N, Expression);\n-      return N;\n-   end Make_Unchecked_Type_Conversion;\n-\n-   function Make_Validate_Unchecked_Conversion (Sloc : Source_Ptr)\n-      return Node_Id\n-   is\n-      N : constant Node_Id :=\n-            New_Node (N_Validate_Unchecked_Conversion, Sloc);\n-   begin\n-      return N;\n-   end Make_Validate_Unchecked_Conversion;\n-\n-end Nmake;"}]}