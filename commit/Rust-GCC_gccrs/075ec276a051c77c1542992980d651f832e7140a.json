{"sha": "075ec276a051c77c1542992980d651f832e7140a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc1ZWMyNzZhMDUxYzc3YzE1NDI5OTI5ODBkNjUxZjgzMmU3MTQwYQ==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-06-03T11:27:23Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-06-03T11:27:23Z"}, "message": "builtins.def (BUILT_IN_CABS, [...]): New builtins representing ISO C99's cabs, cabsf and cabsl.\n\n\n\t* builtins.def (BUILT_IN_CABS, BUILT_IN_CABSF, BUILT_IN_CABSL):\n\tNew builtins representing ISO C99's cabs, cabsf and cabsl.\n\t* builtins.c (expand_builtin_fabs): New function.\n\t(expand_builtin_cabs): New function.\n\t(expand_builtin): Expand BUILT_IN_FABS{,F,L} and BUILT_IN_CABS{,F,L}\n\tusing expand_builtin_fabs and expand_builtin_cabs respectively.\n\n\t* doc/extend.texi: Document new cabs, cabsf and cabsl builtins.\n\n\t* gcc.dg/builtins-16.c: New test case.\n\nFrom-SVN: r67368", "tree": {"sha": "0ac72a6f0481c8c341e932108b5ac14e70debfbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ac72a6f0481c8c341e932108b5ac14e70debfbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/075ec276a051c77c1542992980d651f832e7140a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075ec276a051c77c1542992980d651f832e7140a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/075ec276a051c77c1542992980d651f832e7140a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/075ec276a051c77c1542992980d651f832e7140a/comments", "author": null, "committer": null, "parents": [{"sha": "ded9bf77e35ce9a22468a1f56595df0741e2f22a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ded9bf77e35ce9a22468a1f56595df0741e2f22a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ded9bf77e35ce9a22468a1f56595df0741e2f22a"}], "stats": {"total": 138, "additions": 134, "deletions": 4}, "files": [{"sha": "c68e593a20a0459ba3b0b6a021d6721a88eae44b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -1,3 +1,14 @@\n+2003-06-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* builtins.def (BUILT_IN_CABS, BUILT_IN_CABSF, BUILT_IN_CABSL):\n+\tNew builtins representing ISO C99's cabs, cabsf and cabsl.\n+\t* builtins.c (expand_builtin_fabs): New function.\n+\t(expand_builtin_cabs): New function.\n+\t(expand_builtin): Expand BUILT_IN_FABS{,F,L} and BUILT_IN_CABS{,F,L}\n+\tusing expand_builtin_fabs and expand_builtin_cabs respectively.\n+\n+\t* doc/extend.texi: Document new cabs, cabsf and cabsl builtins.\n+\n 2003-06-03  Aldy Hernandez  <aldyh@redhat.com>\n \n         * function.c (assign_parms): Split complex arguments."}, {"sha": "53a1744fe724a257b8cf79b2e351a6c9dd79ec9e", "filename": "gcc/builtins.c", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -169,6 +169,8 @@ static tree fold_builtin_nan\t\tPARAMS ((tree, tree, int));\n static int validate_arglist\t\tPARAMS ((tree, ...));\n static tree fold_trunc_transparent_mathfn PARAMS ((tree));\n static bool readonly_data_expr\t\tPARAMS ((tree));\n+static rtx expand_builtin_fabs\t\tPARAMS ((tree, rtx, rtx));\n+static rtx expand_builtin_cabs\t\tPARAMS ((tree, rtx));\n \n /* Return the alignment in bits of EXP, a pointer valued expression.\n    But don't return more than MAX_ALIGN no matter what.\n@@ -4306,6 +4308,57 @@ expand_builtin_trap ()\n     emit_library_call (abort_libfunc, LCT_NORETURN, VOIDmode, 0);\n   emit_barrier ();\n }\n+\n+/* Expand a call to fabs, fabsf or fabsl with arguments ARGLIST.\n+   Return 0 if a normal call should be emitted rather than expanding\n+   the function inline.  If convenient, the result should be placed\n+   in TARGET.  SUBTARGET may be used as the target for computing\n+   the operand.  */\n+\n+static rtx\n+expand_builtin_fabs (arglist, target, subtarget)\n+     tree arglist;\n+     rtx target, subtarget;\n+{\n+  enum machine_mode mode;\n+  tree arg;\n+  rtx op0;\n+\n+  if (!validate_arglist (arglist, REAL_TYPE, VOID_TYPE))\n+    return 0;\n+\n+  arg = TREE_VALUE (arglist);\n+  mode = TYPE_MODE (TREE_TYPE (arg));\n+  op0 = expand_expr (arg, subtarget, VOIDmode, 0);\n+  return expand_abs (mode, op0, target, 0, safe_from_p (target, arg, 1));\n+}\n+\n+/* Expand a call to cabs, cabsf or cabsl with arguments ARGLIST.\n+   Return 0 if a normal call should be emitted rather than expanding\n+   the function inline.  If convenient, the result should be placed\n+   in target.  */\n+\n+static rtx\n+expand_builtin_cabs (arglist, target)\n+     tree arglist;\n+     rtx target;\n+{\n+  enum machine_mode mode;\n+  tree arg;\n+  rtx op0;\n+\n+  if (arglist == 0 || TREE_CHAIN (arglist))\n+    return 0;\n+  arg = TREE_VALUE (arglist);\n+  if (TREE_CODE (TREE_TYPE (arg)) != COMPLEX_TYPE\n+      || TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) != REAL_TYPE)\n+    return 0;\n+\n+  mode = TYPE_MODE (TREE_TYPE (arg));\n+  op0 = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n+  return expand_complex_abs (mode, op0, target, 0);\n+}\n+\n \f\n /* Expand an expression EXP that calls a built-in function,\n    with result going to TARGET if that's convenient\n@@ -4458,11 +4511,27 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     case BUILT_IN_LABS:\n     case BUILT_IN_LLABS:\n     case BUILT_IN_IMAXABS:\n+      /* build_function_call changes these into ABS_EXPR.  */\n+      abort ();\n+\n     case BUILT_IN_FABS:\n     case BUILT_IN_FABSF:\n     case BUILT_IN_FABSL:\n-      /* build_function_call changes these into ABS_EXPR.  */\n-      abort ();\n+      target = expand_builtin_fabs (arglist, target, subtarget);\n+      if (target)\n+        return target;\n+      break;\n+\n+    case BUILT_IN_CABS:\n+    case BUILT_IN_CABSF:\n+    case BUILT_IN_CABSL:\n+      if (flag_unsafe_math_optimizations)\n+\t{\n+\t  target = expand_builtin_cabs (arglist, target);\n+\t  if (target)\n+\t    return target;\n+\t}\n+      break;\n \n     case BUILT_IN_CONJ:\n     case BUILT_IN_CONJF:"}, {"sha": "5f814bbf9f5a11597d42aa1b59271da871a016db", "filename": "gcc/builtins.def", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -285,6 +285,18 @@ DEF_C99_BUILTIN(BUILT_IN_CIMAGL,\n \t\t\"__builtin_cimagl\",\n \t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n \t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN(BUILT_IN_CABS,\n+\t\t\"__builtin_cabs\",\n+\t\tBT_FN_DOUBLE_COMPLEX_DOUBLE,\n+\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN(BUILT_IN_CABSF,\n+\t\t\"__builtin_cabsf\",\n+\t\tBT_FN_FLOAT_COMPLEX_FLOAT,\n+\t\tATTR_CONST_NOTHROW_LIST)\n+DEF_C99_BUILTIN(BUILT_IN_CABSL,\n+\t\t\"__builtin_cabsl\",\n+\t\tBT_FN_LONG_DOUBLE_COMPLEX_LONG_DOUBLE,\n+\t\tATTR_CONST_NOTHROW_LIST)\n \n /* The system prototypes for `bzero', 'bcopy' and `bcmp' functions\n    have many variations, so don't specify parameters to avoid"}, {"sha": "c4152ef009225edb9f3cce7e138e3a7fd5ab278e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -4598,6 +4598,9 @@ v4si f (v4si a, v4si b, v4si c)\n @findex atanl\n @findex bcmp\n @findex bzero\n+@findex cabs\n+@findex cabsf\n+@findex cabsl\n @findex calloc\n @findex ceil\n @findex ceilf\n@@ -4726,8 +4729,11 @@ All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode.\n \n-The ISO C99 functions @code{conj}, @code{conjf}, @code{conjl}, @code{creal},\n-@code{crealf}, @code{creall}, @code{cimag}, @code{cimagf}, @code{cimagl},\n+The ISO C99 functions\n+@code{cabs}, @code{cabsf}, @code{cabsl},\n+@code{conj}, @code{conjf}, @code{conjl},\n+@code{creal}, @code{crealf}, @code{creall},\n+@code{cimag}, @code{cimagf}, @code{cimagl},\n @code{_Exit}, @code{imaxabs}, @code{llabs},\n @code{nearbyint}, @code{nearbyintf}, @code{nearbyintl},\n @code{round}, @code{roundf}, @code{roundl}, @code{snprintf},"}, {"sha": "a7da74f4c8c0098e62c9ee8077f67092a6b57270", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -1,3 +1,7 @@\n+2003-06-03  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* gcc.dg/builtins-16.c: New test case.\n+\n 2003-06-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.c-torture/execute/builtins/string-4.c (main_test): Remove"}, {"sha": "e7ffe9350673a9e0250dfabcf33ae8e591297e3c", "filename": "gcc/testsuite/gcc.dg/builtins-16.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/075ec276a051c77c1542992980d651f832e7140a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/075ec276a051c77c1542992980d651f832e7140a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-16.c?ref=075ec276a051c77c1542992980d651f832e7140a", "patch": "@@ -0,0 +1,28 @@\n+/* Copyright (C) 2003  Free Software Foundation.\n+\n+   Verify that all the __builtin_cabs? functions are recognized\n+   by the compiler.  Complex numbers are not supported with the\n+   gcc.dg default \"-pedantic-errors\" option, so the dg-options\n+   overrides this.\n+\n+   Written by Roger Sayle, 1st June 2003.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O -ansi\" } */\n+/* { dg-final { scan-assembler-not \"__builtin_\" } } */\n+\n+double test(__complex__ double x)\n+{\n+  return __builtin_cabs (x);\n+}\n+\n+float testf(__complex__ float x)\n+{\n+  return __builtin_cabsf (x);\n+}\n+\n+long double testl(__complex__ long double x)\n+{\n+  return __builtin_cabsl (x);\n+}\n+"}]}