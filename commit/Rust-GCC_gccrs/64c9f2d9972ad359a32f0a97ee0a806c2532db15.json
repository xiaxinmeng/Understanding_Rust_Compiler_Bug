{"sha": "64c9f2d9972ad359a32f0a97ee0a806c2532db15", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRjOWYyZDk5NzJhZDM1OWEzMmYwYTk3ZWUwYTgwNmMyNTMyZGIxNQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-01-24T15:57:46Z"}, "committer": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2020-01-24T15:57:46Z"}, "message": "Emit reasonable diagnostic rather than ICE on invalid ASM on H8 port\n\n\tPR target/13721\n\t* config/h8300/h8300.c (h8300_print_operand): Only call byte_reg\n\tfor REGs.  Call output_operand_lossage to get more reasonable\n\tdiagnostics.\n\n\tPR target/13721\n\t* gcc.target/h8300/pr13721.c: New test.", "tree": {"sha": "16486e0032eede7daec136bd56085884b531be21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16486e0032eede7daec136bd56085884b531be21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64c9f2d9972ad359a32f0a97ee0a806c2532db15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c9f2d9972ad359a32f0a97ee0a806c2532db15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64c9f2d9972ad359a32f0a97ee0a806c2532db15", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64c9f2d9972ad359a32f0a97ee0a806c2532db15/comments", "author": null, "committer": null, "parents": [{"sha": "e6e5cd2fd70b73eaa6bead8bbaa25b0e40b4ca55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6e5cd2fd70b73eaa6bead8bbaa25b0e40b4ca55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6e5cd2fd70b73eaa6bead8bbaa25b0e40b4ca55"}], "stats": {"total": 107, "additions": 101, "deletions": 6}, "files": [{"sha": "4d851c0b170fa3c72b91bcf126e2569f74ba7f94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=64c9f2d9972ad359a32f0a97ee0a806c2532db15", "patch": "@@ -1,3 +1,10 @@\n+2020-01-24  Jeff Law  <law@redhat.com>\n+\n+\tPR target/13721\n+\t* config/h8300/h8300.c (h8300_print_operand): Only call byte_reg\n+\tfor REGs.  Call output_operand_lossage to get more reasonable\n+\tdiagnostics.\n+\n 2020-01-24  Andrew Stubbs  <ams@codesourcery.com>\n \n \t* config/gcn/gcn-valu.md (vec_cmp<mode>di): Use"}, {"sha": "def8be344af2b95e823d27665c0a3aebc1f81ac4", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=64c9f2d9972ad359a32f0a97ee0a806c2532db15", "patch": "@@ -1647,40 +1647,52 @@ h8300_print_operand (FILE *file, rtx x, int code)\n     case 's':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", (INTVAL (x)) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\", byte_reg (x, 0));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n     case 't':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", (INTVAL (x) >> 8) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\", byte_reg (x, 1));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n     case 'w':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", INTVAL (x) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\",\n \t\t byte_reg (x, TARGET_H8300 ? 2 : 0));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n     case 'x':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", (INTVAL (x) >> 8) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\",\n \t\t byte_reg (x, TARGET_H8300 ? 3 : 1));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n     case 'y':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", (INTVAL (x) >> 16) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\", byte_reg (x, 0));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n     case 'z':\n       if (GET_CODE (x) == CONST_INT)\n \tfprintf (file, \"#%ld\", (INTVAL (x) >> 24) & 0xff);\n-      else\n+      else if (GET_CODE (x) == REG)\n \tfprintf (file, \"%s\", byte_reg (x, 1));\n+      else\n+\toutput_operand_lossage (\"Expected register or constant integer.\");\n       break;\n \n     default:"}, {"sha": "c0699907f1c7fe67a5373d7b5d17881093b6f6c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=64c9f2d9972ad359a32f0a97ee0a806c2532db15", "patch": "@@ -1,3 +1,8 @@\n+2020-01-24  Jeff Law  <law@redhat.com\n+\n+\tPR target/13721\n+\t* gcc.target/h8300/pr13721.c: New test.\n+\n 2020-01-24  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \tPR debug/92763"}, {"sha": "817b5377448f4cd7691a311071d0e9fd7b81e195", "filename": "gcc/testsuite/gcc.target/h8300/pr13721.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fpr13721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64c9f2d9972ad359a32f0a97ee0a806c2532db15/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fpr13721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fh8300%2Fpr13721.c?ref=64c9f2d9972ad359a32f0a97ee0a806c2532db15", "patch": "@@ -0,0 +1,71 @@\n+static __inline__ __attribute__((always_inline)) void set_bit(int nr, volatile void * addr) \n+{\n+\tvolatile unsigned char *b_addr;\n+\tb_addr = (volatile unsigned char *)addr + ((nr >> 3) ^ 3);\n+\tnr &= 7;\n+\tif (__builtin_constant_p (nr))\t\t\t\t\t  \n+\t{\t\t\t\t\t\t\t\t  \n+\t\tswitch(nr)\t\t\t\t\t\t  \n+\t\t{\t\t\t\t\t\t\t  \n+\t\tcase 0:\t\t\t\t\t\t\t  \n+\t\t\t__asm__(\"bset #0,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 1:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #1,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 2:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #2,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 3:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #3,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 4:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #4,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 5:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #5,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 6:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #6,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t     \t\t\t\t\t  \n+\t\tcase 7:\t\t     \t\t\t\t\t  \n+\t\t\t__asm__(\"bset #7,%0\" :\"+m\"(*b_addr) :\"m\"(*b_addr));\n+\t\t\tbreak;\t\t\t\t\t\t  \n+\t\t}\t\t\t\t\t\t\t  \n+\t}\t\t\t\t\t\t\t\t  \n+\telse\t\t\t\t\t\t\t\t  \n+\t{\t\t\t\t\t\t\t\t  \n+\t\t__asm__(\"bset %w1,%0\"  :\"+m\"(*b_addr)  :\"g\"(nr),\"m\"(*b_addr));\t/* { dg-error \"invalid 'asm'\" \"\" } */\n+\n+\t}\t\t\t\t\t\t\t\t  \n+}\n+\n+static __inline__ __attribute__((always_inline)) int test_bit(int nr, const volatile void * addr)\n+{\n+\treturn (*((volatile unsigned char *)addr + ((nr >> 3) ^ 3)) & (1UL << (nr & 7))) != 0;\n+}\n+\n+struct a {\n+        unsigned long a;\n+};\n+\n+void dummy(struct a *a, int b);\n+\n+int ice_func(struct a *a, int b)\n+{\n+  int c,d;\n+  unsigned int e;\n+\n+  for(c=0;c<b;c++) {\n+    for(d=b; d <= b; d++) {\n+      if (!test_bit(d, &e)) {\n+        dummy(a, d * a->a);\n+        dummy(a, d * a->a);\n+        set_bit(d, &e);\n+      }\n+    }\n+    dummy(a, d * a->a);\n+  }\n+\n+  return 0;\n+}"}]}