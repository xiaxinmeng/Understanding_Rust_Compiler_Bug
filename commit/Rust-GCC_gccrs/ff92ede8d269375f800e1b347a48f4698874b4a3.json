{"sha": "ff92ede8d269375f800e1b347a48f4698874b4a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY5MmVkZThkMjY5Mzc1ZjgwMGUxYjM0N2E0OGY0Njk4ODc0YjRhMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-02T10:49:12Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-03-02T10:49:12Z"}, "message": "vrp: Improve register_edge_assert_for [PR95757]\n\nThe Wstringop-overflow-25.c testcase doesn't emit one of the expected\nwarnings on targets that don't do short curcuiting due to target costs\n(or e.g. with --param=logical-op-non-short-circuit=0 on all targets).\n\nThe problem is that only reassoc2 optimizes:\n  _49 ={v} unsigned_value_source;\n  if (_49 == 0)\n    goto <bb 7>; [50.00%]\n  else\n    goto <bb 5>; [50.00%]\n\n  <bb 5> [local count: 536870913]:\n  if (_49 > 2)\n    goto <bb 7>; [50.00%]\n  else\n    goto <bb 6>; [50.00%]\n\n  <bb 6> [local count: 268435457]:\n  _53 = _49 + 1;\ninto:\n  _49 ={v} unsigned_value_source;\n  _48 = _49 + 18446744073709551615;\n  _1 = _48 > 1;\n  if (_1 != 0)\n    goto <bb 6>; [50.00%]\n  else\n    goto <bb 5>; [50.00%]\n\n  <bb 5> [local count: 268435457]:\n  _53 = _49 + 1;\n(but, note the _1 = _48 > 1; if (_1 != 0)),\nthen dom3 is run and because of that if (_1 != 0) vs. if (_48 > 1) doesn't\nregister edge asserts for _48 and _49) and so we don't get\nSSA_NAME_RANGE_INFO for _53 (and ditto for vrp2) and only afterwards comes\nforwprop4 that canonicalizes it to if (_48 > 1).  While with\n--param=logical-op-non-short-circuit=1 it is already reassoc1 that optimizes\nit and forwprop3 that propagates it, so we have on the SSA_NAME\ncorresponding to _53 above SSA_NAME_RANGE_INFO and during expansion we warn.\n\nThe following patch fixes it by handling those not yet propagated\ncomparisons into GIMPLE_COND in register_edge_assert_for.  We already\nhave all the infrastructure there to handle the --param=logical-op-non-short-circuit=1\n| and &s.\n\n2021-03-02  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/95757\n\t* tree-vrp.c (register_edge_assert_for): Remove superfluous ()s around\n\tcondition.  Call register_edge_assert_for_1 for == 0, != 0, == 1 and\n\t!= 1 comparisons if name is lhs of a comparison.", "tree": {"sha": "a77af38a16da2a77218273664f41647e781821da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a77af38a16da2a77218273664f41647e781821da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff92ede8d269375f800e1b347a48f4698874b4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff92ede8d269375f800e1b347a48f4698874b4a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff92ede8d269375f800e1b347a48f4698874b4a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff92ede8d269375f800e1b347a48f4698874b4a3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d39d140913d17f3c207dc3fb4fd45dd90e4360", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34d39d140913d17f3c207dc3fb4fd45dd90e4360", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34d39d140913d17f3c207dc3fb4fd45dd90e4360"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "62b90079a03f3ca1de8c5f51d7105901995b00da", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff92ede8d269375f800e1b347a48f4698874b4a3/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff92ede8d269375f800e1b347a48f4698874b4a3/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ff92ede8d269375f800e1b347a48f4698874b4a3", "patch": "@@ -2180,8 +2180,8 @@ register_edge_assert_for (tree name, edge e,\n   /* In the case of NAME == 1 or NAME != 0, for BIT_AND_EXPR defining\n      statement of NAME we can assert both operands of the BIT_AND_EXPR\n      have nonzero value.  */\n-  if (((comp_code == EQ_EXPR && integer_onep (val))\n-       || (comp_code == NE_EXPR && integer_zerop (val))))\n+  if ((comp_code == EQ_EXPR && integer_onep (val))\n+      || (comp_code == NE_EXPR && integer_zerop (val)))\n     {\n       gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n \n@@ -2193,28 +2193,36 @@ register_edge_assert_for (tree name, edge e,\n \t  register_edge_assert_for_1 (op0, NE_EXPR, e, asserts);\n \t  register_edge_assert_for_1 (op1, NE_EXPR, e, asserts);\n \t}\n+      else if (is_gimple_assign (def_stmt)\n+\t       && (TREE_CODE_CLASS (gimple_assign_rhs_code (def_stmt))\n+\t\t   == tcc_comparison))\n+\tregister_edge_assert_for_1 (name, NE_EXPR, e, asserts);\n     }\n \n   /* In the case of NAME == 0 or NAME != 1, for BIT_IOR_EXPR defining\n      statement of NAME we can assert both operands of the BIT_IOR_EXPR\n      have zero value.  */\n-  if (((comp_code == EQ_EXPR && integer_zerop (val))\n-       || (comp_code == NE_EXPR && integer_onep (val))))\n+  if ((comp_code == EQ_EXPR && integer_zerop (val))\n+      || (comp_code == NE_EXPR\n+\t  && integer_onep (val)\n+\t  && TYPE_PRECISION (TREE_TYPE (name)) == 1))\n     {\n       gimple *def_stmt = SSA_NAME_DEF_STMT (name);\n \n       /* For BIT_IOR_EXPR only if NAME == 0 both operands have\n \t necessarily zero value, or if type-precision is one.  */\n       if (is_gimple_assign (def_stmt)\n-\t  && (gimple_assign_rhs_code (def_stmt) == BIT_IOR_EXPR\n-\t      && (TYPE_PRECISION (TREE_TYPE (name)) == 1\n-\t          || comp_code == EQ_EXPR)))\n+\t  && gimple_assign_rhs_code (def_stmt) == BIT_IOR_EXPR)\n \t{\n \t  tree op0 = gimple_assign_rhs1 (def_stmt);\n \t  tree op1 = gimple_assign_rhs2 (def_stmt);\n \t  register_edge_assert_for_1 (op0, EQ_EXPR, e, asserts);\n \t  register_edge_assert_for_1 (op1, EQ_EXPR, e, asserts);\n \t}\n+      else if (is_gimple_assign (def_stmt)\n+\t       && (TREE_CODE_CLASS (gimple_assign_rhs_code (def_stmt))\n+\t\t   == tcc_comparison))\n+\tregister_edge_assert_for_1 (name, EQ_EXPR, e, asserts);\n     }\n \n   /* Sometimes we can infer ranges from (NAME & MASK) == VALUE.  */"}]}