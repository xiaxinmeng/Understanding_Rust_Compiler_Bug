{"sha": "cf6956bba33b7a5f29035ceec177502864a5bf4c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2Y2OTU2YmJhMzNiN2E1ZjI5MDM1Y2VlYzE3NzUwMjg2NGE1YmY0Yw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-03T13:06:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2013-01-03T13:06:45Z"}, "message": "[multiple changes]\n\n2013-01-03  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* aspects.adb, aspects.ads: Add Aspect_Abstract_State to all the\n\trelevant tables.\n\t* einfo.ads, einfo.adb: Add Integrity_Level and Refined_State to\n\tthe description of fields (Abstract_States): New routine.\n\t(Integrity_Level): New routine.\n\t(Has_Property): New routine.\n\t(Is_Input_State): New routine.\n\t(Is_Null_State): New routine.\n\t(Is_Output_State): New routine.\n\t(Is_Volatile_State): New routine.\n\t(Refined_State): New routine.\n\t(Set_Abstract_States): New routine.\n\t(Set_Integrity_Level): New routine.\n\t(Set_Refined_State): New routine.\n\t(Write_Field8_Name): Add proper output for E_Abstract_State.\n\t(Write_Field9_Name): Add proper output for E_Abstract_State.\n\t(Write_Field25_Name): Add proper output for E_Package.\n\t* lib-xref.ads: Add new letter for an abstract state.\n\t* par-prag.adb: Add pragma Abstract_State to the list of pragma\n\tthat do not need special processing by the parser.\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Convert\n\taspect Abstract_State into a pragma without any form\n\tof legality checks. The work is done by Analyze_Pragma.\n\t(Check_Aspect_At_Freeze_Point): Aspect Abstract_State does not\n\trequire delayed analysis.\n\t* sem_prag.adb: Add a value for pragma Abstract_State in table\n\tSig_Flags.\n\t(Analyze_Pragma): Add legality checks for pragma\n\tAbstract_State. Analysis of individual states introduces a state\n\tabstraction entity into the visibility chain.\n\t* snames.ads-tmpl: Add new names for abstract state and\n\tintegrity. Add new pragma id for abstract state.\n\n2013-01-03  Bob Duff  <duff@adacore.com>\n\n\t* table.adb (Reallocate): Calculate new Length in\n\tLong_Integer to avoid overflow.\n\n2013-01-03  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch3.adb, sinfo.ads, freeze.adb, sem_ch4.adb, exp_aggr.adb\n\t(Sem_Ch3.Analyze_Object_Declaration): Set Ekind early so that\n\tit is set properly when expanding the initialization expression.\n\t(Freeze.Check_Address_Clause): Transfer initialization expression\n\tto an assignment in the freeze actions, so that the object is\n\tinitialized only after being elaborated by GIGI.\n\t(Sinfo (comments), Sem_Ch4.Analyze_Expression_With_Actions): Allow\n\ta Null_Statement as the expression in an Expression_With_Actions.\n\t(Exp_Aggr.Collect_Initialization_Statements): New subprogram\n\tshared by expansion of record and array aggregates, used to\n\tcapture statements for an aggregate used to initalize an object\n\tinto an Expression_With_Actions (which acts as a container for\n\ta list of actions).\n\t(Exp_Aggr.Convert_Aggr_In_Obj_Decl): Use the above to\n\tcapture initialization statements, instead of the previously\n\texisting loop which left freeze nodes out of the capturing\n\tconstruct (causing out of order elaboration crashes in GIGI).\n\t(Exp_Aggr.Expand_Array_Aggregate):  Use the above to capture\n\tinitialization statements (this was previously not done for\n\tarrays).  Also do not unconditionally prevent in place expansion\n\tfor an object with address clause.\n\nFrom-SVN: r194851", "tree": {"sha": "28b249e44ee54c1e539f338da17e2d704c158b10", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28b249e44ee54c1e539f338da17e2d704c158b10"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf6956bba33b7a5f29035ceec177502864a5bf4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6956bba33b7a5f29035ceec177502864a5bf4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf6956bba33b7a5f29035ceec177502864a5bf4c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf6956bba33b7a5f29035ceec177502864a5bf4c/comments", "author": null, "committer": null, "parents": [{"sha": "90bb7d7ab2ccd6b7c9c311867e319057b402a075", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90bb7d7ab2ccd6b7c9c311867e319057b402a075", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90bb7d7ab2ccd6b7c9c311867e319057b402a075"}], "stats": {"total": 819, "additions": 718, "deletions": 101}, "files": [{"sha": "f7cf5b7d76d7792a89d0e85679d61b73be2e0fab", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -1,3 +1,67 @@\n+2013-01-03  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* aspects.adb, aspects.ads: Add Aspect_Abstract_State to all the\n+\trelevant tables.\n+\t* einfo.ads, einfo.adb: Add Integrity_Level and Refined_State to\n+\tthe description of fields (Abstract_States): New routine.\n+\t(Integrity_Level): New routine.\n+\t(Has_Property): New routine.\n+\t(Is_Input_State): New routine.\n+\t(Is_Null_State): New routine.\n+\t(Is_Output_State): New routine.\n+\t(Is_Volatile_State): New routine.\n+\t(Refined_State): New routine.\n+\t(Set_Abstract_States): New routine.\n+\t(Set_Integrity_Level): New routine.\n+\t(Set_Refined_State): New routine.\n+\t(Write_Field8_Name): Add proper output for E_Abstract_State.\n+\t(Write_Field9_Name): Add proper output for E_Abstract_State.\n+\t(Write_Field25_Name): Add proper output for E_Package.\n+\t* lib-xref.ads: Add new letter for an abstract state.\n+\t* par-prag.adb: Add pragma Abstract_State to the list of pragma\n+\tthat do not need special processing by the parser.\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Convert\n+\taspect Abstract_State into a pragma without any form\n+\tof legality checks. The work is done by Analyze_Pragma.\n+\t(Check_Aspect_At_Freeze_Point): Aspect Abstract_State does not\n+\trequire delayed analysis.\n+\t* sem_prag.adb: Add a value for pragma Abstract_State in table\n+\tSig_Flags.\n+\t(Analyze_Pragma): Add legality checks for pragma\n+\tAbstract_State. Analysis of individual states introduces a state\n+\tabstraction entity into the visibility chain.\n+\t* snames.ads-tmpl: Add new names for abstract state and\n+\tintegrity. Add new pragma id for abstract state.\n+\n+2013-01-03  Bob Duff  <duff@adacore.com>\n+\n+\t* table.adb (Reallocate): Calculate new Length in\n+\tLong_Integer to avoid overflow.\n+\n+2013-01-03  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch3.adb, sinfo.ads, freeze.adb, sem_ch4.adb, exp_aggr.adb\n+\t(Sem_Ch3.Analyze_Object_Declaration): Set Ekind early so that\n+\tit is set properly when expanding the initialization expression.\n+\t(Freeze.Check_Address_Clause): Transfer initialization expression\n+\tto an assignment in the freeze actions, so that the object is\n+\tinitialized only after being elaborated by GIGI.\n+\t(Sinfo (comments), Sem_Ch4.Analyze_Expression_With_Actions): Allow\n+\ta Null_Statement as the expression in an Expression_With_Actions.\n+\t(Exp_Aggr.Collect_Initialization_Statements): New subprogram\n+\tshared by expansion of record and array aggregates, used to\n+\tcapture statements for an aggregate used to initalize an object\n+\tinto an Expression_With_Actions (which acts as a container for\n+\ta list of actions).\n+\t(Exp_Aggr.Convert_Aggr_In_Obj_Decl): Use the above to\n+\tcapture initialization statements, instead of the previously\n+\texisting loop which left freeze nodes out of the capturing\n+\tconstruct (causing out of order elaboration crashes in GIGI).\n+\t(Exp_Aggr.Expand_Array_Aggregate):  Use the above to capture\n+\tinitialization statements (this was previously not done for\n+\tarrays).  Also do not unconditionally prevent in place expansion\n+\tfor an object with address clause.\n+\n 2013-01-03  Thomas Quinot  <quinot@adacore.com>\n \n \t* gnat_rm.texi, freeze.adb (Check_Component_Storage_Order): Check that"}, {"sha": "5156b9dd106fb4d4198e4c6c0ebdcecd7cd64b7e", "filename": "gcc/ada/aspects.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Faspects.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Faspects.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -238,6 +238,7 @@ package body Aspects is\n \n    Canonical_Aspect : constant array (Aspect_Id) of Aspect_Id :=\n    (No_Aspect                           => No_Aspect,\n+    Aspect_Abstract_State               => Aspect_Abstract_State,\n     Aspect_Ada_2005                     => Aspect_Ada_2005,\n     Aspect_Ada_2012                     => Aspect_Ada_2005,\n     Aspect_Address                      => Aspect_Address,"}, {"sha": "c2e3d67bb0094661960150dffac7ab221382552d", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -74,6 +74,7 @@ package Aspects is\n \n    type Aspect_Id is\n      (No_Aspect,                            -- Dummy entry for no aspect\n+      Aspect_Abstract_State,                -- GNAT\n       Aspect_Address,\n       Aspect_Alignment,\n       Aspect_Attach_Handler,\n@@ -221,7 +222,8 @@ package Aspects is\n    --  The following array identifies all implementation defined aspects\n \n    Impl_Defined_Aspects : constant array (Aspect_Id) of Boolean :=\n-                            (Aspect_Ada_2005                 => True,\n+                            (Aspect_Abstract_State           => True,\n+                             Aspect_Ada_2005                 => True,\n                              Aspect_Ada_2012                 => True,\n                              Aspect_Compiler_Unit            => True,\n                              Aspect_Contract_Case            => True,\n@@ -305,6 +307,7 @@ package Aspects is\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n                        (No_Aspect                      => Optional,\n+                        Aspect_Abstract_State          => Expression,\n                         Aspect_Address                 => Expression,\n                         Aspect_Alignment               => Expression,\n                         Aspect_Attach_Handler          => Expression,\n@@ -370,6 +373,7 @@ package Aspects is\n \n    Aspect_Names : constant array (Aspect_Id) of Name_Id := (\n      No_Aspect                           => No_Name,\n+     Aspect_Abstract_State               => Name_Abstract_State,\n      Aspect_Ada_2005                     => Name_Ada_2005,\n      Aspect_Ada_2012                     => Name_Ada_2012,\n      Aspect_Address                      => Name_Address,"}, {"sha": "a0d07c27fa0f93631a381dfac8cb94a463f05a8c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 157, "deletions": 27, "changes": 184, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -76,6 +76,7 @@ package body Einfo is\n    --    Associated_Node_For_Itype       Node8\n    --    Dependent_Instances             Elist8\n    --    Hiding_Loop_Variable            Node8\n+   --    Integrity_Level                 Uint8\n    --    Mechanism                       Uint8 (but returns Mechanism_Type)\n    --    Normalized_First_Bit            Uint8\n    --    Postcondition_Proc              Node8\n@@ -84,6 +85,7 @@ package body Einfo is\n \n    --    Class_Wide_Type                 Node9\n    --    Current_Value                   Node9\n+   --    Refined_State                   Node9\n    --    Renaming_Map                    Uint9\n \n    --    Direct_Primitive_Operations     Elist10\n@@ -535,6 +537,12 @@ package body Einfo is\n    -- Local subprograms --\n    -----------------------\n \n+   function Has_Property\n+     (State    : Entity_Id;\n+      Prop_Nam : Name_Id) return Boolean;\n+   --  Determine whether abstract state State has a particular property denoted\n+   --  by the name Prop_Nam.\n+\n    function Rep_Clause (Id : E; Rep_Name : Name_Id) return N;\n    --  Returns the attribute definition clause for Id whose name is Rep_Name.\n    --  Returns Empty if no matching attribute definition clause found for Id.\n@@ -549,6 +557,41 @@ package body Einfo is\n       return F'Val (UI_To_Int (Uint10 (Base_Type (Id))));\n    end Float_Rep;\n \n+   ------------------\n+   -- Has_Property --\n+   ------------------\n+\n+   function Has_Property\n+     (State    : Entity_Id;\n+      Prop_Nam : Name_Id) return Boolean\n+   is\n+      Par  : constant Node_Id := Parent (State);\n+      Prop : Node_Id;\n+\n+   begin\n+      pragma Assert (Ekind (State) = E_Abstract_State);\n+\n+      --  States with properties appear as extension aggregates in the tree\n+\n+      if Nkind (Par) = N_Extension_Aggregate then\n+         if Prop_Nam = Name_Integrity then\n+            return Present (Component_Associations (Par));\n+\n+         else\n+            Prop := First (Expressions (Par));\n+            while Present (Prop) loop\n+               if Chars (Prop) = Prop_Nam then\n+                  return True;\n+               end if;\n+\n+               Next (Prop);\n+            end loop;\n+         end if;\n+      end if;\n+\n+      return False;\n+   end Has_Property;\n+\n    ----------------\n    -- Rep_Clause --\n    ----------------\n@@ -575,6 +618,12 @@ package body Einfo is\n    -- Attribute Access Functions --\n    --------------------------------\n \n+   function Abstract_States (Id : E) return L is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      return Elist25 (Id);\n+   end Abstract_States;\n+\n    function Accept_Address (Id : E) return L is\n    begin\n       return Elist21 (Id);\n@@ -1662,6 +1711,12 @@ package body Einfo is\n       return Node28 (Id);\n    end Initialization_Statements;\n \n+   function Integrity_Level (Id : E) return U is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      return Uint8 (Id);\n+   end Integrity_Level;\n+\n    function Inner_Instances (Id : E) return L is\n    begin\n       return Elist23 (Id);\n@@ -2534,6 +2589,12 @@ package body Einfo is\n       return Flag227 (Id);\n    end Referenced_As_Out_Parameter;\n \n+   function Refined_State (Id : E) return E is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      return Node9 (Id);\n+   end Refined_State;\n+\n    function Register_Exception_Call (Id : E) return N is\n    begin\n       pragma Assert (Ekind (Id) = E_Exception);\n@@ -3084,6 +3145,12 @@ package body Einfo is\n    --  it is possible to add assertions that specifically include the E_Void\n    --  possibility, but in some cases, we just omit the assertions.\n \n+   procedure Set_Abstract_States (Id : E; V : L) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Package);\n+      Set_Elist25 (Id, V);\n+   end Set_Abstract_States;\n+\n    procedure Set_Accept_Address (Id : E; V : L) is\n    begin\n       Set_Elist21 (Id, V);\n@@ -4200,6 +4267,12 @@ package body Einfo is\n       Set_Node28 (Id, V);\n    end Set_Initialization_Statements;\n \n+   procedure Set_Integrity_Level (Id : E; V : Uint) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      Set_Uint8 (Id, V);\n+   end Set_Integrity_Level;\n+\n    procedure Set_Inner_Instances (Id : E; V : L) is\n    begin\n       Set_Elist23 (Id, V);\n@@ -5110,6 +5183,12 @@ package body Einfo is\n       Set_Flag227 (Id, V);\n    end Set_Referenced_As_Out_Parameter;\n \n+   procedure Set_Refined_State (Id : E; V : E) is\n+   begin\n+      pragma Assert (Ekind (Id) = E_Abstract_State);\n+      Set_Node9 (Id, V);\n+   end Set_Refined_State;\n+\n    procedure Set_Register_Exception_Call (Id : E; V : N) is\n    begin\n       pragma Assert (Ekind (Id) = E_Exception);\n@@ -6364,6 +6443,37 @@ package body Einfo is\n         and then Chars (Id) = Name_uFinalizer;\n    end Is_Finalizer;\n \n+   --------------------\n+   -- Is_Input_State --\n+   --------------------\n+\n+   function Is_Input_State (Id : E) return B is\n+   begin\n+      return\n+        Ekind (Id) = E_Abstract_State and then Has_Property (Id, Name_Input);\n+   end Is_Input_State;\n+\n+   -------------------\n+   -- Is_Null_State --\n+   -------------------\n+\n+   function Is_Null_State (Id : E) return B is\n+   begin\n+      return\n+        Ekind (Id) = E_Abstract_State\n+          and then Nkind (Parent (Id)) = N_Null;\n+   end Is_Null_State;\n+\n+   ---------------------\n+   -- Is_Output_State --\n+   ---------------------\n+\n+   function Is_Output_State (Id : E) return B is\n+   begin\n+      return\n+        Ekind (Id) = E_Abstract_State and then Has_Property (Id, Name_Output);\n+   end Is_Output_State;\n+\n    -----------------------------------\n    -- Is_Package_Or_Generic_Package --\n    -----------------------------------\n@@ -6376,33 +6486,6 @@ package body Einfo is\n         Ekind (Id) = E_Generic_Package;\n    end Is_Package_Or_Generic_Package;\n \n-   ------------------------\n-   -- Predicate_Function --\n-   ------------------------\n-\n-   function Predicate_Function (Id : E) return E is\n-      S : Entity_Id;\n-\n-   begin\n-      pragma Assert (Is_Type (Id));\n-\n-      if No (Subprograms_For_Type (Id)) then\n-         return Empty;\n-\n-      else\n-         S := Subprograms_For_Type (Id);\n-         while Present (S) loop\n-            if Has_Predicates (S) then\n-               return S;\n-            else\n-               S := Subprograms_For_Type (S);\n-            end if;\n-         end loop;\n-\n-         return Empty;\n-      end if;\n-   end Predicate_Function;\n-\n    ---------------\n    -- Is_Prival --\n    ---------------\n@@ -6534,6 +6617,17 @@ package body Einfo is\n           and then Is_Task_Type (Corresponding_Concurrent_Type (Id));\n    end Is_Task_Record_Type;\n \n+   -----------------------\n+   -- Is_Volatile_State --\n+   -----------------------\n+\n+   function Is_Volatile_State (Id : E) return B is\n+   begin\n+      return\n+        Ekind (Id) = E_Abstract_State\n+          and then Has_Property (Id, Name_Volatile);\n+   end Is_Volatile_State;\n+\n    ------------------------\n    -- Is_Wrapper_Package --\n    ------------------------\n@@ -6917,6 +7011,33 @@ package body Einfo is\n       return Ekind (Id);\n    end Parameter_Mode;\n \n+   ------------------------\n+   -- Predicate_Function --\n+   ------------------------\n+\n+   function Predicate_Function (Id : E) return E is\n+      S : Entity_Id;\n+\n+   begin\n+      pragma Assert (Is_Type (Id));\n+\n+      if No (Subprograms_For_Type (Id)) then\n+         return Empty;\n+\n+      else\n+         S := Subprograms_For_Type (Id);\n+         while Present (S) loop\n+            if Has_Predicates (S) then\n+               return S;\n+            else\n+               S := Subprograms_For_Type (S);\n+            end if;\n+         end loop;\n+\n+         return Empty;\n+      end if;\n+   end Predicate_Function;\n+\n    -------------------------\n    -- Present_In_Rep_Item --\n    -------------------------\n@@ -7835,6 +7956,9 @@ package body Einfo is\n          when E_Variable                                   =>\n             Write_Str (\"Hiding_Loop_Variable\");\n \n+         when E_Abstract_State                             =>\n+            Write_Str (\"Integrity_Level\");\n+\n          when Formal_Kind                                  |\n               E_Function                                   |\n               E_Subprogram_Body                            =>\n@@ -7868,6 +7992,9 @@ package body Einfo is\n          when Object_Kind                                  =>\n             Write_Str (\"Current_Value\");\n \n+         when E_Abstract_State                             =>\n+            Write_Str (\"Refined_State\");\n+\n          when E_Function                                   |\n               E_Generic_Function                           |\n               E_Generic_Package                            |\n@@ -8594,6 +8721,9 @@ package body Einfo is\n    procedure Write_Field25_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Package                                    =>\n+            Write_Str (\"Abstract_States\");\n+\n          when E_Variable                                   =>\n             Write_Str (\"Debug_Renaming_Link\");\n "}, {"sha": "2f8e96dd18a7b0a687953525d19d91e45ce5930e", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -327,6 +327,10 @@ package Einfo is\n --  type, and if assertions are enabled, an attempt to set the attribute on a\n --  subtype will raise an assert error.\n \n+--    Abstract_States (Elist25)\n+--       Defined for E_Package entities. Contains a list of all the abstract\n+--       states declared by the related package.\n+\n --    Accept_Address (Elist21)\n --       Defined in entries. If an accept has a statement sequence, then an\n --       address variable is created, which is used to hold the address of the\n@@ -1907,18 +1911,6 @@ package Einfo is\n --       that we still have a concrete type. For entities other than types,\n --       returns the entity unchanged.\n \n---    Interface_Alias (Node25)\n---       Defined in subprograms that cover a primitive operation of an abstract\n---       interface type. Can be set only if the Is_Hidden flag is also set,\n---       since such entities are always hidden. Points to its associated\n---       interface subprogram. It is used to register the subprogram in\n---       secondary dispatch table of the interface (Ada 2005: AI-251).\n-\n---    Interfaces (Elist25)\n---       Defined in record types and subtypes. List of abstract interfaces\n---       implemented by a tagged type that are not already implemented by the\n---       ancestors (Ada 2005: AI-251).\n-\n --    In_Package_Body (Flag48)\n --       Defined in package entities. Set on the entity that denotes the\n --       package (the defining occurrence of the package declaration) while\n@@ -1943,6 +1935,18 @@ package Einfo is\n --       instantiated within the given generic. Used to diagnose circular\n --       instantiations.\n \n+--    Integrity_Level (Uint8)\n+--       Defined for E_Abstract_State entities. Contains the numerical value of\n+--       the integrity level state property. A value of Uint_0 designates a non\n+--       existent integrity.\n+\n+--    Interface_Alias (Node25)\n+--       Defined in subprograms that cover a primitive operation of an abstract\n+--       interface type. Can be set only if the Is_Hidden flag is also set,\n+--       since such entities are always hidden. Points to its associated\n+--       interface subprogram. It is used to register the subprogram in\n+--       secondary dispatch table of the interface (Ada 2005: AI-251).\n+\n --    Interface_Name (Node21)\n --       Defined in constants, variables, exceptions, functions, procedures,\n --       packages, components (JGNAT only), discriminants (JGNAT only), and\n@@ -1967,6 +1971,11 @@ package Einfo is\n --       External_Name of the imported Java field (which is generally needed,\n --       because Java names are case sensitive).\n \n+--    Interfaces (Elist25)\n+--       Defined in record types and subtypes. List of abstract interfaces\n+--       implemented by a tagged type that are not already implemented by the\n+--       ancestors (Ada 2005: AI-251).\n+\n --    Invariant_Procedure (synthesized)\n --       Defined in types and subtypes. Set for private types if one or more\n --       Invariant, or Invariant'Class, or inherited Invariant'Class aspects\n@@ -2329,6 +2338,10 @@ package Einfo is\n --       inherited by their instances. It is also set on the body entities\n --       of inlined subprograms. See also Has_Pragma_Inline.\n \n+--    Is_Input_State (synthesized)\n+--       Applies to all entities, true for abstract states that are subject to\n+--       property Input.\n+\n --    Is_Instantiated (Flag126)\n --       Defined in generic packages and generic subprograms. Set if the unit\n --       is instantiated from somewhere in the extended main source unit. This\n@@ -2523,6 +2536,10 @@ package Einfo is\n --       but there is no need to call such procedures within a compilation\n --       unit, and this flag is used to suppress such calls.\n \n+--    Is_Null_State (synthesized)\n+--       Applies to all entities, true for an abstract state declared with\n+--       keyword null.\n+\n --    Is_Numeric_Type (synthesized)\n --       Applies to all entities, true for all numeric types and subtypes\n --       (integer, fixed, float).\n@@ -2550,6 +2567,10 @@ package Einfo is\n --       Applies to all entities, true for ordinary fixed point types and\n --       subtypes.\n \n+--    Is_Output_State (synthesized)\n+--       Applies to all entities, true for abstract states that are subject to\n+--       property Output.\n+\n --    Is_Package_Or_Generic_Package (synthesized)\n --       Applies to all entities. True for packages and generic packages.\n --       False for all other entities.\n@@ -2895,6 +2916,10 @@ package Einfo is\n --       optimizations on volatile objects should test Treat_As_Volatile\n --       rather than testing this flag.\n \n+--    Is_Volatile_State (synthesized)\n+--       Applies to all entities, true for abstract states that are subject to\n+--       property Volatile.\n+\n --    Is_Wrapper_Package (synthesized)\n --       Defined in package entities. Indicates that the package has been\n --       created as a wrapper for a subprogram instantiation.\n@@ -3441,6 +3466,10 @@ package Einfo is\n --       we have a separate warning for variables that are only assigned and\n --       never read, and out parameters are a special case.\n \n+--    Refined_State (Node9)\n+--       Defined in E_Abstract_State entities. Contains the entity of the\n+--       abstract state completion which is usually foung in package bodies.\n+\n --    Register_Exception_Call (Node20)\n --       Defined in exception entities. When an exception is declared,\n --       a call is expanded to Register_Exception. This field points to\n@@ -4400,11 +4429,16 @@ package Einfo is\n       --  A task body. This entity serves almost no function, since all\n       --  semantic analysis uses the protected entity (E_Task_Type).\n \n-      E_Subprogram_Body\n+      E_Subprogram_Body,\n       --  A subprogram body. Used when a subprogram has a separate declaration\n       --  to represent the entity for the body. This entity serves almost no\n       --  function, since all semantic analysis uses the subprogram entity\n       --  for the declaration (E_Function or E_Procedure).\n+\n+      E_Abstract_State\n+      --  A state abstraction. Used to designate entities introduced by aspect\n+      --  or pragma Abstract_State. The entity carries the various properties\n+      --  of the state.\n    );\n \n    for Entity_Kind'Size use 8;\n@@ -4972,6 +5006,14 @@ package Einfo is\n    -- Applicable attributes by entity kind --\n    ------------------------------------------\n \n+   --  E_Abstract_State\n+   --    Integrity_Level                     (Uint8)\n+   --    Refined_State                       (Node9)\n+   --    Is_Input_State                      (synth)\n+   --    Is_Null_State                       (synth)\n+   --    Is_Output_State                     (synth)\n+   --    Is_Volatile_State                   (synth)\n+\n    --  E_Access_Protected_Subprogram_Type\n    --    Equivalent_Type                     (Node18)\n    --    Directly_Designated_Type            (Node20)\n@@ -5480,8 +5522,9 @@ package Einfo is\n    --    Inner_Instances                     (Elist23)  (generic case only)\n    --    Limited_View                        (Node23)   (non-generic/instance)\n    --    Finalizer                           (Node24)   (non-generic case only)\n-   --    Current_Use_Clause                  (Node27)\n+   --    Abstract_States                     (Elist25)\n    --    Package_Instantiation               (Node26)\n+   --    Current_Use_Clause                  (Node27)\n    --    Delay_Subprogram_Descriptors        (Flag50)\n    --    Body_Needed_For_SAL                 (Flag40)\n    --    Discard_Names                       (Flag88)\n@@ -6040,6 +6083,7 @@ package Einfo is\n    --  section contains the functions used to obtain attribute values which\n    --  correspond to values in fields or flags in the entity itself.\n \n+   function Abstract_States                     (Id : E) return L;\n    function Accept_Address                      (Id : E) return L;\n    function Access_Disp_Table                   (Id : E) return L;\n    function Actual_Subtype                      (Id : E) return E;\n@@ -6226,6 +6270,7 @@ package Einfo is\n    function In_Private_Part                     (Id : E) return B;\n    function In_Use                              (Id : E) return B;\n    function Initialization_Statements           (Id : E) return N;\n+   function Integrity_Level                     (Id : E) return U;\n    function Inner_Instances                     (Id : E) return L;\n    function Interface_Alias                     (Id : E) return E;\n    function Interface_Name                      (Id : E) return N;\n@@ -6380,6 +6425,7 @@ package Einfo is\n    function Referenced                          (Id : E) return B;\n    function Referenced_As_LHS                   (Id : E) return B;\n    function Referenced_As_Out_Parameter         (Id : E) return B;\n+   function Refined_State                       (Id : E) return E;\n    function Register_Exception_Call             (Id : E) return N;\n    function Related_Array_Object                (Id : E) return E;\n    function Related_Expression                  (Id : E) return N;\n@@ -6524,6 +6570,9 @@ package Einfo is\n    function Is_Discriminal                      (Id : E) return B;\n    function Is_Dynamic_Scope                    (Id : E) return B;\n    function Is_Finalizer                        (Id : E) return B;\n+   function Is_Input_State                      (Id : E) return B;\n+   function Is_Null_State                       (Id : E) return B;\n+   function Is_Output_State                     (Id : E) return B;\n    function Is_Package_Or_Generic_Package       (Id : E) return B;\n    function Is_Prival                           (Id : E) return B;\n    function Is_Protected_Component              (Id : E) return B;\n@@ -6534,6 +6583,7 @@ package Einfo is\n    function Is_Synchronized_Interface           (Id : E) return B;\n    function Is_Task_Interface                   (Id : E) return B;\n    function Is_Task_Record_Type                 (Id : E) return B;\n+   function Is_Volatile_State                   (Id : E) return B;\n    function Is_Wrapper_Package                  (Id : E) return B;\n    function Last_Formal                         (Id : E) return E;\n    function Machine_Emax_Value                  (Id : E) return U;\n@@ -6634,6 +6684,7 @@ package Einfo is\n    -- Attribute Set Procedures --\n    ------------------------------\n \n+   procedure Set_Abstract_States                 (Id : E; V : L);\n    procedure Set_Accept_Address                  (Id : E; V : L);\n    procedure Set_Access_Disp_Table               (Id : E; V : L);\n    procedure Set_Actual_Subtype                  (Id : E; V : E);\n@@ -6819,6 +6870,7 @@ package Einfo is\n    procedure Set_In_Private_Part                 (Id : E; V : B := True);\n    procedure Set_In_Use                          (Id : E; V : B := True);\n    procedure Set_Initialization_Statements       (Id : E; V : N);\n+   procedure Set_Integrity_Level                 (Id : E; V : U);\n    procedure Set_Inner_Instances                 (Id : E; V : L);\n    procedure Set_Interface_Alias                 (Id : E; V : E);\n    procedure Set_Interface_Name                  (Id : E; V : N);\n@@ -6979,6 +7031,7 @@ package Einfo is\n    procedure Set_Referenced                      (Id : E; V : B := True);\n    procedure Set_Referenced_As_LHS               (Id : E; V : B := True);\n    procedure Set_Referenced_As_Out_Parameter     (Id : E; V : B := True);\n+   procedure Set_Refined_State                   (Id : E; V : E);\n    procedure Set_Register_Exception_Call         (Id : E; V : N);\n    procedure Set_Related_Array_Object            (Id : E; V : E);\n    procedure Set_Related_Expression              (Id : E; V : N);\n@@ -7317,6 +7370,7 @@ package Einfo is\n    --  subprograms meeting the requirements documented in the section on\n    --  XEINFO may be referenced in this section.\n \n+   pragma Inline (Abstract_States);\n    pragma Inline (Accept_Address);\n    pragma Inline (Access_Disp_Table);\n    pragma Inline (Actual_Subtype);\n@@ -7499,6 +7553,7 @@ package Einfo is\n    pragma Inline (In_Package_Body);\n    pragma Inline (In_Private_Part);\n    pragma Inline (In_Use);\n+   pragma Inline (Integrity_Level);\n    pragma Inline (Inner_Instances);\n    pragma Inline (Interface_Alias);\n    pragma Inline (Interface_Name);\n@@ -7702,6 +7757,7 @@ package Einfo is\n    pragma Inline (Referenced);\n    pragma Inline (Referenced_As_LHS);\n    pragma Inline (Referenced_As_Out_Parameter);\n+   pragma Inline (Refined_State);\n    pragma Inline (Register_Exception_Call);\n    pragma Inline (Related_Array_Object);\n    pragma Inline (Related_Expression);\n@@ -7766,6 +7822,7 @@ package Einfo is\n    pragma Inline (Init_Esize);\n    pragma Inline (Init_RM_Size);\n \n+   pragma Inline (Set_Abstract_States);\n    pragma Inline (Set_Accept_Address);\n    pragma Inline (Set_Access_Disp_Table);\n    pragma Inline (Set_Actual_Subtype);\n@@ -7947,6 +8004,7 @@ package Einfo is\n    pragma Inline (Set_In_Private_Part);\n    pragma Inline (Set_In_Use);\n    pragma Inline (Set_Inner_Instances);\n+   pragma Inline (Set_Integrity_Level);\n    pragma Inline (Set_Interface_Alias);\n    pragma Inline (Set_Interface_Name);\n    pragma Inline (Set_Interfaces);\n@@ -8106,6 +8164,7 @@ package Einfo is\n    pragma Inline (Set_Referenced);\n    pragma Inline (Set_Referenced_As_LHS);\n    pragma Inline (Set_Referenced_As_Out_Parameter);\n+   pragma Inline (Set_Refined_State);\n    pragma Inline (Set_Register_Exception_Call);\n    pragma Inline (Set_Related_Array_Object);\n    pragma Inline (Set_Related_Expression);"}, {"sha": "6a5eabebc267dc37badd32e75a8c11b25583f189", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 57, "deletions": 38, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -102,6 +102,14 @@ package body Exp_Aggr is\n    --  statement of variant part will usually be small and probably in near\n    --  sorted order.\n \n+   procedure Collect_Initialization_Statements\n+     (Obj        : Entity_Id;\n+      N          : Node_Id;\n+      Node_After : Node_Id);\n+   --  Collect actions inserted after N until, but not including, Node_After,\n+   --  for initialization of Obj, and move them to an expression with actions,\n+   --  which becomes the Initialization_Statements for Obj.\n+\n    ------------------------------------------------------\n    -- Local subprograms for Record Aggregate Expansion --\n    ------------------------------------------------------\n@@ -2943,6 +2951,35 @@ package body Exp_Aggr is\n       return L;\n    end Build_Record_Aggr_Code;\n \n+   ---------------------------------------\n+   -- Collect_Initialization_Statements --\n+   ---------------------------------------\n+\n+   procedure Collect_Initialization_Statements\n+     (Obj        : Entity_Id;\n+      N          : Node_Id;\n+      Node_After : Node_Id)\n+   is\n+      Loc          : constant Source_Ptr := Sloc (N);\n+      Init_Node    : Node_Id;\n+      EA           : Node_Id;\n+      Init_Actions : constant List_Id := New_List;\n+   begin\n+      Init_Node := N;\n+\n+      while Next (Init_Node) /= Node_After loop\n+         Append_To (Init_Actions, Remove_Next (Init_Node));\n+      end loop;\n+\n+      if not Is_Empty_List (Init_Actions) then\n+         EA := Make_Expression_With_Actions (Loc,\n+                 Actions    => Init_Actions,\n+                 Expression => Make_Null_Statement (Loc));\n+         Insert_Action_After (Init_Node, EA);\n+         Set_Initialization_Statements (Obj, EA);\n+      end if;\n+   end Collect_Initialization_Statements;\n+\n    -------------------------------\n    -- Convert_Aggr_In_Allocator --\n    -------------------------------\n@@ -3120,34 +3157,9 @@ package body Exp_Aggr is\n \n       declare\n          Node_After   : constant Node_Id := Next (N);\n-         Init_Node    : Node_Id;\n-         Blk          : Node_Id;\n-         Init_Actions : constant List_Id := New_List;\n       begin\n          Insert_Actions_After (N, Late_Expansion (Aggr, Typ, Occ));\n-\n-         --  Move inserted, analyzed actions to Init_Actions, but skip over\n-         --  freeze nodes as these need to remain in the proper scope.\n-\n-         Init_Node := N;\n-\n-         while Next (Init_Node) /= Node_After loop\n-            if Nkind (Next (Init_Node)) = N_Freeze_Entity then\n-               Next (Init_Node);\n-            else\n-               Append_To (Init_Actions, Remove_Next (Init_Node));\n-            end if;\n-         end loop;\n-\n-         if not Is_Empty_List (Init_Actions) then\n-            Blk := Make_Block_Statement (Loc,\n-                     Declarations => New_List,\n-                     Handled_Statement_Sequence =>\n-                       Make_Handled_Sequence_Of_Statements (Loc,\n-                         Statements => Init_Actions));\n-            Insert_Action_After (Init_Node, Blk);\n-            Set_Initialization_Statements (Obj, Blk);\n-         end if;\n+         Collect_Initialization_Statements (Obj, N, Node_After);\n       end;\n       Set_No_Initialization (N);\n       Initialize_Discriminants (N, Typ);\n@@ -4966,23 +4978,21 @@ package body Exp_Aggr is\n          Build_Activation_Chain_Entity (N);\n       end if;\n \n+      --  Perform in-place expansion of aggregate in an object declaration.\n+      --  Note: actions generated for the aggregate will be captured in a block\n+      --  statement so that they can be transferred to freeze actions later\n+      --  if there is an address clause for the object.\n+\n       --  Should document these individual tests ???\n \n       if not Has_Default_Init_Comps (N)\n-         and then Comes_From_Source (Parent (N))\n-         and then Nkind (Parent (N)) = N_Object_Declaration\n+         and then Comes_From_Source (Parent_Node)\n+         and then Parent_Kind = N_Object_Declaration\n          and then not\n-           Must_Slide (Etype (Defining_Identifier (Parent (N))), Typ)\n-         and then N = Expression (Parent (N))\n+           Must_Slide (Etype (Defining_Identifier (Parent_Node)), Typ)\n+         and then N = Expression (Parent_Node)\n          and then not Is_Bit_Packed_Array (Typ)\n          and then not Has_Controlled_Component (Typ)\n-\n-      --  If the aggregate is the expression in an object declaration, it\n-      --  cannot be expanded in place. Lookahead in the current declarative\n-      --  part to find an address clause for the object being declared. If\n-      --  one is present, we cannot build in place. Unclear comment???\n-\n-         and then not Has_Following_Address_Clause (Parent (N))\n       then\n          Tmp := Defining_Identifier (Parent (N));\n          Set_No_Initialization (Parent (N));\n@@ -5101,7 +5111,16 @@ package body Exp_Aggr is\n       end;\n \n       if Comes_From_Source (Tmp) then\n-         Insert_Actions_After (Parent (N), Aggr_Code);\n+         declare\n+            Node_After : constant Node_Id := Next (Parent_Node);\n+         begin\n+            Insert_Actions_After (Parent_Node, Aggr_Code);\n+\n+            if Parent_Kind = N_Object_Declaration then\n+               Collect_Initialization_Statements\n+                 (Obj => Tmp, N => Parent_Node, Node_After => Node_After);\n+            end if;\n+         end;\n \n       else\n          Insert_Actions (N, Aggr_Code);"}, {"sha": "fdf8ac477911f1ea78ab082053212dbff4d6ebfe", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -87,7 +87,8 @@ package body Freeze is\n \n    procedure Check_Address_Clause (E : Entity_Id);\n    --  Apply legality checks to address clauses for object declarations,\n-   --  at the point the object is frozen.\n+   --  at the point the object is frozen. Also ensure any initialization is\n+   --  performed only after the object has been frozen.\n \n    procedure Check_Component_Storage_Order\n      (Encl_Type : Entity_Id;\n@@ -549,10 +550,11 @@ package body Freeze is\n    --------------------------\n \n    procedure Check_Address_Clause (E : Entity_Id) is\n-      Addr : constant Node_Id   := Address_Clause (E);\n+      Addr : constant Node_Id    := Address_Clause (E);\n       Expr : Node_Id;\n-      Decl : constant Node_Id   := Declaration_Node (E);\n-      Typ  : constant Entity_Id := Etype (E);\n+      Decl : constant Node_Id    := Declaration_Node (E);\n+      Loc  : constant Source_Ptr := Sloc (Decl);\n+      Typ  : constant Entity_Id  := Etype (E);\n \n    begin\n       if Present (Addr) then\n@@ -601,6 +603,24 @@ package body Freeze is\n          then\n             Warn_Overlay (Expr, Typ, Name (Addr));\n          end if;\n+\n+         if Present (Expression (Decl)) then\n+\n+            --  Capture initialization value at point of declaration\n+\n+            Remove_Side_Effects (Expression (Decl));\n+\n+            --  Move initialization to freeze actions (once the object has\n+            --  been frozen, and the address clause alignment check has been\n+            --  performed.\n+\n+            Append_Freeze_Action (E,\n+              Make_Assignment_Statement (Loc,\n+                Name       => New_Occurrence_Of (E, Loc),\n+                Expression => Expression (Decl)));\n+\n+            Set_No_Initialization (Decl);\n+         end if;\n       end if;\n    end Check_Address_Clause;\n "}, {"sha": "00d72c12a050dbe3177237bb6087952a24098e36", "filename": "gcc/ada/lib-xref.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Flib-xref.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Flib-xref.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.ads?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -531,7 +531,12 @@ package Lib.Xref is\n       E_Protected_Object                           => ' ',\n       E_Protected_Body                             => ' ',\n       E_Task_Body                                  => ' ',\n-      E_Subprogram_Body                            => ' ');\n+      E_Subprogram_Body                            => ' ',\n+\n+      --  ??? The following letter is added for completion, proper design and\n+      --  implementation of abstract state cross-referencing to follow.\n+\n+      E_Abstract_State                             => ' ');\n \n    --  The following table is for information purposes. It shows the use of\n    --  each character appearing as an entity type."}, {"sha": "0427a5b7cd4985d463d289425b856fbf472608ff", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -1092,6 +1092,7 @@ begin\n       --  entirely in Sem_Prag, and no further checking is done by Par.\n \n       when Pragma_Abort_Defer                    |\n+           Pragma_Abstract_State                 |\n            Pragma_Assertion_Policy               |\n            Pragma_Assume                         |\n            Pragma_Assume_No_Invalid_Values       |"}, {"sha": "0a2ac51a6588a26308e0e8fd1f981ea12f5b8614", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -1434,13 +1434,23 @@ package body Sem_Ch13 is\n                --  Case 2d : Aspects that correspond to a pragma with one\n                --  argument.\n \n+               when Aspect_Abstract_State        =>\n+                  Aitem :=\n+                    Make_Pragma (Loc,\n+                      Pragma_Identifier            =>\n+                        Make_Identifier (Sloc (Id), Name_Abstract_State),\n+                      Pragma_Argument_Associations => New_List (\n+                        Make_Pragma_Argument_Association (Loc,\n+                          Expression => Relocate_Node (Expr))));\n+\n+                  Delay_Required := False;\n+\n                when Aspect_Relative_Deadline     =>\n                   Aitem :=\n                     Make_Pragma (Loc,\n-                      Pragma_Argument_Associations =>\n-                        New_List (\n-                          Make_Pragma_Argument_Association (Loc,\n-                             Expression => Relocate_Node (Expr))),\n+                      Pragma_Argument_Associations => New_List (\n+                        Make_Pragma_Argument_Association (Loc,\n+                          Expression => Relocate_Node (Expr))),\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Name_Relative_Deadline));\n \n@@ -6961,9 +6971,10 @@ package body Sem_Ch13 is\n               Aspect_Type_Invariant    =>\n             T := Standard_Boolean;\n \n-         --  Here is the list of aspects that don't require delay analysis.\n+         --  Here is the list of aspects that don't require delay analysis\n \n-         when Aspect_Contract_Case        |\n+         when Aspect_Abstract_State       |\n+              Aspect_Contract_Case        |\n               Aspect_Contract_Cases       |\n               Aspect_Dimension            |\n               Aspect_Dimension_System     |"}, {"sha": "49020fa73b9b4e044a0c39a3101fc7a8d81b8ed2", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -3171,7 +3171,14 @@ package body Sem_Ch3 is\n             Set_Has_Completion (Id);\n          end if;\n \n-         --  Set type and resolve (type may be overridden later on)\n+         --  Set kind (expansion of E may need it) and type now, and resolve.\n+         --  Type might be overridden later on.\n+\n+         if Constant_Present (N) then\n+            Set_Ekind (Id, E_Constant);\n+         else\n+            Set_Ekind (Id, E_Variable);\n+         end if;\n \n          Set_Etype (Id, T);\n          Resolve (E, T);\n@@ -3513,11 +3520,12 @@ package body Sem_Ch3 is\n \n       Set_Never_Set_In_Source (Id, True);\n \n-      --  Now establish the proper kind and type of the object\n+      --  Now establish the proper kind (if not already set) and type of the\n+      --  object.\n \n       if Constant_Present (N) then\n-         Set_Ekind            (Id, E_Constant);\n          Set_Is_True_Constant (Id, True);\n+         Set_Ekind (Id, E_Constant);\n \n       else\n          Set_Ekind (Id, E_Variable);"}, {"sha": "cb761f21965daee84fe8ccbe0924890cdbd2b56d", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -1902,8 +1902,12 @@ package body Sem_Ch4 is\n          exit when No (A);\n       end loop;\n \n-      Analyze_Expression (Expression (N));\n-      Set_Etype (N, Etype (Expression (N)));\n+      if Nkind (Expression (N)) = N_Null_Statement then\n+         Set_Etype (N, Standard_Void_Type);\n+      else\n+         Analyze_Expression (Expression (N));\n+         Set_Etype (N, Etype (Expression (N)));\n+      end if;\n    end Analyze_Expression_With_Actions;\n \n    ---------------------------"}, {"sha": "a6490bfacf4b2be06ba99555bfae1a5f488d36dd", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 275, "deletions": 0, "changes": 275, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -6640,6 +6640,280 @@ package body Sem_Prag is\n                Pragma_Misplaced;\n             end if;\n \n+         --------------------\n+         -- Abstract_State --\n+         --------------------\n+\n+         when Pragma_Abstract_State => Abstract_State : declare\n+            Pack_Id : Entity_Id;\n+\n+            --  Flags used to verify the consistency of states\n+\n+            Non_Null_Seen : Boolean := False;\n+            Null_Seen     : Boolean := False;\n+\n+            procedure Analyze_Abstract_State (State : Node_Id);\n+            --  Verify the legality of a single state declaration. Create and\n+            --  decorate a state abstraction entity and introduce it into the\n+            --  visibility chain.\n+\n+            ----------------------------\n+            -- Analyze_Abstract_State --\n+            ----------------------------\n+\n+            procedure Analyze_Abstract_State (State : Node_Id) is\n+               procedure Check_Duplicate_Property\n+                 (Prop   : Node_Id;\n+                  Status : in out Boolean);\n+               --  Flag Status denotes whether a particular property has been\n+               --  seen while processing a state. This routine verifies that\n+               --  Prop is not a duplicate property and sets the flag Status.\n+\n+               ------------------------------\n+               -- Check_Duplicate_Property --\n+               ------------------------------\n+\n+               procedure Check_Duplicate_Property\n+                 (Prop   : Node_Id;\n+                  Status : in out Boolean)\n+               is\n+               begin\n+                  if Status then\n+                     Error_Msg_N (\"duplicate state property\", Prop);\n+                  end if;\n+\n+                  Status := True;\n+               end Check_Duplicate_Property;\n+\n+               --  Local variables\n+\n+               Errors  : constant Nat := Serious_Errors_Detected;\n+               Loc     : constant Source_Ptr := Sloc (State);\n+               Assoc   : Node_Id;\n+               Id      : Entity_Id;\n+               Is_Null : Boolean := False;\n+               Level   : Uint := Uint_0;\n+               Name    : Name_Id;\n+               Prop    : Node_Id;\n+\n+               --  Flags used to verify the consistency of properties\n+\n+               Input_Seen     : Boolean := False;\n+               Integrity_Seen : Boolean := False;\n+               Output_Seen    : Boolean := False;\n+               Volatile_Seen  : Boolean := False;\n+\n+            --  Start of processing for Analyze_Abstract_State\n+\n+            begin\n+               --  A package with a null abstract state is not allowed to\n+               --  declare additional states.\n+\n+               if Null_Seen then\n+                  Error_Msg_Name_1 := Chars (Pack_Id);\n+                  Error_Msg_N (\"package % has null abstract state\", State);\n+\n+               --  Null states appear as internally generated entities\n+\n+               elsif Nkind (State) = N_Null then\n+                  Name := New_Internal_Name ('S');\n+                  Is_Null   := True;\n+                  Null_Seen := True;\n+\n+                  --  Catch a case where a null state appears in a list of\n+                  --  non-null states.\n+\n+                  if Non_Null_Seen then\n+                     Error_Msg_Name_1 := Chars (Pack_Id);\n+                     Error_Msg_N\n+                       (\"package % has non-null abstract state\", State);\n+                  end if;\n+\n+               --  Simple state declaration\n+\n+               elsif Nkind (State) = N_Identifier then\n+                  Name := Chars (State);\n+                  Non_Null_Seen := True;\n+\n+               --  State declaration with various properties. This construct\n+               --  appears as an extension aggregate in the tree.\n+\n+               elsif Nkind (State) = N_Extension_Aggregate then\n+                  if Nkind (Ancestor_Part (State)) = N_Identifier then\n+                     Name := Chars (Ancestor_Part (State));\n+                     Non_Null_Seen := True;\n+                  else\n+                     Error_Msg_N\n+                       (\"state name must be an identifier\",\n+                        Ancestor_Part (State));\n+                  end if;\n+\n+                  --  Process properties Input, Output and Volatile. Ensure\n+                  --  that none of them appear more than once.\n+\n+                  Prop := First (Expressions (State));\n+                  while Present (Prop) loop\n+                     if Nkind (Prop) = N_Identifier then\n+                        if Chars (Prop) = Name_Input then\n+                           Check_Duplicate_Property (Prop, Input_Seen);\n+                        elsif Chars (Prop) = Name_Output then\n+                           Check_Duplicate_Property (Prop, Output_Seen);\n+                        elsif Chars (Prop) = Name_Volatile then\n+                           Check_Duplicate_Property (Prop, Volatile_Seen);\n+                        else\n+                           Error_Msg_N (\"invalid state property\", Prop);\n+                        end if;\n+                     else\n+                        Error_Msg_N (\"invalid state property\", Prop);\n+                     end if;\n+\n+                     Next (Prop);\n+                  end loop;\n+\n+                  --  Volatile requires exactly one Input or Output\n+\n+                  if Volatile_Seen\n+                    and then\n+                      ((Input_Seen and then Output_Seen)           --  both\n+                          or else\n+                       (not Input_Seen and then not Output_Seen))  --  none\n+                  then\n+                     Error_Msg_N\n+                       (\"property Volatile requires exactly one Input or \" &\n+                        \"Output\", State);\n+                  end if;\n+\n+                  --  Either Input or Output require Volatile\n+\n+                  if (Input_Seen or else Output_Seen)\n+                    and then not Volatile_Seen\n+                  then\n+                     Error_Msg_N\n+                       (\"properties Input and Output require Volatile\", State);\n+                  end if;\n+\n+                  --  State property Integrity appears as a component\n+                  --  association.\n+\n+                  Assoc := First (Component_Associations (State));\n+                  while Present (Assoc) loop\n+                     Prop := First (Choices (Assoc));\n+                     while Present (Prop) loop\n+                        if Nkind (Prop) = N_Identifier\n+                          and then Chars (Prop) = Name_Integrity\n+                        then\n+                           Check_Duplicate_Property (Prop, Integrity_Seen);\n+                        else\n+                           Error_Msg_N (\"invalid state property\", Prop);\n+                        end if;\n+\n+                        Next (Prop);\n+                     end loop;\n+\n+                     if Nkind (Expression (Assoc)) = N_Integer_Literal then\n+                        Level := Intval (Expression (Assoc));\n+                     else\n+                        Error_Msg_N\n+                          (\"integrity level must be an integer literal\",\n+                           Expression (Assoc));\n+                     end if;\n+\n+                     Next (Assoc);\n+                  end loop;\n+\n+               --  Any other attempt to declare a state is erroneous\n+\n+               else\n+                  Error_Msg_N (\"malformed abstract state declaration\", N);\n+               end if;\n+\n+               --  Do not generate a state abstraction entity if it was not\n+               --  properly declared.\n+\n+               if Serious_Errors_Detected > Errors then\n+                  return;\n+               end if;\n+\n+               --  The generated state abstraction reuses the same characters\n+               --  from the original state declaration. Decorate the entity.\n+\n+               Id := Make_Defining_Identifier (Loc, New_External_Name (Name));\n+               Set_Comes_From_Source (Id, not Is_Null);\n+               Set_Parent            (Id, State);\n+               Set_Ekind             (Id, E_Abstract_State);\n+               Set_Etype             (Id, Standard_Void_Type);\n+               Set_Integrity_Level   (Id, Level);\n+               Set_Refined_State     (Id, Empty);\n+\n+               --  Every non-null state must be nameable and resolvable the\n+               --  same way a constant is.\n+\n+               if not Is_Null then\n+                  Push_Scope (Pack_Id);\n+                  Enter_Name (Id);\n+                  Pop_Scope;\n+               end if;\n+\n+               --  Associate the state with its related package\n+\n+               if No (Abstract_States (Pack_Id)) then\n+                  Set_Abstract_States (Pack_Id, New_Elmt_List);\n+               end if;\n+\n+               Append_Elmt (Id, Abstract_States (Pack_Id));\n+            end Analyze_Abstract_State;\n+\n+            --  Local variables\n+\n+            Par   : Node_Id;\n+            State : Node_Id;\n+\n+         --  Start of processing for Abstract_State\n+\n+         begin\n+            GNAT_Pragma;\n+            S14_Pragma;\n+            Check_Arg_Count (1);\n+\n+            --  Ensure the proper placement of the pragma. Abstract states must\n+            --  be associated with a package declaration.\n+\n+            if From_Aspect_Specification (N) then\n+               Par := Parent (Corresponding_Aspect (N));\n+            else\n+               Par := Parent (Parent (N));\n+            end if;\n+\n+            if Nkind (Par) = N_Compilation_Unit then\n+               Par := Unit (Par);\n+            end if;\n+\n+            if Nkind (Par) /= N_Package_Declaration then\n+               Pragma_Misplaced;\n+               return;\n+            end if;\n+\n+            Pack_Id := Defining_Unit_Name (Specification (Par));\n+            State   := Expression (Arg1);\n+\n+            --  Multiple abstract states appear as an aggregate\n+\n+            if Nkind (State) = N_Aggregate then\n+               State := First (Expressions (State));\n+               while Present (State) loop\n+                  Analyze_Abstract_State (State);\n+\n+                  Next (State);\n+               end loop;\n+\n+            --  Various forms of a single abstract state. Note that these may\n+            --  include malformed state declarations.\n+\n+            else\n+               Analyze_Abstract_State (State);\n+            end if;\n+         end Abstract_State;\n+\n          ------------\n          -- Ada_83 --\n          ------------\n@@ -15748,6 +16022,7 @@ package body Sem_Prag is\n    Sig_Flags : constant array (Pragma_Id) of Int :=\n      (Pragma_AST_Entry                      => -1,\n       Pragma_Abort_Defer                    => -1,\n+      Pragma_Abstract_State                 => -1,\n       Pragma_Ada_83                         => -1,\n       Pragma_Ada_95                         => -1,\n       Pragma_Ada_05                         => -1,"}, {"sha": "d3e7d7188cbe4d8c776253198d8cfc9096aee242", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -1546,7 +1546,8 @@ package Sinfo is\n    --    proc). This is needed for controlled aggregates. When the Object\n    --    declaration has an expression, this flag means that this expression\n    --    should not be taken into account (needed for in place initialization\n-   --    with aggregates).\n+   --    with aggregates, and for object with an address clause, which are\n+   --    initialized with an assignment at freeze time).\n \n    --  No_Minimize_Eliminate (Flag17-Sem)\n    --    This flag is present in membership operator nodes (N_In/N_Not_In).\n@@ -7025,6 +7026,10 @@ package Sinfo is\n       --  declarations within the actions will definitely not be referenced\n       --  once elaboration of the construct is completed).\n \n+      --  But we rely on freeze nodes appearing in actions being elaborated in\n+      --  the enclosing scope (see Exp_Aggr.Collect_Initialization_\n+      --  Statements)???\n+\n       --  Sprint syntax:  do\n       --                    action;\n       --                    action;\n@@ -7040,6 +7045,9 @@ package Sinfo is\n       --  Note: the actions list is always non-null, since we would\n       --  never have created this node if there weren't some actions.\n \n+      --  Note: Expression may be a Null_Statement, in which case the\n+      --  N_Expression_With_Actions has type Standard_Void_Type.\n+\n       --------------------\n       -- Free Statement --\n       --------------------"}, {"sha": "2968830f93f2ba6fff65acc98ff6902da855a90b", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -446,6 +446,7 @@ package Snames is\n    --  Remaining pragma names\n \n    Name_Abort_Defer                    : constant Name_Id := N + $; -- GNAT\n+   Name_Abstract_State                 : constant Name_Id := N + $; -- GNAT\n    Name_All_Calls_Remote               : constant Name_Id := N + $;\n \n    --  Note: AST_Entry is not in this list because its name matches the name of\n@@ -696,6 +697,7 @@ package Snames is\n    Name_Ignore                         : constant Name_Id := N + $;\n    Name_Increases                      : constant Name_Id := N + $;\n    Name_Info                           : constant Name_Id := N + $;\n+   Name_Integrity                      : constant Name_Id := N + $;\n    Name_Internal                       : constant Name_Id := N + $;\n    Name_Link_Name                      : constant Name_Id := N + $;\n    Name_Lowercase                      : constant Name_Id := N + $;\n@@ -1731,6 +1733,7 @@ package Snames is\n       --  Remaining (non-configuration) pragmas\n \n       Pragma_Abort_Defer,\n+      Pragma_Abstract_State,\n       Pragma_All_Calls_Remote,\n       Pragma_Assert,\n       Pragma_Assert_And_Cut,"}, {"sha": "0f73e639e819274c6ff2afdc39c58f1c84a9908c", "filename": "gcc/ada/table.adb", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Ftable.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf6956bba33b7a5f29035ceec177502864a5bf4c/gcc%2Fada%2Ftable.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftable.adb?ref=cf6956bba33b7a5f29035ceec177502864a5bf4c", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -172,6 +172,7 @@ package body Table is\n \n       procedure Reallocate is\n          New_Size   : Memory.size_t;\n+         New_Length : Long_Integer;\n \n       begin\n          if Max < Last_Val then\n@@ -186,11 +187,15 @@ package body Table is\n             --  the increment value or 10, which ever is larger (the reason\n             --  for the use of 10 here is to ensure that the table does really\n             --  increase in size (which would not be the case for a table of\n-            --  length 10 increased by 3% for instance).\n+            --  length 10 increased by 3% for instance). Do the intermediate\n+            --  calculation in Long_Integer to avoid overflow.\n \n             while Max < Last_Val loop\n-               Length := Int'Max (Length * (100 + Table_Increment) / 100,\n-                                  Length + 10);\n+               New_Length :=\n+                 Long_Integer (Length) *\n+                 (100 + Long_Integer (Table_Increment))\n+                 / 100;\n+               Length := Int'Max (Int (New_Length), Length + 10);\n                Max := Min + Length - 1;\n             end loop;\n "}]}