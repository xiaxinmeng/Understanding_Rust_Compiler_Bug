{"sha": "c14187cf54ba2676efc9e705bff8c15282718caf", "node_id": "C_kwDOANBUbNoAKGMxNDE4N2NmNTRiYTI2NzZlZmM5ZTcwNWJmZjhjMTUyODI3MThjYWY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T13:11:32Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2022-06-28T13:11:32Z"}, "message": "Remove unused code in ResolveTypeToCanonicalPath class", "tree": {"sha": "80f8460e74f4f41f0762129c37523a7a59c8c925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80f8460e74f4f41f0762129c37523a7a59c8c925"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c14187cf54ba2676efc9e705bff8c15282718caf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14187cf54ba2676efc9e705bff8c15282718caf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c14187cf54ba2676efc9e705bff8c15282718caf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c14187cf54ba2676efc9e705bff8c15282718caf/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f8479378a99d17de6847d4482f23e11944d35c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f8479378a99d17de6847d4482f23e11944d35c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f8479378a99d17de6847d4482f23e11944d35c5"}], "stats": {"total": 167, "additions": 1, "deletions": 166}, "files": [{"sha": "0d15e175da05010b8a91226da557b15e9985a1e1", "filename": "gcc/rust/resolve/rust-ast-resolve-type.cc", "status": "modified", "additions": 0, "deletions": 117, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14187cf54ba2676efc9e705bff8c15282718caf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14187cf54ba2676efc9e705bff8c15282718caf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.cc?ref=c14187cf54ba2676efc9e705bff8c15282718caf", "patch": "@@ -44,66 +44,6 @@ ResolveTypeToCanonicalPath::canonicalize_generic_args (AST::GenericArgs &args)\n   return \"<\" + buf + \">\";\n }\n \n-void\n-ResolveTypeToCanonicalPath::visit (AST::TypePathSegmentGeneric &seg)\n-{\n-  if (seg.is_error ())\n-    {\n-      failure_flag = true;\n-      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n-\t\t     seg.as_string ().c_str ());\n-      return;\n-    }\n-\n-  if (!seg.has_generic_args ())\n-    {\n-      auto ident_segment\n-\t= CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t  seg.get_ident_segment ().as_string ());\n-      result = result.append (ident_segment);\n-      return;\n-    }\n-\n-  if (type_resolve_generic_args_flag)\n-    {\n-      ResolveType::type_resolve_generic_args (seg.get_generic_args ());\n-    }\n-\n-  if (include_generic_args_flag)\n-    {\n-      std::string generics\n-\t= canonicalize_generic_args (seg.get_generic_args ());\n-      auto generic_segment\n-\t= CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t\t  seg.get_ident_segment ().as_string ()\n-\t\t\t\t    + \"::\" + generics);\n-      result = result.append (generic_segment);\n-      return;\n-    }\n-\n-  auto ident_segment\n-    = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t      seg.get_ident_segment ().as_string ());\n-  result = result.append (ident_segment);\n-}\n-\n-void\n-ResolveTypeToCanonicalPath::visit (AST::TypePathSegment &seg)\n-{\n-  if (seg.is_error ())\n-    {\n-      failure_flag = true;\n-      rust_error_at (seg.get_locus (), \"segment has error: %s\",\n-\t\t     seg.as_string ().c_str ());\n-      return;\n-    }\n-\n-  CanonicalPath ident_seg\n-    = CanonicalPath::new_seg (seg.get_node_id (),\n-\t\t\t      seg.get_ident_segment ().as_string ());\n-  result = result.append (ident_seg);\n-}\n-\n void\n ResolveType::visit (AST::ArrayType &type)\n {\n@@ -128,63 +68,6 @@ ResolveType::visit (AST::TraitObjectType &type)\n     }\n }\n \n-void\n-ResolveTypeToCanonicalPath::visit (AST::ReferenceType &ref)\n-{\n-  auto inner_type\n-    = ResolveTypeToCanonicalPath::resolve (*ref.get_type_referenced ().get (),\n-\t\t\t\t\t   include_generic_args_flag,\n-\t\t\t\t\t   type_resolve_generic_args_flag);\n-\n-  std::string segment_string (\"&\");\n-  if (ref.get_has_mut ())\n-    segment_string += \"mut \";\n-\n-  segment_string += inner_type.get ();\n-\n-  auto ident_seg = CanonicalPath::new_seg (ref.get_node_id (), segment_string);\n-  result = result.append (ident_seg);\n-}\n-\n-void\n-ResolveTypeToCanonicalPath::visit (AST::RawPointerType &ref)\n-{\n-  auto inner_type\n-    = ResolveTypeToCanonicalPath::resolve (*ref.get_type_pointed_to ().get (),\n-\t\t\t\t\t   include_generic_args_flag,\n-\t\t\t\t\t   type_resolve_generic_args_flag);\n-\n-  std::string segment_string (\"*\");\n-  switch (ref.get_pointer_type ())\n-    {\n-    case AST::RawPointerType::PointerType::MUT:\n-      segment_string += \"mut \";\n-      break;\n-\n-    case AST::RawPointerType::PointerType::CONST:\n-      segment_string += \"const \";\n-      break;\n-    }\n-\n-  segment_string += inner_type.get ();\n-\n-  auto ident_seg = CanonicalPath::new_seg (ref.get_node_id (), segment_string);\n-  result = result.append (ident_seg);\n-}\n-\n-void\n-ResolveTypeToCanonicalPath::visit (AST::SliceType &slice)\n-{\n-  auto inner_type\n-    = ResolveTypeToCanonicalPath::resolve (*slice.get_elem_type ().get (),\n-\t\t\t\t\t   include_generic_args_flag,\n-\t\t\t\t\t   type_resolve_generic_args_flag);\n-  std::string segment_string = \"[\" + inner_type.get () + \"]\";\n-  auto ident_seg\n-    = CanonicalPath::new_seg (slice.get_node_id (), segment_string);\n-  result = result.append (ident_seg);\n-}\n-\n void\n ResolveType::visit (AST::ReferenceType &type)\n {"}, {"sha": "733cfe770c887d5fcf35fc8dce0ca969c43daaa5", "filename": "gcc/rust/resolve/rust-ast-resolve-type.h", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c14187cf54ba2676efc9e705bff8c15282718caf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c14187cf54ba2676efc9e705bff8c15282718caf/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve-type.h?ref=c14187cf54ba2676efc9e705bff8c15282718caf", "patch": "@@ -25,58 +25,10 @@\n namespace Rust {\n namespace Resolver {\n \n-class ResolveTypeToCanonicalPath : public ResolverBase\n+class ResolveTypeToCanonicalPath\n {\n-protected:\n-  using Rust::Resolver::ResolverBase::visit;\n-\n public:\n-  // FIXME this should really only take AST::TypeNoBounds&\n-  static CanonicalPath resolve (AST::Type &type,\n-\t\t\t\tbool include_generic_args = true,\n-\t\t\t\tbool type_resolve_generic_args = true)\n-  {\n-    ResolveTypeToCanonicalPath resolver (include_generic_args,\n-\t\t\t\t\t type_resolve_generic_args);\n-    type.accept_vis (resolver);\n-    return resolver.result;\n-  }\n-\n-  void visit (AST::TypePath &path) override\n-  {\n-    for (auto &seg : path.get_segments ())\n-      {\n-\tseg->accept_vis (*this);\n-\tif (failure_flag)\n-\t  return;\n-      }\n-  }\n-\n-  void visit (AST::SliceType &slice) override;\n-\n-  void visit (AST::RawPointerType &ptr) override;\n-\n-  void visit (AST::ReferenceType &ref) override;\n-\n-  void visit (AST::TypePathSegmentGeneric &seg) override;\n-\n-  void visit (AST::TypePathSegment &seg) override;\n-\n   static std::string canonicalize_generic_args (AST::GenericArgs &args);\n-\n-protected:\n-  ResolveTypeToCanonicalPath (bool include_generic_args,\n-\t\t\t      bool type_resolve_generic_args)\n-    : ResolverBase (), result (CanonicalPath::create_empty ()),\n-      include_generic_args_flag (include_generic_args),\n-      type_resolve_generic_args_flag (type_resolve_generic_args),\n-      failure_flag (false)\n-  {}\n-\n-  CanonicalPath result;\n-  bool include_generic_args_flag;\n-  bool type_resolve_generic_args_flag;\n-  bool failure_flag;\n };\n \n class ResolveRelativeTypePath"}]}