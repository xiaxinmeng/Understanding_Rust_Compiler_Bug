{"sha": "9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWMwNzU4ZGRlNmZmZjdiZjYzNTBlZWRkYTNkZDlkYjQyN2E0NGZjYg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-08-07T22:28:52Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-08-07T22:28:52Z"}, "message": "class.c (count_fields, [...]): Add static prototype.\n\n\t* class.c (count_fields, add_fields_to_vec): Add static prototype.\n\n\t* cp-tree.h (opname_tab, assignop_tab, operator_name_string,\n\tget_id_2, composite_pointer_type, dump_node_to_file): Constify a\n\tchar*.\n\n\t* decl.c (named_label_list, cp_finish_decl, grokdeclarator):\n\tConstify a char*.\n\n\t* decl2.c (finish_static_data_member_decl, grokfield): Constify a\n\tchar*.\n\n\t* dump.c (queue_and_dump_index, dump_int, dump_string,\n\tdump_string_field, dequeue_and_dump, dump_node_to_file): Constify\n\ta char*.\n\t(dump_stmt): Add static prototype.\n\n\t* errfn.c (cp_thing): Constify a char*.\n\n\t* error.c (dump_unary_op, dump_binary_op, aggr_variety,\n\tdump_aggr_type, dump_global_iord, dump_decl, dump_function_name,\n\tdump_expr): Constify a char*.\n\n\t* lex.c (extend_token_buffer_to, pragma_getc, pragma_ungetc,\n\tread_line_number): Add static prototype.\n\t(opname_tab, assignop_tab, operator_name_string): Constify a char*.\n\t(real_yylex): Move label `letter' into the scope where it is used.\n\n\t* method.c (build_mangled_template_parm_index, build_overload_int,\n\tbuild_decl_overload_real, get_id_2): Constify a char*.\n\n\t* search.c (check_final_overrider): Make static.\n\n\t* typeck.c (composite_pointer_type): Constify a char*.\n\nFrom-SVN: r28588", "tree": {"sha": "0f54214cb42ac2e74f8470e2a2880e6f8cd2a66c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f54214cb42ac2e74f8470e2a2880e6f8cd2a66c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/comments", "author": null, "committer": null, "parents": [{"sha": "b5df0cedb5cbc98b8d791e3297eff2321959e2d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5df0cedb5cbc98b8d791e3297eff2321959e2d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5df0cedb5cbc98b8d791e3297eff2321959e2d3"}], "stats": {"total": 145, "additions": 96, "deletions": 49}, "files": [{"sha": "0e0b5a57ea9d044b57bb9f717cec3644a87ce395", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -1,3 +1,40 @@\n+1999-08-07  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (count_fields, add_fields_to_vec): Add static prototype.\n+\n+\t* cp-tree.h (opname_tab, assignop_tab, operator_name_string,\n+\tget_id_2, composite_pointer_type, dump_node_to_file): Constify a\n+\tchar*.\n+\n+\t* decl.c (named_label_list, cp_finish_decl, grokdeclarator):\n+\tConstify a char*.\n+\n+\t* decl2.c (finish_static_data_member_decl, grokfield): Constify a\n+\tchar*.\n+\n+\t* dump.c (queue_and_dump_index, dump_int, dump_string,\n+\tdump_string_field, dequeue_and_dump, dump_node_to_file): Constify\n+\ta char*.\n+\t(dump_stmt): Add static prototype.\n+\n+\t* errfn.c (cp_thing): Constify a char*.\n+\n+\t* error.c (dump_unary_op, dump_binary_op, aggr_variety,\n+\tdump_aggr_type, dump_global_iord, dump_decl, dump_function_name,\n+\tdump_expr): Constify a char*.\n+\n+\t* lex.c (extend_token_buffer_to, pragma_getc, pragma_ungetc,\n+\tread_line_number): Add static prototype.\n+\t(opname_tab, assignop_tab, operator_name_string): Constify a char*.\n+\t(real_yylex): Move label `letter' into the scope where it is used.\n+\n+\t* method.c (build_mangled_template_parm_index, build_overload_int,\n+\tbuild_decl_overload_real, get_id_2): Constify a char*.\n+\n+\t* search.c (check_final_overrider): Make static.\n+\n+\t* typeck.c (composite_pointer_type): Constify a char*.\n+\n 1999-08-06  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* decl.c (bad_specifiers): It's OK to have an EH spec on a function"}, {"sha": "28ef03fda77a931a15b794d9f9d918f27876c7a4", "filename": "gcc/cp/class.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -139,6 +139,8 @@ static tree resolve_address_of_overloaded_function PROTO((tree, tree, int,\n static void build_vtable_entry_ref PROTO((tree, tree, tree));\n static tree build_vtable_entry_for_fn PROTO((tree, tree));\n static tree build_vtbl_initializer PROTO((tree));\n+static int count_fields PROTO((tree));\n+static int add_fields_to_vec PROTO((tree, tree, int));\n \n /* Way of stacking language names.  */\n tree *current_lang_base, *current_lang_stack;"}, {"sha": "3d38152dde5ce10a5849e1475255a23acc3b4807", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -2801,7 +2801,7 @@ extern tree current_class_name;\t/* IDENTIFIER_NODE: name of current class */\n /* Indexed by TREE_CODE, these tables give C-looking names to\n    operators represented by TREE_CODES.  For example,\n    opname_tab[(int) MINUS_EXPR] == \"-\".  */\n-extern char **opname_tab, **assignop_tab;\n+extern const char **opname_tab, **assignop_tab;\n \f\n /* in call.c */\n extern int check_dtor_name\t\t\tPROTO((tree, tree));\n@@ -3171,7 +3171,7 @@ extern tree make_pointer_declarator\t\tPROTO((tree, tree));\n extern tree make_reference_declarator\t\tPROTO((tree, tree));\n extern tree make_call_declarator\t\tPROTO((tree, tree, tree, tree));\n extern void set_quals_and_spec\t\t\tPROTO((tree, tree, tree));\n-extern char *operator_name_string\t\tPROTO((tree));\n+extern const char *operator_name_string\t\tPROTO((tree));\n extern void lang_init\t\t\t\tPROTO((void));\n extern void lang_finish\t\t\t\tPROTO((void));\n #if 0\n@@ -3234,7 +3234,7 @@ extern tree hack_identifier\t\t\tPROTO((tree, tree));\n extern tree make_thunk\t\t\t\tPROTO((tree, int));\n extern void emit_thunk\t\t\t\tPROTO((tree));\n extern void synthesize_method\t\t\tPROTO((tree));\n-extern tree get_id_2\t\t\t\tPROTO((char *, tree));\n+extern tree get_id_2\t\t\t\tPROTO((const char *, tree));\n \n /* in pt.c */\n extern void check_template_shadow\t\tPROTO ((tree));\n@@ -3599,7 +3599,8 @@ extern void expand_ptrmemfunc_cst               PROTO((tree, tree *, tree *, tre\n extern tree delta2_from_ptrmemfunc              PROTO((tree));\n extern tree pfn_from_ptrmemfunc                 PROTO((tree));\n extern tree type_after_usual_arithmetic_conversions PROTO((tree, tree));\n-extern tree composite_pointer_type              PROTO((tree, tree, tree, tree, char*));\n+extern tree composite_pointer_type              PROTO((tree, tree, tree, tree,\n+\t\t\t\t\t\t       const char*));\n \n /* in typeck2.c */\n extern tree error_not_base_type\t\t\tPROTO((tree, tree));\n@@ -3637,7 +3638,7 @@ extern void GNU_xref_hier\t\t\tPROTO((tree, tree, int, int, int));\n extern void GNU_xref_member\t\t\tPROTO((tree, tree));\n \n /* in dump.c */\n-extern void dump_node_to_file                   PROTO ((tree, char *));\n+extern void dump_node_to_file                   PROTO ((tree, const char *));\n \n /* -- end of C++ */\n "}, {"sha": "83e408e9d9639d8854a2a2aa48efd7b007e1de3e", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -344,7 +344,7 @@ struct named_label_list\n   struct binding_level *binding_level;\n   tree names_in_scope;\n   tree label_decl;\n-  char *filename_o_goto;\n+  const char *filename_o_goto;\n   int lineno_o_goto;\n   struct named_label_list *next;\n };\n@@ -7375,7 +7375,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n   tree cleanup = NULL_TREE, ttype = NULL_TREE;\n   int was_incomplete;\n   int temporary = allocation_temporary_p ();\n-  char *asmspec = NULL;\n+  const char *asmspec = NULL;\n   int was_readonly = 0;\n   int already_used = 0;\n   tree core_type;\n@@ -8950,7 +8950,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n   int defaulted_int = 0;\n   int opaque_typedef = 0;\n   tree typedef_decl = NULL_TREE;\n-  char *name;\n+  const char *name;\n   tree typedef_type = NULL_TREE;\n   int funcdef_flag = 0;\n   enum tree_code innermost_code = ERROR_MARK;"}, {"sha": "04d6f22fa2a87ca2c669766b67adc938900595d3", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -1505,7 +1505,7 @@ finish_static_data_member_decl (decl, init, asmspec_tree, need_pop, flags)\n      int need_pop;\n      int flags;\n {\n-  char* asmspec = 0;\n+  const char *asmspec = 0;\n \n   if (asmspec_tree)\n     asmspec = TREE_STRING_POINTER (asmspec_tree);\n@@ -1581,7 +1581,7 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n      tree declarator, declspecs, init, asmspec_tree, attrlist;\n {\n   register tree value;\n-  char *asmspec = 0;\n+  const char *asmspec = 0;\n   int flags = LOOKUP_ONLYCONVERTING;\n \n   /* Convert () initializers to = initializers.  */"}, {"sha": "9519e997e49f83bcbb30e5c5b3b99eb52286202f", "filename": "gcc/cp/dump.c", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdump.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -80,15 +80,16 @@ typedef struct dump_info\n \n static unsigned int queue PROTO ((dump_info_p, tree, int));\n static void dump_index PROTO ((dump_info_p, unsigned int));\n-static void queue_and_dump_index PROTO ((dump_info_p, char *, tree, int));\n+static void queue_and_dump_index PROTO ((dump_info_p, const char *, tree, int));\n static void queue_and_dump_type PROTO ((dump_info_p, tree, int));\n static void dequeue_and_dump PROTO ((dump_info_p));\n static void dump_new_line PROTO ((dump_info_p));\n static void dump_maybe_newline PROTO ((dump_info_p));\n-static void dump_int PROTO ((dump_info_p, char *, int));\n-static void dump_string PROTO ((dump_info_p, char *));\n-static void dump_string_field PROTO ((dump_info_p, char *, char *));\n+static void dump_int PROTO ((dump_info_p, const char *, int));\n+static void dump_string PROTO ((dump_info_p, const char *));\n+static void dump_string_field PROTO ((dump_info_p, const char *, const char *));\n static void dump_node PROTO ((tree, FILE *));\n+static void dump_stmt PROTO ((dump_info_p, tree));\n \n /* Add T to the end of the queue of nodes to dump.  If DUMP_CHILDREN_P\n    is non-zero, then its children should be dumped as well.  Returns\n@@ -152,7 +153,7 @@ dump_index (di, index)\n static void\n queue_and_dump_index (di, field, t, flags)\n      dump_info_p di;\n-     char *field;\n+     const char *field;\n      tree t;\n      int flags;\n {\n@@ -223,7 +224,7 @@ dump_maybe_newline (di)\n static void\n dump_int (di, field, i)\n      dump_info_p di;\n-     char *field;\n+     const char *field;\n      int i;\n {\n   dump_maybe_newline (di);\n@@ -236,7 +237,7 @@ dump_int (di, field, i)\n static void\n dump_string (di, string)\n      dump_info_p di;\n-     char *string;\n+     const char *string;\n {\n   dump_maybe_newline (di);\n   fprintf (di->stream, \"%-13s \", string);\n@@ -251,8 +252,8 @@ dump_string (di, string)\n static void\n dump_string_field (di, field, string)\n      dump_info_p di;\n-     char *field;\n-     char *string;\n+     const char *field;\n+     const char *string;\n {\n   dump_maybe_newline (di);\n   fprintf (di->stream, \"%-4s: %-7s \", field, string);\n@@ -382,7 +383,7 @@ dequeue_and_dump (di)\n       /* And a source position.  */\n       if (DECL_SOURCE_FILE (t))\n \t{\n-\t  char *filename = rindex (DECL_SOURCE_FILE (t), '/');\n+\t  const char *filename = rindex (DECL_SOURCE_FILE (t), '/');\n \t  if (!filename)\n \t    filename = DECL_SOURCE_FILE (t);\n \t  else\n@@ -846,7 +847,7 @@ dump_node (t, stream)\n void\n dump_node_to_file (t, file)\n      tree t;\n-     char *file;\n+     const char *file;\n {\n   FILE *f;\n "}, {"sha": "a03aacc7bff5ed16318652bc46607d9176460124", "filename": "gcc/cp/errfn.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ferrfn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ferrfn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferrfn.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -106,7 +106,7 @@ cp_thing (errfn, atarg1, format, ap)\n \n       if (function || *f == 's')\n \t{\n-\t  char *p;\n+\t  const char *p;\n \t  int plen;\n \n \t  if (*f == 's')\n@@ -180,7 +180,7 @@ cp_thing (errfn, atarg1, format, ap)\n \n   if (atarg)\n     {\n-      char *file = cp_file_of (atarg);\n+      const char *file = cp_file_of (atarg);\n       int   line = cp_line_of (atarg);\n       (*errfn) (file, line, \"%s\", buf);\n     }"}, {"sha": "0279701ca2167a1bfc1b8ff6677f24d69b2ba178", "filename": "gcc/cp/error.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -101,8 +101,8 @@ static void dump_simple_decl PROTO((tree, tree, int));\n static void dump_decl PROTO((tree, int));\n static void dump_function_decl PROTO((tree, int));\n static void dump_expr PROTO((tree, int));\n-static void dump_unary_op PROTO((char *, tree, int));\n-static void dump_binary_op PROTO((char *, tree));\n+static void dump_unary_op PROTO((const char *, tree, int));\n+static void dump_binary_op PROTO((const char *, tree));\n static void dump_aggr_type PROTO((tree, int, int));\n static void dump_type_prefix PROTO((tree, int, int));\n static void dump_type_suffix PROTO((tree, int, int));\n@@ -113,7 +113,7 @@ static void dump_qualifiers PROTO((tree, enum pad));\n static void dump_char PROTO((int));\n static void dump_parameters PROTO((tree, int, int));\n static void dump_exception_spec PROTO((tree, int));\n-static char *aggr_variety PROTO((tree));\n+static const char *aggr_variety PROTO((tree));\n static tree ident_fndecl PROTO((tree));\n static int interesting_scope_p PROTO((tree));\n \n@@ -346,7 +346,7 @@ dump_type_real (t, v, canonical_name)\n     }\n }\n \n-static char *\n+static const char *\n aggr_variety (t)\n      tree t;\n {\n@@ -379,7 +379,7 @@ dump_aggr_type (t, v, canonical_name)\n      int canonical_name;\n {\n   tree name;\n-  char *variety = aggr_variety (t);\n+  const char *variety = aggr_variety (t);\n \n   dump_qualifiers (t, after);\n \n@@ -659,7 +659,7 @@ static void\n dump_global_iord (t)\n      tree t;\n {\n-  char *name = IDENTIFIER_POINTER (t);\n+  const char *name = IDENTIFIER_POINTER (t);\n \n   OB_PUTS (\"(static \");\n   if (name [sizeof (GLOBAL_THING) - 1] == 'I')\n@@ -807,7 +807,7 @@ dump_decl (t, v)\n \t  }\n \telse if (IDENTIFIER_OPNAME_P (t))\n \t  {\n-\t    char *name_string = operator_name_string (t);\n+\t    const char *name_string = operator_name_string (t);\n \t    OB_PUTS (\"operator \");\n \t    OB_PUTCP (name_string);\n \t  }\n@@ -1135,7 +1135,7 @@ dump_function_name (t)\n     }\n   else if (IDENTIFIER_OPNAME_P (name))\n     {\n-      char *name_string = operator_name_string (name);\n+      const char *name_string = operator_name_string (name);\n       OB_PUTS (\"operator \");\n       OB_PUTCP (name_string);\n     }\n@@ -1303,7 +1303,7 @@ dump_expr (t, nop)\n \t/* If it's an enum, output its tag, rather than its value.  */\n \tif (TREE_CODE (type) == ENUMERAL_TYPE)\n \t  {\n-\t    char *p = enum_name_string (t, type);\n+\t    const char *p = enum_name_string (t, type);\n \t    OB_PUTCP (p);\n \t  }\n \telse if (type == boolean_type_node)\n@@ -1352,7 +1352,7 @@ dump_expr (t, nop)\n       sprintf (digit_buffer, \"%g\", TREE_REAL_CST (t));\n #else\n       {\n-\tunsigned char *p = (unsigned char *) &TREE_REAL_CST (t);\n+\tconst unsigned char *p = (const unsigned char *) &TREE_REAL_CST (t);\n \tsize_t i;\n \tstrcpy (digit_buffer, \"0x\");\n \tfor (i = 0; i < sizeof TREE_REAL_CST (t); i++)\n@@ -1371,7 +1371,7 @@ dump_expr (t, nop)\n \n     case STRING_CST:\n       {\n-\tchar *p = TREE_STRING_POINTER (t);\n+\tconst char *p = TREE_STRING_POINTER (t);\n \tint len = TREE_STRING_LENGTH (t) - 1;\n \tint i;\n \n@@ -1842,7 +1842,7 @@ dump_expr (t, nop)\n \n static void\n dump_binary_op (opstring, t)\n-     char *opstring;\n+     const char *opstring;\n      tree t;\n {\n   OB_PUTC ('(');\n@@ -1859,7 +1859,7 @@ dump_binary_op (opstring, t)\n \n static void\n dump_unary_op (opstring, t, nop)\n-     char *opstring;\n+     const char *opstring;\n      tree t;\n      int nop;\n {"}, {"sha": "d0c62b4ec87fb16b0e55263ebd251871a29f1f73", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -85,6 +85,12 @@ static void begin_definition_of_inclass_inline PROTO((struct pending_inline*));\n static void parse_float PROTO((PTR));\n static int is_global PROTO((tree));\n static void init_filename_times PROTO((void));\n+static void extend_token_buffer_to PROTO((int));\n+#ifdef HANDLE_PRAGMA\n+static int pragma_getc PROTO((void));\n+static void pragma_ungetc PROTO((int));\n+#endif\n+static int read_line_number PROTO((int *));\n \n /* Given a file name X, return the nondirectory portion.\n    Keep in mind that X can be computed more than once.  */\n@@ -134,8 +140,8 @@ extern struct obstack token_obstack;\n \n /* Holds translations from TREE_CODEs to operator name strings,\n    i.e., opname_tab[PLUS_EXPR] == \"+\".  */\n-char **opname_tab;\n-char **assignop_tab;\n+const char **opname_tab;\n+const char **assignop_tab;\n \f\n extern int yychar;\t\t/*  the lookahead symbol\t\t*/\n extern YYSTYPE yylval;\t\t/*  the semantic value of the\t\t*/\n@@ -240,7 +246,7 @@ set_quals_and_spec (call_declarator, cv_qualifiers, exception_specification)\n tree ansi_opname[LAST_CPLUS_TREE_CODE];\n tree ansi_assopname[LAST_CPLUS_TREE_CODE];\n \n-char *\n+const char *\n operator_name_string (name)\n      tree name;\n {\n@@ -530,9 +536,9 @@ init_parse (filename)\n \t (char *)(tree_code_name + (int) LAST_AND_UNUSED_TREE_CODE),\n \t (LAST_CPLUS_TREE_CODE - (int)LAST_AND_UNUSED_TREE_CODE) * sizeof (char *));\n \n-  opname_tab = (char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n+  opname_tab = (const char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n   bzero ((char *)opname_tab, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n-  assignop_tab = (char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n+  assignop_tab = (const char **)oballoc ((int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n   bzero ((char *)assignop_tab, (int)LAST_CPLUS_TREE_CODE * sizeof (char *));\n \n   ansi_opname[0] = get_identifier (\"<invalid operator>\");\n@@ -3606,8 +3612,8 @@ real_yylex ()\n     case 'z':\n     case '_':\n     case '$':\n-    letter:\n #if USE_CPPLIB\n+    letter:\n       if (cpp_token == CPP_NAME)\n \t{\n \t  /* Note that one character has already been read from"}, {"sha": "39f6dcebb1eeb9fdc98d01371d37b8f3c619cef2", "filename": "gcc/cp/method.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -79,7 +79,7 @@ static void end_squangling PROTO((void));\n static int check_ktype PROTO((tree, int));\n static int issue_ktype PROTO((tree));\n static void build_overload_scope_ref PROTO((tree));\n-static void build_mangled_template_parm_index PROTO((char *, tree));\n+static void build_mangled_template_parm_index PROTO((const char *, tree));\n #if HOST_BITS_PER_WIDE_INT >= 64\n static void build_mangled_C9x_name PROTO((int));\n #endif\n@@ -574,7 +574,7 @@ build_overload_int (value, in_template)\n \t  int i;\n \t  int operands = tree_code_length[(int) TREE_CODE (value)];\n \t  tree id;\n-\t  char* name;\n+\t  const char *name;\n \n \t  id = ansi_opname [(int) TREE_CODE (value)];\n \t  my_friendly_assert (id != NULL_TREE, 0);\n@@ -657,7 +657,7 @@ build_overload_int (value, in_template)\n \n static void \n build_mangled_template_parm_index (s, index)\n-     char* s;\n+     const char *s;\n      tree index;\n {\n   OB_PUTCP (s);\n@@ -1591,7 +1591,7 @@ build_decl_overload_real (dname, parms, ret_type, tparms, targs,\n      tree targs;\n      int for_method;\n {\n-  char *name = IDENTIFIER_POINTER (dname);\n+  const char *name = IDENTIFIER_POINTER (dname);\n \n   /* member operators new and delete look like methods at this point.  */\n   if (! for_method && parms != NULL_TREE && TREE_CODE (parms) == TREE_LIST\n@@ -1798,7 +1798,7 @@ build_overload_with_type (name, type)\n \n tree\n get_id_2 (name, name2)\n-     char *name;\n+     const char *name;\n      tree name2;\n {\n   OB_INIT ();"}, {"sha": "7592df65042e47cd471ff70598ebfa646b4d4cba", "filename": "gcc/cp/search.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -1888,7 +1888,7 @@ covariant_return_p (brettype, drettype)\n /* Check that virtual overrider OVERRIDER is acceptable for base function\n    BASEFN. Issue diagnostic, and return zero, if unacceptable.  */\n \n-int\n+static int\n check_final_overrider (overrider, basefn)\n      tree overrider, basefn;\n {"}, {"sha": "991234c5678bb4de5e0986a12dfa5581924b365e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c0758dde6fff7bf6350eedda3dd9db427a44fcb/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9c0758dde6fff7bf6350eedda3dd9db427a44fcb", "patch": "@@ -520,7 +520,7 @@ composite_pointer_type (t1, t2, arg1, arg2, location)\n      tree t2;\n      tree arg1;\n      tree arg2;\n-     char* location;\n+     const char* location;\n {\n   tree result_type;\n "}]}