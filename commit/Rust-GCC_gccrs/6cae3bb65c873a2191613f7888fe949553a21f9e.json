{"sha": "6cae3bb65c873a2191613f7888fe949553a21f9e", "node_id": "C_kwDOANBUbNoAKDZjYWUzYmI2NWM4NzNhMjE5MTYxM2Y3ODg4ZmU5NDk1NTNhMjFmOWU", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-18T08:21:52Z"}, "committer": {"name": "Iain Sandoe", "email": "iain@sandoe.co.uk", "date": "2022-04-28T12:52:23Z"}, "message": "c++, coroutines: Account for overloaded promise return_value() [PR105301].\n\nWhether it was intended or not, it is possible to define a coroutine promise\nwith multiple return_value() methods [which need not even have the same type].\n\nWe were not accounting for this possibility in the check to see whether both\nreturn_value and return_void are specifier (which is prohibited by the\nstandard).  Fixed thus and provided an adjusted diagnostic for the case that\nmultiple return_value() methods are present.\n\nSigned-off-by: Iain Sandoe <iain@sandoe.co.uk>\n\n\tPR c++/105301\n\ngcc/cp/ChangeLog:\n\n\t* coroutines.cc (coro_promise_type_found_p): Account for possible\n\tmutliple overloads of the promise return_value() method.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/coroutines/pr105301.C: New test.", "tree": {"sha": "57fc31ddc4712f710143fc12674510239e551fd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/57fc31ddc4712f710143fc12674510239e551fd2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6cae3bb65c873a2191613f7888fe949553a21f9e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cae3bb65c873a2191613f7888fe949553a21f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cae3bb65c873a2191613f7888fe949553a21f9e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cae3bb65c873a2191613f7888fe949553a21f9e/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a176a833f23e64ad38690a678bf938227ce46f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15a176a833f23e64ad38690a678bf938227ce46f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15a176a833f23e64ad38690a678bf938227ce46f"}], "stats": {"total": 59, "additions": 57, "deletions": 2}, "files": [{"sha": "7f2377624eb6b9b433a9aace1cc2651600fb439c", "filename": "gcc/cp/coroutines.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cae3bb65c873a2191613f7888fe949553a21f9e/gcc%2Fcp%2Fcoroutines.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cae3bb65c873a2191613f7888fe949553a21f9e/gcc%2Fcp%2Fcoroutines.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcoroutines.cc?ref=6cae3bb65c873a2191613f7888fe949553a21f9e", "patch": "@@ -513,8 +513,14 @@ coro_promise_type_found_p (tree fndecl, location_t loc)\n \t\t      coro_info->promise_type);\n \t  inform (DECL_SOURCE_LOCATION (BASELINK_FUNCTIONS (has_ret_void)),\n \t\t  \"%<return_void%> declared here\");\n-\t  inform (DECL_SOURCE_LOCATION (BASELINK_FUNCTIONS (has_ret_val)),\n-\t\t  \"%<return_value%> declared here\");\n+\t  has_ret_val = BASELINK_FUNCTIONS (has_ret_val);\n+\t  const char *message = \"%<return_value%> declared here\";\n+\t  if (TREE_CODE (has_ret_val) == OVERLOAD)\n+\t    {\n+\t      has_ret_val = OVL_FIRST (has_ret_val);\n+\t      message = \"%<return_value%> first declared here\";\n+\t    }\n+\t  inform (DECL_SOURCE_LOCATION (has_ret_val), message);\n \t  coro_info->coro_co_return_error_emitted = true;\n \t  return false;\n \t}"}, {"sha": "33a0b03cf5d954cb458f503bd78bcd3cd9127919", "filename": "gcc/testsuite/g++.dg/coroutines/pr105301.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6cae3bb65c873a2191613f7888fe949553a21f9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr105301.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6cae3bb65c873a2191613f7888fe949553a21f9e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr105301.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcoroutines%2Fpr105301.C?ref=6cae3bb65c873a2191613f7888fe949553a21f9e", "patch": "@@ -0,0 +1,49 @@\n+// { dg-additional-options \"-fsyntax-only\" }\n+namespace std {\n+template <class T, class = void>\n+struct traits_sfinae_base {};\n+\n+template <class Ret, class... Args>\n+struct coroutine_traits : public traits_sfinae_base<Ret> {};\n+}\n+\n+template<typename Promise> struct coro {};\n+template <typename Promise, typename... Ps>\n+struct std::coroutine_traits<coro<Promise>, Ps...> {\n+  using promise_type = Promise;\n+};\n+\n+struct awaitable {\n+  bool await_ready() noexcept;\n+  template <typename F>\n+  void await_suspend(F) noexcept;\n+  void await_resume() noexcept;\n+} a;\n+\n+struct suspend_always {\n+  bool await_ready() noexcept { return false; }\n+  template <typename F>\n+  void await_suspend(F) noexcept;\n+  void await_resume() noexcept {}\n+};\n+\n+namespace std {\n+template <class PromiseType = void>\n+struct coroutine_handle {};\n+}\n+\n+struct bad_promise_6 {\n+  coro<bad_promise_6> get_return_object();\n+  suspend_always initial_suspend();\n+  suspend_always final_suspend() noexcept;\n+  void unhandled_exception();\n+  void return_void();\n+  void return_value(int) const;\n+  void return_value(int);\n+};\n+\n+coro<bad_promise_6>\n+bad_implicit_return() // { dg-error {.aka 'bad_promise_6'. declares both 'return_value' and 'return_void'} }\n+{\n+  co_await a;\n+}"}]}