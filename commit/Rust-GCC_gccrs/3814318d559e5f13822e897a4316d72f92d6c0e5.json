{"sha": "3814318d559e5f13822e897a4316d72f92d6c0e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzgxNDMxOGQ1NTllNWYxMzgyMmU4OTdhNDMxNmQ3MmY5MmQ2YzBlNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:16:34Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:16:34Z"}, "message": "vax.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n\n        * config/vax/vax.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n        (TARGET_TRAMPOLINE_INIT): New.\n        (vax_asm_trampoline_template, vax_trampoline_init): New.\n        * config/vax/vax.h (TRAMPOLINE_TEMPLATE): Move code to\n        vax_asm_trampoline_template.\n        (INITIALIZE_TRAMPOLINE): Move code to vax_trampoline_init.\n\nFrom-SVN: r152016", "tree": {"sha": "b76c2efac90dd9a7c3a82f77fa6363d65d98e3b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b76c2efac90dd9a7c3a82f77fa6363d65d98e3b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3814318d559e5f13822e897a4316d72f92d6c0e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3814318d559e5f13822e897a4316d72f92d6c0e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3814318d559e5f13822e897a4316d72f92d6c0e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3814318d559e5f13822e897a4316d72f92d6c0e5/comments", "author": null, "committer": null, "parents": [{"sha": "e0c6c273290d10461829e1aa888ca89fadfe0209", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0c6c273290d10461829e1aa888ca89fadfe0209", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0c6c273290d10461829e1aa888ca89fadfe0209"}], "stats": {"total": 90, "additions": 56, "deletions": 34}, "files": [{"sha": "7a6e7a8b2bcc0963320aeb16ffc5ed895b220ef7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3814318d559e5f13822e897a4316d72f92d6c0e5", "patch": "@@ -285,6 +285,13 @@\n \t(INITIALIZE_TRAMPOLINE): Move code to v850_trampoline_init\n \tand adjust for target hook parameters.\n \n+\t* config/vax/vax.c (TARGET_ASM_TRAMPOLINE_TEMPLATE): New.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t(vax_asm_trampoline_template, vax_trampoline_init): New.\n+\t* config/vax/vax.h (TRAMPOLINE_TEMPLATE): Move code to\n+\tvax_asm_trampoline_template.\n+\t(INITIALIZE_TRAMPOLINE): Move code to vax_trampoline_init.\n+\n 2009-09-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (bdesc_2arg): Fix CODE_FOR_vector_gt* codes"}, {"sha": "d75d11f9a519971af69bbba9178262583214bad9", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=3814318d559e5f13822e897a4316d72f92d6c0e5", "patch": "@@ -57,6 +57,8 @@ static int vax_address_cost (rtx, bool);\n static bool vax_rtx_costs (rtx, int, int, int *, bool);\n static rtx vax_struct_value_rtx (tree, int);\n static rtx vax_builtin_setjmp_frame_value (void);\n+static void vax_asm_trampoline_template (FILE *);\n+static void vax_trampoline_init (rtx, tree, rtx);\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -101,6 +103,11 @@ static rtx vax_builtin_setjmp_frame_value (void);\n #undef TARGET_FRAME_POINTER_REQUIRED\n #define TARGET_FRAME_POINTER_REQUIRED hook_bool_void_true\n \n+#undef TARGET_ASM_TRAMPOLINE_TEMPLATE\n+#define TARGET_ASM_TRAMPOLINE_TEMPLATE vax_asm_trampoline_template\n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT vax_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Set global variables as needed for the options enabled.  */\n@@ -2020,3 +2027,45 @@ adjacent_operands_p (rtx lo, rtx hi, enum machine_mode mode)\n   return rtx_equal_p (lo, hi)\n \t && hi_offset - lo_offset == GET_MODE_SIZE (mode);\n }\n+\n+/* Output assembler code for a block containing the constant parts\n+   of a trampoline, leaving space for the variable parts.  */\n+\n+/* On the VAX, the trampoline contains an entry mask and two instructions:\n+     .word NN\n+     movl $STATIC,r0   (store the functions static chain)\n+     jmp  *$FUNCTION   (jump to function code at address FUNCTION)  */\n+\n+static void\n+vax_asm_trampoline_template (FILE *f ATTRIBUTE_UNUSED)\n+{\n+  assemble_aligned_integer (2, const0_rtx);\n+  assemble_aligned_integer (2, GEN_INT (0x8fd0));\n+  assemble_aligned_integer (4, const0_rtx);\n+  assemble_aligned_integer (1, GEN_INT (0x50 + STATIC_CHAIN_REGNUM));\n+  assemble_aligned_integer (2, GEN_INT (0x9f17));\n+  assemble_aligned_integer (4, const0_rtx);\n+}\n+\n+/* We copy the register-mask from the function's pure code\n+   to the start of the trampoline.  */\n+\n+static void\n+vax_trampoline_init (rtx m_tramp, tree fndecl, rtx cxt)\n+{\n+  rtx fnaddr = XEXP (DECL_RTL (fndecl), 0);\n+  rtx mem;\n+\n+  emit_block_move (m_tramp, assemble_trampoline_template (),\n+\t\t   GEN_INT (TRAMPOLINE_SIZE), BLOCK_OP_NORMAL);\n+\n+  mem = adjust_address (m_tramp, HImode, 0);\n+  emit_move_insn (mem, gen_const_mem (HImode, fnaddr));\n+\n+  mem = adjust_address (m_tramp, SImode, 4);\n+  emit_move_insn (mem, cxt);\n+  mem = adjust_address (m_tramp, SImode, 11);\n+  emit_move_insn (mem, plus_constant (fnaddr, 2));\n+  emit_insn (gen_sync_istream ());\n+}\n+"}, {"sha": "e85ce01f82077e224068c78a0b3944862b53f8ff", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3814318d559e5f13822e897a4316d72f92d6c0e5/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=3814318d559e5f13822e897a4316d72f92d6c0e5", "patch": "@@ -428,44 +428,10 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #define INITIAL_FRAME_POINTER_OFFSET(DEPTH) (DEPTH) = 0;\n \n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n-\n-/* On the VAX, the trampoline contains an entry mask and two instructions:\n-     .word NN\n-     movl $STATIC,r0   (store the functions static chain)\n-     jmp  *$FUNCTION   (jump to function code at address FUNCTION)  */\n-\n-#define TRAMPOLINE_TEMPLATE(FILE)\t\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  assemble_aligned_integer (2, const0_rtx);\t\t\t\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x8fd0));\t\t\t\\\n-  assemble_aligned_integer (4, const0_rtx);\t\t\t\t\\\n-  assemble_aligned_integer (1, GEN_INT (0x50 + STATIC_CHAIN_REGNUM));\t\\\n-  assemble_aligned_integer (2, GEN_INT (0x9f17));\t\t\t\\\n-  assemble_aligned_integer (4, const0_rtx);\t\t\t\t\\\n-}\n-\n /* Length in units of the trampoline for entering a nested function.  */\n \n #define TRAMPOLINE_SIZE 15\n \n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-\n-/* We copy the register-mask from the function's pure code\n-   to the start of the trampoline.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT)\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (HImode, TRAMP),\t\t\t\t\\\n-\t\t  gen_rtx_MEM (HImode, FNADDR));\t\t\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 4)), CXT);\t\\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 11)),\t\\\n-\t\t  plus_constant (FNADDR, 2));\t\t\t\t\\\n-  emit_insn (gen_sync_istream ());\t\t\t\t\t\\\n-}\n-\n /* Byte offset of return address in a stack frame.  The \"saved PC\" field\n    is in element [4] when treating the frame as an array of longwords.  */\n "}]}