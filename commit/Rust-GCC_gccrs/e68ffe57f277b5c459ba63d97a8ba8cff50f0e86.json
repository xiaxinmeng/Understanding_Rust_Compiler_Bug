{"sha": "e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4ZmZlNTdmMjc3YjVjNDU5YmE2M2Q5N2E4YmE4Y2ZmNTBmMGU4Ng==", "commit": {"author": {"name": "Charles Baylis", "email": "charles.baylis@linaro.org", "date": "2015-11-11T01:11:20Z"}, "committer": {"name": "Charles Baylis", "email": "cbaylis@gcc.gnu.org", "date": "2015-11-11T01:11:20Z"}, "message": "[ARM] PR63870 Remove error for invalid lane numbers\n\n2015-11-11  Charles Baylis  <charles.baylis@linaro.org>\n\n\tPR target/63870\n\t* config/arm/neon.md (neon_vld1_lane<mode>): Remove error for invalid\n\tlane number.\n\t(neon_vst1_lane<mode>): Likewise.\n\t(neon_vld2_lane<mode>): Likewise.\n\t(neon_vst2_lane<mode>): Likewise.\n\t(neon_vld3_lane<mode>): Likewise.\n\t(neon_vst3_lane<mode>): Likewise.\n\t(neon_vld4_lane<mode>): Likewise.\n\t(neon_vst4_lane<mode>): Likewise.\n\nFrom-SVN: r230144", "tree": {"sha": "f714f22a797315a9e13fd7ea418d1a2df8f43193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f714f22a797315a9e13fd7ea418d1a2df8f43193"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86/comments", "author": null, "committer": null, "parents": [{"sha": "22f9db641f1532b33d27104fcb00167172bfb8ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22f9db641f1532b33d27104fcb00167172bfb8ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22f9db641f1532b33d27104fcb00167172bfb8ec"}], "stats": {"total": 61, "additions": 21, "deletions": 40}, "files": [{"sha": "318de8ff54de7ca2ad8c895835c44aab7e7d72e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "patch": "@@ -1,3 +1,16 @@\n+2015-11-11  Charles Baylis  <charles.baylis@linaro.org>\n+\n+\tPR target/63870\n+\t* config/arm/neon.md (neon_vld1_lane<mode>): Remove error for invalid\n+\tlane number.\n+\t(neon_vst1_lane<mode>): Likewise.\n+\t(neon_vld2_lane<mode>): Likewise.\n+\t(neon_vst2_lane<mode>): Likewise.\n+\t(neon_vld3_lane<mode>): Likewise.\n+\t(neon_vst3_lane<mode>): Likewise.\n+\t(neon_vld4_lane<mode>): Likewise.\n+\t(neon_vst4_lane<mode>): Likewise.\n+\n 2015-11-11  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/63870"}, {"sha": "119550c4baae95f37499dc0163034c90e02b493b", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 8, "deletions": 40, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e68ffe57f277b5c459ba63d97a8ba8cff50f0e86/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=e68ffe57f277b5c459ba63d97a8ba8cff50f0e86", "patch": "@@ -4267,8 +4267,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT lane = NEON_ENDIAN_LANE_N(<MODE>mode, INTVAL (operands[3]));\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   operands[3] = GEN_INT (lane);\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   if (max == 1)\n     return \"vld1.<V_sz_elem>\\t%P0, %A1\";\n   else\n@@ -4291,9 +4289,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   operands[3] = GEN_INT (lane);\n   int regno = REGNO (operands[0]);\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -4379,8 +4375,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT lane = NEON_ENDIAN_LANE_N(<MODE>mode, INTVAL (operands[2]));\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   operands[2] = GEN_INT (lane);\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   if (max == 1)\n     return \"vst1.<V_sz_elem>\\t{%P1}, %A0\";\n   else\n@@ -4402,9 +4396,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT lane = NEON_ENDIAN_LANE_N(<MODE>mode, INTVAL (operands[2]));\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -4475,8 +4467,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[4];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = gen_rtx_REG (DImode, regno);\n   ops[1] = gen_rtx_REG (DImode, regno + 2);\n   ops[2] = operands[1];\n@@ -4502,9 +4492,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[4];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -4594,8 +4582,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[4];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = operands[0];\n   ops[1] = gen_rtx_REG (DImode, regno);\n   ops[2] = gen_rtx_REG (DImode, regno + 2);\n@@ -4621,9 +4607,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[4];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -4742,8 +4726,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[5];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = gen_rtx_REG (DImode, regno);\n   ops[1] = gen_rtx_REG (DImode, regno + 2);\n   ops[2] = gen_rtx_REG (DImode, regno + 4);\n@@ -4771,9 +4753,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[5];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -4918,8 +4898,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[5];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = operands[0];\n   ops[1] = gen_rtx_REG (DImode, regno);\n   ops[2] = gen_rtx_REG (DImode, regno + 2);\n@@ -4947,9 +4925,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[5];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -5072,8 +5048,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[6];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = gen_rtx_REG (DImode, regno);\n   ops[1] = gen_rtx_REG (DImode, regno + 2);\n   ops[2] = gen_rtx_REG (DImode, regno + 4);\n@@ -5102,9 +5076,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[0]);\n   rtx ops[6];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;\n@@ -5256,8 +5228,6 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[6];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n   ops[0] = operands[0];\n   ops[1] = gen_rtx_REG (DImode, regno);\n   ops[2] = gen_rtx_REG (DImode, regno + 2);\n@@ -5286,9 +5256,7 @@ if (BYTES_BIG_ENDIAN)\n   HOST_WIDE_INT max = GET_MODE_NUNITS (<MODE>mode);\n   int regno = REGNO (operands[1]);\n   rtx ops[6];\n-  if (lane < 0 || lane >= max)\n-    error (\"lane out of range\");\n-  else if (lane >= max / 2)\n+  if (lane >= max / 2)\n     {\n       lane -= max / 2;\n       regno += 2;"}]}