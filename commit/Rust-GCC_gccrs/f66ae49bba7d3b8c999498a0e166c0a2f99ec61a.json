{"sha": "f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "node_id": "C_kwDOANBUbNoAKGY2NmFlNDliYmE3ZDNiOGM5OTk0OThhMGUxNjZjMGEyZjk5ZWM2MWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-04-17T07:22:57Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-04-17T09:02:29Z"}, "message": "tree-optimization/109524 - ICE with VRP edge removal\n\nVRP queues edges to process late for updating global ranges for\n__builtin_unreachable.  But this interferes with edge removal\nfrom substitute_and_fold.  The following deals with this by\nlooking up the edge with source/dest block indices which do not\nbecome stale.\n\n\tPR tree-optimization/109524\n\t* tree-vrp.cc (remove_unreachable::m_list): Change to a\n\tvector of pairs of block indices.\n\t(remove_unreachable::maybe_register_block): Adjust.\n\t(remove_unreachable::remove_and_update_globals): Likewise.\n\tDeal with removed blocks.\n\n\t* g++.dg/pr109524.C: New testcase.", "tree": {"sha": "5cd4d6543a1ad6aff72fb5aa6a27a76fdaab7d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cd4d6543a1ad6aff72fb5aa6a27a76fdaab7d0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1f25e04b8d10bbe5dcaf98bb7e17cdaec9f169d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1f25e04b8d10bbe5dcaf98bb7e17cdaec9f169d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1f25e04b8d10bbe5dcaf98bb7e17cdaec9f169d"}], "stats": {"total": 54, "additions": 50, "deletions": 4}, "files": [{"sha": "a560839cd5ba9c60315e70d7a20aec410815bc41", "filename": "gcc/testsuite/g++.dg/pr109524.C", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr109524.C?ref=f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "patch": "@@ -0,0 +1,41 @@\n+// { dg-do compile }\n+// { dg-require-effective-target c++11 }\n+// { dg-options \"-O3 -fno-tree-forwprop -fnon-call-exceptions -fno-tree-ccp -fno-tree-fre\" }\n+\n+struct nn;\n+void f();\n+int *m;\n+struct _Guard {\n+        ~_Guard() {\n+          if (_M_guarded)\n+                  __builtin_unreachable();\n+        }\n+        nn *_M_guarded;\n+};\n+struct nn {\n+  int * _M_dataplus;\n+  nn(nn &)\n+        {\n+                f();\n+                _Guard   __guard;\n+                m = _M_dataplus;\n+        }\n+  nn(){}\n+};\n+  void hnn(nn *a)\n+        {\n+                f();\n+                _Guard   __guard;\n+                m = a->_M_dataplus;\n+        }\n+bool gg();\n+static inline nn\n+hh(nn str) {\n+  if (gg())\n+    return str;\n+  __builtin_unreachable();\n+}\n+void h() {\n+\n+  hh({});\n+}"}, {"sha": "f4d484526c77453faeaab85daabf31204c5ee9a0", "filename": "gcc/tree-vrp.cc", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a/gcc%2Ftree-vrp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f66ae49bba7d3b8c999498a0e166c0a2f99ec61a/gcc%2Ftree-vrp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.cc?ref=f66ae49bba7d3b8c999498a0e166c0a2f99ec61a", "patch": "@@ -75,7 +75,7 @@ class remove_unreachable {\n   ~remove_unreachable () { m_list.release (); }\n   void maybe_register_block (basic_block bb);\n   bool remove_and_update_globals (bool final_p);\n-  vec<edge> m_list;\n+  vec<std::pair<int, int> > m_list;\n   gimple_ranger &m_ranger;\n };\n \n@@ -103,9 +103,9 @@ remove_unreachable::maybe_register_block (basic_block bb)\n     return;\n \n   if (un0)\n-    m_list.safe_push (e1);\n+    m_list.safe_push (std::make_pair (e1->src->index, e1->dest->index));\n   else\n-    m_list.safe_push (e0);\n+    m_list.safe_push (std::make_pair (e0->src->index, e0->dest->index));\n }\n \n // Process the edges in the list, change the conditions and removing any\n@@ -132,7 +132,12 @@ remove_unreachable::remove_and_update_globals (bool final_p)\n   auto_bitmap all_exports;\n   for (i = 0; i < m_list.length (); i++)\n     {\n-      edge e = m_list[i];\n+      auto eb = m_list[i];\n+      basic_block src = BASIC_BLOCK_FOR_FN (cfun, eb.first);\n+      basic_block dest = BASIC_BLOCK_FOR_FN (cfun, eb.second);\n+      if (!src || !dest)\n+\tcontinue;\n+      edge e = find_edge (src, dest);\n       gimple *s = gimple_outgoing_range_stmt_p (e->src);\n       gcc_checking_assert (gimple_code (s) == GIMPLE_COND);\n       bool lhs_p = TREE_CODE (gimple_cond_lhs (s)) == SSA_NAME;"}]}