{"sha": "444d6efeb6561816dcf69fcf0202597231eb88a0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ0ZDZlZmViNjU2MTgxNmRjZjY5ZmNmMDIwMjU5NzIzMWViODhhMA==", "commit": {"author": {"name": "Joern Rennecke", "email": "amylaar@spamcop.net", "date": "2010-11-05T18:46:22Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2010-11-05T18:46:22Z"}, "message": "re PR target/44754 (m32c_pragma_memregs / m32c_pragma_address warnings)\n\n\tPR target/44754\n\t* config/m32c/m32c.c (m32_function_arg): Rename declaration to...\n\t(m32c_function_arg).  Add comma between arguments two and three.\n\t(m32c_promote_prototypes): Remove declaration.\n\t(current_function_special_page_vector): Likewise.\n\t(m32c_regno_reg_class): Change return type to enum reg_class.\n\t(m32c_pushm_popm): Use add_reg_note.\n\t(m32c_push_rounding): Change return type to unsigned int.\n\t(m32c_legitimize_reload_address): Cast argument 11 to push_reload to\n\tenum reload_type.\n\t(m32c_insert_attributes): Constify variable name.\n\t(m32c_output_aligned_common): Add ATTRIBUTE_UNUSED to argument decl.\n\t(m32c_prepare_shift): Remove variable lref.\n\t(m32c_expand_movcc): Remove variable cmp.\n\t(m32c_expand_insv): Fix check of op0 rtx_code to use GET_CODE.\n\t(m32c_compare_redundant): Remove variable op2.\n\t* config/m32c/m32c-pragma.c (\"c-family/c-common.h\"): Include.\n\t(m32c_pragma_memregs): Assign the number to target_memregs.\n\t(m32c_pragma_address): Remove variable var_str.\n\t* config/m32c/m32c.h (REG_CLASS_FROM_CONSTRAINT): Case value to\n\tenum reg_class.\n\t(LIMIT_RELOAD_CLASS, SECONDARY_RELOAD_CLASS): Likewise.\n\t* config/m32c/bitops.md (andsi3): Add default case to switch.\n\t(iorsi3, xorsi3): Likewise.\n\t* config/m32c/addsub.md (addsi3_1, subsi3_1): Likewise.\n\t* config/m32c/jump.md (call, call_value): Likewise.\n\t* config/m32c/m32c-protos.h (m32c_push_rounding): Update prototype.\n\t(m32c_regno_reg_class): Likewise.\n\t(current_function_special_page_vector): Declare.\n\nFrom-SVN: r166370", "tree": {"sha": "4abc0d82ee5fa2b59f91fed31d3f65b72e094d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4abc0d82ee5fa2b59f91fed31d3f65b72e094d2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/444d6efeb6561816dcf69fcf0202597231eb88a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444d6efeb6561816dcf69fcf0202597231eb88a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/444d6efeb6561816dcf69fcf0202597231eb88a0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/444d6efeb6561816dcf69fcf0202597231eb88a0/comments", "author": null, "committer": null, "parents": [{"sha": "b71e5eba5e3cab860b00dd7328d15b5a6fd30058", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b71e5eba5e3cab860b00dd7328d15b5a6fd30058", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b71e5eba5e3cab860b00dd7328d15b5a6fd30058"}], "stats": {"total": 99, "additions": 66, "deletions": 33}, "files": [{"sha": "8efea324e9584802f2f708eb0fad6bd10f0adde4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -52,6 +52,36 @@\n \t* haifa-sched.c (initiate_bb_reg_pressure_info): Add ATTRIBUTE_UNUSED\n \tto i.\n \n+\tPR target/44754\n+\t* config/m32c/m32c.c (m32_function_arg): Rename declaration to...\n+\t(m32c_function_arg).  Add comma between arguments two and three.\n+\t(m32c_promote_prototypes): Remove declaration.\n+\t(current_function_special_page_vector): Likewise.\n+\t(m32c_regno_reg_class): Change return type to enum reg_class.\n+\t(m32c_pushm_popm): Use add_reg_note.\n+\t(m32c_push_rounding): Change return type to unsigned int.\n+\t(m32c_legitimize_reload_address): Cast argument 11 to push_reload to\n+\tenum reload_type.\n+\t(m32c_insert_attributes): Constify variable name.\n+\t(m32c_output_aligned_common): Add ATTRIBUTE_UNUSED to argument decl.\n+\t(m32c_prepare_shift): Remove variable lref.\n+\t(m32c_expand_movcc): Remove variable cmp.\n+\t(m32c_expand_insv): Fix check of op0 rtx_code to use GET_CODE.\n+\t(m32c_compare_redundant): Remove variable op2.\n+\t* config/m32c/m32c-pragma.c (\"c-family/c-common.h\"): Include.\n+\t(m32c_pragma_memregs): Assign the number to target_memregs.\n+\t(m32c_pragma_address): Remove variable var_str.\n+\t* config/m32c/m32c.h (REG_CLASS_FROM_CONSTRAINT): Case value to\n+\tenum reg_class.\n+\t(LIMIT_RELOAD_CLASS, SECONDARY_RELOAD_CLASS): Likewise.\n+\t* config/m32c/bitops.md (andsi3): Add default case to switch.\n+\t(iorsi3, xorsi3): Likewise.\n+\t* config/m32c/addsub.md (addsi3_1, subsi3_1): Likewise.\n+\t* config/m32c/jump.md (call, call_value): Likewise.\n+\t* config/m32c/m32c-protos.h (m32c_push_rounding): Update prototype.\n+\t(m32c_regno_reg_class): Likewise.\n+\t(current_function_special_page_vector): Declare.\n+\n 2010-11-05  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cfgexpand.c (expand_debug_expr): Handle MEM_REF"}, {"sha": "540c098bad4e8054e656671cd182bef99629408c", "filename": "gcc/config/m32c/addsub.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Faddsub.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Faddsub.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Faddsub.md?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -116,6 +116,8 @@\n       return \\\"add.w %h2,%h0\\;adc.w %H2,%H0\\\";\n     case 7:\n       return \\\"add.w %h2,%h0\\;adc.w %H2,%H0\\\";\n+    default:\n+      gcc_unreachable ();\n     }\"\n   [(set_attr \"flags\" \"x,x,x,x,x,x,x,x\")]\n )\n@@ -200,6 +202,8 @@\n       return \\\"sub.w %h2,%h0\\;sbb.w %H2,%H0\\\";\n     case 5:\n       return \\\"sub.w %h2,%h0\\;sbb.w %H2,%H0\\\";\n+    default:\n+      gcc_unreachable ();\n     }\"\n   [(set_attr \"flags\" \"x,x,x,x,x,x\")]\n )"}, {"sha": "5c454511aba70eef252035708903189ac633f562", "filename": "gcc/config/m32c/bitops.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fbitops.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fbitops.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fbitops.md?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -136,6 +136,8 @@\n       return \\\"and.w %h2,%h0\\;and.w %H2,%H0\\\";\n     case 5:\n       return \\\"and.w %h2,%h0\\;and.w %H2,%H0\\\";\n+    default:\n+      gcc_unreachable ();\n     }\"\n   [(set_attr \"flags\" \"x,x,x,x,x,x\")]\n )\n@@ -314,6 +316,8 @@\n       return \\\"or.w %h2,%h0\\;or.w %H2,%H0\\\";\n     case 5:\n       return \\\"or.w %h2,%h0\\;or.w %H2,%H0\\\";\n+    default:\n+      gcc_unreachable ();\n     }\"\n   [(set_attr \"flags\" \"x,x,x,x,x,x\")]\n )\n@@ -360,6 +364,8 @@\n       return \\\"xor.w %h2,%h0\\;xor.w %H2,%H0\\\";\n     case 5:\n       return \\\"xor.w %h2,%h0\\;xor.w %H2,%H0\\\";\n+    default:\n+      gcc_unreachable ();\n     }\"\n   [(set_attr \"flags\" \"x,x,x,x,x,x\")]\n )"}, {"sha": "357cf29a9b4b3dfd9e332eb8f2be72f103e608b5", "filename": "gcc/config/m32c/jump.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fjump.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fjump.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fjump.md?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -82,6 +82,7 @@ switch (which_alternative) {\n     }\n   case 1: return TARGET_A16 ? \\\"push.w %a0 | jsr.a\\tm32c_jsri16\\\" : \\\"jsri.a\\t%a0\\\";\n   case 2: return \\\"jsri.a\\t%a0\\\";\n+  default: gcc_unreachable ();\n }\"\n   [(set_attr \"flags\" \"x\")]\n   )\n@@ -108,6 +109,7 @@ switch (which_alternative) {\n     }\n   case 1: return TARGET_A16 ? \\\"push.w %a1 | jsr.a\\tm32c_jsri16\\\" : \\\"jsri.a\\t%a1\\\";\n   case 2: return \\\"jsri.a\\t%a1\\\";\n+  default: gcc_unreachable ();\n }\"\n   [(set_attr \"flags\" \"x,x,x\")]\n   )"}, {"sha": "f3f1ca9dea071e96a5e4c2e60a5a20f577ab0e6e", "filename": "gcc/config/m32c/m32c-pragma.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -24,9 +24,10 @@\n #include \"coretypes.h\"\n #include \"tm.h\"\n #include \"tree.h\"\n+#include \"c-family/c-pragma.h\"\n+#include \"c-family/c-common.h\"\n #include \"diagnostic-core.h\"\n #include \"toplev.h\"\n-#include \"c-family/c-pragma.h\"\n #include \"cpplib.h\"\n #include \"hard-reg-set.h\"\n #include \"output.h\"\n@@ -49,7 +50,6 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n   tree val;\n   enum cpp_ttype type;\n   HOST_WIDE_INT i;\n-  static char new_number[3];\n \n   type = pragma_lex (&val);\n   if (type == CPP_NUMBER)\n@@ -70,10 +70,7 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n \t\t\t   \"#pragma GCC memregs must precede any function decls\");\n \t\t  return;\n \t\t}\n-\t      new_number[0] = (i / 10) + '0';\n-\t      new_number[1] = (i % 10) + '0';\n-\t      new_number[2] = 0;\n-\t      target_memregs = new_number;\n+\t      target_memregs = i;\n \t      m32c_conditional_register_usage ();\n \t    }\n \t  else\n@@ -97,13 +94,10 @@ m32c_pragma_address (cpp_reader * reader ATTRIBUTE_UNUSED)\n   /* on off */\n   tree var, addr;\n   enum cpp_ttype type;\n-  const char *var_str;\n \n   type = pragma_lex (&var);\n   if (type == CPP_NAME)\n     {\n-      var_str = IDENTIFIER_POINTER (var);\n-\n       type = pragma_lex (&addr);\n       if (type == CPP_NUMBER)\n \t{"}, {"sha": "f7c32e7e877c255a221d54c64da7317edebc6066", "filename": "gcc/config/m32c/m32c-protos.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-protos.h?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -37,7 +37,7 @@ int  m32c_initial_elimination_offset (int, int);\n void m32c_output_reg_pop (FILE *, int);\n void m32c_output_reg_push (FILE *, int);\n int  m32c_print_operand_punct_valid_p (int);\n-int  m32c_push_rounding (int);\n+unsigned int  m32c_push_rounding (int);\n int  m32c_reg_class_from_constraint (char, const char *);\n void m32c_register_pragmas (void);\n void m32c_note_pragma_address (const char *, unsigned);\n@@ -78,12 +78,13 @@ int  m32c_prepare_shift (rtx *, int, int);\n void m32c_print_operand (FILE *, rtx, int);\n void m32c_print_operand_address (FILE *, rtx);\n int  m32c_reg_ok_for_base_p (rtx, int);\n-MM   m32c_regno_reg_class (int);\n+enum reg_class m32c_regno_reg_class (int);\n rtx  m32c_return_addr_rtx (int);\n const char *m32c_scc_pattern (rtx *, RTX_CODE);\n int  m32c_secondary_reload_class (int, MM, rtx);\n int  m32c_split_move (rtx *, MM, int);\n int  m32c_split_psi_p (rtx *);\n+int current_function_special_page_vector (rtx);\n \n #endif\n "}, {"sha": "3079f0414bee328ba1d5d8536b0f5fbcaddbb7d5", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -74,13 +74,12 @@ static struct machine_function *m32c_init_machine_status (void);\n static void m32c_insert_attributes (tree, tree *);\n static bool m32c_legitimate_address_p (enum machine_mode, rtx, bool);\n static bool m32c_addr_space_legitimate_address_p (enum machine_mode, rtx, bool, addr_space_t);\n-static rtx m32_function_arg (CUMULATIVE_ARGS *, enum machine_mode\n-\t\t\t     const_tree, bool);\n+static rtx m32c_function_arg (CUMULATIVE_ARGS *, enum machine_mode,\n+\t\t\t      const_tree, bool);\n static bool m32c_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t    const_tree, bool);\n static void m32c_function_arg_advance (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t       const_tree, bool);\n-static bool m32c_promote_prototypes (const_tree);\n static int m32c_pushm_popm (Push_Pop_Type);\n static bool m32c_strict_argument_naming (CUMULATIVE_ARGS *);\n static rtx m32c_struct_value_rtx (tree, int);\n@@ -92,8 +91,6 @@ static rtx m32c_libcall_value (enum machine_mode, const_rtx);\n /* Returns true if an address is specified, else false.  */\n static bool m32c_get_pragma_address (const char *varname, unsigned *addr);\n \n-int current_function_special_page_vector (rtx);\n-\n #define SYMBOL_FLAG_FUNCVEC_FUNCTION    (SYMBOL_FLAG_MACH_DEP << 0)\n \n #define streq(a,b) (strcmp ((a), (b)) == 0)\n@@ -623,7 +620,7 @@ m32c_modes_tieable_p (enum machine_mode m1, enum machine_mode m2)\n /* Register Classes */\n \n /* Implements REGNO_REG_CLASS.  */\n-enum machine_mode\n+enum reg_class\n m32c_regno_reg_class (int regno)\n {\n   switch (regno)\n@@ -1451,8 +1448,7 @@ m32c_pushm_popm (Push_Pop_Type ppt)\n \n \t  pushm = F (emit_insn (gen_pushm (GEN_INT (reg_mask))));\n \n-\t  REG_NOTES (pushm) = gen_rtx_EXPR_LIST (REG_FRAME_RELATED_EXPR, note,\n-\t\t\t\t\t\t REG_NOTES (pushm));\n+\t  add_reg_note (pushm, REG_FRAME_RELATED_EXPR, note);\n \t}\n \n       if (cfun->machine->is_interrupt)\n@@ -1519,7 +1515,7 @@ m32c_initial_elimination_offset (int from, int to)\n \n /* Implements PUSH_ROUNDING.  The R8C and M16C have byte stacks, the\n    M32C has word stacks.  */\n-int\n+unsigned int\n m32c_push_rounding (int n)\n {\n   if (TARGET_R8C || TARGET_M16C)\n@@ -2128,7 +2124,7 @@ m32c_legitimize_reload_address (rtx * x,\n \ttype = RELOAD_FOR_OTHER_ADDRESS;\n       push_reload (sum, NULL_RTX, &XEXP (*x, 0), NULL,\n \t\t   A_REGS, Pmode, VOIDmode, 0, 0, opnum,\n-\t\t   type);\n+\t\t   (enum reload_type) type);\n       return 1;\n     }\n \n@@ -2144,7 +2140,7 @@ m32c_legitimize_reload_address (rtx * x,\n \ttype = RELOAD_FOR_OTHER_ADDRESS;\n       push_reload (XEXP (*x, 0), NULL_RTX, &XEXP (*x, 0), NULL,\n \t\t   A_REGS, Pmode, VOIDmode, 0, 0, opnum,\n-\t\t   type);\n+\t\t   (enum reload_type) type);\n       return 1;\n     }\n \n@@ -3246,7 +3242,7 @@ m32c_insert_attributes (tree node ATTRIBUTE_UNUSED,\n \n   if (TREE_CODE (node) == VAR_DECL)\n     {\n-      char *name = IDENTIFIER_POINTER (DECL_NAME (node));\n+      const char *name = IDENTIFIER_POINTER (DECL_NAME (node));\n       if (m32c_get_pragma_address  (name, &addr))\n \t{\n \t  TREE_THIS_VOLATILE (node) = true;\n@@ -3321,7 +3317,8 @@ m32c_get_pragma_address (const char *varname, unsigned *address)\n }\n \n void\n-m32c_output_aligned_common (FILE *stream, tree decl, const char *name,\n+m32c_output_aligned_common (FILE *stream, tree decl ATTRIBUTE_UNUSED,\n+\t\t\t    const char *name,\n \t\t\t    int size, int align, int global)\n {\n   unsigned address;\n@@ -4122,13 +4119,12 @@ m32c_prepare_shift (rtx * operands, int scale, int shift_code)\n \t undefined to skip one of the comparisons.  */\n \n       rtx count;\n-      rtx label, lref, insn, tempvar;\n+      rtx label, insn, tempvar;\n \n       emit_move_insn (operands[0], operands[1]);\n \n       count = temp;\n       label = gen_label_rtx ();\n-      lref = gen_rtx_LABEL_REF (VOIDmode, label);\n       LABEL_NUSES (label) ++;\n \n       tempvar = gen_reg_rtx (mode);\n@@ -4195,7 +4191,6 @@ int\n m32c_expand_movcc (rtx *operands)\n {\n   rtx rel = operands[1];\n-  rtx cmp;\n \n   if (GET_CODE (rel) != EQ && GET_CODE (rel) != NE)\n     return 1;\n@@ -4258,7 +4253,7 @@ m32c_expand_insv (rtx *operands)\n \n   if (GET_MODE (op0) == HImode\n       && INTVAL (operands[2]) >= 8\n-      && GET_MODE (op0) == MEM)\n+      && GET_CODE (op0) == MEM)\n     {\n       /* We are little endian.  */\n       rtx new_mem = gen_rtx_MEM (QImode, plus_constant (XEXP (op0, 0), 1));\n@@ -4600,14 +4595,13 @@ m32c_compare_redundant (rtx cmp, rtx *operands)\n   int flags_needed;\n   int pflags;\n   rtx prev, pp, next;\n-  rtx op0, op1, op2;\n+  rtx op0, op1;\n #if DEBUG_CMP\n   int prev_icode, i;\n #endif\n \n   op0 = operands[0];\n   op1 = operands[1];\n-  op2 = operands[2];\n \n #if DEBUG_CMP\n   fprintf(stderr, \"\\n\\033[32mm32c_compare_redundant\\033[0m\\n\");"}, {"sha": "f88ced9fa58295a1c3440ca1e2c39ca28e556019", "filename": "gcc/config/m32c/m32c.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/444d6efeb6561816dcf69fcf0202597231eb88a0/gcc%2Fconfig%2Fm32c%2Fm32c.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.h?ref=444d6efeb6561816dcf69fcf0202597231eb88a0", "patch": "@@ -408,16 +408,18 @@ enum reg_class\n \t : (CHAR) == 'A' ? 2 \\\n \t : DEFAULT_CONSTRAINT_LEN(CHAR,STR))\n #define REG_CLASS_FROM_CONSTRAINT(CHAR,STR) \\\n-\tm32c_reg_class_from_constraint (CHAR, STR)\n+\t(enum reg_class) m32c_reg_class_from_constraint (CHAR, STR)\n \n #define REGNO_OK_FOR_BASE_P(NUM) m32c_regno_ok_for_base_p (NUM)\n #define REGNO_OK_FOR_INDEX_P(NUM) 0\n \n #define PREFERRED_RELOAD_CLASS(X,CLASS) m32c_preferred_reload_class (X, CLASS)\n #define PREFERRED_OUTPUT_RELOAD_CLASS(X,CLASS) m32c_preferred_output_reload_class (X, CLASS)\n-#define LIMIT_RELOAD_CLASS(MODE,CLASS) m32c_limit_reload_class (MODE, CLASS)\n+#define LIMIT_RELOAD_CLASS(MODE,CLASS) \\\n+  (enum reg_class) m32c_limit_reload_class (MODE, CLASS)\n \n-#define SECONDARY_RELOAD_CLASS(CLASS,MODE,X) m32c_secondary_reload_class (CLASS, MODE, X)\n+#define SECONDARY_RELOAD_CLASS(CLASS,MODE,X) \\\n+  (enum reg_class) m32c_secondary_reload_class (CLASS, MODE, X)\n \n #define TARGET_SMALL_REGISTER_CLASSES_FOR_MODE_P hook_bool_mode_true\n "}]}