{"sha": "f6be1179bb66624403d0f55620d67344d9d98c51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZiZTExNzliYjY2NjI0NDAzZDBmNTU2MjBkNjczNDRkOWQ5OGM1MQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-01-05T00:40:04Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-01-05T00:40:04Z"}, "message": "runtime: prevent deadlock when profiling signal arrives during traceback\n    \n    Traceback routines, e.g. callers and funcentry, may call\n    __go_get_backtrace_state. If a profiling signal arrives while we\n    are in the critical section of __go_get_backtrace_state, it tries\n    to do a traceback, which also calls __go_get_backtrace_state,\n    which tries to enter the same critical section and will deadlock.\n    Prevent this deadlock by setting up runtime_in_callers before\n    calling __go_get_backtrace_state.\n    \n    Found while investigating golang/go#29448. Will add a test in the\n    next CL.\n    \n    Updates golang/go#29448.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/156037\n\nFrom-SVN: r267590", "tree": {"sha": "29cb9bb891a22723eb9b089c40e3f32bff282e09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cb9bb891a22723eb9b089c40e3f32bff282e09"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6be1179bb66624403d0f55620d67344d9d98c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6be1179bb66624403d0f55620d67344d9d98c51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6be1179bb66624403d0f55620d67344d9d98c51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6be1179bb66624403d0f55620d67344d9d98c51/comments", "author": null, "committer": null, "parents": [{"sha": "869fbd357e1936b0c1239bc2a336de34fd45b79e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/869fbd357e1936b0c1239bc2a336de34fd45b79e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/869fbd357e1936b0c1239bc2a336de34fd45b79e"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "34845839a95b50a6837e6c05e8b2a92324dc6074", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6be1179bb66624403d0f55620d67344d9d98c51/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6be1179bb66624403d0f55620d67344d9d98c51/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=f6be1179bb66624403d0f55620d67344d9d98c51", "patch": "@@ -1,4 +1,4 @@\n-0e482bef69d73b9381dbc543e200a1fe57275e81\n+2ce291eaee427799bfcde256929dab89e0ab61eb\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "6fe43402459e74603649dad009835b6c3c6e8188", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6be1179bb66624403d0f55620d67344d9d98c51/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6be1179bb66624403d0f55620d67344d9d98c51/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=f6be1179bb66624403d0f55620d67344d9d98c51", "patch": "@@ -137,7 +137,9 @@ __go_file_line (uintptr pc, int index, String *fn, String *file, intgo *line)\n \n   runtime_memclr (&c, sizeof c);\n   c.index = index;\n+  runtime_xadd (&__go_runtime_in_callers, 1);\n   state = __go_get_backtrace_state ();\n+  runtime_xadd (&__go_runtime_in_callers, -1);\n   backtrace_pcinfo (state, pc, callback, error_callback, &c);\n   *fn = c.fn;\n   *file = c.file;\n@@ -169,8 +171,13 @@ syminfo_callback (void *data, uintptr_t pc __attribute__ ((unused)),\n static _Bool\n __go_symbol_value (uintptr pc, uintptr *val)\n {\n+  struct backtrace_state *state;\n+\n   *val = 0;\n-  backtrace_syminfo (__go_get_backtrace_state (), pc, syminfo_callback,\n+  runtime_xadd (&__go_runtime_in_callers, 1);\n+  state = __go_get_backtrace_state ();\n+  runtime_xadd (&__go_runtime_in_callers, -1);\n+  backtrace_syminfo (state, pc, syminfo_callback,\n \t\t     error_callback, val);\n   return *val != 0;\n }"}, {"sha": "7ea70851c68b28eec4fec553fc5ccbba96d41b5c", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6be1179bb66624403d0f55620d67344d9d98c51/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6be1179bb66624403d0f55620d67344d9d98c51/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=f6be1179bb66624403d0f55620d67344d9d98c51", "patch": "@@ -202,8 +202,8 @@ runtime_callers (int32 skip, Location *locbuf, int32 m, bool keep_thunks)\n   data.index = 0;\n   data.max = m;\n   data.keep_thunks = keep_thunks;\n-  state = __go_get_backtrace_state ();\n   runtime_xadd (&__go_runtime_in_callers, 1);\n+  state = __go_get_backtrace_state ();\n   backtrace_full (state, 0, callback, error_callback, &data);\n   runtime_xadd (&__go_runtime_in_callers, -1);\n "}]}