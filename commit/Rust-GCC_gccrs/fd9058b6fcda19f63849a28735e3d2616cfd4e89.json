{"sha": "fd9058b6fcda19f63849a28735e3d2616cfd4e89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ5MDU4YjZmY2RhMTlmNjM4NDlhMjg3MzVlM2QyNjE2Y2ZkNGU4OQ==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-12-11T11:59:04Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-12-11T11:59:04Z"}, "message": "arm: Fix an incorrect warning when -mcpu=cortex-a55 is used with -mfloat-abi=soft\n\nWhen a CPU such as cortex-a55 is used with the soft-float ABI variant,\nthe compiler is incorrectly issuing a warning about a mismatch between\nthe architecture (generated internally) and the CPU.  This is not\nexpected or intended.\n\nThe problem stems from the fact that we generate (correctly) an\narchitecture for a soft-float compilation, but then try to compare it\nagainst the one recorded for the CPU.  Normally we strip out the\nfloating point information before doing that comparison, but we\ncurrently only do that for the features that can be affected by the\n-mfpu option.  For a soft-float environment we also need to strip out\nany bits that depend on having floating-point present.\n\nSo this patch implements that and does a bit of housekeeping at the\nsame time:\n\n- in arm-cpus.in it is not necessary for a CPU to specify both\n  +dotprod and +simd in its architecture specification, since +dotprod\n  implies +simd.\n\n- I've refactored the ALL_SIMD fgroup in arm-cpus.in to create a new\n  subgroup ALL_SIMD_EXTERNAL and containing the bits that were\n  previously added directly to ALL_SIMD.  Similarly, I've added an\n  ALL_FPU_EXTERNAL subgroup.\n\n- in arm.c rename fpu_bitlist and all_fpubits to fpu_bitlist_internal\n  and all_fpubits_internal for consistency with the fgroup bits which\n  they contain.\n\n\t* config/arm/arm-cpus.in (ALL_SIMD_EXTERNAL): New fgroup.\n\t(ALL_SIMD): Use it.\n\t(ALL_FPU_EXTERNAL): New fgroup.\n\t(ALL_FP): Use it.\n\t(cortex-a55, cortex-a75, cortex-a76, cortex-a76ae): Remove redundant\n\t+simd from architecture specification.\n\t(cortex-a77, neoverse-n1, cortex-a75.cortex-a55): Likewise.\n\t* config/arm/arm.c (isa_all_fpubits, fpu_bitlist): Rename to ...\n\t(isa_all_fpubits_internal, fpu_bitlist_internal): ... these.\n\t(isa_all_fpbits): New bitmap.\n\t(arm_option_override): Initialize it.\n\t(arm_configure_build_target): If the target isa does not have any\n\tFP enabled, do not warn about mismatches in FP-related feature bits.\n\nFrom-SVN: r279219", "tree": {"sha": "2598162b057987f9bd3145e4d7234f54e6027c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2598162b057987f9bd3145e4d7234f54e6027c92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd9058b6fcda19f63849a28735e3d2616cfd4e89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9058b6fcda19f63849a28735e3d2616cfd4e89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd9058b6fcda19f63849a28735e3d2616cfd4e89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd9058b6fcda19f63849a28735e3d2616cfd4e89/comments", "author": null, "committer": null, "parents": [{"sha": "93d90219879aed52fb5a3ec191df59867e66240d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93d90219879aed52fb5a3ec191df59867e66240d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93d90219879aed52fb5a3ec191df59867e66240d"}], "stats": {"total": 85, "additions": 57, "deletions": 28}, "files": [{"sha": "a6b908933b45e0560882375a4320abf3a7b78017", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd9058b6fcda19f63849a28735e3d2616cfd4e89", "patch": "@@ -1,3 +1,19 @@\n+2019-12-11  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm-cpus.in (ALL_SIMD_EXTERNAL): New fgroup.\n+\t(ALL_SIMD): Use it.\n+\t(ALL_FPU_EXTERNAL): New fgroup.\n+\t(ALL_FP): Use it.\n+\t(cortex-a55, cortex-a75, cortex-a76, cortex-a76ae): Remove redundant\n+\t+simd from architecture specification.\n+\t(cortex-a77, neoverse-n1, cortex-a75.cortex-a55): Likewise.\n+\t* config/arm/arm.c (isa_all_fpubits, fpu_bitlist): Rename to ...\n+\t(isa_all_fpubits_internal, fpu_bitlist_internal): ... these.\n+\t(isa_all_fpbits): New bitmap.\n+\t(arm_option_override): Initialize it.\n+\t(arm_configure_build_target): If the target isa does not have any\n+\tFP enabled, do not warn about mismatches in FP-related feature bits.\n+\n 2019-12-11  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* real.c (struct arm_bfloat_half_format,"}, {"sha": "7090775aa7e5f094f7a9e61184bd17385d25f751", "filename": "gcc/config/arm/arm-cpus.in", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2Fconfig%2Farm%2Farm-cpus.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2Fconfig%2Farm%2Farm-cpus.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-cpus.in?ref=fd9058b6fcda19f63849a28735e3d2616cfd4e89", "patch": "@@ -213,15 +213,18 @@ define fgroup ALL_CRYPTO\tcrypto\n # strip off 32 D-registers, but does not remove support for\n # double-precision FP.\n define fgroup ALL_SIMD_INTERNAL\tfp_d32 neon ALL_CRYPTO\n-define fgroup ALL_SIMD\tALL_SIMD_INTERNAL dotprod fp16fml\n+define fgroup ALL_SIMD_EXTERNAL dotprod fp16fml\n+define fgroup ALL_SIMD\tALL_SIMD_INTERNAL ALL_SIMD_EXTERNAL\n \n # List of all FPU bits to strip out if -mfpu is used to override the\n # default.  fp16 is deliberately missing from this list.\n define fgroup ALL_FPU_INTERNAL\tvfpv2 vfpv3 vfpv4 fpv5 fp16conv fp_dbl ALL_SIMD_INTERNAL\n-\n # Similarly, but including fp16 and other extensions that aren't part of\n # -mfpu support.\n-define fgroup ALL_FP\tfp16 ALL_FPU_INTERNAL\n+define fgroup ALL_FPU_EXTERNAL fp16\n+\n+# Everything related to the FPU extensions (FP or SIMD).\n+define fgroup ALL_FP\tALL_FPU_EXTERNAL ALL_FPU_INTERNAL ALL_SIMD\n \n define fgroup ARMv4       armv4 notm\n define fgroup ARMv4t      ARMv4 thumb\n@@ -1301,7 +1304,7 @@ begin cpu cortex-a55\n  cname cortexa55\n  tune for cortex-a53\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  option nofp remove ALL_FP\n  costs cortex_a53\n@@ -1313,7 +1316,7 @@ begin cpu cortex-a75\n  cname cortexa75\n  tune for cortex-a57\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n  vendor 41\n@@ -1324,7 +1327,7 @@ begin cpu cortex-a76\n  cname cortexa76\n  tune for cortex-a57\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1335,7 +1338,7 @@ begin cpu cortex-a76ae\n  cname cortexa76ae\n  tune for cortex-a57\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1346,7 +1349,7 @@ begin cpu cortex-a77\n  cname cortexa77\n  tune for cortex-a57\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1358,7 +1361,7 @@ begin cpu neoverse-n1\n  alias !ares\n  tune for cortex-a57\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n  vendor 41\n@@ -1370,7 +1373,7 @@ begin cpu cortex-a75.cortex-a55\n  cname cortexa75cortexa55\n  tune for cortex-a53\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a73\n end cpu cortex-a75.cortex-a55\n@@ -1379,7 +1382,7 @@ begin cpu cortex-a76.cortex-a55\n  cname cortexa76cortexa55\n  tune for cortex-a53\n  tune flags LDSCHED\n- architecture armv8.2-a+fp16+dotprod+simd\n+ architecture armv8.2-a+fp16+dotprod\n  option crypto add FP_ARMv8 CRYPTO\n  costs cortex_a57\n end cpu cortex-a76.cortex-a55"}, {"sha": "983852cc4e38552da7f3e195cb69e46da8c5704a", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd9058b6fcda19f63849a28735e3d2616cfd4e89/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fd9058b6fcda19f63849a28735e3d2616cfd4e89", "patch": "@@ -3109,7 +3109,8 @@ arm_option_override_internal (struct gcc_options *opts,\n #endif\n }\n \n-static sbitmap isa_all_fpubits;\n+static sbitmap isa_all_fpubits_internal;\n+static sbitmap isa_all_fpbits;\n static sbitmap isa_quirkbits;\n \n /* Configure a build target TARGET from the user-specified options OPTS and\n@@ -3176,7 +3177,12 @@ arm_configure_build_target (struct arm_build_target *target,\n \t  /* Ignore any bits that are quirk bits.  */\n \t  bitmap_and_compl (isa_delta, isa_delta, isa_quirkbits);\n \t  /* Ignore (for now) any bits that might be set by -mfpu.  */\n-\t  bitmap_and_compl (isa_delta, isa_delta, isa_all_fpubits);\n+\t  bitmap_and_compl (isa_delta, isa_delta, isa_all_fpubits_internal);\n+\n+\t  /* And if the target ISA lacks floating point, ignore any\n+\t     extensions that depend on that.  */\n+\t  if (!bitmap_bit_p (target->isa, isa_bit_vfpv2))\n+\t    bitmap_and_compl (isa_delta, isa_delta, isa_all_fpbits);\n \n \t  if (!bitmap_empty_p (isa_delta))\n \t    {\n@@ -3335,7 +3341,7 @@ arm_configure_build_target (struct arm_build_target *target,\n       auto_sbitmap fpu_bits (isa_num_bits);\n \n       arm_initialize_isa (fpu_bits, arm_selected_fpu->isa_bits);\n-      bitmap_and_compl (target->isa, target->isa, isa_all_fpubits);\n+      bitmap_and_compl (target->isa, target->isa, isa_all_fpubits_internal);\n       bitmap_ior (target->isa, target->isa, fpu_bits);\n     }\n \n@@ -3361,16 +3367,20 @@ arm_configure_build_target (struct arm_build_target *target,\n static void\n arm_option_override (void)\n {\n-  static const enum isa_feature fpu_bitlist[]\n+  static const enum isa_feature fpu_bitlist_internal[]\n     = { ISA_ALL_FPU_INTERNAL, isa_nobit };\n+  static const enum isa_feature fp_bitlist[]\n+    = { ISA_ALL_FP, isa_nobit };\n   static const enum isa_feature quirk_bitlist[] = { ISA_ALL_QUIRKS, isa_nobit};\n   cl_target_option opts;\n \n   isa_quirkbits = sbitmap_alloc (isa_num_bits);\n   arm_initialize_isa (isa_quirkbits, quirk_bitlist);\n \n-  isa_all_fpubits = sbitmap_alloc (isa_num_bits);\n-  arm_initialize_isa (isa_all_fpubits, fpu_bitlist);\n+  isa_all_fpubits_internal = sbitmap_alloc (isa_num_bits);\n+  isa_all_fpbits = sbitmap_alloc (isa_num_bits);\n+  arm_initialize_isa (isa_all_fpubits_internal, fpu_bitlist_internal);\n+  arm_initialize_isa (isa_all_fpbits, fp_bitlist);\n \n   arm_active_target.isa = sbitmap_alloc (isa_num_bits);\n \n@@ -27258,7 +27268,7 @@ arm_print_asm_arch_directives ()\n \t     don't print anything if all the bits are part of the\n \t     FPU specification.  */\n \t  if (bitmap_subset_p (opt_bits, arm_active_target.isa)\n-\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits))\n+\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits_internal))\n \t    asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\", opt->name);\n \t}\n     }\n@@ -31771,7 +31781,7 @@ arm_identify_fpu_from_isa (sbitmap isa)\n   auto_sbitmap fpubits (isa_num_bits);\n   auto_sbitmap cand_fpubits (isa_num_bits);\n \n-  bitmap_and (fpubits, isa, isa_all_fpubits);\n+  bitmap_and (fpubits, isa, isa_all_fpubits_internal);\n \n   /* If there are no ISA feature bits relating to the FPU, we must be\n      doing soft-float.  */\n@@ -31831,7 +31841,7 @@ arm_declare_function_name (FILE *stream, const char *name, tree decl)\n \t\t{\n \t\t  arm_initialize_isa (opt_bits, opt->isa_bits);\n \t\t  if (bitmap_subset_p (opt_bits, arm_active_target.isa)\n-\t\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits))\n+\t\t      && !bitmap_subset_p (opt_bits, isa_all_fpubits_internal))\n \t\t    asm_fprintf (asm_out_file, \"\\t.arch_extension %s\\n\",\n \t\t\t\t opt->name);\n \t\t}\n@@ -32504,28 +32514,28 @@ arm_test_cpu_arch_data (void)\n static void\n arm_test_fpu_data (void)\n {\n-  auto_sbitmap isa_all_fpubits (isa_num_bits);\n+  auto_sbitmap isa_all_fpubits_internal (isa_num_bits);\n   auto_sbitmap fpubits (isa_num_bits);\n   auto_sbitmap tmpset (isa_num_bits);\n \n-  static const enum isa_feature fpu_bitlist[]\n+  static const enum isa_feature fpu_bitlist_internal[]\n     = { ISA_ALL_FPU_INTERNAL, isa_nobit };\n-  arm_initialize_isa (isa_all_fpubits, fpu_bitlist);\n+  arm_initialize_isa (isa_all_fpubits_internal, fpu_bitlist_internal);\n \n   for (unsigned int i = 0; i < TARGET_FPU_auto; i++)\n   {\n     arm_initialize_isa (fpubits, all_fpus[i].isa_bits);\n-    bitmap_and_compl (tmpset, isa_all_fpubits, fpubits);\n-    bitmap_clear (isa_all_fpubits);\n-    bitmap_copy (isa_all_fpubits, tmpset);\n+    bitmap_and_compl (tmpset, isa_all_fpubits_internal, fpubits);\n+    bitmap_clear (isa_all_fpubits_internal);\n+    bitmap_copy (isa_all_fpubits_internal, tmpset);\n   }\n \n-  if (!bitmap_empty_p (isa_all_fpubits))\n+  if (!bitmap_empty_p (isa_all_fpubits_internal))\n     {\n \tfprintf (stderr, \"Error: found feature bits in the ALL_FPU_INTERAL\"\n \t\t\t \" group that are not defined by any FPU.\\n\"\n \t\t\t \"       Check your arm-cpus.in.\\n\");\n-\tASSERT_TRUE (bitmap_empty_p (isa_all_fpubits));\n+\tASSERT_TRUE (bitmap_empty_p (isa_all_fpubits_internal));\n     }\n }\n "}]}