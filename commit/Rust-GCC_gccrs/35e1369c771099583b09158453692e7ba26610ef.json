{"sha": "35e1369c771099583b09158453692e7ba26610ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVlMTM2OWM3NzEwOTk1ODNiMDkxNTg0NTM2OTJlN2JhMjY2MTBlZg==", "commit": {"author": {"name": "Ralph Loader", "email": "rcl@ihug.co.nz", "date": "2003-10-16T21:35:42Z"}, "committer": {"name": "Ralph Loader", "email": "ralph@gcc.gnu.org", "date": "2003-10-16T21:35:42Z"}, "message": "StringBuffer.java (getChars): Fix array index checks.\n\n\t* java/lang/StringBuffer.java (getChars): Fix array index checks.\n\t(append, substring, insert): Likewise.\n\t* testsuite/libjava.lang/StringBuffer_overflow.java: New file.\n\t* testsuite/libjava.lang/StringBuffer_overflow.out: New file.\n\nFrom-SVN: r72579", "tree": {"sha": "d324c7163f35a418b7be0844586b9b124a4a3fbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d324c7163f35a418b7be0844586b9b124a4a3fbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35e1369c771099583b09158453692e7ba26610ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e1369c771099583b09158453692e7ba26610ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35e1369c771099583b09158453692e7ba26610ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35e1369c771099583b09158453692e7ba26610ef/comments", "author": null, "committer": null, "parents": [{"sha": "2488a51e82c40b41b3226100d18323fee5e34613", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2488a51e82c40b41b3226100d18323fee5e34613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2488a51e82c40b41b3226100d18323fee5e34613"}], "stats": {"total": 145, "additions": 140, "deletions": 5}, "files": [{"sha": "d751c102c114f03c39d270e9532a53265deded99", "filename": "libjava/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e1369c771099583b09158453692e7ba26610ef/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e1369c771099583b09158453692e7ba26610ef/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=35e1369c771099583b09158453692e7ba26610ef", "patch": "@@ -1,3 +1,10 @@\n+2003-10-17  Ralph Loader  <rcl@ihug.co.nz>\n+\n+\t* java/lang/StringBuffer.java (getChars): Fix array index checks.\n+\t(append, substring, insert): Likewise.\n+\t* testsuite/libjava.lang/StringBuffer_overflow.java: New file.\n+\t* testsuite/libjava.lang/StringBuffer_overflow.out: New file.\n+\t\n 2003-10-17  Ralph Loader  <rcl@ihug.co.nz>\n \n \t* java/lang/natString.cc (getChars):"}, {"sha": "92f961534a13bab006517d1c6859e0b692bcd167", "filename": "libjava/java/lang/StringBuffer.java", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e1369c771099583b09158453692e7ba26610ef/libjava%2Fjava%2Flang%2FStringBuffer.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e1369c771099583b09158453692e7ba26610ef/libjava%2Fjava%2Flang%2FStringBuffer.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FStringBuffer.java?ref=35e1369c771099583b09158453692e7ba26610ef", "patch": "@@ -244,10 +244,9 @@ public synchronized char charAt(int index)\n   public synchronized void getChars(int srcOffset, int srcEnd,\n                                     char[] dst, int dstOffset)\n   {\n-    int todo = srcEnd - srcOffset;\n-    if (srcOffset < 0 || srcEnd > count || todo < 0)\n+    if (srcOffset < 0 || srcEnd > count || srcEnd < srcOffset)\n       throw new StringIndexOutOfBoundsException();\n-    System.arraycopy(value, srcOffset, dst, dstOffset, todo);\n+    System.arraycopy(value, srcOffset, dst, dstOffset, srcEnd - srcOffset);\n   }\n \n   /**\n@@ -355,6 +354,8 @@ public StringBuffer append(char[] data)\n    */\n   public synchronized StringBuffer append(char[] data, int offset, int count)\n   {\n+    if (offset < 0 || count < 0 || offset > data.length - count)\n+      throw new StringIndexOutOfBoundsException();\n     ensureCapacity_unsynchronized(this.count + count);\n     System.arraycopy(data, offset, value, this.count, count);\n     this.count += count;\n@@ -560,7 +561,7 @@ public CharSequence subSequence(int beginIndex, int endIndex)\n   public synchronized String substring(int beginIndex, int endIndex)\n   {\n     int len = endIndex - beginIndex;\n-    if (beginIndex < 0 || endIndex > count || len < 0)\n+    if (beginIndex < 0 || endIndex > count || endIndex < beginIndex)\n       throw new StringIndexOutOfBoundsException();\n     if (len == 0)\n       return \"\";\n@@ -589,7 +590,7 @@ public synchronized StringBuffer insert(int offset,\n                                           char[] str, int str_offset, int len)\n   {\n     if (offset < 0 || offset > count || len < 0\n-        || str_offset < 0 || str_offset + len > str.length)\n+        || str_offset < 0 || str_offset > str.length - len)\n       throw new StringIndexOutOfBoundsException();\n     ensureCapacity_unsynchronized(count + len);\n     System.arraycopy(value, offset, value, offset + len, count - offset);"}, {"sha": "68e18da2f961b2ba8b292c3bce852c11032a8ae9", "filename": "libjava/testsuite/libjava.lang/StringBuffer_overflow.java", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e1369c771099583b09158453692e7ba26610ef/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e1369c771099583b09158453692e7ba26610ef/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.java?ref=35e1369c771099583b09158453692e7ba26610ef", "patch": "@@ -0,0 +1,126 @@\n+/* This tests some corner cases of arithmetic in StringBuffer.  */\n+\n+/* These tests can all be run on a 32 bit machine with modest amounts\n+ * of memory.  */\n+\n+/* The symptom of the problem is that ArrayIndexOutOfBoundsException\n+ * gets thrown, while the documentation says that\n+ * StringIndexOutOfBoundsException should be thrown.  */\n+\n+class StringBuffer_overflow\n+{\n+  /* Test correct exception on getChars.  */\n+  static void getChars()\n+  {\n+    StringBuffer b = new StringBuffer (\"x\");\n+    char[] s = new char [1];\n+    try\n+      {\n+\t// The substring we are attempting to obtain is invalid,\n+\t// so we should get a StringIndexOutOfBoundsException.\n+\tb.getChars (1, -1 << 31, s, 0);\n+\tFail (\"getChars\", \"no exception\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectStringIndex (\"getChars()\", e);\n+      }\n+  }\n+\n+  /* Test correct exception on append with bogus count. */\n+  static void append()\n+  {\n+    StringBuffer s = new StringBuffer(\"a\");\n+    try\n+      {\n+\ts.append (\"\".toCharArray(), 1, (1<<31)-1);\n+\tFail (\"append\", \"no exception\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectStringIndex (\"append\", e);\n+      }\n+  }\n+\n+  // Check that append still more or less works.\n+  static void appendbasic()\n+  {\n+    StringBuffer s = new StringBuffer();\n+\n+    try\n+      {\n+\tif (!new StringBuffer().append (\"abcdefg\".toCharArray())\n+\t    .toString().equals (\"abcdefg\"))\n+\t  {\n+\t    Fail (\"appendbasic\", \"append gives incorrect result\");\n+\t  }\n+      }\n+    catch (Throwable e)\n+      {\n+\tFail (\"appendbasic\", e);\n+      }\n+  }\n+\n+  /* Test correct expception on substring with bogus indexes.  */\n+  static void substring()\n+  {\n+    StringBuffer s = new StringBuffer (\"abc\");\n+    try\n+      {\n+\t// end - begin == -2 - ((1<<31)-1) == (1<<31) - 1 > 0.  */\n+\ts.substring ((1<<31)-1, -2);\n+\tFail (\"substring\", \"no exception\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectStringIndex (\"substring\", e);\n+      }\n+  }\n+\n+  static void insert()\n+  {\n+    StringBuffer s = new StringBuffer (\"\");\n+    try\n+      {\n+\ts.insert (0, \"abcd\".toCharArray(), (1<<31)-1, 1);\n+\tFail (\"insert\", \"no exception\");\n+      }\n+    catch (Throwable e)\n+      {\n+\tExpectStringIndex (\"insert\", e);\n+      }\n+  }\n+\n+\n+  public static void main (String[] unused)\n+  {\n+    getChars();\n+    append();\n+    appendbasic();\n+    substring();\n+    insert();\n+\n+    if (tests_failed == 0)\n+      {\n+\tSystem.out.println (\"ok\");\n+      }\n+  }\n+\n+  static int tests_failed = 0;\n+\n+  static void ExpectStringIndex (String name, Throwable exception)\n+  {\n+    if (! (exception instanceof StringIndexOutOfBoundsException))\n+      {\n+\tFail (name, exception);\n+      }\n+  }\n+  static void Fail (String name, Object why)\n+  {\n+    ++tests_failed;\n+\n+    System.err.print (name);\n+    System.err.print ('\\t');\n+    System.err.println (why);\n+  }\n+}"}, {"sha": "9766475a4185a151dc9d56d614ffb9aaea3bfd42", "filename": "libjava/testsuite/libjava.lang/StringBuffer_overflow.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35e1369c771099583b09158453692e7ba26610ef/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35e1369c771099583b09158453692e7ba26610ef/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Ftestsuite%2Flibjava.lang%2FStringBuffer_overflow.out?ref=35e1369c771099583b09158453692e7ba26610ef", "patch": "@@ -0,0 +1 @@\n+ok"}]}