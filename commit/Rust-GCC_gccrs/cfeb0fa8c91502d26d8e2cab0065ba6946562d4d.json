{"sha": "cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlYjBmYThjOTE1MDJkMjZkOGUyY2FiMDA2NWJhNjk0NjU2MmQ0ZA==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2010-10-14T07:59:57Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-10-14T07:59:57Z"}, "message": "sel-sched-ir.c (init_global_and_expr_for_insn): Set CANT_MOVE on RTX_FRAME_RELATED_P insns and the insn to which...\n\n    * sel-sched-ir.c (init_global_and_expr_for_insn): Set CANT_MOVE on RTX_FRAME_RELATED_P\n    insns and the insn to which NOTE_INSN_EPILOGUE_BEG is attached.\n    * sched-vis.c (print_value): Allow NULL value.\n\n    * gcc.target/ia64/20101005.c: New test.\n\nFrom-SVN: r165455", "tree": {"sha": "2de47a8d5084668e3ae0cf4ea9c11b147f68cb80", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2de47a8d5084668e3ae0cf4ea9c11b147f68cb80"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3e6a3f6fc3662f0c830f4d3e35634745ace379cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6a3f6fc3662f0c830f4d3e35634745ace379cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6a3f6fc3662f0c830f4d3e35634745ace379cf"}], "stats": {"total": 190, "additions": 179, "deletions": 11}, "files": [{"sha": "5a8a4eb256ee1238b63872750c719463c94f387a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "patch": "@@ -1,3 +1,10 @@\n+2010-10-14  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\t* sel-sched-ir.c (init_global_and_expr_for_insn): Set CANT_MOVE\n+\ton RTX_FRAME_RELATED_P insns and the insn to which\n+\tNOTE_INSN_EPILOGUE_BEG is attached.\n+\t* sched-vis.c (print_value): Allow NULL value.\n+\n 2010-10-14  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/45570"}, {"sha": "83c423a967082e79ac63209ea22d9287fc5f59a8", "filename": "gcc/sched-vis.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Fsched-vis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Fsched-vis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-vis.c?ref=cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "patch": "@@ -428,6 +428,11 @@ print_value (char *buf, const_rtx x, int verbose)\n   char t[BUF_LEN];\n   char *cur = buf;\n \n+  if (!x)\n+    {\n+      safe_concat (buf, buf, \"(nil)\");\n+      return;\n+    }\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:"}, {"sha": "452d8d43a65761b295b4addfdac4f1bffc3c7cbf", "filename": "gcc/sel-sched-ir.c", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Fsel-sched-ir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Fsel-sched-ir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched-ir.c?ref=cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "patch": "@@ -2862,18 +2862,38 @@ init_global_and_expr_for_insn (insn_t insn)\n     bool force_unique_p;\n     ds_t spec_done_ds;\n \n-    /* Certain instructions cannot be cloned.  */\n-    if (CANT_MOVE (insn)\n-\t|| INSN_ASM_P (insn)\n-\t|| SCHED_GROUP_P (insn)\n-\t|| prologue_epilogue_contains (insn)\n-\t/* Exception handling insns are always unique.  */\n-\t|| (cfun->can_throw_non_call_exceptions && can_throw_internal (insn))\n-\t/* TRAP_IF though have an INSN code is control_flow_insn_p ().  */\n-\t|| control_flow_insn_p (insn))\n-      force_unique_p = true;\n+    /* Certain instructions cannot be cloned, and frame related insns and\n+       the insn adjacent to NOTE_INSN_EPILOGUE_BEG cannot be moved out of\n+       their block.  */\n+    if (prologue_epilogue_contains (insn))\n+      {\n+        if (RTX_FRAME_RELATED_P (insn))\n+          CANT_MOVE (insn) = 1;\n+        else\n+          {\n+            rtx note;\n+            for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n+              if (REG_NOTE_KIND (note) == REG_SAVE_NOTE\n+                  && ((enum insn_note) INTVAL (XEXP (note, 0))\n+                      == NOTE_INSN_EPILOGUE_BEG))\n+                {\n+                  CANT_MOVE (insn) = 1;\n+                  break;\n+                }\n+          }\n+        force_unique_p = true;\n+      }\n     else\n-      force_unique_p = false;\n+      if (CANT_MOVE (insn)\n+          || INSN_ASM_P (insn)\n+          || SCHED_GROUP_P (insn)\n+          /* Exception handling insns are always unique.  */\n+          || (cfun->can_throw_non_call_exceptions && can_throw_internal (insn))\n+          /* TRAP_IF though have an INSN code is control_flow_insn_p ().  */\n+          || control_flow_insn_p (insn))\n+        force_unique_p = true;\n+      else\n+        force_unique_p = false;\n \n     if (targetm.sched.get_insn_spec_ds)\n       {"}, {"sha": "753a52340d83e0698b900c6cf42a1517f70e97c9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "patch": "@@ -1,3 +1,7 @@\n+2010-10-14  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\t* gcc.target/ia64/20101005.c: New test.\n+\n 2010-10-14  Andrey Belevantsev  <abel@ispras.ru>\n \n \tPR rtl-optimization/45570"}, {"sha": "7511c90659057962fa4ccdd1ed3b3df5246bd0e3", "filename": "gcc/testsuite/gcc.target/ia64/20101014.c", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20101014.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfeb0fa8c91502d26d8e2cab0065ba6946562d4d/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20101014.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fia64%2F20101014.c?ref=cfeb0fa8c91502d26d8e2cab0065ba6946562d4d", "patch": "@@ -0,0 +1,132 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fselective-scheduling2\" } */\n+\n+typedef long unsigned int size_t;\n+struct fileloc\n+{\n+  const char *file;\n+};\n+typedef struct type *type_p;\n+typedef const struct type *const_type_p;\n+enum typekind\n+{\n+  TYPE_STRUCT,\n+  TYPE_UNION,\n+  TYPE_POINTER,\n+  TYPE_LANG_STRUCT,\n+  TYPE_PARAM_STRUCT\n+};\n+struct type\n+{\n+  enum typekind kind;\n+  union\n+  {\n+    struct\n+    {\n+      struct fileloc line;\n+    } s;\n+    struct\n+    {\n+      struct fileloc line;\n+    } param_struct;\n+  } u;\n+};\n+struct outf\n+{\n+  size_t bufused;\n+  char *buf;\n+};\n+typedef struct outf *outf_p;\n+oprintf (outf_p o, const char *format, ...)\n+{\n+  char *s;\n+  size_t slength;\n+  memcpy (o->buf + o->bufused, s, slength);\n+}\n+output_mangled_typename (outf_p of, const_type_p t)\n+{\n+    switch (t->kind)\n+      {\n+      case TYPE_POINTER: (fancy_abort (\"/gcc/gengtype.c\", 1988, __FUNCTION__));\n+    }\n+}\n+output_type_enum (outf_p of, type_p s)\n+{\n+  if (s->kind == TYPE_PARAM_STRUCT && s->u.param_struct.line.file != ((void *)0))\n+    {\n+      oprintf (of, \", gt_e_\");\n+    }\n+  else if (((s)->kind == TYPE_UNION || (s)->kind == TYPE_STRUCT || (s)->kind == TYPE_LANG_STRUCT) && s->u.s.line.file != ((void *)0))\n+    {\n+      oprintf (of, \", gt_ggc_e_\");\n+      output_mangled_typename (of, s);\n+    }\n+  else\n+    oprintf (of, \", gt_types_enum_last\");\n+}\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -g -fselective-scheduling2\" } */\n+\n+typedef long unsigned int size_t;\n+struct fileloc\n+{\n+  const char *file;\n+};\n+typedef struct type *type_p;\n+typedef const struct type *const_type_p;\n+enum typekind\n+{\n+  TYPE_STRUCT,\n+  TYPE_UNION,\n+  TYPE_POINTER,\n+  TYPE_LANG_STRUCT,\n+  TYPE_PARAM_STRUCT\n+};\n+struct type\n+{\n+  enum typekind kind;\n+  union\n+  {\n+    struct\n+    {\n+      struct fileloc line;\n+    } s;\n+    struct\n+    {\n+      struct fileloc line;\n+    } param_struct;\n+  } u;\n+};\n+struct outf\n+{\n+  size_t bufused;\n+  char *buf;\n+};\n+typedef struct outf *outf_p;\n+oprintf (outf_p o, const char *format, ...)\n+{\n+  char *s;\n+  size_t slength;\n+  memcpy (o->buf + o->bufused, s, slength);\n+}\n+output_mangled_typename (outf_p of, const_type_p t)\n+{\n+    switch (t->kind)\n+      {\n+      case TYPE_POINTER: (fancy_abort (\"/gcc/gengtype.c\", 1988, __FUNCTION__));\n+    }\n+}\n+output_type_enum (outf_p of, type_p s)\n+{\n+  if (s->kind == TYPE_PARAM_STRUCT && s->u.param_struct.line.file != ((void *)0))\n+    {\n+      oprintf (of, \", gt_e_\");\n+    }\n+  else if (((s)->kind == TYPE_UNION || (s)->kind == TYPE_STRUCT || (s)->kind == TYPE_LANG_STRUCT) && s->u.s.line.file != ((void *)0))\n+    {\n+      oprintf (of, \", gt_ggc_e_\");\n+      output_mangled_typename (of, s);\n+    }\n+  else\n+    oprintf (of, \", gt_types_enum_last\");\n+}"}]}