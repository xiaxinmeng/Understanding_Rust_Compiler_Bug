{"sha": "4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIxYzFmNmZjMmYxZWQwZDVlNDMxNWVmNmI3ODhiZjg0NzU1YTVlZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-04T23:07:26Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2006-04-04T23:07:26Z"}, "message": "i386.c (machopic_output_stub): Output \\t between instructions and operands.\n\n2006-04-04  Eric Christopher  <echristo@apple.com>\n\n        * config/i386/i386.c (machopic_output_stub): Output \\t\n        between instructions and operands.\n\n2006-04-04  Eric Christopher  <echristo@apple.com>\n\n        * gcc.target/i386/387-1.c: Allow regexp to match darwin\n        stubs.\n        * gcc.target/i386/387-5.c: Ditto.\n\nFrom-SVN: r112683", "tree": {"sha": "ae1b4ad9c47b465b2cddabd8d70b217355327279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae1b4ad9c47b465b2cddabd8d70b217355327279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/comments", "author": null, "committer": null, "parents": [{"sha": "7812310c7a1833b96319986bd19e29551e91305d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7812310c7a1833b96319986bd19e29551e91305d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7812310c7a1833b96319986bd19e29551e91305d"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "3c2059ad6490b4a0249286e4961db48f555e3732", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "patch": "@@ -1,3 +1,8 @@\n+2006-04-04  Eric Christopher  <echristo@apple.com>\n+\n+\t* config/i386/i386.c (machopic_output_stub): Output \\t\n+\tbetween instructions and operands.\n+\n 2006-04-04  David Edelsohn  <edelsohn@gnu.org>\n \n \t* config/rs6000/rs6000.c (num_insns_constant_wide): Change\n@@ -48,7 +53,7 @@\n \n 2006-04-03  Geoffrey Keating  <geoffk@apple.com>\n \n-\t* doc/extend.texi (Function Attributes): Rewrite visibility \n+\t* doc/extend.texi (Function Attributes): Rewrite visibility\n \tattribute documentation.\n \t* doc/invoke.texi (C++ Dialect Options): Rewrite\n \t-fvisibility-inlines-hidden documentation to describe something\n@@ -132,12 +137,12 @@\n 2006-04-02  Sebastian Pop  <pop@cri.ensmp.fr>\n \n \t* tree-scalar-evolution.c (add_to_evolution_1): Pass an extra argument\n-\tat_stmt.  Convert the type of operands before calling \n+\tat_stmt.  Convert the type of operands before calling\n \tbuild_polynomial_chrec.\n \t(add_to_evolution): Pass an extra argument at_stmt.  Adjust the call to\n \tadd_to_evolution_1.\n \t(follow_ssa_edge_in_rhs): Adjust call to add_to_evolution.\n-\t(instantiate_parameters_1): Convert the type of operands before calling \n+\t(instantiate_parameters_1): Convert the type of operands before calling\n \tbuild_polynomial_chrec.\n \t* tree-chrec.c (chrec_fold_poly_cst, chrec_fold_plus_poly_poly,\n \tchrec_fold_multiply_poly_poly, chrec_replace_initial_condition,\n@@ -411,15 +416,15 @@\n \n 2006-03-29  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* config.gcc (s390-*-linux-*, s390x-*-linux*): Add t-dfprules to \n+\t* config.gcc (s390-*-linux-*, s390x-*-linux*): Add t-dfprules to\n \ttmake_file.\n \t* config/s390/s390.c (S390_scalar_mode_supported_p): New function.\n \t(NR_C_MODES): Add TDmode, DDmode and SDmode.\n \t(s390_output_pool_entry, ): Accept MODE_DECIMAL_FLOAT.\n \t(s390_hard_regno_mode_ok): Disallow TDmode in integer regs.\n \t(s390_function_arg_float): Allow SDmode and DDmode values to be\n \tpassed in floating point registers.\n-\t(s390_function_arg_integer, s390_function_value): Replace MODE_FLOAT \n+\t(s390_function_arg_integer, s390_function_value): Replace MODE_FLOAT\n \tcheck with SCALAR_FLOAT_MODE_P.\n \t(TARGET_SCALAR_MODE_SUPPORTED_P): Define target macro.\n \n@@ -460,7 +465,7 @@\n \n \t* fold-const.c (fold_binary) <BIT_XOR_EXPR>: Fold (X & Y) ^ Y as\n \tthe equivalent ~X & Y, and the symmetry related transformations.\n-\t(fold_binary) <BIT_AND_EXPR>: Similarly, fold (X ^ Y) & Y as \n+\t(fold_binary) <BIT_AND_EXPR>: Similarly, fold (X ^ Y) & Y as\n \t~X & Y, and symmetry related transforms.\n \n 2006-03-28  Maxim Kuvyrkov  <mkuvyrkov@ispras.ru>\n@@ -617,7 +622,7 @@\n \n 2006-03-27  Andreas Krebbel  <krebbel1@de.ibm.com>\n \n-\t* config/s390/s390-protos.h (s390_hard_regno_mode_ok, \n+\t* config/s390/s390-protos.h (s390_hard_regno_mode_ok,\n \ts390_class_max_nregs): New function prototypes.\n \t* config/s390/s390.c (REGNO_PAIR_OK): New macro.\n \t(s390_hard_regno_mode_ok, s390_class_max_nregs): New functions.\n@@ -653,7 +658,7 @@\n \tDon't test for lambda_vector_lexico_pos.\n \t(same_access_functions, add_multivariate_self_dist,\n \tadd_other_self_distances, dir_from_dist): New.\n-\t(build_classic_dir_vector): Replace implementation almost identical to \n+\t(build_classic_dir_vector): Replace implementation almost identical to\n \tbuild_classic_dist_vector with a walk of DDR_DIST_VECTS with a call to\n \tdir_from_dist.\n \t(subscript_dependence_tester_1): New.\n@@ -667,7 +672,7 @@\n \t(compute_data_dependences_for_loop): Compute the loop nest, and give\n \tup if the nest is not well formed.\n \t* tree-data-ref.h (loop_p): New.\n-\t(struct data_dependence_relation): Replace size_vect field with \n+\t(struct data_dependence_relation): Replace size_vect field with\n \tloop_nest, a vec of loops.\n \t(DDR_SIZE_VECT): Renamed DDR_NB_LOOPS.\n \t(DDR_LOOP_NEST): New.\n@@ -1380,7 +1385,7 @@\n \tsplittable_symbolic_operand.\n \t(mips_use_anchors_for_symbol_p): New function.\n \t* config/mips/mips.h: Protect externs with !USED_FOR_TARGET.\n-\t(mips_split_p): Declare.  \n+\t(mips_split_p): Declare.\n \n 2006-03-16  Richard Sandiford  <richard@codesourcery.com>\n \n@@ -1686,7 +1691,7 @@\n \n \t* ddg.c (build_intra_loop_deps): Adjust add_forward_dependence call.\n \t* lists.c (unused_deps_list): New variable.\n-\t(free_list): Add assertions to verify the proper distinguishing \n+\t(free_list): Add assertions to verify the proper distinguishing\n \tbetween INSN_LISTs and DEPS_LISTs.\n \t(find_list_elem, remove_list_elem, remove_list_node): New static\n \tfunctions.\n@@ -1772,7 +1777,7 @@\n \t* config/vax/vax.h (PCC_BITFIELD_TYPE_MATTERS): Likewise.\n \t(EXTRA_CONSTRAINT): Likewise.\n \t* config/vax/vax.md (four unnamed insns): Likewise.\n-\t\n+\n 2006-03-15  Paul Brook  <paul@codesourcery.com>\n \n \t* config/arm/arm.c (minipool_pad): New.\n@@ -1988,7 +1993,7 @@\n 2006-03-13  Kazu Hirata  <kazu@codesourcery.com>\n \n \t* doc/invoke.texi (-fdump-rtl-loop): Remove.\n-\t(-dL, -fdump-rtl-loop2): Update the dump file names \n+\t(-dL, -fdump-rtl-loop2): Update the dump file names\n \n \t* doc/invoke.texi: Update dump file names.\n \n@@ -2034,7 +2039,7 @@\n 2006-03-10  Jason Merrill  <jason@redhat.com>\n \n \tPR c/26004\n-\t* gimplify.c (gimplify_modify_expr_rhs): Don't do return slot opt if \n+\t* gimplify.c (gimplify_modify_expr_rhs): Don't do return slot opt if\n \tthe target was declared 'register'.\n \n 2006-03-10  Adam Nemet  <anemet@caviumnetworks.com>\n@@ -2059,7 +2064,7 @@\n \t* config.gcc (sh*-superh-elf, sh*elf (newlib)): Use newlib.h\n \twhen building with libgloss.\n \t(sh*elf): Implement --without-fp option.\n-\t(sh64-superh-linux*): Don't multilib. \n+\t(sh64-superh-linux*): Don't multilib.\n \n 2006-03-10  J\"orn Rennecke <joern.rennecke@st.com>\n \n@@ -2104,7 +2109,7 @@\n \t(*branch_zero<mode>): Rename to...\n \t(*branch_order<mode>): ...this.  Remove mode from comparison operator.\n \tUse mips_output_order_conditional_branch.  Only accept ordered\n-\tcomparisons.  \n+\tcomparisons.\n \t(*branch_zero<mode>_inverted): Rename to...\n \t(*branch_order<mode>_inverted): ...this and update as for\n \t*branch_order<mode>.\n@@ -2447,7 +2452,7 @@\n \t(tree_ssa_forward_propagate_single_use_vars): Return\n \tTODO_update_smt_usage if we need to update SMT usage.\n \t(pass_forwprop): Remove TODO_update_smt_usage.\n-\t\n+\n 2006-03-03  Diego Novillo  <dnovillo@redhat.com>\n \n \t* tree-ssa-operands.c: Tidy whitespace.  Fix spelling."}, {"sha": "af6ec6764ea7620dd98279b8e634fc2be6396339", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "patch": "@@ -17154,24 +17154,24 @@ machopic_output_stub (FILE *file, const char *symb, const char *stub)\n \n   if (MACHOPIC_PURE)\n     {\n-      fprintf (file, \"\\tcall LPC$%d\\nLPC$%d:\\tpopl %%eax\\n\", label, label);\n-      fprintf (file, \"\\tmovl %s-LPC$%d(%%eax),%%edx\\n\", lazy_ptr_name, label);\n-      fprintf (file, \"\\tjmp *%%edx\\n\");\n+      fprintf (file, \"\\tcall\\tLPC$%d\\nLPC$%d:\\tpopl\\t%%eax\\n\", label, label);\n+      fprintf (file, \"\\tmovl\\t%s-LPC$%d(%%eax),%%edx\\n\", lazy_ptr_name, label);\n+      fprintf (file, \"\\tjmp\\t*%%edx\\n\");\n     }\n   else\n-    fprintf (file, \"\\tjmp *%s\\n\", lazy_ptr_name);\n+    fprintf (file, \"\\tjmp\\t*%s\\n\", lazy_ptr_name);\n \n   fprintf (file, \"%s:\\n\", binder_name);\n \n   if (MACHOPIC_PURE)\n     {\n-      fprintf (file, \"\\tlea %s-LPC$%d(%%eax),%%eax\\n\", lazy_ptr_name, label);\n-      fprintf (file, \"\\tpushl %%eax\\n\");\n+      fprintf (file, \"\\tlea\\t%s-LPC$%d(%%eax),%%eax\\n\", lazy_ptr_name, label);\n+      fprintf (file, \"\\tpushl\\t%%eax\\n\");\n     }\n   else\n-    fprintf (file, \"\\t pushl $%s\\n\", lazy_ptr_name);\n+    fprintf (file, \"\\tpushl\\t$%s\\n\", lazy_ptr_name);\n \n-  fprintf (file, \"\\tjmp dyld_stub_binding_helper\\n\");\n+  fprintf (file, \"\\tjmp\\tdyld_stub_binding_helper\\n\");\n \n   switch_to_section (darwin_sections[machopic_lazy_symbol_ptr_section]);\n   fprintf (file, \"%s:\\n\", lazy_ptr_name);"}, {"sha": "1c07d3bbb4bdea3cc08f582cb2ea9a2f5a974af1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "patch": "@@ -1,3 +1,9 @@\n+2006-04-04  Eric Christopher  <echristo@apple.com>\n+\n+\t* gcc.target/i386/387-1.c: Allow regexp to match darwin\n+\tstubs.\n+\t* gcc.target/i386/387-5.c: Ditto.\n+\n 2006-04-04  Carlos O'Donell  <carlos@codesourcery.com>\n \n \t* gcc.target/sparc/struct-ret-check.c: New test.\n@@ -108,7 +114,7 @@\n \n 2006-03-25  Steven G. Kargl  <kargls@comcast.net>\n \n-\tPR fortran/26816 \n+\tPR fortran/26816\n \t* gfortran.dg/float_1.f90: New test.\n \n 2006-03-25  Steven G. Kargl  <kargsl@comcast.net>\n@@ -364,7 +370,7 @@\n \n \tPR libgfortran/26509\n \tgfortran.dg/write_direct_eor.f90: New test.\n-\t\n+\n 2006-03-17  David Edelsohn  <edelsohn@gnu.org>\n \n \t* gcc.target/powerpc/pr26350.c: New.\n@@ -463,14 +469,14 @@\n \t* gfortran.dg/write_back.f: New test.\n \t* gfortran.dg/write_rewind_1.f: New test.\n \t* gfortran.dg/write_rewind_2.f: New test.\n-\t\n+\n 2006-03-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/26554\n \t* gfortran.dg/read_logical.f90: New test.\n \n 2006-03-04  Laurent GUERBY <laurent@guerby.net>\n-\t\n+\n \t* ada/acats/norun.lst: cdd2a03 now passes.\n \n 2006-03-04  Andrew Pinski  <pinskia@physics.uc.edu>\n@@ -544,7 +550,7 @@\n \n 2006-03-01  Paul Thomas  <pault@gcc.gnu.org>\n \n-\t* gfortran.dg/logical_dot_product.f90: New test. \n+\t* gfortran.dg/logical_dot_product.f90: New test.\n \n \tPR fortran/26393\n \t* gfortran.dg/used_interface_ref.f90: New test.\n@@ -632,7 +638,7 @@\n 2006-02-26  Dorit Nuzman  <dorit@il.ibm.com>\n \n \tPR tree-optimizations/26359\n-\t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"dump-tree-dceloop\" \n+\t* gcc.dg/vect/vect.exp: Compile tests prefixed with \"dump-tree-dceloop\"\n \twith -fdump-tree-dceloop-details.\n \t* gcc.dg/vect/dump-tree-dceloop-pr26359.c: New test.\n \n@@ -922,7 +928,7 @@\n 2006-02-13  Josh Conner  <jconner@apple.com>\n \n \tPR target/25376\n-\t* gcc.dg/pr25376.c: New test.\t\n+\t* gcc.dg/pr25376.c: New test.\n \n \t* gcc.c-torture/compile/pr23237.c: Only compile test -- don't\n \tassemble.\n@@ -1086,7 +1092,7 @@\n \t* gcc.dg/tree-ssa/pr21086.c: Likewise\n \t* gcc.dg/tree-ssa/pr21959.c: Likewise\n \t* gcc.dg/tree-ssa/vrp21.c: Likewise\n-\t* gcc.dg/tree-ssa/vrp04.c: Likewise \n+\t* gcc.dg/tree-ssa/vrp04.c: Likewise\n \t* gcc.dg/tree-ssa/pr25485.c: Likewise\n \t* gcc.dg/tree-ssa/pr22026.c: Likewise\n \t* gcc.dg/tree-ssa/vrp22.c: Likewise\n@@ -1192,7 +1198,7 @@\n \t* g++.old-deja/g++.brendan/ptolemy1.C (InterpTableEntry::name):\n \tChange type to const char*.\n \t* g++.old-deja/g++.brendan/ptolemy2.C (InterpTableEntry::name):\n-\tLikewise. \n+\tLikewise.\n \t* g++.old-deja/g++.jason/default2.C (bar::memberfunction): Change\n \tsecond parameter type to const char*.\n \t* g++.old-deja/g++.jason/opeq.C (X::X): Likewise.\n@@ -1225,7 +1231,7 @@\n \t* g++.old-deja/g++.mike/p811.C (X::stringify): Match for\n \tdeprecated conversion warning.\n \t* g++.old-deja/g++.other/init15.C (A::name): Change type to const\n-\tchar*. \n+\tchar*.\n \t* g++.old-deja/g++.other/inline12.C: Adjust for const correctness.\n \t* g++.old-deja/g++.other/sibcall1.C (foo): Likewise.\n \t* g++.old-deja/g++.pt/explicit8.C: Likewise."}, {"sha": "22830754018dfa8715735adec0599d7df808dc0e", "filename": "gcc/testsuite/gcc.target/i386/387-1.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-1.c?ref=4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "patch": "@@ -2,14 +2,14 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O -ffast-math -mfpmath=387 -mno-fancy-math-387 -march=i386\" } */\n-/* { dg-final { scan-assembler \"call\\t_?sin\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?cos\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?sqrt\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?atan2\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?log\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?exp\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?tan\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?fmod\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)sin\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)cos\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)sqrt\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)atan2\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)log\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)exp\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)tan\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)fmod\" } } */\n \n double f1(double x) { return __builtin_sin(x); }\n double f2(double x) { return __builtin_cos(x); }"}, {"sha": "dc4d470900e7133a551b0de642faf6c425866265", "filename": "gcc/testsuite/gcc.target/i386/387-5.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2F387-5.c?ref=4b1c1f6fc2f1ed0d5e4315ef6b788bf84755a5ee", "patch": "@@ -2,9 +2,9 @@\n /* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n /* { dg-require-effective-target ilp32 } */\n /* { dg-options \"-O -ffast-math -mfpmath=387 -mno-fancy-math-387 -march=i386\" } */\n-/* { dg-final { scan-assembler \"call\\t_?atan\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?log1p\" } } */\n-/* { dg-final { scan-assembler \"call\\t_?drem\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)atan\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)log1p\" } } */\n+/* { dg-final { scan-assembler \"call\\t(.*)drem\" } } */\n \n double f1(double x) { return __builtin_atan(x); }\n double f2(double x) { return __builtin_log1p(x); }"}]}