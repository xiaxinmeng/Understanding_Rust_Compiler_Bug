{"sha": "a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY0YjljMjYxZDlkMmMxMmI5OGJkMTRmNWYxYmYyN2UzYmNiNmJkZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-03-28T09:55:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-03-28T09:55:15Z"}, "message": "re PR tree-optimization/37021 (Fortran Complex reduction / multiplication not vectorized)\n\n2013-03-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/37021\n\t* tree-vect-slp.c (vect_build_slp_tree): When not unrolling\n\tdo not restrict gaps between groups.\n\t* tree-vect-stmts.c (vectorizable_load): Properly account for\n\ta gap between groups.\n\n\t* gcc.dg/vect/fast-math-slp-38.c: New testcase.\n\t* gcc.dg/vect/O3-pr36098.c: Un-XFAIL.\n\nFrom-SVN: r197189", "tree": {"sha": "fcc4b9380bfadbb4d5f3785c7d03fcf3f6818fc9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcc4b9380bfadbb4d5f3785c7d03fcf3f6818fc9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a9dc2a2f95a6a88c99a75aa16f7a43f2c2c3e93a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9dc2a2f95a6a88c99a75aa16f7a43f2c2c3e93a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9dc2a2f95a6a88c99a75aa16f7a43f2c2c3e93a"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "8a96fcb7cdb3d54095fe2812f8b409ff724b94b7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -1,3 +1,11 @@\n+2013-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37021\n+\t* tree-vect-slp.c (vect_build_slp_tree): When not unrolling\n+\tdo not restrict gaps between groups.\n+\t* tree-vect-stmts.c (vectorizable_load): Properly account for\n+\ta gap between groups.\n+\n 2013-03-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* toplev.c (process_options): Do not disable -fomit-frame-pointer on a"}, {"sha": "ca732361f513c2e1ad04bd7f71d2bbaca621f358", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -1,3 +1,9 @@\n+2013-03-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/37021\n+\t* gcc.dg/vect/fast-math-slp-38.c: New testcase.\n+\t* gcc.dg/vect/O3-pr36098.c: Un-XFAIL.\n+\n 2013-03-27  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/56650"}, {"sha": "9e87b2372db8e0b58f0351b5aaaded401965c797", "filename": "gcc/testsuite/gcc.dg/vect/O3-pr36098.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2FO3-pr36098.c?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -17,6 +17,5 @@ void foo (int ncons, t_sortblock *sb, int *iatom)\n      iatom[m]=sb[i].iatom[m];\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" { xfail *-*-* } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n-"}, {"sha": "241f9f5c09d3a05bf971f9162cdb2c18b783f890", "filename": "gcc/testsuite/gcc.dg/vect/fast-math-slp-38.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-slp-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-slp-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Ffast-math-slp-38.c?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target vect_double } */\n+\n+double self[1024];\n+double a[1024][1024];\n+double b[1024];\n+\n+void __attribute__((noinline,noclone))\n+foo (void)\n+{\n+  int i, j;\n+  for (i = 0; i < 1024; i+=6)\n+    for (j = 0; j < 1024; j+=6)\n+      {\n+\tself[i] = self[i] + a[i][j]*b[j];\n+\tself[i+1] = self[i+1] + a[i][j+1]*b[j+1];\n+      }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e925f57a2f5f015d342c9406ecfcd3967e5cab68", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -740,11 +740,16 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  else\n \t    {\n \t      /* Load.  */\n-              /* FORNOW: Check that there is no gap between the loads.  */\n-              if ((GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n-                   && GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n-                  || (GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) != stmt\n-                      && GROUP_GAP (vinfo_for_stmt (stmt)) != 1))\n+              /* FORNOW: Check that there is no gap between the loads\n+\t\t and no gap between the groups when we need to load\n+\t\t multiple groups at once.\n+\t\t ???  We should enhance this to only disallow gaps\n+\t\t inside vectors.  */\n+              if ((ncopies > 1\n+\t\t   && GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n+\t\t   && GROUP_GAP (vinfo_for_stmt (stmt)) != 0)\n+\t\t  || (GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) != stmt\n+\t\t      && GROUP_GAP (vinfo_for_stmt (stmt)) != 1))\n                 {\n                   if (dump_enabled_p ())\n                     {\n@@ -762,7 +767,10 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n               /* Check that the size of interleaved loads group is not\n                  greater than the SLP group size.  */\n               if (loop_vinfo\n-                  && GROUP_SIZE (vinfo_for_stmt (stmt)) > ncopies * group_size)\n+\t\t  && GROUP_FIRST_ELEMENT (vinfo_for_stmt (stmt)) == stmt\n+                  && ((GROUP_SIZE (vinfo_for_stmt (stmt))\n+\t\t       - GROUP_GAP (vinfo_for_stmt (stmt)))\n+\t\t      > ncopies * group_size))\n                 {\n                   if (dump_enabled_p ())\n                     {"}, {"sha": "4bd841564188d71214c0d34f57bf1ceba4050f41", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a64b9c261d9d2c12b98bd14f5f1bf27e3bcb6bdd", "patch": "@@ -4316,7 +4316,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   gimple ptr_incr;\n   int nunits = TYPE_VECTOR_SUBPARTS (vectype);\n   int ncopies;\n-  int i, j, group_size;\n+  int i, j, group_size, group_gap;\n   tree msq = NULL_TREE, lsq;\n   tree offset = NULL_TREE;\n   tree realignment_token = NULL_TREE;\n@@ -4766,15 +4766,20 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t  vec_num = SLP_TREE_NUMBER_OF_VEC_STMTS (slp_node);\n           if (SLP_INSTANCE_LOAD_PERMUTATION (slp_node_instance).exists ())\n             slp_perm = true;\n+\t  group_gap = GROUP_GAP (vinfo_for_stmt (first_stmt));\n     \t}\n       else\n-\tvec_num = group_size;\n+\t{\n+\t  vec_num = group_size;\n+\t  group_gap = 0;\n+\t}\n     }\n   else\n     {\n       first_stmt = stmt;\n       first_dr = dr;\n       group_size = vec_num = 1;\n+      group_gap = 0;\n     }\n \n   alignment_support_scheme = vect_supportable_dr_alignment (first_dr, false);\n@@ -5134,6 +5139,15 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t      if (slp && !slp_perm)\n \t\tSLP_TREE_VEC_STMTS (slp_node).quick_push (new_stmt);\n \t    }\n+\t  /* Bump the vector pointer to account for a gap.  */\n+\t  if (slp && group_gap != 0)\n+\t    {\n+\t      tree bump = size_binop (MULT_EXPR,\n+\t\t\t\t      TYPE_SIZE_UNIT (elem_type),\n+\t\t\t\t      size_int (group_gap));\n+\t      dataref_ptr = bump_vector_ptr (dataref_ptr, ptr_incr, gsi,\n+\t\t\t\t\t     stmt, bump);\n+\t    }\n \t}\n \n       if (slp && !slp_perm)"}]}