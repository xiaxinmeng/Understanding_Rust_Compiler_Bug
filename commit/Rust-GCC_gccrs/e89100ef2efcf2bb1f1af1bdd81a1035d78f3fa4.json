{"sha": "e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg5MTAwZWYyZWZjZjJiYjFmMWFmMWJkZDgxYTEwMzVkNzhmM2ZhNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T15:21:31Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T15:34:08Z"}, "message": "libstdc++: make polymorphic_allocator throw consistent type (LWG 3237)\n\n\t* include/std/memory_resource (polymorphic_allocator::allocate)\n\t(polymorphic_allocator::allocate_object): Change type of exception to\n\tbad_array_new_length (LWG 3237).\n\t* testsuite/20_util/polymorphic_allocator/lwg3237.cc: New test.", "tree": {"sha": "7544732e916acd00d0d2524e6e3da4e0cb971564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7544732e916acd00d0d2524e6e3da4e0cb971564"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb54e0b8794dfeea1f59ed9ca6433df1eccb85e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb54e0b8794dfeea1f59ed9ca6433df1eccb85e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb54e0b8794dfeea1f59ed9ca6433df1eccb85e9"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "067cf8343f66917945e43a96d2a45d811c849a4f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "patch": "@@ -1,5 +1,10 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/memory_resource (polymorphic_allocator::allocate)\n+\t(polymorphic_allocator::allocate_object): Change type of exception to\n+\tbad_array_new_length (LWG 3237).\n+\t* testsuite/20_util/polymorphic_allocator/lwg3237.cc: New test.\n+\n \t* include/std/type_traits (__cpp_lib_unwrap_ref): Define (LWG 3348).\n \t* include/std/version (__cpp_lib_unwrap_ref): Likewise.\n \t* testsuite/20_util/unwrap_reference/1.cc: Check macro."}, {"sha": "74683c5267fcb9d00624fc118b59b877b3b44365", "filename": "libstdc++-v3/include/std/memory_resource", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fmemory_resource?ref=e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "patch": "@@ -167,7 +167,7 @@ namespace pmr\n       __attribute__((__returns_nonnull__))\n       {\n \tif (__n > (__detail::__int_limits<size_t>::max() / sizeof(_Tp)))\n-\t  std::__throw_bad_alloc();\n+\t  _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n \treturn static_cast<_Tp*>(_M_resource->allocate(__n * sizeof(_Tp),\n \t\t\t\t\t\t       alignof(_Tp)));\n       }\n@@ -193,7 +193,7 @@ namespace pmr\n \tallocate_object(size_t __n = 1)\n \t{\n \t  if ((__detail::__int_limits<size_t>::max() / sizeof(_Up)) < __n)\n-\t    __throw_length_error(\"polymorphic_allocator::allocate_object\");\n+\t    _GLIBCXX_THROW_OR_ABORT(bad_array_new_length());\n \t  return static_cast<_Up*>(allocate_bytes(__n * sizeof(_Up),\n \t\t\t\t\t\t  alignof(_Up)));\n \t}"}, {"sha": "350f5ac9c95535cb53b6d0faf2980fa5446b79ab", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/lwg3237.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3237.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3237.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Flwg3237.cc?ref=e89100ef2efcf2bb1f1af1bdd81a1035d78f3fa4", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <memory_resource>\n+#include <testsuite_hooks.h>\n+\n+struct large { alignas(1024) int i; };\n+\n+void\n+test01()\n+{\n+  std::pmr::polymorphic_allocator<large> a;\n+  large* p = nullptr;\n+  try\n+  {\n+    p = a.allocate(std::size_t(-1) / 256);\n+    VERIFY( false );\n+  }\n+  catch (const std::bad_array_new_length&)\n+  {\n+  }\n+\n+  std::pmr::polymorphic_allocator<int> a2;\n+  try\n+  {\n+    p = a2.allocate_object<large>(std::size_t(-1) / 256);\n+    VERIFY( false );\n+  }\n+  catch (const std::bad_array_new_length&)\n+  {\n+  }\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}