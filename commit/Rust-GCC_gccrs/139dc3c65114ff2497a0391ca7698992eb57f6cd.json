{"sha": "139dc3c65114ff2497a0391ca7698992eb57f6cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM5ZGMzYzY1MTE0ZmYyNDk3YTAzOTFjYTc2OTg5OTJlYjU3ZjZjZA==", "commit": {"author": {"name": "James Clarke", "email": "jrtc27@jrtc27.com", "date": "2016-10-06T10:28:23Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-10-06T10:28:23Z"}, "message": "re PR target/77759 (ICE in function_arg_record_value on nested empty class)\n\n\tPR target/77759\n\t* config/sparc/sparc.c (classify_data_t): Remove int_regs field.\n\t(classify_registers): Don't set it\n\t(function_arg_slotno): Don't initialize and test it.  Tidy up.\n\nCo-Authored-By: Eric Botcazou <ebotcazou@adacore.com>\n\nFrom-SVN: r240830", "tree": {"sha": "a74084b26c37d69e5ce67c00721195990ec7db5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a74084b26c37d69e5ce67c00721195990ec7db5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/139dc3c65114ff2497a0391ca7698992eb57f6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139dc3c65114ff2497a0391ca7698992eb57f6cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/139dc3c65114ff2497a0391ca7698992eb57f6cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/139dc3c65114ff2497a0391ca7698992eb57f6cd/comments", "author": {"login": "jrtc27", "id": 816232, "node_id": "MDQ6VXNlcjgxNjIzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/816232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrtc27", "html_url": "https://github.com/jrtc27", "followers_url": "https://api.github.com/users/jrtc27/followers", "following_url": "https://api.github.com/users/jrtc27/following{/other_user}", "gists_url": "https://api.github.com/users/jrtc27/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrtc27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrtc27/subscriptions", "organizations_url": "https://api.github.com/users/jrtc27/orgs", "repos_url": "https://api.github.com/users/jrtc27/repos", "events_url": "https://api.github.com/users/jrtc27/events{/privacy}", "received_events_url": "https://api.github.com/users/jrtc27/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "37f6a157f592dcd13f61f693b40257621ac83226", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37f6a157f592dcd13f61f693b40257621ac83226", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37f6a157f592dcd13f61f693b40257621ac83226"}], "stats": {"total": 67, "additions": 50, "deletions": 17}, "files": [{"sha": "5fd5c7a2476dc0dab24f12e8b0673e01ea02a6f7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=139dc3c65114ff2497a0391ca7698992eb57f6cd", "patch": "@@ -1,3 +1,11 @@\n+2016-10-06  James Clarke  <jrtc27@jrtc27.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR target/77759\n+\t* config/sparc/sparc.c (classify_data_t): Remove int_regs field.\n+\t(classify_registers): Don't set it\n+\t(function_arg_slotno): Don't initialize and test it.  Tidy up.\n+\n 2016-10-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77839"}, {"sha": "c1c196b53548a6469366c2a786df804b01b17bb4", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=139dc3c65114ff2497a0391ca7698992eb57f6cd", "patch": "@@ -6294,7 +6294,6 @@ traverse_record_type (const_tree type, bool named, T *data,\n \n typedef struct\n {\n-  bool int_regs;\t/* true if field eligible to int registers.  */\n   bool fp_regs;\t\t/* true if field eligible to FP registers.  */\n   bool fp_regs_in_first_word;\t/* true if such field in first word.  */\n } classify_data_t;\n@@ -6311,8 +6310,6 @@ classify_registers (const_tree, HOST_WIDE_INT bitpos, bool fp,\n       if (bitpos < BITS_PER_WORD)\n \tdata->fp_regs_in_first_word = true;\n     }\n-  else\n-    data->int_regs = true;\n }\n \n /* Compute the slot number to pass an argument in.\n@@ -6439,23 +6436,25 @@ function_arg_slotno (const struct sparc_args *cum, machine_mode mode,\n \n \t  if (TREE_CODE (type) == RECORD_TYPE)\n \t    {\n-\t      classify_data_t data = { false, false, false };\n+\t      classify_data_t data = { false, false };\n \t      traverse_record_type<classify_data_t, classify_registers>\n \t\t(type, named, &data);\n \n-\t      /* If all slots are filled except for the last one, but there\n-\t\t is no FP field in the first word, then must pass on stack.  */\n-\t      if (data.fp_regs\n-\t\t  && !data.fp_regs_in_first_word\n-\t\t  && slotno >= SPARC_FP_ARG_MAX - 1)\n-\t\treturn -1;\n-\n-\t      /* If there are only int args and all int slots are filled,\n-\t\t then must pass on stack.  */\n-\t      if (!data.fp_regs\n-\t\t  && data.int_regs\n-\t\t  && slotno >= SPARC_INT_ARG_MAX)\n-\t\treturn -1;\n+\t      if (data.fp_regs)\n+\t\t{\n+\t\t  /* If all FP slots are filled except for the last one and\n+\t\t     there is no FP field in the first word, then must pass\n+\t\t     on stack.  */\n+\t\t  if (slotno >= SPARC_FP_ARG_MAX - 1\n+\t\t      && !data.fp_regs_in_first_word)\n+\t\t    return -1;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  /* If all int slots are filled, then must pass on stack.  */\n+\t\t  if (slotno >= SPARC_INT_ARG_MAX)\n+\t\t    return -1;\n+\t\t}\n \t    }\n \n \t  /* PREGNO isn't set since both int and FP regs can be used.  */"}, {"sha": "085884660fa0db7b7dfa697c00c44aaa377e8817", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=139dc3c65114ff2497a0391ca7698992eb57f6cd", "patch": "@@ -1,3 +1,8 @@\n+2016-10-06  James Clarke  <jrtc27@jrtc27.com>\n+            Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* g++.dg/other/pr77759.C: New test.\n+\n 2016-10-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77839"}, {"sha": "71bee65409a05009003a43e2ac3c8e4ee4dff24d", "filename": "gcc/testsuite/g++.dg/other/pr77759.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr77759.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/139dc3c65114ff2497a0391ca7698992eb57f6cd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr77759.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr77759.C?ref=139dc3c65114ff2497a0391ca7698992eb57f6cd", "patch": "@@ -0,0 +1,21 @@\n+// PR target/77759\n+// This ICEd in the 64-bit SPARC back-end because of the nested empty struct.\n+\n+// { dg-do compile }\n+\n+struct empty {};\n+\n+struct pair_empty\n+{\n+   struct empty a;\n+   struct empty b;\n+};\n+\n+extern void foo (int slot0, int slot1, int slot2, int slot3, int slot4,\n+\t\t int slot5, struct pair_empty pair);\n+\n+void bar (void)\n+{\n+  struct pair_empty pair;\n+  foo (0, 0, 0, 0, 0, 0, pair);\n+}"}]}