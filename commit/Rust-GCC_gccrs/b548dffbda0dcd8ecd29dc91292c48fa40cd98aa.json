{"sha": "b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU0OGRmZmJkYTBkY2Q4ZWNkMjlkYzkxMjkyYzQ4ZmE0MGNkOThhYQ==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-06T09:52:35Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2001-03-06T09:52:35Z"}, "message": "aclocal.m4 (libiberty_AC_FUNC_C_ALLOCA): New.\n\nlibiberty:\n\t* aclocal.m4 (libiberty_AC_FUNC_C_ALLOCA): New.\n\t* configure.in: Replace all alloca logic with a simple use of\n\tthe above new macro.\n\t* config.table: Kill *-*-beos* entry.\n\t* config/mh-beos: Delete.\n\t* configure, config.in: Regenerate.\n\n\t* Makefile.in (ALLOCA, HFILES): Kill.\n\t(REQUIRED_OFILES): Add alloca.o.\n\t(alloca.o): Depend on libiberty.h.\n\t(argv.o): Don't depend on alloca-conf.h.\n\t* alloca-conf.h: Delete.\n\t* alloca.c: Include libiberty.h.  Kill all #ifdef emacs\n\tblocks.  Provide the C alloca unconditionally.  Use PTR where\n\tappropriate.  Make i00afunc static.\n\t* argv.c: Don't include alloca-conf.h.\n\ninclude:\n\t* libiberty.h: Prototype C_alloca; define alloca to either\n\t__builtin_alloca or C_alloca as appropriate.\n\ngcc:\n\t* aclocal.m4 (AM_GNU_GETTEXT): Don't AC_REQUIRE\n\tAC_FUNC_ALLOCA.\n\t* configure, config.in: Regenerate.\n\t* config.gcc: Remove references to deleted files.\n\n\t* genattr.c, genattrtab.c, genextract.c, genoutput.c,\n\tgenrecog.c, rtl.c: Do not use alloca anywhere.\n\n\t* Makefile.in, build-make, system.h, config/x-interix,\n\tconfig/x-svr4, config/xm-interix.h, config/xm-openbsd.h,\n\tconfig/alpha/xm-alpha.h, config/alpha/xm-vms.h,\n\tconfig/arc/xm-arc.h, config/arm/xm-arm.h,\n\tconfig/d30v/xm-d30v.h, config/dsp16xx/xm-dsp16xx.h,\n\tconfig/h8300/xm-h8300.h, config/i370/x-oe,\n\tconfig/i370/xm-linux.h, config/i386/x-aix, config/i386/x-beos,\n\tconfig/i386/x-ncr3000, config/i386/x-sco5,\n\tconfig/i386/xm-dgux.h, config/i860/x-sysv4,\n\tconfig/i960/xm-i960.h, config/m32r/xm-m32r.h,\n\tconfig/m68k/x-crds, config/m68k/x-dpx2, config/m68k/x-hp320,\n\tconfig/m68k/x-hp320g, config/m69k/x-mot3300,\n\tconfig/m68k/x-mot3300-gas, config/m68k/xm-amix.h,\n\tconfig/m68k/xm-hp320.h, config/m68k/xm-m68kv.h,\n\tconfig/m68k/xm-mot3300.h, config/m88k/x-dolph,\n\tconfig/m88k/x-sysv4, config/m88k/x-tekXD88,\n\tconfig/m88k/xm-m88k.h, config/mcore/xm-mcore.h,\n\tconfig/mips/x-iris, config/mips/x-iris3,\n\tconfig/mips/x-sni-svr4, config/mips/x-sysv,\n\tconfig/mips/xm-iris6.h, config/mips/xm-mips.h,\n\tconfig/mips/xm-nws3250v4.h, config/pa/x-hpux,\n\tconfig/pa/x-pa-mpeix, config/pa/xm-pa.h,\n\tconfig/pa/xm-pa64hpux.h, config/pa/xm-pahpux.h,\n\tconfig/pa/xm-papro.h, config/romp/xm-romp.h,\n\tconfig/rs6000/x-aix31, config/rs6000/x-aix41,\n\tconfig/rs6000/x-beos, config/rs6000/x-lynx,\n\tconfig/rs6000/x-mach, config/rs6000/x-rs6000,\n\tconfig/rs6000/x-sysv4, config/rs6000/xm-rs6000.h,\n\tconfig/rs6000/xm-sysv4.h, config/sh/xm-sh.h,\n\tconfig/sparc/x-sysv4, config/sparc/xm-linux.h,\n\tconfig/sparc/xm-pbd.h, config/sparc/xm-sparc.h,\n\tconfig/vax/xm-vms.h: Eradicate all references to alloca and\n\trelated stuff.\n\n\t* config/xm-alloca.h, config/clipper/x-clix,\n\tconfig/i386/xm-sysv4.h, config/i860/x-fx2800,\n\tconfig/i860/x-sysv3, config/m88k/x-sysv3,\n\tconfig/sparc/xm-sol2.h, config/we32k/x-we32k: Delete\n\t(contained only alloca related hacks).\n\n\t* config/i386/xm-beos.h, config/rs6000/xm-beos.h: Just define\n\tUSE_C_ALLOCA.\n\nFrom-SVN: r40259", "tree": {"sha": "7e22f9fda0da4355d8a7de6e9143a24ad9ac4db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e22f9fda0da4355d8a7de6e9143a24ad9ac4db4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/comments", "author": null, "committer": null, "parents": [{"sha": "89b3de05baddfeec0747cc819dfb6a75363aebdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b3de05baddfeec0747cc819dfb6a75363aebdc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b3de05baddfeec0747cc819dfb6a75363aebdc"}], "stats": {"total": 1595, "additions": 363, "deletions": 1232}, "files": [{"sha": "be2e4ad00c2c0c8dcdc86a1ccddc99237a816993", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -58,10 +58,6 @@ INTL_TARGETS = intl.all intl.install\n # This is overridden by configure.\n BOOT_LANGUAGES = c @all_boot_languages@\n \n-ALLOCA =\n-ALLOCA_FLAGS =\n-ALLOCA_FINISH = true\n-\n # Various ways of specifying flags for compilations:\n # CFLAGS is for the user to override to, e.g., do a bootstrap with -O2.\n # BOOT_CFLAGS is the value of CFLAGS to pass to the stage2 and stage3\n@@ -509,7 +505,6 @@ HOST_CFLAGS=$(ALL_CFLAGS) -DGENERATOR_FILE\n HOST_CLIB=$(CLIB)\n HOST_LDFLAGS=$(LDFLAGS)\n HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n-HOST_ALLOCA=$(ALLOCA)\n HOST_MALLOC=$(MALLOC)\n HOST_OBSTACK=$(OBSTACK)\n HOST_VFPRINTF=$(VFPRINTF)\n@@ -604,34 +599,32 @@ ALL_CFLAGS = $(INTERNAL_CFLAGS) $(X_CFLAGS) $(T_CFLAGS) \\\n # Likewise.\n ALL_CPPFLAGS = $(CPPFLAGS) $(X_CPPFLAGS) $(T_CPPFLAGS)\n \n-# Even if ALLOCA is set, don't use it if compiling with GCC.\n-USE_ALLOCA= ${ALLOCA}\n-USE_HOST_ALLOCA= ` case \"${HOST_ALLOCA}\" in ?*) echo ${HOST_PREFIX}${HOST_ALLOCA} ;; esac `\n USE_HOST_MALLOC= ` case \"${HOST_MALLOC}\" in ?*) echo ${HOST_PREFIX}${HOST_MALLOC} ;; esac `\n USE_HOST_OBSTACK= ` case \"${HOST_OBSTACK}\" in ?*) echo ${HOST_PREFIX}${HOST_OBSTACK} ;; esac `\n USE_HOST_VFPRINTF= ` case \"${HOST_VFPRINTF}\" in ?*) echo ${HOST_PREFIX}${HOST_VFPRINTF} ;; esac `\n USE_HOST_DOPRINT= ` case \"${HOST_DOPRINT}\" in ?*) echo ${HOST_PREFIX}${HOST_DOPRINT} ;; esac `\n USE_HOST_STRSTR= ` case \"${HOST_STRSTR}\" in ?*) echo ${HOST_PREFIX}${HOST_STRSTR} ;; esac `\n \n-# Dependency on obstack, alloca, malloc or whatever library facilities\n+# Dependency on obstack, malloc or whatever library facilities\n # are not installed in the system libraries.\n-# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.\n-LIBDEPS= $(INTLLIBS) $(OBSTACK) $(ALLOCA) $(MALLOC) $(VFPRINTF) $(DOPRINT) $(STRSTR)\n+# We don't use USE_* because backquote expansion doesn't work in deps.\n+LIBDEPS= $(INTLLIBS) $(OBSTACK) $(MALLOC) $(VFPRINTF) $(DOPRINT) $(STRSTR)\n \n # Likewise, for use in the tools that must run on this machine\n # even if we are cross-building GCC.\n-# We don't use USE_ALLOCA because backquote expansion doesn't work in deps.\n-HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_ALLOCA) $(HOST_PREFIX)$(HOST_MALLOC) $(HOST_PREFIX)$(HOST_VFPRINTF) $(HOST_PREFIX)$(HOST_DOPRINT) $(HOST_PREFIX)$(HOST_STRSTR)\n+HOST_LIBDEPS= $(HOST_PREFIX)$(HOST_OBSTACK) $(HOST_PREFIX)$(HOST_MALLOC) \\\n+\t$(HOST_PREFIX)$(HOST_VFPRINTF) $(HOST_PREFIX)$(HOST_DOPRINT) \\\n+\t$(HOST_PREFIX)$(HOST_STRSTR)\n \n # How to link with both our special library facilities\n # and the system's installed libraries.\n-LIBS = $(OBSTACK) $(USE_ALLOCA) $(MALLOC) $(INTLLIBS) @LIBS@ $(VFPRINTF) $(DOPRINT) $(STRSTR) $(CLIB) ../libiberty/libiberty.a\n+LIBS =\t$(OBSTACK) $(MALLOC) $(INTLLIBS) @LIBS@ $(VFPRINTF) $(DOPRINT) \\\n+\t$(STRSTR) $(CLIB) ../libiberty/libiberty.a\n \n # Likewise, for use in the tools that must run on this machine\n # even if we are cross-building GCC.\n-HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_ALLOCA) $(USE_HOST_MALLOC)  \\\n-\t    $(USE_HOST_VFPRINTF) $(USE_HOST_DOPRINT) $(USE_HOST_STRSTR)  \\\n-\t    $(HOST_CLIB)\n+HOST_LIBS = $(USE_HOST_OBSTACK) $(USE_HOST_MALLOC) $(USE_HOST_VFPRINTF) \\\n+\t    $(USE_HOST_DOPRINT) $(USE_HOST_STRSTR) $(HOST_CLIB)\n \n HOST_RTL = $(HOST_PREFIX)rtl.o $(HOST_PREFIX)bitmap.o \\\n \t\t$(HOST_PREFIX)ggc-none.o gensupport.o hashtab.o safe-ctype.o\n@@ -1558,15 +1551,6 @@ mips-tdump.o : mips-tdump.c $(CONFIG_H) $(RTL_H) system.h\n # Build file to support OSF/rose half-pic format.\n halfpic.o: halfpic.c $(CONFIG_H) $(RTL_H) $(TREE_H) system.h\n \n-# Normally this target is not used; but it is used if you\n-# define ALLOCA=alloca.o.  In that case, you must get a suitable alloca.c\n-# from the GNU Emacs distribution.\n-alloca.o:\t$(srcdir)/../libiberty/alloca.c\n-\trm -f alloca.c\n-\t$(LN_S) $(srcdir)/../libiberty/alloca.c alloca.c\n-\t$(CC) $(ALL_CFLAGS) -DGENERATOR_FILE $(ALL_CPPFLAGS) $(INCLUDES) \\\n-\t$(ALLOCA_FLAGS) -c alloca.c\n-\t$(ALLOCA_FINISH)\n #\f\n # Generate header and source files from the machine description,\n # and compile them.\n@@ -1819,7 +1803,7 @@ gengenrtl.o : gengenrtl.c $(RTL_BASE_H) system.h real.h\n # Compile the libraries to be used by gen*.\n # If we are not cross-building, gen* use the same .o's that cc1 will use,\n # and HOST_PREFIX_1 is `foobar', just to ensure these rules don't conflict\n-# with the rules for rtl.o, alloca.o, etc.\n+# with the rules for rtl.o, etc.\n $(HOST_PREFIX_1)rtl.o: $(srcdir)/rtl.c $(GCONFIG_H) system.h $(RTL_H) \\\n   bitmap.h $(GGC_H) toplev.h $(HASHTAB_H)\n \trm -f $(HOST_PREFIX)rtl.c\n@@ -1838,11 +1822,6 @@ $(HOST_PREFIX_1)bitmap.o: $(srcdir)/bitmap.c $(CONFIG_H) system.h $(RTL_H) \\\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/bitmap.c > $(HOST_PREFIX)bitmap.c\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)bitmap.c\n \n-$(HOST_PREFIX_1)alloca.o: $(srcdir)/../libiberty/alloca.c\n-\trm -f $(HOST_PREFIX)alloca.c\n-\t$(LN_S) $(srcdir)/../libiberty/alloca.c $(HOST_PREFIX)alloca.c\n-\t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(HOST_PREFIX)alloca.c\n-\n $(HOST_PREFIX_1)obstack.o: $(srcdir)/../libiberty/obstack.c $(GCONFIG_H)\n \trm -f $(HOST_PREFIX)obstack.c\n \tsed -e 's/config[.]h/hconfig.h/' $(srcdir)/../libiberty/obstack.c > $(HOST_PREFIX)obstack.c\n@@ -1875,7 +1854,7 @@ $(HOST_PREFIX_1)errors.o: errors.c\n \n \n # This satisfies the dependency that we get if you cross-compile a compiler\n-# that does not need to compile alloca, malloc or whatever.\n+# that does not need to compile, malloc or whatever.\n $(HOST_PREFIX_1):\n \ttouch $(HOST_PREFIX_1)\n \n@@ -2294,7 +2273,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -rf libgcc\n # Delete the temporary source copies for cross compilation.\n \t-rm -f $(HOST_PREFIX_1)rtl.c\n-\t-rm -f $(HOST_PREFIX_1)alloca.c $(HOST_PREFIX_1)malloc.c\n+\t-rm -f $(HOST_PREFIX_1)malloc.c\n \t-rm -f $(HOST_PREFIX_1)obstack.c\n # Delete the temp files made in the course of building libgcc.a.\n \t-rm -f xlimits.h libgcc1-test\n@@ -2308,7 +2287,7 @@ mostlyclean: $(INTL_MOSTLYCLEAN) lang.mostlyclean\n \t-rm -f *.[0-9][0-9].* */*.[0-9][0-9].*\n # Delete some files made during installation.\n \t-rm -f specs float.h-* enquire SYSCALLS.c.X SYSCALLS.c\n-\t-rm -f collect collect2 mips-tfile mips-tdump alloca.s\n+\t-rm -f collect collect2 mips-tfile mips-tdump\n # Delete files generated for fixproto\n \t-rm -rf fix-header xsys-protos.h deduced.h tmp-deduced.h \\\n \t  gen-protos$(build_exeext) fixproto.list fixtmp.* fixhdr.ready\n@@ -2363,7 +2342,7 @@ distclean: clean $(INTL_DISTCLEAN) lang.distclean\n \t-rm -f site.exp site.bak testsuite/site.exp testsuite/site.bak\n \t-rm -f testsuite/{gcc,g++}.{log,sum}\n \t-rm -f intl/libintl.h libintl.h\n-\t-rm -f cxxmain.c splay-tree.c obstack.c alloca.c hashtab.c safe-ctype.c\n+\t-rm -f cxxmain.c splay-tree.c obstack.c hashtab.c safe-ctype.c\n \t-rm -f mklibgcc libgcc.map gccbug .gdbinit configargs.h\n \t-rm -f gcov.pod\n \t-rm -f fixinc/Makefile\n@@ -2903,11 +2882,6 @@ stage1_copy: stage1_build\n \ttouch stage1_copy\n \techo stage2_build > stage_last\n \n-# This used to define ALLOCA as empty, but that would lead to bad results\n-# for a subsequent `make install' since that would not have ALLOCA empty.\n-# To prevent `make install' from compiling alloca.o and then relinking cc1\n-# because alloca.o is newer, we permit these recursive makes to compile\n-# alloca.o.  Then cc1 is newer, so it won't have to be relinked.\n stage2_build: stage1_copy\n \t$(MAKE) CC=\"stage1/xgcc$(exeext) -Bstage1/ -B$(build_tooldir)/bin/\" \\\n \t\t STAGE_PREFIX=stage1/ \\"}, {"sha": "128dc9773aba292c848f574fb46c9b8d921170b4", "filename": "gcc/aclocal.m4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Faclocal.m4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -566,7 +566,6 @@ AC_DEFUN(AM_GNU_GETTEXT,\n    AC_REQUIRE([AC_C_INLINE])dnl\n    AC_REQUIRE([AC_TYPE_OFF_T])dnl\n    AC_REQUIRE([AC_TYPE_SIZE_T])dnl\n-   AC_REQUIRE([AC_FUNC_ALLOCA])dnl\n \n    AC_CHECK_HEADERS([argz.h limits.h locale.h nl_types.h malloc.h string.h \\\n unistd.h sys/param.h])"}, {"sha": "c47a78c84bef3ce693dbec41d41022643581678f", "filename": "gcc/build-make", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fbuild-make", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fbuild-make", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuild-make?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -16,7 +16,6 @@ HOST_CFLAGS=$(INTERNAL_CFLAGS) $(T_CFLAGS) $(CFLAGS) $(XCFLAGS) \\\n HOST_CLIB=\n HOST_LDFLAGS=$(LDFLAGS)\n HOST_CPPFLAGS=$(ALL_CPPFLAGS)\n-HOST_ALLOCA=$(ALLOCA)\n HOST_MALLOC=$(MALLOC)\n HOST_OBSTACK=$(OBSTACK)\n "}, {"sha": "0128d33b66e5e32f771f69f9cce73a0bc2434db6", "filename": "gcc/config.gcc", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -610,7 +610,6 @@ c4x-*)\n clipper-intergraph-clix*)\n \ttm_file=\"${tm_file} svr3.h clipper/clix.h\"\n \txm_file=clipper/xm-clix.h\n-\txmake_file=clipper/x-clix\n \textra_headers=va-clipper.h\n \textra_parts=\"crtbegin.o crtend.o\"\n \tinstall_headers_dir=install-headers-cpio\n@@ -945,7 +944,7 @@ i370-*-linux*)\n \tfi\n \t;;\n i[34567]86-*-chorusos*)\n-\txm_file=\"${xm_file} xm-svr4.h i386/xm-sysv4.h\"\n+\txm_file=\"${xm_file} xm-svr4.h\"\n \ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386afe.h i386/i386elf.h i386/chorus.h\"\n \ttmake_file=i386/t-i386elf\n \txmake_file=x-svr4\n@@ -956,7 +955,7 @@ i[34567]86-*-chorusos*)\n \tesac\n \t;;\n i[34567]86-*-elf*)\n-\txm_file=\"${xm_file} xm-svr4.h i386/xm-sysv4.h\"\n+\txm_file=\"${xm_file} xm-svr4.h\"\n \ttm_file=\"i386/i386.h i386/att.h elfos.h i386/i386afe.h i386/i386elf.h\"\n \ttmake_file=i386/t-i386elf\n \txmake_file=x-svr4\n@@ -971,12 +970,10 @@ i[34567]86-ibm-aix*)\t\t# IBM PS/2 running AIX\n \t\ttm_file=i386/aix386ng.h\n \t\tuse_collect2=yes\n \tfi\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \txmake_file=i386/x-aix\n \t;;\n i[34567]86-ncr-sysv4*)\t\t# NCR 3000 - ix86 running system V.4\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG POSIX SMALL_ARG_MAX\"\n \txmake_file=i386/x-ncr3000\n \tif test x$stabs = xyes -a x$gas = xyes\n@@ -1029,7 +1026,6 @@ i[34567]86-sequent-ptx2* | i[34567]86-sequent-sysv3*)\n \tinstall_headers_dir=install-headers-cpio\n \t;;\n i[34567]86-sequent-ptx4* | i[34567]86-sequent-sysv4*)\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \tif test x$gas = xyes\n \tthen\n \t\ttm_file=\"${tm_file} usegas.h\"\n@@ -1251,7 +1247,7 @@ i[34567]86-*-rtems*|i[34567]86-*-rtemself*)\n \tfi\n \t;;\n i[34567]86-*-sco3.2v5*)\t# 80386 running SCO Open Server 5\n-\txm_file=\"xm-alloca.h ${xm_file} i386/xm-sco5.h\"\n+\txm_file=\"${xm_file} i386/xm-sco5.h\"\n \txm_defines=\"USG SVR3\"\n \txmake_file=i386/x-sco5\n \tinstall_headers_dir=install-headers-cpio\n@@ -1305,7 +1301,6 @@ i[34567]86-*-sco*)\t \t# 80386 running SCO system\n \ttruncate_target=yes\n \t;;\n i[34567]86-*-solaris2*)\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG POSIX SMALL_ARG_MAX\"\n \ttm_file=i386/sol2.h\n \tif test x$gas = xyes; then\n@@ -1330,7 +1325,6 @@ i[34567]86-*-solaris2*)\n \tfi\n \t;;\n i[34567]86-*-sysv5*)           # Intel x86 on System V Release 5\n-       xm_file=\"xm-alloca.h ${xm_file}\"\n        xm_defines=\"USG POSIX\"\n        tm_file=i386/sysv5.h\n        if test x$stabs = xyes\n@@ -1345,7 +1339,6 @@ i[34567]86-*-sysv5*)           # Intel x86 on System V Release 5\n        fi\n        ;;\n i[34567]86-*-sysv4*)\t\t# Intel 80386's running system V.4\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG POSIX SMALL_ARG_MAX\"\n \ttm_file=i386/sysv4.h\n \tif test x$stabs = xyes\n@@ -1357,7 +1350,6 @@ i[34567]86-*-sysv4*)\t\t# Intel 80386's running system V.4\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n i[34567]86-*-udk*)      # Intel x86 on SCO UW/OSR5 Dev Kit\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG POSIX\"\n \ttm_file=i386/udk.h\n \ttmake_file=\"i386/t-i386bare i386/t-crtpic i386/t-udk\"\n@@ -1367,7 +1359,7 @@ i[34567]86-*-udk*)      # Intel x86 on SCO UW/OSR5 Dev Kit\n \t;;\n i[34567]86-*-osf1*)\t\t# Intel 80386's running OSF/1 1.3+\n \tcpu_type=i386\n-\txm_file=\"${xm_file} xm-svr4.h i386/xm-sysv4.h i386/xm-osf1elf.h\"\n+\txm_file=\"${xm_file} xm-svr4.h i386/xm-osf1elf.h\"\n \txm_defines=\"USE_C_ALLOCA SMALL_ARG_MAX\"\n \tif test x$stabs = xyes\n \tthen\n@@ -1475,7 +1467,6 @@ i[34567]86-*-interix*)\n \tfi\n \t;;\n i[34567]86-dg-dgux*)\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG POSIX\"\n \tout_file=i386/dgux.c\n \ttm_file=i386/dgux.h\n@@ -1486,7 +1477,6 @@ i[34567]86-dg-dgux*)\n i860-alliant-*)\t\t# Alliant FX/2800\n \ttm_file=\"${tm_file} svr4.h i860/sysv4.h i860/fx2800.h\"\n \txm_file=\"${xm_file}\"\n-\txmake_file=i860/x-fx2800\n \ttmake_file=i860/t-fx2800\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n@@ -1509,7 +1499,6 @@ i860-*-osf*)\t\t\t# Intel Paragon XP/S, OSF/1AD\n i860-*-sysv3*)\n \ttm_file=\"${tm_file} svr3.h i860/sysv3.h\"\n \txm_defines=\"USG SVR3\"\n-\txmake_file=i860/x-sysv3\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n i860-*-sysv4*)\n@@ -1609,7 +1598,6 @@ m68000-hp-bsd*)\t\t\t# HP 9000/200 running BSD\n \textra_headers=math-68881.h\n \t;;\n m68000-hp-hpux*)\t\t# HP 9000 series 300\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG\"\n \tif test x$gas = xyes\n \tthen\n@@ -1696,15 +1684,13 @@ m68k-bull-sysv*)\t\t# Bull DPX/2\n \telse\n \t\ttm_file=m68k/dpx2.h\n \tfi\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \txmake_file=m68k/x-dpx2\n \tuse_collect2=yes\n \textra_headers=math-68881.h\n \t;;\n m68k-atari-sysv4*)              # Atari variant of V.4.\n \ttm_file=m68k/atari.h\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \ttmake_file=t-svr4\n \textra_parts=\"crtbegin.o crtend.o\"\n@@ -1713,7 +1699,7 @@ m68k-atari-sysv4*)              # Atari variant of V.4.\n \t;;\n m68k-motorola-sysv*)\n \ttm_file=m68k/mot3300.h\n-\txm_file=\"xm-alloca.h m68k/xm-mot3300.h ${xm_file}\"\n+\txm_file=\"m68k/xm-mot3300.h ${xm_file}\"\n \tif test x$gas = xyes\n \tthen\n \t\txmake_file=m68k/x-mot3300-gas\n@@ -1748,19 +1734,17 @@ m68k-ncr-sysv*)\t\t\t# NCR Tower 32 SVR3\n \t;;\n m68k-plexus-sysv*)\n \ttm_file=m68k/plexus.h\n-\txm_file=\"xm-alloca.h m68k/xm-plexus.h ${xm_file}\"\n+\txm_file=\"m68k/xm-plexus.h ${xm_file}\"\n \txm_defines=USG\n \tuse_collect2=yes\n \textra_headers=math-68881.h\n \t;;\n m68k-tti-*)\n \ttm_file=m68k/pbb.h\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \textra_headers=math-68881.h\n \t;;\n m68k-crds-unos*)\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG unos\"\n \txmake_file=m68k/x-crds\n \ttm_file=m68k/crds.h\n@@ -1769,7 +1753,6 @@ m68k-crds-unos*)\n \t;;\n m68k-cbm-sysv4*)\t\t# Commodore variant of V.4.\n \ttm_file=m68k/amix.h\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \txmake_file=m68k/x-amix\n \ttmake_file=t-svr4\n@@ -1808,7 +1791,6 @@ m68k-isi-bsd*)\n \textra_headers=math-68881.h\n \t;;\n m68k-hp-hpux7*)\t# HP 9000 series 300 running HPUX version 7.\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG\"\n \tif test x$gas = xyes\n \tthen\n@@ -1824,7 +1806,6 @@ m68k-hp-hpux7*)\t# HP 9000 series 300 running HPUX version 7.\n \tfloat_format=m68k\n \t;;\n m68k-hp-hpux*)\t# HP 9000 series 300\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=\"USG\"\n \tif test x$gas = xyes\n \tthen\n@@ -1962,15 +1943,13 @@ m68k*-*-openbsd*)\n \tuse_collect2=yes\n \t;;\n m68k-*-sysv3*)\t\t\t# Motorola m68k's running system V.3\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \textra_parts=\"crtbegin.o crtend.o\"\n \textra_headers=math-68881.h\n \tfloat_format=m68k\n \t;;\n m68k-*-sysv4*)\t\t\t# Motorola m68k's running system V.4\n \ttm_file=m68k/m68kv4.h\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \ttmake_file=t-svr4\n \textra_parts=\"crtbegin.o crtend.o\"\n@@ -2096,7 +2075,6 @@ m88k-*-openbsd*)\n m88k-*-sysv3*)\n \ttm_file=m88k/sysv3.h\n \textra_parts=\"crtbegin.o crtend.o\"\n-\txmake_file=m88k/x-sysv3\n \tif test x$gas = xyes\n \tthen\n \t\ttmake_file=m88k/t-m88k-gas\n@@ -2903,7 +2881,6 @@ sh-*-*)\n \t;;\n sparc-tti-*)\n \ttm_file=sparc/pbd.h\n-\txm_file=\"xm-alloca.h ${xm_file}\"\n \txm_defines=USG\n \t;;\n sparc64-wrs-vxworks*)\n@@ -3013,7 +2990,7 @@ sparcv9-*-solaris2*)\n \telse\n \t\ttm_file=sparc/sol2-sld-64.h\n \tfi\n-\txm_file=\"sparc/xm-sysv4-64.h sparc/xm-sol2.h\"\n+\txm_file=\"sparc/xm-sysv4-64.h\"\n \txm_defines=\"USG POSIX\"\n \ttmake_file=\"sparc/t-sol2 sparc/t-sol2-64\"\n \tif test x$gnu_ld = xyes; then\n@@ -3039,7 +3016,7 @@ sparcv9-*-solaris2*)\n \tfi\n \t;;\n sparc-hal-solaris2*)\n-        xm_file=\"sparc/xm-sysv4.h sparc/xm-sol2.h\"\n+        xm_file=\"sparc/xm-sysv4.h\"\n         xm_defines=\"USG POSIX\"\n         tm_file=\"sparc/sol2.h sparc/hal.h\"\n         tmake_file=\"sparc/t-halos sparc/t-sol2\"\n@@ -3067,7 +3044,7 @@ sparc-*-solaris2*)\n \telse\n \t\ttm_file=sparc/sol2-sld.h\n \tfi\n-\txm_file=\"sparc/xm-sysv4.h sparc/xm-sol2.h\"\n+\txm_file=\"sparc/xm-sysv4.h\"\n \txm_defines=\"USG POSIX\"\n \ttmake_file=sparc/t-sol2\n \tif test x$gnu_ld = xyes; then\n@@ -3138,7 +3115,7 @@ sparc-*-sysv4*)\n \textra_parts=\"crtbegin.o crtend.o\"\n \t;;\n sparc-*-vxsim*)\n-\txm_file=\"sparc/xm-sysv4.h sparc/xm-sol2.h\"\n+\txm_file=\"sparc/xm-sysv4.h\"\n \txm_defines=\"USG POSIX\"\n \ttm_file=sparc/vxsim.h\n \ttmake_file=sparc/t-vxsparc"}, {"sha": "ddb461f91bf45ce04ee359a0111d8bff8bf1eb20", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,28 +1,15 @@\n /* config.in.  Generated automatically from configure.in by autoheader.  */\n \n-/* Define if using alloca.c.  */\n-#undef C_ALLOCA\n-\n /* Define to empty if the keyword does not work.  */\n #undef const\n \n-/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.\n-   This function is required for alloca.c support on those systems.  */\n-#undef CRAY_STACKSEG_END\n-\n /* Define to the type of elements in the array set by `getgroups'.\n    Usually this is either `int' or `gid_t'.  */\n #undef GETGROUPS_T\n \n /* Define to `int' if <sys/types.h> doesn't define.  */\n #undef gid_t\n \n-/* Define if you have alloca, as a function or macro.  */\n-#undef HAVE_ALLOCA\n-\n-/* Define if you have <alloca.h> and it should be used (not on Ultrix).  */\n-#undef HAVE_ALLOCA_H\n-\n /* Define if you don't have vprintf but do have _doprnt.  */\n #undef HAVE_DOPRNT\n \n@@ -56,15 +43,6 @@\n /* Define to `unsigned' if <sys/types.h> doesn't define.  */\n #undef size_t\n \n-/* If using the C implementation of alloca, define if you know the\n-   direction of stack growth for your system; otherwise it will be\n-   automatically deduced at run-time.\n- STACK_DIRECTION > 0 => grows toward higher addresses\n- STACK_DIRECTION < 0 => grows toward lower addresses\n- STACK_DIRECTION = 0 => direction of growth unknown\n- */\n-#undef STACK_DIRECTION\n-\n /* Define if you have the ANSI C header files.  */\n #undef STDC_HEADERS\n "}, {"sha": "1531a8e26822aba48fd34788cf1bc0a71fe7ae98", "filename": "gcc/config/alpha/xm-alpha.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Falpha%2Fxm-alpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-alpha.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -27,19 +27,6 @@ Boston, MA 02111-1307, USA.  */\n #define\tHOST_BITS_PER_LONG\t64\n #define HOST_BITS_PER_LONGLONG  64\n \n-/* If compiled with GNU C, use the builtin alloca.  */\n-#ifndef alloca\n-#if defined(__GNUC__) && !defined(USE_C_ALLOCA)\n-#define alloca __builtin_alloca\n-#else\n-#if !defined(_WIN32) && !defined(USE_C_ALLOCA) && !defined(OPEN_VMS) && !defined(__INTERIX)\n-#include <alloca.h>\n-#else\n-extern void *alloca ();\n-#endif\n-#endif\n-#endif\n-\n /* The host compiler has problems with enum bitfields since it makes\n    them signed so we can't fit all our codes in.  */\n "}, {"sha": "9974e66c9e008d2126b585771680c62272404bca", "filename": "gcc/config/alpha/xm-vms.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Falpha%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fxm-vms.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -69,8 +69,6 @@ Boston, MA 02111-1307, USA.  */\n #define HAVE_STRERROR\n #define HAVE_ATOLL\n \n-#define USE_C_ALLOCA\t\t/* Using alloca.c */\n-\n #define HAVE_FCNTL_H 1\n #define HAVE_STDLIB_H 1\n #define HAVE_UNISTD_H 1\n@@ -81,11 +79,5 @@ Boston, MA 02111-1307, USA.  */\n #define STDC_HEADERS 1\n #define HAVE_STRINGIZE 1\n \n-#if __STDC__\n-extern void *alloca (size_t);\n-#else\n-extern char *alloca (unsigned int);\n-#endif\n-\n #define OBJECT_SUFFIX \".obj\"\n #define EXECUTABLE_SUFFIX \".exe\""}, {"sha": "a98d9c3fc699e6301729a619238d0cd903016391", "filename": "gcc/config/arc/xm-arc.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Farc%2Fxm-arc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Farc%2Fxm-arc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Fxm-arc.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -28,8 +28,3 @@ Boston, MA 02111-1307, USA.  */\n /* Doubles are stored in memory with the high order word first.  This\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* If compiled with Sun CC, the use of alloca requires this #include.  */\n-#ifndef __GNUC__\n-#include \"alloca.h\"\n-#endif"}, {"sha": "ff16b71b69288ec4f19dff45c44db191313585a6", "filename": "gcc/config/arm/xm-arm.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Farm%2Fxm-arm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Farm%2Fxm-arm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fxm-arm.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -36,11 +36,6 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_FLOAT_WORDS_BIG_ENDIAN 1\n \n-/* If not compiled with GNU C, use C alloca.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif\n-\n /* If we have defined POSIX, but are compiling in the BSD environment, then\n    we need to define getcwd in terms of getwd.  */\n #if defined (POSIX) && defined (_BSD_C)"}, {"sha": "155161f94aac667524ba1517381c83be9a9d91d6", "filename": "gcc/config/clipper/x-clix", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fclipper%2Fx-clix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fclipper%2Fx-clix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fx-clix?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1 +0,0 @@\n-ALLOCA = alloca.o"}, {"sha": "b4ba49fd8f80ed836bf554719148c6e9de075864", "filename": "gcc/config/d30v/xm-d30v.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fxm-d30v.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -34,11 +34,3 @@\n \n /* A C expression for the number of bits in `long' on the host machine.  */\n #define HOST_BITS_PER_LONG 32\n-\n-/* Define this macro to indicate that the compiler is running with the `alloca'\n-   implemented in C.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#else\n-#define alloca __builtin_alloca\n-#endif"}, {"sha": "c02c8a9b2c07fa48b599d7f3af73adccc6b8601a", "filename": "gcc/config/dsp16xx/xm-dsp16xx.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fxm-dsp16xx.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -25,10 +25,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 16\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* If compiled with GNU C, use the built-in alloca */\n-#ifdef __GNUC__\n-#define alloca __builtin_alloca\n-#else\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "10a1269e5c9e880ae13da6896180ab7a5606f774", "filename": "gcc/config/h8300/xm-h8300.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fxm-h8300.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -24,10 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 16\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* If compiled with GNU C, use the built-in alloca */\n-#ifdef __GNUC__\n-#define alloca __builtin_alloca\n-#else\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "c947cc9d805f0e1cc1d6c65534111893dade42bf", "filename": "gcc/config/i370/x-oe", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi370%2Fx-oe", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi370%2Fx-oe", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fx-oe?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -2,10 +2,6 @@\n # Host is an i370 running OpenEdition\n #\n \n-# Use GCC alloca\n-\n-ALLOCA = alloca.o\n-\n # Don't bother fixing up header files, they're wierd\n \n STMP_FIXPROTO ="}, {"sha": "7a8170168ea2bf1c89bfa6c0795bd7c7638f4359", "filename": "gcc/config/i370/xm-linux.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi370%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fxm-linux.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -31,13 +31,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN    \n \n-/* If not compiled with GNU C, use the C alloca and use only int bitfields.  */\n+/* If not compiled with GNU C, use only int bitfields.  */\n #ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#if __STDC__\n-extern void *alloca ();\n-#else\n-extern char *alloca ();\n-#endif\n #define ONLY_INT_FIELDS\n #endif"}, {"sha": "8e867fc500761b8aba0d8561087da5385cc8b17b", "filename": "gcc/config/i386/x-aix", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-aix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-aix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-aix?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,6 +1,3 @@\n-# There is an alloca in -lbsd, but it is limited to 32K\n-ALLOCA = alloca.o\n-\n # If you are running out of memory while compiling gcc, with the standard\n # /bin/cc uncomment MALLOCLIB line. That version of malloc is slower but\n # has less overhead than the one in libc."}, {"sha": "e4fd4432d04758af4ccda93164be01fc619c7117", "filename": "gcc/config/i386/x-beos", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-beos?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,12 +1,5 @@\n # configuration for BeOS\n INSTALL=install -c\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-# Use it regardless of whether we are compiling with gcc or not.\n-USE_ALLOCA= `echo \"${ALLOCA}\"`\n-USE_HOST_ALLOCA= `echo ${HOST_PREFIX}${HOST_ALLOCA}`\n-SUBDIR_USE_ALLOCA = `if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi`\n-\n # Don't run fixproto\n STMP_FIXPROTO ="}, {"sha": "a18786ab36f97bbc8db7f131c3f7d511fd8614f8", "filename": "gcc/config/i386/x-ncr3000", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-ncr3000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-ncr3000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-ncr3000?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -17,13 +17,6 @@ CCLIBFLAGS=\n \n # The rest is just x-i386v4.\n \n-# Some versions of SVR4 have an alloca in /usr/ucblib/libucb.a, and if we are\n-# careful to link that in after libc we can use it, but since newer versions of\n-# SVR4 are dropping libucb, it is better to just use the portable C version for\n-# bootstrapping.  Do this by defining ALLOCA.\n-\n-ALLOCA = alloca.o\n-\n # We used to build all stages *without* shared libraries because that may make\n # debugging the compiler easier (until there is a GDB which supports\n # both Dwarf *and* svr4 shared libraries)."}, {"sha": "c9b78c2dfa7bdc9177b07f4a753e07ec70cb26ef", "filename": "gcc/config/i386/x-sco5", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-sco5", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fx-sco5", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx-sco5?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -3,8 +3,6 @@ RANLIB_TEST = false\n CC = cc\n OLDCC = cc\n CCLIBFLAGS =\n-# We avoid the ALLOCA in -lPW becuase it gives us an evil index()\n-ALLOCA = alloca.o\n \n # See all the declarations.\n FIXPROTO_DEFINES = -D_XOPEN_SOURCE -D_POSIX_C_SOURCE=2"}, {"sha": "f62dd532f919689109353224be4a3ad549047fae", "filename": "gcc/config/i386/xm-beos.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-beos.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -47,3 +47,10 @@ Boston, MA 02111-1307, USA.  */\n #define HAVE_PUTENV\n #endif\n #define HAVE_RENAME\n+\n+/* This is a temporary hack until the wimpy default 64k stack\n+   limit in BeOS is either increased or made user settable somehow.\n+   This probably won't happen until after the DR9 release.  */\n+#undef USE_C_ALLOCA\n+#define USE_C_ALLOCA 1\n+"}, {"sha": "874b1480ae374b95111b5b8c6d7d290a9eb7e593", "filename": "gcc/config/i386/xm-dgux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fxm-dgux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi386%2Fxm-dgux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-dgux.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -4,8 +4,3 @@\n \n #include \"i386/xm-i386.h\"\n #include \"xm-svr4.h\"\n-\n-/* If not compiled with GNU C, use the portable alloca.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "1365064a5a64caa884878d63e49c8813ef2cbc34", "filename": "gcc/config/i386/xm-sysv4.h", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi386%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi386%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxm-sysv4.h?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,5 +0,0 @@\n-/* Configuration for GCC for Intel i386 running System V Release 4.  */\n-\n-#ifdef __HIGHC__\n-#include <alloca.h>\t\t/* for MetaWare High-C on NCR System 3000 */\n-#endif"}, {"sha": "cf05f8f43bd538bb1b96d051dcff067a614eaa02", "filename": "gcc/config/i860/x-fx2800", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi860%2Fx-fx2800", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi860%2Fx-fx2800", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fx-fx2800?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,7 +0,0 @@\n-\n-# The Alliant FX2800 is supposed to conform to the SysV R4 i860 ABI,\n-# but apparently the native compiler generates non ABI-compliant\n-# function prologues and epilogues, so we need the alloca from emacs.\n-#  -- hyc@hanauma.jpl.nasa.gov\n-\n-ALLOCA=alloca.o"}, {"sha": "3375d4218495b2c64115a4893dfba157d69fbbc5", "filename": "gcc/config/i860/x-sysv3", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi860%2Fx-sysv3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fi860%2Fx-sysv3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fx-sysv3?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1 +0,0 @@\n-ALLOCA=alloca.o"}, {"sha": "37b79ddaa26f7fb3ea75a13272a0d833348b84a6", "filename": "gcc/config/i860/x-sysv4", "status": "modified", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi860%2Fx-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi860%2Fx-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fx-sysv4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,36 +1,3 @@\n-# The svr4 reference port for the i860 contains an alloca.o routine\n-# in /usr/ucblib/libucb.a, but we can't just try to get that by\n-# setting CLIB to /usr/ucblib/libucb.a because (unfortunately)\n-# there are a lot of other routines in libucb.a which are supposed\n-# to be the Berkeley versions of library routines normally found in\n-# libc.a and many of these Berkeley versions are badly broken.  Thus,\n-# if we try to link programs with libucb.a before libc.a, those\n-# programs tend to crash.\n-\n-# Also, the alloca() routine supplied in early version of svr4 for\n-# the i860 is non-ABI compliant.  It doesn't keep the stack aligned\n-# to a 16-byte boundary as the ABI requires.\n-\n-# More importantly however, even a fully ABI compliant alloca() routine\n-# would fail to work correctly with some versions of the native svr4 C\n-# compiler currently being distributed for the i860 (as of 1/29/92).\n-# The problem is that the native C compiler generates non-ABI-compliant\n-# function epilogues which cut back the stack (upon function exit) in\n-# an incorrect manner.  Specifically, they cut back the stack by adding\n-# the nominal *static* frame size (determined statically at compile-time)\n-# to the stack pointer rather than setting the stack pointer based upon\n-# the current value of the frame pointer (as called for in the i860 ABI).\n-# This can cause serious trouble in cases where you repeatedly call a\n-# routine which itself calls alloca().  In such cases, the stack will\n-# grow continuously until you finally run out of swap space or exceed\n-# the system's process size limit.  To avoid this problem (which can\n-# arise when a stage1 gcc is being used to build a stage2 gcc) you\n-# *must* link in the C language version of alloca() which is supplied\n-# with gcc to your stage1 version of gcc.  The following definition\n-# forces that to happen.\n-\n-ALLOCA=alloca.o\n-\n # We build all stages *without* shared libraries because that may make\n # debugging the compiler easier (until there is a GDB which supports\n # both Dwarf *and* svr4 shared libraries)."}, {"sha": "3617cae11b6c2da0af8ed3b257152dc709be8864", "filename": "gcc/config/i960/xm-i960.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fi960%2Fxm-i960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fxm-i960.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -24,8 +24,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n #define HOST_BITS_PER_LONGLONG 64\n-\n-/* If not compiled with GNU C, use the C alloca */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "c99240ad71dedd744d78c6d1fcaf6cee125e1887", "filename": "gcc/config/m32r/xm-m32r.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fxm-m32r.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -28,8 +28,3 @@ Boston, MA 02111-1307, USA.  */\n /* Doubles are stored in memory with the high order word first.  This\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* If compiled with Sun CC, the use of alloca requires this #include.  */\n-#ifndef __GNUC__\n-#include \"alloca.h\"\n-#endif"}, {"sha": "a6f57c2880da9eee56e1b02a8c6e45dd0616b8b5", "filename": "gcc/config/m68k/x-crds", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-crds", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-crds", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-crds?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,7 +1 @@\n CC = cc -Wx,-X23\n-\n-# The following line might be necessary as well or instead of the above.\n-# If you find out that it is necessary,\n-# or if you find out that it is not necessary,\n-# please inform bug-gcc@prep.ai.mit.edu.\n-# ALLOCA = alloca.o"}, {"sha": "36c5d96b368bf2a8e0462cc306d0e5465c1744a6", "filename": "gcc/config/m68k/x-dpx2", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-dpx2", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-dpx2", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-dpx2?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,8 +1,3 @@\n-# need this when using cc\n-ALLOCA = alloca.o\n-# avoid lossage assembling alloca.\n-ALLOCA_FLAGS=-S\n-ALLOCA_FINISH = $(AS) -o alloca.o alloca.s\n # be sure not to confuse ./as with /bin/as\n AS=`if [ x$(OLDCC) = x$(CC) ] ; then echo /bin/as; else echo $(GAS); fi`\n GAS = gas"}, {"sha": "e24fdc4845d4ea1cba36791d2b6d2f524a9fa5ed", "filename": "gcc/config/m68k/x-hp320", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-hp320", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-hp320", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-hp320?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,15 +1,12 @@\n # Make assignments for compilation on HPUX with their C compiler.\n CC=cc -Wc,-Nw2000 -Wc,-Ns2000 -Wc,-Ne700 -Wc,-Np300\n OLDCC=cc -Wc,-Nw2000 -Wc,-Ns2000 -Wc,-Ne700 -Wc,-Np300\n-ALLOCA=alloca.o\n \n # For CCLIBFLAGS you might want to specify the switch that\n # forces only 68000 instructions to be used.\n \n # Version 5 of HPUX had a compiler bug that made it crash with -g.\n # You must set CFLAGS to empty on version 5.\n \n-# You must get alloca.c from GNU Emacs.\n-\n # So putenv and other functions get seen by fixproto.\n FIXPROTO_DEFINES = -D_HPUX_SOURCE"}, {"sha": "9b31a3c88df314519f7651fdf0b4156ed2c35c70", "filename": "gcc/config/m68k/x-hp320g", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-hp320g", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-hp320g", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-hp320g?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,7 +1,6 @@\n # Make assignments for compilation on HPUX with their C compiler.\n CC=cc -Wc,-Nw2000 -Wc,-Ns2000 -Wc,-Ne700 -Wc,-Np300\n OLDCC=cc -Wc,-Nw2000 -Wc,-Ns2000 -Wc,-Ne700 -Wc,-Np300\n-ALLOCA=alloca.o\n \n # For CCLIBFLAGS you might want to specify the switch that\n # forces only 68000 instructions to be used."}, {"sha": "d13818f96b0a861099508082f8df8a943ddcf4d3", "filename": "gcc/config/m68k/x-mot3300", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-mot3300", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-mot3300", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-mot3300?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,5 +1,3 @@\n-ALLOCA=alloca.o\n-\n # This disables the long/short jump optimization.\n # I use sysV68 R3V7.1 RM04 (phdm@info.ucl.ac.be)\n # Since ss-950318, with jump optimization enabled, \"as\" issues a warning"}, {"sha": "90852be5e44b14783185ad13e623a20e8562e280", "filename": "gcc/config/m68k/x-mot3300-gas", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-mot3300-gas", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fx-mot3300-gas", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fx-mot3300-gas?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,5 +1,3 @@\n-ALLOCA=alloca.o\n-\n # This disables the long/short jump optimization.\n # I use sysV68 R3V7.1 RM04 (phdm@info.ucl.ac.be)\n # Since ss-950318, with jump optimization enabled, \"as\" issues a warning"}, {"sha": "44e88a004d9d06ae1cdf75035b7d695e0902bbb9", "filename": "gcc/config/m68k/xm-amix.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-amix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-amix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-amix.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -20,7 +20,3 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"m68k/xm-m68kv.h\"\t/* Use the System V flavor of m68k host */\n-\n-#if defined (__GNUC__) && __GNUC__ == 1\n-#define alloca __builtin_alloca\n-#endif"}, {"sha": "962a6548ccff2e41bd7415c7a2665336edd90e70", "filename": "gcc/config/m68k/xm-hp320.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-hp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-hp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-hp320.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -2,9 +2,3 @@\n #define USG\n \n #include \"m68k/xm-m68k.h\"\n-\n-/* If compiling with HPUX compiler, we are probably using alloca.c,\n-   so help it work right.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "b3d8887509cc22ae96670a61eb7b7bb2f3ee758a", "filename": "gcc/config/m68k/xm-m68kv.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-m68kv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-m68kv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-m68kv.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -3,7 +3,3 @@\n #include \"m68k/xm-m68k.h\"\n \n #define USG\n-\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "aed9c6e6f19e34628c89972ff512940946748fac", "filename": "gcc/config/m68k/xm-mot3300.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-mot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm68k%2Fxm-mot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fxm-mot3300.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -21,12 +21,3 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #define USG 1\n-\n-/* do not use alloca from -lPW with cc, because function epilogues use %sp */\n-#ifndef __GNUC__\n-#ifdef __STDC__\n-extern void *alloca ();\n-#else\n-extern char *alloca ();\n-#endif\n-#endif"}, {"sha": "c63d17eb41f0973e4528b0a18dcffe21b538b76b", "filename": "gcc/config/m88k/x-dolph", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-dolph", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-dolph", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fx-dolph?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -6,12 +6,6 @@ EXTRA_PARTS=crtbegin.o crtend.o gcc.ld\n gcc.ld: $(srcdir)/config/m88k/dolphin.ld\n \trm -f gcc.ld; cp $(srcdir)/config/m88k/dolphin.ld gcc.ld\n \n-# Green Hills C on Dolphin UNIX System V/88 Release 3.2  Version 3.6/5.86 does\n-# not provide alloca. It does not harm to have it defined on version 3.8.alfa\n-# even though it's not needed there.\n-\n-ALLOCA=alloca.o\n-\n # Under DolphinOS 3.8.alfa, /bin/cc defines __GNUC__, but not __m88k__, \n # causing gdstarg.h to fail. Defining __m88k__ does probably not hurt on\n # DolphinOS 3.6."}, {"sha": "3ee9067ac00212d0011dbe94dfcf8e52188a15e0", "filename": "gcc/config/m88k/x-sysv3", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fm88k%2Fx-sysv3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fm88k%2Fx-sysv3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fx-sysv3?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,7 +0,0 @@\n-# this is m88k/x-sysv3\n-\n-# native compiler does not provide alloca\n-\n-ALLOCA = alloca.o\n-\n-# end m88k/x-sysv3"}, {"sha": "e2b79d0e633639b922e827569ada4914aa6ea455", "filename": "gcc/config/m88k/x-sysv4", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fx-sysv4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -4,7 +4,3 @@\n # results in a problem when <wait.h> includes <siginfo.h>.\n \n X_CFLAGS = -DNO_BUGS -D__STDC__=0\n-\n-# The CI5 compiler does not provide alloca.\n-\n-ALLOCA = alloca.o"}, {"sha": "cf19e821dbbd4b35479ad4c017437cf70ef8ff50", "filename": "gcc/config/m88k/x-tekXD88", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-tekXD88", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fx-tekXD88", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fx-tekXD88?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -4,9 +4,6 @@ EXTRA_PARTS=crtbegin.o crtend.o gcc.ld\n gcc.ld: $(srcdir)/config/m88k/tekXD88.ld\n \trm -f gcc.ld; cp $(srcdir)/config/m88k/tekXD88.ld ./gcc.ld\n \n-# Green Hills C on the Tektronix XD88 does not provide alloca.\n-ALLOCA=alloca.o\n-\n # rc is cleaner, but the ar program sometimes crashes.\n # This is a workaround.\n AR_FLAGS=qc"}, {"sha": "38140f45041e60012be13b13cf3faab7dbffb2d4", "filename": "gcc/config/m88k/xm-m88k.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fxm-m88k.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -37,11 +37,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n-/* If not compiled with GNU C, use the C alloca */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif\n-\n /* For DG/UX, the best size is different.  */\n #ifdef __DGUX__\n #define OBSTACK_CHUNK_SIZE (8192-16)"}, {"sha": "bdbe862e2ec995f9ec471c1e70791906f919d3dd", "filename": "gcc/config/mcore/xm-mcore.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fxm-mcore.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -22,8 +22,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT   32\n #define HOST_BITS_PER_LONG  32\n-\n-/* If compiled with GNU C, use the built-in alloca.  */\n-#ifdef __GNUC__\n-#define alloca __builtin_alloca\n-#endif"}, {"sha": "99c7fc94b920264ae3592b0fde9be544a895b21b", "filename": "gcc/config/mips/x-iris", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-iris", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-iris", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-iris?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -23,9 +23,6 @@\n # -lmalloc is supposed to be faster than the normal malloc\n CLIB\t\t= -lmld -lmalloc\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA\t\t= alloca.o\n-\n # Find all of the declarations from the header files\n FIXPROTO_DEFINES= -D__EXTENSIONS__ -D_SGI_SOURCE -D_LANGUAGE_C_PLUS_PLUS\n "}, {"sha": "f8948e8c81fe80c6f07764e1f8855b027accb695", "filename": "gcc/config/mips/x-iris3", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-iris3", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-iris3", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-iris3?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -25,6 +25,3 @@\n # -lmld is so we can link collect2 running native.\n # -lmalloc is supposed to be faster than the normal malloc\n CLIB\t\t= -lmld -lmalloc\n-\n-# Show we need to use the C version of ALLOCA\n-ALLOCA\t\t= alloca.o"}, {"sha": "e7fe4ee43b739a8e423e34684f44f39b016766d3", "filename": "gcc/config/mips/x-sni-svr4", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-sni-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-sni-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-sni-svr4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -9,8 +9,3 @@\n CC\t\t= $(OLDCC)\n OPT\t\t=\n OLDCC\t\t= cc -Olimit 3000 $(OPT)\n-\n-# Show we need to use the C version of ALLOCA\n-# The SVR3 configurations have it, but the SVR4 configurations don't.\n-# For now, just try using it for all SVR* configurations.\n-ALLOCA\t\t= alloca.o"}, {"sha": "09d467a256efb64ca3ecd648dbea85e1f1009566", "filename": "gcc/config/mips/x-sysv", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-sysv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fx-sysv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fx-sysv?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -19,8 +19,3 @@ OLDCC\t\t= cc -Wf,-XNg1500,-XNh2000 -Olimit 3000 $(OPT)\n # This enables collect2 to link.\n # Some systems use version 2.11 of the compilers.  Some use version 3.11.\n CLIB= -L/usr/lib/cmplrs/cc2.11 -L/usr/lib/cmplrs/cc3.11 -lmld\n-\n-# Show we need to use the C version of ALLOCA\n-# The SVR3 configurations have it, but the SVR4 configurations don't.\n-# For now, just try using it for all SVR* configurations.\n-ALLOCA\t\t= alloca.o"}, {"sha": "576087bca8d308e94226b3f515ae77ddcfcd7b75", "filename": "gcc/config/mips/xm-iris6.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-iris6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-iris6.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,14 +1,3 @@\n-#define MIPS_OVERRIDE_ALLOCA\n-#ifndef __GNUC__\n-#include <alloca.h>\n-#else\n-# ifdef __SIZE_TYPE__\n-extern void *alloca (__SIZE_TYPE__);\n-# else\n-extern void *alloca ();\n-# endif /* __SIZE_TYPE__ */\n-#endif\n-\n #include \"mips/xm-mips.h\"\n \n #define USG"}, {"sha": "eabe3a5940bc13ed1bb490ebce5368da2eef61d2", "filename": "gcc/config/mips/xm-mips.h", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-mips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-mips.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -42,16 +42,3 @@ Boston, MA 02111-1307, USA.  */\n    for compiling GNU C++.  */\n #define ONLY_INT_FIELDS 1\n #endif\n-\n-#ifndef MIPS_OVERRIDE_ALLOCA\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-\n-#ifdef __STDC__\n-extern void * alloca ();\n-#else\n-extern char * alloca ();\n-#endif\n-\n-#endif\n-#endif /* not MIPS_OVERRIDE_ALLOCA */"}, {"sha": "ee7fe04e88032396c39785a184638ba728c664af", "filename": "gcc/config/mips/xm-nws3250v4.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-nws3250v4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fmips%2Fxm-nws3250v4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fxm-nws3250v4.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,9 +1,3 @@\n #define USG\n \n #include \"xm-mips.h\"\n-\n-/* If compiling with mips compiler, we are probably using alloca.c,\n-   so help it work right.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "11c28466e76cc09d407d599e7cb5df6a2c6029e3", "filename": "gcc/config/pa/x-pa-hpux", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fx-pa-hpux", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fx-pa-hpux", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fx-pa-hpux?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,4 +1,2 @@\n-ALLOCA=alloca.o\n-\n # So putenv and other functions get seen by fixproto.\n FIXPROTO_DEFINES = -D_HPUX_SOURCE -D_HIUX_SOURCE"}, {"sha": "390e28cddcd7a6df69dbbe3028d906af35a0d1e9", "filename": "gcc/config/pa/x-pa-mpeix", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fx-pa-mpeix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fx-pa-mpeix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fx-pa-mpeix?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,4 +1,3 @@\n-ALLOCA=alloca.o\n X_CFLAGS=-I/usr/contrib/include -DSYSV -D_POSIX_SOURCE -D_SOCKET_SOURCE -D_MPEIX_SOURCE -DPOSIX -D_MPEXL_SOURCE\n CC=gcc\n AR=/bin/ar"}, {"sha": "231df9e031f2dcbbf71a2a5f1d95a2e23441c115", "filename": "gcc/config/pa/xm-pa.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -39,7 +39,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n-\n-/* Always claim to use C alloca; this prevents losing if building with\n-   gcc -fno-builtin ... */\n-#define USE_C_ALLOCA"}, {"sha": "34396971c3fb22e84484c16931532bd959fcfea3", "filename": "gcc/config/pa/xm-pa64hpux.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pa64hpux.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -18,7 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-\n /* HP-UX is a flavor of System V */\n #define USG\n \n@@ -35,7 +34,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n-\n-/* Always claim to use C alloca; this prevents losing if building with\n-   gcc -fno-builtin ...  */\n-#define USE_C_ALLOCA"}, {"sha": "9d0d455d8730ce0086fd7a5d8884901010d6f63f", "filename": "gcc/config/pa/xm-pahpux.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-pahpux.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -35,7 +35,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n-\n-/* Always claim to use C alloca; this prevents losing if building with\n-   gcc -fno-builtin ... \"  */\n-#define USE_C_ALLOCA"}, {"sha": "534d0378c436760284ae0e1f736dff76cda3d550", "filename": "gcc/config/pa/xm-papro.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fpa%2Fxm-papro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fxm-papro.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -32,7 +32,3 @@ Boston, MA 02111-1307, USA.  */\n \n /* HP's compiler has problems with enum bitfields.  */\n #define ONLY_INT_FIELDS\n-\n-/* Always claim to use C alloca; this prevents losing if building with\n-   gcc -fno-builtin ... */\n-#define USE_C_ALLOCA"}, {"sha": "c12fd3dd697ef8fe766600d49b479bfcc53adbd1", "filename": "gcc/config/romp/xm-romp.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fromp%2Fxm-romp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fxm-romp.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -27,10 +27,9 @@ Boston, MA 02111-1307, USA.  */\n \n #define HOST_WORDS_BIG_ENDIAN\n \n-/* If compiled with hc, use the built-in alloca and memcpy.\n+/* If compiled with hc, use the built-in memcpy.\n    These definitions assume hc version 2.  */\n #ifdef __HIGHC__\n-#define\talloca _Alloca\n #define bcopy(s,d,l) memcpy(d,s,l)\n #define FUNCTION_CONVERSION_BUG\n #endif"}, {"sha": "311f76724aba512bc0ace28919d545266307e26d", "filename": "gcc/config/rs6000/x-aix31", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-aix31", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-aix31", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-aix31?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,7 +1,3 @@\n-# configuration for IBM rs6000 running aix\n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-\n # For some reason, we need -lm for cc1.\n # We need -lld for collect2 (actually this only matters\n # for a native compiler, but this is as good a place as any"}, {"sha": "d573d4de43a1c71115320c38c15ed31840a3491e", "filename": "gcc/config/rs6000/x-aix41", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-aix41", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-aix41", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-aix41?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,8 +1,5 @@\n # configuration for IBM RS/6000 running AIX 4.1+\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-\n # We need -lld for collect2 (actually this only matters\n # for a native compiler, but this is as good a place as any\n # to define the symbol)."}, {"sha": "16fc937e3e81771aee832a24d051675f186f2812", "filename": "gcc/config/rs6000/x-beos", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-beos?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,9 +1,2 @@\n # configuration for BeOS\n INSTALL=install -c\n-\n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-# Use it regardless of whether we are compiling with gcc or not.\n-USE_ALLOCA= `echo \"${ALLOCA}\"`\n-USE_HOST_ALLOCA= `echo ${HOST_PREFIX}${HOST_ALLOCA}`\n-SUBDIR_USE_ALLOCA = `if [ x$(ALLOCA) != x ]; then echo ../$(ALLOCA); else true; fi`"}, {"sha": "341e9085ef5d2ee3e78a453ee38a008912969a1f", "filename": "gcc/config/rs6000/x-lynx", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-lynx", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-lynx", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-lynx?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -5,9 +5,6 @@ OLDCC\t= /bin/gcc\n # /bin/sh is too buggy, so use /bin/bash instead.\n SHELL = /bin/bash\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-\n # configuration for IBM rs6000 running lynx\n \n # For some reason, we need -lm for cc1."}, {"sha": "dcff838bfa045b1a025bd741be3ddda9974aa88d", "filename": "gcc/config/rs6000/x-mach", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-mach", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-mach", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-mach?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,7 +1,4 @@\n # configuration for IBM rs6000 running MACH\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-\n # For some reason, we need -lm for cc1.\n CLIB=-lm"}, {"sha": "6e553cc1e1c91c7d22c0a716a12002548f0e9f6d", "filename": "gcc/config/rs6000/x-rs6000", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-rs6000?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,8 +1,5 @@\n # configuration for IBM rs6000 running aix\n \n-# Show we need to use the C version of ALLOCA\n-ALLOCA=alloca.o\n-\n # We need -lld for collect2 (actually this only matters\n # for a native compiler, but this is as good a place as any\n # to define the symbol)."}, {"sha": "71eaec6509619216c5f7a7da388179fa9fb08032", "filename": "gcc/config/rs6000/x-sysv4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fx-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-sysv4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,2 +1 @@\n X_CFLAGS=-DSVR4\n-ALLOCA=alloca.o"}, {"sha": "caebbcb9b61b55336a1bf361748e1a982e535189", "filename": "gcc/config/rs6000/xm-beos.h", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-beos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-beos.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -31,10 +31,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define\tHOST_WORDS_BIG_ENDIAN\n \n-/* Use the C alloca and use only int bitfields.  */\n-\n-#define USE_C_ALLOCA\n-extern void *alloca ();\n+/* Use only int bitfields.  */\n #define\tONLY_INT_FIELDS\n \n /* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n@@ -65,3 +62,9 @@ extern void *alloca ();\n /* SYSTEM_INCLUDE_DIR is the location for system specific, non-POSIX headers. */\n \n #define SYSTEM_INCLUDE_DIR\t\"/boot/develop/headers/be\"\n+\n+/* This is a temporary hack until the wimpy default 64k stack\n+   limit in BeOS is either increased or made user settable somehow.\n+   This probably won't happen until after the DR9 release.  */\n+#undef USE_C_ALLOCA\n+#define USE_C_ALLOCA 1"}, {"sha": "a815a9d94458691c989665e59f41057f787be4c9", "filename": "gcc/config/rs6000/xm-rs6000.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-rs6000.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -28,14 +28,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define\tHOST_WORDS_BIG_ENDIAN\n \n-/* If not compiled with GNU C, use the C alloca and use only int bitfields.  */\n+/* If not compiled with GNU C, use only int bitfields.  */\n #ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#if __STDC__\n-extern void *alloca ();\n-#else\n-extern char *alloca ();\n-#endif\n #define\tONLY_INT_FIELDS\n #endif\n "}, {"sha": "25aecfe4e5b5786d17ceb8deba8f0d68cb4324ef", "filename": "gcc/config/rs6000/xm-sysv4.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxm-sysv4.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -34,14 +34,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"xm-linux.h\"\n #endif\n \n-/* if not compiled with GNU C, use the C alloca and use only int bitfields. */\n+/* if not compiled with GNU C, use only int bitfields. */\n #ifndef __GNUC__\n-#define\tUSE_C_ALLOCA\n-#ifdef __STDC__\n-extern void *alloca ();\n-#else\n-extern char *alloca ();\n-#endif\n #undef ONLY_INT_FIELDS\n #define ONLY_INT_FIELDS\n #endif"}, {"sha": "9c7bdfd491c56bd7ed1af966838e85c1a90c5103", "filename": "gcc/config/sh/xm-sh.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsh%2Fxm-sh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fxm-sh.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -23,8 +23,3 @@ Boston, MA 02111-1307, USA.  */\n #define HOST_BITS_PER_SHORT 16\n #define HOST_BITS_PER_INT 32\n #define HOST_BITS_PER_LONG 32\n-\n-/* If compiled with GNU C, use the built-in alloca.  */\n-#ifdef __GNUC__\n-#define alloca __builtin_alloca\n-#endif"}, {"sha": "71eaec6509619216c5f7a7da388179fa9fb08032", "filename": "gcc/config/sparc/x-sysv4", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fx-sysv4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fx-sysv4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fx-sysv4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,2 +1 @@\n X_CFLAGS=-DSVR4\n-ALLOCA=alloca.o"}, {"sha": "f348105a4b568cdd2ca85354424f1de1d4d1d2a5", "filename": "gcc/config/sparc/xm-linux.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-linux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-linux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-linux.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,5 +1,5 @@\n /* Configuration for GCC for SPARC running Linux-based GNU systems.\n-   Copyright (C) 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 2001 Free Software Foundation, Inc.\n    Contributed by Eddie C. Dost (ecd@skynet.be)\n \n This file is part of GNU CC.\n@@ -20,7 +20,6 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #ifndef inhibit_libc\n-#include <alloca.h>\n #include <stdlib.h>\n #include <string.h>\n #endif"}, {"sha": "3dc4b73085d2daecf3b9df7a916acf47079627c7", "filename": "gcc/config/sparc/xm-pbd.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-pbd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-pbd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-pbd.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -3,7 +3,3 @@\n #include \"sparc/xm-sparc.h\"\n \n #define USG\n-\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "5613b086b57207a51d981e76c1aadb71dde7b4bd", "filename": "gcc/config/sparc/xm-sol2.h", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fsparc%2Fxm-sol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fsparc%2Fxm-sol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sol2.h?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,4 +0,0 @@\n-/* If not compiled with GNU C, include the system's <alloca.h> header.  */\n-#ifndef __GNUC__\n-#include <alloca.h>\n-#endif"}, {"sha": "23cafdc32509072c072442c1800b6bb309cd4274", "filename": "gcc/config/sparc/xm-sparc.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fxm-sparc.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -29,8 +29,3 @@ Boston, MA 02111-1307, USA.  */\n /* Doubles are stored in memory with the high order word first.  This\n    matters when cross-compiling.  */\n #define HOST_WORDS_BIG_ENDIAN 1\n-\n-/* If compiled with Sun CC, the use of alloca requires this #include.  */\n-#ifndef __GNUC__\n-#include \"alloca.h\"\n-#endif"}, {"sha": "bdba6285dc1a46a148351a6a1b67ee83cb90c61c", "filename": "gcc/config/vax/xm-vms.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fvax%2Fxm-vms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fxm-vms.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -116,7 +116,6 @@ Boston, MA 02111-1307, USA.  */\n /* Customizations/kludges for building with DEC's VAX C compiler\n    rather than GCC.  */\n \n-#define USE_C_ALLOCA\t\t/* using alloca.c */\n #define QSORT_WORKAROUND\t/* do not use VAXCRTL's qsort */\n \n /* use ANSI/SYSV style byte manipulation routines instead of BSD ones */\n@@ -172,14 +171,5 @@ Boston, MA 02111-1307, USA.  */\n  #pragma message disable (undefescap)\n #endif\n \n-#if defined(USE_C_ALLOCA) && !defined(alloca)\n-/* Declare alloca() using similar logic to that in alloca.c.  */\n-#ifdef __STDC__\n-extern void *alloca(unsigned);\n-#else\n-extern char *alloca();\n-#endif\n-#endif\n-\n #define OBJECT_SUFFIX \".obj\"\n #define EXECUTABLE_SUFFIX \".exe\""}, {"sha": "3375d4218495b2c64115a4893dfba157d69fbbc5", "filename": "gcc/config/we32k/x-we32k", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fwe32k%2Fx-we32k", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fwe32k%2Fx-we32k", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fx-we32k?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1 +0,0 @@\n-ALLOCA=alloca.o"}, {"sha": "30606a3e4186eb8b1b1f9297631347705bc78be3", "filename": "gcc/config/x-interix", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fx-interix", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fx-interix", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-interix?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,11 +1,6 @@\n # These are host overrides\n # From config dir\n \n-# Interix doesn't yet have alloca; it's better to use the portable C version for\n-# bootstrapping.  Do this by defining ALLOCA.\n-\n-ALLOCA = alloca.o\n-\n # See all the declarations.\n FIXPROTO_DEFINES = -D_XOPEN_SOURCE\n "}, {"sha": "ce50fe976df4d1d6b09d21c4fcea3860466d4f05", "filename": "gcc/config/x-svr4", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fx-svr4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fx-svr4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fx-svr4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,9 +1,2 @@\n-# Some versions of SVR4 have an alloca in /usr/ucblib/libucb.a, and if we are\n-# careful to link that in after libc we can use it, but since newer versions of\n-# SVR4 are dropping libucb, it is better to just use the portable C version for\n-# bootstrapping.  Do this by defining ALLOCA.\n-\n-ALLOCA = alloca.o\n-\n # See all the declarations.\n FIXPROTO_DEFINES = -D_XOPEN_SOURCE"}, {"sha": "3dbdc37a1f0ab5fa268c685bd6de61fa29fed426", "filename": "gcc/config/xm-alloca.h", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fxm-alloca.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/gcc%2Fconfig%2Fxm-alloca.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-alloca.h?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,4 +0,0 @@\n-/* If not compiled with GNU C, use the portable alloca.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA\n-#endif"}, {"sha": "4ba9a294d656dc910961bb913d806ab382978466", "filename": "gcc/config/xm-interix.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fxm-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fxm-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-interix.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -31,11 +31,6 @@ Boston, MA 02111-1307, USA.  */\n #endif\n #endif\n \n-/* If not compiled with GNU C, use the portable alloca.  */\n-#ifndef __GNUC__\n-#define USE_C_ALLOCA 1\n-#endif\n-\n /* Our strategy for finding global constructors is a bit different, although\n    not a lot. */\n #define DO_GLOBAL_CTORS_BODY\t\t\t\t\t\t\\"}, {"sha": "27ddfc58d6d4fd64266f4df4370ff5f8abe49dd7", "filename": "gcc/config/xm-openbsd.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fxm-openbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfig%2Fxm-openbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxm-openbsd.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -27,8 +27,3 @@ Boston, MA 02111-1307, USA.  */\n    problems that may occur with gcc's interpretation.  */\n #undef POSIX\n #define POSIX\n-\n-/* Ensure we get gnu C's defaults.  */\n-#ifdef __GNUC__\n-#define alloca __builtin_alloca\n-#endif"}, {"sha": "8d5fc976c5afd9432f21cfd62b09de8f2d860324", "filename": "gcc/configure", "status": "modified", "additions": 69, "deletions": 304, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -4400,257 +4400,23 @@ EOF\n \n fi\n \n-# The Ultrix 4.2 mips builtin alloca declared by alloca.h only works\n-# for constant arguments.  Useless!\n-echo $ac_n \"checking for working alloca.h\"\"... $ac_c\" 1>&6\n-echo \"configure:4407: checking for working alloca.h\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_header_alloca_h'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 4412 \"configure\"\n-#include \"confdefs.h\"\n-#include <alloca.h>\n-int main() {\n-char *p = alloca(2 * sizeof(int));\n-; return 0; }\n-EOF\n-if { (eval echo configure:4419: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  ac_cv_header_alloca_h=yes\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  ac_cv_header_alloca_h=no\n-fi\n-rm -f conftest*\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_header_alloca_h\" 1>&6\n-if test $ac_cv_header_alloca_h = yes; then\n-  cat >> confdefs.h <<\\EOF\n-#define HAVE_ALLOCA_H 1\n-EOF\n-\n-fi\n-\n-echo $ac_n \"checking for alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:4440: checking for alloca\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_func_alloca_works'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 4445 \"configure\"\n-#include \"confdefs.h\"\n-\n-#ifdef __GNUC__\n-# define alloca __builtin_alloca\n-#else\n-# ifdef _MSC_VER\n-#  include <malloc.h>\n-#  define alloca _alloca\n-# else\n-#  if HAVE_ALLOCA_H\n-#   include <alloca.h>\n-#  else\n-#   ifdef _AIX\n- #pragma alloca\n-#   else\n-#    ifndef alloca /* predefined by HP cc +Olibcalls */\n-char *alloca ();\n-#    endif\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-int main() {\n-char *p = (char *) alloca(1);\n-; return 0; }\n-EOF\n-if { (eval echo configure:4473: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  ac_cv_func_alloca_works=yes\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  ac_cv_func_alloca_works=no\n-fi\n-rm -f conftest*\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_func_alloca_works\" 1>&6\n-if test $ac_cv_func_alloca_works = yes; then\n-  cat >> confdefs.h <<\\EOF\n-#define HAVE_ALLOCA 1\n-EOF\n-\n-fi\n-\n-if test $ac_cv_func_alloca_works = no; then\n-  # The SVR3 libPW and SVR4 libucb both contain incompatible functions\n-  # that cause trouble.  Some versions do not even contain alloca or\n-  # contain a buggy version.  If you still want to use their alloca,\n-  # use ar to extract alloca.o from them instead of compiling alloca.c.\n-  ALLOCA=alloca.${ac_objext}\n-  cat >> confdefs.h <<\\EOF\n-#define C_ALLOCA 1\n-EOF\n-\n-\n-echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n-echo \"configure:4505: checking whether alloca needs Cray hooks\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_os_cray'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 4510 \"configure\"\n-#include \"confdefs.h\"\n-#if defined(CRAY) && ! defined(CRAY2)\n-webecray\n-#else\n-wenotbecray\n-#endif\n-\n-EOF\n-if (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n-  egrep \"webecray\" >/dev/null 2>&1; then\n-  rm -rf conftest*\n-  ac_cv_os_cray=yes\n-else\n-  rm -rf conftest*\n-  ac_cv_os_cray=no\n-fi\n-rm -f conftest*\n-\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_os_cray\" 1>&6\n-if test $ac_cv_os_cray = yes; then\n-for ac_func in _getb67 GETB67 getb67; do\n-  echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4535: checking for $ac_func\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 4540 \"configure\"\n-#include \"confdefs.h\"\n-/* System header to define __stub macros and hopefully few prototypes,\n-    which can conflict with char $ac_func(); below.  */\n-#include <assert.h>\n-/* Override any gcc2 internal prototype to avoid an error.  */\n-/* We use char because int might match the return type of a gcc2\n-    builtin and then its argument prototype would still apply.  */\n-char $ac_func();\n-\n-int main() {\n-\n-/* The GNU C library defines this for functions which it implements\n-    to always fail with ENOSYS.  Some functions are actually named\n-    something starting with __ and the normal name is an alias.  */\n-#if defined (__stub_$ac_func) || defined (__stub___$ac_func)\n-choke me\n-#else\n-$ac_func();\n-#endif\n-\n-; return 0; }\n-EOF\n-if { (eval echo configure:4563: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  eval \"ac_cv_func_$ac_func=yes\"\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  eval \"ac_cv_func_$ac_func=no\"\n-fi\n-rm -f conftest*\n-fi\n-\n-if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n-  echo \"$ac_t\"\"yes\" 1>&6\n-  cat >> confdefs.h <<EOF\n-#define CRAY_STACKSEG_END $ac_func\n-EOF\n-\n-  break\n-else\n-  echo \"$ac_t\"\"no\" 1>&6\n-fi\n-\n-done\n-fi\n-\n-echo $ac_n \"checking stack direction for C alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:4590: checking stack direction for C alloca\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_c_stack_direction'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  if test \"$cross_compiling\" = yes; then\n-  ac_cv_c_stack_direction=0\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 4598 \"configure\"\n-#include \"confdefs.h\"\n-find_stack_direction ()\n-{\n-  static char *addr = 0;\n-  auto char dummy;\n-  if (addr == 0)\n-    {\n-      addr = &dummy;\n-      return find_stack_direction ();\n-    }\n-  else\n-    return (&dummy > addr) ? 1 : -1;\n-}\n-main ()\n-{\n-  exit (find_stack_direction() < 0);\n-}\n-EOF\n-if { (eval echo configure:4617: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n-then\n-  ac_cv_c_stack_direction=1\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -fr conftest*\n-  ac_cv_c_stack_direction=-1\n-fi\n-rm -fr conftest*\n-fi\n-\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_c_stack_direction\" 1>&6\n-cat >> confdefs.h <<EOF\n-#define STACK_DIRECTION $ac_cv_c_stack_direction\n-EOF\n-\n-fi\n-\n-                           \n+                        \n    for ac_hdr in argz.h limits.h locale.h nl_types.h malloc.h string.h \\\n unistd.h sys/param.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:4644: checking for $ac_hdr\" >&5\n+echo \"configure:4410: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4649 \"configure\"\n+#line 4415 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:4654: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:4420: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -4680,12 +4446,12 @@ done\n strdup __argz_count __argz_stringify __argz_next\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4684: checking for $ac_func\" >&5\n+echo \"configure:4450: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4689 \"configure\"\n+#line 4455 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -4708,7 +4474,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4712: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4478: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -4737,12 +4503,12 @@ done\n      for ac_func in stpcpy\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:4741: checking for $ac_func\" >&5\n+echo \"configure:4507: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4746 \"configure\"\n+#line 4512 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -4765,7 +4531,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:4769: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4535: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -4799,19 +4565,19 @@ EOF\n \n    if test $ac_cv_header_locale_h = yes; then\n     echo $ac_n \"checking for LC_MESSAGES\"\"... $ac_c\" 1>&6\n-echo \"configure:4803: checking for LC_MESSAGES\" >&5\n+echo \"configure:4569: checking for LC_MESSAGES\" >&5\n if eval \"test \\\"`echo '$''{'am_cv_val_LC_MESSAGES'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4808 \"configure\"\n+#line 4574 \"configure\"\n #include \"confdefs.h\"\n #include <locale.h>\n int main() {\n return LC_MESSAGES\n ; return 0; }\n EOF\n-if { (eval echo configure:4815: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4581: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   am_cv_val_LC_MESSAGES=yes\n else\n@@ -4832,7 +4598,7 @@ EOF\n     fi\n   fi\n    echo $ac_n \"checking whether NLS is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:4836: checking whether NLS is requested\" >&5\n+echo \"configure:4602: checking whether NLS is requested\" >&5\n         # Check whether --enable-nls or --disable-nls was given.\n if test \"${enable_nls+set}\" = set; then\n   enableval=\"$enable_nls\"\n@@ -4852,7 +4618,7 @@ fi\n EOF\n \n       echo $ac_n \"checking whether included gettext is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:4856: checking whether included gettext is requested\" >&5\n+echo \"configure:4622: checking whether included gettext is requested\" >&5\n       # Check whether --with-included-gettext or --without-included-gettext was given.\n if test \"${with_included_gettext+set}\" = set; then\n   withval=\"$with_included_gettext\"\n@@ -4871,17 +4637,17 @@ fi\n \n \tac_safe=`echo \"libintl.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for libintl.h\"\"... $ac_c\" 1>&6\n-echo \"configure:4875: checking for libintl.h\" >&5\n+echo \"configure:4641: checking for libintl.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4880 \"configure\"\n+#line 4646 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:4885: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:4651: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -4898,19 +4664,19 @@ fi\n if eval \"test \\\"`echo '$ac_cv_header_'$ac_safe`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   echo $ac_n \"checking for gettext in libc\"\"... $ac_c\" 1>&6\n-echo \"configure:4902: checking for gettext in libc\" >&5\n+echo \"configure:4668: checking for gettext in libc\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gettext_libc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 4907 \"configure\"\n+#line 4673 \"configure\"\n #include \"confdefs.h\"\n #include <libintl.h>\n int main() {\n return (int) gettext (\"\")\n ; return 0; }\n EOF\n-if { (eval echo configure:4914: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4680: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   gt_cv_func_gettext_libc=yes\n else\n@@ -4926,15 +4692,15 @@ echo \"$ac_t\"\"$gt_cv_func_gettext_libc\" 1>&6\n \n \t   if test \"$gt_cv_func_gettext_libc\" != \"yes\"; then\n \t     echo $ac_n \"checking for bindtextdomain in -lintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4930: checking for bindtextdomain in -lintl\" >&5\n+echo \"configure:4696: checking for bindtextdomain in -lintl\" >&5\n ac_lib_var=`echo intl'_'bindtextdomain | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-lintl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 4938 \"configure\"\n+#line 4704 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -4945,7 +4711,7 @@ int main() {\n bindtextdomain()\n ; return 0; }\n EOF\n-if { (eval echo configure:4949: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4715: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -4961,20 +4727,20 @@ fi\n if eval \"test \\\"`echo '$ac_cv_lib_'$ac_lib_var`\\\" = yes\"; then\n   echo \"$ac_t\"\"yes\" 1>&6\n   echo $ac_n \"checking for gettext in libintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4965: checking for gettext in libintl\" >&5\n+echo \"configure:4731: checking for gettext in libintl\" >&5\n if eval \"test \\\"`echo '$''{'gt_cv_func_gettext_libintl'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   echo $ac_n \"checking for gettext in -lintl\"\"... $ac_c\" 1>&6\n-echo \"configure:4970: checking for gettext in -lintl\" >&5\n+echo \"configure:4736: checking for gettext in -lintl\" >&5\n ac_lib_var=`echo intl'_'gettext | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-lintl  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 4978 \"configure\"\n+#line 4744 \"configure\"\n #include \"confdefs.h\"\n /* Override any gcc2 internal prototype to avoid an error.  */\n /* We use char because int might match the return type of a gcc2\n@@ -4985,7 +4751,7 @@ int main() {\n gettext()\n ; return 0; }\n EOF\n-if { (eval echo configure:4989: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4755: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -5028,7 +4794,7 @@ EOF\n \t      # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5032: checking for $ac_word\" >&5\n+echo \"configure:4798: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5062,12 +4828,12 @@ fi\n \t\tfor ac_func in dcgettext\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:5066: checking for $ac_func\" >&5\n+echo \"configure:4832: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5071 \"configure\"\n+#line 4837 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -5090,7 +4856,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5094: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4860: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -5117,7 +4883,7 @@ done\n \t\t# Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5121: checking for $ac_word\" >&5\n+echo \"configure:4887: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5153,7 +4919,7 @@ fi\n \t\t# Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5157: checking for $ac_word\" >&5\n+echo \"configure:4923: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5185,15 +4951,15 @@ else\n fi\n \n \t\tcat > conftest.$ac_ext <<EOF\n-#line 5189 \"configure\"\n+#line 4955 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n extern int _nl_msg_cat_cntr;\n \t\t\t       return _nl_msg_cat_cntr\n ; return 0; }\n EOF\n-if { (eval echo configure:5197: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:4963: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   CATOBJEXT=.gmo\n \t\t   DATADIRNAME=share\n@@ -5218,7 +4984,7 @@ fi\n \n         if test \"$CATOBJEXT\" = \"NONE\"; then\n \t  echo $ac_n \"checking whether catgets can be used\"\"... $ac_c\" 1>&6\n-echo \"configure:5222: checking whether catgets can be used\" >&5\n+echo \"configure:4988: checking whether catgets can be used\" >&5\n \t  # Check whether --with-catgets or --without-catgets was given.\n if test \"${with_catgets+set}\" = set; then\n   withval=\"$with_catgets\"\n@@ -5231,22 +4997,22 @@ fi\n \n \t  if test \"$nls_cv_use_catgets\" = \"yes\"; then\n \t    \t    echo $ac_n \"checking for main in -li\"\"... $ac_c\" 1>&6\n-echo \"configure:5235: checking for main in -li\" >&5\n+echo \"configure:5001: checking for main in -li\" >&5\n ac_lib_var=`echo i'_'main | sed 'y%./+-%__p_%'`\n if eval \"test \\\"`echo '$''{'ac_cv_lib_$ac_lib_var'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   ac_save_LIBS=\"$LIBS\"\n LIBS=\"-li  $LIBS\"\n cat > conftest.$ac_ext <<EOF\n-#line 5243 \"configure\"\n+#line 5009 \"configure\"\n #include \"confdefs.h\"\n \n int main() {\n main()\n ; return 0; }\n EOF\n-if { (eval echo configure:5250: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5016: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_lib_$ac_lib_var=yes\"\n else\n@@ -5274,12 +5040,12 @@ else\n fi\n \n \t    echo $ac_n \"checking for catgets\"\"... $ac_c\" 1>&6\n-echo \"configure:5278: checking for catgets\" >&5\n+echo \"configure:5044: checking for catgets\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_catgets'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5283 \"configure\"\n+#line 5049 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char catgets(); below.  */\n@@ -5302,7 +5068,7 @@ catgets();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:5306: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:5072: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_catgets=yes\"\n else\n@@ -5324,7 +5090,7 @@ EOF\n \t       # Extract the first word of \"gencat\", so it can be a program name with args.\n set dummy gencat; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5328: checking for $ac_word\" >&5\n+echo \"configure:5094: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GENCAT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5360,7 +5126,7 @@ fi\n \t\t # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5364: checking for $ac_word\" >&5\n+echo \"configure:5130: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5397,7 +5163,7 @@ fi\n \t\t   # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5401: checking for $ac_word\" >&5\n+echo \"configure:5167: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5435,7 +5201,7 @@ fi\n \t\t # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5439: checking for $ac_word\" >&5\n+echo \"configure:5205: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5493,7 +5259,7 @@ fi\n         # Extract the first word of \"msgfmt\", so it can be a program name with args.\n set dummy msgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5497: checking for $ac_word\" >&5\n+echo \"configure:5263: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_MSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5527,7 +5293,7 @@ fi\n         # Extract the first word of \"gmsgfmt\", so it can be a program name with args.\n set dummy gmsgfmt; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5531: checking for $ac_word\" >&5\n+echo \"configure:5297: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_GMSGFMT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5566,7 +5332,7 @@ fi\n         # Extract the first word of \"xgettext\", so it can be a program name with args.\n set dummy xgettext; ac_word=$2\n echo $ac_n \"checking for $ac_word\"\"... $ac_c\" 1>&6\n-echo \"configure:5570: checking for $ac_word\" >&5\n+echo \"configure:5336: checking for $ac_word\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_path_XGETTEXT'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -5665,7 +5431,7 @@ fi\n        LINGUAS=\n      else\n        echo $ac_n \"checking for catalogs to be installed\"\"... $ac_c\" 1>&6\n-echo \"configure:5669: checking for catalogs to be installed\" >&5\n+echo \"configure:5435: checking for catalogs to be installed\" >&5\n        if test \"x$LINGUAS\" = \"x\"; then\n \t LINGUAS=$ALL_LINGUAS\n        else\n@@ -5697,17 +5463,17 @@ echo \"configure:5669: checking for catalogs to be installed\" >&5\n    if test \"$CATOBJEXT\" = \".cat\"; then\n      ac_safe=`echo \"linux/version.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for linux/version.h\"\"... $ac_c\" 1>&6\n-echo \"configure:5701: checking for linux/version.h\" >&5\n+echo \"configure:5467: checking for linux/version.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 5706 \"configure\"\n+#line 5472 \"configure\"\n #include \"confdefs.h\"\n #include <linux/version.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:5711: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:5477: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -5782,7 +5548,7 @@ fi\n \n \n echo $ac_n \"checking whether windows registry support is requested\"\"... $ac_c\" 1>&6\n-echo \"configure:5786: checking whether windows registry support is requested\" >&5\n+echo \"configure:5552: checking whether windows registry support is requested\" >&5\n if test x$enable_win32_registry != xno; then\n   cat >> confdefs.h <<\\EOF\n #define ENABLE_WIN32_REGISTRY 1\n@@ -5811,7 +5577,7 @@ esac\n \n if test x$enable_win32_registry != xno; then\n   echo $ac_n \"checking registry key on windows hosts\"\"... $ac_c\" 1>&6\n-echo \"configure:5815: checking registry key on windows hosts\" >&5\n+echo \"configure:5581: checking registry key on windows hosts\" >&5\n   cat >> confdefs.h <<EOF\n #define WIN32_REGISTRY_KEY \"$gcc_cv_win32_registry_key\"\n EOF\n@@ -5991,7 +5757,7 @@ fi\n \n # Figure out what assembler we will be using.\n echo $ac_n \"checking what assembler to use\"\"... $ac_c\" 1>&6\n-echo \"configure:5995: checking what assembler to use\" >&5\n+echo \"configure:5761: checking what assembler to use\" >&5\n gcc_cv_as=\n gcc_cv_gas_major_version=\n gcc_cv_gas_minor_version=\n@@ -6076,7 +5842,7 @@ fi\n \n # Figure out what nm we will be using.\n echo $ac_n \"checking what nm to use\"\"... $ac_c\" 1>&6\n-echo \"configure:6080: checking what nm to use\" >&5\n+echo \"configure:5846: checking what nm to use\" >&5\n if test -x nm$host_exeext; then\n \tgcc_cv_nm=./nm$host_exeext\n elif test x$host = x$target; then\n@@ -6087,7 +5853,7 @@ echo \"$ac_t\"\"$gcc_cv_nm\" 1>&6\n \n # Figure out what assembler alignment features are present.\n echo $ac_n \"checking assembler alignment features\"\"... $ac_c\" 1>&6\n-echo \"configure:6091: checking assembler alignment features\" >&5\n+echo \"configure:5857: checking assembler alignment features\" >&5\n gcc_cv_as_alignment_features=none\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n \t# Gas version 2.6 and later support for .balign and .p2align.\n@@ -6135,7 +5901,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_alignment_features\" 1>&6\n \n echo $ac_n \"checking assembler subsection support\"\"... $ac_c\" 1>&6\n-echo \"configure:6139: checking assembler subsection support\" >&5\n+echo \"configure:5905: checking assembler subsection support\" >&5\n gcc_cv_as_subsections=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6175,7 +5941,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_subsections\" 1>&6\n \n echo $ac_n \"checking assembler weak support\"\"... $ac_c\" 1>&6\n-echo \"configure:6179: checking assembler weak support\" >&5\n+echo \"configure:5945: checking assembler weak support\" >&5\n gcc_cv_as_weak=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 2 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6198,7 +5964,7 @@ fi\n echo \"$ac_t\"\"$gcc_cv_as_weak\" 1>&6\n \n echo $ac_n \"checking assembler hidden support\"\"... $ac_c\" 1>&6\n-echo \"configure:6202: checking assembler hidden support\" >&5\n+echo \"configure:5968: checking assembler hidden support\" >&5\n gcc_cv_as_hidden=no\n if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n   if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 10 -o \"$gcc_cv_gas_major_version\" -gt 2 && grep 'obj_format = elf' ../gas/Makefile > /dev/null; then\n@@ -6224,7 +5990,7 @@ echo \"$ac_t\"\"$gcc_cv_as_hidden\" 1>&6\n case \"$target\" in \n   sparc*-*-*)\n     echo $ac_n \"checking assembler .register pseudo-op support\"\"... $ac_c\" 1>&6\n-echo \"configure:6228: checking assembler .register pseudo-op support\" >&5\n+echo \"configure:5994: checking assembler .register pseudo-op support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_register_pseudo_op'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6252,7 +6018,7 @@ EOF\n     fi\n \n     echo $ac_n \"checking assembler supports -relax\"\"... $ac_c\" 1>&6\n-echo \"configure:6256: checking assembler supports -relax\" >&5\n+echo \"configure:6022: checking assembler supports -relax\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_relax_opt'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6282,7 +6048,7 @@ EOF\n     case \"$tm_file\" in\n     *64*)\n \techo $ac_n \"checking for 64 bit support in assembler ($gcc_cv_as)\"\"... $ac_c\" 1>&6\n-echo \"configure:6286: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n+echo \"configure:6052: checking for 64 bit support in assembler ($gcc_cv_as)\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_flags64'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6327,7 +6093,7 @@ EOF\n \n     if test \"x$gcc_cv_as_flags64\" != xno; then\n \techo $ac_n \"checking for assembler offsetable %lo() support\"\"... $ac_c\" 1>&6\n-echo \"configure:6331: checking for assembler offsetable %lo() support\" >&5\n+echo \"configure:6097: checking for assembler offsetable %lo() support\" >&5\n if eval \"test \\\"`echo '$''{'gcc_cv_as_offsetable_lo10'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n@@ -6366,7 +6132,7 @@ EOF\n \n   i[34567]86-*-*)\n     echo $ac_n \"checking assembler instructions\"\"... $ac_c\" 1>&6\n-echo \"configure:6370: checking assembler instructions\" >&5\n+echo \"configure:6136: checking assembler instructions\" >&5\n     gcc_cv_as_instructions=\n     if test x$gcc_cv_gas_major_version != x -a x$gcc_cv_gas_minor_version != x; then\n       if test \"$gcc_cv_gas_major_version\" -eq 2 -a \"$gcc_cv_gas_minor_version\" -ge 9 -o \"$gcc_cv_gas_major_version\" -gt 2; then\n@@ -6395,7 +6161,7 @@ EOF\n esac\n \n echo $ac_n \"checking assembler dwarf2 debug_line support\"\"... $ac_c\" 1>&6\n-echo \"configure:6399: checking assembler dwarf2 debug_line support\" >&5\n+echo \"configure:6165: checking assembler dwarf2 debug_line support\" >&5\n gcc_cv_as_dwarf2_debug_line=no\n # ??? Not all targets support dwarf2 debug_line, even within a version\n # of gas.  Moreover, we need to emit a valid instruction to trigger any\n@@ -6541,7 +6307,7 @@ EOF\n \n \n echo $ac_n \"checking whether to enable maintainer-specific portions of Makefiles\"\"... $ac_c\" 1>&6\n-echo \"configure:6545: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n+echo \"configure:6311: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n     # Check whether --enable-maintainer-mode or --disable-maintainer-mode was given.\n if test \"${enable_maintainer_mode+set}\" = set; then\n   enableval=\"$enable_maintainer_mode\"\n@@ -7049,7 +6815,6 @@ s%@objext@%$objext%g\n s%@PACKAGE@%$PACKAGE%g\n s%@VERSION@%$VERSION%g\n s%@CHECK_PO@%$CHECK_PO%g\n-s%@ALLOCA@%$ALLOCA%g\n s%@USE_NLS@%$USE_NLS%g\n s%@MSGFMT@%$MSGFMT%g\n s%@GMSGFMT@%$GMSGFMT%g"}, {"sha": "bb7ccbf7c594a82f92be2cbc8f5a76dc11904ee9", "filename": "gcc/genattr.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenattr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenattr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattr.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -279,11 +279,9 @@ from the machine description file `md'.  */\\n\\n\");\n \n \t  if (unit == 0)\n \t    {\n-\t      int len = strlen (name) + 1;\n \t      unit = (struct function_unit *)\n-\t\talloca (sizeof (struct function_unit));\n-\t      unit->name = (char *) alloca (len);\n-\t      memcpy (unit->name, name, len);\n+\t\txmalloc (sizeof (struct function_unit));\n+\t      unit->name = xstrdup (name);\n \t      unit->multiplicity = multiplicity;\n \t      unit->simultaneity = simultaneity;\n \t      unit->ready_cost.min = unit->ready_cost.max = ready_cost;"}, {"sha": "aecd27c1ffa37804d9825e03a7d1eaf097fce03e", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 54, "deletions": 53, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -749,7 +749,7 @@ attr_printf VPARAMS ((register int len, const char *fmt, ...))\n   const char *fmt;\n #endif\n   va_list p;\n-  register char *str;\n+  char str[256];\n \n   VA_START (p, fmt);\n \n@@ -758,8 +758,9 @@ attr_printf VPARAMS ((register int len, const char *fmt, ...))\n   fmt = va_arg (p, const char *);\n #endif\n \n-  /* Print the string into a temporary location.  */\n-  str = (char *) alloca (len);\n+  if (len > 255) /* leave room for \\0 */\n+    abort ();\n+\n   vsprintf (str, fmt, p);\n   va_end (p);\n \n@@ -1983,12 +1984,12 @@ expand_units ()\n   /* Create an array of ops for each unit.  Add an extra unit for the\n      result_ready_cost function that has the ops of all other units.  */\n   unit_ops = (struct function_unit_op ***)\n-    alloca ((num_units + 1) * sizeof (struct function_unit_op **));\n+    xmalloc ((num_units + 1) * sizeof (struct function_unit_op **));\n   unit_num = (struct function_unit **)\n-    alloca ((num_units + 1) * sizeof (struct function_unit *));\n+    xmalloc ((num_units + 1) * sizeof (struct function_unit *));\n \n   unit_num[num_units] = unit = (struct function_unit *)\n-    alloca (sizeof (struct function_unit));\n+    xmalloc (sizeof (struct function_unit));\n   unit->num = num_units;\n   unit->num_opclasses = 0;\n \n@@ -1997,15 +1998,15 @@ expand_units ()\n       unit_num[num_units]->num_opclasses += unit->num_opclasses;\n       unit_num[unit->num] = unit;\n       unit_ops[unit->num] = op_array = (struct function_unit_op **)\n-\talloca (unit->num_opclasses * sizeof (struct function_unit_op *));\n+\txmalloc (unit->num_opclasses * sizeof (struct function_unit_op *));\n \n       for (op = unit->ops; op; op = op->next)\n \top_array[op->num] = op;\n     }\n \n   /* Compose the array of ops for the extra unit.  */\n   unit_ops[num_units] = op_array = (struct function_unit_op **)\n-    alloca (unit_num[num_units]->num_opclasses\n+    xmalloc (unit_num[num_units]->num_opclasses\n \t    * sizeof (struct function_unit_op *));\n \n   for (unit = units, i = 0; unit; i += unit->num_opclasses, unit = unit->next)\n@@ -2571,9 +2572,10 @@ simplify_cond (exp, insn_code, insn_index)\n   rtx defval = XEXP (exp, 1);\n   rtx new_defval = XEXP (exp, 1);\n   int len = XVECLEN (exp, 0);\n-  rtx *tests = (rtx *) alloca (len * sizeof (rtx));\n+  rtx *tests = (rtx *) xmalloc (len * sizeof (rtx));\n   int allsame = 1;\n   char *first_spacer;\n+  rtx ret;\n \n   /* This lets us free all storage allocated below, if appropriate.  */\n   first_spacer = (char *) obstack_finish (rtl_obstack);\n@@ -2656,20 +2658,23 @@ simplify_cond (exp, insn_code, insn_index)\n   if (len == 0)\n     {\n       if (GET_CODE (defval) == COND)\n-\treturn simplify_cond (defval, insn_code, insn_index);\n-      return defval;\n+\tret = simplify_cond (defval, insn_code, insn_index);\n+      else\n+\tret = defval;\n     }\n   else if (allsame)\n-    return exp;\n+    ret = exp;\n   else\n     {\n       rtx newexp = rtx_alloc (COND);\n \n       XVEC (newexp, 0) = rtvec_alloc (len);\n       memcpy (XVEC (newexp, 0)->elem, tests, len * sizeof (rtx));\n       XEXP (newexp, 1) = new_defval;\n-      return newexp;\n+      ret = newexp;\n     }\n+  free (tests);\n+  return ret;\n }\n \f\n /* Remove an insn entry from an attribute value.  */\n@@ -2864,13 +2869,15 @@ evaluate_eq_attr (exp, value, insn_code, insn_index)\n     }\n   else if (GET_CODE (value) == SYMBOL_REF)\n     {\n-      char *p, *string;\n+      char *p;\n+      char string[256];\n \n       if (GET_CODE (exp) != EQ_ATTR)\n \tabort ();\n \n-      string = (char *) alloca (2 + strlen (XSTR (exp, 0))\n-\t\t\t\t+ strlen (XSTR (exp, 1)));\n+      if (strlen (XSTR (exp, 0)) + strlen (XSTR (exp, 1)) + 2 > 256)\n+\tabort ();\n+\n       strcpy (string, XSTR (exp, 0));\n       strcat (string, \"_\");\n       strcat (string, XSTR (exp, 1));\n@@ -3513,17 +3520,14 @@ optimize_attrs ()\n \n   /* Make 2 extra elements, for \"code\" values -2 and -1.  */\n   insn_code_values\n-    = (struct attr_value_list **) alloca ((insn_code_number + 2)\n+    = (struct attr_value_list **) xmalloc ((insn_code_number + 2)\n \t\t\t\t\t  * sizeof (struct attr_value_list *));\n   memset ((char *) insn_code_values, 0,\n \t (insn_code_number + 2) * sizeof (struct attr_value_list *));\n \n   /* Offset the table address so we can index by -2 or -1.  */\n   insn_code_values += 2;\n \n-  /* Allocate the attr_value_list structures using xmalloc rather than\n-     alloca, because using alloca can overflow the maximum permitted\n-     stack limit on SPARC Lynx.  */\n   iv = ivbuf = ((struct attr_value_list *)\n \t\txmalloc (num_insn_ents * sizeof (struct attr_value_list)));\n \n@@ -3593,6 +3597,7 @@ optimize_attrs ()\n     }\n \n   free (ivbuf);\n+  free (insn_code_values - 2);\n }\n \n #if 0\n@@ -3641,6 +3646,7 @@ simplify_by_exploding (exp)\n   rtx *condtest, *condval;\n   int i, j, total, ndim = 0;\n   int most_tests, num_marks, new_marks;\n+  rtx ret;\n \n   /* Locate all the EQ_ATTR expressions.  */\n   if (! find_and_mark_used_attributes (exp, &list, &ndim) || ndim == 0)\n@@ -3655,7 +3661,7 @@ simplify_by_exploding (exp)\n      cover the domain of the attribute.  This makes the expanded COND form\n      order independent.  */\n \n-  space = (struct dimension *) alloca (ndim * sizeof (struct dimension));\n+  space = (struct dimension *) xmalloc (ndim * sizeof (struct dimension));\n \n   total = 1;\n   for (ndim = 0; list; ndim++)\n@@ -3710,8 +3716,8 @@ simplify_by_exploding (exp)\n   for (i = 0; i < ndim; i++)\n     space[i].current_value = space[i].values;\n \n-  condtest = (rtx *) alloca (total * sizeof (rtx));\n-  condval = (rtx *) alloca (total * sizeof (rtx));\n+  condtest = (rtx *) xmalloc (total * sizeof (rtx));\n+  condval = (rtx *) xmalloc (total * sizeof (rtx));\n \n   /* Expand the tests and values by iterating over all values in the\n      attribute space.  */\n@@ -3727,6 +3733,7 @@ simplify_by_exploding (exp)\n \n   /* We are now finished with the original expression.  */\n   unmark_used_attributes (0, space, ndim);\n+  free (space);\n \n   /* Find the most used constant value and make that the default.  */\n   most_tests = -1;\n@@ -3753,27 +3760,32 @@ simplify_by_exploding (exp)\n \n   /* Give up if nothing is constant.  */\n   if (num_marks == 0)\n-    return exp;\n-\n+    ret = exp;\n+  \n   /* If all values are the default, use that.  */\n-  if (total == most_tests)\n-    return defval;\n+  else if (total == most_tests)\n+    ret = defval;\n \n   /* Make a COND with the most common constant value the default.  (A more\n      complex method where tests with the same value were combined didn't\n      seem to improve things.)  */\n-  condexp = rtx_alloc (COND);\n-  XVEC (condexp, 0) = rtvec_alloc ((total - most_tests) * 2);\n-  XEXP (condexp, 1) = defval;\n-  for (i = j = 0; i < total; i++)\n-    if (condval[i] != defval)\n-      {\n-\tXVECEXP (condexp, 0, 2 * j) = condtest[i];\n-\tXVECEXP (condexp, 0, 2 * j + 1) = condval[i];\n-\tj++;\n-      }\n-\n-  return condexp;\n+  else\n+    {\n+      condexp = rtx_alloc (COND);\n+      XVEC (condexp, 0) = rtvec_alloc ((total - most_tests) * 2);\n+      XEXP (condexp, 1) = defval;\n+      for (i = j = 0; i < total; i++)\n+\tif (condval[i] != defval)\n+\t  {\n+\t    XVECEXP (condexp, 0, 2 * j) = condtest[i];\n+\t    XVECEXP (condexp, 0, 2 * j + 1) = condval[i];\n+\t    j++;\n+\t  }\n+      ret = condexp;\n+    }\n+  free (condtest);\n+  free (condval);\n+  return ret;\n }\n \n /* Set the MEM_VOLATILE_P flag for all EQ_ATTR expressions in EXP and\n@@ -5677,7 +5689,7 @@ write_complex_function (unit, name, connection)\n   struct attr_desc *case_attr, *attr;\n   struct attr_value *av, *common_av;\n   rtx value;\n-  char *str;\n+  char str[256];\n   int using_case;\n   int i;\n \n@@ -5694,7 +5706,8 @@ write_complex_function (unit, name, connection)\n   printf (\"    {\\n\");\n \n   /* Write the `switch' statement to get the case value.  */\n-  str = (char *) alloca (strlen (unit->name) + strlen (name) + strlen (connection) + 10);\n+  if (strlen (unit->name) + sizeof \"*_cases\" > 256)\n+    abort ();\n   sprintf (str, \"*%s_cases\", unit->name);\n   case_attr = find_attr (str, 0);\n   if (! case_attr)\n@@ -6048,18 +6061,6 @@ main (argc, argv)\n   if (argc <= 1)\n     fatal (\"No input file name.\");\n \n-#if defined (RLIMIT_STACK) && defined (HAVE_GETRLIMIT) && defined (HAVE_SETRLIMIT)\n-  /* Get rid of any avoidable limit on stack size.  */\n-  {\n-    struct rlimit rlim;\n-\n-    /* Set the stack limit huge so that alloca does not fail.  */\n-    getrlimit (RLIMIT_STACK, &rlim);\n-    rlim.rlim_cur = rlim.rlim_max;\n-    setrlimit (RLIMIT_STACK, &rlim);\n-  }\n-#endif\n-\n   if (init_md_reader (argv[1]) != SUCCESS_EXIT_CODE)\n     return (FATAL_EXIT_CODE);\n "}, {"sha": "7c8ecfe877ccb5a25a91722dcb10cf380f8b7ad8", "filename": "gcc/genextract.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenextract.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenextract.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenextract.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -120,7 +120,7 @@ gen_insn (insn)\n   else\n     for (i = XVECLEN (insn, 1) - 1; i >= 0; i--)\n       {\n-\tchar *path = (char *) alloca (2);\n+\tchar path[2];\n \n \tpath[0] = 'a' + i;\n \tpath[1] = 0;\n@@ -221,7 +221,7 @@ walk_rtx (x, path)\n       dupnums[dup_count] = XINT (x, 0);\n       dup_count++;\n       \n-      newpath = (char *) alloca (depth + 2);\n+      newpath = (char *) xmalloc (depth + 2);\n       strcpy (newpath, path);\n       newpath[depth + 1] = 0;\n       \n@@ -230,13 +230,14 @@ walk_rtx (x, path)\n \t  newpath[depth] = '0' + i;\n \t  walk_rtx (XVECEXP (x, 1, i), newpath);\n         }\n+      free (newpath);\n       return;\n       \n     case MATCH_OPERATOR:\n       oplocs[XINT (x, 0)] = xstrdup (path);\n       op_count = MAX (op_count, XINT (x, 0) + 1);\n \n-      newpath = (char *) alloca (depth + 2);\n+      newpath = (char *) xmalloc (depth + 2);\n       strcpy (newpath, path);\n       newpath[depth + 1] = 0;\n \n@@ -245,13 +246,14 @@ walk_rtx (x, path)\n \t  newpath[depth] = '0' + i;\n \t  walk_rtx (XVECEXP (x, 2, i), newpath);\n \t}\n+      free (newpath);\n       return;\n \n     case MATCH_PARALLEL:\n       oplocs[XINT (x, 0)] = xstrdup (path);\n       op_count = MAX (op_count, XINT (x, 0) + 1);\n \n-      newpath = (char *) alloca (depth + 2);\n+      newpath = (char *) xmalloc (depth + 2);\n       strcpy (newpath, path);\n       newpath[depth + 1] = 0;\n \n@@ -260,6 +262,7 @@ walk_rtx (x, path)\n \t  newpath[depth] = 'a' + i;\n \t  walk_rtx (XVECEXP (x, 2, i), newpath);\n \t}\n+      free (newpath);\n       return;\n \n     case ADDRESS:\n@@ -270,7 +273,7 @@ walk_rtx (x, path)\n       break;\n     }\n \n-  newpath = (char *) alloca (depth + 2);\n+  newpath = (char *) xmalloc (depth + 2);\n   strcpy (newpath, path);\n   newpath[depth + 1] = 0;\n \n@@ -293,6 +296,7 @@ walk_rtx (x, path)\n \t    }\n \t}\n     }\n+  free (newpath);\n }\n \n /* Given a PATH, representing a path down the instruction's"}, {"sha": "c10b8e5d15a3038733708b1da9b362f78db4641b", "filename": "gcc/genoutput.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenoutput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenoutput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenoutput.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -241,13 +241,14 @@ output_prologue ()\n /* We need to define all predicates used.  Keep a list of those we\n    have defined so far.  There normally aren't very many predicates\n    used, so a linked list should be fast enough.  */\n+struct predicate { const char *name; struct predicate *next; };\n \n static void\n output_predicate_decls ()\n {\n-  struct predicate { const char *name; struct predicate *next; } *predicates = 0;\n+  struct predicate *predicates = 0;\n   register struct operand_data *d;\n-  struct predicate *p;\n+  struct predicate *p, *next;\n \n   for (d = odata; d; d = d->next)\n     if (d->predicate && d->predicate[0])\n@@ -260,14 +261,19 @@ output_predicate_decls ()\n \t  {\n \t    printf (\"extern int %s PARAMS ((rtx, enum machine_mode));\\n\",\n \t\t    d->predicate);\n-\t    p = (struct predicate *) alloca (sizeof (struct predicate));\n+\t    p = (struct predicate *) xmalloc (sizeof (struct predicate));\n \t    p->name = d->predicate;\n \t    p->next = predicates;\n \t    predicates = p;\n \t  }\n       }\n \n   printf (\"\\n\\n\");\n+  for (p = predicates; p; p = next)\n+    {\n+      next = p->next;\n+      free (p);\n+    }\n }\n \n static void"}, {"sha": "2224f8036fe7b5df5b2d4abcefecd3c6d787296e", "filename": "gcc/genrecog.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -766,7 +766,7 @@ add_to_sequence (pattern, last, position, insn_type, top)\n   if (depth > max_depth)\n     max_depth = depth;\n \n-  subpos = (char *) alloca (depth + 2);\n+  subpos = (char *) xmalloc (depth + 2);\n   strcpy (subpos, position);\n   subpos[depth + 1] = 0;\n \n@@ -796,7 +796,7 @@ add_to_sequence (pattern, last, position, insn_type, top)\n \t\t\t\t     last, subpos, insn_type, 0);\n \t      last = &sub->success;\n \t    }\n-\t  return sub;\n+\t  goto ret;\n \t}\n \n       /* Else nothing special.  */\n@@ -1027,6 +1027,8 @@ add_to_sequence (pattern, last, position, insn_type, top)\n   if (this->tests == NULL)\n     abort ();\n \n+ ret:\n+  free (subpos);\n   return sub;\n }\n \f"}, {"sha": "d4fd96b72304f8495e69de155235d0dc455202e4", "filename": "gcc/rtl.c", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -997,7 +997,7 @@ rtx\n read_rtx (infile)\n      FILE *infile;\n {\n-  register int i, j, list_counter;\n+  register int i, j;\n   RTX_CODE tmp_code;\n   register const char *format_ptr;\n   /* tmp_char is a buffer used for reading decimal integers\n@@ -1111,40 +1111,31 @@ read_rtx (infile)\n \n       case 'E':\n \t{\n-\t  register struct rtx_list *next_rtx, *rtx_list_link;\n-\t  struct rtx_list *list_rtx = NULL;\n+\t  /* Obstack to store scratch vector in.  */\n+\t  struct obstack vector_stack;\n+\t  int list_counter = 0;\n+\t  rtvec return_vec = NULL_RTVEC;\n \n \t  c = read_skip_spaces (infile);\n \t  if (c != '[')\n \t    fatal_expected_char (infile, '[', c);\n \n \t  /* add expressions to a list, while keeping a count */\n-\t  next_rtx = NULL;\n-\t  list_counter = 0;\n+\t  obstack_init (&vector_stack);\n \t  while ((c = read_skip_spaces (infile)) && c != ']')\n \t    {\n \t      ungetc (c, infile);\n \t      list_counter++;\n-\t      rtx_list_link = (struct rtx_list *)\n-\t\talloca (sizeof (struct rtx_list));\n-\t      rtx_list_link->value = read_rtx (infile);\n-\t      if (next_rtx == 0)\n-\t\tlist_rtx = rtx_list_link;\n-\t      else\n-\t\tnext_rtx->next = rtx_list_link;\n-\t      next_rtx = rtx_list_link;\n-\t      rtx_list_link->next = 0;\n+\t      obstack_ptr_grow (&vector_stack, (PTR) read_rtx (infile));\n \t    }\n-\t  /* get vector length and allocate it */\n-\t  XVEC (return_rtx, i) = (list_counter\n-\t\t\t\t  ? rtvec_alloc (list_counter) : NULL_RTVEC);\n \t  if (list_counter > 0)\n \t    {\n-\t      next_rtx = list_rtx;\n-\t      for (j = 0; j < list_counter; j++,\n-\t\t   next_rtx = next_rtx->next)\n-\t\tXVECEXP (return_rtx, i, j) = next_rtx->value;\n+\t      return_vec = rtvec_alloc (list_counter);\n+\t      memcpy (&return_vec->elem[0], obstack_finish (&vector_stack),\n+\t\t      list_counter * sizeof (rtx));\n \t    }\n+\t  XVEC (return_rtx, i) = return_vec;\n+\t  obstack_free (&vector_stack, NULL);\n \t  /* close bracket gotten */\n \t}\n \tbreak;"}, {"sha": "8721f7e63e47ef07253a4cff520fc16f16f9ceea", "filename": "gcc/system.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -112,11 +112,6 @@ extern int errno;\n \n #ifdef HAVE_STDLIB_H\n # include <stdlib.h>\n-# ifdef USE_C_ALLOCA\n-/* Note that systems that use glibc have a <stdlib.h> that includes\n-   <alloca.h> that defines alloca, so let USE_C_ALLOCA override this. */\n-# undef alloca\n-#endif\n #endif\n \n /* If we don't have an overriding definition, set SUCCESS_EXIT_CODE and\n@@ -552,11 +547,6 @@ extern void abort PARAMS ((void));\n #define UNION_INIT_ZERO\n #endif\n \n-/* GCC now gives implicit declaration warnings for undeclared builtins.  */\n-#if defined(__GNUC__) && defined (__SIZE_TYPE__)\n-extern void *alloca (__SIZE_TYPE__);\n-#endif\n-\n /* Various error reporting routines want to use __FUNCTION__.  */\n #if (GCC_VERSION < 2007)\n #ifndef __FUNCTION__"}, {"sha": "e4fc2af20c99138ebe0d9d9ddd8b133437bb301a", "filename": "include/libiberty.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -206,6 +206,20 @@ extern int vasprintf PARAMS ((char **, const char *, va_list))\n \n #define ARRAY_SIZE(a) (sizeof (a) / sizeof ((a)[0]))\n \n+/* Drastically simplified alloca configurator.  If we're using GCC,\n+   we use __builtin_alloca; otherwise we use the C alloca.  The C\n+   alloca is always available.  You can override GCC by defining\n+   USE_C_ALLOCA yourself.  */\n+extern PTR C_alloca PARAMS((size_t));\n+#undef alloca\n+#if GCC_VERSION >= 2000 && !defined USE_C_ALLOCA\n+# define alloca(x) __builtin_alloca(x)\n+#else\n+# define alloca(x) C_alloca(x)\n+# undef USE_C_ALLOCA\n+# define USE_C_ALLOCA 1\n+#endif\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "5ea3bd5fc5f591ce423c32603c0cbd5232a98a0a", "filename": "libiberty/Makefile.in", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FMakefile.in?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -64,7 +64,6 @@ MAKEOVERRIDES =\n TARGETLIB = libiberty.a\n \n LIBOBJS = @LIBOBJS@\n-ALLOCA = @ALLOCA@\n \n # A configuration can specify extra .o files that should be included,\n # even if they are in libc. (Perhaps the libc version is buggy.)\n@@ -118,9 +117,6 @@ install-info: install-info-subdir\n clean-info: clean-info-subdir\n dvi: dvi-subdir\n \n-# Include files that are in this directory.\n-HFILES = alloca-conf.h\n-\n # NOTE: If you add new files to the library, add them to this list\n # (alphabetical), and add them to REQUIRED_OFILES or funcs in\n # configure.in.\n@@ -138,17 +134,17 @@ CFILES = asprintf.c alloca.c argv.c atexit.c basename.c bcmp.c bcopy.c\t      \\\n \txmalloc.c xmemdup.c xstrdup.c xstrerror.c\n \n # These are always included in the library.\n-REQUIRED_OFILES = argv.o choose-temp.o concat.o cplus-dem.o cp-demangle.o     \\\n-\tdyn-string.o fdmatch.o fnmatch.o getopt.o getopt1.o getpwd.o          \\\n-\tgetruntime.o hashtab.o hex.o floatformat.o md5.o objalloc.o obstack.o \\\n-\tpartition.o pexecute.o safe-ctype.o sort.o spaces.o splay-tree.o      \\\n-\tstrerror.o strsignal.o xatexit.o xexit.o xmalloc.o xmemdup.o          \\\n-\txstrdup.o xstrerror.o\n-\n-$(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA)\n+REQUIRED_OFILES = argv.o alloca.o choose-temp.o concat.o cplus-dem.o           \\\n+\tcp-demangle.o dyn-string.o fdmatch.o fnmatch.o getopt.o getopt1.o      \\\n+\tgetpwd.o getruntime.o hashtab.o hex.o floatformat.o md5.o objalloc.o   \\\n+\tobstack.o partition.o pexecute.o safe-ctype.o sort.o spaces.o          \\\n+\tsplay-tree.o strerror.o strsignal.o xatexit.o xexit.o xmalloc.o        \\\n+\txmemdup.o xstrdup.o xstrerror.o\n+\n+$(TARGETLIB): $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n \t-rm -f $(TARGETLIB)\n \t$(AR) $(AR_FLAGS) $(TARGETLIB) \\\n-\t  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA)\n+\t  $(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS)\n \t$(RANLIB) $(TARGETLIB)\n \n INSTALL_DEST = @INSTALL_DEST@\n@@ -197,8 +193,8 @@ stamp-picdir:\n \n etags tags: TAGS etags-subdir\n \n-TAGS: $(CFILES) $(HFILES)\n-\tetags `for i in $(HFILES) $(CFILES); do echo $(srcdir)/$$i ; done`\n+TAGS: $(CFILES)\n+\tetags `for i in $(CFILES); do echo $(srcdir)/$$i ; done`\n \n # The standalone demangler (c++filt) has been moved to binutils.\n demangle:\n@@ -207,7 +203,7 @@ demangle:\n \t@false\n \n ls:\n-\t@echo Makefile $(HFILES) $(CFILES)\n+\t@echo Makefile $(CFILES)\n \n # Need to deal with profiled libraries, too.\n \n@@ -243,7 +239,6 @@ stamp-h: config.in config.status\n config.status: $(srcdir)/configure $(srcdir)/config.table\n \t$(SHELL) ./config.status --recheck\n \n-\n all-subdir check-subdir installcheck-subdir info-subdir\t\\\n install-info-subdir clean-info-subdir dvi-subdir install-subdir\t\\\n etags-subdir mostlyclean-subdir clean-subdir distclean-subdir \\\n@@ -254,11 +249,11 @@ maintainer-clean-subdir:\n \t  cd $$dir && $(MAKE) $$target; \\\n \tdone\n \n-$(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS) $(ALLOCA): stamp-picdir\n+$(REQUIRED_OFILES) $(EXTRA_OFILES) $(LIBOBJS): stamp-picdir\n \n-alloca.o: config.h\n+alloca.o: config.h $(INCDIR)/libiberty.h\n atexit.o: config.h\n-argv.o: config.h alloca-conf.h $(INCDIR)/libiberty.h\n+argv.o: config.h $(INCDIR)/libiberty.h\n basename.o: $(INCDIR)/libiberty.h\n choose-temp.o: config.h\n clock.o: config.h"}, {"sha": "7b1b677645e8dfcc26b7b202a39e62702be8b9e1", "filename": "libiberty/aclocal.m4", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Faclocal.m4?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -134,3 +134,55 @@ define(AC_DEFINE_NOAUTOHEADER,\n [#define] $1 ifelse($#, 2, [$2], $#, 3, [$2], 1)\n EOF\n ])\n+\n+# We always want a C version of alloca() compiled into libiberty,\n+# because native-compiler support for the real alloca is so !@#$%\n+# unreliable that GCC has decided to use it only when being compiled\n+# by GCC.  This is the part of AC_FUNC_ALLOCA that calculates the\n+# information alloca.c needs.\n+AC_DEFUN(libiberty_AC_FUNC_C_ALLOCA,\n+[AC_CACHE_CHECK(whether alloca needs Cray hooks, ac_cv_os_cray,\n+[AC_EGREP_CPP(webecray,\n+[#if defined(CRAY) && ! defined(CRAY2)\n+webecray\n+#else\n+wenotbecray\n+#endif\n+], ac_cv_os_cray=yes, ac_cv_os_cray=no)])\n+if test $ac_cv_os_cray = yes; then\n+  for ac_func in _getb67 GETB67 getb67; do\n+    AC_CHECK_FUNC($ac_func, \n+      [AC_DEFINE_UNQUOTED(CRAY_STACKSEG_END, $ac_func, \n+  [Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP\n+   systems. This function is required for alloca.c support on those\n+   systems.])  break])\n+  done\n+fi\n+\n+AC_CACHE_CHECK(stack direction for C alloca, ac_cv_c_stack_direction,\n+[AC_TRY_RUN([find_stack_direction ()\n+{\n+  static char *addr = 0;\n+  auto char dummy;\n+  if (addr == 0)\n+    {\n+      addr = &dummy;\n+      return find_stack_direction ();\n+    }\n+  else\n+    return (&dummy > addr) ? 1 : -1;\n+}\n+main ()\n+{\n+  exit (find_stack_direction() < 0);\n+}], \n+  ac_cv_c_stack_direction=1,\n+  ac_cv_c_stack_direction=-1,\n+  ac_cv_c_stack_direction=0)])\n+AC_DEFINE_UNQUOTED(STACK_DIRECTION, $ac_cv_c_stack_direction,\n+  [Define if you know the direction of stack growth for your system;\n+   otherwise it will be automatically deduced at run-time.\n+        STACK_DIRECTION > 0 => grows toward higher addresses\n+        STACK_DIRECTION < 0 => grows toward lower addresses\n+        STACK_DIRECTION = 0 => direction of growth unknown])\n+])"}, {"sha": "9c3eea396c19359acacad49f735999982ec56410", "filename": "libiberty/alloca-conf.h", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/libiberty%2Falloca-conf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/libiberty%2Falloca-conf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca-conf.h?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,24 +0,0 @@\n-#include \"config.h\"\n-\n-#if defined(__GNUC__) && !defined(C_ALLOCA)\n-# ifndef alloca\n-#  define alloca __builtin_alloca\n-# endif\n-#else /* ! defined (__GNUC__) */\n-#  ifdef _AIX\n- #pragma alloca\n-#  else\n-#  if defined(HAVE_ALLOCA_H) && !defined(C_ALLOCA)\n-#   include <alloca.h>\n-#  else /* ! defined (HAVE_ALLOCA_H) */\n-#   ifdef __STDC__\n-extern PTR alloca (size_t);\n-#   else /* ! defined (__STDC__) */\n-extern PTR alloca ();\n-#   endif /* ! defined (__STDC__) */\n-#  endif /* ! defined (HAVE_ALLOCA_H) */\n-#  ifdef _WIN32\n-#   include <malloc.h>\n-#  endif\n-# endif /* ! defined (_AIX) */\n-#endif /* ! defined (__GNUC__) */"}, {"sha": "bf105d80f0fcbc7ea883c9ff855abd26d07ec6fe", "filename": "libiberty/alloca.c", "status": "modified", "additions": 9, "deletions": 65, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Falloca.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Falloca.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Falloca.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -25,74 +25,29 @@\n #include <config.h>\n #endif\n \n+#include <libiberty.h>\n+\n #ifdef HAVE_STRING_H\n #include <string.h>\n #endif\n #ifdef HAVE_STDLIB_H\n #include <stdlib.h>\n #endif\n \n-#ifdef emacs\n-#include \"blockinput.h\"\n-#endif\n-\n-/* If compiling with GCC 2, this file's not needed.  Except of course if\n-   the C alloca is explicitly requested.  */\n-#if defined (USE_C_ALLOCA) || !defined (__GNUC__) || __GNUC__ < 2\n-\n-/* If someone has defined alloca as a macro,\n-   there must be some other way alloca is supposed to work.  */\n-#ifndef alloca\n-\n-#ifdef emacs\n-#ifdef static\n-/* actually, only want this if static is defined as \"\"\n-   -- this is for usg, in which emacs must undefine static\n-   in order to make unexec workable\n-   */\n-#ifndef STACK_DIRECTION\n-you\n-lose\n--- must know STACK_DIRECTION at compile-time\n-#endif /* STACK_DIRECTION undefined */\n-#endif /* static */\n-#endif /* emacs */\n-\n /* If your stack is a linked list of frames, you have to\n    provide an \"address metric\" ADDRESS_FUNCTION macro.  */\n \n #if defined (CRAY) && defined (CRAY_STACKSEG_END)\n-long i00afunc ();\n+static long i00afunc ();\n #define ADDRESS_FUNCTION(arg) (char *) i00afunc (&(arg))\n #else\n #define ADDRESS_FUNCTION(arg) &(arg)\n #endif\n \n-#if __STDC__\n-typedef void *pointer;\n-#else\n-typedef char *pointer;\n-#endif\n-\n #ifndef NULL\n #define\tNULL\t0\n #endif\n \n-/* Different portions of Emacs need to call different versions of\n-   malloc.  The Emacs executable needs alloca to call xmalloc, because\n-   ordinary malloc isn't protected from input signals.  On the other\n-   hand, the utilities in lib-src need alloca to call malloc; some of\n-   them are very simple, and don't have an xmalloc routine.\n-\n-   Non-Emacs programs expect this to call use xmalloc.\n-\n-   Callers below should use malloc.  */\n-\n-#ifndef emacs\n-#define malloc xmalloc\n-#endif\n-extern pointer malloc ();\n-\n /* Define STACK_DIRECTION if you know the direction of stack\n    growth for your system; otherwise it will be automatically\n    deduced at run-time.\n@@ -168,9 +123,9 @@ static header *last_alloca_header = NULL;\t/* -> last alloca header.  */\n    caller, but that method cannot be made to work for some\n    implementations of C, for example under Gould's UTX/32.  */\n \n-pointer\n-alloca (size)\n-     unsigned size;\n+PTR\n+C_alloca (size)\n+     size_t size;\n {\n   auto char probe;\t\t/* Probes stack depth: */\n   register char *depth = ADDRESS_FUNCTION (probe);\n@@ -186,28 +141,20 @@ alloca (size)\n   {\n     register header *hp;\t/* Traverses linked list.  */\n \n-#ifdef emacs\n-    BLOCK_INPUT;\n-#endif\n-\n     for (hp = last_alloca_header; hp != NULL;)\n       if ((STACK_DIR > 0 && hp->h.deep > depth)\n \t  || (STACK_DIR < 0 && hp->h.deep < depth))\n \t{\n \t  register header *np = hp->h.next;\n \n-\t  free ((pointer) hp);\t/* Collect garbage.  */\n+\t  free ((PTR) hp);\t/* Collect garbage.  */\n \n \t  hp = np;\t\t/* -> next header.  */\n \t}\n       else\n \tbreak;\t\t\t/* Rest are not deeper.  */\n \n     last_alloca_header = hp;\t/* -> last valid storage.  */\n-\n-#ifdef emacs\n-    UNBLOCK_INPUT;\n-#endif\n   }\n \n   if (size == 0)\n@@ -216,7 +163,7 @@ alloca (size)\n   /* Allocate combined header + user data storage.  */\n \n   {\n-    register pointer new = malloc (sizeof (header) + size);\n+    register PTR new = xmalloc (sizeof (header) + size);\n     /* Address of header.  */\n \n     if (new == 0)\n@@ -229,7 +176,7 @@ alloca (size)\n \n     /* User storage begins just after header.  */\n \n-    return (pointer) ((char *) new + sizeof (header));\n+    return (PTR) ((char *) new + sizeof (header));\n   }\n }\n \n@@ -500,6 +447,3 @@ i00afunc (long address)\n \n #endif /* not CRAY2 */\n #endif /* CRAY */\n-\n-#endif /* no alloca */\n-#endif /* not GCC version 2 */"}, {"sha": "35882854588fe1a141b3646f4db4c124c0a8a143", "filename": "libiberty/argv.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fargv.c?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -48,7 +48,6 @@ extern char *strdup ();\t\t/* Duplicate a string */\n \n #endif\t/* __STDC__ */\n \n-#include \"alloca-conf.h\"\n \n #ifndef NULL\n #define NULL 0"}, {"sha": "fa23f18c2097cb34fe0f2a3c6c9caa255f4b1f7b", "filename": "libiberty/config.in", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.in?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1,21 +1,8 @@\n /* config.in.  Generated automatically from configure.in by autoheader.  */\n \n-/* Define if using alloca.c.  */\n-#undef C_ALLOCA\n-\n /* Define to empty if the keyword does not work.  */\n #undef const\n \n-/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.\n-   This function is required for alloca.c support on those systems.  */\n-#undef CRAY_STACKSEG_END\n-\n-/* Define if you have alloca, as a function or macro.  */\n-#undef HAVE_ALLOCA\n-\n-/* Define if you have <alloca.h> and it should be used (not on Ultrix).  */\n-#undef HAVE_ALLOCA_H\n-\n /* Define if you have a working `mmap' system call.  */\n #undef HAVE_MMAP\n \n@@ -34,15 +21,6 @@\n /* Define if you need to in order for stat and other things to work.  */\n #undef _POSIX_SOURCE\n \n-/* If using the C implementation of alloca, define if you know the\n-   direction of stack growth for your system; otherwise it will be\n-   automatically deduced at run-time.\n- STACK_DIRECTION > 0 => grows toward higher addresses\n- STACK_DIRECTION < 0 => grows toward lower addresses\n- STACK_DIRECTION = 0 => direction of growth unknown\n- */\n-#undef STACK_DIRECTION\n-\n /* Define if you have the ANSI C header files.  */\n #undef STDC_HEADERS\n \n@@ -250,3 +228,15 @@\n /* Define if you have the sys_siglist variable. */\n #undef HAVE_SYS_SIGLIST\n \n+/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP\n+   systems. This function is required for alloca.c support on those\n+   systems. */\n+#undef CRAY_STACKSEG_END\n+\n+/* Define if you know the direction of stack growth for your system;\n+   otherwise it will be automatically deduced at run-time.\n+        STACK_DIRECTION > 0 => grows toward higher addresses\n+        STACK_DIRECTION < 0 => grows toward lower addresses\n+        STACK_DIRECTION = 0 => direction of growth unknown */\n+#undef STACK_DIRECTION\n+"}, {"sha": "fa892c001e39c3ee3f8ff798d7d3457ac89ea867", "filename": "libiberty/config.table", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfig.table", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfig.table", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig.table?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -6,7 +6,6 @@ case \"${host}\" in\n   *-*-freebsd2.2.[012])\tfrag=mh-fbsd21 ;;\n   i370-*-opened*)       frag=mh-openedition ;;\n   i[345]86-*-windows*)\tfrag=mh-windows ;;\n-  *-*-beos*)\t\tfrag=mh-beos ;;\n esac\n \n frags=$frag"}, {"sha": "9b75e7d33723b533eca0c58ab59e1478afbd349a", "filename": "libiberty/config/mh-beos", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b3de05baddfeec0747cc819dfb6a75363aebdc/libiberty%2Fconfig%2Fmh-beos", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b3de05baddfeec0747cc819dfb6a75363aebdc/libiberty%2Fconfig%2Fmh-beos", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfig%2Fmh-beos?ref=89b3de05baddfeec0747cc819dfb6a75363aebdc", "patch": "@@ -1,7 +0,0 @@\n-# Host makefile fragment for BeOS\n-\n-# This is a temporary hack until the wimpy default 64k stack\n-# limit in BeOS is either increased or made user settable somehow.\n-# This probably won't happen until after the DR9 release.\n-\n-EXTRA_OFILES = alloca.o"}, {"sha": "6b0aa209cab57bab0e5e5dae0aeec633eb2485c2", "filename": "libiberty/configure", "status": "modified", "additions": 56, "deletions": 182, "changes": 238, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -1771,8 +1771,7 @@ fi\n \n # For each of these functions, if the host does not provide the\n # function we want to put FN.o in LIBOBJS, and if the host does\n-# provide the function, we want to define HAVE_FN in config.h.  Also,\n-# if the host does not provide alloca, we set ALLOCA to alloca.o\n+# provide the function, we want to define HAVE_FN in config.h.\n \n setobjs=\n CHECK=\n@@ -1787,7 +1786,6 @@ if test -n \"${with_target_subdir}\"; then\n   # newlib provide and which ones we will be expected to provide.\n \n   if test \"x${with_newlib}\" = \"xyes\"; then\n-    ALLOCA=\"alloca.o\"\n     LIBOBJS=\"asprintf.o basename.o insque.o random.o strdup.o vasprintf.o\"\n \n     for f in $funcs; do\n@@ -1917,7 +1915,7 @@ if test -z \"${setobjs}\"; then\n   # We haven't set the list of objects yet.  Use the standard autoconf\n   # tests.  This will only work if the compiler works.\n   echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\"\"... $ac_c\" 1>&6\n-echo \"configure:1921: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n+echo \"configure:1919: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) works\" >&5\n \n ac_ext=c\n # CFLAGS is not in ac_cpp because -g, -O, etc. are not valid cpp options.\n@@ -1928,12 +1926,12 @@ cross_compiling=$ac_cv_prog_cc_cross\n \n cat > conftest.$ac_ext << EOF\n \n-#line 1932 \"configure\"\n+#line 1930 \"configure\"\n #include \"confdefs.h\"\n \n main(){return(0);}\n EOF\n-if { (eval echo configure:1937: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1935: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   ac_cv_prog_cc_works=yes\n   # If we can't run a trivial program, we are probably using a cross compiler.\n   if (./conftest; exit) 2>/dev/null; then\n@@ -1959,19 +1957,19 @@ if test $ac_cv_prog_cc_works = no; then\n   { echo \"configure: error: installation or configuration problem: C compiler cannot create executables.\" 1>&2; exit 1; }\n fi\n echo $ac_n \"checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\"\"... $ac_c\" 1>&6\n-echo \"configure:1963: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n+echo \"configure:1961: checking whether the C compiler ($CC $CFLAGS $LDFLAGS) is a cross-compiler\" >&5\n echo \"$ac_t\"\"$ac_cv_prog_cc_cross\" 1>&6\n cross_compiling=$ac_cv_prog_cc_cross\n \n   for ac_func in $funcs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:1970: checking for $ac_func\" >&5\n+echo \"configure:1968: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 1975 \"configure\"\n+#line 1973 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -1994,7 +1992,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:1998: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:1996: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2020,131 +2018,13 @@ fi\n done\n \n \n-\n-  case \"${host}\" in\n-  *-*-interix)\n-    # On Interix, it wrongly concludes that the MSVC compiler supports alloca.\n-    # (MSVC does on Win32, not on Interix.)\n-    # This should be temporary.\n-\n-    ac_cv_header_alloca_h=no\n-    ac_cv_func_alloca_works=no\n-    ALLOCA=alloca.o\n-    cat >> confdefs.h <<\\EOF\n-#define C_ALLOCA 1\n-EOF\n-    cat >> confdefs.h <<EOF\n-#define STACK_DIRECTION -1\n-EOF\n-    ;;\n-  *)\n-    # The Ultrix 4.2 mips builtin alloca declared by alloca.h only works\n-# for constant arguments.  Useless!\n-echo $ac_n \"checking for working alloca.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2045: checking for working alloca.h\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_header_alloca_h'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 2050 \"configure\"\n-#include \"confdefs.h\"\n-#include <alloca.h>\n-int main() {\n-char *p = alloca(2 * sizeof(int));\n-; return 0; }\n-EOF\n-if { (eval echo configure:2057: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  ac_cv_header_alloca_h=yes\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  ac_cv_header_alloca_h=no\n-fi\n-rm -f conftest*\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_header_alloca_h\" 1>&6\n-if test $ac_cv_header_alloca_h = yes; then\n-  cat >> confdefs.h <<\\EOF\n-#define HAVE_ALLOCA_H 1\n-EOF\n-\n-fi\n-\n-echo $ac_n \"checking for alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:2078: checking for alloca\" >&5\n-if eval \"test \\\"`echo '$''{'ac_cv_func_alloca_works'+set}'`\\\" = set\"; then\n-  echo $ac_n \"(cached) $ac_c\" 1>&6\n-else\n-  cat > conftest.$ac_ext <<EOF\n-#line 2083 \"configure\"\n-#include \"confdefs.h\"\n-\n-#ifdef __GNUC__\n-# define alloca __builtin_alloca\n-#else\n-# ifdef _MSC_VER\n-#  include <malloc.h>\n-#  define alloca _alloca\n-# else\n-#  if HAVE_ALLOCA_H\n-#   include <alloca.h>\n-#  else\n-#   ifdef _AIX\n- #pragma alloca\n-#   else\n-#    ifndef alloca /* predefined by HP cc +Olibcalls */\n-char *alloca ();\n-#    endif\n-#   endif\n-#  endif\n-# endif\n-#endif\n-\n-int main() {\n-char *p = (char *) alloca(1);\n-; return 0; }\n-EOF\n-if { (eval echo configure:2111: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n-  rm -rf conftest*\n-  ac_cv_func_alloca_works=yes\n-else\n-  echo \"configure: failed program was:\" >&5\n-  cat conftest.$ac_ext >&5\n-  rm -rf conftest*\n-  ac_cv_func_alloca_works=no\n-fi\n-rm -f conftest*\n-fi\n-\n-echo \"$ac_t\"\"$ac_cv_func_alloca_works\" 1>&6\n-if test $ac_cv_func_alloca_works = yes; then\n-  cat >> confdefs.h <<\\EOF\n-#define HAVE_ALLOCA 1\n-EOF\n-\n-fi\n-\n-if test $ac_cv_func_alloca_works = no; then\n-  # The SVR3 libPW and SVR4 libucb both contain incompatible functions\n-  # that cause trouble.  Some versions do not even contain alloca or\n-  # contain a buggy version.  If you still want to use their alloca,\n-  # use ar to extract alloca.o from them instead of compiling alloca.c.\n-  ALLOCA=alloca.${ac_objext}\n-  cat >> confdefs.h <<\\EOF\n-#define C_ALLOCA 1\n-EOF\n-\n-\n-echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n-echo \"configure:2143: checking whether alloca needs Cray hooks\" >&5\n+  echo $ac_n \"checking whether alloca needs Cray hooks\"\"... $ac_c\" 1>&6\n+echo \"configure:2023: checking whether alloca needs Cray hooks\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_os_cray'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2148 \"configure\"\n+#line 2028 \"configure\"\n #include \"confdefs.h\"\n #if defined(CRAY) && ! defined(CRAY2)\n webecray\n@@ -2167,14 +2047,14 @@ fi\n \n echo \"$ac_t\"\"$ac_cv_os_cray\" 1>&6\n if test $ac_cv_os_cray = yes; then\n-for ac_func in _getb67 GETB67 getb67; do\n-  echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2173: checking for $ac_func\" >&5\n+  for ac_func in _getb67 GETB67 getb67; do\n+    echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n+echo \"configure:2053: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2178 \"configure\"\n+#line 2058 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2197,7 +2077,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2201: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2081: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2214,25 +2094,24 @@ if eval \"test \\\"`echo '$ac_cv_func_'$ac_func`\\\" = yes\"; then\n   cat >> confdefs.h <<EOF\n #define CRAY_STACKSEG_END $ac_func\n EOF\n-\n   break\n else\n   echo \"$ac_t\"\"no\" 1>&6\n fi\n \n-done\n+  done\n fi\n \n echo $ac_n \"checking stack direction for C alloca\"\"... $ac_c\" 1>&6\n-echo \"configure:2228: checking stack direction for C alloca\" >&5\n+echo \"configure:2107: checking stack direction for C alloca\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_c_stack_direction'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_c_stack_direction=0\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2236 \"configure\"\n+#line 2115 \"configure\"\n #include \"confdefs.h\"\n find_stack_direction ()\n {\n@@ -2251,7 +2130,7 @@ main ()\n   exit (find_stack_direction() < 0);\n }\n EOF\n-if { (eval echo configure:2255: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2134: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_c_stack_direction=1\n else\n@@ -2270,26 +2149,22 @@ cat >> confdefs.h <<EOF\n #define STACK_DIRECTION $ac_cv_c_stack_direction\n EOF\n \n-fi\n-\n-    ;;\n-  esac\n \n   echo $ac_n \"checking for ANSI C header files\"\"... $ac_c\" 1>&6\n-echo \"configure:2280: checking for ANSI C header files\" >&5\n+echo \"configure:2155: checking for ANSI C header files\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_stdc'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2285 \"configure\"\n+#line 2160 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n #include <stdarg.h>\n #include <string.h>\n #include <float.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2293: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2168: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2306,7 +2181,7 @@ rm -f conftest*\n if test $ac_cv_header_stdc = yes; then\n   # SunOS 4.x string.h does not declare mem*, contrary to ANSI.\n cat > conftest.$ac_ext <<EOF\n-#line 2310 \"configure\"\n+#line 2185 \"configure\"\n #include \"confdefs.h\"\n #include <string.h>\n EOF\n@@ -2324,7 +2199,7 @@ fi\n if test $ac_cv_header_stdc = yes; then\n   # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.\n cat > conftest.$ac_ext <<EOF\n-#line 2328 \"configure\"\n+#line 2203 \"configure\"\n #include \"confdefs.h\"\n #include <stdlib.h>\n EOF\n@@ -2345,7 +2220,7 @@ if test \"$cross_compiling\" = yes; then\n   :\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2349 \"configure\"\n+#line 2224 \"configure\"\n #include \"confdefs.h\"\n #include <ctype.h>\n #define ISLOWER(c) ('a' <= (c) && (c) <= 'z')\n@@ -2356,7 +2231,7 @@ if (XOR (islower (i), ISLOWER (i)) || toupper (i) != TOUPPER (i)) exit(2);\n exit (0); }\n \n EOF\n-if { (eval echo configure:2360: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2235: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   :\n else\n@@ -2380,12 +2255,12 @@ EOF\n fi\n \n echo $ac_n \"checking for pid_t\"\"... $ac_c\" 1>&6\n-echo \"configure:2384: checking for pid_t\" >&5\n+echo \"configure:2259: checking for pid_t\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_type_pid_t'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2389 \"configure\"\n+#line 2264 \"configure\"\n #include \"confdefs.h\"\n #include <sys/types.h>\n #if STDC_HEADERS\n@@ -2414,17 +2289,17 @@ fi\n \n ac_safe=`echo \"vfork.h\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for vfork.h\"\"... $ac_c\" 1>&6\n-echo \"configure:2418: checking for vfork.h\" >&5\n+echo \"configure:2293: checking for vfork.h\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2423 \"configure\"\n+#line 2298 \"configure\"\n #include \"confdefs.h\"\n #include <vfork.h>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2428: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2303: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2449,18 +2324,18 @@ else\n fi\n \n echo $ac_n \"checking for working vfork\"\"... $ac_c\" 1>&6\n-echo \"configure:2453: checking for working vfork\" >&5\n+echo \"configure:2328: checking for working vfork\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_vfork_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   echo $ac_n \"checking for vfork\"\"... $ac_c\" 1>&6\n-echo \"configure:2459: checking for vfork\" >&5\n+echo \"configure:2334: checking for vfork\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_vfork'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2464 \"configure\"\n+#line 2339 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char vfork(); below.  */\n@@ -2483,7 +2358,7 @@ vfork();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2487: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2362: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_vfork=yes\"\n else\n@@ -2505,7 +2380,7 @@ fi\n ac_cv_func_vfork_works=$ac_cv_func_vfork\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2509 \"configure\"\n+#line 2384 \"configure\"\n #include \"confdefs.h\"\n /* Thanks to Paul Eggert for this test.  */\n #include <stdio.h>\n@@ -2600,7 +2475,7 @@ main() {\n   }\n }\n EOF\n-if { (eval echo configure:2604: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2479: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_vfork_works=yes\n else\n@@ -2627,19 +2502,19 @@ fi\n   fi\n   for v in $vars; do\n     echo $ac_n \"checking for $v\"\"... $ac_c\" 1>&6\n-echo \"configure:2631: checking for $v\" >&5\n+echo \"configure:2506: checking for $v\" >&5\n     if eval \"test \\\"`echo '$''{'libiberty_cv_var_$v'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2636 \"configure\"\n+#line 2511 \"configure\"\n #include \"confdefs.h\"\n int *p;\n int main() {\n extern int $v; p = &$v;\n ; return 0; }\n EOF\n-if { (eval echo configure:2643: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2518: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"libiberty_cv_var_$v=yes\"\n else\n@@ -2665,12 +2540,12 @@ EOF\n   for ac_func in $checkfuncs\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2669: checking for $ac_func\" >&5\n+echo \"configure:2544: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2674 \"configure\"\n+#line 2549 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2693,7 +2568,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2697: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2572: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2723,17 +2598,17 @@ for ac_hdr in unistd.h\n do\n ac_safe=`echo \"$ac_hdr\" | sed 'y%./+-%__p_%'`\n echo $ac_n \"checking for $ac_hdr\"\"... $ac_c\" 1>&6\n-echo \"configure:2727: checking for $ac_hdr\" >&5\n+echo \"configure:2602: checking for $ac_hdr\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_header_$ac_safe'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2732 \"configure\"\n+#line 2607 \"configure\"\n #include \"confdefs.h\"\n #include <$ac_hdr>\n EOF\n ac_try=\"$ac_cpp conftest.$ac_ext >/dev/null 2>conftest.out\"\n-{ (eval echo configure:2737: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n+{ (eval echo configure:2612: \\\"$ac_try\\\") 1>&5; (eval $ac_try) 2>&5; }\n ac_err=`grep -v '^ *+' conftest.out | grep -v \"^conftest.${ac_ext}\\$\"`\n if test -z \"$ac_err\"; then\n   rm -rf conftest*\n@@ -2762,12 +2637,12 @@ done\n for ac_func in getpagesize\n do\n echo $ac_n \"checking for $ac_func\"\"... $ac_c\" 1>&6\n-echo \"configure:2766: checking for $ac_func\" >&5\n+echo \"configure:2641: checking for $ac_func\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_$ac_func'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2771 \"configure\"\n+#line 2646 \"configure\"\n #include \"confdefs.h\"\n /* System header to define __stub macros and hopefully few prototypes,\n     which can conflict with char $ac_func(); below.  */\n@@ -2790,7 +2665,7 @@ $ac_func();\n \n ; return 0; }\n EOF\n-if { (eval echo configure:2794: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n+if { (eval echo configure:2669: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext}; then\n   rm -rf conftest*\n   eval \"ac_cv_func_$ac_func=yes\"\n else\n@@ -2815,15 +2690,15 @@ fi\n done\n \n echo $ac_n \"checking for working mmap\"\"... $ac_c\" 1>&6\n-echo \"configure:2819: checking for working mmap\" >&5\n+echo \"configure:2694: checking for working mmap\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_mmap_fixed_mapped'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_mmap_fixed_mapped=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2827 \"configure\"\n+#line 2702 \"configure\"\n #include \"confdefs.h\"\n \n /* Thanks to Mike Haertel and Jim Avera for this test.\n@@ -2963,7 +2838,7 @@ main()\n }\n \n EOF\n-if { (eval echo configure:2967: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2842: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_mmap_fixed_mapped=yes\n else\n@@ -2987,15 +2862,15 @@ fi\n \n \n echo $ac_n \"checking for working strncmp\"\"... $ac_c\" 1>&6\n-echo \"configure:2991: checking for working strncmp\" >&5\n+echo \"configure:2866: checking for working strncmp\" >&5\n if eval \"test \\\"`echo '$''{'ac_cv_func_strncmp_works'+set}'`\\\" = set\"; then\n   echo $ac_n \"(cached) $ac_c\" 1>&6\n else\n   if test \"$cross_compiling\" = yes; then\n   ac_cv_func_strncmp_works=no\n else\n   cat > conftest.$ac_ext <<EOF\n-#line 2999 \"configure\"\n+#line 2874 \"configure\"\n #include \"confdefs.h\"\n \n /* Test by Jim Wilson and Kaveh Ghazi.\n@@ -3056,7 +2931,7 @@ main ()\n }\n \n EOF\n-if { (eval echo configure:3060: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n+if { (eval echo configure:2935: \\\"$ac_link\\\") 1>&5; (eval $ac_link) 2>&5; } && test -s conftest${ac_exeext} && (./conftest; exit) 2>/dev/null\n then\n   ac_cv_func_strncmp_works=yes\n else\n@@ -3242,7 +3117,6 @@ s%@host_makefile_frag@%%g\n s%@CPP@%$CPP%g\n s%@CHECK@%$CHECK%g\n s%@LIBOBJS@%$LIBOBJS%g\n-s%@ALLOCA@%$ALLOCA%g\n s%@INSTALL_DEST@%$INSTALL_DEST%g\n \n CEOF"}, {"sha": "6adf48e2c6bc282f6bf85815dfca4b97d5cd3787", "filename": "libiberty/configure.in", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b548dffbda0dcd8ecd29dc91292c48fa40cd98aa/libiberty%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure.in?ref=b548dffbda0dcd8ecd29dc91292c48fa40cd98aa", "patch": "@@ -142,8 +142,7 @@ fi\n \n # For each of these functions, if the host does not provide the\n # function we want to put FN.o in LIBOBJS, and if the host does\n-# provide the function, we want to define HAVE_FN in config.h.  Also,\n-# if the host does not provide alloca, we set ALLOCA to alloca.o\n+# provide the function, we want to define HAVE_FN in config.h.\n \n setobjs=\n CHECK=\n@@ -158,7 +157,6 @@ if test -n \"${with_target_subdir}\"; then\n   # newlib provide and which ones we will be expected to provide.\n \n   if test \"x${with_newlib}\" = \"xyes\"; then\n-    ALLOCA=\"alloca.o\"\n     LIBOBJS=\"asprintf.o basename.o insque.o random.o strdup.o vasprintf.o\"\n \n     for f in $funcs; do\n@@ -277,28 +275,7 @@ if test -z \"${setobjs}\"; then\n   # tests.  This will only work if the compiler works.\n   AC_PROG_CC_WORKS\n   AC_REPLACE_FUNCS($funcs)\n-\n-  case \"${host}\" in\n-  *-*-interix)\n-    # On Interix, it wrongly concludes that the MSVC compiler supports alloca.\n-    # (MSVC does on Win32, not on Interix.)\n-    # This should be temporary.\n-\n-    ac_cv_header_alloca_h=no\n-    ac_cv_func_alloca_works=no\n-    ALLOCA=alloca.o\n-    cat >> confdefs.h <<\\EOF\n-#define C_ALLOCA 1\n-EOF\n-    cat >> confdefs.h <<EOF\n-#define STACK_DIRECTION -1\n-EOF\n-    ;;\n-  *)\n-    AC_FUNC_ALLOCA\n-    ;;\n-  esac\n-\n+  libiberty_AC_FUNC_C_ALLOCA\n   AC_FUNC_VFORK\n   if test $ac_cv_func_vfork_works = no; then\n     LIBOBJS=\"$LIBOBJS vfork.o\""}]}