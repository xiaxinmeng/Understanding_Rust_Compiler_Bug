{"sha": "bfcb501d83778b8f2b4cc52672b940e62e611e17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZjYjUwMWQ4Mzc3OGI4ZjJiNGNjNTI2NzJiOTQwZTYyZTYxMWUxNw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-09T10:10:41Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2016-11-09T10:10:41Z"}, "message": "check.c (gfc_check_move_alloc): Prevent error that avoids aliasing between to and from arguments from rejecting...\n\n2016-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* check.c (gfc_check_move_alloc): Prevent error that avoids\n\taliasing between to and from arguments from rejecting valid\n\tcode.\n\n2016-11-09  Paul Thomas  <pault@gcc.gnu.org>\n\n\t* gfortran.dg/move_alloc_18.f90: New test.\n\nFrom-SVN: r241995", "tree": {"sha": "0d8e1de5220e91df46a0b4b6535bac00cdaf549a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0d8e1de5220e91df46a0b4b6535bac00cdaf549a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfcb501d83778b8f2b4cc52672b940e62e611e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcb501d83778b8f2b4cc52672b940e62e611e17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfcb501d83778b8f2b4cc52672b940e62e611e17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfcb501d83778b8f2b4cc52672b940e62e611e17/comments", "author": null, "committer": null, "parents": [{"sha": "e15861c2da5fc3b5822eedb8669c7331a6edda00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e15861c2da5fc3b5822eedb8669c7331a6edda00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e15861c2da5fc3b5822eedb8669c7331a6edda00"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "bb0beb713e999201ae5496d600f56bfb2e7cace8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=bfcb501d83778b8f2b4cc52672b940e62e611e17", "patch": "@@ -1,3 +1,9 @@\n+2016-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* check.c (gfc_check_move_alloc): Prevent error that avoids\n+\taliasing between to and from arguments from rejecting valid\n+\tcode.\n+\n 2016-11-09  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/71894"}, {"sha": "265fe22594f4fe56b7184b74a908c5d0b3fe1eaf", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=bfcb501d83778b8f2b4cc52672b940e62e611e17", "patch": "@@ -3342,14 +3342,44 @@ gfc_check_move_alloc (gfc_expr *from, gfc_expr *to)\n       return false;\n     }\n \n-  /*  F2003 12.4.1.7  */\n-  if (to->expr_type == EXPR_VARIABLE && from->expr_type ==EXPR_VARIABLE\n+  /*  This is based losely on F2003 12.4.1.7. It is intended to prevent\n+      the likes of to = sym->cmp1->cmp2 and from = sym->cmp1, where cmp1\n+      and cmp2 are allocatable.  After the allocation is transferred,\n+      the 'to' chain is broken by the nullification of the 'from'. A bit\n+      of reflection reveals that this can only occur for derived types\n+      with recursive allocatable components.  */\n+  if (to->expr_type == EXPR_VARIABLE && from->expr_type == EXPR_VARIABLE\n       && !strcmp (to->symtree->n.sym->name, from->symtree->n.sym->name))\n     {\n-      gfc_error (\"The FROM and TO arguments at %L are either the same object \"\n-\t\t \"or subobjects thereof and so violate aliasing restrictions \"\n-\t\t \"(F2003 12.4.1.7)\", &to->where);\n-      return false;\n+      gfc_ref *to_ref, *from_ref;\n+      to_ref = to->ref;\n+      from_ref = from->ref;\n+      bool aliasing = true;\n+\n+      for (; from_ref && to_ref;\n+\t   from_ref = from_ref->next, to_ref = to_ref->next)\n+\t{\n+\t  if (to_ref->type != from->ref->type)\n+\t    aliasing = false;\n+\t  else if (to_ref->type == REF_ARRAY\n+\t\t   && to_ref->u.ar.type != AR_FULL\n+\t\t   && from_ref->u.ar.type != AR_FULL)\n+\t    /* Play safe; assume sections and elements are different.  */\n+\t    aliasing = false;\n+\t  else if (to_ref->type == REF_COMPONENT\n+\t\t   && to_ref->u.c.component != from_ref->u.c.component)\n+\t    aliasing = false;\n+\n+\t  if (!aliasing)\n+\t    break;\n+\t}\n+\n+      if (aliasing)\n+\t{\n+\t  gfc_error (\"The FROM and TO arguments at %L violate aliasing \"\n+\t\t     \"restrictions (F2003 12.4.1.7)\", &to->where);\n+\t  return false;\n+\t}\n     }\n \n   /* CLASS arguments: Make sure the vtab of from is present.  */"}, {"sha": "f3438bee74857c8a367c14dd4429f1c87d180d93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bfcb501d83778b8f2b4cc52672b940e62e611e17", "patch": "@@ -1,3 +1,7 @@\n+2016-11-09  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\t* gfortran.dg/move_alloc_18.f90: New test.\n+\n 2016-11-09  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n \n \tPR middle-end/78256"}, {"sha": "bc72d5d1f87e7d6d7b948c5871678e87536e3bc5", "filename": "gcc/testsuite/gfortran.dg/move_alloc_18.f90", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_18.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfcb501d83778b8f2b4cc52672b940e62e611e17/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_18.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fmove_alloc_18.f90?ref=bfcb501d83778b8f2b4cc52672b940e62e611e17", "patch": "@@ -0,0 +1,21 @@\n+! { dg-do compile }\n+!\n+! Test that the anti-aliasing restriction does not knock out valid code.\n+!\n+! Contributed by  Andrew Balwin on\n+! https://groups.google.com/forum/#!topic/comp.lang.fortran/oiXdl1LPb_s\n+!\n+      PROGRAM TEST\n+        IMPLICIT NONE\n+\n+        TYPE FOOBAR\n+          INTEGER, ALLOCATABLE :: COMP(:)\n+        END TYPE\n+\n+        TYPE (FOOBAR) :: MY_ARRAY(6)\n+\n+        ALLOCATE (MY_ARRAY(1)%COMP(10))\n+\n+        CALL MOVE_ALLOC (MY_ARRAY(1)%COMP, MY_ARRAY(2)%COMP)\n+\n+      END PROGRAM TEST"}]}