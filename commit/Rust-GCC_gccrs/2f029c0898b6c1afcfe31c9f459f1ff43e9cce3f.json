{"sha": "2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmYwMjljMDg5OGI2YzFhZmNmZTMxYzlmNDU5ZjFmZjQzZTljY2UzZg==", "commit": {"author": {"name": "Dominique d'Humieres", "email": "dominiq@lps.ens.fr", "date": "2017-03-22T16:29:30Z"}, "committer": {"name": "Dominique d'Humieres", "email": "dominiq@gcc.gnu.org", "date": "2017-03-22T16:29:30Z"}, "message": "re PR fortran/79602 (translation: globally replace '%s' with %qs)\n\n2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n\n\tPR fortran/79602\n\t* decl.c: Replace '%s' with %qs.\n\t* expr.c: Likewise.\n\t* interface.c: Likewise.\n\t* match.c: Likewise.\n\t* primary.c: Likewise.\n\t* resolve.c: Likewise.\n\n\tPR fortran/79844\n\tPR fortran/80011\n\t* io.c: Remove trailing spaces.\n\t* match.c: Likewise.\n\t* openmp.c: Likewise.\n\t* resolve.c: Likewise.\n\t* trans-intrinsic.c: Likewise.\n\n\tPR fortran/79853\n\t* expr.c: Remove a double spaces.\n\n\tPR fortran/79859\n\t* primary.c: Remove spurious quotes around %qs.\n\nFrom-SVN: r246391", "tree": {"sha": "2feb2461ca530381301a8167867448f482e3fda8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2feb2461ca530381301a8167867448f482e3fda8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/comments", "author": {"login": "DominiquedHumieres", "id": 18394944, "node_id": "MDQ6VXNlcjE4Mzk0OTQ0", "avatar_url": "https://avatars.githubusercontent.com/u/18394944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DominiquedHumieres", "html_url": "https://github.com/DominiquedHumieres", "followers_url": "https://api.github.com/users/DominiquedHumieres/followers", "following_url": "https://api.github.com/users/DominiquedHumieres/following{/other_user}", "gists_url": "https://api.github.com/users/DominiquedHumieres/gists{/gist_id}", "starred_url": "https://api.github.com/users/DominiquedHumieres/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DominiquedHumieres/subscriptions", "organizations_url": "https://api.github.com/users/DominiquedHumieres/orgs", "repos_url": "https://api.github.com/users/DominiquedHumieres/repos", "events_url": "https://api.github.com/users/DominiquedHumieres/events{/privacy}", "received_events_url": "https://api.github.com/users/DominiquedHumieres/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "af181c91a9f33ecf355065bcfbfce66c9fb1e111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af181c91a9f33ecf355065bcfbfce66c9fb1e111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af181c91a9f33ecf355065bcfbfce66c9fb1e111"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "bbfced17928c0d85dd64706ef9e48c8b7bbd2b67", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -1,3 +1,27 @@\n+2017-03-22  Dominique d'Humieres  <dominiq@lps.ens.fr>\n+\n+\tPR fortran/79602\n+\t* decl.c: Replace '%s' with %qs.\n+\t* expr.c: Likewise.\n+\t* interface.c: Likewise.\n+\t* match.c: Likewise.\n+\t* primary.c: Likewise.\n+\t* resolve.c: Likewise.\n+\n+\tPR fortran/79844\n+\tPR fortran/80011\n+\t* io.c: Remove trailing spaces.\n+\t* match.c: Likewise.\n+\t* openmp.c: Likewise.\n+\t* resolve.c: Likewise.\n+\t* trans-intrinsic.c: Likewise.\n+\n+\tPR fortran/79853\n+\t* expr.c: Remove a double spaces.\n+\n+\tPR fortran/79859\n+\t* primary.c: Remove spurious quotes around %qs.\n+\n 2017-03-22  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/80142"}, {"sha": "a04f5a66ec31b129865ecef2b74b2bc4de397815", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -1908,7 +1908,7 @@ build_struct (const char *name, gfc_charlen *cl, gfc_expr **init,\n           c = gfc_find_component (s->sym, name, true, true, NULL);\n           if (c != NULL)\n             {\n-              gfc_error_now (\"Component '%s' at %C already declared at %L\",\n+              gfc_error_now (\"Component %qs at %C already declared at %L\",\n                              name, &c->loc);\n               return false;\n             }\n@@ -3138,7 +3138,7 @@ gfc_match_decl_type_spec (gfc_typespec *ts, int implicit_flag)\n        * don't need all the extra derived-type stuff for structures.  */\n       if (gfc_find_symbol (gfc_dt_upper_string (name), NULL, 1, &sym))\n         {\n-          gfc_error (\"Type name '%s' at %C is ambiguous\", name);\n+          gfc_error (\"Type name %qs at %C is ambiguous\", name);\n           return MATCH_ERROR;\n         }\n       if (sym && sym->attr.flavor == FL_STRUCT)\n@@ -7578,7 +7578,7 @@ access_attr_decl (gfc_statement st)\n \t      if (sym == NULL)\n \t\t{\n \t\t  gfc_error (\"The GENERIC DTIO INTERFACE at %C is not \"\n-\t\t\t     \"present in the MODULE '%s'\",\n+\t\t\t     \"present in the MODULE %qs\",\n \t\t\t     gfc_current_ns->proc_name->name);\n \t\t  return MATCH_ERROR;\n \t\t}\n@@ -8595,7 +8595,7 @@ get_struct_decl (const char *name, sym_flavor fl, locus *decl,\n \n   if (sym->components != NULL || sym->attr.zero_comp)\n     {\n-      gfc_error (\"Type definition of '%s' at %C was already defined at %L\",\n+      gfc_error (\"Type definition of %qs at %C was already defined at %L\",\n                  sym->name, &sym->declared_at);\n       return false;\n     }\n@@ -8748,7 +8748,7 @@ gfc_match_structure_decl (void)\n   /* Make sure the name is not the name of an intrinsic type.  */\n   if (gfc_is_intrinsic_typename (name))\n     {\n-      gfc_error (\"Structure name '%s' at %C cannot be the same as an\"\n+      gfc_error (\"Structure name %qs at %C cannot be the same as an\"\n \t\t \" intrinsic type\", name);\n       return MATCH_ERROR;\n     }"}, {"sha": "0e5f04d0bdf2a599487f9e27d9e29667f2006f12", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -2321,7 +2321,7 @@ check_inquiry (gfc_expr *e, int not_restricted)\n \t\t|| ap->expr->symtree->n.sym->ts.deferred))\n \t  {\n \t    gfc_error (\"Assumed or deferred character length variable %qs \"\n-\t\t\t\" in constant expression at %L\",\n+\t\t\t\"in constant expression at %L\",\n \t\t\tap->expr->symtree->n.sym->name,\n \t\t\t&ap->expr->where);\n \t      return MATCH_ERROR;\n@@ -2792,7 +2792,7 @@ external_spec_function (gfc_expr *e)\n   /* F08:7.1.11.6. */\n   if (f->attr.recursive\n       && !gfc_notify_std (GFC_STD_F2003,\n-\t\t\t  \"Specification function '%s' \"\n+\t\t\t  \"Specification function %qs \"\n \t\t\t  \"at %L cannot be RECURSIVE\",  f->name, &e->where))\n       return false;\n \n@@ -3591,7 +3591,7 @@ gfc_check_pointer_assign (gfc_expr *lvalue, gfc_expr *rvalue)\n       if (!s1 && comp1 && comp1->attr.subroutine && s2 && s2->attr.function)\n \t{\n \t  gfc_error (\"Interface mismatch in procedure pointer assignment \"\n-\t\t     \"at %L: '%s' is not a subroutine\", &rvalue->where, name);\n+\t\t     \"at %L: %qs is not a subroutine\", &rvalue->where, name);\n \t  return false;\n \t}\n "}, {"sha": "6fe0647ecfea3d29b563b8a9f7b7949e23297392", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -4694,7 +4694,7 @@ check_dtio_interface1 (gfc_symbol *derived, gfc_symtree *tb_io_st,\n \n   gcc_assert (dtio_sub);\n   if (!dtio_sub->attr.subroutine)\n-    gfc_error (\"DTIO procedure '%s' at %L must be a subroutine\",\n+    gfc_error (\"DTIO procedure %qs at %L must be a subroutine\",\n \t       dtio_sub->name, &dtio_sub->declared_at);\n \n   arg_num = 0;\n@@ -4703,14 +4703,14 @@ check_dtio_interface1 (gfc_symbol *derived, gfc_symtree *tb_io_st,\n \n   if (arg_num < (formatted ? 6 : 4))\n     {\n-      gfc_error (\"Too few dummy arguments in DTIO procedure '%s' at %L\",\n+      gfc_error (\"Too few dummy arguments in DTIO procedure %qs at %L\",\n \t\t dtio_sub->name, &dtio_sub->declared_at);\n       return;\n     }\n \n   if (arg_num > (formatted ? 6 : 4))\n     {\n-      gfc_error (\"Too many dummy arguments in DTIO procedure '%s' at %L\",\n+      gfc_error (\"Too many dummy arguments in DTIO procedure %qs at %L\",\n \t\t dtio_sub->name, &dtio_sub->declared_at);\n       return;\n     }"}, {"sha": "60df44dc695f2299110eeab75839c3553477f9a2", "filename": "gcc/fortran/io.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fio.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -3837,7 +3837,7 @@ if (condition) \\\n \n \t  io_constraint (unformatted && dt->namelist == NULL,\n \t\t\t \"DELIM= specifier at %L must be with FMT=* or \"\n-\t\t\t \"NML= specifier \", &dt->delim->where);\n+\t\t\t \"NML= specifier\", &dt->delim->where);\n \t}\n     }\n   "}, {"sha": "006ac0312ac9fede15af5bd446402ac9b63b17fd", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -221,7 +221,7 @@ gfc_match_member_sep(gfc_symbol *sym)\n       if (c)\n         goto yes;\n \n-      gfc_error (\"'%s' is neither a defined operator nor a \"\n+      gfc_error (\"%qs is neither a defined operator nor a \"\n                  \"structure component in dotted string at %C\", name);\n       goto error;\n     }\n@@ -3141,7 +3141,7 @@ event_statement (gfc_statement st)\n \t{\n \t  if (saw_stat)\n \t    {\n-\t      gfc_error (\"Redundant STAT tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant STAT tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  stat = tmp;\n@@ -3162,7 +3162,7 @@ event_statement (gfc_statement st)\n \t{\n \t  if (saw_errmsg)\n \t    {\n-\t      gfc_error (\"Redundant ERRMSG tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant ERRMSG tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  errmsg = tmp;\n@@ -3183,7 +3183,7 @@ event_statement (gfc_statement st)\n \t{\n \t  if (saw_until_count)\n \t    {\n-\t      gfc_error (\"Redundant UNTIL_COUNT tag found at %L \",\n+\t      gfc_error (\"Redundant UNTIL_COUNT tag found at %L\",\n \t\t\t &tmp->where);\n \t      goto cleanup;\n \t    }\n@@ -3358,7 +3358,7 @@ lock_unlock_statement (gfc_statement st)\n \t{\n \t  if (saw_stat)\n \t    {\n-\t      gfc_error (\"Redundant STAT tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant STAT tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  stat = tmp;\n@@ -3379,7 +3379,7 @@ lock_unlock_statement (gfc_statement st)\n \t{\n \t  if (saw_errmsg)\n \t    {\n-\t      gfc_error (\"Redundant ERRMSG tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant ERRMSG tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  errmsg = tmp;\n@@ -3400,7 +3400,7 @@ lock_unlock_statement (gfc_statement st)\n \t{\n \t  if (saw_acq_lock)\n \t    {\n-\t      gfc_error (\"Redundant ACQUIRED_LOCK tag found at %L \",\n+\t      gfc_error (\"Redundant ACQUIRED_LOCK tag found at %L\",\n \t\t\t &tmp->where);\n \t      goto cleanup;\n \t    }\n@@ -3570,7 +3570,7 @@ sync_statement (gfc_statement st)\n \t{\n \t  if (saw_stat)\n \t    {\n-\t      gfc_error (\"Redundant STAT tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant STAT tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  stat = tmp;\n@@ -3590,7 +3590,7 @@ sync_statement (gfc_statement st)\n \t{\n \t  if (saw_errmsg)\n \t    {\n-\t      gfc_error (\"Redundant ERRMSG tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant ERRMSG tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \t  errmsg = tmp;\n@@ -4080,7 +4080,7 @@ gfc_match_allocate (void)\n \t  /* Enforce C630.  */\n \t  if (saw_stat)\n \t    {\n-\t      gfc_error (\"Redundant STAT tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant STAT tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \n@@ -4106,7 +4106,7 @@ gfc_match_allocate (void)\n \t  /* Enforce C630.  */\n \t  if (saw_errmsg)\n \t    {\n-\t      gfc_error (\"Redundant ERRMSG tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant ERRMSG tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \n@@ -4129,7 +4129,7 @@ gfc_match_allocate (void)\n \t  /* Enforce C630.  */\n \t  if (saw_source)\n \t    {\n-\t      gfc_error (\"Redundant SOURCE tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant SOURCE tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \n@@ -4166,7 +4166,7 @@ gfc_match_allocate (void)\n \t  /* Check F08:C636.  */\n \t  if (saw_mold)\n \t    {\n-\t      gfc_error (\"Redundant MOLD tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant MOLD tag found at %L\", &tmp->where);\n \t      goto cleanup;\n \t    }\n \n@@ -4417,7 +4417,7 @@ gfc_match_deallocate (void)\n \t{\n \t  if (saw_stat)\n \t    {\n-\t      gfc_error (\"Redundant STAT tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant STAT tag found at %L\", &tmp->where);\n \t      gfc_free_expr (tmp);\n \t      goto cleanup;\n \t    }\n@@ -4442,7 +4442,7 @@ gfc_match_deallocate (void)\n \n \t  if (saw_errmsg)\n \t    {\n-\t      gfc_error (\"Redundant ERRMSG tag found at %L \", &tmp->where);\n+\t      gfc_error (\"Redundant ERRMSG tag found at %L\", &tmp->where);\n \t      gfc_free_expr (tmp);\n \t      goto cleanup;\n \t    }"}, {"sha": "60adde3c63586bb572a934ee9200f5b6f407d3e3", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -676,7 +676,7 @@ gfc_match_use (void)\n \t      || strcmp (new_use->local_name, use_list->module_name) == 0)\n \t    {\n \t      gfc_error (\"The name %qs at %C has already been used as \"\n-\t\t\t \"an external module name.\", use_list->module_name);\n+\t\t\t \"an external module name\", use_list->module_name);\n \t      goto cleanup;\n \t    }\n \t  break;"}, {"sha": "89eecfa2ed17d9bc2a3ce7e007f5b930b320554a", "filename": "gcc/fortran/openmp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fopenmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fopenmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -3855,7 +3855,7 @@ resolve_omp_udr_callback2 (gfc_expr **e, int *, void *)\n       if (!sym->attr.intrinsic\n \t  && sym->attr.if_source == IFSRC_UNKNOWN)\n \tgfc_error (\"Implicitly declared function %s used in \"\n-\t\t   \"!$OMP DECLARE REDUCTION at %L \", sym->name, &(*e)->where);\n+\t\t   \"!$OMP DECLARE REDUCTION at %L\", sym->name, &(*e)->where);\n     }\n   return 0;\n }\n@@ -3904,7 +3904,7 @@ resolve_omp_udr_clause (gfc_omp_namelist *n, gfc_namespace *ns,\n \t  && !sym->attr.intrinsic\n \t  && sym->attr.if_source == IFSRC_UNKNOWN)\n \tgfc_error (\"Implicitly declared subroutine %s used in \"\n-\t\t   \"!$OMP DECLARE REDUCTION at %L \", sym->name,\n+\t\t   \"!$OMP DECLARE REDUCTION at %L\", sym->name,\n \t\t   &copy->loc);\n     }\n   gfc_code_walker (&copy, gfc_dummy_code_callback,"}, {"sha": "c12dc3562d3f2e173d221ac830fb8a11f9dc934f", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -1555,7 +1555,7 @@ match_actual_arg (gfc_expr **result)\n \t  gfc_set_sym_referenced (sym);\n \t  if (sym->attr.flavor == FL_NAMELIST)\n \t    {\n-\t      gfc_error (\"Namelist '%s' can not be an argument at %L\",\n+\t      gfc_error (\"Namelist %qs can not be an argument at %L\",\n \t      sym->name, &where);\n \t      break;\n \t    }\n@@ -2670,7 +2670,7 @@ build_actual_constructor (gfc_structure_ctor_component **comp_head,\n \t\t       && CLASS_DATA (comp)->attr.allocatable))\n \t    {\n \t      if (!gfc_notify_std (GFC_STD_F2008, \"No initializer for \"\n-\t\t\t\t   \"allocatable component '%qs' given in the \"\n+\t\t\t\t   \"allocatable component %qs given in the \"\n \t\t\t\t   \"structure constructor at %C\", comp->name))\n \t\treturn false;\n \t    }\n@@ -3571,7 +3571,7 @@ match_variable (gfc_expr **result, int equiv_flag, int host_flag)\n       && (dt_sym = gfc_find_dt_in_generic (sym)))\n     {\n       if (dt_sym->attr.flavor == FL_DERIVED)\n-        gfc_error (\"Derived type '%s' cannot be used as a variable at %C\",\n+        gfc_error (\"Derived type %qs cannot be used as a variable at %C\",\n                    sym->name);\n       return MATCH_ERROR;\n     }"}, {"sha": "565e02b534b504c72aa47df9e2845dca5f3ad509", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -1342,7 +1342,7 @@ resolve_structure_cons (gfc_expr *expr, int init)\n \t    {\n \t      t = false;\n \t      gfc_error (\"Pointer initialization target at %L \"\n-\t\t\t \"must not be ALLOCATABLE \", &cons->expr->where);\n+\t\t\t \"must not be ALLOCATABLE\", &cons->expr->where);\n \t    }\n \t  if (!a.save)\n \t    {\n@@ -2469,7 +2469,7 @@ resolve_global_procedure (gfc_symbol *sym, locus *where,\n \t{\n \t  gfc_error_opt (OPT_Wargument_mismatch,\n \t\t\t \"Interface mismatch in global procedure %qs at %L:\"\n-\t\t\t \" %s \", sym->name, &sym->declared_at, reason);\n+\t\t\t \" %s\", sym->name, &sym->declared_at, reason);\n \t  goto done;\n \t}\n \n@@ -12345,8 +12345,8 @@ resolve_fl_procedure (gfc_symbol *sym, int mp_flag)\n       if (!gfc_check_result_characteristics (sym, iface, errmsg, 200))\n \t{\n \t  gfc_error (\"%s between the MODULE PROCEDURE declaration \"\n-\t\t     \"in MODULE '%s' and the declaration at %L in \"\n-\t\t     \"(SUB)MODULE '%s'\",\n+\t\t     \"in MODULE %qs and the declaration at %L in \"\n+\t\t     \"(SUB)MODULE %qs\",\n \t\t     errmsg, module_name, &sym->declared_at,\n \t\t     submodule_name ? submodule_name : module_name);\n \t  return false;\n@@ -14729,7 +14729,7 @@ resolve_symbol (gfc_symbol *sym)\n \t  for (; formal; formal = formal->next)\n \t    if (formal->sym && formal->sym->attr.flavor == FL_NAMELIST)\n \t      {\n-\t\tgfc_error (\"Namelist '%s' can not be an argument to \"\n+\t\tgfc_error (\"Namelist %qs can not be an argument to \"\n \t\t\t   \"subroutine or function at %L\",\n \t\t\t   formal->sym->name, &sym->declared_at);\n \t\treturn;"}, {"sha": "3c9e1d5e0370e1e1517c6994f27b3bfb91366c37", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2f029c0898b6c1afcfe31c9f459f1ff43e9cce3f", "patch": "@@ -10229,7 +10229,7 @@ conv_intrinsic_event_query (gfc_code *code)\n \n       if (gfc_is_coindexed (event_expr))\n \t{\n-\t  gfc_error (\"The event variable at %L shall not be coindexed \",\n+\t  gfc_error (\"The event variable at %L shall not be coindexed\",\n \t\t     &event_expr->where);\n           return NULL_TREE;\n \t}"}]}