{"sha": "fe6ae2da798820b1657c5478b34e0c15438a7845", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU2YWUyZGE3OTg4MjBiMTY1N2M1NDc4YjM0ZTBjMTU0MzhhNzg0NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-12-17T12:33:09Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-12-17T12:33:09Z"}, "message": "re PR target/32280 (_mm_srli_si128, heinous code for some shifts)\n\n\tPR target/32280\n\t* config/i386/i386-modes.def (V1TI): New vector mode.\n\t* config/i386/i386.h (VALID_SSE_REG_MODE): Add V1TImode.\n\t(SSE_REG_MODE_P): Ditto.\n\t* config/i386/sse.md (SSEMODE16): New mode iterator.\n\t(AVXMODE16): Ditto.\n\t(avxvecmode): Handle V1TI mode.\n\t(*avx_mov<mode>_internal): Use AVXMODE16 instead of AVXMODE.\n\t(mov<mode>): Use SSEMODE16 instead of SSEMODE.\n\t(*mov<mode>_internal): Ditto.\n\t(push<mode>1): Ditto.\n\t(movmisalign<mode>): Ditto.\n\t(sse2_ashlv1ti): Rename from sse2_ashlti.\n\t(sse2_lshrv1ti): Rename from sse2_lshrti.\n\t(*avx_ashlv1ti): Rename from *avx_ashlti and move from i386.md.\n\t(*avx_lshrv1ti): Rename from *avx_lshrti and move from i386.md.\n\t(vec_shl_<mode>): Convert operands to V1TImode and use V1TI shift.\n\t(vec_shr_<mode>): Ditto.\n\t(*sse2_mulv4si3): Update for renamed sse2_ashlv1ti3.\n\t(udot_prodv4si): Ditto.\n\t* config/i386/i386.c (classify_argument): Handle V1TImode.\n\t(function_arg_advance_32): Ditto.\n\t(function_arg_32): Ditto.\n\t(ix86_expand_sse4_unpack): Convert operands to V1TImode and update\n\tfor renamed gen_sse2_lshrv1ti3.\n\t(ix86_expand_args_builtin) <V2DI_FTYPE_V2DI_INT_CONVERT>: Set rmode\n\tto V1TImode.\n\t(struct builtin_description) <__builtin_ia32_pslldqi128>: Update\n\tfor renamed sse2_ashlv1ti3.\n\t<__builtin_ia32_psrldqi128>: Update for renamed sse2_lshrv1ti3.\n\t\n\tRevert:\n\t2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n\n\tPR target/32280\n\t* config/i386/sse.md (\"sse2_ashlti\", \"sse2_lshrti3\"): Move ...\n\t* config/i386/i386.md (\"sse2_ashlti\", \"sse2_lshrti3\"): ... to here.\n\ntestsuite/ChangeLog:\n\n\tPR target/32280\n\t* gcc.target/i386/pr32280-1.c: New test.\n\nFrom-SVN: r155312", "tree": {"sha": "e7adc9173488e492a41747dde3e5056c1d93d20f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7adc9173488e492a41747dde3e5056c1d93d20f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe6ae2da798820b1657c5478b34e0c15438a7845", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6ae2da798820b1657c5478b34e0c15438a7845", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe6ae2da798820b1657c5478b34e0c15438a7845", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe6ae2da798820b1657c5478b34e0c15438a7845/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bcff5c1ed17e1533c60b0916ffa10be2f414febf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcff5c1ed17e1533c60b0916ffa10be2f414febf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcff5c1ed17e1533c60b0916ffa10be2f414febf"}], "stats": {"total": 293, "additions": 180, "deletions": 113}, "files": [{"sha": "47731da822d44589b8a3e7bf9ae668586eff98fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -1,3 +1,43 @@\n+2009-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32280\n+\t* config/i386/i386-modes.def (V1TI): New vector mode.\n+\t* config/i386/i386.h (VALID_SSE_REG_MODE): Add V1TImode.\n+\t(SSE_REG_MODE_P): Ditto.\n+\t* config/i386/sse.md (SSEMODE16): New mode iterator.\n+\t(AVXMODE16): Ditto.\n+\t(avxvecmode): Handle V1TI mode.\n+\t(*avx_mov<mode>_internal): Use AVXMODE16 instead of AVXMODE.\n+\t(mov<mode>): Use SSEMODE16 instead of SSEMODE.\n+\t(*mov<mode>_internal): Ditto.\n+\t(push<mode>1): Ditto.\n+\t(movmisalign<mode>): Ditto.\n+\t(sse2_ashlv1ti): Rename from sse2_ashlti.\n+\t(sse2_lshrv1ti): Rename from sse2_lshrti.\n+\t(*avx_ashlv1ti): Rename from *avx_ashlti and move from i386.md.\n+\t(*avx_lshrv1ti): Rename from *avx_lshrti and move from i386.md.\n+\t(vec_shl_<mode>): Convert operands to V1TImode and use V1TI shift.\n+\t(vec_shr_<mode>): Ditto.\n+\t(*sse2_mulv4si3): Update for renamed sse2_ashlv1ti3.\n+\t(udot_prodv4si): Ditto.\n+\t* config/i386/i386.c (classify_argument): Handle V1TImode.\n+\t(function_arg_advance_32): Ditto.\n+\t(function_arg_32): Ditto.\n+\t(ix86_expand_sse4_unpack): Convert operands to V1TImode and update\n+\tfor renamed gen_sse2_lshrv1ti3.\n+\t(ix86_expand_args_builtin) <V2DI_FTYPE_V2DI_INT_CONVERT>: Set rmode\n+\tto V1TImode.\n+\t(struct builtin_description) <__builtin_ia32_pslldqi128>: Update\n+\tfor renamed sse2_ashlv1ti3.\n+\t<__builtin_ia32_psrldqi128>: Update for renamed sse2_lshrv1ti3.\n+\t\n+\tRevert:\n+\t2007-06-11  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32280\n+\t* config/i386/sse.md (\"sse2_ashlti\", \"sse2_lshrti3\"): Move ...\n+\t* config/i386/i386.md (\"sse2_ashlti\", \"sse2_lshrti3\"): ... to here.\n+\n 2009-12-17  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR target/42372"}, {"sha": "c1e82cc6d796a4dc27eafcd8e3a800c2e767485c", "filename": "gcc/config/i386/i386-modes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-modes.def?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -80,6 +80,7 @@ VECTOR_MODES (FLOAT, 8);      /*              V4HF V2SF */\n VECTOR_MODES (FLOAT, 16);     /*         V8HF V4SF V2DF */\n VECTOR_MODES (FLOAT, 32);     /*        V16HF V8SF V4DF */\n VECTOR_MODES (FLOAT, 64);     /*       V32HF V16SF V8DF */\n+VECTOR_MODE (INT, TI, 1);     /*                   V1TI */\n VECTOR_MODE (INT, DI, 1);     /*                   V1DI */\n VECTOR_MODE (INT, SI, 1);     /*                   V1SI */\n VECTOR_MODE (INT, QI, 2);     /*                   V2QI */"}, {"sha": "dfe12dee4f93860c89941dc420c4767a22782dac", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -5346,7 +5346,7 @@ classify_argument (enum machine_mode mode, const_tree type,\n     }\n \n   /* for V1xx modes, just use the base mode */\n-  if (VECTOR_MODE_P (mode) && mode != V1DImode\n+  if (VECTOR_MODE_P (mode) && mode != V1DImode && mode != V1TImode\n       && GET_MODE_SIZE (GET_MODE_INNER (mode)) == bytes)\n     mode = GET_MODE_INNER (mode);\n \n@@ -5470,6 +5470,7 @@ classify_argument (enum machine_mode mode, const_tree type,\n       classes[0] = X86_64_SSE_CLASS;\n       classes[1] = X86_64_SSEUP_CLASS;\n       return 2;\n+    case V1TImode:\n     case V1DImode:\n     case V2SFmode:\n     case V2SImode:\n@@ -5814,6 +5815,7 @@ function_arg_advance_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4HImode:\n     case V2SImode:\n     case V2SFmode:\n+    case V1TImode:\n     case V1DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n@@ -6001,6 +6003,7 @@ function_arg_32 (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n     case V4HImode:\n     case V2SImode:\n     case V2SFmode:\n+    case V1TImode:\n     case V1DImode:\n       if (!type || !AGGREGATE_TYPE_P (type))\n \t{\n@@ -16391,9 +16394,9 @@ ix86_expand_sse4_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n     {\n       /* Shift higher 8 bytes to lower 8 bytes.  */\n       src = gen_reg_rtx (imode);\n-      emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, src),\n-\t\t\t\t   gen_lowpart (TImode, operands[1]),\n-\t\t\t\t   GEN_INT (64)));\n+      emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, src),\n+\t\t\t\t     gen_lowpart (V1TImode, operands[1]),\n+\t\t\t\t     GEN_INT (64)));\n     }\n   else\n     src = operands[1];\n@@ -21886,15 +21889,15 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtsd2ss, \"__builtin_ia32_cvtsd2ss\", IX86_BUILTIN_CVTSD2SS, UNKNOWN, (int) V4SF_FTYPE_V4SF_V2DF },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_cvtss2sd, \"__builtin_ia32_cvtss2sd\", IX86_BUILTIN_CVTSS2SD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V4SF },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_ashlti3, \"__builtin_ia32_pslldqi128\", IX86_BUILTIN_PSLLDQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT_CONVERT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_ashlv1ti3, \"__builtin_ia32_pslldqi128\", IX86_BUILTIN_PSLLDQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT_CONVERT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllwi128\", IX86_BUILTIN_PSLLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslldi128\", IX86_BUILTIN_PSLLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllqi128\", IX86_BUILTIN_PSLLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv8hi3, \"__builtin_ia32_psllw128\", IX86_BUILTIN_PSLLW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv4si3, \"__builtin_ia32_pslld128\", IX86_BUILTIN_PSLLD128, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_ashlv2di3, \"__builtin_ia32_psllq128\", IX86_BUILTIN_PSLLQ128, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_COUNT },\n \n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lshrti3, \"__builtin_ia32_psrldqi128\", IX86_BUILTIN_PSRLDQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT_CONVERT },\n+  { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_lshrv1ti3, \"__builtin_ia32_psrldqi128\", IX86_BUILTIN_PSRLDQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_INT_CONVERT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv8hi3, \"__builtin_ia32_psrlwi128\", IX86_BUILTIN_PSRLWI128, UNKNOWN, (int) V8HI_FTYPE_V8HI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv4si3, \"__builtin_ia32_psrldi128\", IX86_BUILTIN_PSRLDI128, UNKNOWN, (int) V4SI_FTYPE_V4SI_SI_COUNT },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_lshrv2di3, \"__builtin_ia32_psrlqi128\", IX86_BUILTIN_PSRLQI128, UNKNOWN, (int) V2DI_FTYPE_V2DI_SI_COUNT },\n@@ -23492,7 +23495,7 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n       break;\n     case V2DI_FTYPE_V2DI_INT_CONVERT:\n       nargs = 2;\n-      rmode = V2DImode;\n+      rmode = V1TImode;\n       nargs_constant = 1;\n       break;\n     case V8HI_FTYPE_V8HI_INT:"}, {"sha": "962a14c80052b9e9cfd40eb787aa90309e655f52", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -1013,7 +1013,8 @@ enum target_cpu_default\n    || (MODE) == V2DImode || (MODE) == DFmode)\n \n #define VALID_SSE_REG_MODE(MODE)\t\t\t\t\t\\\n-  ((MODE) == TImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\\\n+  ((MODE) == V1TImode || (MODE) == TImode\t\t\t\t\\\n+   || (MODE) == V4SFmode || (MODE) == V4SImode\t\t\t\t\\\n    || (MODE) == SFmode || (MODE) == TFmode)\n \n #define VALID_MMX_REG_MODE_3DNOW(MODE) \\\n@@ -1051,11 +1052,11 @@ enum target_cpu_default\n \n /* Return true for modes passed in SSE registers.  */\n #define SSE_REG_MODE_P(MODE)\t\t\t\t\t\t\\\n-  ((MODE) == TImode || (MODE) == V16QImode || (MODE) == TFmode\t\t\\\n-   || (MODE) == V8HImode || (MODE) == V2DFmode || (MODE) == V2DImode\t\\\n-   || (MODE) == V4SFmode || (MODE) == V4SImode || (MODE) == V32QImode\t\\\n-   || (MODE) == V16HImode || (MODE) == V8SImode || (MODE) == V4DImode\t\\\n-   || (MODE) == V8SFmode || (MODE) == V4DFmode)\n+  ((MODE) == V1TImode || (MODE) == TImode || (MODE) == V16QImode\t\\\n+   || (MODE) == TFmode || (MODE) == V8HImode || (MODE) == V2DFmode\t\\\n+   || (MODE) == V2DImode || (MODE) == V4SFmode || (MODE) == V4SImode\t\\\n+   || (MODE) == V32QImode || (MODE) == V16HImode || (MODE) == V8SImode\t\\\n+   || (MODE) == V4DImode || (MODE) == V8SFmode || (MODE) == V4DFmode)\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.  */\n "}, {"sha": "b4a8a83064baaea2530cf2efaff182e06c190eba", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -717,10 +717,8 @@\n \t\t\t\t (umax \"maxu\") (umin \"minu\")])\n (define_code_attr maxminfprefix [(smax \"max\") (smin \"min\")])\n \n-;; Mapping of parallel logic operators\n+;; Mapping of logic operators\n (define_code_iterator any_logic [and ior xor])\n-\n-;; Mapping of parallel logic operators\n (define_code_iterator any_or [ior xor])\n \n ;; Base name for insn mnemonic.\n@@ -9680,37 +9678,6 @@\n   \"TARGET_64BIT\"\n   \"ix86_expand_binary_operator (ASHIFT, TImode, operands); DONE;\")\n \n-;; This pattern must be defined before *ashlti3_1 to prevent\n-;; combine pass from converting sse2_ashlti3 to *ashlti3_1.\n-\n-(define_insn \"*avx_ashlti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-\t(ashift:TI (match_operand:TI 1 \"register_operand\" \"x\")\n-\t\t   (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_AVX\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"vpslldq\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_ashlti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n-\t(ashift:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t   (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"pslldq\\t{%2, %0|%0, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*ashlti3_1\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=&r,r\")\n \t(ashift:TI (match_operand:TI 1 \"reg_or_pm1_operand\" \"n,0\")\n@@ -11534,37 +11501,6 @@\n   \"TARGET_64BIT\"\n   \"ix86_expand_binary_operator (LSHIFTRT, TImode, operands); DONE;\")\n \n-;; This pattern must be defined before *lshrti3_1 to prevent\n-;; combine pass from converting sse2_lshrti3 to *lshrti3_1.\n-\n-(define_insn \"*avx_lshrti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n- \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"x\")\n-\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_AVX\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix\" \"vex\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n-(define_insn \"sse2_lshrti3\"\n-  [(set (match_operand:TI 0 \"register_operand\" \"=x\")\n- \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")\n-\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n-  \"TARGET_SSE2\"\n-{\n-  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n-  return \"psrldq\\t{%2, %0|%0, %2}\";\n-}\n-  [(set_attr \"type\" \"sseishft\")\n-   (set_attr \"prefix_data16\" \"1\")\n-   (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"mode\" \"TI\")])\n-\n (define_insn \"*lshrti3_1\"\n   [(set (match_operand:TI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:TI (match_operand:TI 1 \"register_operand\" \"0\")"}, {"sha": "9bbea8031a5cb36a3587a6a9e4c1102fcdc6742a", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 98, "deletions": 35, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -19,12 +19,12 @@\n ;; <http://www.gnu.org/licenses/>.\n \n \n-;; 16 byte integral modes handled by SSE, minus TImode, which gets\n-;; special-cased for TARGET_64BIT.\n+;; 16 byte integral modes handled by SSE\n (define_mode_iterator SSEMODEI [V16QI V8HI V4SI V2DI])\n \n ;; All 16-byte vector modes handled by SSE\n (define_mode_iterator SSEMODE [V16QI V8HI V4SI V2DI V4SF V2DF])\n+(define_mode_iterator SSEMODE16 [V16QI V8HI V4SI V2DI V1TI V4SF V2DF])\n \n ;; 32 byte integral vector modes handled by AVX\n (define_mode_iterator AVX256MODEI [V32QI V16HI V8SI V4DI])\n@@ -39,7 +39,10 @@\n (define_mode_iterator AVXMODEDI [V4DI V2DI])\n \n ;; All vector modes handled by AVX\n-(define_mode_iterator AVXMODE [V16QI V8HI V4SI V2DI V4SF V2DF V32QI V16HI V8SI V4DI V8SF V4DF])\n+(define_mode_iterator AVXMODE\n+  [V16QI V8HI V4SI V2DI V4SF V2DF V32QI V16HI V8SI V4DI V8SF V4DF])\n+(define_mode_iterator AVXMODE16\n+  [V16QI V8HI V4SI V2DI V1TI V4SF V2DF V32QI V16HI V8SI V4DI V8SF V4DF])\n \n ;; Mix-n-match\n (define_mode_iterator SSEMODE12 [V16QI V8HI])\n@@ -121,9 +124,9 @@\n \n ;; Mapping for AVX\n (define_mode_attr avxvecmode\n-  [(V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V4SF \"V4SF\")\n-   (V2DF \"V2DF\") (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")\n-   (V8SF \"V8SF\") (V4DF \"V4DF\")])\n+  [(V16QI \"TI\") (V8HI \"TI\") (V4SI \"TI\") (V2DI \"TI\") (V1TI \"TI\")\n+   (V4SF \"V4SF\") (V8SF \"V8SF\") (V2DF \"V2DF\") (V4DF \"V4DF\")\n+   (V32QI \"OI\") (V16HI \"OI\") (V8SI \"OI\") (V4DI \"OI\")])\n (define_mode_attr avxvecpsmode\n   [(V16QI \"V4SF\") (V8HI \"V4SF\") (V4SI \"V4SF\") (V2DI \"V4SF\")\n    (V32QI \"V8SF\") (V16HI \"V8SF\") (V8SI \"V8SF\") (V4DI \"V8SF\")])\n@@ -172,8 +175,8 @@\n })\n \n (define_insn \"*avx_mov<mode>_internal\"\n-  [(set (match_operand:AVXMODE 0 \"nonimmediate_operand\" \"=x,x ,m\")\n-\t(match_operand:AVXMODE 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n+  [(set (match_operand:AVXMODE16 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+\t(match_operand:AVXMODE16 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n   \"TARGET_AVX\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n@@ -207,17 +210,17 @@\n ;; This is essential for maintaining stable calling conventions.\n \n (define_expand \"mov<mode>\"\n-  [(set (match_operand:SSEMODE 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SSEMODE 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:SSEMODE16 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:SSEMODE16 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_move (<MODE>mode, operands);\n   DONE;\n })\n \n (define_insn \"*mov<mode>_internal\"\n-  [(set (match_operand:SSEMODE 0 \"nonimmediate_operand\" \"=x,x ,m\")\n-\t(match_operand:SSEMODE 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n+  [(set (match_operand:SSEMODE16 0 \"nonimmediate_operand\" \"=x,x ,m\")\n+\t(match_operand:SSEMODE16 1 \"nonimmediate_or_sse_const_operand\"  \"C ,xm,x\"))]\n   \"TARGET_SSE\n    && (register_operand (operands[0], <MODE>mode)\n        || register_operand (operands[1], <MODE>mode))\"\n@@ -326,7 +329,7 @@\n })\n \n (define_expand \"push<mode>1\"\n-  [(match_operand:SSEMODE 0 \"register_operand\" \"\")]\n+  [(match_operand:SSEMODE16 0 \"register_operand\" \"\")]\n   \"TARGET_SSE\"\n {\n   ix86_expand_push (<MODE>mode, operands[0]);\n@@ -343,8 +346,8 @@\n })\n \n (define_expand \"movmisalign<mode>\"\n-  [(set (match_operand:SSEMODE 0 \"nonimmediate_operand\" \"\")\n-\t(match_operand:SSEMODE 1 \"nonimmediate_operand\" \"\"))]\n+  [(set (match_operand:SSEMODE16 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:SSEMODE16 1 \"nonimmediate_operand\" \"\"))]\n   \"TARGET_SSE\"\n {\n   ix86_expand_vector_move_misalign (<MODE>mode, operands);\n@@ -5537,12 +5540,12 @@\n   /* Shift both input vectors down one element, so that elements 3\n      and 1 are now in the slots for elements 2 and 0.  For K8, at\n      least, this is faster than using a shuffle.  */\n-  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t2),\n-\t\t\t       gen_lowpart (TImode, op1),\n-\t\t\t       thirtytwo));\n-  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t3),\n-\t\t\t       gen_lowpart (TImode, op2),\n-\t\t\t       thirtytwo));\n+  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t2),\n+\t\t\t\t gen_lowpart (V1TImode, op1),\n+\t\t\t\t thirtytwo));\n+  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t3),\n+\t\t\t\t gen_lowpart (V1TImode, op2),\n+\t\t\t\t thirtytwo));\n   /* Multiply elements 3 and 1.  */\n   emit_insn (gen_sse2_umulv2siv2di3 (gen_lowpart (V2DImode, t4),\n \t\t\t\t     t2, t3));\n@@ -5837,12 +5840,12 @@\n \n   t2 = gen_reg_rtx (V4SImode);\n   t3 = gen_reg_rtx (V4SImode);\n-  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t2),\n-                               gen_lowpart (TImode, operands[1]),\n-                               GEN_INT (32)));\n-  emit_insn (gen_sse2_lshrti3 (gen_lowpart (TImode, t3),\n-                               gen_lowpart (TImode, operands[2]),\n-                               GEN_INT (32)));\n+  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t2),\n+\t\t\t\t gen_lowpart (V1TImode, operands[1]),\n+\t\t\t\t GEN_INT (32)));\n+  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, t3),\n+\t\t\t\t gen_lowpart (V1TImode, operands[2]),\n+\t\t\t\t GEN_INT (32)));\n \n   t4 = gen_reg_rtx (V2DImode);\n   emit_insn (gen_sse2_umulv2siv2di3 (t4, t2, t3));\n@@ -5881,6 +5884,21 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*avx_lshrv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n+ \t(lshiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\" \"x\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+  \"TARGET_AVX\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+  return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"*avx_lshr<mode>3\"\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(lshiftrt:SSEMODE248\n@@ -5896,6 +5914,21 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_lshrv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n+ \t(lshiftrt:V1TI\n+\t (match_operand:V1TI 1 \"register_operand\" \"0\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+  return \"psrldq\\t{%2, %0|%0, %2}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"lshr<mode>3\"\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(lshiftrt:SSEMODE248\n@@ -5911,6 +5944,20 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"*avx_ashlv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n+\t(ashift:V1TI (match_operand:V1TI 1 \"register_operand\" \"x\")\n+\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+  \"TARGET_AVX\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+  return \"vpslldq\\t{%2, %1, %0|%0, %1, %2}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"*avx_ashl<mode>3\"\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(ashift:SSEMODE248\n@@ -5926,6 +5973,20 @@\n        (const_string \"0\")))\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_ashlv1ti3\"\n+  [(set (match_operand:V1TI 0 \"register_operand\" \"=x\")\n+\t(ashift:V1TI (match_operand:V1TI 1 \"register_operand\" \"0\")\n+\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"n\")))]\n+  \"TARGET_SSE2\"\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) / 8);\n+  return \"pslldq\\t{%2, %0|%0, %2}\";\n+}\n+  [(set_attr \"type\" \"sseishft\")\n+   (set_attr \"prefix_data16\" \"1\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"ashl<mode>3\"\n   [(set (match_operand:SSEMODE248 0 \"register_operand\" \"=x\")\n \t(ashift:SSEMODE248\n@@ -5943,22 +6004,24 @@\n \n (define_expand \"vec_shl_<mode>\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-        (ashift:TI (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n-\t\t   (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n+        (ashift:V1TI\n+\t (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  operands[0] = gen_lowpart (TImode, operands[0]);\n-  operands[1] = gen_lowpart (TImode, operands[1]);\n+  operands[0] = gen_lowpart (V1TImode, operands[0]);\n+  operands[1] = gen_lowpart (V1TImode, operands[1]);\n })\n \n (define_expand \"vec_shr_<mode>\"\n   [(set (match_operand:SSEMODEI 0 \"register_operand\" \"\")\n-        (lshiftrt:TI (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n-\t\t     (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n+        (lshiftrt:V1TI\n+\t (match_operand:SSEMODEI 1 \"register_operand\" \"\")\n+\t (match_operand:SI 2 \"const_0_to_255_mul_8_operand\" \"\")))]\n   \"TARGET_SSE2\"\n {\n-  operands[0] = gen_lowpart (TImode, operands[0]);\n-  operands[1] = gen_lowpart (TImode, operands[1]);\n+  operands[0] = gen_lowpart (V1TImode, operands[0]);\n+  operands[1] = gen_lowpart (V1TImode, operands[1]);\n })\n \n (define_insn \"*avx_<code><mode>3\""}, {"sha": "5de2902a9c42b8df06b78f2e26cc09c4df523256", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -1,3 +1,8 @@\n+2009-12-17  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/32280\n+\t* gcc.target/i386/pr32280-1.c: New test.\n+\n 2009-12-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* objc/execute/forward-1.x: XFAIL for -fgnu-runtime on"}, {"sha": "1dbe2ccbb4f71462ad5b28940cf1f44cabbfb6dd", "filename": "gcc/testsuite/gcc.target/i386/pr32280-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32280-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe6ae2da798820b1657c5478b34e0c15438a7845/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32280-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr32280-1.c?ref=fe6ae2da798820b1657c5478b34e0c15438a7845", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O2\" } */\n+\n+__uint128_t\n+t1 (__uint128_t a)\n+{\n+  return a << 8;\n+}\n+\n+__uint128_t\n+t2 (__uint128_t a)\n+{\n+  return a >> 8;\n+}\n+\n+/* { dg-final { scan-assembler-not \"pslldq\" } } */\n+/* { dg-final { scan-assembler-not \"psrldq\" } } */"}]}