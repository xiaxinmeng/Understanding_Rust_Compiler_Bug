{"sha": "b6b66006787b0991e94f15c7b5c56403f1eb85fb", "node_id": "C_kwDOANBUbNoAKGI2YjY2MDA2Nzg3YjA5OTFlOTRmMTVjN2I1YzU2NDAzZjFlYjg1ZmI", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-05T08:50:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-05-05T20:13:58Z"}, "message": "libstdc++: Fixes for tests that fail with -fno-rtti\n\nThis disables a use of dynamic_cast that is not valid for -fno-rtti and\nadjusts some tests so they don't FAIL with -fno-rtti. Some tests are\nskipped completely, and others just make use of typeid conditional on\nthe __cpp_rtti macro. A couple of tests were using typeid to verify\ntypedefs denote the right type, which can be done at compile-time using\ntemplates instead.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/memory_resource [!__cpp_rtti]\n\t(__resource_adaptor_imp::do_is_equal): Do not use dynamic_cast\n\twhen RTTI is disabled.\n\t* testsuite/17_intro/freestanding.cc: Require RTTI.\n\t* testsuite/18_support/exception/38732.cc: Likewise.\n\t* testsuite/18_support/exception_ptr/rethrow_exception.cc:\n\tLikewise.\n\t* testsuite/18_support/nested_exception/68139.cc: Likewise.\n\t* testsuite/18_support/nested_exception/rethrow_if_nested.cc:\n\tLikewise.\n\t* testsuite/18_support/type_info/103240.cc: Likewise.\n\t* testsuite/18_support/type_info/fundamental.cc: Likewise.\n\t* testsuite/18_support/type_info/hash_code.cc: Likewise.\n\t* testsuite/20_util/any/assign/emplace.cc: Likewise.\n\t* testsuite/20_util/any/cons/in_place.cc: Likewise.\n\t* testsuite/20_util/any/misc/any_cast.cc: Likewise.\n\t* testsuite/20_util/any/observers/type.cc: Likewise.\n\t* testsuite/20_util/function/1.cc: Likewise.\n\t* testsuite/20_util/function/2.cc: Likewise.\n\t* testsuite/20_util/function/3.cc: Likewise.\n\t* testsuite/20_util/function/4.cc: Likewise.\n\t* testsuite/20_util/function/5.cc: Likewise.\n\t* testsuite/20_util/function/6.cc: Likewise.\n\t* testsuite/20_util/function/7.cc: Likewise.\n\t* testsuite/20_util/function/8.cc: Likewise.\n\t* testsuite/20_util/polymorphic_allocator/resource.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/casts/1.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/casts/rval.cc: Likewise.\n\t* testsuite/20_util/shared_ptr/cons/unique_ptr_deleter_ref_2.cc:\n\tLikewise.\n\t* testsuite/20_util/shared_ptr/misc/get_deleter.cc: Likewise.\n\t* testsuite/20_util/typeindex/comparison_operators.cc: Likewise.\n\t* testsuite/20_util/typeindex/comparison_operators_c++20.cc:\n\tLikewise.\n\t* testsuite/20_util/typeindex/hash.cc: Likewise.\n\t* testsuite/20_util/typeindex/hash_code.cc: Likewise.\n\t* testsuite/20_util/typeindex/name.cc: Likewise.\n\t* testsuite/22_locale/ctype/is/string/89728_neg.cc: Likewise.\n\t* testsuite/22_locale/global_templates/standard_facet_hierarchies.cc:\n\tLikewise.\n\t* testsuite/22_locale/global_templates/user_facet_hierarchies.cc:\n\tLikewise.\n\t* testsuite/22_locale/locale/13630.cc: Check type without using\n\tRTTI.\n\t* testsuite/23_containers/array/requirements/non_default_constructible.cc:\n\tRequire RTTI.\n\t* testsuite/27_io/basic_ostream/emit/1.cc: Likewise.\n\t* testsuite/27_io/fpos/14320-1.cc: Check type without using RTTI.\n\t* testsuite/27_io/fpos/mbstate_t/12065.cc: Require RTTI.\n\t* testsuite/27_io/ios_base/failure/dual_abi.cc: Likewise.\n\t* testsuite/experimental/any/misc/any_cast.cc: Likewise.\n\t* testsuite/experimental/any/observers/type.cc: Likewise.\n\t* testsuite/experimental/memory_resource/resource_adaptor.cc:\n\tLikewise.\n\t* testsuite/lib/libstdc++.exp (check_effective_target_rtti):\n\tDefine new proc.\n\t* testsuite/tr1/3_function_objects/function/1.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/2.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/3.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/4.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/5.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/6.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/7.cc: Likewise.\n\t* testsuite/tr1/3_function_objects/function/8.cc: Likewise.\n\t* testsuite/tr2/bases/value.cc: Likewise.\n\t* testsuite/tr2/direct_bases/value.cc: Likewise.\n\t* testsuite/util/exception/safety.h [!__cpp_rtti]: Don't print\n\ttypes without RTTI.", "tree": {"sha": "18845b0f848d1cb6edcb7e866efb6e18a36ca2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18845b0f848d1cb6edcb7e866efb6e18a36ca2eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b66006787b0991e94f15c7b5c56403f1eb85fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b66006787b0991e94f15c7b5c56403f1eb85fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b66006787b0991e94f15c7b5c56403f1eb85fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b66006787b0991e94f15c7b5c56403f1eb85fb/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06a79b82366a53fffc113f3bb5f873dbc70e381", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b06a79b82366a53fffc113f3bb5f873dbc70e381", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b06a79b82366a53fffc113f3bb5f873dbc70e381"}], "stats": {"total": 347, "additions": 284, "deletions": 63}, "files": [{"sha": "d70a93219faabd181649d6c674665ac9a2b72096", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -464,8 +464,13 @@ namespace pmr {\n       virtual bool\n       do_is_equal(const memory_resource& __other) const noexcept override\n       {\n+#if __cpp_rtti\n \tif (auto __p = dynamic_cast<const __resource_adaptor_imp*>(&__other))\n \t  return _M_alloc == __p->_M_alloc;\n+#else\n+\tif (this == &__other) // Need RTTI to do better than this.\n+\t  return true;\n+#endif\n \treturn false;\n       }\n "}, {"sha": "ab87fb681572b5cb18b5a592bd80ee1d7074dc7f", "filename": "libstdc++-v3/testsuite/17_intro/freestanding.cc", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ffreestanding.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ffreestanding.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F17_intro%2Ffreestanding.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -38,8 +38,10 @@ int main()\n {\n   std::exception e;\n \n+#if __cpp_rtti\n   const char* str __attribute__((unused)) = typeid(e).name();\n-  \n+#endif\n+\n   typedef std::numeric_limits<long> limit_type;\n   limit_type limit_l __attribute__((unused));\n   int r __attribute__((unused)) = limit_type::radix;"}, {"sha": "cccd4209e149307dbe59b914f01a3fef240b91e6", "filename": "libstdc++-v3/testsuite/18_support/exception/38732.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception%2F38732.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -68,21 +68,27 @@ void test01 ()\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n     VERIFY ( exc != 0 );\n+#if __cpp_rtti\n     VERIFY ( typeid(int) == *exc->exceptionType );\n+#endif\n   }\n   try {\n     throw 0LL;\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n     VERIFY ( exc != 0 );\n+#if __cpp_rtti\n     VERIFY ( typeid(long long int) == *exc->exceptionType );\n+#endif\n   }\n   try {\n     throw 0.0;\n   } catch(...) {\n     __cxa_exception *exc = __cxa_get_globals()->caughtExceptions;\n     VERIFY ( exc != 0 );\n+#if __cpp_rtti\n     VERIFY ( typeid(double) == *exc->exceptionType );\n+#endif\n   }\n }\n "}, {"sha": "5e82d12b7d0f564238de4962972f7189a6f2110e", "filename": "libstdc++-v3/testsuite/18_support/exception_ptr/rethrow_exception.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frethrow_exception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frethrow_exception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fexception_ptr%2Frethrow_exception.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -44,7 +44,9 @@ void test02()\n   try {\n     rethrow_exception(make_exception_ptr(runtime_error(\"test\")));\n   } catch(exception &e) {\n+#if __cpp_rtti\n     VERIFY( typeid(e) == typeid(runtime_error) );\n+#endif\n     VERIFY( strcmp(e.what(), \"test\") == 0 );\n   }\n }"}, {"sha": "4abe459d73978d0ed16af310f6939f8dbd25ca5d", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/68139.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F68139.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F68139.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2F68139.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2015-2022 Free Software Foundation, Inc.\n //"}, {"sha": "a10151cc1603728492bd84e7ee2d56a5613f23a0", "filename": "libstdc++-v3/testsuite/18_support/nested_exception/rethrow_if_nested.cc", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fnested_exception%2Frethrow_if_nested.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2009-2022 Free Software Foundation, Inc.\n //\n@@ -27,7 +28,7 @@ inline base::~base() noexcept = default;\n \n struct derived2 : base, std::nested_exception { };\n \n-void test01() \n+void test01()\n {\n   bool test = false;\n \n@@ -52,7 +53,7 @@ void test01()\n   VERIFY( test );\n }\n \n-void test02() \n+void test02()\n {\n   bool test = false;\n \n@@ -69,7 +70,7 @@ void test02()\n   VERIFY( test );\n }\n \n-void test03() \n+void test03()\n {\n   bool test = false;\n "}, {"sha": "d2dd88d42c8cf8bde37c1699a250c3a0ffb10940", "filename": "libstdc++-v3/testsuite/18_support/type_info/103240.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2F103240.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2F103240.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2F103240.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run }\n // { dg-require-sharedlib \"\" }\n+// { dg-require-effective-target rtti }\n // { dg-options \"./testsuite_shared.so\" }\n \n #include <typeinfo>"}, {"sha": "34883c8cb1509a1396470a85955e0a568c59d059", "filename": "libstdc++-v3/testsuite/18_support/type_info/fundamental.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Ffundamental.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,5 +1,6 @@\n // { dg-do run { target c++11 } }\n // { dg-require-effective-target dfp }\n+// { dg-require-effective-target rtti }\n \n // 2011-02-23  Benjamin Kosnik  <bkoz@redhat.com>\n //\n@@ -27,10 +28,10 @@\n template<typename _Tp>\n   std::string\n   gen_type_info()\n-  { \n-    std::string s1 = typeid(_Tp).name(); \n-    std::string s2 = typeid(_Tp*).name(); \n-    std::string s3 = typeid(const _Tp*).name(); \n+  {\n+    std::string s1 = typeid(_Tp).name();\n+    std::string s2 = typeid(_Tp*).name();\n+    std::string s3 = typeid(const _Tp*).name();\n     return std::max(std::max(s1, s2), s3);\n   }\n "}, {"sha": "efbeb84a10c166428c374f327379c98125a58dba", "filename": "libstdc++-v3/testsuite/18_support/type_info/hash_code.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Ftype_info%2Fhash_code.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // 2010-09-21  Paolo Carlini  <paolo.carlini@oracle.com>\n //"}, {"sha": "74885f923e4f959d1e69d9b12a66c9df95d1ae2a", "filename": "libstdc++-v3/testsuite/20_util/any/assign/emplace.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2Femplace.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -58,6 +58,7 @@ int main()\n   combined& c2 = std::any_cast<combined&>(o5);\n   VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n \t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+#if __cpp_rtti\n   std::any o6;\n   o6.emplace<const int&>(i);\n   VERIFY(o6.type() == o.type());\n@@ -71,6 +72,7 @@ int main()\n   std::any o10;\n   o10.emplace<char*>(nullptr);\n   VERIFY(o9.type() == o10.type());\n+#endif\n   std::any o11;\n   VERIFY(&o11.emplace<int>(42) == &std::any_cast<int&>(o11));\n   VERIFY(&o11.emplace<std::vector<int>>({1,2,3}) =="}, {"sha": "fabffe5a890f2495c6fbf665f09da0e92fee798b", "filename": "libstdc++-v3/testsuite/20_util/any/cons/in_place.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2Fin_place.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -53,6 +53,7 @@ int main()\n   combined& c2 = std::any_cast<combined&>(o5);\n   VERIFY(c2.v[0] == 1 && c2.v[1] == 2\n \t && std::get<0>(c2.t) == 3 && std::get<1>(c2.t) == 4 );\n+#if __cpp_rtti\n   std::any o6(std::in_place_type<int&>, i);\n   VERIFY(o6.type() == o.type());\n   std::any o7(std::in_place_type<void()>, nullptr);\n@@ -61,4 +62,5 @@ int main()\n   std::any o9(std::in_place_type<char(&)[42]>, nullptr);\n   std::any o10(std::in_place_type<char*>, nullptr);\n   VERIFY(o9.type() == o10.type());\n+#endif\n }"}, {"sha": "8d63dfbba9b979e187f62de56c7764859580f3c7", "filename": "libstdc++-v3/testsuite/20_util/any/misc/any_cast.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fmisc%2Fany_cast.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -157,13 +157,19 @@ void test07()\n {\n   int arr[3];\n   any a(arr);\n+#if __cpp_rtti\n   VERIFY( a.type() == typeid(int*) );\t// contained value is decayed\n+#endif\n \n   int (*p1)[3] = any_cast<int[3]>(&a);\n+#if __cpp_rtti\n   VERIFY( a.type() != typeid(int[3]) ); // so any_cast should return nullptr\n+#endif\n   VERIFY( p1 == nullptr );\n   int (*p2)[] = any_cast<int[]>(&a);\n+#if __cpp_rtti\n   VERIFY( a.type() != typeid(int[]) );\t// so any_cast should return nullptr\n+#endif\n   VERIFY( p2 == nullptr );\n   const int (*p3)[] = any_cast<int[]>(&std::as_const(a));\n   VERIFY( p3 == nullptr );"}, {"sha": "4d2f302d31eeef56f0fa2840c4d867a634f37c6b", "filename": "libstdc++-v3/testsuite/20_util/any/observers/type.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fobservers%2Ftype.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++17 } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2014-2022 Free Software Foundation, Inc.\n //"}, {"sha": "152b21f6517c58f34bc5e90d4654910f7cc7c163", "filename": "libstdc++-v3/testsuite/20_util/function/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F1.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -73,8 +73,10 @@ void test01()\n     }\n   VERIFY( thrown );\n \n+#if __cpp_rtti\n   // target_type returns typeid(void)\n   VERIFY( f1.target_type() == typeid(void) );\n+#endif\n \n   // target() always returns a NULL pointer\n   VERIFY( f1.target<int (*)(float)>() == 0);"}, {"sha": "278dc89736c488f950315b2a0c24e9831ca647e5", "filename": "libstdc++-v3/testsuite/20_util/function/2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F2.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -62,7 +62,9 @@ void test02()\n \n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n+#if __cpp_rtti\n   VERIFY( typeid(int(*)(float)) == f1.target_type() );\n+#endif\n   VERIFY( f2.target<int(*)(float)>() != 0 );\n   VERIFY( *f2.target<int(*)(float)>() == &truncate_float );\n   VERIFY( f1c.target<int(*)(float)>() != 0 );"}, {"sha": "62578565978e51fd3f978aad358ead5544d36237", "filename": "libstdc++-v3/testsuite/20_util/function/3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F3.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -62,7 +62,9 @@ void test03()\n \n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n+#if __cpp_rtti\n   VERIFY( typeid(long(*)(double)) == f1.target_type() );\n+#endif\n   VERIFY( f2.target<long(*)(double)>() != 0 );\n   VERIFY( *f2.target<long(*)(double)>() == &truncate_double );\n   VERIFY( f1c.target<long(*)(double)>() != 0 );"}, {"sha": "e2c098c1552b6715fd352bcecc7b131a3670151f", "filename": "libstdc++-v3/testsuite/20_util/function/4.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F4.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -64,7 +64,9 @@ void test04()\n \n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n+#if __cpp_rtti\n   VERIFY( typeid(do_truncate_float_t) == f1.target_type() );\n+#endif\n   VERIFY( f2.target<do_truncate_float_t>() != 0 );\n   VERIFY( f1c.target<do_truncate_float_t>() != 0 );\n }"}, {"sha": "ccd4c327585e92412d9007fa4b507c5f90894c69", "filename": "libstdc++-v3/testsuite/20_util/function/5.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F5.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -36,64 +36,84 @@ void test05()\n   function<int(X&)> frm(&X::bar);\n   VERIFY( frm );\n   VERIFY( frm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == frm.target_type() );\n+#endif\n   VERIFY( *frm.target<int X::*>() == &X::bar );\n \n   function<int(X&)> fr(&X::foo);\n   VERIFY( fr );\n   VERIFY( fr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == fr.target_type() );\n+#endif\n   VERIFY( *fr.target<int (X::*)()>() == &X::foo );\n \n   function<int(const X&)> frc(&X::foo_c);\n   VERIFY( frc );\n   VERIFY( frc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == frc.target_type() );\n+#endif\n   VERIFY( *frc.target<int (X::*)() const >() == &X::foo_c );\n \n   function<int(volatile X&)> frv(&X::foo_v);\n   VERIFY( frv );\n   VERIFY( frv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == frv.target_type() );\n+#endif\n   VERIFY( *frv.target<int (X::*)() volatile >() == &X::foo_v );\n   VERIFY( frv.target<int (X::*)() const volatile>() == 0 );\n \n   function<int(const volatile X&)> frcv(&X::foo_cv);\n   VERIFY( frcv );\n   VERIFY( frcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == frcv.target_type() );\n+#endif\n   VERIFY( *frcv.target<int (X::*)() const volatile >() == &X::foo_cv );\n   VERIFY( frcv.target<int (X::*)() const>() == 0 );\n \n   function<int(X*)> grm(&X::bar);\n   VERIFY( grm );\n   VERIFY( grm(&x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == grm.target_type() );\n+#endif\n   VERIFY( *grm.target<int X::*>() == &X::bar );\n \n   function<int(X*)> gr(&X::foo);\n   VERIFY( gr );\n   VERIFY( gr(&x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == gr.target_type() );\n+#endif\n   VERIFY( *gr.target<int (X::*)()>() == &X::foo );\n \n   function<int(const X*)> grc(&X::foo_c);\n   VERIFY( grc );\n   VERIFY( grc(&x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == grc.target_type() );\n+#endif\n   VERIFY( *grc.target<int (X::*)() const >() == &X::foo_c );\n \n   function<int(volatile X*)> grv(&X::foo_v);\n   VERIFY( grv );\n   VERIFY( grv(&x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == grv.target_type() );\n+#endif\n   VERIFY( *grv.target<int (X::*)() volatile >() == &X::foo_v );\n   VERIFY( grv.target<int (X::*)() const volatile>() == 0 );\n \n   function<int(const volatile X*)> grcv(&X::foo_cv);\n   VERIFY( grcv );\n   VERIFY( grcv(&x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == grcv.target_type() );\n+#endif\n   VERIFY( *grcv.target<int (X::*)() const volatile >() == &X::foo_cv );\n   VERIFY( grcv.target<int (X::*)() const>() == 0 );\n }"}, {"sha": "3eb9ef86b253ff04d17d9bc8d692b8e197ecfef1", "filename": "libstdc++-v3/testsuite/20_util/function/6.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F6.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -65,23 +65,31 @@ void test06()\n   function<int()> f(ref(x));\n   VERIFY( f );\n   VERIFY( f() == 17 );\n+#if __cpp_rtti\n   VERIFY( f.target_type() == typeid(std::ref(x)) ); // LWG 2781\n+#endif\n   VERIFY( wraps(f, x) );\n \n   function<int()> g = f;\n   VERIFY( g );\n   VERIFY( g() == 17 );\n+#if __cpp_rtti\n   VERIFY( g.target_type() == f.target_type() );\n+#endif\n   VERIFY( wraps(g, x) );\n \n   function<int()> h = cref(x);\n   VERIFY( h );\n   VERIFY( h() == 42 );\n+#if __cpp_rtti\n   VERIFY( h.target_type() == typeid(std::cref(x)) );\n+#endif\n   VERIFY( wraps(h, as_const(x)) );\n \n   const function<int()>& hc = h;\n+#if __cpp_rtti\n   VERIFY( hc.target_type() == h.target_type() );\n+#endif\n   VERIFY( wraps(hc, as_const(x)) );\n }\n "}, {"sha": "533232f37291d341bae5eb5355eee05ee0890534", "filename": "libstdc++-v3/testsuite/20_util/function/7.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F7.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -62,7 +62,9 @@ void test07()\n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n   using ref_wrapper_type = reference_wrapper<int(*)(float)>;\n+#if __cpp_rtti\n   VERIFY( typeid(ref_wrapper_type) == f1.target_type() );\n+#endif\n   VERIFY( f1.target<ref_wrapper_type>() != nullptr );\n   VERIFY( wraps(f1, fptr) );\n   VERIFY( wraps(f1c, fptr) );\n@@ -81,9 +83,13 @@ void test07()\n   // target_type and target() functions\n   const function<int(float)>& f2c = f2;\n   using cref_wrapper_type = reference_wrapper<int(* const)(float)>;\n+#if __cpp_rtti\n   VERIFY( typeid(cref_wrapper_type) == f2.target_type() );\n+#endif\n   VERIFY( wraps(f2, as_const(fptr)) );\n+#if __cpp_rtti\n   VERIFY( f2c.target_type() == f2.target_type() );\n+#endif\n   VERIFY( wraps(f2c, as_const(fptr)) );\n }\n "}, {"sha": "bd94e78de24bd7f232ac3b1be5f48929feb48573", "filename": "libstdc++-v3/testsuite/20_util/function/8.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffunction%2F8.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -59,91 +59,121 @@ void test08()\n   function<int(X&)> frm(ref(X_bar));\n   VERIFY( frm );\n   VERIFY( frm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_bar)) == frm.target_type() );\n+#endif\n   VERIFY( wraps(frm, X_bar) );\n \n   function<int(X&)> fr(ref(X_foo));\n   VERIFY( fr );\n   VERIFY( fr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo)) == fr.target_type() );\n+#endif\n   VERIFY( wraps(fr, X_foo) );\n \n   function<int(const X&)> frc(ref(X_foo_c));\n   VERIFY( frc );\n   VERIFY( frc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_c)) == frc.target_type() );\n+#endif\n   VERIFY( wraps(frc, X_foo_c) );\n \n   function<int(volatile X&)> frv(ref(X_foo_v));\n   VERIFY( frv );\n   VERIFY( frv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_v)) == frv.target_type() );\n+#endif\n   VERIFY( wraps(frv, X_foo_v) );\n \n   function<int(const volatile X&)> frcv(ref(X_foo_cv));\n   VERIFY( frcv );\n   VERIFY( frcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_cv)) == frcv.target_type() );\n+#endif\n   VERIFY( wraps(frcv, X_foo_cv) );\n \n   function<int(X*)> grm(ref(X_bar));\n   VERIFY( grm );\n   VERIFY( grm(&x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_bar)) == grm.target_type() );\n+#endif\n   VERIFY( wraps(grm, X_bar) );\n \n   function<int(X*)> gr(ref(X_foo));\n   VERIFY( gr );\n   VERIFY( gr(&x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo)) == gr.target_type() );\n+#endif\n   VERIFY( wraps(gr, X_foo) );\n \n   function<int(const X*)> grc(ref(X_foo_c));\n   VERIFY( grc );\n   VERIFY( grc(&x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_c)) == grc.target_type() );\n+#endif\n   VERIFY( wraps(grc, X_foo_c) );\n \n   function<int(volatile X*)> grv(ref(X_foo_v));\n   VERIFY( grv );\n   VERIFY( grv(&x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_v)) == grv.target_type() );\n+#endif\n   VERIFY( wraps(grv, X_foo_v) );\n \n   function<int(const volatile X*)> grcv(ref(X_foo_cv));\n   VERIFY( grcv );\n   VERIFY( grcv(&x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(ref(X_foo_cv)) == grcv.target_type() );\n+#endif\n   VERIFY( wraps(grcv, X_foo_cv) );\n \n   function<int(X&)> hrm(cref(X_bar));\n   VERIFY( hrm );\n   VERIFY( hrm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(cref(X_bar)) == hrm.target_type() );\n+#endif\n   VERIFY( wraps(hrm, as_const(X_bar)) );\n \n   function<int(X&)> hr(cref(X_foo));\n   VERIFY( hr );\n   VERIFY( hr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(cref(X_foo)) == hr.target_type() );\n+#endif\n   VERIFY( wraps(hr, as_const(X_foo)) );\n \n   function<int(const X&)> hrc(cref(X_foo_c));\n   VERIFY( hrc );\n   VERIFY( hrc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(cref(X_foo_c)) == hrc.target_type() );\n+#endif\n   VERIFY( wraps(hrc, as_const(X_foo_c)) );\n \n   function<int(volatile X&)> hrv(cref(X_foo_v));\n   VERIFY( hrv );\n   VERIFY( hrv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(cref(X_foo_v)) == hrv.target_type() );\n+#endif\n   VERIFY( wraps(hrv, as_const(X_foo_v)) );\n \n   function<int(const volatile X&)> hrcv(cref(X_foo_cv));\n   VERIFY( hrcv );\n   VERIFY( hrcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(cref(X_foo_cv)) == hrcv.target_type() );\n+#endif\n   VERIFY( wraps(hrcv, as_const(X_foo_cv)) );\n }\n "}, {"sha": "1e47641f495bf85a8ba15dc3376d873a973aef59", "filename": "libstdc++-v3/testsuite/20_util/polymorphic_allocator/resource.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fresource.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fresource.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpolymorphic_allocator%2Fresource.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -41,7 +41,9 @@ test01()\n   test_type c(&r2);\n   VERIFY( c.resource() == &r2 );\n   VERIFY( c.resource() != a.resource() );\n+#if __cpp_rtti\n   VERIFY( c == a );\n+#endif\n }\n \n void"}, {"sha": "a4fd959137f70d904f41df72d904addbe813846c", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/casts/1.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2F1.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -41,7 +41,12 @@ test01()\n \n   check_ret_type<shared_ptr<void>>(static_pointer_cast<void>(spd));\n   check_ret_type<shared_ptr<int>>(const_pointer_cast<int>(spci));\n+  // Non-polymorphic dynamic_cast works without RTTI.\n+  check_ret_type<shared_ptr<MyP>>(dynamic_pointer_cast<MyP>(spa));\n+#if __cpp_rtti\n+  // But polymorphic dynamic_cast needs RTTI.\n   check_ret_type<shared_ptr<MyDP>>(dynamic_pointer_cast<MyDP>(spa));\n+#endif\n }\n \n void\n@@ -65,6 +70,7 @@ test02()\n   VERIFY(pi.get() == ptr);\n   VERIFY(pci.get() == ptr);\n \n+#if __cpp_rtti\n   MyP* pptr = new MyP;\n   shared_ptr<MyP> pp(pptr);\n   auto pdp = dynamic_pointer_cast<MyDP>(pp);\n@@ -79,6 +85,7 @@ test02()\n   VERIFY(pdp.use_count() == 2);\n   VERIFY(pdp.get() == pptr);\n   VERIFY(pp.get() == pptr);\n+#endif\n }\n \n int main()"}, {"sha": "0178245c0464c58a884ed28413a2d003b9f5a6ab", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/casts/rval.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcasts%2Frval.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -42,7 +42,10 @@ void test01()\n \n   check_ret_type<shared_ptr<void>>(static_pointer_cast<void>(std::move(spd)));\n   check_ret_type<shared_ptr<int>>(const_pointer_cast<int>(std::move(spci)));\n+  check_ret_type<shared_ptr<MyP>>(dynamic_pointer_cast<MyP>(std::move(spa)));\n+#if __cpp_rtti\n   check_ret_type<shared_ptr<MyDP>>(dynamic_pointer_cast<MyDP>(std::move(spa)));\n+#endif\n   check_ret_type<shared_ptr<void>>(reinterpret_pointer_cast<void>(std::move(spd)));\n   check_ret_type<shared_ptr<const short>>(reinterpret_pointer_cast<const short>(std::move(spci)));\n   check_ret_type<shared_ptr<MyDP>>(reinterpret_pointer_cast<MyDP>(std::move(spa)));\n@@ -70,6 +73,7 @@ test02()\n   VERIFY(pi.get() == ptr);\n   VERIFY(pci.get() == nullptr);\n \n+#if __cpp_rtti\n   MyP* pptr = new MyP;\n   shared_ptr<MyP> pp(pptr);\n   auto pdp = dynamic_pointer_cast<MyDP>(std::move(pp));\n@@ -92,6 +96,7 @@ test02()\n   VERIFY(pi.use_count() == 0);\n   VERIFY(reinterpret_cast<int*>(pl.get()) == ptr);\n   VERIFY(pi.get() == nullptr);\n+#endif\n }\n \n int main()"}, {"sha": "5ef21fe71541cdeb9e7fbd7ab74cde0f91952d30", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/cons/unique_ptr_deleter_ref_2.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter_ref_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter_ref_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcons%2Funique_ptr_deleter_ref_2.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -47,8 +47,12 @@ test01()\n   typedef std::reference_wrapper<D> D2;\n   D2* p3 = std::get_deleter<D2>(p2);\n \n+#if __cpp_rtti\n   VERIFY( p3 != 0 );\n   VERIFY( &p3->get() == &d );\n+#else\n+  VERIFY( p3 == 0 ); // Always returns nullptr without RTTI.\n+#endif\n \n   return 0;\n }"}, {"sha": "1aab13f819cbb0b453d14ba8ef8ef8ce06454639", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/misc/get_deleter.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2Fget_deleter.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2Fget_deleter.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fmisc%2Fget_deleter.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -32,7 +32,9 @@ test01()\n   std::shared_ptr<int> p;\n   VERIFY( std::get_deleter<Del>(p) == nullptr );\n   p = std::shared_ptr<int>(new int, Del());\n+#if __cpp_rtti\n   VERIFY( std::get_deleter<Del>(p) != nullptr );\n+#endif\n   p = std::shared_ptr<int>(new int);\n   VERIFY( std::get_deleter<Del>(p) == nullptr );\n }"}, {"sha": "616770f5544453ad44403baabc47bb8e82f42ea5", "filename": "libstdc++-v3/testsuite/20_util/typeindex/comparison_operators.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n //"}, {"sha": "061000239ed88d549eb0bcbdacffe72f74c99259", "filename": "libstdc++-v3/testsuite/20_util/typeindex/comparison_operators_c++20.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators_c%2B%2B20.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators_c%2B%2B20.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fcomparison_operators_c%2B%2B20.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,5 +1,6 @@\n // { dg-options \"-std=gnu++2a\" }\n // { dg-do run { target c++2a } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2020-2022 Free Software Foundation, Inc.\n //"}, {"sha": "b0f1cc16c69b11a3d4b903f3412b8c18e1a1c83f", "filename": "libstdc++-v3/testsuite/20_util/typeindex/hash.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n //"}, {"sha": "6b8659bba77f139c5b22a39cb505668a78728f59", "filename": "libstdc++-v3/testsuite/20_util/typeindex/hash_code.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fhash_code.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n //"}, {"sha": "831b33ad4f6bbaad32aaff7ee8ddc4af2a7a2ca4", "filename": "libstdc++-v3/testsuite/20_util/typeindex/name.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ftypeindex%2Fname.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // 2010-09-22  Paolo Carlini  <paolo.carlini@oracle.com>\n //"}, {"sha": "7935c99a96fd44c97a369d93bbec95fe9ff712dd", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/string/89728_neg.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fstring%2F89728_neg.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -18,6 +18,7 @@\n // <http://www.gnu.org/licenses/>.\n \n // { dg-error \"complete\" \"\" { target *-*-* } 0 }\n+// { dg-error \"invalid 'static_cast'\" \"\" { target { ! rtti }  } 0 }\n \n #include <locale>\n "}, {"sha": "8f8762d8ff260614b0e773e76be0f5d753a881f4", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/standard_facet_hierarchies.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fstandard_facet_hierarchies.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -40,8 +40,10 @@ int main()\n   VERIFY( has_facet<base_facet>(loc_derived) );\n \n   // Standard derived facet.\n+#if __cpp_rtti\n   VERIFY( !has_facet<derived_facet>(loc_c) );\n   VERIFY( !has_facet<derived_facet>(loc_base) );\n+#endif\n   VERIFY( has_facet<derived_facet>(loc_derived) );\n \n "}, {"sha": "3d499a347c1ab002ffad0f53e7a173c2ddcd5736", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/user_facet_hierarchies.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2Fuser_facet_hierarchies.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -65,6 +65,7 @@ int main()\n \n   // User defined derived facet.\n   VERIFY( !has_facet<derived_facet>(loc_c) );\n+#if __cpp_rtti\n   VERIFY( !has_facet<derived_facet>(loc_base) );\n   VERIFY( has_facet<derived_facet>(loc_derived) );\n \n@@ -97,6 +98,7 @@ int main()\n       // Expect no exception.\n       VERIFY( true );\n     }\n+#endif\n \n   return 0;\n }"}, {"sha": "b6bd0fdffa53af2c85bb316e42a8df83cdca7793", "filename": "libstdc++-v3/testsuite/22_locale/locale/13630.cc", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2F13630.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2F13630.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2F13630.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -17,19 +17,11 @@\n \n // 22.1.1 class locale [lib.locale]\n \n-#include <locale>\n-#include <typeinfo>\n-#include <testsuite_hooks.h>\n+// { dg-do compile }\n \n-void test01()\n-{\n-  using namespace std;\n+#include <locale>\n \n-  VERIFY( typeid(locale::category) == typeid(int) );\n-}\n+template<typename, typename> struct SameType;\n+template<typename T> struct SameType<T, T> { };\n \n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n+SameType<std::locale::category, int> check;"}, {"sha": "846a9fe8210bf92bea6f09aaed8fb58dea30faf1", "filename": "libstdc++-v3/testsuite/23_containers/array/requirements/non_default_constructible.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Farray%2Frequirements%2Fnon_default_constructible.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do compile { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2012-2022 Free Software Foundation, Inc.\n //\n@@ -17,6 +18,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// PR libstdc++/53248\n+\n #include <array>\n #include <typeindex>\n #include <typeinfo>"}, {"sha": "c1c8ae6dcaafc792c59b6d28a994faf8547f62c1", "filename": "libstdc++-v3/testsuite/27_io/basic_ostream/emit/1.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ostream%2Femit%2F1.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -19,7 +19,7 @@\n // { dg-additional-options \"-pthread\" { target pthread } }\n // { dg-do run { target c++2a } }\n // { dg-require-effective-target cxx11_abi }\n-// { dg-xfail-run-if \"cannot catch forced_unwind\" { *-*-* } { \"-fno-rtti\" } }\n+// { dg-require-effective-target rtti }\n \n #include <syncstream>\n #include <testsuite_hooks.h>"}, {"sha": "661489806f8f8fef8a524ffb6e87a49b954dc000", "filename": "libstdc++-v3/testsuite/27_io/fpos/14320-1.cc", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2F14320-1.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -19,46 +19,33 @@\n \n // 27.4.3 fpos\n \n-// { dg-do run }\n+// { dg-do compile }\n \n-#include <typeinfo>\n #include <limits>\n #include <iterator>\n-#include <testsuite_hooks.h>\n \n // libstdc++/14320\n-void test01()\n-{\n-  using namespace std;\n \n-  typedef istreambuf_iterator<char>::difference_type Distance;\n-\n-  bool found = false;\n-  // The C++ standard didn't originally have \"long long\", however that\n-  // type is in the C++11 standard and testing for it allows\n-  // ilp32 targets to pass this test when `Distance' is 64 bits.\n-  if (typeid(Distance) == typeid(long long int))\n-    found = true;\n-  if (typeid(Distance) == typeid(long int))\n-    found = true;\n-  if (typeid(Distance) == typeid(int))\n-    found = true;\n-  if (typeid(Distance) == typeid(short int))\n-    found = true;\n-  if (typeid(Distance) == typeid(signed char))\n-    found = true;\n-  if (numeric_limits<char>::is_signed &&\n-      typeid(Distance) == typeid(char))\n-    found = true;\n-  if (numeric_limits<wchar_t>::is_signed &&\n-      typeid(Distance) == typeid(wchar_t))\n-    found = true;\n-  \n-  VERIFY( found );\n-}\n-\n-int main()\n-{\n-  test01();\n-  return 0;\n-}\n+typedef std::istreambuf_iterator<char>::difference_type Distance;\n+\n+#if __cplusplus >= 201103L\n+  static_assert( std::is_integral<Distance>::value, \"integral type\" );\n+  static_assert( std::is_signed<Distance>::value, \"signed integral type\" );\n+#else\n+template<typename> struct SignedInteger { enum { value = 0 }; };\n+// The C++ standard didn't originally have \"long long\", however that\n+// type is in the C++11 standard and testing for it allows\n+// ilp32 targets to pass this test when `Distance' is 64 bits.\n+template<> struct SignedInteger<long long int> { enum { value = 1 }; };\n+template<> struct SignedInteger<long int> { enum { value = 1 }; };\n+template<> struct SignedInteger<int> { enum { value = 1 }; };\n+template<> struct SignedInteger<short int> { enum { value = 1 }; };\n+template<> struct SignedInteger<char> {\n+  enum { value = std::numeric_limits<char>::is_signed };\n+};\n+template<> struct SignedInteger<wchar_t> {\n+  enum { value = std::numeric_limits<wchar_t>::is_signed };\n+};\n+\n+char assertion[SignedInteger<Distance>::value ? 1 : -1];\n+#endif"}, {"sha": "276241eebbf5aeb3443e1a62f46c0ab1b4a58ea9", "filename": "libstdc++-v3/testsuite/27_io/fpos/mbstate_t/12065.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffpos%2Fmbstate_t%2F12065.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -15,6 +15,8 @@\n // with this library; see the file COPYING3.  If not see\n // <http://www.gnu.org/licenses/>.\n \n+// { dg-require-effective-target rtti }\n+\n // 27.4.3 fpos\n \n #include <typeinfo>"}, {"sha": "8088ce1cbc974137a5dc40cfe24f5bb8424bd3fe", "filename": "libstdc++-v3/testsuite/27_io/ios_base/failure/dual_abi.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Ffailure%2Fdual_abi.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -17,6 +17,7 @@\n \n // { dg-options \"-D_GLIBCXX_USE_CXX11_ABI=0\" }\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n \n #include <fstream>\n #include <system_error>"}, {"sha": "f3ce83ad7021dd8145bd8a1276c4dd11b27bf6bb", "filename": "libstdc++-v3/testsuite/experimental/any/misc/any_cast.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fmisc%2Fany_cast.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -36,7 +36,7 @@ void test01()\n   any x(5);                                   // x holds int\n   VERIFY(any_cast<int>(x) == 5);              // cast to value\n   any_cast<int&>(x) = 10;                     // cast to reference\n-  VERIFY(any_cast<int>(x) == 10); \n+  VERIFY(any_cast<int>(x) == 10);\n \n   x = \"Meow\";                                 // x holds const char*\n   VERIFY(strcmp(any_cast<const char*>(x), \"Meow\") == 0);\n@@ -45,7 +45,7 @@ void test01()\n \n   x = string(\"Meow\");                         // x holds string\n   string s, s2(\"Jane\");\n-  s = move(any_cast<string&>(x));             // move from any \n+  s = move(any_cast<string&>(x));             // move from any\n   VERIFY(s == \"Meow\");\n   any_cast<string&>(x) = move(s2);            // move to any\n   VERIFY(any_cast<const string&>(x) == \"Jane\");\n@@ -153,13 +153,19 @@ void test07()\n {\n   int arr[3];\n   any a(arr);\n+#if __cpp_rtti\n   VERIFY( a.type() == typeid(int*) );\t// contained value is decayed\n+#endif\n \n   int (*p1)[3] = any_cast<int[3]>(&a);\n+#if __cpp_rtti\n   VERIFY( a.type() != typeid(int[3]) ); // so any_cast should return nullptr\n+#endif\n   VERIFY( p1 == nullptr );\n   int (*p2)[] = any_cast<int[]>(&a);\n+#if __cpp_rtti\n   VERIFY( a.type() != typeid(int[]) );\t// so any_cast should return nullptr\n+#endif\n   VERIFY( p2 == nullptr );\n   const int (*p3)[] = any_cast<int[]>(&const_cast<const any&>(a));\n   VERIFY( p3 == nullptr );"}, {"sha": "f33ce564ee779b1a860189d53193caa78638e999", "filename": "libstdc++-v3/testsuite/experimental/any/observers/type.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fobservers%2Ftype.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fobservers%2Ftype.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fany%2Fobservers%2Ftype.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++14 } }\n+// { dg-require-effective-target rtti }\n \n // Copyright (C) 2014-2022 Free Software Foundation, Inc.\n //"}, {"sha": "91d2d1671d4c9220d7314f623d33afdf218270d7", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/resource_adaptor.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2Fresource_adaptor.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -59,7 +59,9 @@ test05()\n   Allocator<int> a1(1), a2(2); // minimal interface allocators\n   resource_adaptor<decltype(a1)> r1(a1), r2(a2);\n   VERIFY( r1 == r1 );\n+#if __cpp_rtti\n   VERIFY( r1 == r2 );\n+#endif\n   p = r1.allocate(1);\n   VERIFY( aligned<max_align_t>(p) );\n   r1.deallocate(p, 1);\n@@ -97,7 +99,9 @@ test05()\n   __gnu_cxx::debug_allocator<std::allocator<short>> a5, a6;\n   resource_adaptor<decltype(a5)> r5(a5), r6(a6);\n   VERIFY( r5 == r5 );\n+#if __cpp_rtti\n   VERIFY( r5 == r6 );\n+#endif\n   VERIFY( r5 != r1 );\n   VERIFY( r5 != r3 );\n   p = r5.allocate(1);\n@@ -128,7 +132,9 @@ test05()\n   __gnu_cxx::new_allocator<short> a7, a8;\n   resource_adaptor<decltype(a7)> r7(a7), r8(a8);\n   VERIFY( r7 == r7 );\n+#if __cpp_rtti\n   VERIFY( r7 == r8 );\n+#endif\n   VERIFY( r7 != r1 );\n   VERIFY( r7 != r3 );\n   VERIFY( r7 != r5 );\n@@ -158,7 +164,9 @@ test05()\n   __gnu_cxx::malloc_allocator<short> a9, a10;\n   resource_adaptor<decltype(a9)> r9(a9), r10(a10);\n   VERIFY( r9 == r9 );\n+#if __cpp_rtti\n   VERIFY( r9 == r10 );\n+#endif\n   VERIFY( r9 != r1 );\n   VERIFY( r9 != r3 );\n   VERIFY( r9 != r5 );\n@@ -189,7 +197,9 @@ test05()\n   std::allocator<short> a11, a12;\n   resource_adaptor<decltype(a11)> r11(a11), r12(a12);\n   VERIFY( r11 == r11 );\n+#if __cpp_rtti\n   VERIFY( r11 == r12 );\n+#endif\n   VERIFY( r11 != r1 );\n   VERIFY( r11 != r3 );\n   VERIFY( r11 != r5 );"}, {"sha": "93fdfee687ddb88cebe8f710be42e3624d70bbdc", "filename": "libstdc++-v3/testsuite/lib/libstdc++.exp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Flib%2Flibstdc%2B%2B.exp?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1354,6 +1354,14 @@ proc check_effective_target_stacktrace { } {\n     }]\n }\n \n+# Return 1 if RTTI is enabled by the current test flags.\n+proc check_effective_target_rtti { } {\n+    return [check_v3_target_prop_cached et_rtti {\n+\tset cond \"__cpp_rtti\"\n+\treturn [v3_check_preprocessor_condition rtti $cond]\n+    }]\n+}\n+\n set additional_prunes \"\"\n \n if { [info exists env(GCC_RUNTEST_PARALLELIZE_DIR)] \\"}, {"sha": "b710f1e31e908f7681a32476b2a1aa4137cdd572", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/1.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F1.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -73,6 +73,7 @@ void test01()\n     }\n   VERIFY( thrown );\n \n+#if __cpp_rtti\n   // target_type returns typeid(void)\n   VERIFY( f1.target_type() == typeid(void) );\n \n@@ -83,6 +84,7 @@ void test01()\n   const function<int(float)>& f1c = f1;\n   VERIFY( f1c.target<int (*)(float)>() == 0 );\n   VERIFY( !f1c );\n+#endif\n }\n \n int main()"}, {"sha": "e7aa9eb89b20b66019aa56bf135e9395b81a759c", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F2.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -59,13 +59,15 @@ void test02()\n   f2 = truncate_float;\n   VERIFY( f2(3.1f) == 3 );\n \n+#if __cpp_rtti\n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n   VERIFY( typeid(int(*)(float)) == f1.target_type() );\n   VERIFY( f2.target<int(*)(float)>() != 0 );\n   VERIFY( *f2.target<int(*)(float)>() == &truncate_float );\n   VERIFY( f1c.target<int(*)(float)>() != 0 );\n   VERIFY( *f1c.target<int(*)(float)>() == &truncate_float );\n+#endif\n }\n \n int main()"}, {"sha": "12492ba5aceacdf25b3785fa91f0b57fa8778494", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/3.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F3.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -59,13 +59,15 @@ void test03()\n   f2 = truncate_double;\n   VERIFY( f2(3.1f) == 3 );\n \n+#if __cpp_rtti\n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n   VERIFY( typeid(long(*)(double)) == f1.target_type() );\n   VERIFY( f2.target<long(*)(double)>() != 0 );\n   VERIFY( *f2.target<long(*)(double)>() == &truncate_double );\n   VERIFY( f1c.target<long(*)(double)>() != 0 );\n   VERIFY( *f1c.target<long(*)(double)>() == &truncate_double );\n+#endif\n }\n \n int main()"}, {"sha": "dffd40f7a68b1c5e00c03318a282e92310d97d1b", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/4.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F4.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -61,11 +61,13 @@ void test04()\n   f2 = do_truncate_float_t();\n   VERIFY( f2(3.1f) == 3 );\n \n+#if __cpp_rtti\n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n   VERIFY( typeid(do_truncate_float_t) == f1.target_type() );\n   VERIFY( f2.target<do_truncate_float_t>() != 0 );\n   VERIFY( f1c.target<do_truncate_float_t>() != 0 );\n+#endif\n }\n \n int main()"}, {"sha": "58f7bea66f2a09adf3eb61efafe193783286496d", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/5.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F5.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -35,66 +35,86 @@ void test05()\n   function<int(X&)> frm(&X::bar);\n   VERIFY( frm );\n   VERIFY( frm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == frm.target_type() );\n   VERIFY( *frm.target<int X::*>() == &X::bar );\n+#endif\n \n   function<int(X&)> fr(&X::foo);\n   VERIFY( fr );\n   VERIFY( fr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == fr.target_type() );\n   VERIFY( *fr.target<int (X::*)()>() == &X::foo );\n+#endif\n \n   function<int(const X&)> frc(&X::foo_c);\n   VERIFY( frc );\n   VERIFY( frc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == frc.target_type() );\n   VERIFY( *frc.target<int (X::*)() const >() == &X::foo_c );\n+#endif\n \n   function<int(volatile X&)> frv(&X::foo_v);\n   VERIFY( frv );\n   VERIFY( frv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == frv.target_type() );\n   VERIFY( *frv.target<int (X::*)() volatile >() == &X::foo_v );\n   VERIFY( frv.target<int (X::*)() const volatile>() == 0 );\n+#endif\n \n   function<int(const volatile X&)> frcv(&X::foo_cv);\n   VERIFY( frcv );\n   VERIFY( frcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == frcv.target_type() );\n   VERIFY( *frcv.target<int (X::*)() const volatile >() == &X::foo_cv );\n   VERIFY( frcv.target<int (X::*)() const>() == 0 );\n+#endif\n \n   function<int(X*)> grm(&X::bar);\n   VERIFY( grm );\n   VERIFY( grm(&x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == grm.target_type() );\n   VERIFY( *grm.target<int X::*>() == &X::bar );\n+#endif\n \n   function<int(X*)> gr(&X::foo);\n   VERIFY( gr );\n   VERIFY( gr(&x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == gr.target_type() );\n   VERIFY( *gr.target<int (X::*)()>() == &X::foo );\n+#endif\n \n   function<int(const X*)> grc(&X::foo_c);\n   VERIFY( grc );\n   VERIFY( grc(&x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == grc.target_type() );\n   VERIFY( *grc.target<int (X::*)() const >() == &X::foo_c );\n+#endif\n \n   function<int(volatile X*)> grv(&X::foo_v);\n   VERIFY( grv );\n   VERIFY( grv(&x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == grv.target_type() );\n   VERIFY( *grv.target<int (X::*)() volatile >() == &X::foo_v );\n   VERIFY( grv.target<int (X::*)() const volatile>() == 0 );\n+#endif\n \n   function<int(const volatile X*)> grcv(&X::foo_cv);\n   VERIFY( grcv );\n   VERIFY( grcv(&x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == grcv.target_type() );\n   VERIFY( *grcv.target<int (X::*)() const volatile >() == &X::foo_cv );\n   VERIFY( grcv.target<int (X::*)() const>() == 0 );\n+#endif\n }\n \n int main()"}, {"sha": "5dad3f0b4b5bb95cc100bc93283231dcf3eae81e", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/6.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F6.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -52,25 +52,31 @@ void test06()\n   function<int()> f(ref(x));\n   VERIFY( f );\n   VERIFY( f() == 17 );\n+#if __cpp_rtti\n   VERIFY( f.target_type() == typeid(noncopyable_function_object_type) );\n   VERIFY( f.target<noncopyable_function_object_type>() == &x );\n+#endif\n \n   function<int()> g = f;\n   VERIFY( g );\n   VERIFY( g() == 17 );\n+#if __cpp_rtti\n   VERIFY( g.target_type() == typeid(noncopyable_function_object_type) );\n   VERIFY( g.target<noncopyable_function_object_type>() == &x );\n+#endif\n \n   function<int()> h = cref(x);\n   VERIFY( h );\n   VERIFY( h() == 42 );\n+#if __cpp_rtti\n   VERIFY( h.target_type() == typeid(noncopyable_function_object_type) );\n   VERIFY( h.target<const noncopyable_function_object_type>() == &x );\n   VERIFY( h.target<const noncopyable_function_object_type>() == &x );\n \n   const function<int()>& hc = h;\n   VERIFY( h.target<noncopyable_function_object_type>() == 0 );\n   VERIFY( hc.target<noncopyable_function_object_type>() == &x );\n+#endif\n }\n \n int main()"}, {"sha": "9fc59971b15ab31f9d22576b6d7047d051f098df", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/7.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F7.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -44,13 +44,15 @@ void test07()\n   // Invocation\n   VERIFY( f1(3.1f) == 3 );\n \n+#if __cpp_rtti\n   // target_type and target() functions\n   const function<int(float)>& f1c = f1;\n   VERIFY( typeid(int(*)(float)) == f1.target_type() );\n   VERIFY( f1.target<int(*)(float)>() != 0 );\n   VERIFY( f1.target<int(*)(float)>() == &fptr );\n   VERIFY( f1c.target<int(*)(float)>() != 0 );\n   VERIFY( f1c.target<int(*)(float)>() == &fptr );\n+#endif\n \n   function<int(float)> f2(cref(fptr));\n   VERIFY( f2 );\n@@ -63,13 +65,15 @@ void test07()\n   // Invocation\n   VERIFY( f2(3.1f) == 3 );\n \n+#if __cpp_rtti\n   // target_type and target() functions\n   const function<int(float)>& f2c = f2;\n   VERIFY( typeid(int(*)(float)) == f2.target_type() );\n   VERIFY( f2.target<int(*)(float)>() == 0 );\n   VERIFY( f2.target<int(* const)(float)>() == &fptr );\n   VERIFY( f2c.target<int(*)(float)>() != 0 );\n   VERIFY( f2c.target<int(*)(float)>() == &fptr );\n+#endif\n }\n \n int main()"}, {"sha": "f13e2b2be6b9d719567f4aef2e1e11e2ecd71bcd", "filename": "libstdc++-v3/testsuite/tr1/3_function_objects/function/8.cc", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F3_function_objects%2Ffunction%2F8.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -43,99 +43,129 @@ void test08()\n   function<int(X&)> frm(ref(X_bar));\n   VERIFY( frm );\n   VERIFY( frm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == frm.target_type() );\n   VERIFY( frm.target<int X::*>() == &X_bar );\n+#endif\n \n   function<int(X&)> fr(ref(X_foo));\n   VERIFY( fr );\n   VERIFY( fr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == fr.target_type() );\n   VERIFY( fr.target<int (X::*)()>() == &X_foo );\n+#endif\n \n   function<int(const X&)> frc(ref(X_foo_c));\n   VERIFY( frc );\n   VERIFY( frc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == frc.target_type() );\n   VERIFY( frc.target<int (X::*)() const >() == &X_foo_c );\n+#endif\n \n   function<int(volatile X&)> frv(ref(X_foo_v));\n   VERIFY( frv );\n   VERIFY( frv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == frv.target_type() );\n   VERIFY( *frv.target<int (X::*)() volatile >() == X_foo_v );\n   VERIFY( frv.target<int (X::*)() const volatile>() == 0 );\n+#endif\n \n   function<int(const volatile X&)> frcv(ref(X_foo_cv));\n   VERIFY( frcv );\n   VERIFY( frcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == frcv.target_type() );\n   VERIFY( *frcv.target<int (X::*)() const volatile >() == X_foo_cv );\n   VERIFY( frcv.target<int (X::*)() const>() == 0 );\n+#endif\n \n   function<int(X*)> grm(ref(X_bar));\n   VERIFY( grm );\n   VERIFY( grm(&x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == grm.target_type() );\n   VERIFY( *grm.target<int X::*>() == X_bar );\n+#endif\n \n   function<int(X*)> gr(ref(X_foo));\n   VERIFY( gr );\n   VERIFY( gr(&x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == gr.target_type() );\n   VERIFY( *gr.target<int (X::*)()>() == X_foo );\n+#endif\n \n   function<int(const X*)> grc(ref(X_foo_c));\n   VERIFY( grc );\n   VERIFY( grc(&x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == grc.target_type() );\n   VERIFY( *grc.target<int (X::*)() const >() == X_foo_c );\n+#endif\n \n   function<int(volatile X*)> grv(ref(X_foo_v));\n   VERIFY( grv );\n   VERIFY( grv(&x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == grv.target_type() );\n   VERIFY( *grv.target<int (X::*)() volatile >() == X_foo_v );\n   VERIFY( grv.target<int (X::*)() const volatile>() == 0 );\n+#endif\n \n   function<int(const volatile X*)> grcv(ref(X_foo_cv));\n   VERIFY( grcv );\n   VERIFY( grcv(&x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == grcv.target_type() );\n   VERIFY( *grcv.target<int (X::*)() const volatile >() == X_foo_cv );\n   VERIFY( grcv.target<int (X::*)() const>() == 0 );\n+#endif\n \n   function<int(X&)> hrm(cref(X_bar));\n   VERIFY( hrm );\n   VERIFY( hrm(x) == 17 );\n+#if __cpp_rtti\n   VERIFY( typeid(int X::*) == hrm.target_type() );\n   VERIFY( hrm.target<int X::*>() == 0 );\n   VERIFY( hrm.target<int X::* const>() == &X_bar );\n+#endif\n \n   function<int(X&)> hr(cref(X_foo));\n   VERIFY( hr );\n   VERIFY( hr(x) == 1 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)()) == hr.target_type() );\n   VERIFY( hr.target<int (X::* const)()>() == &X_foo );\n+#endif\n \n   function<int(const X&)> hrc(cref(X_foo_c));\n   VERIFY( hrc );\n   VERIFY( hrc(x) == 2 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const) == hrc.target_type() );\n   VERIFY( hrc.target<int (X::* const)() const >() == &X_foo_c );\n+#endif\n \n   function<int(volatile X&)> hrv(cref(X_foo_v));\n   VERIFY( hrv );\n   VERIFY( hrv(x) == 3 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() volatile) == hrv.target_type() );\n   VERIFY( hrv.target<int (X::* const)() volatile >() == &X_foo_v );\n   VERIFY( hrv.target<int (X::* const)() const volatile>() == 0 );\n+#endif\n \n   function<int(const volatile X&)> hrcv(cref(X_foo_cv));\n   VERIFY( hrcv );\n   VERIFY( hrcv(x) == 4 );\n+#if __cpp_rtti\n   VERIFY( typeid(int (X::*)() const volatile) == hrcv.target_type() );\n   VERIFY( hrcv.target<int (X::* const)() const volatile >() == &X_foo_cv );\n   VERIFY( hrcv.target<int (X::* const)() const>() == 0 );\n+#endif\n }\n \n int main()"}, {"sha": "487541da48b2073a6d1ef909ae0a795901b1df74", "filename": "libstdc++-v3/testsuite/tr2/bases/value.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fbases%2Fvalue.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n //\n // Copyright (C) 2011-2022 Free Software Foundation, Inc.\n //\n@@ -67,7 +68,7 @@ void test()\n \n     // Sanity check.\n     static_assert(tl::empty::value != std::true_type::value, \"!empty\");\n-  \n+\n     typedef tl::first::type\t\ttl1_first;\n     typedef tl::rest::type\t\ttl2;\n     typedef tl2::first::type\t\ttl2_first;"}, {"sha": "c55ffc7762e2d13742db796a0a8a6b1d7ba1e3d4", "filename": "libstdc++-v3/testsuite/tr2/direct_bases/value.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr2%2Fdirect_bases%2Fvalue.cc?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1,4 +1,5 @@\n // { dg-do run { target c++11 } }\n+// { dg-require-effective-target rtti }\n //\n // Copyright (C) 2011-2022 Free Software Foundation, Inc.\n //\n@@ -67,7 +68,7 @@ void test()\n \n     // Sanity check.\n     static_assert(tl::empty::value != std::true_type::value, \"!empty\");\n-  \n+\n     typedef tl::first::type\t\ttl1_first;\n     typedef tl::rest::type\t\ttl2;\n     typedef tl2::first::type\t\ttl2_first;"}, {"sha": "8ef91648af65701141a78684903bd986a57a04c9", "filename": "libstdc++-v3/testsuite/util/exception/safety.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b66006787b0991e94f15c7b5c56403f1eb85fb/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Fexception%2Fsafety.h?ref=b6b66006787b0991e94f15c7b5c56403f1eb85fb", "patch": "@@ -1459,7 +1459,11 @@ namespace __gnu_test\n \t  while (!exit);\n \n \t  // Log count info.\n+#if __cpp_rtti\n \t  std::cout << __f.target_type().name() << std::endl;\n+#else\n+\t  std::cout << \"[no type info - rtti disabled]\\n\";\n+#endif\n \t  std::cout << \"end count \" << __step << std::endl;\n \t  return __step;\n \t}\n@@ -1627,7 +1631,11 @@ namespace __gnu_test\n \t  while (!exit);\n \n \t  // Log count info.\n+#if __cpp_rtti\n \t  std::cout << __f.target_type().name() << std::endl;\n+#else\n+\t  std::cout << \"[no type info - rtti disabled]\\n\";\n+#endif\n \t  std::cout << \"end count \" << i << std::endl;\n \t}\n     };"}]}