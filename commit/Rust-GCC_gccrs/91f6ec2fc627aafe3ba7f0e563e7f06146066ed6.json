{"sha": "91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTFmNmVjMmZjNjI3YWFmZTNiYTdmMGU1NjNlN2YwNjE0NjA2NmVkNg==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2015-11-25T23:29:57Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2015-11-25T23:29:57Z"}, "message": "PR c/66516 - missing diagnostic on taking the address of a builtin function\n\nPR c/66516 - missing diagnostic on taking the address of a builtin function\n\t* g++.dg/addr_builtin-1.C: New test (accidentally omitted from\n\tinitial commit).\n\t* gcc.dg/addr_builtin-1.c: Same.\n\nFrom-SVN: r230916", "tree": {"sha": "9e711adeb12698753ac8d7b27a14db21785d0df7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e711adeb12698753ac8d7b27a14db21785d0df7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ff9ed6fb282ab8a6f1b2aa1655b577cdc2f0e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff9ed6fb282ab8a6f1b2aa1655b577cdc2f0e41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff9ed6fb282ab8a6f1b2aa1655b577cdc2f0e41"}], "stats": {"total": 486, "additions": 480, "deletions": 6}, "files": [{"sha": "387a71f7dbcc500a8ecf238d5c5efcf50816c15e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "patch": "@@ -1,3 +1,9 @@\n+2015-11-25  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR c/66516\n+\t* g++.dg/addr_builtin-1.C: New test (left out of initial commit).\n+\t* gcc.dg/addr_builtin-1.c: Same.\n+\n 2015-11-25  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/dform-1.c: New test.\n@@ -7943,12 +7949,6 @@\n \tcheck the assembly.\n \t* gcc.target/aarch64/arm_align_max_stack_pwr.c: Likewise.\n \n-2015-09-03  Martin Sebor  <msebor@redhat.com>\n-\n-\tPR c/66516\n-\t* g++.dg/addr_builtin-1.C: New test.\n-\t* gcc.dg/addr_builtin-1.c: New test.\n-\n 2015-09-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/vec-shift.c: New test."}, {"sha": "e8ba31f994c3f5bc378f04a7b6e5ff3ef8c47a3b", "filename": "gcc/testsuite/g++.dg/addr_builtin-1.C", "status": "added", "additions": 276, "deletions": 0, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Faddr_builtin-1.C?ref=91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "patch": "@@ -0,0 +1,276 @@\n+// PR66516 - missing diagnostic on taking the address of a builtin function\n+// { dg-do compile }\n+\n+namespace std {\n+  // Define type_info type to be able to use typeid in tests without\n+  // having to include <typeinfo>.\n+  struct type_info {\n+    const char *name_;\n+\n+    explicit type_info (const char *s): name_ (s) { }\n+    const char* name() const { return name_; }\n+  };\n+}\n+\n+// Extern \"C\" since builtin functions used in tests have C linkage.\n+extern \"C\" {\n+\n+typedef void (F)();\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+// Utility function to test passing built-in functions as an ordinary\n+// argument and via the ellipsis.\n+static void func_arg (F*, ...);\n+\n+// Utility function with which, along with the built-in function,\n+// to instantiate the C98 multi-parameter or C11 variadic tempates\n+// below.\n+void f () { }\n+\n+}   // extern \"C\"\n+\n+\n+// Utility templates to test specializing templates on pointers and\n+// references to built-in functions.\n+template <F*> struct TestPointer { };\n+template <F&> struct TestReference { };\n+\n+#if 201103 <= __cplusplus\n+\n+template <F*...> struct TestPointers { };\n+template <F&...> struct TestReferences { };\n+\n+#else\n+\n+template <F* = &f, F* = &f> struct TestPointers { };\n+template <F& = f, F& = f> struct TestReferences { };\n+\n+#endif\n+\n+static F* test_taking_address_of_gcc_builtin ()\n+{\n+  enum UINTPTR_E { e = ~(uintptr_t)0 };\n+\n+  F *p;\n+  void *q;\n+  uintptr_t a;\n+\n+  __builtin_trap ();                           // okay\n+  (void)__builtin_trap;                        // okay\n+  __builtin_trap;                              // okay (if pointless)\n+\n+  {\n+    typedef __typeof__ (__builtin_trap) F;     // okay\n+  }\n+\n+#if 201103 <= __cplusplus\n+  {\n+    typedef decltype (__builtin_trap) F;       // okay\n+\n+    a = noexcept (&__builtin_trap);\n+  }\n+#endif\n+\n+  // Address and indirection operators.\n+  p = &__builtin_trap;                       // { dg-error \"built-in\" }\n+  p = *__builtin_trap;                       // { dg-error \"built-in\" }\n+\n+  // Unary NOT.\n+  // GCC issues two diagnostics here for some reason, so account for both.\n+  a = !__builtin_trap;                   // { dg-error \"built-in|unary\" }\n+\n+  // Casts.\n+  p = (F*)__builtin_trap;                    // { dg-error \"built-in\" }\n+\n+  p = &(F&)__builtin_trap;                   // { dg-error \"built-in\" }\n+\n+  p = &reinterpret_cast<F&>(__builtin_trap); // { dg-error \"built-in\" }\n+  p = &static_cast<F&>(__builtin_trap);      // { dg-error \"built-in\" }\n+\n+  p = reinterpret_cast<F*>(__builtin_trap);  // { dg-error \"built-in\" }\n+  p = static_cast<F*>(__builtin_trap);       // { dg-error \"built-in\" }\n+\n+  // Expect a diagnostic for an invalid static_cast of a function to\n+  // either uintptr_t or enum, rather than one for the argument being\n+  // a built-in function, since the former is more relevant than the latter.\n+  a = static_cast<uintptr_t>(__builtin_trap);       // { dg-error \"invalid\" }\n+  a = static_cast<UINTPTR_E>(__builtin_trap);       // { dg-error \"invalid\" }\n+\n+  // Reinterpret cast can cast a function to uintptr_t or enum,\n+  // so verify that a diagnostic is issued for the use of a builtin.\n+  a = reinterpret_cast<uintptr_t>(__builtin_trap);  // { dg-error \"built-in\" }\n+  a = reinterpret_cast<UINTPTR_E>(__builtin_trap);  // { dg-error \"built-in\" }\n+\n+  // Additive operator.  Ill-formed but allowed with -fpermissive.\n+  p = __builtin_trap + 0;            // { dg-error \"built-in\" }\n+  p = __builtin_trap - 0;            // { dg-error \"built-in\" }\n+  a = __builtin_trap - p;            // { dg-error \"built-in\" }\n+  a = p - __builtin_trap;            // { dg-error \"built-in\" }\n+\n+  // Relational operators.  Ill-formed but allowed with -fpermissive.\n+  a = __builtin_trap < p;            // { dg-error \"built-in\" }\n+  a = p < __builtin_trap;            // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap <= p;           // { dg-error \"built-in\" }\n+  a = p <= __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap > p;            // { dg-error \"built-in\" }\n+  a = p > __builtin_trap;            // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap > p;            // { dg-error \"built-in\" }\n+  a = p > __builtin_trap;            // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap <= p;           // { dg-error \"built-in\" }\n+  a = p <= __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap <= p;           // { dg-error \"built-in\" }\n+  a = p <= __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  // Equality operators.\n+  a = __builtin_trap == p;           // { dg-error \"built-in\" }\n+  a = p == __builtin_trap;           // { dg-error \"built-in\" }\n+  a = __builtin_trap != p;           // { dg-error \"built-in\" }\n+  a = p != __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  // Logical AND and OR.\n+  a = __builtin_trap && p;           // { dg-error \"built-in\" }\n+  a = p && __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  a = __builtin_trap || p;           // { dg-error \"built-in\" }\n+  a = p || __builtin_trap;           // { dg-error \"built-in\" }\n+\n+  // Conditional operator.\n+  a = __builtin_trap ? 1 : 0;        // { dg-error \"built-in\" }\n+  p = a ? __builtin_trap : 0;        // { dg-error \"built-in\" }\n+  p = a ? 0 : __builtin_trap;        // { dg-error \"built-in\" }\n+\n+  // Assignment operator.\n+  p = __builtin_trap;                // { dg-error \"built-in\" }\n+\n+  // Passing as an argument.\n+  func_arg (__builtin_trap);         // { dg-error \"built-in\" }\n+  func_arg (&__builtin_trap);        // { dg-error \"built-in\" }\n+  func_arg (*__builtin_trap);        // { dg-error \"built-in\" }\n+\n+  // Passing through ellipsis.\n+  func_arg (0, __builtin_trap);      // { dg-error \"built-in\" }\n+  func_arg (0, &__builtin_trap);     // { dg-error \"built-in\" }\n+  func_arg (0, *__builtin_trap);     // { dg-error \"built-in\" }\n+\n+  {\n+    // Template specialization.\n+    // GCC issues two diagnostics and we must account for both.\n+    TestPointer<__builtin_trap> tp;         // { dg-error \"built-in|could not convert\" }\n+    TestReference<__builtin_trap> tr;       // { dg-error \"built-in|could not convert\" }\n+\n+    TestPointers<__builtin_trap> tp1;       // { dg-error \"built-in|could not convert\" }\n+    TestReferences<__builtin_trap> tr1;     // { dg-error \"built-in|could not convert\" }\n+\n+    TestPointers<f, __builtin_trap> tp2;    // { dg-error \"built-in|could not convert\" }\n+    TestReferences<f, __builtin_trap> tr2;  // { dg-error \"built-in|could not convert\" }\n+\n+    TestPointers<__builtin_trap, f> tp3;    // { dg-error \"built-in|could not convert\" }\n+    TestReferences<__builtin_trap, f> tr3;  // { dg-error \"built-in|could not convert\" }\n+  }\n+\n+  try {\n+    throw __builtin_trap;                 // { dg-error \"built-in\" }\n+  }\n+  catch (F) { }\n+\n+  return __builtin_trap;                    // { dg-error \"built-in\" }\n+\n+  (void)a;\n+  (void)p;\n+  (void)q;\n+}\n+\n+// Make sure operators new and delete don't trigger false positives\n+// (they return true from DECL_IS_BUILTIN(DECL) -- see tree.h).\n+void test_taking_address_of_op_new_and_delete ()\n+{\n+  typedef __SIZE_TYPE__ size_t;\n+\n+  typedef void* (OpNew) (size_t);\n+  typedef void (OpDelete) (void*);\n+\n+  OpNew &newr = operator new;\n+  OpNew &newra = operator new[];\n+  OpNew *newp = &operator new;\n+  newp = &operator new[];\n+\n+  OpDelete &delr = operator delete;\n+  OpDelete &delra = operator delete[];\n+  OpDelete *delp = &operator delete;\n+  delp = &operator delete[];\n+\n+  (void)newr;\n+  (void)newra;\n+  (void)newp;\n+  (void)delr;\n+  (void)delra;\n+  (void)delp;\n+}\n+\n+// Helper declaration to verify that it's possible to take the address\n+// of a user-declared function that's also a GCC built-in.\n+extern int abs (int);\n+\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strlen (const char*);\n+\n+// Creating a reference to or taking the address of a built-in with\n+// a library \"fallback\" must be allowed.\n+void test_taking_address_of_library_builtin ()\n+{\n+  {\n+    typedef int F (int);\n+\n+    F &r1 = __builtin_abs;\n+    F &r2 = *__builtin_abs;\n+    F *p = __builtin_abs;\n+    p = &__builtin_abs;\n+    p = *__builtin_abs;\n+    (void)p;\n+    (void)r1;\n+    (void)r2;\n+  }\n+\n+  {\n+    typedef int F (int);\n+\n+    F &r1 = abs;\n+    F &r2 = *abs;\n+    F *p = abs;\n+    p = &abs;\n+    p = *abs;\n+    (void)p;\n+    (void)r1;\n+    (void)r2;\n+  }\n+\n+  {\n+    typedef __SIZE_TYPE__ size_t;\n+    typedef size_t F (const char*);\n+    F &r1 = __builtin_strlen;\n+    F &r2 = *__builtin_strlen;\n+    F *p = __builtin_strlen;\n+    p = &__builtin_strlen;\n+    p = *__builtin_strlen;\n+    (void)p;\n+    (void)r1;\n+    (void)r2;\n+  }\n+\n+  {\n+    typedef size_t F (const char*);\n+    F &r1 = strlen;\n+    F &r2 = *strlen;\n+    F *p = strlen;\n+    p = &strlen;\n+    p = *strlen;\n+    (void)p;\n+    (void)r1;\n+    (void)r2;\n+  }\n+}"}, {"sha": "4a0888a55d3e8c4053d10eae8b435d8629740681", "filename": "gcc/testsuite/gcc.dg/addr_builtin-1.c", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_builtin-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/91f6ec2fc627aafe3ba7f0e563e7f06146066ed6/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_builtin-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Faddr_builtin-1.c?ref=91f6ec2fc627aafe3ba7f0e563e7f06146066ed6", "patch": "@@ -0,0 +1,198 @@\n+/* PR66516 - missing diagnostic on taking the address of a builtin function\n+   { dg-do compile }  */\n+\n+typedef void (F)(void);\n+typedef __UINTPTR_TYPE__ uintptr_t;\n+\n+/* Utility function to test passing built-in functions as an ordinary\n+   argument and via the ellipsis.  */\n+static void func_arg (F *p, ...) { (void)p; }\n+\n+static F* test_taking_address_of_gcc_builtin (void)\n+{\n+  F *p;\n+  void *q;\n+  uintptr_t a;\n+\n+  /* Call, cast to void, and id are allowed.  */\n+  __builtin_trap ();\n+  (void)__builtin_trap;\n+  __builtin_trap;\n+\n+  {\n+    typedef __typeof__ (__builtin_trap) F;     /* Okay.  */\n+  }\n+\n+  /* Address and indirection operators.  */\n+  p = &__builtin_trap;               /* { dg-error \"built-in function\" }  */\n+  p = *__builtin_trap;               /* { dg-error \"built-in function\" }  */\n+\n+  /* Unary NOT.  */\n+  a = !__builtin_trap;               /* { dg-error \"built-in function\" }  */\n+\n+  /* Sizeof and _Alignof are disallowed by C but allowed by GCC\n+     and there's no reason to reject built-ins as operands since\n+     doing so doesn't yield their address.  */\n+#pragma GCC diagnostic push\n+  /* Disable: invalid application of 'sizeof' to a function type.  */\n+#pragma GCC diagnostic ignored \"-Wpointer-arith\"\n+  a = sizeof __builtin_trap;\n+#pragma GCC diagnostic pop\n+\n+#ifndef __STDC_VERSION__\n+#  pragma GCC diagnostic push\n+  /* Disable: ISO C90 does not support '_Alignof'.  */\n+#  pragma GCC diagnostic ignored \"-Wpedantic\"\n+#endif\n+\n+  a = _Alignof __builtin_trap;\n+\n+#ifndef __STDC_VERSION__\n+#  pragma GCC diagnostic pop\n+#endif\n+\n+  /* Casts.  */\n+  p = (F*)__builtin_trap;            /* { dg-error \"built-in function\" }  */\n+  a = (uintptr_t)__builtin_trap;     /* { dg-error \"built-in function\" }  */\n+\n+  /* Additive operator.  */\n+  p = __builtin_trap + 0;            /* { dg-error \"built-in function\" }  */\n+  p = __builtin_trap - 0;            /* { dg-error \"built-in function\" }  */\n+  a = __builtin_trap - p;            /* { dg-error \"built-in function\" }  */\n+  a = p - __builtin_trap;            /* { dg-error \"built-in function\" }  */\n+\n+  /* Relational operators.  */\n+  a = __builtin_trap < p;            /* { dg-error \"built-in function\" }  */\n+  a = p < __builtin_trap;            /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap <= p;           /* { dg-error \"built-in function\" }  */\n+  a = p <= __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap > p;            /* { dg-error \"built-in function\" }  */\n+  a = p > __builtin_trap;            /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap > p;            /* { dg-error \"built-in function\" }  */\n+  a = p > __builtin_trap;            /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap <= p;           /* { dg-error \"built-in function\" }  */\n+  a = p <= __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap <= p;           /* { dg-error \"built-in function\" }  */\n+  a = p <= __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  /* Equality operators.  */\n+  a = __builtin_trap == p;           /* { dg-error \"built-in function\" }  */\n+  a = p == __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+  a = __builtin_trap != p;           /* { dg-error \"built-in function\" }  */\n+  a = p != __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  /* Logical AND and OR.  */\n+  a = __builtin_trap && p;           /* { dg-error \"built-in function\" }  */\n+  a = p && __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  a = __builtin_trap || p;           /* { dg-error \"built-in function\" }  */\n+  a = p || __builtin_trap;           /* { dg-error \"built-in function\" }  */\n+\n+  /* Conditional operator.  */\n+  a = __builtin_trap ? 1 : 0;        /* { dg-error \"built-in function\" }  */\n+  p = a ? __builtin_trap : 0;        /* { dg-error \"built-in function\" }  */\n+  p = a ? 0 : __builtin_trap;        /* { dg-error \"built-in function\" }  */\n+\n+  /* Assignment operator.  */\n+  p = __builtin_trap;                /* { dg-error \"built-in function\" }  */\n+\n+  q = __builtin_trap;                /* { dg-error \"built-in function\" }  */\n+  a = __builtin_trap;                /* { dg-error \"built-in function\" }  */\n+\n+  /* Passing as an argument.  */\n+  func_arg (__builtin_trap);         /* { dg-error \"built-in function\" }  */\n+\n+  /* Passing through the ellipsis.  */\n+  func_arg (0, __builtin_trap);      /* { dg-error \"built-in function\" }  */\n+\n+  /* Return statement.  */\n+  return __builtin_trap;             /* { dg-error \"built-in function\" }  */\n+\n+  (void)a;\n+  (void)p;\n+  (void)q;\n+}\n+\n+/* Helper declarations to verify that it's possible to take the address\n+   of a user-declared function that's also a GCC built-in.  */\n+extern int abs (int);\n+\n+extern __SIZE_TYPE__ strlen (const char*);\n+\n+/* Taking the address of a builtin with a library \"fallback\" must be\n+   allowed, either using the __builtin_xxx form or the xxx form, when\n+   the library fallback is declared either explicitly or implicitly\n+   by virtue of first calling the function.  */\n+void test_taking_address_of_library_builtin (int i)\n+{\n+  {\n+    typedef int F (int);\n+\n+    /* Compute the address of libc's abs using the implicitly declared\n+       __builtin_abs form (all expressions are valid).  */\n+    F *p = __builtin_abs;\n+    p = &__builtin_abs;\n+    p = *__builtin_abs;\n+\n+    /* Compute the address of libc's abs declared above.  */\n+    p = abs;\n+    p = &abs;\n+    p = *abs;\n+    (void)p;\n+  }\n+\n+  {\n+    typedef __SIZE_TYPE__ size_t;\n+    typedef size_t F (const char*);\n+\n+    /* Compute the address of libc's strlen using the implicitly\n+       declared __builtin_strlen form.  */\n+    F *p = __builtin_strlen;\n+    p = &__builtin_strlen;\n+    p = *__builtin_strlen;\n+\n+    /* Compute the address of libc's strlen declared above.  */\n+    p = strlen;\n+    p = &strlen;\n+    p = *strlen;\n+    (void)p;\n+  }\n+\n+  {\n+    typedef int F (int);\n+\n+    /* Compute the address of libc's isxxx functions using the implicitly\n+       declared __builtin_xxx form.  */\n+    F *p = __builtin_isalnum;\n+    p = &__builtin_isalpha;\n+    p = *__builtin_iscntrl;\n+\n+    /* According to C90 (see also the discussion in c/67386):\n+       If the expression that precedes the parenthesized argument list\n+       in a function call consists solely of an identifier, and if no\n+       declaration is visible for this identifier, the identifier is\n+       implicitly declared exactly as if, in the innermost block\n+       containing the function call, the declaration\n+       extern int identifier();\n+       appeared.  */\n+\n+    /* Call the functions first to have their declarations \"injected\"\n+       into the enclosing block.  Suppress warnings.  */\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wimplicit-function-declaration\"\n+    i = isalnum (i) || isalpha (i) || iscntrl (i);\n+#pragma GCC diagnostic pop\n+\n+    /* Take the address of the functions relying on their declarations\n+       having been implicitly provided by the calls above.  */\n+    p = isalnum;\n+    p = &isalpha;\n+    p = *iscntrl;\n+    (void)p;\n+  }\n+}"}]}