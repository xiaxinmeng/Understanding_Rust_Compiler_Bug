{"sha": "24fc7360e5be54d73e677e6fe59339f58035e67a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRmYzczNjBlNWJlNTRkNzNlNjc3ZTZmZTU5MzM5ZjU4MDM1ZTY3YQ==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@cavium.com", "date": "2012-04-23T19:37:59Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2012-04-23T19:37:59Z"}, "message": "tree-ssa-forwprop.c (simplify_bitwise_binary): Simplify (A & B) OP0 (C & B) to (A OP0) & B.\n\n2012-04-23  Andrew Pinski  <apinski@cavium.com>\n\n\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Simplify (A & B) OP0\n\t(C & B) to (A OP0) & B.\n\n2012-04-23  Andrew Pinski  <apinski@cavium.com>\n\n\t* gcc.dg/tree-ssa/forwprop-17.c: New testcase.\n\nFrom-SVN: r186721", "tree": {"sha": "f95470c063ed8bc959cfc119b6f675da1143b815", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f95470c063ed8bc959cfc119b6f675da1143b815"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24fc7360e5be54d73e677e6fe59339f58035e67a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fc7360e5be54d73e677e6fe59339f58035e67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24fc7360e5be54d73e677e6fe59339f58035e67a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24fc7360e5be54d73e677e6fe59339f58035e67a/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e9d68de9c1f93c680f15be0589025f1828dd2996", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9d68de9c1f93c680f15be0589025f1828dd2996", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9d68de9c1f93c680f15be0589025f1828dd2996"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "e62b04eed7b40792efd3d732045dbef7d980921f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24fc7360e5be54d73e677e6fe59339f58035e67a", "patch": "@@ -1,3 +1,8 @@\n+2012-04-23  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* tree-ssa-forwprop.c (simplify_bitwise_binary): Simplify (A & B) OP0\n+\t(C & B) to (A OP0) & B.\n+\n 2012-04-23  Martin Jambor  <mjambor@suse.cz>\n \n \t* expr.c (expand_expr_real_1): Remove setting parent's alias set for"}, {"sha": "36fdbb5ad6dd0cac79beb160a3847095f0de300b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24fc7360e5be54d73e677e6fe59339f58035e67a", "patch": "@@ -1,3 +1,7 @@\n+2012-04-23  Andrew Pinski  <apinski@cavium.com>\n+\n+\t* gcc.dg/tree-ssa/forwprop-17.c: New testcase.\n+\n 2012-04-23  Bill Schmidt  <wschmidt@linux.ibm.com>\n \n \tPR regression/53076"}, {"sha": "a85d0eb9c50711ecf5aea344bdeb41ef55c56b93", "filename": "gcc/testsuite/gcc.dg/tree-ssa/forwprop-17.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fforwprop-17.c?ref=24fc7360e5be54d73e677e6fe59339f58035e67a", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int foo (int xx, int xy)\n+{\n+  xx &=1;\n+  xy &=1;\n+  return xx ^ xy;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \" & 1\" 1 \"optimized\" } } */\n+/* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "349272dae02541b567dbe6c785684481de876a33", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24fc7360e5be54d73e677e6fe59339f58035e67a/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=24fc7360e5be54d73e677e6fe59339f58035e67a", "patch": "@@ -1886,6 +1886,54 @@ simplify_bitwise_binary (gimple_stmt_iterator *gsi)\n       return true;\n     }\n \n+\n+   /* Simplify (A & B) OP0 (C & B) to (A OP0 C) & B. */\n+   if (def1_code == def2_code\n+       && def1_code == BIT_AND_EXPR\n+       && operand_equal_for_phi_arg_p (gimple_assign_rhs2 (def1),\n+\t\t\t\t       gimple_assign_rhs2 (def2)))\n+    {\n+      tree b = gimple_assign_rhs2 (def1);\n+      tree a = def1_arg1;\n+      tree c = def2_arg1;\n+      tree inner = fold_build2 (code, TREE_TYPE (arg2), a, c);\n+      /* If A OP0 C (this usually means C is the same as A) is 0\n+\t then fold it down correctly. */\n+      if (integer_zerop (inner))\n+\t{\n+\t  gimple_assign_set_rhs_from_tree (gsi, inner);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+      /* If A OP0 C (this usually means C is the same as A) is a ssa_name\n+\t then fold it down correctly. */\n+      else if (TREE_CODE (inner) == SSA_NAME)\n+\t{\n+      \t  tree outer = fold_build2 (def1_code, TREE_TYPE (inner),\n+\t\t\t\t    inner, b);\n+\t  gimple_assign_set_rhs_from_tree (gsi, outer);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+      else\n+\t{\n+\t  gimple newop;\n+\t  tree tem;\n+\t  tem = create_tmp_reg (TREE_TYPE (arg2), NULL);\n+\t  newop = gimple_build_assign_with_ops (code, tem, a, c);\n+\t  tem = make_ssa_name (tem, newop);\n+\t  gimple_assign_set_lhs (newop, tem);\n+\t  gimple_set_location (newop, gimple_location (stmt));\n+\t  /* Make sure to re-process the new stmt as it's walking upwards.  */\n+\t  gsi_insert_before (gsi, newop, GSI_NEW_STMT);\n+\t  gimple_assign_set_rhs1 (stmt, tem);\n+\t  gimple_assign_set_rhs2 (stmt, b);\n+\t  gimple_assign_set_rhs_code (stmt, def1_code);\n+\t  update_stmt (stmt);\n+\t  return true;\n+\t}\n+    }\n+\n   /* (a | CST1) & CST2  ->  (a & CST2) | (CST1 & CST2).  */\n   if (code == BIT_AND_EXPR\n       && def1_code == BIT_IOR_EXPR"}]}