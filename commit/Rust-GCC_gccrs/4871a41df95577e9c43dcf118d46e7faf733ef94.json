{"sha": "4871a41df95577e9c43dcf118d46e7faf733ef94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDg3MWE0MWRmOTU1NzdlOWM0M2RjZjExOGQ0NmU3ZmFmNzMzZWY5NA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2016-05-02T10:00:00Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-05-02T10:00:00Z"}, "message": "2016-05-02  Arnaud Charlet  <charlet@adacore.com>\n\n\t* spark_xrefs.ads Description of the spark cross-references\n\tclarified; small style fixes.\n\t* lib-xref-spark_specific.adb (Add_SPARK_Scope,\n\tDetect_And_Add_SPARK_Scope): consider protected types and bodies\n\tas yet another scopes.\n\t(Enclosing_Subprogram_Or_Library_Package): refactored using\n\tHristian's suggestions; added support for scopes of protected\n\ttypes and bodies; fix for entries to return the scope of the\n\tenclosing concurrent type, which is consistent with what is\n\treturned for protected subprograms.\n\t* sem_intr.adb: Minor style fix in comment.\n\nFrom-SVN: r235731", "tree": {"sha": "f2f6e97b3894a51e65b162e94b2a54702fc8fb8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2f6e97b3894a51e65b162e94b2a54702fc8fb8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4871a41df95577e9c43dcf118d46e7faf733ef94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871a41df95577e9c43dcf118d46e7faf733ef94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4871a41df95577e9c43dcf118d46e7faf733ef94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4871a41df95577e9c43dcf118d46e7faf733ef94/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d4611f7b0399ae3726185659f230b8b86f6a81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d4611f7b0399ae3726185659f230b8b86f6a81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d4611f7b0399ae3726185659f230b8b86f6a81e"}], "stats": {"total": 156, "additions": 79, "deletions": 77}, "files": [{"sha": "eaab1b730d9b1c61bed0d2d249e344e1fac34aba", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4871a41df95577e9c43dcf118d46e7faf733ef94", "patch": "@@ -1,3 +1,17 @@\n+2016-05-02  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* spark_xrefs.ads Description of the spark cross-references\n+\tclarified; small style fixes.\n+\t* lib-xref-spark_specific.adb (Add_SPARK_Scope,\n+\tDetect_And_Add_SPARK_Scope): consider protected types and bodies\n+\tas yet another scopes.\n+\t(Enclosing_Subprogram_Or_Library_Package): refactored using\n+\tHristian's suggestions; added support for scopes of protected\n+\ttypes and bodies; fix for entries to return the scope of the\n+\tenclosing concurrent type, which is consistent with what is\n+\treturned for protected subprograms.\n+\t* sem_intr.adb: Minor style fix in comment.\n+\n 2016-05-02  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* lib-xref.ads, lib-xref-spark_specific.adb, get_spark_xrefs.adb,"}, {"sha": "46f7b3a98008009d74afcdfbf8a202297bd5efd2", "filename": "gcc/ada/lib-xref-spark_specific.adb", "status": "modified", "additions": 48, "deletions": 63, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Flib-xref-spark_specific.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Flib-xref-spark_specific.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref-spark_specific.adb?ref=4871a41df95577e9c43dcf118d46e7faf733ef94", "patch": "@@ -265,6 +265,7 @@ package body SPARK_Specific is\n             | E_Generic_Package\n             | E_Generic_Procedure\n             | E_Package\n+            | E_Protected_Type\n             | E_Task_Type\n          =>\n             Typ := Xref_Entity_Letters (Ekind (E));\n@@ -284,7 +285,11 @@ package body SPARK_Specific is\n                Typ := Xref_Entity_Letters (Ekind (E));\n             end if;\n \n-         when E_Package_Body | E_Subprogram_Body | E_Task_Body =>\n+         when E_Package_Body\n+            | E_Protected_Body\n+            | E_Subprogram_Body\n+            | E_Task_Body\n+         =>\n             Typ := Xref_Entity_Letters (Ekind (Unique_Entity (E)));\n \n          when E_Void =>\n@@ -1029,6 +1034,10 @@ package body SPARK_Specific is\n                       N_Package_Body_Stub,\n                       N_Package_Declaration)\n            or else\n+         Nkind_In (N, N_Protected_Body,         --  protected objects\n+                      N_Protected_Body_Stub,\n+                      N_Protected_Type_Declaration)\n+           or else\n          Nkind_In (N, N_Subprogram_Body,        --  subprograms\n                       N_Subprogram_Body_Stub,\n                       N_Subprogram_Declaration)\n@@ -1048,115 +1057,91 @@ package body SPARK_Specific is\n    function Enclosing_Subprogram_Or_Library_Package\n      (N : Node_Id) return Entity_Id\n    is\n-      Result : Entity_Id;\n+      Context : Entity_Id;\n \n    begin\n       --  If N is the defining identifier for a subprogram, then return the\n       --  enclosing subprogram or package, not this subprogram.\n \n       if Nkind_In (N, N_Defining_Identifier, N_Defining_Operator_Symbol)\n-        and then Nkind (Parent (N)) in N_Subprogram_Specification\n+        and then (Ekind (N) in Entry_Kind\n+                  or else Ekind (N) = E_Subprogram_Body\n+                  or else Ekind (N) in Generic_Subprogram_Kind\n+                  or else Ekind (N) in Subprogram_Kind)\n       then\n-         Result := Parent (Parent (Parent (N)));\n+         Context := Parent (Unit_Declaration_Node (N));\n \n-         --  If this was a library-level subprogram then replace Result with\n+         --  If this was a library-level subprogram then replace Context with\n          --  its Unit, which points to N_Subprogram_* node.\n \n-         if Nkind (Result) = N_Compilation_Unit then\n-            Result := Unit (Result);\n+         if Nkind (Context) = N_Compilation_Unit then\n+            Context := Unit (Context);\n          end if;\n       else\n-         Result := N;\n+         Context := N;\n       end if;\n \n-      while Present (Result) loop\n-         case Nkind (Result) is\n-            when N_Package_Specification =>\n+      while Present (Context) loop\n+         case Nkind (Context) is\n+            when N_Package_Body          |\n+                 N_Package_Specification =>\n \n                --  Only return a library-level package\n \n-               if Is_Library_Level_Entity (Defining_Entity (Result)) then\n-                  Result := Defining_Entity (Result);\n+               if Is_Library_Level_Entity (Defining_Entity (Context)) then\n+                  Context := Defining_Entity (Context);\n                   exit;\n                else\n-                  Result := Parent (Result);\n+                  Context := Parent (Context);\n                end if;\n \n-            when N_Package_Body =>\n-\n-               --  Only return a library-level package\n-\n-               if Is_Library_Level_Entity (Defining_Entity (Result)) then\n-                  Result := Defining_Entity (Result);\n-                  exit;\n-               else\n-                  Result := Parent (Result);\n-               end if;\n-\n-            when N_Subprogram_Specification =>\n-               Result := Defining_Unit_Name (Result);\n-               exit;\n-\n-            when N_Subprogram_Declaration =>\n-               Result := Defining_Unit_Name (Specification (Result));\n-               exit;\n-\n-            when N_Subprogram_Body =>\n-               Result := Defining_Unit_Name (Specification (Result));\n-               exit;\n-\n             when N_Pragma =>\n \n                --  The enclosing subprogram for a precondition, postcondition,\n                --  or contract case should be the declaration preceding the\n                --  pragma (skipping any other pragmas between this pragma and\n                --  this declaration.\n \n-               while Nkind (Result) = N_Pragma\n-                 and then Is_List_Member (Result)\n-                 and then Present (Prev (Result))\n+               while Nkind (Context) = N_Pragma\n+                 and then Is_List_Member (Context)\n+                 and then Present (Prev (Context))\n                loop\n-                  Result := Prev (Result);\n+                  Context := Prev (Context);\n                end loop;\n \n-               if Nkind (Result) = N_Pragma then\n-                  Result := Parent (Result);\n+               if Nkind (Context) = N_Pragma then\n+                  Context := Parent (Context);\n                end if;\n \n-            when N_Entry_Body =>\n-               Result := Defining_Identifier (Result);\n-               exit;\n-\n-            when N_Entry_Declaration =>\n-               Result := Defining_Identifier (Result);\n-               exit;\n-\n-            when N_Task_Body =>\n-               Result := Defining_Identifier (Result);\n-               exit;\n-\n-            when N_Task_Type_Declaration =>\n-               Result := Defining_Identifier (Result);\n+            when N_Entry_Body                 |\n+                 N_Entry_Declaration          |\n+                 N_Protected_Type_Declaration |\n+                 N_Subprogram_Body            |\n+                 N_Subprogram_Declaration     |\n+                 N_Subprogram_Specification   |\n+                 N_Task_Body                  |\n+                 N_Task_Type_Declaration      =>\n+               Context := Defining_Entity (Context);\n                exit;\n \n             when others =>\n-               Result := Parent (Result);\n+               Context := Parent (Context);\n          end case;\n       end loop;\n \n-      if Nkind (Result) = N_Defining_Program_Unit_Name then\n-         Result := Defining_Identifier (Result);\n+      if Nkind (Context) = N_Defining_Program_Unit_Name then\n+         Context := Defining_Identifier (Context);\n       end if;\n \n       --  Do not return a scope without a proper location\n \n-      if Present (Result)\n-        and then Sloc (Result) = No_Location\n+      if Present (Context)\n+        and then Sloc (Context) = No_Location\n       then\n          return Empty;\n       end if;\n \n-      return Result;\n+      return Context;\n    end Enclosing_Subprogram_Or_Library_Package;\n \n    -----------------"}, {"sha": "a15e95cb3cf15df6c4a942440c019db9bb6cfafd", "filename": "gcc/ada/sem_intr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Fsem_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Fsem_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_intr.adb?ref=4871a41df95577e9c43dcf118d46e7faf733ef94", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2015, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2016, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -59,7 +59,7 @@ package body Sem_Intr is\n    procedure Check_Shift (E : Entity_Id; N : Node_Id);\n    --  Check intrinsic shift subprogram, the two arguments are the same\n    --  as for Check_Intrinsic_Subprogram (i.e. the entity of the subprogram\n-   --  declaration, and the node for the pragma argument, used for messages)\n+   --  declaration, and the node for the pragma argument, used for messages).\n \n    procedure Errint (Msg : String; S : Node_Id; N : Node_Id);\n    --  Post error message for bad intrinsic, the message itself is posted\n@@ -340,7 +340,7 @@ package body Sem_Intr is\n       then\n          null;\n \n-      --  Exception  functions\n+      --  Exception functions\n \n       elsif Nam_In (Nam, Name_Exception_Information,\n                          Name_Exception_Message,"}, {"sha": "fa958cf6986d2b6d64d3584079d4fd5591b0ecb7", "filename": "gcc/ada/spark_xrefs.ads", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Fspark_xrefs.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4871a41df95577e9c43dcf118d46e7faf733ef94/gcc%2Fada%2Fspark_xrefs.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fspark_xrefs.ads?ref=4871a41df95577e9c43dcf118d46e7faf733ef94", "patch": "@@ -36,7 +36,7 @@ package SPARK_Xrefs is\n \n    --  SPARK cross-reference information can exist in one of two forms. In\n    --  the ALI file, it is represented using a text format that is described\n-   --  in this specification. Internally it is stored using three tables\n+   --  in this specification. Internally it is stored using three tables:\n    --  SPARK_Xref_Table, SPARK_Scope_Table and SPARK_File_Table, which are\n    --  also defined in this unit.\n \n@@ -56,21 +56,21 @@ package SPARK_Xrefs is\n \n    --  SPARK cross-reference information is generated on a unit-by-unit basis\n    --  in the ALI file, using lines that start with the identifying character F\n-   --  (\"Formal\"). These lines are generated if Frame_Condition_Mode is True.\n+   --  (\"Formal\"). These lines are generated if GNATprove_Mode is True.\n \n    --  The SPARK cross-reference information comes after the shared\n-   --  cross-reference information, so it needs not be read by tools like\n-   --  gnatbind, gnatmake etc.\n+   --  cross-reference information, so it can be ignored by tools like\n+   --  gnatbind, gnatmake, etc.\n \n    --  -------------------\n    --  -- Scope Section --\n    --  -------------------\n \n    --  A first section defines the scopes in which entities are defined and\n-   --  referenced. A scope is a package/subprogram declaration/body. Note that\n-   --  a package declaration and body define two different scopes. Similarly, a\n-   --  subprogram declaration and body, when both present, define two different\n-   --  scopes.\n+   --  referenced. A scope is a package/subprogram/protected_type/task_type\n+   --  declaration/body. Note that a package declaration and body define two\n+   --  different scopes. Similarly, a subprogram, protected type and task type\n+   --  declaration and body, when both present, define two different scopes.\n \n    --    FD dependency-number filename (-> unit-filename)?\n \n@@ -135,8 +135,11 @@ package SPARK_Xrefs is\n \n    --      dependency-number and filename identify a file in FD lines\n \n-   --      entity-number and identity identify a scope entity in FS lines for\n-   --      the file previously identified.\n+   --      entity-number and entity identify a scope in FS lines\n+   --      for the file previously identified file.\n+\n+   --      (filename and entity are just a textual representations of\n+   --       dependency-number and entity-number)\n \n    --    F line typ col entity ref*\n \n@@ -192,7 +195,7 @@ package SPARK_Xrefs is\n    --  -- Generated Globals Section --\n    --  -------------------------------\n \n-   --  The Generated Globals section is located at the end of the ALI file.\n+   --  The Generated Globals section is located at the end of the ALI file\n \n    --  All lines introducing information related to the Generated Globals\n    --  have the string \"GG\" appearing in the beginning. This string (\"GG\")"}]}