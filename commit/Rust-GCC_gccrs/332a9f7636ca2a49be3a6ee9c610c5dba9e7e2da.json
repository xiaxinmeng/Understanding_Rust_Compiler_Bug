{"sha": "332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzMyYTlmNzYzNmNhMmE0OWJlM2E2ZWU5YzYxMGM1ZGJhOWU3ZTJkYQ==", "commit": {"author": {"name": "Petter Tomner", "email": "tomner@kth.se", "date": "2021-09-08T22:50:06Z"}, "committer": {"name": "Petter Tomner", "email": "tomner@kth.se", "date": "2021-09-10T23:00:48Z"}, "message": "libgccjit: Generate debug info for variables\n\nFinalize declares via available helpers after location is set. Set\nTYPE_NAME of primitives and friends to \"int\" etc. Debug info is now\nset properly for variables.\n\nSigned-off-by:\n2021-09-09\tPetter Tomner\t<tomner@kth.se>\n\ngcc/jit/\n\t* jit-playback.c: Moved global var processing to after loc handling.\n\t  Setting TYPE_NAME for fundamental types.\n\t  Using common functions for finalizing globals.\n\t* jit-playback.h: New method init_types().\n\t  Changed get_tree_node_for_type() to method.\n\ngcc/testsuite/\n\t* jit.dg/test-error-array-bounds.c: Array is not unsigned\n\t* jit.dg/jit.exp: Helper function\n\t* jit.dg/test-debuginfo.c: New testcase", "tree": {"sha": "8fd2bb6dc81eedfa6db9a6b65ff17e49ed05a5f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fd2bb6dc81eedfa6db9a6b65ff17e49ed05a5f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/comments", "author": {"login": "pvilhelm", "id": 2867017, "node_id": "MDQ6VXNlcjI4NjcwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2867017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvilhelm", "html_url": "https://github.com/pvilhelm", "followers_url": "https://api.github.com/users/pvilhelm/followers", "following_url": "https://api.github.com/users/pvilhelm/following{/other_user}", "gists_url": "https://api.github.com/users/pvilhelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvilhelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvilhelm/subscriptions", "organizations_url": "https://api.github.com/users/pvilhelm/orgs", "repos_url": "https://api.github.com/users/pvilhelm/repos", "events_url": "https://api.github.com/users/pvilhelm/events{/privacy}", "received_events_url": "https://api.github.com/users/pvilhelm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvilhelm", "id": 2867017, "node_id": "MDQ6VXNlcjI4NjcwMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/2867017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvilhelm", "html_url": "https://github.com/pvilhelm", "followers_url": "https://api.github.com/users/pvilhelm/followers", "following_url": "https://api.github.com/users/pvilhelm/following{/other_user}", "gists_url": "https://api.github.com/users/pvilhelm/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvilhelm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvilhelm/subscriptions", "organizations_url": "https://api.github.com/users/pvilhelm/orgs", "repos_url": "https://api.github.com/users/pvilhelm/repos", "events_url": "https://api.github.com/users/pvilhelm/events{/privacy}", "received_events_url": "https://api.github.com/users/pvilhelm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b7c432cce893e1ba60d9b94a9606df6b419379", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b7c432cce893e1ba60d9b94a9606df6b419379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b7c432cce893e1ba60d9b94a9606df6b419379"}], "stats": {"total": 177, "additions": 162, "deletions": 15}, "files": [{"sha": "59399dee251c9e546501e5edefa54a42d3379c71", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 56, "deletions": 14, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "patch": "@@ -165,7 +165,8 @@ gt_ggc_mx ()\n \n /* Given an enum gcc_jit_types value, get a \"tree\" type.  */\n \n-static tree\n+tree\n+playback::context::\n get_tree_node_for_type (enum gcc_jit_types type_)\n {\n   switch (type_)\n@@ -192,11 +193,7 @@ get_tree_node_for_type (enum gcc_jit_types type_)\n       return short_unsigned_type_node;\n \n     case GCC_JIT_TYPE_CONST_CHAR_PTR:\n-      {\n-\ttree const_char = build_qualified_type (char_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST);\n-\treturn build_pointer_type (const_char);\n-      }\n+      return m_const_char_ptr;\n \n     case GCC_JIT_TYPE_INT:\n       return integer_type_node;\n@@ -579,10 +576,6 @@ playback::lvalue *\n playback::context::\n global_finalize_lvalue (tree inner)\n {\n-  varpool_node::get_create (inner);\n-\n-  varpool_node::finalize_decl (inner);\n-\n   m_globals.safe_push (inner);\n \n   return new lvalue (this, inner);\n@@ -2952,9 +2945,7 @@ replay ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n \n-  m_const_char_ptr\n-    = build_pointer_type (build_qualified_type (char_type_node,\n-\t\t\t\t\t\tTYPE_QUAL_CONST));\n+  init_types ();\n \n   /* Replay the recorded events:  */\n   timevar_push (TV_JIT_REPLAY);\n@@ -2984,10 +2975,17 @@ replay ()\n     {\n       int i;\n       function *func;\n-\n+      tree global;\n       /* No GC can happen yet; process the cached source locations.  */\n       handle_locations ();\n \n+      /* Finalize globals. See how FORTRAN 95 does it in gfc_be_parse_file()\n+         for a simple reference. */\n+      FOR_EACH_VEC_ELT (m_globals, i, global)\n+        rest_of_decl_compilation (global, true, true);\n+\n+      wrapup_global_declarations (m_globals.address(), m_globals.length());\n+\n       /* We've now created tree nodes for the stmts in the various blocks\n \t in each function, but we haven't built each function's single stmt\n \t list yet.  Do so now.  */\n@@ -3081,6 +3079,50 @@ location_comparator (const void *lhs, const void *rhs)\n   return loc_lhs->get_column_num () - loc_rhs->get_column_num ();\n }\n \n+/* Initialize the NAME_TYPE of the primitive types as well as some\n+   others. */\n+void\n+playback::context::\n+init_types ()\n+{\n+  /* See lto_init() in lto-lang.c or void visit (TypeBasic *t) in D's types.cc \n+     for reference. If TYPE_NAME is not set, debug info will not contain types */\n+#define NAME_TYPE(t,n) \\\n+if (t) \\\n+  TYPE_NAME (t) = build_decl (UNKNOWN_LOCATION, TYPE_DECL, \\\n+                              get_identifier (n), t)\n+\n+  NAME_TYPE (integer_type_node, \"int\");\n+  NAME_TYPE (char_type_node, \"char\");\n+  NAME_TYPE (long_integer_type_node, \"long int\");\n+  NAME_TYPE (unsigned_type_node, \"unsigned int\");\n+  NAME_TYPE (long_unsigned_type_node, \"long unsigned int\");\n+  NAME_TYPE (long_long_integer_type_node, \"long long int\");\n+  NAME_TYPE (long_long_unsigned_type_node, \"long long unsigned int\");\n+  NAME_TYPE (short_integer_type_node, \"short int\");\n+  NAME_TYPE (short_unsigned_type_node, \"short unsigned int\");\n+  if (signed_char_type_node != char_type_node)\n+    NAME_TYPE (signed_char_type_node, \"signed char\");\n+  if (unsigned_char_type_node != char_type_node)\n+    NAME_TYPE (unsigned_char_type_node, \"unsigned char\");\n+  NAME_TYPE (float_type_node, \"float\");\n+  NAME_TYPE (double_type_node, \"double\");\n+  NAME_TYPE (long_double_type_node, \"long double\");\n+  NAME_TYPE (void_type_node, \"void\");\n+  NAME_TYPE (boolean_type_node, \"bool\");\n+  NAME_TYPE (complex_float_type_node, \"complex float\");\n+  NAME_TYPE (complex_double_type_node, \"complex double\");\n+  NAME_TYPE (complex_long_double_type_node, \"complex long double\");\n+  \n+  m_const_char_ptr = build_pointer_type(\n+    build_qualified_type (char_type_node, TYPE_QUAL_CONST));\n+\n+  NAME_TYPE (m_const_char_ptr, \"char\");\n+  NAME_TYPE (size_type_node, \"size_t\");\n+  NAME_TYPE (fileptr_type_node, \"FILE\");\n+#undef NAME_TYPE\n+}\n+\n /* Our API allows locations to be created in arbitrary orders, but the\n    linemap API requires locations to be created in ascending order\n    as if we were tokenizing files."}, {"sha": "f670c9e81df55be869239f90eb0bd68b8456d925", "filename": "gcc/jit/jit-playback.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Fjit%2Fjit-playback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Fjit%2Fjit-playback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.h?ref=332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "patch": "@@ -271,8 +271,13 @@ class context : public log_user\n   source_file *\n   get_source_file (const char *filename);\n \n+  tree\n+  get_tree_node_for_type (enum gcc_jit_types type_);\n+\n   void handle_locations ();\n \n+  void init_types ();\n+\n   const char * get_path_c_file () const;\n   const char * get_path_s_file () const;\n   const char * get_path_so_file () const;"}, {"sha": "4459dbc3f1a0abd36355de14a5197130f85dac05", "filename": "gcc/testsuite/jit.dg/jit.exp", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fjit.exp?ref=332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "patch": "@@ -377,6 +377,34 @@ proc dg-jit-set-exe-params { args } {\n     }\n }\n \n+# For test-debuginfo.c. Starts gdb, does cmds and checks the output against match\n+proc jit-check-debug-info { obj_file cmds match } {\n+    verbose \"Checking debug info for $obj_file with match: $match\"\n+\n+    if { [catch {exec gdb -v} fid] } {\n+        verbose \"No gdb seems to be in path. Can't check debug info. Reporting 'unsupported'.\"\n+        unsupported \"No gdb seems to be in path. Can't check debug info\"\n+        return\n+    }\n+\n+    spawn gdb $obj_file\n+\n+    verbose \"Disable color styling in GDB newer then 8.3 (errors on older)\"\n+    send \"set style enabled off\\n\"\n+\n+    foreach cmd $cmds {\n+        send $cmd\n+    }\n+    expect {\n+        -re $match { pass OK }\n+        default { fail FAIL }\n+    }\n+\n+    # Quit gdb\n+    send \"set confirm off\\n\"\n+    send \"q\\n\"\n+}\n+\n proc jit-dg-test { prog do_what extra_tool_flags } {\n     verbose \"within jit-dg-test...\"\n     verbose \"  prog: $prog\""}, {"sha": "49e8834a0ba16e401c8eff8d9a8ca50f911f0e68", "filename": "gcc/testsuite/jit.dg/test-debuginfo.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debuginfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debuginfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-debuginfo.c?ref=332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "patch": "@@ -0,0 +1,72 @@\n+/* Essentially this test checks that debug info are generated for globals\n+   locals and functions, including type info. The comment bellow is used\n+   as fake code (does not affect the test, use for manual debugging). */\n+/*\n+int a_global_for_test_debuginfo;\n+int main (int argc, char **argv)\n+{\n+    int a_local_for_test_debuginfo = 2;\n+    return a_global_for_test_debuginfo + a_local_for_test_debuginfo;\n+}\n+*/\n+#include \"libgccjit.h\"\n+\n+/* We don't want set_options() in harness.h to set -O3 so our little local\n+   is optimized away. */\n+#define TEST_ESCHEWS_SET_OPTIONS\n+static void set_options (gcc_jit_context *ctxt, const char *argv0)\n+{\n+    gcc_jit_context_set_bool_option(ctxt, GCC_JIT_BOOL_OPTION_DEBUGINFO, 1);\n+}\n+\n+#define TEST_COMPILING_TO_FILE\n+#define OUTPUT_KIND      GCC_JIT_OUTPUT_KIND_EXECUTABLE\n+#define OUTPUT_FILENAME  \"jit-debuginfo.o\"\n+#include \"harness.h\"\n+\n+#define LOC(row, col) gcc_jit_context_new_location(ctxt, \"test-debuginfo.c\", row, col)\n+\n+void\n+create_code (gcc_jit_context *ctxt, void* p)\n+{\n+  gcc_jit_type *int_type = gcc_jit_context_get_type(ctxt, GCC_JIT_TYPE_INT);\n+\n+  gcc_jit_lvalue *bar = gcc_jit_context_new_global(ctxt, \n+    LOC(5,1), GCC_JIT_GLOBAL_EXPORTED, \n+    int_type, \"a_global_for_test_debuginfo\");\n+\n+  gcc_jit_param *argc_para = gcc_jit_context_new_param(ctxt, LOC(6,15), \n+    int_type, \"argc\");\n+  gcc_jit_param *argv_para = gcc_jit_context_new_param(ctxt, LOC(6,28), \n+    gcc_jit_type_get_pointer(\n+      gcc_jit_type_get_pointer(\n+        gcc_jit_context_get_type(ctxt, GCC_JIT_TYPE_CHAR))),\n+    \"argc\");\n+\n+  gcc_jit_param *params[] = {argc_para, argv_para};\n+\n+  gcc_jit_function *foo_fn = gcc_jit_context_new_function(ctxt, LOC(6,5), \n+    GCC_JIT_FUNCTION_EXPORTED, int_type, \"main\", 2, params, 0);\n+  gcc_jit_block *start_block = gcc_jit_function_new_block(foo_fn, \n+    \"start_block\");\n+\n+  gcc_jit_lvalue *a = gcc_jit_function_new_local(foo_fn, LOC(8,5), \n+    int_type, \"a_local_for_test_debuginfo\");\n+  gcc_jit_block_add_assignment(start_block, LOC(8,36), a, \n+    gcc_jit_context_new_rvalue_from_int(ctxt, int_type, 2));\n+  gcc_jit_rvalue *add = gcc_jit_context_new_binary_op(ctxt, LOC(9,40), \n+    GCC_JIT_BINARY_OP_PLUS, int_type, \n+    gcc_jit_lvalue_as_rvalue(a), gcc_jit_lvalue_as_rvalue(bar));\n+\n+  gcc_jit_block_end_with_return(start_block, LOC(9,5), add);\n+}\n+\n+#undef LOC\n+\n+/* jit-check-debug-info fires up gdb and checks that the variables have \n+   debug info */\n+\n+/*  { dg-final { jit-check-debug-info \"jit-debuginfo.o\" {\"info variables\\n\"} \"int\\\\s+a_global_for_test_debuginfo;\" } } */\n+/*  { dg-final { jit-check-debug-info \"jit-debuginfo.o\" {\"pt main\\n\"} \"int\\\\s*\\\\(\\\\s*int\\\\s*,\\\\s*char\\\\s*\\\\*\\\\*\\\\s*\\\\)\"} } */\n+/*  { dg-final { jit-check-debug-info \"jit-debuginfo.o\" {\"start\\n\" \"info locals\\n\"} \"a_local_for_test_debuginfo\"} } */\n+/*  { dg-final { jit-check-debug-info \"jit-debuginfo.o\" {\"start\\n\" \"pt a_local_for_test_debuginfo\\n\"} \"int\"} } */\n\\ No newline at end of file"}, {"sha": "b6c0ee526d41ead425c88fbbb04a0eb0f144968a", "filename": "gcc/testsuite/jit.dg/test-error-array-bounds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-error-array-bounds.c?ref=332a9f7636ca2a49be3a6ee9c610c5dba9e7e2da", "patch": "@@ -70,5 +70,5 @@ verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n   /* ...and that the message was captured by the API.  */\n   CHECK_STRING_VALUE (gcc_jit_context_get_first_error (ctxt),\n \t\t      \"array subscript 10 is above array bounds of\"\n-\t\t      \" 'unsigned char[10]' [-Warray-bounds]\");\n+\t\t      \" 'char[10]' [-Warray-bounds]\");\n }"}]}