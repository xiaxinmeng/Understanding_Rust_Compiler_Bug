{"sha": "fd7bcd6f0571ef7f5fb87c713b7a612252497056", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3YmNkNmYwNTcxZWY3ZjVmYjg3YzcxM2I3YTYxMjI1MjQ5NzA1Ng==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2000-12-20T15:48:26Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2000-12-20T15:48:26Z"}, "message": "Fix ARM bootstrap problems introduced by last change\n\nFrom-SVN: r38399", "tree": {"sha": "06b44258aaab2ec5d04fbc2c19b015ca5d48e523", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06b44258aaab2ec5d04fbc2c19b015ca5d48e523"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd7bcd6f0571ef7f5fb87c713b7a612252497056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7bcd6f0571ef7f5fb87c713b7a612252497056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7bcd6f0571ef7f5fb87c713b7a612252497056", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7bcd6f0571ef7f5fb87c713b7a612252497056/comments", "author": null, "committer": null, "parents": [{"sha": "99c8c61c83278e1c135b9d36c4cd8256e84944ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c8c61c83278e1c135b9d36c4cd8256e84944ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c8c61c83278e1c135b9d36c4cd8256e84944ac"}], "stats": {"total": 72, "additions": 41, "deletions": 31}, "files": [{"sha": "10f00cb9d6c3316799d733d63d3d61c479afced7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7bcd6f0571ef7f5fb87c713b7a612252497056/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7bcd6f0571ef7f5fb87c713b7a612252497056/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd7bcd6f0571ef7f5fb87c713b7a612252497056", "patch": "@@ -1,3 +1,8 @@\n+2000-12-20  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* flow.c (ior_reg_cond, and_reg_cond, elim_reg_cond): Properly\n+\thandle all relational operators.\n+\n 2000-12-20  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* final.c (output_addr_const): Use ASM_OUTPUT_SYMBOL_REF."}, {"sha": "ae98448f44c8cc84d3cd97dc80a78173787ce239", "filename": "gcc/flow.c", "status": "modified", "additions": 36, "deletions": 31, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7bcd6f0571ef7f5fb87c713b7a612252497056/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7bcd6f0571ef7f5fb87c713b7a612252497056/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=fd7bcd6f0571ef7f5fb87c713b7a612252497056", "patch": "@@ -5010,6 +5010,20 @@ ior_reg_cond (old, x, add)\n {\n   rtx op0, op1;\n \n+  if (GET_RTX_CLASS (GET_CODE (old)) == '<')\n+    {\n+      if (GET_RTX_CLASS (GET_CODE (x)) == '<'\n+\t  && GET_CODE (x) == reverse_condition (GET_CODE (old))\n+\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n+\treturn const1_rtx;\n+      if (GET_CODE (x) == GET_CODE (old)\n+\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n+\treturn old;\n+      if (! add)\n+\treturn old;\n+      return gen_rtx_IOR (0, old, x);\n+    }\n+\n   switch (GET_CODE (old))\n     {\n     case IOR:\n@@ -5062,19 +5076,6 @@ ior_reg_cond (old, x, add)\n \treturn old;\n       return gen_rtx_IOR (0, old, x);\n \n-    case EQ:\n-    case NE:\n-      if ((GET_CODE (x) == EQ || GET_CODE (x) == NE)\n-\t  && GET_CODE (x) != GET_CODE (old)\n-\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n-\treturn const1_rtx;\n-      if (GET_CODE (x) == GET_CODE (old)\n-\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n-\treturn old;\n-      if (! add)\n-\treturn old;\n-      return gen_rtx_IOR (0, old, x);\n-\n     default:\n       abort ();\n     }\n@@ -5112,6 +5113,20 @@ and_reg_cond (old, x, add)\n {\n   rtx op0, op1;\n \n+  if (GET_RTX_CLASS (GET_CODE (old)) == '<')\n+    {\n+      if (GET_RTX_CLASS (GET_CODE (x)) == '<'\n+\t  && GET_CODE (x) == reverse_condition (GET_CODE (old))\n+\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n+\treturn const0_rtx;\n+      if (GET_CODE (x) == GET_CODE (old)\n+\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n+\treturn old;\n+      if (! add)\n+\treturn old;\n+      return gen_rtx_AND (0, old, x);\n+    }\n+\n   switch (GET_CODE (old))\n     {\n     case IOR:\n@@ -5164,19 +5179,6 @@ and_reg_cond (old, x, add)\n \treturn old;\n       return gen_rtx_AND (0, old, x);\n \n-    case EQ:\n-    case NE:\n-      if ((GET_CODE (x) == EQ || GET_CODE (x) == NE)\n-\t  && GET_CODE (x) != GET_CODE (old)\n-\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n-\treturn const0_rtx;\n-      if (GET_CODE (x) == GET_CODE (old)\n-\t  && REGNO (XEXP (x, 0)) == REGNO (XEXP (old, 0)))\n-\treturn old;\n-      if (! add)\n-\treturn old;\n-      return gen_rtx_AND (0, old, x);\n-\n     default:\n       abort ();\n     }\n@@ -5193,6 +5195,14 @@ elim_reg_cond (x, regno)\n      unsigned int regno;\n {\n   rtx op0, op1;\n+\n+  if (GET_RTX_CLASS (GET_CODE (x)) == '<')\n+    {\n+      if (REGNO (XEXP (x, 0)) == regno)\n+\treturn const0_rtx;\n+      return x;\n+    }\n+\n   switch (GET_CODE (x))\n     {\n     case AND:\n@@ -5231,11 +5241,6 @@ elim_reg_cond (x, regno)\n \treturn not_reg_cond (op0);\n       return x;\n \n-    case EQ:\n-    case NE:\n-      if (REGNO (XEXP (x, 0)) == regno)\n-\treturn const0_rtx;\n-      return x;\n     default:\n       abort ();\n     }"}]}