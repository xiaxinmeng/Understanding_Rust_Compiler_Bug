{"sha": "0b04ec8c2190fe80e0799c61f42549a6194e3979", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIwNGVjOGMyMTkwZmU4MGUwNzk5YzYxZjQyNTQ5YTYxOTRlMzk3OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-18T10:33:10Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-18T10:33:10Z"}, "message": "(convert_memory_address, case PLUS, MULT): Don't commute operation\nwith extension if not adding small integer.\n\nFrom-SVN: r12292", "tree": {"sha": "9d26ee7e7eb897c8cdd301fa3f255406fc5fbaba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d26ee7e7eb897c8cdd301fa3f255406fc5fbaba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b04ec8c2190fe80e0799c61f42549a6194e3979", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b04ec8c2190fe80e0799c61f42549a6194e3979", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b04ec8c2190fe80e0799c61f42549a6194e3979", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b04ec8c2190fe80e0799c61f42549a6194e3979/comments", "author": null, "committer": null, "parents": [{"sha": "489af5d14b2291aa2e2118819060b12be7e1a0f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/489af5d14b2291aa2e2118819060b12be7e1a0f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/489af5d14b2291aa2e2118819060b12be7e1a0f8"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "b918294ec841f77b7895657f4e35e0e527a5338c", "filename": "gcc/explow.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b04ec8c2190fe80e0799c61f42549a6194e3979/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b04ec8c2190fe80e0799c61f42549a6194e3979/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=0b04ec8c2190fe80e0799c61f42549a6194e3979", "patch": "@@ -304,8 +304,11 @@ convert_memory_address (to_mode, x)\n      enum machine_mode to_mode;\n      rtx x;\n {\n+  enum machine_mode from_mode = to_mode == ptr_mode ? Pmode : ptr_mode;\n   rtx temp;\n \n+  /* Here we handle some special cases.  If none of them apply, fall through\n+     to the default case.  */\n   switch (GET_CODE (x))\n     {\n     case CONST_INT:\n@@ -320,21 +323,25 @@ convert_memory_address (to_mode, x)\n       SYMBOL_REF_FLAG (temp) = SYMBOL_REF_FLAG (x);\n       return temp;\n \n-    case PLUS:\n-    case MULT:\n-      return gen_rtx (GET_CODE (x), to_mode, \n-\t\t      convert_memory_address (to_mode, XEXP (x, 0)),\n-\t\t      convert_memory_address (to_mode, XEXP (x, 1)));\n-\n     case CONST:\n       return gen_rtx (CONST, to_mode, \n \t\t      convert_memory_address (to_mode, XEXP (x, 0)));\n \n-    default:\n-      return convert_modes (to_mode,\n-\t\t\t    to_mode == ptr_mode ? Pmode : ptr_mode,\n-\t\t\t    x, POINTERS_EXTEND_UNSIGNED);\n+    case PLUS:\n+    case MULT:\n+      /* For addition the second operand is a small constant, we can safely\n+\t permute the converstion and addition operation.  We can always safely\n+\t permute them if we are making the address narrower.  */\n+      if (GET_MODE_SIZE (to_mode) < GET_MODE_SIZE (from_mode)\n+\t  || (GET_CODE (x) == PLUS && GET_CODE (XEXP (x, 1)) == CONST_INT\n+\t      && INTVAL (x) + 20000 < 40000))\n+\treturn gen_rtx (GET_CODE (x), to_mode, \n+\t\t\tconvert_memory_address (to_mode, XEXP (x, 0)),\n+\t\t\tconvert_memory_address (to_mode, XEXP (x, 1)));\n     }\n+\n+  return convert_modes (to_mode, from_mode,\n+\t\t\tx, POINTERS_EXTEND_UNSIGNED);\n }\n #endif\n "}]}