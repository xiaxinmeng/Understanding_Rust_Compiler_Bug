{"sha": "5512eabc3e162c2c1e4c54febc716353519e51f0", "node_id": "C_kwDOANBUbNoAKDU1MTJlYWJjM2UxNjJjMmMxZTRjNTRmZWJjNzE2MzUzNTE5ZTUxZjA", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-04-28T14:22:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-06-01T08:43:15Z"}, "message": "[Ada] Incorrect code for anonymous access-to-function with convention C\n\nThis patch fixes a bug where the compiler generates incorrect code for a\ncall via an object with convention C, whose type is an anonymous\naccess-to-function type.\n\ngcc/ada/\n\n\t* einfo-utils.adb (Set_Convention): Call Set_Convention\n\trecursively, so that Set_Can_Use_Internal_Rep is called (if\n\tappropriate) on the anonymous access type of the object, and its\n\tdesignated subprogram type.\n\t* sem_ch3.adb (Access_Definition): Remove redundant call to\n\tSet_Can_Use_Internal_Rep.", "tree": {"sha": "2a3d16b45828288ea5d103979c0a277c48a4baa8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2a3d16b45828288ea5d103979c0a277c48a4baa8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5512eabc3e162c2c1e4c54febc716353519e51f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5512eabc3e162c2c1e4c54febc716353519e51f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5512eabc3e162c2c1e4c54febc716353519e51f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5512eabc3e162c2c1e4c54febc716353519e51f0/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd52053f80846df2ea22e3fff059ebc094e649b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cd52053f80846df2ea22e3fff059ebc094e649b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cd52053f80846df2ea22e3fff059ebc094e649b"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "5e778b127f6d0212da93bda9ebcee16b187fcdc7", "filename": "gcc/ada/einfo-utils.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5512eabc3e162c2c1e4c54febc716353519e51f0/gcc%2Fada%2Feinfo-utils.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5512eabc3e162c2c1e4c54febc716353519e51f0/gcc%2Fada%2Feinfo-utils.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo-utils.adb?ref=5512eabc3e162c2c1e4c54febc716353519e51f0", "patch": "@@ -2659,7 +2659,7 @@ package body Einfo.Utils is\n                             | E_Anonymous_Access_Subprogram_Type\n               and then not Has_Convention_Pragma (Typ)\n             then\n-               Set_Basic_Convention (Typ, Val);\n+               Set_Convention (Typ, Val);\n                Set_Has_Convention_Pragma (Typ);\n \n                --  And for the access subprogram type, deal similarly with the\n@@ -2669,10 +2669,9 @@ package body Einfo.Utils is\n                   declare\n                      Dtype : constant Entity_Id := Designated_Type (Typ);\n                   begin\n-                     if Ekind (Dtype) = E_Subprogram_Type\n-                       and then not Has_Convention_Pragma (Dtype)\n-                     then\n-                        Set_Basic_Convention (Dtype, Val);\n+                     if Ekind (Dtype) = E_Subprogram_Type then\n+                        pragma Assert (not Has_Convention_Pragma (Dtype));\n+                        Set_Convention (Dtype, Val);\n                         Set_Has_Convention_Pragma (Dtype);\n                      end if;\n                   end;"}, {"sha": "b7f26a3a066f09329b834b954db81f2dd2aace1d", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5512eabc3e162c2c1e4c54febc716353519e51f0/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5512eabc3e162c2c1e4c54febc716353519e51f0/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=5512eabc3e162c2c1e4c54febc716353519e51f0", "patch": "@@ -876,9 +876,6 @@ package body Sem_Ch3 is\n             Mutate_Ekind (Anon_Type, E_Anonymous_Access_Subprogram_Type);\n          end if;\n \n-         Set_Can_Use_Internal_Rep\n-           (Anon_Type, not Always_Compatible_Rep_On_Target);\n-\n          --  If the anonymous access is associated with a protected operation,\n          --  create a reference to it after the enclosing protected definition\n          --  because the itype will be used in the subsequent bodies."}]}