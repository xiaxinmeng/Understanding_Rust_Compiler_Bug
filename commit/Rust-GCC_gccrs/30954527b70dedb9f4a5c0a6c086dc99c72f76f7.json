{"sha": "30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA5NTQ1MjdiNzBkZWRiOWY0YTVjMGE2YzA4NmRjOTljNzJmNzZmNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2015-09-28T21:50:22Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2015-09-28T21:50:22Z"}, "message": "Update soft-fp from glibc.\n\nThis patch updates the soft-fp code in libgcc from glibc.  There are\nno changes here of significance to the use of soft-fp in GCC (and so\nno testsuite additions); it's simply an update to bring in the latest\nsoft-fp version (which will also hopefully go into Linux 4.4 to\nreplace the 15-year-old copy currently in Linux).\n\nBootstrapped with no regressions on x86_64-pc-linux-gnu.\n\n\t* soft-fp/adddf3.c: Update from glibc.\n\t* soft-fp/addsf3.c: Likewise.\n\t* soft-fp/addtf3.c: Likewise.\n\t* soft-fp/divdf3.c: Likewise.\n\t* soft-fp/divsf3.c: Likewise.\n\t* soft-fp/divtf3.c: Likewise.\n\t* soft-fp/double.h: Likewise.\n\t* soft-fp/eqdf2.c: Likewise.\n\t* soft-fp/eqsf2.c: Likewise.\n\t* soft-fp/eqtf2.c: Likewise.\n\t* soft-fp/extenddftf2.c: Likewise.\n\t* soft-fp/extended.h: Likewise.\n\t* soft-fp/extendsfdf2.c: Likewise.\n\t* soft-fp/extendsftf2.c: Likewise.\n\t* soft-fp/extendxftf2.c: Likewise.\n\t* soft-fp/fixdfdi.c: Likewise.\n\t* soft-fp/fixdfsi.c: Likewise.\n\t* soft-fp/fixdfti.c: Likewise.\n\t* soft-fp/fixsfdi.c: Likewise.\n\t* soft-fp/fixsfsi.c: Likewise.\n\t* soft-fp/fixsfti.c: Likewise.\n\t* soft-fp/fixtfdi.c: Likewise.\n\t* soft-fp/fixtfsi.c: Likewise.\n\t* soft-fp/fixtfti.c: Likewise.\n\t* soft-fp/fixunsdfdi.c: Likewise.\n\t* soft-fp/fixunsdfsi.c: Likewise.\n\t* soft-fp/fixunsdfti.c: Likewise.\n\t* soft-fp/fixunssfdi.c: Likewise.\n\t* soft-fp/fixunssfsi.c: Likewise.\n\t* soft-fp/fixunssfti.c: Likewise.\n\t* soft-fp/fixunstfdi.c: Likewise.\n\t* soft-fp/fixunstfsi.c: Likewise.\n\t* soft-fp/fixunstfti.c: Likewise.\n\t* soft-fp/floatdidf.c: Likewise.\n\t* soft-fp/floatdisf.c: Likewise.\n\t* soft-fp/floatditf.c: Likewise.\n\t* soft-fp/floatsidf.c: Likewise.\n\t* soft-fp/floatsisf.c: Likewise.\n\t* soft-fp/floatsitf.c: Likewise.\n\t* soft-fp/floattidf.c: Likewise.\n\t* soft-fp/floattisf.c: Likewise.\n\t* soft-fp/floattitf.c: Likewise.\n\t* soft-fp/floatundidf.c: Likewise.\n\t* soft-fp/floatundisf.c: Likewise.\n\t* soft-fp/floatunditf.c: Likewise.\n\t* soft-fp/floatunsidf.c: Likewise.\n\t* soft-fp/floatunsisf.c: Likewise.\n\t* soft-fp/floatunsitf.c: Likewise.\n\t* soft-fp/floatuntidf.c: Likewise.\n\t* soft-fp/floatuntisf.c: Likewise.\n\t* soft-fp/floatuntitf.c: Likewise.\n\t* soft-fp/gedf2.c: Likewise.\n\t* soft-fp/gesf2.c: Likewise.\n\t* soft-fp/getf2.c: Likewise.\n\t* soft-fp/ledf2.c: Likewise.\n\t* soft-fp/lesf2.c: Likewise.\n\t* soft-fp/letf2.c: Likewise.\n\t* soft-fp/muldf3.c: Likewise.\n\t* soft-fp/mulsf3.c: Likewise.\n\t* soft-fp/multf3.c: Likewise.\n\t* soft-fp/negdf2.c: Likewise.\n\t* soft-fp/negsf2.c: Likewise.\n\t* soft-fp/negtf2.c: Likewise.\n\t* soft-fp/op-1.h: Likewise.\n\t* soft-fp/op-2.h: Likewise.\n\t* soft-fp/op-4.h: Likewise.\n\t* soft-fp/op-8.h: Likewise.\n\t* soft-fp/op-common.h: Likewise.\n\t* soft-fp/quad.h: Likewise.\n\t* soft-fp/single.h: Likewise.\n\t* soft-fp/soft-fp.h: Likewise.\n\t* soft-fp/subdf3.c: Likewise.\n\t* soft-fp/subsf3.c: Likewise.\n\t* soft-fp/subtf3.c: Likewise.\n\t* soft-fp/truncdfsf2.c: Likewise.\n\t* soft-fp/trunctfdf2.c: Likewise.\n\t* soft-fp/trunctfsf2.c: Likewise.\n\t* soft-fp/trunctfxf2.c: Likewise.\n\t* soft-fp/unorddf2.c: Likewise.\n\t* soft-fp/unordsf2.c: Likewise.\n\t* soft-fp/unordtf2.c: Likewise.\n\nFrom-SVN: r228223", "tree": {"sha": "24de4d8b10df03f1b4798ffbcfaddf3f575206d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24de4d8b10df03f1b4798ffbcfaddf3f575206d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79124116d6046ff960b0737f31a64f7c563cc9a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79124116d6046ff960b0737f31a64f7c563cc9a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79124116d6046ff960b0737f31a64f7c563cc9a7"}], "stats": {"total": 723, "additions": 587, "deletions": 136}, "files": [{"sha": "a2d39c07dfaef550f4cfd8f87a7d33a6bcceafdc", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,3 +1,87 @@\n+2015-09-28  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* soft-fp/adddf3.c: Update from glibc.\n+\t* soft-fp/addsf3.c: Likewise.\n+\t* soft-fp/addtf3.c: Likewise.\n+\t* soft-fp/divdf3.c: Likewise.\n+\t* soft-fp/divsf3.c: Likewise.\n+\t* soft-fp/divtf3.c: Likewise.\n+\t* soft-fp/double.h: Likewise.\n+\t* soft-fp/eqdf2.c: Likewise.\n+\t* soft-fp/eqsf2.c: Likewise.\n+\t* soft-fp/eqtf2.c: Likewise.\n+\t* soft-fp/extenddftf2.c: Likewise.\n+\t* soft-fp/extended.h: Likewise.\n+\t* soft-fp/extendsfdf2.c: Likewise.\n+\t* soft-fp/extendsftf2.c: Likewise.\n+\t* soft-fp/extendxftf2.c: Likewise.\n+\t* soft-fp/fixdfdi.c: Likewise.\n+\t* soft-fp/fixdfsi.c: Likewise.\n+\t* soft-fp/fixdfti.c: Likewise.\n+\t* soft-fp/fixsfdi.c: Likewise.\n+\t* soft-fp/fixsfsi.c: Likewise.\n+\t* soft-fp/fixsfti.c: Likewise.\n+\t* soft-fp/fixtfdi.c: Likewise.\n+\t* soft-fp/fixtfsi.c: Likewise.\n+\t* soft-fp/fixtfti.c: Likewise.\n+\t* soft-fp/fixunsdfdi.c: Likewise.\n+\t* soft-fp/fixunsdfsi.c: Likewise.\n+\t* soft-fp/fixunsdfti.c: Likewise.\n+\t* soft-fp/fixunssfdi.c: Likewise.\n+\t* soft-fp/fixunssfsi.c: Likewise.\n+\t* soft-fp/fixunssfti.c: Likewise.\n+\t* soft-fp/fixunstfdi.c: Likewise.\n+\t* soft-fp/fixunstfsi.c: Likewise.\n+\t* soft-fp/fixunstfti.c: Likewise.\n+\t* soft-fp/floatdidf.c: Likewise.\n+\t* soft-fp/floatdisf.c: Likewise.\n+\t* soft-fp/floatditf.c: Likewise.\n+\t* soft-fp/floatsidf.c: Likewise.\n+\t* soft-fp/floatsisf.c: Likewise.\n+\t* soft-fp/floatsitf.c: Likewise.\n+\t* soft-fp/floattidf.c: Likewise.\n+\t* soft-fp/floattisf.c: Likewise.\n+\t* soft-fp/floattitf.c: Likewise.\n+\t* soft-fp/floatundidf.c: Likewise.\n+\t* soft-fp/floatundisf.c: Likewise.\n+\t* soft-fp/floatunditf.c: Likewise.\n+\t* soft-fp/floatunsidf.c: Likewise.\n+\t* soft-fp/floatunsisf.c: Likewise.\n+\t* soft-fp/floatunsitf.c: Likewise.\n+\t* soft-fp/floatuntidf.c: Likewise.\n+\t* soft-fp/floatuntisf.c: Likewise.\n+\t* soft-fp/floatuntitf.c: Likewise.\n+\t* soft-fp/gedf2.c: Likewise.\n+\t* soft-fp/gesf2.c: Likewise.\n+\t* soft-fp/getf2.c: Likewise.\n+\t* soft-fp/ledf2.c: Likewise.\n+\t* soft-fp/lesf2.c: Likewise.\n+\t* soft-fp/letf2.c: Likewise.\n+\t* soft-fp/muldf3.c: Likewise.\n+\t* soft-fp/mulsf3.c: Likewise.\n+\t* soft-fp/multf3.c: Likewise.\n+\t* soft-fp/negdf2.c: Likewise.\n+\t* soft-fp/negsf2.c: Likewise.\n+\t* soft-fp/negtf2.c: Likewise.\n+\t* soft-fp/op-1.h: Likewise.\n+\t* soft-fp/op-2.h: Likewise.\n+\t* soft-fp/op-4.h: Likewise.\n+\t* soft-fp/op-8.h: Likewise.\n+\t* soft-fp/op-common.h: Likewise.\n+\t* soft-fp/quad.h: Likewise.\n+\t* soft-fp/single.h: Likewise.\n+\t* soft-fp/soft-fp.h: Likewise.\n+\t* soft-fp/subdf3.c: Likewise.\n+\t* soft-fp/subsf3.c: Likewise.\n+\t* soft-fp/subtf3.c: Likewise.\n+\t* soft-fp/truncdfsf2.c: Likewise.\n+\t* soft-fp/trunctfdf2.c: Likewise.\n+\t* soft-fp/trunctfsf2.c: Likewise.\n+\t* soft-fp/trunctfxf2.c: Likewise.\n+\t* soft-fp/unorddf2.c: Likewise.\n+\t* soft-fp/unordsf2.c: Likewise.\n+\t* soft-fp/unordtf2.c: Likewise.\n+\n 2015-09-24  Richard Earnshaw  <rearnsha@arm.com>\n \n \tPR libgcc/67624"}, {"sha": "4d09525d3e6e9f6378295bd5cecf3993b8f6d3d7", "filename": "libgcc/soft-fp/adddf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fadddf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fadddf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fadddf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a + b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "5006af40e9c7119d18f35c0c259c1a9262a7de6f", "filename": "libgcc/soft-fp/addsf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Faddsf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Faddsf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Faddsf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a + b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "5894fec954b70e326cc05142a8951c90dfda8b3f", "filename": "libgcc/soft-fp/addtf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Faddtf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Faddtf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Faddtf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a + b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "878d9329760e1669fae9b865ccce7f6ad9a92d7a", "filename": "libgcc/soft-fp/divdf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivdf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivdf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fdivdf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a / b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "50de502057cf7bc12bcc3b8c691fdbce9c1d3e0e", "filename": "libgcc/soft-fp/divsf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivsf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivsf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fdivsf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a / b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "e74591964d6f84e23cdc7969115b2ef07911843f", "filename": "libgcc/soft-fp/divtf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivtf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdivtf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fdivtf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a / b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "a05713f683921c4834d475c82ac3fc80fe6aa36c", "filename": "libgcc/soft-fp/double.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdouble.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fdouble.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fdouble.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Double Precision\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,6 +30,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_DOUBLE_H\n+#define SOFT_FP_DOUBLE_H\t1\n+\n #if _FP_W_TYPE_SIZE < 32\n # error \"Here's a nickel kid.  Go buy yourself a real computer.\"\n #endif\n@@ -182,6 +185,8 @@ union _FP_UNION_D\n # define FP_CMP_UNORD_D(r, X, Y, ex)\t_FP_CMP_UNORD (D, 2, (r), X, Y, (ex))\n \n # define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 2, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_D(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (D, 2, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_D(X)\t_FP_FRAC_HIGH_2 (X)\n@@ -304,6 +309,8 @@ union _FP_UNION_D\n # define FP_CMP_UNORD_D(r, X, Y, ex)\t_FP_CMP_UNORD (D, 1, (r), X, Y, (ex))\n \n # define FP_TO_INT_D(r, X, rsz, rsg)\t_FP_TO_INT (D, 1, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_D(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (D, 1, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_D(X, r, rs, rt)\t_FP_FROM_INT (D, 1, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_D(X)\t_FP_FRAC_HIGH_1 (X)\n@@ -312,3 +319,5 @@ union _FP_UNION_D\n # define _FP_FRAC_HIGH_DW_D(X)\t_FP_FRAC_HIGH_2 (X)\n \n #endif /* W_TYPE_SIZE < 64 */\n+\n+#endif /* !SOFT_FP_DOUBLE_H */"}, {"sha": "37d2684448ab8e04c44eae60b9384edacc024b2b", "filename": "libgcc/soft-fp/eqdf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqdf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 otherwise\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "f6f83b72975a56139b78e9f98e8888ed2584b8a6", "filename": "libgcc/soft-fp/eqsf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqsf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 otherwise\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "23ac78854b4260fc9f6843fb9a686e389e02b92a", "filename": "libgcc/soft-fp/eqtf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Feqtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Feqtf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 otherwise\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "c89af56f01151b367bd3f656c4ad8d68e7ff899e", "filename": "libgcc/soft-fp/extenddftf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextenddftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextenddftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextenddftf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a converted to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "428f9178a6f3348dafdcc9f53b59983430fd855b", "filename": "libgcc/soft-fp/extended.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextended.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextended.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextended.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Extended Precision.\n-   Copyright (C) 1999-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1999-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Jakub Jelinek (jj@ultra.linux.cz).\n \n@@ -27,6 +27,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_EXTENDED_H\n+#define SOFT_FP_EXTENDED_H\t1\n+\n #if _FP_W_TYPE_SIZE < 32\n # error \"Here's a nickel, kid. Go buy yourself a real computer.\"\n #endif\n@@ -292,6 +295,8 @@ union _FP_UNION_E\n # define FP_CMP_UNORD_E(r, X, Y, ex)\t_FP_CMP_UNORD (E, 4, (r), X, Y, (ex))\n \n # define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 4, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_E(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (E, 4, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 4, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_E(X)\t(X##_f[2])\n@@ -494,6 +499,8 @@ union _FP_UNION_E\n # define FP_CMP_UNORD_E(r, X, Y, ex)\t_FP_CMP_UNORD (E, 2, (r), X, Y, (ex))\n \n # define FP_TO_INT_E(r, X, rsz, rsg)\t_FP_TO_INT (E, 2, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_E(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (E, 2, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_E(X, r, rs, rt)\t_FP_FROM_INT (E, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_E(X)\t(X##_f1)\n@@ -502,3 +509,5 @@ union _FP_UNION_E\n # define _FP_FRAC_HIGH_DW_E(X)\t(X##_f[2])\n \n #endif /* not _FP_W_TYPE_SIZE < 64 */\n+\n+#endif /* !SOFT_FP_EXTENDED_H */"}, {"sha": "21bf18fa4370683b3e808b96fba46b7b16cb769f", "filename": "libgcc/soft-fp/extendsfdf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendsfdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendsfdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendsfdf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a converted to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "e5bfbbe1e41af05a1b3eb42152cb1dada25e07e2", "filename": "libgcc/soft-fp/extendsftf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendsftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendsftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendsftf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a converted to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "87e4c7a0a5ace6b9de73a31afa7f4d1fbb49ce88", "filename": "libgcc/soft-fp/extendxftf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendxftf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fextendxftf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fextendxftf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a converted to IEEE quad\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "9a6894d5c54ecf8fb3198ff4ba8faba1985eb5dc", "filename": "libgcc/soft-fp/fixdfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixdfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "bebee75bbd15b8cbc3c6b9a1b534684d3173bf04", "filename": "libgcc/soft-fp/fixdfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixdfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "549166892ca206abf5400f06e0e9b5429212b0ee", "filename": "libgcc/soft-fp/fixdfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixdfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixdfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE double to 128bit signed integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "42a15b98c7bf2cd5b1157b39e30bbbe878c7598f", "filename": "libgcc/soft-fp/fixsfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixsfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "1bf3dd8fb93909ed9fc8cedfbae81c7310001d95", "filename": "libgcc/soft-fp/fixsfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixsfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "fea7d86f5fdc1948b2806c72ef98be09597fbae2", "filename": "libgcc/soft-fp/fixsfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixsfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixsfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE single to 128bit signed integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "84be9b12d3ad719df3b117b20c3918f61c359205", "filename": "libgcc/soft-fp/fixtfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixtfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "7f694ca69733cf7a79c77eba016b81787078dd54", "filename": "libgcc/soft-fp/fixtfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixtfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit signed integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "e36a6b6ea44aedf714ac82d937b803ae2dbb6c38", "filename": "libgcc/soft-fp/fixtfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixtfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixtfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE quad to 128bit signed integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "16eeded22a1a7c405565c90ad02c602c5788ad5c", "filename": "libgcc/soft-fp/fixunsdfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunsdfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "dba8ccdd73ea2f8e6bdb44f39f775d8e3f1a8a31", "filename": "libgcc/soft-fp/fixunsdfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunsdfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "a803ee7f654f72021471e36a2006981e77cefb7c", "filename": "libgcc/soft-fp/fixunsdfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunsdfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunsdfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE double to 128bit unsigned integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "00244567dafcaebb5750747e43e24f06ed293d31", "filename": "libgcc/soft-fp/fixunssfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunssfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "360344397afa13350cf48d14e79401a4abf64d5a", "filename": "libgcc/soft-fp/fixunssfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunssfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "65d836d006ea649ce86a30f1b19f3961c20dc956", "filename": "libgcc/soft-fp/fixunssfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunssfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunssfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE single to 128bit unsigned integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "390030fc6fae1d3261dd706ab7b2b72453389506", "filename": "libgcc/soft-fp/fixunstfdi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfdi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfdi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunstfdi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 64bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "ce9a07aa973f192b2ef76f338b0d93b47b075e67", "filename": "libgcc/soft-fp/fixunstfsi.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunstfsi.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a to 32bit unsigned integer\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "351e535b4fee8aa8139c37a3b91a5b2d2468a7ab", "filename": "libgcc/soft-fp/fixunstfti.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfti.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffixunstfti.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffixunstfti.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert IEEE quad to 128bit unsigned integer\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "ff1a12efb000dac5d13c315209ab768357f8dcfc", "filename": "libgcc/soft-fp/floatdidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatdidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatdidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatdidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit signed integer to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "3397d3ff0fee75a193955f1135cead5f03ba1aa2", "filename": "libgcc/soft-fp/floatdisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatdisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatdisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatdisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit signed integer to IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "e2b5ea11d2348bb4d17daeef5a8999a285e94345", "filename": "libgcc/soft-fp/floatditf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatditf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatditf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatditf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit signed integer to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "4e10c2e0650cc1d33f97c235a6f56e451e86a901", "filename": "libgcc/soft-fp/floatsidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatsidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit signed integer to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "71fd463af2aab8e9485e01bf889da2f35c0d56be", "filename": "libgcc/soft-fp/floatsisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatsisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit signed integer to IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "f07a883db7b7d5b95c1999231edc3cd4126ccd15", "filename": "libgcc/soft-fp/floatsitf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatsitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatsitf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit signed integer to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "8fbe2775f28a2151e5261fcd822f679abf19f4b2", "filename": "libgcc/soft-fp/floattidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloattidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit signed integer to IEEE double\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "4f6f4a7e3ba09798f3340d07c89e3a859eacf7e2", "filename": "libgcc/soft-fp/floattisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloattisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit signed integer to IEEE single\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "b2ed57dd3e4e1894a8bca77dbc95b42e8075d391", "filename": "libgcc/soft-fp/floattitf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloattitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloattitf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit signed integer to IEEE quad\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "70d8cc3751442cadd55405a91883686fd6d6c5ac", "filename": "libgcc/soft-fp/floatundidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatundidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatundidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatundidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit unsigned integer to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "09f6e395a30d0644df4c14d181b4dd835235fbc7", "filename": "libgcc/soft-fp/floatundisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatundisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatundisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatundisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit unsigned integer to IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "7aa081b903601d37bc554434e98a0661199b0813", "filename": "libgcc/soft-fp/floatunditf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunditf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunditf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatunditf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 64bit unsigned integer to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "a9da8e1ae02ad87adbcd6a68d267c5f1d84d2d05", "filename": "libgcc/soft-fp/floatunsidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatunsidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit unsigned integer to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "5a560efd8d48d1270755cb71631e5beb12dc8ec7", "filename": "libgcc/soft-fp/floatunsisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatunsisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit unsigned integer to IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "2022d53e45d2ac02c45f59a9ad9a5455d8fcca40", "filename": "libgcc/soft-fp/floatunsitf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatunsitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatunsitf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 32bit unsigned integer to IEEE quad\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "6f678c416db400387500a15a7b129bf4adb3dd09", "filename": "libgcc/soft-fp/floatuntidf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntidf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntidf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatuntidf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit unsigned integer to IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "bb389d3d87dab0d5c1da6b45a87397120fb6ed46", "filename": "libgcc/soft-fp/floatuntisf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntisf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntisf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatuntisf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit unsigned integer to IEEE single\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "0d3878f7df46559d0c180b67f52bd7e5cee72a6d", "filename": "libgcc/soft-fp/floatuntitf.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntitf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ffloatuntitf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ffloatuntitf.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Convert a 128bit unsigned integer to IEEE quad\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "eea3647f82b46d6712c40e4e38bc7d477387326a", "filename": "libgcc/soft-fp/gedf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgedf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgedf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgedf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, -2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "b554207bf4052418f362ae309849b72cd8e78d29", "filename": "libgcc/soft-fp/gesf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgesf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgesf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgesf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, -2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "3c30431793da02ac1ed5657f8f23b3a152500e55", "filename": "libgcc/soft-fp/getf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgetf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fgetf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fgetf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, -2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "ea059cc3f9ac9731f783fd8380c29c898855efeb", "filename": "libgcc/soft-fp/ledf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fledf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fledf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fledf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, 2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "b47bca9b18f336bbdb18da05930bef89e20653a9", "filename": "libgcc/soft-fp/lesf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Flesf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Flesf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Flesf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, 2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "113a2308cd0c436d750d3c465d57c3af05e6bb99", "filename": "libgcc/soft-fp/letf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fletf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fletf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fletf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 0 iff a == b, 1 iff a > b, 2 iff a ? b, -1 iff a < b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "acea9a76a41b58a2b64a9b17b7a66c173d2d7c69", "filename": "libgcc/soft-fp/muldf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmuldf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmuldf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fmuldf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a * b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "fd9c6ff8d84e3fa131b673b0180c17d86232ee3a", "filename": "libgcc/soft-fp/mulsf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmulsf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmulsf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fmulsf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a * b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "c8f352fd7fcdd9049a460ad1e4167315d205a264", "filename": "libgcc/soft-fp/multf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmultf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fmultf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fmultf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a * b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "f95e13bd644b49344771c5a79ec7631bce3a629f", "filename": "libgcc/soft-fp/negdf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fnegdf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return -a\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "5bfc486ad8680e72da645327f1bb77bfe0c59fd5", "filename": "libgcc/soft-fp/negsf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fnegsf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return -a\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "cb0a99852962b7472136d90d7e0a8b601146e3f4", "filename": "libgcc/soft-fp/negtf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fnegtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fnegtf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return -a\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "e3a91bfc7b03e101851d1dad124bf2cadb8b4db3", "filename": "libgcc/soft-fp/op-1.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-1.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic one-word fraction declaration and manipulation.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,7 +30,10 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define _FP_FRAC_DECL_1(X)\t_FP_W_TYPE X##_f\n+#ifndef SOFT_FP_OP_1_H\n+#define SOFT_FP_OP_1_H\t1\n+\n+#define _FP_FRAC_DECL_1(X)\t_FP_W_TYPE X##_f _FP_ZERO_INIT\n #define _FP_FRAC_COPY_1(D, S)\t(D##_f = S##_f)\n #define _FP_FRAC_SET_1(X, I)\t(X##_f = I)\n #define _FP_FRAC_HIGH_1(X)\t(X##_f)\n@@ -362,3 +365,5 @@\n /* Convert FP values between word sizes.  */\n \n #define _FP_FRAC_COPY_1_1(D, S)\t\t(D##_f = S##_f)\n+\n+#endif /* !SOFT_FP_OP_1_H */"}, {"sha": "a51eb6b35df52c1e82f65f6b00fc5e0964d03635", "filename": "libgcc/soft-fp/op-2.h", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-2.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic two-word fraction declaration and manipulation.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,7 +30,11 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define _FP_FRAC_DECL_2(X)\t_FP_W_TYPE X##_f0, X##_f1\n+#ifndef SOFT_FP_OP_2_H\n+#define SOFT_FP_OP_2_H\t1\n+\n+#define _FP_FRAC_DECL_2(X)\t\t\t\t\\\n+  _FP_W_TYPE X##_f0 _FP_ZERO_INIT, X##_f1 _FP_ZERO_INIT\n #define _FP_FRAC_COPY_2(D, S)\t(D##_f0 = S##_f0, D##_f1 = S##_f1)\n #define _FP_FRAC_SET_2(X, I)\t__FP_FRAC_SET_2 (X, I)\n #define _FP_FRAC_HIGH_2(X)\t(X##_f1)\n@@ -454,8 +458,8 @@\n \t\t\t\t       _p240, _q240, _r240, _s240;\t\\\n       UDItype _t240, _u240, _v240, _w240, _x240, _y240 = 0;\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-      if ((wfracbits) < 106 || (wfracbits) > 120)\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n+      _FP_STATIC_ASSERT ((wfracbits) >= 106 && (wfracbits) <= 120,\t\\\n+\t\t\t \"wfracbits out of range\");\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       setfetz;\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -697,3 +701,5 @@\n #define _FP_FRAC_COPY_2_1(D, S)\t\t((D##_f0 = S##_f), (D##_f1 = 0))\n \n #define _FP_FRAC_COPY_2_2(D, S)\t\t_FP_FRAC_COPY_2 (D, S)\n+\n+#endif /* !SOFT_FP_OP_2_H */"}, {"sha": "a5805170e4709705d3bc43b3e3a98b6b47eebcf1", "filename": "libgcc/soft-fp/op-4.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-4.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic four-word fraction declaration and manipulation.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,6 +30,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_OP_4_H\n+#define SOFT_FP_OP_4_H\t1\n+\n #define _FP_FRAC_DECL_4(X)\t_FP_W_TYPE X##_f[4]\n #define _FP_FRAC_COPY_4(D, S)\t\t\t\\\n   (D##_f[0] = S##_f[0], D##_f[1] = S##_f[1],\t\\\n@@ -868,3 +871,5 @@\n   while (0)\n \n #define _FP_FRAC_COPY_4_4(D, S)\t_FP_FRAC_COPY_4 (D, S)\n+\n+#endif /* !SOFT_FP_OP_4_H */"}, {"sha": "5267ae34ecba26188b2fa2c269ad16f93e2a794e", "filename": "libgcc/soft-fp/op-8.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-8.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-8.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-8.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Basic eight-word fraction declaration and manipulation.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz) and\n@@ -29,6 +29,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_OP_8_H\n+#define SOFT_FP_OP_8_H\t1\n+\n /* We need just a few things from here for op-4, if we ever need some\n    other macros, they can be added.  */\n #define _FP_FRAC_DECL_8(X)\t_FP_W_TYPE X##_f[8]\n@@ -143,3 +146,5 @@\n       X##_f[0] |= (_FP_FRAC_SRS_8_s != 0);\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n+\n+#endif /* !SOFT_FP_OP_8_H */"}, {"sha": "080ef0e9b9040bb7d7a9619bbe4405546deaf9c6", "filename": "libgcc/soft-fp/op-common.h", "status": "modified", "additions": 327, "deletions": 44, "changes": 371, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fop-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fop-common.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,5 +1,5 @@\n /* Software floating-point emulation. Common operations.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -29,10 +29,13 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n-#define _FP_DECL(wc, X)\t\t\t\t\\\n-  _FP_I_TYPE X##_c __attribute__ ((unused));\t\\\n-  _FP_I_TYPE X##_s __attribute__ ((unused));\t\\\n-  _FP_I_TYPE X##_e __attribute__ ((unused));\t\\\n+#ifndef SOFT_FP_OP_COMMON_H\n+#define SOFT_FP_OP_COMMON_H\t1\n+\n+#define _FP_DECL(wc, X)\t\t\t\t\t\t\\\n+  _FP_I_TYPE X##_c __attribute__ ((unused)) _FP_ZERO_INIT;\t\\\n+  _FP_I_TYPE X##_s __attribute__ ((unused)) _FP_ZERO_INIT;\t\\\n+  _FP_I_TYPE X##_e __attribute__ ((unused)) _FP_ZERO_INIT;\t\\\n   _FP_FRAC_DECL_##wc (X)\n \n /* Test whether the qNaN bit denotes a signaling NaN.  */\n@@ -414,6 +417,7 @@\n       if (X##_s == Y##_s)\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Addition.  */\t\t\t\t\t\t\\\n+\t  __label__ add1, add2, add3, add_done;\t\t\t\t\\\n \t  R##_s = X##_s;\t\t\t\t\t\t\\\n \t  int _FP_ADD_INTERNAL_ediff = X##_e - Y##_e;\t\t\t\\\n \t  if (_FP_ADD_INTERNAL_ediff > 0)\t\t\t\t\\\n@@ -599,6 +603,7 @@\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  /* Subtraction.  */\t\t\t\t\t\t\\\n+\t  __label__ sub1, sub2, sub3, norm, sub_done;\t\t\t\\\n \t  int _FP_ADD_INTERNAL_ediff = X##_e - Y##_e;\t\t\t\\\n \t  if (_FP_ADD_INTERNAL_ediff > 0)\t\t\t\t\\\n \t    {\t\t\t\t\t\t\t\t\\\n@@ -922,7 +927,7 @@\n \t  break;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\\\n+\t  _FP_UNREACHABLE;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -933,6 +938,7 @@\n #define _FP_FMA(fs, wc, dwc, R, X, Y, Z)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      __label__ done_fma;\t\t\t\t\t\t\\\n       FP_DECL_##fs (_FP_FMA_T);\t\t\t\t\t\t\\\n       _FP_FMA_T##_s = X##_s ^ Y##_s;\t\t\t\t\t\\\n       _FP_FMA_T##_e = X##_e + Y##_e + 1;\t\t\t\t\\\n@@ -1086,7 +1092,7 @@\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\t\\\n+\t  _FP_UNREACHABLE;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n       /* T = X * Y is zero, infinity or NaN.  */\t\t\t\\\n@@ -1113,6 +1119,7 @@\n \t  R##_s = Z##_s;\t\t\t\t\t\t\\\n \t  _FP_FRAC_COPY_##wc (R, Z);\t\t\t\t\t\\\n \t  R##_c = Z##_c;\t\t\t\t\t\t\\\n+\t  R##_e = Z##_e;\t\t\t\t\t\t\\\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tcase _FP_CLS_COMBINE (FP_CLS_INF, FP_CLS_INF):\t\t\t\\\n@@ -1141,7 +1148,7 @@\n \t  break;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\t\\\n+\t  _FP_UNREACHABLE;\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     done_fma: ;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -1208,7 +1215,7 @@\n \t  break;\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n \tdefault:\t\t\t\t\t\t\\\n-\t  abort ();\t\t\t\t\t\t\\\n+\t  _FP_UNREACHABLE;\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -1248,13 +1255,54 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Helper for comparisons.  If denormal operands would raise an\n+   exception, check for them, and flush to zero as appropriate\n+   (otherwise, we need only check and flush to zero if it might affect\n+   the result, which is done later with _FP_CMP_CHECK_FLUSH_ZERO).  */\n+#define _FP_CMP_CHECK_DENORM(fs, wc, X, Y)\t\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      if (FP_EX_DENORM != 0)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* We must ensure the correct exceptions are raised for\t\\\n+\t     denormal operands, even though this may not affect the\t\\\n+\t     result of the comparison.  */\t\t\t\t\\\n+\t  if (FP_DENORM_ZERO)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\\\n+\t      _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if ((X##_e == 0 && !_FP_FRAC_ZEROP_##wc (X))\t\t\\\n+\t\t  || (Y##_e == 0 && !_FP_FRAC_ZEROP_##wc (Y)))\t\t\\\n+\t\tFP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n+/* Helper for comparisons.  Check for flushing denormals for zero if\n+   we didn't need to check earlier for any denormal operands.  */\n+#define _FP_CMP_CHECK_FLUSH_ZERO(fs, wc, X, Y)\t\\\n+  do\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\\\n+      if (FP_EX_DENORM == 0)\t\t\t\\\n+\t{\t\t\t\t\t\\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\\\n+\t  _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\\\n+\t}\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\\\n+  while (0)\n+\n /* Main differential comparison routine.  The inputs should be raw not\n    cooked.  The return is -1, 0, 1 for normal values, UN\n    otherwise.  */\n \n #define _FP_CMP(fs, wc, ret, X, Y, un, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      _FP_CMP_CHECK_DENORM (fs, wc, X, Y);\t\t\t\t\\\n       /* NANs are unordered.  */\t\t\t\t\t\\\n       if ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n \t  || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y)))\t\\\n@@ -1267,8 +1315,7 @@\n \t  int _FP_CMP_is_zero_x;\t\t\t\t\t\\\n \t  int _FP_CMP_is_zero_y;\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\\\n-\t  _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\\\n+\t  _FP_CMP_CHECK_FLUSH_ZERO (fs, wc, X, Y);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t  _FP_CMP_is_zero_x\t\t\t\t\t\t\\\n \t    = (!X##_e && _FP_FRAC_ZEROP_##wc (X)) ? 1 : 0;\t\t\\\n@@ -1303,6 +1350,7 @@\n #define _FP_CMP_EQ(fs, wc, ret, X, Y, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      _FP_CMP_CHECK_DENORM (fs, wc, X, Y);\t\t\t\t\\\n       /* NANs are unordered.  */\t\t\t\t\t\\\n       if ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n \t  || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y)))\t\\\n@@ -1312,8 +1360,7 @@\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  _FP_CHECK_FLUSH_ZERO (fs, wc, X);\t\t\t\t\\\n-\t  _FP_CHECK_FLUSH_ZERO (fs, wc, Y);\t\t\t\t\\\n+\t  _FP_CMP_CHECK_FLUSH_ZERO (fs, wc, X, Y);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t  (ret) = !(X##_e == Y##_e\t\t\t\t\t\\\n \t\t    && _FP_FRAC_EQ_##wc (X, Y)\t\t\t\t\\\n@@ -1328,6 +1375,7 @@\n #define _FP_CMP_UNORD(fs, wc, ret, X, Y, ex)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      _FP_CMP_CHECK_DENORM (fs, wc, X, Y);\t\t\t\t\\\n       (ret) = ((X##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (X))\t\\\n \t       || (Y##_e == _FP_EXPMAX_##fs && !_FP_FRAC_ZEROP_##wc (Y))); \\\n       if (ret)\t\t\t\t\t\t\t\t\\\n@@ -1525,19 +1573,234 @@\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+/* Convert from floating point to integer, rounding according to the\n+   current rounding direction.  Input is raw.  RSIGNED is as for\n+   _FP_TO_INT.  */\n+#define _FP_TO_INT_ROUND(fs, wc, r, X, rsize, rsigned)\t\t\t\\\n+  do\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      __label__ _FP_TO_INT_ROUND_done;\t\t\t\t\t\\\n+      if (X##_e < _FP_EXPBIAS_##fs)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  int _FP_TO_INT_ROUND_rounds_away = 0;\t\t\t\t\\\n+\t  if (X##_e == 0)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if (_FP_FRAC_ZEROP_##wc (X))\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  (r) = 0;\t\t\t\t\t\t\\\n+\t\t  goto _FP_TO_INT_ROUND_done;\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  FP_SET_EXCEPTION (FP_EX_DENORM);\t\t\t\\\n+\t\t  if (FP_DENORM_ZERO)\t\t\t\t\t\\\n+\t\t    {\t\t\t\t\t\t\t\\\n+\t\t      (r) = 0;\t\t\t\t\t\t\\\n+\t\t      goto _FP_TO_INT_ROUND_done;\t\t\t\\\n+\t\t    }\t\t\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  /* The result is 0, 1 or -1 depending on the rounding mode;\t\\\n+\t     -1 may cause overflow in the unsigned case.  */\t\t\\\n+\t  switch (FP_ROUNDMODE)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t    case FP_RND_NEAREST:\t\t\t\t\t\\\n+\t      _FP_TO_INT_ROUND_rounds_away\t\t\t\t\\\n+\t\t= (X##_e == _FP_EXPBIAS_##fs - 1\t\t\t\\\n+\t\t   && !_FP_FRAC_ZEROP_##wc (X));\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case FP_RND_ZERO:\t\t\t\t\t\t\\\n+\t      /* _FP_TO_INT_ROUND_rounds_away is already 0.  */\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case FP_RND_PINF:\t\t\t\t\t\t\\\n+\t      _FP_TO_INT_ROUND_rounds_away = !X##_s;\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    case FP_RND_MINF:\t\t\t\t\t\t\\\n+\t      _FP_TO_INT_ROUND_rounds_away = X##_s;\t\t\t\\\n+\t      break;\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  if ((rsigned) == 0 && _FP_TO_INT_ROUND_rounds_away && X##_s)\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* Result of -1 for an unsigned conversion.  */\t\t\\\n+\t      (r) = 0;\t\t\t\t\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_CVI);\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else if ((rsize) == 1 && (rsigned) > 0\t\t\t\\\n+\t\t   && _FP_TO_INT_ROUND_rounds_away && !X##_s)\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* Converting to a 1-bit signed bit-field, which cannot\t\\\n+\t\t represent +1.  */\t\t\t\t\t\\\n+\t      (r) = ((rsigned) == 2 ? -1 : 0);\t\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_CVI);\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      (r) = (_FP_TO_INT_ROUND_rounds_away\t\t\t\\\n+\t\t     ? (X##_s ? -1 : 1)\t\t\t\t\t\\\n+\t\t     : 0);\t\t\t\t\t\t\\\n+\t      FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if ((rsigned) == 2\t\t\t\t\t\t\\\n+\t       && (X##_e\t\t\t\t\t\t\\\n+\t\t   >= ((_FP_EXPMAX_##fs\t\t\t\t\t\\\n+\t\t\t< _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs + (rsize) - 1) \\\n+\t\t       ? _FP_EXPMAX_##fs\t\t\t\t\\\n+\t\t       : _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs + (rsize) - 1))) \\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* Overflow resulting in 0.  */\t\t\t\t\\\n+\t  (r) = 0;\t\t\t\t\t\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\t\\\n+\t\t\t    | FP_EX_INVALID_CVI\t\t\t\t\\\n+\t\t\t    | ((FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t\t&& _FP_ISSIGNAN (fs, wc, X))\t\t\\\n+\t\t\t       ? FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t       : 0));\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else if ((rsigned) != 2\t\t\t\t\t\t\\\n+\t       && (X##_e >= (_FP_EXPMAX_##fs < _FP_EXPBIAS_##fs + (rsize) \\\n+\t\t\t     ? _FP_EXPMAX_##fs\t\t\t\t\\\n+\t\t\t     : (_FP_EXPBIAS_##fs + (rsize)\t\t\\\n+\t\t\t\t- ((rsigned) > 0 && !X##_s)))\t\t\\\n+\t\t   || ((rsigned) == 0 && X##_s)))\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* Definite overflow (does not require rounding to tell).  */\t\\\n+\t  if ((rsigned) != 0)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      (r) = 1;\t\t\t\t\t\t\t\\\n+\t      (r) <<= (rsize) - 1;\t\t\t\t\t\\\n+\t      (r) -= 1 - X##_s;\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      (r) = 0;\t\t\t\t\t\t\t\\\n+\t      if (!X##_s)\t\t\t\t\t\t\\\n+\t\t(r) = ~(r);\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+\t  FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\t\\\n+\t\t\t    | FP_EX_INVALID_CVI\t\t\t\t\\\n+\t\t\t    | ((FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t\t&& _FP_ISSIGNAN (fs, wc, X))\t\t\\\n+\t\t\t       ? FP_EX_INVALID_SNAN\t\t\t\\\n+\t\t\t       : 0));\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\t\\\n+\t  /* The value is finite, with magnitude at least 1.  If\t\\\n+\t     the conversion is unsigned, the value is positive.\t\t\\\n+\t     If RSIGNED is not 2, the value does not definitely\t\t\\\n+\t     overflow by virtue of its exponent, but may still turn\t\\\n+\t     out to overflow after rounding; if RSIGNED is 2, the\t\\\n+\t     exponent may be such that the value definitely overflows,\t\\\n+\t     but at least one mantissa bit will not be shifted out.  */ \\\n+\t  int _FP_TO_INT_ROUND_inexact = 0;\t\t\t\t\\\n+\t  _FP_FRAC_HIGH_RAW_##fs (X) |= _FP_IMPLBIT_##fs;\t\t\\\n+\t  if (X##_e >= _FP_EXPBIAS_##fs + _FP_FRACBITS_##fs - 1)\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* The value is an integer, no rounding needed.  */\t\\\n+\t      _FP_FRAC_ASSEMBLE_##wc ((r), X, (rsize));\t\t\t\\\n+\t      (r) <<= X##_e - _FP_EXPBIAS_##fs - _FP_FRACBITS_##fs + 1; \\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      /* May need to shift in order to round (unless there\t\\\n+\t\t are exactly _FP_WORKBITS fractional bits already).  */\t\\\n+\t      int _FP_TO_INT_ROUND_rshift\t\t\t\t\\\n+\t\t= (_FP_FRACBITS_##fs + _FP_EXPBIAS_##fs\t\t\t\\\n+\t\t   - 1 - _FP_WORKBITS - X##_e);\t\t\t\t\\\n+\t      if (_FP_TO_INT_ROUND_rshift > 0)\t\t\t\t\\\n+\t\t_FP_FRAC_SRS_##wc (X, _FP_TO_INT_ROUND_rshift,\t\t\\\n+\t\t\t\t   _FP_WFRACBITS_##fs);\t\t\t\\\n+\t      else if (_FP_TO_INT_ROUND_rshift < 0)\t\t\t\\\n+\t\t_FP_FRAC_SLL_##wc (X, -_FP_TO_INT_ROUND_rshift);\t\\\n+\t      /* Round like _FP_ROUND, but setting\t\t\t\\\n+\t\t _FP_TO_INT_ROUND_inexact instead of directly setting\t\\\n+\t\t the \"inexact\" exception, since it may turn out we\t\\\n+\t\t should set \"invalid\" instead.  */\t\t\t\\\n+\t      if (_FP_FRAC_LOW_##wc (X) & 7)\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  _FP_TO_INT_ROUND_inexact = 1;\t\t\t\t\\\n+\t\t  switch (FP_ROUNDMODE)\t\t\t\t\t\\\n+\t\t    {\t\t\t\t\t\t\t\\\n+\t\t    case FP_RND_NEAREST:\t\t\t\t\\\n+\t\t      _FP_ROUND_NEAREST (wc, X);\t\t\t\\\n+\t\t      break;\t\t\t\t\t\t\\\n+\t\t    case FP_RND_ZERO:\t\t\t\t\t\\\n+\t\t      _FP_ROUND_ZERO (wc, X);\t\t\t\t\\\n+\t\t      break;\t\t\t\t\t\t\\\n+\t\t    case FP_RND_PINF:\t\t\t\t\t\\\n+\t\t      _FP_ROUND_PINF (wc, X);\t\t\t\t\\\n+\t\t      break;\t\t\t\t\t\t\\\n+\t\t    case FP_RND_MINF:\t\t\t\t\t\\\n+\t\t      _FP_ROUND_MINF (wc, X);\t\t\t\t\\\n+\t\t      break;\t\t\t\t\t\t\\\n+\t\t    }\t\t\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t      _FP_FRAC_SRL_##wc (X, _FP_WORKBITS);\t\t\t\\\n+\t      _FP_FRAC_ASSEMBLE_##wc ((r), X, (rsize));\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  if ((rsigned) != 0 && X##_s)\t\t\t\t\t\\\n+\t    (r) = -(r);\t\t\t\t\t\t\t\\\n+\t  /* An exponent of RSIZE - 1 always needs testing for\t\t\\\n+\t     overflow (either directly overflowing, or overflowing\t\\\n+\t     when rounding up results in 2^RSIZE).  An exponent of\t\\\n+\t     RSIZE - 2 can overflow for positive values when rounding\t\\\n+\t     up to 2^(RSIZE-1), but cannot overflow for negative\t\\\n+\t     values.  Smaller exponents cannot overflow.  */\t\t\\\n+\t  if (X##_e >= (_FP_EXPBIAS_##fs + (rsize) - 1\t\t\t\\\n+\t\t\t- ((rsigned) > 0 && !X##_s)))\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\t\\\n+\t      if (X##_e > _FP_EXPBIAS_##fs + (rsize) - 1\t\t\\\n+\t\t  || (X##_e == _FP_EXPBIAS_##fs + (rsize) - 1\t\t\\\n+\t\t      && (X##_s\t\t\t\t\t\t\\\n+\t\t\t  ? (r) != (((typeof (r)) 1) << ((rsize) - 1))\t\\\n+\t\t\t  : ((rsigned) > 0 || (r) == 0)))\t\t\\\n+\t\t  || ((rsigned) > 0\t\t\t\t\t\\\n+\t\t      && !X##_s\t\t\t\t\t\t\\\n+\t\t      && X##_e == _FP_EXPBIAS_##fs + (rsize) - 2\t\\\n+\t\t      && (r) == (((typeof (r)) 1) << ((rsize) - 1))))\t\\\n+\t\t{\t\t\t\t\t\t\t\\\n+\t\t  if ((rsigned) != 2)\t\t\t\t\t\\\n+\t\t    {\t\t\t\t\t\t\t\\\n+\t\t      if ((rsigned) != 0)\t\t\t\t\\\n+\t\t\t{\t\t\t\t\t\t\\\n+\t\t\t  (r) = 1;\t\t\t\t\t\\\n+\t\t\t  (r) <<= (rsize) - 1;\t\t\t\t\\\n+\t\t\t  (r) -= 1 - X##_s;\t\t\t\t\\\n+\t\t\t}\t\t\t\t\t\t\\\n+\t\t      else\t\t\t\t\t\t\\\n+\t\t\t{\t\t\t\t\t\t\\\n+\t\t\t  (r) = 0;\t\t\t\t\t\\\n+\t\t\t  (r) = ~(r);\t\t\t\t\t\\\n+\t\t\t}\t\t\t\t\t\t\\\n+\t\t    }\t\t\t\t\t\t\t\\\n+\t\t  _FP_TO_INT_ROUND_inexact = 0;\t\t\t\t\\\n+\t\t  FP_SET_EXCEPTION (FP_EX_INVALID | FP_EX_INVALID_CVI);\t\\\n+\t\t}\t\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\t\\\n+\t  if (_FP_TO_INT_ROUND_inexact)\t\t\t\t\t\\\n+\t    FP_SET_EXCEPTION (FP_EX_INEXACT);\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\t\\\n+    _FP_TO_INT_ROUND_done: ;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  while (0)\n+\n /* Convert integer to fp.  Output is raw.  RTYPE is unsigned even if\n    input is signed.  */\n #define _FP_FROM_INT(fs, wc, X, r, rsize, rtype)\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      __label__ pack_semiraw;\t\t\t\t\t\t\\\n       if (r)\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n-\t  rtype _FP_FROM_INT_ur;\t\t\t\t\t\\\n+\t  rtype _FP_FROM_INT_ur = (r);\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t  if ((X##_s = ((r) < 0)))\t\t\t\t\t\\\n-\t    (r) = -(rtype) (r);\t\t\t\t\t\t\\\n+\t    _FP_FROM_INT_ur = -_FP_FROM_INT_ur;\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  _FP_FROM_INT_ur = (rtype) (r);\t\t\t\t\\\n+\t  _FP_STATIC_ASSERT ((rsize) <= 2 * _FP_W_TYPE_SIZE,\t\t\\\n+\t\t\t     \"rsize too large\");\t\t\t\\\n \t  (void) (((rsize) <= _FP_W_TYPE_SIZE)\t\t\t\t\\\n \t\t  ? ({\t\t\t\t\t\t\t\\\n \t\t      int _FP_FROM_INT_lz;\t\t\t\t\\\n@@ -1546,17 +1809,15 @@\n \t\t      X##_e = (_FP_EXPBIAS_##fs + _FP_W_TYPE_SIZE - 1\t\\\n \t\t\t       - _FP_FROM_INT_lz);\t\t\t\\\n \t\t    })\t\t\t\t\t\t\t\\\n-\t\t  : (((rsize) <= 2 * _FP_W_TYPE_SIZE)\t\t\t\\\n-\t\t     ? ({\t\t\t\t\t\t\\\n-\t\t\t int _FP_FROM_INT_lz;\t\t\t\t\\\n-\t\t\t __FP_CLZ_2 (_FP_FROM_INT_lz,\t\t\t\\\n-\t\t\t\t     (_FP_W_TYPE) (_FP_FROM_INT_ur\t\\\n-\t\t\t\t\t\t   >> _FP_W_TYPE_SIZE), \\\n-\t\t\t\t     (_FP_W_TYPE) _FP_FROM_INT_ur);\t\\\n-\t\t\t X##_e = (_FP_EXPBIAS_##fs + 2 * _FP_W_TYPE_SIZE - 1 \\\n-\t\t\t\t  - _FP_FROM_INT_lz);\t\t\t\\\n-\t\t       })\t\t\t\t\t\t\\\n-\t\t     : (abort (), 0)));\t\t\t\t\t\\\n+\t\t  : ({\t\t\t\t\t\t\\\n+\t\t      int _FP_FROM_INT_lz;\t\t\t\t\\\n+\t\t      __FP_CLZ_2 (_FP_FROM_INT_lz,\t\t\t\\\n+\t\t\t\t  (_FP_W_TYPE) (_FP_FROM_INT_ur\t\t\\\n+\t\t\t\t\t\t>> _FP_W_TYPE_SIZE),\t\\\n+\t\t\t\t  (_FP_W_TYPE) _FP_FROM_INT_ur);\t\\\n+\t\t      X##_e = (_FP_EXPBIAS_##fs + 2 * _FP_W_TYPE_SIZE - 1 \\\n+\t\t\t       - _FP_FROM_INT_lz);\t\t\t\\\n+\t\t    }));\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n \t  if ((rsize) - 1 + _FP_EXPBIAS_##fs >= _FP_EXPMAX_##fs\t\t\\\n \t      && X##_e >= _FP_EXPMAX_##fs)\t\t\t\t\\\n@@ -1608,16 +1869,24 @@\n \n \n /* Extend from a narrower floating-point format to a wider one.  Input\n-   and output are raw.  */\n-#define FP_EXTEND(dfs, sfs, dwc, swc, D, S)\t\t\t\t\\\n+   and output are raw.  If CHECK_NAN, then signaling NaNs are\n+   converted to quiet with the \"invalid\" exception raised; otherwise\n+   signaling NaNs remain signaling with no exception.  */\n+#define _FP_EXTEND_CNAN(dfs, sfs, dwc, swc, D, S, check_nan)\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (_FP_FRACBITS_##dfs < _FP_FRACBITS_##sfs\t\t\t\\\n-\t  || (_FP_EXPMAX_##dfs - _FP_EXPBIAS_##dfs\t\t\t\\\n-\t      < _FP_EXPMAX_##sfs - _FP_EXPBIAS_##sfs)\t\t\t\\\n-\t  || (_FP_EXPBIAS_##dfs < _FP_EXPBIAS_##sfs + _FP_FRACBITS_##sfs - 1 \\\n-\t      && _FP_EXPBIAS_##dfs != _FP_EXPBIAS_##sfs))\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n+      _FP_STATIC_ASSERT (_FP_FRACBITS_##dfs >= _FP_FRACBITS_##sfs,\t\\\n+\t\t\t \"destination mantissa narrower than source\");\t\\\n+      _FP_STATIC_ASSERT ((_FP_EXPMAX_##dfs - _FP_EXPBIAS_##dfs\t\t\\\n+\t\t\t  >= _FP_EXPMAX_##sfs - _FP_EXPBIAS_##sfs),\t\\\n+\t\t\t \"destination max exponent smaller\"\t\t\\\n+\t\t\t \" than source\");\t\t\t\t\\\n+      _FP_STATIC_ASSERT (((_FP_EXPBIAS_##dfs\t\t\t\t\\\n+\t\t\t   >= (_FP_EXPBIAS_##sfs\t\t\t\\\n+\t\t\t       + _FP_FRACBITS_##sfs - 1))\t\t\\\n+\t\t\t  || (_FP_EXPBIAS_##dfs == _FP_EXPBIAS_##sfs)), \\\n+\t\t\t \"source subnormals do not all become normal,\"\t\\\n+\t\t\t \" but bias not the same\");\t\t\t\\\n       D##_s = S##_s;\t\t\t\t\t\t\t\\\n       _FP_FRAC_COPY_##dwc##_##swc (D, S);\t\t\t\t\\\n       if (_FP_EXP_NORMAL (sfs, swc, S))\t\t\t\t\t\\\n@@ -1659,27 +1928,35 @@\n \t      D##_e = _FP_EXPMAX_##dfs;\t\t\t\t\t\\\n \t      if (!_FP_FRAC_ZEROP_##swc (S))\t\t\t\t\\\n \t\t{\t\t\t\t\t\t\t\\\n-\t\t  if (_FP_FRAC_SNANP (sfs, S))\t\t\t\t\\\n+\t\t  if (check_nan && _FP_FRAC_SNANP (sfs, S))\t\t\\\n \t\t    FP_SET_EXCEPTION (FP_EX_INVALID\t\t\t\\\n \t\t\t\t      | FP_EX_INVALID_SNAN);\t\t\\\n \t\t  _FP_FRAC_SLL_##dwc (D, (_FP_FRACBITS_##dfs\t\t\\\n \t\t\t\t\t  - _FP_FRACBITS_##sfs));\t\\\n-\t\t  _FP_SETQNAN (dfs, dwc, D);\t\t\t\t\\\n+\t\t  if (check_nan)\t\t\t\t\t\\\n+\t\t    _FP_SETQNAN (dfs, dwc, D);\t\t\t\t\\\n \t\t}\t\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n+#define FP_EXTEND(dfs, sfs, dwc, swc, D, S)\t\t\\\n+    _FP_EXTEND_CNAN (dfs, sfs, dwc, swc, D, S, 1)\n+\n /* Truncate from a wider floating-point format to a narrower one.\n    Input and output are semi-raw.  */\n #define FP_TRUNC(dfs, sfs, dwc, swc, D, S)\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n-      if (_FP_FRACBITS_##sfs < _FP_FRACBITS_##dfs\t\t\t\\\n-\t  || (_FP_EXPBIAS_##sfs < _FP_EXPBIAS_##dfs + _FP_FRACBITS_##dfs - 1 \\\n-\t      && _FP_EXPBIAS_##sfs != _FP_EXPBIAS_##dfs))\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n+      _FP_STATIC_ASSERT (_FP_FRACBITS_##sfs >= _FP_FRACBITS_##dfs,\t\\\n+\t\t\t \"destination mantissa wider than source\");\t\\\n+      _FP_STATIC_ASSERT (((_FP_EXPBIAS_##sfs\t\t\t\t\\\n+\t\t\t   >= (_FP_EXPBIAS_##dfs\t\t\t\\\n+\t\t\t       + _FP_FRACBITS_##dfs - 1))\t\t\\\n+\t\t\t  || _FP_EXPBIAS_##sfs == _FP_EXPBIAS_##dfs),\t\\\n+\t\t\t \"source subnormals do not all become same,\"\t\\\n+\t\t\t \" but bias not the same\");\t\t\t\\\n       D##_s = S##_s;\t\t\t\t\t\t\t\\\n       if (_FP_EXP_NORMAL (sfs, swc, S))\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n@@ -1768,14 +2045,18 @@\n # define __FP_CLZ(r, x)\t\t\t\t\t\t\t\\\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      _FP_STATIC_ASSERT ((sizeof (_FP_W_TYPE) == sizeof (unsigned int)\t\\\n+\t\t\t  || (sizeof (_FP_W_TYPE)\t\t\t\\\n+\t\t\t      == sizeof (unsigned long))\t\t\\\n+\t\t\t  || (sizeof (_FP_W_TYPE)\t\t\t\\\n+\t\t\t      == sizeof (unsigned long long))),\t\t\\\n+\t\t\t \"_FP_W_TYPE size unsupported for clz\");\t\\\n       if (sizeof (_FP_W_TYPE) == sizeof (unsigned int))\t\t\t\\\n \t(r) = __builtin_clz (x);\t\t\t\t\t\\\n       else if (sizeof (_FP_W_TYPE) == sizeof (unsigned long))\t\t\\\n \t(r) = __builtin_clzl (x);\t\t\t\t\t\\\n-      else if (sizeof (_FP_W_TYPE) == sizeof (unsigned long long))\t\\\n+      else /* sizeof (_FP_W_TYPE) == sizeof (unsigned long long).  */\t\\\n \t(r) = __builtin_clzll (x);\t\t\t\t\t\\\n-      else\t\t\t\t\t\t\t\t\\\n-\tabort ();\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif /* ndef __FP_CLZ */\n@@ -1844,3 +2125,5 @@\n #define _FP_DIV_MEAT_1_loop(fs, R, X, Y)  _FP_DIV_MEAT_N_loop (fs, 1, R, X, Y)\n #define _FP_DIV_MEAT_2_loop(fs, R, X, Y)  _FP_DIV_MEAT_N_loop (fs, 2, R, X, Y)\n #define _FP_DIV_MEAT_4_loop(fs, R, X, Y)  _FP_DIV_MEAT_N_loop (fs, 4, R, X, Y)\n+\n+#endif /* !SOFT_FP_OP_COMMON_H */"}, {"sha": "9b5191cf5d7f84de94f3f4d9eb2e5ca3a7ce7588", "filename": "libgcc/soft-fp/quad.h", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fquad.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fquad.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fquad.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Quad Precision.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,6 +30,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_QUAD_H\n+#define SOFT_FP_QUAD_H\t1\n+\n #if _FP_W_TYPE_SIZE < 32\n # error \"Here's a nickel, kid. Go buy yourself a real computer.\"\n #endif\n@@ -187,6 +190,8 @@ union _FP_UNION_Q\n # define FP_CMP_UNORD_Q(r, X, Y, ex)\t_FP_CMP_UNORD (Q, 4, (r), X, Y, (ex))\n \n # define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 4, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_Q(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (Q, 4, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 4, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_Q(X)\t_FP_FRAC_HIGH_4 (X)\n@@ -311,6 +316,8 @@ union _FP_UNION_Q\n # define FP_CMP_UNORD_Q(r, X, Y, ex)\t_FP_CMP_UNORD (Q, 2, (r), X, Y, (ex))\n \n # define FP_TO_INT_Q(r, X, rsz, rsg)\t_FP_TO_INT (Q, 2, (r), X, (rsz), (rsg))\n+# define FP_TO_INT_ROUND_Q(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (Q, 2, (r), X, (rsz), (rsg))\n # define FP_FROM_INT_Q(X, r, rs, rt)\t_FP_FROM_INT (Q, 2, X, (r), (rs), rt)\n \n # define _FP_FRAC_HIGH_Q(X)\t_FP_FRAC_HIGH_2 (X)\n@@ -319,3 +326,5 @@ union _FP_UNION_Q\n # define _FP_FRAC_HIGH_DW_Q(X)\t_FP_FRAC_HIGH_4 (X)\n \n #endif /* not _FP_W_TYPE_SIZE < 64 */\n+\n+#endif /* !SOFT_FP_QUAD_H */"}, {"sha": "b03514006ff304374a7ce6f4408db784e1c2b2e9", "filename": "libgcc/soft-fp/single.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsingle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsingle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsingle.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Definitions for IEEE Single Precision.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,6 +30,9 @@\n    License along with the GNU C Library; if not, see\n    <http://www.gnu.org/licenses/>.  */\n \n+#ifndef SOFT_FP_SINGLE_H\n+#define SOFT_FP_SINGLE_H\t1\n+\n #if _FP_W_TYPE_SIZE < 32\n # error \"Here's a nickel kid.  Go buy yourself a real computer.\"\n #endif\n@@ -180,6 +183,8 @@ union _FP_UNION_S\n #define FP_CMP_UNORD_S(r, X, Y, ex)\t_FP_CMP_UNORD (S, 1, (r), X, Y, (ex))\n \n #define FP_TO_INT_S(r, X, rsz, rsg)\t_FP_TO_INT (S, 1, (r), X, (rsz), (rsg))\n+#define FP_TO_INT_ROUND_S(r, X, rsz, rsg)\t\\\n+  _FP_TO_INT_ROUND (S, 1, (r), X, (rsz), (rsg))\n #define FP_FROM_INT_S(X, r, rs, rt)\t_FP_FROM_INT (S, 1, X, (r), (rs), rt)\n \n #define _FP_FRAC_HIGH_S(X)\t_FP_FRAC_HIGH_1 (X)\n@@ -190,3 +195,5 @@ union _FP_UNION_S\n #else\n # define _FP_FRAC_HIGH_DW_S(X)\t_FP_FRAC_HIGH_1 (X)\n #endif\n+\n+#endif /* !SOFT_FP_SINGLE_H */"}, {"sha": "3b39336b38ed531cb5c33cb8248240218533a1b6", "filename": "libgcc/soft-fp/soft-fp.h", "status": "modified", "additions": 38, "deletions": 9, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsoft-fp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsoft-fp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsoft-fp.h?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,5 +1,5 @@\n /* Software floating-point emulation.\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com),\n \t\t  Jakub Jelinek (jj@ultra.linux.cz),\n@@ -30,10 +30,14 @@\n    <http://www.gnu.org/licenses/>.  */\n \n #ifndef SOFT_FP_H\n-#define SOFT_FP_H\n+#define SOFT_FP_H\t1\n \n #ifdef _LIBC\n # include <sfp-machine.h>\n+#elif defined __KERNEL__\n+/* The Linux kernel uses asm/ names for architecture-specific\n+   files.  */\n+# include <asm/sfp-machine.h>\n #else\n # include \"sfp-machine.h\"\n #endif\n@@ -47,6 +51,37 @@\n # endif\n #endif\n \n+/* For unreachable default cases in switch statements over bitwise OR\n+   of FP_CLS_* values.  */\n+#if (defined __GNUC__\t\t\t\t\t\t\t\\\n+     && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)))\n+# define _FP_UNREACHABLE\t__builtin_unreachable ()\n+#else\n+# define _FP_UNREACHABLE\tabort ()\n+#endif\n+\n+#if ((defined __GNUC__\t\t\t\t\t\t\t\\\n+      && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)))\t\\\n+     || (defined __STDC_VERSION__ && __STDC_VERSION__ >= 201112L))\n+# define _FP_STATIC_ASSERT(expr, msg)\t\t\\\n+  _Static_assert ((expr), msg)\n+#else\n+# define _FP_STATIC_ASSERT(expr, msg)\t\t\t\t\t\\\n+  extern int (*__Static_assert_function (void))\t\t\t\t\\\n+    [!!sizeof (struct { int __error_if_negative: (expr) ? 2 : -1; })]\n+#endif\n+\n+/* In the Linux kernel, some architectures have a single function that\n+   uses different kinds of unpacking and packing depending on the\n+   instruction being emulated, meaning it is not readily visible to\n+   the compiler that variables from _FP_DECL and _FP_FRAC_DECL_*\n+   macros are only used in cases where they were initialized.  */\n+#ifdef __KERNEL__\n+# define _FP_ZERO_INIT\t\t= 0\n+#else\n+# define _FP_ZERO_INIT\n+#endif\n+\n #define _FP_WORKBITS\t\t3\n #define _FP_WORK_LSB\t\t((_FP_W_TYPE) 1 << 3)\n #define _FP_WORK_ROUND\t\t((_FP_W_TYPE) 1 << 2)\n@@ -316,10 +351,4 @@ typedef USItype UHWtype;\n # endif\n #endif\n \n-#ifdef _LIBC\n-# include <stdlib.h>\n-#else\n-extern void abort (void);\n-#endif\n-\n-#endif\n+#endif /* !SOFT_FP_H */"}, {"sha": "a217d27450f3e84a11f01514856fd95d61536ed4", "filename": "libgcc/soft-fp/subdf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubdf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubdf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsubdf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a - b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "aedae8847e536645b02433161f99ee0ccc60b7bb", "filename": "libgcc/soft-fp/subsf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubsf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubsf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsubsf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a - b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "387ada7433cea3f39505da8f39ea282631c3542e", "filename": "libgcc/soft-fp/subtf3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubtf3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Fsubtf3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Fsubtf3.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return a - b\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "348941c78c61c7aa572b48a9da5115d3d136a89e", "filename": "libgcc/soft-fp/truncdfsf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftruncdfsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftruncdfsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ftruncdfsf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Truncate IEEE double into IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "10a899c5f9058659f213ab6c721b83bc442ab379", "filename": "libgcc/soft-fp/trunctfdf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfdf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfdf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ftrunctfdf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Truncate IEEE quad into IEEE double\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "57f54fbdf45e41e72f81a6f93b4593e16493c0e7", "filename": "libgcc/soft-fp/trunctfsf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ftrunctfsf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Truncate IEEE quad into IEEE single\n-   Copyright (C) 1997-2014 Free Software Foundation, Inc.\n+   Copyright (C) 1997-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Richard Henderson (rth@cygnus.com) and\n \t\t  Jakub Jelinek (jj@ultra.linux.cz)."}, {"sha": "b87729ef55a1a914e555b91136c8c305a715687d", "filename": "libgcc/soft-fp/trunctfxf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfxf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Ftrunctfxf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Ftrunctfxf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Truncate IEEE quad into IEEE extended\n-   Copyright (C) 2007-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2007-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Uros Bizjak (ubizjak@gmail.com).\n "}, {"sha": "d101e05efe935206a594414da94790132f10e43d", "filename": "libgcc/soft-fp/unorddf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funorddf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funorddf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funorddf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 1 iff a or b is a NaN, 0 otherwise.\n-   Copyright (C) 2006-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2006-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Joseph Myers (joseph@codesourcery.com).\n "}, {"sha": "900994774befffc9d5d21607dbb3abfc3ee90f61", "filename": "libgcc/soft-fp/unordsf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funordsf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funordsf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funordsf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 1 iff a or b is a NaN, 0 otherwise.\n-   Copyright (C) 2006-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2006-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Joseph Myers (joseph@codesourcery.com).\n "}, {"sha": "05aaf04325317cf8c584924b9bba52cd463e90e1", "filename": "libgcc/soft-fp/unordtf2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funordtf2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30954527b70dedb9f4a5c0a6c086dc99c72f76f7/libgcc%2Fsoft-fp%2Funordtf2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fsoft-fp%2Funordtf2.c?ref=30954527b70dedb9f4a5c0a6c086dc99c72f76f7", "patch": "@@ -1,6 +1,6 @@\n /* Software floating-point emulation.\n    Return 1 iff a or b is a NaN, 0 otherwise.\n-   Copyright (C) 2006-2014 Free Software Foundation, Inc.\n+   Copyright (C) 2006-2015 Free Software Foundation, Inc.\n    This file is part of the GNU C Library.\n    Contributed by Joseph Myers (joseph@codesourcery.com).\n "}]}