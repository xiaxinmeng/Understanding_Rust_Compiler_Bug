{"sha": "69302d8b5e643da233f4f8fd732282f685b19cec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjkzMDJkOGI1ZTY0M2RhMjMzZjRmOGZkNzMyMjgyZjY4NWIxOWNlYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2001-03-14T20:46:34Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2001-03-14T20:46:34Z"}, "message": "std_streambuf.h: Remove cached locale facets.\n\n\n2001-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tlibstdc++/2020\n\t* include/bits/std_streambuf.h: Remove cached locale facets.\n\t(basic_streambuf::_M_buf_fctype): Remove.\n\t(basic_streambuf::~basic_streambuf): Remove here.\n\t(basic_streambuf::basic_streambuf): Same.\n\t(basic_streambuf::imbue): Same.\n\t* include/bits/fstream.tcc (filebuf::imbue): Remove _M_buf_fctype.\n\t* include/bits/std_fstream.h (basic_filebuf::_M_fcvt): Remove.\n\t(basic_filebuf::~basic_filebuf()): Remove here.\n\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf): Same.\n\t(basic_filebuf::imbue): Same.\n\t* include/bits/localefwd.h (_Count_ones): Remove.\n\t(locale::_S_num_categories): Just use 6, since this doesn't\n\tactually change, ever.\n\t* include/bits/locale_facets.tcc (has_facet): Simplify.\n\t(use_facet): Same.\n\t* testsuite/27_io/filebuf.cc (test06): Add tests.\n\nFrom-SVN: r40472", "tree": {"sha": "cfe69867a39c233ba7844a245ad8cbc08f5178fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cfe69867a39c233ba7844a245ad8cbc08f5178fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69302d8b5e643da233f4f8fd732282f685b19cec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69302d8b5e643da233f4f8fd732282f685b19cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69302d8b5e643da233f4f8fd732282f685b19cec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69302d8b5e643da233f4f8fd732282f685b19cec/comments", "author": null, "committer": null, "parents": [{"sha": "16a0fe505976609468dad38f6f7ddc2e68517ee7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16a0fe505976609468dad38f6f7ddc2e68517ee7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16a0fe505976609468dad38f6f7ddc2e68517ee7"}], "stats": {"total": 132, "additions": 73, "deletions": 59}, "files": [{"sha": "3fefaa56a0145abef8d638d6441d42050123dc65", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -1,3 +1,23 @@\n+2001-03-14  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tlibstdc++/2020\n+\t* include/bits/std_streambuf.h: Remove cached locale facets.\n+\t(basic_streambuf::_M_buf_fctype): Remove.\n+\t(basic_streambuf::~basic_streambuf): Remove here.\n+\t(basic_streambuf::basic_streambuf): Same.\n+\t(basic_streambuf::imbue): Same.\n+\t* include/bits/fstream.tcc (filebuf::imbue): Remove _M_buf_fctype.\n+\t* include/bits/std_fstream.h (basic_filebuf::_M_fcvt): Remove.\n+\t(basic_filebuf::~basic_filebuf()): Remove here.\n+\t* include/bits/fstream.tcc (basic_filebuf::basic_filebuf): Same.\n+\t(basic_filebuf::imbue): Same.\n+\t* include/bits/localefwd.h (_Count_ones): Remove.\n+\t(locale::_S_num_categories): Just use 6, since this doesn't\n+\tactually change, ever.\n+\t* include/bits/locale_facets.tcc (has_facet): Simplify.\n+\t(use_facet): Same.\n+\t* testsuite/27_io/filebuf.cc (test06): Add tests.\n+\t\n 2001-03-13  Steve Ellcey  <sje@cup.hp.com>\n \n \t* libstdc++-v3/config/os/hpux/bits/ctype_base.h: Make ctype masks"}, {"sha": "6d5e9bb6c61fd5068ce1f62a974fd631b44fd8d8", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -86,15 +86,14 @@ namespace std\n     basic_filebuf() \n     : __streambuf_type(), _M_file(NULL), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_last_overflowed(false)\n-    { _M_fcvt = &use_facet<__codecvt_type>(this->getloc()); }\n+    { }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n     basic_filebuf(int __fd, const char* /*__name*/, ios_base::openmode __mode)\n     : __streambuf_type(),  _M_file(NULL), _M_state_cur(__state_type()), \n     _M_state_beg(__state_type()), _M_last_overflowed(false)\n     {\n-      _M_fcvt = &use_facet<__codecvt_type>(this->getloc());\n       _M_filebuf_init();\n       _M_file->sys_open(__fd, __mode);\n       if (this->is_open())\n@@ -486,7 +485,9 @@ namespace std\n       bool __testopen = this->is_open();\n       bool __testin = __mode & ios_base::in && _M_mode & ios_base::in;\n       bool __testout = __mode & ios_base::out && _M_mode & ios_base::out;\n-      int __width = _M_fcvt->encoding();\n+\n+      // Should probably do has_facet checks here.\n+      int __width = use_facet<__codecvt_type>(_M_buf_locale).encoding();\n       if (__width < 0)\n \t__width = 0;\n       bool __testfail = __off != 0  && __width <= 0;\n@@ -557,17 +558,13 @@ namespace std\n     imbue(const locale& __loc)\n     {\n       bool __testbeg = gptr() == eback() && pptr() == pbase();\n-      bool __teststate = _M_fcvt->encoding() == -1;\n-      \n-      _M_buf_locale_init = true;\n-      if (__testbeg && !__teststate && _M_buf_locale != __loc)\n+\n+      if (__testbeg && _M_buf_locale != __loc)\n \t{\n-\t  // XXX Will need to save these older values.\n \t  _M_buf_locale = __loc;\n-\t  _M_fcvt = &use_facet<__codecvt_type>(_M_buf_locale);\n-\t  // XXX Necessary?\n-\t  _M_buf_fctype = &use_facet<__ctype_type>(_M_buf_locale); \n+\t  _M_buf_locale_init = true;\n \t}\n+\n       // NB this may require the reconversion of previously\n       // converted chars. This in turn may cause the reconstruction\n       // of the original file. YIKES!!"}, {"sha": "edb3d17fa11d331e949721928cbb192766e53019", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -70,8 +70,7 @@ namespace std\n     use_facet(const locale& __loc)\n     {\n       typedef locale::_Impl::__vec_facet        __vec_facet;\n-      locale::id& __id = _Facet::id;         \n-      size_t __i = __id._M_index;\n+      size_t __i = _Facet::id._M_index;\n       __vec_facet* __facet = __loc._M_impl->_M_facets;\n       const locale::facet* __fp = (*__facet)[__i]; \n       if (__fp == 0 || __i >= __facet->size())\n@@ -84,8 +83,7 @@ namespace std\n     has_facet(const locale& __loc) throw()\n     {\n       typedef locale::_Impl::__vec_facet        __vec_facet;\n-      locale::id& __id = _Facet::id;         \n-      size_t __i = __id._M_index;\n+      size_t __i = _Facet::id._M_index;\n       __vec_facet* __facet = __loc._M_impl->_M_facets;\n       return (__i < __facet->size() && (*__facet)[__i] != 0);\n     }"}, {"sha": "dd5cddc44b995a5fd508c94f652db135ecb11fa4", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 1, "deletions": 30, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -52,35 +52,6 @@ namespace std\n # define  _GLIBCPP_NUM_FACETS 13\n #endif\n \n-  // _Count_ones: compile-time computation of number of 1-bits in a value N\n-  // This takes only 5 (or 6) instantiations, doing recursive descent\n-  // in parallel -- ncm\n-  template<unsigned int _Num, int _Shift = (sizeof(unsigned) * CHAR_BIT)/2,\n-           unsigned int _Mask = (~0u >> _Shift) >\n-    struct _Count_ones;\n-\n-  // It is preferable to use enumerators instead of integral static data\n-  // members to avoid emission of superflous variables -- gdr.\n-  template<unsigned int _Num, unsigned int _Mask>\n-    struct _Count_ones<_Num, 0, _Mask> \n-    {\n-      enum\n-      {\n-        _M_count = _Num\n-      };\n-    };\n-\n-  template<unsigned int _Num, int _Shift, unsigned int _Mask>\n-    struct _Count_ones \n-    {\n-      enum\n-      {\n-        _M_halfcount = _Count_ones<_Num, _Shift/2,\n-                                   (_Mask^((~_Mask)>>(_Shift/2))) >::_M_count,\n-        _M_count = (_M_halfcount&_Mask) + ((_M_halfcount>>_Shift)&_Mask)\n-      };\n-    };\n-\n   // 22.1.1 Locale\n   template<typename _Tp, typename _Alloc> \n     class vector;\n@@ -297,7 +268,7 @@ namespace std\n     // Current global reference locale\n     static _Impl* \t_S_global;  \n \n-    static const size_t\t_S_num_categories = _Count_ones<all>::_M_count;\n+    static const size_t\t_S_num_categories = 6;\n     static const size_t _S_num_facets = _GLIBCPP_NUM_FACETS;\n \n     explicit "}, {"sha": "42996465256f9ebdce103237a65209f9104f407b", "filename": "libstdc++-v3/include/bits/std_fstream.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_fstream.h?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -75,9 +75,6 @@ namespace std {\n       __state_type\t\t_M_state_cur;\n       __state_type \t\t_M_state_beg; \t\n \n-      // Cached value from use_facet.\n-      const __codecvt_type*\t_M_fcvt;       \n-      \n       // MT lock inherited from libio or other low-level io library.\n       __c_lock          \t_M_lock;\n \n@@ -95,7 +92,6 @@ namespace std {\n       ~basic_filebuf() \n       { \n \tthis->close();\n-\t_M_fcvt = NULL;\n \t_M_last_overflowed = false;\n       }\n "}, {"sha": "013d7e9f1f95c79f5a9b8591dae6eea75c18e685", "filename": "libstdc++-v3/include/bits/std_streambuf.h", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_streambuf.h?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -116,9 +116,6 @@ namespace std\n       // True iff locale is initialized.\n       bool \t\t\t_M_buf_locale_init;\n \n-      // Cached use_facet<ctype>, which is based on the current locale info.\n-      const __ctype_type*\t_M_buf_fctype;      \n-\n       // Necessary bits for putback buffer management. Only used in\n       // the basic_filebuf class, as necessary for the standard\n       // requirements. The only basic_streambuf member function that\n@@ -276,7 +273,6 @@ namespace std\n \t_M_buf_size = 0;\n \t_M_buf_size_opt = 0;\n \t_M_mode = ios_base::openmode(0);\n-\t_M_buf_fctype = NULL;\n \t_M_buf_locale_init = false;\n \n       }\n@@ -387,7 +383,7 @@ namespace std\n       _M_out_end(0), _M_mode(ios_base::openmode(0)), _M_buf_locale(locale()), \n       _M_buf_locale_init(false), _M_pback_size(1), _M_pback(NULL), \n       _M_pback_cur_save(NULL), _M_pback_end_save(NULL), _M_pback_init(false)\n-      { _M_buf_fctype = &use_facet<__ctype_type>(this->getloc()); }\n+      { }\n \n       // Get area:\n       char_type* \n@@ -441,10 +437,7 @@ namespace std\n       { \n \t_M_buf_locale_init = true;\n \tif (_M_buf_locale != __loc)\n-\t {\n-\t   _M_buf_locale = __loc;\n-\t   _M_buf_fctype = &use_facet<__ctype_type>(_M_buf_locale); \n-\t }\t\n+\t  _M_buf_locale = __loc;\n       }\n \n       // Buffer management and positioning:"}, {"sha": "c59c29121501cefc0a9a86bd5b5ac2f4f9331ff5", "filename": "libstdc++-v3/testsuite/27_io/filebuf.cc", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69302d8b5e643da233f4f8fd732282f685b19cec/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf.cc?ref=69302d8b5e643da233f4f8fd732282f685b19cec", "patch": "@@ -1,6 +1,6 @@\n // 990117 bkoz test functionality of basic_filebuf for char_type == char\n \n-// Copyright (C) 1997-1999, 2000 Free Software Foundation, Inc.\n+// Copyright (C) 1997-1999, 2000, 2001 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -529,6 +529,44 @@ bool test04()\n // should be able to instantiate basic_filebuf for non-standard types.\n template class std::basic_filebuf<short, std::char_traits<short> >;\n \n+// test06\n+// libstdc++/2020\n+// should be able to use custom char_type\n+class gnu_char_type\n+{\n+  unsigned long character;\n+public:\n+  // operator ==\n+  bool\n+  operator==(const gnu_char_type& __lhs) \n+  { return character == __lhs.character; }\n+\n+  // operator <\n+  bool\n+  operator<(const gnu_char_type& __lhs) \n+  { return character < __lhs.character; }\n+\n+  // to_char_type\n+  gnu_char_type(const unsigned long& __l) : character(__l) { } \n+\n+  // to_int_type\n+  operator unsigned long() const { return character; }\n+};\n+\n+bool test06()\n+{\n+  bool test = true;\n+  typedef std::basic_filebuf<gnu_char_type> gnu_filebuf;\n+  \n+  try\n+    { gnu_filebuf obj; }\n+  catch(std::exception& obj)\n+    { \n+      test = false; \n+      VERIFY( test );\n+    }\n+  return test;\n+}\n \n int main() \n {\n@@ -538,6 +576,7 @@ int main()\n   test03();\n   test04();\n \n+  test06();\n   return 0;\n }\n "}]}