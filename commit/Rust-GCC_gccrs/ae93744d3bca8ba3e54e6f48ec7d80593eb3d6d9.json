{"sha": "ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU5Mzc0NGQzYmNhOGJhM2U1NGU2ZjQ4ZWM3ZDgwNTkzZWIzZDZkOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-12-05T03:18:18Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-12-05T03:18:18Z"}, "message": "common.opt: Split up -fisolate-erroneous-paths into -fisolate-erroneous-paths-dereference...\n\n\t* common.opt: Split up -fisolate-erroneous-paths into\n\t-fisolate-erroneous-paths-dereference and\n\t-fisolate-erroneous-paths-attribute.\n\t* invoke.texi: Corresponding changes.\n\t* gimple.c (infer_nonnull_range):  Add and use new arguments\n\tto control what kind of statements can be used to infer a\n\tnon-null range.\n\t* gimple.h (infer_nonnull_range): Update prototype.\n\t* tree-vrp.c (infer_value_range): Corresponding changes.\n\t* opts.c (default_options_table): Update due to option split.\n\t* gimple-ssa-isolate-paths.c: Fix trailing whitespace.\n\t(find_implicit_erroneous_behaviour): Pass additional arguments\n\tto infer_nonnull_range.\n\t(find_explicit_erroneous_behaviour): Similarly.\n\t(gate_isolate_erroneous_paths): Check both of the new\n\toptions.\n\ntestsuite/\n\n\t* gcc.dg/pr38984.c: Use -fno-isolate-erroneous-paths-dereference.\n\t* gcc.dg/tree-ssa/isolate-2.c: Explicitly turn on\n\t-fisolate-erroneous-paths-attribute.\n\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n\nFrom-SVN: r205689", "tree": {"sha": "065fb58430d1417a0032a8917f79040a59ad7213", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/065fb58430d1417a0032a8917f79040a59ad7213"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/comments", "author": null, "committer": null, "parents": [{"sha": "97d7fffaaf636dae8ece215661935482c854d5aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d7fffaaf636dae8ece215661935482c854d5aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d7fffaaf636dae8ece215661935482c854d5aa"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "d2c0211dc7b4c7e7ae2222d0faa2490eeda85085", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -45,6 +45,25 @@\n \t(PROB_VERY_UNLIKELY, PROB_ALWAYS, PROB_VERY_LIKELY,\n \tPROB_LIKELY, PROB_UNLIKELY): Don't define here.\n \n+2013-12-04  Jeff Law  <law@redhat.com>\n+\n+\t* common.opt: Split up -fisolate-erroneous-paths into\n+\t-fisolate-erroneous-paths-dereference and\n+\t-fisolate-erroneous-paths-attribute.\n+\t* invoke.texi: Corresponding changes.\n+\t* gimple.c (infer_nonnull_range):  Add and use new arguments\n+\tto control what kind of statements can be used to infer a\n+\tnon-null range.\n+\t* gimple.h (infer_nonnull_range): Update prototype.\n+\t* tree-vrp.c (infer_value_range): Corresponding changes.\n+\t* opts.c (default_options_table): Update due to option split.\n+\t* gimple-ssa-isolate-paths.c: Fix trailing whitespace.\n+\t(find_implicit_erroneous_behaviour): Pass additional arguments\n+\tto infer_nonnull_range.\n+\t(find_explicit_erroneous_behaviour): Similarly.\n+\t(gate_isolate_erroneous_paths): Check both of the new\n+\toptions.\n+\t\n 2013-12-04  Jeff Law  <law@redhat.com>\n \n \t* expr.c (expand_assignment): Update comments."}, {"sha": "0cd1fddd4adf4c5b654cd12806814624924608e6", "filename": "gcc/common.opt", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -2112,11 +2112,18 @@ foptimize-strlen\n Common Report Var(flag_optimize_strlen) Optimization\n Enable string length optimizations on trees\n \n-fisolate-erroneous-paths\n-Common Report Var(flag_isolate_erroneous_paths) Optimization\n-Detect paths which trigger erroneous or undefined behaviour.  Isolate those\n-paths from the main control flow and turn the statement with erroneous or\n-undefined behaviour into a trap.\n+fisolate-erroneous-paths-dereference\n+Common Report Var(flag_isolate_erroneous_paths_dereference) Optimization\n+Detect paths which trigger erroneous or undefined behaviour due to\n+dereferencing a NULL pointer.  Isolate those paths from the main control\n+flow and turn the statement with erroneous or undefined behaviour into a trap.\n+\n+fisolate-erroneous-paths-attribute\n+Common Report Var(flag_isolate_erroneous_paths_attribute) Optimization\n+Detect paths which trigger erroneous or undefined behaviour due a NULL value\n+being used in a way which is forbidden by a returns_nonnull or nonnull\n+attribute.  Isolate those paths from the main control flow and turn the\n+statement with erroneous or undefined behaviour into a trap. \n \n ftree-loop-distribution\n Common Report Var(flag_tree_loop_distribution) Optimization"}, {"sha": "704d4744dfd808e529cfd4be0e9f19c66e8907e6", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -378,7 +378,7 @@ Objective-C and Objective-C++ Dialects}.\n -fira-region=@var{region} -fira-hoist-pressure @gol\n -fira-loop-pressure -fno-ira-share-save-slots @gol\n -fno-ira-share-spill-slots -fira-verbose=@var{n} @gol\n--fisolate-erroneous-paths\n+-fisolate-erroneous-paths-dereference -fisolate-erroneous-paths-attribute\n -fivopts -fkeep-inline-functions -fkeep-static-consts -flive-range-shrinkage @gol\n -floop-block -floop-interchange -floop-strip-mine -floop-nest-optimize @gol\n -floop-parallelize-all -flto -flto-compression-level @gol\n@@ -6848,7 +6848,7 @@ also turns on the following optimization flags:\n -finline-small-functions @gol\n -findirect-inlining @gol\n -fipa-sra @gol\n--fisolate-erroneous-paths @gol\n+-fisolate-erroneous-paths-dereference @gol\n -foptimize-sibling-calls @gol\n -fpartial-inlining @gol\n -fpeephole2 @gol\n@@ -7742,10 +7742,17 @@ it may significantly increase code size\n (see @option{--param ipcp-unit-growth=@var{value}}).\n This flag is enabled by default at @option{-O3}.\n \n-@item -fisolate-erroneous-paths\n-Detect paths which trigger erroneous or undefined behaviour.  Isolate those\n-paths from the main control flow and turn the statement with erroneous or\n-undefined behaviour into a trap.\n+@item -fisolate-erroneous-paths-dereference\n+Detect paths which trigger erroneous or undefined behaviour due to\n+dereferencing a NULL pointer.  Isolate those paths from the main control\n+flow and turn the statement with erroneous or undefined behaviour into a trap.\n+\n+@item -fisolate-erroneous-paths-attribute\n+Detect paths which trigger erroneous or undefined behaviour due a NULL value\n+being used in a way which is forbidden by a @code{returns_nonnull} or @code{nonnull}\n+attribute.  Isolate those paths from the main control flow and turn the\n+statement with erroneous or undefined behaviour into a trap.  This is not\n+currently enabled, but may be enabled by @code{-O2} in the future.\n \n @item -ftree-sink\n @opindex ftree-sink"}, {"sha": "052bf3fbf944c0e5c48f0e8dbf3ad07a6078d620", "filename": "gcc/gimple-ssa-isolate-paths.c", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple-ssa-isolate-paths.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple-ssa-isolate-paths.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-isolate-paths.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -48,7 +48,7 @@ along with GCC; see the file COPYING3.  If not see\n static bool cfg_altered;\n \n /* Callback for walk_stmt_load_store_ops.\n- \n+\n    Return TRUE if OP will dereference the tree stored in DATA, FALSE\n    otherwise.\n \n@@ -144,7 +144,6 @@ isolate_path (basic_block bb, basic_block duplicate,\n   gimple_stmt_iterator si, si2;\n   edge_iterator ei;\n   edge e2;\n-  \n \n   /* First duplicate BB if we have not done so already and remove all\n      the duplicate's outgoing edges as duplicate is going to unconditionally\n@@ -171,7 +170,7 @@ isolate_path (basic_block bb, basic_block duplicate,\n      the statement which triggers undefined behaviour.  If found, then\n      transform the statement into a trap and delete everything after the\n      statement.  If not found, then this particular instance was subsumed by\n-     an earlier instance of undefined behaviour and there's nothing to do. \n+     an earlier instance of undefined behaviour and there's nothing to do.\n \n      This is made more complicated by the fact that we have STMT, which is in\n      BB rather than in DUPLICATE.  So we set up two iterators, one for each\n@@ -180,7 +179,7 @@ isolate_path (basic_block bb, basic_block duplicate,\n \n      When we find STMT the second iterator should point to STMT's equivalent in\n      duplicate.  If DUPLICATE ends before STMT is found in BB, then there's\n-     nothing to do. \n+     nothing to do.\n \n      Ignore labels and debug statements.  */\n   si = gsi_start_nondebug_after_labels_bb (bb);\n@@ -247,7 +246,7 @@ find_implicit_erroneous_behaviour (void)\n \t    continue;\n \n \t  /* PHI produces a pointer result.  See if any of the PHI's\n-\t     arguments are NULL. \n+\t     arguments are NULL.\n \n \t     When we remove an edge, we want to reprocess the current\n \t     index, hence the ugly way we update I for each iteration.  */\n@@ -259,7 +258,7 @@ find_implicit_erroneous_behaviour (void)\n \t      tree op = gimple_phi_arg_def (phi, i);\n \n \t      next_i = i + 1;\n-\t\n+\n \t      if (!integer_zerop (op))\n \t\tcontinue;\n \n@@ -277,7 +276,10 @@ find_implicit_erroneous_behaviour (void)\n \t\t  if (gimple_bb (use_stmt) != bb)\n \t\t    continue;\n \n-\t\t  if (infer_nonnull_range (use_stmt, lhs))\n+\t\t  if (infer_nonnull_range (use_stmt, lhs,\n+\t\t\t\t\t   flag_isolate_erroneous_paths_dereference,\n+\t\t\t\t\t   flag_isolate_erroneous_paths_attribute))\n+\n \t\t    {\n \t\t      duplicate = isolate_path (bb, duplicate,\n \t\t\t\t\t\te, use_stmt, lhs);\n@@ -294,7 +296,7 @@ find_implicit_erroneous_behaviour (void)\n }\n \n /* Look for statements which exhibit erroneous behaviour.  For example\n-   a NULL pointer dereference. \n+   a NULL pointer dereference.\n \n    When found, optimize the block containing the erroneous behaviour.  */\n static void\n@@ -327,7 +329,9 @@ find_explicit_erroneous_behaviour (void)\n \t  /* By passing null_pointer_node, we can use infer_nonnull_range\n \t     to detect explicit NULL pointer dereferences and other uses\n \t     where a non-NULL value is required.  */\n-\t  if (infer_nonnull_range (stmt, null_pointer_node))\n+\t  if (infer_nonnull_range (stmt, null_pointer_node,\n+\t\t\t\t   flag_isolate_erroneous_paths_dereference,\n+\t\t\t\t   flag_isolate_erroneous_paths_attribute))\n \t    {\n \t      insert_trap_and_remove_trailing_statements (&si,\n \t\t\t\t\t\t\t  null_pointer_node);\n@@ -361,7 +365,7 @@ find_explicit_erroneous_behaviour (void)\n    unconditional trap and eliminate the outgoing edges from the statement's\n    basic block.  This may expose secondary optimization opportunities.\n \n-   In the latter case, we isolate the path(s) with the NULL PHI \n+   In the latter case, we isolate the path(s) with the NULL PHI\n    feeding the dereference.  We can then replace the offending statement\n    and eliminate the outgoing edges in the duplicate.  Again, this may\n    expose secondary optimization opportunities.\n@@ -398,7 +402,7 @@ gimple_ssa_isolate_erroneous_paths (void)\n \n   free_original_copy_tables ();\n \n-  /* We scramble the CFG and loop structures a bit, clean up \n+  /* We scramble the CFG and loop structures a bit, clean up\n      appropriately.  We really should incrementally update the\n      loop structures, in theory it shouldn't be that hard.  */\n   if (cfg_altered)\n@@ -416,7 +420,8 @@ gate_isolate_erroneous_paths (void)\n {\n   /* If we do not have a suitable builtin function for the trap statement,\n      then do not perform the optimization.  */\n-  return (flag_isolate_erroneous_paths != 0);\n+  return (flag_isolate_erroneous_paths_dereference != 0\n+\t  || flag_isolate_erroneous_paths_attribute != 0);\n }\n \n namespace {"}, {"sha": "f11362a6b169bf7e8b99f4a62c851ca17a6b143f", "filename": "gcc/gimple.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -2502,10 +2502,16 @@ check_loadstore (gimple stmt ATTRIBUTE_UNUSED, tree op, void *data)\n   return false;\n }\n \n-/* If OP can be inferred to be non-zero after STMT executes, return true.  */\n+/* If OP can be inferred to be non-NULL after STMT executes, return true.\n+\n+   DEREFERENCE is TRUE if we can use a pointer dereference to infer a\n+   non-NULL range, FALSE otherwise.\n+\n+   ATTRIBUTE is TRUE if we can use attributes to infer a non-NULL range\n+   for function arguments and return values.  FALSE otherwise.  */\n \n bool\n-infer_nonnull_range (gimple stmt, tree op)\n+infer_nonnull_range (gimple stmt, tree op, bool dereference, bool attribute)\n {\n   /* We can only assume that a pointer dereference will yield\n      non-NULL if -fdelete-null-pointer-checks is enabled.  */\n@@ -2514,11 +2520,13 @@ infer_nonnull_range (gimple stmt, tree op)\n       || gimple_code (stmt) == GIMPLE_ASM)\n     return false;\n \n-  if (walk_stmt_load_store_ops (stmt, (void *)op,\n-\t\t\t\tcheck_loadstore, check_loadstore))\n+  if (dereference\n+      && walk_stmt_load_store_ops (stmt, (void *)op,\n+\t\t\t\t   check_loadstore, check_loadstore))\n     return true;\n \n-  if (is_gimple_call (stmt) && !gimple_call_internal_p (stmt))\n+  if (attribute\n+      && is_gimple_call (stmt) && !gimple_call_internal_p (stmt))\n     {\n       tree fntype = gimple_call_fntype (stmt);\n       tree attrs = TYPE_ATTRIBUTES (fntype);\n@@ -2557,7 +2565,8 @@ infer_nonnull_range (gimple stmt, tree op)\n \n   /* If this function is marked as returning non-null, then we can\n      infer OP is non-null if it is used in the return statement.  */\n-  if (gimple_code (stmt) == GIMPLE_RETURN\n+  if (attribute\n+      && gimple_code (stmt) == GIMPLE_RETURN\n       && gimple_return_retval (stmt)\n       && operand_equal_p (gimple_return_retval (stmt), op, 0)\n       && lookup_attribute (\"returns_nonnull\","}, {"sha": "c9d9a190a8b8b5bb52fc5baaa8073a83193abd38", "filename": "gcc/gimple.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -1259,7 +1259,7 @@ extern bool gimple_call_builtin_p (gimple, enum built_in_function);\n extern bool gimple_asm_clobbers_memory_p (const_gimple);\n extern void dump_decl_set (FILE *, bitmap);\n extern bool nonfreeing_call_p (gimple);\n-extern bool infer_nonnull_range (gimple, tree);\n+extern bool infer_nonnull_range (gimple, tree, bool, bool);\n extern void sort_case_labels (vec<tree> );\n extern void preprocess_case_label_vec_for_gimple (vec<tree> , tree, tree *);\n extern void gimple_seq_set_location (gimple_seq , location_t);"}, {"sha": "4cb2cdf4eff3bd68bee6aa97830a2f9b2701ca46", "filename": "gcc/opts.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -494,7 +494,7 @@ static const struct default_options default_options_table[] =\n     { OPT_LEVELS_2_PLUS_SPEED_ONLY, OPT_foptimize_strlen, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fhoist_adjacent_loads, NULL, 1 },\n     { OPT_LEVELS_2_PLUS, OPT_fipa_sem_equality, NULL, 1 },\n-    { OPT_LEVELS_2_PLUS, OPT_fisolate_erroneous_paths, NULL, 1 },\n+    { OPT_LEVELS_2_PLUS, OPT_fisolate_erroneous_paths_dereference, NULL, 1 },\n \n     /* -O3 optimizations.  */\n     { OPT_LEVELS_3_PLUS, OPT_ftree_loop_distribute_patterns, NULL, 1 },"}, {"sha": "8b8426526ac2453f807d1ee59c7c020997a18ecc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -1,3 +1,10 @@\n+2013-12-04  Jeff Law  <law@redhat.com>\n+\n+\t* gcc.dg/pr38984.c: Use -fno-isolate-erroneous-paths-dereference.\n+\t* gcc.dg/tree-ssa/isolate-2.c: Explicitly turn on\n+\t-fisolate-erroneous-paths-attribute.\n+\t* gcc.dg/tree-ssa/isolate-4.c: Likewise.\n+\n 2013-12-04  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/52023"}, {"sha": "3ccb0e492fccc004e4372d6f7dbacf16f88f2e61", "filename": "gcc/testsuite/gcc.dg/pr38984.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38984.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38984.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr38984.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fno-delete-null-pointer-checks -fdump-tree-optimized -fno-isolate-erroneous-paths\" }\n+/* { dg-options \"-O2 -fno-delete-null-pointer-checks -fdump-tree-optimized -fno-isolate-erroneous-paths-dereference\" }\n  * */\n \n int f(int *p)"}, {"sha": "bfcaa2b01daf8b889bc013c6efd8293e430f59ba", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-2.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n+/* { dg-options \"-O2 -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n \n \n int z;"}, {"sha": "c9c074df62b39129b606552ff20988c2962b1d20", "filename": "gcc/testsuite/gcc.dg/tree-ssa/isolate-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fisolate-4.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */ \n-/* { dg-options \"-O2 -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n+/* { dg-options \"-O2 -fisolate-erroneous-paths-attribute -fdump-tree-isolate-paths -fdump-tree-phicprop1\" } */\n \n \n extern void foo(void *) __attribute__ ((__nonnull__ (1)));"}, {"sha": "d9da99673cfb3f5c961eeea0f77c97e70fafeb27", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=ae93744d3bca8ba3e54e6f48ec7d80593eb3d6d9", "patch": "@@ -4541,7 +4541,7 @@ infer_value_range (gimple stmt, tree op, enum tree_code *comp_code_p, tree *val_\n   if (stmt_ends_bb_p (stmt) && EDGE_COUNT (gimple_bb (stmt)->succs) == 0)\n     return false;\n \n-  if (infer_nonnull_range (stmt, op))\n+  if (infer_nonnull_range (stmt, op, true, true))\n     {\n       *val_p = build_int_cst (TREE_TYPE (op), 0);\n       *comp_code_p = NE_EXPR;"}]}