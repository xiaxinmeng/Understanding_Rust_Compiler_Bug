{"sha": "5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY4ZDM2ZmUwYThhMTBlYTFhNGIwYTNhZDU3OTBkNWJjNTI4MzM2MQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-01-21T15:29:19Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-01-21T15:29:19Z"}, "message": "Reshuffle 22_locale testsuite.\n\n\n2003-01-21  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tReshuffle 22_locale testsuite.\n\t* 22_locale/(codecvt.cc money_get.cc\n\tcodecvt_members_char_char.cc money_get_members_char.cc\n\tcodecvt_members_unicode_char.cc money_get_members_wchar_t.cc\n\tcodecvt_members_unicode_wchar_t.cc moneypunct_byname.cc\n\tcodecvt_members_wchar_t_char.cc moneypunct.cc collate_byname.cc\n\tmoneypunct_members_char.cc collate.cc moneypunct_members_wchar_t.cc\n\tcollate_members_char.cc money_put.cc collate_members_wchar_t.cc\n\tmoney_put_members_char.cc ctor_copy_dtor.cc\n\tmoney_put_members_wchar_t.cc ctype.cc num_get.cc ctype_is_char.cc\n\tnum_get_members_char.cc ctype_is_wchar_t.cc num_get_members_wchar_t.cc\n\tctype_members_char.cc numpunct_byname.cc ctype_members_wchar_t.cc\n\tnumpunct.cc ctype_narrow_char.cc numpunct_members_char.cc\n\tctype_narrow_wchar_t.cc numpunct_members_wchar_t.cc ctype_scan_char.cc\n\tnum_put.cc ctype_scan_wchar_t.cc num_put_members_char.cc\n\tctype_to_char.cc num_put_members_wchar_t.cc ctype_to_wchar_t.cc\n\toperators.cc ctype_widen_char.cc static_members.cc\n\tctype_widen_wchar_t.cc time_get.cc facet.cc time_get_members_char.cc\n\tglobal_templates.cc time_get_members_wchar_t.cc, members.cc,\n\ttime_put.cc, messages_byname.cc, time_put_members_char.cc,\n\tmessages.cc, time_put_members_wchar_t.cc, messages_members_char.cc):\n\tSplint up into individual test cases...\n\t* 22_locale/codecvt/1.cc: New.\n\t* 22_locale/codecvt/2.cc: New.\n\t* 22_locale/codecvt/always_noconv/char/1.cc: New.\n\t* 22_locale/codecvt/always_noconv/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/always_noconv/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/always_noconv/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/always_noconv/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/always_noconv/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/encoding/char/1.cc: New.\n\t* 22_locale/codecvt/encoding/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/encoding/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/encoding/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/encoding/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/encoding/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/in/char/1.cc: New.\n\t* 22_locale/codecvt/in/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/in/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/in/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/in/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/in/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/length/char/1.cc: New.\n\t* 22_locale/codecvt/length/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/length/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/length/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/length/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/length/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/max_length/char/1.cc: New.\n\t* 22_locale/codecvt/max_length/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/max_length/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/max_length/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/max_length/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/max_length/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/out/char/1.cc: New.\n\t* 22_locale/codecvt/out/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/out/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/out/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/out/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/out/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/unicode/char.cc: New.\n\t* 22_locale/codecvt/unicode/wchar_t.cc: New.\n\t* 22_locale/codecvt/unshift/char/1.cc: New.\n\t* 22_locale/codecvt/unshift/char/wrapped_env.cc: New.\n\t* 22_locale/codecvt/unshift/char/wrapped_locale.cc: New.\n\t* 22_locale/codecvt/unshift/wchar_t/1.cc: New.\n\t* 22_locale/codecvt/unshift/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/codecvt/unshift/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/collate/1.cc: New.\n\t* 22_locale/collate/2.cc: New.\n\t* 22_locale/collate/compare/char/1.cc: New.\n\t* 22_locale/collate/compare/char/2.cc: New.\n\t* 22_locale/collate/compare/char/wrapped_env.cc: New.\n\t* 22_locale/collate/compare/char/wrapped_locale.cc: New.\n\t* 22_locale/collate/compare/wchar_t/1.cc: New.\n\t* 22_locale/collate/compare/wchar_t/2.cc: New.\n\t* 22_locale/collate/compare/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/collate/compare/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/collate/hash/char/1.cc: New.\n\t* 22_locale/collate/hash/char/2.cc: New.\n\t* 22_locale/collate/hash/char/wrapped_env.cc: New.\n\t* 22_locale/collate/hash/char/wrapped_locale.cc: New.\n\t* 22_locale/collate/hash/wchar_t/1.cc: New.\n\t* 22_locale/collate/hash/wchar_t/2.cc: New.\n\t* 22_locale/collate/hash/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/collate/hash/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/collate/transform/char/2.cc: New.\n\t* 22_locale/collate/transform/char/wrapped_env.cc: New.\n\t* 22_locale/collate/transform/char/wrapped_locale.cc: New.\n\t* 22_locale/collate/transform/wchar_t/2.cc: New.\n\t* 22_locale/collate/transform/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/collate/transform/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/collate_byname/1.cc: New.\n\t* 22_locale/ctype/1.cc: New.\n\t* 22_locale/ctype/2.cc: New.\n\t* 22_locale/ctype/cons/char/1.cc: New.\n\t* 22_locale/ctype/cons/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/cons/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/is/char/1.cc: New.\n\t* 22_locale/ctype/is/char/2.cc: New.\n\t* 22_locale/ctype/is/char/3.cc: New.\n\t* 22_locale/ctype/is/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/is/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/is/wchar_t/1.cc: New.\n\t* 22_locale/ctype/is/wchar_t/2.cc: New.\n\t* 22_locale/ctype/is/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/ctype/is/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/ctype/narrow/char/1.cc: New.\n\t* 22_locale/ctype/narrow/char/2.cc: New.\n\t* 22_locale/ctype/narrow/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/narrow/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/narrow/wchar_t/1.cc: New.\n\t* 22_locale/ctype/narrow/wchar_t/2.cc: New.\n\t* 22_locale/ctype/narrow/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/ctype/narrow/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/ctype/scan/char/1.cc: New.\n\t* 22_locale/ctype/scan/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/scan/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/scan/wchar_t/1.cc: New.\n\t* 22_locale/ctype/scan/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/ctype/scan/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/ctype/to/char/1.cc: New.\n\t* 22_locale/ctype/to/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/to/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/to/wchar_t/1.cc: New.\n\t* 22_locale/ctype/to/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/ctype/to/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/ctype/widen/char/1.cc: New.\n\t* 22_locale/ctype/widen/char/wrapped_env.cc: New.\n\t* 22_locale/ctype/widen/char/wrapped_locale.cc: New.\n\t* 22_locale/ctype/widen/wchar_t/1.cc: New.\n\t* 22_locale/ctype/widen/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/ctype/widen/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/facet/1.cc: New.\n\t* 22_locale/facet/2.cc: New.\n\t* 22_locale/global_templates/1.cc: New.\n\t* 22_locale/locale/cons/1.cc: New.\n\t* 22_locale/locale/cons/2.cc: New.\n\t* 22_locale/locale/cons/3.cc: New.\n\t* 22_locale/locale/cons/4.cc: New.\n\t* 22_locale/locale/cons/5.cc: New.\n\t* 22_locale/locale/cons/6.cc: New.\n\t* 22_locale/locale/cons/7.cc: New.\n\t* 22_locale/locale/global_locale_objects/1.cc: New.\n\t* 22_locale/locale/global_locale_objects/2.cc: New.\n\t* 22_locale/locale/global_locale_objects/3.cc: New.\n\t* 22_locale/locale/operations/1.cc: New.\n\t* 22_locale/locale/operations/2.cc: New.\n\t* 22_locale/messages/1.cc: New.\n\t* 22_locale/messages/2.cc: New.\n\t* 22_locale/messages/members/char/1.cc: New.\n\t* 22_locale/messages/members/char/2.cc: New.\n\t* 22_locale/messages/members/char/3.cc: New.\n\t* 22_locale/messages/members/char/wrapped_env.cc: New.\n\t* 22_locale/messages/members/char/wrapped_locale.cc: New.\n\t* 22_locale/messages_byname/1.cc: New.\n\t* 22_locale/money_get/1.cc: New.\n\t* 22_locale/money_get/2.cc: New.\n\t* 22_locale/money_get/get/char/1.cc: New.\n\t* 22_locale/money_get/get/char/2.cc: New.\n\t* 22_locale/money_get/get/char/3.cc: New.\n\t* 22_locale/money_get/get/char/4.cc: New.\n\t* 22_locale/money_get/get/char/5.cc: New.\n\t* 22_locale/money_get/get/char/6.cc: New.\n\t* 22_locale/money_get/get/char/7.cc: New.\n\t* 22_locale/money_get/get/char/8.cc: New.\n\t* 22_locale/money_get/get/char/wrapped_env.cc: New.\n\t* 22_locale/money_get/get/char/wrapped_locale.cc: New.\n\t* 22_locale/money_get/get/wchar_t/1.cc: New.\n\t* 22_locale/money_get/get/wchar_t/2.cc: New.\n\t* 22_locale/money_get/get/wchar_t/3.cc: New.\n\t* 22_locale/money_get/get/wchar_t/4.cc: New.\n\t* 22_locale/money_get/get/wchar_t/5.cc: New.\n\t* 22_locale/money_get/get/wchar_t/6.cc: New.\n\t* 22_locale/money_get/get/wchar_t/7.cc: New.\n\t* 22_locale/money_get/get/wchar_t/8.cc: New.\n\t* 22_locale/money_get/get/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/money_get/get/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/money_put/1.cc: New.\n\t* 22_locale/money_put/2.cc: New.\n\t* 22_locale/money_put/put/char/1.cc: New.\n\t* 22_locale/money_put/put/char/2.cc: New.\n\t* 22_locale/money_put/put/char/3.cc: New.\n\t* 22_locale/money_put/put/char/4.cc: New.\n\t* 22_locale/money_put/put/char/5.cc: New.\n\t* 22_locale/money_put/put/char/6.cc: New.\n\t* 22_locale/money_put/put/char/wrapped_env.cc: New.\n\t* 22_locale/money_put/put/char/wrapped_locale.cc: New.\n\t* 22_locale/money_put/put/wchar_t/1.cc: New.\n\t* 22_locale/money_put/put/wchar_t/2.cc: New.\n\t* 22_locale/money_put/put/wchar_t/3.cc: New.\n\t* 22_locale/money_put/put/wchar_t/4.cc: New.\n\t* 22_locale/money_put/put/wchar_t/5.cc: New.\n\t* 22_locale/money_put/put/wchar_t/6.cc: New.\n\t* 22_locale/money_put/put/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/money_put/put/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/moneypunct/1.cc: New.\n\t* 22_locale/moneypunct/2.cc: New.\n\t* 22_locale/moneypunct/3.cc: New.\n\t* 22_locale/moneypunct/members/char/1.cc: New.\n\t* 22_locale/moneypunct/members/char/2.cc: New.\n\t* 22_locale/moneypunct/members/char/wrapped_env.cc: New.\n\t* 22_locale/moneypunct/members/char/wrapped_locale.cc: New.\n\t* 22_locale/moneypunct/members/wchar_t/1.cc: New.\n\t* 22_locale/moneypunct/members/wchar_t/2.cc: New.\n\t* 22_locale/moneypunct/members/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/moneypunct/members/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/moneypunct_byname/1.cc: New.\n\t* 22_locale/num_get/1.cc: New.\n\t* 22_locale/num_get/2.cc: New.\n\t* 22_locale/num_get/get/char/1.cc: New.\n\t* 22_locale/num_get/get/char/2.cc: New.\n\t* 22_locale/num_get/get/char/3.cc: New.\n\t* 22_locale/num_get/get/char/4.cc: New.\n\t* 22_locale/num_get/get/char/5.cc: New.\n\t* 22_locale/num_get/get/char/6.cc: New.\n\t* 22_locale/num_get/get/char/wrapped_env.cc: New.\n\t* 22_locale/num_get/get/char/wrapped_locale.cc: New.\n\t* 22_locale/num_get/get/wchar_t/1.cc: New.\n\t* 22_locale/num_get/get/wchar_t/2.cc: New.\n\t* 22_locale/num_get/get/wchar_t/3.cc: New.\n\t* 22_locale/num_get/get/wchar_t/4.cc: New.\n\t* 22_locale/num_get/get/wchar_t/5.cc: New.\n\t* 22_locale/num_get/get/wchar_t/6.cc: New.\n\t* 22_locale/num_get/get/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/num_get/get/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/num_put/1.cc: New.\n\t* 22_locale/num_put/2.cc: New.\n\t* 22_locale/num_put/put/char/1.cc: New.\n\t* 22_locale/num_put/put/char/2.cc: New.\n\t* 22_locale/num_put/put/char/3.cc: New.\n\t* 22_locale/num_put/put/char/4.cc: New.\n\t* 22_locale/num_put/put/char/5.cc: New.\n\t* 22_locale/num_put/put/char/wrapped_env.cc: New.\n\t* 22_locale/num_put/put/char/wrapped_locale.cc: New.\n\t* 22_locale/num_put/put/wchar_t/1.cc: New.\n\t* 22_locale/num_put/put/wchar_t/2.cc: New.\n\t* 22_locale/num_put/put/wchar_t/3.cc: New.\n\t* 22_locale/num_put/put/wchar_t/4.cc: New.\n\t* 22_locale/num_put/put/wchar_t/5.cc: New.\n\t* 22_locale/num_put/put/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/num_put/put/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/numpunct/1.cc: New.\n\t* 22_locale/numpunct/2.cc: New.\n\t* 22_locale/numpunct/members/char/1.cc: New.\n\t* 22_locale/numpunct/members/char/2.cc: New.\n\t* 22_locale/numpunct/members/char/wrapped_env.cc: New.\n\t* 22_locale/numpunct/members/char/wrapped_locale.cc: New.\n\t* 22_locale/numpunct/members/wchar_t/1.cc: New.\n\t* 22_locale/numpunct/members/wchar_t/2.cc: New.\n\t* 22_locale/numpunct/members/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/numpunct/members/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/numpunct_byname/1.cc: New.\n\t* 22_locale/numpunct_byname/2.cc: New.\n\t* 22_locale/time_get/1.cc: New.\n\t* 22_locale/time_get/2.cc: New.\n\t* 22_locale/time_get/date_order/char/1.cc: New.\n\t* 22_locale/time_get/date_order/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/date_order/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/date_order/wchar_t/1.cc: New.\n\t* 22_locale/time_get/date_order/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/date_order/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_date/char/1.cc: New.\n\t* 22_locale/time_get/get_date/char/2.cc: New.\n\t* 22_locale/time_get/get_date/char/3.cc: New.\n\t* 22_locale/time_get/get_date/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_date/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_date/wchar_t/1.cc: New.\n\t* 22_locale/time_get/get_date/wchar_t/2.cc: New.\n\t* 22_locale/time_get/get_date/wchar_t/3.cc: New.\n\t* 22_locale/time_get/get_date/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_date/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_monthname/char/1.cc: New.\n\t* 22_locale/time_get/get_monthname/char/2.cc: New.\n\t* 22_locale/time_get/get_monthname/char/3.cc: New.\n\t* 22_locale/time_get/get_monthname/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_monthname/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_monthname/wchar_t/1.cc: New.\n\t* 22_locale/time_get/get_monthname/wchar_t/2.cc: New.\n\t* 22_locale/time_get/get_monthname/wchar_t/3.cc: New.\n\t* 22_locale/time_get/get_monthname/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_monthname/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_time/char/1.cc: New.\n\t* 22_locale/time_get/get_time/char/2.cc: New.\n\t* 22_locale/time_get/get_time/char/3.cc: New.\n\t* 22_locale/time_get/get_time/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_time/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_time/wchar_t/1.cc: New.\n\t* 22_locale/time_get/get_time/wchar_t/2.cc: New.\n\t* 22_locale/time_get/get_time/wchar_t/3.cc: New.\n\t* 22_locale/time_get/get_time/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_time/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_weekday/char/1.cc: New.\n\t* 22_locale/time_get/get_weekday/char/2.cc: New.\n\t* 22_locale/time_get/get_weekday/char/3.cc: New.\n\t* 22_locale/time_get/get_weekday/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_weekday/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_weekday/wchar_t/1.cc: New.\n\t* 22_locale/time_get/get_weekday/wchar_t/2.cc: New.\n\t* 22_locale/time_get/get_weekday/wchar_t/3.cc: New.\n\t* 22_locale/time_get/get_weekday/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_weekday/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_year/char/1.cc: New.\n\t* 22_locale/time_get/get_year/char/3.cc: New.\n\t* 22_locale/time_get/get_year/char/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_year/char/wrapped_locale.cc: New.\n\t* 22_locale/time_get/get_year/wchar_t/1.cc: New.\n\t* 22_locale/time_get/get_year/wchar_t/3.cc: New.\n\t* 22_locale/time_get/get_year/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_get/get_year/wchar_t/wrapped_locale.cc: New.\n\t* 22_locale/time_put/1.cc: New.\n\t* 22_locale/time_put/2.cc: New.\n\t* 22_locale/time_put/put/char/1.cc: New.\n\t* 22_locale/time_put/put/char/10.cc: New.\n\t* 22_locale/time_put/put/char/2.cc: New.\n\t* 22_locale/time_put/put/char/3.cc: New.\n\t* 22_locale/time_put/put/char/4.cc: New.\n\t* 22_locale/time_put/put/char/5.cc: New.\n\t* 22_locale/time_put/put/char/6.cc: New.\n\t* 22_locale/time_put/put/char/7.cc: New.\n\t* 22_locale/time_put/put/char/8.cc: New.\n\t* 22_locale/time_put/put/char/9.cc: New.\n\t* 22_locale/time_put/put/char/wrapped_env.cc: New.\n\t* 22_locale/time_put/put/char/wrapped_locale.cc: New.\n\t* 22_locale/time_put/put/wchar_t/1.cc: New.\n\t* 22_locale/time_put/put/wchar_t/10.cc: New.\n\t* 22_locale/time_put/put/wchar_t/2.cc: New.\n\t* 22_locale/time_put/put/wchar_t/3.cc: New.\n\t* 22_locale/time_put/put/wchar_t/4.cc: New.\n\t* 22_locale/time_put/put/wchar_t/5.cc: New.\n\t* 22_locale/time_put/put/wchar_t/6.cc: New.\n\t* 22_locale/time_put/put/wchar_t/7.cc: New.\n\t* 22_locale/time_put/put/wchar_t/8.cc: New.\n\t* 22_locale/time_put/put/wchar_t/9.cc: New.\n\t* 22_locale/time_put/put/wchar_t/wrapped_env.cc: New.\n\t* 22_locale/time_put/put/wchar_t/wrapped_locale.cc: New.\n\nFrom-SVN: r61548", "tree": {"sha": "f4f2aaf11fd0dbc7d4377bbbe42e0246fc67170b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4f2aaf11fd0dbc7d4377bbbe42e0246fc67170b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/comments", "author": null, "committer": null, "parents": [{"sha": "044b4de3d85f870850d185c96de1746202710251", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/044b4de3d85f870850d185c96de1746202710251", "html_url": "https://github.com/Rust-GCC/gccrs/commit/044b4de3d85f870850d185c96de1746202710251"}], "stats": {"total": 26066, "additions": 18714, "deletions": 7352}, "files": [{"sha": "091a336e2b8e227ce7517f3803c67ade739179dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 339, "deletions": 0, "changes": 339, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,3 +1,342 @@\n+2003-01-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tReshuffle 22_locale testsuite.\n+\t* 22_locale/(codecvt.cc money_get.cc\n+\tcodecvt_members_char_char.cc money_get_members_char.cc\n+\tcodecvt_members_unicode_char.cc money_get_members_wchar_t.cc\n+\tcodecvt_members_unicode_wchar_t.cc moneypunct_byname.cc\n+\tcodecvt_members_wchar_t_char.cc moneypunct.cc collate_byname.cc\n+\tmoneypunct_members_char.cc collate.cc moneypunct_members_wchar_t.cc\n+\tcollate_members_char.cc money_put.cc collate_members_wchar_t.cc\n+\tmoney_put_members_char.cc ctor_copy_dtor.cc\n+\tmoney_put_members_wchar_t.cc ctype.cc num_get.cc ctype_is_char.cc\n+\tnum_get_members_char.cc ctype_is_wchar_t.cc num_get_members_wchar_t.cc\n+\tctype_members_char.cc numpunct_byname.cc ctype_members_wchar_t.cc\n+\tnumpunct.cc ctype_narrow_char.cc numpunct_members_char.cc\n+\tctype_narrow_wchar_t.cc numpunct_members_wchar_t.cc ctype_scan_char.cc\n+\tnum_put.cc ctype_scan_wchar_t.cc num_put_members_char.cc\n+\tctype_to_char.cc num_put_members_wchar_t.cc ctype_to_wchar_t.cc\n+\toperators.cc ctype_widen_char.cc static_members.cc\n+\tctype_widen_wchar_t.cc time_get.cc facet.cc time_get_members_char.cc\n+\tglobal_templates.cc time_get_members_wchar_t.cc, members.cc,\n+\ttime_put.cc, messages_byname.cc, time_put_members_char.cc,\n+\tmessages.cc, time_put_members_wchar_t.cc, messages_members_char.cc): \n+\tSplint up into individual test cases...\t\n+\t* 22_locale/codecvt/1.cc: New.\n+\t* 22_locale/codecvt/2.cc: New.\n+\t* 22_locale/codecvt/always_noconv/char/1.cc: New.\n+\t* 22_locale/codecvt/always_noconv/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/always_noconv/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/always_noconv/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/always_noconv/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/always_noconv/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/encoding/char/1.cc: New.\n+\t* 22_locale/codecvt/encoding/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/encoding/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/encoding/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/encoding/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/encoding/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/in/char/1.cc: New.\n+\t* 22_locale/codecvt/in/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/in/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/in/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/in/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/in/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/length/char/1.cc: New.\n+\t* 22_locale/codecvt/length/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/length/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/length/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/length/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/length/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/max_length/char/1.cc: New.\n+\t* 22_locale/codecvt/max_length/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/max_length/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/max_length/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/max_length/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/max_length/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/out/char/1.cc: New.\n+\t* 22_locale/codecvt/out/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/out/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/out/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/out/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/out/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/unicode/char.cc: New.\n+\t* 22_locale/codecvt/unicode/wchar_t.cc: New.\n+\t* 22_locale/codecvt/unshift/char/1.cc: New.\n+\t* 22_locale/codecvt/unshift/char/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/unshift/char/wrapped_locale.cc: New.\n+\t* 22_locale/codecvt/unshift/wchar_t/1.cc: New.\n+\t* 22_locale/codecvt/unshift/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/codecvt/unshift/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/collate/1.cc: New.\n+\t* 22_locale/collate/2.cc: New.\n+\t* 22_locale/collate/compare/char/1.cc: New.\n+\t* 22_locale/collate/compare/char/2.cc: New.\n+\t* 22_locale/collate/compare/char/wrapped_env.cc: New.\n+\t* 22_locale/collate/compare/char/wrapped_locale.cc: New.\n+\t* 22_locale/collate/compare/wchar_t/1.cc: New.\n+\t* 22_locale/collate/compare/wchar_t/2.cc: New.\n+\t* 22_locale/collate/compare/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/collate/compare/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/collate/hash/char/1.cc: New.\n+\t* 22_locale/collate/hash/char/2.cc: New.\n+\t* 22_locale/collate/hash/char/wrapped_env.cc: New.\n+\t* 22_locale/collate/hash/char/wrapped_locale.cc: New.\n+\t* 22_locale/collate/hash/wchar_t/1.cc: New.\n+\t* 22_locale/collate/hash/wchar_t/2.cc: New.\n+\t* 22_locale/collate/hash/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/collate/hash/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/collate/transform/char/2.cc: New.\n+\t* 22_locale/collate/transform/char/wrapped_env.cc: New.\n+\t* 22_locale/collate/transform/char/wrapped_locale.cc: New.\n+\t* 22_locale/collate/transform/wchar_t/2.cc: New.\n+\t* 22_locale/collate/transform/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/collate/transform/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/collate_byname/1.cc: New.\n+\t* 22_locale/ctype/1.cc: New.\n+\t* 22_locale/ctype/2.cc: New.\n+\t* 22_locale/ctype/cons/char/1.cc: New.\n+\t* 22_locale/ctype/cons/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/cons/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/is/char/1.cc: New.\n+\t* 22_locale/ctype/is/char/2.cc: New.\n+\t* 22_locale/ctype/is/char/3.cc: New.\n+\t* 22_locale/ctype/is/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/is/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/is/wchar_t/1.cc: New.\n+\t* 22_locale/ctype/is/wchar_t/2.cc: New.\n+\t* 22_locale/ctype/is/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/ctype/is/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/narrow/char/1.cc: New.\n+\t* 22_locale/ctype/narrow/char/2.cc: New.\n+\t* 22_locale/ctype/narrow/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/narrow/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/narrow/wchar_t/1.cc: New.\n+\t* 22_locale/ctype/narrow/wchar_t/2.cc: New.\n+\t* 22_locale/ctype/narrow/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/ctype/narrow/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/scan/char/1.cc: New.\n+\t* 22_locale/ctype/scan/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/scan/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/scan/wchar_t/1.cc: New.\n+\t* 22_locale/ctype/scan/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/ctype/scan/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/to/char/1.cc: New.\n+\t* 22_locale/ctype/to/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/to/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/to/wchar_t/1.cc: New.\n+\t* 22_locale/ctype/to/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/ctype/to/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/widen/char/1.cc: New.\n+\t* 22_locale/ctype/widen/char/wrapped_env.cc: New.\n+\t* 22_locale/ctype/widen/char/wrapped_locale.cc: New.\n+\t* 22_locale/ctype/widen/wchar_t/1.cc: New.\n+\t* 22_locale/ctype/widen/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/ctype/widen/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/facet/1.cc: New.\n+\t* 22_locale/facet/2.cc: New.\n+\t* 22_locale/global_templates/1.cc: New.\n+\t* 22_locale/locale/cons/1.cc: New.\n+\t* 22_locale/locale/cons/2.cc: New.\n+\t* 22_locale/locale/cons/3.cc: New.\n+\t* 22_locale/locale/cons/4.cc: New.\n+\t* 22_locale/locale/cons/5.cc: New.\n+\t* 22_locale/locale/cons/6.cc: New.\n+\t* 22_locale/locale/cons/7.cc: New.\n+\t* 22_locale/locale/global_locale_objects/1.cc: New.\n+\t* 22_locale/locale/global_locale_objects/2.cc: New.\n+\t* 22_locale/locale/global_locale_objects/3.cc: New.\n+\t* 22_locale/locale/operations/1.cc: New.\n+\t* 22_locale/locale/operations/2.cc: New.\n+\t* 22_locale/messages/1.cc: New.\n+\t* 22_locale/messages/2.cc: New.\n+\t* 22_locale/messages/members/char/1.cc: New.\n+\t* 22_locale/messages/members/char/2.cc: New.\n+\t* 22_locale/messages/members/char/3.cc: New.\n+\t* 22_locale/messages/members/char/wrapped_env.cc: New.\n+\t* 22_locale/messages/members/char/wrapped_locale.cc: New.\n+\t* 22_locale/messages_byname/1.cc: New.\n+\t* 22_locale/money_get/1.cc: New.\n+\t* 22_locale/money_get/2.cc: New.\n+\t* 22_locale/money_get/get/char/1.cc: New.\n+\t* 22_locale/money_get/get/char/2.cc: New.\n+\t* 22_locale/money_get/get/char/3.cc: New.\n+\t* 22_locale/money_get/get/char/4.cc: New.\n+\t* 22_locale/money_get/get/char/5.cc: New.\n+\t* 22_locale/money_get/get/char/6.cc: New.\n+\t* 22_locale/money_get/get/char/7.cc: New.\n+\t* 22_locale/money_get/get/char/8.cc: New.\n+\t* 22_locale/money_get/get/char/wrapped_env.cc: New.\n+\t* 22_locale/money_get/get/char/wrapped_locale.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/1.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/2.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/3.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/4.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/5.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/6.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/7.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/8.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/money_get/get/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/money_put/1.cc: New.\n+\t* 22_locale/money_put/2.cc: New.\n+\t* 22_locale/money_put/put/char/1.cc: New.\n+\t* 22_locale/money_put/put/char/2.cc: New.\n+\t* 22_locale/money_put/put/char/3.cc: New.\n+\t* 22_locale/money_put/put/char/4.cc: New.\n+\t* 22_locale/money_put/put/char/5.cc: New.\n+\t* 22_locale/money_put/put/char/6.cc: New.\n+\t* 22_locale/money_put/put/char/wrapped_env.cc: New.\n+\t* 22_locale/money_put/put/char/wrapped_locale.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/1.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/2.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/3.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/4.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/5.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/6.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/money_put/put/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/moneypunct/1.cc: New.\n+\t* 22_locale/moneypunct/2.cc: New.\n+\t* 22_locale/moneypunct/3.cc: New.\n+\t* 22_locale/moneypunct/members/char/1.cc: New.\n+\t* 22_locale/moneypunct/members/char/2.cc: New.\n+\t* 22_locale/moneypunct/members/char/wrapped_env.cc: New.\n+\t* 22_locale/moneypunct/members/char/wrapped_locale.cc: New.\n+\t* 22_locale/moneypunct/members/wchar_t/1.cc: New.\n+\t* 22_locale/moneypunct/members/wchar_t/2.cc: New.\n+\t* 22_locale/moneypunct/members/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/moneypunct/members/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/moneypunct_byname/1.cc: New.\n+\t* 22_locale/num_get/1.cc: New.\n+\t* 22_locale/num_get/2.cc: New.\n+\t* 22_locale/num_get/get/char/1.cc: New.\n+\t* 22_locale/num_get/get/char/2.cc: New.\n+\t* 22_locale/num_get/get/char/3.cc: New.\n+\t* 22_locale/num_get/get/char/4.cc: New.\n+\t* 22_locale/num_get/get/char/5.cc: New.\n+\t* 22_locale/num_get/get/char/6.cc: New.\n+\t* 22_locale/num_get/get/char/wrapped_env.cc: New.\n+\t* 22_locale/num_get/get/char/wrapped_locale.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/1.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/2.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/3.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/4.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/5.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/6.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/num_get/get/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/num_put/1.cc: New.\n+\t* 22_locale/num_put/2.cc: New.\n+\t* 22_locale/num_put/put/char/1.cc: New.\n+\t* 22_locale/num_put/put/char/2.cc: New.\n+\t* 22_locale/num_put/put/char/3.cc: New.\n+\t* 22_locale/num_put/put/char/4.cc: New.\n+\t* 22_locale/num_put/put/char/5.cc: New.\n+\t* 22_locale/num_put/put/char/wrapped_env.cc: New.\n+\t* 22_locale/num_put/put/char/wrapped_locale.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/1.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/2.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/3.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/4.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/5.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/num_put/put/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/numpunct/1.cc: New.\n+\t* 22_locale/numpunct/2.cc: New.\n+\t* 22_locale/numpunct/members/char/1.cc: New.\n+\t* 22_locale/numpunct/members/char/2.cc: New.\n+\t* 22_locale/numpunct/members/char/wrapped_env.cc: New.\n+\t* 22_locale/numpunct/members/char/wrapped_locale.cc: New.\n+\t* 22_locale/numpunct/members/wchar_t/1.cc: New.\n+\t* 22_locale/numpunct/members/wchar_t/2.cc: New.\n+\t* 22_locale/numpunct/members/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/numpunct/members/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/numpunct_byname/1.cc: New.\n+\t* 22_locale/numpunct_byname/2.cc: New.\n+\t* 22_locale/time_get/1.cc: New.\n+\t* 22_locale/time_get/2.cc: New.\n+\t* 22_locale/time_get/date_order/char/1.cc: New.\n+\t* 22_locale/time_get/date_order/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/date_order/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/date_order/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/date_order/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/date_order/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_date/char/1.cc: New.\n+\t* 22_locale/time_get/get_date/char/2.cc: New.\n+\t* 22_locale/time_get/get_date/char/3.cc: New.\n+\t* 22_locale/time_get/get_date/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_date/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_date/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/get_date/wchar_t/2.cc: New.\n+\t* 22_locale/time_get/get_date/wchar_t/3.cc: New.\n+\t* 22_locale/time_get/get_date/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_date/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_monthname/char/1.cc: New.\n+\t* 22_locale/time_get/get_monthname/char/2.cc: New.\n+\t* 22_locale/time_get/get_monthname/char/3.cc: New.\n+\t* 22_locale/time_get/get_monthname/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_monthname/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_monthname/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/get_monthname/wchar_t/2.cc: New.\n+\t* 22_locale/time_get/get_monthname/wchar_t/3.cc: New.\n+\t* 22_locale/time_get/get_monthname/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_monthname/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_time/char/1.cc: New.\n+\t* 22_locale/time_get/get_time/char/2.cc: New.\n+\t* 22_locale/time_get/get_time/char/3.cc: New.\n+\t* 22_locale/time_get/get_time/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_time/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_time/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/get_time/wchar_t/2.cc: New.\n+\t* 22_locale/time_get/get_time/wchar_t/3.cc: New.\n+\t* 22_locale/time_get/get_time/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_time/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_weekday/char/1.cc: New.\n+\t* 22_locale/time_get/get_weekday/char/2.cc: New.\n+\t* 22_locale/time_get/get_weekday/char/3.cc: New.\n+\t* 22_locale/time_get/get_weekday/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_weekday/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_weekday/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/get_weekday/wchar_t/2.cc: New.\n+\t* 22_locale/time_get/get_weekday/wchar_t/3.cc: New.\n+\t* 22_locale/time_get/get_weekday/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_weekday/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_year/char/1.cc: New.\n+\t* 22_locale/time_get/get_year/char/3.cc: New.\n+\t* 22_locale/time_get/get_year/char/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_year/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_get/get_year/wchar_t/1.cc: New.\n+\t* 22_locale/time_get/get_year/wchar_t/3.cc: New.\n+\t* 22_locale/time_get/get_year/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_get/get_year/wchar_t/wrapped_locale.cc: New.\n+\t* 22_locale/time_put/1.cc: New.\n+\t* 22_locale/time_put/2.cc: New.\n+\t* 22_locale/time_put/put/char/1.cc: New.\n+\t* 22_locale/time_put/put/char/10.cc: New.\n+\t* 22_locale/time_put/put/char/2.cc: New.\n+\t* 22_locale/time_put/put/char/3.cc: New.\n+\t* 22_locale/time_put/put/char/4.cc: New.\n+\t* 22_locale/time_put/put/char/5.cc: New.\n+\t* 22_locale/time_put/put/char/6.cc: New.\n+\t* 22_locale/time_put/put/char/7.cc: New.\n+\t* 22_locale/time_put/put/char/8.cc: New.\n+\t* 22_locale/time_put/put/char/9.cc: New.\n+\t* 22_locale/time_put/put/char/wrapped_env.cc: New.\n+\t* 22_locale/time_put/put/char/wrapped_locale.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/1.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/10.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/2.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/3.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/4.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/5.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/6.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/7.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/8.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/9.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/wrapped_env.cc: New.\n+\t* 22_locale/time_put/put/wchar_t/wrapped_locale.cc: New.\n+\n 2003-01-16  Jeffrey D. Oldham  <oldham@codesourcery.com>\n \n \t* config/locale/generic/messages_members.h"}, {"sha": "fa285752871d1e5149841379862d79abf0495a24", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.1.5  Template class codecvt\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -38,18 +37,8 @@ void test01()\n   typedef test_type::state_type state_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_codecvt: public std::codecvt<unsigned char, unsigned long, char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_codecvt facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt.cc"}, {"sha": "9811239b5edae20f3af89423c239e8d85cc7baad", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5  Template class codecvt\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_codecvt: public std::codecvt<unsigned char, unsigned long, char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_codecvt facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "523322ece8744f18b88ffb8b3b67b282cf450e58", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/char/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  VERIFY( cvt->always_noconv() );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "fb267410804e6c22359965c4422be31c3a1dd3b4", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/1.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,75 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  VERIFY( !cvt->always_noconv() );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/always_noconv/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Falways_noconv%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "9ac07c5f044ba6c89b3ff6552e4395bc1b5efb28", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/char/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,62 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  int i = cvt->encoding();\n+  VERIFY( i == 1 );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "0aefff30397d56e443ef94ff0aa037b0c745ee30", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,76 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  int i = cvt->encoding();\n+  VERIFY( i == 4 ); // Target-dependent.\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/encoding/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fencoding%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "71f6ac7749863b257afdcefb9812cd5f7784ae35", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/char/1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,68 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  // in\n+  memset(c_arr, 'X', size);\n+  result r1 = cvt->in(state, c_lit, c_lit + size, from_next, \n+\t\t      c_arr, c_arr + size, to_next);\n+  VERIFY( r1 == codecvt_base::noconv );\n+  VERIFY( !memcmp(c_arr, c_ref, size) ); \n+  VERIFY( from_next == c_lit );\n+  VERIFY( to_next == c_arr );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "7340d418209f9b7612395a59c02131c5577cd623", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,83 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  // in\n+  w_codecvt::state_type state01;\n+  zero_state(state01);\n+  result r1 = cvt->in(state01, e_lit, e_lit + size, efrom_next, \n+\t\t      i_arr, i_arr + size, ito_next);\n+  VERIFY( r1 == codecvt_base::ok );\n+  VERIFY( !int_traits::compare(i_arr, i_lit, size) ); \n+  VERIFY( efrom_next == e_lit + size );\n+  VERIFY( ito_next == i_arr + size );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/in/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fin%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "1ef0f267c017d3c718d0b3057b590ed901e7f1b3", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/char/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,62 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  int j = cvt->length(state, c_lit, c_lit + size, 5);\n+  VERIFY( j == 5 );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "ca673240f46ded4f9a3f9299add77d950e49bb33", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/1.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,78 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  w_codecvt::state_type state04;\n+  zero_state(state04);\n+  int j = cvt->length(state04, e_lit, e_lit + size, 5);\n+  VERIFY( j == 5 );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/length/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Flength%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "789007ae90522da2ba8aef08cd4a1cacb08c029e", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/char/1.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,62 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  int k = cvt->max_length();\n+  VERIFY( k == 1 );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "028756c897c6f92aecb103c1dbe3707b785f5c5f", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/1.cc", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,77 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  int k = cvt->max_length();\n+  VERIFY( k == 1 );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/max_length/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fmax_length%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "f0ef0a5da639304fccb2d4117202ffe097e570a9", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/char/1.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,68 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Required instantiation, degenerate conversion.\n+// codecvt<char, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef codecvt<char, char, mbstate_t> \tc_codecvt;\n+\n+  bool \t\t\ttest = true;\n+  const char* \t\tc_lit = \"black pearl jasmine tea\";\n+  const char* \t        from_next;\n+  int \t\t\tsize = 25;\n+  char* \t\tc_arr = new char[size];\n+  char*                 c_ref = new char[size];\n+  char*\t\t\tto_next;\n+\n+  locale \t\tloc = locale::classic();\n+  c_codecvt::state_type state;\n+  const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n+\n+  // According to the resolution of DR19 (see also libstd++/9168), in\n+  // case of degenerate conversion ('noconv'), \"there are no changes to\n+  // the values in [to, to_limit).\"\n+  memset(c_ref, 'X', size);\n+\n+  // out\n+  memset(c_arr, 'X', size);\n+  result r2 = cvt->out(state, c_lit, c_lit + size, from_next, \n+\t\t       c_arr, c_arr + size, to_next);\n+  VERIFY( r2 == codecvt_base::noconv );\n+  VERIFY( !memcmp(c_arr, c_ref, size) ); \n+  VERIFY( from_next == c_lit );\n+  VERIFY( to_next == c_arr );\n+\n+  delete [] c_arr;\n+  delete [] c_ref;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "3727044ae38885d71b741bbf84d4fba074c42308", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/1.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,83 @@\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Need to explicitly set the state(mbstate_t) to zero.\n+// How to do this is not specified by the ISO C99 standard, so we\n+// might need to add some operators to make the intuiative case\n+// work:\n+//   w_codecvt::state_type state00;\n+//   state00 = 0;  \n+// or, can use this explicit \"C\" initialization:\n+//   w_codecvt::state_type state01 = {0, 0};\n+// .. except Ulrich says: Use memset. Always use memset. Feel the force...\n+void\n+zero_state(std::mbstate_t& state)\n+{ std::memset(&state, 0, sizeof(std::mbstate_t)); }\n+\n+// Required instantiation\n+// codecvt<wchar_t, char, mbstate_t>\n+void test01()\n+{\n+  using namespace std;\n+  typedef codecvt<wchar_t, char, mbstate_t> \tw_codecvt;\n+  typedef codecvt_base::result\t\t\tresult;\n+  typedef wchar_t\t\t\t\tint_type;\n+  typedef char\t\t\t\t\text_type;\n+  typedef char_traits<wchar_t>\t\t\tint_traits;\n+  typedef char_traits<char>\t\t\text_traits;\n+\n+  bool \t\t\ttest = true;\n+  const ext_type* \te_lit = \"black pearl jasmine tea\";\n+  const ext_type*       efrom_next;\n+  const int_type* \ti_lit = L\"black pearl jasmine tea\";\n+  const int_type*       ifrom_next;\n+  int \t\t\tsize = strlen(e_lit);\n+  ext_type* \t\te_arr = new ext_type[size + 1];\n+  ext_type*\t\teto_next;\n+  int_type* \t\ti_arr = new int_type[size + 1];\n+  int_type*\t\tito_next;\n+\n+  locale \t\tloc;\n+  const w_codecvt* \tcvt = &use_facet<w_codecvt>(loc); \n+\n+  // out\n+  w_codecvt::state_type state02;\n+  zero_state(state02);  \n+  result r2 = cvt->out(state02, i_lit, i_lit + size, ifrom_next, \n+\t\t       e_arr, e_arr + size, eto_next);\n+  VERIFY( r2 == codecvt_base::ok );\n+  VERIFY( !ext_traits::compare(e_arr, e_lit, size) ); \n+  VERIFY( ifrom_next == i_lit + size );\n+  VERIFY( eto_next == e_arr + size );\n+\n+  delete [] e_arr;\n+  delete [] i_arr;\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/out/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Fout%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "51bf9b9600ad4107c36c4ce497d4e9f1f3cea62b", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/char.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fchar.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_unicode_char.cc"}, {"sha": "c944865b08fd7e7c2c697a57d212f3fe5411fdae", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unicode/wchar_t.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funicode%2Fwchar_t.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_unicode_wchar_t.cc"}, {"sha": "1a6eadd82fe6a5ce6339ba00514a656b2bc5c9b7", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/char/1.cc", "status": "renamed", "additions": 2, "deletions": 48, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,7 +39,7 @@ void test01()\n   char*                 c_ref = new char[size];\n   char*\t\t\tto_next;\n \n-  locale \t\tloc;\n+  locale \t\tloc = locale::classic();\n   c_codecvt::state_type state;\n   const c_codecvt* \tcvt = &use_facet<c_codecvt>(loc); \n \n@@ -73,58 +73,12 @@ void test01()\n   VERIFY( !strcmp(c_arr, c_lit) ); \n   VERIFY( to_next == c_arr );\n \n-  int i = cvt->encoding();\n-  VERIFY( i == 1 );\n-\n-  VERIFY( cvt->always_noconv() );\n-\n-  int j = cvt->length(state, c_lit, c_lit + size, 5);\n-  VERIFY( j == 5 );\n-\n-  int k = cvt->max_length();\n-  VERIFY( k == 1 );\n-\n   delete [] c_arr;\n   delete [] c_ref;\n }\n \n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main ()\n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_char_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "2f31670e4c7bfa96e734b81d942bf4956ad88bef", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/1.cc", "status": "renamed", "additions": 2, "deletions": 61, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n-// 2000-08-18 Benjamin Kosnik <bkoz@cygnus.com>\n+// 2000-08-17 Benjamin Kosnik <bkoz@cygnus.com>\n \n-// Copyright (C) 2000, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,11 +20,9 @@\n \n // 22.2.1.5 - Template class codecvt [lib.locale.codecvt]\n \n-#include <cwchar> // for mbstate_t\n #include <locale>\n #include <testsuite_hooks.h>\n \n-\n // Need to explicitly set the state(mbstate_t) to zero.\n // How to do this is not specified by the ISO C99 standard, so we\n // might need to add some operators to make the intuiative case\n@@ -34,7 +32,6 @@\n // or, can use this explicit \"C\" initialization:\n //   w_codecvt::state_type state01 = {0, 0};\n // .. except Ulrich says: Use memset. Always use memset. Feel the force...\n-#ifdef _GLIBCPP_USE_WCHAR_T\n void\n zero_state(std::mbstate_t& state)\n { std::memset(&state, 0, sizeof(std::mbstate_t)); }\n@@ -93,66 +90,10 @@ void test01()\n   VERIFY( r3 == codecvt_base::noconv );\n   VERIFY( !strcmp(e_arr, e_lit) ); \n   VERIFY( eto_next == e_arr );\n-\n-  int i = cvt->encoding();\n-  VERIFY( i == 4 ); // Target-dependent.\n-\n-  VERIFY( !cvt->always_noconv() );\n-\n-  w_codecvt::state_type state04;\n-  zero_state(state04);\n-  int j = cvt->length(state03, e_lit, e_lit + size, 5);\n-  VERIFY( j == 5 );\n-\n-  int k = cvt->max_length();\n-  VERIFY( k == 1 );\n-\n-  delete [] e_arr;\n-  delete [] i_arr;\n-}\n-\n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n }\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n-\n \n int main ()\n {\n-#if _GLIBCPP_USE_WCHAR_T\n   test01();\n-  test02();\n-  test03();\n-#endif \n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/codecvt_members_wchar_t_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/unshift/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Funshift%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "5b55b03f24fffbb1f514f3bf43dd4f4f16c9c8ba", "filename": "libstdc++-v3/testsuite/22_locale/collate/1.cc", "status": "renamed", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,3 +1,4 @@\n+// { dg-do compile }\n // 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n \n // Copyright (C) 2001 Free Software Foundation\n@@ -20,8 +21,6 @@\n \n // 22.2.4 The collate category\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -37,18 +36,8 @@ void test01()\n   typedef test_type::string_type string_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_collate: public std::collate<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_collate facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate.cc"}, {"sha": "98bc214943d60c339247056bc2ac022dfc3233b3", "filename": "libstdc++-v3/testsuite/22_locale/collate/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-08-15  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4 The collate category\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_collate: public std::collate<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_collate facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "74871082be3fc10c90e4c805f19e9e4a907ad74b", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,79 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check \"C\" locale.\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n+  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+\n+  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n+  const char* strlit2 = \"imperial tea court green oolong\";\n+\n+  int i1;\n+  int i2;\n+  int size1 = char_traits<char>::length(strlit1) - 1;\n+  int size2 = char_traits<char>::length(strlit2) - 1;\n+\n+  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 1 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n+  VERIFY ( i1 == -1 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n+  VERIFY ( i2 == 1 );\n+  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == -1 );\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "52052f9aed0e66ed62bc7efe25b3fec8da23f9d4", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/2.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,86 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check German \"de_DE\" locale.\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n+  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+\n+  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n+  const char* strlit2 = \"imperial tea court green oolong\";\n+  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  int size1 = char_traits<char>::length(strlit1) - 1;\n+  int size2 = char_traits<char>::length(strlit2) - 1;\n+  int size3 = char_traits<char>::length(strlit3) - 1;\n+  int size4 = char_traits<char>::length(strlit4) - 1;\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n+  VERIFY ( i1 == -1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i1 == -1 );\n+\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i2 == 1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == 0 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "0ba7b05835e71cab280549004ea3a39c940b8c8b", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,79 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check \"C\" locale.\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n+  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+\n+  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n+  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n+\n+  int i1;\n+  int i2;\n+  int size1 = char_traits<wchar_t>::length(strlit1) - 1;\n+  int size2 = char_traits<wchar_t>::length(strlit2) - 1;\n+\n+  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 1 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n+  VERIFY ( i1 == -1 );\n+  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n+  VERIFY ( i2 == 1 );\n+  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == -1 );\n+  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n+  VERIFY ( i2 == 0 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "24b327f979b7d7f7e11d7ae5393ff5a10b1312b6", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/2.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,86 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check German \"de_DE\" locale.\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n+  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // int compare(const charT*, const charT*, const charT*, const charT*) const\n+\n+  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n+  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n+  const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  int size1 = char_traits<wchar_t>::length(strlit1) - 1;\n+  int size2 = char_traits<wchar_t>::length(strlit2) - 1;\n+  int size3 = char_traits<wchar_t>::length(strlit3) - 1;\n+  int size4 = char_traits<wchar_t>::length(strlit4) - 1;\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n+  VERIFY ( i1 == -1 );\n+  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n+  VERIFY ( i1 == 0 );\n+\n+  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n+  VERIFY ( i1 == -1 );\n+\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n+  VERIFY ( i2 == 1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == 0 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/collate/compare/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fcompare%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "9be618a8f4a9637ce630d6a23ecc5cd64e6dd1e4", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check \"C\" locale.\n+void test01()\n+{\n+  bool test = true;\n+\n+  std::string str1(\"fffff\");\n+  std::string str2(\"ffffffffffff\");\n+\n+  const std::locale cloc = std::locale::classic();\n+  const std::collate<char> &col = std::use_facet<std::collate<char> >(cloc);\n+\n+  long l1 = col.hash(str1.c_str(), str1.c_str() + str1.size());\n+  long l2 = col.hash(str2.c_str(), str2.c_str() + str2.size());\n+  VERIFY( l1 != l2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75eb202da2871daba08e7e842939905579ac28f9", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/2.cc", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,75 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check German \"de_DE\" locale.\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n+  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // long hash(const charT*, const charT*) cosnt\n+  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n+  const char* strlit2 = \"imperial tea court green oolong\";\n+  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  long l1;\n+  long l2;\n+  int size3 = char_traits<char>::length(strlit4) - 1;\n+  int size4 = char_traits<char>::length(strlit3) - 1;\n+\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l1 != l2 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "73f8da142ca992b3e72de0fe96f099b4a482fcd2", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/1.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,48 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check \"C\" locale.\n+void test01()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+  bool test = true;\n+\n+  string_type str1(L\"fffff\");\n+  string_type str2(L\"ffffffffffff\");\n+\n+  const std::locale cloc = std::locale::classic();\n+  const std::collate<wchar_t> &col = std::use_facet<std::collate<wchar_t> >(cloc);\n+\n+  long l1 = col.hash(str1.c_str(), str1.c_str() + str1.size());\n+  long l2 = col.hash(str2.c_str(), str2.c_str() + str2.size());\n+  VERIFY( l1 != l2 );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b11be4a99907f8fd708c4c1fa2d0cf8c6b639e55", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/2.cc", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,74 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Check German \"de_DE\" locale.\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n+  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // long hash(const charT*, const charT*) cosnt\n+  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n+  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n+  const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  long l1;\n+  long l2;\n+  int size3 = char_traits<wchar_t>::length(strlit4) - 1;\n+  int size4 = char_traits<wchar_t>::length(strlit3) - 1;\n+\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n+  VERIFY ( l1 != l2 );\n+  l1 = coll_de.hash(strlit3, strlit3 + size3);\n+  l2 = coll_de.hash(strlit4, strlit4 + size4);\n+  VERIFY ( l1 != l2 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/collate/hash/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Fhash%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "dc2b395bd660566a9fa11917a9a52b19eced640c", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,72 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<char>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n+  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n+  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n+\n+  // long hash(const charT*, const charT*) cosnt\n+  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n+  const char* strlit2 = \"imperial tea court green oolong\";\n+  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  int size3 = char_traits<char>::length(strlit3) - 1;\n+  int size4 = char_traits<char>::length(strlit4) - 1;\n+\n+  string_type str3 = coll_de.transform(strlit3, strlit3 + size3);\n+  string_type str4 = coll_de.transform(strlit4, strlit4 + size4);\n+  i1 = str3.compare(str4);\n+  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  VERIFY ( i1 * i2 > 0 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9f9d1aade91c47ceb21cbf3cb8424db20f18fc41", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "2ef10fd5765a5334d22c63e538560fe414ccb1ee", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "f643fd68da626f5c976b56572d6c0eced3720068", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/2.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,72 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::collate<wchar_t>::string_type string_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n+  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n+  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n+\n+  // long hash(const charT*, const charT*) cosnt\n+  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n+  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n+  const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n+  const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n+\n+  int i1;\n+  int i2;\n+  int size3 = char_traits<wchar_t>::length(strlit3) - 1;\n+  int size4 = char_traits<wchar_t>::length(strlit4) - 1;\n+\n+  string_type str3 = coll_de.transform(strlit3, strlit3 + size3);\n+  string_type str4 = coll_de.transform(strlit4, strlit4 + size4);\n+  i1 = str3.compare(str4);\n+  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n+  VERIFY ( i2 == -1 );\n+  VERIFY ( i1 * i2 > 0 );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9f9d1aade91c47ceb21cbf3cb8424db20f18fc41", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "2ef10fd5765a5334d22c63e538560fe414ccb1ee", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "629866287907cea8f6e3a9380eee4920d144aba4", "filename": "libstdc++-v3/testsuite/22_locale/collate_byname/1.cc", "status": "renamed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_byname%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -23,9 +23,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n void test01()\n {\n   using namespace std;\n@@ -135,6 +132,5 @@ void test01()\n int main()\n {\n   test01();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/collate_byname.cc"}, {"sha": "eccf7caae1c76bcc9c5991e305a93a32c4cadbbf", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_char.cc", "status": "removed", "additions": 0, "deletions": 187, "changes": 187, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,187 +0,0 @@\n-// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.4.1.1 collate members\n-\n-#include <locale>\n-#include <testsuite_hooks.h>\n-\n-// XXX This may not work for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-void test01()\n-{\n-  using namespace std;\n-  typedef std::collate<char>::string_type string_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_us(\"en_US\");\n-  locale loc_fr(\"fr_FR\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_us != loc_fr );\n-  VERIFY( loc_us != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the collate facets\n-  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n-  const collate<char>& coll_us = use_facet<collate<char> >(loc_us); \n-  const collate<char>& coll_fr = use_facet<collate<char> >(loc_fr); \n-  const collate<char>& coll_de = use_facet<collate<char> >(loc_de); \n-\n-  // int compare(const charT*, const charT*, const charT*, const charT*) const\n-  // long hash(const charT*, const charT*) cosnt\n-  // string_type transform(const charT*, const charT*) const\n-\n-  // Check \"C\" locale.\n-  const char* strlit1 = \"monkey picked tikuanyin oolong\";\n-  const char* strlit2 = \"imperial tea court green oolong\";\n-\n-  int i1;\n-  int size1 = strlen(strlit1) - 1;\n-  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n-  VERIFY ( i1 == 1 );\n-  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n-  VERIFY ( i1 == -1 );\n-  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n-  VERIFY ( i1 == 0 );\n-\n-  int i2;\n-  int size2 = strlen(strlit2) - 1;\n-  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n-  VERIFY ( i2 == 1 );\n-  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == -1 );\n-  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == 0 );\n-\n-  long l1;\n-  long l2;\n-  l1 = coll_c.hash(strlit1, strlit1 + size1);\n-  l2 = coll_c.hash(strlit1, strlit1 + size1 - 1);\n-  VERIFY ( l1 != l2 );\n-  l1 = coll_c.hash(strlit1, strlit1 + size1);\n-  l2 = coll_c.hash(strlit2, strlit2 + size2);\n-  VERIFY ( l1 != l2 );\n-\n-  string str1 = coll_c.transform(strlit1, strlit1 + size1);\n-  string str2 = coll_c.transform(strlit2, strlit2 + size2);\n-  i1 = str1.compare(str2);\n-  i2 = coll_c.compare(strlit1, strlit1 + size1, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == 1 );\n-  VERIFY ( i1 * i2 > 0 );\n-\n-  // Check German \"de_DE\" locale.\n-  const char* strlit3 = \"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n-  const char* strlit4 = \"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n-\n-  int size3 = strlen(strlit3) - 1;\n-  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n-  VERIFY ( i1 == -1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 0 );\n-\n-  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n-  VERIFY ( i1 == -1 );\n-\n-  int size4 = strlen(strlit4) - 1;\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n-  VERIFY ( i2 == 1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == 0 );\n-\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n-  VERIFY ( l1 != l2 );\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit4, strlit4 + size4);\n-  VERIFY ( l1 != l2 );\n-\n-  string str3 = coll_de.transform(strlit3, strlit3 + size3);\n-  string str4 = coll_de.transform(strlit4, strlit4 + size4);\n-  i1 = str3.compare(str4);\n-  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  VERIFY ( i1 * i2 > 0 );\n-}\n-\n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-void test03()\n-{\n-  bool test = true;\n-  std::string str1(\"fffff\");\n-  std::string str2(\"ffffffffffff\");\n-\n-  const std::locale cloc = std::locale::classic();\n-  const std::collate<char> &col = std::use_facet<std::collate<char> >(cloc);\n-\n-  long l1 = col.hash(str1.c_str(), str1.c_str() + str1.size());\n-  long l2 = col.hash(str2.c_str(), str2.c_str() + str2.size());\n-  VERIFY( l1 != l2 );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test03();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  return 0;\n-}"}, {"sha": "c59ab329ebd670983c7098dd71f8dbcca63fd871", "filename": "libstdc++-v3/testsuite/22_locale/collate_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 190, "changes": 190, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,190 +0,0 @@\n-// 2001-08-17 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.4.1.1 collate members\n-\n-#include <locale>\n-#include <testsuite_hooks.h>\n-\n-// XXX This may not work for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-void test01()\n-{\n-  using namespace std;\n-  typedef std::collate<wchar_t>::string_type string_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_us(\"en_US\");\n-  locale loc_fr(\"fr_FR\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_us != loc_fr );\n-  VERIFY( loc_us != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the collate facets\n-  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n-  const collate<wchar_t>& coll_us = use_facet<collate<wchar_t> >(loc_us); \n-  const collate<wchar_t>& coll_fr = use_facet<collate<wchar_t> >(loc_fr); \n-  const collate<wchar_t>& coll_de = use_facet<collate<wchar_t> >(loc_de); \n-\n-  // int compare(const charT*, const charT*, const charT*, const charT*) const\n-  // long hash(const charT*, const charT*) cosnt\n-  // string_type transform(const charT*, const charT*) const\n-\n-  // Check \"C\" locale.\n-  const wchar_t* strlit1 = L\"monkey picked tikuanyin oolong\";\n-  const wchar_t* strlit2 = L\"imperial tea court green oolong\";\n-\n-  int i1;\n-  int size1 = char_traits<wchar_t>::length(strlit1) - 1;\n-  i1 = coll_c.compare(strlit1, strlit1 + size1, strlit1, strlit1 + 7);\n-  VERIFY ( i1 == 1 );\n-  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + size1);\n-  VERIFY ( i1 == -1 );\n-  i1 = coll_c.compare(strlit1, strlit1 + 7, strlit1, strlit1 + 7);\n-  VERIFY ( i1 == 0 );\n-\n-  int i2;\n-  int size2 = char_traits<wchar_t>::length(strlit2) - 1;\n-  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + 13);\n-  VERIFY ( i2 == 1 );\n-  i2 = coll_c.compare(strlit2, strlit2 + 13, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == -1 );\n-  i2 = coll_c.compare(strlit2, strlit2 + size2, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == 0 );\n-\n-  long l1;\n-  long l2;\n-  l1 = coll_c.hash(strlit1, strlit1 + size1);\n-  l2 = coll_c.hash(strlit1, strlit1 + size1 - 1);\n-  VERIFY ( l1 != l2 );\n-  l1 = coll_c.hash(strlit1, strlit1 + size1);\n-  l2 = coll_c.hash(strlit2, strlit2 + size2);\n-  VERIFY ( l1 != l2 );\n-\n-  wstring str1 = coll_c.transform(strlit1, strlit1 + size1);\n-  wstring str2 = coll_c.transform(strlit2, strlit2 + size2);\n-  i1 = str1.compare(str2);\n-  i2 = coll_c.compare(strlit1, strlit1 + size1, strlit2, strlit2 + size2);\n-  VERIFY ( i2 == 1 );\n-  VERIFY ( i1 * i2 > 0 );\n-\n-  // Check German \"de_DE\" locale.\n-  const wchar_t* strlit3 = L\"\ufffduglein Augment\"; // \"C\" == \"Augment \ufffduglein\"\n-  const wchar_t* strlit4 = L\"Base ba\ufffd Ba\ufffd Bast\"; // \"C\" == \"Base ba\ufffd Ba\ufffd Bast\"\n-\n-  int size3 = char_traits<wchar_t>::length(strlit3) - 1;\n-  i1 = coll_de.compare(strlit3, strlit3 + size3, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + size1);\n-  VERIFY ( i1 == -1 );\n-  i1 = coll_de.compare(strlit3, strlit3 + 7, strlit3, strlit3 + 7);\n-  VERIFY ( i1 == 0 );\n-\n-  i1 = coll_de.compare(strlit3, strlit3 + 6, strlit3 + 8, strlit3 + 14);\n-  VERIFY ( i1 == -1 );\n-\n-  int size4 = char_traits<wchar_t>::length(strlit4) - 1;\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + 13);\n-  VERIFY ( i2 == 1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + 13, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  i2 = coll_de.compare(strlit4, strlit4 + size4, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == 0 );\n-\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit3, strlit3 + size3 - 1);\n-  VERIFY ( l1 != l2 );\n-  l1 = coll_de.hash(strlit3, strlit3 + size3);\n-  l2 = coll_de.hash(strlit4, strlit4 + size4);\n-  VERIFY ( l1 != l2 );\n-\n-  wstring str3 = coll_de.transform(strlit3, strlit3 + size3);\n-  wstring str4 = coll_de.transform(strlit4, strlit4 + size4);\n-  i1 = str3.compare(str4);\n-  i2 = coll_de.compare(strlit3, strlit3 + size3, strlit4, strlit4 + size4);\n-  VERIFY ( i2 == -1 );\n-  VERIFY ( i1 * i2 > 0 );\n-}\n-\n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-void test03()\n-{\n-  bool test = true;\n-  std::wstring str1(L\"fffff\");\n-  std::wstring str2(L\"ffffffffffff\");\n-\n-  const std::locale cloc = std::locale::classic();\n-  const std::collate<wchar_t> &col = std::use_facet<std::collate<wchar_t> >(cloc);\n-\n-  long l1 = col.hash(str1.c_str(), str1.c_str() + str1.size());\n-  long l2 = col.hash(str2.c_str(), str2.c_str() + str2.size());\n-  VERIFY( l1 != l2 );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test03();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n-int main()\n-{\n-#if _GLIBCPP_USE_WCHAR_T\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-#endif\n-  return 0;\n-}"}, {"sha": "541f2b9c23736022cbeaf2d52d68294040345cad", "filename": "libstdc++-v3/testsuite/22_locale/ctype/1.cc", "status": "renamed", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 1999-08-24 bkoz\n \n-// Copyright (C) 2000, 1999 Free Software Foundation\n+// Copyright (C) 1999, 2000, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.1 The ctype category\n \n-// { dg-do compile }\n-\n // 1: Test that the locale headers are picking up the correct declaration\n // of the internal type `ctype_base::mask'.\n int mask ();\n@@ -155,21 +154,8 @@ test01()\n   m01 ^= m02;\n }\n \n-class gnu_obj \n-{ };\n-\n-class gnu_ctype2: public std::ctype<gnu_obj> \n-{ };\n-\n-// libstdc++/3017\n-void test02()\n-{\n-  gnu_ctype2 obj;\n-}\n-\n int main() \n { \n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype.cc"}, {"sha": "924efddedba686771ed2f2961ae205d4a449bc84", "filename": "libstdc++-v3/testsuite/22_locale/ctype/2.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,43 @@\n+// { dg-do compile }\n+// 1999-08-24 bkoz\n+\n+// Copyright (C) 1999, 2000, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.1 The ctype category\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+class gnu_obj \n+{ };\n+\n+class gnu_ctype2: public std::ctype<gnu_obj> \n+{ };\n+\n+// libstdc++/3017\n+void test02()\n+{\n+  gnu_ctype2 obj;\n+}\n+\n+int main() \n+{ \n+  test02();\n+  return 0;\n+}"}, {"sha": "65fc62667d5ac5c7b1bc2e4484ecab10b199c510", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/1.cc", "status": "renamed", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-02-16 bkoz\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -37,11 +37,31 @@ class comma_ctype: public std::ctype<char>\n {\n public:\n   comma_ctype(): std::ctype<char>() { }\n-  static void get_table()\n-  { classic_table(); }\n-};\n+  comma_ctype(const std::ctype_base::mask* m): std::ctype<char>(m) { }\n+\n+  const mask* \n+  get_classic_table()\n+  { return std::ctype<char>::classic_table(); }\n+\n+  const mask* \n+  get_table()\n+  { return this->table(); }\n+}; \n+\n+void test01()\n+{\n+  using namespace std;\n+  \n+  comma_ctype obj;\n+  const ctype_base::mask* tmp = obj.get_classic_table();\n+\n+  comma_ctype obj2(tmp);\n+  const ctype_base::mask* ctable = obj2.get_table();\n+  VERIFY ( tmp = ctable );\n+}\n \n int main() \n {\n+  test01();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_members_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/cons/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fcons%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "8e80fd2fb96329656ae792f93ac7d7be8541a150", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/1.cc", "status": "renamed", "additions": 1, "deletions": 126, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,12 +28,8 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n-#include <vector>\n #include <testsuite_hooks.h>\n \n-// XXX This test (test02) is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n typedef char char_type;\n class gnu_ctype: public std::ctype<char_type> { };\n \n@@ -147,129 +143,8 @@ void test01()\n   VERIFY( gctype.is(m02[8], cc0[8]) );\n }\n \n-// libstdc++/4456, libstdc++/4457, libstdc++/4458\n-void test02()\n-{\n-  using namespace std;\n-  typedef ctype_base::mask \tmask;\n-  typedef vector<mask> \t\tvector_type;\n-\n-  bool test = true;\n-\n-  //  const int max = numeric_limits<char>::max();\n-  const int max = 255;\n-  const int ctype_mask_max = 10;\n-  vector_type v_c(max);\n-  vector_type v_de(max);\n-\n-  // \"C\"\n-  locale loc_c = locale::classic();\n-  const ctype<char>& ctype_c = use_facet<ctype<char> >(loc_c); \n-  for (int i = 0; i < max; ++i)\n-    {\n-      char_type c = static_cast<char>(i);\n-      mask mask_test = static_cast<mask>(0);\n-      mask mask_is = static_cast<mask>(0);\n-      for (int j = 0; j <= ctype_mask_max; ++j)\n-\t{\n-\t  mask_test = static_cast<mask>(1 << j);\n-\t  if (ctype_c.is(mask_test, c))\n-\t    mask_is |= mask_test;\n-\t}\n-      v_c[i] = mask_is;\n-    }   \n-\n-  // \"de_DE\"\n-  locale loc_de(\"de_DE\");\n-  const ctype<char>& ctype_de = use_facet<ctype<char> >(loc_de); \n-  for (int i = 0; i < max; ++i)\n-    {\n-      char_type c = static_cast<char>(i);\n-      mask mask_test = static_cast<mask>(0);\n-      mask mask_is = static_cast<mask>(0);\n-      for (int j = 0; j <= ctype_mask_max; ++j)\n-\t{\n-\t  mask_test = static_cast<mask>(1 << j);\n-\t  if (ctype_de.is(mask_test, c))\n-\t    mask_is |= mask_test;\n-\t}\n-      v_de[i] = mask_is;\n-    }   \n-\n-#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n-    for (int i = 0; i < max; ++i)\n-    {\n-      char_type mark = v_c[i] == v_de[i] ? ' ' : '-';\n-      cout << i << ' ' << mark << ' ' << static_cast<char>(i) << '\\t' ;\n-      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n-      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n-    }\n-    cout << (v_c == v_de) << endl;\n-#endif\n-\n-  VERIFY( v_c != v_de );\n-}\n-\n-// Per Liboriussen <liborius@stofanet.dk>\n-void test03()\n-{\n-  bool test = true;\n-  std::ctype_base::mask maskdata[256];\n-  for (int i = 0; i < 256; ++i)\n-    maskdata[i] = std::ctype_base::alpha;\n-  std::ctype<char>* f = new std::ctype<char>(maskdata);\n-  std::locale global;\n-  std::locale loc(global, f);\n-  for (int i = 0; i < 256; ++i) \n-    {\n-      char_type ch = i;\n-      VERIFY( std::isalpha(ch, loc) );\n-    }\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test05()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main() \n {\n   test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_is_char.cc"}, {"sha": "6e54ab8912706a73700e1362ab378641a446b0ce", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/2.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,104 @@\n+// { dg-do run { xfail *-*-![linux]* } }\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+typedef char char_type;\n+\n+// libstdc++/4456, libstdc++/4457, libstdc++/4458\n+void test02()\n+{\n+  using namespace std;\n+  typedef ctype_base::mask \tmask;\n+  typedef vector<mask> \t\tvector_type;\n+\n+  bool test = true;\n+\n+  //  const int max = numeric_limits<char>::max();\n+  const int max = 255;\n+  const int ctype_mask_max = 10;\n+  vector_type v_c(max);\n+  vector_type v_de(max);\n+\n+  // \"C\"\n+  locale loc_c = locale::classic();\n+  const ctype<char>& ctype_c = use_facet<ctype<char> >(loc_c); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_c.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_c[i] = mask_is;\n+    }   \n+\n+  // \"de_DE\"\n+  locale loc_de(\"de_DE\");\n+  const ctype<char>& ctype_de = use_facet<ctype<char> >(loc_de); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<char>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_de.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_de[i] = mask_is;\n+    }   \n+\n+#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n+    for (int i = 0; i < max; ++i)\n+    {\n+      char_type mark = v_c[i] == v_de[i] ? ' ' : '-';\n+      cout << i << ' ' << mark << ' ' << static_cast<char>(i) << '\\t' ;\n+      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n+      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n+    }\n+    cout << (v_c == v_de) << endl;\n+#endif\n+\n+  VERIFY( v_c != v_de );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "ff115d2cdbe3de80fb9188f10c3353c8bd303fd7", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/1.cc", "status": "renamed", "additions": 1, "deletions": 50, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -28,13 +28,8 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n-#include <vector>\n #include <testsuite_hooks.h>\n \n-// XXX This test (test02) is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n typedef wchar_t char_type;\n class gnu_ctype: public std::ctype<char_type> { };\n \n@@ -117,12 +112,6 @@ void test01()\n   VERIFY( m01[1] == m00 );\n   VERIFY( m01[2] == m00 );\n \n-  cc0 = strlit00;\n-  m01[0] = m00;\n-  m01[1] = m00;\n-  m01[2] = m00;\n-  cc2 = gctype.is(cc0, cc0 + 3, m01);\n-  VERIFY( cc2 == strlit00 + 3);\n #if 0\n   VERIFY( m01[0] != m00 );\n   VERIFY( m01[1] != m00 );\n@@ -152,46 +141,8 @@ void test01()\n #endif\n }\n \n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test05()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n int main() \n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n-  test04();\n-  test05();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_is_wchar_t.cc"}, {"sha": "b1b565f3780146af63eaeefb8d3558e5fe8219d1", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/2.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,104 @@\n+// { dg-do run { xfail *-*-![linux]* } }\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+typedef wchar_t char_type;\n+\n+// libstdc++/4456, libstdc++/4457, libstdc++/4458\n+void test02()\n+{\n+  using namespace std;\n+  typedef ctype_base::mask \tmask;\n+  typedef vector<mask> \t\tvector_type;\n+\n+  bool test = true;\n+\n+  //  const int max = numeric_limits<char>::max();\n+  const int max = 255;\n+  const int ctype_mask_max = 10;\n+  vector_type v_c(max);\n+  vector_type v_de(max);\n+\n+  // \"C\"\n+  locale loc_c = locale::classic();\n+  const ctype<wchar_t>& ctype_c = use_facet<ctype<wchar_t> >(loc_c); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<wchar_t>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_c.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_c[i] = mask_is;\n+    }   \n+\n+  // \"de_DE\"\n+  locale loc_de(\"de_DE\");\n+  const ctype<wchar_t>& ctype_de = use_facet<ctype<wchar_t> >(loc_de); \n+  for (int i = 0; i < max; ++i)\n+    {\n+      char_type c = static_cast<wchar_t>(i);\n+      mask mask_test = static_cast<mask>(0);\n+      mask mask_is = static_cast<mask>(0);\n+      for (int j = 0; j <= ctype_mask_max; ++j)\n+\t{\n+\t  mask_test = static_cast<mask>(1 << j);\n+\t  if (ctype_de.is(mask_test, c))\n+\t    mask_is |= mask_test;\n+\t}\n+      v_de[i] = mask_is;\n+    }   \n+\n+#if QUANNUM_VERBOSE_LYRICALLY_ADEPT_BAY_AREA_MCS_MODE\n+    for (int i = 0; i < max; ++i)\n+    {\n+      char_type mark = v_c[i] == v_de[i] ? ' ' : '-';\n+      cout << i << ' ' << mark << ' ' << static_cast<wchar_t>(i) << '\\t' ;\n+      cout << \"v_c: \" << setw(4) << v_c[i] << '\\t';\n+      cout << \"v_de: \" << setw(4) << v_de[i] << endl;\n+    }\n+    cout << (v_c == v_de) << endl;\n+#endif\n+\n+  VERIFY( v_c != v_de );\n+}\n+\n+int main() \n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/ctype/is/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fis%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "b349a38aedd927f244b9f2eabd11f3e91d79ae36", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/1.cc", "status": "renamed", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n-// 2000-09-01 Benjamin Kosnik <bkoz@redhat.com>\n+// 2002-05-24 bkoz\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,20 +30,40 @@\n // 22.2.1.3.2 ctype<char> members\n \n #include <locale>\n+#include <vector>\n #include <testsuite_hooks.h>\n \n-#if _GLIBCPP_USE_WCHAR_T\n+// libstdc++/6701\n void test01()\n {\n-  // Nothing, right now.  \n+  using namespace std;\n+  typedef char \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(\"wibble\");\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+  \n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n }\n-#endif /* !defined(_GLIBCPP_USE_WCHAR_T) */\n \n int main() \n {\n-#if _GLIBCPP_USE_WCHAR_T\n   test01();\n-#endif \n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_members_wchar_t.cc"}, {"sha": "31805ae1ecc42ae1f9cd7f96823adb2e15ce7cf1", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/2.cc", "status": "renamed", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2002-05-24 bkoz\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,35 +33,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-// libstdc++/6701\n-void test01()\n-{\n-  using namespace std;\n-  typedef char \twide_type;\n-\n-  bool test = true;\n-  const char dfault = '?';\n-  const locale loc_c = locale::classic();\n-  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n-\n-  basic_string<wide_type> \twide(\"wibble\");\n-  basic_string<char> \t\tnarrow(\"wibble\");\n-  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n-  \n-  // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n-    {\n-      char c = ctype_c.narrow(wide[i], dfault);\n-      VERIFY( c == narrow[i] );\n-    }\n-\n-  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n-  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n-  VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n-    VERIFY( narrow_chars[i] == narrow[i] );\n-}\n-\n void test02()\n {\n   using namespace std;\n@@ -97,7 +68,6 @@ void test02()\n \n int main() \n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_narrow_char.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "820fe6c99bc6c7b0ae55de4aef89deefea2d6eb0", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,69 @@\n+// 2002-05-24 bkoz\n+\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 22.2.1.3.2 ctype<char> members\n+\n+#include <locale>\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/6701\n+void test01()\n+{\n+  using namespace std;\n+  typedef wchar_t \twide_type;\n+\n+  bool test = true;\n+  const char dfault = '?';\n+  const locale loc_c = locale::classic();\n+  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n+\n+  basic_string<wide_type> \twide(L\"wibble\");\n+  basic_string<char> \t\tnarrow(\"wibble\");\n+  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n+  \n+  // narrow(charT c, char dfault) const\n+  for (int i = 0; i < wide.length(); ++i)\n+    {\n+      char c = ctype_c.narrow(wide[i], dfault);\n+      VERIFY( c == narrow[i] );\n+    }\n+\n+  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n+  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n+  VERIFY( narrow_chars[0] != dfault );\n+  for (int i = 0; i < wide.length(); ++i)\n+    VERIFY( narrow_chars[i] == narrow[i] );\n+}\n+\n+int main() \n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2d7750629b1754dee9a42c75dc04a0aba2f7f206", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/2.cc", "status": "renamed", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2002-05-24 bkoz\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,36 +33,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n-// libstdc++/6701\n-void test01()\n-{\n-  using namespace std;\n-  typedef wchar_t \twide_type;\n-\n-  bool test = true;\n-  const char dfault = '?';\n-  const locale loc_c = locale::classic();\n-  const ctype<wide_type>& ctype_c = use_facet<ctype<wide_type> >(loc_c); \n-\n-  basic_string<wide_type> \twide(L\"wibble\");\n-  basic_string<char> \t\tnarrow(\"wibble\");\n-  vector<char> \t\t\tnarrow_chars(wide.length() + 1);\n-  \n-  // narrow(charT c, char dfault) const\n-  for (int i = 0; i < wide.length(); ++i)\n-    {\n-      char c = ctype_c.narrow(wide[i], dfault);\n-      VERIFY( c == narrow[i] );\n-    }\n-\n-  // narrow(const charT* low, const charT* high, char dfault, char* dest) const\n-  ctype_c.narrow(&wide[0], &wide[wide.length()], dfault, &narrow_chars[0]);  \n-  VERIFY( narrow_chars[0] != dfault );\n-  for (int i = 0; i < wide.length(); ++i)\n-    VERIFY( narrow_chars[i] == narrow[i] );\n-}\n-\n void test02()\n {\n   using namespace std;\n@@ -95,13 +65,9 @@ void test02()\n   for (int i = 0; i < wide.length(); ++i)\n     VERIFY( narrow_chars[i] == narrow[i] );\n }\n-#endif\n \n int main() \n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n   test02();\n-#endif\n- return 0;\n+  return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_narrow_wchar_t.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/ctype/narrow/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fnarrow%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "6e8d1d31e26be2ca4cf3d525c8936822529dfb4b", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/char/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "7af4fae26b2fad997407c1e7969877581f8af9d8", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/wchar_t/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_scan_wchar_t.cc"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/scan/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fscan%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "a337d8e5ed4328d8f76558cbb4a78aa05e9d585f", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/char/1.cc", "status": "renamed", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -98,43 +98,8 @@ void test01()\n   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n }\n \n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test05()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main() \n {\n   test01();\n-  test04();\n-  test05();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_to_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "9f042abc43820170118b277b8b536f8454602009", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/wchar_t/1.cc", "status": "renamed", "additions": 1, "deletions": 40, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -30,7 +30,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n typedef wchar_t char_type;\n class gnu_ctype: public std::ctype<char_type> { };\n \n@@ -99,46 +98,8 @@ void test01()\n   VERIFY( !std::char_traits<char_type>::compare(c_array, strlit02, len - 1) );\n }\n \n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test05()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n int main() \n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n-  test04();\n-  test05();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_to_wchar_t.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/to/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fto%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "ea206059bfb25f5fc5f98ccec978583656689de9", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/char/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_widen_char.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "e0b33155bb9108b43a5fbbde81b6c8fc523f7783", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/1.cc", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2002-05-24 bkoz\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -33,7 +33,6 @@\n #include <vector>\n #include <testsuite_hooks.h>\n \n-#ifdef _GLIBCPP_USE_WCHAR_T\n void test01()\n {\n   using namespace std;\n@@ -60,12 +59,9 @@ void test01()\n   for (int i = 0; i < narrow.length(); ++i)\n     VERIFY( wide_chars[i] == wide[i] );\n }\n-#endif\n \n int main() \n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n   test01();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctype_widen_wchar_t.cc"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/ctype/widen/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fctype%2Fwiden%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "f93265bd7d1a7f29d4e5f3302bed092bb17b94b7", "filename": "libstdc++-v3/testsuite/22_locale/facet/1.cc", "status": "renamed", "additions": 1, "deletions": 62, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-08-31 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -234,69 +234,8 @@ void test01()\n     }\n }\n \n-// Static counter for use in checking ctors/dtors.\n-static std::size_t counter;\n-\n-class surf : public std::locale::facet\n-{\n-public:\n-  static std::locale::id \t       \tid;\n-  surf(size_t refs = 0): std::locale::facet(refs) { ++counter; }\n-  ~surf() { --counter; }\n-};\n-\n-std::locale::id surf::id;\n-\n-typedef surf facet_type;\n-\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // 1: Destroyed when out of scope.\n-  VERIFY( counter == 0 );\n-  {\n-    locale loc01(locale::classic(), new facet_type);\n-    VERIFY( counter == 1 );\n-  }\n-  VERIFY( counter == 0 );\n-\n-  // 2: Not destroyed when out of scope, deliberately leaked.\n-  VERIFY( counter == 0 );\n-  {\n-    // Default refs argument is zero.\n-    locale loc02(locale::classic(), new facet_type(1));\n-    VERIFY( counter == 1 );\n-  }\n-  VERIFY( counter == 1 );\n-\n-  // 3: Pathological.\n-  counter = 0;\n-  {\n-    // Test bounds.\n-    facet_type* f = new facet_type(numeric_limits<size_t>::max());\n-    VERIFY( counter == 1 );\n-    // Add a reference.\n-    locale loc01(locale::classic(), f);\n-    {\n-      // Add another reference...\n-      locale loc02(locale::classic(), f);\n-    }\n-    VERIFY( counter == 1 );\n-  }\n-\n-  // 4: Named locale should destroy facets when it goes out of scope.\n-  // Not quite sure how to test for this w/o valgrind at the moment.\n-  {\n-    locale loc03(\"es_MX\");\n-  }\n-}\n-\n int main ()\n {\n   test01();\n-\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/facet.cc"}, {"sha": "abda43ec3515d269e26ea88a1e9b686434c20bf7", "filename": "libstdc++-v3/testsuite/22_locale/facet/2.cc", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ffacet%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,94 @@\n+// 2000-08-31 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.1.2 - class locale::facet [lib.locale.facet]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <string>\n+#include <iterator>\n+#include <limits>\n+#include <testsuite_hooks.h>\n+\n+// Static counter for use in checking ctors/dtors.\n+static std::size_t counter;\n+\n+class surf : public std::locale::facet\n+{\n+public:\n+  static std::locale::id \t       \tid;\n+  surf(size_t refs = 0): std::locale::facet(refs) { ++counter; }\n+  ~surf() { --counter; }\n+};\n+\n+std::locale::id surf::id;\n+\n+typedef surf facet_type;\n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // 1: Destroyed when out of scope.\n+  VERIFY( counter == 0 );\n+  {\n+    locale loc01(locale::classic(), new facet_type);\n+    VERIFY( counter == 1 );\n+  }\n+  VERIFY( counter == 0 );\n+\n+  // 2: Not destroyed when out of scope, deliberately leaked.\n+  VERIFY( counter == 0 );\n+  {\n+    // Default refs argument is zero.\n+    locale loc02(locale::classic(), new facet_type(1));\n+    VERIFY( counter == 1 );\n+  }\n+  VERIFY( counter == 1 );\n+\n+  // 3: Pathological.\n+  counter = 0;\n+  {\n+    // Test bounds.\n+    facet_type* f = new facet_type(numeric_limits<size_t>::max());\n+    VERIFY( counter == 1 );\n+    // Add a reference.\n+    locale loc01(locale::classic(), f);\n+    {\n+      // Add another reference...\n+      locale loc02(locale::classic(), f);\n+    }\n+    VERIFY( counter == 1 );\n+  }\n+\n+  // 4: Named locale should destroy facets when it goes out of scope.\n+  // Not quite sure how to test for this w/o valgrind at the moment.\n+  {\n+    locale loc03(\"es_MX\");\n+  }\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "49886aa18bf0e89edc8c19664d22e66d993af383", "filename": "libstdc++-v3/testsuite/22_locale/global_templates/1.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fglobal_templates%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/global_templates.cc"}, {"sha": "f95b06e6e4f94baad332d448a2be7d00173d52ee", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/1.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+void test00()\n+{\n+  // Should be able to do this as the first thing that happens in a\n+  // file and have it not crash.\n+  std::locale loc(\"C\");\n+}\n+\n+int main()\n+{\n+  test00();\n+  return 0;\n+}"}, {"sha": "1f13c23992ec4e6a60120bbcf97847ba5e8ac90c", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/2.cc", "status": "renamed", "additions": 1, "deletions": 211, "changes": 212, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,13 +25,6 @@\n #include <stdexcept>\n #include <testsuite_hooks.h>\n \n-void test00()\n-{\n-  // Should be able to do this as the first thing that happens in a\n-  // file and have it not crash.\n-  std::locale loc(\"C\");\n-}\n-\n #if _GLIBCPP_USE___ENC_TRAITS\n typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n typedef std::codecvt_byname<char, char, std::mbstate_t>       c_codecvt_byname;\n@@ -296,213 +289,10 @@ void test01()\n }\n #endif // _GLIBCPP_USE___ENC_TRAITS\n \n-// libstdc++/7222\n-void test02()\n-{\n-  bool test = true;\n-  std::locale loc_c1(\"C\");\n-  std::locale loc_c2 (\"C\");\n-  \n-  std::locale loc_1(\"\");\n-  std::locale loc_2(\"\");\n-\n-  VERIFY( loc_c1 == loc_c2 );\n-  VERIFY( loc_1 == loc_2 );\n-}\n-\n-// libstdc++/7811\n-void test03()\n-{\n-  bool test = true;\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  const char* LC_ALL_orig = getenv(\"LC_ALL\");\n-  if (!setenv(\"LC_ALL\", \"it_IT\", 1))\n-    {\n-      std::locale loc(\"\"); \n-      VERIFY( loc.name() == \"it_IT\" );\n-      setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n-    }\n-#endif\n-}\n-\n-\n-// More tests for locale(\"\") == POSIX locale::name. \n-void test04()\n-{\n-  bool test = true;\n-  using namespace std;\n-\n-#ifdef _GLIBCPP_HAVE_SETENV\n-\n-  const char* LANG_orig = getenv(\"LANG\") ? strdup(getenv(\"LANG\")) : \"\";\n-  const char* LC_ALL_orig = getenv(\"LC_ALL\") ? strdup(getenv(\"LC_ALL\")) : \"\";\n-  const char* LC_CTYPE_orig = \n-    getenv(\"LC_CTYPE\") ? strdup(getenv(\"LC_CTYPE\")) : \"\";\n-  const char* LC_NUMERIC_orig = \n-    getenv(\"LC_NUMERIC\") ? strdup(getenv(\"LC_NUMERIC\")) : \"\";\n-  const char* LC_TIME_orig = \n-    getenv(\"LC_TIME\") ? strdup(getenv(\"LC_TIME\")) : \"\";\n-  const char* LC_COLLATE_orig =\n-    getenv(\"LC_COLLATE\") ? strdup(getenv(\"LC_COLLATE\")) : \"\";\n-  const char* LC_MONETARY_orig = \n-    getenv(\"LC_MONETARY\") ? strdup(getenv(\"LC_MONETARY\")) : \"\";\n-  const char* LC_MESSAGES_orig = \n-    getenv(\"LC_MESSAGES\") ? strdup(getenv(\"LC_MESSAGES\")) : \"\";\n-#if _GLIBCPP_NUM_CATEGORIES\n-  const char* LC_PAPER_orig = \n-    getenv(\"LC_PAPER\") ? strdup(getenv(\"LC_PAPER\")) : \"\";\n-  const char* LC_NAME_orig = \n-    getenv(\"LC_NAME\") ? strdup(getenv(\"LC_NAME\")) : \"\";\n-  const char* LC_ADDRESS_orig = \n-    getenv(\"LC_ADDRESS\") ? strdup(getenv(\"LC_ADDRESS\")) : \"\";\n-  const char* LC_TELEPHONE_orig = \n-    getenv(\"LC_TELEPHONE\") ? strdup(getenv(\"LC_TELEPHONE\")) : \"\";\n-  const char* LC_MEASUREMENT_orig = \n-    getenv(\"LC_MEASUREMENT\") ? strdup(getenv(\"LC_MEASUREMENT\")) : \"\";\n-  const char* LC_IDENTIFICATION_orig =\n-    getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n-#endif\n-\n-  // Check that a \"POSIX\" LC_ALL is equivalent to \"C\".\n-  if (!setenv(\"LC_ALL\", \"POSIX\", 1))\n-    {\n-      locale loc(\"\");\n-      VERIFY( loc.name() == \"C\" );\n-    }\n-  setenv(\"LC_ALL\", \"\", 1);\n-\n-  // Check that a \"en_PH\" LC_ALL is equivalent to \"en_PH\".\n-  if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n-    {\n-      locale loc(\"\");\n-      VERIFY( loc.name() == \"en_PH\" );\n-    }\n-  setenv(\"LC_ALL\", \"\", 1);\n-\n-  // Explicit check that LC_ALL sets regardless of LC_* and LANG.\n-  if (!setenv(\"LANG\", \"es_MX\", 1) && !setenv(\"LC_COLLATE\", \"de_DE\", 1))\n-    {\n-      if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n-\t{\n-\t  locale loc(\"\");\n-\t  VERIFY( loc.name() == \"en_PH\" );\n-\t}\n-      setenv(\"LC_ALL\", \"\", 1);\n-      setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n-      setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n-    }\n-\n-  // NB: LANG checks all LC_* macro settings. As such, all LC_* macros\n-  // must be cleared for these tests, and then restored.\n-  setenv(\"LC_ALL\", \"\", 1);\n-  setenv(\"LC_CTYPE\", \"\", 1);\n-  setenv(\"LC_NUMERIC\", \"\", 1);\n-  setenv(\"LC_TIME\", \"\", 1);\n-  setenv(\"LC_COLLATE\", \"\", 1);\n-  setenv(\"LC_MONETARY\", \"\", 1);\n-  setenv(\"LC_MESSAGES\", \"\", 1);\n-#if _GLIBCPP_NUM_CATEGORIES\n-  setenv(\"LC_PAPER\", \"\", 1);\n-  setenv(\"LC_NAME\", \"\", 1);\n-  setenv(\"LC_ADDRESS\", \"\", 1);\n-  setenv(\"LC_TELEPHONE\", \"\", 1);\n-  setenv(\"LC_MEASUREMENT\", \"\", 1);\n-  setenv(\"LC_IDENTIFICATION\", \"\", 1);\n-#endif\n-\n-  // Check the default set by LANG.\n-  if (!setenv(\"LANG\", \"fr_FR\", 1))\n-    {\n-      locale loc(\"\");\n-      VERIFY( loc.name() == \"fr_FR\" );\n-    }\n-\n-  // Check that a \"POSIX\" LANG is equivalent to \"C\".\n-  if (!setenv(\"LANG\", \"POSIX\", 1))\n-    {\n-      locale loc(\"\"); \n-      VERIFY( loc.name() == \"C\" );\n-    }\n-\n-  // Setting a category in the \"C\" default.\n-  if (!setenv(\"LC_COLLATE\", \"de_DE\", 1))\n-    {\n-      locale loc(\"\");\n-\n-#if _GLIBCPP_NUM_CATEGORIES\n-      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_TIME=C;\"\n-              \"LC_COLLATE=de_DE;LC_MONETARY=C;LC_MESSAGES=C;LC_PAPER=C;\"\n-\t      \"LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=C;\"\n-\t      \"LC_IDENTIFICATION=C\" );\n-#else\n-      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_TIME=C;\"\n-\t      \"LC_COLLATE=de_DE;LC_MONETARY=C;LC_MESSAGES=C\" );\n-#endif\n-    }\n-\n-  // Changing the LANG default while LC_COLLATE is set.\n-  if (!setenv(\"LANG\", \"fr_FR\", 1))\n-    {\n-      locale loc(\"\");\n-#if _GLIBCPP_NUM_CATEGORIES\n-      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n-\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n-\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n-\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n-\t      \"LC_IDENTIFICATION=fr_FR\" );\n-#else\n-      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n-\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n-\t      \"LC_MESSAGES=fr_FR\" );\n-#endif\n-    }\n-  \n-  // Changing another (C only) category.\n-#if _GLIBCPP_NUM_CATEGORIES\n-  if (!setenv(\"LC_IDENTIFICATION\", \"it_IT\", 1))\n-    {\n-      locale loc(\"\");\n-      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n-\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n-\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n-\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n-\t      \"LC_IDENTIFICATION=it_IT\" );\n-    }\n-#endif\n-\n-  // Restore the environment.\n-  setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n-  setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n-  setenv(\"LC_CTYPE\", LC_CTYPE_orig ? LC_CTYPE_orig : \"\", 1);\n-  setenv(\"LC_NUMERIC\", LC_NUMERIC_orig ? LC_NUMERIC_orig : \"\", 1);\n-  setenv(\"LC_TIME\", LC_TIME_orig ? LC_TIME_orig : \"\", 1);\n-  setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n-  setenv(\"LC_MONETARY\", LC_MONETARY_orig ? LC_MONETARY_orig : \"\", 1);\n-  setenv(\"LC_MESSAGES\", LC_MESSAGES_orig ? LC_MESSAGES_orig : \"\", 1);\n-#if _GLIBCPP_NUM_CATEGORIES\n-  setenv(\"LC_PAPER\", LC_PAPER_orig ? LC_PAPER_orig : \"\", 1);\n-  setenv(\"LC_NAME\", LC_NAME_orig ? LC_NAME_orig : \"\", 1);\n-  setenv(\"LC_ADDRESS\", LC_ADDRESS_orig ? LC_ADDRESS_orig : \"\", 1);\n-  setenv(\"LC_TELEPHONE\", LC_TELEPHONE_orig ? LC_TELEPHONE_orig : \"\", 1);\n-  setenv(\"LC_MEASUREMENT\", LC_MEASUREMENT_orig ? LC_MEASUREMENT_orig : \"\", 1);\n-  setenv(\"LC_IDENTIFICATION\", \n-         LC_IDENTIFICATION_orig ? LC_IDENTIFICATION_orig : \"\", 1);\n-#endif\n-\n-#endif\n-}\n-\n int main()\n {\n-  test00();\n-\n #if _GLIBCPP_USE___ENC_TRAITS\n   test01();\n #endif \n-\n-  test02();\n-  test03();\n-  test04();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/ctor_copy_dtor.cc"}, {"sha": "7cc91261c989684a5c2503f158fefd01aa276884", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/3.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7222\n+void test02()\n+{\n+  bool test = true;\n+  std::locale loc_c1(\"C\");\n+  std::locale loc_c2 (\"C\");\n+  \n+  std::locale loc_1(\"\");\n+  std::locale loc_2(\"\");\n+\n+  VERIFY( loc_c1 == loc_c2 );\n+  VERIFY( loc_1 == loc_2 );\n+}\n+ \n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "26d3aaf31d100ece776b301be8184f39af0d4d7c", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/4.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,47 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/7811\n+void test03()\n+{\n+  bool test = true;\n+#ifdef _GLIBCPP_HAVE_SETENV \n+  const char* LC_ALL_orig = getenv(\"LC_ALL\");\n+  if (!setenv(\"LC_ALL\", \"it_IT\", 1))\n+    {\n+      std::locale loc(\"\"); \n+      VERIFY( loc.name() == \"it_IT\" );\n+      setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n+    }\n+#endif\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "b9e1391977ddf148f34ac08318a573f5a1dc9a3b", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/5.cc", "status": "added", "additions": 198, "deletions": 0, "changes": 198, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,198 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.2 locale constructors and destructors [lib.locale.cons]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <stdexcept>\n+#include <testsuite_hooks.h>\n+\n+// More tests for locale(\"\") == POSIX locale::name. \n+void test04()\n+{\n+  bool test = true;\n+  using namespace std;\n+\n+#ifdef _GLIBCPP_HAVE_SETENV\n+\n+  const char* LANG_orig = getenv(\"LANG\") ? strdup(getenv(\"LANG\")) : \"\";\n+  const char* LC_ALL_orig = getenv(\"LC_ALL\") ? strdup(getenv(\"LC_ALL\")) : \"\";\n+  const char* LC_CTYPE_orig = \n+    getenv(\"LC_CTYPE\") ? strdup(getenv(\"LC_CTYPE\")) : \"\";\n+  const char* LC_NUMERIC_orig = \n+    getenv(\"LC_NUMERIC\") ? strdup(getenv(\"LC_NUMERIC\")) : \"\";\n+  const char* LC_TIME_orig = \n+    getenv(\"LC_TIME\") ? strdup(getenv(\"LC_TIME\")) : \"\";\n+  const char* LC_COLLATE_orig =\n+    getenv(\"LC_COLLATE\") ? strdup(getenv(\"LC_COLLATE\")) : \"\";\n+  const char* LC_MONETARY_orig = \n+    getenv(\"LC_MONETARY\") ? strdup(getenv(\"LC_MONETARY\")) : \"\";\n+  const char* LC_MESSAGES_orig = \n+    getenv(\"LC_MESSAGES\") ? strdup(getenv(\"LC_MESSAGES\")) : \"\";\n+#if _GLIBCPP_NUM_CATEGORIES\n+  const char* LC_PAPER_orig = \n+    getenv(\"LC_PAPER\") ? strdup(getenv(\"LC_PAPER\")) : \"\";\n+  const char* LC_NAME_orig = \n+    getenv(\"LC_NAME\") ? strdup(getenv(\"LC_NAME\")) : \"\";\n+  const char* LC_ADDRESS_orig = \n+    getenv(\"LC_ADDRESS\") ? strdup(getenv(\"LC_ADDRESS\")) : \"\";\n+  const char* LC_TELEPHONE_orig = \n+    getenv(\"LC_TELEPHONE\") ? strdup(getenv(\"LC_TELEPHONE\")) : \"\";\n+  const char* LC_MEASUREMENT_orig = \n+    getenv(\"LC_MEASUREMENT\") ? strdup(getenv(\"LC_MEASUREMENT\")) : \"\";\n+  const char* LC_IDENTIFICATION_orig =\n+    getenv(\"LC_IDENTIFICATION\") ? strdup(getenv(\"LC_IDENTIFICATION\")) : \"\";\n+#endif\n+\n+  // Check that a \"POSIX\" LC_ALL is equivalent to \"C\".\n+  if (!setenv(\"LC_ALL\", \"POSIX\", 1))\n+    {\n+      locale loc(\"\");\n+      VERIFY( loc.name() == \"C\" );\n+    }\n+  setenv(\"LC_ALL\", \"\", 1);\n+\n+  // Check that a \"en_PH\" LC_ALL is equivalent to \"en_PH\".\n+  if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n+    {\n+      locale loc(\"\");\n+      VERIFY( loc.name() == \"en_PH\" );\n+    }\n+  setenv(\"LC_ALL\", \"\", 1);\n+\n+  // Explicit check that LC_ALL sets regardless of LC_* and LANG.\n+  if (!setenv(\"LANG\", \"es_MX\", 1) && !setenv(\"LC_COLLATE\", \"de_DE\", 1))\n+    {\n+      if (!setenv(\"LC_ALL\", \"en_PH\", 1))\n+\t{\n+\t  locale loc(\"\");\n+\t  VERIFY( loc.name() == \"en_PH\" );\n+\t}\n+      setenv(\"LC_ALL\", \"\", 1);\n+      setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n+      setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n+    }\n+\n+  // NB: LANG checks all LC_* macro settings. As such, all LC_* macros\n+  // must be cleared for these tests, and then restored.\n+  setenv(\"LC_ALL\", \"\", 1);\n+  setenv(\"LC_CTYPE\", \"\", 1);\n+  setenv(\"LC_NUMERIC\", \"\", 1);\n+  setenv(\"LC_TIME\", \"\", 1);\n+  setenv(\"LC_COLLATE\", \"\", 1);\n+  setenv(\"LC_MONETARY\", \"\", 1);\n+  setenv(\"LC_MESSAGES\", \"\", 1);\n+#if _GLIBCPP_NUM_CATEGORIES\n+  setenv(\"LC_PAPER\", \"\", 1);\n+  setenv(\"LC_NAME\", \"\", 1);\n+  setenv(\"LC_ADDRESS\", \"\", 1);\n+  setenv(\"LC_TELEPHONE\", \"\", 1);\n+  setenv(\"LC_MEASUREMENT\", \"\", 1);\n+  setenv(\"LC_IDENTIFICATION\", \"\", 1);\n+#endif\n+\n+  // Check the default set by LANG.\n+  if (!setenv(\"LANG\", \"fr_FR\", 1))\n+    {\n+      locale loc(\"\");\n+      VERIFY( loc.name() == \"fr_FR\" );\n+    }\n+\n+  // Check that a \"POSIX\" LANG is equivalent to \"C\".\n+  if (!setenv(\"LANG\", \"POSIX\", 1))\n+    {\n+      locale loc(\"\"); \n+      VERIFY( loc.name() == \"C\" );\n+    }\n+\n+  // Setting a category in the \"C\" default.\n+  if (!setenv(\"LC_COLLATE\", \"de_DE\", 1))\n+    {\n+      locale loc(\"\");\n+\n+#if _GLIBCPP_NUM_CATEGORIES\n+      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_TIME=C;\"\n+              \"LC_COLLATE=de_DE;LC_MONETARY=C;LC_MESSAGES=C;LC_PAPER=C;\"\n+\t      \"LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=C;\"\n+\t      \"LC_IDENTIFICATION=C\" );\n+#else\n+      VERIFY( loc.name() == \"LC_CTYPE=C;LC_NUMERIC=C;LC_TIME=C;\"\n+\t      \"LC_COLLATE=de_DE;LC_MONETARY=C;LC_MESSAGES=C\" );\n+#endif\n+    }\n+\n+  // Changing the LANG default while LC_COLLATE is set.\n+  if (!setenv(\"LANG\", \"fr_FR\", 1))\n+    {\n+      locale loc(\"\");\n+#if _GLIBCPP_NUM_CATEGORIES\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n+\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n+\t      \"LC_IDENTIFICATION=fr_FR\" );\n+#else\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR\" );\n+#endif\n+    }\n+  \n+  // Changing another (C only) category.\n+#if _GLIBCPP_NUM_CATEGORIES\n+  if (!setenv(\"LC_IDENTIFICATION\", \"it_IT\", 1))\n+    {\n+      locale loc(\"\");\n+      VERIFY( loc.name() == \"LC_CTYPE=fr_FR;LC_NUMERIC=fr_FR;\"\n+\t      \"LC_TIME=fr_FR;LC_COLLATE=de_DE;LC_MONETARY=fr_FR;\"\n+\t      \"LC_MESSAGES=fr_FR;LC_PAPER=fr_FR;LC_NAME=fr_FR;\"\n+\t      \"LC_ADDRESS=fr_FR;LC_TELEPHONE=fr_FR;LC_MEASUREMENT=fr_FR;\"\n+\t      \"LC_IDENTIFICATION=it_IT\" );\n+    }\n+#endif\n+\n+  // Restore the environment.\n+  setenv(\"LANG\", LANG_orig ? LANG_orig : \"\", 1);\n+  setenv(\"LC_ALL\", LC_ALL_orig ? LC_ALL_orig : \"\", 1);\n+  setenv(\"LC_CTYPE\", LC_CTYPE_orig ? LC_CTYPE_orig : \"\", 1);\n+  setenv(\"LC_NUMERIC\", LC_NUMERIC_orig ? LC_NUMERIC_orig : \"\", 1);\n+  setenv(\"LC_TIME\", LC_TIME_orig ? LC_TIME_orig : \"\", 1);\n+  setenv(\"LC_COLLATE\", LC_COLLATE_orig ? LC_COLLATE_orig : \"\", 1);\n+  setenv(\"LC_MONETARY\", LC_MONETARY_orig ? LC_MONETARY_orig : \"\", 1);\n+  setenv(\"LC_MESSAGES\", LC_MESSAGES_orig ? LC_MESSAGES_orig : \"\", 1);\n+#if _GLIBCPP_NUM_CATEGORIES\n+  setenv(\"LC_PAPER\", LC_PAPER_orig ? LC_PAPER_orig : \"\", 1);\n+  setenv(\"LC_NAME\", LC_NAME_orig ? LC_NAME_orig : \"\", 1);\n+  setenv(\"LC_ADDRESS\", LC_ADDRESS_orig ? LC_ADDRESS_orig : \"\", 1);\n+  setenv(\"LC_TELEPHONE\", LC_TELEPHONE_orig ? LC_TELEPHONE_orig : \"\", 1);\n+  setenv(\"LC_MEASUREMENT\", LC_MEASUREMENT_orig ? LC_MEASUREMENT_orig : \"\", 1);\n+  setenv(\"LC_IDENTIFICATION\", \n+         LC_IDENTIFICATION_orig ? LC_IDENTIFICATION_orig : \"\", 1);\n+#endif\n+\n+#endif\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "6b11ac1e9a109d0908d8ebd39bbea0f7b8f11190", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/6.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,63 @@\n+// 2001-01-19 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1 - Class locale [lib.locale]\n+\n+#include <locale>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+// creating unnamed locales 1 using new + combine\n+void\n+test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  const string name_c(\"C\");\n+  const string str_unnamed(\"*\");\n+  string str;\n+\n+  // construct a locale object with the specialized facet.\n+  locale\t\tloc_c = locale::classic();\n+  locale \t\tloc_1(locale::classic(), new numpunct<char>);\n+\n+  // check names\n+  VERIFY( loc_c.name() == name_c );\n+  VERIFY( loc_1.name() == str_unnamed );\n+\n+  // sanity check the constructed locale has the specialized facet.\n+  VERIFY( has_facet<numpunct<char> >(loc_1) );\n+  VERIFY( has_facet<numpunct<char> >(loc_c) );\n+  \n+  // extract facet\n+  const numpunct<char>&\tf_nump_1 = use_facet<numpunct<char> >(loc_1); \n+  const numpunct<char>&\tf_nump_c = use_facet<numpunct<char> >(loc_c); \n+\n+  // attempt to re-synthesize classic locale\n+  locale\t\tloc_2 = loc_1.combine<numpunct<char> >(loc_c);\n+  VERIFY( loc_2.name() == str_unnamed );\n+  VERIFY( loc_2 != loc_c );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "75598e2a6c370f90afe9bacaf91f36561a89a2a5", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/7.cc", "status": "renamed", "additions": 2, "deletions": 39, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2F7.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-01-19 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -18,48 +18,12 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 22.2.3.1.1  numpunct members\n+// 22.1.1 - Class locale [lib.locale]\n \n #include <locale>\n #include <string>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-// creating unnamed locales 1 using new + combine\n-void\n-test01()\n-{\n-  using namespace std;\n-  bool test = true;\n-  const string name_c(\"C\");\n-  const string str_unnamed(\"*\");\n-  string str;\n-\n-  // construct a locale object with the specialized facet.\n-  locale\t\tloc_c = locale::classic();\n-  locale \t\tloc_1(locale::classic(), new numpunct<char>);\n-\n-  // check names\n-  VERIFY( loc_c.name() == name_c );\n-  VERIFY( loc_1.name() == str_unnamed );\n-\n-  // sanity check the constructed locale has the specialized facet.\n-  VERIFY( has_facet<numpunct<char> >(loc_1) );\n-  VERIFY( has_facet<numpunct<char> >(loc_c) );\n-  \n-  // extract facet\n-  const numpunct<char>&\tf_nump_1 = use_facet<numpunct<char> >(loc_1); \n-  const numpunct<char>&\tf_nump_c = use_facet<numpunct<char> >(loc_c); \n-\n-  // attempt to re-synthesize classic locale\n-  locale\t\tloc_2 = loc_1.combine<numpunct<char> >(loc_c);\n-  VERIFY( loc_2.name() == str_unnamed );\n-  VERIFY( loc_2 != loc_c );\n-}\n-\n-\n void\n test02()\n {\n@@ -135,7 +99,6 @@ test02()\n \n int main()\n {\n-  test01();\n   test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/members.cc"}, {"sha": "3d2c931ec6d81c538f1ee1c9227033d8ef0e7b23", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,67 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.5 locale static members [lib.locale.statics]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n+class gnu_codecvt: public ccodecvt { }; \n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  string str1, str2;\n+\n+  // Construct a locale object with the C facet.\n+  const locale loc01 = locale::classic();\n+\n+  // Construct a locale object with the specialized facet.\n+  locale loc02(locale::classic(), new gnu_codecvt);\n+  VERIFY ( loc01 != loc02 );\n+  VERIFY ( !(loc01 == loc02) );\n+\n+  // classic\n+  locale loc06(\"C\");\n+  VERIFY (loc06 == loc01);\n+  str1 = loc06.name();\n+  VERIFY( str1 == \"C\" );\n+\n+  // global\n+  locale loc03;\n+  VERIFY ( loc03 == loc01);\n+  locale global_orig = locale::global(loc02);\n+  locale loc05;\n+  VERIFY (loc05 != loc03);\n+  VERIFY (loc05 == loc02);\n+\n+  // Reset global settings.\n+  locale::global(global_orig);\n+}\n+\n+int main ()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bde35e26347072451e8189d89566b5b1d05336e2", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/2.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.5 locale static members [lib.locale.statics]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// Sanity check locale::global(loc) and setlocale.\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  const string ph(\"en_PH\");\n+  const string mx(\"es_MX\");\n+  const char* orig = setlocale(LC_ALL, NULL);\n+  const char* testph = setlocale(LC_ALL, ph.c_str());\n+  const char* testmx = setlocale(LC_ALL, mx.c_str());\n+  setlocale(LC_ALL, orig);\n+\n+  // If the underlying locale doesn't support these names, setlocale\n+  // won't be reset. Therefore, disable unless we know these specific\n+  // named locales work.\n+  if (testph && testmx)\n+    {\n+      const locale loc_ph(ph.c_str());\n+      const locale loc_mx(mx.c_str());\n+      \n+      // Use setlocale between two calls to locale(\"\")\n+      const locale loc_env_1(\"\");\n+      setlocale(LC_ALL, ph.c_str());\n+      const locale loc_env_2(\"\");\n+      VERIFY( loc_env_1 == loc_env_2 );\n+      \n+      // Change global locale.\n+      locale global_orig = locale::global(loc_mx);\n+      const char* lc_all_mx = setlocale(LC_ALL, NULL);\n+      if (lc_all_mx)\n+\t{\n+\t  VERIFY( mx == lc_all_mx );\n+\t}\n+      \n+      // Restore global settings.\n+      locale::global(global_orig);\n+    }\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "87d8193051ea57d869d42f2836d580fba8644e5f", "filename": "libstdc++-v3/testsuite/22_locale/locale/global_locale_objects/3.cc", "status": "renamed", "additions": 1, "deletions": 82, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fglobal_locale_objects%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-13 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,86 +22,8 @@\n \n #include <cwchar> // for mbstate_t\n #include <locale>\n-#include <iostream>\n #include <testsuite_hooks.h>\n \n-typedef std::codecvt<char, char, std::mbstate_t> ccodecvt;\n-class gnu_codecvt: public ccodecvt { }; \n-\n-void test01()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  string str1, str2;\n-\n-  // Construct a locale object with the C facet.\n-  const locale loc01 = locale::classic();\n-\n-  // Construct a locale object with the specialized facet.\n-  locale loc02(locale::classic(), new gnu_codecvt);\n-  VERIFY ( loc01 != loc02 );\n-  VERIFY ( !(loc01 == loc02) );\n-\n-  // classic\n-  locale loc06(\"C\");\n-  VERIFY (loc06 == loc01);\n-  str1 = loc06.name();\n-  VERIFY( str1 == \"C\" );\n-\n-  // global\n-  locale loc03;\n-  VERIFY ( loc03 == loc01);\n-  locale global_orig = locale::global(loc02);\n-  locale loc05;\n-  VERIFY (loc05 != loc03);\n-  VERIFY (loc05 == loc02);\n-\n-  // Reset global settings.\n-  locale::global(global_orig);\n-}\n-\n-// Sanity check locale::global(loc) and setlocale.\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-  \n-  const string ph(\"en_PH\");\n-  const string mx(\"es_MX\");\n-  const char* orig = setlocale(LC_ALL, NULL);\n-  const char* testph = setlocale(LC_ALL, ph.c_str());\n-  const char* testmx = setlocale(LC_ALL, mx.c_str());\n-  setlocale(LC_ALL, orig);\n-\n-  // If the underlying locale doesn't support these names, setlocale\n-  // won't be reset. Therefore, disable unless we know these specific\n-  // named locales work.\n-  if (testph && testmx)\n-    {\n-      const locale loc_ph(ph.c_str());\n-      const locale loc_mx(mx.c_str());\n-      \n-      // Use setlocale between two calls to locale(\"\")\n-      const locale loc_env_1(\"\");\n-      setlocale(LC_ALL, ph.c_str());\n-      const locale loc_env_2(\"\");\n-      VERIFY( loc_env_1 == loc_env_2 );\n-      \n-      // Change global locale.\n-      locale global_orig = locale::global(loc_mx);\n-      const char* lc_all_mx = setlocale(LC_ALL, NULL);\n-      if (lc_all_mx)\n-\t{\n-\t  cout << \"lc_all_mx is \" << lc_all_mx << endl;\n-\t  VERIFY( mx == lc_all_mx );\n-\t}\n-      \n-      // Restore global settings.\n-      locale::global(global_orig);\n-    }\n-}\n-\n // Static counter for use in checking ctors/dtors.\n static std::size_t counter;\n \n@@ -186,9 +108,6 @@ void test03()\n \n int main ()\n {\n-  test01();\n-  test02();\n-\n   test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/static_members.cc"}, {"sha": "8fe6aa7ea3d10dd689657dc974c98e7cd26ca2c2", "filename": "libstdc++-v3/testsuite/22_locale/locale/operations/1.cc", "status": "renamed", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2000-09-11 Benjamin Kosnik <bkoz@redhat.com>\n \n-// Copyright (C) 2000, 2001, 2002 Free Software Foundation\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -57,29 +57,9 @@ class gnu_collate: public std::collate<char>\n   { ++gnu_count; return 0; }\n }; \n \n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-  \n-  // Sanity check.\n-  locale loc_c = locale::classic();\n-  string s01(\"land of \");\n-  string s02(\"land of look behind\");\n-  VERIFY( !loc_c(s01, s01) );\n-  VERIFY( loc_c(s01, s02) );\n- \n-  // Derivation, MF check.\n-  locale loc_gnu(loc_c, new gnu_collate);\n-  gnu_count = 0;\n-  loc_gnu(s01, s02);\n-  VERIFY( gnu_count == 1 );\n-}\n-\n int main ()\n {\n   test01();\n-  test02();\n   return 0;\n }\n ", "previous_filename": "libstdc++-v3/testsuite/22_locale/operators.cc"}, {"sha": "ed06e10a6359e30258bf7bcb4a13b22bc0f8fb9d", "filename": "libstdc++-v3/testsuite/22_locale/locale/operations/2.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Foperations%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,64 @@\n+// 2000-09-11 Benjamin Kosnik <bkoz@redhat.com>\n+\n+// Copyright (C) 2000, 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.1.1.4 locale operators [lib.locale.operators]\n+\n+#include <cwchar> // for mbstate_t\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// bool operator()(const string_type&, const string_type&) const\n+long gnu_count;\n+\n+class gnu_collate: public std::collate<char>\n+{ \n+protected:\n+  virtual int\n+  do_compare(const char*, const char*, const char*, const char*) const\n+  { ++gnu_count; return 0; }\n+}; \n+\n+void test02()\n+{\n+  using namespace std;\n+  bool test = true;\n+  \n+  // Sanity check.\n+  locale loc_c = locale::classic();\n+  string s01(\"land of \");\n+  string s02(\"land of look behind\");\n+  VERIFY( !loc_c(s01, s01) );\n+  VERIFY( loc_c(s01, s02) );\n+ \n+  // Derivation, MF check.\n+  locale loc_gnu(loc_c, new gnu_collate);\n+  gnu_count = 0;\n+  loc_gnu(s01, s02);\n+  VERIFY( gnu_count == 1 );\n+}\n+\n+int main ()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+"}, {"sha": "6eb593239b13b1e8fe4d00933534a1678132198c", "filename": "libstdc++-v3/testsuite/22_locale/messages/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.7 The message retrieval category\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -39,18 +38,8 @@ void test01()\n   typedef test_type::string_type string_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_messages: public std::messages<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_messages facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages.cc"}, {"sha": "52f25e7bd84c61706233f60f3b6ae7a5e228460c", "filename": "libstdc++-v3/testsuite/22_locale/messages/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-07-17  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7 The message retrieval category\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_messages: public std::messages<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_messages facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "05116d934d5e913d6372b8f6901838be8c6b3364", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/1.cc", "status": "renamed", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,9 +23,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n void test01()\n {\n   using namespace std;\n@@ -63,61 +60,10 @@ void test01()\n   VERIFY ( s01 == \"bitte\" );\n   VERIFY ( s02 == \"danke\" );\n   mssg_de.close(cat_de);\n-\n-  // Check French (fr_FR) locale.\n-  catalog cat_fr = mssg_fr.open(\"libstdc++\", loc_c, dir);\n-  s01 = mssg_fr.get(cat_fr, 0, 0, \"please\");\n-  s02 = mssg_fr.get(cat_fr, 0, 0, \"thank you\");\n-  VERIFY ( s01 == \"s'il vous pla\ufffdt\" );\n-  VERIFY ( s02 == \"merci\" );\n-  mssg_fr.close(cat_fr);\n-\n-  // Check US (en_US) locale.\n-  catalog cat_us = mssg_fr.open(\"libstdc++\", loc_c, dir);\n-  s01 = mssg_us.get(cat_us, 0, 0, \"please\");\n-  s02 = mssg_us.get(cat_us, 0, 0, \"thank you\");\n-  VERIFY ( s01 == \"please\" );\n-  VERIFY ( s02 == \"thank you\" );\n-  mssg_us.close(cat_us);\n-}\n-\n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n }\n \n int main()\n {\n   test01();\n-  test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages_members_char.cc"}, {"sha": "3234ef6f4ce7ad0bf354aee85b35c98ba572d812", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/2.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,69 @@\n+// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7.1.1 messages members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+  typedef std::messages<char>::string_type string_type;\n+\n+  bool test = true;\n+  // This is exported through RUNTESTFLAGS in testsuite/Makefile.am.\n+  const char* dir = LOCALEDIR;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the messages facets\n+  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n+  const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n+  const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // catalog open(const string&, const locale&) const;\n+  // string_type get(catalog, int, int, const string_type& ) const; \n+  // void close(catalog) const;\n+\n+  // Check French (fr_FR) locale.\n+  catalog cat_fr = mssg_fr.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_fr.get(cat_fr, 0, 0, \"please\");\n+  string s02 = mssg_fr.get(cat_fr, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"s'il vous pla\ufffdt\" );\n+  VERIFY ( s02 == \"merci\" );\n+  mssg_fr.close(cat_fr);\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "d8346b291568464270e734d243d38b1d6758fa8f", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/3.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,69 @@\n+// 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.7.1.1 messages members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef std::messages<char>::catalog catalog;\n+  typedef std::messages<char>::string_type string_type;\n+\n+  bool test = true;\n+  // This is exported through RUNTESTFLAGS in testsuite/Makefile.am.\n+  const char* dir = LOCALEDIR;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the messages facets\n+  const messages<char>& mssg_c = use_facet<messages<char> >(loc_c); \n+  const messages<char>& mssg_us = use_facet<messages<char> >(loc_us); \n+  const messages<char>& mssg_fr = use_facet<messages<char> >(loc_fr); \n+  const messages<char>& mssg_de = use_facet<messages<char> >(loc_de); \n+\n+  // catalog open(const string&, const locale&) const;\n+  // string_type get(catalog, int, int, const string_type& ) const; \n+  // void close(catalog) const;\n+\n+  // Check US (en_US) locale.\n+  catalog cat_us = mssg_fr.open(\"libstdc++\", loc_c, dir);\n+  string s01 = mssg_us.get(cat_us, 0, 0, \"please\");\n+  string s02 = mssg_us.get(cat_us, 0, 0, \"thank you\");\n+  VERIFY ( s01 == \"please\" );\n+  VERIFY ( s02 == \"thank you\" );\n+  mssg_us.close(cat_us);\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/messages/members/char/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages%2Fmembers%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "1c6fc5b99b239135060bfad3f3a4e3ae83e5eb34", "filename": "libstdc++-v3/testsuite/22_locale/messages_byname/1.cc", "status": "renamed", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmessages_byname%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-07-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,9 +23,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n void test01()\n {\n   using namespace std;\n@@ -77,6 +74,5 @@ void test01()\n int main()\n {\n   test01();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/messages_byname.cc"}, {"sha": "86fcd18b5016a08dbf37df6a687a8d095c7af17f", "filename": "libstdc++-v3/testsuite/22_locale/money_get/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.6.1  Template class money_get\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -38,18 +37,8 @@ void test01()\n   typedef test_type::iter_type iter_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_money_get: public std::money_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_money_get facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_get.cc"}, {"sha": "516f11bf1694c1564b6b6e3da0630b5ae4e844ef", "filename": "libstdc++-v3/testsuite/22_locale/money_get/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-09-12  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1  Template class money_get\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_money_get: public std::money_get<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_money_get facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "7bbfc88a95219a5c08e8c2bc89666ec85f99d30f", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/1.cc", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,151 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test string version\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const string digits1(\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const string digits2(\"-10000000000000\");  \n+\n+  // not valid input\n+  const string digits3(\"-A\"); \n+\n+  // input less than frac_digits\n+  const string digits4(\"-1\");\n+  \n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n+\n+\n+  iss.str(\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  string result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(\"7.200.000.000,00  \");\n+  iterator_type is_it02(iss);\n+  string result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, true, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+\n+  iss.str(\"7.200.000.000,00  a\");\n+  iterator_type is_it03(iss);\n+  string result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits1 );\n+  VERIFY( err03 == ios_base::goodbit );\n+\n+  iss.str(\"\");\n+  iterator_type is_it04(iss);\n+  string result4;\n+  ios_base::iostate err04 = ios_base::goodbit;\n+  mon_get.get(is_it04, end, true, iss, err04, result4);\n+  VERIFY( result4 == empty );\n+  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n+\n+  iss.str(\"working for enlightenment and peace in a mad world\");\n+  iterator_type is_it05(iss);\n+  string result5;\n+  ios_base::iostate err05 = ios_base::goodbit;\n+  mon_get.get(is_it05, end, true, iss, err05, result5);\n+  VERIFY( result5 == empty );\n+  VERIFY( err05 == ios_base::failbit );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(\"7.200.000.000,00 EUR \");\n+  iterator_type is_it06(iss);\n+  string result6;\n+  ios_base::iostate err06 = ios_base::goodbit;\n+  mon_get.get(is_it06, end, true, iss, err06, result6);\n+  VERIFY( result6 == digits1 );\n+  VERIFY( err06 == ios_base::eofbit );\n+\n+  iss.str(\"7.200.000.000,00 EUR  \"); // Extra space.\n+  iterator_type is_it07(iss);\n+  string result7;\n+  ios_base::iostate err07 = ios_base::goodbit;\n+  mon_get.get(is_it07, end, true, iss, err07, result7);\n+  VERIFY( result7 == digits1 );\n+  VERIFY( err07 == ios_base::goodbit );\n+\n+  iss.str(\"7.200.000.000,00 \\244\"); \n+  iterator_type is_it08(iss);\n+  string result8;\n+  ios_base::iostate err08 = ios_base::goodbit;\n+  mon_get.get(is_it08, end, false, iss, err08, result8);\n+  VERIFY( result8 == digits1 );\n+  VERIFY( err08 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "0ca281fe5fb37dfdaf1947fd57ef67b7af8e802a", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/2.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,140 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test string version\n+void test02()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const string digits1(\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const string digits2(\"-10000000000000\");  \n+\n+  // not valid input\n+  const string digits3(\"-A\"); \n+\n+  // input less than frac_digits\n+  const string digits4(\"-1\");\n+  \n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(\"HK$7,200,000,000.00\"); \n+  iterator_type is_it09(iss);\n+  string result9;\n+  ios_base::iostate err09 = ios_base::goodbit;\n+  mon_get.get(is_it09, end, false, iss, err09, result9);\n+  VERIFY( result9 == digits1 );\n+  VERIFY( err09 == ios_base::eofbit );\n+\n+  iss.str(\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it10(iss);\n+  string result10;\n+  ios_base::iostate err10 = ios_base::goodbit;\n+  mon_get.get(is_it10, end, true, iss, err10, result10);\n+  VERIFY( result10 == digits2 );\n+  VERIFY( err10 == ios_base::goodbit );\n+\n+  iss.str(\"(HKD .01)\"); \n+  iterator_type is_it11(iss);\n+  string result11;\n+  ios_base::iostate err11 = ios_base::goodbit;\n+  mon_get.get(is_it11, end, true, iss, err11, result11);\n+  VERIFY( result11 == digits4 );\n+  VERIFY( err11 == ios_base::goodbit );\n+\n+  // for the \"en_HK\" locale the parsing of the very same input streams must\n+  // be successful without showbase too, since the symbol field appears in\n+  // the first positions in the format and the symbol, when present, must be\n+  // consumed.\n+  iss.unsetf(ios_base::showbase);\n+\n+  iss.str(\"HK$7,200,000,000.00\"); \n+  iterator_type is_it12(iss);\n+  string result12;\n+  ios_base::iostate err12 = ios_base::goodbit;\n+  mon_get.get(is_it12, end, false, iss, err12, result12);\n+  VERIFY( result12 == digits1 );\n+  VERIFY( err12 == ios_base::eofbit );\n+\n+  iss.str(\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it13(iss);\n+  string result13;\n+  ios_base::iostate err13 = ios_base::goodbit;\n+  mon_get.get(is_it13, end, true, iss, err13, result13);\n+  VERIFY( result13 == digits2 );\n+  VERIFY( err13 == ios_base::goodbit );\n+\n+  iss.str(\"(HKD .01)\"); \n+  iterator_type is_it14(iss);\n+  string result14;\n+  ios_base::iostate err14 = ios_base::goodbit;\n+  mon_get.get(is_it14, end, true, iss, err14, result14);\n+  VERIFY( result14 == digits4 );\n+  VERIFY( err14 == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "eb8ef9c1c578f976604cb1a0b89a4b8eae20c5fa", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/3.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,96 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test03()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n+\n+  iss.str(\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(\"7.200.000.000,00 \");\n+  iterator_type is_it02(iss);\n+  long double result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, false, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "3a6aa18039c76d342abe610893a5f5daf1e319e5", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/4.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,91 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test04()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(\"(HKD .01)\"); \n+  iterator_type is_it03(iss);\n+  long double result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits4 );\n+  VERIFY( err03 == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "f886c887ebdc0fd1758a2d8f2518729cd8f99a62", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/5.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_get works with other iterators besides streambuf\n+  // input iterators.\n+  typedef string::const_iterator iter_type;\n+  typedef money_get<char, iter_type> mon_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const string str = \"0.01Eleanor Roosevelt\";\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new mon_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n+\n+  // 01 string\n+  string res1;\n+  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n+  string rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res1 == \"1\" );\n+  VERIFY( rem1 == \"Eleanor Roosevelt\" );\n+\n+  // 02 long double\n+  iss.clear();\n+  err = goodbit;\n+  long double res2;\n+  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res2 == 1 );\n+  VERIFY( rem2 == \"Eleanor Roosevelt\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f9afb1e1fa4ac7b5c7f996f0db77054aadeded5f", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/6.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,104 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<char,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"\"; }\n+  std::string do_negative_sign() const { return \"-\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5579\n+void test06()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> InIt;\n+\n+  bool test = true;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  string bufferp(\"$1234.56\");\n+  string buffern(\"$-1234.56\");\n+  string bufferp_ns(\"1234.56\");\n+  string buffern_ns(\"-1234.56\");\n+\n+  bool intl = false;\n+\n+  InIt iendp, iendn, iendp_ns, iendn_ns;\n+  ios_base::iostate err;\n+  string valp, valn, valp_ns, valn_ns;\n+\n+  const money_get<char,InIt>& mg  =\n+    use_facet<money_get<char, InIt> >(loc);\n+\n+  istringstream fmtp(bufferp);\n+  fmtp.imbue(loc);\n+  InIt ibegp(fmtp);\n+  mg.get(ibegp,iendp,intl,fmtp,err,valp);\n+  VERIFY( valp == \"123456\" );\n+\n+  istringstream fmtn(buffern);\n+  fmtn.imbue(loc);\n+  InIt ibegn(fmtn);\n+  mg.get(ibegn,iendn,intl,fmtn,err,valn);\n+  VERIFY( valn == \"-123456\" );\n+\n+  istringstream fmtp_ns(bufferp_ns);\n+  fmtp_ns.imbue(loc);\n+  InIt ibegp_ns(fmtp_ns);\n+  mg.get(ibegp_ns,iendp_ns,intl,fmtp_ns,err,valp_ns);\n+  VERIFY( valp_ns == \"123456\" );\n+\n+  istringstream fmtn_ns(buffern_ns);\n+  fmtn_ns.imbue(loc);\n+  InIt ibegn_ns(fmtn_ns);\n+  mg.get(ibegn_ns,iendn_ns,intl,fmtn_ns,err,valn_ns);\n+  VERIFY( valn_ns == \"-123456\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "f275d4e59d43ef567524186fe85b9b53314bc2c7", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/7.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F7.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// We were appending to the string val passed by reference, instead\n+// of constructing a temporary candidate, eventually copied into\n+// val in case of successful parsing.\n+void test07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  typedef istreambuf_iterator<char> InIt;\n+  InIt iend1, iend2, iend3;\n+\n+  locale loc_c = locale::classic();\n+  string buffer1(\"123\");\n+  string buffer2(\"456\");\n+  string buffer3(\"Golgafrincham\"); // From Nathan's original idea.\n+\n+  string val;\n+\n+  ios_base::iostate err;\n+\n+  const money_get<char,InIt>& mg = use_facet<money_get<char, InIt> >(loc_c);\n+\n+  istringstream fmt1(buffer1);\n+  InIt ibeg1(fmt1);\n+  mg.get(ibeg1,iend1,false,fmt1,err,val);\n+  VERIFY( val == buffer1 );\n+\n+  istringstream fmt2(buffer2);\n+  InIt ibeg2(fmt2);\n+  mg.get(ibeg2,iend2,false,fmt2,err,val);\n+  VERIFY( val == buffer2 );\n+\n+  val = buffer3;\n+  istringstream fmt3(buffer3);\n+  InIt ibeg3(fmt3);\n+  mg.get(ibeg3,iend3,false,fmt3,err,val);\n+  VERIFY( val == buffer3 );\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "8c811e99a635568dba075bcbeb0eeb70f0a582fd", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/8.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2F8.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,123 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_a : public std::moneypunct<char,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { sign, value, space, symbol } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_b : public std::moneypunct<char,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::string do_curr_symbol() const { return \"$\"; }\n+  std::string do_positive_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { sign, value, symbol, none } };\n+    return pat;\n+  }\n+};\n+\n+// This one exercises patterns of the type { X, Y, Z, symbol } and\n+// { X, Y, symbol, none } for a two character long sign. Therefore\n+// the optional symbol (showbase is false by default) must be consumed\n+// if present, since \"rest of the sign\" is left to read.\n+void test08()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> InIt;\n+\n+  bool intl = false;\n+  bool test = true;\n+  ios_base::iostate err;\n+\n+  locale loc_a(locale::classic(), new My_money_io_a);\n+\n+  string buffer_a(\"(1234.56 $)\");\n+  string buffer_a_ns(\"(1234.56 )\");\n+\n+  InIt iend_a, iend_a_ns;\n+  string val_a, val_a_ns;\n+\n+  const money_get<char,InIt>& mg_a  = use_facet<money_get<char, InIt> >(loc_a);\n+\n+  istringstream fmt_a(buffer_a);\n+  fmt_a.imbue(loc_a);\n+  InIt ibeg_a(fmt_a);\n+  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n+  VERIFY( val_a == \"123456\" );\n+\n+  istringstream fmt_a_ns(buffer_a_ns);\n+  fmt_a_ns.imbue(loc_a);\n+  InIt ibeg_a_ns(fmt_a_ns);\n+  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n+  VERIFY( val_a_ns == \"123456\" );\n+\n+  locale loc_b(locale::classic(), new My_money_io_b);\n+\n+  string buffer_b(\"(1234.56$)\");\n+  string buffer_b_ns(\"(1234.56)\");\n+\n+  InIt iend_b, iend_b_ns;\n+  string val_b, val_b_ns;\n+\n+  const money_get<char,InIt>& mg_b = use_facet<money_get<char, InIt> >(loc_b);\n+\n+  istringstream fmt_b(buffer_b);\n+  fmt_b.imbue(loc_b);\n+  InIt ibeg_b(fmt_b);\n+  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n+  VERIFY( val_b == \"123456\" );\n+\n+  istringstream fmt_b_ns(buffer_b_ns);\n+  fmt_b_ns.imbue(loc_b);\n+  InIt ibeg_b_ns(fmt_b_ns);\n+  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n+  VERIFY( val_b_ns == \"123456\" );\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "b9872d9c7b0d65b0a173db2baf43ee49bd6c36b2", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/wrapped_env.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+#define main discard_main_7\n+#include \"7.cc\"\n+#undef main \n+\n+#define main discard_main_8\n+#include \"8.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  two.push_back(&test07);\n+  two.push_back(&test08);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "996af345b58303c718771a56a8b50fe23fd994e5", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/char/wrapped_locale.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+#define main discard_main_7\n+#include \"7.cc\"\n+#undef main \n+\n+#define main discard_main_8\n+#include \"8.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  two.push_back(&test07);\n+  two.push_back(&test08);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "d8d86f2cfafe6495b0fbafaa4fc3ec51e26d1753", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/1.cc", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,151 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test wstring version\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const wstring digits1(L\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const wstring digits2(L\"-10000000000000\");  \n+\n+  // not valid input\n+  const wstring digits3(L\"-A\"); \n+\n+  // input less than frac_digits\n+  const wstring digits4(L\"-1\");\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  wstring result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00  \");\n+  iterator_type is_it02(iss);\n+  wstring result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, true, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00  a\");\n+  iterator_type is_it03(iss);\n+  wstring result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits1 );\n+  VERIFY( err03 == ios_base::goodbit );\n+\n+  iss.str(L\"\");\n+  iterator_type is_it04(iss);\n+  wstring result4;\n+  ios_base::iostate err04 = ios_base::goodbit;\n+  mon_get.get(is_it04, end, true, iss, err04, result4);\n+  VERIFY( result4 == empty );\n+  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n+\n+  iss.str(L\"working for enlightenment and peace in a mad world\");\n+  iterator_type is_it05(iss);\n+  wstring result5;\n+  ios_base::iostate err05 = ios_base::goodbit;\n+  mon_get.get(is_it05, end, true, iss, err05, result5);\n+  VERIFY( result5 == empty );\n+  VERIFY( err05 == ios_base::failbit );\n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(L\"7.200.000.000,00 EUR \");\n+  iterator_type is_it06(iss);\n+  wstring result6;\n+  ios_base::iostate err06 = ios_base::goodbit;\n+  mon_get.get(is_it06, end, true, iss, err06, result6);\n+  VERIFY( result6 == digits1 );\n+  VERIFY( err06 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00 EUR  \"); // Extra space.\n+  iterator_type is_it07(iss);\n+  wstring result7;\n+  ios_base::iostate err07 = ios_base::goodbit;\n+  mon_get.get(is_it07, end, true, iss, err07, result7);\n+  VERIFY( result7 == digits1 );\n+  VERIFY( err07 == ios_base::goodbit );\n+\n+  iss.str(L\"7.200.000.000,00 \\x20ac\"); \n+  iterator_type is_it08(iss);\n+  wstring result8;\n+  ios_base::iostate err08 = ios_base::goodbit;\n+  mon_get.get(is_it08, end, false, iss, err08, result8);\n+  VERIFY( result8 == digits1 );\n+  VERIFY( err08 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "9b3c8741e321f897f05fe1975b81c65fc4d0201b", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/2.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,140 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test wstring version\n+void test02()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const wstring digits1(L\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const wstring digits2(L\"-10000000000000\");  \n+\n+  // not valid input\n+  const wstring digits3(L\"-A\"); \n+\n+  // input less than frac_digits\n+  const wstring digits4(L\"-1\");\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(L\"HK$7,200,000,000.00\"); \n+  iterator_type is_it09(iss);\n+  wstring result9;\n+  ios_base::iostate err09 = ios_base::goodbit;\n+  mon_get.get(is_it09, end, false, iss, err09, result9);\n+  VERIFY( result9 == digits1 );\n+  VERIFY( err09 == ios_base::eofbit );\n+\n+  iss.str(L\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it10(iss);\n+  wstring result10;\n+  ios_base::iostate err10 = ios_base::goodbit;\n+  mon_get.get(is_it10, end, true, iss, err10, result10);\n+  VERIFY( result10 == digits2 );\n+  VERIFY( err10 == ios_base::goodbit );\n+\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it11(iss);\n+  wstring result11;\n+  ios_base::iostate err11 = ios_base::goodbit;\n+  mon_get.get(is_it11, end, true, iss, err11, result11);\n+  VERIFY( result11 == digits4 );\n+  VERIFY( err11 == ios_base::goodbit );\n+\n+  // for the \"en_HK\" locale the parsing of the very same input streams must\n+  // be successful without showbase too, since the symbol field appears in\n+  // the first positions in the format and the symbol, when present, must be\n+  // consumed.\n+  iss.unsetf(ios_base::showbase);\n+\n+  iss.str(L\"HK$7,200,000,000.00\"); \n+  iterator_type is_it12(iss);\n+  wstring result12;\n+  ios_base::iostate err12 = ios_base::goodbit;\n+  mon_get.get(is_it12, end, false, iss, err12, result12);\n+  VERIFY( result12 == digits1 );\n+  VERIFY( err12 == ios_base::eofbit );\n+\n+  iss.str(L\"(HKD 100,000,000,000.00)\"); \n+  iterator_type is_it13(iss);\n+  wstring result13;\n+  ios_base::iostate err13 = ios_base::goodbit;\n+  mon_get.get(is_it13, end, true, iss, err13, result13);\n+  VERIFY( result13 == digits2 );\n+  VERIFY( err13 == ios_base::goodbit );\n+\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it14(iss);\n+  wstring result14;\n+  ios_base::iostate err14 = ios_base::goodbit;\n+  mon_get.get(is_it14, end, true, iss, err14, result14);\n+  VERIFY( result14 == digits4 );\n+  VERIFY( err14 == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "747b4944494c6e5ecc7e9d04fa42f41d4c45b47c", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/3.cc", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,96 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test03()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it01(iss);\n+  long double result1;\n+  ios_base::iostate err01 = ios_base::goodbit;\n+  mon_get.get(is_it01, end, true, iss, err01, result1);\n+  VERIFY( result1 == digits1 );\n+  VERIFY( err01 == ios_base::eofbit );\n+\n+  iss.str(L\"7.200.000.000,00 \");\n+  iterator_type is_it02(iss);\n+  long double result2;\n+  ios_base::iostate err02 = ios_base::goodbit;\n+  mon_get.get(is_it02, end, false, iss, err02, result2);\n+  VERIFY( result2 == digits1 );\n+  VERIFY( err02 == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "030c47a2994e902daf5c9b0406cbc7052f6fa109", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/4.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,91 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test04()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  iterator_type end;\n+  wistringstream iss;\n+  iss.imbue(loc_hk);\n+  // cache the money_get facet\n+  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  iss.setf(ios_base::showbase);\n+\n+  iss.str(L\"(HKD .01)\"); \n+  iterator_type is_it03(iss);\n+  long double result3;\n+  ios_base::iostate err03 = ios_base::goodbit;\n+  mon_get.get(is_it03, end, true, iss, err03, result3);\n+  VERIFY( result3 == digits4 );\n+  VERIFY( err03 == ios_base::goodbit );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "fd0c53ef3136218e0cf3c7a8f025aa1a5a759e76", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/5.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_get works with other iterators besides streambuf\n+  // input iterators.\n+  typedef wstring::const_iterator iter_type;\n+  typedef money_get<wchar_t, iter_type> mon_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str = L\"0.01Eleanor Roosevelt\";\n+\n+  wistringstream iss; \n+  iss.imbue(locale(loc_c, new mon_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n+\n+  // 01 wstring\n+  wstring res1;\n+  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n+  wstring rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res1 == L\"1\" );\n+  VERIFY( rem1 == L\"Eleanor Roosevelt\" );\n+\n+  // 02 long double\n+  iss.clear();\n+  err = goodbit;\n+  long double res2;\n+  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n+  wstring rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( res2 == 1 );\n+  VERIFY( rem2 == L\"Eleanor Roosevelt\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "0015cd92ca6034f2cd9bfb2a7515150c629a49f8", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/6.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,102 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"\"; }\n+  std::wstring do_negative_sign() const { return L\"-\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, none, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5579\n+void test06()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> InIt;\n+\n+  bool test = true;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  wstring bufferp(L\"$1234.56\");\n+  wstring buffern(L\"$-1234.56\");\n+  wstring bufferp_ns(L\"1234.56\");\n+  wstring buffern_ns(L\"-1234.56\");\n+\n+  bool intl = false;\n+\n+  InIt iendp, iendn, iendp_ns, iendn_ns;\n+  ios_base::iostate err;\n+  wstring valp, valn, valp_ns, valn_ns;\n+\n+  const money_get<wchar_t,InIt>& mg = use_facet<money_get<wchar_t, InIt> >(loc);\n+  wistringstream fmtp(bufferp);\n+  fmtp.imbue(loc);\n+  InIt ibegp(fmtp);\n+  mg.get(ibegp,iendp,intl,fmtp,err,valp);\n+  VERIFY( valp == L\"123456\" );\n+\n+  wistringstream fmtn(buffern);\n+  fmtn.imbue(loc);\n+  InIt ibegn(fmtn);\n+  mg.get(ibegn,iendn,intl,fmtn,err,valn);\n+  VERIFY( valn == L\"-123456\" );\n+\n+  wistringstream fmtp_ns(bufferp_ns);\n+  fmtp_ns.imbue(loc);\n+  InIt ibegp_ns(fmtp_ns);\n+  mg.get(ibegp_ns,iendp_ns,intl,fmtp_ns,err,valp_ns);\n+  VERIFY( valp_ns == L\"123456\" );\n+\n+  wistringstream fmtn_ns(buffern_ns);\n+  fmtn_ns.imbue(loc);\n+  InIt ibegn_ns(fmtn_ns);\n+  mg.get(ibegn_ns,iendn_ns,intl,fmtn_ns,err,valn_ns);\n+  VERIFY( valn_ns == L\"-123456\" );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "bf8615f1748e79f049c0eeee94aaa5eafbcca724", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/7.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F7.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// We were appending to the string val passed by reference, instead\n+// of constructing a temporary candidate, eventually copied into\n+// val in case of successful parsing.\n+void test07()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  typedef istreambuf_iterator<wchar_t> InIt;\n+  InIt iend1, iend2, iend3;\n+\n+  locale loc_c = locale::classic();\n+  wstring buffer1(L\"123\");\n+  wstring buffer2(L\"456\");\n+  wstring buffer3(L\"Golgafrincham\"); // From Nathan's original idea.\n+\n+  wstring val;\n+\n+  ios_base::iostate err;\n+\n+  const money_get<wchar_t,InIt>& mg = use_facet<money_get<wchar_t, InIt> >(loc_c);\n+\n+  wistringstream fmt1(buffer1);\n+  InIt ibeg1(fmt1);\n+  mg.get(ibeg1,iend1,false,fmt1,err,val);\n+  VERIFY( val == buffer1 );\n+\n+  wistringstream fmt2(buffer2);\n+  InIt ibeg2(fmt2);\n+  mg.get(ibeg2,iend2,false,fmt2,err,val);\n+  VERIFY( val == buffer2 );\n+\n+  val = buffer3;\n+  wistringstream fmt3(buffer3);\n+  InIt ibeg3(fmt3);\n+  mg.get(ibeg3,iend3,false,fmt3,err,val);\n+  VERIFY( val == buffer3 );\n+}\n+\n+int main()\n+{\n+  test07();\n+  return 0;\n+}"}, {"sha": "ab1de4d3e100fe87b28d67504f797d633a1074ab", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/8.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2F8.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,123 @@\n+// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.1.1 money_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_a : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { sign, value, space, symbol } };\n+    return pat;\n+  }\n+};\n+\n+struct My_money_io_b : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  std::string do_grouping() const { return \"\\004\"; }\n+  \n+  std::wstring do_curr_symbol() const { return L\"$\"; }\n+  std::wstring do_positive_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_pos_format() const\n+  {\n+    pattern pat = { { sign, value, symbol, none } };\n+    return pat;\n+  }\n+};\n+\n+// This one exercises patterns of the type { X, Y, Z, symbol } and\n+// { X, Y, symbol, none } for a two character long sign. Therefore\n+// the optional symbol (showbase is false by default) must be consumed\n+// if present, since \"rest of the sign\" is left to read.\n+void test08()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> InIt;\n+\n+  bool intl = false;\n+  bool test = true;\n+  ios_base::iostate err;\n+\n+  locale loc_a(locale::classic(), new My_money_io_a);\n+\n+  wstring buffer_a(L\"(1234.56 $)\");\n+  wstring buffer_a_ns(L\"(1234.56 )\");\n+\n+  InIt iend_a, iend_a_ns;\n+  wstring val_a, val_a_ns;\n+\n+  const money_get<wchar_t,InIt>& mg_a  = use_facet<money_get<wchar_t, InIt> >(loc_a);\n+\n+  wistringstream fmt_a(buffer_a);\n+  fmt_a.imbue(loc_a);\n+  InIt ibeg_a(fmt_a);\n+  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n+  VERIFY( val_a == L\"123456\" );\n+\n+  wistringstream fmt_a_ns(buffer_a_ns);\n+  fmt_a_ns.imbue(loc_a);\n+  InIt ibeg_a_ns(fmt_a_ns);\n+  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n+  VERIFY( val_a_ns == L\"123456\" );\n+\n+  locale loc_b(locale::classic(), new My_money_io_b);\n+\n+  wstring buffer_b(L\"(1234.56$)\");\n+  wstring buffer_b_ns(L\"(1234.56)\");\n+\n+  InIt iend_b, iend_b_ns;\n+  wstring val_b, val_b_ns;\n+\n+  const money_get<wchar_t,InIt>& mg_b = use_facet<money_get<wchar_t, InIt> >(loc_b);\n+\n+  wistringstream fmt_b(buffer_b);\n+  fmt_b.imbue(loc_b);\n+  InIt ibeg_b(fmt_b);\n+  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n+  VERIFY( val_b == L\"123456\" );\n+\n+  wistringstream fmt_b_ns(buffer_b_ns);\n+  fmt_b_ns.imbue(loc_b);\n+  InIt ibeg_b_ns(fmt_b_ns);\n+  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n+  VERIFY( val_b_ns == L\"123456\" );\n+}\n+\n+int main()\n+{\n+  test08();\n+  return 0;\n+}"}, {"sha": "b9872d9c7b0d65b0a173db2baf43ee49bd6c36b2", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/wrapped_env.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+#define main discard_main_7\n+#include \"7.cc\"\n+#undef main \n+\n+#define main discard_main_8\n+#include \"8.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  two.push_back(&test07);\n+  two.push_back(&test08);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "996af345b58303c718771a56a8b50fe23fd994e5", "filename": "libstdc++-v3/testsuite/22_locale/money_get/get/wchar_t/wrapped_locale.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,71 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+#define main discard_main_7\n+#include \"7.cc\"\n+#undef main \n+\n+#define main discard_main_8\n+#include \"8.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  two.push_back(&test07);\n+  two.push_back(&test08);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "bf2e47e3a9cf04c5ec461238cc7f295d7f4c8e0c", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_char.cc", "status": "removed", "additions": 0, "deletions": 580, "changes": 580, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,580 +0,0 @@\n-// 2001-09-12 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.6.1.1 money_get members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-// test string version\n-void test01()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef istreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-\n-  // total EPA budget FY 2002\n-  const string digits1(\"720000000000\");\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const string digits2(\"-10000000000000\");  \n-\n-  // not valid input\n-  const string digits3(\"-A\"); \n-\n-  // input less than frac_digits\n-  const string digits4(\"-1\");\n-  \n-  iterator_type end;\n-  istringstream iss;\n-  iss.imbue(loc_de);\n-  // cache the money_get facet\n-  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n-\n-\n-  iss.str(\"7.200.000.000,00 \");\n-  iterator_type is_it01(iss);\n-  string result1;\n-  ios_base::iostate err01 = ios_base::goodbit;\n-  mon_get.get(is_it01, end, true, iss, err01, result1);\n-  VERIFY( result1 == digits1 );\n-  VERIFY( err01 == ios_base::eofbit );\n-\n-  iss.str(\"7.200.000.000,00  \");\n-  iterator_type is_it02(iss);\n-  string result2;\n-  ios_base::iostate err02 = ios_base::goodbit;\n-  mon_get.get(is_it02, end, true, iss, err02, result2);\n-  VERIFY( result2 == digits1 );\n-  VERIFY( err02 == ios_base::eofbit );\n-\n-  iss.str(\"7.200.000.000,00  a\");\n-  iterator_type is_it03(iss);\n-  string result3;\n-  ios_base::iostate err03 = ios_base::goodbit;\n-  mon_get.get(is_it03, end, true, iss, err03, result3);\n-  VERIFY( result3 == digits1 );\n-  VERIFY( err03 == ios_base::goodbit );\n-\n-  iss.str(\"\");\n-  iterator_type is_it04(iss);\n-  string result4;\n-  ios_base::iostate err04 = ios_base::goodbit;\n-  mon_get.get(is_it04, end, true, iss, err04, result4);\n-  VERIFY( result4 == empty );\n-  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n-\n-  iss.str(\"working for enlightenment and peace in a mad world\");\n-  iterator_type is_it05(iss);\n-  string result5;\n-  ios_base::iostate err05 = ios_base::goodbit;\n-  mon_get.get(is_it05, end, true, iss, err05, result5);\n-  VERIFY( result5 == empty );\n-  VERIFY( err05 == ios_base::failbit );\n-\n-  // now try with showbase, to get currency symbol in format\n-  iss.setf(ios_base::showbase);\n-\n-  iss.str(\"7.200.000.000,00 EUR \");\n-  iterator_type is_it06(iss);\n-  string result6;\n-  ios_base::iostate err06 = ios_base::goodbit;\n-  mon_get.get(is_it06, end, true, iss, err06, result6);\n-  VERIFY( result6 == digits1 );\n-  VERIFY( err06 == ios_base::eofbit );\n-\n-  iss.str(\"7.200.000.000,00 EUR  \"); // Extra space.\n-  iterator_type is_it07(iss);\n-  string result7;\n-  ios_base::iostate err07 = ios_base::goodbit;\n-  mon_get.get(is_it07, end, true, iss, err07, result7);\n-  VERIFY( result7 == digits1 );\n-  VERIFY( err07 == ios_base::goodbit );\n-\n-  iss.str(\"7.200.000.000,00 \\244\"); \n-  iterator_type is_it08(iss);\n-  string result8;\n-  ios_base::iostate err08 = ios_base::goodbit;\n-  mon_get.get(is_it08, end, false, iss, err08, result8);\n-  VERIFY( result8 == digits1 );\n-  VERIFY( err08 == ios_base::eofbit );\n-\n-  iss.imbue(loc_hk);\n-  iss.str(\"HK$7,200,000,000.00\"); \n-  iterator_type is_it09(iss);\n-  string result9;\n-  ios_base::iostate err09 = ios_base::goodbit;\n-  mon_get.get(is_it09, end, false, iss, err09, result9);\n-  VERIFY( result9 == digits1 );\n-  VERIFY( err09 == ios_base::eofbit );\n-\n-  iss.str(\"(HKD 100,000,000,000.00)\"); \n-  iterator_type is_it10(iss);\n-  string result10;\n-  ios_base::iostate err10 = ios_base::goodbit;\n-  mon_get.get(is_it10, end, true, iss, err10, result10);\n-  VERIFY( result10 == digits2 );\n-  VERIFY( err10 == ios_base::goodbit );\n-\n-  iss.str(\"(HKD .01)\"); \n-  iterator_type is_it11(iss);\n-  string result11;\n-  ios_base::iostate err11 = ios_base::goodbit;\n-  mon_get.get(is_it11, end, true, iss, err11, result11);\n-  VERIFY( result11 == digits4 );\n-  VERIFY( err11 == ios_base::goodbit );\n-\n-  // for the \"en_HK\" locale the parsing of the very same input streams must\n-  // be successful without showbase too, since the symbol field appears in\n-  // the first positions in the format and the symbol, when present, must be\n-  // consumed.\n-  iss.unsetf(ios_base::showbase);\n-\n-  iss.str(\"HK$7,200,000,000.00\"); \n-  iterator_type is_it12(iss);\n-  string result12;\n-  ios_base::iostate err12 = ios_base::goodbit;\n-  mon_get.get(is_it12, end, false, iss, err12, result12);\n-  VERIFY( result12 == digits1 );\n-  VERIFY( err12 == ios_base::eofbit );\n-\n-  iss.str(\"(HKD 100,000,000,000.00)\"); \n-  iterator_type is_it13(iss);\n-  string result13;\n-  ios_base::iostate err13 = ios_base::goodbit;\n-  mon_get.get(is_it13, end, true, iss, err13, result13);\n-  VERIFY( result13 == digits2 );\n-  VERIFY( err13 == ios_base::goodbit );\n-\n-  iss.str(\"(HKD .01)\"); \n-  iterator_type is_it14(iss);\n-  string result14;\n-  ios_base::iostate err14 = ios_base::goodbit;\n-  mon_get.get(is_it14, end, true, iss, err14, result14);\n-  VERIFY( result14 == digits4 );\n-  VERIFY( err14 == ios_base::goodbit );\n-}\n-\n-// test double version\n-void test02()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef istreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-\n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n-  \n-  iterator_type end;\n-  istringstream iss;\n-  iss.imbue(loc_de);\n-  // cache the money_get facet\n-  const money_get<char>& mon_get = use_facet<money_get<char> >(iss.getloc()); \n-\n-  iss.str(\"7.200.000.000,00 \");\n-  iterator_type is_it01(iss);\n-  long double result1;\n-  ios_base::iostate err01 = ios_base::goodbit;\n-  mon_get.get(is_it01, end, true, iss, err01, result1);\n-  VERIFY( result1 == digits1 );\n-  VERIFY( err01 == ios_base::eofbit );\n-\n-  iss.str(\"7.200.000.000,00 \");\n-  iterator_type is_it02(iss);\n-  long double result2;\n-  ios_base::iostate err02 = ios_base::goodbit;\n-  mon_get.get(is_it02, end, false, iss, err02, result2);\n-  VERIFY( result2 == digits1 );\n-  VERIFY( err02 == ios_base::eofbit );\n-\n-  // now try with showbase, to get currency symbol in format\n-  iss.setf(ios_base::showbase);\n-\n-  iss.imbue(loc_hk);\n-  iss.str(\"(HKD .01)\"); \n-  iterator_type is_it03(iss);\n-  long double result3;\n-  ios_base::iostate err03 = ios_base::goodbit;\n-  mon_get.get(is_it03, end, true, iss, err03, result3);\n-  VERIFY( result3 == digits4 );\n-  VERIFY( err03 == ios_base::goodbit );\n-}\n-\n-void test03()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check money_get works with other iterators besides streambuf\n-  // input iterators.\n-  typedef string::const_iterator iter_type;\n-  typedef money_get<char, iter_type> mon_get_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = goodbit;\n-  const locale loc_c = locale::classic();\n-  const string str = \"0.01Eleanor Roosevelt\";\n-\n-  istringstream iss; \n-  iss.imbue(locale(loc_c, new mon_get_type));\n-\n-  // Iterator advanced, state, output.\n-  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n-\n-  // 01 string\n-  string res1;\n-  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n-  string rem1(end1, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( res1 == \"1\" );\n-  VERIFY( rem1 == \"Eleanor Roosevelt\" );\n-\n-  // 02 long double\n-  iss.clear();\n-  err = goodbit;\n-  long double res2;\n-  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n-  string rem2(end2, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( res2 == 1 );\n-  VERIFY( rem2 == \"Eleanor Roosevelt\" );\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE@euro\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE@euro.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE@euro\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-struct My_money_io : public std::moneypunct<char,false>\n-{\n-  char_type do_decimal_point() const { return '.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::string do_curr_symbol() const { return \"$\"; }\n-  std::string do_positive_sign() const { return \"\"; }\n-  std::string do_negative_sign() const { return \"-\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { symbol, none, sign, value } };\n-    return pat;\n-  }\n-\n-  pattern do_neg_format() const\n-  {\n-    pattern pat = { { symbol, none, sign, value } };\n-    return pat;\n-  }\n-};\n-\n-// libstdc++/5579\n-void test05()\n-{\n-  using namespace std;\n-  typedef istreambuf_iterator<char> InIt;\n-\n-  bool test = true;\n-\n-  locale loc(locale::classic(), new My_money_io);\n-\n-  string bufferp(\"$1234.56\");\n-  string buffern(\"$-1234.56\");\n-  string bufferp_ns(\"1234.56\");\n-  string buffern_ns(\"-1234.56\");\n-\n-  bool intl = false;\n-\n-  InIt iendp, iendn, iendp_ns, iendn_ns;\n-  ios_base::iostate err;\n-  string valp, valn, valp_ns, valn_ns;\n-\n-  const money_get<char,InIt>& mg  =\n-    use_facet<money_get<char, InIt> >(loc);\n-\n-  istringstream fmtp(bufferp);\n-  fmtp.imbue(loc);\n-  InIt ibegp(fmtp);\n-  mg.get(ibegp,iendp,intl,fmtp,err,valp);\n-  VERIFY( valp == \"123456\" );\n-\n-  istringstream fmtn(buffern);\n-  fmtn.imbue(loc);\n-  InIt ibegn(fmtn);\n-  mg.get(ibegn,iendn,intl,fmtn,err,valn);\n-  VERIFY( valn == \"-123456\" );\n-\n-  istringstream fmtp_ns(bufferp_ns);\n-  fmtp_ns.imbue(loc);\n-  InIt ibegp_ns(fmtp_ns);\n-  mg.get(ibegp_ns,iendp_ns,intl,fmtp_ns,err,valp_ns);\n-  VERIFY( valp_ns == \"123456\" );\n-\n-  istringstream fmtn_ns(buffern_ns);\n-  fmtn_ns.imbue(loc);\n-  InIt ibegn_ns(fmtn_ns);\n-  mg.get(ibegn_ns,iendn_ns,intl,fmtn_ns,err,valn_ns);\n-  VERIFY( valn_ns == \"-123456\" );\n-}\n-\n-// We were appending to the string val passed by reference, instead\n-// of constructing a temporary candidate, eventually copied into\n-// val in case of successful parsing.\n-void test06()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  typedef istreambuf_iterator<char> InIt;\n-  InIt iend1, iend2, iend3;\n-\n-  locale loc;\n-  string buffer1(\"123\");\n-  string buffer2(\"456\");\n-  string buffer3(\"Golgafrincham\"); // From Nathan's original idea.\n-\n-  string val;\n-\n-  ios_base::iostate err;\n-\n-  const money_get<char,InIt>& mg =\n-    use_facet<money_get<char, InIt> >(loc);\n-\n-  istringstream fmt1(buffer1);\n-  InIt ibeg1(fmt1);\n-  mg.get(ibeg1,iend1,false,fmt1,err,val);\n-  VERIFY( val == buffer1 );\n-\n-  istringstream fmt2(buffer2);\n-  InIt ibeg2(fmt2);\n-  mg.get(ibeg2,iend2,false,fmt2,err,val);\n-  VERIFY( val == buffer2 );\n-\n-  val = buffer3;\n-  istringstream fmt3(buffer3);\n-  InIt ibeg3(fmt3);\n-  mg.get(ibeg3,iend3,false,fmt3,err,val);\n-  VERIFY( val == buffer3 );\n-}\n-\n-struct My_money_io_a : public std::moneypunct<char,false>\n-{\n-  char_type do_decimal_point() const { return '.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::string do_curr_symbol() const { return \"$\"; }\n-  std::string do_positive_sign() const { return \"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { sign, value, space, symbol } };\n-    return pat;\n-  }\n-};\n-\n-struct My_money_io_b : public std::moneypunct<char,false>\n-{\n-  char_type do_decimal_point() const { return '.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::string do_curr_symbol() const { return \"$\"; }\n-  std::string do_positive_sign() const { return \"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { sign, value, symbol, none } };\n-    return pat;\n-  }\n-};\n-\n-// This one exercises patterns of the type { X, Y, Z, symbol } and\n-// { X, Y, symbol, none } for a two character long sign. Therefore\n-// the optional symbol (showbase is false by default) must be consumed\n-// if present, since \"rest of the sign\" is left to read.\n-void test07()\n-{\n-  using namespace std;\n-  typedef istreambuf_iterator<char> InIt;\n-\n-  bool intl = false;\n-  bool test = true;\n-  ios_base::iostate err;\n-\n-  locale loc_a(locale::classic(), new My_money_io_a);\n-\n-  string buffer_a(\"(1234.56 $)\");\n-  string buffer_a_ns(\"(1234.56 )\");\n-\n-  InIt iend_a, iend_a_ns;\n-  string val_a, val_a_ns;\n-\n-  const money_get<char,InIt>& mg_a  =\n-    use_facet<money_get<char, InIt> >(loc_a);\n-\n-  istringstream fmt_a(buffer_a);\n-  fmt_a.imbue(loc_a);\n-  InIt ibeg_a(fmt_a);\n-  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n-  VERIFY( val_a == \"123456\" );\n-\n-  istringstream fmt_a_ns(buffer_a_ns);\n-  fmt_a_ns.imbue(loc_a);\n-  InIt ibeg_a_ns(fmt_a_ns);\n-  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n-  VERIFY( val_a_ns == \"123456\" );\n-\n-  locale loc_b(locale::classic(), new My_money_io_b);\n-\n-  string buffer_b(\"(1234.56$)\");\n-  string buffer_b_ns(\"(1234.56)\");\n-\n-  InIt iend_b, iend_b_ns;\n-  string val_b, val_b_ns;\n-\n-  const money_get<char,InIt>& mg_b  =\n-    use_facet<money_get<char, InIt> >(loc_b);\n-\n-  istringstream fmt_b(buffer_b);\n-  fmt_b.imbue(loc_b);\n-  InIt ibeg_b(fmt_b);\n-  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n-  VERIFY( val_b == \"123456\" );\n-\n-  istringstream fmt_b_ns(buffer_b_ns);\n-  fmt_b_ns.imbue(loc_b);\n-  InIt ibeg_b_ns(fmt_b_ns);\n-  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n-  VERIFY( val_b_ns == \"123456\" );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test08()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      test05();\n-      test06();\n-      test07();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test07();\n-  test08();\n-  return 0;\n-}"}, {"sha": "3ac25d0204aabd83bfb72e39898482f11586b425", "filename": "libstdc++-v3/testsuite/22_locale/money_get_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 584, "changes": 584, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_get_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,584 +0,0 @@\n-// 2001-09-14 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.6.1.1 money_get members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-// test string version\n-void test01()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef istreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const wstring empty;\n-\n-  // total EPA budget FY 2002\n-  const wstring digits1(L\"720000000000\");\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const wstring digits2(L\"-10000000000000\");  \n-\n-  // not valid input\n-  const wstring digits3(L\"-A\"); \n-\n-  // input less than frac_digits\n-  const wstring digits4(L\"-1\");\n-  \n-  iterator_type end;\n-  wistringstream iss;\n-  iss.imbue(loc_de);\n-  // cache the money_get facet\n-  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n-\n-\n-  iss.str(L\"7.200.000.000,00 \");\n-  iterator_type is_it01(iss);\n-  wstring result1;\n-  ios_base::iostate err01 = ios_base::goodbit;\n-  mon_get.get(is_it01, end, true, iss, err01, result1);\n-  VERIFY( result1 == digits1 );\n-  VERIFY( err01 == ios_base::eofbit );\n-\n-  iss.str(L\"7.200.000.000,00  \");\n-  iterator_type is_it02(iss);\n-  wstring result2;\n-  ios_base::iostate err02 = ios_base::goodbit;\n-  mon_get.get(is_it02, end, true, iss, err02, result2);\n-  VERIFY( result2 == digits1 );\n-  VERIFY( err02 == ios_base::eofbit );\n-\n-  iss.str(L\"7.200.000.000,00  a\");\n-  iterator_type is_it03(iss);\n-  wstring result3;\n-  ios_base::iostate err03 = ios_base::goodbit;\n-  mon_get.get(is_it03, end, true, iss, err03, result3);\n-  VERIFY( result3 == digits1 );\n-  VERIFY( err03 == ios_base::goodbit );\n-\n-  iss.str(L\"\");\n-  iterator_type is_it04(iss);\n-  wstring result4;\n-  ios_base::iostate err04 = ios_base::goodbit;\n-  mon_get.get(is_it04, end, true, iss, err04, result4);\n-  VERIFY( result4 == empty );\n-  VERIFY( err04 == ios_base::failbit | ios_base::eofbit );\n-\n-  iss.str(L\"working for enlightenment and peace in a mad world\");\n-  iterator_type is_it05(iss);\n-  wstring result5;\n-  ios_base::iostate err05 = ios_base::goodbit;\n-  mon_get.get(is_it05, end, true, iss, err05, result5);\n-  VERIFY( result5 == empty );\n-  VERIFY( err05 == ios_base::failbit );\n-\n-  // now try with showbase, to get currency symbol in format\n-  iss.setf(ios_base::showbase);\n-\n-  iss.str(L\"7.200.000.000,00 EUR \");\n-  iterator_type is_it06(iss);\n-  wstring result6;\n-  ios_base::iostate err06 = ios_base::goodbit;\n-  mon_get.get(is_it06, end, true, iss, err06, result6);\n-  VERIFY( result6 == digits1 );\n-  VERIFY( err06 == ios_base::eofbit );\n-\n-  iss.str(L\"7.200.000.000,00 EUR  \"); // Extra space.\n-  iterator_type is_it07(iss);\n-  wstring result7;\n-  ios_base::iostate err07 = ios_base::goodbit;\n-  mon_get.get(is_it07, end, true, iss, err07, result7);\n-  VERIFY( result7 == digits1 );\n-  VERIFY( err07 == ios_base::goodbit );\n-\n-  iss.str(L\"7.200.000.000,00 \\x20ac\"); \n-  iterator_type is_it08(iss);\n-  wstring result8;\n-  ios_base::iostate err08 = ios_base::goodbit;\n-  mon_get.get(is_it08, end, false, iss, err08, result8);\n-  VERIFY( result8 == digits1 );\n-  VERIFY( err08 == ios_base::eofbit );\n-\n-  iss.imbue(loc_hk);\n-  iss.str(L\"HK$7,200,000,000.00\"); \n-  iterator_type is_it09(iss);\n-  wstring result9;\n-  ios_base::iostate err09 = ios_base::goodbit;\n-  mon_get.get(is_it09, end, false, iss, err09, result9);\n-  VERIFY( result9 == digits1 );\n-  VERIFY( err09 == ios_base::eofbit );\n-\n-  iss.str(L\"(HKD 100,000,000,000.00)\"); \n-  iterator_type is_it10(iss);\n-  wstring result10;\n-  ios_base::iostate err10 = ios_base::goodbit;\n-  mon_get.get(is_it10, end, true, iss, err10, result10);\n-  VERIFY( result10 == digits2 );\n-  VERIFY( err10 == ios_base::goodbit );\n-\n-  iss.str(L\"(HKD .01)\"); \n-  iterator_type is_it11(iss);\n-  wstring result11;\n-  ios_base::iostate err11 = ios_base::goodbit;\n-  mon_get.get(is_it11, end, true, iss, err11, result11);\n-  VERIFY( result11 == digits4 );\n-  VERIFY( err11 == ios_base::goodbit );\n-\n-  // for the \"en_HK\" locale the parsing of the very same input streams must\n-  // be successful without showbase too, since the symbol field appears in\n-  // the first positions in the format and the symbol, when present, must be\n-  // consumed.\n-  iss.unsetf(ios_base::showbase);\n-\n-  iss.str(L\"HK$7,200,000,000.00\"); \n-  iterator_type is_it12(iss);\n-  wstring result12;\n-  ios_base::iostate err12 = ios_base::goodbit;\n-  mon_get.get(is_it12, end, false, iss, err12, result12);\n-  VERIFY( result12 == digits1 );\n-  VERIFY( err12 == ios_base::eofbit );\n-\n-  iss.str(L\"(HKD 100,000,000,000.00)\"); \n-  iterator_type is_it13(iss);\n-  wstring result13;\n-  ios_base::iostate err13 = ios_base::goodbit;\n-  mon_get.get(is_it13, end, true, iss, err13, result13);\n-  VERIFY( result13 == digits2 );\n-  VERIFY( err13 == ios_base::goodbit );\n-\n-  iss.str(L\"(HKD .01)\"); \n-  iterator_type is_it14(iss);\n-  wstring result14;\n-  ios_base::iostate err14 = ios_base::goodbit;\n-  mon_get.get(is_it14, end, true, iss, err14, result14);\n-  VERIFY( result14 == digits4 );\n-  VERIFY( err14 == ios_base::goodbit );\n-}\n-\n-\n-// test double/wstring versions\n-void test02()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef istreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const wstring empty;\n-\n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n-  \n-  iterator_type end;\n-  wistringstream iss;\n-  iss.imbue(loc_de);\n-  // cache the money_get facet\n-  const money_get<wchar_t>& mon_get = use_facet<money_get<wchar_t> >(iss.getloc()); \n-\n-  iss.str(L\"7.200.000.000,00 \");\n-  iterator_type is_it01(iss);\n-  long double result1;\n-  ios_base::iostate err01 = ios_base::goodbit;\n-  mon_get.get(is_it01, end, true, iss, err01, result1);\n-  VERIFY( result1 == digits1 );\n-  VERIFY( err01 == ios_base::eofbit );\n-\n-  iss.str(L\"7.200.000.000,00 \");\n-  iterator_type is_it02(iss);\n-  long double result2;\n-  ios_base::iostate err02 = ios_base::goodbit;\n-  mon_get.get(is_it02, end, false, iss, err02, result2);\n-  VERIFY( result2 == digits1 );\n-  VERIFY( err02 == ios_base::eofbit );\n-\n-  // now try with showbase, to get currency symbol in format\n-  iss.setf(ios_base::showbase);\n-\n-  iss.imbue(loc_hk);\n-  iss.str(L\"(HKD .01)\"); \n-  iterator_type is_it03(iss);\n-  long double result3;\n-  ios_base::iostate err03 = ios_base::goodbit;\n-  mon_get.get(is_it03, end, true, iss, err03, result3);\n-  VERIFY( result3 == digits4 );\n-  VERIFY( err03 == ios_base::goodbit );\n-}\n-\n-void test03()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check money_get works with other iterators besides streambuf\n-  // output iterators.\n-  typedef wstring::const_iterator iter_type;\n-  typedef money_get<wchar_t, iter_type> mon_get_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = goodbit;\n-  const locale loc_c = locale::classic();\n-  const wstring str = L\"0.01Eleanor Roosevelt\";\n-\n-  wistringstream iss; \n-  iss.imbue(locale(loc_c, new mon_get_type));\n-\n-  // Iterator advanced, state, output.\n-  const mon_get_type& mg = use_facet<mon_get_type>(iss.getloc());\n-\n-  // 01 string\n-  wstring res1;\n-  iter_type end1 = mg.get(str.begin(), str.end(), false, iss, err, res1);\n-  wstring rem1(end1, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( res1 == L\"1\" );\n-  VERIFY( rem1 == L\"Eleanor Roosevelt\" );\n-\n-  // 02 long double\n-  iss.clear();\n-  err = goodbit;\n-  long double res2;\n-  iter_type end2 = mg.get(str.begin(), str.end(), false, iss, err, res2);\n-  wstring rem2(end2, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( res2 == 1 );\n-  VERIFY( rem2 == L\"Eleanor Roosevelt\" );\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE@euro\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE@euro.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE@euro\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-struct My_money_io : public std::moneypunct<wchar_t,false>\n-{\n-  char_type do_decimal_point() const { return L'.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::wstring do_curr_symbol() const { return L\"$\"; }\n-  std::wstring do_positive_sign() const { return L\"\"; }\n-  std::wstring do_negative_sign() const { return L\"-\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { symbol, none, sign, value } };\n-    return pat;\n-  }\n-\n-  pattern do_neg_format() const\n-  {\n-    pattern pat = { { symbol, none, sign, value } };\n-    return pat;\n-  }\n-};\n-\n-// libstdc++/5579\n-void test05()\n-{\n-  using namespace std;\n-  bool test = true;\n-  typedef istreambuf_iterator<wchar_t> InIt;\n-\n-  locale loc(locale::classic(), new My_money_io);\n-\n-  wstring bufferp(L\"$1234.56\");\n-  wstring buffern(L\"$-1234.56\");\n-  wstring bufferp_ns(L\"1234.56\");\n-  wstring buffern_ns(L\"-1234.56\");\n-\n-  bool intl = false;\n-\n-  InIt iendp, iendn, iendp_ns, iendn_ns;\n-  ios_base::iostate err;\n-  wstring valp, valn, valp_ns, valn_ns;\n-\n-  const money_get<wchar_t,InIt>& mg  =\n-    use_facet<money_get<wchar_t, InIt> >(loc);\n-\n-  wistringstream fmtp(bufferp);\n-  fmtp.imbue(loc);\n-  InIt ibegp(fmtp);\n-  mg.get(ibegp,iendp,intl,fmtp,err,valp);\n-  VERIFY( valp == L\"123456\" );\n-\n-  wistringstream fmtn(buffern);\n-  fmtn.imbue(loc);\n-  InIt ibegn(fmtn);\n-  mg.get(ibegn,iendn,intl,fmtn,err,valn);\n-  VERIFY( valn == L\"-123456\" );\n-\n-  wistringstream fmtp_ns(bufferp_ns);\n-  fmtp_ns.imbue(loc);\n-  InIt ibegp_ns(fmtp_ns);\n-  mg.get(ibegp_ns,iendp_ns,intl,fmtp_ns,err,valp_ns);\n-  VERIFY( valp_ns == L\"123456\" );\n-\n-  wistringstream fmtn_ns(buffern_ns);\n-  fmtn_ns.imbue(loc);\n-  InIt ibegn_ns(fmtn_ns);\n-  mg.get(ibegn_ns,iendn_ns,intl,fmtn_ns,err,valn_ns);\n-  VERIFY( valn_ns == L\"-123456\" );\n-}\n-\n-// We were appending to the string val passed by reference, instead\n-// of constructing a temporary candidate, eventually copied into\n-// val in case of successful parsing.\n-void test06()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  typedef istreambuf_iterator<wchar_t> InIt;\n-  InIt iend1, iend2, iend3;\n-\n-  locale loc;\n-  wstring buffer1(L\"123\");\n-  wstring buffer2(L\"456\");\n-  wstring buffer3(L\"Golgafrincham\");\n-\n-  wstring val;\n-\n-  ios_base::iostate err;\n-\n-  const money_get<wchar_t,InIt>& mg =\n-    use_facet<money_get<wchar_t, InIt> >(loc);\n-\n-  wistringstream fmt1(buffer1);\n-  InIt ibeg1(fmt1);\n-  mg.get(ibeg1,iend1,false,fmt1,err,val);\n-  VERIFY( val == buffer1 );\n-\n-  wistringstream fmt2(buffer2);\n-  InIt ibeg2(fmt2);\n-  mg.get(ibeg2,iend2,false,fmt2,err,val);\n-  VERIFY( val == buffer2 );\n-\n-  val = buffer3;\n-  wistringstream fmt3(buffer3);\n-  InIt ibeg3(fmt3);\n-  mg.get(ibeg3,iend3,false,fmt3,err,val);\n-  VERIFY( val == buffer3 );\n-}\n-\n-struct My_money_io_a : public std::moneypunct<wchar_t,false>\n-{\n-  char_type do_decimal_point() const { return L'.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::wstring do_curr_symbol() const { return L\"$\"; }\n-  std::wstring do_positive_sign() const { return L\"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { sign, value, space, symbol } };\n-    return pat;\n-  }\n-};\n-\n-struct My_money_io_b : public std::moneypunct<wchar_t,false>\n-{\n-  char_type do_decimal_point() const { return L'.'; }\n-  std::string do_grouping() const { return \"\\004\"; }\n-  \n-  std::wstring do_curr_symbol() const { return L\"$\"; }\n-  std::wstring do_positive_sign() const { return L\"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_pos_format() const\n-  {\n-    pattern pat = { { sign, value, symbol, none } };\n-    return pat;\n-  }\n-};\n-\n-// This one exercises patterns of the type { X, Y, Z, symbol } and\n-// { X, Y, symbol, none } for a two character long sign. Therefore\n-// the optional symbol (showbase is false by default) must be consumed\n-// if present, since \"rest of the sign\" is left to read.\n-void test07()\n-{\n-  using namespace std;\n-  bool test = true;\n-  typedef istreambuf_iterator<wchar_t> InIt;\n-\n-  bool intl = false;\n-  ios_base::iostate err;\n-\n-  locale loc_a(locale::classic(), new My_money_io_a);\n-\n-  wstring buffer_a(L\"(1234.56 $)\");\n-  wstring buffer_a_ns(L\"(1234.56 )\");\n-\n-  InIt iend_a, iend_a_ns;\n-  wstring val_a, val_a_ns;\n-\n-  const money_get<wchar_t,InIt>& mg_a  =\n-    use_facet<money_get<wchar_t, InIt> >(loc_a);\n-\n-  wistringstream fmt_a(buffer_a);\n-  fmt_a.imbue(loc_a);\n-  InIt ibeg_a(fmt_a);\n-  mg_a.get(ibeg_a,iend_a,intl,fmt_a,err,val_a);\n-  VERIFY( val_a == L\"123456\" );\n-\n-  wistringstream fmt_a_ns(buffer_a_ns);\n-  fmt_a_ns.imbue(loc_a);\n-  InIt ibeg_a_ns(fmt_a_ns);\n-  mg_a.get(ibeg_a_ns,iend_a_ns,intl,fmt_a_ns,err,val_a_ns);\n-  VERIFY( val_a_ns == L\"123456\" );\n-\n-  locale loc_b(locale::classic(), new My_money_io_b);\n-\n-  wstring buffer_b(L\"(1234.56$)\");\n-  wstring buffer_b_ns(L\"(1234.56)\");\n-\n-  InIt iend_b, iend_b_ns;\n-  wstring val_b, val_b_ns;\n-\n-  const money_get<wchar_t,InIt>& mg_b  =\n-    use_facet<money_get<wchar_t, InIt> >(loc_b);\n-\n-  wistringstream fmt_b(buffer_b);\n-  fmt_b.imbue(loc_b);\n-  InIt ibeg_b(fmt_b);\n-  mg_b.get(ibeg_b,iend_b,intl,fmt_b,err,val_b);\n-  VERIFY( val_b == L\"123456\" );\n-\n-  wistringstream fmt_b_ns(buffer_b_ns);\n-  fmt_b_ns.imbue(loc_b);\n-  InIt ibeg_b_ns(fmt_b_ns);\n-  mg_b.get(ibeg_b_ns,iend_b_ns,intl,fmt_b_ns,err,val_b_ns);\n-  VERIFY( val_b_ns == L\"123456\" );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test08()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      test05();\n-      test06();\n-      test07();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n-int main()\n-{\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test07();\n-  test08();\n-#endif\n-  return 0;\n-}"}, {"sha": "e4f27c723db60b28662d3a4a58451a6acf286aba", "filename": "libstdc++-v3/testsuite/22_locale/money_put/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.6.2  Template class money_put\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -38,18 +37,8 @@ void test01()\n   typedef test_type::iter_type iter_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_money_put: public std::money_put<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_money_put facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/money_put.cc"}, {"sha": "13f57a956378c4d3ae08e6c4fa3a61aa39681ad7", "filename": "libstdc++-v3/testsuite/22_locale/money_put/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-08-27  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2  Template class money_put\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_money_put: public std::money_put<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_money_put facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "cbc7889512986446eda1df6368cf73cfea042ff2", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/1.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,129 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test string version\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const string digits1(\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const string digits2(\"-10000000000000\");  \n+\n+  // not valid input\n+  const string digits3(\"-A\"); \n+\n+  // input less than frac_digits\n+  const string digits4(\"-1\");\n+  \n+  // cache the money_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_de);\n+  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  string result1 = oss.str();\n+  VERIFY( result1 == \"7.200.000.000,00 \");\n+\n+  oss.str(empty);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  string result2 = oss.str();\n+  VERIFY( result2 == \"7.200.000.000,00 \");\n+\n+  // intl and non-intl versions should be the same.\n+  VERIFY( result1 == result2 );\n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  oss.str(empty);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  string result3 = oss.str();\n+  VERIFY( result3 == \"7.200.000.000,00 EUR \");\n+\n+  oss.str(empty);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  string result4 = oss.str();\n+  VERIFY( result4 == \"7.200.000.000,00 \\244\");\n+\n+  // intl and non-intl versions should be different.\n+  VERIFY( result3 != result4 );\n+  VERIFY( result3 != result1 );\n+  VERIFY( result4 != result2 );\n+\n+  oss.unsetf(ios_base::showbase);\n+\n+  // test io.width() > length\n+  // test various fill strategies\n+  oss.str(empty);\n+  oss.width(20);\n+  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  string result10 = oss.str();\n+  VERIFY( result10 == \"***************-,01*\");\n+\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::internal);\n+  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  string result11 = oss.str();\n+  VERIFY( result11 == \"-,01****************\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "72428445d221b347c9e9d352379e7356380f5dfb", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/2.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,120 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test string version\n+void test02()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const string digits1(\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const string digits2(\"-10000000000000\");  \n+\n+  // not valid input\n+  const string digits3(\"-A\"); \n+\n+  // input less than frac_digits\n+  const string digits4(\"-1\");\n+  \n+  // cache the money_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_hk);\n+  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  // test sign of more than one digit, say hong kong.\n+  oss.str(empty);\n+  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  string result5 = oss.str();\n+  VERIFY( result5 == \"HK$7,200,000,000.00\");\n+\n+  oss.str(empty);\n+  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n+  string result6 = oss.str();\n+  VERIFY( result6 == \"(HKD 100,000,000,000.00)\");\n+\n+  // test one-digit formats without zero padding\n+  oss.imbue(loc_c);\n+  oss.str(empty);\n+  const money_put<char>& mon_put2 = use_facet<money_put<char> >(oss.getloc()); \n+  iterator_type os_it07 = mon_put2.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  string result7 = oss.str();\n+  VERIFY( result7 == \"1\");\n+\n+  // test one-digit formats with zero padding, zero frac widths\n+  oss.imbue(loc_hk);\n+  oss.str(empty);\n+  const money_put<char>& mon_put3 = use_facet<money_put<char> >(oss.getloc()); \n+  iterator_type os_it08 = mon_put3.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  string result8 = oss.str();\n+  VERIFY( result8 == \"(HKD .01)\");\n+\n+  oss.unsetf(ios_base::showbase);\n+\n+  // test bunk input\n+  oss.str(empty);\n+  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n+  string result9 = oss.str();\n+  VERIFY( result9 == \"\");\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "58e3ff4709930aebfa62c661b622522f01bb93db", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/3.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,109 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test03()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  // cache the money_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_de);\n+  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  string result1 = oss.str();\n+  VERIFY( result1 == \"7.200.000.000,00 \");\n+\n+  oss.str(empty);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  string result2 = oss.str();\n+  VERIFY( result2 == \"7.200.000.000,00 \");\n+\n+  // intl and non-intl versions should be the same.\n+  VERIFY( result1 == result2 );\n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  oss.str(empty);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  string result3 = oss.str();\n+  VERIFY( result3 == \"7.200.000.000,00 EUR \");\n+\n+  oss.str(empty);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  string result4 = oss.str();\n+  VERIFY( result4 == \"7.200.000.000,00 \\244\");\n+\n+  // intl and non-intl versions should be different.\n+  VERIFY( result3 != result4 );\n+  VERIFY( result3 != result1 );\n+  VERIFY( result4 != result2 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "4d4518fb77676c26ba5a69a0b8348763f7970f23", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/4.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,73 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::iterator iter_type;\n+  typedef money_put<char, iter_type> mon_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // woman, art, thief (stole the blues)\n+  const string str(\"1943 Janis Joplin\");\n+  const long double ld = 1943.0;\n+  const string x(str.size(), 'x'); // have to have allocated string!\n+  string res;\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new mon_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n+\n+  // 01 string\n+  res = x;\n+  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n+  string sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity1 == \"1943\" );\n+\n+  // 02 long double\n+  res = x;\n+  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n+  string sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == \"1943\" );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "86a006d00231ac9d4fad6329b321bb2aa0e18fe4", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/5.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<char,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\003\"; }\n+  \n+  std::string do_negative_sign() const { return \"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, space, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5708\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef ostreambuf_iterator<char> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  bool intl = false;\n+\n+  string val(\"-123456\");\n+  const money_put<char,OutIt>& mp  =\n+    use_facet<money_put<char, OutIt> >(loc);\n+\n+  ostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt.str() == \"*(1,234.56)\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "b663d76bbe2212161855f723a8499d58be283eb8", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/6.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,59 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_2 : public std::moneypunct<char,false>\n+{\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\001\"; }\n+};\n+\n+// Make sure we can output a very big amount of money (with grouping too).\n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef ostreambuf_iterator<char> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io_2);\n+\n+  bool intl = false;\n+\n+  long double val = 1.0e50L;\n+  const money_put<char,OutIt>& mp  =\n+    use_facet<money_put<char, OutIt> >(loc);\n+\n+  ostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt.good() );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "c04f700e5cd3b0af303aba6a55ab3d2f699c2297", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/wrapped_env.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "88f84572a912e098a56bc68561d89bd15773177f", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/char/wrapped_locale.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "400ce026ce7eaf2282a090a37fe2c259bdf26d40", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/1.cc", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,129 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test wstring version\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const wstring digits1(L\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const wstring digits2(L\"-10000000000000\");  \n+\n+  // not valid input\n+  const wstring digits3(L\"-A\"); \n+\n+  // input less than frac_digits\n+  const wstring digits4(L\"-1\");\n+  \n+  // cache the money_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_de);\n+  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  wstring result1 = oss.str();\n+  VERIFY( result1 == L\"7.200.000.000,00 \");\n+\n+  oss.str(empty);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  wstring result2 = oss.str();\n+  VERIFY( result2 == L\"7.200.000.000,00 \");\n+\n+  // intl and non-intl versions should be the same.\n+  VERIFY( result1 == result2 );\n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  oss.str(empty);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  wstring result3 = oss.str();\n+  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n+\n+  oss.str(empty);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  wstring result4 = oss.str();\n+  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n+\n+  // intl and non-intl versions should be different.\n+  VERIFY( result3 != result4 );\n+  VERIFY( result3 != result1 );\n+  VERIFY( result4 != result2 );\n+\n+  oss.unsetf(ios_base::showbase);\n+\n+  // test io.width() > length\n+  // test various fill strategies\n+  oss.str(empty);\n+  oss.width(20);\n+  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  wstring result10 = oss.str();\n+  VERIFY( result10 == L\"***************-,01*\");\n+\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::internal);\n+  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n+  wstring result11 = oss.str();\n+  VERIFY( result11 == L\"-,01****************\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "d99a240ff0a91dbb4d55feec3c115e74c1c930bd", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/2.cc", "status": "added", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,120 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test wstring version\n+void test02()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const wstring digits1(L\"720000000000\");\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const wstring digits2(L\"-10000000000000\");  \n+\n+  // not valid input\n+  const wstring digits3(L\"-A\"); \n+\n+  // input less than frac_digits\n+  const wstring digits4(L\"-1\");\n+  \n+  // cache the money_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_hk);\n+  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  // test sign of more than one digit, say hong kong.\n+  oss.str(empty);\n+  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  wstring result5 = oss.str();\n+  VERIFY( result5 == L\"HK$7,200,000,000.00\");\n+\n+  oss.str(empty);\n+  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n+  wstring result6 = oss.str();\n+  VERIFY( result6 == L\"(HKD 100,000,000,000.00)\");\n+\n+  // test one-digit formats without zero padding\n+  oss.imbue(loc_c);\n+  oss.str(empty);\n+  const money_put<wchar_t>& mon_put2 = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  iterator_type os_it07 = mon_put2.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  wstring result7 = oss.str();\n+  VERIFY( result7 == L\"1\");\n+\n+  // test one-digit formats with zero padding, zero frac widths\n+  oss.imbue(loc_hk);\n+  oss.str(empty);\n+  const money_put<wchar_t>& mon_put3 = use_facet<money_put<wchar_t> >(oss.getloc()); \n+  iterator_type os_it08 = mon_put3.put(oss.rdbuf(), true, oss, ' ', digits4);\n+  wstring result8 = oss.str();\n+  VERIFY( result8 == L\"(HKD .01)\");\n+\n+  oss.unsetf(ios_base::showbase);\n+\n+  // test bunk input\n+  oss.str(empty);\n+  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n+  wstring result9 = oss.str();\n+  VERIFY( result9 == L\"\");\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "8a7778396bcb78ff9b3b943600fd8bcae9cd5b96", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/3.cc", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,109 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// test double version\n+void test03()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE@euro\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n+  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n+  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n+  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n+  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n+  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+\n+  // total EPA budget FY 2002\n+  const long double  digits1 = 720000000000.0;\n+\n+  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n+  const long double digits2 = -10000000000000.0;  \n+\n+  // input less than frac_digits\n+  const long double digits4 = -1.0;\n+  \n+  // cache the money_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_de);\n+  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n+\n+  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  wstring result1 = oss.str();\n+  VERIFY( result1 == L\"7.200.000.000,00 \");\n+\n+  oss.str(empty);\n+  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  wstring result2 = oss.str();\n+  VERIFY( result2 == L\"7.200.000.000,00 \");\n+\n+  // intl and non-intl versions should be the same.\n+  VERIFY( result1 == result2 );\n+\n+  // now try with showbase, to get currency symbol in format\n+  oss.setf(ios_base::showbase);\n+\n+  oss.str(empty);\n+  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n+  wstring result3 = oss.str();\n+  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n+\n+  oss.str(empty);\n+  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n+  wstring result4 = oss.str();\n+  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n+\n+  // intl and non-intl versions should be different.\n+  VERIFY( result3 != result4 );\n+  VERIFY( result3 != result1 );\n+  VERIFY( result4 != result2 );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "397fd2ea7fe532c3943b19100d94fabf057b10c5", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/4.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,73 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check money_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::iterator iter_type;\n+  typedef money_put<wchar_t, iter_type> mon_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+  // woman, art, thief (stole the blues)\n+  const wstring str(L\"1943 Janis Joplin\");\n+  const long double ld = 1943.0;\n+  const wstring x(str.size(), 'x'); // have to have allocated wstring!\n+  wstring res;\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new mon_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n+\n+  // 01 wstring\n+  res = x;\n+  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n+  wstring sanity1(res.begin(), ret1);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity1 == L\"1943\" );\n+\n+  // 02 long double\n+  res = x;\n+  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n+  wstring sanity2(res.begin(), ret2);\n+  VERIFY( err == goodbit );\n+  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n+  VERIFY( sanity2 == L\"1943\" );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}"}, {"sha": "aa5a18c93d9071b849fe4ebc8a9d849f26b49465", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/5.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_decimal_point() const { return '.'; }\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\003\"; }\n+  \n+  std::wstring do_negative_sign() const { return L\"()\"; }\n+  \n+  int do_frac_digits() const { return 2; }\n+\n+  pattern do_neg_format() const\n+  {\n+    pattern pat = { { symbol, space, sign, value } };\n+    return pat;\n+  }\n+};\n+\n+// libstdc++/5708\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef ostreambuf_iterator<wchar_t> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io);\n+\n+  bool intl = false;\n+\n+  wstring val(L\"-123456\");\n+  const money_put<wchar_t,OutIt>& mp  =\n+    use_facet<money_put<wchar_t, OutIt> >(loc);\n+\n+  wostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt.str() == L\"*(1,234.56)\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "d92619c554df5d3f955c3e660aaa532a7dda15e2", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/6.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,59 @@\n+// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.2.1 money_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+struct My_money_io_2 : public std::moneypunct<wchar_t,false>\n+{\n+  char_type do_thousands_sep() const { return ','; }\n+  std::string do_grouping() const { return \"\\001\"; }\n+};\n+\n+// Make sure we can output a very big amount of money (with grouping too).\n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef ostreambuf_iterator<wchar_t> OutIt;\n+\n+  locale loc(locale::classic(), new My_money_io_2);\n+\n+  bool intl = false;\n+\n+  long double val = 1.0e50L;\n+  const money_put<wchar_t,OutIt>& mp  = \n+    use_facet<money_put<wchar_t, OutIt> >(loc);\n+\n+  wostringstream fmt;\n+  fmt.imbue(loc);\n+  OutIt out(fmt);\n+  mp.put(out,intl,fmt,'*',val);\n+  VERIFY( fmt.good() );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}"}, {"sha": "c04f700e5cd3b0af303aba6a55ab3d2f699c2297", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/wrapped_env.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "88f84572a912e098a56bc68561d89bd15773177f", "filename": "libstdc++-v3/testsuite/22_locale/money_put/put/wchar_t/wrapped_locale.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "708ae4243ff5dbfd9743919a3226c446c8ff38a1", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_char.cc", "status": "removed", "additions": 0, "deletions": 400, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,400 +0,0 @@\n-// 2001-08-27 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.6.2.1 money_put members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-// test string version\n-void test01()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef ostreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-\n-  // total EPA budget FY 2002\n-  const string digits1(\"720000000000\");\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const string digits2(\"-10000000000000\");  \n-\n-  // not valid input\n-  const string digits3(\"-A\"); \n-\n-  // input less than frac_digits\n-  const string digits4(\"-1\");\n-  \n-\n-  ostringstream oss;\n-  oss.imbue(loc_de);\n-  // cache the money_put facet\n-  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n-\n-\n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  string result1 = oss.str();\n-  VERIFY( result1 == \"7.200.000.000,00 \");\n-\n-  oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  string result2 = oss.str();\n-  VERIFY( result2 == \"7.200.000.000,00 \");\n-\n-  // intl and non-intl versions should be the same.\n-  VERIFY( result1 == result2 );\n-\n-  // now try with showbase, to get currency symbol in format\n-  oss.setf(ios_base::showbase);\n-\n-  oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  string result3 = oss.str();\n-  VERIFY( result3 == \"7.200.000.000,00 EUR \");\n-\n-  oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  string result4 = oss.str();\n-  VERIFY( result4 == \"7.200.000.000,00 \\244\");\n-\n-  // intl and non-intl versions should be different.\n-  VERIFY( result3 != result4 );\n-  VERIFY( result3 != result1 );\n-  VERIFY( result4 != result2 );\n-\n-  // test sign of more than one digit, say hong kong.\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  string result5 = oss.str();\n-  VERIFY( result5 == \"HK$7,200,000,000.00\");\n-\n-  oss.str(empty);\n-  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n-  string result6 = oss.str();\n-  VERIFY( result6 == \"(HKD 100,000,000,000.00)\");\n-\n-  // test one-digit formats without zero padding\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n-  string result7 = oss.str();\n-  VERIFY( result7 == \"1\");\n-\n-  // test one-digit formats with zero padding, zero frac widths\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n-  string result8 = oss.str();\n-  VERIFY( result8 == \"(HKD .01)\");\n-\n-  oss.unsetf(ios_base::showbase);\n-\n-  // test bunk input\n-  oss.str(empty);\n-  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n-  string result9 = oss.str();\n-  VERIFY( result9 == \"\");\n-\n-  // test io.width() > length\n-  // test various fill strategies\n-  oss.imbue(loc_de);\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n-  string result10 = oss.str();\n-  VERIFY( result10 == \"***************-,01*\");\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::internal);\n-  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n-  string result11 = oss.str();\n-  VERIFY( result11 == \"-,01****************\");\n-}\n-\n-// test double version\n-void test02()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef ostreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<char, true> __money_true;\n-  typedef moneypunct<char, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-\n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n-  \n-\n-  ostringstream oss;\n-  oss.imbue(loc_de);\n-  // cache the money_put facet\n-  const money_put<char>& mon_put = use_facet<money_put<char> >(oss.getloc()); \n-\n-\n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  string result1 = oss.str();\n-  VERIFY( result1 == \"7.200.000.000,00 \");\n-\n-  oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  string result2 = oss.str();\n-  VERIFY( result2 == \"7.200.000.000,00 \");\n-\n-  // intl and non-intl versions should be the same.\n-  VERIFY( result1 == result2 );\n-\n-  // now try with showbase, to get currency symbol in format\n-  oss.setf(ios_base::showbase);\n-\n-  oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  string result3 = oss.str();\n-  VERIFY( result3 == \"7.200.000.000,00 EUR \");\n-\n-  oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  string result4 = oss.str();\n-  VERIFY( result4 == \"7.200.000.000,00 \\244\");\n-\n-  // intl and non-intl versions should be different.\n-  VERIFY( result3 != result4 );\n-  VERIFY( result3 != result1 );\n-  VERIFY( result4 != result2 );\n-}\n-\n-void test03()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check money_put works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef string::iterator iter_type;\n-  typedef money_put<char, iter_type> mon_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = goodbit;\n-  const locale loc_c = locale::classic();\n-  // woman, art, thief (stole the blues)\n-  const string str(\"1943 Janis Joplin\");\n-  const long double ld = 1943.0;\n-  const string x(str.size(), 'x'); // have to have allocated string!\n-  string res;\n-\n-  ostringstream oss; \n-  oss.imbue(locale(loc_c, new mon_put_type));\n-\n-  // Iterator advanced, state, output.\n-  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n-\n-  // 01 string\n-  res = x;\n-  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n-  string sanity1(res.begin(), ret1);\n-  VERIFY( err == goodbit );\n-  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n-  VERIFY( sanity1 == \"1943\" );\n-\n-  // 02 long double\n-  res = x;\n-  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n-  string sanity2(res.begin(), ret2);\n-  VERIFY( err == goodbit );\n-  VERIFY( res == \"1943xxxxxxxxxxxxx\" );\n-  VERIFY( sanity2 == \"1943\" );\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE@euro\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE@euro.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE@euro\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-struct My_money_io : public std::moneypunct<char,false>\n-{\n-  char_type do_decimal_point() const { return '.'; }\n-  char_type do_thousands_sep() const { return ','; }\n-  std::string do_grouping() const { return \"\\003\"; }\n-  \n-  std::string do_negative_sign() const { return \"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_neg_format() const\n-  {\n-    pattern pat = { { symbol, space, sign, value } };\n-    return pat;\n-  }\n-};\n-\n-// libstdc++/5708\n-void test05()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<char> OutIt;\n-\n-  locale loc(locale::classic(), new My_money_io);\n-\n-  bool intl = false;\n-\n-  string val(\"-123456\");\n-  const money_put<char,OutIt>& mp  =\n-    use_facet<money_put<char, OutIt> >(loc);\n-\n-  ostringstream fmt;\n-  fmt.imbue(loc);\n-  OutIt out(fmt);\n-  mp.put(out,intl,fmt,'*',val);\n-  VERIFY( fmt.str() == \"*(1,234.56)\" );\n-}\n-\n-struct My_money_io_2 : public std::moneypunct<char,false>\n-{\n-  char_type do_thousands_sep() const { return ','; }\n-  std::string do_grouping() const { return \"\\001\"; }\n-};\n-\n-// Make sure we can output a very big amount of money (with grouping too).\n-void test06()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<char> OutIt;\n-\n-  locale loc(locale::classic(), new My_money_io_2);\n-\n-  bool intl = false;\n-\n-  long double val = 1.0e50L;\n-  const money_put<char,OutIt>& mp  =\n-    use_facet<money_put<char, OutIt> >(loc);\n-\n-  ostringstream fmt;\n-  fmt.imbue(loc);\n-  OutIt out(fmt);\n-  mp.put(out,intl,fmt,'*',val);\n-  VERIFY( fmt );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test07()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      test05();\n-      test06();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test07();\n-  return 0;\n-}"}, {"sha": "1bfe86ba8087286a71153922ed1da0fba63c6bcc", "filename": "libstdc++-v3/testsuite/22_locale/money_put_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 403, "changes": 403, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoney_put_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,403 +0,0 @@\n-// 2001-09-09 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.6.2.1 money_put members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-// test string version\n-void test01()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef ostreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const wstring empty;\n-\n-  // total EPA budget FY 2002\n-  const wstring digits1(L\"720000000000\");\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const wstring digits2(L\"-10000000000000\");  \n-\n-  // not valid input\n-  const wstring digits3(L\"-A\"); \n-\n-  // input less than frac_digits\n-  const wstring digits4(L\"-1\");\n-  \n-  wostringstream oss;\n-  oss.imbue(loc_de);\n-  // cache the money_put facet\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n-\n-\n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  wstring result1 = oss.str();\n-  VERIFY( result1 == L\"7.200.000.000,00 \");\n-\n-  oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  wstring result2 = oss.str();\n-  VERIFY( result2 == L\"7.200.000.000,00 \");\n-\n-  // intl and non-intl versions should be the same.\n-  VERIFY( result1 == result2 );\n-\n-  // now try with showbase, to get currency symbol in format\n-  oss.setf(ios_base::showbase);\n-\n-  oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  wstring result3 = oss.str();\n-  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n-\n-  oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  wstring result4 = oss.str();\n-  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n-\n-  // intl and non-intl versions should be different.\n-  VERIFY( result3 != result4 );\n-  VERIFY( result3 != result1 );\n-  VERIFY( result4 != result2 );\n-\n-  // test sign of more than one digit, say hong kong.\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  iterator_type os_it05 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  wstring result5 = oss.str();\n-  VERIFY( result5 == L\"HK$7,200,000,000.00\");\n-\n-  oss.str(empty);\n-  iterator_type os_it06 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits2);\n-  wstring result6 = oss.str();\n-  VERIFY( result6 == L\"(HKD 100,000,000,000.00)\");\n-\n-  // test one-digit formats without zero padding\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  iterator_type os_it07 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n-  wstring result7 = oss.str();\n-  VERIFY( result7 == L\"1\");\n-\n-  // test one-digit formats with zero padding, zero frac widths\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  iterator_type os_it08 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits4);\n-  wstring result8 = oss.str();\n-  VERIFY( result8 == L\"(HKD .01)\");\n-\n-  oss.unsetf(ios_base::showbase);\n-\n-  // test bunk input\n-  oss.str(empty);\n-  iterator_type os_it09 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits3);\n-  wstring result9 = oss.str();\n-  VERIFY( result9 == L\"\");\n-\n-  // test io.width() > length\n-  // test various fill strategies\n-  oss.imbue(loc_de);\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  iterator_type os_it10 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n-  wstring result10 = oss.str();\n-  VERIFY( result10 == L\"***************-,01*\");\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::internal);\n-  iterator_type os_it11 = mon_put.put(oss.rdbuf(), true, oss, '*', digits4);\n-  wstring result11 = oss.str();\n-  VERIFY( result11 == L\"-,01****************\");\n-}\n-\n-// test double/wstring versions\n-void test02()\n-{\n-  using namespace std;\n-  typedef money_base::part part;\n-  typedef money_base::pattern pattern;\n-  typedef ostreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE@euro\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the moneypunct facets\n-  typedef moneypunct<wchar_t, true> __money_true;\n-  typedef moneypunct<wchar_t, false> __money_false;\n-  const __money_true& monpunct_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monpunct_de_t = use_facet<__money_true>(loc_de); \n-  const __money_false& monpunct_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monpunct_de_f = use_facet<__money_false>(loc_de); \n-  const __money_true& monpunct_hk_t = use_facet<__money_true>(loc_hk); \n-  const __money_false& monpunct_hk_f = use_facet<__money_false>(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const wstring empty;\n-\n-  // total EPA budget FY 2002\n-  const long double  digits1 = 720000000000.0;\n-\n-  // est. cost, national missile \"defense\", expressed as a loss in USD 2001\n-  const long double digits2 = -10000000000000.0;  \n-\n-  // input less than frac_digits\n-  const long double digits4 = -1.0;\n-  \n-\n-  wostringstream oss;\n-  oss.imbue(loc_de);\n-  // cache the money_put facet\n-  const money_put<wchar_t>& mon_put = use_facet<money_put<wchar_t> >(oss.getloc()); \n-\n-\n-  iterator_type os_it01 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  wstring result1 = oss.str();\n-  VERIFY( result1 == L\"7.200.000.000,00 \");\n-\n-  oss.str(empty);\n-  iterator_type os_it02 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  wstring result2 = oss.str();\n-  VERIFY( result2 == L\"7.200.000.000,00 \");\n-\n-  // intl and non-intl versions should be the same.\n-  VERIFY( result1 == result2 );\n-\n-  // now try with showbase, to get currency symbol in format\n-  oss.setf(ios_base::showbase);\n-\n-  oss.str(empty);\n-  iterator_type os_it03 = mon_put.put(oss.rdbuf(), true, oss, ' ', digits1);\n-  wstring result3 = oss.str();\n-  VERIFY( result3 == L\"7.200.000.000,00 EUR \");\n-\n-  oss.str(empty);\n-  iterator_type os_it04 = mon_put.put(oss.rdbuf(), false, oss, ' ', digits1);\n-  wstring result4 = oss.str();\n-  VERIFY( result4 == L\"7.200.000.000,00 \\x20ac\");\n-\n-  // intl and non-intl versions should be different.\n-  VERIFY( result3 != result4 );\n-  VERIFY( result3 != result1 );\n-  VERIFY( result4 != result2 );\n-}\n-\n-void test03()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check money_put works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef wstring::iterator iter_type;\n-  typedef money_put<wchar_t, iter_type> mon_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = goodbit;\n-  const locale loc_c = locale::classic();\n-  // woman, art, thief (stole the blues)\n-  const wstring str(L\"1943 Janis Joplin\");\n-  const long double ld = 1943.0;\n-  const wstring x(str.size(), 'x'); // have to have allocated string!\n-  wstring res;\n-\n-  wostringstream oss; \n-  oss.imbue(locale(loc_c, new mon_put_type));\n-\n-  // Iterator advanced, state, output.\n-  const mon_put_type& mp = use_facet<mon_put_type>(oss.getloc());\n-\n-  // 01 string\n-  res = x;\n-  iter_type ret1 = mp.put(res.begin(), false, oss, ' ', str);\n-  wstring sanity1(res.begin(), ret1);\n-  VERIFY( err == goodbit );\n-  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n-  VERIFY( sanity1 == L\"1943\" );\n-\n-  // 02 long double\n-  res = x;\n-  iter_type ret2 = mp.put(res.begin(), false, oss, ' ', ld);\n-  wstring sanity2(res.begin(), ret2);\n-  VERIFY( err == goodbit );\n-  VERIFY( res == L\"1943xxxxxxxxxxxxx\" );\n-  VERIFY( sanity2 == L\"1943\" );\n-}\n-\n-// libstdc++/5280\n-void test04()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE@euro\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE@euro.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE@euro\", 1))\n-    {\n-      test01();\n-      test02();\n-      test03();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-struct My_money_io : public std::moneypunct<wchar_t,false>\n-{\n-  char_type do_decimal_point() const { return L'.'; }\n-  char_type do_thousands_sep() const { return L','; }\n-  std::string do_grouping() const { return \"\\003\"; }\n-  \n-  std::wstring do_negative_sign() const { return L\"()\"; }\n-  \n-  int do_frac_digits() const { return 2; }\n-\n-  pattern do_neg_format() const\n-  {\n-    pattern pat = { { symbol, space, sign, value } };\n-    return pat;\n-  }\n-};\n-\n-// libstdc++/5708\n-void test05()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<wchar_t> OutIt;\n-\n-  locale loc(locale::classic(), new My_money_io);\n-\n-  bool intl = false;\n-\n-  wstring val(L\"-123456\");\n-  const money_put<wchar_t,OutIt>& mp  =\n-    use_facet<money_put<wchar_t, OutIt> >(loc);\n-\n-  wostringstream fmt;\n-  fmt.imbue(loc);\n-  OutIt out(fmt);\n-  mp.put(out,intl,fmt,L'*',val);\n-  VERIFY( fmt.str() == L\"*(1,234.56)\" );\n-}\n-\n-struct My_money_io_2 : public std::moneypunct<wchar_t,false>\n-{\n-  char_type do_thousands_sep() const { return L','; }\n-  std::string do_grouping() const { return \"\\001\"; }\n-};\n-\n-// Make sure we can output a very big amount of money (with grouping too).\n-void test06()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<wchar_t> OutIt;\n-\n-  locale loc(locale::classic(), new My_money_io_2);\n-\n-  bool intl = false;\n-\n-  long double val = 1.0e50L;\n-  const money_put<wchar_t,OutIt>& mp  =\n-    use_facet<money_put<wchar_t, OutIt> >(loc);\n-\n-  wostringstream fmt;\n-  fmt.imbue(loc);\n-  OutIt out(fmt);\n-  mp.put(out,intl,fmt,'*',val);\n-  VERIFY( fmt );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test07()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test03();\n-      test05();\n-      test06();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n-int main()\n-{\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  test07();\n-#endif\n-  return 0;\n-}"}, {"sha": "6ab09c61a6139660ea3458669554b3a02848fade", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/1.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  // Check for required base class.\n+  typedef std::moneypunct<char, true> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "edfefbbf89b16dddbe804f85fbcf3fe3cebbdd71", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/2.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,44 @@\n+// { dg-do compile }\n+// 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  // Check for required base class.\n+  typedef std::moneypunct<char, false> test_type;\n+  typedef std::locale::facet base_type;\n+  const test_type& obj = std::use_facet<test_type>(std::locale()); \n+  const base_type* base = &obj;\n+  \n+  // Check for required typedefs\n+  typedef test_type::char_type char_type;\n+  typedef test_type::string_type string_type;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "db6c93c45416b55127a6719841c06dfbb9740d66", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/3.cc", "status": "renamed", "additions": 1, "deletions": 29, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -25,32 +25,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-void test01()\n-{\n-  // Check for required base class.\n-  typedef std::moneypunct<char, true> test_type;\n-  typedef std::locale::facet base_type;\n-  const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n-void test02()\n-{\n-  // Check for required base class.\n-  typedef std::moneypunct<char, false> test_type;\n-  typedef std::locale::facet base_type;\n-  const test_type& obj = std::use_facet<test_type>(std::locale()); \n-  const base_type* base = &obj;\n-  \n-  // Check for required typedefs\n-  typedef test_type::char_type char_type;\n-  typedef test_type::string_type string_type;\n-}\n-\n // Should be able to instantiate this for other types besides char, wchar_t\n class gnu_moneypunct_t: public std::moneypunct<unsigned char, true> \n { };\n@@ -68,8 +42,6 @@ void test03()\n \n int main()\n {\n-  test01();\n-  test02();\n   test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct.cc"}, {"sha": "c8d7b9949040f2a9ff89d8e138b82ab6294e581b", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/1.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,99 @@\n+// 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3.1 moneypunct members\n+\n+#include <locale>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<char, true> __money_true;\n+  typedef moneypunct<char, false> __money_false;\n+  const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n+  const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n+\n+  // quick sanity check for data.\n+  char q1 = monp_c_t.decimal_point();\n+  char q2 = monp_c_t.thousands_sep();\n+  char q3 = monp_c_f.decimal_point();\n+  char q4 = monp_c_f.thousands_sep();\n+  string g1 = monp_c_t.grouping();\n+  string g2 = monp_c_f.grouping();\n+  string cs1 = monp_c_t.curr_symbol();\n+  string cs2 = monp_c_f.curr_symbol();\n+  string ps1 = monp_c_t.positive_sign();\n+  string ns1 = monp_c_t.negative_sign();\n+  string ps2 = monp_c_f.positive_sign();\n+  string ns2 = monp_c_f.negative_sign();\n+  int fd1 = monp_c_t.frac_digits();\n+  int fd2 = monp_c_f.frac_digits();\n+  pattern pos1 = monp_c_t.pos_format();\n+  pattern neg1 = monp_c_t.neg_format();\n+  pattern pos2 = monp_c_f.pos_format();\n+  pattern neg2 = monp_c_f.neg_format();\n+\n+  VERIFY( q1 == '.' );\n+  VERIFY( q3 == '.' );\n+  VERIFY( q2 == ',' );\n+  VERIFY( q4 == ',' );\n+  VERIFY( g1 == \"\" );\n+  VERIFY( g2 == \"\" );\n+  VERIFY( cs1 == \"\" );\n+  VERIFY( cs2 == \"\" );\n+  VERIFY( ps1 == \"\" );\n+  VERIFY( ps2 == \"\" );\n+  VERIFY( ns1 == \"\" );\n+  VERIFY( ns2 == \"\" );\n+  VERIFY( fd1 == 0 );\n+  VERIFY( fd2 == 0 );\n+\n+  VERIFY(static_cast<part>(pos1.field[0]) == static_cast<part>(pos2.field[0]));\n+  VERIFY(static_cast<part>(pos1.field[1]) == static_cast<part>(pos2.field[1]));\n+  VERIFY(static_cast<part>(pos1.field[2]) == static_cast<part>(pos2.field[2]));\n+  VERIFY(static_cast<part>(pos1.field[3]) == static_cast<part>(pos2.field[3]));\n+\n+#if 0\n+  VERIFY( pos1[0] == money_base::_S_default_pattern[0] );\n+  VERIFY( pos1[1] == money_base::_S_default_pattern[1] );\n+  VERIFY( pos1[2] == money_base::_S_default_pattern[2] );\n+  VERIFY( pos1[3] == money_base::_S_default_pattern[3] );\n+  VERIFY( pos2 == money_base::_S_default_pattern );\n+  VERIFY( neg1 == money_base::_S_default_pattern );\n+  VERIFY( neg2 == money_base::_S_default_pattern );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "5434ea81575abdf20f819161e4b7e2da21b634a2", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/2.cc", "status": "renamed", "additions": 4, "deletions": 51, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,12 +21,10 @@\n // 22.2.6.3.1 moneypunct members\n \n #include <locale>\n+#include <string>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-void test01()\n+void test02()\n {\n   using namespace std;\n   typedef money_base::part part;\n@@ -36,24 +34,14 @@ void test01()\n \n   // basic construction\n   locale loc_c = locale::classic();\n-  locale loc_us(\"en_US\");\n-  locale loc_fr(\"fr_FR\");\n   locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_us != loc_fr );\n-  VERIFY( loc_us != loc_de );\n-  VERIFY( loc_de != loc_fr );\n \n   // cache the moneypunct facets\n   typedef moneypunct<char, true> __money_true;\n   typedef moneypunct<char, false> __money_false;\n   const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monp_us_t = use_facet<__money_true>(loc_us); \n-  const __money_true& monp_fr_t = use_facet<__money_true>(loc_fr); \n-  const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n   const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monp_us_f = use_facet<__money_false>(loc_us); \n-  const __money_false& monp_fr_f = use_facet<__money_false>(loc_fr); \n+  const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n   const __money_false& monp_de_f = use_facet<__money_false>(loc_de); \n \n   // quick sanity check for data.\n@@ -105,43 +93,8 @@ void test01()\n   VERIFY(static_cast<part>(neg1.field[3]) != static_cast<part>(neg2.field[3]));\n }\n \n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main()\n {\n-  test01();\n   test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_char.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "7f0d017bf1d3ff50fdd8edc822d2657aaa4c1ff8", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/1.cc", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,99 @@\n+// 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.6.3.1 moneypunct members\n+\n+#include <locale>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef money_base::part part;\n+  typedef money_base::pattern pattern;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // cache the moneypunct facets\n+  typedef moneypunct<wchar_t, true> __money_true;\n+  typedef moneypunct<wchar_t, false> __money_false;\n+  const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n+  const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n+\n+  // quick sanity check for data.\n+  wchar_t q1 = monp_c_t.decimal_point();\n+  wchar_t q2 = monp_c_t.thousands_sep();\n+  wchar_t q3 = monp_c_f.decimal_point();\n+  wchar_t q4 = monp_c_f.thousands_sep();\n+  string g1 = monp_c_t.grouping();\n+  string g2 = monp_c_f.grouping();\n+  wstring cs1 = monp_c_t.curr_symbol();\n+  wstring cs2 = monp_c_f.curr_symbol();\n+  wstring ps1 = monp_c_t.positive_sign();\n+  wstring ns1 = monp_c_t.negative_sign();\n+  wstring ps2 = monp_c_f.positive_sign();\n+  wstring ns2 = monp_c_f.negative_sign();\n+  int fd1 = monp_c_t.frac_digits();\n+  int fd2 = monp_c_f.frac_digits();\n+  pattern pos1 = monp_c_t.pos_format();\n+  pattern neg1 = monp_c_t.neg_format();\n+  pattern pos2 = monp_c_f.pos_format();\n+  pattern neg2 = monp_c_f.neg_format();\n+\n+  VERIFY( q1 == L'.' );\n+  VERIFY( q3 == L'.' );\n+  VERIFY( q2 == L',' );\n+  VERIFY( q4 == L',' );\n+  VERIFY( g1 == \"\" );\n+  VERIFY( g2 == \"\" );\n+  VERIFY( cs1 == L\"\" );\n+  VERIFY( cs2 == L\"\" );\n+  VERIFY( ps1 == L\"\" );\n+  VERIFY( ps2 == L\"\" );\n+  VERIFY( ns1 == L\"\" );\n+  VERIFY( ns2 == L\"\" );\n+  VERIFY( fd1 == 0 );\n+  VERIFY( fd2 == 0 );\n+\n+  VERIFY(static_cast<part>(pos1.field[0]) == static_cast<part>(pos2.field[0]));\n+  VERIFY(static_cast<part>(pos1.field[1]) == static_cast<part>(pos2.field[1]));\n+  VERIFY(static_cast<part>(pos1.field[2]) == static_cast<part>(pos2.field[2]));\n+  VERIFY(static_cast<part>(pos1.field[3]) == static_cast<part>(pos2.field[3]));\n+\n+#if 0\n+  VERIFY( pos1[0] == money_base::_S_default_pattern[0] );\n+  VERIFY( pos1[1] == money_base::_S_default_pattern[1] );\n+  VERIFY( pos1[2] == money_base::_S_default_pattern[2] );\n+  VERIFY( pos1[3] == money_base::_S_default_pattern[3] );\n+  VERIFY( pos2 == money_base::_S_default_pattern );\n+  VERIFY( neg1 == money_base::_S_default_pattern );\n+  VERIFY( neg2 == money_base::_S_default_pattern );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "2e258f9ce2c5467f4101185f37392d7c7a3a2c86", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/2.cc", "status": "renamed", "additions": 5, "deletions": 56, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n-// 2001-09-09 Benjamin Kosnik  <bkoz@redhat.com>\n+// 2001-08-23 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -21,13 +21,10 @@\n // 22.2.6.3.1 moneypunct members\n \n #include <locale>\n+#include <string>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-void test01()\n+void test02()\n {\n   using namespace std;\n   typedef money_base::part part;\n@@ -37,24 +34,14 @@ void test01()\n \n   // basic construction\n   locale loc_c = locale::classic();\n-  locale loc_us(\"en_US\");\n-  locale loc_fr(\"fr_FR\");\n   locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_us != loc_fr );\n-  VERIFY( loc_us != loc_de );\n-  VERIFY( loc_de != loc_fr );\n \n   // cache the moneypunct facets\n   typedef moneypunct<wchar_t, true> __money_true;\n   typedef moneypunct<wchar_t, false> __money_false;\n   const __money_true& monp_c_t = use_facet<__money_true>(loc_c); \n-  const __money_true& monp_us_t = use_facet<__money_true>(loc_us); \n-  const __money_true& monp_fr_t = use_facet<__money_true>(loc_fr); \n-  const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n   const __money_false& monp_c_f = use_facet<__money_false>(loc_c); \n-  const __money_false& monp_us_f = use_facet<__money_false>(loc_us); \n-  const __money_false& monp_fr_f = use_facet<__money_false>(loc_fr); \n+  const __money_true& monp_de_t = use_facet<__money_true>(loc_de); \n   const __money_false& monp_de_f = use_facet<__money_false>(loc_de); \n \n   // quick sanity check for data.\n@@ -106,46 +93,8 @@ void test01()\n   VERIFY(static_cast<part>(neg1.field[3]) != static_cast<part>(neg2.field[3]));\n }\n \n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n int main()\n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n   test02();\n-  test03();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct_members_wchar_t.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/members/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "01c761b5669ad7aac64d40be5268de0541f051be", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname/1.cc", "status": "renamed", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct_byname%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-08-24 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,9 +23,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n void test01()\n {\n   using namespace std;", "previous_filename": "libstdc++-v3/testsuite/22_locale/moneypunct_byname.cc"}, {"sha": "4a3ced974cf162a339690917828e2204f5f3d26c", "filename": "libstdc++-v3/testsuite/22_locale/num_get/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.2.1  Template class num_get\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -37,18 +36,8 @@ void test01()\n   typedef test_type::iter_type iter_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_num_get: public std::num_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_num_get facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_get.cc"}, {"sha": "c41a13c44e7bc41faedb450c205a7fda300801e1", "filename": "libstdc++-v3/testsuite/22_locale/num_get/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-11-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1  Template class num_get\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_num_get: public std::num_get<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_num_get facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "7cc897c36f574df1ecc4c9afd193021378579084", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/1.cc", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,170 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  istringstream iss;\n+  iss.imbue(loc_de);\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // bool, simple\n+  iss.str(\"1\");\n+  iterator_type os_it00 = iss.rdbuf();\n+  iterator_type os_it01 = ng.get(os_it00, 0, iss, err, b1);\n+  VERIFY( b1 == true );\n+  VERIFY( err & ios_base::eofbit );\n+\n+  iss.str(\"0\");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == false );\n+  VERIFY( err & eofbit );\n+\n+  // ... and one that does\n+  iss.imbue(loc_de);\n+  iss.str(\"1.294.967.294+++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(\"+1,02345e+308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(\"3,15E-308 \");\n+  iss.clear();\n+  iss.width(20);\n+  iss.precision(10);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  iss.setf(ios_base::uppercase);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == goodbit );\n+\n+  // long double\n+  iss.str(\"6,630025e+4\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == ld1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(\"0 \");\n+  iss.clear();\n+  iss.precision(0);\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == 0 );\n+  VERIFY( err == goodbit );\n+\n+  // const void\n+  iss.str(\"0xbffff74c,\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, v);\n+  VERIFY( &v != &cv );\n+  VERIFY( err == goodbit );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  long long ll1 = 9223372036854775807LL;\n+  long long ll2 = -9223372036854775807LL;\n+  long long ll;\n+\n+  iss.str(\"9.223.372.036.854.775.807\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ll);\n+  VERIFY( ll == ll1 );\n+  VERIFY( err == eofbit );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "4604d11ca9136ec521e5c8ab28f1891cf8bcede1", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/2.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,140 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // C\n+  // bool, more twisted examples\n+  iss.str(\"true \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == true );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(\"false \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b1);\n+  VERIFY( b1 == false );\n+  VERIFY( err == goodbit );\n+\n+  // unsigned long, in a locale that does not group\n+  iss.imbue(loc_c);\n+  iss.str(\"1294967294\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1);\n+  VERIFY( err == eofbit );\n+\n+  iss.str(\"0+++++++++++++++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul2);\n+  VERIFY( err == goodbit );\n+\n+  // double\n+  iss.imbue(loc_c);\n+  iss.str(\"1.02345e+308++++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(\"+3.15e-308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == eofbit );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "253e73561eb157ec1ff62bbc659bb7933c771a53", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/3.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,102 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  istringstream iss;\n+  iss.imbue(loc_hk);\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // HK\n+  // long, in a locale that expects grouping\n+  iss.str(\"2,147,483,647 \");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(\"-2,147,483,647++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l2 );\n+  VERIFY( err == goodbit );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "aed5fcb437090591b52b34260795655a3249d8d6", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/4.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,112 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n+// libstdc++/5331\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_get works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::const_iterator iter_type;\n+  typedef num_get<char, iter_type> num_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+  const locale loc_c = locale::classic();\n+  const string str(\"20000106 Elizabeth Durack\");\n+  const string str2(\"0 true 0xbffff74c Durack\");\n+\n+  istringstream iss; // need an ios, add my num_get facet\n+  iss.imbue(locale(loc_c, new num_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n+\n+  // 01 get(long)\n+  // 02 get(long double)\n+  // 03 get(bool)\n+  // 04 get(void*)\n+\n+  // 01 get(long)\n+  long i = 0;\n+  err = goodbit;\n+  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n+  string rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( i == 20000106);\n+  VERIFY( rem1 == \" Elizabeth Durack\" );\n+\n+  // 02 get(long double)\n+  long double ld = 0.0;\n+  err = goodbit;\n+  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( ld == 20000106);\n+  VERIFY( rem2 == \" Elizabeth Durack\" );\n+\n+  // 03 get(bool)\n+  bool b = 1;\n+  iss.clear();\n+  err = goodbit;\n+  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n+  string rem3(end3, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == 0 );\n+  VERIFY( rem3 == \" true 0xbffff74c Durack\" );\n+\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::boolalpha);\n+  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n+  string rem4(end4, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem4 == \" 0xbffff74c Durack\" );\n+\n+  // 04 get(void*)\n+  void* v;\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n+  string rem5(end5, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem5 == \" Durack\" );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "21f7bef00124737f678069bced7e6724af9df03c", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/5.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,92 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Testing the correct parsing of grouped hexadecimals and octals.\n+void test05()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+ \n+  unsigned long ul;\n+\n+  istringstream iss;\n+\n+  // A locale that expects grouping  \n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n+\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.setf(ios::hex, ios::basefield);\n+  iss.str(\"0xbf.fff.74c \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xbffff74c );\n+\n+  iss.str(\"0Xf.fff \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xffff );\n+\n+  iss.str(\"ffe \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xffe );\n+\n+  iss.setf(ios::oct, ios::basefield);\n+  iss.str(\"07.654.321 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 07654321 );\n+\n+  iss.str(\"07.777 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 07777 );\n+\n+  iss.str(\"776 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0776 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "49f3a46e5c8386be47d75d53e379d2e298471fba", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/6.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,57 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/5816\n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  double d = 0.0;\n+\n+  istringstream iss;\n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n+\n+  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(\"1234,5 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == goodbit );\n+  VERIFY( d == 1234.5 );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "c04f700e5cd3b0af303aba6a55ab3d2f699c2297", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/wrapped_env.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "88f84572a912e098a56bc68561d89bd15773177f", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/char/wrapped_locale.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "a30cf971946fa698cbb8d4fd533279803b7ce844", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/1.cc", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,169 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  wistringstream iss;\n+  iss.imbue(loc_de);\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // bool, simple\n+  iss.str(L\"1\");\n+  iterator_type os_it00 = iss.rdbuf();\n+  iterator_type os_it01 = ng.get(os_it00, 0, iss, err, b1);\n+  VERIFY( b1 == true );\n+  VERIFY( err & ios_base::eofbit );\n+\n+  iss.str(L\"0\");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == false );\n+  VERIFY( err & eofbit );\n+\n+  // ... and one that does\n+  iss.str(L\"1.294.967.294+++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"+1,02345e+308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"3,15E-308 \");\n+  iss.clear();\n+  iss.width(20);\n+  iss.precision(10);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  iss.setf(ios_base::scientific, ios_base::floatfield);\n+  iss.setf(ios_base::uppercase);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == goodbit );\n+\n+  // long double\n+  iss.str(L\"6,630025e+4\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == ld1 );\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"0 \");\n+  iss.clear();\n+  iss.precision(0);\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ld);\n+  VERIFY( ld == 0 );\n+  VERIFY( err == goodbit );\n+\n+  // const void\n+  iss.str(L\"0xbffff74c,\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, v);\n+  VERIFY( &v != &cv );\n+  VERIFY( err == goodbit );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  long long ll1 = 9223372036854775807LL;\n+  long long ll2 = -9223372036854775807LL;\n+  long long ll;\n+\n+  iss.str(L\"9.223.372.036.854.775.807\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ll);\n+  VERIFY( ll == ll1 );\n+  VERIFY( err == eofbit );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "dc11885adf2aed0bbef4b9e17c2231d274d11648", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/2.cc", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,140 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  wistringstream iss;\n+  iss.imbue(loc_c);\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // C\n+  // bool, more twisted examples\n+  iss.str(L\"true \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b0);\n+  VERIFY( b0 == true );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"false \");\n+  iss.clear();\n+  iss.setf(ios_base::boolalpha);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, b1);\n+  VERIFY( b1 == false );\n+  VERIFY( err == goodbit );\n+\n+  // unsigned long, in a locale that does not group\n+  iss.imbue(loc_c);\n+  iss.str(L\"1294967294\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul1);\n+  VERIFY( err == eofbit );\n+\n+  iss.str(L\"0+++++++++++++++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( ul == ul2);\n+  VERIFY( err == goodbit );\n+\n+  // double\n+  iss.imbue(loc_c);\n+  iss.str(L\"1.02345e+308++++++++\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::left, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"+3.15e-308\");\n+  iss.clear();\n+  iss.width(20);\n+  iss.setf(ios_base::right, ios_base::adjustfield);\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( d == d2 );\n+  VERIFY( err == eofbit );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "d3b1118354ba33e1f139a646cced677c551a5334", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/3.cc", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,102 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  long l;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  unsigned long ul;\n+  double d1 =  1.02345e+308;\n+  double d2 = 3.15e-308;\n+  double d;\n+  long double ld1 = 6.630025e+4;\n+  long double ld2 = 0.0;\n+  long double ld;\n+  void* v;\n+  const void* cv = &ul2;\n+\n+  // cache the num_get facet\n+  wistringstream iss;\n+  iss.imbue(loc_hk);\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  // HK\n+  // long, in a locale that expects grouping\n+  iss.str(L\"2,147,483,647 \");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l1 );\n+  VERIFY( err == goodbit );\n+\n+  iss.str(L\"-2,147,483,647++++++\");\n+  iss.clear();\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, l);\n+  VERIFY( l == l2 );\n+  VERIFY( err == goodbit );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "f23aa0f1555cd0fef48e59cc43e8c2b8ec03d5e7", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/4.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,112 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n+// libstdc++/5331\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_get works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::const_iterator iter_type;\n+  typedef num_get<wchar_t, iter_type> num_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str(L\"20000106 Elizabeth Durack\");\n+  const wstring str2(L\"0 true 0xbffff74c Durack\");\n+\n+  wistringstream iss; // need an ios, add my num_get facet\n+  iss.imbue(locale(loc_c, new num_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n+\n+  // 01 get(long)\n+  // 02 get(long double)\n+  // 03 get(bool)\n+  // 04 get(void*)\n+\n+  // 01 get(long)\n+  long i = 0;\n+  err = goodbit;\n+  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n+  wstring rem1(end1, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( i == 20000106);\n+  VERIFY( rem1 == L\" Elizabeth Durack\" );\n+\n+  // 02 get(long double)\n+  long double ld = 0.0;\n+  err = goodbit;\n+  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n+  wstring rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( ld == 20000106);\n+  VERIFY( rem2 == L\" Elizabeth Durack\" );\n+\n+  // 03 get(bool)\n+  bool b = 1;\n+  iss.clear();\n+  err = goodbit;\n+  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n+  wstring rem3(end3, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == 0 );\n+  VERIFY( rem3 == L\" true 0xbffff74c Durack\" );\n+\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::boolalpha);\n+  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n+  wstring rem4(end4, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem4 == L\" 0xbffff74c Durack\" );\n+\n+  // 04 get(void*)\n+  void* v;\n+  iss.clear();\n+  err = goodbit;\n+  iss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n+  wstring rem5(end5, str2.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( b == true );\n+  VERIFY( rem5 == L\" Durack\" );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "7eaaa89e9f7210fe6cf8ba06cc55bdcf60aa794a", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/5.cc", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,92 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Testing the correct parsing of grouped hexadecimals and octals.\n+void test05()\n+{\n+  using namespace std;\n+\n+  bool test = true;\n+ \n+  unsigned long ul;\n+\n+  wistringstream iss;\n+\n+  // A locale that expects grouping  \n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n+\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.setf(ios::hex, ios::basefield);\n+  iss.str(L\"0xbf.fff.74c \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xbffff74c );\n+\n+  iss.str(L\"0Xf.fff \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xffff );\n+\n+  iss.str(L\"ffe \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0xffe );\n+\n+  iss.setf(ios::oct, ios::basefield);\n+  iss.str(L\"07.654.321 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 07654321 );\n+\n+  iss.str(L\"07.777 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 07777 );\n+\n+  iss.str(L\"776 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, ul);\n+  VERIFY( err == goodbit );\n+  VERIFY( ul == 0776 );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "2f4bb1bb0b429b47f13cc26e7d64051364ce9fbe", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/6.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2F6.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,57 @@\n+// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.1.1  num_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/5816\n+void test06()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  double d = 0.0;\n+\n+  wistringstream iss;\n+  locale loc_de(\"de_DE\");\n+  iss.imbue(loc_de);\n+\n+  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  ios_base::iostate err = ios_base::goodbit;\n+\n+  iss.str(L\"1234,5 \");\n+  err = goodbit;\n+  ng.get(iss.rdbuf(), 0, iss, err, d);\n+  VERIFY( err == goodbit );\n+  VERIFY( d == 1234.5 );\n+}\n+\n+int main()\n+{\n+  test06();\n+  return 0;\n+}\n+\n+\n+// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "c04f700e5cd3b0af303aba6a55ab3d2f699c2297", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/wrapped_env.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "88f84572a912e098a56bc68561d89bd15773177f", "filename": "libstdc++-v3/testsuite/22_locale/num_get/get/wchar_t/wrapped_locale.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get%2Fget%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,61 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+#define main discard_main_6\n+#include \"6.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  two.push_back(&test06);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "06e3322e0adcd2e63aa96d54ed57a434ce4e4ec1", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_char.cc", "status": "removed", "additions": 0, "deletions": 446, "changes": 446, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,446 +0,0 @@\n-// 2001-11-21 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.2.1.1  num_get members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-void test01()\n-{\n-  using namespace std;\n-  typedef istreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-  char c;\n-\n-  bool b1 = true;\n-  bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  unsigned long ul;\n-  double d1 =  1.02345e+308;\n-  double d2 = 3.15e-308;\n-  double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n-\n-  // cache the num_get facet\n-  istringstream iss;\n-  iss.imbue(loc_de);\n-  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  // bool, simple\n-  iss.str(\"1\");\n-  iterator_type os_it00 = iss.rdbuf();\n-  iterator_type os_it01 = ng.get(os_it00, 0, iss, err, b1);\n-  VERIFY( b1 == true );\n-  VERIFY( err & ios_base::eofbit );\n-\n-  iss.str(\"0\");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b0);\n-  VERIFY( b0 == false );\n-  VERIFY( err & eofbit );\n-\n-  // bool, more twisted examples\n-  iss.imbue(loc_c);\n-  iss.str(\"true \");\n-  iss.clear();\n-  iss.setf(ios_base::boolalpha);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b0);\n-  VERIFY( b0 == true );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(\"false \");\n-  iss.clear();\n-  iss.setf(ios_base::boolalpha);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b1);\n-  VERIFY( b1 == false );\n-  VERIFY( err == goodbit );\n-\n-  // long, in a locale that expects grouping\n-  iss.imbue(loc_hk);\n-  iss.str(\"2,147,483,647 \");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, l);\n-  VERIFY( l == l1 );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(\"-2,147,483,647++++++\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, l);\n-  VERIFY( l == l2 );\n-  VERIFY( err == goodbit );\n-\n-  // unsigned long, in a locale that does not group\n-  iss.imbue(loc_c);\n-  iss.str(\"1294967294\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul1);\n-  VERIFY( err == eofbit );\n-\n-  iss.str(\"0+++++++++++++++++++\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul2);\n-  VERIFY( err == goodbit );\n-\n-  // ... and one that does\n-  iss.imbue(loc_de);\n-  iss.str(\"1.294.967.294+++++++\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::left, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul1 );\n-  VERIFY( err == goodbit );\n-\n-  // double\n-  iss.imbue(loc_c);\n-  iss.str(\"1.02345e+308++++++++\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::left, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d1 );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(\"+3.15e-308\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d2 );\n-  VERIFY( err == eofbit );\n-\n-  iss.imbue(loc_de);\n-  iss.str(\"+1,02345e+308\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  iss.setf(ios_base::scientific, ios_base::floatfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d1 );\n-  VERIFY( err == eofbit );\n-\n-  iss.str(\"3,15E-308 \");\n-  iss.clear();\n-  iss.width(20);\n-  iss.precision(10);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  iss.setf(ios_base::scientific, ios_base::floatfield);\n-  iss.setf(ios_base::uppercase);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d2 );\n-  VERIFY( err == goodbit );\n-\n-  // long double\n-  iss.str(\"6,630025e+4\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( ld == ld1 );\n-  VERIFY( err == eofbit );\n-\n-  iss.str(\"0 \");\n-  iss.clear();\n-  iss.precision(0);\n-  iss.setf(ios_base::fixed, ios_base::floatfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( ld == 0 );\n-  VERIFY( err == goodbit );\n-\n-  // const void\n-  iss.str(\"0xbffff74c,\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, v);\n-  VERIFY( &v != &cv );\n-  VERIFY( err == goodbit );\n-\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n-  long long ll;\n-\n-  iss.str(\"9.223.372.036.854.775.807\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ll);\n-  VERIFY( ll == ll1 );\n-  VERIFY( err == eofbit );\n-#endif\n-}\n-\n-// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n-// libstdc++/5331\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check num_get works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef string::const_iterator iter_type;\n-  typedef num_get<char, iter_type> num_get_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-  const locale loc_c = locale::classic();\n-  const string str(\"20000106 Elizabeth Durack\");\n-  const string str2(\"0 true 0xbffff74c Durack\");\n-\n-  istringstream iss; // need an ios, add my num_get facet\n-  iss.imbue(locale(loc_c, new num_get_type));\n-\n-  // Iterator advanced, state, output.\n-  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n-\n-  // 01 get(long)\n-  // 02 get(long double)\n-  // 03 get(bool)\n-  // 04 get(void*)\n-\n-  // 01 get(long)\n-  long i = 0;\n-  err = goodbit;\n-  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n-  string rem1(end1, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( i == 20000106);\n-  VERIFY( rem1 == \" Elizabeth Durack\" );\n-\n-  // 02 get(long double)\n-  long double ld = 0.0;\n-  err = goodbit;\n-  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n-  string rem2(end2, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( ld == 20000106);\n-  VERIFY( rem2 == \" Elizabeth Durack\" );\n-\n-  // 03 get(bool)\n-  bool b = 1;\n-  iss.clear();\n-  err = goodbit;\n-  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n-  string rem3(end3, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == 0 );\n-  VERIFY( rem3 == \" true 0xbffff74c Durack\" );\n-\n-  iss.clear();\n-  err = goodbit;\n-  iss.setf(ios_base::boolalpha);\n-  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n-  string rem4(end4, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == true );\n-  VERIFY( rem4 == \" 0xbffff74c Durack\" );\n-\n-  // 04 get(void*)\n-  void* v;\n-  iss.clear();\n-  err = goodbit;\n-  iss.setf(ios_base::fixed, ios_base::floatfield);\n-  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n-  string rem5(end5, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == true );\n-  VERIFY( rem5 == \" Durack\" );\n-}\n-\n-// libstdc++/5280\n-void test03()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// Testing the correct parsing of grouped hexadecimals and octals.\n-void test04()\n-{\n-  using namespace std;\n-\n-  bool test = true;\n- \n-  unsigned long ul;\n-\n-  istringstream iss;\n-\n-  // A locale that expects grouping  \n-  locale loc_de(\"de_DE\");\n-  iss.imbue(loc_de);\n-\n-  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  iss.setf(ios::hex, ios::basefield);\n-  iss.str(\"0xbf.fff.74c \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xbffff74c );\n-\n-  iss.str(\"0Xf.fff \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xffff );\n-\n-  iss.str(\"ffe \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xffe );\n-\n-  iss.setf(ios::oct, ios::basefield);\n-  iss.str(\"07.654.321 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 07654321 );\n-\n-  iss.str(\"07.777 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 07777 );\n-\n-  iss.str(\"776 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0776 );\n-}\n-\n-// libstdc++/5816\n-void test05()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  double d = 0.0;\n-\n-  istringstream iss;\n-  locale loc_de(\"de_DE\");\n-  iss.imbue(loc_de);\n-\n-  const num_get<char>& ng = use_facet<num_get<char> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  iss.str(\"1234,5 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( err == goodbit );\n-  VERIFY( d == 1234.5 );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test06()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test04();\n-      test05();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-  return 0;\n-}\n-\n-\n-// Kathleen Hannah, humanitarian, woman, art-thief"}, {"sha": "088d4f8c9e325b75a4ce8e1ec31c75254087d420", "filename": "libstdc++-v3/testsuite/22_locale/num_get_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 456, "changes": 456, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_get_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,456 +0,0 @@\n-// 2001-11-26 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.2.1.1  num_get members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-void test01()\n-{\n-  using namespace std;\n-  typedef istreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-  char c;\n-\n-  bool b1 = true;\n-  bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  long l;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  unsigned long ul;\n-  double d1 =  1.02345e+308;\n-  double d2 = 3.15e-308;\n-  double d;\n-  long double ld1 = 6.630025e+4;\n-  long double ld2 = 0.0;\n-  long double ld;\n-  void* v;\n-  const void* cv = &ul2;\n-\n-  // cache the num_get facet\n-  wistringstream iss;\n-  iss.imbue(loc_de);\n-  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  // bool, simple\n-  iss.str(L\"1\");\n-  iterator_type os_it00 = iss.rdbuf();\n-  iterator_type os_it01 = ng.get(os_it00, 0, iss, err, b1);\n-  VERIFY( b1 == true );\n-  VERIFY( err & ios_base::eofbit );\n-\n-  iss.str(L\"0\");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b0);\n-  VERIFY( b0 == false );\n-  VERIFY( err & eofbit );\n-\n-  // bool, more twisted examples\n-  iss.imbue(loc_c);\n-  iss.str(L\"true \");\n-  iss.clear();\n-  iss.setf(ios_base::boolalpha);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b0);\n-  VERIFY( b0 == true );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(L\"false \");\n-  iss.clear();\n-  iss.setf(ios_base::boolalpha);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, b1);\n-  VERIFY( b1 == false );\n-  VERIFY( err == goodbit );\n-\n-  // long, in a locale that expects grouping\n-  iss.imbue(loc_hk);\n-  iss.str(L\"2,147,483,647 \");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, l);\n-  VERIFY( l == l1 );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(L\"-2,147,483,647++++++\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, l);\n-  VERIFY( l == l2 );\n-  VERIFY( err == goodbit );\n-\n-  // unsigned long, in a locale that does not group\n-  iss.imbue(loc_c);\n-  iss.str(L\"1294967294\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul1);\n-  VERIFY( err == eofbit );\n-\n-  iss.str(L\"0+++++++++++++++++++\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul2);\n-  VERIFY( err == goodbit );\n-\n-  // ... and one that does\n-  iss.imbue(loc_de);\n-  iss.str(L\"1.294.967.294+++++++\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::left, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( ul == ul1 );\n-  VERIFY( err == goodbit );\n-\n-  // double\n-  iss.imbue(loc_c);\n-  iss.str(L\"1.02345e+308++++++++\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::left, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d1 );\n-  VERIFY( err == goodbit );\n-\n-  iss.str(L\"+3.15e-308\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d2 );\n-  VERIFY( err == eofbit );\n-\n-  iss.imbue(loc_de);\n-  iss.str(L\"+1,02345e+308\");\n-  iss.clear();\n-  iss.width(20);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  iss.setf(ios_base::scientific, ios_base::floatfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d1 );\n-  VERIFY( err == eofbit );\n-\n-  iss.str(L\"3,15E-308 \");\n-  iss.clear();\n-  iss.width(20);\n-  iss.precision(10);\n-  iss.setf(ios_base::right, ios_base::adjustfield);\n-  iss.setf(ios_base::scientific, ios_base::floatfield);\n-  iss.setf(ios_base::uppercase);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( d == d2 );\n-  VERIFY( err == goodbit );\n-\n-  // long double\n-  iss.str(L\"6,630025e+4\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( ld == ld1 );\n-  VERIFY( err == eofbit );\n-\n-  iss.str(L\"0 \");\n-  iss.clear();\n-  iss.precision(0);\n-  iss.setf(ios_base::fixed, ios_base::floatfield);\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ld);\n-  VERIFY( ld == 0 );\n-  VERIFY( err == goodbit );\n-\n-  // const void\n-  iss.str(L\"0xbffff74c,\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, v);\n-  VERIFY( &v != &cv );\n-  VERIFY( err == goodbit );\n-\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n-  long long ll;\n-\n-  iss.str(L\"9.223.372.036.854.775.807\");\n-  iss.clear();\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ll);\n-  VERIFY( ll == ll1 );\n-  VERIFY( err == eofbit );\n-#endif\n-}\n-\n-// 2002-01-10  David Seymour  <seymour_dj@yahoo.com>\n-// libstdc++/5331\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check num_get works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef wstring::const_iterator iter_type;\n-  typedef num_get<wchar_t, iter_type> num_get_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-  const locale loc_c = locale::classic();\n-  const wstring str(L\"20000106 Elizabeth Durack\");\n-  const wstring str2(L\"0 true 0xbffff74c Durack\");\n-\n-  istringstream iss; // need an ios, add my num_get facet\n-  iss.imbue(locale(loc_c, new num_get_type));\n-\n-  // Iterator advanced, state, output.\n-  const num_get_type& ng = use_facet<num_get_type>(iss.getloc());\n-\n-  // 01 get(long)\n-  // 02 get(long double)\n-  // 03 get(bool)\n-  // 04 get(void*)\n-\n-  // 01 get(long)\n-  long i = 0;\n-  err = goodbit;\n-  iter_type end1 = ng.get(str.begin(), str.end(), iss, err, i);\n-  wstring rem1(end1, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( i == 20000106);\n-  VERIFY( rem1 == L\" Elizabeth Durack\" );\n-\n-  // 02 get(long double)\n-  long double ld = 0.0;\n-  err = goodbit;\n-  iter_type end2 = ng.get(str.begin(), str.end(), iss, err, ld);\n-  wstring rem2(end2, str.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( ld == 20000106);\n-  VERIFY( rem2 == L\" Elizabeth Durack\" );\n-\n-  // 03 get(bool)\n-  //  const string str2(\"0 true 0xbffff74c Durack\");\n-  bool b = 1;\n-  iss.clear();\n-  err = goodbit;\n-  iter_type end3 = ng.get(str2.begin(), str2.end(), iss, err, b);\n-  wstring rem3(end3, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == 0 );\n-  VERIFY( rem3 == L\" true 0xbffff74c Durack\" );\n-\n-  iss.clear();\n-  err = goodbit;\n-  iss.setf(ios_base::boolalpha);\n-  iter_type end4 = ng.get(++end3, str2.end(), iss, err, b);\n-  wstring rem4(end4, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == true );\n-  VERIFY( rem4 == L\" 0xbffff74c Durack\" );\n-\n-  // 04 get(void*)\n-  void* v;\n-  iss.clear();\n-  err = goodbit;\n-  iss.setf(ios_base::fixed, ios_base::floatfield);\n-  iter_type end5 = ng.get(++end4, str2.end(), iss, err, v);\n-  wstring rem5(end5, str2.end());\n-  VERIFY( err == goodbit );\n-  VERIFY( b == true );\n-  VERIFY( rem5 == L\" Durack\" );\n-}\n-\n-// libstdc++/5280\n-void test03()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// Testing the correct parsing of grouped hexadecimals and octals.\n-void test04()\n-{\n-  using namespace std;\n-\n-  bool test = true;\n- \n-  unsigned long ul;\n-\n-  wistringstream iss;\n-\n-  // A locale that expects grouping\n-  locale loc_de(\"de_DE\");\n-  iss.imbue(loc_de);\n-\n-  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  iss.setf(ios::hex, ios::basefield);\n-  iss.str(L\"0xbf.fff.74c \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xbffff74c );\n-\n-  iss.str(L\"0Xf.fff \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xffff );\n-\n-  iss.str(L\"ffe \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0xffe );\n-\n-  iss.setf(ios::oct, ios::basefield);\n-  iss.str(L\"07.654.321 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 07654321 );\n-\n-  iss.str(L\"07.777 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 07777 );\n-\n-  iss.str(L\"776 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, ul);\n-  VERIFY( err == goodbit );\n-  VERIFY( ul == 0776 );\n-}\n-\n-// libstdc++/5816\n-void test05()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  double d = 0.0;\n-\n-  wistringstream iss;\n-  locale loc_de(\"de_DE\");\n-  iss.imbue(loc_de);\n-\n-  const num_get<wchar_t>& ng = use_facet<num_get<wchar_t> >(iss.getloc()); \n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  ios_base::iostate err = ios_base::goodbit;\n-\n-  iss.str(L\"1234,5 \");\n-  err = goodbit;\n-  ng.get(iss.rdbuf(), 0, iss, err, d);\n-  VERIFY( err == goodbit );\n-  VERIFY( d == 1234.5 );\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test06()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      test04();\n-      test05();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n-int main()\n-{\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  test06();\n-#endif\n-  return 0;\n-}\n-\n-\n-// Kathleen Hannah, humanitarian, woman, art-thief\n-\n-\n-\n-\n-"}, {"sha": "2dabe86d8304efde40a23846094d6bb72efe002d", "filename": "libstdc++-v3/testsuite/22_locale/num_put/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-11-19  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.2.2  Template class num_put\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -37,18 +36,8 @@ void test01()\n   typedef test_type::iter_type iter_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_num_put: public std::num_put<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_num_put facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/num_put.cc"}, {"sha": "67aeefaffec873de2ccd4797988dd0c252adfea2", "filename": "libstdc++-v3/testsuite/22_locale/num_put/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-11-19  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2  Template class num_put\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_num_put: public std::num_put<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_num_put facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "d73ceb733f4e666d8597092afd99312466d6f46a", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/1.cc", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,176 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  string result1;\n+  string result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_de);\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n+\n+  // bool, simple\n+  iterator_type os_it00 = oss.rdbuf();\n+  iterator_type os_it01 = np.put(os_it00, oss, '+', b1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"1\" );\n+  //  VERIFY( os_it00 != os_it01 );\n+\n+  oss.str(empty);\n+  np.put(oss.rdbuf(), oss, '+', b0);\n+  result2 = oss.str();\n+  VERIFY( result2 == \"0\" );\n+\n+  // ... and one that does\n+  oss.imbue(loc_de);\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', ul1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"1.294.967.294+++++++\" );\n+\n+  // double\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', d1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"1,79769e+308++++++++\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"++++++++2,22507e-308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  oss.setf(ios_base::scientific, ios_base::floatfield);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result2 = oss.str();\n+  VERIFY( result2 == \"+++++++2,225074e-308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.precision(10);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  oss.setf(ios_base::scientific, ios_base::floatfield);\n+  oss.setf(ios_base::uppercase);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"+++2,2250738585E-308\" );\n+\n+  // long double\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ld1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"1,7976931349E+308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.precision(0);\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  np.put(oss.rdbuf(), oss, '+', ld2);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"0\" );\n+\n+  // const void\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', cv);\n+  result1 = oss.str();\n+  // No grouping characters.\n+  VERIFY( !char_traits<char>::find(result1.c_str(), \n+\t\t\t\t   result1.size(),\n+\t\t\t\t   numpunct_de.decimal_point()) );\n+  // Should contain an 'x'.\n+  VERIFY( result1.find('x') == 1 );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  long long ll1 = 9223372036854775807LL;\n+  long long ll2 = -9223372036854775807LL;\n+\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ll1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"9.223.372.036.854.775.807\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+"}, {"sha": "dab92047cf9adab7ca9a51d80251e2902cd254db", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/2.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,112 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  string result1;\n+  string result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_c);\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n+\n+  // C\n+  // bool, more twisted examples\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', b0);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"+++++++++++++++++++0\" );\n+\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  oss.setf(ios_base::boolalpha);\n+  np.put(oss.rdbuf(), oss, '+', b1);\n+  result2 = oss.str();\n+  VERIFY( result2 == \"true++++++++++++++++\" );\n+\n+  // unsigned long, in a locale that does not group\n+  oss.imbue(loc_c);\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ul1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"1294967294\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', ul2);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"0+++++++++++++++++++\" );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+"}, {"sha": "201403a0e5490f0dad5e2286e222d8b95d746d17", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/3.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,95 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n+  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const string empty;\n+  string result1;\n+  string result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  ostringstream oss;\n+  oss.imbue(loc_hk);\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n+\n+  // HK\n+  // long, in a locale that expects grouping\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', l1);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"2,147,483,647\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', l2);\n+  result1 = oss.str();\n+  VERIFY( result1 == \"-2,147,483,647++++++\" );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+"}, {"sha": "7ce358311fef6ee8f8508189d1ea26e2363fcd70", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/4.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,105 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef string::iterator iter_type;\n+  typedef char_traits<char> traits;\n+  typedef num_put<char, iter_type> num_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  const locale loc_c = locale::classic();\n+  const string str(\"1798 Lady Elgin\");\n+  const string str2(\"0 true 0xbffff74c Mary Nisbet\");\n+  const string x(15, 'x'); // have to have allocated string!\n+  string res;\n+\n+  ostringstream oss; \n+  oss.imbue(locale(loc_c, new num_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n+\n+  // 01 put(long)\n+  // 02 put(long double)\n+  // 03 put(bool)\n+  // 04 put(void*)\n+\n+  // 01 put(long)\n+  const long l = 1798;\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, ' ', l);\n+  string sanity1(res.begin(), ret1);\n+  VERIFY( res == \"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity1 == \"1798\" );\n+\n+  // 02 put(long double)\n+  const long double ld = 1798.0;\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, ' ', ld);\n+  string sanity2(res.begin(), ret2);\n+  VERIFY( res == \"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity2 == \"1798\" );\n+\n+  // 03 put(bool)\n+  bool b = 1;\n+  res = x;\n+  iter_type ret3 = tp.put(res.begin(), oss, ' ', b);\n+  string sanity3(res.begin(), ret3);\n+  VERIFY( res == \"1xxxxxxxxxxxxxx\" );\n+  VERIFY( sanity3 == \"1\" );\n+\n+  b = 0;\n+  res = x;\n+  oss.setf(ios_base::boolalpha);\n+  iter_type ret4 = tp.put(res.begin(), oss, ' ', b);\n+  string sanity4(res.begin(), ret4);\n+  VERIFY( res == \"falsexxxxxxxxxx\" );\n+  VERIFY( sanity4 == \"false\" );\n+\n+  // 04 put(void*)\n+  oss.clear();\n+  const void* cv = &ld;\n+  res = x;\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type ret5 = tp.put(res.begin(), oss, ' ', cv);\n+  string sanity5(res.begin(), ret5);\n+  VERIFY( sanity5.size() );\n+  VERIFY( sanity5[1] == 'x' );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+"}, {"sha": "0af3d3cf611e318193a66cff918fa09ce527c842", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/5.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Make sure that, in a locale that expects grouping, when showbase\n+// is true, an hexadecimal or octal zero is correctly output (the case \n+// of zero is special since there is no 0x, 0 respectively, prefix)\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // A locale that expects grouping.\n+  locale loc_de(\"de_DE\");\n+\n+  const string empty;\n+  string result;\n+\n+  ostringstream oss;\n+  oss.imbue(loc_de);\n+  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n+\n+  long l = 0;\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios::showbase);\n+  oss.setf(ios::hex, ios::basefield);\n+  np.put(oss.rdbuf(), oss, '+', l);\n+  result = oss.str();\n+  VERIFY( result == \"0\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios::showbase);\n+  oss.setf(ios::oct, ios::basefield);\n+  np.put(oss.rdbuf(), oss, '+', l);\n+  result = oss.str();\n+  VERIFY( result == \"0\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+"}, {"sha": "2baa3a449504b2133d1d9916a204e0c4eac2d079", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/wrapped_env.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,56 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "63e7a4701604fc561cfba989a549fff810e3b9c3", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/wrapped_locale.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,56 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "9c5bdc5968e2a08596eefeb95ea12b95d9a9026d", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/1.cc", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,176 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  wstring result1;\n+  wstring result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_de);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n+\n+  // bool, simple\n+  iterator_type os_it00 = oss.rdbuf();\n+  iterator_type os_it01 = np.put(os_it00, oss, '+', b1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"1\" );\n+  //  VERIFY( os_it00 != os_it01 );\n+\n+  oss.str(empty);\n+  np.put(oss.rdbuf(), oss, '+', b0);\n+  result2 = oss.str();\n+  VERIFY( result2 == L\"0\" );\n+\n+  // ... and one that does\n+  oss.imbue(loc_de);\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', ul1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"1.294.967.294+++++++\" );\n+\n+  // double\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', d1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"1,79769e+308++++++++\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"++++++++2,22507e-308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  oss.setf(ios_base::scientific, ios_base::floatfield);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result2 = oss.str();\n+  VERIFY( result2 == L\"+++++++2,225074e-308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.precision(10);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  oss.setf(ios_base::scientific, ios_base::floatfield);\n+  oss.setf(ios_base::uppercase);\n+  np.put(oss.rdbuf(), oss, '+', d2);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"+++2,2250738585E-308\" );\n+\n+  // long double\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ld1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"1,7976931349E+308\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.precision(0);\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  np.put(oss.rdbuf(), oss, '+', ld2);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"0\" );\n+\n+  // const void\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', cv);\n+  result1 = oss.str();\n+  // No grouping characters.\n+  VERIFY( !char_traits<wchar_t>::find(result1.c_str(), \n+\t\t\t\t   result1.size(),\n+\t\t\t\t   numpunct_de.decimal_point()) );\n+  // Should contain an 'x'.\n+  VERIFY( result1.find(L'x') == 1 );\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  long long ll1 = 9223372036854775807LL;\n+  long long ll2 = -9223372036854775807LL;\n+\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ll1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"9.223.372.036.854.775.807\" );\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}\n+\n+"}, {"sha": "de08c093745aa3b02fe5e5c3cbd40f721adce20d", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/2.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,112 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  wstring result1;\n+  wstring result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_c);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n+\n+  // C\n+  // bool, more twisted examples\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::right, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', b0);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"+++++++++++++++++++0\" );\n+\n+  oss.str(empty);\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  oss.setf(ios_base::boolalpha);\n+  np.put(oss.rdbuf(), oss, '+', b1);\n+  result2 = oss.str();\n+  VERIFY( result2 == L\"true++++++++++++++++\" );\n+\n+  // unsigned long, in a locale that does not group\n+  oss.imbue(loc_c);\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', ul1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"1294967294\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', ul2);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"0+++++++++++++++++++\" );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}\n+\n+"}, {"sha": "ae2d0cfac8cc030563a39ba60f16c8adb82e8d19", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/3.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,95 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  typedef ostreambuf_iterator<wchar_t> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n+  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n+\n+  // sanity check the data is correct.\n+  const wstring empty;\n+  wstring result1;\n+  wstring result2;\n+  char c;\n+\n+  bool b1 = true;\n+  bool b0 = false;\n+  long l1 = 2147483647;\n+  long l2 = -2147483647;\n+  unsigned long ul1 = 1294967294;\n+  unsigned long ul2 = 0;\n+  double d1 =  1.7976931348623157e+308;\n+  double d2 = 2.2250738585072014e-308;\n+  long double ld1 = 1.7976931348623157e+308;\n+  long double ld2 = 2.2250738585072014e-308;\n+  const void* cv = &ld1;\n+\n+  // cache the num_put facet\n+  wostringstream oss;\n+  oss.imbue(loc_hk);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n+\n+  // HK\n+  // long, in a locale that expects grouping\n+  oss.str(empty);\n+  oss.clear();\n+  np.put(oss.rdbuf(), oss, '+', l1);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"2,147,483,647\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.width(20);\n+  oss.setf(ios_base::left, ios_base::adjustfield);\n+  np.put(oss.rdbuf(), oss, '+', l2);\n+  result1 = oss.str();\n+  VERIFY( result1 == L\"-2,147,483,647++++++\" );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}\n+\n+"}, {"sha": "1057a85f42d30ee70fd773c369c436d1ee1c4892", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/4.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F4.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,105 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test04()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check num_put works with other iterators besides streambuf\n+  // output iterators. (As long as output_iterator requirements are met.)\n+  typedef wstring::iterator iter_type;\n+  typedef char_traits<wchar_t> traits;\n+  typedef num_put<wchar_t, iter_type> num_put_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  const locale loc_c = locale::classic();\n+  const wstring str(L\"1798 Lady Elgin\");\n+  const wstring str2(L\"0 true 0xbffff74c Mary Nisbet\");\n+  const wstring x(15, L'x'); // have to have allocated wstring!\n+  wstring res;\n+\n+  wostringstream oss; \n+  oss.imbue(locale(loc_c, new num_put_type));\n+\n+  // Iterator advanced, state, output.\n+  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n+\n+  // 01 put(long)\n+  // 02 put(long double)\n+  // 03 put(bool)\n+  // 04 put(void*)\n+\n+  // 01 put(long)\n+  const long l = 1798;\n+  res = x;\n+  iter_type ret1 = tp.put(res.begin(), oss, ' ', l);\n+  wstring sanity1(res.begin(), ret1);\n+  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity1 == L\"1798\" );\n+\n+  // 02 put(long double)\n+  const long double ld = 1798.0;\n+  res = x;\n+  iter_type ret2 = tp.put(res.begin(), oss, ' ', ld);\n+  wstring sanity2(res.begin(), ret2);\n+  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n+  VERIFY( sanity2 == L\"1798\" );\n+\n+  // 03 put(bool)\n+  bool b = 1;\n+  res = x;\n+  iter_type ret3 = tp.put(res.begin(), oss, ' ', b);\n+  wstring sanity3(res.begin(), ret3);\n+  VERIFY( res == L\"1xxxxxxxxxxxxxx\" );\n+  VERIFY( sanity3 == L\"1\" );\n+\n+  b = 0;\n+  res = x;\n+  oss.setf(ios_base::boolalpha);\n+  iter_type ret4 = tp.put(res.begin(), oss, ' ', b);\n+  wstring sanity4(res.begin(), ret4);\n+  VERIFY( res == L\"falsexxxxxxxxxx\" );\n+  VERIFY( sanity4 == L\"false\" );\n+\n+  // 04 put(void*)\n+  oss.clear();\n+  const void* cv = &ld;\n+  res = x;\n+  oss.setf(ios_base::fixed, ios_base::floatfield);\n+  iter_type ret5 = tp.put(res.begin(), oss, ' ', cv);\n+  wstring sanity5(res.begin(), ret5);\n+  VERIFY( sanity5.size() );\n+  VERIFY( sanity5[1] == 'x' );\n+}\n+\n+int main()\n+{\n+  test04();\n+  return 0;\n+}\n+\n+"}, {"sha": "18ea8edc6008883e3d936acf9bc6ec7cd06f347c", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/5.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F5.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// Make sure that, in a locale that expects grouping, when showbase\n+// is true, an hexadecimal or octal zero is correctly output (the case \n+// of zero is special since there is no 0x, 0 respectively, prefix)\n+void test05()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // A locale that expects grouping.\n+  locale loc_de(\"de_DE\");\n+\n+  const wstring empty;\n+  wstring result;\n+\n+  wostringstream oss;\n+  oss.imbue(loc_de);\n+  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n+\n+  long l = 0;\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios::showbase);\n+  oss.setf(ios::hex, ios::basefield);\n+  np.put(oss.rdbuf(), oss, '+', l);\n+  result = oss.str();\n+  VERIFY( result == L\"0\" );\n+\n+  oss.str(empty);\n+  oss.clear();\n+  oss.setf(ios::showbase);\n+  oss.setf(ios::oct, ios::basefield);\n+  np.put(oss.rdbuf(), oss, '+', l);\n+  result = oss.str();\n+  VERIFY( result == L\"0\" );\n+}\n+\n+int main()\n+{\n+  test05();\n+  return 0;\n+}\n+\n+"}, {"sha": "2baa3a449504b2133d1d9916a204e0c4eac2d079", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/wrapped_env.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,56 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "63e7a4701604fc561cfba989a549fff810e3b9c3", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/wrapped_locale.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,56 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+#define main discard_main_4\n+#include \"4.cc\"\n+#undef main \n+\n+#define main discard_main_5\n+#include \"5.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  two.push_back(&test04);\n+  two.push_back(&test05);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "448119682cfbdd888c13156d2ea027155555c496", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_char.cc", "status": "removed", "additions": 0, "deletions": 376, "changes": 376, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,376 +0,0 @@\n-// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.2.2.1  num_put members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-void test01()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<char> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the numpunct facets\n-  const numpunct<char>& numpunct_c = use_facet<numpunct<char> >(loc_c); \n-  const numpunct<char>& numpunct_de = use_facet<numpunct<char> >(loc_de); \n-  const numpunct<char>& numpunct_hk = use_facet<numpunct<char> >(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const string empty;\n-  string result1;\n-  string result2;\n-  char c;\n-\n-  bool b1 = true;\n-  bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n-\n-  // cache the num_put facet\n-  ostringstream oss;\n-  oss.imbue(loc_de);\n-  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n-\n-  // bool, simple\n-  iterator_type os_it00 = oss.rdbuf();\n-  iterator_type os_it01 = np.put(os_it00, oss, '+', b1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"1\" );\n-  //  VERIFY( os_it00 != os_it01 );\n-\n-  oss.str(empty);\n-  np.put(oss.rdbuf(), oss, '+', b0);\n-  result2 = oss.str();\n-  VERIFY( result2 == \"0\" );\n-\n-  // bool, more twisted examples\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', b0);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"+++++++++++++++++++0\" );\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  oss.setf(ios_base::boolalpha);\n-  np.put(oss.rdbuf(), oss, '+', b1);\n-  result2 = oss.str();\n-  VERIFY( result2 == \"true++++++++++++++++\" );\n-\n-  // long, in a locale that expects grouping\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', l1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"2,147,483,647\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', l2);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"-2,147,483,647++++++\" );\n-\n-  // unsigned long, in a locale that does not group\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ul1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"1294967294\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', ul2);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"0+++++++++++++++++++\" );\n-\n-  // ... and one that does\n-  oss.imbue(loc_de);\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', ul1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"1.294.967.294+++++++\" );\n-\n-  // double\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', d1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"1,79769e+308++++++++\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"++++++++2,22507e-308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  oss.setf(ios_base::scientific, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n-  result2 = oss.str();\n-  VERIFY( result2 == \"+++++++2,225074e-308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.precision(10);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  oss.setf(ios_base::scientific, ios_base::floatfield);\n-  oss.setf(ios_base::uppercase);\n-  np.put(oss.rdbuf(), oss, '+', d2);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"+++2,2250738585E-308\" );\n-\n-  // long double\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ld1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"1,7976931349E+308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.precision(0);\n-  oss.setf(ios_base::fixed, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, '+', ld2);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"0\" );\n-\n-  // const void\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', cv);\n-  result1 = oss.str();\n-  // No grouping characters.\n-  VERIFY( !char_traits<char>::find(result1.c_str(), \n-\t\t\t\t   result1.size(),\n-\t\t\t\t   numpunct_de.decimal_point()) );\n-  // Should contain an 'x'.\n-  VERIFY( result1.find('x') == 1 );\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n-\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ll1);\n-  result1 = oss.str();\n-  VERIFY( result1 == \"9.223.372.036.854.775.807\" );\n-#endif\n-}\n-\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check num_put works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef string::iterator iter_type;\n-  typedef char_traits<char> traits;\n-  typedef num_put<char, iter_type> num_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  const locale loc_c = locale::classic();\n-  const string str(\"1798 Lady Elgin\");\n-  const string str2(\"0 true 0xbffff74c Mary Nisbet\");\n-  const string x(15, 'x'); // have to have allocated string!\n-  string res;\n-\n-  ostringstream oss; \n-  oss.imbue(locale(loc_c, new num_put_type));\n-\n-  // Iterator advanced, state, output.\n-  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n-\n-  // 01 put(long)\n-  // 02 put(long double)\n-  // 03 put(bool)\n-  // 04 put(void*)\n-\n-  // 01 put(long)\n-  const long l = 1798;\n-  res = x;\n-  iter_type ret1 = tp.put(res.begin(), oss, ' ', l);\n-  string sanity1(res.begin(), ret1);\n-  VERIFY( res == \"1798xxxxxxxxxxx\" );\n-  VERIFY( sanity1 == \"1798\" );\n-\n-  // 02 put(long double)\n-  const long double ld = 1798.0;\n-  res = x;\n-  iter_type ret2 = tp.put(res.begin(), oss, ' ', ld);\n-  string sanity2(res.begin(), ret2);\n-  VERIFY( res == \"1798xxxxxxxxxxx\" );\n-  VERIFY( sanity2 == \"1798\" );\n-\n-  // 03 put(bool)\n-  bool b = 1;\n-  res = x;\n-  iter_type ret3 = tp.put(res.begin(), oss, ' ', b);\n-  string sanity3(res.begin(), ret3);\n-  VERIFY( res == \"1xxxxxxxxxxxxxx\" );\n-  VERIFY( sanity3 == \"1\" );\n-\n-  b = 0;\n-  res = x;\n-  oss.setf(ios_base::boolalpha);\n-  iter_type ret4 = tp.put(res.begin(), oss, ' ', b);\n-  string sanity4(res.begin(), ret4);\n-  VERIFY( res == \"falsexxxxxxxxxx\" );\n-  VERIFY( sanity4 == \"false\" );\n-\n-  // 04 put(void*)\n-  oss.clear();\n-  const void* cv = &ld;\n-  res = x;\n-  oss.setf(ios_base::fixed, ios_base::floatfield);\n-  iter_type ret5 = tp.put(res.begin(), oss, ' ', cv);\n-  string sanity5(res.begin(), ret5);\n-  VERIFY( sanity5.size() );\n-  VERIFY( sanity5[1] == 'x' );\n-}\n-\n-// libstdc++/5280\n-void test03()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-// Make sure that, in a locale that expects grouping, when showbase\n-// is true, an hexadecimal or octal zero is correctly output (the case \n-// of zero is special since there is no 0x, 0 respectively, prefix)\n-void test05()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // A locale that expects grouping.\n-  locale loc_de(\"de_DE\");\n-\n-  const string empty;\n-  string result;\n-\n-  ostringstream oss;\n-  oss.imbue(loc_de);\n-  const num_put<char>& np = use_facet<num_put<char> >(oss.getloc()); \n-\n-  long l = 0;\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.setf(ios::showbase);\n-  oss.setf(ios::hex, ios::basefield);\n-  np.put(oss.rdbuf(), oss, '+', l);\n-  result = oss.str();\n-  VERIFY( result == \"0\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.setf(ios::showbase);\n-  oss.setf(ios::oct, ios::basefield);\n-  np.put(oss.rdbuf(), oss, '+', l);\n-  result = oss.str();\n-  VERIFY( result == \"0\" );\n-}\n-\n-int main()\n-{\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-  return 0;\n-}\n-\n-"}, {"sha": "d3060dd81948189771306ec88d1929b470eb0850", "filename": "libstdc++-v3/testsuite/22_locale/num_put_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 382, "changes": 382, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251", "patch": "@@ -1,382 +0,0 @@\n-// 2001-11-19 Benjamin Kosnik  <bkoz@redhat.com>\n-\n-// Copyright (C) 2001, 2002 Free Software Foundation\n-//\n-// This file is part of the GNU ISO C++ Library.  This library is free\n-// software; you can redistribute it and/or modify it under the\n-// terms of the GNU General Public License as published by the\n-// Free Software Foundation; either version 2, or (at your option)\n-// any later version.\n-\n-// This library is distributed in the hope that it will be useful,\n-// but WITHOUT ANY WARRANTY; without even the implied warranty of\n-// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-// GNU General Public License for more details.\n-\n-// You should have received a copy of the GNU General Public License along\n-// with this library; see the file COPYING.  If not, write to the Free\n-// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n-// USA.\n-\n-// 22.2.2.2.1  num_put members\n-\n-#include <locale>\n-#include <sstream>\n-#include <testsuite_hooks.h>\n-\n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-void test01()\n-{\n-  using namespace std;\n-  typedef ostreambuf_iterator<wchar_t> iterator_type;\n-\n-  bool test = true;\n-\n-  // basic construction\n-  locale loc_c = locale::classic();\n-  locale loc_hk(\"en_HK\");\n-  locale loc_fr(\"fr_FR@euro\");\n-  locale loc_de(\"de_DE\");\n-  VERIFY( loc_c != loc_de );\n-  VERIFY( loc_hk != loc_fr );\n-  VERIFY( loc_hk != loc_de );\n-  VERIFY( loc_de != loc_fr );\n-\n-  // cache the numpunct facets\n-  const numpunct<wchar_t>& numpunct_c = use_facet<numpunct<wchar_t> >(loc_c); \n-  const numpunct<wchar_t>& numpunct_de = use_facet<numpunct<wchar_t> >(loc_de); \n-  const numpunct<wchar_t>& numpunct_hk = use_facet<numpunct<wchar_t> >(loc_hk); \n-\n-  // sanity check the data is correct.\n-  const wstring empty;\n-  wstring result1;\n-  wstring result2;\n-  wchar_t c;\n-\n-  bool b1 = true;\n-  bool b0 = false;\n-  long l1 = 2147483647;\n-  long l2 = -2147483647;\n-  unsigned long ul1 = 1294967294;\n-  unsigned long ul2 = 0;\n-  double d1 =  1.7976931348623157e+308;\n-  double d2 = 2.2250738585072014e-308;\n-  long double ld1 = 1.7976931348623157e+308;\n-  long double ld2 = 2.2250738585072014e-308;\n-  const void* cv = &ld1;\n-\n-  // cache the num_put facet\n-  wostringstream oss;\n-  oss.imbue(loc_de);\n-  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n-\n-  // bool, simple\n-  iterator_type os_it00 = oss.rdbuf();\n-  iterator_type os_it01 = np.put(os_it00, oss, '+', b1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"1\" );\n-  //  VERIFY( os_it00 != os_it01 );\n-\n-  oss.str(empty);\n-  np.put(oss.rdbuf(), oss, L'+', b0);\n-  result2 = oss.str();\n-  VERIFY( result2 == L\"0\" );\n-\n-  // bool, more twisted examples\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', b0);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"+++++++++++++++++++0\" );\n-\n-  oss.str(empty);\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  oss.setf(ios_base::boolalpha);\n-  np.put(oss.rdbuf(), oss, L'+', b1);\n-  result2 = oss.str();\n-  VERIFY( result2 == L\"true++++++++++++++++\" );\n-\n-  // long, in a locale that expects grouping\n-  oss.imbue(loc_hk);\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, L'+', l1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"2,147,483,647\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', l2);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"-2,147,483,647++++++\" );\n-\n-  // unsigned long, in a locale that does not group\n-  oss.imbue(loc_c);\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, L'+', ul1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"1294967294\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', ul2);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"0+++++++++++++++++++\" );\n-\n-  // ... and one that does\n-  oss.imbue(loc_de);\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', ul1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"1.294.967.294+++++++\" );\n-\n-  // double\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::left, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', d1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"1,79769e+308++++++++\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  np.put(oss.rdbuf(), oss, L'+', d2);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"++++++++2,22507e-308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  oss.setf(ios_base::scientific, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, L'+', d2);\n-  result2 = oss.str();\n-  VERIFY( result2 == L\"+++++++2,225074e-308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.width(20);\n-  oss.precision(10);\n-  oss.setf(ios_base::right, ios_base::adjustfield);\n-  oss.setf(ios_base::scientific, ios_base::floatfield);\n-  oss.setf(ios_base::uppercase);\n-  np.put(oss.rdbuf(), oss, L'+', d2);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"+++2,2250738585E-308\" );\n-\n-  // long double\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, L'+', ld1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"1,7976931349E+308\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.precision(0);\n-  oss.setf(ios_base::fixed, ios_base::floatfield);\n-  np.put(oss.rdbuf(), oss, L'+', ld2);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"0\" );\n-\n-  // const void\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, L'+', cv);\n-  result1 = oss.str();\n-  // No grouping characters.\n-  VERIFY( !char_traits<wchar_t>::find(result1.c_str(), \n-\t\t\t\t   result1.size(),\n-\t\t\t\t   numpunct_de.decimal_point()) );\n-  // Should contain an 'x'.\n-  VERIFY( result1.find(L'x') == 1 );\n-\n-#ifdef _GLIBCPP_USE_LONG_LONG\n-  long long ll1 = 9223372036854775807LL;\n-  long long ll2 = -9223372036854775807LL;\n-\n-  oss.str(empty);\n-  oss.clear();\n-  np.put(oss.rdbuf(), oss, '+', ll1);\n-  result1 = oss.str();\n-  VERIFY( result1 == L\"9.223.372.036.854.775.807\" );\n-#endif\n-}\n-void test02()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // Check num_put works with other iterators besides streambuf\n-  // output iterators. (As long as output_iterator requirements are met.)\n-  typedef wstring::iterator iter_type;\n-  typedef char_traits<wchar_t> traits;\n-  typedef num_put<wchar_t, iter_type> num_put_type;\n-  const ios_base::iostate goodbit = ios_base::goodbit;\n-  const ios_base::iostate eofbit = ios_base::eofbit;\n-  const locale loc_c = locale::classic();\n-  const wstring str(L\"1798 Lady Elgin\");\n-  const wstring str2(L\"0 true 0xbffff74c Mary Nisbet\");\n-  const wstring x(15, L'x'); // have to have allocated string!\n-  wstring res;\n-\n-  wostringstream oss; \n-  oss.imbue(locale(loc_c, new num_put_type));\n-\n-  // Iterator advanced, state, output.\n-  const num_put_type& tp = use_facet<num_put_type>(oss.getloc());\n-\n-  // 01 put(long)\n-  // 02 put(long double)\n-  // 03 put(bool)\n-  // 04 put(void*)\n-\n-  // 01 put(long)\n-  const long l = 1798;\n-  res = x;\n-  iter_type ret1 = tp.put(res.begin(), oss, L' ', l);\n-  wstring sanity1(res.begin(), ret1);\n-  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n-  VERIFY( sanity1 == L\"1798\" );\n-\n-  // 02 put(long double)\n-  const long double ld = 1798.0;\n-  res = x;\n-  iter_type ret2 = tp.put(res.begin(), oss, L' ', ld);\n-  wstring sanity2(res.begin(), ret2);\n-  VERIFY( res == L\"1798xxxxxxxxxxx\" );\n-  VERIFY( sanity2 == L\"1798\" );\n-\n-  // 03 put(bool)\n-  bool b = 1;\n-  res = x;\n-  iter_type ret3 = tp.put(res.begin(), oss, L' ', b);\n-  wstring sanity3(res.begin(), ret3);\n-  VERIFY( res == L\"1xxxxxxxxxxxxxx\" );\n-  VERIFY( sanity3 == L\"1\" );\n-\n-  b = 0;\n-  res = x;\n-  oss.setf(ios_base::boolalpha);\n-  iter_type ret4 = tp.put(res.begin(), oss, L' ', b);\n-  wstring sanity4(res.begin(), ret4);\n-  VERIFY( res == L\"falsexxxxxxxxxx\" );\n-  VERIFY( sanity4 == L\"false\" );\n-\n-  // 04 put(void*)\n-  oss.clear();\n-  const void* cv = &ld;\n-  res = x;\n-  oss.setf(ios_base::fixed, ios_base::floatfield);\n-  iter_type ret5 = tp.put(res.begin(), oss, L' ', cv);\n-  wstring sanity5(res.begin(), ret5);\n-  VERIFY( sanity5.size() );\n-  VERIFY( sanity5[1] == L'x' );\n-}\n-\n-// libstdc++/5280\n-void test03()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      test02();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test04()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      test02();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n-// Make sure that, in a locale that expects grouping, when showbase\n-// is true, an hexadecimal or octal zero is correctly output (the case \n-// of zero is special since there is no 0x, 0 respectively, prefix)\n-void test05()\n-{\n-  using namespace std;\n-  bool test = true;\n-\n-  // A locale that expects grouping.\n-  locale loc_de(\"de_DE\");\n-\n-  const wstring empty;\n-  wstring result;\n-\n-  wostringstream oss;\n-  oss.imbue(loc_de);\n-  const num_put<wchar_t>& np = use_facet<num_put<wchar_t> >(oss.getloc()); \n-\n-  long l = 0;\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.setf(ios::showbase);\n-  oss.setf(ios::hex, ios::basefield);\n-  np.put(oss.rdbuf(), oss, L'+', l);\n-  result = oss.str();\n-  VERIFY( result == L\"0\" );\n-\n-  oss.str(empty);\n-  oss.clear();\n-  oss.setf(ios::showbase);\n-  oss.setf(ios::oct, ios::basefield);\n-  np.put(oss.rdbuf(), oss, L'+', l);\n-  result = oss.str();\n-  VERIFY( result == L\"0\" );\n-}\n-#endif\n-\n-int main()\n-{\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n-  test02();\n-  test03();\n-  test04();\n-  test05();\n-#endif\n-  return 0;\n-}\n-\n-\n-// Diana D. Brooks, former chief executive of Sotheby's\n-// art-thief extraordinaire\n-"}, {"sha": "f2f94273b9fb940238d89378c96ae4df289156e7", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003  Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.3  The numeric punctuation facet\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -33,18 +32,8 @@ void test01()\n   const base_type* base = &obj;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_numpunct: public std::numpunct<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_numpunct facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct.cc"}, {"sha": "0df50fa5e3462e415522089e6f245a3e36f09522", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003  Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.3  The numeric punctuation facet\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_numpunct: public std::numpunct<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_numpunct facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "9babb9946cba262eab30c9e32dd309b948200fb1", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,65 @@\n+// 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.3.1.1 nunpunct members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<char>& nump_c = use_facet<numpunct<char> >(loc_c); \n+  const numpunct<char>& nump_us = use_facet<numpunct<char> >(loc_us); \n+  const numpunct<char>& nump_fr = use_facet<numpunct<char> >(loc_fr); \n+  const numpunct<char>& nump_de = use_facet<numpunct<char> >(loc_de); \n+\n+  // sanity check the data is correct.\n+  char dp1 = nump_c.decimal_point();\n+  char th1 = nump_c.thousands_sep();\n+  string g1 = nump_c.grouping();\n+  string t1 = nump_c.truename();\n+  string f1 = nump_c.falsename();\n+  VERIFY ( dp1 == '.' );\n+  VERIFY ( th1 == ',' );\n+  VERIFY ( g1 == \"\" );\n+  VERIFY ( t1 == \"true\" );\n+  VERIFY ( f1 == \"false\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "bb4eff5f70a8f41d2586bcee6f4014982b582afd", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/2.cc", "status": "renamed", "additions": 2, "deletions": 40, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,10 +23,7 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-void test01()\n+void test02()\n {\n   using namespace std;\n   \n@@ -83,43 +80,8 @@ void test01()\n   // VERIFY( f2 != f3 );\n }\n \n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-\n int main()\n {\n-  test01();\n   test02();\n-  test03();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_char.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "ac4e8201dbe168ffb46386c425a8d09763f7b959", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,65 @@\n+// 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.3.1.1 nunpunct members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+  locale loc_us(\"en_US\");\n+  locale loc_fr(\"fr_FR\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_c != loc_de );\n+  VERIFY( loc_us != loc_fr );\n+  VERIFY( loc_us != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the numpunct facets\n+  const numpunct<wchar_t>& nump_c = use_facet<numpunct<wchar_t> >(loc_c); \n+  const numpunct<wchar_t>& nump_us = use_facet<numpunct<wchar_t> >(loc_us); \n+  const numpunct<wchar_t>& nump_fr = use_facet<numpunct<wchar_t> >(loc_fr); \n+  const numpunct<wchar_t>& nump_de = use_facet<numpunct<wchar_t> >(loc_de); \n+\n+  // sanity check the data is correct.\n+  wchar_t dp1 = nump_c.decimal_point();\n+  wchar_t th1 = nump_c.thousands_sep();\n+  string g1 = nump_c.grouping();\n+  wstring t1 = nump_c.truename();\n+  wstring f1 = nump_c.falsename();\n+  VERIFY ( dp1 == L'.' );\n+  VERIFY ( th1 == L',' );\n+  VERIFY ( g1 == \"\" );\n+  VERIFY ( t1 == L\"true\" );\n+  VERIFY ( f1 == L\"false\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "c544b29cce68cf9eed4e1c96507598be2ff7ad6c", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/2.cc", "status": "renamed", "additions": 6, "deletions": 45, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n-// 2001-11-20 Benjamin Kosnik  <bkoz@redhat.com>\n+// 2001-01-17 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,11 +23,7 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-void test01()\n+void test02()\n {\n   using namespace std;\n   \n@@ -79,48 +75,13 @@ void test01()\n \n   VERIFY( dp2 != dp4 );\n   VERIFY( th2 != th4 );\n+  // XXX This isn't actually supported right now.\n+  // VERIFY( t2 != t3 );\n+  // VERIFY( f2 != f3 );\n }\n \n-// libstdc++/5280\n-void test02()\n-{\n-#ifdef _GLIBCPP_HAVE_SETENV \n-  // Set the global locale to non-\"C\".\n-  std::locale loc_de(\"de_DE\");\n-  std::locale::global(loc_de);\n-\n-  // Set LANG environment variable to de_DE.\n-  const char* oldLANG = getenv(\"LANG\");\n-  if (!setenv(\"LANG\", \"de_DE\", 1))\n-    {\n-      test01();\n-      setenv(\"LANG\", oldLANG ? oldLANG : \"\", 1);\n-    }\n-#endif\n-}\n-\n-// http://gcc.gnu.org/ml/libstdc++/2002-05/msg00038.html\n-void test03()\n-{\n-  bool test = true;\n-\n-  const char* tentLANG = std::setlocale(LC_ALL, \"ja_JP.eucjp\");\n-  if (tentLANG != NULL)\n-    {\n-      std::string preLANG = tentLANG;\n-      test01();\n-      std::string postLANG = std::setlocale(LC_ALL, NULL);\n-      VERIFY( preLANG == postLANG );\n-    }\n-}\n-#endif\n-\n int main()\n {\n-#ifdef _GLIBCPP_USE_WCHAR_T\n-  test01();\n   test02();\n-  test03();\n-#endif\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_members_wchar_t.cc"}, {"sha": "4f1d5e3f6a99bf2789e72983767aa10843e0aa39", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "8d7871815db588a7cf481c48d0ddcaaa6b2cdcf8", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,41 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "4c99ddaad70e13682987fd813d55153c087eb03f", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/1.cc", "status": "renamed", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,6 @@\n // 2001-01-24 Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -23,9 +23,6 @@\n #include <locale>\n #include <testsuite_hooks.h>\n \n-// XXX This test is not working for non-glibc locale models.\n-// { dg-do run { xfail *-*-* } }\n-\n void test01()\n {\n   using namespace std;\n@@ -72,26 +69,8 @@ void test01()\n   VERIFY( dp1 != dp3 );\n }\n \n-void test02()\n-{\n-  using namespace std;\n-  \n-  bool test = true;\n-\n-  locale loc_it(\"it_IT\");\n-\n-  const numpunct<char>& nump_it = use_facet<numpunct<char> >(loc_it); \n-\n-  string g = nump_it.grouping();\n-\n-  VERIFY( g == \"\" );\n-}\n-\n-\n int main()\n {\n   test01();\n-  test02();\n-\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname.cc"}, {"sha": "133607dd5b931562ab66eadef2763bc7edf20066", "filename": "libstdc++-v3/testsuite/22_locale/numpunct_byname/2.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct_byname%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,45 @@\n+// 2001-01-24 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.3.2 Template class numpunct_byname\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  \n+  bool test = true;\n+\n+  locale loc_it(\"it_IT\");\n+\n+  const numpunct<char>& nump_it = use_facet<numpunct<char> >(loc_it); \n+\n+  string g = nump_it.grouping();\n+\n+  VERIFY( g == \"\" );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "04d4aa84ce0e5cfb84401e9b4ae6c239b67e4950", "filename": "libstdc++-v3/testsuite/22_locale/time_get/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -1,6 +1,7 @@\n+// { dg-do compile }\n // 2001-09-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n-// Copyright (C) 2001 Free Software Foundation\n+// Copyright (C) 2001, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -20,8 +21,6 @@\n \n // 22.2.5.1  Template class time_get\n \n-// { dg-do compile }\n-\n #include <locale>\n \n void test01()\n@@ -39,18 +38,8 @@ void test01()\n   typedef test_type::iter_type iter_type;\n }\n \n-// Should be able to instantiate this for other types besides char, wchar_t\n-class gnu_time_get: public std::time_get<unsigned char> \n-{ };\n-\n-void test02()\n-{ \n-  gnu_time_get facet01;\n-}\n-\n int main()\n {\n   test01();\n-  test02();\n   return 0;\n }", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_get.cc"}, {"sha": "87e8533d3160f8e5b8f9cd63c87cd9c71f6d4738", "filename": "libstdc++-v3/testsuite/22_locale/time_get/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,39 @@\n+// { dg-do compile }\n+// 2001-09-21  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1  Template class time_get\n+\n+#include <locale>\n+\n+// Should be able to instantiate this for other types besides char, wchar_t\n+class gnu_time_get: public std::time_get<unsigned char> \n+{ };\n+\n+void test02()\n+{ \n+  gnu_time_get facet01;\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "5b3a3236eeff79f8d5897c1ac8af05f2017009a1", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/char/1.cc", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,69 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  // 1\n+  // dateorder date_order() const\n+  dateorder do1 = tim_get.date_order();\n+  //  VERIFY( do1 == time_base::mdy );\n+  VERIFY( do1 == time_base::no_order );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/char/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/char/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "9baf0216bc261521f83c010ade1f1b6e60fa22f2", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/wchar_t/1.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,70 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<wchar_t> iterator_type;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<wchar_t>& time_c = use_facet<__timepunct<wchar_t> >(loc_c); \n+  const __timepunct<wchar_t>& time_de = use_facet<__timepunct<wchar_t> >(loc_de); \n+  const __timepunct<wchar_t>& time_hk = use_facet<__timepunct<wchar_t> >(loc_hk); \n+  const __timepunct<wchar_t>& time_fr = use_facet<__timepunct<wchar_t> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<wchar_t>& tim_get = use_facet<time_get<wchar_t> >(iss.getloc()); \n+\n+  // 1\n+  // dateorder date_order() const\n+  iss.imbue(loc_c);\n+  dateorder do1 = tim_get.date_order();\n+  //  VERIFY( do1 == time_base::mdy );\n+  VERIFY( do1 == time_base::no_order );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "b3d040edc7a852248ab2acb1c3528ce477ce5ee5", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/wchar_t/wrapped_env.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "17d4d5dcb82007966c334305458bbbd9f205f6ec", "filename": "libstdc++-v3/testsuite/22_locale/time_get/date_order/wchar_t/wrapped_locale.cc", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fdate_order%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,36 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "659086ab26f8e8dbb009f159b212e368cf876e53", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/1.cc", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,112 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test01()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  iss.imbue(loc_c);\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.str(\"04/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+  tim_get.get_date(is_it01, end, iss, errorstate, &time01);\n+  VERIFY( time01.tm_year == time_bday.tm_year );\n+  VERIFY( time01.tm_mon == time_bday.tm_mon );\n+  VERIFY( time01.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  iss.str(\"04/04/71 \");\n+  iterator_type is_it02(iss);\n+  tm time02;\n+  errorstate = good;\n+  tim_get.get_date(is_it02, end, iss, errorstate, &time02);\n+  VERIFY( time02.tm_year == time_bday.tm_year );\n+  VERIFY( time02.tm_mon == time_bday.tm_mon );\n+  VERIFY( time02.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == good );\n+  VERIFY( *is_it02 == ' ');\n+\n+  iss.str(\"04/04d/71 \");\n+  iterator_type is_it03(iss);\n+  tm time03;\n+  time03.tm_year = 3;\n+  errorstate = good;\n+  tim_get.get_date(is_it03, end, iss, errorstate, &time03);\n+  VERIFY( time03.tm_year == 3 );\n+  VERIFY( time03.tm_mon == time_bday.tm_mon );\n+  VERIFY( time03.tm_mday == time_bday.tm_mday );\n+  VERIFY( errorstate == ios_base::failbit );\n+  VERIFY( *is_it03 == 'd');\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "434695c703ac5314bc5a556d0835d503a041e7be", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/2.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,108 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test02()\n+{\n+  using namespace std;\n+  typedef time_base::dateorder dateorder;\n+  typedef istreambuf_iterator<char> iterator_type;\n+\n+  bool test = true;\n+\n+  // basic construction and sanity checks.\n+  locale loc_c = locale::classic();\n+  locale loc_hk(\"en_HK\");\n+  locale loc_fr(\"fr_FR@euro\");\n+  locale loc_de(\"de_DE\");\n+  VERIFY( loc_hk != loc_c );\n+  VERIFY( loc_hk != loc_fr );\n+  VERIFY( loc_hk != loc_de );\n+  VERIFY( loc_de != loc_fr );\n+\n+  // cache the __timepunct facets, for quicker gdb inspection\n+  const __timepunct<char>& time_c = use_facet<__timepunct<char> >(loc_c); \n+  const __timepunct<char>& time_de = use_facet<__timepunct<char> >(loc_de); \n+  const __timepunct<char>& time_hk = use_facet<__timepunct<char> >(loc_hk); \n+  const __timepunct<char>& time_fr = use_facet<__timepunct<char> >(loc_fr); \n+\n+  const string empty;\n+\n+  // create an ostream-derived object, cache the time_get facet\n+  iterator_type end;\n+\n+  istringstream iss;\n+  const time_get<char>& tim_get = use_facet<time_get<char> >(iss.getloc()); \n+\n+  const ios_base::iostate good = ios_base::goodbit;\n+  ios_base::iostate errorstate = good;\n+\n+  // create \"C\" time objects\n+  const tm time_bday = { 0, 0, 12, 4, 3, 71 };\n+  const char* all = \"%a %A %b %B %c %d %H %I %j %m %M %p %s %U \"\n+                    \"%w %W %x %X %y %Y %Z %%\";\n+  const char* date = \"%A, the second of %B\";\n+  const char* date_ex = \"%Ex\";\n+\n+  // iter_type \n+  // get_date(iter_type, iter_type, ios_base&, ios_base::iostate&, tm*) const\n+\n+  // sanity checks for \"C\" locale\n+  iss.imbue(loc_c);\n+  iss.str(\"04/04/71\");\n+  iterator_type is_it01(iss);\n+  tm time01;\n+  errorstate = good;\n+\n+  // inspection of named locales, de_DE\n+  iss.imbue(loc_de);\n+  iss.str(\"04.04.1971\");\n+  iterator_type is_it10(iss);\n+  tm time10;\n+  errorstate = good;\n+  tim_get.get_date(is_it10, end, iss, errorstate, &time10);\n+  VERIFY( time10.tm_mon == time_bday.tm_mon );\n+  VERIFY( time10.tm_mday == time_bday.tm_mday );\n+  VERIFY( time10.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+\n+  // inspection of named locales, en_HK\n+  iss.imbue(loc_hk);\n+  iss.str(\"Sunday, April 04, 1971\"); \n+  iterator_type is_it20(iss);\n+  tm time20;\n+  errorstate = good;\n+  tim_get.get_date(is_it20, end, iss, errorstate, &time20);\n+  VERIFY( time20.tm_mon == time_bday.tm_mon );\n+  VERIFY( time20.tm_mday == time_bday.tm_mday );\n+  VERIFY( time20.tm_year == time_bday.tm_year );\n+  VERIFY( errorstate == ios_base::eofbit );\n+}\n+\n+int main()\n+{\n+  test02();\n+  return 0;\n+}"}, {"sha": "249b5e8001f60da0b55dbfcd8f4b7c43f50c2a4d", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,72 @@\n+// 2001-09-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.5.1.1 time_get members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+void test03()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  // Check time_get works with other iterators besides streambuf\n+  // input iterators.\n+  typedef string::const_iterator iter_type;\n+  typedef time_get<char, iter_type> time_get_type;\n+  const ios_base::iostate goodbit = ios_base::goodbit;\n+  const ios_base::iostate eofbit = ios_base::eofbit;\n+  ios_base::iostate err = goodbit;\n+  const locale loc_c = locale::classic();\n+\n+  // Create \"C\" time objects\n+  const tm time_sanity = { 0, 0, 12, 26, 5, 97, 2 };\n+  tm tm1;\n+\n+  istringstream iss; \n+  iss.imbue(locale(loc_c, new time_get_type));\n+\n+  // Iterator advanced, state, output.\n+  const time_get_type& tg = use_facet<time_get_type>(iss.getloc());\n+\n+  // Cindy Sherman's Untitled Film Stills\n+  // June 26-September 2, 1997\n+  const string str = \"06/26/97 Tuesday September 1997 Cindy Sherman\";\n+ \n+  // 02 get_date\n+  string res2;\n+  err = goodbit;\n+  // White space is not eaten, so manually increment past it.\n+  iter_type end2 = tg.get_date(str.begin(), str.end(), iss, err, &tm1);\n+  string rem2(end2, str.end());\n+  VERIFY( err == goodbit );\n+  VERIFY( tm1.tm_year == time_sanity.tm_year );\n+  VERIFY( tm1.tm_mon == time_sanity.tm_mon );\n+  VERIFY( tm1.tm_mday == time_sanity.tm_mday );\n+  VERIFY( rem2 ==  \" Tuesday September 1997 Cindy Sherman\" );\n+}\n+\n+int main()\n+{\n+  test03();\n+  return 0;\n+}"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  run_tests_wrapped_env(\"de_DE\", \"LANG\", two);\n+  return 0;\n+}"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/char/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "patch": "@@ -0,0 +1,46 @@\n+// 2001-08-15 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <testsuite_hooks.h>\n+\n+#define main discard_main_1\n+#include \"1.cc\"\n+#undef main \n+\n+#define main discard_main_2\n+#include \"2.cc\"\n+#undef main \n+\n+#define main discard_main_3\n+#include \"3.cc\"\n+#undef main \n+\n+int main()\n+{\n+  using namespace __gnu_cxx_test;\n+  func_callback two;\n+  two.push_back(&test01);\n+  two.push_back(&test02);\n+  two.push_back(&test03);\n+  run_tests_wrapped_locale(\"ja_JP.eucjp\", two);\n+  return 0;\n+}"}, {"sha": "965493d316fe6940b6068558f4fd7278d9d2d020", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/1.cc", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "1e4d57afb44b42e1a54d98b3f7e701928cb4bb13", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/2.cc", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "b02049fcb465bf1001a7da595057d07c507da42b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/3.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_date/wchar_t/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_date%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "8984069e59a0adc03335af7bddf1a38e82c117a7", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/1.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "66ad029c1a51e37c3e93fcbeaf6e671da10aca87", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "c876f5c364b9bc7d40271006654a1bd587f60368", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/char/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "8ba9d5df074cf6bdb25df1251b8904750b5d51b7", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/1.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "80fe2dfda41d1afcfd9bda275f6f1e16f70ee86b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "5cb2b651a9c330e42d43b4373138002ad45bd38c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_monthname/wchar_t/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_monthname%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "ef9c2bbbeb9e9a9f4f2d833212f3d207d7a70453", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/1.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "9adb288ed74d39b4ba7df9c7f3ac2e649354ceeb", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "01a06cacc28808cc068a00239837dd21926f1547", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/3.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/char/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "5d64670f3bd4d286a687ecca7d62816d5b790ac8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/1.cc", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "5b7293848cc9e483a93f7787fe45315b2b429842", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/2.cc", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "bb9c2e0b46fdcf2b052b02e43271265260d9ad8d", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/3.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_time/wchar_t/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_time%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "4fad9019abf0bfcf7d5d90bbd32c0ade97b48832", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "5f6e1490d42c12af17e71bfa27a376bd06573d2c", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "59dde862a35e87e54eeb0987311e7b09427f806a", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/char/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "a865c2eff1d38a17be0054c746bb23d367a36514", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "299f2ef05253a326835cd1cbe7dfbe645291287b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "eab0343be37c6f8a52fc23e66aaa66ad67407f6f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "3f042d9ec425374d9005411b748371323c018f8f", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/wrapped_env.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "61086ad6da850e3fc11c85250c53006c7ad9b387", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_weekday/wchar_t/wrapped_locale.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_weekday%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "62f393b3c1f333e1f08f5ba906ba844449a245ea", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/1.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "1c38fcb3884e7b5aaba14541051307d0374a680b", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "206130ac140cd2e76f0c139e7eea1cd8acbda3a8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "b805c3c43cfa958e2f97431e46c56584bff886bd", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/char/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fchar%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "c117311c73194c8c83dbda0c2e98003468970ac4", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/1.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "0f61392df09f25f40b7c166cffc10cedeafb86af", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/3.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2F3.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "206130ac140cd2e76f0c139e7eea1cd8acbda3a8", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/wrapped_env.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_env.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_env.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_env.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "b805c3c43cfa958e2f97431e46c56584bff886bd", "filename": "libstdc++-v3/testsuite/22_locale/time_get/get_year/wchar_t/wrapped_locale.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get%2Fget_year%2Fwchar_t%2Fwrapped_locale.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}, {"sha": "b5c8f098031fad7f30175651e77f4fe05c6f4111", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_char.cc", "status": "removed", "additions": 0, "deletions": 735, "changes": 735, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_char.cc?ref=044b4de3d85f870850d185c96de1746202710251"}, {"sha": "89efdb9fea57e760e8fd6f216de1a783b211804a", "filename": "libstdc++-v3/testsuite/22_locale/time_get_members_wchar_t.cc", "status": "removed", "additions": 0, "deletions": 738, "changes": 738, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/044b4de3d85f870850d185c96de1746202710251/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_get_members_wchar_t.cc?ref=044b4de3d85f870850d185c96de1746202710251"}, {"sha": "a1ce9ac60fa99eaaa9adc4dd70187f12d265acb7", "filename": "libstdc++-v3/testsuite/22_locale/time_put/1.cc", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F1.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361", "previous_filename": "libstdc++-v3/testsuite/22_locale/time_put.cc"}, {"sha": "84761bf2090eb32fbb0df0a36083afca96f49c25", "filename": "libstdc++-v3/testsuite/22_locale/time_put/2.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Ftime_put%2F2.cc?ref=5f8d36fe0a8a10ea1a4b0a3ad5790d5bc5283361"}]}