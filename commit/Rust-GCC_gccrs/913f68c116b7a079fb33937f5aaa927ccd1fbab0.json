{"sha": "913f68c116b7a079fb33937f5aaa927ccd1fbab0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEzZjY4YzExNmI3YTA3OWZiMzM5MzdmNWFhYTkyN2NjZDFmYmFiMA==", "commit": {"author": {"name": "John Carr", "email": "jfc@mit.edu", "date": "1998-10-01T16:47:41Z"}, "committer": {"name": "John Carr", "email": "jfc@gcc.gnu.org", "date": "1998-10-01T16:47:41Z"}, "message": "dwarf2out.c (expand_builtin_dwarf_reg_size): Fix to work with more than three size ranges.\n\n\t* dwarf2out.c (expand_builtin_dwarf_reg_size): Fix to work\n\twith more than three size ranges.\n\t* flow.c (sbitmap_copy): Use bcopy to copy bitmap.\n\t* rtl.c (mode_name): Add a null string at the end of the array.\n\t(mode_wider_mode): Change type to unsigned char.\n\t(mode_mask_array): New variable.\n \t(init_rtl): Update for mode_wider_mode type change.\n\t* rtl.h (mode_wider_mode): Change type to unsigned char.\n\t(mode_mask_array): Declare.\n\t(GET_MODE_MASK): Use mode_mask_array.\n\nFrom-SVN: r22717", "tree": {"sha": "d9bf3be339a2978253909ce15a9dede99fd49e66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9bf3be339a2978253909ce15a9dede99fd49e66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/913f68c116b7a079fb33937f5aaa927ccd1fbab0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913f68c116b7a079fb33937f5aaa927ccd1fbab0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/913f68c116b7a079fb33937f5aaa927ccd1fbab0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/913f68c116b7a079fb33937f5aaa927ccd1fbab0/comments", "author": {"login": "VoxSciurorum", "id": 60116679, "node_id": "MDQ6VXNlcjYwMTE2Njc5", "avatar_url": "https://avatars.githubusercontent.com/u/60116679?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VoxSciurorum", "html_url": "https://github.com/VoxSciurorum", "followers_url": "https://api.github.com/users/VoxSciurorum/followers", "following_url": "https://api.github.com/users/VoxSciurorum/following{/other_user}", "gists_url": "https://api.github.com/users/VoxSciurorum/gists{/gist_id}", "starred_url": "https://api.github.com/users/VoxSciurorum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VoxSciurorum/subscriptions", "organizations_url": "https://api.github.com/users/VoxSciurorum/orgs", "repos_url": "https://api.github.com/users/VoxSciurorum/repos", "events_url": "https://api.github.com/users/VoxSciurorum/events{/privacy}", "received_events_url": "https://api.github.com/users/VoxSciurorum/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3ce1534782482f0885a330a6b0aad2f84c80b135", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ce1534782482f0885a330a6b0aad2f84c80b135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ce1534782482f0885a330a6b0aad2f84c80b135"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "e5fb2b236c4fc6ef34172f2a58a141542353bee7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=913f68c116b7a079fb33937f5aaa927ccd1fbab0", "patch": "@@ -1,3 +1,19 @@\n+Thu Oct  1 19:20:09 1998  John Carr  <jfc@mit.edu>\n+\n+\t* dwarf2out.c (expand_builtin_dwarf_reg_size): Fix to work\n+\twith more than three size ranges.\n+\n+\t* flow.c (sbitmap_copy): Use bcopy to copy bitmap.\n+\n+\t* rtl.c (mode_name): Add a null string at the end of the array.\n+\t(mode_wider_mode): Change type to unsigned char.\n+\t(mode_mask_array): New variable.\n+ \t(init_rtl): Update for mode_wider_mode type change.\n+\n+\t* rtl.h (mode_wider_mode): Change type to unsigned char.\n+\t(mode_mask_array): Declare.\n+\t(GET_MODE_MASK): Use mode_mask_array.\n+\n Thu Oct  1 15:56:01 1998  Gavin Romig-Koch  <gavin@cygnus.com>\n \n \t* calls.c (expand_call) : Encapsulate code into "}, {"sha": "9826c3809a26f1cdf5e890e5aa6614605c090f36", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=913f68c116b7a079fb33937f5aaa927ccd1fbab0", "patch": "@@ -642,24 +642,26 @@ expand_builtin_dwarf_reg_size (reg_tree, target)\n     }\n   else\n     {\n+      int last_end = 100;\n       --n_ranges;\n       t = build_int_2 (ranges[n_ranges].size, 0);\n-      size = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n-      for (; n_ranges--; )\n+      do\n \t{\n-\t  if ((DWARF_FRAME_REGNUM (ranges[n_ranges].end)\n-\t       - DWARF_FRAME_REGNUM (ranges[n_ranges].beg))\n-\t      != ranges[n_ranges].end - ranges[n_ranges].beg)\n+\t  int beg = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n+\t  int end = DWARF_FRAME_REGNUM (ranges[n_ranges].end);\n+\t  if (beg < 0)\n+\t    continue;\n+\t  if (end >= last_end)\n \t    abort ();\n-\t  if (DWARF_FRAME_REGNUM (ranges[n_ranges].beg) >= size)\n+\t  last_end = end;\n+\t  if (end - beg != ranges[n_ranges].end - ranges[n_ranges].beg)\n \t    abort ();\n-\t  size = DWARF_FRAME_REGNUM (ranges[n_ranges].beg);\n \t  t2 = fold (build (LE_EXPR, integer_type_node, reg_tree,\n-\t\t\t    build_int_2 (DWARF_FRAME_REGNUM\n-\t\t\t\t\t (ranges[n_ranges].end), 0)));\n+\t\t\t    build_int_2 (end, 0)));\n \t  t = fold (build (COND_EXPR, integer_type_node, t2,\n \t\t\t   build_int_2 (ranges[n_ranges].size, 0), t));\n \t}\n+      while (--n_ranges > 0);\n     }\n   return expand_expr (t, target, Pmode, 0);\n }"}, {"sha": "f963c107c713ddebdc074227f21bf2d94972c632", "filename": "gcc/flow.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=913f68c116b7a079fb33937f5aaa927ccd1fbab0", "patch": "@@ -3605,13 +3605,7 @@ void\n sbitmap_copy (dst, src)\n      sbitmap dst, src;\n {\n-  int i;\n-  sbitmap_ptr d,s;\n-\n-  s = src->elms;\n-  d = dst->elms;\n-  for (i = 0; i < dst->size; i++)\n-    *d++ = *s++;\n+  bcopy (src->elms, dst->elms, sizeof (SBITMAP_ELT_TYPE) * dst->size);\n }\n \n /* Zero all elements in a bitmap.  */"}, {"sha": "119950c4348f6a527bf5f41a715529ac65a71fac", "filename": "gcc/machmode.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fmachmode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Fmachmode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmachmode.h?ref=913f68c116b7a079fb33937f5aaa927ccd1fbab0", "patch": "@@ -196,14 +196,14 @@ extern int mode_unit_size[];\n /* Get a bitmask containing 1 for all bits in a word\n    that fit within mode MODE.  */\n \n-#define GET_MODE_MASK(MODE)  \\\n-   ((GET_MODE_BITSIZE (MODE) >= HOST_BITS_PER_WIDE_INT)  \\\n-    ?(HOST_WIDE_INT) ~0 : (((HOST_WIDE_INT) 1 << GET_MODE_BITSIZE (MODE)) - 1))\n+extern const unsigned HOST_WIDE_INT mode_mask_array[];\n+\n+#define GET_MODE_MASK(MODE) mode_mask_array[(int) (MODE)]\n \n /* Get the next wider natural mode (eg, QI -> HI -> SI -> DI -> TI).  */\n \n-extern enum machine_mode mode_wider_mode[];\n-#define GET_MODE_WIDER_MODE(MODE)\t(mode_wider_mode[(int) (MODE)])\n+extern unsigned char mode_wider_mode[];\n+#define GET_MODE_WIDER_MODE(MODE)\t((enum machine_mode)mode_wider_mode[(int) (MODE)])\n \n /* Return the mode for data of a given size SIZE and mode class CLASS.\n    If LIMIT is nonzero, then don't use modes bigger than MAX_FIXED_MODE_SIZE."}, {"sha": "1929459a8fff3242db74be92802fa1d84f0ddaa8", "filename": "gcc/rtl.c", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/913f68c116b7a079fb33937f5aaa927ccd1fbab0/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=913f68c116b7a079fb33937f5aaa927ccd1fbab0", "patch": "@@ -58,13 +58,15 @@ char *rtx_name[] = {\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, SIZE, UNIT, WIDER)  NAME,\n \n-char *mode_name[(int) MAX_MACHINE_MODE] = {\n+char *mode_name[(int) MAX_MACHINE_MODE + 1] = {\n #include \"machmode.def\"\n \n #ifdef EXTRA_CC_MODES\n-  EXTRA_CC_NAMES\n+  EXTRA_CC_NAMES,\n #endif\n-\n+  /* Add an extra field to avoid a core dump if someone tries to convert\n+     MAX_MACHINE_MODE to a string.   */\n+  \"\"\n };\n \n #undef DEF_MACHMODE\n@@ -107,14 +109,23 @@ int mode_unit_size[(int) MAX_MACHINE_MODE] = {\n    use this.  */\n \n #define DEF_MACHMODE(SYM, NAME, CLASS, SIZE, UNIT, WIDER)  \\\n-  (enum machine_mode) WIDER,\n+  (unsigned char) WIDER,\n \n-enum machine_mode mode_wider_mode[(int) MAX_MACHINE_MODE] = {\n+unsigned char mode_wider_mode[(int) MAX_MACHINE_MODE] = {\n #include \"machmode.def\"\t\t/* machine modes are documented here */\n };\n \n #undef DEF_MACHMODE\n \n+#define DEF_MACHMODE(SYM, NAME, CLASS, SIZE, UNIT, WIDER)  \\\n+  ((SIZE) * BITS_PER_UNIT >= HOST_BITS_PER_WIDE_INT) ? ~(unsigned HOST_WIDE_INT)0 : ((unsigned HOST_WIDE_INT) 1 << (SIZE) * BITS_PER_UNIT) - 1,\n+\n+/* Indexed by machine mode, gives mask of significant bits in mode.  */\n+\n+const unsigned HOST_WIDE_INT mode_mask_array[(int) MAX_MACHINE_MODE] = {\n+#include \"machmode.def\"\n+};\n+\n /* Indexed by mode class, gives the narrowest mode for each class.  */\n \n enum machine_mode class_narrowest_mode[(int) MAX_MODE_CLASS];\n@@ -892,8 +903,8 @@ init_rtl ()\n       mode_class[i] = MODE_CC;\n       mode_size[i] = mode_size[(int) CCmode];\n       mode_unit_size[i] = mode_unit_size[(int) CCmode];\n-      mode_wider_mode[i - 1] = (enum machine_mode) i;\n-      mode_wider_mode[i] = VOIDmode;\n+      mode_wider_mode[i - 1] = i;\n+      mode_wider_mode[i] = (unsigned char)VOIDmode;\n     }\n #endif\n "}]}