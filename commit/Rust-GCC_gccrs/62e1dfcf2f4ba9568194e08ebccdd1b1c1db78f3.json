{"sha": "62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjJlMWRmY2YyZjRiYTk1NjgxOTRlMDhlYmNjZGQxYjFjMWRiNzhmMw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2003-02-19T00:51:16Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@gcc.gnu.org", "date": "2003-02-19T00:51:16Z"}, "message": "20030218-1.c: New.\n\n2003-02-18  Nick Clifton  <nickc@redhat.com>\n            Aldy Hernandez  <aldyh@redhat.com>\n\n        * testsuite/gcc.dg/20030218-1.c: New.\n\n        * doc/tm.texi: Document TARGET_VECTOR_TYPES_COMPATIBLE.\n\n        * target-def.h (TARGET_INITIALIZER): Add\n        TARGET_VECTOR_TYPES_COMPATIBLE.\n        (TARGET_VECTOR_TYPES_COMPATIBLE): New macro.\n\n        * target.h (struct gcc_target): Add field vector_types_compatible.\n\n        * c-typeck.c (comptypes): Take into account\n        TARGET_VECTOR_TYPES_COMPATIBLE.\n        (convert_for_assignment): Same.\n\n        * config/rs6000/rs6000.c (is_ev64_opaque_type): New.\n        (rs6000_spe_vector_types_compatible): New.\n        (TARGET_VECTOR_TYPES_COMPATIBLE): Define.\n\nFrom-SVN: r63080", "tree": {"sha": "80e4f09c68d9f7c5a7226ee0a859bf2f53c872a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80e4f09c68d9f7c5a7226ee0a859bf2f53c872a8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5e93e88adf5643394ee014e06d2c8f13fafaff96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e93e88adf5643394ee014e06d2c8f13fafaff96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e93e88adf5643394ee014e06d2c8f13fafaff96"}], "stats": {"total": 61, "additions": 61, "deletions": 0}, "files": [{"sha": "d784d3e11a3e937817572c34bc2c5a26b1ec821b", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "patch": "@@ -574,6 +574,11 @@ comptypes (type1, type2)\n \tval = 1;\n       break;\n \n+    case VECTOR_TYPE:\n+      /* The target might allow certain vector types to be compatible.  */\n+      val = (*targetm.vector_types_compatible) (t1, t2);\n+      break;\n+\n     default:\n       break;\n     }\n@@ -4064,6 +4069,10 @@ convert_for_assignment (type, rhs, errtype, fundecl, funname, parmnum)\n       rhs = build1 (NOP_EXPR, type, rhs);\n       return rhs;\n     }\n+  /* Some types can interconvert without explicit casts.  */\n+  else if (codel == VECTOR_TYPE && coder == VECTOR_TYPE\n+\t   && (*targetm.vector_types_compatible) (type, rhstype))\n+    return convert (type, rhs);\n   /* Arithmetic types all interconvert, and enum is treated like int.  */\n   else if ((codel == INTEGER_TYPE || codel == REAL_TYPE \n \t    || codel == ENUMERAL_TYPE || codel == COMPLEX_TYPE"}, {"sha": "9920534ef4e36505310e61bcdc0e21616ae56185", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "patch": "@@ -268,6 +268,8 @@ static void is_altivec_return_reg PARAMS ((rtx, void *));\n static rtx generate_set_vrsave PARAMS ((rtx, rs6000_stack_t *, int));\n static void altivec_frame_fixup PARAMS ((rtx, rtx, HOST_WIDE_INT));\n static int easy_vector_constant PARAMS ((rtx));\n+static int is_ev64_opaque_type PARAMS ((tree));\n+static bool rs6000_spe_vector_types_compatible PARAMS ((tree, tree));\n \n /* Hash table stuff for keeping track of TOC entries.  */\n \n@@ -420,6 +422,9 @@ static const char alt_reg_names[][8] =\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_0\n \n+#undef TARGET_VECTOR_TYPES_COMPATIBLE\n+#define TARGET_VECTOR_TYPES_COMPATIBLE  rs6000_spe_vector_types_compatible\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Override command line options.  Mostly we process the processor\n@@ -13588,4 +13593,37 @@ rs6000_memory_move_cost (mode, class, in)\n     return 4 + rs6000_register_move_cost (mode, class, GENERAL_REGS);\n }\n \n+/* Return true if TYPE is of type __ev64_opaque__.  */\n+\n+static int\n+is_ev64_opaque_type (type)\n+     tree type;\n+{\n+  return (TYPE_NAME (type)\n+\t  && TREE_CODE (TYPE_NAME (type)) == TYPE_DECL\n+\t  && DECL_NAME (TYPE_NAME (type))\n+\t  && strcmp (IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (type))),\n+\t\t     \"__ev64_opaque__\") == 0);\n+}\n+\n+/* Return true if vector type1 can be converted into vector type2.  */\n+\n+static bool\n+rs6000_spe_vector_types_compatible (t1, t2)\n+     tree t1;\n+     tree t2;\n+{\n+  if (!TARGET_SPE\n+      || TREE_CODE (t1) != VECTOR_TYPE || TREE_CODE (t2) != VECTOR_TYPE)\n+    return 0;\n+\n+  if (TYPE_NAME (t1) || TYPE_NAME (t2))\n+    return is_ev64_opaque_type (t1) || is_ev64_opaque_type (t2);\n+\n+  /* FIXME: We assume V2SI is the opaque type, so we accidentally\n+     allow inter conversion to and from V2SI modes.  We could use\n+     V1D1, and rewrite <spe.h> accordingly.  */\n+  return t1 == V2SI_type_node || t2 == V2SI_type_node;\n+}\n+\n #include \"gt-rs6000.h\""}, {"sha": "6277057c1c16d57b04dac9b18927b4f6659e4fbe", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "patch": "@@ -1452,6 +1452,12 @@ floating-point arithmetic.\n The default definition of this macro returns false for all sizes.\n @end table\n \n+@deftypefn {Target Hook} bool TARGET_VECTOR_TYPES_COMPATIBLE (tree @var{type1}, tree @var{type2})\n+This target hook should return @code{true} if no cast is needed when\n+copying a vector value of type @var{type1} into a vector lvalue of\n+type @var{type2}.  The default is that there are no such types.\n+@end deftypefn\n+\n @deftypefn {Target Hook} bool TARGET_MS_BITFIELD_LAYOUT_P (tree @var{record_type})\n This target hook returns @code{true} if bit-fields in the given\n @var{record_type} are to be laid out following the rules of Microsoft"}, {"sha": "57d6e98e80a404021b62f98bd9f6dfb50da95f76", "filename": "gcc/target-def.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "patch": "@@ -256,6 +256,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_VALID_POINTER_MODE default_valid_pointer_mode\n #endif\n \n+#ifndef TARGET_VECTOR_TYPES_COMPATIBLE\n+#define TARGET_VECTOR_TYPES_COMPATIBLE hook_bool_tree_tree_false\n+#endif\n+\n /* In hook.c.  */\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_bool_void_false\n #define TARGET_CANNOT_FORCE_CONST_MEM hook_bool_rtx_false\n@@ -303,6 +307,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_ENCODE_SECTION_INFO,\t\t\t\\\n   TARGET_STRIP_NAME_ENCODING,\t\t\t\\\n   TARGET_VALID_POINTER_MODE,                    \\\n+  TARGET_VECTOR_TYPES_COMPATIBLE,\t\t\\\n   TARGET_RTX_COSTS,\t\t\t\t\\\n   TARGET_ADDRESS_COST,\t\t\t\t\\\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\"}, {"sha": "90660d976725d539491433b5c373848195a1368a", "filename": "gcc/target.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=62e1dfcf2f4ba9568194e08ebccdd1b1c1db78f3", "patch": "@@ -320,6 +320,9 @@ struct gcc_target\n   /* True if MODE is valid for a pointer in __attribute__((mode(\"MODE\"))).  */\n   bool (* valid_pointer_mode) PARAMS ((enum machine_mode mode));\n \n+  /* True if two vector types can be copied without an explicit cast.  */\n+  bool (* vector_types_compatible) PARAMS ((tree, tree));\n+\n   /* Compute a (partial) cost for rtx X.  Return true if the complete\n      cost has been computed, and false if subexpressions should be\n      scanned.  In either case, *TOTAL contains the cost result.  */"}]}