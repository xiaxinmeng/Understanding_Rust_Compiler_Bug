{"sha": "672f0baaec5def33eb97a0936844a4f18b417e87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyZjBiYWFlYzVkZWYzM2ViOTdhMDkzNjg0NGE0ZjE4YjQxN2U4Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-09-22T15:11:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-09-22T15:11:53Z"}, "message": "arc.h (TRAMPOLINE_ALIGNMENT): New.\n\n\t* config/arc/arc.h (TRAMPOLINE_ALIGNMENT): New.\n\t(TRAMPOLINE_TEMPLATE): Merge with ...\n\t(INITIALIZE_TRAMPOLINE): ... this and move ...\n\t* config/arc/arc.c (arc_trampoline_init): ... here.\n\t(TARGET_TRAMPOLINE_INIT): New.\n\nFrom-SVN: r151985", "tree": {"sha": "01db6de858fc7d7920a29d31b3265148fe4ab3d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01db6de858fc7d7920a29d31b3265148fe4ab3d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672f0baaec5def33eb97a0936844a4f18b417e87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672f0baaec5def33eb97a0936844a4f18b417e87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672f0baaec5def33eb97a0936844a4f18b417e87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672f0baaec5def33eb97a0936844a4f18b417e87/comments", "author": null, "committer": null, "parents": [{"sha": "2d7b663adf5e348d6a83fb742668d50d5509c401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7b663adf5e348d6a83fb742668d50d5509c401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7b663adf5e348d6a83fb742668d50d5509c401"}], "stats": {"total": 94, "additions": 55, "deletions": 39}, "files": [{"sha": "a852c4ae5500dce23c3c2108f3778ef3bbce66a7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=672f0baaec5def33eb97a0936844a4f18b417e87", "patch": "@@ -35,14 +35,20 @@\n \ttargetm.asm_out.trampoline_template.  Make the memory block const\n \tand set its size.\n \n-        * config/alpha/alpha.c (alpha_trampoline_init): Rename from\n-        alpha_initialize_trampoline.  Make static.  Merge VMS parameter\n-        differences into the TARGET_ABI_OPEN_VMS code block.\n+\t* config/alpha/alpha.c (alpha_trampoline_init): Rename from\n+\talpha_initialize_trampoline.  Make static.  Merge VMS parameter\n+\tdifferences into the TARGET_ABI_OPEN_VMS code block.\n+\t(TARGET_TRAMPOLINE_INIT): New.\n+\t* config/alpha/alpha.h (TRAMPOLINE_TEMPLATE): Remove.\n+\t(TRAMPOLINE_SECTION, INITIALIZE_TRAMPOLINE): Remove.\n+\t* config/alpha/vms.h (TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT): Remove.\n+\t(INITIALIZE_TRAMPOLINE): Remove.\n+\n+\t* config/arc/arc.h (TRAMPOLINE_ALIGNMENT): New.\n+\t(TRAMPOLINE_TEMPLATE): Merge with ...\n+\t(INITIALIZE_TRAMPOLINE): ... this and move ...\n+\t* config/arc/arc.c (arc_trampoline_init): ... here.\n \t(TARGET_TRAMPOLINE_INIT): New.\n-        * config/alpha/alpha.h (TRAMPOLINE_TEMPLATE): Remove.\n-        (TRAMPOLINE_SECTION, INITIALIZE_TRAMPOLINE): Remove.\n-        * config/alpha/vms.h (TRAMPOLINE_SIZE, TRAMPOLINE_ALIGNMENT): Remove.\n-        (INITIALIZE_TRAMPOLINE): Remove.\n \n 2009-09-22  Richard Guenther  <rguenther@suse.de>\n "}, {"sha": "9239a344726d4bd6da212d48b79b548d526dc43c", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=672f0baaec5def33eb97a0936844a4f18b417e87", "patch": "@@ -94,6 +94,8 @@ static void arc_external_libcall (rtx);\n static bool arc_return_in_memory (const_tree, const_tree);\n static bool arc_pass_by_reference (CUMULATIVE_ARGS *, enum machine_mode,\n \t\t\t\t   const_tree, bool);\n+static void arc_trampoline_init (rtx, tree, rtx);\n+\n \f\n /* ARC specific attributs.  */\n \n@@ -151,6 +153,9 @@ static const struct attribute_spec arc_attribute_table[] =\n #undef TARGET_EXPAND_BUILTIN_VA_START\n #define TARGET_EXPAND_BUILTIN_VA_START arc_va_start\n \n+#undef TARGET_TRAMPOLINE_INIT\n+#define TARGET_TRAMPOLINE_INIT arc_trampoline_init\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Implement TARGET_HANDLE_OPTION.  */\n@@ -2343,3 +2348,39 @@ arc_pass_by_reference (CUMULATIVE_ARGS *ca ATTRIBUTE_UNUSED,\n \n   return size > 8;\n }\n+\n+/* Trampolines.  */\n+/* ??? This doesn't work yet because GCC will use as the address of a nested\n+   function the address of the trampoline.  We need to use that address\n+   right shifted by 2.  It looks like we'll need PSImode after all. :-( \n+\n+   ??? The above comment sounds like it's doable via\n+   TARGET_TRAMPOLINE_ADJUST_ADDRESS; no PSImode needed.\n+\n+   On the ARC, the trampoline is quite simple as we have 32-bit immediate\n+   constants.\n+\n+\tmov r24,STATIC\n+\tj.nd FUNCTION\n+*/\n+\n+static void\n+arc_trampoline_init (rtx m_tramp, tree fndecl, rtx chain_value)\n+{\n+  rtx fnaddr = XEXP (DECL_RTX (fndecl), 0);\n+  rtx mem;\n+\n+  mem = adjust_address (m_tramp, SImode, 0);\n+  emit_move_insn (mem, GEN_INT (0x631f7c00));\n+\n+  mem = adjust_address (m_tramp, SImode, 4);\n+  emit_move_insn (mem, chain_value);\n+\n+  mem = adjust_address (m_tramp, SImode, 8);\n+  emit_move_insn (mem, GEN_INT (0x381f0000));\n+\n+  mem = adjust_address (m_tramp, SImode, 12);\n+  emit_move_insn (mem, fnaddr);\n+\n+  emit_insn (gen_flush_icache (m_tramp));\n+}"}, {"sha": "5127a123e31ccc70f6c2b81fbdd0fa80c41742bf", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672f0baaec5def33eb97a0936844a4f18b417e87/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=672f0baaec5def33eb97a0936844a4f18b417e87", "patch": "@@ -657,39 +657,8 @@ arc_eligible_for_epilogue_delay (TRIAL, SLOTS_FILLED)\n    for profiling a function entry.  */\n #define FUNCTION_PROFILER(FILE, LABELNO)\n \f\n-/* Trampolines.  */\n-/* ??? This doesn't work yet because GCC will use as the address of a nested\n-   function the address of the trampoline.  We need to use that address\n-   right shifted by 2.  It looks like we'll need PSImode after all. :-(  */\n-\n-/* Output assembler code for a block containing the constant parts\n-   of a trampoline, leaving space for the variable parts.  */\n-/* On the ARC, the trampoline is quite simple as we have 32-bit immediate\n-   constants.\n-\n-\tmov r24,STATIC\n-\tj.nd FUNCTION\n-*/\n-#define TRAMPOLINE_TEMPLATE(FILE) \\\n-do { \\\n-  assemble_aligned_integer (UNITS_PER_WORD, GEN_INT (0x631f7c00)); \\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx); \\\n-  assemble_aligned_integer (UNITS_PER_WORD, GEN_INT (0x381f0000)); \\\n-  assemble_aligned_integer (UNITS_PER_WORD, const0_rtx); \\\n-} while (0)\n-\n-/* Length in units of the trampoline for entering a nested function.  */\n+#define TRAMPOLINE_ALIGNMENT 32\n #define TRAMPOLINE_SIZE 16\n-\n-/* Emit RTL insns to initialize the variable parts of a trampoline.\n-   FNADDR is an RTX for the address of the function's pure code.\n-   CXT is an RTX for the static chain value for the function.  */\n-#define INITIALIZE_TRAMPOLINE(TRAMP, FNADDR, CXT) \\\n-do { \\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 4)), CXT); \\\n-  emit_move_insn (gen_rtx_MEM (SImode, plus_constant (TRAMP, 12)), FNADDR); \\\n-  emit_insn (gen_flush_icache (validize_mem (gen_rtx_MEM (SImode, TRAMP)))); \\\n-} while (0)\n \f\n /* Addressing modes, and classification of registers for them.  */\n "}]}