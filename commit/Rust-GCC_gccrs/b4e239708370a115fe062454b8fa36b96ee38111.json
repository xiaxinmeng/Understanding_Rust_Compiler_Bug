{"sha": "b4e239708370a115fe062454b8fa36b96ee38111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMjM5NzA4MzcwYTExNWZlMDYyNDU0YjhmYTM2Yjk2ZWUzODExMQ==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-11-11T10:22:58Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-11-11T10:22:58Z"}, "message": "* config/arc/arc.h (LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n\nFrom-SVN: r204666", "tree": {"sha": "97958083baf0674277037791988fe87baa377210", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97958083baf0674277037791988fe87baa377210"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e239708370a115fe062454b8fa36b96ee38111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e239708370a115fe062454b8fa36b96ee38111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e239708370a115fe062454b8fa36b96ee38111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e239708370a115fe062454b8fa36b96ee38111/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b11b9adbb1d1458a805cc1bf504f7b14545ed4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b11b9adbb1d1458a805cc1bf504f7b14545ed4a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b11b9adbb1d1458a805cc1bf504f7b14545ed4a2"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "6c55b69e6609f67e6e9e66ad21acdced5f517690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e239708370a115fe062454b8fa36b96ee38111/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e239708370a115fe062454b8fa36b96ee38111/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e239708370a115fe062454b8fa36b96ee38111", "patch": "@@ -1,3 +1,7 @@\n+2013-11-11  Joern Rennecke  <joern.rennecke@embecosm.com>\n+\n+\t* config/arc/arc.h (LOGICAL_OP_NON_SHORT_CIRCUIT): Define.\n+\n 2013-11-08  Jeff Law  <law@redhat.com>\n \n \t* tree-ssa-threadupdate.c (mark_threaded_blocks): Truncate jump"}, {"sha": "cc49c553c55dc17f198c29bd671665fd6c9f2a45", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e239708370a115fe062454b8fa36b96ee38111/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e239708370a115fe062454b8fa36b96ee38111/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=b4e239708370a115fe062454b8fa36b96ee38111", "patch": "@@ -1087,6 +1087,22 @@ arc_select_cc_mode (OP, X, Y)\n    expensive than reg->reg moves.  */\n #define BRANCH_COST(speed_p, predictable_p) 2\n \n+/* Scc sets the destination to 1 and then conditionally zeroes it.\n+   Best case, ORed SCCs can be made into clear - condset - condset.\n+   But it could also end up as five insns.  So say it costs four on\n+   average.\n+   These extra instructions - and the second comparison - will also be\n+   an extra cost if the first comparison would have been decisive.\n+   So get an average saving, with a probability of the first branch\n+   beging decisive of p0, we want:\n+   p0 * (branch_cost - 4) > (1 - p0) * 5\n+   ??? We don't get to see that probability to evaluate, so we can\n+   only wildly guess that it might be 50%.\n+   ??? The compiler also lacks the notion of branch predictability.  */\n+#define LOGICAL_OP_NON_SHORT_CIRCUIT \\\n+  (BRANCH_COST (optimize_function_for_speed_p (cfun), \\\n+\t\tfalse) > 9)\n+\n /* Nonzero if access to memory by bytes is slow and undesirable.\n    For RISC chips, it means that access to memory by bytes is no\n    better than access by words when possible, so grab a whole word"}]}