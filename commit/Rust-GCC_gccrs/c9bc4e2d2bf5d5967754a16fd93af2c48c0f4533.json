{"sha": "c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzliYzRlMmQyYmY1ZDU5Njc3NTRhMTZmZDkzYWYyYzQ4YzBmNDUzMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-05T03:39:49Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-11-05T03:39:49Z"}, "message": "sync/atomic: fix data races in tests\n\nBackport https://codereview.appspot.com/111320044 from Go\nmaster library.\n\nFrom-SVN: r217110", "tree": {"sha": "5b38402a4157cf86e5f193cc2014a007a7dbdf55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b38402a4157cf86e5f193cc2014a007a7dbdf55"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533/comments", "author": null, "committer": null, "parents": [{"sha": "659e39f1bcb277ddcc701b9ed7d41776ab8b4214", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/659e39f1bcb277ddcc701b9ed7d41776ab8b4214", "html_url": "https://github.com/Rust-GCC/gccrs/commit/659e39f1bcb277ddcc701b9ed7d41776ab8b4214"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "eaa3b6b5c987a6e505c50bc17f54dc30d2168a41", "filename": "libgo/go/sync/atomic/atomic_test.go", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsync%2Fatomic%2Fatomic_test.go?ref=c9bc4e2d2bf5d5967754a16fd93af2c48c0f4533", "patch": "@@ -858,7 +858,7 @@ func hammerCompareAndSwapInt32(uaddr *uint32, count int) {\n \taddr := (*int32)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadInt32(addr)\n \t\t\tif CompareAndSwapInt32(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -869,7 +869,7 @@ func hammerCompareAndSwapInt32(uaddr *uint32, count int) {\n func hammerCompareAndSwapUint32(addr *uint32, count int) {\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadUint32(addr)\n \t\t\tif CompareAndSwapUint32(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -883,7 +883,7 @@ func hammerCompareAndSwapUintptr32(uaddr *uint32, count int) {\n \taddr := (*uintptr)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadUintptr(addr)\n \t\t\tif CompareAndSwapUintptr(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -897,7 +897,7 @@ func hammerCompareAndSwapPointer32(uaddr *uint32, count int) {\n \taddr := (*unsafe.Pointer)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadPointer(addr)\n \t\t\tif CompareAndSwapPointer(addr, v, unsafe.Pointer(uintptr(v)+1)) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -1039,7 +1039,7 @@ func hammerCompareAndSwapInt64(uaddr *uint64, count int) {\n \taddr := (*int64)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadInt64(addr)\n \t\t\tif CompareAndSwapInt64(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -1050,7 +1050,7 @@ func hammerCompareAndSwapInt64(uaddr *uint64, count int) {\n func hammerCompareAndSwapUint64(addr *uint64, count int) {\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadUint64(addr)\n \t\t\tif CompareAndSwapUint64(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -1064,7 +1064,7 @@ func hammerCompareAndSwapUintptr64(uaddr *uint64, count int) {\n \taddr := (*uintptr)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadUintptr(addr)\n \t\t\tif CompareAndSwapUintptr(addr, v, v+1) {\n \t\t\t\tbreak\n \t\t\t}\n@@ -1078,7 +1078,7 @@ func hammerCompareAndSwapPointer64(uaddr *uint64, count int) {\n \taddr := (*unsafe.Pointer)(unsafe.Pointer(uaddr))\n \tfor i := 0; i < count; i++ {\n \t\tfor {\n-\t\t\tv := *addr\n+\t\t\tv := LoadPointer(addr)\n \t\t\tif CompareAndSwapPointer(addr, v, unsafe.Pointer(uintptr(v)+1)) {\n \t\t\t\tbreak\n \t\t\t}"}]}