{"sha": "c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxOGM1YWI1N2FjOTNhMGI1ZmVjYjE2ODdkYWE0ZGZlMTcxNDQyZQ==", "commit": {"author": {"name": "Stephane Carrez", "email": "Stephane.Carrez@worldnet.fr", "date": "2001-05-03T21:09:28Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2001-05-03T21:09:28Z"}, "message": "m68hc11.md (\"bitcmpqi\"): New pattern for bitb instruction.\n\n\t* config/m68hc11/m68hc11.md (\"bitcmpqi\"): New pattern for bitb\n\tinstruction.\n\t(\"bitcmpqi2\"): New pattern for bit-extract and test.\n\t(\"bitcmphi\"): New pattern for bitb/bita instructions.\n\nFrom-SVN: r41812", "tree": {"sha": "d112b0c98776e86eccccbb5f4e7f430a0a8a13be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d112b0c98776e86eccccbb5f4e7f430a0a8a13be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c418c5ab57ac93a0b5fecb1687daa4dfe171442e/comments", "author": null, "committer": null, "parents": [{"sha": "fa27606ca36122822459b32dda0ea76d3b5dd2e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa27606ca36122822459b32dda0ea76d3b5dd2e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa27606ca36122822459b32dda0ea76d3b5dd2e3"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "9c9e4ca724c33f02a2bac9912c0d76c81ed9b24d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c418c5ab57ac93a0b5fecb1687daa4dfe171442e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c418c5ab57ac93a0b5fecb1687daa4dfe171442e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "patch": "@@ -1,3 +1,10 @@\n+2001-05-03  Stephane Carrez  <Stephane.Carrez@worldnet.fr>\n+\n+\t* config/m68hc11/m68hc11.md (\"bitcmpqi\"): New pattern for bitb\n+\tinstruction.\n+\t(\"bitcmpqi2\"): New pattern for bit-extract and test.\n+\t(\"bitcmphi\"): New pattern for bitb/bita instructions.\n+\n 2001-05-03  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gccbug.in: Use a temporary directory when the mktemp command is"}, {"sha": "a4380c32aa4cb51578c625274796cb070898c7fb", "filename": "gcc/config/m68hc11/m68hc11.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c418c5ab57ac93a0b5fecb1687daa4dfe171442e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c418c5ab57ac93a0b5fecb1687daa4dfe171442e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.md?ref=c418c5ab57ac93a0b5fecb1687daa4dfe171442e", "patch": "@@ -383,6 +383,87 @@\n   DONE;\n }\")\n \n+(define_insn \"bitcmpqi\"\n+  [(set (cc0)\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d,d,d\")\n+\t        (match_operand:QI 1 \"cmp_operand\" \"im,*A,u\")))]\n+  \"\"\n+  \"@\n+   bitb\\\\t%1\n+   #\n+   bitb\\\\t%1\")\n+\n+(define_insn \"bitcmpqi_z_used\"\n+  [(set (cc0)\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d\")\n+\t\t(match_operand:QI 1 \"cmp_operand\" \"m\")))\n+   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy\"))\n+   (use (reg:HI 11))]\n+  \"\"\n+  \"#\")\n+  \n+(define_split /* \"bitcmpqi_z_used\" */\n+  [(set (cc0)\n+\t(and:QI (match_operand:QI 0 \"tst_operand\" \"d\")\n+\t\t(match_operand:QI 1 \"cmp_operand\" \"m\")))\n+   (use (match_operand:HI 2 \"hard_reg_operand\" \"xy\"))\n+   (use (reg:HI 11))]\n+  \"z_replacement_completed == 2\"\n+  [(set (mem:HI (pre_dec:HI (reg:HI 3))) (match_dup 2))\n+   (set (match_dup 2) (match_dup 3))\n+   (set (cc0) (and:QI (match_dup 0) (match_dup 1)))\n+   (set (match_dup 2) (mem:HI (post_inc:HI (reg:HI 3))))]\n+  \"operands[3] = gen_rtx (REG, HImode, SOFT_Z_REGNUM);\")\n+\n+(define_insn \"bitcmphi\"\n+  [(set (cc0)\n+\t(and:HI (match_operand:HI 0 \"tst_operand\" \"d\")\n+\t        (match_operand:HI 1 \"const_int_operand\" \"i\")))]\n+  \"(INTVAL (operands[1]) & 0x0ff) == 0\n+   || (INTVAL (operands[1]) & 0x0ff00) == 0\"\n+  \"*\n+{\n+   if ((INTVAL (operands[1]) & 0x0ff) == 0)\n+     return \\\"bita\\\\t%h1\\\";\n+   else\n+     return \\\"bitb\\\\t%1\\\";\n+}\")\n+\n+(define_insn \"bitcmpqi_12\"\n+  [(set (cc0)\n+\t(zero_extract (match_operand:HI 0 \"tst_operand\" \"d\")\n+\t              (match_operand:HI 1 \"const_int_operand\" \"i\")\n+\t\t      (match_operand:HI 2 \"const_int_operand\" \"i\")))]\n+  \"(unsigned) (INTVAL (operands[2]) + INTVAL (operands[1])) <= 8\n+   || (((unsigned) (INTVAL (operands[2]) + INTVAL (operands[1])) <= 16)\n+       && (unsigned) INTVAL (operands[2]) >= 8)\"\n+  \"*\n+{\n+   rtx ops[1];\n+   int mask;\n+   int startpos = INTVAL (operands[2]);\n+   int bitsize = INTVAL (operands[1]);\n+\n+   if (startpos >= 8)\n+     {\n+       startpos -= 8;\n+       mask = (1 << (startpos + bitsize)) - 1;\n+       mask &= ~((1 << startpos) - 1);\n+\n+       ops[0] = GEN_INT (mask);\n+       output_asm_insn (\\\"bita\\\\t%0\\\", ops);\n+     }\n+   else\n+     {\n+       mask = (1 << (startpos + bitsize)) - 1;\n+       mask &= ~((1 << startpos) - 1);\n+\n+       ops[0] = GEN_INT (mask);\n+       output_asm_insn (\\\"bitb\\\\t%0\\\", ops);\n+     }\n+   return \\\"\\\";\n+}\")\n+\n (define_insn \"cmpqi_1\"\n   [(set (cc0)\n \t(compare (match_operand:QI 0 \"tst_operand\" \"d,d,*x*y,*x*y\")"}]}