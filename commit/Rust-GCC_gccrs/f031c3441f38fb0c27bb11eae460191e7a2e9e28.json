{"sha": "f031c3441f38fb0c27bb11eae460191e7a2e9e28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjAzMWMzNDQxZjM4ZmIwYzI3YmIxMWVhZTQ2MDE5MWU3YTJlOWUyOA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-02T19:23:56Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-07-02T19:23:56Z"}, "message": "re PR target/51244 ([SH] Inefficient conditional branch and code around T bit)\n\n\tPR target/51244\n\t* config/sh/predicates.md (t_reg_operand, negt_reg_operand): New\n\tpredicates.\n\t* config/sh/sh-protos.h (get_t_reg_rtx): New prototype.\n\t* config/sh/sh.c (get_t_reg_rtx): New function.  Use it when invoking\n\tgen_branch_true and gen_branch_false.\n\t* config/sh/sh.md: Use get_t_reg_rtx when invoking gen_branch_true and\n\tgen_branch_false.\n\t(branch_true, branch_false): Use t_reg_operand predicate.\n\t(*branch_true, *branch_false): Delete.\n\t(movt): Use t_reg_operand predicate.\n\t(*negnegt): Use negt_reg_operand predicate and fold little and big\n\tendian variants.\n\t(*movtt): Use t_reg_operand and fold little and big endian variants.\n\t(*movt_qi): Delete.\n\n\tPR target/51244\n\t* gcc.target/sh/pr51244-1.c: Check that movt insn is not generated.\n\nFrom-SVN: r189177", "tree": {"sha": "38e129004dd353049b54d9731e1f700766fd9cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e129004dd353049b54d9731e1f700766fd9cde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f031c3441f38fb0c27bb11eae460191e7a2e9e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f031c3441f38fb0c27bb11eae460191e7a2e9e28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f031c3441f38fb0c27bb11eae460191e7a2e9e28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f031c3441f38fb0c27bb11eae460191e7a2e9e28/comments", "author": null, "committer": null, "parents": [{"sha": "73a156958263b19d5298e56c1c99a6b9df235306", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73a156958263b19d5298e56c1c99a6b9df235306", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73a156958263b19d5298e56c1c99a6b9df235306"}], "stats": {"total": 205, "additions": 98, "deletions": 107}, "files": [{"sha": "231e624be899e9ef9ff93ba1d636ce56c8a803ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -1,3 +1,21 @@\n+2012-07-02  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* config/sh/predicates.md (t_reg_operand, negt_reg_operand): New\n+\tpredicates.\n+\t* config/sh/sh-protos.h (get_t_reg_rtx): New prototype.\n+\t* config/sh/sh.c (get_t_reg_rtx): New function.  Use it when invoking\n+\tgen_branch_true and gen_branch_false.\n+\t* config/sh/sh.md: Use get_t_reg_rtx when invoking gen_branch_true and\n+\tgen_branch_false.\n+\t(branch_true, branch_false): Use t_reg_operand predicate.\n+\t(*branch_true, *branch_false): Delete.\n+\t(movt): Use t_reg_operand predicate.\n+\t(*negnegt): Use negt_reg_operand predicate and fold little and big\n+\tendian variants.\n+\t(*movtt): Use t_reg_operand and fold little and big endian variants.\n+\t(*movt_qi): Delete.\n+\n 2012-07-02  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* stmt.c (emit_case_bit_tests): Remove."}, {"sha": "d58f657c857de9fc979df3ad22a65f675ec6f103", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -898,3 +898,42 @@\n \t    (match_test \"mode != HImode\")\n \t    (match_test \"TARGET_SH4A_ARCH\"))))\n \n+;; A predicate describing the T bit register in any form.\n+(define_predicate \"t_reg_operand\"\n+  (match_code \"reg,subreg,sign_extend,zero_extend\")\n+{\n+  switch (GET_CODE (op))\n+    {\n+      case REG:\n+\treturn REGNO (op) == T_REG;\n+\n+      case SUBREG:\n+\treturn REGNO (SUBREG_REG (op)) == T_REG;\n+\n+      case ZERO_EXTEND:\n+      case SIGN_EXTEND:\n+\treturn GET_CODE (XEXP (op, 0)) == SUBREG\n+\t       && REGNO (SUBREG_REG (XEXP (op, 0))) == T_REG;\n+\n+      default:\n+\treturn 0;\n+    }\n+})\n+\n+;; A predicate describing a negated T bit register.\n+(define_predicate \"negt_reg_operand\"\n+  (match_code \"subreg,xor\")\n+{\n+  switch (GET_CODE (op))\n+    {\n+      case XOR:\n+\treturn t_reg_operand (XEXP (op, 0), GET_MODE (XEXP (op, 0)))\n+\t       && satisfies_constraint_M (XEXP (op, 1));\n+\n+      case SUBREG:\n+\treturn negt_reg_operand (XEXP (op, 0), GET_MODE (XEXP (op, 0)));\n+\n+      default:\n+\treturn 0;\n+    }\n+})"}, {"sha": "3fcfe29a28acae09b7c8cf788699f9a847566896", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -109,6 +109,7 @@ extern bool sh_vector_mode_supported_p (enum machine_mode);\n #endif /* RTX_CODE */\n \n extern const char *output_jump_label_table (void);\n+extern rtx get_t_reg_rtx (void);\n extern rtx get_fpscr_rtx (void);\n extern int sh_media_register_for_return (void);\n extern void sh_expand_prologue (void);"}, {"sha": "77324b66c94b3e3e916e4dbb92e38b7ae69ff9aa", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -1874,7 +1874,7 @@ prepare_cbranch_operands (rtx *operands, enum machine_mode mode,\n void\n expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n {\n-  rtx (*branch_expander) (rtx) = gen_branch_true;\n+  rtx (*branch_expander) (rtx, rtx) = gen_branch_true;\n   rtx jump;\n \n   comparison = prepare_cbranch_operands (operands, SImode, comparison);\n@@ -1888,7 +1888,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n   emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, T_REG),\n                           gen_rtx_fmt_ee (comparison, SImode,\n                                           operands[1], operands[2])));\n-  jump = emit_jump_insn (branch_expander (operands[3]));\n+  jump = emit_jump_insn (branch_expander (operands[3], get_t_reg_rtx ()));\n   if (probability >= 0)\n     add_reg_note (jump, REG_BR_PROB, GEN_INT (probability));\n \n@@ -1941,7 +1941,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n       if (TARGET_CMPEQDI_T)\n \t{\n \t  emit_insn (gen_cmpeqdi_t (operands[1], operands[2]));\n-\t  emit_jump_insn (gen_branch_true (operands[3]));\n+\t  emit_jump_insn (gen_branch_true (operands[3], get_t_reg_rtx ()));\n \t  return true;\n \t}\n       msw_skip = NE;\n@@ -1969,7 +1969,7 @@ expand_cbranchdi4 (rtx *operands, enum rtx_code comparison)\n       if (TARGET_CMPEQDI_T)\n \t{\n \t  emit_insn (gen_cmpeqdi_t (operands[1], operands[2]));\n-\t  emit_jump_insn (gen_branch_false (operands[3]));\n+\t  emit_jump_insn (gen_branch_false (operands[3], get_t_reg_rtx ()));\n \t  return true;\n \t}\n       msw_taken = NE;\n@@ -2304,9 +2304,9 @@ sh_emit_compare_and_branch (rtx *operands, enum machine_mode mode)\n     sh_emit_set_t_insn (gen_ieee_ccmpeqsf_t (op0, op1), mode);\n \n   if (branch_code == code)\n-    emit_jump_insn (gen_branch_true (operands[3]));\n+    emit_jump_insn (gen_branch_true (operands[3], get_t_reg_rtx ()));\n   else\n-    emit_jump_insn (gen_branch_false (operands[3]));\n+    emit_jump_insn (gen_branch_false (operands[3], get_t_reg_rtx ()));\n }\n \n void\n@@ -2340,7 +2340,7 @@ sh_emit_compare_and_set (rtx *operands, enum machine_mode mode)\n             {\n               lab = gen_label_rtx ();\n               sh_emit_scc_to_t (EQ, op0, op1);\n-              emit_jump_insn (gen_branch_true (lab));\n+              emit_jump_insn (gen_branch_true (lab, get_t_reg_rtx ()));\n               code = GT;\n            }\n           else\n@@ -3360,7 +3360,7 @@ gen_shifty_op (int code, rtx *operands)\n       if (code == LSHIFTRT)\n \t{\n \t  emit_insn (gen_rotlsi3_1 (operands[0], operands[0]));\n-\t  emit_insn (gen_movt (operands[0]));\n+\t  emit_insn (gen_movt (operands[0], get_t_reg_rtx ()));\n \t  return;\n \t}\n       else if (code == ASHIFT)\n@@ -9504,6 +9504,15 @@ reg_unused_after (rtx reg, rtx insn)\n \f\n #include \"ggc.h\"\n \n+static GTY(()) rtx t_reg_rtx;\n+rtx\n+get_t_reg_rtx (void)\n+{\n+  if (! t_reg_rtx)\n+    t_reg_rtx = gen_rtx_REG (SImode, T_REG);\n+  return t_reg_rtx;\n+}\n+\n static GTY(()) rtx fpscr_rtx;\n rtx\n get_fpscr_rtx (void)\n@@ -12049,7 +12058,7 @@ sh_expand_t_scc (rtx operands[])\n     result = gen_reg_rtx (SImode);\n   val = INTVAL (op1);\n   if ((code == EQ && val == 1) || (code == NE && val == 0))\n-    emit_insn (gen_movt (result));\n+    emit_insn (gen_movt (result, get_t_reg_rtx ()));\n   else if ((code == EQ && val == 0) || (code == NE && val == 1))\n     emit_insn (gen_movnegt (result));\n   else if (code == EQ || code == NE)"}, {"sha": "4e2425f4888e0d706ea11fae490ac2a3d34542f9", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 16, "deletions": 97, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -4450,8 +4450,8 @@ label:\n   emit_insn (gen_movsi (operands[0], operands[1]));\n \n   emit_jump_insn (INTVAL (operands[3])\n-\t\t  ? gen_branch_true (skip_neg_label)\n-\t\t  : gen_branch_false (skip_neg_label));\n+\t\t  ? gen_branch_true (skip_neg_label, get_t_reg_rtx ())\n+\t\t  : gen_branch_false (skip_neg_label, get_t_reg_rtx ()));\n \n   emit_label_after (skip_neg_label,\n \t\t    emit_insn (gen_negsi2 (operands[0], operands[1])));\n@@ -4519,8 +4519,8 @@ label:\n   emit_insn (gen_movsi (high_dst, high_src));\n \n   emit_jump_insn (INTVAL (operands[3]) \n-\t\t  ? gen_branch_true (skip_neg_label)\n-\t\t  : gen_branch_false (skip_neg_label));\n+\t\t  ? gen_branch_true (skip_neg_label, get_t_reg_rtx ())\n+\t\t  : gen_branch_false (skip_neg_label, get_t_reg_rtx ()));\n \n   if (!INTVAL (operands[3]))\n     emit_insn (gen_clrt ());\n@@ -7195,66 +7195,22 @@ label:\n ;; ------------------------------------------------------------------------\n \n (define_insn \"branch_true\"\n-  [(set (pc) (if_then_else (ne (reg:SI T_REG) (const_int 0))\n-\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t   (pc)))]\n-  \"TARGET_SH1\"\n-{\n-  return output_branch (1, insn, operands);\n-}\n-  [(set_attr \"type\" \"cbranch\")])\n-\n-;; The *branch_true patterns help combine when trying to invert conditions.\n-(define_insn \"*branch_true\"\n-  [(set (pc) (if_then_else (ne (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n+  [(set (pc) (if_then_else (ne (match_operand 1 \"t_reg_operand\" \"\")\n \t\t\t       (const_int 0))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n-  \"TARGET_SH1 && TARGET_LITTLE_ENDIAN\"\n-{\n-  return output_branch (1, insn, operands);\n-}\n-  [(set_attr \"type\" \"cbranch\")])\n-\n-(define_insn \"*branch_true\"\n-  [(set (pc) (if_then_else (ne (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t   (pc)))]\n-  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SH1\"\n {\n   return output_branch (1, insn, operands);\n }\n   [(set_attr \"type\" \"cbranch\")])\n \n (define_insn \"branch_false\"\n-  [(set (pc) (if_then_else (eq (reg:SI T_REG) (const_int 0))\n-\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t   (pc)))]\n-  \"TARGET_SH1\"\n-{\n-  return output_branch (0, insn, operands);\n-}\n-  [(set_attr \"type\" \"cbranch\")])\n-\n-;; The *branch_false patterns help combine when trying to invert conditions.\n-(define_insn \"*branch_false\"\n-  [(set (pc) (if_then_else (eq (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n-\t\t\t       (const_int 0))\n-\t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n-\t\t\t   (pc)))]\n-  \"TARGET_SH1 && TARGET_LITTLE_ENDIAN\"\n-{\n-  return output_branch (0, insn, operands);\n-}\n-  [(set_attr \"type\" \"cbranch\")])\n-\n-(define_insn \"*branch_false\"\n-  [(set (pc) (if_then_else (eq (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n+  [(set (pc) (if_then_else (eq (match_operand 1 \"t_reg_operand\" \"\")\n \t\t\t       (const_int 0))\n \t\t\t   (label_ref (match_operand 0 \"\" \"\"))\n \t\t\t   (pc)))]\n-  \"TARGET_SH1 && ! TARGET_LITTLE_ENDIAN\"\n+  \"TARGET_SH1\"\n {\n   return output_branch (0, insn, operands);\n }\n@@ -9672,7 +9628,7 @@ label:\n \n (define_insn \"movt\"\n   [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(eq:SI (reg:SI T_REG) (const_int 1)))]\n+\t(match_operand:SI 1 \"t_reg_operand\"))]\n   \"TARGET_SH1\"\n   \"movt\t%0\"\n   [(set_attr \"type\" \"arith\")])\n@@ -9854,62 +9810,25 @@ label:\n   \"negc\t%1,%0\"\n   [(set_attr \"type\" \"arith\")])\n \n-;; The *negnegt patterns help the combine pass to figure out how to fold \n+;; The *negnegt pattern helps the combine pass to figure out how to fold \n ;; an explicit double T bit negation.\n (define_insn_and_split \"*negnegt\"\n   [(set (reg:SI T_REG)\n-\t(eq:SI (subreg:QI (xor:SI (reg:SI T_REG) (const_int 1)) 3)\n-        (const_int 0)))]\n-  \"! TARGET_LITTLE_ENDIAN\"\n-  \"#\"\n-  \"\"\n-  [(const_int 0)])\n-\n-(define_insn_and_split \"*negnegt\"\n-  [(set (reg:SI T_REG)\n-\t(eq:SI (subreg:QI (xor:SI (reg:SI T_REG) (const_int 1)) 0)\n-        (const_int 0)))]\n-  \"TARGET_LITTLE_ENDIAN\"\n-  \"#\"\n-  \"\"\n-  [(const_int 0)])\n-\n-;; The *movtt patterns eliminate redundant T bit to T bit moves / tests.\n-(define_insn_and_split \"*movtt\"\n-  [(set (reg:SI T_REG)\n-\t(eq:SI (zero_extend:SI (subreg:QI (reg:SI T_REG) 3))\n-        (const_int 1)))]\n-  \"! TARGET_LITTLE_ENDIAN\"\n+\t(eq:SI (match_operand 0 \"negt_reg_operand\" \"\") (const_int 0)))]\n+  \"TARGET_SH1\"\n   \"#\"\n   \"\"\n   [(const_int 0)])\n \n+;; The *movtt pattern eliminates redundant T bit to T bit moves / tests.\n (define_insn_and_split \"*movtt\"\n   [(set (reg:SI T_REG)\n-\t(eq:SI (zero_extend:SI (subreg:QI (reg:SI T_REG) 0))\n-        (const_int 1)))]\n-  \"TARGET_LITTLE_ENDIAN\"\n+\t(eq:SI (match_operand 0 \"t_reg_operand\" \"\") (const_int 1)))]\n+  \"TARGET_SH1\"\n   \"#\"\n   \"\"\n   [(const_int 0)])\n \n-;; The *movt_qi patterns help the combine pass convert a movrt_negc pattern\n-;; into a movt Rn, xor #1 Rn pattern.  This can happen when e.g. a function\n-;; returns the inverted T bit value.\n-(define_insn \"*movt_qi\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(zero_extend:SI (subreg:QI (reg:SI T_REG) 3)))]\n-  \"! TARGET_LITTLE_ENDIAN\"\n-  \"movt\t%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n-(define_insn \"*movt_qi\"\n-  [(set (match_operand:SI 0 \"arith_reg_dest\" \"=r\")\n-\t(zero_extend:SI (subreg:QI (reg:SI T_REG) 0)))]\n-  \"TARGET_LITTLE_ENDIAN\"\n-  \"movt\t%0\"\n-  [(set_attr \"type\" \"arith\")])\n-\n (define_expand \"cstoresf4\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(match_operator:SI 1 \"sh_float_comparison_operator\"\n@@ -13960,7 +13879,7 @@ label:\n   else\n     {\n       emit_insn (gen_stack_protect_test_si (operands[0], operands[1]));\n-      emit_jump_insn (gen_branch_true (operands[2]));\n+      emit_jump_insn (gen_branch_true (operands[2], get_t_reg_rtx ()));\n     }\n \n   DONE;"}, {"sha": "916fcfbb606f5d9e7ea68175240dff377cf43c52", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -1,3 +1,8 @@\n+2012-07-02  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/51244\n+\t* gcc.target/sh/pr51244-1.c: Check that movt insn is not generated.\n+\n 2012-07-02  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/53821"}, {"sha": "601c1c1c2697c9e6e8dced485fa30ad8c0c97e6a", "filename": "gcc/testsuite/gcc.target/sh/pr51244-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f031c3441f38fb0c27bb11eae460191e7a2e9e28/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr51244-1.c?ref=f031c3441f38fb0c27bb11eae460191e7a2e9e28", "patch": "@@ -4,7 +4,7 @@\n /* { dg-do compile { target \"sh*-*-*\" } } */\n /* { dg-options \"-O1 -mbranch-cost=2\" } */\n /* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\"} { \"\" } } */\n-/* { dg-final { scan-assembler-not \"tst|negc|extu\" } } */\n+/* { dg-final { scan-assembler-not \"movt|tst|negc|extu\" } } */\n \n int\n testfunc_00 (int a, int b, int c, int d)"}]}