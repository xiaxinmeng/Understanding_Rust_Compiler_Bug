{"sha": "19a9ba64e7895c9919b95cd446faa4922ebf284e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTlhOWJhNjRlNzg5NWM5OTE5Yjk1Y2Q0NDZmYWE0OTIyZWJmMjg0ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-10-22T01:41:31Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2014-10-22T01:41:31Z"}, "message": "gengtype.h (obstack_chunk_alloc, [...]): Remove cast.\n\ngcc/\n\t* gengtype.h (obstack_chunk_alloc, obstack_chunk_free): Remove cast.\n\t* coretypes.h (obstack_chunk_alloc, obstack_chunk_free): Likewise.\n\t(gcc_obstack_init): Use obstack_specify_allocation in place of\n\t_obstack_begin.\n\t* genautomata.c (next_sep_el): Cast result of obstack_base to (char *).\n\t(regexp_representation): Likewise.\n\t* godump.c (go_output_type): Likewise.\ngcc/java/\n\t* mangle.c (finish_mangling): Cast result of obstack_base to (char *).\n\t* typeck.c (build_java_argument_signature): Likewise.\n\t(build_java_signature): Likewise.\ngcc/objc/\n\t* objc-encoding.c (encode_array): Cast result of obstack_base.\n\t(encode_type): Likewise.\nlibcpp/\n\t* symtab.c (ht_create): Use obstack_specify_allocation in place of\n\t_obstack_begin.\n\t* files.c (_cpp_init_files): Likewise.\n\t* init.c (cpp_create_reader): Likewise.\n\t* identifiers.c (_cpp_init_hashtable): Likewise.\n\nFrom-SVN: r216539", "tree": {"sha": "15ca88bb9e4b6c33745aa08e5b527654eacfd373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15ca88bb9e4b6c33745aa08e5b527654eacfd373"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/19a9ba64e7895c9919b95cd446faa4922ebf284e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a9ba64e7895c9919b95cd446faa4922ebf284e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19a9ba64e7895c9919b95cd446faa4922ebf284e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19a9ba64e7895c9919b95cd446faa4922ebf284e/comments", "author": null, "committer": null, "parents": [{"sha": "1fb38e450e2e3a01785db3a35e1b9851ca26ada7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fb38e450e2e3a01785db3a35e1b9851ca26ada7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fb38e450e2e3a01785db3a35e1b9851ca26ada7"}], "stats": {"total": 188, "additions": 105, "deletions": 83}, "files": [{"sha": "bc1703b02b38729f378f1b78f36a044139800355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1,3 +1,13 @@\n+2014-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* gengtype.h (obstack_chunk_alloc, obstack_chunk_free): Remove cast.\n+\t* coretypes.h (obstack_chunk_alloc, obstack_chunk_free): Likewise.\n+\t(gcc_obstack_init): Use obstack_specify_allocation in place of\n+\t_obstack_begin.\n+\t* genautomata.c (next_sep_el): Cast result of obstack_base to (char *).\n+\t(regexp_representation): Likewise.\n+\t* godump.c (go_output_type): Likewise.\n+\n 2014-10-21  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config.gcc: Remove MASK_JUMP_IN_DELAY from target_cpu_default2.\n@@ -5516,10 +5526,10 @@\n \t* sel-sched.c (get_reg_class): Likewise.\n \n 2014-09-09  Marcus Shawcroft  <marcus.shawcroft@arm.com>\n-\tRamana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n+\t    Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-\t * config/aarch64/aarch64-elf-raw.h (ENDFILE_SPEC): Add crtfastmath.o.\n-\t * config/aarch64/aarch64-linux.h (GNU_USER_TARGET_MATH_ENDFILE_SPEC):\n+\t* config/aarch64/aarch64-elf-raw.h (ENDFILE_SPEC): Add crtfastmath.o.\n+\t* config/aarch64/aarch64-linux.h (GNU_USER_TARGET_MATH_ENDFILE_SPEC):\n \tDefine.\n \t(ENDFILE_SPEC): Define and use GNU_USER_TARGET_MATH_ENDFILE_SPEC.\n \n@@ -7253,7 +7263,7 @@\n \t(s390_mainpool_finish): In three places, split out a local rtx\n \t\"insn\" into a local rtx - \"set\" or \"pat\" - and a rtx_insn *\n \t\"insn\".  Strengthen local \"pool_end\" from rtx to rtx_code_label *\n-\t and split another local rtx \"insn\" out into rtx \"pat\" and\n+\tand split another local rtx \"insn\" out into rtx \"pat\" and\n \trtx_insn * \"insn\".\n \t* config/sh/sh.c (output_branchy_insn): Rather than working\n \tdirectly on operands[9], introduce local rtx_code_label *\n@@ -13601,7 +13611,7 @@\n \n \tPR fortran/44054\n \t* diagnostic.c (default_diagnostic_finalizer): Move caret printing\n-\t to here ...\n+\tto here ...\n \t(diagnostic_report_diagnostic): ... from here.\n \t* toplev.c (general_init): Move code to c-family.\n \n@@ -14589,8 +14599,8 @@\n \n \tPR other/62168\n \t* configure.ac: Set install_gold_as_default to no for\n-\t --enable-gold=no.\n-\t * configure: Regenerated.\n+\t--enable-gold=no.\n+\t* configure: Regenerated.\n \n 2014-08-18 Roman Gareev  <gareevroman@gmail.com>\n \n@@ -15771,7 +15781,7 @@\n 2014-08-08  Kugan Vivekanandarajah  <kuganv@linaro.org>\n \n \t* calls.c (precompute_arguments): Check\n-\t promoted_for_signed_and_unsigned_p and set the promoted mode.\n+\tpromoted_for_signed_and_unsigned_p and set the promoted mode.\n \t(promoted_for_signed_and_unsigned_p): New function.\n \t(expand_expr_real_1): Check promoted_for_signed_and_unsigned_p\n \tand set the promoted mode.\n@@ -23538,7 +23548,7 @@\n \t(set_fpsr) : Likewise.\n \t(get_fpsr) : Likewise.\n \t(unspecv): Add UNSPECV_GET_FPCR and UNSPECV_SET_FPCR, UNSPECV_GET_FPSR\n-\t and UNSPECV_SET_FPSR.\n+\tand UNSPECV_SET_FPSR.\n \t* doc/extend.texi (AARCH64 Built-in Functions) : Document\n \t__builtins_aarch64_set_fpcr, __builtins_aarch64_get_fpcr.\n \t__builtins_aarch64_set_fpsr and __builtins_aarch64_get_fpsr.\n@@ -27963,7 +27973,7 @@\n 2014-04-22  Christian Bruel  <christian.bruel@st.com>\n \n \t* config/sh/sh.md (mov<mode>): Replace movQIHI.\n-\t Force immediates to SImode.\n+\tForce immediates to SImode.\n \n 2014-04-22  Sandra Loosemore  <sandra@codesourcery.com>\n \n@@ -31096,7 +31106,7 @@\n \tPR bootstrap/52466\n \tPR target/46898\n \t* config/lm32/lm32.c (lm32_legitimate_constant_p): Remove, as incorrect.\n-\t  (TARGET_LEGITIMATE_CONSTANT_P): Undefine, as not needed.\n+\t(TARGET_LEGITIMATE_CONSTANT_P): Undefine, as not needed.\n \t* config/lm32/lm32.md (movsi_insn): Add 32-bit immediate support.\n \t(simple_return, *simple_return): New patterns\n \t* config/lm32/predicates.md (movsi_rhs_operand): Remove as obsolete.\n@@ -31712,7 +31722,7 @@\n \n 2014-02-19  Michael Hudson-Doyle  <michael.hudson@linaro.org>\n \n-\t PR target/59799\n+\tPR target/59799\n \t* config/aarch64/aarch64.c (aarch64_pass_by_reference): The rules for\n \tpassing arrays in registers are the same as for structs, so remove the\n \tspecial case for them."}, {"sha": "f66e0941c76987258635bcfc1cc0c234f8e35442", "filename": "gcc/coretypes.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fcoretypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fcoretypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoretypes.h?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -176,13 +176,13 @@ struct basic_block_def;\n typedef struct basic_block_def *basic_block;\n typedef const struct basic_block_def *const_basic_block;\n \n-#define obstack_chunk_alloc\t((void *(*) (long)) xmalloc)\n-#define obstack_chunk_free\t((void (*) (void *)) free)\n+#define obstack_chunk_alloc\txmalloc\n+#define obstack_chunk_free\tfree\n #define OBSTACK_CHUNK_SIZE\t0\n-#define gcc_obstack_init(OBSTACK)\t\t\t\\\n-  _obstack_begin ((OBSTACK), OBSTACK_CHUNK_SIZE, 0,\t\\\n-\t\t  obstack_chunk_alloc,\t\t\t\\\n-\t\t  obstack_chunk_free)\n+#define gcc_obstack_init(OBSTACK)\t\t\t\t\\\n+  obstack_specify_allocation ((OBSTACK), OBSTACK_CHUNK_SIZE, 0,\t\\\n+\t\t\t      obstack_chunk_alloc,\t\t\\\n+\t\t\t      obstack_chunk_free)\n \n /* enum reg_class is target specific, so it should not appear in\n    target-independent code or interfaces, like the target hook declarations"}, {"sha": "2218a48d5015c90a7efdb2257b015d34529b13ff", "filename": "gcc/genautomata.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1178,7 +1178,7 @@ next_sep_el (const char **pstr, int sep, int par_flag)\n \t}\n     }\n   obstack_1grow (&irp, '\\0');\n-  out_str = obstack_base (&irp);\n+  out_str = (char *) obstack_base (&irp);\n   obstack_finish (&irp);\n \n   *pstr = p;\n@@ -6873,7 +6873,7 @@ regexp_representation (regexp_t regexp)\n {\n   form_regexp (regexp);\n   obstack_1grow (&irp, '\\0');\n-  return obstack_base (&irp);\n+  return (char *) obstack_base (&irp);\n }\n \n /* The function frees memory allocated for last formed string\n@@ -9312,7 +9312,7 @@ initiate_automaton_gen (char **argv)\n   obstack_grow (&irp, STANDARD_OUTPUT_DESCRIPTION_FILE_SUFFIX,\n \t\tstrlen (STANDARD_OUTPUT_DESCRIPTION_FILE_SUFFIX) + 1);\n   obstack_1grow (&irp, '\\0');\n-  output_description_file_name = obstack_base (&irp);\n+  output_description_file_name = (char *) obstack_base (&irp);\n   obstack_finish (&irp);\n }\n "}, {"sha": "bc3daf0671a9177647e66019c0710a694f6629d1", "filename": "gcc/gengtype.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgengtype.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgengtype.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.h?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -20,8 +20,8 @@\n #ifndef GCC_GENGTYPE_H\n #define GCC_GENGTYPE_H\n \n-#define obstack_chunk_alloc    ((void *(*) (long)) xmalloc)\n-#define obstack_chunk_free     ((void (*) (void *)) free)\n+#define obstack_chunk_alloc    xmalloc\n+#define obstack_chunk_free     free\n #define OBSTACK_CHUNK_SIZE     0\n \n /* Sets of accepted source languages like C, C++, Ada... are"}, {"sha": "5e4b7fcb0e76977c04b740fce6ca272c638f7d25", "filename": "gcc/godump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -920,7 +920,7 @@ go_output_type (struct godump_container *container)\n \n   ob = &container->type_obstack;\n   obstack_1grow (ob, '\\0');\n-  fputs (obstack_base (ob), go_dump_file);\n+  fputs ((char *) obstack_base (ob), go_dump_file);\n   obstack_free (ob, obstack_base (ob));\n }\n "}, {"sha": "a366113ec026aef608d9180772b6783b8186f2ec", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1,11 +1,17 @@\n+2014-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* mangle.c (finish_mangling): Cast result of obstack_base to (char *).\n+\t* typeck.c (build_java_argument_signature): Likewise.\n+\t(build_java_signature): Likewise.\n+\n 2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* class.c: Adjust include files.\n \t* resource.c: Likewise.\n \n 2014-10-15  Evgeny Stupachenko  <evstupac@gmail.com>\n \n-\tPR target/63536\t\n+\tPR target/63536\n \t* lang.c (java_print_error_function): Add check on NULL function\n \tcontext.\n "}, {"sha": "087264e2bbad59133302f5cdab90ec78962c1312", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -711,7 +711,7 @@ finish_mangling (void)\n   compression_table = NULL_TREE;\n   compression_next = 0;\n   obstack_1grow (mangle_obstack, '\\0');\n-  result = get_identifier (obstack_base (mangle_obstack));\n+  result = get_identifier ((char *) obstack_base (mangle_obstack));\n   obstack_free (mangle_obstack, obstack_base (mangle_obstack));\n \n   return result;"}, {"sha": "2019b2d6624ff93cd7014e602ff067e0ef15193d", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -477,7 +477,7 @@ build_java_argument_signature (tree type)\n \t}\n       obstack_1grow (&temporary_obstack, '\\0');\n \n-      sig = get_identifier (obstack_base (&temporary_obstack));\n+      sig = get_identifier ((char *) obstack_base (&temporary_obstack));\n       TYPE_ARGUMENT_SIGNATURE (type) = sig;\n       obstack_free (&temporary_obstack, obstack_base (&temporary_obstack));\n     }\n@@ -554,7 +554,7 @@ build_java_signature (tree type)\n \t    obstack_grow0 (&temporary_obstack,\n \t\t\t   IDENTIFIER_POINTER (t), IDENTIFIER_LENGTH (t));\n \n-\t    sig = get_identifier (obstack_base (&temporary_obstack));\n+\t    sig = get_identifier ((char *) obstack_base (&temporary_obstack));\n \t    obstack_free (&temporary_obstack,\n \t\t\t  obstack_base (&temporary_obstack));\n \t  }"}, {"sha": "dcd74889e8853de37308b217e71a8f6398643ad7", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 34, "deletions": 29, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1,3 +1,8 @@\n+2014-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* objc-encoding.c (encode_array): Cast result of obstack_base.\n+\t(encode_type): Likewise.\n+\n 2014-10-16  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* objc-act.c: Adjust include files.\n@@ -18,7 +23,7 @@\n \tchecking.\n \t(INSTANCE_METHOD_OR_CLASS_METHOD_DECL_CHECK): New macro.\n \t(METHOD_SEL_NAME, METHOD_SEL_ARGS, METHOD_ADD_ARGS,\n- \tMETHOD_ADD_ARGS_ELLIPSIS_P, METHOD_DEFINITION, METHOD_ENCODING,\n+\tMETHOD_ADD_ARGS_ELLIPSIS_P, METHOD_DEFINITION, METHOD_ENCODING,\n \tMETHOD_TYPE_ATTRIBUTES, METHOD_PROPERTY_CONTEXT): Add type checking.\n \t(METHOD_SEL_ARGS): Use decl_common.size instead of\n \tdecl_non_common.result.\n@@ -258,7 +263,7 @@\n 2011-10-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-map.h: New file.\n-\t* objc-map.c: New file.\t\n+\t* objc-map.c: New file.\n \t* config-lang.in (gtfiles): Added objc-map.h.\n \t* Make-lang.in (OBJC_OBJS): Added objc-map.o.\n \t(objc/objc-map.o): New rule.\n@@ -349,7 +354,7 @@\n \t(objc/objc-next-runtime-abi-01.o): Likewise.\n \t(objc/objc-next-runtime-abi-02.o): Likewise.\n \t(objc/objc-act.o): Likewise.\n-\t\n+\n 2011-07-04  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \tRefactored encoding code into objc-encoding.h and objc-encoding.c.\n@@ -370,13 +375,13 @@\n \tOBJC_ENCODE_DONT_INLINE_DEFS): Moved to objc-encoding.h.\n \t* objc-runtime-shared-support.h (objc_v2_encode_property_attr,\n \tencode_method_prototype, encode_field_decl,\n-\tgenerating_instance_variables): Moved to objc-encoding.h.\t\n+\tgenerating_instance_variables): Moved to objc-encoding.h.\n \t(objc_build_property_setter_name): Declare.\n \t* objc-encoding.c: New.\n \t* objc-encoding.h: New.\n \t* objc-gnu-runtime-abi-01.c: Include objc-encoding.h.\n \t* objc-next-runtime-abi-01.c: Likewise.\n-\t* objc-next-runtime-abi-02.c: Likewise.\t\n+\t* objc-next-runtime-abi-02.c: Likewise.\n \t* objc-runtime-shared-support.c: Likewise.\n \t* Make-lang.in (OBJC_OBJS): Added objc-encoding.o.\n \t(objc/objc-lang.o): Reordered dependencies.\n@@ -393,7 +398,7 @@\n \t* objc-encoding.c (encode_type): Use \"%<%T%>\" format when printing\n \twarning \"unknown type %<%T%> found during Objective-C encoding\"\n \tinstead of using gen_type_name.\n-\t\n+\n 2011-06-05  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* objc-act.c (receiver_is_class_object): Expanded comment.\n@@ -1535,11 +1540,11 @@\n \n \t2006-03-10  Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4407151\n+\tRadar 4407151\n \t* objc/objc-act.c (objc_is_class_name): template parameter is not\n-        an objective class name.\n-        (objc_generate_cxx_cdtors): Check for the null\n-        objc_implementation_context.\n+\tan objective class name.\n+\t(objc_generate_cxx_cdtors): Check for the null\n+\tobjc_implementation_context.\n \n 2010-10-18  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n@@ -1552,7 +1557,7 @@\n \n \t2005-10-07  Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4204796\n+\tRadar 4204796\n \t* objc-act.c (objc_build_volatilized_type): Build 'volatilzed'\n \ttypes with proper attribute set and correctly.\n \t(objc_volatilize_decl): Remove unneeded code.\n@@ -1650,7 +1655,7 @@\n \n \t* Make-lang.in (cc1obj-dummy): Remove.\n \t(cc1obj-checksum): Change to run checksum over object files\n-        and options only.\n+\tand options only.\n \n 2010-10-07  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n@@ -1695,7 +1700,7 @@\n \n \t2006-04-12 Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4507230\n+\tRadar 4507230\n \t* objc-act.c (objc_type_valid_for_messaging): New routine to check\n \tfor valid objc object types.\n \t(objc_finish_foreach_loop): Check for invalid objc objects in\n@@ -1707,7 +1712,7 @@\n \n \t2005-10-17  Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4290840\n+\tRadar 4290840\n \t* objc-act.c (objc_start_method_definition): Check for\n \terror_mark_node for the selector name and make a quick exit.\n \n@@ -1720,17 +1725,17 @@\n \tmerge from FSF 'apple/trunk' branch.\n \t2006-01-30  Fariborz Jahanian <fjahanian@apple.com>\n \n-       Radar 4386773\n-       * objc/objc-act.c (objc_set_method_opt): New function.\n-       (objc_start_protocol, objc_finish_interface): Reset\n-       objc_method_optional_flag flag.\n-       (objc_add_method_declaration): Pass on the new\n-       flag to objc_add_method.\n-       (objc_add_method): Add optional methods to new chain in\n-       the protocol class.\n-       * objc/objc-act.h (CLASS_OPTIONAL_CLS_METHODS,\n-       CLASS_OPTIONAL_NST_METHODS): New macros accessing a protocol\n-       class's optional method chains.\n+\tRadar 4386773\n+\t* objc/objc-act.c (objc_set_method_opt): New function.\n+\t(objc_start_protocol, objc_finish_interface): Reset\n+\tobjc_method_optional_flag flag.\n+\t(objc_add_method_declaration): Pass on the new\n+\tflag to objc_add_method.\n+\t(objc_add_method): Add optional methods to new chain in\n+\tthe protocol class.\n+\t* objc/objc-act.h (CLASS_OPTIONAL_CLS_METHODS)\n+\t(CLASS_OPTIONAL_NST_METHODS): New macros accessing a protocol\n+\tclass's optional method chains.\n \n 2010-09-30  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n@@ -1846,7 +1851,7 @@\n \n \t2005-10-10  Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4301047\n+\tRadar 4301047\n \n \t* objc-act.c (encode_type): Remove the hack.\n \n@@ -1901,7 +1906,7 @@\n \n \t2006-03-09 Fariborz Jahanian <fjahanian@apple.com>\n \n-        Radar 4457381\n+\tRadar 4457381\n \t* objc/objc-act.c (objc_finish_message_expr): Look for message in\n \t@class's protocol list.\n \n@@ -2463,8 +2468,8 @@\n \n 2008-05-12  Tomas Bily  <tbily@suse.cz>\n \n-        * objc-act.c (objc_generate_write_barrier, objc_finish_message_expr):\n-        Use CONVERT_EXPR_P.\n+\t* objc-act.c (objc_generate_write_barrier, objc_finish_message_expr):\n+\tUse CONVERT_EXPR_P.\n \n 2008-04-23  Paolo Bonzini  <bonzini@gnu.org>\n "}, {"sha": "36b6608d1d85111d452449ce6e5b06d2f4de5eea", "filename": "gcc/objc/objc-encoding.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fobjc%2Fobjc-encoding.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/gcc%2Fobjc%2Fobjc-encoding.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-encoding.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -380,7 +380,7 @@ encode_array (tree type, int curtype, int format)\n \t identifier.\n       */\n       {\n-\tchar *enc = obstack_base (&util_obstack) + curtype;\n+\tchar *enc = (char *) obstack_base (&util_obstack) + curtype;\n \tif (memchr (enc, '=',\n \t\t    obstack_object_size (&util_obstack) - curtype) == NULL)\n \t  {\n@@ -729,7 +729,7 @@ encode_type (tree type, int curtype, int format)\n \t to be rearranged for compatibility with gcc-3.3.  */\n       if (code == POINTER_TYPE && obstack_object_size (&util_obstack) >= 3)\n \t{\n-\t  char *enc = obstack_base (&util_obstack) + curtype;\n+\t  char *enc = (char *) obstack_base (&util_obstack) + curtype;\n \n \t  /* Rewrite \"in const\" from \"nr\" to \"rn\".  */\n \t  if (curtype >= 1 && !strncmp (enc - 1, \"nr\", 2))"}, {"sha": "9f69feb777c6d7ad763c7535a3ce929cd2e9bce1", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1,3 +1,11 @@\n+2014-10-22  Alan Modra  <amodra@gmail.com>\n+\n+\t* symtab.c (ht_create): Use obstack_specify_allocation in place of\n+\t_obstack_begin.\n+\t* files.c (_cpp_init_files): Likewise.\n+\t* init.c (cpp_create_reader): Likewise.\n+\t* identifiers.c (_cpp_init_hashtable): Likewise.\n+\n 2014-10-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* include/line-map.h (linemap_location_from_macro_expansion_p):\n@@ -779,7 +787,7 @@\n \n \t* lex.c (lex_raw_string): Change C++ style comments into C style\n \tcomments.\n-    \t(lex_string): Likewise.\n+\t(lex_string): Likewise.\n \n 2012-04-27   Ollie Wild  <aaw@google.com>\n \n@@ -955,15 +963,15 @@\n \n \tPR bootstrap/50760\n \t* include/line-map.h (struct linemap_stats): Change the type of\n-    \tthe members from size_t to long.\n+\tthe members from size_t to long.\n \t* macro.c (macro_arg_token_iter_init): Unconditionally initialize\n-    \titer->location_ptr.\n+\titer->location_ptr.\n \n 2011-10-17  Dodji Seketeli  <dodji@redhat.com>\n \n \t* line-map.c (linemap_macro_map_loc_to_exp_point): Avoid setting a\n-    \tvariable without using it if ENABLE_CHECKING is not defined.  Mark\n-    \tthe LOCATION parameter as being unused.\n+\tvariable without using it if ENABLE_CHECKING is not defined.  Mark\n+\tthe LOCATION parameter as being unused.\n \n 2011-10-15  Tom Tromey  <tromey@redhat.com>\n \t    Dodji Seketeli  <dodji@redhat.com>\n@@ -1078,7 +1086,7 @@\n \tmember.\n \t(MAX_SOURCE_LOCATION): New constant.\n \t(struct line_map_ordinary, struct line_map_macro): New structs.\n-    \t(struct line_map): Turn this into a union of the two above.  Add\n+\t(struct line_map): Turn this into a union of the two above.  Add\n \tcomments.\n \t(struct maps_info): New struct.\n \t(struct line_maps)<info_ordinary, info_macro>: Two new fields.\n@@ -1333,7 +1341,7 @@\n \t* lex.c [ALTIVEC] (search_line_fast): Require gcc version 4.5.\n \n 2011-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n-            Jakub Jelinek  <jakub@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/39213\n \t* directives.c (end_directive): Call _cpp_remove_overlay for deferred\n@@ -2086,7 +2094,7 @@\n \t* directives-only.c (_cpp_preprocess_dir_only): Likewise.\n \t* internal.h (CPP_INCREMENT_LINE): Likewise.\n \t* lex.c (_cpp_skip_block_comment): Use source_location.\n-\t\n+\n 2008-07-14  Ben Elliston  <bje@au.ibm.com>\n \n \t* include/cpplib.h (NODE_CONDITIONAL): New.\n@@ -2352,7 +2360,7 @@\n \n \tPR preprocessor/30363\n \t* traditional.c (replace_args_and_push): Add local variable\n-\tcxtquote, calculate the replacement text size assuming a \n+\tcxtquote, calculate the replacement text size assuming a\n \tworst case of every input character quoted with backslash,\n \tand properly handle output quoting of quote characters in\n \tactual arguments used in function-like macros.\n@@ -2506,8 +2514,8 @@\n 2007-06-09  Vladimir Prus  <vladimir@codesourcery.com>\n \n \t* files.c (open_file): Account for the\n-        fact that on windows, opening a directory gives\n-        EACCES.\n+\tfact that on windows, opening a directory gives\n+\tEACCES.\n \n 2007-06-05  Joerg Wunsch  <j.gnu@uriah.heep.sax.de>\n \n@@ -2559,7 +2567,7 @@\n \n 2007-05-14  Janis Johnson  <janis187@us.ibm.com>\n \n-        * expr.c (cpp_classify_number): Warn about dfp constant for -pedantic.\n+\t* expr.c (cpp_classify_number): Warn about dfp constant for -pedantic.\n \n \tPR c/31924\n \t* expr.c (interpret_float_suffix): Check for invalid suffix."}, {"sha": "3984821db525a70db7f782778874eb67fc47cff4", "filename": "libcpp/files.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -1282,9 +1282,8 @@ _cpp_init_files (cpp_reader *pfile)\n   pfile->nonexistent_file_hash = htab_create_alloc (127, htab_hash_string,\n \t\t\t\t\t\t    nonexistent_file_hash_eq,\n \t\t\t\t\t\t    NULL, xcalloc, free);\n-  _obstack_begin (&pfile->nonexistent_file_ob, 0, 0,\n-\t\t  (void *(*) (long)) xmalloc,\n-\t\t  (void (*) (void *)) free);\n+  obstack_specify_allocation (&pfile->nonexistent_file_ob, 0, 0,\n+\t\t\t      xmalloc, free);\n }\n \n /* Finalize everything in this source file.  */"}, {"sha": "35d19067495d29dd032f835a42a806cf4fa0690c", "filename": "libcpp/identifiers.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Fidentifiers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Fidentifiers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fidentifiers.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -54,9 +54,7 @@ _cpp_init_hashtable (cpp_reader *pfile, cpp_hash_table *table)\n       table = ht_create (13);\t/* 8K (=2^13) entries.  */\n       table->alloc_node = alloc_node;\n \n-      _obstack_begin (&pfile->hash_ob, 0, 0,\n-\t\t      (void *(*) (long)) xmalloc,\n-\t\t      (void (*) (void *)) free);\n+      obstack_specify_allocation (&pfile->hash_ob, 0, 0, xmalloc, free);\n     }\n \n   table->pfile = pfile;"}, {"sha": "8e1a2f6b282bb6b6f021a7cacff2d909d64498bf", "filename": "libcpp/init.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -262,9 +262,7 @@ cpp_create_reader (enum c_lang lang, cpp_hash_table *table,\n   _cpp_expand_op_stack (pfile);\n \n   /* Initialize the buffer obstack.  */\n-  _obstack_begin (&pfile->buffer_ob, 0, 0,\n-\t\t  (void *(*) (long)) xmalloc,\n-\t\t  (void (*) (void *)) free);\n+  obstack_specify_allocation (&pfile->buffer_ob, 0, 0, xmalloc, free);\n \n   _cpp_init_files (pfile);\n "}, {"sha": "11070890da3f6cbac4a8e6a8f95a5aeffb1a7f55", "filename": "libcpp/symtab.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Fsymtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/19a9ba64e7895c9919b95cd446faa4922ebf284e/libcpp%2Fsymtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fsymtab.c?ref=19a9ba64e7895c9919b95cd446faa4922ebf284e", "patch": "@@ -61,9 +61,7 @@ ht_create (unsigned int order)\n   table = XCNEW (cpp_hash_table);\n \n   /* Strings need no alignment.  */\n-  _obstack_begin (&table->stack, 0, 0,\n-\t\t  (void *(*) (long)) xmalloc,\n-\t\t  (void (*) (void *)) free);\n+  obstack_specify_allocation (&table->stack, 0, 0, xmalloc, free);\n \n   obstack_alignment_mask (&table->stack) = 0;\n "}]}