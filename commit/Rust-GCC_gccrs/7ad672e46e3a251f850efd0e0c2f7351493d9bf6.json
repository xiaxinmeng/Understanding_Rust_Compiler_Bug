{"sha": "7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2FkNjcyZTQ2ZTNhMjUxZjg1MGVmZDBlMGMyZjczNTE0OTNkOWJmNg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-06-05T11:27:30Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-06-05T11:27:30Z"}, "message": "tree-loop-distribution.c (struct partition_s): Add has_writes member.\n\n2012-06-05  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-loop-distribution.c (struct partition_s): Add has_writes\n\tmember.\n\t(partition_alloc): Initialize it.\n\t(partition_has_writes): New function.\n\t(rdg_flag_uses): Adjust.\n\t(rdg_flag_vertex): Likewise.\n\t(rdg_flag_vertex_and_dependent): Likewise.\n\t(rdg_flag_loop_exits): Likewise.\n\t(build_rdg_partition_for_component): Likewise.\n\t(rdg_build_partitions): Likewise.\n\nFrom-SVN: r188233", "tree": {"sha": "3d09da273e4f534a71329a44406a9fb02e621d52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d09da273e4f534a71329a44406a9fb02e621d52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ad672e46e3a251f850efd0e0c2f7351493d9bf6/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b6dd52618f43de2492a727317bd6af3acfa78a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6dd52618f43de2492a727317bd6af3acfa78a23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6dd52618f43de2492a727317bd6af3acfa78a23"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "0a3fd741af40b71d29c8791555012938d9db1af8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad672e46e3a251f850efd0e0c2f7351493d9bf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad672e46e3a251f850efd0e0c2f7351493d9bf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "patch": "@@ -1,3 +1,16 @@\n+2012-06-05  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-loop-distribution.c (struct partition_s): Add has_writes\n+\tmember.\n+\t(partition_alloc): Initialize it.\n+\t(partition_has_writes): New function.\n+\t(rdg_flag_uses): Adjust.\n+\t(rdg_flag_vertex): Likewise.\n+\t(rdg_flag_vertex_and_dependent): Likewise.\n+\t(rdg_flag_loop_exits): Likewise.\n+\t(build_rdg_partition_for_component): Likewise.\n+\t(rdg_build_partitions): Likewise.\n+\n 2012-06-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53081"}, {"sha": "9f6660893d7798d0e8265f501d6b57b62479b931", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 29, "deletions": 25, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ad672e46e3a251f850efd0e0c2f7351493d9bf6/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ad672e46e3a251f850efd0e0c2f7351493d9bf6/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=7ad672e46e3a251f850efd0e0c2f7351493d9bf6", "patch": "@@ -57,6 +57,7 @@ enum partition_kind { PKIND_NORMAL, PKIND_MEMSET };\n typedef struct partition_s\n {\n   bitmap stmts;\n+  bool has_writes;\n   enum partition_kind kind;\n   /* Main statement a kind != PKIND_NORMAL partition is about.  */\n   gimple main_stmt;\n@@ -72,6 +73,7 @@ partition_alloc (bitmap stmts)\n {\n   partition_t partition = XCNEW (struct partition_s);\n   partition->stmts = stmts ? stmts : BITMAP_ALLOC (NULL);\n+  partition->has_writes = false;\n   partition->kind = PKIND_NORMAL;\n   return partition;\n }\n@@ -93,6 +95,14 @@ partition_builtin_p (partition_t partition)\n   return partition->kind != PKIND_NORMAL;\n }\n \n+/* Returns true if the partition has an writes.  */\n+\n+static bool\n+partition_has_writes (partition_t partition)\n+{\n+  return partition->has_writes;\n+}\n+\n /* If bit I is not set, it means that this node represents an\n    operation that has already been performed, and that should not be\n    performed again.  This is the subgraph of remaining important\n@@ -583,14 +593,14 @@ has_upstream_mem_writes (int u)\n }\n \n static void rdg_flag_vertex_and_dependent (struct graph *, int, partition_t,\n-\t\t\t\t\t   bitmap, bitmap, bool *);\n+\t\t\t\t\t   bitmap, bitmap);\n \n /* Flag the uses of U stopping following the information from\n    upstream_mem_writes.  */\n \n static void\n rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n-\t       bitmap processed, bool *part_has_writes)\n+\t       bitmap processed)\n {\n   use_operand_p use_p;\n   struct vertex *x = &(rdg->vertices[u]);\n@@ -606,7 +616,7 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \n       if (!already_processed_vertex_p (processed, v))\n \trdg_flag_vertex_and_dependent (rdg, v, partition, loops,\n-\t\t\t\t       processed, part_has_writes);\n+\t\t\t\t       processed);\n     }\n \n   if (gimple_code (stmt) != GIMPLE_PHI)\n@@ -623,7 +633,7 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \t      if (v >= 0\n \t\t  && !already_processed_vertex_p (processed, v))\n \t\trdg_flag_vertex_and_dependent (rdg, v, partition, loops,\n-\t\t\t\t\t       processed, part_has_writes);\n+\t\t\t\t\t       processed);\n \t    }\n \t}\n     }\n@@ -645,7 +655,7 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n \n \t      if (!already_processed_vertex_p (processed, v))\n \t\trdg_flag_vertex_and_dependent (rdg, v, partition, loops,\n-\t\t\t\t\t       processed, part_has_writes);\n+\t\t\t\t\t       processed);\n \t    }\n \t}\n     }\n@@ -655,8 +665,7 @@ rdg_flag_uses (struct graph *rdg, int u, partition_t partition, bitmap loops,\n    in LOOPS.  */\n \n static void\n-rdg_flag_vertex (struct graph *rdg, int v, partition_t partition, bitmap loops,\n-\t\t bool *part_has_writes)\n+rdg_flag_vertex (struct graph *rdg, int v, partition_t partition, bitmap loops)\n {\n   struct loop *loop;\n \n@@ -668,7 +677,7 @@ rdg_flag_vertex (struct graph *rdg, int v, partition_t partition, bitmap loops,\n \n   if (rdg_cannot_recompute_vertex_p (rdg, v))\n     {\n-      *part_has_writes = true;\n+      partition->has_writes = true;\n       bitmap_clear_bit (remaining_stmts, v);\n     }\n }\n@@ -678,22 +687,20 @@ rdg_flag_vertex (struct graph *rdg, int v, partition_t partition, bitmap loops,\n \n static void\n rdg_flag_vertex_and_dependent (struct graph *rdg, int v, partition_t partition,\n-\t\t\t       bitmap loops, bitmap processed,\n-\t\t\t       bool *part_has_writes)\n+\t\t\t       bitmap loops, bitmap processed)\n {\n   unsigned i;\n   VEC (int, heap) *nodes = VEC_alloc (int, heap, 3);\n   int x;\n \n   bitmap_set_bit (processed, v);\n-  rdg_flag_uses (rdg, v, partition, loops, processed, part_has_writes);\n+  rdg_flag_uses (rdg, v, partition, loops, processed);\n   graphds_dfs (rdg, &v, 1, &nodes, false, remaining_stmts);\n-  rdg_flag_vertex (rdg, v, partition, loops, part_has_writes);\n+  rdg_flag_vertex (rdg, v, partition, loops);\n \n   FOR_EACH_VEC_ELT (int, nodes, i, x)\n     if (!already_processed_vertex_p (processed, x))\n-      rdg_flag_vertex_and_dependent (rdg, x, partition, loops, processed,\n-\t\t\t\t     part_has_writes);\n+      rdg_flag_vertex_and_dependent (rdg, x, partition, loops, processed);\n \n   VEC_free (int, heap, nodes);\n }\n@@ -725,7 +732,7 @@ collect_condition_stmts (struct loop *loop, VEC (gimple, heap) **conds)\n \n static void\n rdg_flag_loop_exits (struct graph *rdg, bitmap loops, partition_t partition,\n-\t\t     bitmap processed, bool *part_has_writes)\n+\t\t     bitmap processed)\n {\n   unsigned i;\n   bitmap_iterator bi;\n@@ -741,8 +748,7 @@ rdg_flag_loop_exits (struct graph *rdg, bitmap loops, partition_t partition,\n       bitmap new_loops = BITMAP_ALLOC (NULL);\n \n       if (!already_processed_vertex_p (processed, v))\n-\trdg_flag_vertex_and_dependent (rdg, v, partition, new_loops, processed,\n-\t\t\t\t       part_has_writes);\n+\trdg_flag_vertex_and_dependent (rdg, v, partition, new_loops, processed);\n \n       EXECUTE_IF_SET_IN_BITMAP (new_loops, 0, i, bi)\n \tif (bitmap_set_bit (loops, i))\n@@ -759,8 +765,7 @@ rdg_flag_loop_exits (struct graph *rdg, bitmap loops, partition_t partition,\n    including the loop exit conditions.  */\n \n static partition_t\n-build_rdg_partition_for_component (struct graph *rdg, rdgc c,\n-\t\t\t\t   bool *part_has_writes)\n+build_rdg_partition_for_component (struct graph *rdg, rdgc c)\n {\n   int i, v;\n   partition_t partition = partition_alloc (NULL);\n@@ -769,10 +774,9 @@ build_rdg_partition_for_component (struct graph *rdg, rdgc c,\n \n   FOR_EACH_VEC_ELT (int, c->vertices, i, v)\n     if (!already_processed_vertex_p (processed, v))\n-      rdg_flag_vertex_and_dependent (rdg, v, partition, loops, processed,\n-\t\t\t\t     part_has_writes);\n+      rdg_flag_vertex_and_dependent (rdg, v, partition, loops, processed);\n \n-  rdg_flag_loop_exits (rdg, loops, partition, processed, part_has_writes);\n+  rdg_flag_loop_exits (rdg, loops, partition, processed);\n \n   BITMAP_FREE (processed);\n   BITMAP_FREE (loops);\n@@ -996,18 +1000,18 @@ rdg_build_partitions (struct graph *rdg, VEC (rdgc, heap) *components,\n   FOR_EACH_VEC_ELT (rdgc, components, i, x)\n     {\n       partition_t np;\n-      bool part_has_writes = false;\n       int v = VEC_index (int, x->vertices, 0);\n \n       if (bitmap_bit_p (processed, v))\n \tcontinue;\n \n-      np = build_rdg_partition_for_component (rdg, x, &part_has_writes);\n+      np = build_rdg_partition_for_component (rdg, x);\n       bitmap_ior_into (partition->stmts, np->stmts);\n+      partition->has_writes = partition_has_writes (np);\n       bitmap_ior_into (processed, np->stmts);\n       partition_free (np);\n \n-      if (part_has_writes)\n+      if (partition_has_writes (partition))\n \t{\n \t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t    {"}]}