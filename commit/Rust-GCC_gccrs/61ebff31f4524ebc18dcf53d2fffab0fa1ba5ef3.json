{"sha": "61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFlYmZmMzFmNDUyNGViYzE4ZGNmNTNkMmZmZmFiMGZhMWJhNWVmMw==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-04-13T06:37:56Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-04-13T06:37:56Z"}, "message": "hash-table.h (hash_table constructor): Add mem stats.\n\n\n\t* hash-table.h (hash_table constructor): Add mem stats.\n\t(alloc_entries): Likewise.\n\nFrom-SVN: r222039", "tree": {"sha": "b5c31e91c73b5e8383fa0ce4679cf70f4173c529", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b5c31e91c73b5e8383fa0ce4679cf70f4173c529"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3/comments", "author": null, "committer": null, "parents": [{"sha": "31b2793874585acdcc7dafb85f3e6dc04eedef90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31b2793874585acdcc7dafb85f3e6dc04eedef90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31b2793874585acdcc7dafb85f3e6dc04eedef90"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "0d3495fd0bdf12951c87716df3b78f0c96dcc247", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "patch": "@@ -1,3 +1,8 @@\n+2015-04-12  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* hash-table.h (hash_table constructor): Add mem stats.\n+\t(alloc_entries): Likewise.\n+\n 2015-04-12  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-cp.c (ipcp_driver): Relase prev_edge."}, {"sha": "447eaff1b1cad448c6a4646ac4dffbf337d34c5e", "filename": "gcc/hash-table.h", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3/gcc%2Fhash-table.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3/gcc%2Fhash-table.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-table.h?ref=61ebff31f4524ebc18dcf53d2fffab0fa1ba5ef3", "patch": "@@ -615,7 +615,7 @@ class hash_table<Descriptor, Allocator, false>\n   typedef typename Descriptor::compare_type compare_type;\n \n public:\n-  hash_table (size_t);\n+  hash_table (size_t CXX_MEM_STAT_INFO);\n   ~hash_table ();\n \n   /* Current size (in entries) of the hash table.  */\n@@ -751,7 +751,8 @@ class hash_table<Descriptor, Allocator, false>\n };\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-hash_table<Descriptor, Allocator, false>::hash_table (size_t size) :\n+hash_table<Descriptor, Allocator, false>::hash_table (size_t size\n+\t\t\t\t\t\t      MEM_STAT_DECL) :\n   m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0)\n {\n   unsigned int size_prime_index;\n@@ -1116,7 +1117,7 @@ class hash_table<Descriptor, Allocator, true>\n   typedef typename Descriptor::compare_type compare_type;\n \n public:\n-  explicit hash_table (size_t, bool ggc = false);\n+  explicit hash_table (size_t, bool ggc = false CXX_MEM_STAT_INFO);\n   ~hash_table ();\n \n   /* Create a hash_table in gc memory.  */\n@@ -1245,7 +1246,7 @@ class hash_table<Descriptor, Allocator, true>\n   template<typename T> friend void gt_pch_nx (hash_table<T> *,\n \t\t\t\t\t      gt_pointer_operator, void *);\n \n-  value_type *alloc_entries (size_t n) const;\n+  value_type *alloc_entries (size_t n CXX_MEM_STAT_INFO) const;\n   value_type *find_empty_slot_for_expand (hashval_t);\n   void expand ();\n   static bool is_deleted (value_type &v)\n@@ -1295,7 +1296,8 @@ class hash_table<Descriptor, Allocator, true>\n };\n \n template<typename Descriptor, template<typename Type> class Allocator>\n-hash_table<Descriptor, Allocator, true>::hash_table (size_t size, bool ggc) :\n+hash_table<Descriptor, Allocator, true>::hash_table (size_t size, bool ggc\n+\t\t\t\t\t\t     MEM_STAT_DECL) :\n   m_n_elements (0), m_n_deleted (0), m_searches (0), m_collisions (0),\n   m_ggc (ggc)\n {\n@@ -1304,7 +1306,7 @@ hash_table<Descriptor, Allocator, true>::hash_table (size_t size, bool ggc) :\n   size_prime_index = hash_table_higher_prime_index (size);\n   size = prime_tab[size_prime_index].prime;\n \n-  m_entries = alloc_entries (size);\n+  m_entries = alloc_entries (size PASS_MEM_STAT);\n   m_size = size;\n   m_size_prime_index = size_prime_index;\n }\n@@ -1326,14 +1328,15 @@ hash_table<Descriptor, Allocator, true>::~hash_table ()\n \n template<typename Descriptor, template<typename Type> class Allocator>\n inline typename hash_table<Descriptor, Allocator, true>::value_type *\n-hash_table<Descriptor, Allocator, true>::alloc_entries (size_t n) const\n+hash_table<Descriptor, Allocator, true>::alloc_entries\n+\t (size_t n MEM_STAT_DECL) const\n {\n   value_type *nentries;\n \n   if (!m_ggc)\n     nentries = Allocator <value_type> ::data_alloc (n);\n   else\n-    nentries = ::ggc_cleared_vec_alloc<value_type> (n);\n+    nentries = ::ggc_cleared_vec_alloc<value_type> (n PASS_MEM_STAT);\n \n   gcc_assert (nentries != NULL);\n   for (size_t i = 0; i < n; i++)"}]}