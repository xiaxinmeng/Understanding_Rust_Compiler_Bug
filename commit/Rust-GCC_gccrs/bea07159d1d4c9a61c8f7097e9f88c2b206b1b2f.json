{"sha": "bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVhMDcxNTlkMWQ0YzlhNjFjOGY3MDk3ZTlmODhjMmIyMDZiMWIyZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T11:30:51Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-09-01T11:40:43Z"}, "message": "vectorizer: Fix up vectorization using WIDEN_MINUS_EXPR [PR102124]\n\nThe following testcase is miscompiled on aarch64-linux at -O3 since the\nintroduction of WIDEN_MINUS_EXPR.\nThe problem is if the inner type (half_type) is unsigned and the result\ntype in which the subtraction is performed (type) has precision more than\ntwice as larger as the inner type's precision.\nFor other widening operations like WIDEN_{PLUS,MULT}_EXPR, if half_type\nis unsigned, the addition/multiplication result in itype is also unsigned\nand needs to be zero-extended to type.\nBut subtraction is special, even when half_type is unsigned, the subtraction\nbehaves as signed (also regardless of whether the result type is signed or\nunsigned), 0xfeU - 0xffU is -1 or 0xffffffffU, not 0x0000ffff.\n\nI think it is better not to use mixed signedness of types in\nWIDEN_MINUS_EXPR (have unsigned vector of operands and signed result\nvector), so this patch instead adds another cast to make sure we always\nsign-extend the result from itype to type if type is wider than itype.\n\n2021-09-01  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/102124\n\t* tree-vect-patterns.c (vect_recog_widen_op_pattern): For ORIG_CODE\n\tMINUS_EXPR, if itype is unsigned with smaller precision than type,\n\tadd an extra cast to signed variant of itype to ensure sign-extension.\n\n\t* gcc.dg/torture/pr102124.c: New test.", "tree": {"sha": "9df5780b3d76c871dc729f73b17152c3fcb2a76f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9df5780b3d76c871dc729f73b17152c3fcb2a76f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a61623d9b38d28048ccbd397d4ccf52c2dfb3fed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a61623d9b38d28048ccbd397d4ccf52c2dfb3fed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a61623d9b38d28048ccbd397d4ccf52c2dfb3fed"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "a158b4a60b69d15884c15821b0ab50d3480d4754", "filename": "gcc/testsuite/gcc.dg/torture/pr102124.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102124.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102124.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr102124.c?ref=bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "patch": "@@ -0,0 +1,27 @@\n+/* PR tree-optimization/102124 */\n+\n+int\n+foo (const unsigned char *a, const unsigned char *b, unsigned long len)\n+{\n+  int ab, ba; \n+  unsigned long i;\n+  for (i = 0, ab = 0, ba = 0; i < len; i++)\n+    {\n+      ab |= a[i] - b[i];\n+      ba |= b[i] - a[i];\n+    }   \n+  return (ab | ba) >= 0;\n+}\n+\n+int\n+main ()\n+{\n+  unsigned char a[32] = { 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' };\n+  unsigned char b[32] = { 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' };\n+  unsigned char c[32] = { 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b', 'b' };\n+  if (!foo (a, b, 16))\n+    __builtin_abort ();\n+  if (foo (a, c, 16))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "e6c5bcdad36e6ee82261202093b12d8c625a21fa", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=bea07159d1d4c9a61c8f7097e9f88c2b206b1b2f", "patch": "@@ -1268,11 +1268,31 @@ vect_recog_widen_op_pattern (vec_info *vinfo,\n   /* Check target support  */\n   tree vectype = get_vectype_for_scalar_type (vinfo, half_type);\n   tree vecitype = get_vectype_for_scalar_type (vinfo, itype);\n+  tree ctype = itype;\n+  tree vecctype = vecitype;\n+  if (orig_code == MINUS_EXPR\n+      && TYPE_UNSIGNED (itype)\n+      && TYPE_PRECISION (type) > TYPE_PRECISION (itype))\n+    {\n+      /* Subtraction is special, even if half_type is unsigned and no matter\n+\t whether type is signed or unsigned, if type is wider than itype,\n+\t we need to sign-extend from the widening operation result to the\n+\t result type.\n+\t Consider half_type unsigned char, operand 1 0xfe, operand 2 0xff,\n+\t itype unsigned short and type either int or unsigned int.\n+\t Widened (unsigned short) 0xfe - (unsigned short) 0xff is\n+\t (unsigned short) 0xffff, but for type int we want the result -1\n+\t and for type unsigned int 0xffffffff rather than 0xffff.  */\n+      ctype = build_nonstandard_integer_type (TYPE_PRECISION (itype), 0);\n+      vecctype = get_vectype_for_scalar_type (vinfo, ctype);\n+    }\n+\n   enum tree_code dummy_code;\n   int dummy_int;\n   auto_vec<tree> dummy_vec;\n   if (!vectype\n       || !vecitype\n+      || !vecctype\n       || !supportable_widening_operation (vinfo, wide_code, last_stmt_info,\n \t\t\t\t\t  vecitype, vectype,\n \t\t\t\t\t  &dummy_code, &dummy_code,\n@@ -1291,8 +1311,12 @@ vect_recog_widen_op_pattern (vec_info *vinfo,\n   gimple *pattern_stmt = gimple_build_assign (var, wide_code,\n \t\t\t\t\t      oprnd[0], oprnd[1]);\n \n+  if (vecctype != vecitype)\n+    pattern_stmt = vect_convert_output (vinfo, last_stmt_info, ctype,\n+\t\t\t\t\tpattern_stmt, vecitype);\n+\n   return vect_convert_output (vinfo, last_stmt_info,\n-\t\t\t      type, pattern_stmt, vecitype);\n+\t\t\t      type, pattern_stmt, vecctype);\n }\n \n /* Try to detect multiplication on widened inputs, converting MULT_EXPR"}]}