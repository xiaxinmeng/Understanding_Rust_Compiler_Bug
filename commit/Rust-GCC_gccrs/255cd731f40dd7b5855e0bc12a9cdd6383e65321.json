{"sha": "255cd731f40dd7b5855e0bc12a9cdd6383e65321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU1Y2Q3MzFmNDBkZDdiNTg1NWUwYmMxMmE5Y2RkNjM4M2U2NTMyMQ==", "commit": {"author": {"name": "Diego Novillo", "email": "dnovillo@redhat.com", "date": "2004-07-12T15:38:25Z"}, "committer": {"name": "Diego Novillo", "email": "dnovillo@gcc.gnu.org", "date": "2004-07-12T15:38:25Z"}, "message": "tree-cfg.c (find_taken_edge): Statically compute the truth value of a predicate comparing an SSA_NAME to itself.\n\n\n\t* tree-cfg.c (find_taken_edge): Statically compute the truth\n\tvalue of a predicate comparing an SSA_NAME to itself.\n\nFrom-SVN: r84561", "tree": {"sha": "028ad72a48dbd069536dd663bdf97b2074816a1c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/028ad72a48dbd069536dd663bdf97b2074816a1c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/255cd731f40dd7b5855e0bc12a9cdd6383e65321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255cd731f40dd7b5855e0bc12a9cdd6383e65321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/255cd731f40dd7b5855e0bc12a9cdd6383e65321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/255cd731f40dd7b5855e0bc12a9cdd6383e65321/comments", "author": null, "committer": null, "parents": [{"sha": "938bf7475d34bb808144dff4ea0903026bd70b28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/938bf7475d34bb808144dff4ea0903026bd70b28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/938bf7475d34bb808144dff4ea0903026bd70b28"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "9580f3d0a6d7ad6f8da53cc67cabaa0932f7fbc5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255cd731f40dd7b5855e0bc12a9cdd6383e65321/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255cd731f40dd7b5855e0bc12a9cdd6383e65321/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=255cd731f40dd7b5855e0bc12a9cdd6383e65321", "patch": "@@ -1,3 +1,8 @@\n+2004-07-12  Diego Novillo  <dnovillo@redhat.com>\n+\n+\t* tree-cfg.c (find_taken_edge): Statically compute the truth\n+\tvalue of a predicate comparing an SSA_NAME to itself.\n+\n 2004-07-12  Roger Sayle  <roger@eyesopen.com>\n \n \t* config/rs6000/rs6000.c (rs6000_rtx_costs): Indicate that the"}, {"sha": "6207fd31915c712676509f8791c7d481c9552fe2", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/255cd731f40dd7b5855e0bc12a9cdd6383e65321/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/255cd731f40dd7b5855e0bc12a9cdd6383e65321/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=255cd731f40dd7b5855e0bc12a9cdd6383e65321", "patch": "@@ -1991,9 +1991,9 @@ cleanup_control_expr_graph (basic_block bb, block_stmt_iterator bsi)\n }\n \n \n-/* Given a control block BB and a constant value VAL, return the edge that\n-   will be taken out of the block.  If VAL does not match a unique edge,\n-   NULL is returned.  */\n+/* Given a control block BB and a predicate VAL, return the edge that\n+   will be taken out of the block.  If VAL does not match a unique\n+   edge, NULL is returned. */\n \n edge\n find_taken_edge (basic_block bb, tree val)\n@@ -2007,6 +2007,24 @@ find_taken_edge (basic_block bb, tree val)\n     abort ();\n #endif\n \n+  /* If VAL is a predicate of the form N RELOP N, where N is an\n+     SSA_NAME, we can always determine its truth value (except when\n+     doing floating point comparisons that may involve NaNs).  */\n+  if (val\n+      && TREE_CODE_CLASS (TREE_CODE (val)) == '<'\n+      && TREE_OPERAND (val, 0) == TREE_OPERAND (val, 1)\n+      && TREE_CODE (TREE_OPERAND (val, 0)) == SSA_NAME\n+      && (TREE_CODE (TREE_TYPE (TREE_OPERAND (val, 0))) != REAL_TYPE\n+\t  || !HONOR_NANS (TYPE_MODE (TREE_TYPE (TREE_OPERAND (val, 0))))))\n+    {\n+      enum tree_code code = TREE_CODE (val);\n+\n+      if (code == EQ_EXPR || code == LE_EXPR || code == GE_EXPR)\n+\tval = boolean_true_node;\n+      else if (code == LT_EXPR || code == GT_EXPR || code == NE_EXPR)\n+\tval = boolean_false_node;\n+    }\n+\n   /* If VAL is not a constant, we can't determine which edge might\n      be taken.  */\n   if (val == NULL || !really_constant_p (val))"}]}