{"sha": "57cb9b60874ba518f04b3e5592f3c63c03771b06", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdjYjliNjA4NzRiYTUxOGYwNGIzZTU1OTJmM2M2M2MwMzc3MWIwNg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-09-30T00:13:09Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1994-09-30T00:13:09Z"}, "message": "(default_compilers): Add %Z to all cpp specs.\n\n(n_preprocessor_options, preprocessor_options): New variables.\n(process_command): Handle -Wp option.\n(do_spec_1): Handle %Z spec.\n\nFrom-SVN: r8175", "tree": {"sha": "a4cd6680a65ea23f66e28cf0beee9b8cc801f27f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4cd6680a65ea23f66e28cf0beee9b8cc801f27f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57cb9b60874ba518f04b3e5592f3c63c03771b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb9b60874ba518f04b3e5592f3c63c03771b06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57cb9b60874ba518f04b3e5592f3c63c03771b06", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57cb9b60874ba518f04b3e5592f3c63c03771b06/comments", "author": null, "committer": null, "parents": [{"sha": "ba0616649212e422165513fa3b151d48dae79d18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba0616649212e422165513fa3b151d48dae79d18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba0616649212e422165513fa3b151d48dae79d18"}], "stats": {"total": 63, "additions": 56, "deletions": 7}, "files": [{"sha": "d14c69b6d1964d1267189f785defb23845f8f60e", "filename": "gcc/gcc.c", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57cb9b60874ba518f04b3e5592f3c63c03771b06/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57cb9b60874ba518f04b3e5592f3c63c03771b06/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=57cb9b60874ba518f04b3e5592f3c63c03771b06", "patch": "@@ -315,6 +315,7 @@ or with constant text in a single argument.\n  %x{OPTION}\tAccumulate an option for %X.\n  %X\tOutput the accumulated linker options specified by compilations.\n  %Y\tOutput the accumulated assembler options specified by compilations.\n+ %Z\tOutput the accumulated preprocessor options specified by compilations.\n  %v1\tSubstitute the major version number of GCC.\n \t(For version 2.5.n, this is 2.)\n  %v2\tSubstitute the minor version number of GCC.\n@@ -540,7 +541,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs} \\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1 %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.c %{d*} %{m*} %{a}\\\n@@ -561,7 +562,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %W{o*}}\\\n     %{!E:%e-E required when input is from standard input}\"},\n   {\".m\", \"@objective-c\"},\n@@ -574,7 +575,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.i}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1obj %{!pipe:%g.i} %1 \\\n \t\t   %{!Q:-quiet} -dumpbase %b.m %{d*} %{m*} %{a}\\\n@@ -598,7 +599,7 @@ static struct compiler default_compilers[] =\n \t%{!undef:%{!ansi:%p} %P} %{trigraphs}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %W{o*}\"},\n   {\".cc\", \"@c++\"},\n   {\".cxx\", \"@c++\"},\n@@ -612,7 +613,7 @@ static struct compiler default_compilers[] =\n \t%{ansi:-trigraphs -$ -D__STRICT_ANSI__} %{!undef:%{!ansi:%p} %P}\\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional} %{trigraphs}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.ii}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:cc1plus %{!pipe:%g.ii} %1 %2\\\n \t\t\t    %{!Q:-quiet} -dumpbase %b.cc %{d*} %{m*} %{a}\\\n@@ -659,7 +660,7 @@ static struct compiler default_compilers[] =\n         -undef -$ %{!undef:%p %P} -D__ASSEMBLER__ \\\n         %c %{O*:%{!O0:-D__OPTIMIZE__}} %{traditional} %{ftraditional:-traditional}\\\n         %{traditional-cpp:-traditional}\\\n-\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*}\\\n+\t%{g*} %{W*} %{w} %{pedantic*} %{H} %{d*} %C %{D*} %{U*} %{i*} %Z\\\n         %i %{!M:%{!MM:%{!E:%{!pipe:%g.s}}}}%{E:%W{o*}}%{M:%W{o*}}%{MM:%W{o*}} |\\n\",\n    \"%{!M:%{!MM:%{!E:%{!S:as %{R} %{j} %{J} %{h} %{d2} %a %Y\\\n                     %{c:%W{o*}%{!o*:-o %w%b.o}}%{!c:-o %d%w%u.o}\\\n@@ -729,9 +730,15 @@ static char **linker_options;\n \n /* A vector of options to give to the assembler.\n    These options are accumulated by -Wa,\n-   and substituted into the assembler command with %X.  */\n+   and substituted into the assembler command with %Y.  */\n static int n_assembler_options;\n static char **assembler_options;\n+\n+/* A vector of options to give to the preprocessor.\n+   These options are accumulated by -Wp,\n+   and substituted into the preprocessor command with %Z.  */\n+static int n_preprocessor_options;\n+static char **preprocessor_options;\n \f\n /* Define how to map long options into short ones.  */\n \n@@ -2506,6 +2513,36 @@ process_command (argc, argv)\n \t  /* Record the part after the last comma.  */\n \t  assembler_options[n_assembler_options - 1] = argv[i] + prev;\n \t}\n+      else if (! strncmp (argv[i], \"-Wp,\", 4))\n+\t{\n+\t  int prev, j;\n+\t  /* Pass the rest of this option to the preprocessor.  */\n+\n+\t  n_preprocessor_options++;\n+\t  if (!preprocessor_options)\n+\t    preprocessor_options\n+\t      = (char **) xmalloc (n_preprocessor_options * sizeof (char **));\n+\t  else\n+\t    preprocessor_options\n+\t      = (char **) xrealloc (preprocessor_options,\n+\t\t\t\t    n_preprocessor_options * sizeof (char **));\n+\n+\t  /* Split the argument at commas.  */\n+\t  prev = 4;\n+\t  for (j = 4; argv[i][j]; j++)\n+\t    if (argv[i][j] == ',')\n+\t      {\n+\t\tpreprocessor_options[n_preprocessor_options - 1]\n+\t\t  = save_string (argv[i] + prev, j - prev);\n+\t\tn_preprocessor_options++;\n+\t\tpreprocessor_options\n+\t\t  = (char **) xrealloc (preprocessor_options,\n+\t\t\t\t\tn_preprocessor_options * sizeof (char **));\n+\t\tprev = j + 1;\n+\t      }\n+\t  /* Record the part after the last comma.  */\n+\t  preprocessor_options[n_preprocessor_options - 1] = argv[i] + prev;\n+\t}\n       else if (argv[i][0] == '+' && argv[i][1] == 'e')\n \t/* The +e options to the C++ front-end.  */\n \tn_switches++;\n@@ -2674,6 +2711,8 @@ process_command (argc, argv)\n \t;\n       else if (! strncmp (argv[i], \"-Wa,\", 4))\n \t;\n+      else if (! strncmp (argv[i], \"-Wp,\", 4))\n+\t;\n       else if (! strcmp (argv[i], \"-print-libgcc-file-name\"))\n \t;\n       else if (! strncmp (argv[i], \"-print-file-name=\", 17))\n@@ -3311,6 +3350,16 @@ do_spec_1 (spec, inswitch, soft_matched_part)\n \t      }\n \t    break;\n \n+\t  /* Dump out the options accumulated previously using -Wp,.  */\n+\t  case 'Z':\n+\t    for (i = 0; i < n_preprocessor_options; i++)\n+\t      {\n+\t\tdo_spec_1 (preprocessor_options[i], 1, NULL_PTR);\n+\t\t/* Make each accumulated option a separate argument.  */\n+\t\tdo_spec_1 (\" \", 0, NULL_PTR);\n+\t      }\n+\t    break;\n+\n \t    /* Here are digits and numbers that just process\n \t       a certain constant string as a spec.  */\n "}]}