{"sha": "b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjkzYjE0NzVjZGZiM2VhNjcyM2ZkMTMxNGMwZDdlNDQ4MmJjYjNiNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-06-02T09:43:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-06-02T09:43:52Z"}, "message": "sse.md (*vec_concatv2di): Add x86_avx512dq v=Yv,rm alternative.\n\n\t* config/i386/sse.md (*vec_concatv2di): Add x86_avx512dq v=Yv,rm\n\talternative.  Change x=xm,C alternative to v=vm,C, x=x,x alternative\n\tto v=Yv,Yv and x=x,m to v=v,m.  Use maybe_evex prefix attribute\n\tinstead of vex for the last two above mentioned alternatives.\n\n\t* gcc.target/i386/avx512dq-concatv2di-1.c: New test.\n\t* gcc.target/i386/avx512vl-concatv2di-1.c: New test.\n\t* gcc.target/i386/sse2-init-v2di-2.c: Adjust expected vec_concatv2di\n\talternative number.\n\nFrom-SVN: r237028", "tree": {"sha": "0dbe86311837f40a4530114c2e3f91aa10830daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0dbe86311837f40a4530114c2e3f91aa10830daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "114e816e3f80ea999d329d0a187ef1e53348645b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/114e816e3f80ea999d329d0a187ef1e53348645b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/114e816e3f80ea999d329d0a187ef1e53348645b"}], "stats": {"total": 206, "additions": 192, "deletions": 14}, "files": [{"sha": "ed739918191168a31b1bfe1e2d74d0759595962f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -1,3 +1,10 @@\n+2016-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/sse.md (*vec_concatv2di): Add x86_avx512dq v=Yv,rm\n+\talternative.  Change x=xm,C alternative to v=vm,C, x=x,x alternative\n+\tto v=Yv,Yv and x=x,m to v=v,m.  Use maybe_evex prefix attribute\n+\tinstead of vex for the last two above mentioned alternatives.\n+\n 2016-06-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \tPR target/70830"}, {"sha": "22543abc6be7c487231fd4d8c500dd59a9169798", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -13567,17 +13567,18 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=Yr,*x,x ,Yi,x ,!x,x,x,x,x,x\")\n+\t  \"=Yr,*x,x ,v ,Yi,v ,!x,x,v ,x,x,v\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \"  0, 0,x ,r ,xm,*y,0,x,0,0,x\")\n+\t  \"  0, 0,x ,Yv,r ,vm,*y,0,Yv,0,0,v\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n-\t  \"*rm,rm,rm,C ,C ,C ,x,x,x,m,m\")))]\n+\t  \"*rm,rm,rm,rm,C ,C ,C ,x,Yv,x,m,m\")))]\n   \"TARGET_SSE\"\n   \"@\n    pinsrq\\t{$1, %2, %0|%0, %2, 1}\n    pinsrq\\t{$1, %2, %0|%0, %2, 1}\n    vpinsrq\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n+   vpinsrq\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n    * return HAVE_AS_IX86_INTERUNIT_MOVQ ? \\\"%vmovq\\t{%1, %0|%0, %1}\\\" : \\\"%vmovd\\t{%1, %0|%0, %1}\\\";\n    %vmovq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\n@@ -13592,40 +13593,46 @@\n \t    (eq_attr \"alternative\" \"2\")\n \t      (const_string \"x64_avx\")\n \t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"x64_avx512dq\")\n+\t    (eq_attr \"alternative\" \"4\")\n \t      (const_string \"x64\")\n-\t    (eq_attr \"alternative\" \"4,5\")\n+\t    (eq_attr \"alternative\" \"5,6\")\n \t      (const_string \"sse2\")\n-\t    (eq_attr \"alternative\" \"6\")\n+\t    (eq_attr \"alternative\" \"7\")\n \t      (const_string \"sse2_noavx\")\n-\t    (eq_attr \"alternative\" \"7,10\")\n+\t    (eq_attr \"alternative\" \"8,11\")\n \t      (const_string \"avx\")\n \t   ]\n \t   (const_string \"noavx\")))\n    (set (attr \"type\")\n      (if_then_else\n-       (eq_attr \"alternative\" \"0,1,2,6,7\")\n+       (eq_attr \"alternative\" \"0,1,2,3,7,8\")\n        (const_string \"sselog\")\n        (const_string \"ssemov\")))\n    (set (attr \"prefix_rex\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2,3\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3,4\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n    (set (attr \"prefix_extra\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n    (set (attr \"length_immediate\")\n-     (if_then_else (eq_attr \"alternative\" \"0,1,2\")\n+     (if_then_else (eq_attr \"alternative\" \"0,1,2,3\")\n \t\t   (const_string \"1\")\n \t\t   (const_string \"*\")))\n    (set (attr \"prefix\")\n-     (cond [(eq_attr \"alternative\" \"2,7,10\")\n+     (cond [(eq_attr \"alternative\" \"2\")\n \t      (const_string \"vex\")\n-\t    (eq_attr \"alternative\" \"3,4\")\n+\t    (eq_attr \"alternative\" \"3\")\n+\t      (const_string \"evex\")\n+\t    (eq_attr \"alternative\" \"4,5\")\n \t      (const_string \"maybe_vex\")\n+\t    (eq_attr \"alternative\" \"8,11\")\n+\t      (const_string \"maybe_evex\")\n \t   ]\n \t   (const_string \"orig\")))\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")"}, {"sha": "79554ec4b92535c22fc8a737cb67123adbf63a09", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -1,3 +1,10 @@\n+2016-06-02  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.target/i386/avx512dq-concatv2di-1.c: New test.\n+\t* gcc.target/i386/avx512vl-concatv2di-1.c: New test.\n+\t* gcc.target/i386/sse2-init-v2di-2.c: Adjust expected vec_concatv2di\n+\talternative number.\n+\n 2016-05-31  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* gcc.target/powerpc/p9-splat-4.c: New test."}, {"sha": "82cb402575b8e8c490df763d1076f7d3475df26b", "filename": "gcc/testsuite/gcc.target/i386/avx512dq-concatv2di-1.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-concatv2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-concatv2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512dq-concatv2di-1.c?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512dq -masm=att -mtune=haswell\" } */\n+\n+typedef long long V __attribute__((vector_size (16)));\n+\n+void\n+f1 (long long x, long long y)\n+{\n+  register long long a __asm (\"xmm16\");\n+  register V c __asm (\"xmm17\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, y };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrq\\[^\\n\\r]*\\\\\\$1\\[^\\n\\r]*%rsi\\[^\\n\\r]*%xmm16\\[^\\n\\r]*%xmm17\" } } */\n+\n+void\n+f2 (long long x, long long *y)\n+{\n+  register long long a __asm (\"xmm18\");\n+  register V c __asm (\"xmm19\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, *y };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vpinsrq\\[^\\n\\r]*\\\\\\$1\\[^\\n\\r]*%\\[re]si\\[^\\n\\r]*%xmm18\\[^\\n\\r]*%xmm19\" } } */\n+\n+void\n+f3 (long long x)\n+{\n+  register V a __asm (\"xmm20\");\n+  a = (V) { x, 0 };\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\[dq]\\[^\\n\\r]*%rdi\\[^\\n\\r]*%xmm20\" } } */\n+\n+void\n+f4 (long long *x)\n+{\n+  register V a __asm (\"xmm21\");\n+  a = (V) { *x, 0 };\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vmovq\\[^\\n\\r]*%\\[re]di\\[^\\n\\r]*%xmm21\" } } */\n+\n+void\n+f5 (long long x)\n+{\n+  register long long a __asm (\"xmm22\");\n+  register V c __asm (\"xmm23\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, 0 };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vmovq\\[^\\n\\r]*%xmm22\\[^\\n\\r]*%xmm23\" } } */\n+\n+void\n+f6 (long long x, long long y)\n+{\n+  register long long a __asm (\"xmm24\");\n+  register long long b __asm (\"xmm25\");\n+  register V c __asm (\"xmm26\");\n+  a = x;\n+  b = y;\n+  asm volatile (\"\" : \"+v\" (a), \"+v\" (b));\n+  c = (V) { a, b };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vpunpcklqdq\\[^\\n\\r]*%xmm25\\[^\\n\\r]*%xmm24\\[^\\n\\r]*%xmm26\" } } */"}, {"sha": "8e637071aa27af97173fe5dbd16c9b0c478a5ff0", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-concatv2di-1.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-concatv2di-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-concatv2di-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-concatv2di-1.c?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512vl -mno-avx512dq -masm=att -mtune=haswell\" } */\n+\n+typedef long long V __attribute__((vector_size (16)));\n+\n+void\n+f1 (long long x, long long y)\n+{\n+  register long long a __asm (\"xmm16\");\n+  register V c __asm (\"xmm17\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, y };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler-not \"vpinsrq\\[^\\n\\r]*\\[^\\n\\r]*%xmm1\\[6-9]\" } } */\n+/* { dg-final { scan-assembler-not \"vpinsrq\\[^\\n\\r]*\\[^\\n\\r]*%xmm\\[23]\\[0-9]\" } } */\n+\n+void\n+f2 (long long x, long long *y)\n+{\n+  register long long a __asm (\"xmm18\");\n+  register V c __asm (\"xmm19\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, *y };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vmovhps\\[^\\n\\r]*%\\[re]si\\[^\\n\\r]*%xmm18\\[^\\n\\r]*%xmm19\" } } */\n+\n+void\n+f3 (long long x)\n+{\n+  register V a __asm (\"xmm20\");\n+  a = (V) { x, 0 };\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vmov\\[dq]\\[^\\n\\r]*%rdi\\[^\\n\\r]*%xmm20\" } } */\n+\n+void\n+f4 (long long *x)\n+{\n+  register V a __asm (\"xmm21\");\n+  a = (V) { *x, 0 };\n+  asm volatile (\"\" : \"+v\" (a));\n+}\n+\n+/* { dg-final { scan-assembler \"vmovq\\[^\\n\\r]*%\\[re]di\\[^\\n\\r]*%xmm21\" } } */\n+\n+void\n+f5 (long long x)\n+{\n+  register long long a __asm (\"xmm22\");\n+  register V c __asm (\"xmm23\");\n+  a = x;\n+  asm volatile (\"\" : \"+v\" (a));\n+  c = (V) { a, 0 };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vmovq\\[^\\n\\r]*%xmm22\\[^\\n\\r]*%xmm23\" } } */\n+\n+void\n+f6 (long long x, long long y)\n+{\n+  register long long a __asm (\"xmm24\");\n+  register long long b __asm (\"xmm25\");\n+  register V c __asm (\"xmm26\");\n+  a = x;\n+  b = y;\n+  asm volatile (\"\" : \"+v\" (a), \"+v\" (b));\n+  c = (V) { a, b };\n+  asm volatile (\"\" : \"+v\" (c));\n+}\n+\n+/* { dg-final { scan-assembler \"vpunpcklqdq\\[^\\n\\r]*%xmm25\\[^\\n\\r]*%xmm24\\[^\\n\\r]*%xmm26\" } } */"}, {"sha": "38ca217c83b7a25c7bf7d0733bcf879302cc7433", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c?ref=b93b1475cdfb3ea6723fd1314c0d7e4482bcb3b6", "patch": "@@ -10,4 +10,4 @@ test (long long b)\n   return _mm_cvtsi64_si128 (b); \n }\n \n-/* { dg-final { scan-assembler-times \"vec_concatv2di/4\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vec_concatv2di/5\" 1 } } */"}]}