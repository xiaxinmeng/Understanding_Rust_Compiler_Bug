{"sha": "713101a65e1ebfc829f030bd68f32a8f91703ac0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzEzMTAxYTY1ZTFlYmZjODI5ZjAzMGJkNjhmMzJhOGY5MTcwM2FjMA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2005-03-02T19:55:52Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2005-03-02T19:55:52Z"}, "message": "name-lookup.c (push_overloaded_decl): Don't error if the new decl matches the old one.\n\ngcc/cp/ChangeLog:\n* name-lookup.c (push_overloaded_decl): Don't error if the new\ndecl matches the old one.\n* decl.c (redeclaration_error_message): Likewise.\ngcc/testsuite/ChangeLog:\n* g++.dg/overload/using2.C: New.\n\nFrom-SVN: r95798", "tree": {"sha": "83c5262d7842a3f042e65278bf3c6eacf9f98405", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83c5262d7842a3f042e65278bf3c6eacf9f98405"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/713101a65e1ebfc829f030bd68f32a8f91703ac0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713101a65e1ebfc829f030bd68f32a8f91703ac0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/713101a65e1ebfc829f030bd68f32a8f91703ac0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/713101a65e1ebfc829f030bd68f32a8f91703ac0/comments", "author": null, "committer": null, "parents": [{"sha": "ac0bd8018d589a221f8ad95f7a2ddd4d228f1bb5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac0bd8018d589a221f8ad95f7a2ddd4d228f1bb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac0bd8018d589a221f8ad95f7a2ddd4d228f1bb5"}], "stats": {"total": 103, "additions": 101, "deletions": 2}, "files": [{"sha": "0fc67aad13751a11bd2df14990fbb8b2a2a4fe5c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=713101a65e1ebfc829f030bd68f32a8f91703ac0", "patch": "@@ -1,3 +1,9 @@\n+2005-03-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* name-lookup.c (push_overloaded_decl): Don't error if the new\n+\tdecl matches the old one.\n+\t* decl.c (redeclaration_error_message): Likewise.\n+\n 2005-03-01  Per Bothner  <per@bothner.com>\n \n \t* decl.c (finish_function): Use SET_EXPR_LOCATION instead of"}, {"sha": "dfc1790a175ad6fe842c62b36b691a5901ffb65d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=713101a65e1ebfc829f030bd68f32a8f91703ac0", "patch": "@@ -1920,7 +1920,8 @@ redeclaration_error_message (tree newdecl, tree olddecl)\n       /* If both functions come from different namespaces, this is not\n \t a redeclaration - this is a conflict with a used function.  */\n       if (DECL_NAMESPACE_SCOPE_P (olddecl)\n-\t  && DECL_CONTEXT (olddecl) != DECL_CONTEXT (newdecl))\n+\t  && DECL_CONTEXT (olddecl) != DECL_CONTEXT (newdecl)\n+\t  && ! decls_match (olddecl, newdecl))\n \treturn \"%qD conflicts with used function\";\n \n       /* We'll complain about linkage mismatches in"}, {"sha": "accd35210ec556a995178167f8edbf4caf7b1e0f", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=713101a65e1ebfc829f030bd68f32a8f91703ac0", "patch": "@@ -1875,7 +1875,8 @@ push_overloaded_decl (tree decl, int flags)\n \t      if (TREE_CODE (tmp) == OVERLOAD && OVL_USED (tmp)\n \t\t  && !(flags & PUSH_USING)\n \t\t  && compparms (TYPE_ARG_TYPES (TREE_TYPE (fn)),\n-\t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (decl))))\n+\t\t\t\tTYPE_ARG_TYPES (TREE_TYPE (decl)))\n+\t\t  && ! decls_match (fn, decl))\n \t\terror (\"%q#D conflicts with previous using declaration %q#D\",\n                        decl, fn);\n "}, {"sha": "19f3404a4fbb612689ec445518457d6051534f63", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=713101a65e1ebfc829f030bd68f32a8f91703ac0", "patch": "@@ -1,3 +1,7 @@\n+2005-03-02  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* g++.dg/overload/using2.C: New.\n+\n 2005-03-02  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/19916"}, {"sha": "2ecb5fad6b0170429286f3c575ef6fc0ab874cc3", "filename": "gcc/testsuite/g++.dg/overload/using2.C", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/713101a65e1ebfc829f030bd68f32a8f91703ac0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Foverload%2Fusing2.C?ref=713101a65e1ebfc829f030bd68f32a8f91703ac0", "patch": "@@ -0,0 +1,87 @@\n+// { dg-do compile }\n+\n+// Copyright 2005 Free Software Foundation\n+// by Alexandre Oliva <aoliva@redhat.com>\n+// based on https://bugzilla.redhat.com/beta/show_bug.cgi?id=149098\n+\n+// Per the ISO C++ 90 Standard, using declarations before of after a\n+// declaration of the same function name and prototype should be\n+// errors (7.3.3/11).  However, DR 101's resolution recommends\n+// accepting such duplicates if they denote the same function, which\n+// means extern \"C\" declarations are supposed to match and be\n+// accepted.\n+\n+// This test makes sure we reject or accept regular and using\n+// declarations regardless of order as appropriate, and that having\n+// built-in declarations or overloads doesn't affet the outcome.\n+\n+namespace std {\n+  extern \"C\" void exit (int) throw (); // these are built-in (extern \"C\")\n+  extern \"C\" void *malloc (__SIZE_TYPE__) throw () __attribute__((malloc));\n+\n+  void abort (void) throw (); // these aren't\n+  void _exit (int) throw (); // { dg-error \"std::_exit\" }\n+\n+  extern \"C\" void c1 (void) throw ();\n+  void C1 (void) throw (); // { dg-error \"std::C1\" }\n+\n+  extern \"C\" void c2 (void) throw ();\n+  void C2 (void) throw ();\n+\n+  extern \"C\" void c3 (void) throw ();\n+  void C3 (void) throw (); // { dg-error \"std::C3\" }\n+}\n+\n+namespace other {\n+  extern \"C\" void c3 (void) throw ();\n+  void C3 (void) throw (); // { dg-error \"other::C3\" }\n+}\n+\n+using std::exit;\n+using std::_exit;\n+using std::c1;\n+using std::C1;\n+\n+  extern \"C\" void exit (int) throw ();\n+  extern \"C\" void *malloc (__SIZE_TYPE__) throw () __attribute__((malloc));\n+\n+  void abort (void) throw ();\n+  void _exit (int) throw (); // { dg-error \"conflicts|void _exit\" }\n+\n+  extern \"C\" void c1 (void) throw ();\n+  void C1 (void) throw (); // { dg-error \"conflicts|void C1\" }\n+\n+  extern \"C\" void c2 (void) throw ();\n+  void C2 (void) throw ();\n+\n+  int C3 (int) throw ();\n+\n+using std::malloc;\n+using std::abort; // { dg-error \"already declared\" }\n+using std::c2;\n+using std::C2; // { dg-error \"already declared\" }\n+\n+using std::c3; using other::c3;\n+using std::C3; using other::C3;\n+\n+  long C3 (long) throw ();\n+\n+int main () {\n+  malloc (0);\n+  exit (0);\n+\n+  _exit (0); // { dg-error \"ambiguous\" }\n+  abort ();\n+\n+  c1 ();\n+  C1 (); // { dg-error \"ambiguous\" }\n+\n+  c2 ();\n+  C2 (); // one might expect an ambiguous call error here as well, but\n+\t // we don't add the using decl if we find it to be in error.\n+\n+  c3 ();\n+  C3 (); // { dg-error \"ambiguous\" }\n+  C3 (0);\n+  C3 (0l);\n+}"}]}