{"sha": "41f8d1fc011e0da012bd00624fd2668da83d9f31", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFmOGQxZmMwMTFlMGRhMDEyYmQwMDYyNGZkMjY2OGRhODNkOWYzMQ==", "commit": {"author": {"name": "Andi Kleen", "email": "ak@linux.intel.com", "date": "2018-11-09T05:42:43Z"}, "committer": {"name": "Andi Kleen", "email": "ak@gcc.gnu.org", "date": "2018-11-09T05:42:43Z"}, "message": "Add PTWRITE builtins for x86\n\nAdd builtins/intrinsics for PTWRITE. PTWRITE is a new instruction on Intel Gemini Lake/\nGoldmont Plus that allows to write values into the Processor Trace log. This allows\nvery light weight instrumentation of programs.\n\nThe intrinsics are compatible to icc. Automatically enabled for Goldmont Plus.\n\ngcc/:\n\n2018-11-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PTWRITE_SET): New.\n\t(OPTION_MASK_ISA_PTWRITE_UNSET): New.\n\t(ix86_handle_option): Handle OPT_mptwrite.\n\t* config/i386/cpuid.h (bit_PTWRITE): Add.\n\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect ptwrite.\n\t* config/i386/i386-builtin.def (BDESC): Add ptwrite32/64.\n\t* config/i386/i386-c.c (ix86_target_macros_internal): Define __PTWRITE__.\n\t* config/i386/i386.c (ix86_target_string): Handle ptwrite.\n\t(ix86_option_override_internal): Handle PTA_PTWRITE.\n\t(ix86_valid_target_attribute_inner_p): Define ptwrite.\n\t(def_builtin2): Force UINT64 to be 64bit only.\n\t* config/i386/i386.h (TARGET_PTWRITE): Add.\n\t(TARGET_PTWRITE_P): Add.\n\t(PTA_PTWRITE): Add.\n\t* config/i386/i386.md: Define ptwrite.\n\t* config/i386/i386.opt: Add -mptwrite.\n\t* config/i386/immintrin.h (_ptwrite64): Add.\n\t(_ptwrite32): Add\n\t* doc/extend.texi: Document __builtin_ia32_ptwrite*.\n\t* doc/invoke.texi: Document -mptwrite.\n\ngcc/testsuite/:\n\n2018-11-08  Andi Kleen  <ak@linux.intel.com>\n\n\t* gcc.target/i386/ptwrite1.c: New test.\n\t* gcc.target/i386/ptwrite2.c: New test.\n\nFrom-SVN: r265947", "tree": {"sha": "3fd8fdccf8a32f02c33d8dd6b3207f79681a4769", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd8fdccf8a32f02c33d8dd6b3207f79681a4769"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41f8d1fc011e0da012bd00624fd2668da83d9f31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f8d1fc011e0da012bd00624fd2668da83d9f31", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41f8d1fc011e0da012bd00624fd2668da83d9f31", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41f8d1fc011e0da012bd00624fd2668da83d9f31/comments", "author": null, "committer": null, "parents": [{"sha": "3f3284629ba481294562f8370bf45e205e1d1eec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3284629ba481294562f8370bf45e205e1d1eec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3284629ba481294562f8370bf45e205e1d1eec"}], "stats": {"total": 179, "additions": 175, "deletions": 4}, "files": [{"sha": "8961e8034e351cd75712bbdccfd08a673f792ce8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -1,3 +1,26 @@\n+2018-11-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* common/config/i386/i386-common.c (OPTION_MASK_ISA_PTWRITE_SET): New.\n+\t(OPTION_MASK_ISA_PTWRITE_UNSET): New.\n+\t(ix86_handle_option): Handle OPT_mptwrite.\n+\t* config/i386/cpuid.h (bit_PTWRITE): Add.\n+\t* config/i386/driver-i386.c (host_detect_local_cpu): Detect ptwrite.\n+\t* config/i386/i386-builtin.def (BDESC): Add ptwrite32/64.\n+\t* config/i386/i386-c.c (ix86_target_macros_internal): Define __PTWRITE__.\n+\t* config/i386/i386.c (ix86_target_string): Handle ptwrite.\n+\t(ix86_option_override_internal): Handle PTA_PTWRITE.\n+\t(ix86_valid_target_attribute_inner_p): Define ptwrite.\n+\t(def_builtin2): Force UINT64 to be 64bit only.\n+\t* config/i386/i386.h (TARGET_PTWRITE): Add.\n+\t(TARGET_PTWRITE_P): Add.\n+\t(PTA_PTWRITE): Add.\n+\t* config/i386/i386.md: Define ptwrite.\n+\t* config/i386/i386.opt: Add -mptwrite.\n+\t* config/i386/immintrin.h (_ptwrite64): Add.\n+\t(_ptwrite32): Add\n+\t* doc/extend.texi: Document __builtin_ia32_ptwrite*.\n+\t* doc/invoke.texi: Document -mptwrite.\n+\n 2018-11-08  Peter Bergner  <bergner@linux.ibm.com>\n \n \tPR rtl-optimization/87600"}, {"sha": "1017147599c5eceefc4ce356cef08ee13cd40dca", "filename": "gcc/common/config/i386/i386-common.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Fi386%2Fi386-common.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -140,6 +140,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define OPTION_MASK_ISA_FSGSBASE_SET OPTION_MASK_ISA_FSGSBASE\n #define OPTION_MASK_ISA_RDRND_SET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_PTWRITE_SET OPTION_MASK_ISA_PTWRITE\n #define OPTION_MASK_ISA_F16C_SET \\\n   (OPTION_MASK_ISA_F16C | OPTION_MASK_ISA_AVX_SET)\n #define OPTION_MASK_ISA_MWAITX_SET OPTION_MASK_ISA_MWAITX\n@@ -267,6 +268,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #define OPTION_MASK_ISA_FSGSBASE_UNSET OPTION_MASK_ISA_FSGSBASE\n #define OPTION_MASK_ISA_RDRND_UNSET OPTION_MASK_ISA_RDRND\n+#define OPTION_MASK_ISA_PTWRITE_UNSET OPTION_MASK_ISA_PTWRITE\n #define OPTION_MASK_ISA_F16C_UNSET OPTION_MASK_ISA_F16C\n \n #define OPTION_MASK_ISA_GENERAL_REGS_ONLY_UNSET \\\n@@ -1125,6 +1127,19 @@ ix86_handle_option (struct gcc_options *opts,\n \t}\n       return true;\n \n+    case OPT_mptwrite:\n+      if (value)\n+\t{\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_PTWRITE_SET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_PTWRITE_SET;\n+\t}\n+      else\n+\t{\n+\t  opts->x_ix86_isa_flags2 &= ~OPTION_MASK_ISA_PTWRITE_UNSET;\n+\t  opts->x_ix86_isa_flags2_explicit |= OPTION_MASK_ISA_PTWRITE_UNSET;\n+\t}\n+      return true;\n+\n     case OPT_mf16c:\n       if (value)\n \t{"}, {"sha": "2e6d4a55602ba7897a077cca74ec6f678413bdd3", "filename": "gcc/config/i386/cpuid.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fcpuid.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fcpuid.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcpuid.h?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -126,6 +126,10 @@\n #define bit_XSAVEC\t(1 << 1)\n #define bit_XSAVES\t(1 << 3)\n \n+/* PT sub leaf (%eax == 14, %ecx == 0) */\n+/* %ebx */\n+#define bit_PTWRITE\t(1 << 4)\n+\n /* Signatures for different CPU implementations as returned in uses\n    of cpuid with level 0.  */\n #define signature_AMD_ebx\t0x68747541"}, {"sha": "e910038d11d5c8cd052efe74cf57a5d6b1d72135", "filename": "gcc/config/i386/driver-i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fdriver-i386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdriver-i386.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -427,6 +427,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n   unsigned int has_waitpkg = 0;\n   unsigned int has_cldemote = 0;\n \n+  unsigned int has_ptwrite = 0;\n+\n   bool arch;\n \n   unsigned int l2sizekb = 0;\n@@ -542,6 +544,13 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       has_xsaves = eax & bit_XSAVES;\n     }\n \n+  if (max_level >= 0x14)\n+    {\n+      __cpuid_count (0x14, 0, eax, ebx, ecx, edx);\n+\n+      has_ptwrite = ebx & bit_PTWRITE;\n+    }\n+\n   /* Check cpuid level of extended features.  */\n   __cpuid (0x80000000, ext_level, ebx, ecx, edx);\n \n@@ -1129,6 +1138,8 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n       const char *movdir64b = has_movdir64b ? \" -mmovdir64b\" : \" -mno-movdir64b\";\n       const char *waitpkg = has_waitpkg ? \" -mwaitpkg\" : \" -mno-waitpkg\";\n       const char *cldemote = has_cldemote ? \" -mcldemote\" : \" -mno-cldemote\";\n+      const char *ptwrite = has_ptwrite ? \" -mptwrite\" : \" -mno-ptwrite\";\n+\n       options = concat (options, mmx, mmx3dnow, sse, sse2, sse3, ssse3,\n \t\t\tsse4a, cx16, sahf, movbe, aes, sha, pclmul,\n \t\t\tpopcnt, abm, lwp, fma, fma4, xop, bmi, sgx, bmi2,\n@@ -1142,6 +1153,7 @@ const char *host_detect_local_cpu (int argc, const char **argv)\n \t\t\tclwb, mwaitx, clzero, pku, rdpid, gfni, shstk,\n \t\t\tavx512vbmi2, avx512vnni, vaes, vpclmulqdq,\n \t\t\tavx512bitalg, movdiri, movdir64b, waitpkg, cldemote,\n+\t\t\tptwrite,\n \t\t\tNULL);\n     }\n "}, {"sha": "e80abe4ace95062f058c819133b2903acf59e1f5", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -2887,6 +2887,10 @@ BDESC_FIRST (special_args2, SPECIAL_ARGS2,\n \tOPTION_MASK_ISA_WBNOINVD, CODE_FOR_wbnoinvd, \"__builtin_ia32_wbnoinvd\", IX86_BUILTIN_WBNOINVD, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_MOVDIR64B, CODE_FOR_nothing, \"__builtin_ia32_movdir64b\", IX86_BUILTIN_MOVDIR64B, UNKNOWN, (int) VOID_FTYPE_PVOID_PCVOID)\n \n+/* PTWRITE */\n+BDESC (OPTION_MASK_ISA_PTWRITE, CODE_FOR_ptwritesi, \"__builtin_ia32_ptwrite32\", IX86_BUILTIN_PTWRITE32, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n+BDESC (OPTION_MASK_ISA_PTWRITE, CODE_FOR_ptwritedi, \"__builtin_ia32_ptwrite64\", IX86_BUILTIN_PTWRITE64, UNKNOWN, (int) VOID_FTYPE_UINT64)\n+\n BDESC_END (SPECIAL_ARGS2, MULTI_ARG)\n \n /* FMA4 and XOP.  */"}, {"sha": "16c6a2d5503ee59afd39f3971301fbc74f8f8330", "filename": "gcc/config/i386/i386-c.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-c.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -539,6 +539,8 @@ ix86_target_macros_internal (HOST_WIDE_INT isa_flag,\n     def_or_undef (parse_in, \"__WAITPKG__\");\n   if (isa_flag2 & OPTION_MASK_ISA_CLDEMOTE)\n     def_or_undef (parse_in, \"__CLDEMOTE__\");\n+  if (isa_flag2 & OPTION_MASK_ISA_PTWRITE)\n+    def_or_undef (parse_in, \"__PTWRITE__\");\n   if (TARGET_IAMCU)\n     {\n       def_or_undef (parse_in, \"__iamcu\");"}, {"sha": "77dec0f21b35365ce3f11c99c5dacf3dbd746d1a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -2796,7 +2796,8 @@ ix86_target_string (HOST_WIDE_INT isa, HOST_WIDE_INT isa2,\n     { \"-mmwaitx\",\tOPTION_MASK_ISA_MWAITX },\n     { \"-mmovdir64b\",\tOPTION_MASK_ISA_MOVDIR64B },\n     { \"-mwaitpkg\",\tOPTION_MASK_ISA_WAITPKG },\n-    { \"-mcldemote\",\tOPTION_MASK_ISA_CLDEMOTE }\n+    { \"-mcldemote\",\tOPTION_MASK_ISA_CLDEMOTE },\n+    { \"-mptwrite\",\tOPTION_MASK_ISA_PTWRITE }\n   };\n   static struct ix86_target_opts isa_opts[] =\n   {\n@@ -3878,6 +3879,9 @@ ix86_option_override_internal (bool main_args_p,\n \tif (((processor_alias_table[i].flags & PTA_WBNOINVD) != 0)\n \t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_WBNOINVD))\n \t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_WBNOINVD;\n+\tif (((processor_alias_table[i].flags & PTA_PTWRITE) != 0)\n+\t    && !(opts->x_ix86_isa_flags2_explicit & OPTION_MASK_ISA_PTWRITE))\n+\t  opts->x_ix86_isa_flags2 |= OPTION_MASK_ISA_PTWRITE;\n \n \tif ((processor_alias_table[i].flags\n \t   & (PTA_PREFETCH_SSE | PTA_SSE)) != 0)\n@@ -5080,6 +5084,7 @@ ix86_valid_target_attribute_inner_p (tree args, char *p_strings[],\n     IX86_ATTR_ISA (\"movdir64b\", OPT_mmovdir64b),\n     IX86_ATTR_ISA (\"waitpkg\", OPT_mwaitpkg),\n     IX86_ATTR_ISA (\"cldemote\", OPT_mcldemote),\n+    IX86_ATTR_ISA (\"ptwrite\",   OPT_mptwrite),\n \n     /* enum options */\n     IX86_ATTR_ENUM (\"fpmath=\",\tOPT_mfpmath_),\n@@ -30183,6 +30188,8 @@ def_builtin2 (HOST_WIDE_INT mask, const char *name,\n   tree decl = NULL_TREE;\n \n   ix86_builtins_isa[(int) code].isa2 = mask;\n+  if (tcode == VOID_FTYPE_UINT64)\n+    ix86_builtins_isa[(int) code].isa = OPTION_MASK_ISA_64BIT;\n \n   if (mask == 0\n       || (mask & ix86_isa_flags2) != 0"}, {"sha": "3a26644b49001ea91bc821d84b06b08c0dadf9b5", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -191,6 +191,8 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define TARGET_WAITPKG_P(x)\tTARGET_ISA_WAITPKG_P(x)\n #define TARGET_CLDEMOTE\tTARGET_ISA_CLDEMOTE\n #define TARGET_CLDEMOTE_P(x) TARGET_ISA_CLDEMOTE_P(x)\n+#define TARGET_PTWRITE\tTARGET_ISA_PTWRITE\n+#define TARGET_PTWRITE_P(x)\tTARGET_ISA_PTWRITE_P(x)\n \n #define TARGET_LP64\tTARGET_ABI_64\n #define TARGET_LP64_P(x)\tTARGET_ABI_64_P(x)\n@@ -2356,6 +2358,7 @@ const wide_int_bitmask PTA_RDPID (0, HOST_WIDE_INT_1U << 6);\n const wide_int_bitmask PTA_PCONFIG (0, HOST_WIDE_INT_1U << 7);\n const wide_int_bitmask PTA_WBNOINVD (0, HOST_WIDE_INT_1U << 8);\n const wide_int_bitmask PTA_WAITPKG (0, HOST_WIDE_INT_1U << 9);\n+const wide_int_bitmask PTA_PTWRITE (0, HOST_WIDE_INT_1U << 10);\n \n const wide_int_bitmask PTA_CORE2 = PTA_64BIT | PTA_MMX | PTA_SSE | PTA_SSE2\n   | PTA_SSE3 | PTA_SSSE3 | PTA_CX16 | PTA_FXSR;\n@@ -2391,7 +2394,7 @@ const wide_int_bitmask PTA_GOLDMONT = PTA_SILVERMONT | PTA_SHA | PTA_XSAVE\n   | PTA_RDSEED | PTA_XSAVEC | PTA_XSAVES | PTA_CLFLUSHOPT | PTA_XSAVEOPT\n   | PTA_FSGSBASE;\n const wide_int_bitmask PTA_GOLDMONT_PLUS = PTA_GOLDMONT | PTA_RDPID\n-  | PTA_SGX;\n+  | PTA_SGX | PTA_PTWRITE;\n const wide_int_bitmask PTA_TREMONT = PTA_GOLDMONT_PLUS | PTA_CLWB\n   | PTA_GFNI;\n const wide_int_bitmask PTA_KNM = PTA_KNL | PTA_AVX5124VNNIW"}, {"sha": "44db8ac954cf5e2445c1c15b5debd853e8350634", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -292,6 +292,8 @@\n \n   ;; For Speculation Barrier support\n   UNSPECV_SPECULATION_BARRIER\n+\n+  UNSPECV_PTWRITE\n ])\n \n ;; Constants to represent rounding modes in the ROUND instruction\n@@ -19498,6 +19500,14 @@\n   [(set_attr \"type\" \"other\")\n    (set_attr \"prefix_extra\" \"2\")])\n \n+(define_insn \"ptwrite<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")]\n+\t\t    UNSPECV_PTWRITE)]\n+  \"TARGET_PTWRITE\"\n+  \"ptwrite\\t%0\"\n+  [(set_attr \"type\" \"other\")\n+   (set_attr \"prefix_extra\" \"2\")])\n+\n (define_insn \"rdrand<mode>_1\"\n   [(set (match_operand:SWI248 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:SWI248 [(const_int 0)] UNSPECV_RDRAND))"}, {"sha": "1705815a2ec586a86656140ac6662f81f96e4247", "filename": "gcc/config/i386/i386.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fi386.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.opt?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -785,6 +785,10 @@ mwbnoinvd\n Target Report Mask(ISA_WBNOINVD) Var(ix86_isa_flags2) Save\n Support WBNOINVD built-in functions and code generation.\n \n+mptwrite\n+Target Report Mask(ISA_PTWRITE) Var(ix86_isa_flags2) Save\n+Support PTWRITE built-in functions and code generation.\n+\n msgx\n Target Report Mask(ISA_SGX) Var(ix86_isa_flags2) Save\n Support SGX built-in functions and code generation."}, {"sha": "b52ab91b4d50ae0962af3d8a8983aae398555f34", "filename": "gcc/config/i386/immintrin.h", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fconfig%2Fi386%2Fimmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fimmintrin.h?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -251,4 +251,30 @@ _rdrand64_step (unsigned long long *__P)\n \n #endif /* __x86_64__  */\n \n+#ifndef __PTWRITE__\n+#pragma GCC push_options\n+#pragma GCC target(\"ptwrite\")\n+#define __DISABLE_PTWRITE__\n+#endif\n+\n+#ifdef __x86_64__\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_ptwrite64 (unsigned long long __B)\n+{\n+  __builtin_ia32_ptwrite64 (__B);\n+}\n+#endif /* __x86_64__ */\n+\n+extern __inline void\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_ptwrite32 (unsigned __B)\n+{\n+  __builtin_ia32_ptwrite32 (__B);\n+}\n+#ifdef __DISABLE_PTWRITE__\n+#undef __DISABLE_PTWRITE__\n+#pragma GCC pop_options\n+#endif /* __DISABLE_PTWRITE__ */\n+\n #endif /* _IMMINTRIN_H_INCLUDED */"}, {"sha": "985d0418aa474a204e1b53919fc37abaa254cd5e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -21335,6 +21335,15 @@ unsigned int __builtin_ia32_rdrand32_step (unsigned int *)\n unsigned int __builtin_ia32_rdrand64_step (unsigned long long *)\n @end smallexample\n \n+The following built-in function is available when @option{-mptwrite} is\n+used.  All of them generate the machine instruction that is part of the\n+name.\n+\n+@smallexample\n+void __builtin_ia32_ptwrite32 (unsigned)\n+void __builtin_ia32_ptwrite64 (unsigned long long)\n+@end smallexample\n+\n The following built-in functions are available when @option{-msse4a} is used.\n All of them generate the machine instruction that is part of the name.\n "}, {"sha": "b8d55cfa8884456498837a689edd4435fde866fa", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -1286,7 +1286,7 @@ See RS/6000 and PowerPC Options.\n -mmmx  -msse  -msse2  -msse3  -mssse3  -msse4.1  -msse4.2  -msse4  -mavx @gol\n -mavx2  -mavx512f  -mavx512pf  -mavx512er  -mavx512cd  -mavx512vl @gol\n -mavx512bw  -mavx512dq  -mavx512ifma  -mavx512vbmi  -msha  -maes @gol\n--mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma -mpconfig -mwbnoinvd @gol\n+-mpclmul  -mfsgsbase  -mrdrnd  -mf16c  -mfma -mpconfig -mwbnoinvd -mptwrite @gol\n -mprefetchwt1  -mclflushopt  -mxsavec  -mxsaves @gol\n -msse4a  -m3dnow  -m3dnowa  -mpopcnt  -mabm  -mbmi  -mtbm  -mfma4  -mxop @gol\n -mlzcnt  -mbmi2  -mfxsr  -mxsave  -mxsaveopt  -mrtm  -mlwp @gol\n@@ -27880,6 +27880,9 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @itemx -mfsgsbase\n @opindex mfsgsbase\n @need 200\n+@itemx -mptwrite\n+@opindex mptwrite\n+@need 200\n @itemx -mrdrnd\n @opindex mrdrnd\n @need 200\n@@ -27988,7 +27991,7 @@ preferred alignment to @option{-mpreferred-stack-boundary=2}.\n @opindex mcldemote\n These switches enable the use of instructions in the MMX, SSE,\n SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD,\n-SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n+SHA, AES, PCLMUL, FSGSBASE, PTWRITE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM,\n AVX512VL, AVX512BW, AVX512DQ, AVX512IFMA, AVX512VBMI, BMI, BMI2, VAES, WAITPKG,\n FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, MWAITX, PKU, IBT, SHSTK, AVX512VBMI2,\n GFNI, VPCLMULQDQ, AVX512BITALG, MOVDIRI, MOVDIR64B,"}, {"sha": "e5641fe5a89aa834695b4c294f6678b40186849b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -1,3 +1,8 @@\n+2018-11-08  Andi Kleen  <ak@linux.intel.com>\n+\n+\t* gcc.target/i386/ptwrite1.c: New test.\n+\t* gcc.target/i386/ptwrite2.c: New test.\n+\n 2018-11-08  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/78351"}, {"sha": "e09028ed428c83cdbd30f6c80cfac346d0441332", "filename": "gcc/testsuite/gcc.target/i386/ptwrite1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite1.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mptwrite\" } */\n+/* { dg-final { scan-assembler \"ptwrite\" } } */\n+\n+void ptwrite1(int a)\n+{\n+  __builtin_ia32_ptwrite32 (a);\n+}\n+\n+#ifdef __x86_64__\n+void ptwrite2(unsigned long b)\n+{\n+  __builtin_ia32_ptwrite64 (b);\n+}\n+\n+void ptwrite3(unsigned char b)\n+{\n+  __builtin_ia32_ptwrite64 (b);\n+}\n+\n+void ptwrite4(unsigned short b)\n+{\n+  __builtin_ia32_ptwrite64 (b);\n+}\n+#endif\n+\n+void ptwrite5(unsigned short b)\n+{\n+  __builtin_ia32_ptwrite32 (b);\n+}"}, {"sha": "bd144fc0779305e9f9720b930569365fdecdf90c", "filename": "gcc/testsuite/gcc.target/i386/ptwrite2.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41f8d1fc011e0da012bd00624fd2668da83d9f31/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fptwrite2.c?ref=41f8d1fc011e0da012bd00624fd2668da83d9f31", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mptwrite \" } */\n+/* { dg-final { scan-assembler \"ptwrite\\[^\\n\\r\\]+r\" } } */\n+/* { dg-final { scan-assembler \"ptwrite\\[^\\n\\r\\]+e\" } } */\n+\n+#include <x86intrin.h>\n+\n+void ptwrite1(void)\n+{\n+  _ptwrite32 (1);\n+#ifdef __x86_64__\n+  _ptwrite64 (2);\n+#endif\n+}"}]}