{"sha": "c9103dde9636989de0f34dd1656bd2cd477f6fdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkxMDNkZGU5NjM2OTg5ZGUwZjM0ZGQxNjU2YmQyY2Q0NzdmNmZkZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-31T22:19:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-03-31T22:19:54Z"}, "message": "libgo: Remove unnecessary EINTR checks.\n\nWe always use SA_RESTART with signals, so\nread/write/etc. should never return EINTR.\n\nFrom-SVN: r171802", "tree": {"sha": "9a5b420f57318727fbfe5ab65401530e7c6dda97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a5b420f57318727fbfe5ab65401530e7c6dda97"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9103dde9636989de0f34dd1656bd2cd477f6fdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9103dde9636989de0f34dd1656bd2cd477f6fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9103dde9636989de0f34dd1656bd2cd477f6fdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9103dde9636989de0f34dd1656bd2cd477f6fdf/comments", "author": null, "committer": null, "parents": [{"sha": "c689d49e080c66730d243c1826860c164ef4dfd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c689d49e080c66730d243c1826860c164ef4dfd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c689d49e080c66730d243c1826860c164ef4dfd0"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "cd1a21dc361b2bf0b3e56551f16c64c77f875eec", "filename": "libgo/go/net/fd.go", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9103dde9636989de0f34dd1656bd2cd477f6fdf/libgo%2Fgo%2Fnet%2Ffd.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9103dde9636989de0f34dd1656bd2cd477f6fdf/libgo%2Fgo%2Fnet%2Ffd.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fnet%2Ffd.go?ref=c9103dde9636989de0f34dd1656bd2cd477f6fdf", "patch": "@@ -376,7 +376,7 @@ func (fd *netFD) Read(p []byte) (n int, err os.Error) {\n \tfor {\n \t\tvar errno int\n \t\tn, errno = syscall.Read(fd.sysfile.Fd(), p)\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.rdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.rdeadline >= 0 {\n \t\t\tpollserver.WaitRead(fd)\n \t\t\tcontinue\n \t\t}\n@@ -411,7 +411,7 @@ func (fd *netFD) ReadFrom(p []byte) (n int, sa syscall.Sockaddr, err os.Error) {\n \tfor {\n \t\tvar errno int\n \t\tn, sa, errno = syscall.Recvfrom(fd.sysfd, p, 0)\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.rdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.rdeadline >= 0 {\n \t\t\tpollserver.WaitRead(fd)\n \t\t\tcontinue\n \t\t}\n@@ -444,7 +444,7 @@ func (fd *netFD) ReadMsg(p []byte, oob []byte) (n, oobn, flags int, sa syscall.S\n \tfor {\n \t\tvar errno int\n \t\tn, oobn, flags, sa, errno = syscall.Recvmsg(fd.sysfd, p, oob, 0)\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.rdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.rdeadline >= 0 {\n \t\t\tpollserver.WaitRead(fd)\n \t\t\tcontinue\n \t\t}\n@@ -490,7 +490,7 @@ func (fd *netFD) Write(p []byte) (n int, err os.Error) {\n \t\tif nn == len(p) {\n \t\t\tbreak\n \t\t}\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.wdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.wdeadline >= 0 {\n \t\t\tpollserver.WaitWrite(fd)\n \t\t\tcontinue\n \t\t}\n@@ -526,7 +526,7 @@ func (fd *netFD) WriteTo(p []byte, sa syscall.Sockaddr) (n int, err os.Error) {\n \tvar oserr os.Error\n \tfor {\n \t\terrno := syscall.Sendto(fd.sysfd, p, 0, sa)\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.wdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.wdeadline >= 0 {\n \t\t\tpollserver.WaitWrite(fd)\n \t\t\tcontinue\n \t\t}\n@@ -560,7 +560,7 @@ func (fd *netFD) WriteMsg(p []byte, oob []byte, sa syscall.Sockaddr) (n int, oob\n \tfor {\n \t\tvar errno int\n \t\terrno = syscall.Sendmsg(fd.sysfd, p, oob, sa, 0)\n-\t\tif (errno == syscall.EAGAIN || errno == syscall.EINTR) && fd.wdeadline >= 0 {\n+\t\tif errno == syscall.EAGAIN && fd.wdeadline >= 0 {\n \t\t\tpollserver.WaitWrite(fd)\n \t\t\tcontinue\n \t\t}\n@@ -598,7 +598,7 @@ func (fd *netFD) accept(toAddr func(syscall.Sockaddr) Addr) (nfd *netFD, err os.\n \t\t\treturn nil, os.EINVAL\n \t\t}\n \t\ts, sa, e = syscall.Accept(fd.sysfd)\n-\t\tif e != syscall.EAGAIN && e != syscall.EINTR {\n+\t\tif e != syscall.EAGAIN {\n \t\t\tbreak\n \t\t}\n \t\tsyscall.ForkLock.RUnlock()"}]}