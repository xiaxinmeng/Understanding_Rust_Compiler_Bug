{"sha": "511c229c6caf013aaafca49535d4c82522d289e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExYzIyOWM2Y2FmMDEzYWFhZmNhNDk1MzVkNGM4MjUyMmQyODllMw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-06T14:47:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-06T14:47:42Z"}, "message": "re PR tree-optimization/54498 (incorrect code generation from g++ -O)\n\n2012-09-06  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/54498\n\t* tree-ssa-alias.h (get_continuation_for_phi): Add flag to\n\tabort when reaching an already visited region.\n\t* tree-ssa-alias.c (maybe_skip_until): Likewise.  And do it.\n\t(get_continuation_for_phi_1): Likewise.\n\t(walk_non_aliased_vuses): When we translated the reference,\n\tabort when we re-visit a region.\n\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n\nFrom-SVN: r191030", "tree": {"sha": "115758a04c3bdab6ee264374fe7b3e672dd0650a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/115758a04c3bdab6ee264374fe7b3e672dd0650a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/511c229c6caf013aaafca49535d4c82522d289e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511c229c6caf013aaafca49535d4c82522d289e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/511c229c6caf013aaafca49535d4c82522d289e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/511c229c6caf013aaafca49535d4c82522d289e3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81a14f1e73f545848cdd03fc568390a419686044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81a14f1e73f545848cdd03fc568390a419686044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81a14f1e73f545848cdd03fc568390a419686044"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "74c12b44709c78fa2c36741aab736d9f6bbd2e1a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=511c229c6caf013aaafca49535d4c82522d289e3", "patch": "@@ -1,3 +1,14 @@\n+2012-09-06  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/54498\n+\t* tree-ssa-alias.h (get_continuation_for_phi): Add flag to\n+\tabort when reaching an already visited region.\n+\t* tree-ssa-alias.c (maybe_skip_until): Likewise.  And do it.\n+\t(get_continuation_for_phi_1): Likewise.\n+\t(walk_non_aliased_vuses): When we translated the reference,\n+\tabort when we re-visit a region.\n+\t* tree-ssa-pre.c (translate_vuse_through_block): Adjust.\n+\n 2012-09-06  David Edelsohn  <dje.gcc@gmail.com>\n \n \t* config/rs6000/rs6000.c (rs6000_xcoff_asm_named_section): Add TLS"}, {"sha": "8d515703a775e4335d406fac8451388a1b4d5f29", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=511c229c6caf013aaafca49535d4c82522d289e3", "patch": "@@ -1929,7 +1929,8 @@ stmt_kills_ref_p (gimple stmt, tree ref)\n \n static bool\n maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n-\t\t  tree vuse, unsigned int *cnt, bitmap *visited)\n+\t\t  tree vuse, unsigned int *cnt, bitmap *visited,\n+\t\t  bool abort_on_visited)\n {\n   basic_block bb = gimple_bb (phi);\n \n@@ -1947,8 +1948,9 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \t{\n \t  /* An already visited PHI node ends the walk successfully.  */\n \t  if (bitmap_bit_p (*visited, SSA_NAME_VERSION (PHI_RESULT (def_stmt))))\n-\t    return true;\n-\t  vuse = get_continuation_for_phi (def_stmt, ref, cnt, visited);\n+\t    return !abort_on_visited;\n+\t  vuse = get_continuation_for_phi (def_stmt, ref, cnt,\n+\t\t\t\t\t   visited, abort_on_visited);\n \t  if (!vuse)\n \t    return false;\n \t  continue;\n@@ -1967,7 +1969,7 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n       if (gimple_bb (def_stmt) != bb)\n \t{\n \t  if (!bitmap_set_bit (*visited, SSA_NAME_VERSION (vuse)))\n-\t    return true;\n+\t    return !abort_on_visited;\n \t  bb = gimple_bb (def_stmt);\n \t}\n       vuse = gimple_vuse (def_stmt);\n@@ -1981,7 +1983,8 @@ maybe_skip_until (gimple phi, tree target, ao_ref *ref,\n \n static tree\n get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n-\t\t\t    ao_ref *ref, unsigned int *cnt, bitmap *visited)\n+\t\t\t    ao_ref *ref, unsigned int *cnt,\n+\t\t\t    bitmap *visited, bool abort_on_visited)\n {\n   gimple def0 = SSA_NAME_DEF_STMT (arg0);\n   gimple def1 = SSA_NAME_DEF_STMT (arg1);\n@@ -1994,14 +1997,16 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \t       && dominated_by_p (CDI_DOMINATORS,\n \t\t\t\t  gimple_bb (def1), gimple_bb (def0))))\n     {\n-      if (maybe_skip_until (phi, arg0, ref, arg1, cnt, visited))\n+      if (maybe_skip_until (phi, arg0, ref, arg1, cnt,\n+\t\t\t    visited, abort_on_visited))\n \treturn arg0;\n     }\n   else if (gimple_nop_p (def1)\n \t   || dominated_by_p (CDI_DOMINATORS,\n \t\t\t      gimple_bb (def0), gimple_bb (def1)))\n     {\n-      if (maybe_skip_until (phi, arg1, ref, arg0, cnt, visited))\n+      if (maybe_skip_until (phi, arg1, ref, arg0, cnt,\n+\t\t\t    visited, abort_on_visited))\n \treturn arg1;\n     }\n   /* Special case of a diamond:\n@@ -2038,7 +2043,8 @@ get_continuation_for_phi_1 (gimple phi, tree arg0, tree arg1,\n \n tree\n get_continuation_for_phi (gimple phi, ao_ref *ref,\n-\t\t\t  unsigned int *cnt, bitmap *visited)\n+\t\t\t  unsigned int *cnt, bitmap *visited,\n+\t\t\t  bool abort_on_visited)\n {\n   unsigned nargs = gimple_phi_num_args (phi);\n \n@@ -2076,7 +2082,7 @@ get_continuation_for_phi (gimple phi, ao_ref *ref,\n \t{\n \t  arg1 = PHI_ARG_DEF (phi, i);\n \t  arg0 = get_continuation_for_phi_1 (phi, arg0, arg1, ref,\n-\t\t\t\t\t     cnt, visited);\n+\t\t\t\t\t     cnt, visited, abort_on_visited);\n \t  if (!arg0)\n \t    return NULL_TREE;\n \t}\n@@ -2113,6 +2119,7 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n   bitmap visited = NULL;\n   void *res;\n   unsigned int cnt = 0;\n+  bool translated = false;\n \n   timevar_push (TV_ALIAS_STMT_WALK);\n \n@@ -2136,7 +2143,8 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n       if (gimple_nop_p (def_stmt))\n \tbreak;\n       else if (gimple_code (def_stmt) == GIMPLE_PHI)\n-\tvuse = get_continuation_for_phi (def_stmt, ref, &cnt, &visited);\n+\tvuse = get_continuation_for_phi (def_stmt, ref, &cnt,\n+\t\t\t\t\t &visited, translated);\n       else\n \t{\n \t  cnt++;\n@@ -2155,6 +2163,7 @@ walk_non_aliased_vuses (ao_ref *ref, tree vuse,\n \t      else if (res != NULL)\n \t\tbreak;\n \t      /* Translation succeeded, continue walking.  */\n+\t      translated = true;\n \t    }\n \t  vuse = gimple_vuse (def_stmt);\n \t}"}, {"sha": "6f38f20bce580abeb79f481dae4cb4abc1752ed5", "filename": "gcc/tree-ssa-alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-alias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-alias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.h?ref=511c229c6caf013aaafca49535d4c82522d289e3", "patch": "@@ -108,7 +108,7 @@ extern bool stmt_may_clobber_ref_p_1 (gimple, ao_ref *);\n extern bool call_may_clobber_ref_p (gimple, tree);\n extern bool stmt_kills_ref_p (gimple, tree);\n extern tree get_continuation_for_phi (gimple, ao_ref *,\n-\t\t\t\t      unsigned int *, bitmap *);\n+\t\t\t\t      unsigned int *, bitmap *, bool);\n extern void *walk_non_aliased_vuses (ao_ref *, tree,\n \t\t\t\t     void *(*)(ao_ref *, tree,\n \t\t\t\t\t       unsigned int, void *),"}, {"sha": "e64d4f75a9b48ae2e1c28e04da524254ad572681", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/511c229c6caf013aaafca49535d4c82522d289e3/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=511c229c6caf013aaafca49535d4c82522d289e3", "patch": "@@ -1291,7 +1291,7 @@ translate_vuse_through_block (VEC (vn_reference_op_s, heap) *operands,\n \t  unsigned int cnt;\n \t  /* Try to find a vuse that dominates this phi node by skipping\n \t     non-clobbering statements.  */\n-\t  vuse = get_continuation_for_phi (phi, &ref, &cnt, &visited);\n+\t  vuse = get_continuation_for_phi (phi, &ref, &cnt, &visited, false);\n \t  if (visited)\n \t    BITMAP_FREE (visited);\n \t}"}]}