{"sha": "453ee2313a9f013158f1c5ab8bd97cf495c5c270", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzZWUyMzEzYTlmMDEzMTU4ZjFjNWFiOGJkOTdjZjQ5NWM1YzI3MA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-02-22T02:09:06Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-02-22T02:09:06Z"}, "message": "i386.c (def_builtin): Special case 64bit builtins.\n\n\t* i386.c (def_builtin):  Special case 64bit builtins.\n\t(MASK_SSE164, MASK_SSE264): New constants.\n\t(builtin_description): Add 64bit builtins.\n\t(ix86_init_mmx_sse_builtins): Likewise.\n\t* i386.h (enum ix86_builtins): Likewise.\n\t* i386.md (cvtss2siq, cvttss2siq, cvtsd2siq, cvttsd2siq, cvtsi2sdq,\n\tsse2_movq2dq_rex64, sse2_movsq2q_rex64): New.\n\t(sse2_movq2dq, sse2_movsq2q): Disable for 64bit.\n\t* mmintrin.h (_mm_cvtsi64x_si64, _mm_set_pi64x, _mm_cvtsi64_si64x): New.\n\t* xmmintrin.h (_mm_cvtss_si64x, _mm_cvttss_si64x, _mm_cvtsi64x_ss,\n\t_mm_set_epi64x, _mm_set1_epi64x, _mm_cvtsd_si64x, _mm_cvttsd_si64x,\n\t_mm_cvtsi64x_sd, _mm_cvtsi64x_si128, _mm_cvtsi128_si64x): New.\n\nFrom-SVN: r63267", "tree": {"sha": "c74c0b1a2b314570d121c6928bed7609ac436b20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c74c0b1a2b314570d121c6928bed7609ac436b20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/453ee2313a9f013158f1c5ab8bd97cf495c5c270", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453ee2313a9f013158f1c5ab8bd97cf495c5c270", "html_url": "https://github.com/Rust-GCC/gccrs/commit/453ee2313a9f013158f1c5ab8bd97cf495c5c270", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/453ee2313a9f013158f1c5ab8bd97cf495c5c270/comments", "author": null, "committer": null, "parents": [{"sha": "d50672efa744b4492ca692e4cffcd7c9cdd55e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d50672efa744b4492ca692e4cffcd7c9cdd55e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d50672efa744b4492ca692e4cffcd7c9cdd55e37"}], "stats": {"total": 255, "additions": 252, "deletions": 3}, "files": [{"sha": "746458b18f1c131fb81dfa65fff858e112257817", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -1,3 +1,18 @@\n+Sat Feb 22 02:35:07 CET 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* i386.c (def_builtin):  Special case 64bit builtins.\n+\t(MASK_SSE164, MASK_SSE264): New constants.\n+\t(builtin_description): Add 64bit builtins.\n+\t(ix86_init_mmx_sse_builtins): Likewise.\n+\t* i386.h (enum ix86_builtins): Likewise.\n+\t* i386.md (cvtss2siq, cvttss2siq, cvtsd2siq, cvttsd2siq, cvtsi2sdq,\n+\tsse2_movq2dq_rex64, sse2_movsq2q_rex64): New.\n+\t(sse2_movq2dq, sse2_movsq2q): Disable for 64bit.\n+\t* mmintrin.h (_mm_cvtsi64x_si64, _mm_set_pi64x, _mm_cvtsi64_si64x): New.\n+\t* xmmintrin.h (_mm_cvtss_si64x, _mm_cvttss_si64x, _mm_cvtsi64x_ss,\n+\t_mm_set_epi64x, _mm_set1_epi64x, _mm_cvtsd_si64x, _mm_cvttsd_si64x,\n+\t_mm_cvtsi64x_sd, _mm_cvtsi64x_si128, _mm_cvtsi128_si64x): New.\n+\n Sat Feb 22 00:48:22 CET 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* i386.c (builtin_description): Add __builtin_ia32_paddq and"}, {"sha": "e18b1fb0b57da3cc4e4ac6420bb36a3c841351a7", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -12688,7 +12688,8 @@ x86_initialize_trampoline (tramp, fnaddr, cxt)\n \f\n #define def_builtin(MASK, NAME, TYPE, CODE)\t\t\t\\\n do {\t\t\t\t\t\t\t\t\\\n-  if ((MASK) & target_flags)\t\t\t\t\t\\\n+  if ((MASK) & target_flags\t\t\t\t\t\\\n+      && (!((MASK) & MASK_64BIT) || TARGET_64BIT))\t\t\\\n     builtin_function ((NAME), (TYPE), (CODE), BUILT_IN_MD,\t\\\n \t\t      NULL, NULL_TREE);\t\t\t\t\\\n } while (0)\n@@ -12705,6 +12706,8 @@ struct builtin_description\n \n /* Used for builtins that are enabled both by -msse and -msse2.  */\n #define MASK_SSE1 (MASK_SSE | MASK_SSE2)\n+#define MASK_SSE164 (MASK_SSE | MASK_SSE2 | MASK_64BIT)\n+#define MASK_SSE264 (MASK_SSE2 | MASK_64BIT)\n \n static const struct builtin_description bdesc_comi[] =\n {\n@@ -12840,6 +12843,7 @@ static const struct builtin_description bdesc_2arg[] =\n \n   { MASK_SSE1, CODE_FOR_cvtpi2ps, 0, IX86_BUILTIN_CVTPI2PS, 0, 0 },\n   { MASK_SSE1, CODE_FOR_cvtsi2ss, 0, IX86_BUILTIN_CVTSI2SS, 0, 0 },\n+  { MASK_SSE164, CODE_FOR_cvtsi2ssq, 0, IX86_BUILTIN_CVTSI642SS, 0, 0 },\n \n   { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLW, 0, 0 },\n   { MASK_MMX, CODE_FOR_ashlv4hi3, 0, IX86_BUILTIN_PSLLWI, 0, 0 },\n@@ -12990,6 +12994,7 @@ static const struct builtin_description bdesc_2arg[] =\n   { MASK_SSE2, CODE_FOR_sse2_pmaddwd, 0, IX86_BUILTIN_PMADDWD128, 0, 0 },\n \n   { MASK_SSE2, CODE_FOR_cvtsi2sd, 0, IX86_BUILTIN_CVTSI2SD, 0, 0 },\n+  { MASK_SSE264, CODE_FOR_cvtsi2sdq, 0, IX86_BUILTIN_CVTSI642SD, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvtsd2ss, 0, IX86_BUILTIN_CVTSD2SS, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvtss2sd, 0, IX86_BUILTIN_CVTSS2SD, 0, 0 }\n };\n@@ -13005,8 +13010,10 @@ static const struct builtin_description bdesc_1arg[] =\n \n   { MASK_SSE1, CODE_FOR_cvtps2pi, 0, IX86_BUILTIN_CVTPS2PI, 0, 0 },\n   { MASK_SSE1, CODE_FOR_cvtss2si, 0, IX86_BUILTIN_CVTSS2SI, 0, 0 },\n+  { MASK_SSE164, CODE_FOR_cvtss2siq, 0, IX86_BUILTIN_CVTSS2SI64, 0, 0 },\n   { MASK_SSE1, CODE_FOR_cvttps2pi, 0, IX86_BUILTIN_CVTTPS2PI, 0, 0 },\n   { MASK_SSE1, CODE_FOR_cvttss2si, 0, IX86_BUILTIN_CVTTSS2SI, 0, 0 },\n+  { MASK_SSE164, CODE_FOR_cvttss2siq, 0, IX86_BUILTIN_CVTTSS2SI64, 0, 0 },\n \n   { MASK_SSE2, CODE_FOR_sse2_pmovmskb, 0, IX86_BUILTIN_PMOVMSKB128, 0, 0 },\n   { MASK_SSE2, CODE_FOR_sse2_movmskpd, 0, IX86_BUILTIN_MOVMSKPD, 0, 0 },\n@@ -13028,6 +13035,8 @@ static const struct builtin_description bdesc_1arg[] =\n \n   { MASK_SSE2, CODE_FOR_cvtsd2si, 0, IX86_BUILTIN_CVTSD2SI, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvttsd2si, 0, IX86_BUILTIN_CVTTSD2SI, 0, 0 },\n+  { MASK_SSE264, CODE_FOR_cvtsd2siq, 0, IX86_BUILTIN_CVTSD2SI64, 0, 0 },\n+  { MASK_SSE264, CODE_FOR_cvttsd2siq, 0, IX86_BUILTIN_CVTTSD2SI64, 0, 0 },\n \n   { MASK_SSE2, CODE_FOR_cvtps2dq, 0, IX86_BUILTIN_CVTPS2DQ, 0, 0 },\n   { MASK_SSE2, CODE_FOR_cvtps2pd, 0, IX86_BUILTIN_CVTPS2PD, 0, 0 },\n@@ -13073,11 +13082,18 @@ ix86_init_mmx_sse_builtins ()\n   tree int_ftype_v4sf\n     = build_function_type_list (integer_type_node,\n \t\t\t\tV4SF_type_node, NULL_TREE);\n+  tree int64_ftype_v4sf\n+    = build_function_type_list (long_long_integer_type_node,\n+\t\t\t\tV4SF_type_node, NULL_TREE);\n   tree int_ftype_v8qi\n     = build_function_type_list (integer_type_node, V8QI_type_node, NULL_TREE);\n   tree v4sf_ftype_v4sf_int\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, integer_type_node, NULL_TREE);\n+  tree v4sf_ftype_v4sf_int64\n+    = build_function_type_list (V4SF_type_node,\n+\t\t\t\tV4SF_type_node, long_long_integer_type_node,\n+\t\t\t\tNULL_TREE);\n   tree v4sf_ftype_v4sf_v2si\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V2SI_type_node, NULL_TREE);\n@@ -13228,9 +13244,16 @@ ix86_init_mmx_sse_builtins ()\n     = build_function_type_list (V2DF_type_node, V4SF_type_node, NULL_TREE);\n   tree int_ftype_v2df\n     = build_function_type_list (integer_type_node, V2DF_type_node, NULL_TREE);\n+  tree int64_ftype_v2df\n+    = build_function_type_list (long_long_integer_type_node,\n+\t\t    \t\tV2DF_type_node, NULL_TREE);\n   tree v2df_ftype_v2df_int\n     = build_function_type_list (V2DF_type_node,\n \t\t\t\tV2DF_type_node, integer_type_node, NULL_TREE);\n+  tree v2df_ftype_v2df_int64\n+    = build_function_type_list (V2DF_type_node,\n+\t\t\t\tV2DF_type_node, long_long_integer_type_node,\n+\t\t\t\tNULL_TREE);\n   tree v4sf_ftype_v4sf_v2df\n     = build_function_type_list (V4SF_type_node,\n \t\t\t\tV4SF_type_node, V2DF_type_node, NULL_TREE);\n@@ -13433,9 +13456,12 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvtpi2ps\", v4sf_ftype_v4sf_v2si, IX86_BUILTIN_CVTPI2PS);\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvtps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTPS2PI);\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvtsi2ss\", v4sf_ftype_v4sf_int, IX86_BUILTIN_CVTSI2SS);\n+  def_builtin (MASK_SSE164, \"__builtin_ia32_cvtsi642ss\", v4sf_ftype_v4sf_int64, IX86_BUILTIN_CVTSI642SS);\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvtss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTSS2SI);\n+  def_builtin (MASK_SSE164, \"__builtin_ia32_cvtss2si64\", int64_ftype_v4sf, IX86_BUILTIN_CVTSS2SI64);\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvttps2pi\", v2si_ftype_v4sf, IX86_BUILTIN_CVTTPS2PI);\n   def_builtin (MASK_SSE1, \"__builtin_ia32_cvttss2si\", int_ftype_v4sf, IX86_BUILTIN_CVTTSS2SI);\n+  def_builtin (MASK_SSE164, \"__builtin_ia32_cvttss2si64\", int64_ftype_v4sf, IX86_BUILTIN_CVTTSS2SI64);\n \n   def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_pextrw\", int_ftype_v4hi_int, IX86_BUILTIN_PEXTRW);\n   def_builtin (MASK_SSE1 | MASK_3DNOW_A, \"__builtin_ia32_pinsrw\", v4hi_ftype_v4hi_int_int, IX86_BUILTIN_PINSRW);\n@@ -13553,12 +13579,15 @@ ix86_init_mmx_sse_builtins ()\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsd2si\", int_ftype_v2df, IX86_BUILTIN_CVTSD2SI);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvttsd2si\", int_ftype_v2df, IX86_BUILTIN_CVTTSD2SI);\n+  def_builtin (MASK_SSE264, \"__builtin_ia32_cvtsd2si64\", int64_ftype_v2df, IX86_BUILTIN_CVTSD2SI64);\n+  def_builtin (MASK_SSE264, \"__builtin_ia32_cvttsd2si64\", int64_ftype_v2df, IX86_BUILTIN_CVTTSD2SI64);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtps2dq\", v4si_ftype_v4sf, IX86_BUILTIN_CVTPS2DQ);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtps2pd\", v2df_ftype_v4sf, IX86_BUILTIN_CVTPS2PD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvttps2dq\", v4si_ftype_v4sf, IX86_BUILTIN_CVTTPS2DQ);\n \n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsi2sd\", v2df_ftype_v2df_int, IX86_BUILTIN_CVTSI2SD);\n+  def_builtin (MASK_SSE264, \"__builtin_ia32_cvtsi642sd\", v2df_ftype_v2df_int64, IX86_BUILTIN_CVTSI642SD);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtsd2ss\", v4sf_ftype_v4sf_v2df, IX86_BUILTIN_CVTSD2SS);\n   def_builtin (MASK_SSE2, \"__builtin_ia32_cvtss2sd\", v2df_ftype_v2df_v4sf, IX86_BUILTIN_CVTSS2SD);\n "}, {"sha": "828cf42f1050c0d4ee316191b273e4e9f867ed0d", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -2115,9 +2115,12 @@ enum ix86_builtins\n   IX86_BUILTIN_CVTPI2PS,\n   IX86_BUILTIN_CVTPS2PI,\n   IX86_BUILTIN_CVTSI2SS,\n+  IX86_BUILTIN_CVTSI642SS,\n   IX86_BUILTIN_CVTSS2SI,\n+  IX86_BUILTIN_CVTSS2SI64,\n   IX86_BUILTIN_CVTTPS2PI,\n   IX86_BUILTIN_CVTTSS2SI,\n+  IX86_BUILTIN_CVTTSS2SI64,\n \n   IX86_BUILTIN_MAXPS,\n   IX86_BUILTIN_MAXSS,\n@@ -2376,11 +2379,14 @@ enum ix86_builtins\n \n   IX86_BUILTIN_CVTPI2PD,\n   IX86_BUILTIN_CVTSI2SD,\n+  IX86_BUILTIN_CVTSI642SD,\n \n   IX86_BUILTIN_CVTSD2SI,\n+  IX86_BUILTIN_CVTSD2SI64,\n   IX86_BUILTIN_CVTSD2SS,\n   IX86_BUILTIN_CVTSS2SD,\n   IX86_BUILTIN_CVTTSD2SI,\n+  IX86_BUILTIN_CVTTSD2SI64,\n \n   IX86_BUILTIN_CVTPS2DQ,\n   IX86_BUILTIN_CVTPS2PD,"}, {"sha": "9449180367c7262984c66f2ae0df90d9dc958b24", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -20223,6 +20223,17 @@\n    (set_attr \"athlon_decode\" \"double,vector\")\n    (set_attr \"mode\" \"SF\")])\n \n+(define_insn \"cvtss2siq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(vec_select:DI\n+\t (fix:V4DI (match_operand:V4SF 1 \"nonimmediate_operand\" \"x,m\"))\n+\t (parallel [(const_int 0)])))]\n+  \"TARGET_SSE\"\n+  \"cvtss2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"athlon_decode\" \"double,vector\")\n+   (set_attr \"mode\" \"SF\")])\n+\n (define_insn \"cvttss2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(vec_select:SI\n@@ -20235,6 +20246,18 @@\n    (set_attr \"mode\" \"SF\")\n    (set_attr \"athlon_decode\" \"double,vector\")])\n \n+(define_insn \"cvttss2siq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(vec_select:DI\n+\t (unspec:V4DI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"x,xm\")]\n+\t\t      UNSPEC_FIX)\n+\t (parallel [(const_int 0)])))]\n+  \"TARGET_SSE && TARGET_64BIT\"\n+  \"cvttss2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SF\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n+\n \n ;; MMX insns\n \n@@ -21835,6 +21858,15 @@\n   [(set_attr \"type\" \"sseicvt\")\n    (set_attr \"mode\" \"SI\")])\n \n+(define_insn \"cvtsd2siq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(fix:DI (vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"xm\")\n+\t\t\t       (parallel [(const_int 0)]))))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"cvtsd2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"SI\")])\n+\n (define_insn \"cvttsd2si\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n \t(unspec:SI [(vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"x,xm\")\n@@ -21845,6 +21877,16 @@\n    (set_attr \"mode\" \"SI\")\n    (set_attr \"athlon_decode\" \"double,vector\")])\n \n+(define_insn \"cvttsd2siq\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n+\t(unspec:DI [(vec_select:DF (match_operand:V2DF 1 \"register_operand\" \"x,xm\")\n+\t\t\t\t   (parallel [(const_int 0)]))] UNSPEC_FIX))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"cvttsd2siq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"athlon_decode\" \"double,vector\")])\n+\n (define_insn \"cvtsi2sd\"\n   [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n \t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n@@ -21858,6 +21900,19 @@\n    (set_attr \"mode\" \"DF\")\n    (set_attr \"athlon_decode\" \"double,direct\")])\n \n+(define_insn \"cvtsi2sdq\"\n+  [(set (match_operand:V2DF 0 \"register_operand\" \"=x,x\")\n+\t(vec_merge:V2DF (match_operand:V2DF 1 \"register_operand\" \"0,0\")\n+\t \t\t(vec_duplicate:V2DF\n+\t\t\t  (float:DF\n+\t\t\t    (match_operand:DI 2 \"nonimmediate_operand\" \"r,rm\")))\n+\t\t\t(const_int 2)))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"cvtsi2sdq\\t{%2, %0|%0, %2}\"\n+  [(set_attr \"type\" \"sseicvt\")\n+   (set_attr \"mode\" \"DF\")\n+   (set_attr \"athlon_decode\" \"double,direct\")])\n+\n ;; Conversions between SF and DF\n \n (define_insn \"cvtsd2ss\"\n@@ -22794,24 +22849,48 @@\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,y\")\n \t(vec_select:DI (match_operand:V2DI 1 \"register_operand\" \"x,x\")\n \t\t       (parallel [(const_int 0)])))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && !TARGET_64BIT\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n    movdq2q\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_movdq2q_rex64\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=m,y,r\")\n+\t(vec_select:DI (match_operand:V2DI 1 \"register_operand\" \"x,x,x\")\n+\t\t       (parallel [(const_int 0)])))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"@\n+   movq\\t{%1, %0|%0, %1}\n+   movdq2q\\t{%1, %0|%0, %1}\n+   movq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"sse2_movq2dq\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x,?x\")\n \t(vec_concat:V2DI (match_operand:DI 1 \"nonimmediate_operand\" \"m,y\")\n \t\t\t (const_int 0)))]\n-  \"TARGET_SSE2\"\n+  \"TARGET_SSE2 && !TARGET_64BIT\"\n   \"@\n    movq\\t{%1, %0|%0, %1}\n    movq2dq\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssecvt,ssemov\")\n    (set_attr \"mode\" \"TI\")])\n \n+(define_insn \"sse2_movq2dq_rex64\"\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,?x,?x\")\n+\t(vec_concat:V2DI (match_operand:DI 1 \"nonimmediate_operand\" \"m,y,r\")\n+\t\t\t (const_int 0)))]\n+  \"TARGET_SSE2 && TARGET_64BIT\"\n+  \"@\n+   movq\\t{%1, %0|%0, %1}\n+   movq2dq\\t{%1, %0|%0, %1}\n+   movq\\t{%1, %0|%0, %1}\"\n+  [(set_attr \"type\" \"ssecvt,ssemov,ssecvt\")\n+   (set_attr \"mode\" \"TI\")])\n+\n (define_insn \"sse2_movq\"\n   [(set (match_operand:V2DI 0 \"register_operand\" \"=x\")\n \t(vec_concat:V2DI (vec_select:DI"}, {"sha": "7b4aa0146458f45514730e22209a66baafd0e14d", "filename": "gcc/config/i386/mmintrin.h", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmintrin.h?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -56,6 +56,22 @@ _mm_cvtsi32_si64 (int __i)\n   return (__m64) __tmp;\n }\n \n+#ifdef __x86_64__\n+/* Convert I to a __m64 object.  */\n+static __inline __m64 \n+_mm_cvtsi64x_si64 (long long __i)\n+{\n+  return (__m64) __i;\n+}\n+\n+/* Convert I to a __m64 object.  */\n+static __inline __m64 \n+_mm_set_pi64x (long long __i)\n+{\n+  return (__m64) __i;\n+}\n+#endif\n+\n /* Convert the lower 32 bits of the __m64 object into an integer.  */\n static __inline int\n _mm_cvtsi64_si32 (__m64 __i)\n@@ -64,6 +80,15 @@ _mm_cvtsi64_si32 (__m64 __i)\n   return __tmp;\n }\n \n+#ifdef __x86_64__\n+/* Convert the lower 32 bits of the __m64 object into an integer.  */\n+static __inline long long\n+_mm_cvtsi64_si64x (__m64 __i)\n+{\n+  return (long long)__i;\n+}\n+#endif\n+\n /* Pack the four 16-bit values from M1 into the lower four 8-bit values of\n    the result, and the four 16-bit values from M2 into the upper four 8-bit\n    values of the result, all with signed saturation.  */"}, {"sha": "48004f615a70e89dc252f40d88431a1e6e83cf8d", "filename": "gcc/config/i386/xmmintrin.h", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/453ee2313a9f013158f1c5ab8bd97cf495c5c270/gcc%2Fconfig%2Fi386%2Fxmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fxmmintrin.h?ref=453ee2313a9f013158f1c5ab8bd97cf495c5c270", "patch": "@@ -475,6 +475,16 @@ _mm_cvtss_si32 (__m128 __A)\n   return __builtin_ia32_cvtss2si ((__v4sf) __A);\n }\n \n+#ifdef __x86_64__\n+/* Convert the lower SPFP value to a 32-bit integer according to the current\n+   rounding mode.  */\n+static __inline long long\n+_mm_cvtss_si64x (__m128 __A)\n+{\n+  return __builtin_ia32_cvtss2si64 ((__v4sf) __A);\n+}\n+#endif\n+\n /* Convert the two lower SPFP values to 32-bit integers according to the\n    current rounding mode.  Return the integers in packed form.  */\n static __inline __m64\n@@ -490,6 +500,15 @@ _mm_cvttss_si32 (__m128 __A)\n   return __builtin_ia32_cvttss2si ((__v4sf) __A);\n }\n \n+#ifdef __x86_64__\n+/* Truncate the lower SPFP value to a 32-bit integer.  */\n+static __inline long long\n+_mm_cvttss_si64x (__m128 __A)\n+{\n+  return __builtin_ia32_cvttss2si64 ((__v4sf) __A);\n+}\n+#endif\n+\n /* Truncate the two lower SPFP values to 32-bit integers.  Return the\n    integers in packed form.  */\n static __inline __m64\n@@ -505,6 +524,15 @@ _mm_cvtsi32_ss (__m128 __A, int __B)\n   return (__m128) __builtin_ia32_cvtsi2ss ((__v4sf) __A, __B);\n }\n \n+#ifdef __x86_64__\n+/* Convert B to a SPFP value and insert it as element zero in A.  */\n+static __inline __m128\n+_mm_cvtsi64x_ss (__m128 __A, long long __B)\n+{\n+  return (__m128) __builtin_ia32_cvtsi642ss ((__v4sf) __A, __B);\n+}\n+#endif\n+\n /* Convert the two 32-bit values in B to SPFP form and insert them\n    as the two lower elements in A.  */\n static __inline __m128\n@@ -1662,6 +1690,24 @@ _mm_set_epi32 (int __Z, int __Y, int __X, int __W)\n \n   return __u.__v;\n }\n+\n+#ifdef __x86_64__\n+/* Create the vector [Z Y].  */\n+static __inline __m128i\n+_mm_set_epi64x (long long __Z, long long __Y)\n+{\n+  union {\n+    long __a[2];\n+    __m128i __v;\n+  } __u;\n+\n+  __u.__a[0] = __Y;\n+  __u.__a[1] = __Z;\n+\n+  return __u.__v;\n+}\n+#endif\n+\n /* Create the vector [S T U V Z Y X W].  */\n static __inline __m128i\n _mm_set_epi16 (short __Z, short __Y, short __X, short __W,\n@@ -1730,6 +1776,15 @@ _mm_set1_epi32 (int __A)\n   return (__m128i) __builtin_ia32_pshufd ((__v4si)__tmp, _MM_SHUFFLE (0,0,0,0));\n }\n \n+#ifdef __x86_64__\n+static __inline __m128i\n+_mm_set1_epi64x (long long __A)\n+{\n+  __v2di __tmp = (__v2di)__builtin_ia32_movq2dq ((unsigned long long)__A);\n+  return (__m128i) __builtin_ia32_shufpd ((__v2df)__tmp, (__v2df)__tmp, _MM_SHUFFLE2 (0,0));\n+}\n+#endif\n+\n static __inline __m128i\n _mm_set1_epi16 (short __A)\n {\n@@ -1899,12 +1954,28 @@ _mm_cvtsd_si32 (__m128d __A)\n   return __builtin_ia32_cvtsd2si ((__v2df) __A);\n }\n \n+#ifdef __x86_64__\n+static __inline long long\n+_mm_cvtsd_si64x (__m128d __A)\n+{\n+  return __builtin_ia32_cvtsd2si64 ((__v2df) __A);\n+}\n+#endif\n+\n static __inline int\n _mm_cvttsd_si32 (__m128d __A)\n {\n   return __builtin_ia32_cvttsd2si ((__v2df) __A);\n }\n \n+#ifdef __x86_64__\n+static __inline long long\n+_mm_cvttsd_si64x (__m128d __A)\n+{\n+  return __builtin_ia32_cvttsd2si64 ((__v2df) __A);\n+}\n+#endif\n+\n static __inline __m128\n _mm_cvtsd_ss (__m128 __A, __m128d __B)\n {\n@@ -1917,6 +1988,14 @@ _mm_cvtsi32_sd (__m128d __A, int __B)\n   return (__m128d)__builtin_ia32_cvtsi2sd ((__v2df) __A, __B);\n }\n \n+#ifdef __x86_64__\n+static __inline __m128d\n+_mm_cvtsi64x_sd (__m128d __A, long long __B)\n+{\n+  return (__m128d)__builtin_ia32_cvtsi642sd ((__v2df) __A, __B);\n+}\n+#endif\n+\n static __inline __m128d\n _mm_cvtss_sd (__m128d __A, __m128 __B)\n {\n@@ -2465,6 +2544,14 @@ _mm_cvtsi32_si128 (int __A)\n   return (__m128i) __builtin_ia32_loadd (&__A);\n }\n \n+#ifdef __x86_64__\n+static __inline __m128i\n+_mm_cvtsi64x_si128 (long long __A)\n+{\n+  return (__m128i) __builtin_ia32_movq2dq (__A);\n+}\n+#endif\n+\n static __inline int\n _mm_cvtsi128_si32 (__m128i __A)\n {\n@@ -2473,6 +2560,14 @@ _mm_cvtsi128_si32 (__m128i __A)\n   return __tmp;\n }\n \n+#ifdef __x86_64__\n+static __inline long long\n+_mm_cvtsi128_si64x (__m128i __A)\n+{\n+  return __builtin_ia32_movdq2q ((__v2di)__A);\n+}\n+#endif\n+\n #endif /* __SSE2__  */\n \n #endif /* __SSE__ */"}]}