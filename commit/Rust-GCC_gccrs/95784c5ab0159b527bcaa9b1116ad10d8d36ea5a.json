{"sha": "95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU3ODRjNWFiMDE1OWI1MjdiY2FhOWIxMTE2YWQxMGQ4ZDM2ZWE1YQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-10-09T08:51:00Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-10-09T08:51:00Z"}, "message": "* doc/invoke.texi: Document -fsanitize=bool and -fsanitize=enum.\n\nFrom-SVN: r216033", "tree": {"sha": "0c0dab6ce8d07d16796d973f493ab8eaf989cc71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c0dab6ce8d07d16796d973f493ab8eaf989cc71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5e523b76d1bdaf0df15f6bfdee602a3e153be68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5e523b76d1bdaf0df15f6bfdee602a3e153be68"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "44cee4a5595cd582ce5f0da040a9f5872b2d44d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "patch": "@@ -1,3 +1,7 @@\n+2014-10-09  Marek Polacek  <polacek@redhat.com>\n+\n+\t* doc/invoke.texi: Document -fsanitize=bool and -fsanitize=enum.\n+\n 2014-10-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/61969"}, {"sha": "8f3eb16beb29ff18c0a0c49383be21d6bb4f8782", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95784c5ab0159b527bcaa9b1116ad10d8d36ea5a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=95784c5ab0159b527bcaa9b1116ad10d8d36ea5a", "patch": "@@ -5604,6 +5604,19 @@ This option enables instrumentation of return statements in functions\n marked with @code{returns_nonnull} function attribute, to detect returning\n of null values from such functions.\n \n+@item -fsanitize=bool\n+@opindex fsanitize=bool\n+\n+This option enables instrumentation of loads from bool.  If a value other\n+than 0/1 is loaded, a run-time error is issued.\n+\n+@item -fsanitize=enum\n+@opindex fsanitize=enum\n+\n+This option enables instrumentation of loads from an enum type.  If\n+a value outside the range of values for the enum type is loaded,\n+a run-time error is issued.\n+\n @end table\n \n While @option{-ftrapv} causes traps for signed overflows to be emitted,"}]}