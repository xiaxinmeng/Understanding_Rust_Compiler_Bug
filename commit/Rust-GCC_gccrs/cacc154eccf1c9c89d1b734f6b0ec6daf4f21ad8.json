{"sha": "cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FjYzE1NGVjY2YxYzljODlkMWI3MzRmNmIwZWM2ZGFmNGYyMWFkOA==", "commit": {"author": {"name": "Alexandre Petit-Bianco", "email": "apbianco@cygnus.com", "date": "1999-10-13T02:52:08Z"}, "committer": {"name": "Alexandre Petit-Bianco", "email": "apbianco@gcc.gnu.org", "date": "1999-10-13T02:52:08Z"}, "message": "jcf-write.c: (RELOCATION_VALUE_0): New macro.\n\nTue Sep 14 16:24:19 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n\n        * jcf-write.c: (RELOCATION_VALUE_0): New macro.\n        (RELOCATION_VALUE_1): Likewise.\n        (emit_iinc, emit_reloc, push_constant1, push_constant2,\n        push_in_const, push_long_const): Prototyped.\n        (push_constant1): Argument `index' is of type HOST_WIDE_INT.\n        (push_constant2): Likewise.\n        (push_int_const): Cast find_constant1's integer arguments to `jword'.\n        (find_constant_wide): Cast find_constant2's integer arguments to\n        `jword'.\n        (find_constant_index): Cast find_constant2's and find_constant2's\n        integer arguments to `jword'.\n        (emit_pop): Argument `value' is of type HOST_WIDE_INT.\n        (emit_switch_reloc): Use RELOCATION_VALUE_0.\n        (emit_if): Use RELOCATION_VALUE_1.\n        (emit_goto): Likewise.\n        (emit_jsr): Likewise.\n        (generate_bytecode_insns): Use RELOCATION_VALUE_0. Cast second\n        argument to push_long_const to HOST_WIDE_INT.\n\n(This is a forgotten patch.)\n\nFrom-SVN: r29932", "tree": {"sha": "8396c68bacb7d3aa41013b5226c0f1bf26665cad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8396c68bacb7d3aa41013b5226c0f1bf26665cad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8/comments", "author": null, "committer": null, "parents": [{"sha": "006d4a9b37bf6dc8dafd5b213e8cdb23657fd3a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006d4a9b37bf6dc8dafd5b213e8cdb23657fd3a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006d4a9b37bf6dc8dafd5b213e8cdb23657fd3a6"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "1e4f75023ccd311fdc8934f2dde11150397c10b8", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "patch": "@@ -35,6 +35,27 @@ Fri Sep 24 10:48:10 1999  Bernd Schmidt  <bernds@cygnus.co.uk>\n \t(WORDS_TO_LONG): Likewise.\n \t(WORDS_TO_DOUBLE): Likewise.\n \n+Tue Sep 14 16:24:19 1999  Alexandre Petit-Bianco  <apbianco@cygnus.com>\n+\n+\t* jcf-write.c: (RELOCATION_VALUE_0): New macro.\n+\t(RELOCATION_VALUE_1): Likewise.\n+\t(emit_iinc, emit_reloc, push_constant1, push_constant2,\n+ \tpush_in_const, push_long_const): Prototyped.\n+\t(push_constant1): Argument `index' is of type HOST_WIDE_INT.\n+\t(push_constant2): Likewise.\n+\t(push_int_const): Cast find_constant1's integer arguments to `jword'.\n+\t(find_constant_wide): Cast find_constant2's integer arguments to\n+ \t`jword'.\n+\t(find_constant_index): Cast find_constant2's and find_constant2's\n+ \tinteger arguments to `jword'.\n+\t(emit_pop): Argument `value' is of type HOST_WIDE_INT.\n+\t(emit_switch_reloc): Use RELOCATION_VALUE_0.\n+\t(emit_if): Use RELOCATION_VALUE_1.\n+\t(emit_goto): Likewise.\n+\t(emit_jsr): Likewise.\n+\t(generate_bytecode_insns): Use RELOCATION_VALUE_0. Cast second\n+ \targument to push_long_const to HOST_WIDE_INT.\n+\n 1999-09-15  Andreas Schwab  <schwab@suse.de>\n \n \t* Makefile.in (parse.o): Depend on $(JAVA_TREE_H)."}, {"sha": "18cba2c49c82ecd4b50d7a32acfbd1a344fc4053", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=cacc154eccf1c9c89d1b734f6b0ec6daf4f21ad8", "patch": "@@ -186,6 +186,9 @@ struct jcf_relocation\n   struct jcf_block *label;\n };\n \n+#define RELOCATION_VALUE_0 ((HOST_WIDE_INT)0)\n+#define RELOCATION_VALUE_1 ((HOST_WIDE_INT)0)\n+\n /* State for single catch clause. */\n \n struct jcf_handler\n@@ -302,11 +305,16 @@ static struct chunk * generate_classfile PROTO ((tree, struct jcf_partial *));\n static struct jcf_handler *alloc_handler PROTO ((struct jcf_block *,\n \t\t\t\t\t\t struct jcf_block *,\n \t\t\t\t\t\t struct jcf_partial *));\n-static void push_constant1 PROTO ((int, struct jcf_partial *));\n-static void push_constant2 PROTO ((int, struct jcf_partial *));\n+static void emit_iinc PROTO ((tree, HOST_WIDE_INT, struct jcf_partial *));\n+static void emit_reloc PROTO ((HOST_WIDE_INT, int, struct jcf_block *, \n+\t\t\t       struct jcf_partial *));\n+static void push_constant1 PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n+static void push_constant2 PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n static void push_int_const PROTO ((HOST_WIDE_INT, struct jcf_partial *));\n static int find_constant_wide PROTO ((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t      struct jcf_partial *));\n+static void push_long_const PROTO ((HOST_WIDE_INT, HOST_WIDE_INT, \n+\t\t\t\t    struct jcf_partial *));\n static int find_constant_index PROTO ((tree, struct jcf_partial *));\n static void push_long_const PROTO ((HOST_WIDE_INT, HOST_WIDE_INT,\n \t\t\t\t    struct jcf_partial *));\n@@ -704,7 +712,7 @@ write_chunks (stream, chunks)\n \n static void\n push_constant1 (index, state)\n-     int index;\n+     HOST_WIDE_INT index;\n      struct jcf_partial *state;\n {\n   RESERVE (3);\n@@ -725,7 +733,7 @@ push_constant1 (index, state)\n \n static void\n push_constant2 (index, state)\n-     int index;\n+     HOST_WIDE_INT index;\n      struct jcf_partial *state;\n {\n   RESERVE (3);\n@@ -756,7 +764,8 @@ push_int_const (i, state)\n     }\n   else\n     {\n-      i = find_constant1 (&state->cpool, CONSTANT_Integer, i & 0xFFFFFFFF);\n+      i = find_constant1 (&state->cpool, CONSTANT_Integer, \n+\t\t\t  (jword)(i & 0xFFFFFFFF));\n       push_constant1 (i, state);\n     }\n }\n@@ -769,7 +778,7 @@ find_constant_wide (lo, hi, state)\n   HOST_WIDE_INT w1, w2;\n   lshift_double (lo, hi, -32, 64, &w1, &w2, 1);\n   return find_constant2 (&state->cpool, CONSTANT_Long,\n-\t\t\t w1 & 0xFFFFFFFF, lo & 0xFFFFFFFF);\n+\t\t\t (jword)(w1 & 0xFFFFFFFF), (jword)(lo & 0xFFFFFFFF));\n }\n \n /* Find or allocate a constant pool entry for the given VALUE.\n@@ -784,7 +793,7 @@ find_constant_index (value, state)\n     {\n       if (TYPE_PRECISION (TREE_TYPE (value)) <= 32)\n \treturn find_constant1 (&state->cpool, CONSTANT_Integer,\n-\t\t\t       TREE_INT_CST_LOW (value) & 0xFFFFFFFF);\n+\t\t\t       (jword)(TREE_INT_CST_LOW (value) & 0xFFFFFFFF));\n       else\n \treturn find_constant_wide (TREE_INT_CST_LOW (value),\n \t\t\t\t   TREE_INT_CST_HIGH (value), state);\n@@ -795,14 +804,17 @@ find_constant_index (value, state)\n       if (TYPE_PRECISION (TREE_TYPE (value)) == 32)\n \t{\n \t  words[0] = etarsingle (TREE_REAL_CST (value)) & 0xFFFFFFFF;\n-\t  return find_constant1 (&state->cpool, CONSTANT_Float, words[0]);\n+\t  return find_constant1 (&state->cpool, CONSTANT_Float, \n+\t\t\t\t (jword)words[0]);\n \t}\n       else\n \t{\n \t  etardouble (TREE_REAL_CST (value), words);\n \t  return find_constant2 (&state->cpool, CONSTANT_Double,\n-\t\t\t\t words[1-FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF,\n-\t\t\t\t words[FLOAT_WORDS_BIG_ENDIAN] & 0xFFFFFFFF);\n+\t\t\t\t (jword)(words[1-FLOAT_WORDS_BIG_ENDIAN] & \n+\t\t\t\t\t 0xFFFFFFFF),\n+\t\t\t\t (jword)(words[FLOAT_WORDS_BIG_ENDIAN] & \n+\t\t\t\t\t 0xFFFFFFFF));\n \t}\n     }\n   else if (TREE_CODE (value) == STRING_CST)\n@@ -945,7 +957,7 @@ emit_pop (size, state)\n static void\n emit_iinc (var, value, state)\n      tree var;\n-     int value;\n+     HOST_WIDE_INT value;\n      struct jcf_partial *state;\n {\n   int slot = DECL_LOCAL_INDEX (var);\n@@ -1051,7 +1063,7 @@ emit_switch_reloc (label, state)\n      struct jcf_block *label;\n      struct jcf_partial *state;\n {\n-  emit_reloc (0, BLOCK_START_RELOC, label, state);\n+  emit_reloc (RELOCATION_VALUE_0, BLOCK_START_RELOC, label, state);\n }\n \n /* Similar to emit_switch_reloc,\n@@ -1081,7 +1093,7 @@ emit_if (target, opcode, inv_opcode, state)\n {\n   OP1 (opcode);\n   /* value is 1 byte from reloc back to start of instruction.  */\n-  emit_reloc (1, - inv_opcode, target, state);\n+  emit_reloc (RELOCATION_VALUE_1, - inv_opcode, target, state);\n }\n \n static void\n@@ -1091,7 +1103,7 @@ emit_goto (target, state)\n {\n   OP1 (OPCODE_goto);\n   /* Value is 1 byte from reloc back to start of instruction.  */\n-  emit_reloc (1, OPCODE_goto_w, target, state);\n+  emit_reloc (RELOCATION_VALUE_1, OPCODE_goto_w, target, state);\n }\n \n static void\n@@ -1101,7 +1113,7 @@ emit_jsr (target, state)\n {\n   OP1 (OPCODE_jsr);\n   /* Value is 1 byte from reloc back to start of instruction.  */\n-  emit_reloc (1, OPCODE_jsr_w, target, state);\n+  emit_reloc (RELOCATION_VALUE_1, OPCODE_jsr_w, target, state);\n }\n \n /* Generate code to evaluate EXP.  If the result is true,\n@@ -1729,7 +1741,8 @@ generate_bytecode_insns (exp, target, state)\n \t\tint index = 0;\n \t\tRESERVE (13 + 4 * (sw_state.max_case - sw_state.min_case + 1));\n \t\tOP1 (OPCODE_tableswitch);\n-\t\temit_reloc (0, SWITCH_ALIGN_RELOC, NULL, state);\n+\t\temit_reloc (RELOCATION_VALUE_0, \n+\t\t\t    SWITCH_ALIGN_RELOC, NULL, state);\n \t\temit_switch_reloc (sw_state.default_label, state);\n \t\tOP4 (sw_state.min_case);\n \t\tOP4 (sw_state.max_case);\n@@ -1752,7 +1765,8 @@ generate_bytecode_insns (exp, target, state)\n \t      { /* Use lookupswitch. */\n \t\tRESERVE(9 + 8 * sw_state.num_cases);\n \t\tOP1 (OPCODE_lookupswitch);\n-\t\temit_reloc (0, SWITCH_ALIGN_RELOC, NULL, state);\n+\t\temit_reloc (RELOCATION_VALUE_0,\n+\t\t\t    SWITCH_ALIGN_RELOC, NULL, state);\n \t\temit_switch_reloc (sw_state.default_label, state);\n \t\tOP4 (sw_state.num_cases);\n \t\tfor (i = 0;  i < sw_state.num_cases;  i++)\n@@ -1925,7 +1939,7 @@ generate_bytecode_insns (exp, target, state)\n       if (size == 1)\n \tpush_int_const (value, state);\n       else\n-\tpush_long_const (value, value >= 0 ? 0 : -1, state);\n+\tpush_long_const (value, (HOST_WIDE_INT)(value >= 0 ? 0 : -1), state);\n       NOTE_PUSH (size);\n       emit_binop (OPCODE_iadd + adjust_typed_op (type, 3), type, state);\n       if (target != IGNORE_TARGET && ! post_op)"}]}