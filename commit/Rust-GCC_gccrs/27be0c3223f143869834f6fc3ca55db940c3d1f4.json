{"sha": "27be0c3223f143869834f6fc3ca55db940c3d1f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiZTBjMzIyM2YxNDM4Njk4MzRmNmZjM2NhNTVkYjk0MGMzZDFmNA==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2014-09-10T00:19:23Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2014-09-10T00:19:23Z"}, "message": "revert: calls.c (precompute_arguments): Check promoted_for_signed_and_unsigned_p and set the promoted mode.\n\ngcc/ChangeLog:\n\n2014-09-10  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\tRevert r213751:\n\t* calls.c (precompute_arguments): Check\n\t promoted_for_signed_and_unsigned_p and set the promoted mode.\n\t(promoted_for_signed_and_unsigned_p): New function.\n\t(expand_expr_real_1): Check promoted_for_signed_and_unsigned_p\n\tand set the promoted mode.\n\t* expr.h (promoted_for_signed_and_unsigned_p): New function definition.\n\t* cfgexpand.c (expand_gimple_stmt_1): Call emit_move_insn if\n\tSUBREG is promoted with SRP_SIGNED_AND_UNSIGNED.\n\nFrom-SVN: r215100", "tree": {"sha": "d053786efdea9dc7eae9d5703e0ec0f6b7bb2843", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d053786efdea9dc7eae9d5703e0ec0f6b7bb2843"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27be0c3223f143869834f6fc3ca55db940c3d1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27be0c3223f143869834f6fc3ca55db940c3d1f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27be0c3223f143869834f6fc3ca55db940c3d1f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27be0c3223f143869834f6fc3ca55db940c3d1f4/comments", "author": null, "committer": null, "parents": [{"sha": "6e8962a5a0dbeb650af286b4a21b7dfe76661e4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e8962a5a0dbeb650af286b4a21b7dfe76661e4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e8962a5a0dbeb650af286b4a21b7dfe76661e4a"}], "stats": {"total": 61, "additions": 15, "deletions": 46}, "files": [{"sha": "24667358ef3429d57fae64ee96943b0ebf93c2b5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27be0c3223f143869834f6fc3ca55db940c3d1f4", "patch": "@@ -1,3 +1,15 @@\n+2014-09-10  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\tRevert r213751:\n+\t* calls.c (precompute_arguments): Check\n+\t promoted_for_signed_and_unsigned_p and set the promoted mode.\n+\t(promoted_for_signed_and_unsigned_p): New function.\n+\t(expand_expr_real_1): Check promoted_for_signed_and_unsigned_p\n+\tand set the promoted mode.\n+\t* expr.h (promoted_for_signed_and_unsigned_p): New function definition.\n+\t* cfgexpand.c (expand_gimple_stmt_1): Call emit_move_insn if\n+\tSUBREG is promoted with SRP_SIGNED_AND_UNSIGNED.\n+\n 2014-09-09  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* opth-gen.awk: Generate mapping from cpp message reasons to the"}, {"sha": "345331fa6db2f3b04d61fe26ad984d2c4f0547b2", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=27be0c3223f143869834f6fc3ca55db940c3d1f4", "patch": "@@ -1486,10 +1486,7 @@ precompute_arguments (int num_actuals, struct arg_data *args)\n \t      args[i].initial_value\n \t\t= gen_lowpart_SUBREG (mode, args[i].value);\n \t      SUBREG_PROMOTED_VAR_P (args[i].initial_value) = 1;\n-\t      if (promoted_for_signed_and_unsigned_p (args[i].tree_value, mode))\n-\t\tSUBREG_PROMOTED_SET (args[i].initial_value, SRP_SIGNED_AND_UNSIGNED);\n-\t      else\n-\t\tSUBREG_PROMOTED_SET (args[i].initial_value, args[i].unsignedp);\n+\t      SUBREG_PROMOTED_SET (args[i].initial_value, args[i].unsignedp);\n \t    }\n \t}\n     }"}, {"sha": "891630536c85f0498d87c5cadca728e514920458", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=27be0c3223f143869834f6fc3ca55db940c3d1f4", "patch": "@@ -3325,13 +3325,7 @@ expand_gimple_stmt_1 (gimple stmt)\n \t\t\t\t\t  GET_MODE (target), temp, unsignedp);\n \t\t  }\n \n-\t\tif ((SUBREG_PROMOTED_GET (target) == SRP_SIGNED_AND_UNSIGNED)\n-\t\t    && (GET_CODE (temp) == SUBREG)\n-\t\t    && (GET_MODE (target) == GET_MODE (temp))\n-\t\t    && (GET_MODE (SUBREG_REG (target)) == GET_MODE (SUBREG_REG (temp))))\n-\t\t  emit_move_insn (SUBREG_REG (target), SUBREG_REG (temp));\n-\t\telse\n-\t\t  convert_move (SUBREG_REG (target), temp, unsignedp);\n+\t\tconvert_move (SUBREG_REG (target), temp, unsignedp);\n \t      }\n \t    else if (nontemporal && emit_storent_insn (target, temp))\n \t      ;"}, {"sha": "a6233f33d28280d081a311313f120dd0a2687467", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=27be0c3223f143869834f6fc3ca55db940c3d1f4", "patch": "@@ -68,7 +68,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"tree-ssa-address.h\"\n #include \"cfgexpand.h\"\n #include \"builtins.h\"\n-#include \"tree-ssa.h\"\n \n #ifndef STACK_PUSH_CODE\n #ifdef STACK_GROWS_DOWNWARD\n@@ -9250,35 +9249,6 @@ expand_expr_real_2 (sepops ops, rtx target, enum machine_mode tmode,\n }\n #undef REDUCE_BIT_FIELD\n \n-/* Return TRUE if value in SSA is zero and sign extended for wider mode MODE\n-   using value range information stored.  Return FALSE otherwise.\n-\n-   This is used to check if SUBREG is zero and sign extended and to set\n-   promoted mode SRP_SIGNED_AND_UNSIGNED to SUBREG.  */\n-\n-bool\n-promoted_for_signed_and_unsigned_p (tree ssa, enum machine_mode mode)\n-{\n-  wide_int min, max;\n-\n-  if (ssa == NULL_TREE\n-      || TREE_CODE (ssa) != SSA_NAME\n-      || !INTEGRAL_TYPE_P (TREE_TYPE (ssa))\n-      || (TYPE_PRECISION (TREE_TYPE (ssa)) != GET_MODE_PRECISION (mode)))\n-    return false;\n-\n-  /* Return FALSE if value_range is not recorded for SSA.  */\n-  if (get_range_info (ssa, &min, &max) != VR_RANGE)\n-    return false;\n-\n-  /* Return true (to set SRP_SIGNED_AND_UNSIGNED to SUBREG) if MSB of the\n-     smaller mode is not set (i.e.  MSB of ssa is not set).  */\n-  if (!wi::neg_p (min, SIGNED) && !wi::neg_p(max, SIGNED))\n-    return true;\n-  else\n-    return false;\n-\n-}\n \n /* Return TRUE if expression STMT is suitable for replacement.  \n    Never consider memory loads as replaceable, because those don't ever lead \n@@ -9582,10 +9552,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n \t  temp = gen_lowpart_SUBREG (mode, decl_rtl);\n \t  SUBREG_PROMOTED_VAR_P (temp) = 1;\n-\t  if (promoted_for_signed_and_unsigned_p (ssa_name, mode))\n-\t    SUBREG_PROMOTED_SET (temp, SRP_SIGNED_AND_UNSIGNED);\n-\t  else\n-\t    SUBREG_PROMOTED_SET (temp, unsignedp);\n+\t  SUBREG_PROMOTED_SET (temp, unsignedp);\n \t  return temp;\n \t}\n "}, {"sha": "2e66329091089a9049af50a06b31b87357ede51e", "filename": "gcc/expr.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27be0c3223f143869834f6fc3ca55db940c3d1f4/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=27be0c3223f143869834f6fc3ca55db940c3d1f4", "patch": "@@ -440,7 +440,6 @@ extern rtx expand_expr_real_1 (tree, rtx, enum machine_mode,\n \t\t\t       enum expand_modifier, rtx *, bool);\n extern rtx expand_expr_real_2 (sepops, rtx, enum machine_mode,\n \t\t\t       enum expand_modifier);\n-extern bool promoted_for_signed_and_unsigned_p (tree, enum machine_mode);\n \n /* Generate code for computing expression EXP.\n    An rtx for the computed value is returned.  The value is never null."}]}