{"sha": "394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "node_id": "C_kwDOANBUbNoAKDM5NGY2MGU2ZWQ5ZmJmM2E4MzMwMjQwNDFlYzhlYzI2YmRlNWFhM2I", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-21T11:26:18Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-21T21:24:57Z"}, "message": "libstdc++: Improve generated man pages for libstdc++\n\nThe man pages generated by Doxygen show internal header files, not the\nstandard headers that users actually care about. The run_doxygen script\nuses the doc/doxygen/stdheader.cc program to address that, but it\ndoesn't work. It only tries to fix headers with underscores in the\nnames, which doesn't work for <bits/align.h> or <bits/fsteam.tcc>.  It\nisn't prepared for the strings like \"bits/stl_set\\&.h\" that are produced\nby Doxygen. It doesn't know about many headers that have been added\nsince it was written. And the run_doxygen script fails to use its output\ncorrectly to modify the man pages. Additionally, run_doxygen doesn't\nknow about new nested namespaces like std::filesystem and std::ranges.\n\nThis change rewrites the stdheader.cc program to do a better job of\nfinding the right header. The run_doxygen script now uses the just-built\ncompiler to build stdheader.cc and actually uses its output. And the\nscript now knows about other nested namespaces.\n\nThe stdheader.cc program might be unnecessary if we consistently used\n@headername tags in the Doxygen comments, but we don't (and probably\nnever will).\n\nA problem that remains after this change is that all the free function\ndefined in namespace std get dumped into a single man page for std(3),\nwithout detailed descriptions. We don't even install that std(3) page,\nbut remove it before installation. That means only classes are\ndocumented in man pages (including many internal ones that should not be\npublicly documented such as _Deque_base and _Tuple_impl).\n\nlibstdc++-v3/ChangeLog:\n\n\t* doc/doxygen/stdheader.cc: Refactor. Use C++23. Add new\n\theaders.\n\t* scripts/run_doxygen: Fix post-processing of #include\n\tdirectives in man pages. Use new xg++ to compile helper program.", "tree": {"sha": "65b01e7dfdd61ca634fd2063a8e96c548f29bbe9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65b01e7dfdd61ca634fd2063a8e96c548f29bbe9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a5d7c2c802f005f8cf85e0bfb7a77cf13203dae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a5d7c2c802f005f8cf85e0bfb7a77cf13203dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a5d7c2c802f005f8cf85e0bfb7a77cf13203dae"}], "stats": {"total": 313, "additions": 207, "deletions": 106}, "files": [{"sha": "67f54eef02baaa0736f502e9fe86cd5400c556f2", "filename": "libstdc++-v3/doc/doxygen/stdheader.cc", "status": "modified", "additions": 182, "deletions": 97, "changes": 279, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fstdheader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fstdheader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fdoxygen%2Fstdheader.cc?ref=394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "patch": "@@ -1,171 +1,256 @@\n-// This is a slow larval-stage kludge to help massage the generated man\n-// pages.  It's used like this:\n-const char* const usage = \n-\"\\nTakes on stdin, whitespace-separated words of the form\\n\"\n-\"\\n\"\n-\"    [bits/]stl_foo.h\\n\"\n-\"    [bits/]std_foo.h\\n\"\n-\"\\n\"\n-\"and writes on stdout the nearest matching standard header name.\\n\"\n-\"\\n\"\n-\"Takes no command-line arguments.\\n\"\n-\"\\n\";\n-\n-#include <cstdlib>\n #include <string>\n+#include <string_view>\n #include <map>\n+#include <set>\n+#include <algorithm>\n+#include <iterator>\n #include <iostream>\n \n-typedef std::map<std::string, std::string>   Map;\n+// This is a slow larval-stage kludge to help massage the generated man\n+// pages.  It's used like this:\n+const std::string_view usage = R\"(\n+Takes on stdin, whitespace-separated words of the form\n+\n+    [bits/]stl_foo.h\n+    [bits/]std_foo.h\n+\n+and writes on stdout the nearest matching standard header name.\n \n-Map  headers;\n+Takes no command-line arguments.\n+)\";\n+\n+// List of standard headers\n+std::set<std::string_view> std_headers;\n+// Map of partial header filenames to standard headers.\n+std::map<std::string_view, std::string_view>  headers;\n \n void init_map()\n {\n     // Enter the glamourous world of data entry!!  Maintain these!\n+    // Because the map_header function removes common prefixes and suffixes,\n+    // a header \"bits/st[dl]_foo.h\" will automatically map to \"foo\" if that\n+    // is a standard header, so we don't need to list those cases here.\n+    headers[\"atomic_base.h\"]            = \"atomic\";\n+    headers[\"atomic_lockfree_defines.h\"] = \"atomic\";\n+    headers[\"atomic_timed_wait.h\"]      = \"atomic\";\n+    headers[\"atomic_wait.h\"]            = \"atomic\";\n+    headers[\"algorithmfwd.h\"]           = \"algorithm\";\n     headers[\"algo.h\"]                   = \"algorithm\";\n     headers[\"algobase.h\"]               = \"algorithm\";\n-    headers[\"algorithm.h\"]              = \"algorithm\";\n+    headers[\"ranges_algo.h\"]            = \"algorithm\";\n+    headers[\"ranges_algobase.h\"]        = \"algorithm\";\n     headers[\"heap.h\"]                   = \"algorithm\";\n-    headers[\"bitset.h\"]                 = \"bitset\";\n-    headers[\"complex.h\"]                = \"complex\";\n-    //headers[\"construct.h\"]              stl_construct.h entirely internal\n-    headers[\"deque.h\"]                  = \"deque\";\n-    headers[\"deque.tcc\"]                = \"deque\";\n-    headers[\"fstream.h\"]                = \"fstream\";\n-    headers[\"fstream.tcc\"]              = \"fstream\";\n+    headers[\"exception_ptr.h\"]          = \"exception\";\n+    headers[\"nested_exception.h\"]       = \"exception\";\n+    headers[\"fs_dir.h\"]                 = \"filesystem\";\n+    headers[\"fs_fwd.h\"]                 = \"filesystem\";\n+    headers[\"fs_ops.h\"]                 = \"filesystem\";\n+    headers[\"fs_path.h\"]                = \"filesystem\";\n+    headers[\"binders.h\"]                = \"functional\";\n     headers[\"function.h\"]               = \"functional\";\n-    headers[\"functional.h\"]             = \"functional\";\n-    headers[\"iomanip.h\"]                = \"iomanip\";\n+    headers[\"functional_hash.h\"]        = \"functional\";\n+    headers[\"mofunc_impl.h\"]            = \"functional\";\n+    headers[\"move_only_function.h\"]     = \"functional\";\n+    headers[\"invoke.h\"]                 = \"functional\";\n+    headers[\"refwrap.h\"]                = \"functional\";\n+    headers[\"quoted_string.h\"]          = \"iomanip\";\n+    headers[\"ios_base.h\"]               = \"ios\";\n     headers[\"basic_ios.h\"]              = \"ios\";\n     headers[\"basic_ios.tcc\"]            = \"ios\";\n-    headers[\"ios.h\"]                    = \"ios\";\n     headers[\"iosfwd.h\"]                 = \"iosfwd\";\n     headers[\"iostream.h\"]               = \"iostream\";\n-    headers[\"istream.h\"]                = \"istream\";\n-    headers[\"istream.tcc\"]              = \"istream\";\n-    headers[\"iterator.h\"]               = \"iterator\";\n     headers[\"iterator_base_funcs.h\"]    = \"iterator\";\n     headers[\"iterator_base_types.h\"]    = \"iterator\";\n     headers[\"stream_iterator.h\"]        = \"iterator\";\n     headers[\"streambuf_iterator.h\"]     = \"iterator\";\n-    headers[\"limits.h\"]                 = \"limits\";\n-    headers[\"list.h\"]                   = \"list\";\n-    headers[\"list.tcc\"]                 = \"list\";\n+    headers[\"iterator_concepts.h\"]      = \"iterator\";\n+    headers[\"range_access.h\"]           = \"iterator\";\n     headers[\"codecvt.h\"]                = \"locale\";\n-    headers[\"locale.h\"]                 = \"locale\";\n+    headers[\"c++locale.h\"]              = \"locale\";\n     headers[\"localefwd.h\"]              = \"locale\";\n+    headers[\"ctype_base.h\"]             = \"locale\";\n     headers[\"locale_classes.h\"]         = \"locale\";\n+    headers[\"locale_classes.tcc\"]       = \"locale\";\n     headers[\"locale_facets.h\"]          = \"locale\";\n     headers[\"locale_facets.tcc\"]        = \"locale\";\n-    headers[\"map.h\"]                    = \"map\";\n+    headers[\"locale_facets_nonio.h\"]    = \"locale\";\n+    headers[\"locale_facets_nonio.tcc\"]  = \"locale\";\n+    headers[\"locale_conv.h\"]            = \"locale\";\n     headers[\"multimap.h\"]               = \"map\";\n-    headers[\"memory.h\"]                 = \"memory\";\n+    headers[\"memoryfwd.h\"]              = \"memory\";\n+    headers[\"align.h\"]                  = \"memory\";\n+    headers[\"alloc_traits.h\"]           = \"memory\";\n+    headers[\"auto_ptr.h\"]\t\t= \"memory\";\n+    headers[\"construct.h\"]              = \"memory\";\n     headers[\"allocator.h\"]              = \"memory\";\n     headers[\"raw_storage_iter.h\"]       = \"memory\";\n     headers[\"tempbuf.h\"]                = \"memory\";\n     headers[\"uninitialized.h\"]          = \"memory\";\n-    headers[\"numeric.h\"]                = \"numeric\";\n-    headers[\"ostream.h\"]                = \"ostream\";\n-    headers[\"ostream.tcc\"]              = \"ostream\";\n-    headers[\"queue.h\"]                  = \"queue\";\n-    headers[\"set.h\"]                    = \"set\";\n+    headers[\"shared_ptr.h\"]             = \"memory\";\n+    headers[\"shared_ptr_base.h\"]        = \"memory\";\n+    headers[\"shared_ptr_atomic.h\"]      = \"memory\";\n+    headers[\"unique_ptr.h\"]             = \"memory\";\n+    headers[\"ranges_uninitialized.h\"]   = \"memory\";\n+    headers[\"ptr_traits.h\"]             = \"memory\";\n+    headers[\"uses_allocator.h\"]         = \"memory\";\n+    headers[\"uses_allocator_args.h\"]    = \"memory\";\n+    headers[\"unique_lock.h\"]            = \"mutex\";\n+    headers[\"uniform_int_dist.h\"]       = \"random\";\n+    headers[\"ranges_base.h\"]            = \"ranges\";\n+    headers[\"ranges_util.h\"]            = \"ranges\";\n+    headers[\"ranges_cmp.h\"]             = \"functional\";\n+    headers[\"regex_automaton.h\"]        = \"regex\";\n+    headers[\"regex_automaton.tcc\"]      = \"regex\";\n+    headers[\"regex_compiler.h\"]         = \"regex\";\n+    headers[\"regex_compiler.tcc\"]       = \"regex\";\n+    headers[\"regex_constants.h\"]        = \"regex\";\n+    headers[\"regex_error.h\"]            = \"regex\";\n+    headers[\"regex_executor.h\"]         = \"regex\";\n+    headers[\"regex_executor.tcc\"]       = \"regex\";\n+    headers[\"regex_scanner.h\"]          = \"regex\";\n+    headers[\"regex_scanner.tcc\"]        = \"regex\";\n+    headers[\"semaphore_base.h\"]         = \"semaphore\";\n     headers[\"multiset.h\"]               = \"set\";\n-    headers[\"sstream.h\"]                = \"sstream\";\n-    headers[\"sstream.tcc\"]              = \"sstream\";\n-    headers[\"stack.h\"]                  = \"stack\";\n+    headers[\"node_handle.h\"]            = \"set\";\n     headers[\"functexcept.h\"]            = \"stdexcept\";\n-    headers[\"stdexcept.h\"]              = \"stdexcept\";\n-    headers[\"streambuf.h\"]              = \"streambuf\";\n-    headers[\"streambuf.tcc\"]            = \"streambuf\";\n-    headers[\"string.h\"]                 = \"string\";\n     headers[\"char_traits.h\"]            = \"string\";\n+    headers[\"stringfwd.h\"]              = \"string\";\n     headers[\"postypes.h\"]               = \"string\";\n     headers[\"basic_string.h\"]           = \"string\";\n     headers[\"basic_string.tcc\"]         = \"string\";\n-    headers[\"tree.h\"]                   = \"backward/tree.h\";\n+    headers[\"cow_string.h\"]             = \"string\";\n+    headers[\"string_view.tcc\"]          = \"string_view\";\n+    headers[\"this_thread_sleep.h\"]      = \"thread\";\n+    headers[\"tree.h\"]                   = \"map\";\n     headers[\"pair.h\"]                   = \"utility\";\n-    headers[\"utility.h\"]                = \"utility\";\n     headers[\"relops.h\"]                 = \"utility\";\n     headers[\"gslice.h\"]                 = \"valarray\";\n     headers[\"gslice_array.h\"]           = \"valarray\";\n     headers[\"indirect_array.h\"]         = \"valarray\";\n     headers[\"mask_array.h\"]             = \"valarray\";\n     headers[\"slice_array.h\"]            = \"valarray\";\n-    headers[\"valarray.h\"]               = \"valarray\";\n     headers[\"valarray_after.h\"]         = \"valarray\";\n     headers[\"valarray_before.h\"]        = \"valarray\";\n     headers[\"valarray_array.h\"]         = \"valarray\";\n     headers[\"valarray_array.tcc\"]       = \"valarray\";\n     headers[\"valarray_meta.h\"]          = \"valarray\";\n     headers[\"bvector.h\"]                = \"vector\";\n-    headers[\"vector.h\"]                 = \"vector\";\n-    headers[\"vector.tcc\"]               = \"vector\";\n \n     //headers[\"concurrence.h\"]             who knows\n     //headers[\"atomicity.h\"]               who knows\n \n-    // C wrappers -- probably was an easier way to do these, but oh well\n-    headers[\"cassert.h\"]                = \"cassert\";\n-    headers[\"cctype.h\"]                 = \"cctype\";\n-    headers[\"cerrno.h\"]                 = \"cerrno\";\n-    headers[\"cfloat.h\"]                 = \"cfloat\";\n-    headers[\"climits.h\"]                = \"climits\";\n-    headers[\"clocale.h\"]                = \"clocale\";\n-    headers[\"cmath.h\"]                  = \"cmath\";\n-    headers[\"csetjmp.h\"]                = \"csetjmp\";\n-    headers[\"csignal.h\"]                = \"csignal\";\n-    headers[\"cstdarg.h\"]                = \"cstdarg\";\n-    headers[\"cstddef.h\"]                = \"cstddef\";\n-    headers[\"cstdio.h\"]                 = \"cstdio\";\n-    headers[\"cstdlib.h\"]                = \"cstdlib\";\n-    headers[\"cstring.h\"]                = \"cstring\";\n-    headers[\"ctime.h\"]                  = \"ctime\";\n-    headers[\"cwchar.h\"]                 = \"cwchar\";\n-    headers[\"cwctype.h\"]                = \"cwctype\";\n+    headers[\"abs.h\"]                    = \"cstdlib\";\n+    headers[\"specfun.h\"]                = \"cmath\";\n+\n+    // This list is complete as of the October 2021 working draft.\n+    std_headers = {\n+\t\"algorithm\", \"any\", \"array\", \"atomic\",\n+\t\"barrier\", \"bit\", \"bitset\",\n+\t\"charconv\", \"chrono\", \"codecvt\", \"compare\", \"complex\",\n+\t\"concepts\", \"condition_variable\", \"coroutine\",\n+\t\"deque\",\n+\t\"exception\", \"execution\",\n+\t\"filesystem\", \"format\", \"forward_list\", \"fstream\",\n+\t\"functional\", \"future\",\n+\t\"initializer_list\", \"iomanip\", \"ios\", \"iosfwd\",\n+\t\"iostream\", \"istream\", \"iterator\",\n+\t\"latch\", \"limits\", \"list\", \"locale\",\n+\t\"map\", \"memory\", \"memory_resource\", \"mutex\",\n+\t\"new\", \"numbers\", \"numeric\",\n+\t\"optional\", \"ostream\",\n+\t\"queue\",\n+\t\"random\", \"ranges\", \"ratio\", \"regex\",\n+\t\"scoped_allocator\", \"semaphore\", \"set\", \"shared_mutex\",\n+\t\"source_location\", \"span\", \"spanstream\", \"sstream\",\n+\t\"stack\", \"stacktrace\", \"stdexcept\", \"stop_token\",\n+\t\"streambuf\", \"string\", \"string_view\", \"strstream\",\n+\t\"syncstream\", \"system_error\",\n+\t\"thread\", \"tuple\", \"typeindex\", \"typeinfo\", \"type_traits\",\n+\t\"unordered_map\", \"unordered_set\", \"utility\",\n+\t\"valarray\", \"variant\", \"vector\", \"version\",\n+\n+\t\"cassert\", \"cctype\", \"cerrno\", \"cfenv\", \"cfloat\",\n+\t\"cinttypes\", \"climits\", \"clocale\", \"cmath\", \"csetjmp\",\n+\t\"csignal\", \"cstdarg\", \"cstddef\", \"cstdint\", \"cstdio\",\n+\t\"cstdlib\", \"cstring\", \"ctime\", \"cuchar\", \"cwchar\",\n+\t\"cwctype\",\n+\n+\t\"assert.h\", \"ctype.h\", \"errno.h\", \"fenv.h\", \"float.h\",\n+\t\"inttypes.h\", \"limits.h\", \"locale.h\", \"math.h\", \"setjmp.h\",\n+\t\"signal.h\", \"stdarg.h\", \"stddef.h\", \"stdint.h\", \"stdio.h\",\n+\t\"stdlib.h\", \"string.h\", \"time.h\", \"uchar.h\", \"wchar.h\",\n+\t\"wctype.h\",\n+    };\n+\n+    // In case we missed any:\n+    for (const auto& h : headers)\n+\tstd_headers.insert(h.second);\n }\n \n \n-void do_word (std::string const& longheader)\n+std::string_view map_header (std::string_view header)\n {\n-    std::string::size_type start = 0;\n-\n     // if it doesn't contain a \".\" then it's already a std header\n-    if (longheader.find(\".\") == std::string::npos)\n+    if (!header.contains('.'))\n     {\n-        std::cout << longheader << '\\n';\n-        return;\n+\t// make sure it's in the set:\n+\tstd_headers.insert(header);\n+\treturn header;\n     }\n \n-    if (longheader.substr(start,5) == \"bits/\")  start += 5;\n-    if ((longheader.substr(start,4) == \"stl_\") ||\n-        (longheader.substr(start,4) == \"std_\"))\n-    {\n-        start += 4;\n-    }\n+    for (std::string_view prefix : {\"bits/\", \"stl_\", \"std_\"})\n+\tif (header.starts_with(prefix))\n+\t    header.remove_prefix(prefix.size());\n+\n+    if (auto it = headers.find(header); it != headers.end())\n+\treturn it->second;\n+\n+    for (std::string_view ext : {\".h\", \".tcc\"})\n+\tif (header.ends_with(ext))\n+\t{\n+\t    header.remove_suffix(ext.size());\n+\t    break;\n+\t}\n+\n+    if (auto it = std_headers.find(header); it != std_headers.end())\n+\treturn *it;\n+\n+    return {};\n+}\n+\n+std::string map_header_or_complain (std::string header)\n+{\n+    // For <experimental/xxx.h> and <tr1/xxx.h> try to map <xxx.h>\n+    // then add the directory back to it.\n+    if (header.contains('.'))\n+\tfor (std::string_view dir : {\"experimental/\", \"tr1/\"})\n+\t    if (header.starts_with(dir))\n+\t    {\n+\t\tauto h = map_header(header.substr(dir.size()));\n+\t\tif (!h.empty())\n+\t\t    return std::string(dir) + std::string(h);\n+\t\treturn std::string(header);\n+\t    }\n \n-    // come on, gdb, find `p' already...\n-    const char* p = longheader.substr(start).c_str();\n-    Map::iterator word = headers.find(p);\n-    if (word != headers.end())\n-        std::cout << word->second << '\\n';\n-    else std::cout << \"MAYBE_AN_ERROR_MESSAGE_HERE\\n\";\n+    if (auto mapped = map_header(header); !mapped.empty())\n+\treturn std::string(mapped);\n+\n+    std::cerr << \"Could not map <\" << header << \"> to a standard header\\n\";\n+    return std::string(header);\n }\n \n \n-int main (int argc, char**)\n+int main (int argc, char** argv)\n {\n     if (argc > 1)\n     {\n-        std::cerr << usage;\n-\tstd::exit(0);\n+        std::cerr << \"Usage: \" << argv[0] << '\\n' << usage;\n+\treturn 1;\n     }\n \n     init_map();\n \n-    std::string w;\n-    while (std::cin >> w)\n-        do_word (w);\n+    std::transform(std::istream_iterator<std::string>(std::cin), {},\n+\t\t   std::ostream_iterator<std::string>(std::cout),\n+\t\t   map_header_or_complain);\n }\n-\n-"}, {"sha": "6236a071b1a4870f9a4bb7df6e9550e5bd81056d", "filename": "libstdc++-v3/scripts/run_doxygen", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/394f60e6ed9fbf3a833024041ec8ec26bde5aa3b/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fscripts%2Frun_doxygen?ref=394f60e6ed9fbf3a833024041ec8ec26bde5aa3b", "patch": "@@ -269,6 +269,8 @@ find . -name \"* *\" -print0 | xargs -0r rm        # requires GNU tools\n \n # man pages are for functions/types/other entities, not source files\n # directly.  who the heck would type \"man foo.h\" anyhow?\n+# FIXME: This also removes std.3 which is the only place that a lot of\n+# functions are documented. Should we keep it?\n find . -name \"[a-z]*\" -a ! -name \"std_*\" -print | xargs rm\n rm -f *.h.3 *.hpp.3 *config* *.cc.3 *.tcc.3 *_t.3\n #rm ext_*.3 tr1_*.3 debug_*.3\n@@ -278,18 +280,23 @@ rm -f *.h.3 *.hpp.3 *config* *.cc.3 *.tcc.3 *_t.3\n #find . -name \"[a-z]*\" -a ! -name \"std_*\" -print | xargs -i mv {} trash\n #mv *.h.3 *config* *.cc.3 *.tcc.3 *_t.3  trash\n \n+gxx=$($builddir/scripts/testsuite_flags --build-cxx)\n+cppflags=$($builddir/scripts/testsuite_flags --build-includes)\n+cxxflags=\"-Og -g -std=gnu++23\"\n+\n # Standardize the displayed header names.  If anyone who knows perl cares\n # enough to rewrite all this, feel free.  This only gets run once a century,\n # and I'm off getting coffee then anyhow, so I didn't care enough to make\n # this super-fast.\n-g++ ${srcdir}/doc/doxygen/stdheader.cc -o ./stdheader\n-problematic=`egrep -l '#include <.*_.*>' [a-z]*.3`\n+$gxx $cppflags $cxxflags ${srcdir}/doc/doxygen/stdheader.cc -o ./stdheader || exit 1\n+# Doxygen outputs something like \"\\fC#include <unique_lock\\&.h>\\fP\" and\n+# we want that internal header to be replaced with something like <mutex>.\n+problematic=`egrep -l '#include <.*h>' [a-z]*.3`\n for f in $problematic; do\n     # this is also slow, but safe and easy to debug\n     oldh=`sed -n '/fC#include </s/.*<\\(.*\\)>.*/\\1/p' $f`\n-    newh=`echo $oldh | ./stdheader`\n-    sed 's=${oldh}=${newh}=' $f > TEMP\n-    mv TEMP $f\n+    newh=`echo $oldh | sed 's/\\\\\\\\&\\\\././g' | ./stdheader`\n+    sed \"s=${oldh/\\\\/.}=${newh}=\" $f > TEMP && mv TEMP $f\n done\n rm stdheader\n \n@@ -323,10 +330,14 @@ cp ${srcdir}/doc/doxygen/Intro.3 C++Intro.3\n # Why didn't I do this at the start?  Were rabid weasels eating my brain?\n # Who the fsck would \"man std_vector\" when the class isn't named that?\n \n+# If no files match a glob, skip the for-loop:\n+shopt -s nullglob\n # First, deal with nested namespaces.\n-for f in *chrono_*; do\n-    newname=`echo $f | sed 's/chrono_/chrono::/'`\n-    mv $f $newname\n+for ns in chrono filesystem ranges views literals; do\n+  for f in std_${ns}_*; do\n+      newname=`echo $f | sed \"s/std_${ns}_/std::${ns}::/\"`\n+      mv $f $newname\n+  done\n done\n for f in *__debug_*; do\n     newname=`echo $f | sed 's/__debug_/__debug::/'`\n@@ -413,11 +424,16 @@ for f in *_src_*; do\n     rm $f\n done\n \n+# Remove all internal implementation details?\n+# rm std::_[A-Z]*.3 std::__detail*.3\n+\n+shopt -u nullglob\n+\n \n # Also, for some reason, typedefs don't get their own man pages.  Sigh.\n for f in ios streambuf istream ostream iostream stringbuf \\\n \t istringstream ostringstream stringstream filebuf ifstream \\\n-\t ofstream fstream string;\n+\t ofstream fstream string\n do\n     echo \".so man3/std::basic_${f}.3\" > std::${f}.3\n     echo \".so man3/std::basic_${f}.3\" > std::w${f}.3"}]}