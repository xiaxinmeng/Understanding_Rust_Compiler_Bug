{"sha": "3f3c098d9664825071a4d1b1f6ac1b009726082d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2YzYzA5OGQ5NjY0ODI1MDcxYTRkMWIxZjZhYzFiMDA5NzI2MDgyZA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2011-01-13T13:45:00Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2011-01-13T13:45:00Z"}, "message": "s390.c (print_operand_address): Replace 'error' with 'output_operand_lossage'.\n\n2011-01-13  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n\n\t* config/s390/s390.c (print_operand_address): Replace 'error' with\n\t'output_operand_lossage'.\n\t(print_operand): Likewise.\n\nFrom-SVN: r168748", "tree": {"sha": "fa21269d85a6bfff25e01af84a34fda970735277", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa21269d85a6bfff25e01af84a34fda970735277"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f3c098d9664825071a4d1b1f6ac1b009726082d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3c098d9664825071a4d1b1f6ac1b009726082d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f3c098d9664825071a4d1b1f6ac1b009726082d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f3c098d9664825071a4d1b1f6ac1b009726082d/comments", "author": null, "committer": null, "parents": [{"sha": "29fa95ed577bb9080f25c4d3d8c694b40051e87a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29fa95ed577bb9080f25c4d3d8c694b40051e87a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29fa95ed577bb9080f25c4d3d8c694b40051e87a"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "1a3d1221813816b1fcdaa2122f8cbebadf89b533", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3c098d9664825071a4d1b1f6ac1b009726082d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3c098d9664825071a4d1b1f6ac1b009726082d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f3c098d9664825071a4d1b1f6ac1b009726082d", "patch": "@@ -1,3 +1,9 @@\n+2011-01-13  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c (print_operand_address): Replace 'error' with\n+\t'output_operand_lossage'.\n+\t(print_operand): Likewise.\n+\n 2011-01-13  Jeff Law  <law@redhat.com>\n \n \t* PR rtl-optimization/39077"}, {"sha": "efbf03503d014c3a9773949985275dca0757aaaf", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f3c098d9664825071a4d1b1f6ac1b009726082d/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f3c098d9664825071a4d1b1f6ac1b009726082d/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=3f3c098d9664825071a4d1b1f6ac1b009726082d", "patch": "@@ -5131,7 +5131,8 @@ print_operand_address (FILE *file, rtx addr)\n     {\n       if (!TARGET_Z10)\n \t{\n-\t  error (\"symbolic memory references are only supported on z10 or later\");\n+\t  output_operand_lossage (\"symbolic memory references are \"\n+\t\t\t\t  \"only supported on z10 or later\");\n \t  return;\n \t}\n       output_addr_const (file, addr);\n@@ -5200,7 +5201,8 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == GT)\n \tfprintf (file, \"h\");\n       else\n-\terror (\"invalid comparison operator for 'E' output modifier\");\n+\toutput_operand_lossage (\"invalid comparison operator \"\n+\t\t\t\t\"for 'E' output modifier\");\n       return;\n \n     case 'J':\n@@ -5220,7 +5222,7 @@ print_operand (FILE *file, rtx x, int code)\n \t  assemble_name (file, get_some_local_dynamic_name ());\n \t}\n       else\n-\terror (\"invalid reference for 'J' output modifier\");\n+\toutput_operand_lossage (\"invalid reference for 'J' output modifier\");\n       return;\n \n     case 'G':\n@@ -5234,7 +5236,8 @@ print_operand (FILE *file, rtx x, int code)\n \n \tif (!MEM_P (x))\n \t  {\n-\t    error (\"memory reference expected for 'O' output modifier\");\n+\t    output_operand_lossage (\"memory reference expected for \"\n+\t\t\t\t    \"'O' output modifier\");\n \t    return;\n \t  }\n \n@@ -5244,7 +5247,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n \t    || ad.indx)\n \t  {\n-\t    error (\"invalid address for 'O' output modifier\");\n+\t    output_operand_lossage (\"invalid address for 'O' output modifier\");\n \t    return;\n \t  }\n \n@@ -5262,7 +5265,8 @@ print_operand (FILE *file, rtx x, int code)\n \n \tif (!MEM_P (x))\n \t  {\n-\t    error (\"memory reference expected for 'R' output modifier\");\n+\t    output_operand_lossage (\"memory reference expected for \"\n+\t\t\t\t    \"'R' output modifier\");\n \t    return;\n \t  }\n \n@@ -5272,7 +5276,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n \t    || ad.indx)\n \t  {\n-\t    error (\"invalid address for 'R' output modifier\");\n+\t    output_operand_lossage (\"invalid address for 'R' output modifier\");\n \t    return;\n \t  }\n \n@@ -5290,7 +5294,8 @@ print_operand (FILE *file, rtx x, int code)\n \n \tif (!MEM_P (x))\n \t  {\n-\t    error (\"memory reference expected for 'S' output modifier\");\n+\t    output_operand_lossage (\"memory reference expected for \"\n+\t\t\t\t    \"'S' output modifier\");\n \t    return;\n \t  }\n \tret = s390_decompose_address (XEXP (x, 0), &ad);\n@@ -5299,7 +5304,7 @@ print_operand (FILE *file, rtx x, int code)\n \t    || (ad.base && !REGNO_OK_FOR_BASE_P (REGNO (ad.base)))\n \t    || ad.indx)\n \t  {\n-\t    error (\"invalid address for 'S' output modifier\");\n+\t    output_operand_lossage (\"invalid address for 'S' output modifier\");\n \t    return;\n \t  }\n \n@@ -5319,7 +5324,8 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == MEM)\n \tx = change_address (x, VOIDmode, plus_constant (XEXP (x, 0), 4));\n       else\n-\terror (\"register or memory expression expected for 'N' output modifier\");\n+\toutput_operand_lossage (\"register or memory expression expected \"\n+\t\t\t\t\"for 'N' output modifier\");\n       break;\n \n     case 'M':\n@@ -5328,7 +5334,8 @@ print_operand (FILE *file, rtx x, int code)\n       else if (GET_CODE (x) == MEM)\n \tx = change_address (x, VOIDmode, plus_constant (XEXP (x, 0), 8));\n       else\n-\terror (\"register or memory expression expected for 'M' output modifier\");\n+\toutput_operand_lossage (\"register or memory expression expected \"\n+\t\t\t\t\"for 'M' output modifier\");\n       break;\n \n     case 'Y':\n@@ -5387,21 +5394,26 @@ print_operand (FILE *file, rtx x, int code)\n       else if (code == 'x')\n         fprintf (file, HOST_WIDE_INT_PRINT_DEC, CONST_DOUBLE_LOW (x) & 0xffff);\n       else if (code == 'h')\n-        fprintf (file, HOST_WIDE_INT_PRINT_DEC, ((CONST_DOUBLE_LOW (x) & 0xffff) ^ 0x8000) - 0x8000);\n+        fprintf (file, HOST_WIDE_INT_PRINT_DEC,\n+\t\t ((CONST_DOUBLE_LOW (x) & 0xffff) ^ 0x8000) - 0x8000);\n       else\n \t{\n \t  if (code == 0)\n-\t    error (\"invalid constant - try using an output modifier\");\n+\t    output_operand_lossage (\"invalid constant - try using \"\n+\t\t\t\t    \"an output modifier\");\n \t  else\n-\t    error (\"invalid constant for output modifier '%c'\", code);\n+\t    output_operand_lossage (\"invalid constant for output modifier '%c'\",\n+\t\t\t\t    code);\n \t}\n       break;\n \n     default:\n       if (code == 0)\n-\terror (\"invalid expression - try using an output modifier\");\n+\toutput_operand_lossage (\"invalid expression - try using \"\n+\t\t\t\t\"an output modifier\");\n       else\n-\terror (\"invalid expression for output modifier '%c'\", code);\n+\toutput_operand_lossage (\"invalid expression for output \"\n+\t\t\t\t\"modifier '%c'\", code);\n       break;\n     }\n }"}]}