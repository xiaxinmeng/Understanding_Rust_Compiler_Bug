{"sha": "a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBlN2UzNmViZmU3NDgwNTdhNmE2ZTEwNWRiYWEzMTVlYjBlNDZhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-07T18:40:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-07T18:40:06Z"}, "message": "Add underscores to local vars in selftest macros\n\nAllows functions doing selftests to take parameters with names like\n\"actual\".\n\n2017-12-07  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\t* selftest.h (ASSERT_TRUE_AT, ASSERT_FALSE_AT, ASSERT_EQ_AT)\n\t(ASSERT_NE, ASSERT_PRED1): Add underscores to local variable names\n\t* selftest-rtl.h (ASSERT_RTX_EQ, ASSERT_RTX_PTR_EQ): Likewise.\n\nFrom-SVN: r255473", "tree": {"sha": "16d48915e75aad22391338bf85e0728f15a72eb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16d48915e75aad22391338bf85e0728f15a72eb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/comments", "author": null, "committer": null, "parents": [{"sha": "fbdec14e80e9399cd301ed30340268bdc5b5c2eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbdec14e80e9399cd301ed30340268bdc5b5c2eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbdec14e80e9399cd301ed30340268bdc5b5c2eb"}], "stats": {"total": 64, "additions": 35, "deletions": 29}, "files": [{"sha": "21aa49b05bfc84e3adf6b3848f7deaf4e8d614c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "patch": "@@ -1,3 +1,9 @@\n+2017-12-07  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\t* selftest.h (ASSERT_TRUE_AT, ASSERT_FALSE_AT, ASSERT_EQ_AT)\n+\t(ASSERT_NE, ASSERT_PRED1): Add underscores to local variable names\n+\t* selftest-rtl.h (ASSERT_RTX_EQ, ASSERT_RTX_PTR_EQ): Likewise.\n+\n 2017-12-07  Bin Cheng  <bin.cheng@arm.com>\n \t    Richard Biener  <rguenther@suse.de>\n "}, {"sha": "b96548cf9d166b6b0818c7c99ab9238417495dd3", "filename": "gcc/selftest-rtl.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2Fselftest-rtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2Fselftest-rtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest-rtl.h?ref=a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "patch": "@@ -49,8 +49,8 @@ assert_rtl_dump_eq (const location &loc, const char *expected_dump, rtx x,\n \n #define ASSERT_RTX_EQ(EXPECTED, ACTUAL) \t\t\t\t\\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_RTX_EQ (\" #EXPECTED \", \" #ACTUAL \")\";\t\\\n-  ::selftest::assert_rtx_eq_at (SELFTEST_LOCATION, desc, (EXPECTED),\t\\\n+  const char *desc_ = \"ASSERT_RTX_EQ (\" #EXPECTED \", \" #ACTUAL \")\";\t\\\n+  ::selftest::assert_rtx_eq_at (SELFTEST_LOCATION, desc_, (EXPECTED),\t\\\n \t\t\t\t(ACTUAL));\t\t\t\t\\\n   SELFTEST_END_STMT\n \n@@ -62,8 +62,8 @@ extern void assert_rtx_eq_at (const location &, const char *, rtx, rtx);\n \n #define ASSERT_RTX_PTR_EQ(EXPECTED, ACTUAL) \\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_RTX_PTR_EQ (\" #EXPECTED \", \" #ACTUAL \")\";  \\\n-  ::selftest::assert_rtx_ptr_eq_at (SELFTEST_LOCATION, desc, (EXPECTED), \\\n+  const char *desc_ = \"ASSERT_RTX_PTR_EQ (\" #EXPECTED \", \" #ACTUAL \")\";  \\\n+  ::selftest::assert_rtx_ptr_eq_at (SELFTEST_LOCATION, desc_, (EXPECTED), \\\n \t\t\t\t    (ACTUAL));\t\t\t\t\\\n   SELFTEST_END_STMT\n "}, {"sha": "dbb246b9b88f9d4b9b200cdc04a7685cf956eb99", "filename": "gcc/selftest.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=a0e7e36ebfe748057a6a6e105dbaa315eb0e46ac", "patch": "@@ -220,12 +220,12 @@ extern int num_passes;\n \n #define ASSERT_TRUE_AT(LOC, EXPR)\t\t\t\\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_TRUE (\" #EXPR \")\";\t\t\\\n-  bool actual = (EXPR);\t\t\t\t\t\\\n-  if (actual)\t\t\t\t\t\t\\\n-    ::selftest::pass ((LOC), desc);\t\t\t\\\n+  const char *desc_ = \"ASSERT_TRUE (\" #EXPR \")\";\t\\\n+  bool actual_ = (EXPR);\t\t\t\t\\\n+  if (actual_)\t\t\t\t\t\t\\\n+    ::selftest::pass ((LOC), desc_);\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n-    ::selftest::fail ((LOC), desc);\t\t\t\\\n+    ::selftest::fail ((LOC), desc_);\t\t\t\\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPR and coerce to bool, calling\n@@ -240,12 +240,12 @@ extern int num_passes;\n \n #define ASSERT_FALSE_AT(LOC, EXPR)\t\t\t\t\\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_FALSE (\" #EXPR \")\";\t\t\t\\\n-  bool actual = (EXPR);\t\t\t\t\t\t\t\\\n-  if (actual)\t\t\t\t\t\t\t\t\\\n-    ::selftest::fail ((LOC), desc);\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\t\\\n-    ::selftest::pass ((LOC), desc);\t\t\t\t\t\\\n+  const char *desc_ = \"ASSERT_FALSE (\" #EXPR \")\";\t\t\\\n+  bool actual_ = (EXPR);\t\t\t\t\t\\\n+  if (actual_)\t\t\t\t\t\t\t\\\n+    ::selftest::fail ((LOC), desc_);\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    ::selftest::pass ((LOC), desc_);\t\t\t\t\\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPECTED and ACTUAL and compare them with ==, calling\n@@ -260,11 +260,11 @@ extern int num_passes;\n \n #define ASSERT_EQ_AT(LOC, EXPECTED, ACTUAL)\t\t       \\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t       \\\n-  const char *desc = \"ASSERT_EQ (\" #EXPECTED \", \" #ACTUAL \")\"; \\\n+  const char *desc_ = \"ASSERT_EQ (\" #EXPECTED \", \" #ACTUAL \")\"; \\\n   if ((EXPECTED) == (ACTUAL))\t\t\t\t       \\\n-    ::selftest::pass ((LOC), desc);\t\t\t       \\\n+    ::selftest::pass ((LOC), desc_);\t\t\t       \\\n   else\t\t\t\t\t\t\t       \\\n-    ::selftest::fail ((LOC), desc);\t\t\t       \\\n+    ::selftest::fail ((LOC), desc_);\t\t\t       \\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPECTED and ACTUAL and compare them with !=, calling\n@@ -273,11 +273,11 @@ extern int num_passes;\n \n #define ASSERT_NE(EXPECTED, ACTUAL)\t\t\t       \\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t       \\\n-  const char *desc = \"ASSERT_NE (\" #EXPECTED \", \" #ACTUAL \")\"; \\\n+  const char *desc_ = \"ASSERT_NE (\" #EXPECTED \", \" #ACTUAL \")\"; \\\n   if ((EXPECTED) != (ACTUAL))\t\t\t\t       \\\n-    ::selftest::pass (SELFTEST_LOCATION, desc);\t\t\t       \\\n+    ::selftest::pass (SELFTEST_LOCATION, desc_);\t       \\\n   else\t\t\t\t\t\t\t       \\\n-    ::selftest::fail (SELFTEST_LOCATION, desc);\t\t\t       \\\n+    ::selftest::fail (SELFTEST_LOCATION, desc_);\t       \\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPECTED and ACTUAL and compare them with strcmp, calling\n@@ -313,14 +313,14 @@ extern int num_passes;\n /* Evaluate PRED1 (VAL1), calling ::selftest::pass if it is true,\n    ::selftest::fail if it is false.  */\n \n-#define ASSERT_PRED1(PRED1, VAL1)\t\t\t\\\n-  SELFTEST_BEGIN_STMT\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_PRED1 (\" #PRED1 \", \" #VAL1 \")\";\t\\\n-  bool actual = (PRED1) (VAL1);\t\t\t\t\\\n-  if (actual)\t\t\t\t\t\t\\\n-    ::selftest::pass (SELFTEST_LOCATION, desc);\t\t\t\\\n-  else\t\t\t\t\t\t\t\\\n-    ::selftest::fail (SELFTEST_LOCATION, desc);\t\t\t\\\n+#define ASSERT_PRED1(PRED1, VAL1)\t\t\t\t\\\n+  SELFTEST_BEGIN_STMT\t\t\t\t\t\t\\\n+  const char *desc_ = \"ASSERT_PRED1 (\" #PRED1 \", \" #VAL1 \")\";\t\\\n+  bool actual_ = (PRED1) (VAL1);\t\t\t\t\\\n+  if (actual_)\t\t\t\t\t\t\t\\\n+    ::selftest::pass (SELFTEST_LOCATION, desc_);\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    ::selftest::fail (SELFTEST_LOCATION, desc_);\t\t\\\n   SELFTEST_END_STMT\n \n #define SELFTEST_BEGIN_STMT do {"}]}