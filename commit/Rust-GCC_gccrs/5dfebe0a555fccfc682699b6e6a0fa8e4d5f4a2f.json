{"sha": "5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRmZWJlMGE1NTVmY2NmYzY4MjY5OWI2ZTZhMGZhOGU0ZDVmNGEyZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-29T09:24:34Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2010-06-29T09:24:34Z"}, "message": "re PR rtl-optimization/44659 (Combiner fails to match QI cmp patterns with upper 8bit register)\n\n\tPR rtl-optimization/44659\n\t* combine.c (make_compound_operation) <SUBREG>: Do not return the\n\tresult of force_to_mode if it partially re-expanded the compound.\n\nFrom-SVN: r161523", "tree": {"sha": "a099fe4257b48370bc3e7cbd10d363d74ea4eb12", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a099fe4257b48370bc3e7cbd10d363d74ea4eb12"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/comments", "author": null, "committer": null, "parents": [{"sha": "4f036d9b3f06a7c05308cd5fedb6724c3de120f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f036d9b3f06a7c05308cd5fedb6724c3de120f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f036d9b3f06a7c05308cd5fedb6724c3de120f1"}], "stats": {"total": 173, "additions": 152, "deletions": 21}, "files": [{"sha": "7eeef8dfd087fe3130b0561e78081214c8b89008", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -1,7 +1,14 @@\n+2010-06-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR rtl-optimization/44659\n+\t* combine.c (make_compound_operation) <SUBREG>: Do not return the\n+\tresult of force_to_mode if it partially re-expanded the compound.\n+\n 2010-06-28  Jan Hubicka  <jh@suse.cz>\n \n \tPR middle-end/44671\n-\t* ipa-split.c (test_nonssa_use, mark_nonssa_use): Check also uses of RESULT_DECL.\n+\t* ipa-split.c (test_nonssa_use, mark_nonssa_use): Check also uses of\n+\tRESULT_DECL.\n \n 2010-06-28  Anatoly Sokolov  <aesok@post.ru>\n \n@@ -22,7 +29,7 @@\n \tfold_unary_loc, fold_negate_const, fold_abs_const, fold_not_const,\n \tround_up_loc): Adjust call to force_fit_type_double.\n \n-2010-06-28  Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n+2010-06-28  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n \n \t* config/rs6000/rs6000.h (PROCESSOR_TITAN): Declare.\n \n@@ -62,7 +69,7 @@\n \t* ipa-inline.c (add_new_edges_to_heap): Do not add edges to uninlinable\n \tfunctions.\n \n-2010-06-28  Philipp Tomsich <philipp.tomsich@theobroma-systems.com>\n+2010-06-28  Philipp Tomsich  <philipp.tomsich@theobroma-systems.com>\n \n \t* config.gcc (powerpc*-*-*): Handle titan.\n \t* config/rs6000/rs6000.c (titan_cost): New costs.\n@@ -104,7 +111,7 @@\n \t* omp-low.c (maybe_catch_exception): Likewise.\n \t* Makefile.in: Update dependencies.\n \n-2010-06-28  Bingfeng Mei <bmei@broadcom.com>\n+2010-06-28  Bingfeng Mei  <bmei@broadcom.com>\n \n         * cgraph.h (struct varpool_node): new used_from_object_file flag.\n         (struct cgraph_local_info): new used_from_object_file flag.\n@@ -132,8 +139,8 @@\n \n \tPR middle-end/44671\n \tPR middle-end/44686\n-\t* tree.c (build_function_decl_skip_args): Clear DECL_BUILT_IN on signature\n-\tchange.\n+\t* tree.c (build_function_decl_skip_args): Clear DECL_BUILT_IN on\n+\tsignature change.\n \t* ipa-split.c (split_function): Always clear DECL_BUILT_IN.\n \t* ipa-prop.c (ipa_modify_formal_parameters): Likewise.\n \n@@ -501,8 +508,8 @@\n \tfunctions for dealing with three-operand statements.\n \t* tree.c (commutative_ternary_tree_code): New function.\n \t* tree.h (commutative_ternary_tree_code): Declare it.\n-\t* tree-vrp.c (gimple_assign_nonnegative_warnv_p): Return false for ternary\n-\tstatements.\n+\t* tree-vrp.c (gimple_assign_nonnegative_warnv_p): Return false for\n+\tternary statements.\n \t(gimple_assign_nonzero_warnv_p): Likewise.\n \t* tree-ssa-sccvn.c (stmt_has_constants): Handle GIMPLE_TERNARY_RHS.\n \t* tree-ssa-ccp.c (get_rhs_assign_op_for_ccp): New static function.\n@@ -3050,7 +3057,7 @@\n \t* tree-inline.c (expand_call_inline): Pass translated return value of\n \tcgraph_inline_failed_string to diagnostic function.\n \n-2010-06-08  Andrew Pinski <pinskia@gmail.com>\n+2010-06-08  Andrew Pinski  <pinskia@gmail.com>\n \t    Shujing Zhao  <pearly.zhao@oracle.com>\n \n \tPR c/37724"}, {"sha": "d3305cb4abe8da3c143d075fb2f835dcc85edefb", "filename": "gcc/combine.c", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -7277,32 +7277,38 @@ make_compound_operation (rtx x, enum rtx_code in_code)\n       /* Call ourselves recursively on the inner expression.  If we are\n \t narrowing the object and it has a different RTL code from\n \t what it originally did, do this SUBREG as a force_to_mode.  */\n-\n-      tem = make_compound_operation (SUBREG_REG (x), in_code);\n-\n       {\n-\trtx simplified = simplify_subreg (mode, tem, GET_MODE (SUBREG_REG (x)),\n-\t\t\t\t\t  SUBREG_BYTE (x));\n+\trtx inner = SUBREG_REG (x), simplified;\n+\t\n+\ttem = make_compound_operation (inner, in_code);\n \n+\tsimplified\n+\t  = simplify_subreg (mode, tem, GET_MODE (inner), SUBREG_BYTE (x));\n \tif (simplified)\n \t  tem = simplified;\n \n-\tif (GET_CODE (tem) != GET_CODE (SUBREG_REG (x))\n-\t    && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (SUBREG_REG (x)))\n+\tif (GET_CODE (tem) != GET_CODE (inner)\n+\t    && GET_MODE_SIZE (mode) < GET_MODE_SIZE (GET_MODE (inner))\n \t    && subreg_lowpart_p (x))\n \t  {\n-\t    rtx newer = force_to_mode (tem, mode, ~(HOST_WIDE_INT) 0,\n-\t\t\t\t       0);\n+\t    rtx newer = force_to_mode (tem, mode, ~(HOST_WIDE_INT) 0, 0);\n \n \t    /* If we have something other than a SUBREG, we might have\n \t       done an expansion, so rerun ourselves.  */\n \t    if (GET_CODE (newer) != SUBREG)\n \t      newer = make_compound_operation (newer, in_code);\n \n \t    /* force_to_mode can expand compounds.  If it just re-expanded the\n-\t       compound use gen_lowpart instead to convert to the desired\n-\t       mode.  */\n-\t    if (rtx_equal_p (newer, x))\n+\t       compound, use gen_lowpart to convert to the desired mode.  */\n+\t    if (rtx_equal_p (newer, x)\n+\t\t/* Likewise if it re-expanded the compound only partially.\n+\t\t   This happens for SUBREG of ZERO_EXTRACT if they extract\n+\t\t   the same number of bits.  */\n+\t\t|| (GET_CODE (newer) == SUBREG\n+\t\t    && (GET_CODE (SUBREG_REG (newer)) == LSHIFTRT\n+\t\t\t|| GET_CODE (SUBREG_REG (newer)) == ASHIFTRT)\n+\t\t    && GET_CODE (inner) == AND\n+\t\t    && rtx_equal_p (SUBREG_REG (newer), XEXP (inner, 0))))\n \t      return gen_lowpart (GET_MODE (x), tem);\n \n \t    return newer;"}, {"sha": "958ddefc128704c69701acdff86b8c55c02798ee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -1,3 +1,13 @@\n+2010-06-29  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR rtl-optimization/44659\n+\t* gcc.target/i386/extract-1.c: New.\n+\t* gcc.target/i386/extract-2.c: Likewise.\n+\t* gcc.target/i386/extract-3.c: Likewise.\n+\t* gcc.target/i386/extract-4.c: Likewise.\n+\t* gcc.target/i386/extract-5.c: Likewise.\n+\t* gcc.target/i386/extract-6.c: Likewise.\n+\n 2010-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/44682"}, {"sha": "102beb230ac1892e1f34789d92d4a757f14098b7", "filename": "gcc/testsuite/gcc.target/i386/extract-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-1.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+int\n+foo (unsigned char x, unsigned char y)\n+{\n+   return (x % y) != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"test\\[b\\]?\\[^\\\\n\\]*%\\[a-d\\]l\" } } */"}, {"sha": "3bb5f154c4e51d2b8105b31e908c2cdbbeb37648", "filename": "gcc/testsuite/gcc.target/i386/extract-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-2.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+int\n+foo (unsigned char x, unsigned char y)\n+{\n+   return (x % y) > 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-d\\]h\" 1 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-d\\]l\" } } */"}, {"sha": "520bf3bb5579b7c0a22da25d3dcea51bd8022bd3", "filename": "gcc/testsuite/gcc.target/i386/extract-3.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-3.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+typedef struct\n+{\n+  unsigned char c1;\n+  unsigned char c2;\n+  unsigned char c3;\n+  unsigned char c4;\n+} foo_t;\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (foo_t x)\n+{\n+   return x.c2 != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"test\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+l\" } } */"}, {"sha": "716ae2299eaa6c7b10985091ad3d2373b001e2de", "filename": "gcc/testsuite/gcc.target/i386/extract-4.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-4.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+typedef struct\n+{\n+  unsigned char c1;\n+  unsigned char c2;\n+  unsigned char c3;\n+  unsigned char c4;\n+} foo_t;\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (foo_t x)\n+{\n+   return x.c2 > 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+h\" 1 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+l\" } } */"}, {"sha": "a488dafa20fe0dc5dc8e3225df4ca5bbe86e0545", "filename": "gcc/testsuite/gcc.target/i386/extract-5.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-5.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+typedef struct\n+{\n+  unsigned int c1:8;\n+  unsigned int c2:8;\n+  unsigned int c3:8;\n+  unsigned int c4:8;\n+} foo_t;\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (foo_t x)\n+{\n+   return x.c2 != 0;\n+}\n+\n+/* { dg-final { scan-assembler-not \"test\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+l\" } } */"}, {"sha": "1440ec3be35ae67f5c47f19339f6a995d50a1a85", "filename": "gcc/testsuite/gcc.target/i386/extract-6.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fextract-6.c?ref=5dfebe0a555fccfc682699b6e6a0fa8e4d5f4a2f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mtune=generic\" } */\n+\n+typedef struct\n+{\n+  unsigned int c1:8;\n+  unsigned int c2:8;\n+  unsigned int c3:8;\n+  unsigned int c4:8;\n+\n+} foo_t;\n+\n+int\n+#ifndef __x86_64__\n+__attribute__((regparm(3)))\n+#endif\n+foo (foo_t x)\n+{\n+   return x.c2 > 4;\n+}\n+\n+/* { dg-final { scan-assembler-times \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+h\" 1 } } */\n+/* { dg-final { scan-assembler-not \"cmp\\[b\\]?\\[^\\\\n\\]*%\\[a-z0-9\\]+l\" } } */"}]}