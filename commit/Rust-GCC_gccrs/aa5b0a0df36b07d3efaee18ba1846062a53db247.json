{"sha": "aa5b0a0df36b07d3efaee18ba1846062a53db247", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE1YjBhMGRmMzZiMDdkM2VmYWVlMThiYTE4NDYwNjJhNTNkYjI0Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-22T18:38:24Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-22T18:38:24Z"}, "message": "libgo: Support multilib testing.\n\nFrom Rainer Orth.\n\nFrom-SVN: r172865", "tree": {"sha": "0fb47b3770da447ec0f10969f8ee531a5021b194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fb47b3770da447ec0f10969f8ee531a5021b194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa5b0a0df36b07d3efaee18ba1846062a53db247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5b0a0df36b07d3efaee18ba1846062a53db247", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa5b0a0df36b07d3efaee18ba1846062a53db247", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa5b0a0df36b07d3efaee18ba1846062a53db247/comments", "author": null, "committer": null, "parents": [{"sha": "90eadacd1e57a500950b9727b061420d88262d6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90eadacd1e57a500950b9727b061420d88262d6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90eadacd1e57a500950b9727b061420d88262d6f"}], "stats": {"total": 256, "additions": 180, "deletions": 76}, "files": [{"sha": "c29d222cb7bfe474c99c13b9daef1b9ace6a98d1", "filename": "libgo/Makefile.am", "status": "modified", "additions": 90, "deletions": 38, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5b0a0df36b07d3efaee18ba1846062a53db247/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5b0a0df36b07d3efaee18ba1846062a53db247/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=aa5b0a0df36b07d3efaee18ba1846062a53db247", "patch": "@@ -1544,12 +1544,16 @@ GOTESTFLAGS =\n \n # Check a package.\n CHECK = \\\n-\tGC=\"$(GOC) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs -Wl,-R,`${PWD_COMMAND}`/.libs\"; \\\n+\tGC=\"$(GOC) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\\n \tMAKE=\"$(MAKE)\"; \\\n \texport MAKE; \\\n+\tlibgccdir=`${GOC} -print-libgcc-file-name | sed -e 's|/[^/]*$$||'`; \\\n+\tLD_LIBRARY_PATH=\"`${PWD_COMMAND}`/.libs:$${libgccdir}:${LD_LIBRARY_PATH}\"; \\\n+\tLD_LIBRARY_PATH=`echo $${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+\texport LD_LIBRARY_PATH; \\\n \trm -f $@-testsum $@-testlog; \\\n \tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n \ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n@@ -3065,55 +3069,103 @@ TEST_PACKAGES = \\\n \ttesting/quick/check \\\n \ttesting/script/check\n \n+check: check-tail\n+check-recursive: check-head\n+\n+check-head:\n+\t@echo \"Test Run By $${USER} on `date`\" > libgo.head\n+\t@echo \"Native configuration is $(host_triplet)\" >> libgo.head\n+\t@echo >> libgo.head\n+\t@echo \"\t\t=== libgo tests ===\" >> libgo.head\n+\t@echo >> libgo.head\n+\n+check-tail: check-recursive check-multi\n+\t@lib=`${PWD_COMMAND} | sed -e 's,^.*/\\([^/][^/]*\\)$$,\\1,'`; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  mv ../$${dir}/$${lib}/libgo.sum ../$${dir}/$${lib}/libgo.sum.sep; \\\n+\t  mv ../$${dir}/$${lib}/libgo.log ../$${dir}/$${lib}/libgo.log.sep; \\\n+\tdone; \\\n+\tmv libgo.head libgo.sum; \\\n+\tcp libgo.sum libgo.log; \\\n+\techo \"Schedule of variations:\" >> libgo.sum; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  multidir=../$${dir}/$${lib}; \\\n+\t  multivar=`cat $${multidir}/libgo.var`; \\\n+\t  echo \"    $${multivar}\" >> libgo.sum; \\\n+\tdone; \\\n+\techo >> libgo.sum; \\\n+\tpass=0; fail=0; untested=0; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  multidir=../$${dir}/$${lib}; \\\n+\t  multivar=`cat $${multidir}/libgo.var`; \\\n+\t  echo \"Running target $${multivar}\" >> libgo.sum; \\\n+\t  echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum; \\\n+\t  cat $${multidir}/libgo.sum.sep >> libgo.sum; \\\n+\t  cat $${multidir}/libgo.log.sep >> libgo.log; \\\n+\t  if test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"\t\t=== libgo Summary for $${multivar} ===\" >> libgo.sum; \\\n+\t    echo >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c PASS $${multidir}/libgo.sum.sep`; \\\n+\t  pass=`expr $$pass + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of expected passes\t\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c FAIL $${multidir}/libgo.sum.sep`; \\\n+\t  fail=`expr $$fail + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of unexpected failures\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c UNTESTED $${multidir}/libgo.sum.sep`; \\\n+\t  untested=`expr $$untested + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of untested testcases\t\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\tdone; \\\n+\techo >> libgo.sum; \\\n+\techo \"\t\t=== libgo Summary ===\" >> libgo.sum; \\\n+\techo >> libgo.sum; \\\n+\tif test \"$$pass\" -ne \"0\"; then \\\n+\t  echo \"# of expected passes\t\t$$pass\" >> libgo.sum; \\\n+\tfi; \\\n+\tif test \"$$fail\" -ne \"0\"; then \\\n+\t  echo \"# of unexpected failures\t$$fail\" >> libgo.sum; \\\n+\tfi; \\\n+\tif test \"$$untested\" -ne \"0\"; then \\\n+\t  echo \"# of untested testcases\t\t$$untested\" >> libgo.sum; \\\n+\tfi; \\\n+\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n+\techo >> libgo.log; \\\n+\techo \"runtest completed at `date`\" >> libgo.log; \\\n+\tif test \"$$fail\" -ne \"0\"; then \\\n+\t  status=1; \\\n+\telse \\\n+\t  status=0; \\\n+\tfi; \\\n+\texit $$status\n+\n check-am:\n \t@rm -f libgo.sum libgo.log libgo.tail\n-\t@echo \"Test Run By $${USER} on `date`\" > libgo.sum\n-\t@echo \"Native configuration is $(host_triplet)\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"\t\t=== libgo tests ===\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"Schedule of variations:\" >> libgo.sum\n-\t@echo \"    unix\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"Running target unix\" >> libgo.sum\n-\t@echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum\n-\t@cp libgo.sum libgo.log\n-\t@echo > libgo.tail\n-\t@echo \"\t\t=== libgo summary ===\" >> libgo.tail\n-\t@echo >> libgo.tail\n+\t@multivar=\"unix\"; \\\n+\t[ -z \"$(MULTIFLAGS)\" ] || multivar=\"$${multivar}/$(MULTIFLAGS)\"; \\\n+\techo \"$${multivar}\" > libgo.var\n \t@for f in $(TEST_PACKAGES); do \\\n \t   rm -f $$f-testsum $$f-testlog; \\\n \t done\n-\t@$(MAKE) -k $(TEST_PACKAGES); \\\n-\tstatus=$$?; \\\n-\tfor f in $(TEST_PACKAGES); do \\\n+\t-@$(MAKE) -k $(TEST_PACKAGES)\n+\t@for f in $(TEST_PACKAGES); do \\\n \t  if test -f $$f-testsum; then \\\n \t    cat $$f-testsum >> libgo.sum; \\\n \t  fi; \\\n \t  if test -f $$f-testlog; then \\\n \t    cat $$f-testlog >> libgo.log; \\\n \t  fi; \\\n-\tdone; \\\n-\tp=`grep -c PASS libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of expected passes\t\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tp=`grep -c FAIL libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of unexpected failures\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tp=`grep -c UNTESTED libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of untested testcases\t\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tcat libgo.tail >> libgo.sum; \\\n-\tcat libgo.tail >> libgo.log; \\\n-\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n-\techo >> libgo.log; \\\n-\techo \"runtest completed at `date`\" >> libgo.log; \\\n-\texit $$status\n+\tdone\n+\n+check-multi:\n+\t$(MULTIDO) $(AM_MAKEFLAGS) DO=check-am multi-do # $(MAKE)\n \n-MOSTLYCLEAN_FILES = libgo.tail\n+MOSTLYCLEAN_FILES = libgo.head libgo.sum.sep libgo.log.sep\n \n mostlyclean-local:\n \tfind . -name '*.lo' -print | xargs $(LIBTOOL) --mode=clean rm -f"}, {"sha": "1d6f62c44f6f9228f91d1a072def357fad6301c8", "filename": "libgo/Makefile.in", "status": "modified", "additions": 90, "deletions": 38, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa5b0a0df36b07d3efaee18ba1846062a53db247/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa5b0a0df36b07d3efaee18ba1846062a53db247/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=aa5b0a0df36b07d3efaee18ba1846062a53db247", "patch": "@@ -1873,12 +1873,16 @@ GOTESTFLAGS =\n \n # Check a package.\n CHECK = \\\n-\tGC=\"$(GOC) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs -Wl,-R,`${PWD_COMMAND}`/.libs\"; \\\n+\tGC=\"$(GOC) -L `${PWD_COMMAND}` -L `${PWD_COMMAND}`/.libs\"; \\\n \texport GC; \\\n \tRUNTESTFLAGS=\"$(RUNTESTFLAGS)\"; \\\n \texport RUNTESTFLAGS; \\\n \tMAKE=\"$(MAKE)\"; \\\n \texport MAKE; \\\n+\tlibgccdir=`${GOC} -print-libgcc-file-name | sed -e 's|/[^/]*$$||'`; \\\n+\tLD_LIBRARY_PATH=\"`${PWD_COMMAND}`/.libs:$${libgccdir}:${LD_LIBRARY_PATH}\"; \\\n+\tLD_LIBRARY_PATH=`echo $${LD_LIBRARY_PATH} | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; \\\n+\texport LD_LIBRARY_PATH; \\\n \trm -f $@-testsum $@-testlog; \\\n \tprefix=`if test \"$(@D)\" = \"regexp\"; then echo regexp-test; else dirname $(@D); fi`; \\\n \ttest \"$${prefix}\" != \".\" || prefix=\"$(@D)\"; \\\n@@ -2069,7 +2073,7 @@ TEST_PACKAGES = \\\n \ttesting/quick/check \\\n \ttesting/script/check\n \n-MOSTLYCLEAN_FILES = libgo.tail\n+MOSTLYCLEAN_FILES = libgo.head libgo.sum.sep libgo.log.sep\n CLEANFILES = *.go *.gox goc2c *.c s-version libgo.sum libgo.log\n all: config.h\n \t$(MAKE) $(AM_MAKEFLAGS) all-recursive\n@@ -5340,53 +5344,101 @@ testing/quick.gox: testing/quick.lo\n testing/script.gox: testing/script.lo\n \t$(BUILDGOX)\n \n+check: check-tail\n+check-recursive: check-head\n+\n+check-head:\n+\t@echo \"Test Run By $${USER} on `date`\" > libgo.head\n+\t@echo \"Native configuration is $(host_triplet)\" >> libgo.head\n+\t@echo >> libgo.head\n+\t@echo \"\t\t=== libgo tests ===\" >> libgo.head\n+\t@echo >> libgo.head\n+\n+check-tail: check-recursive check-multi\n+\t@lib=`${PWD_COMMAND} | sed -e 's,^.*/\\([^/][^/]*\\)$$,\\1,'`; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  mv ../$${dir}/$${lib}/libgo.sum ../$${dir}/$${lib}/libgo.sum.sep; \\\n+\t  mv ../$${dir}/$${lib}/libgo.log ../$${dir}/$${lib}/libgo.log.sep; \\\n+\tdone; \\\n+\tmv libgo.head libgo.sum; \\\n+\tcp libgo.sum libgo.log; \\\n+\techo \"Schedule of variations:\" >> libgo.sum; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  multidir=../$${dir}/$${lib}; \\\n+\t  multivar=`cat $${multidir}/libgo.var`; \\\n+\t  echo \"    $${multivar}\" >> libgo.sum; \\\n+\tdone; \\\n+\techo >> libgo.sum; \\\n+\tpass=0; fail=0; untested=0; \\\n+\tfor dir in . $(MULTIDIRS); do \\\n+\t  multidir=../$${dir}/$${lib}; \\\n+\t  multivar=`cat $${multidir}/libgo.var`; \\\n+\t  echo \"Running target $${multivar}\" >> libgo.sum; \\\n+\t  echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum; \\\n+\t  cat $${multidir}/libgo.sum.sep >> libgo.sum; \\\n+\t  cat $${multidir}/libgo.log.sep >> libgo.log; \\\n+\t  if test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"\t\t=== libgo Summary for $${multivar} ===\" >> libgo.sum; \\\n+\t    echo >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c PASS $${multidir}/libgo.sum.sep`; \\\n+\t  pass=`expr $$pass + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of expected passes\t\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c FAIL $${multidir}/libgo.sum.sep`; \\\n+\t  fail=`expr $$fail + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of unexpected failures\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\t  p=`grep -c UNTESTED $${multidir}/libgo.sum.sep`; \\\n+\t  untested=`expr $$untested + $$p`; \\\n+\t  if test \"$$p\" -ne \"0\" && test -n \"${MULTIDIRS}\"; then \\\n+\t    echo \"# of untested testcases\t\t$$p\" >> libgo.sum; \\\n+\t  fi; \\\n+\tdone; \\\n+\techo >> libgo.sum; \\\n+\techo \"\t\t=== libgo Summary ===\" >> libgo.sum; \\\n+\techo >> libgo.sum; \\\n+\tif test \"$$pass\" -ne \"0\"; then \\\n+\t  echo \"# of expected passes\t\t$$pass\" >> libgo.sum; \\\n+\tfi; \\\n+\tif test \"$$fail\" -ne \"0\"; then \\\n+\t  echo \"# of unexpected failures\t$$fail\" >> libgo.sum; \\\n+\tfi; \\\n+\tif test \"$$untested\" -ne \"0\"; then \\\n+\t  echo \"# of untested testcases\t\t$$untested\" >> libgo.sum; \\\n+\tfi; \\\n+\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n+\techo >> libgo.log; \\\n+\techo \"runtest completed at `date`\" >> libgo.log; \\\n+\tif test \"$$fail\" -ne \"0\"; then \\\n+\t  status=1; \\\n+\telse \\\n+\t  status=0; \\\n+\tfi; \\\n+\texit $$status\n+\n check-am:\n \t@rm -f libgo.sum libgo.log libgo.tail\n-\t@echo \"Test Run By $${USER} on `date`\" > libgo.sum\n-\t@echo \"Native configuration is $(host_triplet)\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"\t\t=== libgo tests ===\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"Schedule of variations:\" >> libgo.sum\n-\t@echo \"    unix\" >> libgo.sum\n-\t@echo >> libgo.sum\n-\t@echo \"Running target unix\" >> libgo.sum\n-\t@echo \"Running $(srcdir)/libgo.exp ...\" >> libgo.sum\n-\t@cp libgo.sum libgo.log\n-\t@echo > libgo.tail\n-\t@echo \"\t\t=== libgo summary ===\" >> libgo.tail\n-\t@echo >> libgo.tail\n+\t@multivar=\"unix\"; \\\n+\t[ -z \"$(MULTIFLAGS)\" ] || multivar=\"$${multivar}/$(MULTIFLAGS)\"; \\\n+\techo \"$${multivar}\" > libgo.var\n \t@for f in $(TEST_PACKAGES); do \\\n \t   rm -f $$f-testsum $$f-testlog; \\\n \t done\n-\t@$(MAKE) -k $(TEST_PACKAGES); \\\n-\tstatus=$$?; \\\n-\tfor f in $(TEST_PACKAGES); do \\\n+\t-@$(MAKE) -k $(TEST_PACKAGES)\n+\t@for f in $(TEST_PACKAGES); do \\\n \t  if test -f $$f-testsum; then \\\n \t    cat $$f-testsum >> libgo.sum; \\\n \t  fi; \\\n \t  if test -f $$f-testlog; then \\\n \t    cat $$f-testlog >> libgo.log; \\\n \t  fi; \\\n-\tdone; \\\n-\tp=`grep -c PASS libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of expected passes\t\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tp=`grep -c FAIL libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of unexpected failures\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tp=`grep -c UNTESTED libgo.sum`; \\\n-\tif test \"$$p\" != \"0\"; then \\\n-\t  echo \"# of untested testcases\t\t$$p\" >> libgo.tail; \\\n-\tfi; \\\n-\tcat libgo.tail >> libgo.sum; \\\n-\tcat libgo.tail >> libgo.log; \\\n-\techo `echo $(GOC) | sed -e 's/ .*//'`  `$(GOC) -v 2>&1 | grep \" version\" | sed -n -e 's/.* \\(version.*$$\\)/\\1/p'` >> libgo.sum; \\\n-\techo >> libgo.log; \\\n-\techo \"runtest completed at `date`\" >> libgo.log; \\\n-\texit $$status\n+\tdone\n+\n+check-multi:\n+\t$(MULTIDO) $(AM_MAKEFLAGS) DO=check-am multi-do # $(MAKE)\n \n mostlyclean-local:\n \tfind . -name '*.lo' -print | xargs $(LIBTOOL) --mode=clean rm -f"}]}