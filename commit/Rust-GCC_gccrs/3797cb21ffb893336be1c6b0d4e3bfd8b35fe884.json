{"sha": "3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc5N2NiMjFmZmI4OTMzMzZiZTFjNmIwZDRlM2JmZDhiMzVmZTg4NA==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2011-09-08T13:54:24Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2011-09-08T13:54:24Z"}, "message": "PR c++/33255 - Support -Wunused-local-typedefs warning\n\ngcc/\n\n\t* c-decl.c (lookup_name): Use the new\n\tmaybe_record_typedef_use.\n\t(pushdecl): Use the new\n\trecord_locally_defined_typedef.\n\t(store_parm_decls): Allocate cfun->language.\n\t(finish_function): Use the new maybe_warn_unused_local_typedefs,\n\tand free cfun->language.\n\t(c_push_function_context): Allocate cfun->language here only if\n\tneeded.\n\t(c_pop_function_context): Likewise, mark cfun->language\n\tfor collection only when it should be done.\n\t* c-common.c (handle_used_attribute): Don't ignore TYPE_DECL\n\tnodes.\n\t* c-typeck.c (c_expr_sizeof_type, c_cast_expr): Use the new\n\tmaybe_record_local_typedef_use.\n\ngcc/c-family\n\n\t* c-common.h (struct c_language_function::local_typedefs): New\n\tfield.\n\t(record_locally_defined_typedef, maybe_record_typedef_use)\n\t(maybe_warn_unused_local_typedefs): Declare new functions.\n\t* c-common.c (record_locally_defined_typedef)\n\t(maybe_record_typedef_use)\n\t(maybe_warn_unused_local_typedefs): Define new functions.\n\t* c.opt: Declare new -Wunused-local-typedefs flag.\n\ngcc/cp\n\n\t* name-lookup.c (pushdecl_maybe_friend_1): Use the new\n\trecord_locally_defined_typedef.\n\t* decl.c (finish_function): Use the new\n\tmaybe_warn_unused_local_typedefs.\n\t(grokfield): Use the new record_locally_defined_typedef.\n\t* parser.c (lookup_name): Use the new maybe_record_typedef_use.\n\ngcc/doc/\n\n\t* invoke.texi: Update documentation for -Wunused-local-typedefs.\n\ngcc/testsuite/\n\n\t* g++.dg/warn/Wunused-local-typedefs.C: New test file.\n\t* c-c++-common/Wunused-local-typedefs.c: Likewise.\n\nlibstdc++-v3/\n\n\t* include/ext/bitmap_allocator.h\n\t(__detail::__mini_vector::__lower_bound): Remove unused typedef.\n\t* src/istream.cc (std::operator>>(basic_istream<char>& __in,\n\tbasic_string<char>& __str)): Likewise.\n\t(std::getline): Likewise.\n\t* src/valarray.cc (__valarray_product): Likewise.\n\nFrom-SVN: r178692", "tree": {"sha": "27754af02dd2eee09863de910cfb346079141257", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27754af02dd2eee09863de910cfb346079141257"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/comments", "author": null, "committer": null, "parents": [{"sha": "d275ab8b8056a692e67d0f1a46bc766762f62806", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d275ab8b8056a692e67d0f1a46bc766762f62806", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d275ab8b8056a692e67d0f1a46bc766762f62806"}], "stats": {"total": 403, "additions": 388, "deletions": 15}, "files": [{"sha": "9c6b1eede36fd6e9d96c34b5a754e64d14f2c759", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -1,3 +1,23 @@\n+2011-09-08  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/33255 - Support -Wunused-local-typedefs warning\n+\t* c-decl.c (lookup_name): Use the new maybe_record_typedef_use.\n+    \t(pushdecl): Use the new\n+    \trecord_locally_defined_typedef.\n+    \t(store_parm_decls): Allocate cfun->language.\n+    \t(finish_function): Use the new maybe_warn_unused_local_typedefs,\n+    \tand free cfun->language.\n+    \t(c_push_function_context): Allocate cfun->language here only if\n+    \tneeded.\n+    \t(c_pop_function_context): Likewise, mark cfun->language\n+    \tfor collection only when it should be done.\n+    \t* c-common.c (handle_used_attribute): Don't ignore TYPE_DECL\n+    \tnodes.\n+    \t* c-typeck.c (c_expr_sizeof_type, c_cast_expr): Use the new\n+    \tmaybe_record_local_typedef_use.\n+\t* doc/invoke.texi: Update documentation for\n+\t-Wunused-local-typedefs.\n+\n 2011-09-08  Enkovich Ilya  <ilya.enkovich@intel.com>\n \n \t* config/i386/i386-protos.h (ix86_lea_outperforms): New."}, {"sha": "5d4564abc876e7a1ceb77ea788686ed35c8cacaa", "filename": "gcc/c-decl.c", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -2769,7 +2769,15 @@ pushdecl (tree x)\n \n  skip_external_and_shadow_checks:\n   if (TREE_CODE (x) == TYPE_DECL)\n-    set_underlying_type (x);\n+    {\n+      /* So this is a typedef, set its underlying type.  */\n+      set_underlying_type (x);\n+\n+      /* If X is a typedef defined in the current function, record it\n+\t for the purpose of implementing the -Wunused-local-typedefs\n+\t warning.  */\n+      record_locally_defined_typedef (x);\n+    }\n \n   bind (name, x, scope, /*invisible=*/false, nested, locus);\n \n@@ -3435,7 +3443,10 @@ lookup_name (tree name)\n {\n   struct c_binding *b = I_SYMBOL_BINDING (name);\n   if (b && !b->invisible)\n-    return b->decl;\n+    {\n+      maybe_record_typedef_use (b->decl);\n+      return b->decl;\n+    }\n   return 0;\n }\n \n@@ -8192,6 +8203,9 @@ store_parm_decls (void)\n   /* Initialize the RTL code for the function.  */\n   allocate_struct_function (fndecl, false);\n \n+  if (warn_unused_local_typedefs)\n+    cfun->language = ggc_alloc_cleared_language_function ();\n+\n   /* Begin the statement tree for this function.  */\n   DECL_SAVED_TREE (fndecl) = push_stmt_list ();\n \n@@ -8299,6 +8313,10 @@ finish_function (void)\n \t\t      \"parameter %qD set but not used\", decl);\n     }\n \n+  /* Complain about locally defined typedefs that are not used in this\n+     function.  */\n+  maybe_warn_unused_local_typedefs ();\n+\n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;\n@@ -8344,6 +8362,12 @@ finish_function (void)\n   if (!decl_function_context (fndecl))\n     undef_nested_function = false;\n \n+  if (cfun->language != NULL)\n+    {\n+      ggc_free (cfun->language);\n+      cfun->language = NULL;\n+    }\n+\n   /* We're leaving the context of this function, so zap cfun.\n      It's still in DECL_STRUCT_FUNCTION, and we'll restore it in\n      tree_rest_of_compilation.  */\n@@ -8455,9 +8479,11 @@ check_for_loop_decls (location_t loc, bool turn_off_iso_c99_error)\n void\n c_push_function_context (void)\n {\n-  struct language_function *p;\n-  p = ggc_alloc_language_function ();\n-  cfun->language = p;\n+  struct language_function *p = cfun->language;\n+  /* cfun->language might have been already allocated by the use of\n+     -Wunused-local-typedefs.  In that case, just re-use it.  */\n+  if (p == NULL)\n+    cfun->language = p = ggc_alloc_cleared_language_function ();\n \n   p->base.x_stmt_tree = c_stmt_tree;\n   c_stmt_tree.x_cur_stmt_list\n@@ -8483,7 +8509,11 @@ c_pop_function_context (void)\n \n   pop_function_context ();\n   p = cfun->language;\n-  cfun->language = NULL;\n+  /* When -Wunused-local-typedefs is in effect, cfun->languages is\n+     used to store data throughout the life time of the current cfun,\n+     So don't deallocate it.  */\n+  if (!warn_unused_local_typedefs)\n+    cfun->language = NULL;\n \n   if (DECL_STRUCT_FUNCTION (current_function_decl) == 0\n       && DECL_SAVED_TREE (current_function_decl) == NULL_TREE)"}, {"sha": "080d42ac340fac9756aec4e0d032cc6471a420db", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -1,3 +1,15 @@\n+2011-09-08  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/33255 - Support -Wunused-local-typedefs warning\n+\t* c-common.h (struct c_language_function::local_typedefs): New\n+\tfield.\n+    \t(record_locally_defined_typedef, maybe_record_typedef_use)\n+    \t(maybe_warn_unused_local_typedefs): Declare new functions.\n+\t* c-common.c (record_locally_defined_typedef)\n+    \t(maybe_record_typedef_use)\n+    \t(maybe_warn_unused_local_typedefs): Define new functions.\n+\t* c.opt: Declare new -Wunused-local-typedefs flag.\n+\n 2011-09-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/50266"}, {"sha": "e2852b66328502729ad6ae0eff203e7a8d688dcf", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -6133,7 +6133,8 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n   tree node = *pnode;\n \n   if (TREE_CODE (node) == FUNCTION_DECL\n-      || (TREE_CODE (node) == VAR_DECL && TREE_STATIC (node)))\n+      || (TREE_CODE (node) == VAR_DECL && TREE_STATIC (node))\n+      || (TREE_CODE (node) == TYPE_DECL))\n     {\n       TREE_USED (node) = 1;\n       DECL_PRESERVE_P (node) = 1;\n@@ -9646,6 +9647,76 @@ record_types_used_by_current_var_decl (tree decl)\n     }\n }\n \n+/* If DECL is a typedef that is declared in the current function,\n+   record it for the purpose of -Wunused-local-typedefs.  */\n+\n+void\n+record_locally_defined_typedef (tree decl)\n+{\n+  struct c_language_function *l;\n+\n+  if (!warn_unused_local_typedefs\n+      || cfun == NULL\n+      /* if this is not a locally defined typedef then we are not\n+\t interested.  */\n+      || !is_typedef_decl (decl)\n+      || !decl_function_context (decl))\n+    return;\n+\n+  l = (struct c_language_function *) cfun->language;\n+  VEC_safe_push (tree, gc, l->local_typedefs, decl);\n+}\n+\n+/* If T is a TYPE_DECL declared locally, mark it as used.  */\n+\n+void\n+maybe_record_typedef_use (tree t)\n+{\n+  if (!is_typedef_decl (t))\n+    return;\n+\n+  TREE_USED (t) = true;\n+}\n+\n+/* Warn if there are some unused locally defined typedefs in the\n+   current function. */\n+\n+void\n+maybe_warn_unused_local_typedefs (void)\n+{\n+  int i;\n+  tree decl;\n+  /* The number of times we have emitted -Wunused-local-typedefs\n+     warnings.  If this is different from errorcount, that means some\n+     unrelated errors have been issued.  In which case, we'll avoid\n+     emitting \"unused-local-typedefs\" warnings.  */\n+  static int unused_local_typedefs_warn_count;\n+  struct c_language_function *l;\n+\n+  if (cfun == NULL)\n+    return;\n+\n+  if ((l = (struct c_language_function *) cfun->language) == NULL)\n+    return;\n+\n+  if (warn_unused_local_typedefs\n+      && errorcount == unused_local_typedefs_warn_count)\n+    {\n+      FOR_EACH_VEC_ELT (tree, l->local_typedefs, i, decl)\n+\tif (!TREE_USED (decl))\n+\t  warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t      OPT_Wunused_local_typedefs,\n+\t\t      \"typedef %qD locally defined but not used\", decl);\n+      unused_local_typedefs_warn_count = errorcount;\n+    }\n+\n+  if (l->local_typedefs)\n+    {\n+      VEC_free (tree, gc, l->local_typedefs);\n+      l->local_typedefs = NULL;\n+    }\n+}\n+\n /* The C and C++ parsers both use vectors to hold function arguments.\n    For efficiency, we keep a cache of unused vectors.  This is the\n    cache.  */"}, {"sha": "7241d666d2242049b25fd83b358ff6df61a6c80f", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -506,6 +506,10 @@ struct GTY(()) c_language_function {\n   /* While we are parsing the function, this contains information\n      about the statement-tree that we are building.  */\n   struct stmt_tree_s x_stmt_tree;\n+\n+  /* Vector of locally defined typedefs, for\n+     -Wunused-local-typedefs.  */\n+  VEC(tree,gc) *local_typedefs;\n };\n \n #define stmt_list_stack (current_stmt_tree ()->x_cur_stmt_list)\n@@ -988,6 +992,9 @@ extern void warn_for_sign_compare (location_t,\n extern void do_warn_double_promotion (tree, tree, tree, const char *, \n \t\t\t\t      location_t);\n extern void set_underlying_type (tree);\n+extern void record_locally_defined_typedef (tree);\n+extern void maybe_record_typedef_use (tree);\n+extern void maybe_warn_unused_local_typedefs (void);\n extern VEC(tree,gc) *make_tree_vector (void);\n extern void release_tree_vector (VEC(tree,gc) *);\n extern VEC(tree,gc) *make_tree_vector_single (tree);"}, {"sha": "e6ac5dca2efba13415084218daae58656f0e2199", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -653,6 +653,10 @@ Wunsuffixed-float-constants\n C ObjC Var(warn_unsuffixed_float_constants) Warning\n Warn about unsuffixed float constants\n \n+Wunused-local-typedefs\n+C ObjC C++ ObjC++ Var(warn_unused_local_typedefs) Warning\n+Warn about\n+\n Wunused-macros\n C ObjC C++ ObjC++ Warning\n Warn about macros defined in the main file that are not used"}, {"sha": "8ee308718c82a0553026ae21673b9ed04f5ff6ad", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -1,3 +1,13 @@\n+2011-09-08  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/33255 - Support -Wunused-local-typedefs warning\n+\t* name-lookup.c (pushdecl_maybe_friend_1): Use the new\n+\trecord_locally_defined_typedef.\n+    \t* decl.c (finish_function): Use the new\n+    \tmaybe_warn_unused_local_typedefs.\n+    \t(grokfield): Use the new record_locally_defined_typedef.\n+\t* parser.c (lookup_name): Use the new maybe_record_typedef_use.\n+\n 2011-09-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/50309"}, {"sha": "a68bcb12403ab3e9c0c86a2ce6512197e5d3fc81", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -13392,6 +13392,10 @@ finish_function (int flags)\n       unused_but_set_errorcount = errorcount;\n     }\n \n+  /* Complain about locally defined typedefs that are not used in this\n+     function.  */\n+  maybe_warn_unused_local_typedefs ();\n+\n   /* Genericize before inlining.  */\n   if (!processing_template_decl)\n     {"}, {"sha": "68e9b9b7bac8035aa23a2ccb76ee8a5c36d1aa82", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -868,6 +868,7 @@ grokfield (const cp_declarator *declarator,\n           && TYPE_NAME (TYPE_MAIN_VARIANT (TREE_TYPE (value))) != value)\n \tset_underlying_type (value);\n \n+      record_locally_defined_typedef (value);\n       return value;\n     }\n "}, {"sha": "4219548de567ab284b546e07af070ca4999f2113", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -868,6 +868,13 @@ pushdecl_maybe_friend_1 (tree x, bool is_friend)\n \t      && TYPE_NAME (type)\n \t      && TYPE_IDENTIFIER (type))\n \t    set_identifier_type_value (DECL_NAME (x), x);\n+\n+\t  /* If this is a locally defined typedef in a function that\n+\t     is not a template instantation, record it to implement\n+\t     -Wunused-local-typedefs.  */\n+\t  if (current_instantiation () == NULL\n+\t      || (current_instantiation ()->decl != current_function_decl))\n+\t  record_locally_defined_typedef (x);\n \t}\n \n       /* Multiple external decls of the same identifier ought to match."}, {"sha": "03f75fc3edff4a6a58e4a022250a531de8200c95", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -19587,6 +19587,8 @@ cp_parser_lookup_name (cp_parser *parser, tree name,\n   if (DECL_P (decl))\n     check_accessibility_of_qualified_id (decl, object_type, parser->scope);\n \n+  maybe_record_typedef_use (decl);\n+\n   return decl;\n }\n "}, {"sha": "3aa9611fa9249ce65306f339bfaabefdd0ecf730", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -268,8 +268,9 @@ Objective-C and Objective-C++ Dialects}.\n -Wsystem-headers  -Wtrampolines  -Wtrigraphs  -Wtype-limits  -Wundef @gol\n -Wuninitialized  -Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n--Wunused-label  -Wunused-parameter -Wno-unused-result -Wunused-value @gol\n--Wunused-variable -Wunused-but-set-parameter -Wunused-but-set-variable @gol\n+-Wunused-label  -Wunused-local-typedefs -Wunused-parameter @gol\n+-Wno-unused-result -Wunused-value @gol -Wunused-variable @gol\n+-Wunused-but-set-parameter -Wunused-but-set-variable @gol\n -Wvariadic-macros -Wvla -Wvolatile-register-var  -Wwrite-strings}\n \n @item C and Objective-C-only Warning Options\n@@ -3501,6 +3502,10 @@ This warning is enabled by @option{-Wall}.\n To suppress this warning use the @samp{unused} attribute\n (@pxref{Variable Attributes}).\n \n+@item -Wunused-local-typedefs @r{(C, Objective-C, C++ and Objective-C++ only)}\n+@opindex Wunused-local-typedefs\n+Warn when a typedef locally defined in a function is not used.\n+\n @item -Wunused-parameter\n @opindex Wunused-parameter\n @opindex Wno-unused-parameter"}, {"sha": "e6c4db013b26178307c09147782bccb9da9070f2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -1,3 +1,9 @@\n+2011-09-08  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/33255 - Support -Wunused-local-typedefs warning\n+\t* g++.dg/warn/Wunused-local-typedefs.C: New test file.\n+\t* c-c++-common/Wunused-local-typedefs.c: Likewise.\n+\n 2011-09-08  Martin Jambor  <mjambor@suse.cz>\n \n \tPR tree-optimization/50287"}, {"sha": "683019d72e11d06dfb631a271cc0320760d66624", "filename": "gcc/testsuite/c-c++-common/Wunused-local-typedefs.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-local-typedefs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-local-typedefs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWunused-local-typedefs.c?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -0,0 +1,44 @@\n+/*  Origin PR c++/33255\n+    { dg-options \"-Wunused-local-typedefs\" }\n+    { dg-do compile }\n+*/\n+\n+void\n+test_warn ()\n+{\n+  typedef int foo; // { dg-warning \"locally defined but not used\" }\n+}\n+\n+void\n+test0 ()\n+{\n+    typedef int foo;\n+    foo var __attribute__((unused));\n+}\n+\n+void\n+test1 ()\n+{\n+    typedef int foo;\n+    const foo *var = 0;\n+}\n+\n+void\n+test2 ()\n+{\n+  typedef int foo;\n+  void func(foo);  \n+}\n+\n+void\n+test7 (void)\n+{\n+  typedef int foo;\n+  int vec[1] = {sizeof (foo)};\n+}\n+\n+void\n+test8 (void)\n+{\n+  typedef int foo __attribute__((used));\n+}"}, {"sha": "87feb528446da9cb313ca8beeda500435cb45129", "filename": "gcc/testsuite/g++.dg/warn/Wunused-local-typedefs.C", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-local-typedefs.C?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -0,0 +1,146 @@\n+// Origin PR c++/33255\n+// { dg-options \"-Wunused-local-typedefs\" }\n+// { dg-do compile }\n+\n+void\n+test_warn()\n+{\n+  typedef int foo; // { dg-warning \"locally defined but not used\" }\n+}\n+\n+struct S\n+{\n+    typedef int T;\n+    S() {}\n+    S(int) {}\n+};\n+\n+template<class T>\n+struct ST\n+{\n+    typedef T type;\n+    ST (int) {}\n+    ST () {}\n+};\n+\n+template<class T>\n+void\n+test0_tmpl(void)\n+{\n+    typedef struct ST<T> foo;\n+    foo(2);\n+}\n+\n+int\n+test0(void)\n+{\n+    test0_tmpl<int>();\n+}\n+\n+void\n+test1(void)\n+{\n+    typedef int foo;\n+    ST<foo> a;\n+}\n+\n+\n+int\n+test2(void)\n+{\n+    typedef S foo;\n+    foo::T i = 0;\n+    return i;\n+}\n+\n+template<class T>\n+void\n+test3_tmpl(void)\n+{\n+    typedef struct ST<int> foo;\n+    ST<int> v;\n+    const foo &var = v;\n+}\n+\n+void\n+test3(void)\n+{\n+    test3_tmpl<int>();\n+}\n+\n+void\n+test4(void)\n+{\n+  typedef int foo;\n+  int vec[1] = {sizeof (foo)};\n+}\n+\n+void\n+test5(void)\n+{\n+  typedef int T0;\n+  typedef char T1;\n+  typedef int* T2;\n+  typedef unsigned T3;\n+  struct C0 { virtual void f(void) {}};\n+  struct C1 : C0 {};\n+  typedef C0 T4;\n+\n+  int v0 = (T0) 2;\n+  char v1 = static_cast<T1> (0);\n+  reinterpret_cast<T2> (&v0);\n+  unsigned* const c = 0;\n+  unsigned* v2 = const_cast<T3* const> (c);\n+  C0 *p0 = 0;\n+  C1 *p1 = 0;\n+  p0 = dynamic_cast<T4*> (p1);  \n+}\n+\n+void\n+test6(void)\n+{\n+  struct C0 {};\n+  typedef C0 foo;\n+  C0 *v = new foo;\n+}\n+\n+template<class T, class U>\n+struct S7\n+{\n+  void\n+  f()\n+  {\n+    typedef int foo;\n+    sizeof(foo);\n+  }\n+};\n+\n+template<class T>\n+void\n+test7(void)\n+{\n+  typedef typename ST<T>::T bar; // { dg-warning \"locally defined but not used\" }\n+  typedef typename ST<T>::T foo; // We shouldn't warn for this one, as\n+\t\t\t\t // it's used below.\n+  S7<int, foo> v;\n+}\n+\n+\n+template<class T, class U>\n+void\n+test8(void)\n+{\n+  int f(S7<T, U>);\n+  void g(int);\n+  typedef T foo;\n+  g(f(S7<foo, U>()));\n+}\n+\n+int\n+test9(void)\n+{\n+  struct s { typedef int foo;}; // { dg-warning \"locally defined but not used\" }\n+  struct t { typedef int bar;};\n+  t::bar b = 0;\n+  return b;\n+}"}, {"sha": "d394f73ad1e1afb25a06e53d4f5e5a593139d6d8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -1,3 +1,13 @@\n+2011-09-08  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/33255 - Support -Wunused-local-typedefs warning\n+\t* include/ext/bitmap_allocator.h\n+    \t(__detail::__mini_vector::__lower_bound): Remove unused typedef.\n+\t* src/istream.cc (std::operator>>(basic_istream<char>& __in,\n+    \tbasic_string<char>& __str)): Likewise.\n+    \t(std::getline): Likewise.\n+\t* src/valarray.cc (__valarray_product): Likewise.\n+\n 2011-09-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* testsuite/23_containers/array/at.cc: Revert to..."}, {"sha": "cb6fc38f71c405ff249044f69bd50ed798e1a757", "filename": "libstdc++-v3/include/ext/bitmap_allocator.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fbitmap_allocator.h?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -237,8 +237,6 @@ namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)\n       __lower_bound(_ForwardIterator __first, _ForwardIterator __last,\n \t\t    const _Tp& __val, _Compare __comp)\n       {\n-\ttypedef typename __mv_iter_traits<_ForwardIterator>::value_type\n-\t  _ValueType;\n \ttypedef typename __mv_iter_traits<_ForwardIterator>::difference_type\n \t  _DistanceType;\n "}, {"sha": "6bcf2dbf34606e787152a3b1255e64079dd5e3a5", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -280,7 +280,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     {\n       typedef basic_istream<char>       \t__istream_type;\n       typedef __istream_type::int_type\t\t__int_type;\n-      typedef __istream_type::char_type\t\t__char_type;\n       typedef __istream_type::traits_type\t__traits_type;\n       typedef __istream_type::__streambuf_type  __streambuf_type;\n       typedef __istream_type::__ctype_type\t__ctype_type;\n@@ -364,7 +363,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __istream_type::char_type\t\t__char_type;\n       typedef __istream_type::traits_type\t__traits_type;\n       typedef __istream_type::__streambuf_type  __streambuf_type;\n-      typedef __istream_type::__ctype_type\t__ctype_type;\n       typedef basic_string<char>        \t__string_type;\n       typedef __string_type::size_type\t\t__size_type;\n \n@@ -610,7 +608,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef __istream_type::char_type\t\t__char_type;\n       typedef __istream_type::traits_type\t__traits_type;\n       typedef __istream_type::__streambuf_type  __streambuf_type;\n-      typedef __istream_type::__ctype_type\t__ctype_type;\n       typedef basic_string<wchar_t>        \t__string_type;\n       typedef __string_type::size_type\t\t__size_type;\n "}, {"sha": "5de146bc156141dd67fb6f5ec3451582b70a57bd", "filename": "libstdc++-v3/src/valarray.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3797cb21ffb893336be1c6b0d4e3bfd8b35fe884/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fvalarray.cc?ref=3797cb21ffb893336be1c6b0d4e3bfd8b35fe884", "patch": "@@ -49,7 +49,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   inline size_t\n   __valarray_product(const valarray<size_t>& __a)\n   {\n-    typedef const size_t* __restrict__ _Tp;\n     const size_t __n = __a.size();\n     // XXX: This ugly cast is necessary because\n     //      valarray::operator[]() const return a VALUE!"}]}