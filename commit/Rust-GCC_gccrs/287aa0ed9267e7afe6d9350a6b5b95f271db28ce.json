{"sha": "287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjg3YWEwZWQ5MjY3ZTdhZmU2ZDkzNTBhNmI1Yjk1ZjI3MWRiMjhjZQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T09:38:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-11-18T09:38:46Z"}, "message": "[multiple changes]\n\n2015-11-18  Pascal Obry  <obry@adacore.com>\n\n\t* adaint.c, s-os_lib.adb, s-os_lib.ads (Kill_Process_Tree): New.\n\n2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_util.adb (Check_Nonvolatile_Function_Profile): Place the error\n\tmessage concerning the return type on the result definition.\n\t(Is_Volatile_Function): A function with a parameter of a protected\n\ttype is a protected function if it is defined within a protected\n\tdefinition.\n\n2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Try_Container_Indexing): When building the\n\tparameter list for the function call on indexing functions,\n\tpreserve overloading of the parameters, which may themselves be\n\tgeneralized indexing operations.\n\nFrom-SVN: r230522", "tree": {"sha": "520150e37c4deaeeef3b919edad9689b01ec3458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/520150e37c4deaeeef3b919edad9689b01ec3458"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/comments", "author": null, "committer": null, "parents": [{"sha": "da54052e5ae0e7bf8b457d990059d190b0dcb458", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da54052e5ae0e7bf8b457d990059d190b0dcb458", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da54052e5ae0e7bf8b457d990059d190b0dcb458"}], "stats": {"total": 166, "additions": 162, "deletions": 4}, "files": [{"sha": "f330589e46ab7cf08b556393cb654dff9e6c790c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -1,3 +1,22 @@\n+2015-11-18  Pascal Obry  <obry@adacore.com>\n+\n+\t* adaint.c, s-os_lib.adb, s-os_lib.ads (Kill_Process_Tree): New.\n+\n+2015-11-18  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_util.adb (Check_Nonvolatile_Function_Profile): Place the error\n+\tmessage concerning the return type on the result definition.\n+\t(Is_Volatile_Function): A function with a parameter of a protected\n+\ttype is a protected function if it is defined within a protected\n+\tdefinition.\n+\n+2015-11-18  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Try_Container_Indexing): When building the\n+\tparameter list for the function call on indexing functions,\n+\tpreserve overloading of the parameters, which may themselves be\n+\tgeneralized indexing operations.\n+\n 2015-11-13  Arnaud Charlet  <charlet@adacore.com>\n \n \tPR ada/68345"}, {"sha": "4f162e9e267e34e9ff98065a1a87744dd2c86cb1", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -173,6 +173,7 @@ UINT CurrentCCSEncoding;\n #include <windows.h>\n #include <accctrl.h>\n #include <aclapi.h>\n+#include <tlhelp32.h>\n #undef DIR_SEPARATOR\n #define DIR_SEPARATOR '\\\\'\n \n@@ -3219,6 +3220,101 @@ __gnat_kill (int pid, int sig, int close ATTRIBUTE_UNUSED)\n #endif\n }\n \n+void __gnat_killprocesstree (int pid, int sig_num)\n+{\n+#if defined(_WIN32)\n+  HANDLE hWnd;\n+  PROCESSENTRY32 pe;\n+\n+  memset(&pe, 0, sizeof(PROCESSENTRY32));\n+  pe.dwSize = sizeof(PROCESSENTRY32);\n+\n+  HANDLE hSnap = CreateToolhelp32Snapshot (TH32CS_SNAPPROCESS, 0);\n+\n+  /*  cannot take snapshot, just kill the parent process */\n+\n+  if (hSnap == INVALID_HANDLE_VALUE)\n+    {\n+      __gnat_kill (pid, sig_num, 1);\n+      return;\n+    }\n+\n+  if (Process32First(hSnap, &pe))\n+    {\n+      BOOL bContinue = TRUE;\n+\n+      /* kill child processes first */\n+\n+      while (bContinue)\n+        {\n+          if (pe.th32ParentProcessID == (int)pid)\n+            __gnat_killprocesstree (pe.th32ProcessID, sig_num);\n+\n+          bContinue = Process32Next (hSnap, &pe);\n+        }\n+    }\n+\n+  CloseHandle (hSnap);\n+\n+  /* kill process */\n+\n+  __gnat_kill (pid, sig_num, 1);\n+#else\n+  DIR *dir;\n+  struct dirent *d;\n+\n+  /*  read all processes' pid and ppid */\n+\n+  dir = opendir (\"/proc\");\n+\n+  /*  cannot open proc, just kill the parent process */\n+\n+  if (!dir)\n+    {\n+      __gnat_kill (pid, sig_num, 1);\n+      return;\n+    }\n+\n+  /* kill child processes first */\n+\n+  while (d = readdir (dir))\n+    {\n+      if ((d->d_type & DT_DIR) == DT_DIR)\n+        {\n+          char statfile[64] = { 0 };\n+          int _pid, _ppid;\n+\n+          /* read /proc/<PID>/stat */\n+\n+          strncpy (statfile, \"/proc/\", sizeof(statfile));\n+          strncat (statfile, d->d_name, sizeof(statfile));\n+          strncat (statfile, \"/stat\", sizeof(statfile));\n+\n+          FILE *fd = fopen (statfile, \"r\");\n+\n+          if (fd)\n+            {\n+              const int match = fscanf (fd, \"%d %*s %*s %d\", &_pid, &_ppid);\n+              fclose (fd);\n+\n+              if (match == 2 && _ppid == pid)\n+                __gnat_killprocesstree (_pid, sig_num);\n+            }\n+        }\n+    }\n+\n+  closedir (dir);\n+\n+  /* kill process */\n+\n+  __gnat_kill (pid, sig_num, 1);\n+#endif\n+  /* Note on Solaris it is possible to read /proc/<PID>/status.\n+     The 5th and 6th words are the pid and the 7th and 8th the ppid.\n+     See: /usr/include/sys/procfs.h (struct pstatus).\n+  */\n+}\n+\n #ifdef __cplusplus\n }\n #endif"}, {"sha": "069a4b3c48b4726470a7ef9344098ad3ad1dfd80", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -1609,6 +1609,27 @@ package body System.OS_Lib is\n       end if;\n    end Kill;\n \n+   -----------------------\n+   -- Kill_Process_Tree --\n+   -----------------------\n+\n+   procedure Kill_Process_Tree\n+     (Pid : Process_Id; Hard_Kill : Boolean := True)\n+   is\n+      SIGKILL : constant := 9;\n+      SIGINT  : constant := 2;\n+\n+      procedure C_Kill_PT (Pid : Process_Id; Sig_Num : Integer);\n+      pragma Import (C, C_Kill_PT, \"__gnat_killprocesstree\");\n+\n+   begin\n+      if Hard_Kill then\n+         C_Kill_PT (Pid, SIGKILL);\n+      else\n+         C_Kill_PT (Pid, SIGINT);\n+      end if;\n+   end Kill_Process_Tree;\n+\n    -------------------------\n    -- Locate_Exec_On_Path --\n    -------------------------"}, {"sha": "044e38bd5c522d2c114194ef9aa6ec9f20eeee1f", "filename": "gcc/ada/s-os_lib.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fs-os_lib.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fs-os_lib.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.ads?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -746,6 +746,19 @@ package System.OS_Lib is\n    --  POSIX OS or a ctrl-C event on Windows, allowing the process a chance to\n    --  terminate properly using a corresponding handler.\n \n+   procedure Kill_Process_Tree (Pid : Process_Id; Hard_Kill : Boolean := True);\n+   --  Kill the process designated by Pid and all it's children processes.\n+   --  Does nothing if Pid is Invalid_Pid or on platforms where it is not\n+   --  supported, such as VxWorks. Hard_Kill is True by default, and when True\n+   --  the processes are terminated immediately. If Hard_Kill is False, then a\n+   --  signal SIGINT is sent to the processes on POSIX OS or a ctrl-C event\n+   --  on Windows, allowing the processes a chance to terminate properly\n+   --  using a corresponding handler.\n+   --\n+   --  Note that this routine is not atomic and is supported only on Linux\n+   --  and Windows. On other OS it will only kill the process identified by\n+   --  Pid.\n+\n    function Non_Blocking_Spawn\n      (Program_Name : String;\n       Args         : Argument_List) return Process_Id;"}, {"sha": "35bb7f2afbb690ddddfed0a1286c91249917a101", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -7425,12 +7425,20 @@ package body Sem_Ch4 is\n          Check_Compiler_Unit (\"generalized indexing\", N);\n       end if;\n \n+      --  Create argument list for function call that represents generalized\n+      --  indexing. Note that indices (i.e. actuals) may themselves be\n+      --  overloaded.\n+\n       declare\n-         Arg : Node_Id;\n+         Arg     : Node_Id;\n+         New_Arg : Node_Id;\n+\n       begin\n          Arg := First (Exprs);\n          while Present (Arg) loop\n-            Append (Relocate_Node (Arg), Assoc);\n+            New_Arg := Relocate_Node (Arg);\n+            Save_Interps (Arg, New_Arg);\n+            Append (New_Arg, Assoc);\n             Next (Arg);\n          end loop;\n       end;"}, {"sha": "435f03b90ec2088148b289bf9db9fa744e0be908", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/287aa0ed9267e7afe6d9350a6b5b95f271db28ce/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=287aa0ed9267e7afe6d9350a6b5b95f271db28ce", "patch": "@@ -3120,9 +3120,9 @@ package body Sem_Util is\n       --  Inspect the return type\n \n       if Is_Effectively_Volatile (Etype (Func_Id)) then\n-         Error_Msg_N\n+         Error_Msg_NE\n            (\"nonvolatile function & cannot have a volatile return type\",\n-            Func_Id);\n+            Result_Definition (Parent (Func_Id)), Func_Id);\n       end if;\n    end Check_Nonvolatile_Function_Profile;\n \n@@ -14010,6 +14010,7 @@ package body Sem_Util is\n       if Is_Primitive (Func_Id)\n         and then Present (First_Formal (Func_Id))\n         and then Is_Protected_Type (Etype (First_Formal (Func_Id)))\n+        and then Etype (First_Formal (Func_Id)) = Scope (Func_Id)\n       then\n          return True;\n "}]}