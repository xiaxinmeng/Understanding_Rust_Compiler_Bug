{"sha": "58e15542fc00d9d47324e657ae43d941b272f9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThlMTU1NDJmYzAwZDlkNDczMjRlNjU3YWU0M2Q5NDFiMjcyZjlhMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-05-12T09:51:36Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-05-12T09:51:36Z"}, "message": "Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n\n\t* expr.h (assemble_static_space): Update prototype.\n\t* output.h (assemble_zeros, output_constant): Likewise.\n\t* elfos.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON): Make it 64bit clean\n\t* alpha.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASK_OUTPUT_LOCAL): Make\n\tit 64bit clean.\n\t* elf.h (ASM_OTUPUT_SKIP): Likewise.\n\t* unicosmk.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMM): Likewise.\n\t* arm.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tExpect HOST_WIDE_INT operand.\n\t* aout.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tExpect HOST_WIDE_INT operand.\n\t* unknown-elf.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tExpect HOST_WIDE_INT operand.\n\t* avr.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_SKIP): Expect\n\tHOST_WIDE_INT operand.\n\t* c4x.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP,\n\tASM_OUTPUT_BSS): Expect HOST_WIDE_INT operand.\n\t* aout.h (ASM_OTUPUT_SKIP): Likewise.\n\t* cris.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n\t* darwin.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON): Likewise.\n\t* dsp16xx.h (ASM_OTUPUT_SKIP): Likewise.\n\t* frv.h (ASM_OTUPUT_SKIP): Likewise.\n\t* h8300.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_LOCAL): Likewise.\n\t* 370.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n\tMake it 64bit\n\tclean.\n\t* att.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT operand.\n\t* bsd.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n\tMake it 64bit clean.\n\t* darwin.h (ASM_OUTPUT_SKIP): Make it 64bit clean..\n\t* sco5.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Expect\n\tHOST_WIDE_INT operand\n\t* svr3gas.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n\tExpect HOST_WIDE_INT operand\n\t* sysv3.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT operand\n\t* i960.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON,\n\tASM_OUTPUT_ALIGNED_LOCAL): Expect HOST_WIDE_INT operand\n\t* ip2k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tLikewise.\n\t* m32r.h (ASM_OUTPUT_COMMON): Likewise.\n\t* 3b1.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tLikewise.\n\t* amix.h (ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n\t* crds.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n\t* hp320.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n\tASM_OUTPUT_SKIP): Likewise.\n\t* m68k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n\tLikewise.\n\t* m68kelf.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n\tASM_OUTPUT_SKIP): Likewise.\n\t* m68kv4.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n\tASM_OUTPUT_SKIP): Likewise.\n\t* mot3300.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP): Likewise.\n\t* netbsd-elf.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON,\n\tASM_OUTPUT_SKIP): Likewise.\n\t* sgs.h (ASM_OUTPUT_SKIP): Likewise.\n\t* tower-as.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON,\n\tASM_OUTPUT_SKIP): Likewise.\n\t* m88k.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON, ASM_OUTPUT_SKIP):\n\tLikewise.\n\t* mcore.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_BSS, ASM_OUTPUT_SKIP): Likewise.\n\t* iris.h (ASM_OUTPUT_LOCAL): Likewise.\n\t* mips.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP): Likewise.\n\t* ns32k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n\tASM_OUTPUT_SKIP): Make it 64bit clean.\n\t* pa-pro-end.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL):\n\tMake it 64bit clean.\n\t* pa.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL,\n\tASM_OUTPUT_SKIP): Make it 64bit clean.\n\t* hpux.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL): Make it\n\t64bit clean.\n\t* romp.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON): Expect\n\tHOST_WIDE_INT argument\n\t* s390.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT argument.\n\t* sh.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON): Expect\n\tHOST_WIDE_INT argument\n\t* sol2.h (ASM_OUTPUT_SKIP): HOST_WIDE_INT argument\n\t* sparc.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON): HOST_WIDE_INT argument\n\t* svr3.h (ASM_OUTPUT_SKIP): HOST_WIDE_INT argument\n\t* vax.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n\tHOST_WIDE_INT argument\n\t* vaxv.h (ASM_OUTPUT_LOCAL): HOST_WIDE_INT argument\n\t* xtensa.h (ASM_OUTPUT_LOCAL): HOST_WIDE_INT argument\n\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n\tasm_emit_uninitialized, assemble_zeros, assemble_static_space):\n\tHOST_WIDE_INT argument\n\nFrom-SVN: r66713", "tree": {"sha": "4d671520c04691a443ddf3b044eba66212f74589", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d671520c04691a443ddf3b044eba66212f74589"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58e15542fc00d9d47324e657ae43d941b272f9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e15542fc00d9d47324e657ae43d941b272f9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e15542fc00d9d47324e657ae43d941b272f9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e15542fc00d9d47324e657ae43d941b272f9a1/comments", "author": null, "committer": null, "parents": [{"sha": "7660e67ec675e809eb65f7c0337172c9b7cc1df3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7660e67ec675e809eb65f7c0337172c9b7cc1df3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7660e67ec675e809eb65f7c0337172c9b7cc1df3"}], "stats": {"total": 378, "additions": 240, "deletions": 138}, "files": [{"sha": "79be918d26036c42b5d226daefc51c4c5c85ed55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1,3 +1,92 @@\n+Mon May 12 11:32:53 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* expr.h (assemble_static_space): Update prototype.\n+\t* output.h (assemble_zeros, output_constant): Likewise.\n+\t* elfos.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON): Make it 64bit clean\n+\t* alpha.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASK_OUTPUT_LOCAL): Make\n+\tit 64bit clean.\n+\t* elf.h (ASM_OTUPUT_SKIP): Likewise.\n+\t* unicosmk.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMM): Likewise.\n+\t* arm.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tExpect HOST_WIDE_INT operand.\n+\t* aout.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tExpect HOST_WIDE_INT operand.\n+\t* unknown-elf.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tExpect HOST_WIDE_INT operand.\n+\t* avr.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_SKIP): Expect\n+\tHOST_WIDE_INT operand.\n+\t* c4x.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP,\n+\tASM_OUTPUT_BSS): Expect HOST_WIDE_INT operand.\n+\t* aout.h (ASM_OTUPUT_SKIP): Likewise.\n+\t* cris.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Likewise.\n+\t* darwin.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON): Likewise.\n+\t* dsp16xx.h (ASM_OTUPUT_SKIP): Likewise.\n+\t* frv.h (ASM_OTUPUT_SKIP): Likewise.\n+\t* h8300.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_LOCAL): Likewise.\n+\t* 370.h (ASM_OTUPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n+\tMake it 64bit\n+\tclean.\n+\t* att.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT operand.\n+\t* bsd.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n+\tMake it 64bit clean.\n+\t* darwin.h (ASM_OUTPUT_SKIP): Make it 64bit clean..\n+\t* sco5.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL): Expect\n+\tHOST_WIDE_INT operand\n+\t* svr3gas.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n+\tExpect HOST_WIDE_INT operand\n+\t* sysv3.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT operand\n+\t* i960.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON,\n+\tASM_OUTPUT_ALIGNED_LOCAL): Expect HOST_WIDE_INT operand\n+\t* ip2k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tLikewise.\n+\t* m32r.h (ASM_OUTPUT_COMMON): Likewise.\n+\t* 3b1.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tLikewise.\n+\t* amix.h (ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n+\t* crds.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_ALIGNED_LOCAL): Likewise.\n+\t* hp320.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n+\tASM_OUTPUT_SKIP): Likewise.\n+\t* m68k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP):\n+\tLikewise.\n+\t* m68kelf.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n+\tASM_OUTPUT_SKIP): Likewise.\n+\t* m68kv4.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n+\tASM_OUTPUT_SKIP): Likewise.\n+\t* mot3300.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP): Likewise.\n+\t* netbsd-elf.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON,\n+\tASM_OUTPUT_SKIP): Likewise.\n+\t* sgs.h (ASM_OUTPUT_SKIP): Likewise.\n+\t* tower-as.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON,\n+\tASM_OUTPUT_SKIP): Likewise.\n+\t* m88k.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON, ASM_OUTPUT_SKIP):\n+\tLikewise.\n+\t* mcore.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_BSS, ASM_OUTPUT_SKIP): Likewise.\n+\t* iris.h (ASM_OUTPUT_LOCAL): Likewise.\n+\t* mips.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_SKIP): Likewise.\n+\t* ns32k.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL,\n+\tASM_OUTPUT_SKIP): Make it 64bit clean.\n+\t* pa-pro-end.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL):\n+\tMake it 64bit clean.\n+\t* pa.h (ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL,\n+\tASM_OUTPUT_SKIP): Make it 64bit clean.\n+\t* hpux.h (ASM_OUTPUT_LOCAL, ASM_OUTPUT_ALIGNED_LOCAL): Make it\n+\t64bit clean.\n+\t* romp.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON): Expect\n+\tHOST_WIDE_INT argument\n+\t* s390.h (ASM_OUTPUT_SKIP): Expect HOST_WIDE_INT argument.\n+\t* sh.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_LOCAL, ASM_OUTPUT_COMMON): Expect\n+\tHOST_WIDE_INT argument\n+\t* sol2.h (ASM_OUTPUT_SKIP): HOST_WIDE_INT argument\n+\t* sparc.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON): HOST_WIDE_INT argument\n+\t* svr3.h (ASM_OUTPUT_SKIP): HOST_WIDE_INT argument\n+\t* vax.h (ASM_OUTPUT_SKIP, ASM_OUTPUT_COMMON, ASM_OUTPUT_LOCAL):\n+\tHOST_WIDE_INT argument\n+\t* vaxv.h (ASM_OUTPUT_LOCAL): HOST_WIDE_INT argument\n+\t* xtensa.h (ASM_OUTPUT_LOCAL): HOST_WIDE_INT argument\n+\t* varasm.c (asm_output_bss, asm_output_aligned_bss,\n+\tasm_emit_uninitialized, assemble_zeros, assemble_static_space):\n+\tHOST_WIDE_INT argument\n+\n 2003-05-10  Steven Bosscher  <steven@gcc.gnu.org> \n \n \t* cgraphunit.c (cgraph_create_edges): Drop walk_tree in"}, {"sha": "a89bfd1d2f800fc93c1d872eb89f63a246be815d", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1622,23 +1622,23 @@ do {\t\t\t\t\t\t\\\n /* This is how to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"%d\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n \f\n \n /* Print operand X (an rtx) in assembler syntax to file FILE."}, {"sha": "5ff69604d8baef8f790e989d6773b7d9e7d81c6b", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -81,7 +81,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SKIP_ASM_OP, (SIZE))\n \n /* Output the label which precedes a jumptable.  Note that for all svr4\n    systems where we actually generate jumptables (which is to say every"}, {"sha": "5fc1b342cc0ad9734211e0c6269322b36aff7466", "filename": "gcc/config/alpha/unicosmk.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Funicosmk.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Falpha%2Funicosmk.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Funicosmk.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -453,7 +453,8 @@ ssib_section ()\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM,SIZE)\t\t\t\\\n-  fprintf ((STREAM), \"\\t.byte\\t0:%d\\n\", (SIZE));\n+  fprintf ((STREAM), \"\\t.byte\\t0:\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+\t   (SIZE));\n \n /* This says how to output an assembler line to define a global common\n    symbol. We need the alignment information because it has to be supplied\n@@ -470,7 +471,7 @@ ssib_section ()\t\t\t\\\n   do { data_section ();\t\t\t\t\t\\\n        fprintf (FILE, \"\\t.align\\t%d\\n\", floor_log2 ((ALIGN) / BITS_PER_UNIT));\\\n        ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\\\n-       fprintf (FILE, \"\\t.byte 0:%d\\n\", SIZE);\t\t\\\n+       fprintf (FILE, \"\\t.byte 0:\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",(SIZE));\\\n   } while (0)\n \n /* CAM does not allow us to declare a symbol as external first and then"}, {"sha": "2f93fe834495b79aee5c0e7dc8d5de14f0a365fd", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -207,14 +207,14 @@ do\t\t\t\t\t\\\n    fprintf ((STREAM), \"\\tAREA \"),\t\t\t\t\\\n    assemble_name ((STREAM), (NAME)),\t\t\t\t\\\n    fprintf ((STREAM), \", DATA, COMMON\\n\\t%% %d\\t%s size=%d\\n\",\t\\\n-\t    (ROUNDED), ASM_COMMENT_START, SIZE))\n+\t    (ROUNDED), ASM_COMMENT_START, (int)SIZE))\n \n #define ASM_OUTPUT_LOCAL(STREAM,NAME,SIZE,ROUNDED)\t\\\n    (zero_init_section (),\t\t\t\t\\\n     assemble_name ((STREAM), (NAME)),\t\t\t\\\n     fprintf ((STREAM), \"\\n\"),\t\t\t\t\\\n     fprintf ((STREAM), \"\\t%% %d\\t%s size=%d\\n\",\t\t\\\n-\t     (ROUNDED), ASM_COMMENT_START, SIZE))\n+\t     (ROUNDED), ASM_COMMENT_START, (int)SIZE))\n \n /* Output and Generation of Labels */\n \n@@ -332,7 +332,7 @@ do {\t\t\t\t\t\\\n /* Assembler Commands for Alignment */\n \n #define ASM_OUTPUT_SKIP(STREAM,NBYTES)\t\t\\\n- fprintf ((STREAM), \"\\t%%\\t%d\\n\", (NBYTES))\n+ fprintf ((STREAM), \"\\t%%\\t%d\\n\", (int)(NBYTES))\n \n #define ASM_OUTPUT_ALIGN(STREAM,POWER)\t\t\t\\\n do {\t\t\t\t\t\t\t\\"}, {"sha": "215065168f7f872a742efdfd4e8f7e5bda199003", "filename": "gcc/config/arm/aout.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faout.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -240,7 +240,7 @@\n /* Output a gap.  In fact we fill it with nulls.  */\n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM, NBYTES) \t\\\n-  fprintf (STREAM, \"\\t.space\\t%d\\n\", NBYTES)\n+  fprintf (STREAM, \"\\t.space\\t%d\\n\", (int)NBYTES)\n \n /* Align output to a power of two.  Horrible /bin/as.  */\n #ifndef ASM_OUTPUT_ALIGN  \n@@ -265,7 +265,7 @@\n       fprintf (STREAM, \"\\t.comm\\t\");\t\t\t\\\n       assemble_name (STREAM, NAME);\t\t\t\\\n       asm_fprintf (STREAM, \", %d\\t%@ %d\\n\", \t\t\\\n-\t           ROUNDED, SIZE);\t\t\t\\\n+\t           (int)(ROUNDED), (int)(SIZE));\t\\\n     }\t\t\t\t\t\t\t\\\n   while (0)\n #endif\n@@ -281,7 +281,7 @@\n       bss_section ();\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (STREAM, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       ASM_OUTPUT_LABEL (STREAM, NAME);\t\t\t\t\t\\\n-      fprintf (STREAM, \"\\t.space\\t%d\\n\", SIZE);\t\t\t\t\\\n+      fprintf (STREAM, \"\\t.space\\t%d\\n\", (int)(SIZE));\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n #endif"}, {"sha": "b3d6f6efa032e373d8dc410b3dadc9047e3f01be", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -66,7 +66,7 @@\n \t\t\t\t\t\t\t\t\t\\\n       last_assemble_variable_decl = DECL;\t\t\t\t\\\n       ASM_DECLARE_OBJECT_NAME (FILE, NAME, DECL);\t\t\t\\\n-      ASM_OUTPUT_SKIP (FILE, SIZE ? SIZE : 1);\t\t\t\t\\\n+      ASM_OUTPUT_SKIP (FILE, SIZE ? (int)(SIZE) : 1);\t\t\t\\\n     } \t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n@@ -81,7 +81,7 @@\n \t\t\t\t\t\t\t\t\t\\\n       ASM_OUTPUT_ALIGN (FILE, floor_log2 (ALIGN / BITS_PER_UNIT));\t\\\n       ASM_OUTPUT_LABEL (FILE, NAME);\t\t\t\t\t\\\n-      fprintf (FILE, \"\\t.space\\t%d\\n\", SIZE ? SIZE : 1);\t\t\\\n+      fprintf (FILE, \"\\t.space\\t%d\\n\", SIZE ? (int)(SIZE) : 1);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "79318b1a0f73b08afe200a35caab7c2a484db189", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1803,7 +1803,7 @@ do {\t\t\t\t\t\t\t\t\t   \\\n do {\t\t\t\t\t\t\t\t\t\\\n      fputs (\"\\t.lcomm \", (STREAM));\t\t\t\t\t\\\n      assemble_name ((STREAM), (NAME));\t\t\t\t\t\\\n-     fprintf ((STREAM), \",%d\\n\", (SIZE));\t\t\t\t\\\n+     fprintf ((STREAM), \",%d\\n\", (int)(SIZE));\t\t\t\t\\\n } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM the assembler definition of a local-common-label named NAME\n@@ -2200,7 +2200,7 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n    of the jump-table.  */\n \n #define ASM_OUTPUT_SKIP(STREAM, N)\t\t\\\n-fprintf (STREAM, \"\\t.skip %d,0\\n\", N)\n+fprintf (STREAM, \"\\t.skip %d,0\\n\", (int)N)\n /* A C statement to output to the stdio stream STREAM an assembler\n    instruction to advance the location counter by NBYTES bytes.\n    Those bytes should be zero when loaded.  NBYTES will be a C"}, {"sha": "e4b8a53c05a38d88389d52c9c36e9764ab1d51ac", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1670,7 +1670,7 @@ do {\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\t.bss\\t\", FILE),\t\t\t\\\n   assemble_name (FILE, (NAME)),\t\t\\\n-  fprintf (FILE, \",%u\\n\", (ROUNDED)))\n+  fprintf (FILE, \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line to define a global\n    uninitialized variable.  */\n@@ -1681,15 +1681,15 @@ do {\t\t\t\t\t\t\\\n    assemble_name (FILE, (NAME)),\t\\\n    fputs (\"\\n\\t.bss\\t\", FILE),\t\\\n    assemble_name (FILE, (NAME)),\t\\\n-   fprintf (FILE, \",%u\\n\", (ROUNDED)))\n+   fprintf (FILE, \",%u\\n\", (int)(ROUNDED)))\n \n #undef ASM_OUTPUT_BSS\n #define ASM_OUTPUT_BSS(FILE, DECL, NAME, SIZE, ALIGN)   \\\n (  fputs (\"\\t.globl\\t\", FILE),\t\\\n    assemble_name (FILE, (NAME)),\t\\\n    fputs (\"\\n\\t.bss\\t\", FILE),\t\\\n    assemble_name (FILE, (NAME)),\t\\\n-   fprintf (FILE, \",%u\\n\", (SIZE)))\n+   fprintf (FILE, \",%u\\n\", (int)(SIZE)))\n \n /* Macros Controlling Initialization Routines.  */\n "}, {"sha": "e77c73ce4324c8f1cc842d451039dabb89678cc1", "filename": "gcc/config/cris/aout.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fcris%2Faout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fcris%2Faout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Faout.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -373,7 +373,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (int)(SIZE))\n \n /* Node: All Debuggers */\n "}, {"sha": "92c6550b55935686e03d15a27d78f5de35753c5e", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1474,7 +1474,7 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\t\\\n \t  fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\\\n \t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n-\t  fprintf ((FILE), \",%u,%u\\n\", (SIZE), align_);\t\t\t\\\n+\t  fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), align_);\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n@@ -1485,7 +1485,7 @@ call_ ## FUNC (void)\t\t\t\t\t\t\\\n \t  fputs (\"\\t.lcomm \", (FILE));\t\t\t\t\t\\\n \t  assemble_name ((FILE), (NAME));\t\t\t\t\\\n \t  fprintf ((FILE), \",%u\\n\",\t\t\t\t\t\\\n-\t\t   ((SIZE) + (align_ - 1)) & ~(align_ - 1));\t\t\\\n+\t\t   ((int)(SIZE) + (align_ - 1)) & ~(align_ - 1));\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "1e857887aa7dc0c2276286985d472c20c4507623", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -346,7 +346,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n   } while (0)\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %d\\n\", SIZE)\n+  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)\n \n /* Give ObjC methods pretty symbol names.  */\n \n@@ -454,7 +454,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     fputs (\".lcomm \", (FILE));\t\t\t\t\t\t\\\n     assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-    fprintf ((FILE), \",%u,%u\\n\", (SIZE),\t\t\t\t\\\n+    fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE),\t\\\n \t     floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\t\t\\\n     if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\"}, {"sha": "353fb71e18ad0d284d1a22b3d24cc08cedd3cb5c", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1703,7 +1703,7 @@ extern struct dsp16xx_frame_info current_frame_info;\n #define ASM_NO_SKIP_IN_TEXT 1\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t%d * int 0\\n\", (SIZE))\n+  fprintf (FILE, \"\\t%d * int 0\\n\", (int)(SIZE))\n \n /* CONTROLLING DEBUGGING INFORMATION FORMAT */\n "}, {"sha": "b01dcdb609e55210dde755cd4ae474fdf7a7b2ed", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -108,7 +108,8 @@ Boston, MA 02111-1307, USA.  */\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+   fprintf ((FILE), \"%s\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+\t    SKIP_ASM_OP, (SIZE))\n \n /* This is how to store into the string LABEL\n    the symbol_ref name of an internal numbered label where\n@@ -171,7 +172,8 @@ Boston, MA 02111-1307, USA.  */\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n+      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+\t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "c93ad267a75f84b7580d5293a125d64cfa16b040", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -3077,7 +3077,7 @@ do {                                                                    \\\n    Defined in svr4.h.  */\n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM, NBYTES) \\\n-  fprintf (STREAM, \"\\t.zero\\t%u\\n\", (NBYTES))\n+  fprintf (STREAM, \"\\t.zero\\t%u\\n\", (int)(NBYTES))\n \n /* A C statement to output to the stdio stream STREAM an assembler command to\n    advance the location counter to a multiple of 2 to the POWER bytes.  POWER"}, {"sha": "f1f118fb93d35e5fa6128ed404fc10a8b54a121b", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1179,7 +1179,7 @@ struct cum_arg\n   fprintf (FILE, \"%s\\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n \n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space %d\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -1202,7 +1202,7 @@ struct cum_arg\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", (int)(SIZE)))\n \n #define ASM_PN_FORMAT \"%s___%lu\"\n "}, {"sha": "8489da039fd24882a0191d4937762e6b18b9b6f8", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1181,7 +1181,8 @@ enum reg_class\n \n #define ASM_OUTPUT_SKIP(FILE, SIZE)  \t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n-  int s, k;\t\t\t\t\t\t\t\t\\\n+  unsigned HOST_WIDE_INT s;\t\t\t\t\t\t\\\n+  int  k;\t\t\t\t\t\t\t\t\\\n   for (s = (SIZE); s > 0; s -= MAX_CHUNK)\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (s > MAX_CHUNK)\t\t\t\t\t\t\\\n@@ -1864,15 +1865,15 @@ abort(); \\\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),                     \\\n   assemble_name ((FILE), (NAME)),               \\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),                    \\\n   assemble_name ((FILE), (NAME)),               \\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (ROUNDED)))\n \n #endif /* TARGET_ELF_ABI */\n #endif /* ! GCC_I370_H */"}, {"sha": "4e26d81e2b08fe0ec64d4c2bf1fef9acd3a10b68", "filename": "gcc/config/i386/att.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fatt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fatt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fatt.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -69,7 +69,7 @@ do\t\t\t\t\t\t\t\t\\\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf ((FILE), \"\\t.set .,.+%u\\n\", (SIZE))\n+  fprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(SIZE))\n \n /* Can't use ASM_OUTPUT_SKIP in text section; it doesn't leave 0s.  */\n "}, {"sha": "0089d8483c7c7bdc054fc6f483bf1f4ca0285345", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -53,7 +53,7 @@ Boston, MA 02111-1307, USA.  */\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \f\n /* Define the syntax of labels and symbol definitions/declarations.  */\n \n@@ -63,15 +63,15 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This is how to output an assembler line\n    that says to advance the location counter"}, {"sha": "3ce8efb06920c3e83cc029f998c1f6b07a3a4322", "filename": "gcc/config/i386/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdarwin.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -109,7 +109,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (ROUNDED)))\n \n /* Darwin profiling -- call mcount.  */\n #undef FUNCTION_PROFILER"}, {"sha": "804f4013b237817dec2fccbdead9b8303cb8de75", "filename": "gcc/config/i386/svr3gas.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fsvr3gas.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsvr3gas.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -52,13 +52,13 @@ Boston, MA 02111-1307, USA.  */\n \tdata_section ();\t\t\t\t\\\n \tASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align); \\\n \tASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\\\n-\tfprintf ((FILE), \"\\t.set .,.+%u\\n\", (ROUNDED));\t\\\n+\tfprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(ROUNDED));\t\\\n       }\t\t\t\t\t\t\t\\\n     else\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\\\n \tfputs (\".lcomm \", (FILE));\t\t\t\\\n \tassemble_name ((FILE), (NAME));\t\t\t\\\n-\tfprintf ((FILE), \",%u\\n\", (ROUNDED));\t\t\\\n+\tfprintf ((FILE), \",%u\\n\", (int)(ROUNDED));\t\\\n       }\t\t\t\t\t\t\t\\\n   } while (0)\n "}, {"sha": "406b0bf9c75902c030a9cb1f3525fa07778393e5", "filename": "gcc/config/i386/sysv3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fsysv3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi386%2Fsysv3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsysv3.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -89,7 +89,7 @@ Boston, MA 02111-1307, USA.  */\n       bss_section ();\t\t\t\t\t\\\n     ASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align);\t\\\n     ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\\\n-    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (ROUNDED));\t\\\n+    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(ROUNDED));\\\n   } while (0)\n \f\n /* Define a few machine-specific details of the implementation of"}, {"sha": "a6d87d2a5d6472df3dfc97f5bcda4ede0ee4d3e1", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1251,7 +1251,7 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n   fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space %d\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -1268,7 +1268,7 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n       assemble_name ((FILE), (NAME)),\t\t\t\\\n       fputs (\"\\n.comm \", (FILE)),\t\t\t\\\n       assemble_name ((FILE), (NAME)),\t\t\t\\\n-      fprintf ((FILE), \",%d\\n\", (SIZE));\t\t\\\n+      fprintf ((FILE), \",%d\\n\", (int)(SIZE));\t\t\\\n     }\t\t\t\t\t\t\t\\\n }\n \n@@ -1279,7 +1279,7 @@ extern struct rtx_def *i960_compare_op0, *i960_compare_op1;\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)  \\\n ( fputs (\".bss\\t\", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d,%d\\n\", (SIZE),\t\t\\\n+  fprintf ((FILE), \",%d,%d\\n\", (int)(SIZE),\t\\\n \t   (floor_log2 ((ALIGN) / BITS_PER_UNIT))))\n \n /* A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "975d2c467ea46ff576cf338cf2b628fec2b3d6b6", "filename": "gcc/config/ip2k/ip2k.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fip2k%2Fip2k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fip2k%2Fip2k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1961,7 +1961,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n      fputs (\"\\t.comm \", (STREAM));\t\t\t\\\n      assemble_name ((STREAM), (NAME));\t\t\t\\\n-     fprintf ((STREAM), \",%d\\n\", (SIZE));\t\t\\\n+     fprintf ((STREAM), \",%d\\n\", (int)(SIZE));\t\t\\\n } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM the assembler definition of a common-label named NAME whose\n@@ -1979,7 +1979,7 @@ do {\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\\\n      fputs (\"\\t.lcomm \", (STREAM));\t\t\t\\\n      assemble_name ((STREAM), (NAME));\t\t\t\\\n-     fprintf ((STREAM), \",%d\\n\", (SIZE));\t\t\\\n+     fprintf ((STREAM), \",%d\\n\", (int)(SIZE));\t\t\\\n } while (0)\n /* A C statement (sans semicolon) to output to the stdio stream\n    STREAM the assembler definition of a local-common-label named NAME"}, {"sha": "ec46ff5d94539af4c64f54cedc24700c5fc3ab88", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1696,7 +1696,7 @@ extern char m32r_punct_chars[256];\n       else\t\t\t\t\t\t\t\t\\\n \tfprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",%u,%u\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n+      fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE), (ALIGN) / BITS_PER_UNIT);\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "5b3fe4e02b342a1ed4d033a86ec30d098bddf61e", "filename": "gcc/config/m68k/3b1.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2F3b1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2F3b1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2F3b1.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -126,7 +126,7 @@ do {\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\tspace %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\tspace %d\\n\", (int)(SIZE))\n \n /* Can't use ASM_OUTPUT_SKIP in text section; it doesn't leave 0s.  */\n \n@@ -392,7 +392,7 @@ int switch_table_difference_label_flag;\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tlcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n #define USER_LABEL_PREFIX \"\"\n \f"}, {"sha": "540cd1d6ec8f65db45ca01af788421eac39d745c", "filename": "gcc/config/m68k/amix.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Famix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Famix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Famix.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -89,7 +89,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGN)\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"%s%s,%u,%u\\n\",\t\t\t\t\t\\\n-\t   BSS_ASM_OP, (NAME), (SIZE), MAX ((ALIGN) / BITS_PER_UNIT, 4)); \\\n+\t   BSS_ASM_OP, (NAME), (int)(SIZE), MAX ((ALIGN) / BITS_PER_UNIT, 4)); \\\n } while (0)\n \n /* This definition of ASM_OUTPUT_ASCII is the same as the one in m68k/sgs.h,"}, {"sha": "94172fa405ecee247d3423d74ddd6985064312ae", "filename": "gcc/config/m68k/crds.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fcrds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fcrds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fcrds.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -154,7 +154,7 @@ Boston, MA 02111-1307, USA.  */\n /*unos has no .skip :-( */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)\t \t\\\n-    fprintf (FILE, \"\\t. = . + %u\\n\", (SIZE));\t\n+    fprintf (FILE, \"\\t. = . + %u\\n\", (int)(SIZE));\t\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n@@ -165,7 +165,7 @@ Boston, MA 02111-1307, USA.  */\n { data_section ();\t\t\t\t\\\n   if ((SIZE) > 1) fprintf (FILE, \"\\t.even\\n\");\t\\\n   assemble_name ((FILE), (NAME));\t\t\\\n-  fprintf ((FILE), \":\\t. = . + %u\\n\", (ROUNDED));}\n+  fprintf ((FILE), \":\\t. = . + %u\\n\", (int)(ROUNDED));}\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "63bf42dc60a0b77227aba61e3a14f1e7190f3a92", "filename": "gcc/config/m68k/hp320.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fhp320.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fhp320.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fhp320.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -237,15 +237,15 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tlcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u,2\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u,2\\n\", (int)(ROUNDED)))\n \n #define ASM_PN_FORMAT \"%s___%lu\"\n \n@@ -264,7 +264,7 @@ do {\t\t\t\t\t\\\n } while (0)\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\tspace %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\tspace %u\\n\", (int)(SIZE))\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, FILENAME)\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINENO)"}, {"sha": "1aed47ee179f1ce0e297fb2079b4ce82ede4b9da", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1709,23 +1709,23 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.even\\n\");\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.skip %u\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* Output a float value (represented as a C double) as an immediate operand.\n    This macro is a 68k-specific macro.  */"}, {"sha": "68fe5aaa88478e1aeb36b6ad0c06b4ba67bee3c3", "filename": "gcc/config/m68k/m68kelf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68kelf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kelf.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -167,7 +167,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (int)(SIZE))\n \n #if 0\n /* SVR4 m68k assembler is bitching on the `comm i,1,1' which askes for \n@@ -229,12 +229,12 @@ extern int switch_table_difference_label_flag;\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n /* Currently, JUMP_TABLES_IN_TEXT_SECTION must be defined in order to\n    keep switch tables in the text section.  */"}, {"sha": "28696f313774832146f212bd3a80808e54093679", "filename": "gcc/config/m68k/m68kv4.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fm68kv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68kv4.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -124,7 +124,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (int)(SIZE))\n \n /* 1 if N is a possible register number for a function value.\n    For m68k/SVR4 allow d0, a0, or fp0 as return registers, for integral,\n@@ -258,12 +258,12 @@ int switch_table_difference_label_flag;\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n /* Override the definition in svr4.h. In m68k svr4, using swbeg is the \n    standard way to do switch table.  */"}, {"sha": "c599cc514dd0a4af6e6eb6662bc7644f4ab87941", "filename": "gcc/config/m68k/mot3300.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fmot3300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fmot3300.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -308,7 +308,7 @@ Boston, MA 02111-1307, USA.  */\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (int)(SIZE))\n \n /* Can't use ASM_OUTPUT_SKIP in text section.  */\n \n@@ -532,12 +532,12 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tlcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n #else /* USE_GAS */\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n #endif /* USE_GAS */\n \n #ifndef USE_GAS"}, {"sha": "167ddfdabe245fd102e44f42168a34fc5a5b8d94", "filename": "gcc/config/m68k/netbsd-elf.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fnetbsd-elf.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -269,13 +269,13 @@ while (0)\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\t\t\\\n ( fputs (\".comm \", (FILE)),\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n #undef ASM_OUTPUT_LOCAL\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\t\t\\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE)))\n+  fprintf ((FILE), \",%u\\n\", (int)(SIZE)))\n \n \n /* XXX"}, {"sha": "d8f86cfc3a349f9bad6187ce657fa1631727c341", "filename": "gcc/config/m68k/sgs.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fsgs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Fsgs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fsgs.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -194,7 +194,7 @@ do {\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SPACE_ASM_OP, (int)(SIZE))\n \f\n /* Translate Motorola opcodes such as `jbeq' into SGS opcodes such\n    as `beq.w'."}, {"sha": "9675a4dc20d8a3168a473aad3bbb68f5f1c588a0", "filename": "gcc/config/m68k/tower-as.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm68k%2Ftower-as.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Ftower-as.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -199,7 +199,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", ((SIZE) == 0) ? (ROUNDED) : (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", ((SIZE) == 0) ? (int)(ROUNDED) : (int)(SIZE)))\n \n /* This says how to output an assembler line to define a local common symbol.\n    We use SIZE rather than ROUNDED, as this is what the native cc does.  */\n@@ -208,7 +208,7 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\tlcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", ((SIZE) == 0) ? (ROUNDED) : (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", ((SIZE) == 0) ? (int)(ROUNDED) : (int)(SIZE)))\n \n #define ASM_PN_FORMAT \"%s%%%%%lu\"\n  \n@@ -246,7 +246,7 @@ do {\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\tspace %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\tspace %d\\n\", (int)(SIZE))\n \n /* Output a float value (represented as a C double) as an immediate operand.\n    This macro is a 68k-specific macro.  */"}, {"sha": "442c62aa9e68992d16a50c8aec970e50e44fff9c", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1888,7 +1888,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* Override svr[34].h.  */\n #undef\tASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (int)(SIZE))\n \n /* Override svr4.h.  */\n #undef\tASM_OUTPUT_EXTERNAL_LIBCALL\n@@ -1900,19 +1900,19 @@ do {\t\t\t\t\t\t\t\t\t \\\n #undef\tASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n ( fprintf ((FILE), \"%s\",\t\t\t\t\\\n-\t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SCOMM_ASM_OP : COMMON_ASM_OP), \\\n+\t   ((SIZE) ? (int)(SIZE) : 1) <= m88k_gp_threshold ? SCOMM_ASM_OP : COMMON_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (SIZE) ? (SIZE) : 1))\n+  fprintf ((FILE), \",%u\\n\", (SIZE) ? (int)(SIZE) : 1))\n \n /* This says how to output an assembler line to define a local common\n    symbol.  Override svr[34].h.  */\n #undef\tASM_OUTPUT_LOCAL\n #undef\tASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n ( fprintf ((FILE), \"%s\",\t\t\t\t\\\n-\t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SBSS_ASM_OP : BSS_ASM_OP), \\\n+\t   ((SIZE) ? (int)(SIZE) : 1) <= m88k_gp_threshold ? SBSS_ASM_OP : BSS_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%u,%d\\n\", (SIZE) ? (SIZE) : 1, (SIZE) <= 4 ? 4 : 8))\n+  fprintf ((FILE), \",%u,%d\\n\", (SIZE) ? (int)(SIZE) : 1, (SIZE) <= 4 ? 4 : 8))\n \n /* This is how to output an insn to push a register on the stack.\n    It need not be very fast code.  */"}, {"sha": "5e66e86b35b531810a202f80dcf775ba8ad5792d", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1163,7 +1163,7 @@ extern long mcore_current_compilation_timestamp;\n    that says to advance the location counter by SIZE bytes.  */\n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.fill %d, 1\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.fill %d, 1\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol, with alignment information.  */\n@@ -1220,7 +1220,7 @@ extern long mcore_current_compilation_timestamp;\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n   (fputs (\"\\t.lcomm\\t\", FILE),\t\t\t\t\\\n   assemble_name (FILE, NAME),\t\t\t\t\\\n-  fprintf (FILE, \",%d\\n\", SIZE))\n+  fprintf (FILE, \",%d\\n\", (int)SIZE))\n \n /* ... and how to define a local common symbol whose alignment\n    we wish to specify.  ALIGN comes in as bits, we have to turn\n@@ -1231,7 +1231,7 @@ extern long mcore_current_compilation_timestamp;\n     {\t\t\t\t\t\t\t\t\t\\\n       fputs (\"\\t.bss\\t\", (FILE));\t\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",%d,%d\\n\", (SIZE), (ALIGN) / BITS_PER_UNIT);\t\\\n+      fprintf ((FILE), \",%d,%d\\n\", (int)(SIZE), (ALIGN) / BITS_PER_UNIT);\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n "}, {"sha": "f4d303ccb49aba9bf863592439414fe0c4984614", "filename": "gcc/config/mips/iris6.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmips%2Firis6.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmips%2Firis6.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Firis6.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -390,7 +390,7 @@ do\t\t\t\t\t\t\t\t\t   \\\n \tASM_OUTPUT_SKIP (STREAM, SIZE);\t\t\t\t\t   \\\n       }\t\t\t\t\t\t\t\t\t   \\\n     else\t\t\t\t\t\t\t\t   \\\n-      mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (SIZE)); \\\n+      mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (int)(SIZE)); \\\n   }\t\t\t\t\t\t\t\t\t   \\\n while (0)\n "}, {"sha": "5779e1e892d60ea7cdf05d5847ad57ee9e9177b4", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -3921,7 +3921,7 @@ while (0)\n    linker).  */\n \n #define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)\t\t\t\\\n-  mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (SIZE))\n+  mips_declare_object (STREAM, NAME, \"\\n\\t.lcomm\\t\", \",%u\\n\", (int)(SIZE))\n \n \n /* This says how to output an external.  It would be possible not to\n@@ -4025,7 +4025,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM,SIZE)\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.space\\t%u\\n\", (SIZE))\n+  fprintf (STREAM, \"\\t.space\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"%u\\n\", (SIZE))\n \n /* This is how to output a string.  */\n #undef ASM_OUTPUT_ASCII"}, {"sha": "e17327d4ecd27e400f092a8a20e07db9ef8f10ce", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1333,23 +1333,23 @@ __transfer_from_trampoline ()\t\t\\\n   fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space %u\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* Print an instruction operand X on file FILE.\n    CODE is the code from the %-spec that requested printing this operand;"}, {"sha": "3d5c0b2b366083256477b29939d6b0469bf1f433", "filename": "gcc/config/pa/pa-pro-end.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-pro-end.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -63,8 +63,8 @@ Boston, MA 02111-1307, USA.  */\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGNED)\t\t\\\n { bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fputs (\"\\t.comm \", (FILE));\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%d\\n\", MAX ((SIZE), ((ALIGNED) / BITS_PER_UNIT)));}\n+  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n+\t   MAX ((SIZE), ((ALIGNED) / BITS_PER_UNIT)));}\n \n /* This says how to output an assembler line to define a local common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n@@ -74,4 +74,4 @@ Boston, MA 02111-1307, USA.  */\n { bss_section ();\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block %d\\n\", (SIZE));}\n+  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE));}"}, {"sha": "1bff1690bdafae3207cf4bf7c010c9d0952803ce", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1752,25 +1752,26 @@ do { \t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", (1<<(LOG)))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.blockz %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.blockz \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* This says how to output an assembler line to define a global common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n \n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGNED)  \t\t\\\n { bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fputs (\"\\t.comm \", (FILE));\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%d\\n\", MAX ((SIZE), ((ALIGNED) / BITS_PER_UNIT)));}\n+  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n+\t   MAX ((SIZE), ((ALIGNED) / BITS_PER_UNIT)));}\n \n /* This says how to output an assembler line to define a local common symbol\n    with size SIZE (in bytes) and alignment ALIGN (in bits).  */\n \n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)\t\t\\\n { bss_section ();\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGNED) / BITS_PER_UNIT));\t\\\n-  assemble_name ((FILE), (NAME));\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block %d\\n\", (SIZE));}\n+  assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n+  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\\\n+\t   (SIZE));}\n   \n #define ASM_PN_FORMAT \"%s___%lu\"\n "}, {"sha": "9c1d21395e01d029887984880bed052d62de788f", "filename": "gcc/config/pa/pa64-hpux.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa64-hpux.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -127,7 +127,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n   bss_section ();\t\t\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n   fputs (\"\\t.comm \", (FILE));\t\t\t\t\t\t\\\n-  fprintf ((FILE), \"%d\\n\", MAX ((SIZE), ((ALIGN) / BITS_PER_UNIT)));\t\\\n+  fprintf ((FILE), \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n+\t   MAX ((SIZE), ((ALIGN) / BITS_PER_UNIT)));\t\t\t\\\n } while (0)\n \n #undef ASM_OUTPUT_ALIGNED_LOCAL\n@@ -136,7 +137,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n   bss_section ();\t\t\t\t\t\t\t\\\n   fprintf ((FILE), \"\\t.align %d\\n\", ((ALIGN) / BITS_PER_UNIT));\t\t\\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \"\\n\\t.block %d\\n\", (SIZE));\t\t\t\t\\\n+  fprintf ((FILE), \"\\n\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE));\\\n } while (0)\n \n /* The define in pa.h doesn't work with the alias attribute.  The"}, {"sha": "cb7c9ad374b6a5839c8ab66d94c8f534454c7379", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1295,23 +1295,23 @@ struct rt_cargs {int gregs, fregs; };\n     fprintf (FILE, \"\\t.align %d\\n\", (LOG))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %d\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space %d\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", (int)(SIZE)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", (int)(SIZE)))\n \n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "d10ecaf5302ed34ad7ba00a66f8db5f83dcf1a43", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -343,7 +343,7 @@ toc_section ()\t\t\t\t\t\t\\\n #define SKIP_ASM_OP \"\\t.space \"\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s%u\\n\", SKIP_ASM_OP, (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -354,12 +354,12 @@ toc_section ()\t\t\t\t\t\t\\\n   do { fputs (COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n        if ((ALIGN) > 32)\t\t\t\t\\\n-\t fprintf ((FILE), \",%u,%u\\n\", (SIZE),\t\t\\\n+\t fprintf ((FILE), \",%u,%u\\n\", (int)(SIZE),\t\t\\\n \t\t  exact_log2 ((ALIGN) / BITS_PER_UNIT)); \\\n        else if ((SIZE) > 4)\t\t\t\t\\\n-         fprintf ((FILE), \",%u,3\\n\", (SIZE));\t\t\\\n+         fprintf ((FILE), \",%u,3\\n\", (int)(SIZE));\t\t\\\n        else\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",%u\\n\", (SIZE));\t\t\\\n+\t fprintf ((FILE), \",%u\\n\", (int)(SIZE));\t\t\\\n   } while (0)\n \n /* This says how to output an assembler line\n@@ -373,7 +373,7 @@ toc_section ()\t\t\t\t\t\t\\\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n   do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",%u,%s\\n\", (TARGET_32BIT ? (SIZE) : (ROUNDED)), \\\n+       fprintf ((FILE), \",%u,%s\\n\", (TARGET_32BIT ? (int)(SIZE) : (int)(ROUNDED)), \\\n \t\txcoff_bss_section_name);\t\t\\\n      } while (0)\n "}, {"sha": "fbf98657bdda7eeb1c84eb0fbc0a539ef5ce7f8b", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -914,7 +914,7 @@ extern int flag_pic;\n \n /* Advance the location counter by SIZE bytes.  */\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf ((FILE), \"\\t.set\\t.,.+%u\\n\", (SIZE))\n+  fprintf ((FILE), \"\\t.set\\t.,.+\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n #define LOCAL_LABEL_PREFIX \".\""}, {"sha": "a663829171b51ddd873c793624af34cceb006d23", "filename": "gcc/config/sh/coff.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsh%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsh%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fcoff.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -54,23 +54,23 @@ Boston, MA 02111-1307, USA.  */\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n-  fprintf ((FILE), \"\\t.space %d\\n\", (SIZE))\n+  fprintf ((FILE), \"\\t.space %d\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n ( fputs (\"\\t.comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", (int)(SIZE)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",%d\\n\", (SIZE)))\n+  fprintf ((FILE), \",%d\\n\", (int)(SIZE)))\n \n #define TARGET_OBJFMT_CPP_BUILTINS()\n "}, {"sha": "e22bdcf26b4e6004252b12c2afbf0d77eb67788e", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -63,7 +63,7 @@ Boston, MA 02111-1307, USA.  */\n /* The Solaris 2 assembler uses .skip, not .zero, so put this back.  */\n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.skip %u\\n\", (int)(SIZE))\n \n #undef  LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX  \".\""}, {"sha": "f3a3ce3086ee553754459468d1491ab3ace5a294", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -2792,23 +2792,23 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.align %d,0x1000000\\n\", (1<<(LOG)))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.skip %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.skip \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\t.common \", (FILE)),\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u,\\\"bss\\\"\\n\", (SIZE)))\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\"\\n\", (SIZE)))\n \n /* This says how to output an assembler line to define a local common\n    symbol.  */\n \n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)\t\t\\\n ( fputs (\"\\t.reserve \", (FILE)),\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n-  fprintf ((FILE), \",%u,\\\"bss\\\",%u\\n\",\t\t\t\t\t\\\n+  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\",%u\\n\",\t\\\n \t   (SIZE), ((ALIGNED) / BITS_PER_UNIT)))\n \n /* A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "12e168ac68fca02ffda45fad7d55cfcbfd8ed9b6", "filename": "gcc/config/svr3.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsvr3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fsvr3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr3.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -93,7 +93,7 @@ Boston, MA 02111-1307, USA.\n     data_section ();\t\t\t\t\t\\\n     ASM_OUTPUT_ALIGN ((FILE), align == -1 ? 2 : align);\t\\\n     ASM_OUTPUT_LABEL ((FILE), (NAME));\t\t\t\\\n-    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (ROUNDED));\t\\\n+    fprintf ((FILE), \"\\t.set .,.+%u\\n\", (int)(ROUNDED));\t\\\n   } while (0)\n \n #if 0 /* For now, let's leave these machine-specific.  */"}, {"sha": "f0c118ae88e0188ebd4de2a44b912e3e738bbf14", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -1076,23 +1076,23 @@ enum reg_class { NO_REGS, ALL_REGS, LIM_REG_CLASSES };\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space %u\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space %u\\n\", (int)(SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".comm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* This says how to output an assembler line\n    to define a local common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\".lcomm \", (FILE)),\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",%u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \",%u\\n\", (int)(ROUNDED)))\n \n /* Store in OUTPUT a string (made with alloca) containing\n    an assembler-name for a local static variable named NAME."}, {"sha": "5e8c24987f0510c425d7671e00bcc869b79173ca", "filename": "gcc/config/vax/vaxv.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fvax%2Fvaxv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fconfig%2Fvax%2Fvaxv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvaxv.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -52,7 +52,7 @@ output_file_directive ((FILE), main_input_filename)\n #define ASM_OUTPUT_LOCAL(FILE,NAME,SIZE,ROUNDED)\t\\\n ( data_section (),\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \":\\n\\t.space %u\\n\", (ROUNDED)))\n+  fprintf ((FILE), \":\\n\\t.space %u\\n\", (int)(ROUNDED)))\n \n #define ASM_OUTPUT_ASCII(FILE,PTR,LEN)\t\t\t\\\n do {\t\t\t\t\t\t\t\\"}, {"sha": "8b6e36ac29102b67cd361667dc0be7680c5e5f4f", "filename": "gcc/expr.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fexpr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fexpr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -793,7 +793,7 @@ extern bool const_mult_add_overflow_p PARAMS ((rtx, rtx, rtx, enum machine_mode,\n extern rtx expand_mult_add PARAMS ((rtx, rtx, rtx, rtx,enum machine_mode, int));\n extern rtx expand_mult_highpart_adjust PARAMS ((enum machine_mode, rtx, rtx, rtx, rtx, int));\n \n-extern rtx assemble_static_space PARAMS ((int));\n+extern rtx assemble_static_space PARAMS ((unsigned HOST_WIDE_INT));\n extern int safe_from_p PARAMS ((rtx, tree, int));\n \n /* Call this once to initialize the contents of the optabs"}, {"sha": "5be997506a37a26f9af96ee5b45f88e567043572", "filename": "gcc/output.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -276,7 +276,7 @@ extern void assemble_variable\t\tPARAMS ((tree, int, int, int));\n extern void assemble_external\t\tPARAMS ((tree));\n \n /* Assemble code to leave SIZE bytes of zeros.  */\n-extern void assemble_zeros\t\tPARAMS ((int));\n+extern void assemble_zeros\t\tPARAMS ((unsigned HOST_WIDE_INT));\n \n /* Assemble an alignment pseudo op for an ALIGN-bit boundary.  */\n extern void assemble_align\t\tPARAMS ((int));\n@@ -363,7 +363,7 @@ extern tree initializer_constant_valid_p\tPARAMS ((tree, tree));\n    with zeros if necessary.  SIZE must always be specified.\n \n    ALIGN is the alignment in bits that may be assumed for the data.  */\n-extern void output_constant\t\tPARAMS ((tree, HOST_WIDE_INT,\n+extern void output_constant\t\tPARAMS ((tree, unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned int));\n \n /* When outputting delayed branch sequences, this rtx holds the"}, {"sha": "40191f6bead5c4cf26935350800430df9d0562e3", "filename": "gcc/varasm.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58e15542fc00d9d47324e657ae43d941b272f9a1/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=58e15542fc00d9d47324e657ae43d941b272f9a1", "patch": "@@ -163,22 +163,27 @@ static int mark_constant\t\tPARAMS ((rtx *current_rtx, void *data));\n static int output_addressed_constants\tPARAMS ((tree));\n static unsigned HOST_WIDE_INT array_size_for_constructor PARAMS ((tree));\n static unsigned min_align\t\tPARAMS ((unsigned, unsigned));\n-static void output_constructor\t\tPARAMS ((tree, HOST_WIDE_INT,\n+static void output_constructor\t\tPARAMS ((tree, unsigned HOST_WIDE_INT,\n \t\t\t\t\t\t unsigned int));\n static void globalize_decl\t\tPARAMS ((tree));\n static void maybe_assemble_visibility\tPARAMS ((tree));\n static int in_named_entry_eq\t\tPARAMS ((const PTR, const PTR));\n static hashval_t in_named_entry_hash\tPARAMS ((const PTR));\n #ifdef ASM_OUTPUT_BSS\n-static void asm_output_bss\t\tPARAMS ((FILE *, tree, const char *, int, int));\n+static void asm_output_bss\t\tPARAMS ((FILE *, tree, const char *,\n+\t\t\t\t\t\tunsigned HOST_WIDE_INT,\n+\t\t\t\t\t\tunsigned HOST_WIDE_INT));\n #endif\n #ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_ALIGNED_BSS\n static void asm_output_aligned_bss\n-  PARAMS ((FILE *, tree, const char *, int, int)) ATTRIBUTE_UNUSED;\n+  PARAMS ((FILE *, tree, const char *,\n+\t   unsigned HOST_WIDE_INT, int)) ATTRIBUTE_UNUSED;\n #endif\n #endif /* BSS_SECTION_ASM_OP */\n-static bool asm_emit_uninitialised\tPARAMS ((tree, const char*, int, int));\n+static bool asm_emit_uninitialised\tPARAMS ((tree, const char*,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT,\n+\t\t\t\t\t\t unsigned HOST_WIDE_INT));\n static void resolve_unique_section\tPARAMS ((tree, int, int));\n static void mark_weak                   PARAMS ((tree));\n \f\n@@ -501,7 +506,7 @@ asm_output_bss (file, decl, name, size, rounded)\n      FILE *file;\n      tree decl ATTRIBUTE_UNUSED;\n      const char *name;\n-     int size ATTRIBUTE_UNUSED, rounded;\n+     unsigned HOST_WIDE_INT size ATTRIBUTE_UNUSED, rounded;\n {\n   (*targetm.asm_out.globalize_label) (file, name);\n   bss_section ();\n@@ -529,7 +534,8 @@ asm_output_aligned_bss (file, decl, name, size, align)\n      FILE *file;\n      tree decl ATTRIBUTE_UNUSED;\n      const char *name;\n-     int size, align;\n+     unsigned HOST_WIDE_INT size;\n+     int align;\n {\n   bss_section ();\n   ASM_OUTPUT_ALIGN (file, floor_log2 (align / BITS_PER_UNIT));\n@@ -1208,7 +1214,7 @@ assemble_end_function (decl, fnname)\n \n void\n assemble_zeros (size)\n-     int size;\n+     unsigned HOST_WIDE_INT size;\n {\n   /* Do no output if -fsyntax-only.  */\n   if (flag_syntax_only)\n@@ -1219,7 +1225,7 @@ assemble_zeros (size)\n      so we must output 0s explicitly in the text section.  */\n   if (ASM_NO_SKIP_IN_TEXT && in_text_section ())\n     {\n-      int i;\n+      unsigned HOST_WIDE_INT i;\n       for (i = 0; i < size; i++)\n \tassemble_integer (const0_rtx, 1, BITS_PER_UNIT, 1);\n     }\n@@ -1309,8 +1315,8 @@ static bool\n asm_emit_uninitialised (decl, name, size, rounded)\n      tree decl;\n      const char *name;\n-     int size ATTRIBUTE_UNUSED;\n-     int rounded ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT size ATTRIBUTE_UNUSED;\n+     unsigned HOST_WIDE_INT rounded ATTRIBUTE_UNUSED;\n {\n   enum\n   {\n@@ -1751,7 +1757,7 @@ assemble_name (file, name)\n \n rtx\n assemble_static_space (size)\n-     int size;\n+     unsigned HOST_WIDE_INT size;\n {\n   char name[12];\n   const char *namestring;\n@@ -1780,7 +1786,7 @@ assemble_static_space (size)\n     /* Round size up to multiple of BIGGEST_ALIGNMENT bits\n        so that each uninitialized object starts on such a boundary.  */\n     /* Variable `rounded' might or might not be used in ASM_OUTPUT_LOCAL.  */\n-    int rounded ATTRIBUTE_UNUSED\n+    unsigned HOST_WIDE_INT rounded ATTRIBUTE_UNUSED\n       = ((size + (BIGGEST_ALIGNMENT / BITS_PER_UNIT) - 1)\n \t / (BIGGEST_ALIGNMENT / BITS_PER_UNIT)\n \t * (BIGGEST_ALIGNMENT / BITS_PER_UNIT));\n@@ -3767,11 +3773,11 @@ initializer_constant_valid_p (value, endtype)\n void\n output_constant (exp, size, align)\n      tree exp;\n-     HOST_WIDE_INT size;\n+     unsigned HOST_WIDE_INT size;\n      unsigned int align;\n {\n   enum tree_code code;\n-  HOST_WIDE_INT thissize;\n+  unsigned HOST_WIDE_INT thissize;\n \n   /* Some front-ends use constants other than the standard language-independent\n      varieties, but which may still be output directly.  Give the front-end a\n@@ -3851,7 +3857,8 @@ output_constant (exp, size, align)\n \t}\n       else if (TREE_CODE (exp) == STRING_CST)\n \t{\n-\t  thissize = MIN (TREE_STRING_LENGTH (exp), size);\n+\t  thissize = MIN ((unsigned HOST_WIDE_INT)TREE_STRING_LENGTH (exp),\n+\t\t\t  size);\n \t  assemble_string (TREE_STRING_POINTER (exp), thissize);\n \t}\n       else if (TREE_CODE (exp) == VECTOR_CST)\n@@ -3960,7 +3967,7 @@ array_size_for_constructor (val)\n static void\n output_constructor (exp, size, align)\n      tree exp;\n-     HOST_WIDE_INT size;\n+     unsigned HOST_WIDE_INT size;\n      unsigned int align;\n {\n   tree type = TREE_TYPE (exp);\n@@ -4256,7 +4263,7 @@ output_constructor (exp, size, align)\n       total_bytes++;\n     }\n \n-  if (total_bytes < size)\n+  if ((unsigned HOST_WIDE_INT)total_bytes < size)\n     assemble_zeros (size - total_bytes);\n }\n "}]}