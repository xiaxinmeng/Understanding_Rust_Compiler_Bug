{"sha": "8f8e7de31b408c5eab2d07cf753bd35a84875c09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY4ZTdkZTMxYjQwOGM1ZWFiMmQwN2NmNzUzYmQzNWE4NDg3NWMwOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@cygnus.com", "date": "1998-12-29T11:35:06Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "1998-12-29T11:35:06Z"}, "message": "bcp-1.c (bad10): Rename from opt3.\n\n        * gcc.c-torture/execute/bcp-1.c (bad10): Rename from opt3.\n        (opt3): Rename from opt4 and disable.\n\nFrom-SVN: r24437", "tree": {"sha": "5af3cfa50c047178f3e2a25b4d12c7c2567b0f74", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5af3cfa50c047178f3e2a25b4d12c7c2567b0f74"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f8e7de31b408c5eab2d07cf753bd35a84875c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8e7de31b408c5eab2d07cf753bd35a84875c09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f8e7de31b408c5eab2d07cf753bd35a84875c09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f8e7de31b408c5eab2d07cf753bd35a84875c09/comments", "author": null, "committer": null, "parents": [{"sha": "67211fa1fc863b62e0744db71ce6c15e95c7d3be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67211fa1fc863b62e0744db71ce6c15e95c7d3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67211fa1fc863b62e0744db71ce6c15e95c7d3be"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "4dc1279a2933051afe1d54ee72f4f570758bc769", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8e7de31b408c5eab2d07cf753bd35a84875c09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8e7de31b408c5eab2d07cf753bd35a84875c09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8f8e7de31b408c5eab2d07cf753bd35a84875c09", "patch": "@@ -1,3 +1,8 @@\n+Tue Dec 29 11:33:25 1998  Richard Henderson  <rth@cygnus.com>\n+\n+\t* gcc.c-torture/execute/bcp-1.c (bad10): Rename from opt3.\n+\t(opt3): Rename from opt4 and disable.\n+\n 1998-12-20  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* g++.old-deja/g++.pt/ptrmem5.C: New test."}, {"sha": "38b1d3e8e93910ed6feaf034a6e70460b5311cc9", "filename": "gcc/testsuite/gcc.c-torture/execute/bcp-1.c", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f8e7de31b408c5eab2d07cf753bd35a84875c09/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f8e7de31b408c5eab2d07cf753bd35a84875c09/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fbcp-1.c?ref=8f8e7de31b408c5eab2d07cf753bd35a84875c09", "patch": "@@ -11,6 +11,7 @@ inline int bad6(int x) { return __builtin_constant_p(x+1); }\n int bad7(void) { return __builtin_constant_p(abort()); }\n int bad8(void) { char buf[10]; return __builtin_constant_p(buf); }\n int bad9(const char *x) { return __builtin_constant_p(x[123456]); }\n+int bad10(void) { return __builtin_constant_p(&global); }\n \n /* These must pass, or we've broken gcc2 functionality.  */\n int good0(void) { return __builtin_constant_p(1); }\n@@ -20,14 +21,25 @@ int good2(void) { return __builtin_constant_p((1234 + 45) & ~7); }\n /* These are extensions to gcc2.  Failure indicates an optimization\n    regression.  */\n int opt0(void) { return bad3(1); }\n-int opt1(void) { return bad4(\"hi\"); }\n-int opt2(void) { return bad6(1); }\n-int opt3(void) { return __builtin_constant_p(&global); }\n-int opt4(void) { return __builtin_constant_p(\"hi\"[0]); }\n+int opt1(void) { return bad6(1); }\n+int opt2(void) { return __builtin_constant_p(\"hi\"[0]); }\n+\n+/* \n+ * Opt3 is known to fail.  It is one of the important cases that glibc\n+ * was interested in though, so keep this around as a reminder.\n+ *\n+ * The solution is to add bits to recover bytes from constant pool\n+ * elements given nothing but a constant pool label and an offset.\n+ * When we can do that, and we can simplify strlen after the fact,\n+ * then we can enable recognition of constant pool labels as constants.\n+ */\n+\n+/* int opt3(void) { return bad4(\"hi\"); } */\n+\n \n /* Call through tables so -finline-functions can't screw with us.  */\n int (*bad_t0[])(void) = {\n-\tbad0, bad1, bad5, bad7, bad8\n+\tbad0, bad1, bad5, bad7, bad8, bad10\n };\n \n int (*bad_t1[])(int x) = {\n@@ -43,7 +55,7 @@ int (*good_t0[])(void) = {\n };\n \n int (*opt_t0[])(void) = {\n-\topt0, opt1, opt2, opt3, opt4\n+\topt0, opt1, opt2 /* , opt3 */\n };\n \n #define N(arr) (sizeof(arr)/sizeof(*arr))"}]}