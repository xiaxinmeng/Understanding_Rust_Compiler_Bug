{"sha": "05008212fbb49fbae7f5a320f9028ea647a2e73f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDUwMDgyMTJmYmI0OWZiYWU3ZjVhMzIwZjkwMjhlYTY0N2EyZTczZg==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-02-13T07:33:40Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-02-13T07:33:40Z"}, "message": "2003-02-13  Michael Koch  <konqueror@gmx.de>\n\n\t* java/net/NetPermission.java\n\t(NetPermission): Make doucmentation match the method declaration.\n\t* java/net/NetworkInterface.java\n\t(equals): Reformated for GNU coding style.\n\t* java/net/ServerSocket.java: Merged with classpath.\n\t* java/net/Socket.java: Partly merged with classpath (Added some @since).\n\t* java/net/SocketImpl.java\n\t(localPort): Merged with classpath (initialize with -1).\n\t* java/net/SocketPermission.java: Merged with classpath (reindented).\n\t* java/net/URLDecoder.java: Merged with classpath (reindented).\n\nFrom-SVN: r62824", "tree": {"sha": "89ae8d65c0802ce86c5d1345cb30f8f9daef8b39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89ae8d65c0802ce86c5d1345cb30f8f9daef8b39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05008212fbb49fbae7f5a320f9028ea647a2e73f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05008212fbb49fbae7f5a320f9028ea647a2e73f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05008212fbb49fbae7f5a320f9028ea647a2e73f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05008212fbb49fbae7f5a320f9028ea647a2e73f/comments", "author": null, "committer": null, "parents": [{"sha": "4e3243ef0e18e11a7b463d78613a25adb49ace94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e3243ef0e18e11a7b463d78613a25adb49ace94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e3243ef0e18e11a7b463d78613a25adb49ace94"}], "stats": {"total": 183, "additions": 117, "deletions": 66}, "files": [{"sha": "884095ae68b0f1de4b887844c3f70fb25dd5582d", "filename": "ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -1,3 +1,16 @@\n+2003-02-13  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/net/NetPermission.java\n+\t(NetPermission): Make doucmentation match the method declaration.\n+\t* java/net/NetworkInterface.java\n+\t(equals): Reformated for GNU coding style.\n+\t* java/net/ServerSocket.java: Merged with classpath.\n+\t* java/net/Socket.java: Partly merged with classpath (Added some @since).\n+\t* java/net/SocketImpl.java\n+\t(localPort): Merged with classpath (initialize with -1).\n+\t* java/net/SocketPermission.java: Merged with classpath (reindented).\n+\t* java/net/URLDecoder.java: Merged with classpath (reindented).\n+\n 2003-02-08  Laurynas Biveinis  <laurynas.biveinis@mif.vu.lt>\n \n \t* MAINTAINERS: Update my email."}, {"sha": "1807d457d6c53e13f8e452fdf6efe1aea7f54202", "filename": "libjava/java/net/NetPermission.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FNetPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FNetPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetPermission.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -64,7 +64,7 @@ public NetPermission(String name)\n \n   /**\n    * Initializes a new instance of <code>NetPermission</code> with the \n-   * specified name and value.  Note that the value field is irrelevant and is \n+   * specified name and perms.  Note that the perms field is irrelevant and is \n    * ignored.  This constructor should never need to be used.\n    *\n    * @param name The name of this permission"}, {"sha": "32c2cd53db0c012083a78f5fd6f3ef11e33b9fab", "filename": "libjava/java/net/NetworkInterface.java", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FNetworkInterface.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FNetworkInterface.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -200,8 +200,9 @@ public boolean equals (Object obj)\n       return false;\n    \n     NetworkInterface tmp = (NetworkInterface) obj;\n-    return name.equals (tmp.name) &&\n-           inetAddresses.equals (tmp.inetAddresses);\n+    \n+    return (name.equals (tmp.name)\n+            && inetAddresses.equals (tmp.inetAddresses));\n   }\n \n   /**"}, {"sha": "0285c128c771abd8404bae723918c82a304dbfa7", "filename": "libjava/java/net/ServerSocket.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FServerSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FServerSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FServerSocket.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -356,7 +356,7 @@ public boolean isBound()\n       }\n     catch (SocketException e)\n       {\n-\treturn false;\n+        return false;\n       }\n     \n     return true;"}, {"sha": "005fd0461b2e591dd3fc13ea8dc315b8ce2ecb77", "filename": "libjava/java/net/Socket.java", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocket.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocket.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocket.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -95,6 +95,7 @@\n    * might want this behavior.\n    *\n    * @specnote This constructor is public since JDK 1.4\n+   * @since 1.1\n    */\n   public Socket ()\n   {\n@@ -122,6 +123,8 @@ public Socket ()\n    *             <code>Socket</code>\n    *\n    * @exception SocketException If an error occurs\n+   *\n+   * @since 1.1\n    */\n   protected Socket (SocketImpl impl) throws SocketException\n   {\n@@ -180,6 +183,8 @@ public Socket (InetAddress address, int port)\n    * exists and does not allow a connection to the specified host/port or\n    * binding to the specified local host/port.\n    * @exception IOException If a connection error occurs.\n+   *\n+   * @since 1.1\n    */\n   public Socket (String host, int port,\n \t\t InetAddress localAddr, int localPort) throws IOException\n@@ -200,6 +205,8 @@ public Socket (String host, int port,\n    * @exception IOException If an error occurs\n    * @exception SecurityException If a security manager exists and its\n    * checkConnect method doesn't allow the operation\n+   *\n+   * @since 1.1\n    */\n   public Socket (InetAddress address, int port,\n \t\t InetAddress localAddr, int localPort) throws IOException\n@@ -396,6 +403,8 @@ public InetAddress getInetAddress ()\n    * is not connected, then <code>null</code> is returned.\n    *\n    * @return The local address\n+   *\n+   * @since 1.1\n    */\n   public InetAddress getLocalAddress ()\n   {\n@@ -521,6 +530,8 @@ public OutputStream getOutputStream () throws IOException\n    * @param on true to enable, false to disable\n    * \n    * @exception SocketException If an error occurs or Socket is not connected\n+   *\n+   * @since 1.1\n    */\n   public void setTcpNoDelay (boolean on)  throws SocketException\n   {\n@@ -539,6 +550,8 @@ public void setTcpNoDelay (boolean on)  throws SocketException\n    * @return Whether or not TCP_NODELAY is set\n    * \n    * @exception SocketException If an error occurs or Socket not connected\n+   *\n+   * @since 1.1\n    */\n   public boolean getTcpNoDelay() throws SocketException\n   {\n@@ -567,6 +580,8 @@ public boolean getTcpNoDelay() throws SocketException\n    *\n    * @exception SocketException If an error occurs or Socket not connected\n    * @exception IllegalArgumentException If linger is negative\n+   *\n+   * @since 1.1\n    */\n   public void setSoLinger(boolean on, int linger) throws SocketException\n   {\n@@ -602,6 +617,8 @@ public void setSoLinger(boolean on, int linger) throws SocketException\n    * if SO_LINGER not set\n    *\n    * @exception SocketException If an error occurs or Socket is not connected\n+   *\n+   * @since 1.1\n    */\n   public int getSoLinger() throws SocketException\n   {\n@@ -681,6 +698,8 @@ public boolean getOOBInline () throws SocketException\n    * 0 if not set\n    *\n    * @exception SocketException If an error occurs or Socket not connected\n+   *\n+   * @since 1.1\n    */\n   public synchronized void setSoTimeout (int timeout) throws SocketException\n   {\n@@ -707,6 +726,8 @@ public synchronized void setSoTimeout (int timeout) throws SocketException\n    * if not set\n    *\n    * @exception SocketException If an error occurs or Socket not connected\n+   *\n+   * @since 1.1\n    */\n   public synchronized int getSoTimeout () throws SocketException\n   {\n@@ -822,7 +843,7 @@ public int getReceiveBufferSize () throws SocketException\n    *\n    * @exception SocketException If an error occurs or Socket is not connected\n    *\n-   * @since Java 1.3\n+   * @since 1.3\n    */\n   public void setKeepAlive (boolean on) throws SocketException\n   {\n@@ -840,7 +861,7 @@ public void setKeepAlive (boolean on) throws SocketException\n    *\n    * @exception SocketException If an error occurs or Socket is not connected\n    *\n-   * @since Java 1.3\n+   * @since 1.3\n    */\n   public boolean getKeepAlive () throws SocketException\n   {\n@@ -918,6 +939,8 @@ public static synchronized void setSocketImplFactory (SocketImplFactory fac)\n    * Closes the input side of the socket stream.\n    *\n    * @exception IOException If an error occurs.\n+   *\n+   * @since 1.3\n    */\n   public void shutdownInput() throws IOException\n   {\n@@ -931,6 +954,8 @@ public void shutdownInput() throws IOException\n    * Closes the output side of the socket stream.\n    *\n    * @exception IOException If an error occurs.\n+   *\n+   * @since 1.3\n    */\n   public void shutdownOutput() throws IOException\n   {\n@@ -944,6 +969,8 @@ public void shutdownOutput() throws IOException\n    * Returns the socket channel associated with this socket.\n    *\n    * It returns null if no associated socket exists.\n+   *\n+   * @since 1.4\n    */\n   public SocketChannel getChannel()\n   {\n@@ -1032,6 +1059,8 @@ public void setTrafficClass (int tc) throws SocketException\n \n   /**\n    * Checks if the socket is connected\n+   *\n+   * @since 1.4\n    */\n   public boolean isConnected ()\n   {\n@@ -1040,6 +1069,8 @@ public boolean isConnected ()\n \n   /**\n    * Checks if the socket is already bound.\n+   *\n+   * @since 1.4\n    */\n   public boolean isBound ()\n   {\n@@ -1048,6 +1079,8 @@ public boolean isBound ()\n \n   /**\n    * Checks if the socket is closed.\n+   * \n+   * @since 1.4\n    */\n   public boolean isClosed ()\n   {\n@@ -1056,6 +1089,8 @@ public boolean isClosed ()\n \n   /**\n    * Checks if the socket's input stream is shutdown\n+   *\n+   * @since 1.4\n    */\n   public boolean isInputShutdown ()\n   {\n@@ -1064,6 +1099,8 @@ public boolean isInputShutdown ()\n \n   /**\n    * Checks if the socket's output stream is shutdown\n+   *\n+   * @since 1.4\n    */\n   public boolean isOutputShutdown ()\n   {"}, {"sha": "12dcb0b9a5c72c383ccdfaea01caefa699c82566", "filename": "libjava/java/net/SocketImpl.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocketImpl.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocketImpl.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketImpl.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -74,7 +74,7 @@ public abstract class SocketImpl implements SocketOptions\n   /**\n    * The port number the socket is bound to locally\n    */\n-  protected int localport;\n+  protected int localport = -1;\n \n   /**\n    * The port number of the remote end of the socket connection"}, {"sha": "6fa65f8793ac367e954d1b993f83497b6e48194d", "filename": "libjava/java/net/SocketPermission.java", "status": "modified", "additions": 56, "deletions": 56, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocketPermission.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FSocketPermission.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FSocketPermission.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -276,62 +276,62 @@ public boolean implies(Permission perm)\n     // Get ours\n     if (hostport.indexOf(\":\") == -1)\n       {\n-\tourfirstport = 0;\n-\tourlastport = 65535;\n+        ourfirstport = 0;\n+        ourlastport = 65535;\n       }\n     else\n       {\n-\t// FIXME:  Needs bulletproofing.\n-\t// This will dump if hostport if all sorts of bad data was passed to\n-\t// the constructor\n-\tString range = hostport.substring(hostport.indexOf(\":\") + 1);\n-\tif (range.startsWith(\"-\"))\n-\t  ourfirstport = 0;\n-\telse if (range.indexOf(\"-\") == -1)\n-\t  ourfirstport = Integer.parseInt(range);\n-\telse\n-\t  ourfirstport =\n-\t    Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n-\n-\tif (range.endsWith(\"-\"))\n-\t  ourlastport = 65535;\n-\telse if (range.indexOf(\"-\") == -1)\n-\t  ourlastport = Integer.parseInt(range);\n-\telse\n-\t  ourlastport =\n-\t    Integer.parseInt(range.\n-\t\t\t     substring(range.indexOf(\"-\") + 1,\n-\t\t\t\t       range.length()));\n+        // FIXME:  Needs bulletproofing.\n+        // This will dump if hostport if all sorts of bad data was passed to\n+        // the constructor\n+        String range = hostport.substring(hostport.indexOf(\":\") + 1);\n+        if (range.startsWith(\"-\"))\n+          ourfirstport = 0;\n+        else if (range.indexOf(\"-\") == -1)\n+          ourfirstport = Integer.parseInt(range);\n+        else\n+          ourfirstport =\n+            Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n+\n+        if (range.endsWith(\"-\"))\n+          ourlastport = 65535;\n+        else if (range.indexOf(\"-\") == -1)\n+          ourlastport = Integer.parseInt(range);\n+        else\n+          ourlastport =\n+            Integer.parseInt(range.\n+                             substring(range.indexOf(\"-\") + 1,\n+                                       range.length()));\n       }\n \n     // Get theirs\n     if (p.hostport.indexOf(\":\") == -1)\n       {\n-\ttheirfirstport = 0;\n-\tourlastport = 65535;\n+        theirfirstport = 0;\n+        ourlastport = 65535;\n       }\n     else\n       {\n-\t// This will dump if hostport if all sorts of bad data was passed to\n-\t// the constructor\n-\tString range = p.hostport.substring(hostport.indexOf(\":\") + 1);\n-\tif (range.startsWith(\"-\"))\n-\t  theirfirstport = 0;\n-\telse if (range.indexOf(\"-\") == -1)\n-\t  theirfirstport = Integer.parseInt(range);\n-\telse\n-\t  theirfirstport =\n-\t    Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n-\n-\tif (range.endsWith(\"-\"))\n-\t  theirlastport = 65535;\n-\telse if (range.indexOf(\"-\") == -1)\n-\t  theirlastport = Integer.parseInt(range);\n-\telse\n-\t  theirlastport =\n-\t    Integer.parseInt(range.\n-\t\t\t     substring(range.indexOf(\"-\") + 1,\n-\t\t\t\t       range.length()));\n+        // This will dump if hostport if all sorts of bad data was passed to\n+        // the constructor\n+        String range = p.hostport.substring(hostport.indexOf(\":\") + 1);\n+        if (range.startsWith(\"-\"))\n+          theirfirstport = 0;\n+        else if (range.indexOf(\"-\") == -1)\n+          theirfirstport = Integer.parseInt(range);\n+        else\n+          theirfirstport =\n+            Integer.parseInt(range.substring(0, range.indexOf(\"-\")));\n+\n+        if (range.endsWith(\"-\"))\n+          theirlastport = 65535;\n+        else if (range.indexOf(\"-\") == -1)\n+          theirlastport = Integer.parseInt(range);\n+        else\n+          theirlastport =\n+            Integer.parseInt(range.\n+                             substring(range.indexOf(\"-\") + 1,\n+                                       range.length()));\n       }\n \n     // Now check them\n@@ -361,17 +361,17 @@ else if (range.indexOf(\"-\") == -1)\n     String ourcanonical = null, theircanonical = null;\n     try\n       {\n-\tourcanonical = InetAddress.getByName(ourhost).getHostName();\n-\ttheircanonical = InetAddress.getByName(theirhost).getHostName();\n+        ourcanonical = InetAddress.getByName(ourhost).getHostName();\n+        theircanonical = InetAddress.getByName(theirhost).getHostName();\n       }\n     catch (UnknownHostException e)\n       {\n-\t// Who didn't resolve?  Just assume current address is canonical enough\n-\t// Is this ok to do?\n-\tif (ourcanonical == null)\n-\t  ourcanonical = ourhost;\n-\tif (theircanonical == null)\n-\t  theircanonical = theirhost;\n+        // Who didn't resolve?  Just assume current address is canonical enough\n+        // Is this ok to do?\n+        if (ourcanonical == null)\n+          ourcanonical = ourhost;\n+        if (theircanonical == null)\n+          theircanonical = theirhost;\n       }\n \n     if (ourcanonical.equals(theircanonical))\n@@ -380,9 +380,9 @@ else if (range.indexOf(\"-\") == -1)\n     // Well, last chance.  Try for a wildcard\n     if (ourhost.indexOf(\"*.\") != -1)\n       {\n-\tString wild_domain = ourhost.substring(ourhost.indexOf(\"*\" + 1));\n-\tif (theircanonical.endsWith(wild_domain))\n-\t  return (true);\n+        String wild_domain = ourhost.substring(ourhost.indexOf(\"*\" + 1));\n+        if (theircanonical.endsWith(wild_domain))\n+          return (true);\n       }\n \n     // Didn't make it"}, {"sha": "0a9067160b2751b13131b587397f2854c3320d34", "filename": "libjava/java/net/URLDecoder.java", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FURLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05008212fbb49fbae7f5a320f9028ea647a2e73f/libjava%2Fjava%2Fnet%2FURLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FURLDecoder.java?ref=05008212fbb49fbae7f5a320f9028ea647a2e73f", "patch": "@@ -82,12 +82,12 @@ public static String decode(String s)\n   {\n     try\n       {\n-\treturn decode(s, \"UTF-8\");\n+        return decode(s, \"UTF-8\");\n       }\n     catch (UnsupportedEncodingException uee)\n       {\n-\t// Should never happen since UTF-8 encoding should always be supported\n-\treturn s;\n+        // Should never happen since UTF-8 encoding should always be supported\n+        return s;\n       }\n   }\n "}]}