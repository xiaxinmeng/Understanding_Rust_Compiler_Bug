{"sha": "e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "node_id": "C_kwDOANBUbNoAKGUxYjE5M2MxY2NlM2E5NzVhOWVkNjBkZDBmMzAxODJmZTAyNTVkN2M", "commit": {"author": {"name": "Takayuki 'January June' Suwa", "email": "jjsuwa_sys3175@yahoo.co.jp", "date": "2022-01-31T00:56:21Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2022-06-14T00:25:48Z"}, "message": "xtensa: Simplify conditional branch/move insn patterns\n\nNo need to describe the \"false side\" conditional insn patterns anymore.\n\ngcc/ChangeLog:\n\n\t* config/xtensa/xtensa-protos.h (xtensa_emit_branch):\n\tRemove the first argument.\n\t(xtensa_emit_bit_branch): Remove it because now called only from the\n\toutput statement of *bittrue insn pattern.\n\t* config/xtensa/xtensa.cc (gen_int_relational): Remove the last\n\targument 'p_invert', and make so that the condition is reversed by\n\titself as needed.\n\t(xtensa_expand_conditional_branch): Share the common path, and remove\n\tcondition inversion code.\n\t(xtensa_emit_branch, xtensa_emit_movcc): Simplify by removing the\n\t\"false side\" pattern.\n\t(xtensa_emit_bit_branch): Remove it because of the abovementioned\n\treason, and move the function body to *bittrue insn pattern.\n\t* config/xtensa/xtensa.md (*bittrue): Transplant the output\n\tstatement from removed xtensa_emit_bit_branch().\n\t(*bfalse, *ubfalse, *bitfalse, *maskfalse): Remove the \"false side\"\n\tinsn patterns.", "tree": {"sha": "5c99f3fb9bf37316d53f626d8cb683ba2e2cb45a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5c99f3fb9bf37316d53f626d8cb683ba2e2cb45a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/comments", "author": {"login": "jjsuwa-sys3175", "id": 73290592, "node_id": "MDQ6VXNlcjczMjkwNTky", "avatar_url": "https://avatars.githubusercontent.com/u/73290592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jjsuwa-sys3175", "html_url": "https://github.com/jjsuwa-sys3175", "followers_url": "https://api.github.com/users/jjsuwa-sys3175/followers", "following_url": "https://api.github.com/users/jjsuwa-sys3175/following{/other_user}", "gists_url": "https://api.github.com/users/jjsuwa-sys3175/gists{/gist_id}", "starred_url": "https://api.github.com/users/jjsuwa-sys3175/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jjsuwa-sys3175/subscriptions", "organizations_url": "https://api.github.com/users/jjsuwa-sys3175/orgs", "repos_url": "https://api.github.com/users/jjsuwa-sys3175/repos", "events_url": "https://api.github.com/users/jjsuwa-sys3175/events{/privacy}", "received_events_url": "https://api.github.com/users/jjsuwa-sys3175/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c68ec1f8ab531fba56cccf549ffe592bf622821", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c68ec1f8ab531fba56cccf549ffe592bf622821", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c68ec1f8ab531fba56cccf549ffe592bf622821"}], "stats": {"total": 231, "additions": 70, "deletions": 161}, "files": [{"sha": "168ad70710ba095a1075cf755973a3c35afeac58", "filename": "gcc/config/xtensa/xtensa-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa-protos.h?ref=e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "patch": "@@ -51,8 +51,7 @@ extern void xtensa_expand_nonlocal_goto (rtx *);\n extern void xtensa_expand_compare_and_swap (rtx, rtx, rtx, rtx);\n extern void xtensa_expand_atomic (enum rtx_code, rtx, rtx, rtx, bool);\n extern void xtensa_emit_loop_end (rtx_insn *, rtx *);\n-extern char *xtensa_emit_branch (bool, bool, rtx *);\n-extern char *xtensa_emit_bit_branch (bool, bool, rtx *);\n+extern char *xtensa_emit_branch (bool, rtx *);\n extern char *xtensa_emit_movcc (bool, bool, bool, rtx *);\n extern char *xtensa_emit_call (int, rtx *);\n extern bool xtensa_tls_referenced_p (rtx);"}, {"sha": "58b6eb0b71118baf996becad58f673be8afaa4ba", "filename": "gcc/config/xtensa/xtensa.cc", "status": "modified", "additions": 38, "deletions": 73, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.cc?ref=e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "patch": "@@ -118,7 +118,7 @@ const char xtensa_leaf_regs[FIRST_PSEUDO_REGISTER] =\n \n static void xtensa_option_override (void);\n static enum internal_test map_test_to_internal_test (enum rtx_code);\n-static rtx gen_int_relational (enum rtx_code, rtx, rtx, int *);\n+static rtx gen_int_relational (enum rtx_code, rtx, rtx);\n static rtx gen_float_relational (enum rtx_code, rtx, rtx);\n static rtx gen_conditional_move (enum rtx_code, machine_mode, rtx, rtx);\n static rtx fixup_subreg_mem (rtx);\n@@ -680,8 +680,7 @@ map_test_to_internal_test (enum rtx_code test_code)\n static rtx\n gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n \t\t    rtx cmp0, /* first operand to compare */\n-\t\t    rtx cmp1, /* second operand to compare */\n-\t\t    int *p_invert /* whether branch needs to reverse test */)\n+\t\t    rtx cmp1 /* second operand to compare */)\n {\n   struct cmp_info\n   {\n@@ -713,6 +712,7 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n   enum internal_test test;\n   machine_mode mode;\n   struct cmp_info *p_info;\n+  int invert;\n \n   test = map_test_to_internal_test (test_code);\n   gcc_assert (test != ITEST_MAX);\n@@ -749,9 +749,9 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n     }\n \n   /* See if we need to invert the result.  */\n-  *p_invert = ((GET_CODE (cmp1) == CONST_INT)\n-\t       ? p_info->invert_const\n-\t       : p_info->invert_reg);\n+  invert = ((GET_CODE (cmp1) == CONST_INT)\n+\t    ? p_info->invert_const\n+\t    : p_info->invert_reg);\n \n   /* Comparison to constants, may involve adding 1 to change a LT into LE.\n      Comparison between two registers, may involve switching operands.  */\n@@ -768,7 +768,9 @@ gen_int_relational (enum rtx_code test_code, /* relational test (EQ, etc) */\n       cmp1 = temp;\n     }\n \n-  return gen_rtx_fmt_ee (p_info->test_code, VOIDmode, cmp0, cmp1);\n+  return gen_rtx_fmt_ee (invert ? reverse_condition (p_info->test_code)\n+\t\t\t\t: p_info->test_code,\n+\t\t\t VOIDmode, cmp0, cmp1);\n }\n \n \n@@ -827,45 +829,33 @@ xtensa_expand_conditional_branch (rtx *operands, machine_mode mode)\n   enum rtx_code test_code = GET_CODE (operands[0]);\n   rtx cmp0 = operands[1];\n   rtx cmp1 = operands[2];\n-  rtx cmp;\n-  int invert;\n-  rtx label1, label2;\n+  rtx cmp, label;\n \n   switch (mode)\n     {\n+    case E_SFmode:\n+      if (TARGET_HARD_FLOAT)\n+\t{\n+\t  cmp = gen_float_relational (test_code, cmp0, cmp1);\n+\t  break;\n+\t}\n+      /* FALLTHRU */\n+\n     case E_DFmode:\n     default:\n       fatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode, cmp0, cmp1));\n \n     case E_SImode:\n-      invert = FALSE;\n-      cmp = gen_int_relational (test_code, cmp0, cmp1, &invert);\n-      break;\n-\n-    case E_SFmode:\n-      if (!TARGET_HARD_FLOAT)\n-\tfatal_insn (\"bad test\", gen_rtx_fmt_ee (test_code, VOIDmode,\n-\t\t\t\t\t\tcmp0, cmp1));\n-      invert = FALSE;\n-      cmp = gen_float_relational (test_code, cmp0, cmp1);\n+      cmp = gen_int_relational (test_code, cmp0, cmp1);\n       break;\n     }\n \n   /* Generate the branch.  */\n-\n-  label1 = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n-  label2 = pc_rtx;\n-\n-  if (invert)\n-    {\n-      label2 = label1;\n-      label1 = pc_rtx;\n-    }\n-\n+  label = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n   emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, cmp,\n-\t\t\t\t\t\t     label1,\n-\t\t\t\t\t\t     label2)));\n+\t\t\t\t\t\t     label,\n+\t\t\t\t\t\t     pc_rtx)));\n }\n \n \n@@ -2068,21 +2058,20 @@ xtensa_emit_loop_end (rtx_insn *insn, rtx *operands)\n \n \n char *\n-xtensa_emit_branch (bool inverted, bool immed, rtx *operands)\n+xtensa_emit_branch (bool immed, rtx *operands)\n {\n   static char result[64];\n-  enum rtx_code code;\n+  enum rtx_code code = GET_CODE (operands[3]);\n   const char *op;\n \n-  code = GET_CODE (operands[3]);\n   switch (code)\n     {\n-    case EQ:\top = inverted ? \"ne\" : \"eq\"; break;\n-    case NE:\top = inverted ? \"eq\" : \"ne\"; break;\n-    case LT:\top = inverted ? \"ge\" : \"lt\"; break;\n-    case GE:\top = inverted ? \"lt\" : \"ge\"; break;\n-    case LTU:\top = inverted ? \"geu\" : \"ltu\"; break;\n-    case GEU:\top = inverted ? \"ltu\" : \"geu\"; break;\n+    case EQ:\top = \"eq\"; break;\n+    case NE:\top = \"ne\"; break;\n+    case LT:\top = \"lt\"; break;\n+    case GE:\top = \"ge\"; break;\n+    case LTU:\top = \"ltu\"; break;\n+    case GEU:\top = \"geu\"; break;\n     default:\tgcc_unreachable ();\n     }\n \n@@ -2101,32 +2090,6 @@ xtensa_emit_branch (bool inverted, bool immed, rtx *operands)\n }\n \n \n-char *\n-xtensa_emit_bit_branch (bool inverted, bool immed, rtx *operands)\n-{\n-  static char result[64];\n-  const char *op;\n-\n-  switch (GET_CODE (operands[3]))\n-    {\n-    case EQ:\top = inverted ? \"bs\" : \"bc\"; break;\n-    case NE:\top = inverted ? \"bc\" : \"bs\"; break;\n-    default:\tgcc_unreachable ();\n-    }\n-\n-  if (immed)\n-    {\n-      unsigned bitnum = INTVAL (operands[1]) & 0x1f; \n-      operands[1] = GEN_INT (bitnum); \n-      sprintf (result, \"b%si\\t%%0, %%d1, %%2\", op);\n-    }\n-  else\n-    sprintf (result, \"b%s\\t%%0, %%1, %%2\", op);\n-\n-  return result;\n-}\n-\n-\n char *\n xtensa_emit_movcc (bool inverted, bool isfp, bool isbool, rtx *operands)\n {\n@@ -2135,23 +2098,25 @@ xtensa_emit_movcc (bool inverted, bool isfp, bool isbool, rtx *operands)\n   const char *op;\n \n   code = GET_CODE (operands[4]);\n+  if (inverted)\n+    code = reverse_condition (code);\n   if (isbool)\n     {\n       switch (code)\n \t{\n-\tcase EQ:\top = inverted ? \"t\" : \"f\"; break;\n-\tcase NE:\top = inverted ? \"f\" : \"t\"; break;\n+\tcase EQ:\top = \"f\"; break;\n+\tcase NE:\top = \"t\"; break;\n \tdefault:\tgcc_unreachable ();\n \t}\n     }\n   else\n     {\n       switch (code)\n \t{\n-\tcase EQ:\top = inverted ? \"nez\" : \"eqz\"; break;\n-\tcase NE:\top = inverted ? \"eqz\" : \"nez\"; break;\n-\tcase LT:\top = inverted ? \"gez\" : \"ltz\"; break;\n-\tcase GE:\top = inverted ? \"ltz\" : \"gez\"; break;\n+\tcase EQ:\top = \"eqz\"; break;\n+\tcase NE:\top = \"nez\"; break;\n+\tcase LT:\top = \"ltz\"; break;\n+\tcase GE:\top = \"gez\"; break;\n \tdefault:\tgcc_unreachable ();\n \t}\n     }"}, {"sha": "449e4b242622146b873767e474f34cebde9ea6ae", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 31, "deletions": 86, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1b193c1cce3a975a9ed60dd0f30182fe0255d7c/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=e1b193c1cce3a975a9ed60dd0f30182fe0255d7c", "patch": "@@ -1546,28 +1546,13 @@\n (define_insn \"*btrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"branch_operator\"\n-\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 1 \"branch_operand\" \"K,r\")])\n+\t\t\t[(match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t (match_operand:SI 1 \"branch_operand\" \"K,r\")])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n-  return xtensa_emit_branch (false, which_alternative == 0, operands);\n-}\n-  [(set_attr \"type\"\t\"jump,jump\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3,3\")])\n-\n-(define_insn \"*bfalse\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 3 \"branch_operator\"\n-\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 1 \"branch_operand\" \"K,r\")])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n-  \"\"\n-{\n-  return xtensa_emit_branch (true, which_alternative == 0, operands);\n+  return xtensa_emit_branch (which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1576,28 +1561,13 @@\n (define_insn \"*ubtrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"ubranch_operator\"\n-\t\t       [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t(match_operand:SI 1 \"ubranch_operand\" \"L,r\")])\n+\t\t\t[(match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t (match_operand:SI 1 \"ubranch_operand\" \"L,r\")])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n-  return xtensa_emit_branch (false, which_alternative == 0, operands);\n-}\n-  [(set_attr \"type\"\t\"jump,jump\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3,3\")])\n-\n-(define_insn \"*ubfalse\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 3 \"ubranch_operator\"\n-\t\t\t [(match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t  (match_operand:SI 1 \"ubranch_operand\" \"L,r\")])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n-  \"\"\n-{\n-  return xtensa_emit_branch (true, which_alternative == 0, operands);\n+  return xtensa_emit_branch (which_alternative == 0, operands);\n }\n   [(set_attr \"type\"\t\"jump,jump\")\n    (set_attr \"mode\"\t\"none\")\n@@ -1608,75 +1578,50 @@\n (define_insn \"*bittrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"boolean_operator\"\n-\t\t\t[(zero_extract:SI\n-\t\t\t    (match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"arith_operand\" \"J,r\"))\n-\t\t\t (const_int 0)])\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))\n-\t\t      (pc)))]\n-  \"\"\n-{\n-  return xtensa_emit_bit_branch (false, which_alternative == 0, operands);\n-}\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*bitfalse\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 3 \"boolean_operator\"\n-\t\t\t[(zero_extract:SI\n-\t\t\t    (match_operand:SI 0 \"register_operand\" \"r,r\")\n-\t\t\t    (const_int 1)\n-\t\t\t    (match_operand:SI 1 \"arith_operand\" \"J,r\"))\n+\t\t\t[(zero_extract:SI (match_operand:SI 0 \"register_operand\" \"r,r\")\n+\t\t\t\t\t  (const_int 1)\n+\t\t\t\t\t  (match_operand:SI 1 \"arith_operand\" \"J,r\"))\n \t\t\t (const_int 0)])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n-  \"\"\n-{\n-  return xtensa_emit_bit_branch (true, which_alternative == 0, operands);\n-}\n-  [(set_attr \"type\"\t\"jump\")\n-   (set_attr \"mode\"\t\"none\")\n-   (set_attr \"length\"\t\"3\")])\n-\n-(define_insn \"*masktrue\"\n-  [(set (pc)\n-\t(if_then_else (match_operator 3 \"boolean_operator\"\n-\t\t [(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t  (const_int 0)])\n \t\t      (label_ref (match_operand 2 \"\" \"\"))\n \t\t      (pc)))]\n   \"\"\n {\n+  static char result[64];\n+  char op;\n   switch (GET_CODE (operands[3]))\n     {\n-    case EQ:\t\treturn \"bnone\\t%0, %1, %2\";\n-    case NE:\t\treturn \"bany\\t%0, %1, %2\";\n-    default:\t\tgcc_unreachable ();\n+    case EQ:\top = 'c'; break;\n+    case NE:\top = 's'; break;\n+    default:\tgcc_unreachable ();\n     }\n+  if (which_alternative == 0)\n+    {\n+      operands[1] = GEN_INT (INTVAL (operands[1]) & 0x1f);\n+      sprintf (result, \"bb%ci\\t%%0, %%d1, %%2\", op);\n+    }\n+  else\n+    sprintf (result, \"bb%c\\t%%0, %%1, %%2\", op);\n+  return result;\n }\n   [(set_attr \"type\"\t\"jump\")\n    (set_attr \"mode\"\t\"none\")\n    (set_attr \"length\"\t\"3\")])\n \n-(define_insn \"*maskfalse\"\n+(define_insn \"*masktrue\"\n   [(set (pc)\n \t(if_then_else (match_operator 3 \"boolean_operator\"\n-\t\t [(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n-\t\t\t  (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t\t  (const_int 0)])\n-\t\t      (pc)\n-\t\t      (label_ref (match_operand 2 \"\" \"\"))))]\n+\t\t\t[(and:SI (match_operand:SI 0 \"register_operand\" \"r\")\n+\t\t\t\t (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t\t (const_int 0)])\n+\t\t      (label_ref (match_operand 2 \"\" \"\"))\n+\t\t      (pc)))]\n   \"\"\n {\n   switch (GET_CODE (operands[3]))\n     {\n-    case EQ:\t\treturn \"bany\\t%0, %1, %2\";\n-    case NE:\t\treturn \"bnone\\t%0, %1, %2\";\n-    default:\t\tgcc_unreachable ();\n+    case EQ:\treturn \"bnone\\t%0, %1, %2\";\n+    case NE:\treturn \"bany\\t%0, %1, %2\";\n+    default:\tgcc_unreachable ();\n     }\n }\n   [(set_attr \"type\"\t\"jump\")"}]}