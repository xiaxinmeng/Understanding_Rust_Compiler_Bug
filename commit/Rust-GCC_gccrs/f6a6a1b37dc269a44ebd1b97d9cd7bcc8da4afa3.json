{"sha": "f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZhNmExYjM3ZGMyNjlhNDRlYmQxYjk3ZDljZDdiY2M4ZGE0YWZhMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-03-28T22:37:37Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1997-03-28T22:37:37Z"}, "message": "jump.c (jump_optimize, [...]): Disable some optimizations when flag_test_coverage and there is a line number...\n\n\t* jump.c (jump_optimize, follow_jumps, mark_jump_label): Disable some\n \toptimizations when flag_test_coverage and there is a line number note\n \tin the way.\n\t(invert_jump): Add REG_BR_PROB when flag_branch_probabililties.\n\nFrom-SVN: r13817", "tree": {"sha": "d0b6e96b02af296d5f28ab6307915793858bca3e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0b6e96b02af296d5f28ab6307915793858bca3e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3/comments", "author": null, "committer": null, "parents": [{"sha": "9b53bc830d1742473e40a722d634118b11e199b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b53bc830d1742473e40a722d634118b11e199b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b53bc830d1742473e40a722d634118b11e199b5"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "2253f7b04ef44b71ccf4f184292449ba0f92c269", "filename": "gcc/jump.c", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=f6a6a1b37dc269a44ebd1b97d9cd7bcc8da4afa3", "patch": "@@ -1869,9 +1869,21 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t\t   && (next_active_insn (JUMP_LABEL (insn))\n \t\t       == next_active_insn (JUMP_LABEL (temp))))\n \t    {\n-\t      delete_jump (insn);\n-\t      changed = 1;\n-\t      continue;\n+\t      rtx tem = temp;\n+\n+\t      /* ??? Optional.  Disables some optimizations, but makes\n+\t\t gcov output more accurate with -O.  */\n+\t      if (flag_test_coverage && !reload_completed)\n+\t\tfor (tem = insn; tem != temp; tem = NEXT_INSN (tem))\n+\t\t  if (GET_CODE (tem) == NOTE && NOTE_LINE_NUMBER (tem) > 0)\n+\t\t    break;\n+\n+\t      if (tem == temp)\n+\t\t{\n+\t\t  delete_jump (insn);\n+\t\t  changed = 1;\n+\t\t  continue;\n+\t\t}\n \t    }\n \t  /* Detect a conditional jump jumping over an unconditional jump.  */\n \n@@ -3219,7 +3231,10 @@ follow_jumps (label)\n       if (!reload_completed)\n \tfor (tem = value; tem != insn; tem = NEXT_INSN (tem))\n \t  if (GET_CODE (tem) == NOTE\n-\t      && NOTE_LINE_NUMBER (tem) == NOTE_INSN_LOOP_BEG)\n+\t      && (NOTE_LINE_NUMBER (tem) == NOTE_INSN_LOOP_BEG\n+\t\t  /* ??? Optional.  Disables some optimizations, but makes\n+\t\t     gcov output more accurate with -O.  */\n+\t\t  || (flag_test_coverage && NOTE_LINE_NUMBER (tem) > 0)))\n \t    return value;\n \n       /* If we have found a cycle, make the insn jump to itself.  */\n@@ -3340,7 +3355,10 @@ mark_jump_label (x, insn, cross_jump)\n \t      break;\n \t    else if (! cross_jump\n \t\t     && (NOTE_LINE_NUMBER (next) == NOTE_INSN_LOOP_BEG\n-\t\t\t || NOTE_LINE_NUMBER (next) == NOTE_INSN_FUNCTION_END))\n+\t\t\t || NOTE_LINE_NUMBER (next) == NOTE_INSN_FUNCTION_END\n+\t\t\t /* ??? Optional.  Disables some optimizations, but\n+\t\t\t    makes gcov output more accurate with -O.  */\n+\t\t\t || (flag_test_coverage && NOTE_LINE_NUMBER (next) > 0)))\n \t      break;\n \t  }\n \n@@ -3755,7 +3773,21 @@ invert_jump (jump, nlabel)\n     return 0;\n \n   if (redirect_jump (jump, nlabel))\n-    return 1;\n+    {\n+      if (flag_branch_probabilities)\n+\t{\n+\t  rtx note = find_reg_note (jump, REG_BR_PROB, 0);\n+\n+\t  /* An inverted jump means that a probability taken becomes a\n+\t     probability not taken.  Subtract the branch probability from the\n+\t     probability base to convert it back to a taken probability.\n+\t     (We don't flip the probability on a branch that's never taken.  */\n+\t  if (note && XINT (XEXP (note, 0), 0) >= 0)\n+\t    XINT (XEXP (note, 0), 0) = REG_BR_PROB_BASE - XINT (XEXP (note, 0), 0);\n+\t}\n+\n+      return 1;\n+    }\n \n   if (! invert_exp (PATTERN (jump), jump))\n     /* This should just be putting it back the way it was.  */"}]}