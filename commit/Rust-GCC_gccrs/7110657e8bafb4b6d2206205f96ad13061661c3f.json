{"sha": "7110657e8bafb4b6d2206205f96ad13061661c3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExMDY1N2U4YmFmYjRiNmQyMjA2MjA1Zjk2YWQxMzA2MTY2MWMzZg==", "commit": {"author": {"name": "Guilhem Lavaux", "email": "guilhem@kaffe.org", "date": "2003-12-16T12:19:33Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-16T12:19:33Z"}, "message": "ObjectStreamField.java: A few methods were added in prevision of the upcoming upgrade of the...\n\n2003-12-16 Guilhem Lavaux <guilhem@kaffe.org>\n\n\t* java/io/ObjectStreamField.java: A few methods were added in prevision\n\tof the upcoming upgrade of the serialization code. This also adds\n\tsome missing documentation.\n\t(ObjectStreamField): We should throw a NullPointerException when 'name'\n\tis null.\n\nFrom-SVN: r74690", "tree": {"sha": "36bbbbc5b817b5d5d8b4ea46d2c3fbfcbe4f7d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36bbbbc5b817b5d5d8b4ea46d2c3fbfcbe4f7d38"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7110657e8bafb4b6d2206205f96ad13061661c3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7110657e8bafb4b6d2206205f96ad13061661c3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7110657e8bafb4b6d2206205f96ad13061661c3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7110657e8bafb4b6d2206205f96ad13061661c3f/comments", "author": null, "committer": null, "parents": [{"sha": "d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d22240b8dc0a18530eb74ea4a167f49fe6da1dd1"}], "stats": {"total": 173, "additions": 167, "deletions": 6}, "files": [{"sha": "6eeda359e8d79ddd396466fd592cfc5a9c542ed5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7110657e8bafb4b6d2206205f96ad13061661c3f/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7110657e8bafb4b6d2206205f96ad13061661c3f/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=7110657e8bafb4b6d2206205f96ad13061661c3f", "patch": "@@ -1,3 +1,11 @@\n+2003-12-16 Guilhem Lavaux <guilhem@kaffe.org>\n+ \n+\t* java/io/ObjectStreamField.java: A few methods were added in prevision\n+\tof the upcoming upgrade of the serialization code. This also adds\n+\tsome missing documentation.\n+\t(ObjectStreamField): We should throw a NullPointerException when 'name'\n+\tis null.\n+\n  2003-12-16 Guilhem Lavaux <guilhem@kaffe.org>\n   \n \t* java/io/ObjectInputStream.java (setBooleanField):"}, {"sha": "a9e14a060bb8394cca78418e73a0dfe925279784", "filename": "libjava/java/io/ObjectStreamField.java", "status": "modified", "additions": 159, "deletions": 6, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7110657e8bafb4b6d2206205f96ad13061661c3f/libjava%2Fjava%2Fio%2FObjectStreamField.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7110657e8bafb4b6d2206205f96ad13061661c3f/libjava%2Fjava%2Fio%2FObjectStreamField.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectStreamField.java?ref=7110657e8bafb4b6d2206205f96ad13061661c3f", "patch": "@@ -40,34 +40,63 @@\n \n import gnu.java.lang.reflect.TypeSignature;\n \n-// XXX doc\n+/**\n+ * This class intends to describe the field of a class for the serialization\n+ * subsystem. Serializable fields in a serializable class can be explicitly\n+ * exported using an array of ObjectStreamFields.\n+ */\n public class ObjectStreamField implements Comparable\n {\n   private String name;\n   private Class type;\n   private String typename;\n   private int offset = -1; // XXX make sure this is correct\n   private boolean unshared;\n-  \n+  private boolean persistent = false;\n+  private boolean toset = true;\n+\n+  /**\n+   * This constructor creates an ObjectStreamField instance \n+   * which represents a field named <code>name</code> and is\n+   * of the type <code>type</code>.\n+   *\n+   * @param name Name of the field to export.\n+   * @param type Type of the field in the concerned class.\n+   */\n   public ObjectStreamField (String name, Class type)\n   {\n     this (name, type, false);\n   }\n \n+  /**\n+   * This constructor creates an ObjectStreamField instance \n+   * which represents a field named <code>name</code> and is\n+   * of the type <code>type</code>.\n+   *\n+   * @param name Name of the field to export.\n+   * @param type Type of the field in the concerned class.\n+   */\n   public ObjectStreamField (String name, Class type, boolean unshared)\n   {\n+    if (name == null)\n+      throw new NullPointerException();\n+\n     this.name = name;\n     this.type = type;\n     this.typename = TypeSignature.getEncodingOfClass(type);\n     this.unshared = unshared;\n   }\n  \n   /**\n-   * There're many cases you can't get java.lang.Class from typename \n-   * if your context\n-   * class loader can't load it, then use typename to construct the field\n+   * There are many cases you can not get java.lang.Class from typename \n+   * if your context class loader cann not load it, then use typename to\n+   * construct the field.\n+   *\n+   * @param name Name of the field to export.\n+   * @param typename The coded name of the type for this field.\n    */\n-  ObjectStreamField (String name, String typename){\n+  ObjectStreamField (String name, String typename)\n+  {\n     this.name = name;\n     this.typename = typename;\n     try\n@@ -80,32 +109,97 @@ public ObjectStreamField (String name, Class type, boolean unshared)\n       }\n   }\n   \n+  /**\n+   * There are many cases you can not get java.lang.Class from typename \n+   * if your context class loader cann not load it, then use typename to\n+   * construct the field.\n+   *\n+   * @param name Name of the field to export.\n+   * @param typename The coded name of the type for this field.\n+   * @param loader The class loader to use to resolve class names.\n+   */\n+  ObjectStreamField (String name, String typename, ClassLoader loader)\n+  {\n+    this.name = name;\n+    this.typename = typename;\n+    try\n+      {\n+        type = TypeSignature.getClassForEncoding(typename, true, loader);\n+      }\n+    catch(ClassNotFoundException e)\n+      {\n+        type = Object.class; // ALSO FIXME \n+      }\n+  }\n+\n+  /**\n+   * This method returns the name of the field represented by the\n+   * ObjectStreamField instance.\n+   *\n+   * @return A string containing the name of the field.\n+   */\n   public String getName ()\n   {\n     return name;\n   }\n \n+  /**\n+   * This method returns the class representing the type of the\n+   * field which is represented by this instance of ObjectStreamField.\n+   *\n+   * @return A class representing the type of the field.\n+   */\n   public Class getType ()\n   {\n     return type;\n   }\n \n+  /**\n+   * This method returns the char encoded type of the field which\n+   * is represented by this instance of ObjectStreamField.\n+   *\n+   * @return A char representing the type of the field.\n+   */\n   public char getTypeCode ()\n   {\n     return typename.charAt (0);\n   }\n \n+  /**\n+   * This method returns a more explicit type name than\n+   * {@link #getTypeCode()} in the case the type is a real\n+   * class (and not a primitive).\n+   *\n+   * @return The name of the type (class name) if it is not a \n+   * primitive, in the other case null is returned.\n+   */\n   public String getTypeString ()\n   {\n     // use intern()\n+    if (this.type.isPrimitive())\n+      return null;\n     return typename.intern();\n   }\n \n+  /**\n+   * This method returns the current offset of the field in\n+   * the serialization stream relatively to the other fields.\n+   * The offset is expressed in bytes.\n+   *\n+   * @return The offset of the field in bytes.\n+   * @see #setOffset(int)\n+   */\n   public int getOffset ()\n   {\n     return offset;\n   }\n \n+  /**\n+   * This method sets the current offset of the field.\n+   * \n+   * @param off The offset of the field in bytes.\n+   * @see getOffset()\n+   */\n   protected void setOffset (int off)\n   {\n     offset = off;\n@@ -116,6 +210,13 @@ public boolean isUnshared ()\n     return unshared;\n   }\n \n+  /**\n+   * This method returns true if the type of the field\n+   * represented by this instance is a primitive.\n+   *\n+   * @return true if the type is a primitive, false\n+   * in the other case.\n+   */\n   public boolean isPrimitive ()\n   {\n     return type.isPrimitive ();\n@@ -136,6 +237,58 @@ public int compareTo (Object o)\n     return getName ().compareTo (f.getName ());\n   }\n \n+  /**\n+   * This method is specific to classpath's implementation and so has the default\n+   * access. It changes the state of this field to \"persistent\". It means that\n+   * the field should not be changed when the stream is read (if it is not\n+   * explicitly specified using serialPersistentFields).\n+   *\n+   * @param persistent True if the field is persistent, false in the \n+   * other cases.\n+   * @see #isPersistent()\n+   */\n+  void setPersistent(boolean persistent)\n+  {\n+    this.persistent = persistent;\n+  }\n+\n+  /**\n+   * This method returns true if the field is marked as persistent.\n+   *\n+   * @return True if persistent, false in the other cases.\n+   * @see #setPersistent(boolean)\n+   */\n+  boolean isPersistent()\n+  {\n+    return persistent;\n+  }\n+\n+  /**\n+   * This method is specific to classpath's implementation and so \n+   * has the default access. It changes the state of this field as\n+   * to be set by ObjectInputStream.\n+   *\n+   * @param toset True if this field should be set, false in the other\n+   * cases.\n+   * @see #isToSet()\n+   */\n+  void setToSet(boolean toset)\n+  {\n+    this.toset = toset;\n+  }\n+\n+  /**\n+   * This methods returns true if the field is marked as to be\n+   * set.\n+   *\n+   * @return True if it is to be set, false in the other cases.\n+   * @see #setToSet(boolean)\n+   */\n+  boolean isToSet()\n+  {\n+    return toset;\n+  }\n+\n   public String toString ()\n   {\n     return \"ObjectStreamField< \" + type + \" \" + name + \" >\";"}]}