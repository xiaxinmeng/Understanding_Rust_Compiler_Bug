{"sha": "5bff1750e9a0857174c435455b6e1a01d4e60429", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmZjE3NTBlOWEwODU3MTc0YzQzNTQ1NWI2ZTFhMDFkNGU2MDQyOQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-12-17T08:43:03Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1994-12-17T08:43:03Z"}, "message": "pa.h (readonly_section): During PIC code generation, put readonly data into the standard data section.\n\n\t* pa.h (readonly_section): During PIC code generation, put\n\treadonly data into the standard data section.\n\n\t* pa.c (pic_label_operand): Disallow SYMBOL_REFs (constant data).\n\nFrom-SVN: r8661", "tree": {"sha": "b33db73e8c51bb0ed2cdfb4aebe71c6ec45d7ac5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b33db73e8c51bb0ed2cdfb4aebe71c6ec45d7ac5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bff1750e9a0857174c435455b6e1a01d4e60429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bff1750e9a0857174c435455b6e1a01d4e60429", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bff1750e9a0857174c435455b6e1a01d4e60429", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bff1750e9a0857174c435455b6e1a01d4e60429/comments", "author": null, "committer": null, "parents": [{"sha": "1c688cd78600fdb05fd5bcdc897587e71ede0394", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c688cd78600fdb05fd5bcdc897587e71ede0394", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c688cd78600fdb05fd5bcdc897587e71ede0394"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "27c1d8dd73eb58a0e4f47671d20d1fa4096fe462", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bff1750e9a0857174c435455b6e1a01d4e60429/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bff1750e9a0857174c435455b6e1a01d4e60429/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=5bff1750e9a0857174c435455b6e1a01d4e60429", "patch": "@@ -235,14 +235,9 @@ pic_label_operand (op, mode)\n     {\n     case LABEL_REF:\n       return 1;\n-    case SYMBOL_REF:\n-      return (read_only_operand (op) && !FUNCTION_NAME_P (XSTR (op, 0)));\n     case CONST:\n       op = XEXP (op, 0);\n-      return (((GET_CODE (XEXP (op, 0)) == SYMBOL_REF\n-\t\t&& read_only_operand (XEXP (op, 0))\n-\t\t&& !FUNCTION_NAME_P (XSTR (XEXP (op, 0), 0)))\n-\t       || GET_CODE (XEXP (op, 0)) == LABEL_REF)\n+      return (GET_CODE (XEXP (op, 0)) == LABEL_REF\n \t      && GET_CODE (XEXP (op, 1)) == CONST_INT);\n     default:\n       return 0;\n@@ -477,7 +472,7 @@ legitimize_pic_address (orig, mode, reg)\n {\n   rtx pic_ref = orig;\n \n-  /* Lables and read-only data need special handling.  */\n+  /* Lables need special handling.  */\n   if (pic_label_operand (orig))\n     {\n       emit_insn (gen_pic_load_label (reg, orig));"}, {"sha": "1bd3bd1d98abd12ccab47a0c766046d73df10e4d", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bff1750e9a0857174c435455b6e1a01d4e60429/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bff1750e9a0857174c435455b6e1a01d4e60429/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=5bff1750e9a0857174c435455b6e1a01d4e60429", "patch": "@@ -1728,10 +1728,19 @@ do { fprintf (FILE, \"\\t.SPACE $PRIVATE$\\n\\\n \n #define EXTRA_SECTIONS in_bss, in_readonly_data\n \n-/* FIXME: GAS doesn't grok expressions involving two symbols in different\n-   segments (aka subspaces).  Two avoid creating such expressions, we place\n-   readonly data into the $CODE$ subspace when generating PIC code.  If\n-   GAS ever handles such expressions, this hack can disappear.  */\n+/* FIXME: HPUX ld generates incorrect GOT entries for \"T\" fixups\n+   which reference data within the $TEXT$ space (for example constant\n+   strings in the $LIT$ subspace).\n+\n+   The assemblers (GAS and HP as) both have problems with handling\n+   the difference of two symbols which is the other correct way to\n+   reference constant data during PIC code generation.\n+\n+   So, there's no way to reference constant data which is in the\n+   $TEXT$ space during PIC generation.  Instead place all constant\n+   data into the $PRIVATE$ subspace (this reduces sharing, but it\n+   works correctly).  */\n+\n #define EXTRA_SECTION_FUNCTIONS\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n bss_section ()\t\t\t\t\t\t\t\t\\\n@@ -1748,7 +1757,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n   if (in_section != in_readonly_data)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if (flag_pic)\t\t\t\t\t\t\t\\\n-\tfprintf (asm_out_file, \"%s\\n\", TEXT_SECTION_ASM_OP);\t\t\\\n+\tfprintf (asm_out_file, \"%s\\n\", DATA_SECTION_ASM_OP);\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \tfprintf (asm_out_file, \"%s\\n\", READONLY_DATA_ASM_OP);\t\t\\\n       in_section = in_readonly_data;\t\t\t\t\t\\"}]}