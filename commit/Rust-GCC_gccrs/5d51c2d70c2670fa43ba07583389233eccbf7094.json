{"sha": "5d51c2d70c2670fa43ba07583389233eccbf7094", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQ1MWMyZDcwYzI2NzBmYTQzYmEwNzU4MzM4OTIzM2VjY2JmNzA5NA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-28T22:57:35Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-28T22:57:35Z"}, "message": "debug/elf: add power64 support along with relocation test\n\nBackport of https://codereview.appspot.com/125910043 from the\ndev.power64 branch of the master repository.\n\nFrom-SVN: r216813", "tree": {"sha": "fd295b8037bbc034d3c7501a27989d181bbd547c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd295b8037bbc034d3c7501a27989d181bbd547c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d51c2d70c2670fa43ba07583389233eccbf7094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d51c2d70c2670fa43ba07583389233eccbf7094", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d51c2d70c2670fa43ba07583389233eccbf7094", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d51c2d70c2670fa43ba07583389233eccbf7094/comments", "author": null, "committer": null, "parents": [{"sha": "a56abdccae1807251bcec03f8979fedba8edbf95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a56abdccae1807251bcec03f8979fedba8edbf95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a56abdccae1807251bcec03f8979fedba8edbf95"}], "stats": {"total": 234, "additions": 233, "deletions": 1}, "files": [{"sha": "51319c0ddc485b026026f633715c6b665e82fb5e", "filename": "libgo/go/debug/elf/elf.go", "status": "modified", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Felf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Felf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Felf.go?ref=5d51c2d70c2670fa43ba07583389233eccbf7094", "patch": "@@ -1162,6 +1162,184 @@ var rppcStrings = []intName{\n func (i R_PPC) String() string   { return stringName(uint32(i), rppcStrings, false) }\n func (i R_PPC) GoString() string { return stringName(uint32(i), rppcStrings, true) }\n \n+// Relocation types for PowerPC 64.\n+type R_PPC64 int\n+\n+const (\n+\tR_PPC64_NONE               R_PPC64 = 0\n+\tR_PPC64_ADDR32             R_PPC64 = 1\n+\tR_PPC64_ADDR24             R_PPC64 = 2\n+\tR_PPC64_ADDR16             R_PPC64 = 3\n+\tR_PPC64_ADDR16_LO          R_PPC64 = 4\n+\tR_PPC64_ADDR16_HI          R_PPC64 = 5\n+\tR_PPC64_ADDR16_HA          R_PPC64 = 6\n+\tR_PPC64_ADDR14             R_PPC64 = 7\n+\tR_PPC64_ADDR14_BRTAKEN     R_PPC64 = 8\n+\tR_PPC64_ADDR14_BRNTAKEN    R_PPC64 = 9\n+\tR_PPC64_REL24              R_PPC64 = 10\n+\tR_PPC64_REL14              R_PPC64 = 11\n+\tR_PPC64_REL14_BRTAKEN      R_PPC64 = 12\n+\tR_PPC64_REL14_BRNTAKEN     R_PPC64 = 13\n+\tR_PPC64_GOT16              R_PPC64 = 14\n+\tR_PPC64_GOT16_LO           R_PPC64 = 15\n+\tR_PPC64_GOT16_HI           R_PPC64 = 16\n+\tR_PPC64_GOT16_HA           R_PPC64 = 17\n+\tR_PPC64_JMP_SLOT           R_PPC64 = 21\n+\tR_PPC64_REL32              R_PPC64 = 26\n+\tR_PPC64_ADDR64             R_PPC64 = 38\n+\tR_PPC64_ADDR16_HIGHER      R_PPC64 = 39\n+\tR_PPC64_ADDR16_HIGHERA     R_PPC64 = 40\n+\tR_PPC64_ADDR16_HIGHEST     R_PPC64 = 41\n+\tR_PPC64_ADDR16_HIGHESTA    R_PPC64 = 42\n+\tR_PPC64_REL64              R_PPC64 = 44\n+\tR_PPC64_TOC16              R_PPC64 = 47\n+\tR_PPC64_TOC16_LO           R_PPC64 = 48\n+\tR_PPC64_TOC16_HI           R_PPC64 = 49\n+\tR_PPC64_TOC16_HA           R_PPC64 = 50\n+\tR_PPC64_TOC                R_PPC64 = 51\n+\tR_PPC64_ADDR16_DS          R_PPC64 = 56\n+\tR_PPC64_ADDR16_LO_DS       R_PPC64 = 57\n+\tR_PPC64_GOT16_DS           R_PPC64 = 58\n+\tR_PPC64_GOT16_LO_DS        R_PPC64 = 59\n+\tR_PPC64_TOC16_DS           R_PPC64 = 63\n+\tR_PPC64_TOC16_LO_DS        R_PPC64 = 64\n+\tR_PPC64_TLS                R_PPC64 = 67\n+\tR_PPC64_DTPMOD64           R_PPC64 = 68\n+\tR_PPC64_TPREL16            R_PPC64 = 69\n+\tR_PPC64_TPREL16_LO         R_PPC64 = 70\n+\tR_PPC64_TPREL16_HI         R_PPC64 = 71\n+\tR_PPC64_TPREL16_HA         R_PPC64 = 72\n+\tR_PPC64_TPREL64            R_PPC64 = 73\n+\tR_PPC64_DTPREL16           R_PPC64 = 74\n+\tR_PPC64_DTPREL16_LO        R_PPC64 = 75\n+\tR_PPC64_DTPREL16_HI        R_PPC64 = 76\n+\tR_PPC64_DTPREL16_HA        R_PPC64 = 77\n+\tR_PPC64_DTPREL64           R_PPC64 = 78\n+\tR_PPC64_GOT_TLSGD16        R_PPC64 = 79\n+\tR_PPC64_GOT_TLSGD16_LO     R_PPC64 = 80\n+\tR_PPC64_GOT_TLSGD16_HI     R_PPC64 = 81\n+\tR_PPC64_GOT_TLSGD16_HA     R_PPC64 = 82\n+\tR_PPC64_GOT_TLSLD16        R_PPC64 = 83\n+\tR_PPC64_GOT_TLSLD16_LO     R_PPC64 = 84\n+\tR_PPC64_GOT_TLSLD16_HI     R_PPC64 = 85\n+\tR_PPC64_GOT_TLSLD16_HA     R_PPC64 = 86\n+\tR_PPC64_GOT_TPREL16_DS     R_PPC64 = 87\n+\tR_PPC64_GOT_TPREL16_LO_DS  R_PPC64 = 88\n+\tR_PPC64_GOT_TPREL16_HI     R_PPC64 = 89\n+\tR_PPC64_GOT_TPREL16_HA     R_PPC64 = 90\n+\tR_PPC64_GOT_DTPREL16_DS    R_PPC64 = 91\n+\tR_PPC64_GOT_DTPREL16_LO_DS R_PPC64 = 92\n+\tR_PPC64_GOT_DTPREL16_HI    R_PPC64 = 93\n+\tR_PPC64_GOT_DTPREL16_HA    R_PPC64 = 94\n+\tR_PPC64_TPREL16_DS         R_PPC64 = 95\n+\tR_PPC64_TPREL16_LO_DS      R_PPC64 = 96\n+\tR_PPC64_TPREL16_HIGHER     R_PPC64 = 97\n+\tR_PPC64_TPREL16_HIGHERA    R_PPC64 = 98\n+\tR_PPC64_TPREL16_HIGHEST    R_PPC64 = 99\n+\tR_PPC64_TPREL16_HIGHESTA   R_PPC64 = 100\n+\tR_PPC64_DTPREL16_DS        R_PPC64 = 101\n+\tR_PPC64_DTPREL16_LO_DS     R_PPC64 = 102\n+\tR_PPC64_DTPREL16_HIGHER    R_PPC64 = 103\n+\tR_PPC64_DTPREL16_HIGHERA   R_PPC64 = 104\n+\tR_PPC64_DTPREL16_HIGHEST   R_PPC64 = 105\n+\tR_PPC64_DTPREL16_HIGHESTA  R_PPC64 = 106\n+\tR_PPC64_TLSGD              R_PPC64 = 107\n+\tR_PPC64_TLSLD              R_PPC64 = 108\n+\tR_PPC64_REL16              R_PPC64 = 249\n+\tR_PPC64_REL16_LO           R_PPC64 = 250\n+\tR_PPC64_REL16_HI           R_PPC64 = 251\n+\tR_PPC64_REL16_HA           R_PPC64 = 252\n+)\n+\n+var rppc64Strings = []intName{\n+\t{0, \"R_PPC64_NONE\"},\n+\t{1, \"R_PPC64_ADDR32\"},\n+\t{2, \"R_PPC64_ADDR24\"},\n+\t{3, \"R_PPC64_ADDR16\"},\n+\t{4, \"R_PPC64_ADDR16_LO\"},\n+\t{5, \"R_PPC64_ADDR16_HI\"},\n+\t{6, \"R_PPC64_ADDR16_HA\"},\n+\t{7, \"R_PPC64_ADDR14\"},\n+\t{8, \"R_PPC64_ADDR14_BRTAKEN\"},\n+\t{9, \"R_PPC64_ADDR14_BRNTAKEN\"},\n+\t{10, \"R_PPC64_REL24\"},\n+\t{11, \"R_PPC64_REL14\"},\n+\t{12, \"R_PPC64_REL14_BRTAKEN\"},\n+\t{13, \"R_PPC64_REL14_BRNTAKEN\"},\n+\t{14, \"R_PPC64_GOT16\"},\n+\t{15, \"R_PPC64_GOT16_LO\"},\n+\t{16, \"R_PPC64_GOT16_HI\"},\n+\t{17, \"R_PPC64_GOT16_HA\"},\n+\t{21, \"R_PPC64_JMP_SLOT\"},\n+\t{26, \"R_PPC64_REL32\"},\n+\t{38, \"R_PPC64_ADDR64\"},\n+\t{39, \"R_PPC64_ADDR16_HIGHER\"},\n+\t{40, \"R_PPC64_ADDR16_HIGHERA\"},\n+\t{41, \"R_PPC64_ADDR16_HIGHEST\"},\n+\t{42, \"R_PPC64_ADDR16_HIGHESTA\"},\n+\t{44, \"R_PPC64_REL64\"},\n+\t{47, \"R_PPC64_TOC16\"},\n+\t{48, \"R_PPC64_TOC16_LO\"},\n+\t{49, \"R_PPC64_TOC16_HI\"},\n+\t{50, \"R_PPC64_TOC16_HA\"},\n+\t{51, \"R_PPC64_TOC\"},\n+\t{56, \"R_PPC64_ADDR16_DS\"},\n+\t{57, \"R_PPC64_ADDR16_LO_DS\"},\n+\t{58, \"R_PPC64_GOT16_DS\"},\n+\t{59, \"R_PPC64_GOT16_LO_DS\"},\n+\t{63, \"R_PPC64_TOC16_DS\"},\n+\t{64, \"R_PPC64_TOC16_LO_DS\"},\n+\t{67, \"R_PPC64_TLS\"},\n+\t{68, \"R_PPC64_DTPMOD64\"},\n+\t{69, \"R_PPC64_TPREL16\"},\n+\t{70, \"R_PPC64_TPREL16_LO\"},\n+\t{71, \"R_PPC64_TPREL16_HI\"},\n+\t{72, \"R_PPC64_TPREL16_HA\"},\n+\t{73, \"R_PPC64_TPREL64\"},\n+\t{74, \"R_PPC64_DTPREL16\"},\n+\t{75, \"R_PPC64_DTPREL16_LO\"},\n+\t{76, \"R_PPC64_DTPREL16_HI\"},\n+\t{77, \"R_PPC64_DTPREL16_HA\"},\n+\t{78, \"R_PPC64_DTPREL64\"},\n+\t{79, \"R_PPC64_GOT_TLSGD16\"},\n+\t{80, \"R_PPC64_GOT_TLSGD16_LO\"},\n+\t{81, \"R_PPC64_GOT_TLSGD16_HI\"},\n+\t{82, \"R_PPC64_GOT_TLSGD16_HA\"},\n+\t{83, \"R_PPC64_GOT_TLSLD16\"},\n+\t{84, \"R_PPC64_GOT_TLSLD16_LO\"},\n+\t{85, \"R_PPC64_GOT_TLSLD16_HI\"},\n+\t{86, \"R_PPC64_GOT_TLSLD16_HA\"},\n+\t{87, \"R_PPC64_GOT_TPREL16_DS\"},\n+\t{88, \"R_PPC64_GOT_TPREL16_LO_DS\"},\n+\t{89, \"R_PPC64_GOT_TPREL16_HI\"},\n+\t{90, \"R_PPC64_GOT_TPREL16_HA\"},\n+\t{91, \"R_PPC64_GOT_DTPREL16_DS\"},\n+\t{92, \"R_PPC64_GOT_DTPREL16_LO_DS\"},\n+\t{93, \"R_PPC64_GOT_DTPREL16_HI\"},\n+\t{94, \"R_PPC64_GOT_DTPREL16_HA\"},\n+\t{95, \"R_PPC64_TPREL16_DS\"},\n+\t{96, \"R_PPC64_TPREL16_LO_DS\"},\n+\t{97, \"R_PPC64_TPREL16_HIGHER\"},\n+\t{98, \"R_PPC64_TPREL16_HIGHERA\"},\n+\t{99, \"R_PPC64_TPREL16_HIGHEST\"},\n+\t{100, \"R_PPC64_TPREL16_HIGHESTA\"},\n+\t{101, \"R_PPC64_DTPREL16_DS\"},\n+\t{102, \"R_PPC64_DTPREL16_LO_DS\"},\n+\t{103, \"R_PPC64_DTPREL16_HIGHER\"},\n+\t{104, \"R_PPC64_DTPREL16_HIGHERA\"},\n+\t{105, \"R_PPC64_DTPREL16_HIGHEST\"},\n+\t{106, \"R_PPC64_DTPREL16_HIGHESTA\"},\n+\t{107, \"R_PPC64_TLSGD\"},\n+\t{108, \"R_PPC64_TLSLD\"},\n+\t{249, \"R_PPC64_REL16\"},\n+\t{250, \"R_PPC64_REL16_LO\"},\n+\t{251, \"R_PPC64_REL16_HI\"},\n+\t{252, \"R_PPC64_REL16_HA\"},\n+}\n+\n+func (i R_PPC64) String() string   { return stringName(uint32(i), rppc64Strings, false) }\n+func (i R_PPC64) GoString() string { return stringName(uint32(i), rppc64Strings, true) }\n+\n // Relocation types for SPARC.\n type R_SPARC int\n "}, {"sha": "81ceb9ef7416c2be3b0bad039c9537d48564b418", "filename": "libgo/go/debug/elf/file.go", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile.go?ref=5d51c2d70c2670fa43ba07583389233eccbf7094", "patch": "@@ -525,6 +525,9 @@ func (f *File) applyRelocations(dst []byte, rels []byte) error {\n \tif f.Class == ELFCLASS32 && f.Machine == EM_386 {\n \t\treturn f.applyRelocations386(dst, rels)\n \t}\n+\tif f.Class == ELFCLASS64 && f.Machine == EM_PPC64 {\n+\t\treturn f.applyRelocationsPPC64(dst, rels)\n+\t}\n \n \treturn errors.New(\"not implemented\")\n }\n@@ -611,6 +614,51 @@ func (f *File) applyRelocations386(dst []byte, rels []byte) error {\n \treturn nil\n }\n \n+func (f *File) applyRelocationsPPC64(dst []byte, rels []byte) error {\n+\t// 24 is the size of Rela64.\n+\tif len(rels)%24 != 0 {\n+\t\treturn errors.New(\"length of relocation section is not a multiple of 24\")\n+\t}\n+\n+\tsymbols, _, err := f.getSymbols(SHT_SYMTAB)\n+\tif err != nil {\n+\t\treturn err\n+\t}\n+\n+\tb := bytes.NewReader(rels)\n+\tvar rela Rela64\n+\n+\tfor b.Len() > 0 {\n+\t\tbinary.Read(b, f.ByteOrder, &rela)\n+\t\tsymNo := rela.Info >> 32\n+\t\tt := R_PPC64(rela.Info & 0xffff)\n+\n+\t\tif symNo == 0 || symNo > uint64(len(symbols)) {\n+\t\t\tcontinue\n+\t\t}\n+\t\tsym := &symbols[symNo-1]\n+\t\tif SymType(sym.Info&0xf) != STT_SECTION {\n+\t\t\t// We don't handle non-section relocations for now.\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tswitch t {\n+\t\tcase R_PPC64_ADDR64:\n+\t\t\tif rela.Off+8 >= uint64(len(dst)) || rela.Addend < 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tf.ByteOrder.PutUint64(dst[rela.Off:rela.Off+8], uint64(rela.Addend))\n+\t\tcase R_PPC64_ADDR32:\n+\t\t\tif rela.Off+4 >= uint64(len(dst)) || rela.Addend < 0 {\n+\t\t\t\tcontinue\n+\t\t\t}\n+\t\t\tf.ByteOrder.PutUint32(dst[rela.Off:rela.Off+4], uint32(rela.Addend))\n+\t\t}\n+\t}\n+\n+\treturn nil\n+}\n+\n func (f *File) DWARF() (*dwarf.Data, error) {\n \t// There are many other DWARF sections, but these\n \t// are the required ones, and the debug/dwarf package\n@@ -633,7 +681,7 @@ func (f *File) DWARF() (*dwarf.Data, error) {\n \t// If there's a relocation table for .debug_info, we have to process it\n \t// now otherwise the data in .debug_info is invalid for x86-64 objects.\n \trela := f.Section(\".rela.debug_info\")\n-\tif rela != nil && rela.Type == SHT_RELA && f.Machine == EM_X86_64 {\n+\tif rela != nil && rela.Type == SHT_RELA && (f.Machine == EM_X86_64 || f.Machine == EM_PPC64) {\n \t\tdata, err := rela.Data()\n \t\tif err != nil {\n \t\t\treturn nil, err"}, {"sha": "db83bad2253b3b21a5888cc9162a0bd82350a7ef", "filename": "libgo/go/debug/elf/file_test.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ffile_test.go?ref=5d51c2d70c2670fa43ba07583389233eccbf7094", "patch": "@@ -260,6 +260,12 @@ var relocationTests = []relocationTest{\n \t\t\t{0, &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{{Attr: dwarf.AttrProducer, Val: \"GNU C 4.2.4 (Ubuntu 4.2.4-1ubuntu4)\"}, {Attr: dwarf.AttrLanguage, Val: int64(1)}, {Attr: dwarf.AttrName, Val: \"go-relocation-test-gcc424.c\"}, {Attr: dwarf.AttrCompDir, Val: \"/tmp\"}, {Attr: dwarf.AttrLowpc, Val: uint64(0x0)}, {Attr: dwarf.AttrHighpc, Val: uint64(0x6)}, {Attr: dwarf.AttrStmtList, Val: int64(0)}}}},\n \t\t},\n \t},\n+\t{\n+\t\t\"testdata/go-relocation-test-gcc482-ppc64le.obj\",\n+\t\t[]relocationTestEntry{\n+\t\t\t{0, &dwarf.Entry{Offset: 0xb, Tag: dwarf.TagCompileUnit, Children: true, Field: []dwarf.Field{dwarf.Field{Attr: dwarf.AttrProducer, Val: \"GNU C 4.8.2 -Asystem=linux -Asystem=unix -Asystem=posix -msecure-plt -mtune=power8 -mcpu=power7 -gdwarf-2 -fstack-protector\"}, dwarf.Field{Attr: dwarf.AttrLanguage, Val: int64(1)}, dwarf.Field{Attr: dwarf.AttrName, Val: \"go-relocation-test-gcc482-ppc64le.c\"}, dwarf.Field{Attr: dwarf.AttrCompDir, Val: \"/tmp\"}, dwarf.Field{Attr: dwarf.AttrLowpc, Val: uint64(0x0)}, dwarf.Field{Attr: dwarf.AttrHighpc, Val: uint64(0x24)}, dwarf.Field{Attr: dwarf.AttrStmtList, Val: int64(0)}}}},\n+\t\t},\n+\t},\n \t{\n \t\t\"testdata/go-relocation-test-clang-x86.obj\",\n \t\t[]relocationTestEntry{"}, {"sha": "dad7445486e8897ad351ec2c8fad09f0d8ee494d", "filename": "libgo/go/debug/elf/testdata/go-relocation-test-gcc482-ppc64le.obj", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-gcc482-ppc64le.obj", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d51c2d70c2670fa43ba07583389233eccbf7094/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-gcc482-ppc64le.obj", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fdebug%2Felf%2Ftestdata%2Fgo-relocation-test-gcc482-ppc64le.obj?ref=5d51c2d70c2670fa43ba07583389233eccbf7094"}]}