{"sha": "def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGVmMGU1YjgzZGRiNWQ0OTE2ZDBlODA0YjkwNDRmNzNmZmIyOTIzYw==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-11-06T12:51:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-11-27T09:16:05Z"}, "message": "[Ada] Small tweaks to couple of Value routines\n\ngcc/ada/\n\n\t* libgnat/s-valuef.adb (Integer_To_Fixed): Take into account the\n\textra digit when scaling up the input.\n\t* libgnat/s-valuer.adb (Scan_Decimal_Digits): Restrict previous\n\tchange to fixed-point types.\n\t(Scan_Integral_Digits): Likewise.", "tree": {"sha": "0e2bf236895806ac1def143a2ad5b2e41a704ed2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e2bf236895806ac1def143a2ad5b2e41a704ed2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/def0e5b83ddb5d4916d0e804b9044f73ffb2923c/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e6b87e933bbbf3671f02210261615076b998644", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e6b87e933bbbf3671f02210261615076b998644", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e6b87e933bbbf3671f02210261615076b998644"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "caec598e9b32b3a1cc978f80031713d83e79c1b5", "filename": "gcc/ada/libgnat/s-valuef.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def0e5b83ddb5d4916d0e804b9044f73ffb2923c/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def0e5b83ddb5d4916d0e804b9044f73ffb2923c/gcc%2Fada%2Flibgnat%2Fs-valuef.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuef.adb?ref=def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "patch": "@@ -227,8 +227,9 @@ package body System.Value_F is\n             Z := N;\n \n             for J in 1 .. LS loop\n-               if V <= Uns'Last / Uns (B) then\n-                  V := V * Uns (B);\n+               if V <= (Uns'Last - E) / Uns (B) then\n+                  V := V * Uns (B) + E;\n+                  E := 0;\n                else\n                   Bad_Value (Str);\n                end if;"}, {"sha": "06d7adcbd7a29a3077346ff1660bef676c8aa5d3", "filename": "gcc/ada/libgnat/s-valuer.adb", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/def0e5b83ddb5d4916d0e804b9044f73ffb2923c/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/def0e5b83ddb5d4916d0e804b9044f73ffb2923c/gcc%2Fada%2Flibgnat%2Fs-valuer.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-valuer.adb?ref=def0e5b83ddb5d4916d0e804b9044f73ffb2923c", "patch": "@@ -188,11 +188,13 @@ package body System.Value_R is\n \n          --  If precision limit has been reached, just ignore any remaining\n          --  digits for the computation of Value and Scale, but store the\n-         --  first in Extra and use the second to round Extra. The scanning\n-         --  should continue only to assess the validity of the string.\n+         --  first in Extra and use the second to round Extra if this is for\n+         --  a fixed-point type (we skip the rounding for a floating-point\n+         --  type to preserve backward compatibility). The scanning should\n+         --  continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n-            if Precision_Limit_Just_Reached then\n+            if Precision_Limit_Just_Reached and then not Floating then\n                if Digit >= Base / 2 then\n                   if Extra = Base - 1 then\n                      Extra := 0;\n@@ -343,14 +345,16 @@ package body System.Value_R is\n          end if;\n \n          --  If precision limit has been reached, just ignore any remaining\n-         --  digits for the computation of Value, but update Scale and store\n-         --  the first in Extra and use the second to round Extra. The scanning\n-         --  should continue only to assess the validity of the string.\n+         --  digits for the computation of Value and Scale, but store the\n+         --  first in Extra and use the second to round Extra if this is for\n+         --  a fixed-point type (we skip the rounding for a floating-point\n+         --  type to preserve backward compatibility). The scanning should\n+         --  continue only to assess the validity of the string.\n \n          if Precision_Limit_Reached then\n             Scale := Scale + 1;\n \n-            if Precision_Limit_Just_Reached then\n+            if Precision_Limit_Just_Reached and then not Floating then\n                if Digit >= Base / 2 then\n                   if Extra = Base - 1 then\n                      Extra := 0;"}]}