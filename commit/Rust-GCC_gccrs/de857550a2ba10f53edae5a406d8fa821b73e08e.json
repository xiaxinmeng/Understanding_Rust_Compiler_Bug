{"sha": "de857550a2ba10f53edae5a406d8fa821b73e08e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGU4NTc1NTBhMmJhMTBmNTNlZGFlNWE0MDZkOGZhODIxYjczZTA4ZQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:50:38Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-03-16T09:50:38Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r501", "tree": {"sha": "36b9dcd3eee75c04a66800d643237fc097ddd485", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/36b9dcd3eee75c04a66800d643237fc097ddd485"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de857550a2ba10f53edae5a406d8fa821b73e08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de857550a2ba10f53edae5a406d8fa821b73e08e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de857550a2ba10f53edae5a406d8fa821b73e08e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de857550a2ba10f53edae5a406d8fa821b73e08e/comments", "author": null, "committer": null, "parents": [{"sha": "67492730d11738ddccf7446492dc2eaeaca6ddac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67492730d11738ddccf7446492dc2eaeaca6ddac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67492730d11738ddccf7446492dc2eaeaca6ddac"}], "stats": {"total": 136, "additions": 68, "deletions": 68}, "files": [{"sha": "9fe77c34f6bcbc92704b9bbf77dd7b6621573c66", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de857550a2ba10f53edae5a406d8fa821b73e08e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de857550a2ba10f53edae5a406d8fa821b73e08e/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=de857550a2ba10f53edae5a406d8fa821b73e08e", "patch": "@@ -204,9 +204,9 @@ extern char * reg_names[];\n /* Print subsidiary information on the compiler version in use.\n    Redefined in m88kv4.h, and m88kluna.h.  */\n #define VERSION_INFO1\t\"88open OCS/BCS, \"\n-#define VERSION_INFO2\t\"28 Feb 1992\"\n+#define VERSION_INFO2\t\"09 Mar 1992\"\n #define VERSION_STRING\tversion_string\n-#define\tTM_SCCS_ID\t\"@(#)m88k.h\t2.0.2.1 28 Feb 1992 12:37:41\"\n+#define\tTM_SCCS_ID\t\"@(#)m88k.h\t2.0.2.3 09 Mar 1992 14:20:23\"\n \n /* Run-time compilation parameters selecting different hardware subsets.  */\n \n@@ -364,7 +364,7 @@ extern char * reg_names[];\n    instructions for them.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Number of bits in an addressible storage unit */\n+/* Number of bits in an addressable storage unit */\n #define BITS_PER_UNIT 8\n \n /* Width in bits of a \"word\", which is the contents of a machine register.\n@@ -414,9 +414,9 @@ extern char * reg_names[];\n /* Every structure's size must be a multiple of this.  */\n #define STRUCTURE_SIZE_BOUNDARY 8\n \n-/* Define this if move instructions will actually fail to work\n+/* Set this nonzero if move instructions will actually fail to work\n    when given unaligned data.  */\n-#define STRICT_ALIGNMENT\n+#define STRICT_ALIGNMENT 1\n \n /* A bitfield declared as `int' forces `int' alignment for the struct.  */\n #define PCC_BITFIELD_TYPE_MATTERS 1\n@@ -427,7 +427,7 @@ extern char * reg_names[];\n \n /* Report errors on floating point, if we are given NaN's, or such.  Leave\n    the number as is, though, since we output the number in hex, and the\n-   assemble won't choak on it.  */\n+   assembler won't choke on it.  */\n #define CHECK_FLOAT_VALUE(MODE,VALUE) check_float_value (MODE, VALUE)\n \n /* A code distinguishing the floating point format of the target machine.  */\n@@ -649,7 +649,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    expression is true iff C is a known letter and VALUE is appropriate for\n    that letter.\n \n-   For the m88000,  the following contraints are used:\n+   For the m88000, the following constants are used:\n    `I' requires a non-negative 16-bit value.\n    `J' requires a non-positive 16-bit value.\n    `K' is unused.\n@@ -992,7 +992,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    This is really two components.  The first 32 bytes are fixed and\n    must be copied; the last 12 bytes are just storage that's filled\n    in later.  So for allocation purposes, it's 32+12 bytes, but for\n-   initializaiton purposes, it's 32 bytes.  */\n+   initialization purposes, it's 32 bytes.  */\n \n #define TRAMPOLINE_SIZE (32+12)\n \n@@ -1363,7 +1363,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n     return 0;\n \n /* Provide the costs of an addressing mode that contains ADDR.\n-   If ADDR is not a valid address, it's cost is irrelavent.\n+   If ADDR is not a valid address, its cost is irrelevant.\n    REG+REG is made slightly more expensive because it might keep\n    a register live for longer than we might like.  */\n #define ADDRESS_COST(ADDR)\t\t\t\t\\\n@@ -1421,68 +1421,68 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #undef\tSIZE_ASM_OP\n \n /* These are used in varasm.c as well.  */\n-#define TEXT_SECTION_ASM_OP\t\"\\ttext\"\n-#define DATA_SECTION_ASM_OP\t\"\\tdata\"\n+#define TEXT_SECTION_ASM_OP\t\"text\"\n+#define DATA_SECTION_ASM_OP\t\"data\"\n \n /* Other sections.  */\n #define CONST_SECTION_ASM_OP (VERSION_0300_SYNTAX\t\t\\\n-\t\t\t      ? \"\\tsection\\t .rodata,\\\"a\\\"\\n\"\t\\\n-\t\t\t      : \"\\tsection\\t .rodata,\\\"x\\\"\\n\")\n+\t\t\t      ? \"section\\t .rodata,\\\"a\\\"\"\t\\\n+\t\t\t      : \"section\\t .rodata,\\\"x\\\"\")\n #define TDESC_SECTION_ASM_OP (VERSION_0300_SYNTAX\t\t\\\n-\t\t\t      ? \"\\tsection\\t .tdesc,\\\"a\\\"\"\t\\\n-\t\t\t      : \"\\tsection\\t .tdesc,\\\"x\\\"\")\n+\t\t\t      ? \"section\\t .tdesc,\\\"a\\\"\"\t\\\n+\t\t\t      : \"section\\t .tdesc,\\\"x\\\"\")\n \n /* These must be constant strings for crtstuff.c.  */\n-#define CTORS_SECTION_ASM_OP \"\\tsection\\t .ctors,\\\"d\\\"\\n\"\n-#define DTORS_SECTION_ASM_OP \"\\tsection\\t .dtors,\\\"d\\\"\\n\"\n-#define INIT_SECTION_ASM_OP\t\"\\tsection\\t .init,\\\"x\\\"\"\n-#define FINI_SECTION_ASM_OP\t\"\\tsection\\t .fini,\\\"x\\\"\"\n+#define CTORS_SECTION_ASM_OP \"section\\t .ctors,\\\"d\\\"\"\n+#define DTORS_SECTION_ASM_OP \"section\\t .dtors,\\\"d\\\"\"\n+#define INIT_SECTION_ASM_OP\t\"section\\t .init,\\\"x\\\"\"\n+#define FINI_SECTION_ASM_OP\t\"section\\t .fini,\\\"x\\\"\"\n \n /* These are pretty much common to all assemblers.  */\n-#define IDENT_ASM_OP\t\t\"\\tident\"\n-#define FILE_ASM_OP\t\t\"\\tfile\"\n-#define SECTION_ASM_OP\t\t\"\\tsection\"\n-#define DEF_ASM_OP\t\t\"\\tdef\"\n-#define GLOBAL_ASM_OP\t\t\"\\tglobal\"\n-#define ALIGN_ASM_OP\t\t\"\\talign\"\n-#define SKIP_ASM_OP\t\t\"\\tzero\"\n-#define COMMON_ASM_OP\t\t\"\\tcomm\"\n-#define LOCAL_ASM_OP\t\t\"\\tbss\"\n-#define FLOAT_ASM_OP\t\t\"\\tfloat\"\n-#define DOUBLE_ASM_OP\t\t\"\\tdouble\"\n-#define INT_ASM_OP\t\t\"\\tword\"\n+#define IDENT_ASM_OP\t\t\"ident\"\n+#define FILE_ASM_OP\t\t\"file\"\n+#define SECTION_ASM_OP\t\t\"section\"\n+#define DEF_ASM_OP\t\t\"def\"\n+#define GLOBAL_ASM_OP\t\t\"global\"\n+#define ALIGN_ASM_OP\t\t\"align\"\n+#define SKIP_ASM_OP\t\t\"zero\"\n+#define COMMON_ASM_OP\t\t\"comm\"\n+#define LOCAL_ASM_OP\t\t\"bss\"\n+#define FLOAT_ASM_OP\t\t\"float\"\n+#define DOUBLE_ASM_OP\t\t\"double\"\n+#define INT_ASM_OP\t\t\"word\"\n #define ASM_LONG\t\tINT_ASM_OP\n-#define SHORT_ASM_OP\t\t\"\\thalf\"\n-#define CHAR_ASM_OP\t\t\"\\tbyte\"\n-#define ASCII_DATA_ASM_OP\t\"\\tstring\"\n+#define SHORT_ASM_OP\t\t\"half\"\n+#define CHAR_ASM_OP\t\t\"byte\"\n+#define ASCII_DATA_ASM_OP\t\"string\"\n \n /* These are particular to the global pool optimization.  */\n-#define SBSS_ASM_OP\t\t\"\\tsbss\"\n-#define SCOMM_ASM_OP\t\t\"\\tscomm\"\n-#define SDATA_SECTION_ASM_OP\t\"\\tsdata\"\n+#define SBSS_ASM_OP\t\t\"sbss\"\n+#define SCOMM_ASM_OP\t\t\"scomm\"\n+#define SDATA_SECTION_ASM_OP\t\"sdata\"\n \n /* These are specific to PIC.  */\n-#define TYPE_ASM_OP\t\t\"\\ttype\"\n-#define SIZE_ASM_OP\t\t\"\\tsize\"\n-#define WEAK_ASM_OP\t\t\"\\tweak\"\n+#define TYPE_ASM_OP\t\t\"type\"\n+#define SIZE_ASM_OP\t\t\"size\"\n+#define WEAK_ASM_OP\t\t\"weak\"\n #ifndef AS_BUG_POUND_TYPE /* Faulty assemblers require @ rather than #.  */\n #undef\tTYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT\t\"#%s\"\n #endif\n \n /* These are specific to version 03.00 assembler syntax.  */\n-#define INTERNAL_ASM_OP\t\t\"\\tlocal\"\n-#define VERSION_ASM_OP\t\t\"\\tversion\"\n+#define INTERNAL_ASM_OP\t\t\"local\"\n+#define VERSION_ASM_OP\t\t\"version\"\n #define ASM_DWARF_POP_SECTION(FILE) fputs (\"\\tprevious\\n\", FILE)\n-#define UNALIGNED_SHORT_ASM_OP\t\"\\tuahalf\"\n-#define UNALIGNED_INT_ASM_OP\t\"\\tuaword\"\n+#define UNALIGNED_SHORT_ASM_OP\t\"uahalf\"\n+#define UNALIGNED_INT_ASM_OP\t\"uaword\"\n \n /* Output any initial stuff to the assembly file.  Always put out\n    a file directive, even if not debugging.\n \n    Immediately after putting out the file, put out a \"sem.<value>\"\n    declaration.  This should be harmless on other systems, and\n-   is used in DG/UX by the debuggers to suppliment COFF.  The\n+   is used in DG/UX by the debuggers to supplement COFF.  The\n    fields in the integer value are as follows:\n \n    Bits\tValue\tMeaning\n@@ -1519,7 +1519,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_FIRST_LINE(FILE)\t\t\t\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (VERSION_0300_SYNTAX)\t\t\t\t\t\t\\\n-      fprintf (FILE, \"%s\\t \\\"03.00\\\"\\n\", VERSION_ASM_OP);\t\t\\\n+      fprintf (FILE, \"\\t%s\\t \\\"03.00\\\"\\n\", VERSION_ASM_OP);\t\t\\\n   } while (0)\n \n /* Override svr[34].h.  */\n@@ -1531,7 +1531,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #undef\tASM_FILE_END\n \n #define ASM_OUTPUT_SOURCE_FILENAME(FILE, NAME) \\\n-  fprintf (FILE, \"%s\\t \\\"%s\\\"\\n\", FILE_ASM_OP, NAME)\n+  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", FILE_ASM_OP, NAME)\n \n #ifdef SDB_DEBUGGING_INFO\n #define ASM_OUTPUT_SOURCE_LINE(FILE, LINE)\t\t\t\\\n@@ -1546,7 +1546,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #define ASM_OUTPUT_IDENT(FILE, NAME)\n #else\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n-  fprintf(FILE, \"%s\\t \\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n+  fprintf (FILE, \"\\t%s\\t \\\"%s\\\"\\n\", IDENT_ASM_OP, NAME)\n #endif\n \n /* Output to assembler file text saying following lines\n@@ -1598,7 +1598,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (DECLARE_ASM_NAME)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tputc (',', FILE);\t\t\t\t\t\t\\\n \tfprintf (FILE, TYPE_OPERAND_FMT, \"function\");\t\t\t\\\n@@ -1613,14 +1613,14 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n   do {\t\t\t\t\t\t\t\t\t\\\n     if (DECLARE_ASM_NAME)\t\t\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n+\tfprintf (FILE, \"\\t%s\\t \", TYPE_ASM_OP);\t\t\t\t\\\n \tassemble_name (FILE, NAME);\t\t\t\t\t\\\n \tputc (',', FILE);\t\t\t\t\t\t\\\n \tfprintf (FILE, TYPE_OPERAND_FMT, \"object\");\t\t\t\\\n \tputc ('\\n', FILE);\t\t\t\t\t\t\\\n \tif (!flag_inhibit_size_directive)\t\t\t\t\\\n \t  {\t\t\t\t\t\t\t\t\\\n-\t    fprintf (FILE, \"%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\t    fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n \t    assemble_name (FILE, NAME);\t\t\t\t\t\\\n \t    fprintf (FILE, \",%d\\n\",  int_size_in_bytes (TREE_TYPE (decl))); \\\n \t  }\t\t\t\t\t\t\t\t\\\n@@ -1641,7 +1641,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \t    labelno++;\t\t\t\t\t\t\t\\\n \t    ASM_GENERATE_INTERNAL_LABEL (label, \"Lfe\", labelno);\t\\\n \t    ASM_OUTPUT_INTERNAL_LABEL (FILE, \"Lfe\", labelno);\t\t\\\n-\t    fprintf (FILE, \"%s\\t \", SIZE_ASM_OP);\t\t\t\\\n+\t    fprintf (FILE, \"\\t%s\\t \", SIZE_ASM_OP);\t\t\t\\\n \t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n \t    fprintf (FILE, \",%s-\", &label[1]);\t\t\t\t\\\n \t    assemble_name (FILE, (FNAME));\t\t\t\t\\\n@@ -1659,7 +1659,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    defined for reference from other files.  */\n #define ASM_GLOBALIZE_LABEL(FILE,NAME)\t\t\t\\\n   do {\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t \", GLOBAL_ASM_OP);\t\t\\\n+    fprintf (FILE, \"\\t%s\\t \", GLOBAL_ASM_OP);\t\t\\\n     assemble_name (FILE, NAME);\t\t\t\t\\\n     putc ('\\n', FILE);\t\t\t\t\t\\\n   } while (0)\n@@ -1680,7 +1680,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n \n #ifdef AS_BUG_DOT_LABELS /* The assembler requires a declaration of local.  */\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n-  fprintf (FILE, VERSION_0300_SYNTAX ? \".%s%d:\\n%s\\t .%s%d\\n\" : \"@%s%d:\\n\", \\\n+  fprintf (FILE, VERSION_0300_SYNTAX ? \".%s%d:\\n\\t%s\\t .%s%d\\n\" : \"@%s%d:\\n\", \\\n \t   PREFIX, NUM, INTERNAL_ASM_OP, PREFIX, NUM)\n #else\n #define ASM_OUTPUT_INTERNAL_LABEL(FILE,PREFIX,NUM)\t\t\t\\\n@@ -1739,7 +1739,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n   do {\t\t\t\t\t\t\t\t\t\\\n     union { REAL_VALUE_TYPE d; long l[2]; } x;\t\t\t\t\\\n     x.d = (VALUE);\t\t\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t 0x%.8x, 0x%.8x\\n\", INT_ASM_OP,\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t 0x%.8x, 0x%.8x\\n\", INT_ASM_OP,\t\t\t\\\n \t     x.l[0], x.l[1]);\t\t\t\t\t\t\\\n   } while (0)\n \n@@ -1748,32 +1748,32 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n   do {\t\t\t\t\t\t\t\t\t\\\n     int i;\t\t\t\t\t\t\t\t\\\n     FLOAT_TO_INT_INTERNAL (VALUE, i);\t\t\t\t\t\\\n-    fprintf (FILE, \"%s\\t 0x%.8x\\n\", INT_ASM_OP, i);\t\t\t\\\n+    fprintf (FILE, \"\\t%s\\t 0x%.8x\\n\", INT_ASM_OP, i);\t\t\t\\\n   } while (0)\n \n /* Likewise for `int', `short', and `char' constants.  */\n #define ASM_OUTPUT_INT(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"%s\\t \", INT_ASM_OP),\t\t\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t \", INT_ASM_OP),\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_SHORT(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"%s\\t \", SHORT_ASM_OP),\t\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t \", SHORT_ASM_OP),\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n #define ASM_OUTPUT_CHAR(FILE,VALUE)\t\t\t\t\t\\\n-( fprintf (FILE, \"%s\\t \", CHAR_ASM_OP),\t\t\t\t\t\\\n+( fprintf (FILE, \"\\t%s\\t \", CHAR_ASM_OP),\t\t\t\t\\\n   output_addr_const (FILE, (VALUE)),\t\t\t\t\t\\\n   fprintf (FILE, \"\\n\"))\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n #define ASM_OUTPUT_BYTE(FILE,VALUE)  \\\n-  fprintf (FILE, \"%s\\t 0x%x\\n\", CHAR_ASM_OP, (VALUE))\n+  fprintf (FILE, \"\\t%s\\t 0x%x\\n\", CHAR_ASM_OP, (VALUE))\n \n /* The singl-byte pseudo-op is the default.  Override svr[34].h.  */\n #undef\tASM_BYTE_OP\n-#define ASM_BYTE_OP \"\\tbyte\"\n+#define ASM_BYTE_OP \"byte\"\n #undef\tASM_OUTPUT_ASCII\n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)  \\\n   output_ascii ((FILE), (P), (SIZE))\n@@ -1809,7 +1809,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n    to a multiple of 2**LOG bytes.  */\n #define ASM_OUTPUT_ALIGN(FILE,LOG)\t\\\n   if ((LOG) != 0)\t\t\t\\\n-    fprintf (FILE, \"%s\\t %d\\n\", ALIGN_ASM_OP, 1<<(LOG))\n+    fprintf (FILE, \"\\t%s\\t %d\\n\", ALIGN_ASM_OP, 1<<(LOG))\n \n /* Align the text address to half a cache boundary when it can only be\n    reached by jumping.  Pack code tightly when compiling crtstuff.c.  */\n@@ -1819,7 +1819,7 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n /* Override svr[34].h.  */\n #undef\tASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s\\t %u\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"\\t%s\\t %u\\n\", SKIP_ASM_OP, (SIZE))\n \n /* Override svr4.h.  */\n #undef\tASM_OUTPUT_EXTERNAL_LIBCALL\n@@ -1830,18 +1830,18 @@ enum reg_class { NO_REGS, AP_REG, GENERAL_REGS, ALL_REGS, LIM_REG_CLASSES };\n #undef\tASM_OUTPUT_COMMON\n #undef\tASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fprintf ((FILE), \"%s\\t \",\t\t\t\t\\\n-\t   (ROUNDED) <= m88k_gp_threshold ? SCOMM_ASM_OP : COMMON_ASM_OP), \\\n+( fprintf ((FILE), \"\\t%s\\t \",\t\t\t\t\\\n+\t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SCOMM_ASM_OP : COMMON_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \",%u\\n\", (SIZE) ? (SIZE) : 1))\n \n-/* This says how to output an assember line to define a local common\n+/* This says how to output an assembler line to define a local common\n    symbol.  Override svr[34].h.  */\n #undef\tASM_OUTPUT_LOCAL\n #undef\tASM_OUTPUT_ALIGNED_LOCAL\n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n-( fprintf ((FILE), \"%s\\t \",\t\t\t\t\\\n-\t   (ROUNDED) <= m88k_gp_threshold ? SBSS_ASM_OP : LOCAL_ASM_OP), \\\n+( fprintf ((FILE), \"\\t%s\\t \",\t\t\t\t\\\n+\t   ((SIZE) ? (SIZE) : 1) <= m88k_gp_threshold ? SBSS_ASM_OP : LOCAL_ASM_OP), \\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n   fprintf ((FILE), \",%u,%d\\n\", (SIZE) ? (SIZE) : 1, (SIZE) <= 4 ? 4 : 8))\n "}]}