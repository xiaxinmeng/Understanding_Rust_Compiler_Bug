{"sha": "910a2080298cb3e237bf24d61ec24df282d01c69", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTEwYTIwODAyOThjYjNlMjM3YmYyNGQ2MWVjMjRkZjI4MmQwMWM2OQ==", "commit": {"author": {"name": "Chris Demetriou", "email": "cgd@broadcom.com", "date": "2003-10-02T15:57:58Z"}, "committer": {"name": "Chris Demetriou", "email": "cgd@gcc.gnu.org", "date": "2003-10-02T15:57:58Z"}, "message": "f-torture.exp (search_for): Rename to...\n\n2003-10-02  Chris Demetriou  <cgd@broadcom.com>\n\n        * lib/f-torture.exp (search_for): Rename to...\n        (search_for_re): This.  Also, clean up comments and the\n        \"regexp\" invocation.\n\nFrom-SVN: r72039", "tree": {"sha": "8f7e2550134e279c8c35a7fc0adc519ee41575a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8f7e2550134e279c8c35a7fc0adc519ee41575a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/910a2080298cb3e237bf24d61ec24df282d01c69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910a2080298cb3e237bf24d61ec24df282d01c69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/910a2080298cb3e237bf24d61ec24df282d01c69", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/910a2080298cb3e237bf24d61ec24df282d01c69/comments", "author": null, "committer": null, "parents": [{"sha": "d801e245eb2de44d83d5733b94a82361075d268c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d801e245eb2de44d83d5733b94a82361075d268c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d801e245eb2de44d83d5733b94a82361075d268c"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "f69251bd9887ae0db685640fca5866a0ae800f6d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910a2080298cb3e237bf24d61ec24df282d01c69/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910a2080298cb3e237bf24d61ec24df282d01c69/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=910a2080298cb3e237bf24d61ec24df282d01c69", "patch": "@@ -1,3 +1,9 @@\n+2003-10-02  Chris Demetriou  <cgd@broadcom.com>\n+\n+\t* lib/f-torture.exp (search_for): Rename to...\n+\t(search_for_re): This.  Also, clean up comments and the\n+\t\"regexp\" invocation.\n+\n 2003-10-02  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* gcc.c-torture/compile/20031002-1.c: New test."}, {"sha": "88e8773a07a4d22b39c446455ed3992642136e57", "filename": "gcc/testsuite/lib/f-torture.exp", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/910a2080298cb3e237bf24d61ec24df282d01c69/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/910a2080298cb3e237bf24d61ec24df282d01c69/gcc%2Ftestsuite%2Flib%2Ff-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ff-torture.exp?ref=910a2080298cb3e237bf24d61ec24df282d01c69", "patch": "@@ -146,7 +146,7 @@ proc f-torture-execute { src } {\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+    if [expr [search_for_re $src \"do *\\[0-9\\]\"]+[search_for_re $src \"end *do\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops\n@@ -232,7 +232,7 @@ proc f-torture-execute { src } {\n \t# See if this source file uses \"long long\" types, if it does, and\n \t# no_long_long is set, skip execution of the test.\n \tif [target_info exists no_long_long] then {\n-\t    if [expr [search_for $src \"integer\\*8\"]] then {\n+\t    if [expr [search_for_re $src \"integer\\*8\"]] then {\n \t\tuntested \"$testcase execution, $option\"\n \t\tcontinue\n \t    }\n@@ -257,13 +257,12 @@ proc f-torture-execute { src } {\n }\n \n #\n-# search_for -- looks for a string match in a file\n+# search_for_re -- looks for a case-insensitive regexp match in a file\n #\n-proc search_for { file pattern } {\n+proc search_for_re { file pattern } {\n     set fd [open $file r]\n     while { [gets $fd cur_line]>=0 } {\n-\tset lower [string tolower $cur_line]\n-\tif [regexp \"$pattern\" $lower] then {\n+\tif [regexp -nocase -- \"$pattern\" $cur_line] then {\n \t    close $fd\n \t    return 1\n \t}\n@@ -311,7 +310,7 @@ proc f-torture { args } {\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n-    if [expr [search_for $src \"do *\\[0-9\\]\"]+[search_for $src \"end *do\"]] then {\n+    if [expr [search_for_re $src \"do *\\[0-9\\]\"]+[search_for_re $src \"end *do\"]] then {\n \tset option_list $torture_with_loops\n     } else {\n \tset option_list $torture_without_loops"}]}