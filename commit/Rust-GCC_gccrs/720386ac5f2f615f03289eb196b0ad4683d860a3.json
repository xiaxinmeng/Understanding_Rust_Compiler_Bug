{"sha": "720386ac5f2f615f03289eb196b0ad4683d860a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzIwMzg2YWM1ZjJmNjE1ZjAzMjg5ZWIxOTZiMGFkNDY4M2Q4NjBhMw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-12-30T13:13:13Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-12-30T13:13:13Z"}, "message": "Short circuit if upper 128bits are unchanged in the block.\n\n2010-12-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (upper_128bits_state): Remove comments.\n\t(block_info_def): Add unchanged.\n\t(move_or_delete_vzeroupper_2): Short circuit if upper 128bits\n\tare unchanged in the block.\n\nFrom-SVN: r168343", "tree": {"sha": "cb3749fa5d94b46c7f0e186eda5b55231ff8e7ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb3749fa5d94b46c7f0e186eda5b55231ff8e7ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/720386ac5f2f615f03289eb196b0ad4683d860a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720386ac5f2f615f03289eb196b0ad4683d860a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/720386ac5f2f615f03289eb196b0ad4683d860a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/720386ac5f2f615f03289eb196b0ad4683d860a3/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "310a21aa3120a17fe90c02faf1c462de2789c4e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/310a21aa3120a17fe90c02faf1c462de2789c4e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/310a21aa3120a17fe90c02faf1c462de2789c4e3"}], "stats": {"total": 55, "additions": 43, "deletions": 12}, "files": [{"sha": "1246fafe08fff053b48dc327face9f62602ee71a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720386ac5f2f615f03289eb196b0ad4683d860a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720386ac5f2f615f03289eb196b0ad4683d860a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=720386ac5f2f615f03289eb196b0ad4683d860a3", "patch": "@@ -1,3 +1,10 @@\n+2010-12-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (upper_128bits_state): Remove comments.\n+\t(block_info_def): Add unchanged.\n+\t(move_or_delete_vzeroupper_2): Short circuit if upper 128bits\n+\tare unchanged in the block.\n+\n 2010-12-30  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/46519"}, {"sha": "50dac35b87497adaf3b69a63cef566d448956418", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 36, "deletions": 12, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/720386ac5f2f615f03289eb196b0ad4683d860a3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/720386ac5f2f615f03289eb196b0ad4683d860a3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=720386ac5f2f615f03289eb196b0ad4683d860a3", "patch": "@@ -59,15 +59,18 @@ along with GCC; see the file COPYING3.  If not see\n \n enum upper_128bits_state\n {\n-  unknown = 0,\t\t/* Unknown.  */\n-  unused,\t\t/* Not used or not referenced.  */\n-  used\t\t\t/* Used or referenced.  */\n+  unknown = 0,\n+  unused,\n+  used\n };\n \n typedef struct block_info_def\n {\n-  /* State of the upper 128bits of any AVX registers at exit.  */\n+  /* State of the upper 128bits of AVX registers at exit.  */\n   enum upper_128bits_state state;\n+  /* TRUE if state of the upper 128bits of AVX registers is unchanged\n+     in this block.  */\n+  bool unchanged;\n   /* TRUE if block has been processed.  */\n   bool processed;\n } *block_info;\n@@ -110,8 +113,7 @@ check_avx256_stores (rtx dest, const_rtx set, void *data)\n    in basic block BB.  Delete it if upper 128bit AVX registers are\n    unused.  If it isn't deleted, move it to just before a jump insn.\n    \n-   UPPER_128BITS_LIVE is TRUE if the upper 128bits of any AVX registers\n-   are live at entry.  */\n+   STATE is state of the upper 128bits of AVX registers at entry.  */\n \n static void\n move_or_delete_vzeroupper_2 (basic_block bb,\n@@ -121,11 +123,24 @@ move_or_delete_vzeroupper_2 (basic_block bb,\n   rtx vzeroupper_insn = NULL_RTX;\n   rtx pat;\n   int avx256;\n+  bool unchanged;\n+\n+  if (BLOCK_INFO (bb)->unchanged)\n+    {\n+      if (dump_file)\n+\tfprintf (dump_file, \" [bb %i] unchanged: upper 128bits: %d\\n\",\n+\t\t bb->index, state);\n+\n+      BLOCK_INFO (bb)->state = state;\n+      return;\n+    }\n \n   if (dump_file)\n     fprintf (dump_file, \" [bb %i] entry: upper 128bits: %d\\n\",\n \t     bb->index, state);\n \n+  unchanged = true;\n+\n   /* BB_END changes when it is deleted.  */\n   bb_end = BB_END (bb);\n   insn = BB_HEAD (bb);\n@@ -179,6 +194,7 @@ move_or_delete_vzeroupper_2 (basic_block bb,\n \t      && XINT (XVECEXP (pat, 0, 0), 1) == UNSPECV_VZEROALL)\n \t    {\n \t      state = unused;\n+\t      unchanged = false;\n \n \t      /* Delete pending vzeroupper insertion.  */\n \t      if (vzeroupper_insn)\n@@ -189,9 +205,9 @@ move_or_delete_vzeroupper_2 (basic_block bb,\n \t    }\n \t  else if (state != used)\n \t    {\n-\t      /* No need to call note_stores if the upper 128bits of\n-\t\t AVX registers are never referenced.  */\n \t      note_stores (pat, check_avx256_stores, &state);\n+\t      if (state == used)\n+\t\tunchanged = false;\n \t    }\n \t  continue;\n \t}\n@@ -205,7 +221,10 @@ move_or_delete_vzeroupper_2 (basic_block bb,\n \t     256bit AVX register.  We only need to check if callee\n \t     returns 256bit AVX register.  */\n \t  if (avx256 == callee_return_avx256)\n-\t    state = used;\n+\t    {\n+\t      state = used;\n+\t      unchanged = false;\n+\t    }\n \n \t  /* Remove unnecessary vzeroupper since upper 128bits are\n \t     cleared.  */\n@@ -236,15 +255,20 @@ move_or_delete_vzeroupper_2 (basic_block bb,\n \t      delete_insn (insn);\n \t    }\n \t  else\n-\t    vzeroupper_insn = insn;\n+\t    {\n+\t      vzeroupper_insn = insn;\n+\t      unchanged = false;\n+\t    }\n \t}\n     }\n \n   BLOCK_INFO (bb)->state = state;\n+  BLOCK_INFO (bb)->unchanged = unchanged;\n \n   if (dump_file)\n-    fprintf (dump_file, \" [bb %i] exit: upper 128bits: %d\\n\",\n-\t     bb->index, state);\n+    fprintf (dump_file, \" [bb %i] exit: %s: upper 128bits: %d\\n\",\n+\t     bb->index, unchanged ? \"unchanged\" : \"changed\",\n+\t     state);\n }\n \n /* Helper function for move_or_delete_vzeroupper.  Process vzeroupper"}]}