{"sha": "9684f222a6f15caa6949b8a075d531f824e324e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTY4NGYyMjJhNmYxNWNhYTY5NDliOGEwNzVkNTMxZjgyNGUzMjRlMQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2017-11-14T19:34:29Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2017-11-14T19:34:29Z"}, "message": "tree-ssa-threadupdate.c (compute_path_counts): Remove unused path_in_freq_ptr parameter.\n\n\n\t* tree-ssa-threadupdate.c (compute_path_counts): Remove\n\tunused path_in_freq_ptr parameter.\n\t(ssa_fix_duplicate_block_edges): Do not pass around path_in_freq\n\nFrom-SVN: r254739", "tree": {"sha": "990032a90da1e17de2c3d663bd3c8dd8b3779b54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/990032a90da1e17de2c3d663bd3c8dd8b3779b54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9684f222a6f15caa6949b8a075d531f824e324e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9684f222a6f15caa6949b8a075d531f824e324e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9684f222a6f15caa6949b8a075d531f824e324e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9684f222a6f15caa6949b8a075d531f824e324e1/comments", "author": null, "committer": null, "parents": [{"sha": "30632c7a9742ed959f85b33c6f57f9cc62c76630", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30632c7a9742ed959f85b33c6f57f9cc62c76630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30632c7a9742ed959f85b33c6f57f9cc62c76630"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "5870587b55fd01956efaa85f744081cc7b8d8d78", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9684f222a6f15caa6949b8a075d531f824e324e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9684f222a6f15caa6949b8a075d531f824e324e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9684f222a6f15caa6949b8a075d531f824e324e1", "patch": "@@ -1,3 +1,9 @@\n+2017-11-14  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* tree-ssa-threadupdate.c (compute_path_counts): Remove\n+\tunused path_in_freq_ptr parameter.\n+\t(ssa_fix_duplicate_block_edges): Do not pass around path_in_freq\n+\n 2017-11-14  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (edge_badness): Dump sreal frequency."}, {"sha": "3d3aeab2a6668b1cf0f1337555536eaa676230b2", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9684f222a6f15caa6949b8a075d531f824e324e1/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9684f222a6f15caa6949b8a075d531f824e324e1/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=9684f222a6f15caa6949b8a075d531f824e324e1", "patch": "@@ -691,16 +691,14 @@ static bool\n compute_path_counts (struct redirection_data *rd,\n \t\t     ssa_local_info_t *local_info,\n \t\t     profile_count *path_in_count_ptr,\n-\t\t     profile_count *path_out_count_ptr,\n-\t\t     int *path_in_freq_ptr)\n+\t\t     profile_count *path_out_count_ptr)\n {\n   edge e = rd->incoming_edges->e;\n   vec<jump_thread_edge *> *path = THREAD_PATH (e);\n   edge elast = path->last ()->e;\n   profile_count nonpath_count = profile_count::zero ();\n   bool has_joiner = false;\n   profile_count path_in_count = profile_count::zero ();\n-  int path_in_freq = 0;\n \n   /* Start by accumulating incoming edge counts to the path's first bb\n      into a couple buckets:\n@@ -740,7 +738,6 @@ compute_path_counts (struct redirection_data *rd,\n \t     source block.  */\n \t  gcc_assert (ein_path->last ()->e == elast);\n \t  path_in_count += ein->count ();\n-\t  path_in_freq += EDGE_FREQUENCY (ein);\n \t}\n       else if (!ein_path)\n \t{\n@@ -751,10 +748,6 @@ compute_path_counts (struct redirection_data *rd,\n \t}\n     }\n \n-  /* This is needed due to insane incoming frequencies.  */\n-  if (path_in_freq > BB_FREQ_MAX)\n-    path_in_freq = BB_FREQ_MAX;\n-\n   /* Now compute the fraction of the total count coming into the first\n      path bb that is from the current threading path.  */\n   profile_count total_count = e->dest->count;\n@@ -843,7 +836,6 @@ compute_path_counts (struct redirection_data *rd,\n \n   *path_in_count_ptr = path_in_count;\n   *path_out_count_ptr = path_out_count;\n-  *path_in_freq_ptr = path_in_freq;\n   return has_joiner;\n }\n \n@@ -954,7 +946,6 @@ ssa_fix_duplicate_block_edges (struct redirection_data *rd,\n   edge elast = path->last ()->e;\n   profile_count path_in_count = profile_count::zero ();\n   profile_count path_out_count = profile_count::zero ();\n-  int path_in_freq = 0;\n \n   /* First determine how much profile count to move from original\n      path to the duplicate path.  This is tricky in the presence of\n@@ -963,8 +954,7 @@ ssa_fix_duplicate_block_edges (struct redirection_data *rd,\n      non-joiner case the path_in_count and path_out_count should be the\n      same.  */\n   bool has_joiner = compute_path_counts (rd, local_info,\n-\t\t\t\t\t &path_in_count, &path_out_count,\n-\t\t\t\t\t &path_in_freq);\n+\t\t\t\t\t &path_in_count, &path_out_count);\n \n   for (unsigned int count = 0, i = 1; i < path->length (); i++)\n     {"}]}