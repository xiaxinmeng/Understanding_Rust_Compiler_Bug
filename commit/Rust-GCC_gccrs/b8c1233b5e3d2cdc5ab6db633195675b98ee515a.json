{"sha": "b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjMTIzM2I1ZTNkMmNkYzVhYjZkYjYzMzE5NTY3NWI5OGVlNTE1YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-04-09T16:05:16Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-04-09T16:05:16Z"}, "message": "vec.cc: Include <new> and <exception>.\n\n\t* vec.cc: Include <new> and <exception>.\n\t(__cxa_vec_ctor): Use __cxa_vec_dtor for cleanup.\n\t(__cxa_vec_dtor): Catch dtor exceptions, and rethrow or\n\tterminate.\n\t(__cxa_vec_delete): Catch dtor exceptions.\n\nFrom-SVN: r33042", "tree": {"sha": "ef3a8297733946b1a8fa48aa5d31a200239f8ac3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef3a8297733946b1a8fa48aa5d31a200239f8ac3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c1233b5e3d2cdc5ab6db633195675b98ee515a/comments", "author": null, "committer": null, "parents": [{"sha": "7e2d247261b874a7cf47f0b91b548a46107b6b44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e2d247261b874a7cf47f0b91b548a46107b6b44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e2d247261b874a7cf47f0b91b548a46107b6b44"}], "stats": {"total": 63, "additions": 46, "deletions": 17}, "files": [{"sha": "3457d8e38ced321e4a07bb2cd7f0a8fa7faed0b5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c1233b5e3d2cdc5ab6db633195675b98ee515a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c1233b5e3d2cdc5ab6db633195675b98ee515a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "patch": "@@ -1,3 +1,11 @@\n+2000-04-09  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* vec.cc: Include <new> and <exception>.\n+\t(__cxa_vec_ctor): Use __cxa_vec_dtor for cleanup.\n+\t(__cxa_vec_dtor): Catch dtor exceptions, and rethrow or\n+\tterminate.\n+\t(__cxa_vec_delete): Catch dtor exceptions.\n+\n 2000-04-09  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPrepend __ to implementation defined names."}, {"sha": "4f5ce4960efafd0b6b2ac8f8f7b763cbdc7a8e9f", "filename": "gcc/cp/vec.cc", "status": "modified", "additions": 38, "deletions": 17, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c1233b5e3d2cdc5ab6db633195675b98ee515a/gcc%2Fcp%2Fvec.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c1233b5e3d2cdc5ab6db633195675b98ee515a/gcc%2Fcp%2Fvec.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fvec.cc?ref=b8c1233b5e3d2cdc5ab6db633195675b98ee515a", "patch": "@@ -27,6 +27,12 @@\n \n #if defined(__GXX_ABI_VERSION) && __GXX_ABI_VERSION >= 100\n #include <cxxabi.h>\n+#include <new>\n+#include <exception>\n+\n+// Exception handling hook, to mark current exception as not caught --\n+// generally because we're about to rethrow it after some cleanup.\n+extern \"C\" void __uncatch_exception (void);\n \n namespace __cxxabiv1\n {\n@@ -54,6 +60,7 @@ __cxa_vec_new (size_t element_count,\n     }\n   catch (...)\n     {\n+      // operator delete [] cannot throw, so no need to protect it\n       operator delete[] (base - padding_size);\n       throw;\n     }\n@@ -79,18 +86,8 @@ __cxa_vec_ctor (void *array_address,\n     }\n   catch (...)\n     {\n-      try\n-        {\n-          if (destructor)\n-            for (; ix--; ptr -= element_size)\n-              destructor (ptr);\n-        }\n-      catch (...)\n-        {\n-          // [except.ctor]/3 If a destructor called during stack unwinding\n-          // exists with an exception, terminate is called.\n-          std::terminate ();\n-        }\n+      __uncatch_exception ();\n+      __cxa_vec_dtor (array_address, ix, element_size, destructor);\n       throw;\n     }\n }\n@@ -105,13 +102,28 @@ __cxa_vec_dtor (void *array_address,\n   if (destructor)\n     {\n       char *ptr = static_cast <char *> (array_address);\n+      size_t ix = element_count;\n+      bool unwinding = std::uncaught_exception ();\n       \n       ptr += element_count * element_size;\n       \n-      for (size_t ix = element_count; ix--;)\n+      try\n+        {\n+          while (ix--)\n+            {\n+              ptr -= element_size;\n+              destructor (ptr);\n+            }\n+        }\n+      catch (...)\n         {\n-          ptr -= element_size;\n-          destructor (ptr);\n+          if (unwinding)\n+            // [except.ctor]/3 If a destructor called during stack unwinding\n+            // exists with an exception, terminate is called.\n+            std::terminate ();\n+          __uncatch_exception ();\n+          __cxa_vec_dtor (array_address, ix, element_size, destructor);\n+          throw;\n         }\n     }\n }\n@@ -128,9 +140,18 @@ __cxa_vec_delete (void *array_address,\n   if (padding_size)\n     {\n       size_t element_count = reinterpret_cast <size_t *> (base)[-1];\n-      \n-      __cxa_vec_dtor (base, element_count, element_size, destructor);\n       base -= padding_size;\n+      try\n+        {\n+          __cxa_vec_dtor (array_address, element_count, element_size,\n+                          destructor);\n+        }\n+      catch (...)\n+        {\n+          // operator delete [] cannot throw, so no need to protect it\n+          operator delete[] (base);\n+          throw;\n+        }\n     }\n   operator delete[] (base);\n }"}]}