{"sha": "6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ3ZjdlMGE2MzUyOThjMzA3ZDUxZDNlYjE2NjkwNWI1YmNhZjA3YQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2013-11-05T07:29:47Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2013-11-05T07:29:47Z"}, "message": "invoke.texi (-fopenmp-simd): Document new option.\n\n2013-11-05  Tobias Burnus  <burnus@net-b.de>\n\ngcc/\n        * doc/invoke.texi (-fopenmp-simd): Document new option.\n        * gimplify.c (gimplify_body): Accept -fopenmp-simd.\n        * omp-low.c (execute_expand_omp, execute_lower_omp): Ditto.\n        * tree.c (attribute_value_equal): Ditto.\n\ngcc/fortran/\n        * lang.opt (fopenmp-simd): New option.\n        * gfortran.h (gfc_option_t): Add gfc_flag_openmp_simd.\n        * options.c (gfc_handle_option): Handle it.\n\ngcc/c-family/\n        * c.opt (fopenmp-simd): New option.\n        * c-pragma.c (omp_pragmas): Move pragmas which can contain simd\n        * to ...\n        (omp_pragmas): ... this new struct.\n        (c_pp_lookup_pragma): Also walk omp_pragmas.\n        (init_pragma): Init pragmas for -fopenmp-simd.\n\ngcc/c\n        * c-parser.c (c_parser_omp_for, c_parser_omp_parallel,\n        c_parser_omp_distribute, c_parser_omp_teams,\n        c_parser_omp_target, c_parser_omp_declare): Handle\n        -fopenmp-simd.\n\ngcc/cp\n        * parser.c (cp_parser_omp_for, cp_parser_omp_parallel,\n        cp_parser_omp_distribute, cp_parser_omp_teams,\ncp_parser_omp_target,\n        cp_parser_omp_declare): Handle\n        -fopenmp-simd.\n\ngcc/testsuite/\n        * g++.dg/gomp/openmp-simd-1.C: New.\n        * g++.dg/gomp/openmp-simd-2.C: New.\n        * gcc.dg/gomp/openmp-simd-1.c: New.\n        * gcc.dg/gomp/openmp-simd-2.c: New.\n\nFrom-SVN: r204382", "tree": {"sha": "789e5dc3cac9b9f008c01fc7464776cb40592969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/789e5dc3cac9b9f008c01fc7464776cb40592969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6310844b657ce0658c3d1061b56ffc88e7beaeb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6310844b657ce0658c3d1061b56ffc88e7beaeb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6310844b657ce0658c3d1061b56ffc88e7beaeb0"}], "stats": {"total": 438, "additions": 399, "deletions": 39}, "files": [{"sha": "eecf65b91fe36920a1525dfbf37572240afb5174", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,10 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* doc/invoke.texi (-fopenmp-simd): Document new option.\n+\t* gimplify.c (gimplify_body): Accept -fopenmp-simd.\n+\t* omp-low.c (execute_expand_omp, execute_lower_omp): Ditto.\n+\t* tree.c (attribute_value_equal): Ditto.\n+\n 2013-11-04  Wei Mi  <wmi@google.com>\n \n \t* sched-rgn.c (add_branch_dependences): Keep insns in"}, {"sha": "9cd9e794698615c61027460edc496b01e6a7c148", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,11 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* c.opt (fopenmp-simd): New option.\n+\t* c-pragma.c (omp_pragmas): Move pragmas which can contain simd to ...\n+\t(omp_pragmas): ... this new struct.\n+\t(c_pp_lookup_pragma): Also walk omp_pragmas.\n+\t(init_pragma): Init pragmas for -fopenmp-simd.\n+\n 2013-11-04  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/58979"}, {"sha": "c75b0872b446c935e76457ab8fab05a62334a5e2", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1170,31 +1170,35 @@ static const struct omp_pragma_def omp_pragmas[] = {\n   { \"cancel\", PRAGMA_OMP_CANCEL },\n   { \"cancellation\", PRAGMA_OMP_CANCELLATION_POINT },\n   { \"critical\", PRAGMA_OMP_CRITICAL },\n-  { \"declare\", PRAGMA_OMP_DECLARE_REDUCTION },\n-  { \"distribute\", PRAGMA_OMP_DISTRIBUTE },\n   { \"end\", PRAGMA_OMP_END_DECLARE_TARGET },\n   { \"flush\", PRAGMA_OMP_FLUSH },\n-  { \"for\", PRAGMA_OMP_FOR },\n   { \"master\", PRAGMA_OMP_MASTER },\n   { \"ordered\", PRAGMA_OMP_ORDERED },\n-  { \"parallel\", PRAGMA_OMP_PARALLEL },\n   { \"section\", PRAGMA_OMP_SECTION },\n   { \"sections\", PRAGMA_OMP_SECTIONS },\n-  { \"simd\", PRAGMA_OMP_SIMD },\n   { \"single\", PRAGMA_OMP_SINGLE },\n-  { \"target\", PRAGMA_OMP_TARGET },\n-  { \"task\", PRAGMA_OMP_TASK },\n   { \"taskgroup\", PRAGMA_OMP_TASKGROUP },\n   { \"taskwait\", PRAGMA_OMP_TASKWAIT },\n   { \"taskyield\", PRAGMA_OMP_TASKYIELD },\n-  { \"teams\", PRAGMA_OMP_TEAMS },\n   { \"threadprivate\", PRAGMA_OMP_THREADPRIVATE }\n };\n+static const struct omp_pragma_def omp_pragmas_simd[] = {\n+  { \"declare\", PRAGMA_OMP_DECLARE_REDUCTION },\n+  { \"distribute\", PRAGMA_OMP_DISTRIBUTE },\n+  { \"for\", PRAGMA_OMP_FOR },\n+  { \"parallel\", PRAGMA_OMP_PARALLEL },\n+  { \"simd\", PRAGMA_OMP_SIMD },\n+  { \"target\", PRAGMA_OMP_TARGET },\n+  { \"task\", PRAGMA_OMP_TASK },\n+  { \"teams\", PRAGMA_OMP_TEAMS },\n+};\n \n void\n c_pp_lookup_pragma (unsigned int id, const char **space, const char **name)\n {\n   const int n_omp_pragmas = sizeof (omp_pragmas) / sizeof (*omp_pragmas);\n+  const int n_omp_pragmas_simd = sizeof (omp_pragmas_simd)\n+\t\t\t\t / sizeof (*omp_pragmas);\n   int i;\n \n   for (i = 0; i < n_omp_pragmas; ++i)\n@@ -1205,6 +1209,14 @@ c_pp_lookup_pragma (unsigned int id, const char **space, const char **name)\n \treturn;\n       }\n \n+  for (i = 0; i < n_omp_pragmas_simd; ++i)\n+    if (omp_pragmas_simd[i].id == id)\n+      {\n+\t*space = \"omp\";\n+\t*name = omp_pragmas_simd[i].name;\n+\treturn;\n+      }\n+\n   if (id >= PRAGMA_FIRST_EXTERNAL\n       && (id < PRAGMA_FIRST_EXTERNAL + registered_pp_pragmas.length ()))\n     {\n@@ -1357,6 +1369,16 @@ init_pragma (void)\n \tcpp_register_deferred_pragma (parse_in, \"omp\", omp_pragmas[i].name,\n \t\t\t\t      omp_pragmas[i].id, true, true);\n     }\n+  if (flag_openmp || flag_openmp_simd)\n+    {\n+      const int n_omp_pragmas_simd = sizeof (omp_pragmas_simd)\n+\t\t\t\t     / sizeof (*omp_pragmas);\n+      int i;\n+\n+      for (i = 0; i < n_omp_pragmas_simd; ++i)\n+\tcpp_register_deferred_pragma (parse_in, \"omp\", omp_pragmas_simd[i].name,\n+\t\t\t\t      omp_pragmas_simd[i].id, true, true);\n+    }\n \n   if (!flag_preprocess_only)\n     cpp_register_deferred_pragma (parse_in, \"GCC\", \"pch_preprocess\","}, {"sha": "22f8939b535d636f19dbc1a49e9091a1b5624f5d", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1069,6 +1069,10 @@ fopenmp\n C ObjC C++ ObjC++ Var(flag_openmp)\n Enable OpenMP (implies -frecursive in Fortran)\n \n+fopenmp-simd\n+C ObjC C++ ObjC++ Var(flag_openmp_simd)\n+Enable OpenMP's SIMD directives\n+\n foperator-names\n C++ ObjC++\n Recognize C++ keywords like \\\"compl\\\" and \\\"xor\\\""}, {"sha": "9a9eed39de56198877e695bc159698aa15b6da1a", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,10 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* c-parser.c (c_parser_omp_for, c_parser_omp_parallel,\n+\tc_parser_omp_distribute, c_parser_omp_teams,\n+\tc_parser_omp_target, c_parser_omp_declare): Handle\n+\t-fopenmp-simd.\n+\n 2013-11-03  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c (grokdeclarator): Add VLA instrumentation."}, {"sha": "4ae30c319165e7d1c6ef3b09156f80b0ddcc7845", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 59, "deletions": 12, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -11616,6 +11616,8 @@ c_parser_omp_for (location_t loc, c_parser *parser,\n \t    cclauses = cclauses_buf;\n \n \t  c_parser_consume_token (parser);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return c_parser_omp_simd (loc, parser, p_name, mask, cclauses);\n \t  block = c_begin_compound_stmt (true);\n \t  ret = c_parser_omp_simd (loc, parser, p_name, mask, cclauses);\n \t  block = c_end_compound_stmt (loc, block, true);\n@@ -11630,6 +11632,11 @@ c_parser_omp_for (location_t loc, c_parser *parser,\n \t  return ret;\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      c_parser_skip_to_pragma_eol (parser);\n+      return NULL_TREE;\n+    }\n \n   clauses = c_parser_omp_all_clauses (parser, mask, p_name, cclauses == NULL);\n   if (cclauses)\n@@ -11825,6 +11832,8 @@ c_parser_omp_parallel (location_t loc, c_parser *parser,\n \tcclauses = cclauses_buf;\n \n       c_parser_consume_token (parser);\n+      if (!flag_openmp)  /* flag_openmp_simd  */\n+\treturn c_parser_omp_for (loc, parser, p_name, mask, cclauses);\n       block = c_begin_omp_parallel ();\n       c_parser_omp_for (loc, parser, p_name, mask, cclauses);\n       stmt\n@@ -11839,6 +11848,11 @@ c_parser_omp_parallel (location_t loc, c_parser *parser,\n       c_parser_skip_to_pragma_eol (parser);\n       return NULL_TREE;\n     }\n+  else if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      c_parser_skip_to_pragma_eol (parser);\n+      return NULL_TREE;\n+    }\n   else if (c_parser_next_token_is (parser, CPP_NAME))\n     {\n       const char *p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n@@ -12069,6 +12083,14 @@ c_parser_omp_distribute (location_t loc, c_parser *parser,\n \t  if (cclauses == NULL)\n \t    cclauses = cclauses_buf;\n \t  c_parser_consume_token (parser);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    {\n+\t      if (simd)\n+\t\treturn c_parser_omp_simd (loc, parser, p_name, mask, cclauses);\n+\t      else\n+\t\treturn c_parser_omp_parallel (loc, parser, p_name, mask,\n+\t\t\t\t\t      cclauses);\n+\t    }\n \t  block = c_begin_compound_stmt (true);\n \t  if (simd)\n \t    ret = c_parser_omp_simd (loc, parser, p_name, mask, cclauses);\n@@ -12086,6 +12108,11 @@ c_parser_omp_distribute (location_t loc, c_parser *parser,\n \t  return ret;\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      c_parser_skip_to_pragma_eol (parser);\n+      return NULL_TREE;\n+    }\n \n   clauses = c_parser_omp_all_clauses (parser, mask, p_name, cclauses == NULL);\n   if (cclauses)\n@@ -12134,6 +12161,8 @@ c_parser_omp_teams (location_t loc, c_parser *parser,\n \t    cclauses = cclauses_buf;\n \n \t  c_parser_consume_token (parser);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return c_parser_omp_distribute (loc, parser, p_name, mask, cclauses);\n \t  block = c_begin_compound_stmt (true);\n \t  ret = c_parser_omp_distribute (loc, parser, p_name, mask, cclauses);\n \t  block = c_end_compound_stmt (loc, block, true);\n@@ -12147,6 +12176,11 @@ c_parser_omp_teams (location_t loc, c_parser *parser,\n \t  return add_stmt (ret);\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      c_parser_skip_to_pragma_eol (parser);\n+      return NULL_TREE;\n+    }\n \n   clauses = c_parser_omp_all_clauses (parser, mask, p_name, cclauses == NULL);\n   if (cclauses)\n@@ -12258,24 +12292,16 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context)\n     {\n       const char *p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n \n-      if (strcmp (p, \"data\") == 0)\n-\t{\n-\t  c_parser_consume_token (parser);\n-\t  c_parser_omp_target_data (loc, parser);\n-\t  return true;\n-\t}\n-      else if (strcmp (p, \"update\") == 0)\n-\t{\n-\t  c_parser_consume_token (parser);\n-\t  return c_parser_omp_target_update (loc, parser, context);\n-\t}\n-      else if (strcmp (p, \"teams\") == 0)\n+      if (strcmp (p, \"teams\") == 0)\n \t{\n \t  tree cclauses[C_OMP_CLAUSE_SPLIT_COUNT];\n \t  char p_name[sizeof (\"#pragma omp target teams distribute \"\n \t\t\t      \"parallel for simd\")];\n \n \t  c_parser_consume_token (parser);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return c_parser_omp_teams (loc, parser, p_name,\n+\t\t\t\t       OMP_TARGET_CLAUSE_MASK, cclauses);\n \t  strcpy (p_name, \"#pragma omp target\");\n \t  keep_next_level ();\n \t  tree block = c_begin_compound_stmt (true);\n@@ -12291,6 +12317,22 @@ c_parser_omp_target (c_parser *parser, enum pragma_context context)\n \t  add_stmt (stmt);\n \t  return true;\n \t}\n+      else if (!flag_openmp)  /* flag_openmp_simd  */\n+\t{\n+\t  c_parser_skip_to_pragma_eol (parser);\n+\t  return NULL_TREE;\n+\t}\n+      else if (strcmp (p, \"data\") == 0)\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  c_parser_omp_target_data (loc, parser);\n+\t  return true;\n+\t}\n+      else if (strcmp (p, \"update\") == 0)\n+\t{\n+\t  c_parser_consume_token (parser);\n+\t  return c_parser_omp_target_update (loc, parser, context);\n+\t}\n     }\n \n   tree stmt = make_node (OMP_TARGET);\n@@ -12918,6 +12960,11 @@ c_parser_omp_declare (c_parser *parser, enum pragma_context context)\n \t  c_parser_omp_declare_reduction (parser, context);\n \t  return;\n \t}\n+      if (!flag_openmp)  /* flag_openmp_simd  */\n+\t{\n+\t  c_parser_skip_to_pragma_eol (parser);\n+\t  return;\n+\t}\n       if (strcmp (p, \"target\") == 0)\n \t{\n \t  c_parser_consume_token (parser);"}, {"sha": "e6613901c0d6a9fd2255dc2893fde8831cdca94f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,9 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* parser.c (cp_parser_omp_for, cp_parser_omp_parallel,\n+\tcp_parser_omp_distribute, cp_parser_omp_teams, cp_parser_omp_target,\n+\tcp_parser_omp_declare): Handle -fopenmp-simd.\n+\n 2013-11-04  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl2.c (cpp_check): Change type of first parameter and deal with"}, {"sha": "1ff56fed3366e4855e62fd1e5ca03ca4070b415f", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 62, "deletions": 12, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -29133,6 +29133,9 @@ cp_parser_omp_for (cp_parser *parser, cp_token *pragma_tok,\n \t    cclauses = cclauses_buf;\n \n \t  cp_lexer_consume_token (parser->lexer);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return cp_parser_omp_simd (parser, pragma_tok, p_name, mask,\n+\t\t\t\t       cclauses);\n \t  sb = begin_omp_structured_block ();\n \t  save = cp_parser_begin_omp_structured_block (parser);\n \t  ret = cp_parser_omp_simd (parser, pragma_tok, p_name, mask,\n@@ -29150,6 +29153,11 @@ cp_parser_omp_for (cp_parser *parser, cp_token *pragma_tok,\n \t  return ret;\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      cp_parser_require_pragma_eol (parser, pragma_tok);\n+      return NULL_TREE;\n+    }\n \n   clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,\n \t\t\t\t       cclauses == NULL);\n@@ -29333,6 +29341,8 @@ cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok,\n \tcclauses = cclauses_buf;\n \n       cp_lexer_consume_token (parser->lexer);\n+      if (!flag_openmp)  /* flag_openmp_simd  */\n+\treturn cp_parser_omp_for (parser, pragma_tok, p_name, mask, cclauses);\n       block = begin_omp_parallel ();\n       save = cp_parser_begin_omp_structured_block (parser);\n       cp_parser_omp_for (parser, pragma_tok, p_name, mask, cclauses);\n@@ -29348,6 +29358,11 @@ cp_parser_omp_parallel (cp_parser *parser, cp_token *pragma_tok,\n       cp_parser_skip_to_pragma_eol (parser, pragma_tok);\n       return NULL_TREE;\n     }\n+  else if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      cp_parser_require_pragma_eol (parser, pragma_tok);\n+      return NULL_TREE;\n+    }\n   else if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n     {\n       tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n@@ -29576,6 +29591,15 @@ cp_parser_omp_distribute (cp_parser *parser, cp_token *pragma_tok,\n \t  if (cclauses == NULL)\n \t    cclauses = cclauses_buf;\n \t  cp_lexer_consume_token (parser->lexer);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    {\n+\t      if (simd)\n+\t\treturn cp_parser_omp_simd (parser, pragma_tok, p_name, mask,\n+\t\t\t\t\t   cclauses);\n+\t      else\n+\t\treturn cp_parser_omp_parallel (parser, pragma_tok, p_name, mask,\n+\t\t\t\t\t       cclauses);\n+\t    }\n \t  sb = begin_omp_structured_block ();\n \t  save = cp_parser_begin_omp_structured_block (parser);\n \t  if (simd)\n@@ -29597,6 +29621,11 @@ cp_parser_omp_distribute (cp_parser *parser, cp_token *pragma_tok,\n \t  return ret;\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      cp_parser_require_pragma_eol (parser, pragma_tok);\n+      return NULL_TREE;\n+    }\n \n   clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,\n \t\t\t\t       cclauses == NULL);\n@@ -29652,6 +29681,9 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n \t    cclauses = cclauses_buf;\n \n \t  cp_lexer_consume_token (parser->lexer);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return cp_parser_omp_distribute (parser, pragma_tok, p_name, mask,\n+\t\t\t\t\t     cclauses);\n \t  sb = begin_omp_structured_block ();\n \t  save = cp_parser_begin_omp_structured_block (parser);\n \t  ret = cp_parser_omp_distribute (parser, pragma_tok, p_name, mask,\n@@ -29668,6 +29700,11 @@ cp_parser_omp_teams (cp_parser *parser, cp_token *pragma_tok,\n \t  return add_stmt (ret);\n \t}\n     }\n+  if (!flag_openmp)  /* flag_openmp_simd  */\n+    {\n+      cp_parser_require_pragma_eol (parser, pragma_tok);\n+      return NULL_TREE;\n+    }\n \n   clauses = cp_parser_omp_all_clauses (parser, mask, p_name, pragma_tok,\n \t\t\t\t       cclauses == NULL);\n@@ -29777,18 +29814,7 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n       tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n       const char *p = IDENTIFIER_POINTER (id);\n \n-      if (strcmp (p, \"data\") == 0)\n-\t{\n-\t  cp_lexer_consume_token (parser->lexer);\n-\t  cp_parser_omp_target_data (parser, pragma_tok);\n-\t  return true;\n-\t}\n-      else if (strcmp (p, \"update\") == 0)\n-\t{\n-\t  cp_lexer_consume_token (parser->lexer);\n-\t  return cp_parser_omp_target_update (parser, pragma_tok, context);\n-\t}\n-      else if (strcmp (p, \"teams\") == 0)\n+      if (strcmp (p, \"teams\") == 0)\n \t{\n \t  tree cclauses[C_OMP_CLAUSE_SPLIT_COUNT];\n \t  char p_name[sizeof (\"#pragma omp target teams distribute \"\n@@ -29797,6 +29823,9 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n \t  cp_lexer_consume_token (parser->lexer);\n \t  strcpy (p_name, \"#pragma omp target\");\n \t  keep_next_level (true);\n+\t  if (!flag_openmp)  /* flag_openmp_simd  */\n+\t    return cp_parser_omp_teams (parser, pragma_tok, p_name,\n+\t\t\t\t\tOMP_TARGET_CLAUSE_MASK, cclauses);\n \t  tree sb = begin_omp_structured_block ();\n \t  unsigned save = cp_parser_begin_omp_structured_block (parser);\n \t  tree ret = cp_parser_omp_teams (parser, pragma_tok, p_name,\n@@ -29812,6 +29841,22 @@ cp_parser_omp_target (cp_parser *parser, cp_token *pragma_tok,\n \t  add_stmt (stmt);\n \t  return true;\n \t}\n+      else if (!flag_openmp)  /* flag_openmp_simd  */\n+\t{\n+\t  cp_parser_require_pragma_eol (parser, pragma_tok);\n+\t  return NULL_TREE;\n+\t}\n+      else if (strcmp (p, \"data\") == 0)\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  cp_parser_omp_target_data (parser, pragma_tok);\n+\t  return true;\n+\t}\n+      else if (strcmp (p, \"update\") == 0)\n+\t{\n+\t  cp_lexer_consume_token (parser->lexer);\n+\t  return cp_parser_omp_target_update (parser, pragma_tok, context);\n+\t}\n     }\n \n   tree stmt = make_node (OMP_TARGET);\n@@ -30411,6 +30456,11 @@ cp_parser_omp_declare (cp_parser *parser, cp_token *pragma_tok,\n \t\t\t\t\t   context);\n \t  return;\n \t}\n+      if (!flag_openmp)  /* flag_openmp_simd  */\n+\t{\n+\t  cp_parser_require_pragma_eol (parser, pragma_tok);\n+\t  return;\n+\t}\n       if (strcmp (p, \"target\") == 0)\n \t{\n \t  cp_lexer_consume_token (parser->lexer);"}, {"sha": "35f41d9445b2e94258f6755b5a92bbb1207589a9", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -168,8 +168,8 @@ in the following sections.\n @gccoptlist{-ansi  -std=@var{standard}  -fgnu89-inline @gol\n -aux-info @var{filename} -fallow-parameterless-variadic-functions @gol\n -fno-asm  -fno-builtin  -fno-builtin-@var{function} @gol\n--fhosted  -ffreestanding -fopenmp -fms-extensions -fplan9-extensions @gol\n--trigraphs  -traditional  -traditional-cpp @gol\n+-fhosted  -ffreestanding -fopenmp -fopenmp-simd -fms-extensions @gol\n+-fplan9-extensions -trigraphs  -traditional  -traditional-cpp @gol\n -fallow-single-precision  -fcond-mismatch -flax-vector-conversions @gol\n -fsigned-bitfields  -fsigned-char @gol\n -funsigned-bitfields  -funsigned-char}\n@@ -1839,7 +1839,16 @@ Enable handling of OpenMP directives @code{#pragma omp} in C/C++ and\n compiler generates parallel code according to the OpenMP Application\n Program Interface v4.0 @w{@uref{http://www.openmp.org/}}.  This option\n implies @option{-pthread}, and thus is only supported on targets that\n-have support for @option{-pthread}.\n+have support for @option{-pthread}. @option{-fopenmp} implies\n+@option{-fopenmp-simd}.\n+\n+@item -fopenmp-simd\n+@opindex fopenmp-simd\n+@cindex OpenMP SIMD\n+@cindex SIMD\n+Enable handling of OpenMP's SIMD directives with @code{#pragma omp}\n+in C/C++ and @code{!$omp} in Fortran. Other OpenMP directives\n+are ignored.\n \n @item -fcilkplus\n @opindex fcilkplus"}, {"sha": "16703f64dfbdbe2d1422cd1a5155ed199955f854", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,9 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* lang.opt (fopenmp-simd): New option.\n+\t* gfortran.h (gfc_option_t): Add gfc_flag_openmp_simd.\n+\t* options.c (gfc_handle_option): Handle it.\n+\n 2013-11-04  Ian Lance Taylor  <iant@google.com>\n \n \t* f95-lang.c (ATTR_LEAF_LIST): Define."}, {"sha": "af5e68c13ab6e218e603803916decfa4b0d6b32a", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -2286,6 +2286,7 @@ typedef struct\n   int flag_cray_pointer;\n   int flag_d_lines;\n   int gfc_flag_openmp;\n+  int gfc_flag_openmp_simd;\n   int flag_sign_zero;\n   int flag_stack_arrays;\n   int flag_module_private;"}, {"sha": "49d5f3ae8bf64b91bde25b13872c00dbb63efbf6", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -517,6 +517,10 @@ fopenmp\n Fortran\n ; Documented in C\n \n+fopenmp-simd\n+Fortran\n+; Documented in C\n+\n fpack-derived\n Fortran\n Try to lay out derived types as compactly as possible"}, {"sha": "e05528a922311b4d88e215f109d41c34e30ffc4b", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -836,6 +836,10 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       gfc_option.gfc_flag_openmp = value;\n       break;\n \n+    case OPT_fopenmp_simd:\n+      gfc_option.gfc_flag_openmp_simd = value;\n+      break;\n+\n     case OPT_ffree_line_length_none:\n       gfc_option.free_line_length = 0;\n       break;"}, {"sha": "4df9ed49e96b4815e16ff8a1fa71d66eda7c4577", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -8871,7 +8871,7 @@ gimplify_body (tree fndecl, bool do_parms)\n       nonlocal_vlas = NULL;\n     }\n \n-  if (flag_openmp && gimplify_omp_ctxp)\n+  if ((flag_openmp || flag_openmp_simd) && gimplify_omp_ctxp)\n     {\n       delete_omp_context (gimplify_omp_ctxp);\n       gimplify_omp_ctxp = NULL;"}, {"sha": "7874ff13dd6126783f2e28a4b511eb1875946c3f", "filename": "gcc/omp-low.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -8232,7 +8232,7 @@ execute_expand_omp (void)\n static bool\n gate_expand_omp (void)\n {\n-  return (flag_openmp != 0 && !seen_error ());\n+  return ((flag_openmp != 0 || flag_openmp_simd != 0) && !seen_error ());\n }\n \n namespace {\n@@ -10053,7 +10053,7 @@ execute_lower_omp (void)\n \n   /* This pass always runs, to provide PROP_gimple_lomp.\n      But there is nothing to do unless -fopenmp is given.  */\n-  if (flag_openmp == 0)\n+  if (flag_openmp == 0 && flag_openmp_simd == 0)\n     return 0;\n \n   all_contexts = splay_tree_new (splay_tree_compare_pointers, 0,"}, {"sha": "c1bfc3b0ec2da2d0fa7d1238117cc55be838e6c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -1,3 +1,10 @@\n+2013-11-05  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* g++.dg/gomp/openmp-simd-1.C: New.\n+\t* g++.dg/gomp/openmp-simd-2.C: New.\n+\t* gcc.dg/gomp/openmp-simd-1.c: New.\n+\t* gcc.dg/gomp/openmp-simd-2.c: New.\n+\n 2013-11-04  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n \n \t* gcc.dg/superblock.c: Require scheduling support."}, {"sha": "fedb186fedf8e04eb66b1ca9784144d04c26e516", "filename": "gcc/testsuite/g++.dg/gomp/openmp-simd-1.C", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-1.C?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -fdump-tree-original\" } */\n+\n+#pragma omp declare simd\n+float bar(float b) {\n+  return b*b;\n+}\n+\n+void foo(int n, float *a, float *b)\n+{\n+  int i; \n+#pragma omp simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp teams distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp target teams distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp teams distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp target teams distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd\" 9 \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp for\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp distribute\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp teams\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp target\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp parallel\" \"original\" } } */"}, {"sha": "e31c1ebecf9f02fb66da83ac4c39eea49a6bf110", "filename": "gcc/testsuite/g++.dg/gomp/openmp-simd-2.C", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fopenmp-simd-2.C?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -fdump-tree-original\" } */\n+\n+extern void abort ();\n+int a[1024] __attribute__((aligned (32))) = { 1 };\n+struct S { int s; };\n+#pragma omp declare reduction (+:struct S:omp_out.s += omp_in.s)\n+#pragma omp declare reduction (foo:struct S:omp_out.s += omp_in.s)\n+#pragma omp declare reduction (foo:int:omp_out += omp_in)\n+\n+__attribute__((noinline, noclone)) int\n+foo (void)\n+{\n+  int i, u = 0;\n+  struct S s, t;\n+  s.s = 0; t.s = 0;\n+  #pragma omp simd aligned(a : 32) reduction(+:s) reduction(foo:t, u)\n+  for (i = 0; i < 1024; i++)\n+    {\n+      int x = a[i];\n+      s.s += x;\n+      t.s += x;\n+      u += x;\n+    }\n+  if (t.s != s.s || u != s.s)\n+    abort ();\n+  return s.s;\n+}\n+\n+\n+void bar(int n, float *a, float *b)\n+{\n+  int i; \n+#pragma omp parallel for simd num_threads(4) safelen(64)\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Function void omp declare reduction operator\\\\+\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"Function void omp declare reduction foo\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd reduction\\\\(u\\\\) reduction\\\\(t\\\\) reduction\\\\(\\\\+:s\\\\) aligned\\\\(a:32\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd safelen\\\\(64\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp parallel\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp for\" \"original\" } } */"}, {"sha": "fedb186fedf8e04eb66b1ca9784144d04c26e516", "filename": "gcc/testsuite/gcc.dg/gomp/openmp-simd-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-1.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -fdump-tree-original\" } */\n+\n+#pragma omp declare simd\n+float bar(float b) {\n+  return b*b;\n+}\n+\n+void foo(int n, float *a, float *b)\n+{\n+  int i; \n+#pragma omp simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp teams distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp target teams distribute simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp teams distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+#pragma omp target teams distribute parallel for simd\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd\" 9 \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp for\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp distribute\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp teams\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp target\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp parallel\" \"original\" } } */"}, {"sha": "e66806845b7d245e4fdb995cba355aa5725575fc", "filename": "gcc/testsuite/gcc.dg/gomp/openmp-simd-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgomp%2Fopenmp-simd-2.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp-simd -fdump-tree-original\" } */\n+\n+extern void abort ();\n+int a[1024] __attribute__((aligned (32))) = { 1 };\n+struct S { int s; };\n+#pragma omp declare reduction (+:struct S:omp_out.s += omp_in.s)\n+#pragma omp declare reduction (foo:struct S:omp_out.s += omp_in.s)\n+#pragma omp declare reduction (foo:int:omp_out += omp_in)\n+\n+__attribute__((noinline, noclone)) int\n+foo (void)\n+{\n+  int i, u = 0;\n+  struct S s, t;\n+  s.s = 0; t.s = 0;\n+  #pragma omp simd aligned(a : 32) reduction(+:s) reduction(foo:t, u)\n+  for (i = 0; i < 1024; i++)\n+    {\n+      int x = a[i];\n+      s.s += x;\n+      t.s += x;\n+      u += x;\n+    }\n+  if (t.s != s.s || u != s.s)\n+    abort ();\n+  return s.s;\n+}\n+\n+\n+void bar(int n, float *a, float *b)\n+{\n+  int i; \n+#pragma omp parallel for simd num_threads(4) safelen(64)\n+  for (i = 0; i < n ; i++)\n+    a[i] = b[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd reduction\\\\(u\\\\) reduction\\\\(t\\\\) reduction\\\\(\\\\+:s\\\\) aligned\\\\(a:32\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"pragma omp simd safelen\\\\(64\\\\)\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp parallel\" \"original\" } } */\n+/* { dg-final { scan-tree-dump-not \"omp for\" \"original\" } } */"}, {"sha": "e0e9d8d4f36cdd15071acef074b84272c9b273cc", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d7f7e0a635298c307d51d3eb166905b5bcaf07a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=6d7f7e0a635298c307d51d3eb166905b5bcaf07a", "patch": "@@ -4814,7 +4814,7 @@ attribute_value_equal (const_tree attr1, const_tree attr2)\n     return (simple_cst_list_equal (TREE_VALUE (attr1),\n \t\t\t\t   TREE_VALUE (attr2)) == 1);\n \n-  if (flag_openmp\n+  if ((flag_openmp || flag_openmp_simd)\n       && TREE_VALUE (attr1) && TREE_VALUE (attr2)\n       && TREE_CODE (TREE_VALUE (attr1)) == OMP_CLAUSE\n       && TREE_CODE (TREE_VALUE (attr2)) == OMP_CLAUSE)"}]}