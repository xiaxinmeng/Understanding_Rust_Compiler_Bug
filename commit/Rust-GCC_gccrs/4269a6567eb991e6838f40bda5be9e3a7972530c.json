{"sha": "4269a6567eb991e6838f40bda5be9e3a7972530c", "node_id": "C_kwDOANBUbNoAKDQyNjlhNjU2N2ViOTkxZTY4MzhmNDBiZGE1YmU5ZTNhNzk3MjUzMGM", "commit": {"author": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2022-12-30T11:25:22Z"}, "committer": {"name": "Stam Markianos-Wright", "email": "stam.markianos-wright@arm.com", "date": "2022-12-30T11:25:22Z"}, "message": "Fix memory constraint on MVE v[ld/st][2/4] instructions [PR107714]\n\nIn the M-Class Arm-ARM:\n\nhttps://developer.arm.com/documentation/ddi0553/bu/?lang=en\n\nthese MVE instructions only have '!' writeback variant and at:\n\nhttps://gcc.gnu.org/bugzilla/show_bug.cgi?id=107714\n\nwe found that the Um constraint would also allow through a\nregister offset writeback, resulting in an assembler error.\n\nHere I have added a new constraint and predicate for these\ninstructions, which (uniquely, AFAICT), only support a `!` writeback\nincrement by the data size (inside the compiler this is a POST_INC).\n\nNo regressions in arm-none-eabi with MVE and MVE.FP.\n\ngcc/ChangeLog:\n\tPR target/107714\n\t* config/arm/arm-protos.h (mve_struct_mem_operand): New protoype.\n\t* config/arm/arm.cc (mve_struct_mem_operand): New function.\n\t* config/arm/constraints.md (Ug): New constraint.\n\t* config/arm/mve.md (mve_vst4q<mode>): Change constraint.\n\t(mve_vst2q<mode>): Likewise.\n\t(mve_vld4q<mode>): Likewise.\n\t(mve_vld2q<mode>): Likewise.\n\t* config/arm/predicates.md (mve_struct_operand): New predicate.\n\ngcc/testsuite/ChangeLog:\n\tPR target/107714\n\t* gcc.target/arm/mve/intrinsics/vldst24q_reg_offset.c: New test.", "tree": {"sha": "e589a6ae298d1f29b704bef1055a405eae8d3c86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e589a6ae298d1f29b704bef1055a405eae8d3c86"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4269a6567eb991e6838f40bda5be9e3a7972530c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4269a6567eb991e6838f40bda5be9e3a7972530c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4269a6567eb991e6838f40bda5be9e3a7972530c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4269a6567eb991e6838f40bda5be9e3a7972530c/comments", "author": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stammark", "id": 30555766, "node_id": "MDQ6VXNlcjMwNTU1NzY2", "avatar_url": "https://avatars.githubusercontent.com/u/30555766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stammark", "html_url": "https://github.com/Stammark", "followers_url": "https://api.github.com/users/Stammark/followers", "following_url": "https://api.github.com/users/Stammark/following{/other_user}", "gists_url": "https://api.github.com/users/Stammark/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stammark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stammark/subscriptions", "organizations_url": "https://api.github.com/users/Stammark/orgs", "repos_url": "https://api.github.com/users/Stammark/repos", "events_url": "https://api.github.com/users/Stammark/events{/privacy}", "received_events_url": "https://api.github.com/users/Stammark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc6bf44eec295805ae29a8aaddafd111de01c8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc6bf44eec295805ae29a8aaddafd111de01c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc6bf44eec295805ae29a8aaddafd111de01c8e"}], "stats": {"total": 336, "additions": 332, "deletions": 4}, "files": [{"sha": "8ea38118b05769bd6fcb1d22d902a50979cfd953", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -122,6 +122,7 @@ extern int arm_coproc_mem_operand_wb (rtx, int);\n extern int neon_vector_mem_operand (rtx, int, bool);\n extern int mve_vector_mem_operand (machine_mode, rtx, bool);\n extern int neon_struct_mem_operand (rtx);\n+extern int mve_struct_mem_operand (rtx);\n \n extern rtx *neon_vcmla_lane_prepare_operands (rtx *);\n "}, {"sha": "31f2a7b9d4688dde69d1435e24cf885e8544be71", "filename": "gcc/config/arm/arm.cc", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Farm.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Farm.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.cc?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -13737,6 +13737,24 @@ neon_vector_mem_operand (rtx op, int type, bool strict)\n   return FALSE;\n }\n \n+/* Return TRUE if OP is a mem suitable for loading/storing an MVE struct\n+   type.  */\n+int\n+mve_struct_mem_operand (rtx op)\n+{\n+  rtx ind = XEXP (op, 0);\n+\n+  /* Match: (mem (reg)).  */\n+  if (REG_P (ind))\n+    return arm_address_register_rtx_p (ind, 0);\n+\n+  /* Allow only post-increment by the mode size.  */\n+  if (GET_CODE (ind) == POST_INC)\n+    return arm_address_register_rtx_p (XEXP (ind, 0), 0);\n+\n+  return FALSE;\n+}\n+\n /* Return TRUE if OP is a mem suitable for loading/storing a Neon struct\n    type.  */\n int"}, {"sha": "121ec05ba11939a10d28dfaa9a9612f4e6ccc115", "filename": "gcc/config/arm/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconstraints.md?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -474,6 +474,11 @@\n  (and (match_code \"mem\")\n       (match_test \"TARGET_32BIT && arm_coproc_mem_operand (op, FALSE)\")))\n \n+(define_memory_constraint \"Ug\"\n+ \"@internal\n+  In Thumb-2 state a valid MVE struct load/store address.\"\n+ (match_operand 0 \"mve_struct_operand\"))\n+\n (define_memory_constraint \"Uj\"\n  \"@internal\n   In ARM/Thumb-2 state a VFP load/store address that supports writeback"}, {"sha": "0c21db100266129ebbfa861e09e32113d102bf02", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -99,7 +99,7 @@\n ;; [vst4q])\n ;;\n (define_insn \"mve_vst4q<mode>\"\n-  [(set (match_operand:XI 0 \"neon_struct_operand\" \"=Um\")\n+  [(set (match_operand:XI 0 \"mve_struct_operand\" \"=Ug\")\n \t(unspec:XI [(match_operand:XI 1 \"s_register_operand\" \"w\")\n \t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t VST4Q))\n@@ -9961,7 +9961,7 @@\n ;; [vst2q])\n ;;\n (define_insn \"mve_vst2q<mode>\"\n-  [(set (match_operand:OI 0 \"neon_struct_operand\" \"=Um\")\n+  [(set (match_operand:OI 0 \"mve_struct_operand\" \"=Ug\")\n \t(unspec:OI [(match_operand:OI 1 \"s_register_operand\" \"w\")\n \t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t VST2Q))\n@@ -9990,7 +9990,7 @@\n ;;\n (define_insn \"mve_vld2q<mode>\"\n   [(set (match_operand:OI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:OI [(match_operand:OI 1 \"neon_struct_operand\" \"Um\")\n+\t(unspec:OI [(match_operand:OI 1 \"mve_struct_operand\" \"Ug\")\n \t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t VLD2Q))\n   ]\n@@ -10018,7 +10018,7 @@\n ;;\n (define_insn \"mve_vld4q<mode>\"\n   [(set (match_operand:XI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:XI [(match_operand:XI 1 \"neon_struct_operand\" \"Um\")\n+\t(unspec:XI [(match_operand:XI 1 \"mve_struct_operand\" \"Ug\")\n \t\t    (unspec:MVE_VLD_ST [(const_int 0)] UNSPEC_VSTRUCTDUMMY)]\n \t VLD4Q))\n   ]"}, {"sha": "67f2fdb4f8f607ceb50871e1bc17dbdb9b987c2c", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -876,6 +876,10 @@\n   (and (match_code \"mem\")\n        (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 2, true)\")))\n \n+(define_predicate \"mve_struct_operand\"\n+  (and (match_code \"mem\")\n+       (match_test \"TARGET_HAVE_MVE && mve_struct_mem_operand (op)\")))\n+\n (define_predicate \"neon_permissive_struct_operand\"\n   (and (match_code \"mem\")\n        (match_test \"TARGET_32BIT && neon_vector_mem_operand (op, 2, false)\")))"}, {"sha": "d028b91e81aed97e4b30978b6d130a6f97f1cbc3", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vldst24q_reg_offset.c", "status": "added", "additions": 300, "deletions": 0, "changes": 300, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldst24q_reg_offset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4269a6567eb991e6838f40bda5be9e3a7972530c/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldst24q_reg_offset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvldst24q_reg_offset.c?ref=4269a6567eb991e6838f40bda5be9e3a7972530c", "patch": "@@ -0,0 +1,300 @@\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O1\" } */\n+/* { dg-final { check-function-bodies \"**\" \"\" } } */\n+\n+#include \"arm_mve.h\"\n+\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+\n+/*\n+**test:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test(const uint8_t * in, uint8_t * out, int width)\n+{\n+  uint8x16x2_t rg = vld2q(in);\n+  uint8x16x2_t gb = vld2q(in + width);\n+  vst2q (out, rg);\n+  vst2q (out + width, gb);\n+}\n+\n+/*\n+**test2:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]!\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]!\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test2(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x2_t rg = vld2q(in);\n+  uint8x16x2_t gb = vld2q(in + 32);\n+  vst2q (out, rg);\n+  vst2q (out + 32, gb);\n+}\n+\n+/*\n+**test3:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test3(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x2_t rg = vld2q(in);\n+  uint8x16x2_t gb = vld2q(in - 32);\n+  vst2q (out, rg);\n+  vst2q (out - 32, gb);\n+}\n+\n+/*\n+**test4:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test4(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x2_t rg = vld2q(in);\n+  uint8x16x2_t gb = vld2q(in + 64);\n+  vst2q (out, rg);\n+  vst2q (out + 64, gb);\n+}\n+\n+/*\n+**test5:\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst20.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst21.8\t{q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test5(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x2_t rg = vld2q(in);\n+  uint8x16x2_t gb = vld2q(in + 42);\n+  vst2q (out, rg);\n+  vst2q (out + 42, gb);\n+}\n+\n+/*\n+**test6:\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test6(const uint8_t * in, uint8_t * out, int width)\n+{\n+  uint8x16x4_t rg = vld4q(in);\n+  uint8x16x4_t gb = vld4q(in + width);\n+  vst4q (out, rg);\n+  vst4q (out + width, gb);\n+}\n+\n+/*\n+**test7:\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test7(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x4_t rg = vld4q(in);\n+  uint8x16x4_t gb = vld4q(in + 32);\n+  vst4q (out, rg);\n+  vst4q (out + 32, gb);\n+}\n+\n+/*\n+**test8:\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]!\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]!\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test8(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x4_t rg = vld4q(in);\n+  uint8x16x4_t gb = vld4q(in + 64);\n+  vst4q (out, rg);\n+  vst4q (out + 64, gb);\n+}\n+\n+/*\n+**test9:\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test9(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x4_t rg = vld4q(in);\n+  uint8x16x4_t gb = vld4q(in - 64);\n+  vst4q (out, rg);\n+  vst4q (out - 64, gb);\n+}\n+\n+/*\n+**test10:\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvld40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvld43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+**\tvst40.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst41.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst42.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\tvst43.8\t{q[0-9]+, q[0-9]+, q[0-9]+, q[0-9]+}, \\[(?:ip|fp|r[0-9]+)\\]\n+**\t...\n+*/\n+void\n+test10(const uint8_t * in, uint8_t * out)\n+{\n+  uint8x16x4_t rg = vld4q(in);\n+  uint8x16x4_t gb = vld4q(in + 42);\n+  vst4q (out, rg);\n+  vst4q (out + 42, gb);\n+}\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+/* { dg-final { scan-assembler-not \"__ARM_undef\" } } */\n\\ No newline at end of file"}]}