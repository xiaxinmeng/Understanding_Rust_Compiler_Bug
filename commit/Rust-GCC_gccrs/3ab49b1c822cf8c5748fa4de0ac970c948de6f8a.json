{"sha": "3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "node_id": "C_kwDOANBUbNoAKDNhYjQ5YjFjODIyY2Y4YzU3NDhmYTRkZTBhYzk3MGM5NDhkZTZmOGE", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-05T03:59:59Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2022-02-09T04:08:09Z"}, "message": "compiler, internal/abi: implement FuncPCABI0, FuncPCABIInternal\n\nThe Go 1.18 standard library uses an internal/abi package with two\nfunctions that are implemented in the compiler. This patch implements\nthem in the gofrontend, to support the upcoming update to 1.18.\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/383514", "tree": {"sha": "0696141de5cddb0755c91ff21befd313bf0b9e29", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0696141de5cddb0755c91ff21befd313bf0b9e29"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e52a683170877d140eebc9782731eaf11897db71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52a683170877d140eebc9782731eaf11897db71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52a683170877d140eebc9782731eaf11897db71"}], "stats": {"total": 93, "additions": 87, "deletions": 6}, "files": [{"sha": "5f4adf9d0e77c2b164ffcf8797a0cb46ad82ea2c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "patch": "@@ -1,4 +1,4 @@\n-61f7cf4b9db0587ff099aa36832a355b90ee1bf9\n+262cb89fd5ed82ab135a3933b2ddf4eb67683149\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "1e6890a3cc5f349033c1e70c7dd0a113a5d0d610", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "patch": "@@ -12177,6 +12177,50 @@ Call_expression::intrinsify(Gogo* gogo,\n           return Runtime::make_call(code, loc, 3, a1, a2, a3);\n         }\n     }\n+  else if (package == \"internal/abi\")\n+    {\n+      if ((name == \"FuncPCABI0\" || name == \"FuncPCABIInternal\")\n+\t  && this->args_ != NULL\n+\t  && this->args_->size() == 1)\n+\t{\n+\t  // We expect to see a conversion from the expression to \"any\".\n+\t  Expression* expr = this->args_->front();\n+\t  Type_conversion_expression* tce = expr->conversion_expression();\n+\t  if (tce != NULL)\n+\t    expr = tce->expr();\n+\t  Func_expression* fe = expr->func_expression();\n+\t  Interface_field_reference_expression* interface_method =\n+\t    expr->interface_field_reference_expression();\n+\t  if (fe != NULL)\n+\t    {\n+\t      Named_object* no = fe->named_object();\n+\t      Expression* ref = Expression::make_func_code_reference(no, loc);\n+\t      Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+\t      return Expression::make_cast(uintptr_type, ref, loc);\n+\t    }\n+\t  else if (interface_method != NULL)\n+\t    return interface_method->get_function();\n+\t  else\n+\t    {\n+\t      expr = this->args_->front();\n+\t      go_assert(expr->type()->interface_type() != NULL\n+\t\t\t&& expr->type()->interface_type()->is_empty());\n+\t      expr = Expression::make_interface_info(expr,\n+\t\t\t\t\t\t     INTERFACE_INFO_OBJECT,\n+\t\t\t\t\t\t     loc);\n+\t      // Trust that this is a function type, which means that\n+\t      // it is a direct iface type and we can use EXPR\n+\t      // directly.  The backend representation of this\n+\t      // function is a pointer to a struct whose first field\n+\t      // is the actual function to call.\n+\t      Type* pvoid = Type::make_pointer_type(Type::make_void_type());\n+\t      Type* pfntype = Type::make_pointer_type(pvoid);\n+\t      Expression* ref = make_unsafe_cast(pfntype, expr, loc);\n+\t      return Expression::make_dereference(ref, NIL_CHECK_NOT_NEEDED,\n+\t\t\t\t\t\t  loc);\n+\t    }\n+\t}\n+    }\n \n   return NULL;\n }"}, {"sha": "c4a108847cab87338e1228f9f21de1334401afea", "filename": "libgo/go/internal/abi/abi.go", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Fgo%2Finternal%2Fabi%2Fabi.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Fgo%2Finternal%2Fabi%2Fabi.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Finternal%2Fabi%2Fabi.go?ref=3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package abi\n+\n+// FuncPC* intrinsics.\n+//\n+// CAREFUL: In programs with plugins, FuncPC* can return different values\n+// for the same function (because there are actually multiple copies of\n+// the same function in the address space). To be safe, don't use the\n+// results of this function in any == expression. It is only safe to\n+// use the result as an address at which to start executing code.\n+\n+// FuncPCABI0 returns the entry PC of the function f, which must be a\n+// direct reference of a function defined as ABI0. Otherwise it is a\n+// compile-time error.\n+//\n+// Implemented as a compile intrinsic.\n+func FuncPCABI0(f any) uintptr {\n+\t// The compiler should remove all calls.\n+\tpanic(\"FuncPCABI0\")\n+}\n+\n+// FuncPCABIInternal returns the entry PC of the function f. If f is a\n+// direct reference of a function, it must be defined as ABIInternal.\n+// Otherwise it is a compile-time error. If f is not a direct reference\n+// of a defined function, it assumes that f is a func value. Otherwise\n+// the behavior is undefined.\n+//\n+// Implemented as a compile intrinsic.\n+func FuncPCABIInternal(f any) uintptr {\n+\t// The compiler should remove all calls.\n+\tpanic(\"FuncPCABIInternal\")\n+}"}, {"sha": "343f13b40f0fe92b74c2cbf3b34541056b63d148", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "patch": "@@ -5,6 +5,7 @@\n package runtime\n \n import (\n+\t\"internal/abi\"\n \t\"internal/cpu\"\n \t\"runtime/internal/atomic\"\n \t\"runtime/internal/sys\"\n@@ -4243,11 +4244,11 @@ func _GC()                        { _GC() }\n func _LostSIGPROFDuringAtomic64() { _LostSIGPROFDuringAtomic64() }\n func _VDSO()                      { _VDSO() }\n \n-var _SystemPC = funcPC(_System)\n-var _ExternalCodePC = funcPC(_ExternalCode)\n-var _LostExternalCodePC = funcPC(_LostExternalCode)\n-var _GCPC = funcPC(_GC)\n-var _LostSIGPROFDuringAtomic64PC = funcPC(_LostSIGPROFDuringAtomic64)\n+var _SystemPC = abi.FuncPCABIInternal(_System)\n+var _ExternalCodePC = abi.FuncPCABIInternal(_ExternalCode)\n+var _LostExternalCodePC = abi.FuncPCABIInternal(_LostExternalCode)\n+var _GCPC = abi.FuncPCABIInternal(_GC)\n+var _LostSIGPROFDuringAtomic64PC = abi.FuncPCABIInternal(_LostSIGPROFDuringAtomic64)\n \n // Called if we receive a SIGPROF signal.\n // Called by the signal handler, may run during STW."}, {"sha": "f3097dc0a6a1a35e1678f9b9df2b2503083b6130", "filename": "libgo/libgo-packages.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Flibgo-packages.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3ab49b1c822cf8c5748fa4de0ac970c948de6f8a/libgo%2Flibgo-packages.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Flibgo-packages.txt?ref=3ab49b1c822cf8c5748fa4de0ac970c948de6f8a", "patch": "@@ -113,6 +113,7 @@ image/internal/imageutil\n image/jpeg\n image/png\n index/suffixarray\n+internal/abi\n internal/buildcfg\n internal/bytealg\n internal/cfg"}]}