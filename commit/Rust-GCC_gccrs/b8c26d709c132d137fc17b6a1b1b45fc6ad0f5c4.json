{"sha": "b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjhjMjZkNzA5YzEzMmQxMzdmYzE3YjZhMWIxYjQ1ZmM2YWQwZjVjNA==", "commit": {"author": {"name": "Nathanael Nerode", "email": "neroden@gcc.gnu.org", "date": "2004-12-12T21:01:17Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2004-12-12T21:01:17Z"}, "message": "re PR middle-end/17564 (New treatment of function pointers when used with equality operators, when casts are involved)\n\n\tPR middle-end/17564\n\t* dojump.c (do_compare_and_jump): Only canonicalize function pointers\n\tin a comparison if both sides are function pointers.\n\nCo-Authored-By: John David Anglin <dave.anglin@nrc-cnrc.gc.ca>\n\nFrom-SVN: r92061", "tree": {"sha": "222d8cc2a15f29ae26355787d23a5ff64786ba2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/222d8cc2a15f29ae26355787d23a5ff64786ba2b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4/comments", "author": null, "committer": null, "parents": [{"sha": "25da5dc7c6535e061ddfd5ee06b73d228e181c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25da5dc7c6535e061ddfd5ee06b73d228e181c43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25da5dc7c6535e061ddfd5ee06b73d228e181c43"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "5c7416f0a1414d75aba6757dc76b3a9bd54d76e7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "patch": "@@ -1,3 +1,10 @@\n+2004-12-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n+\t    John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR middle-end/17564\n+\t* dojump.c (do_compare_and_jump): Only canonicalize function pointers\n+\tin a comparison if both sides are function pointers.\n+\n 2004-12-12  Richard Henderson  <rth@redhat.com>\n \n \tPR target/18932"}, {"sha": "b1e17ec88033f1b2bcc07ab5abfce02b4715987b", "filename": "gcc/dojump.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=b8c26d709c132d137fc17b6a1b1b45fc6ad0f5c4", "patch": "@@ -904,24 +904,23 @@ do_compare_and_jump (tree exp, enum rtx_code signed_code,\n \n #ifdef HAVE_canonicalize_funcptr_for_compare\n   /* If function pointers need to be \"canonicalized\" before they can\n-     be reliably compared, then canonicalize them.  */\n+     be reliably compared, then canonicalize them.\n+     Only do this if *both* sides of the comparison are function pointers.\n+     If one side isn't, we want a noncanonicalized comparison.  See PR\n+     middle-end/17564. */\n   if (HAVE_canonicalize_funcptr_for_compare\n       && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 0))) == POINTER_TYPE\n-      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n-          == FUNCTION_TYPE))\n+      && TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 0))))\n+          == FUNCTION_TYPE\n+      && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 1))) == POINTER_TYPE\n+      && TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 1))))\n+          == FUNCTION_TYPE)\n     {\n       rtx new_op0 = gen_reg_rtx (mode);\n+      rtx new_op1 = gen_reg_rtx (mode);\n \n       emit_insn (gen_canonicalize_funcptr_for_compare (new_op0, op0));\n       op0 = new_op0;\n-    }\n-\n-  if (HAVE_canonicalize_funcptr_for_compare\n-      && TREE_CODE (TREE_TYPE (TREE_OPERAND (exp, 1))) == POINTER_TYPE\n-      && (TREE_CODE (TREE_TYPE (TREE_TYPE (TREE_OPERAND (exp, 1))))\n-          == FUNCTION_TYPE))\n-    {\n-      rtx new_op1 = gen_reg_rtx (mode);\n \n       emit_insn (gen_canonicalize_funcptr_for_compare (new_op1, op1));\n       op1 = new_op1;"}]}