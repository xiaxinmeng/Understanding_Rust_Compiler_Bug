{"sha": "e4b0215585f77f78fa3aa9b1621749ce23c1d393", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRiMDIxNTU4NWY3N2Y3OGZhM2FhOWIxNjIxNzQ5Y2UyM2MxZDM5Mw==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2018-11-22T21:25:37Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2018-11-22T21:25:37Z"}, "message": "i386.c (ix86_check_avx_upper_register): Return true for all SSE registers with mode bitsize > 128.\n\n\t* config/i386/i386.c (ix86_check_avx_upper_register):\n\tReturn true for all SSE registers with mode bitsize > 128.\n\nFrom-SVN: r266389", "tree": {"sha": "a93bfc04055799f090f9c62697ea2ac0a792ee69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a93bfc04055799f090f9c62697ea2ac0a792ee69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4b0215585f77f78fa3aa9b1621749ce23c1d393", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b0215585f77f78fa3aa9b1621749ce23c1d393", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4b0215585f77f78fa3aa9b1621749ce23c1d393", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4b0215585f77f78fa3aa9b1621749ce23c1d393/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69a69df1e55a98e63c608ff5779189a00a5a1deb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69a69df1e55a98e63c608ff5779189a00a5a1deb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69a69df1e55a98e63c608ff5779189a00a5a1deb"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "dd12d3284efdb70b81ca6d27d77b4a9310bfd9f0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b0215585f77f78fa3aa9b1621749ce23c1d393/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b0215585f77f78fa3aa9b1621749ce23c1d393/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4b0215585f77f78fa3aa9b1621749ce23c1d393", "patch": "@@ -1,3 +1,8 @@\n+2018-11-22  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_check_avx_upper_register):\n+\tReturn true for all SSE registers with mode bitsize > 128.\n+\n 2018-11-22  Vladimir Makarov  <vmakarov@redhat.com>\n \n \tPR rtl-optimization/87718"}, {"sha": "f8852327d4ad5763f77a6c12bfce1ba57551fe1c", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4b0215585f77f78fa3aa9b1621749ce23c1d393/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4b0215585f77f78fa3aa9b1621749ce23c1d393/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e4b0215585f77f78fa3aa9b1621749ce23c1d393", "patch": "@@ -18856,12 +18856,7 @@ ix86_dirflag_mode_needed (rtx_insn *insn)\n static bool\n ix86_check_avx_upper_register (const_rtx exp)\n {\n-  if (SUBREG_P (exp))\n-    exp = SUBREG_REG (exp);\n-\n-  return (REG_P (exp)\n-\t&& (VALID_AVX256_REG_OR_OI_MODE (GET_MODE (exp))\n-\t|| VALID_AVX512F_REG_OR_XI_MODE (GET_MODE (exp))));\n+  return SSE_REG_P (exp) && GET_MODE_BITSIZE (GET_MODE (exp)) > 128;\n }\n \n /* Return needed mode for entity in optimize_mode_switching pass.  */"}]}