{"sha": "d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDZlZjUzZjI0MTNiNWZkZTMwYTZkOTUxNmM0ZWJmMDg3ZTZhNDM2Mw==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-06-26T16:38:40Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-06-26T16:38:40Z"}, "message": "cp-tree.h (lang_decl_fn): Remove assignment_operator_p field.\n\n\tgcc/cp/\n\t* cp-tree.h (lang_decl_fn): Remove assignment_operator_p field.\n\t(DECL_COMPLETE_CONSTRUCTOR_P): Directly compare\n\tidentifier.\n\t(DECL_BASE_CONSTRUCTOR_P, DECL_COMPLETE_DESTRUCTOR_P)\n\tDECL_BASE_DESTRUCTOR_P, DECL_DELETING_DESTRUCTOR_P): Likewise.\n\t(DECL_ASSIGNMENT_OPERATOR_P): Use IDENTIFIER_ASSIGN_OP_P.\n\t* decl.c (grok_op_properties): Adjust identifier checking.\n\t* init.c (expand_default_init): Adjust identifier descision.\n\t* method.c (implicitly_declare_fn): Don't use\n\tDECL_ASSIGNMENT_OPERATOR_P.\n\t* search.c (lookup_fnfields_1): Use IDENTIFIER_CTOR_P,\n\tIDENTIFIER_DTOR_P.\n\t* call.c (in_charge_arg_for_name): Reimplement.\n\t(build_special_member_call): Use IDENTIFIER_CDTOR_P,\n\tIDENTIFIER_DTOR_P.\n\n\tlibcc1/\n\t* libcp1plugin.cc (plugin_build_decl): Don't set\n\tDECL_ASSIGNMENT_OPERATOR_P.\n(--This line, and those below, will be ignored--\n\nM    gcc/cp/init.c\nM    gcc/cp/decl.c\nM    gcc/cp/method.c\nM    gcc/cp/cp-tree.h\nM    gcc/cp/call.c\nM    gcc/cp/search.c\nM    gcc/cp/ChangeLog\nM    libcc1/ChangeLog\nM    libcc1/libcp1plugin.cc\n\nFrom-SVN: r249657", "tree": {"sha": "f5118cecea9bdf4e8f1e7e2cf9925022e8215fa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5118cecea9bdf4e8f1e7e2cf9925022e8215fa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0ffdc300784ca80b28639f6d276b48a3dc6138b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ffdc300784ca80b28639f6d276b48a3dc6138b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ffdc300784ca80b28639f6d276b48a3dc6138b1"}], "stats": {"total": 134, "additions": 70, "deletions": 64}, "files": [{"sha": "040f7b79cc4af3a43f1a0d987c180e4fe6987677", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1,3 +1,21 @@\n+2017-06-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-tree.h (lang_decl_fn): Remove assignment_operator_p field.\n+\t(DECL_COMPLETE_CONSTRUCTOR_P): Directly compare\n+\tidentifier.\n+\t(DECL_BASE_CONSTRUCTOR_P, DECL_COMPLETE_DESTRUCTOR_P,\n+\tDECL_BASE_DESTRUCTOR_P, DECL_DELETING_DESTRUCTOR_P): Likewise.\n+\t(DECL_ASSIGNMENT_OPERATOR_P): Use IDENTIFIER_ASSIGN_OP_P.\n+\t* decl.c (grok_op_properties): Adjust identifier checking.\n+\t* init.c (expand_default_init): Adjust identifier descision.\n+\t* method.c (implicitly_declare_fn): Don't use\n+\tDECL_ASSIGNMENT_OPERATOR_P.\n+\t* search.c (lookup_fnfields_1): Use IDENTIFIER_CTOR_P,\n+\tIDENTIFIER_DTOR_P.\n+\t* call.c (in_charge_arg_for_name): Reimplement.\n+\t(build_special_member_call): Use IDENTIFIER_CDTOR_P,\n+\tIDENTIFIER_DTOR_P.\n+\n 2017-06-26  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/80116"}, {"sha": "f480611a990b00684bd68371972bfb293086cd71", "filename": "gcc/cp/call.c", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -8677,20 +8677,22 @@ build_cxx_call (tree fn, int nargs, tree *argarray,\n tree\n in_charge_arg_for_name (tree name)\n {\n- if (name == base_ctor_identifier\n-      || name == base_dtor_identifier)\n-    return integer_zero_node;\n-  else if (name == complete_ctor_identifier)\n-    return integer_one_node;\n-  else if (name == complete_dtor_identifier)\n-    return integer_two_node;\n-  else if (name == deleting_dtor_identifier)\n-    return integer_three_node;\n-\n-  /* This function should only be called with one of the names listed\n-     above.  */\n-  gcc_unreachable ();\n-  return NULL_TREE;\n+  if (IDENTIFIER_CTOR_P (name))\n+    {\n+      if (name == complete_ctor_identifier)\n+\treturn integer_one_node;\n+      gcc_checking_assert (name == base_ctor_identifier);\n+    }\n+  else\n+    {\n+      if (name == complete_dtor_identifier)\n+\treturn integer_two_node;\n+      else if (name == deleting_dtor_identifier)\n+\treturn integer_three_node;\n+      gcc_checking_assert (name == base_dtor_identifier);\n+    }\n+\n+  return integer_zero_node;\n }\n \n /* We've built up a constructor call RET.  Complain if it delegates to the\n@@ -8729,11 +8731,7 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n   vec<tree, va_gc> *allocated = NULL;\n   tree ret;\n \n-  gcc_assert (name == complete_ctor_identifier\n-\t      || name == base_ctor_identifier\n-\t      || name == complete_dtor_identifier\n-\t      || name == base_dtor_identifier\n-\t      || name == deleting_dtor_identifier\n+  gcc_assert (IDENTIFIER_CDTOR_P (name)\n \t      || name == cp_assignment_operator_id (NOP_EXPR));\n   if (TYPE_P (binfo))\n     {\n@@ -8753,9 +8751,7 @@ build_special_member_call (tree instance, tree name, vec<tree, va_gc> **args,\n     instance = build_dummy_object (class_type);\n   else\n     {\n-      if (name == complete_dtor_identifier\n-\t  || name == base_dtor_identifier\n-\t  || name == deleting_dtor_identifier)\n+      if (IDENTIFIER_DTOR_P (name))\n \tgcc_assert (args == NULL || vec_safe_is_empty (*args));\n \n       /* Convert to the base class, if necessary.  */"}, {"sha": "48e073256bf29ea4694933f00e254f0ed026ac37", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1776,6 +1776,7 @@ struct GTY(()) language_function {\n   (operator_name_info[(int) (CODE)].identifier)\n #define cp_assignment_operator_id(CODE) \\\n   (assignment_operator_name_info[(int) (CODE)].identifier)\n+\n /* In parser.c.  */\n extern tree cp_literal_operator_id (const char *);\n \n@@ -2495,25 +2496,27 @@ struct GTY(()) lang_decl_fn {\n   struct lang_decl_min min;\n \n   /* In an overloaded operator, this is the value of\n-     DECL_OVERLOADED_OPERATOR_P.  */\n+     DECL_OVERLOADED_OPERATOR_P.\n+     FIXME: We should really do better in compressing this.  */\n   ENUM_BITFIELD (tree_code) operator_code : 16;\n \n   unsigned global_ctor_p : 1;\n   unsigned global_dtor_p : 1;\n-  unsigned assignment_operator_p : 1;\n   unsigned static_function : 1;\n   unsigned pure_virtual : 1;\n   unsigned defaulted_p : 1;\n   unsigned has_in_charge_parm_p : 1;\n   unsigned has_vtt_parm_p : 1;\n-  \n   unsigned pending_inline_p : 1;\n+\n   unsigned nonconverting : 1;\n   unsigned thunk_p : 1;\n   unsigned this_thunk_p : 1;\n   unsigned hidden_friend_p : 1;\n   unsigned omp_declare_reduction_p : 1;\n-  /* 2 spare bits on 32-bit hosts, 34 on 64-bit hosts.  */\n+  /* 3 spare bits.  */\n+\n+  /* 32-bits padding on 64-bit host.  */\n \n   /* For a non-thunk function decl, this is a tree list of\n      friendly classes. For a thunk function decl, it is the\n@@ -2694,14 +2697,12 @@ struct GTY(()) lang_decl {\n /* Nonzero if NODE (a FUNCTION_DECL) is a constructor for a complete\n    object.  */\n #define DECL_COMPLETE_CONSTRUCTOR_P(NODE)\t\t\\\n-  (DECL_CONSTRUCTOR_P (NODE)\t\t\t\t\\\n-   && DECL_NAME (NODE) == complete_ctor_identifier)\n+  (DECL_NAME (NODE) == complete_ctor_identifier)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a constructor for a base\n    object.  */\n #define DECL_BASE_CONSTRUCTOR_P(NODE)\t\t\\\n-  (DECL_CONSTRUCTOR_P (NODE)\t\t\t\\\n-   && DECL_NAME (NODE) == base_ctor_identifier)\n+  (DECL_NAME (NODE) == base_ctor_identifier)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a constructor, but not either the\n    specialized in-charge constructor or the specialized not-in-charge\n@@ -2733,20 +2734,17 @@ struct GTY(()) lang_decl {\n /* Nonzero if NODE (a FUNCTION_DECL) is a destructor for a complete\n    object.  */\n #define DECL_COMPLETE_DESTRUCTOR_P(NODE)\t\t\\\n-  (DECL_DESTRUCTOR_P (NODE)\t\t\t\t\\\n-   && DECL_NAME (NODE) == complete_dtor_identifier)\n+  (DECL_NAME (NODE) == complete_dtor_identifier)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a destructor for a base\n    object.  */\n #define DECL_BASE_DESTRUCTOR_P(NODE)\t\t\\\n-  (DECL_DESTRUCTOR_P (NODE)\t\t\t\\\n-   && DECL_NAME (NODE) == base_dtor_identifier)\n+  (DECL_NAME (NODE) == base_dtor_identifier)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a destructor for a complete\n    object that deletes the object after it has been destroyed.  */\n #define DECL_DELETING_DESTRUCTOR_P(NODE)\t\t\\\n-  (DECL_DESTRUCTOR_P (NODE)\t\t\t\t\\\n-   && DECL_NAME (NODE) == deleting_dtor_identifier)\n+  (DECL_NAME (NODE) == deleting_dtor_identifier)\n \n /* Nonzero if NODE (a FUNCTION_DECL) is a cloned constructor or\n    destructor.  */\n@@ -2836,9 +2834,7 @@ struct GTY(()) lang_decl {\n   (LANG_DECL_FN_CHECK (NODE)->operator_code = (CODE))\n \n /* If NODE is an overloaded operator, then this returns the TREE_CODE\n-   associated with the overloaded operator.\n-   DECL_ASSIGNMENT_OPERATOR_P must also be checked to determine\n-   whether or not NODE is an assignment operator.  If NODE is not an\n+   associated with the overloaded operator.  If NODE is not an\n    overloaded operator, ERROR_MARK is returned.  Since the numerical\n    value of ERROR_MARK is zero, this macro can be used as a predicate\n    to test whether or not NODE is an overloaded operator.  */\n@@ -2848,7 +2844,7 @@ struct GTY(()) lang_decl {\n \n /* Nonzero if NODE is an assignment operator (including += and such).  */\n #define DECL_ASSIGNMENT_OPERATOR_P(NODE) \\\n-  (LANG_DECL_FN_CHECK (NODE)->assignment_operator_p)\n+  IDENTIFIER_ASSIGN_OP_P (DECL_NAME (NODE))\n \n /* For FUNCTION_DECLs: nonzero means that this function is a\n    constructor or a destructor with an extra in-charge parameter to"}, {"sha": "93e24fc8984473b5ff6bd9988d729104658c613f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -12925,14 +12925,15 @@ grok_op_properties (tree decl, bool complain)\n     {\n       /* It'd be nice to hang something else of the identifier to\n \t find CODE more directly.  */\n+      bool assign_op = IDENTIFIER_ASSIGN_OP_P (name);\n       const operator_name_info_t *oni\n-\t= (IDENTIFIER_ASSIGN_OP_P (name)\n-\t   ? assignment_operator_name_info : operator_name_info);\n-      DECL_ASSIGNMENT_OPERATOR_P (decl) = IDENTIFIER_ASSIGN_OP_P (name);\n+\t= (assign_op ? assignment_operator_name_info : operator_name_info);\n+\n       if (false)\n \t;\n #define DEF_OPERATOR(NAME, CODE, MANGLING, ARITY, KIND)\t\t\\\n-      else if (oni[int (CODE)].identifier == name)\t\t\\\n+      else if (assign_op == (KIND == cik_assign_op)\t\t\\\n+\t       && oni[int (CODE)].identifier == name)\t\t\\\n \toperator_code = (CODE);\n #include \"operators.def\"\n #undef DEF_OPERATOR"}, {"sha": "b6f6b4f21a022ec738256ae352a8127f377e726d", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1718,7 +1718,6 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n                      tsubst_flags_t complain)\n {\n   tree type = TREE_TYPE (exp);\n-  tree ctor_name;\n \n   /* It fails because there may not be a constructor which takes\n      its own type as the first (or only parameter), but which does\n@@ -1846,10 +1845,9 @@ expand_default_init (tree binfo, tree true_exp, tree exp, tree init, int flags,\n     }\n    else\n     {\n-      if (true_exp == exp)\n-\tctor_name = complete_ctor_identifier;\n-      else\n-\tctor_name = base_ctor_identifier;\n+      tree ctor_name = (true_exp == exp\n+\t\t\t? complete_ctor_identifier : base_ctor_identifier);\n+\n       rval = build_special_member_call (exp, ctor_name, &parms, binfo, flags,\n \t\t\t\t\tcomplain);\n     }"}, {"sha": "4cb52f23b3322384aae82ebcecc93115a544218d", "filename": "gcc/cp/method.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fmethod.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fmethod.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmethod.c?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -2060,10 +2060,7 @@ implicitly_declare_fn (special_function_kind kind, tree type,\n   else if (kind == sfk_destructor)\n     DECL_DESTRUCTOR_P (fn) = 1;\n   else\n-    {\n-      DECL_ASSIGNMENT_OPERATOR_P (fn) = 1;\n-      SET_OVERLOADED_OPERATOR_CODE (fn, NOP_EXPR);\n-    }\n+    SET_OVERLOADED_OPERATOR_CODE (fn, NOP_EXPR);\n \n   SET_DECL_ALIGN (fn, MINIMUM_METHOD_BOUNDARY);\n "}, {"sha": "2630150bfe60599101b0ad7ddfd70b0c9bf4b711", "filename": "gcc/cp/search.c", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1653,9 +1653,7 @@ lookup_fnfields_1 (tree type, tree name)\n \n   if (COMPLETE_TYPE_P (type))\n     {\n-      if ((name == ctor_identifier\n-\t   || name == base_ctor_identifier\n-\t   || name == complete_ctor_identifier))\n+      if (IDENTIFIER_CTOR_P (name))\n \t{\n \t  if (CLASSTYPE_LAZY_DEFAULT_CTOR (type))\n \t    lazily_declare_fn (sfk_constructor, type);\n@@ -1671,12 +1669,11 @@ lookup_fnfields_1 (tree type, tree name)\n \t  if (CLASSTYPE_LAZY_MOVE_ASSIGN (type))\n \t    lazily_declare_fn (sfk_move_assignment, type);\n \t}\n-      else if ((name == dtor_identifier\n-\t\t|| name == base_dtor_identifier\n-\t\t|| name == complete_dtor_identifier\n-\t\t|| name == deleting_dtor_identifier)\n-\t       && CLASSTYPE_LAZY_DESTRUCTOR (type))\n-\tlazily_declare_fn (sfk_destructor, type);\n+      else if (IDENTIFIER_DTOR_P (name))\n+\t{\n+\t  if (CLASSTYPE_LAZY_DESTRUCTOR (type))\n+\t    lazily_declare_fn (sfk_destructor, type);\n+\t}\n     }\n \n   return lookup_fnfields_idx_nolazy (type, name);"}, {"sha": "6a2d62380048a0ca04a98694e46078eb197e5ef5", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1,3 +1,8 @@\n+2017-06-26  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* libcp1plugin.cc (plugin_build_decl): Don't set\n+\tDECL_ASSIGNMENT_OPERATOR_P.\n+\n 2017-06-16  Nathan Sidwell  <nathan@acm.org>\n \n \t* libcp1plugin.cc (plugin_build_decl): Adjust parm building."}, {"sha": "bbe32e38bdcc985f454b7694b3985d63da8317b8", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d6ef53f2413b5fde30a6d9516c4ebf087e6a4363/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=d6ef53f2413b5fde30a6d9516c4ebf087e6a4363", "patch": "@@ -1428,8 +1428,6 @@ plugin_build_decl (cc1_plugin::connection *self,\n \t  if ((sym_flags & GCC_CP_FLAG_SPECIAL_FUNCTION)\n \t      && opcode != ERROR_MARK)\n \t    SET_OVERLOADED_OPERATOR_CODE (decl, opcode);\n-\t  if (assop)\n-\t    DECL_ASSIGNMENT_OPERATOR_P (decl) = true;\n \t}\n     }\n   else if (RECORD_OR_UNION_CODE_P (code))"}]}