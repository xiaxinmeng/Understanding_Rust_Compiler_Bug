{"sha": "113d06a486475c8c1682771a392fdb056685cf01", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzZDA2YTQ4NjQ3NWM4YzE2ODI3NzFhMzkyZmRiMDU2Njg1Y2YwMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-09-23T12:39:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-09-23T12:39:05Z"}, "message": "tree-ssa-sccvn.c (visit_reference_op_call): Value number virtual definition to virtual use if...\n\n2016-09-23  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-sccvn.c (visit_reference_op_call): Value number\n\tvirtual definition to virtual use if the call devirtualizes\n\tto a const or pure function.\n\t(visit_use): Also visit calls we can devirtualize to a\n\tconst or pure function.\n\n\t* gcc.dg/tree-ssa/ssa-fre-56.c: New testcase.\n\nFrom-SVN: r240431", "tree": {"sha": "8cd4536059b68c50614d19104565da7dd6ac36c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cd4536059b68c50614d19104565da7dd6ac36c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/113d06a486475c8c1682771a392fdb056685cf01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113d06a486475c8c1682771a392fdb056685cf01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/113d06a486475c8c1682771a392fdb056685cf01", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/113d06a486475c8c1682771a392fdb056685cf01/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "26bedff5fdfaf69b1e1d4a597e4a505d0d3dac87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26bedff5fdfaf69b1e1d4a597e4a505d0d3dac87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26bedff5fdfaf69b1e1d4a597e4a505d0d3dac87"}], "stats": {"total": 71, "additions": 68, "deletions": 3}, "files": [{"sha": "914624d3f82d644f078d9aa982a3ec546d804515", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113d06a486475c8c1682771a392fdb056685cf01/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113d06a486475c8c1682771a392fdb056685cf01/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=113d06a486475c8c1682771a392fdb056685cf01", "patch": "@@ -1,3 +1,11 @@\n+2016-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (visit_reference_op_call): Value number\n+\tvirtual definition to virtual use if the call devirtualizes\n+\tto a const or pure function.\n+\t(visit_use): Also visit calls we can devirtualize to a\n+\tconst or pure function.\n+\n 2016-09-23  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/77697"}, {"sha": "7a87fea6a71b8a5e8da19f7d1769c5db5ae81fd6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=113d06a486475c8c1682771a392fdb056685cf01", "patch": "@@ -1,3 +1,7 @@\n+2016-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/ssa-fre-56.c: New testcase.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/advsimd-intrinsics/advsimd-intrinsics.exp: Enable"}, {"sha": "49c6fa1d6b3330c163d58b038da2bbba6aab766e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-56.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-56.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-56.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-56.c?ref=113d06a486475c8c1682771a392fdb056685cf01", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1\" } */\n+\n+int x = 1;\n+int __attribute__((noinline,noclone)) fn ()\n+{\n+  return x;\n+}\n+int (*f)();\n+int main ()\n+{\n+  int res;\n+  f = fn;\n+  x = 0;\n+  res = f ();\n+  res += x;\n+  if (res != 0)\n+    __builtin_abort ();\n+  return 0;\n+}\n+\n+/* We should be able to optimize the load from x in main and thus the\n+   addition.  */\n+\n+/* { dg-final { scan-tree-dump-times \"= x;\" 1 \"fre1\" } } */\n+/* { dg-final { scan-tree-dump-times \" \\\\\\+ \" 0 \"fre1\" } } */"}, {"sha": "7f44ec8a2414bf1f32b9b8347332be0d06c5b7e9", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/113d06a486475c8c1682771a392fdb056685cf01/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=113d06a486475c8c1682771a392fdb056685cf01", "patch": "@@ -3484,8 +3484,24 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n     {\n       vn_reference_t vr2;\n       vn_reference_s **slot;\n+      tree vdef_val = vdef;\n       if (vdef)\n-\tchanged |= set_ssa_val_to (vdef, vdef);\n+\t{\n+\t  /* If we value numbered an indirect functions function to\n+\t     one not clobbering memory value number its VDEF to its\n+\t     VUSE.  */\n+\t  tree fn = gimple_call_fn (stmt);\n+\t  if (fn && TREE_CODE (fn) == SSA_NAME)\n+\t    {\n+\t      fn = SSA_VAL (fn);\n+\t      if (TREE_CODE (fn) == ADDR_EXPR\n+\t\t  && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL\n+\t\t  && (flags_from_decl_or_type (TREE_OPERAND (fn, 0))\n+\t\t      & (ECF_CONST | ECF_PURE)))\n+\t\tvdef_val = vuse_ssa_val (gimple_vuse (stmt));\n+\t    }\n+\t  changed |= set_ssa_val_to (vdef, vdef_val);\n+\t}\n       if (lhs)\n \tchanged |= set_ssa_val_to (lhs, lhs);\n       vr2 = current_info->references_pool->allocate ();\n@@ -3498,7 +3514,7 @@ visit_reference_op_call (tree lhs, gcall *stmt)\n       vr2->set = vr1.set;\n       vr2->hashcode = vr1.hashcode;\n       vr2->result = lhs;\n-      vr2->result_vdef = vdef;\n+      vr2->result_vdef = vdef_val;\n       slot = current_info->references->find_slot_with_hash (vr2, vr2->hashcode,\n \t\t\t\t\t\t\t    INSERT);\n       gcc_assert (!*slot);\n@@ -3912,11 +3928,22 @@ visit_use (tree use)\n \t    }\n \t}\n \n+      /* Pick up flags from a devirtualization target.  */\n+      tree fn = gimple_call_fn (stmt);\n+      int extra_fnflags = 0;\n+      if (fn && TREE_CODE (fn) == SSA_NAME)\n+\t{\n+\t  fn = SSA_VAL (fn);\n+\t  if (TREE_CODE (fn) == ADDR_EXPR\n+\t      && TREE_CODE (TREE_OPERAND (fn, 0)) == FUNCTION_DECL)\n+\t    extra_fnflags = flags_from_decl_or_type (TREE_OPERAND (fn, 0));\n+\t}\n       if (!gimple_call_internal_p (call_stmt)\n \t  && (/* Calls to the same function with the same vuse\n \t\t and the same operands do not necessarily return the same\n \t\t value, unless they're pure or const.  */\n-\t      gimple_call_flags (call_stmt) & (ECF_PURE | ECF_CONST)\n+\t      ((gimple_call_flags (call_stmt) | extra_fnflags)\n+\t       & (ECF_PURE | ECF_CONST))\n \t      /* If calls have a vdef, subsequent calls won't have\n \t\t the same incoming vuse.  So, if 2 calls with vdef have the\n \t\t same vuse, we know they're not subsequent."}]}