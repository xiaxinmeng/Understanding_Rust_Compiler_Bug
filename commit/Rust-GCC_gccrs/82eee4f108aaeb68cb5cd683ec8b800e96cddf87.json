{"sha": "82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJlZWU0ZjEwOGFhZWI2OGNiNWNkNjgzZWM4YjgwMGU5NmNkZGY4Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2014-10-26T10:39:57Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-10-26T10:39:57Z"}, "message": "m68k.c: Include rtl-iter.h.\n\ngcc/\n\t* config/m68k/m68k.c: Include rtl-iter.h.\n\t(m68k_final_prescan_insn_1): Delete.\n\t(m68k_final_prescan_insn): Use FOR_EACH_SUBRTX_VAR.\n\nFrom-SVN: r216699", "tree": {"sha": "6961f2e2e9de6c49c7803b9905b426e7b2e1ed35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6961f2e2e9de6c49c7803b9905b426e7b2e1ed35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82eee4f108aaeb68cb5cd683ec8b800e96cddf87/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ae2607e892d4a7fc898ce1719526a9388f299b6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae2607e892d4a7fc898ce1719526a9388f299b6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae2607e892d4a7fc898ce1719526a9388f299b6a"}], "stats": {"total": 86, "additions": 42, "deletions": 44}, "files": [{"sha": "ddd1991d81761735905467222c979713a2b53ae3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82eee4f108aaeb68cb5cd683ec8b800e96cddf87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82eee4f108aaeb68cb5cd683ec8b800e96cddf87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "patch": "@@ -1,3 +1,9 @@\n+2014-10-26  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/m68k/m68k.c: Include rtl-iter.h.\n+\t(m68k_final_prescan_insn_1): Delete.\n+\t(m68k_final_prescan_insn): Use FOR_EACH_SUBRTX_VAR.\n+\n 2014-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/63641"}, {"sha": "b01110db5c3ad99e54dc2db33aeb77c58f3d6e6e", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 36, "deletions": 44, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82eee4f108aaeb68cb5cd683ec8b800e96cddf87/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82eee4f108aaeb68cb5cd683ec8b800e96cddf87/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=82eee4f108aaeb68cb5cd683ec8b800e96cddf87", "patch": "@@ -55,6 +55,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"opts.h\"\n #include \"optabs.h\"\n #include \"builtins.h\"\n+#include \"rtl-iter.h\"\n \n enum reg_class regno_reg_class[] =\n {\n@@ -2279,49 +2280,6 @@ m68k_unwrap_symbol (rtx orig, bool unwrap_reloc32_p)\n   return m68k_unwrap_symbol_1 (orig, unwrap_reloc32_p, NULL);\n }\n \n-/* Helper for m68k_final_prescan_insn.  */\n-\n-static int\n-m68k_final_prescan_insn_1 (rtx *x_ptr, void *data ATTRIBUTE_UNUSED)\n-{\n-  rtx x = *x_ptr;\n-\n-  if (m68k_unwrap_symbol (x, true) != x)\n-    /* For rationale of the below, see comment in m68k_final_prescan_insn.  */\n-    {\n-      rtx plus;\n-\n-      gcc_assert (GET_CODE (x) == CONST);\n-      plus = XEXP (x, 0);\n-\n-      if (GET_CODE (plus) == PLUS || GET_CODE (plus) == MINUS)\n-\t{\n-\t  rtx unspec;\n-\t  rtx addend;\n-\n-\t  unspec = XEXP (plus, 0);\n-\t  gcc_assert (GET_CODE (unspec) == UNSPEC);\n-\t  addend = XEXP (plus, 1);\n-\t  gcc_assert (CONST_INT_P (addend));\n-\n-\t  /* We now have all the pieces, rearrange them.  */\n-\n-\t  /* Move symbol to plus.  */\n-\t  XEXP (plus, 0) = XVECEXP (unspec, 0, 0);\n-\n-\t  /* Move plus inside unspec.  */\n-\t  XVECEXP (unspec, 0, 0) = plus;\n-\n-\t  /* Move unspec to top level of const.  */\n-\t  XEXP (x, 0) = unspec;\n-\t}\n-\n-      return -1;\n-    }\n-\n-  return 0;\n-}\n-\n /* Prescan insn before outputing assembler for it.  */\n \n void\n@@ -2347,13 +2305,47 @@ m68k_final_prescan_insn (rtx_insn *insn ATTRIBUTE_UNUSED,\n      Note, that the top level of operand remains intact, so we don't have\n      to patch up anything outside of the operand.  */\n \n+  subrtx_var_iterator::array_type array;\n   for (i = 0; i < n_operands; ++i)\n     {\n       rtx op;\n \n       op = operands[i];\n \n-      for_each_rtx (&op, m68k_final_prescan_insn_1, NULL);\n+      FOR_EACH_SUBRTX_VAR (iter, array, op, ALL)\n+\t{\n+\t  rtx x = *iter;\n+\t  if (m68k_unwrap_symbol (x, true) != x)\n+\t    {\n+\t      rtx plus;\n+\n+\t      gcc_assert (GET_CODE (x) == CONST);\n+\t      plus = XEXP (x, 0);\n+\n+\t      if (GET_CODE (plus) == PLUS || GET_CODE (plus) == MINUS)\n+\t\t{\n+\t\t  rtx unspec;\n+\t\t  rtx addend;\n+\n+\t\t  unspec = XEXP (plus, 0);\n+\t\t  gcc_assert (GET_CODE (unspec) == UNSPEC);\n+\t\t  addend = XEXP (plus, 1);\n+\t\t  gcc_assert (CONST_INT_P (addend));\n+\n+\t\t  /* We now have all the pieces, rearrange them.  */\n+\n+\t\t  /* Move symbol to plus.  */\n+\t\t  XEXP (plus, 0) = XVECEXP (unspec, 0, 0);\n+\n+\t\t  /* Move plus inside unspec.  */\n+\t\t  XVECEXP (unspec, 0, 0) = plus;\n+\n+\t\t  /* Move unspec to top level of const.  */\n+\t\t  XEXP (x, 0) = unspec;\n+\t\t}\n+\t      iter.skip_subrtxes ();\n+\t    }\n+\t}\n     }\n }\n "}]}