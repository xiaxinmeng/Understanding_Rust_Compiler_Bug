{"sha": "96a956b65a8222c3dc53b3c6ee327657c517255e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZhOTU2YjY1YTgyMjJjM2RjNTNiM2M2ZWUzMjc2NTdjNTE3MjU1ZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-06-01T13:55:12Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-06-01T13:55:12Z"}, "message": "revert: re PR middle-end/66314 (ice in verify_loop_structure)\n\n2015-06-01  Richard Biener  <rguenther@suse.de>\n\n\tRevert\n\t2015-05-29  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66314\n\t* tree-ssa-threadupdate.c (create_block_for_threading): Add\n\tparameter that says which loop the new block belongs to.\n\t(ssa_create_duplicates): Blocks duplicated for the threaded\n\tpath belong to the loop of the thread destination.\n\n\t* gcc.dg/asan/pr66314.c: New testcase.\n\nFrom-SVN: r223979", "tree": {"sha": "ccfc2980956279df7821e80698422ba6e03f1124", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccfc2980956279df7821e80698422ba6e03f1124"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96a956b65a8222c3dc53b3c6ee327657c517255e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a956b65a8222c3dc53b3c6ee327657c517255e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96a956b65a8222c3dc53b3c6ee327657c517255e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96a956b65a8222c3dc53b3c6ee327657c517255e/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d88e64a6f4d4befc0d20435c81d4de6e81da5748", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d88e64a6f4d4befc0d20435c81d4de6e81da5748", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d88e64a6f4d4befc0d20435c81d4de6e81da5748"}], "stats": {"total": 76, "additions": 26, "deletions": 50}, "files": [{"sha": "ae19db5358a85fb9fb176b6158ac5ffbef43074d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96a956b65a8222c3dc53b3c6ee327657c517255e", "patch": "@@ -1,3 +1,14 @@\n+2015-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert\n+\t2015-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66314\n+\t* tree-ssa-threadupdate.c (create_block_for_threading): Add\n+\tparameter that says which loop the new block belongs to.\n+\t(ssa_create_duplicates): Blocks duplicated for the threaded\n+\tpath belong to the loop of the thread destination.\n+\n 2015-06-01  Martin Liska  <mliska@suse.cz>\n \n \t* sched-deps.c: Include pool-alloc.h before"}, {"sha": "2de41e59ba26eaadf869790427a20eeebc923234", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=96a956b65a8222c3dc53b3c6ee327657c517255e", "patch": "@@ -1,3 +1,11 @@\n+2015-06-01  Richard Biener  <rguenther@suse.de>\n+\n+\tRevert\n+\t2015-05-29  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66314\n+\t* gcc.dg/asan/pr66314.c: New testcase.\n+\n 2015-06-01  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/ipa/ipa-pta-1.c: Adjust."}, {"sha": "94dc2e8eda0c45805e17904d524c9c62e9c3544e", "filename": "gcc/testsuite/gcc.dg/asan/pr66314.c", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d88e64a6f4d4befc0d20435c81d4de6e81da5748/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr66314.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d88e64a6f4d4befc0d20435c81d4de6e81da5748/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr66314.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fasan%2Fpr66314.c?ref=d88e64a6f4d4befc0d20435c81d4de6e81da5748", "patch": "@@ -1,33 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-fprofile-arcs -fno-sanitize=address -fsanitize=kernel-address\" } */\n-\n-char *a;\n-int d;\n-\n-static int\n-fn1 (int b, int c)\n-{\n-  while (a)\n-    if (*a)\n-      return -126;\n-  if (b)\n-    return -12;\n-  if (c == -12)\n-    return c;\n-}\n-\n-void\n-fn2 (int b, int c)\n-{\n-  for (;;)\n-    {\n-      d = fn1 (b, c);\n-      switch (d)\n-\t{\n-\tcase -126:\n-\tcontinue;\n-\tdefault:\n-\treturn;\n-\t}\n-    }\n-}"}, {"sha": "ce1dcdb96a7f6a8f1b0dce0bdd855a08936b35b1", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96a956b65a8222c3dc53b3c6ee327657c517255e/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=96a956b65a8222c3dc53b3c6ee327657c517255e", "patch": "@@ -312,27 +312,20 @@ remove_ctrl_stmt_and_useless_edges (basic_block bb, basic_block dest_bb)\n }\n \n /* Create a duplicate of BB.  Record the duplicate block in an array\n-   indexed by COUNT stored in RD.  LOOP is the loop the block should\n-   belong to, if not NULL, in which case it will belong to the same\n-   loop as BB.  */\n+   indexed by COUNT stored in RD.  */\n \n static void\n create_block_for_threading (basic_block bb,\n \t\t\t    struct redirection_data *rd,\n \t\t\t    unsigned int count,\n-\t\t\t    bitmap *duplicate_blocks, loop_p loop)\n+\t\t\t    bitmap *duplicate_blocks)\n {\n   edge_iterator ei;\n   edge e;\n \n   /* We can use the generic block duplication code and simply remove\n      the stuff we do not need.  */\n   rd->dup_blocks[count] = duplicate_block (bb, NULL, NULL);\n-  if (loop && rd->dup_blocks[count]->loop_father != loop)\n-    {\n-      remove_bb_from_loops (rd->dup_blocks[count]);\n-      add_bb_to_loop (rd->dup_blocks[count], loop);\n-    }\n \n   FOR_EACH_EDGE (e, ei, rd->dup_blocks[count]->succs)\n     e->aux = NULL;\n@@ -1310,10 +1303,6 @@ ssa_create_duplicates (struct redirection_data **slot,\n \t\t       ssa_local_info_t *local_info)\n {\n   struct redirection_data *rd = *slot;\n-  vec<jump_thread_edge *> *path = rd->path;\n-\n-  /* Check to which loop the threading destination belongs to.  */\n-  loop_p dest_loop = (*path).last ()->e->dest->loop_father;\n \n   /* The second duplicated block in a jump threading path is specific\n      to the path.  So it gets stored in RD rather than in LOCAL_DATA.\n@@ -1324,13 +1313,14 @@ ssa_create_duplicates (struct redirection_data **slot,\n      Note the search starts with the third edge on the path.  The first\n      edge is the incoming edge, the second edge always has its source\n      duplicated.  Thus we start our search with the third edge.  */\n+  vec<jump_thread_edge *> *path = rd->path;\n   for (unsigned int i = 2; i < path->length (); i++)\n     {\n       if ((*path)[i]->type == EDGE_COPY_SRC_BLOCK\n \t  || (*path)[i]->type == EDGE_COPY_SRC_JOINER_BLOCK)\n \t{\n \t  create_block_for_threading ((*path)[i]->e->src, rd, 1,\n-\t\t\t\t      &local_info->duplicate_blocks, dest_loop);\n+\t\t\t\t      &local_info->duplicate_blocks);\n \t  break;\n \t}\n     }\n@@ -1340,7 +1330,7 @@ ssa_create_duplicates (struct redirection_data **slot,\n   if (local_info->template_block == NULL)\n     {\n       create_block_for_threading ((*path)[1]->e->src, rd, 0,\n-\t\t\t\t  &local_info->duplicate_blocks, dest_loop);\n+\t\t\t\t  &local_info->duplicate_blocks);\n       local_info->template_block = rd->dup_blocks[0];\n \n       /* We do not create any outgoing edges for the template.  We will\n@@ -1350,7 +1340,7 @@ ssa_create_duplicates (struct redirection_data **slot,\n   else\n     {\n       create_block_for_threading (local_info->template_block, rd, 0,\n-\t\t\t\t  &local_info->duplicate_blocks, dest_loop);\n+\t\t\t\t  &local_info->duplicate_blocks);\n \n       /* Go ahead and wire up outgoing edges and update PHIs for the duplicate\n \t block.   */\n@@ -1687,7 +1677,7 @@ thread_single_edge (edge e)\n   npath->safe_push (x);\n   rd.path = npath;\n \n-  create_block_for_threading (bb, &rd, 0, NULL, NULL);\n+  create_block_for_threading (bb, &rd, 0, NULL);\n   remove_ctrl_stmt_and_useless_edges (rd.dup_blocks[0], NULL);\n   create_edge_and_update_destination_phis (&rd, rd.dup_blocks[0], 0);\n "}]}