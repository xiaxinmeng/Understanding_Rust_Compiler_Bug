{"sha": "d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIzMzNmNmViYjlmM2RiZjZhZDdmNWVjNzk3NjFhNjQyYjdiMjk1Yw==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-10-12T20:27:39Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-10-12T20:27:39Z"}, "message": "predicates.md (scc_rev_comparison_operator): New.\n\n\t* config/rs6000/predicates.md (scc_rev_comparison_operator): New.\n\t* config/rs6000/rs6000.md (*isel_reversed_signed_<mode>): New.\n\t(*isel_reversed_unsigned_<mode>): New.\n\t* config/rs6000/rs6000.c (output_isel): Accept GE/GEU/LE/LEU/NE\n\tas valid comparisons and adjust operands and output appropriately.\n\t(rs6000_rtx_costs) <CONST_INT>: Accept NE as a cost-0 outer_code.\n\nFrom-SVN: r165395", "tree": {"sha": "43f03c7806c64bf24960ae3068a7a6a2dae30801", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43f03c7806c64bf24960ae3068a7a6a2dae30801"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/comments", "author": null, "committer": null, "parents": [{"sha": "7cb44256d2afb43dd8d176fe55eb7a7025602e5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cb44256d2afb43dd8d176fe55eb7a7025602e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cb44256d2afb43dd8d176fe55eb7a7025602e5f"}], "stats": {"total": 57, "additions": 55, "deletions": 2}, "files": [{"sha": "9b7215340bb43aa07d7586e19a8c77280328bfca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "patch": "@@ -1,3 +1,12 @@\n+2010-10-12  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* config/rs6000/predicates.md (scc_rev_comparison_operator): New.\n+\t* config/rs6000/rs6000.md (*isel_reversed_signed_<mode>): New.\n+\t(*isel_reversed_unsigned_<mode>): New.\n+\t* config/rs6000/rs6000.c (output_isel): Accept GE/GEU/LE/LEU/NE\n+\tas valid comparisons and adjust operands and output appropriately.\n+\t(rs6000_rtx_costs) <CONST_INT>: Accept NE as a cost-0 outer_code.\n+\n 2010-10-12  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* config/arm/arm.h (ARM_EXPAND_ALIGNMENT): Rename from"}, {"sha": "81ac68aedaad1df2bf3fd16c2d2e4982a5e76be1", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "patch": "@@ -903,6 +903,12 @@\n   (and (match_operand 0 \"branch_comparison_operator\")\n        (match_code \"eq,lt,gt,ltu,gtu,unordered\")))\n \n+;; Return 1 if OP is a comparison operation whose inverse would be valid for\n+;; an SCC insn.\n+(define_predicate \"scc_rev_comparison_operator\"\n+  (and (match_operand 0 \"branch_comparison_operator\")\n+       (match_code \"ne,le,ge,leu,geu,ordered\")))\n+\n ;; Return 1 if OP is a comparison operation that is valid for a branch\n ;; insn, which is true if the corresponding bit in the CC register is set.\n (define_predicate \"branch_positive_comparison_operator\""}, {"sha": "d7377a50599777b96f435cfb0b6d67a071dd8007", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "patch": "@@ -17159,7 +17159,13 @@ output_isel (rtx *operands)\n \n   code = GET_CODE (operands[1]);\n \n-  gcc_assert (!(code == GE || code == GEU || code == LE || code == LEU || code == NE));\n+  if (code == GE || code == GEU || code == LE || code == LEU || code == NE)\n+    {\n+      gcc_assert (GET_CODE (operands[2]) == REG\n+\t\t  && GET_CODE (operands[3]) == REG);\n+      PUT_CODE (operands[1], reverse_condition (code));\n+      return \"isel %0,%3,%2,%j1\";\n+    }\n \n   return \"isel %0,%2,%3,%j1\";\n }\n@@ -25731,7 +25737,7 @@ rs6000_rtx_costs (rtx x, int code, int outer_code, int *total,\n \t  || (outer_code == COMPARE\n \t      && (satisfies_constraint_I (x)\n \t\t  || satisfies_constraint_K (x)))\n-\t  || (outer_code == EQ\n+\t  || ((outer_code == EQ || outer_code == NE)\n \t      && (satisfies_constraint_I (x)\n \t\t  || satisfies_constraint_K (x)\n \t\t  || (mode == SImode"}, {"sha": "9fa2ff1e4294d7df6017bd15decc64bf076192fd", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=d2333f6ebb9f3dbf6ad7f5ec79761a642b7b295c", "patch": "@@ -6126,6 +6126,38 @@\n   [(set_attr \"type\" \"isel\")\n    (set_attr \"length\" \"4\")])\n \n+;; These patterns can be useful for combine; they let combine know that\n+;; isel can handle reversed comparisons so long as the operands are\n+;; registers.\n+\n+(define_insn \"*isel_reversed_signed_<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(if_then_else:GPR\n+\t (match_operator 1 \"scc_rev_comparison_operator\"\n+\t\t\t [(match_operand:CC 4 \"cc_reg_operand\" \"y\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:GPR 2 \"gpc_reg_operand\" \"b\")\n+\t (match_operand:GPR 3 \"gpc_reg_operand\" \"b\")))]\n+  \"TARGET_ISEL<sel>\"\n+  \"*\n+{ return output_isel (operands); }\"\n+  [(set_attr \"type\" \"isel\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"*isel_reversed_unsigned_<mode>\"\n+  [(set (match_operand:GPR 0 \"gpc_reg_operand\" \"=r\")\n+\t(if_then_else:GPR\n+\t (match_operator 1 \"scc_rev_comparison_operator\"\n+\t\t\t [(match_operand:CCUNS 4 \"cc_reg_operand\" \"y\")\n+\t\t\t  (const_int 0)])\n+\t (match_operand:GPR 2 \"gpc_reg_operand\" \"b\")\n+\t (match_operand:GPR 3 \"gpc_reg_operand\" \"b\")))]\n+  \"TARGET_ISEL<sel>\"\n+  \"*\n+{ return output_isel (operands); }\"\n+  [(set_attr \"type\" \"isel\")\n+   (set_attr \"length\" \"4\")])\n+\n (define_expand \"movsfcc\"\n    [(set (match_operand:SF 0 \"gpc_reg_operand\" \"\")\n \t (if_then_else:SF (match_operand 1 \"comparison_operator\" \"\")"}]}