{"sha": "e544c850ffc63d95d704370f8ce5140b4d9e1c68", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU0NGM4NTBmZmM2M2Q5NWQ3MDQzNzBmOGNlNTE0MGI0ZDllMWM2OA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-04-16T15:16:42Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-04-16T15:16:42Z"}, "message": "Makefile.in (tree-affine.o): Add $(FLAGS_H) dependency.\n\n2008-04-16  Richard Guenther  <rguenther@suse.de>\n\n\t* Makefile.in (tree-affine.o): Add $(FLAGS_H) dependency.\n\t* tree-affine.c (aff_combination_expand): Look through some\n\tconversions.\n\n\t* gcc.dg/tree-ssa/loop-35.c: New testcase.\n\nFrom-SVN: r134346", "tree": {"sha": "2b7b91ca00fdef0b86fd09f0e777db15991f100e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b7b91ca00fdef0b86fd09f0e777db15991f100e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e544c850ffc63d95d704370f8ce5140b4d9e1c68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e544c850ffc63d95d704370f8ce5140b4d9e1c68", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e544c850ffc63d95d704370f8ce5140b4d9e1c68", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e544c850ffc63d95d704370f8ce5140b4d9e1c68/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "35c91e0571501b3d876e4e0c5b4cf33da758f1da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c91e0571501b3d876e4e0c5b4cf33da758f1da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c91e0571501b3d876e4e0c5b4cf33da758f1da"}], "stats": {"total": 115, "additions": 111, "deletions": 4}, "files": [{"sha": "a36a14accd592805f542dc06bd4371eaebaa4839", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e544c850ffc63d95d704370f8ce5140b4d9e1c68", "patch": "@@ -1,3 +1,9 @@\n+2008-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* Makefile.in (tree-affine.o): Add $(FLAGS_H) dependency.\n+\t* tree-affine.c (aff_combination_expand): Look through some\n+\tconversions.\n+\n 2008-04-15  Doug Kwan  <dougkwan@google.com>\n \n \t* dwarf2asm.c (dw2_assemble_integer): Cast to unsigned HOST_WIDE_INT"}, {"sha": "4ea55fa32baecaaef728f2e18b4f2123de5686f5", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e544c850ffc63d95d704370f8ce5140b4d9e1c68", "patch": "@@ -2191,7 +2191,7 @@ tree-ssa-loop-ivopts.o : tree-ssa-loop-ivopts.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    tree-chrec.h $(VARRAY_H) tree-affine.h pointer-set.h $(TARGET_H)\n tree-affine.o : tree-affine.c tree-affine.h $(CONFIG_H) pointer-set.h \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(TREE_GIMPLE_H) \\\n-   output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H)\n+   output.h $(DIAGNOSTIC_H) $(TM_H) coretypes.h $(TREE_DUMP_H) $(FLAGS_H)\n tree-ssa-loop-manip.o : tree-ssa-loop-manip.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(RTL_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) \\\n    output.h $(DIAGNOSTIC_H) $(TIMEVAR_H) $(TM_H) coretypes.h $(TREE_DUMP_H) \\"}, {"sha": "de3305ff0d3066142df4beaddcd66ceba1be826f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e544c850ffc63d95d704370f8ce5140b4d9e1c68", "patch": "@@ -1,3 +1,7 @@\n+2008-04-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/loop-35.c: New testcase.\n+\n 2008-04-16  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR ada/29015"}, {"sha": "ce6ba28d74ab31fb8d4095f50d8b4d094bca3852", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-35.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c?ref=e544c850ffc63d95d704370f8ce5140b4d9e1c68", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-lim-details\" } */\n+\n+int x;\n+int a[100];\n+\n+struct a\n+{\n+  int X;\n+  int Y;\n+};\n+\n+struct a arr[100];\n+\n+void test1(int b)\n+{\n+  unsigned i;\n+\n+  /* And here.  */\n+  for (i = 0; i < 100; i++)\n+    {\n+      arr[b+8].X += i;\n+      arr[b+9].X += i;\n+    }\n+}\n+\n+void test2(struct a *A, int b)\n+{\n+  unsigned i;\n+\n+  /* And here as well.  */\n+  for (i = 0; i < 100; i++)\n+    {\n+      A[b].X += i;\n+      A[b+1].Y += i;\n+    }\n+}\n+\n+void test3(unsigned long b)\n+{\n+  unsigned i;\n+\n+  /* And here.  */\n+  for (i = 0; i < 100; i++)\n+    {\n+      arr[b+8].X += i;\n+      arr[b+9].X += i;\n+    }\n+}\n+\n+void test4(struct a *A, unsigned long b)\n+{\n+  unsigned i;\n+\n+  /* And here as well.  */\n+  for (i = 0; i < 100; i++)\n+    {\n+      A[b].X += i;\n+      A[b+1].Y += i;\n+    }\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 8 \"lim\" } } */\n+/* { dg-final { cleanup-tree-dump \"lim\" } } */"}, {"sha": "8407df204a2c9b7790ee8d5e55f27cb7d6820406", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e544c850ffc63d95d704370f8ce5140b4d9e1c68/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=e544c850ffc63d95d704370f8ce5140b4d9e1c68", "patch": "@@ -31,6 +31,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"pointer-set.h\"\n #include \"tree-affine.h\"\n #include \"tree-gimple.h\"\n+#include \"flags.h\"\n \n /* Extends CST as appropriate for the affine combinations COMB.  */\n \n@@ -578,12 +579,20 @@ aff_combination_expand (aff_tree *comb, struct pointer_map_t **cache)\n   aff_combination_zero (&to_add, comb->type);\n   for (i = 0; i < comb->n; i++)\n     {\n+      tree type, name;\n       e = comb->elts[i].val;\n-      if (TREE_CODE (e) != SSA_NAME)\n+      type = TREE_TYPE (e);\n+      name = e;\n+      /* Look through some conversions.  */\n+      if (TREE_CODE (e) == NOP_EXPR\n+          && (TYPE_PRECISION (type)\n+\t      >= TYPE_PRECISION (TREE_TYPE (TREE_OPERAND (e, 0)))))\n+\tname = TREE_OPERAND (e, 0);\n+      if (TREE_CODE (name) != SSA_NAME)\n \tcontinue;\n-      def = SSA_NAME_DEF_STMT (e);\n+      def = SSA_NAME_DEF_STMT (name);\n       if (TREE_CODE (def) != GIMPLE_MODIFY_STMT\n-\t  || GIMPLE_STMT_OPERAND (def, 0) != e)\n+\t  || GIMPLE_STMT_OPERAND (def, 0) != name)\n \tcontinue;\n \n       rhs = GIMPLE_STMT_OPERAND (def, 1);\n@@ -607,6 +616,30 @@ aff_combination_expand (aff_tree *comb, struct pointer_map_t **cache)\n \t  exp = XNEW (struct name_expansion);\n \t  exp->in_progress = 1;\n \t  *slot = exp;\n+\t  if (e != name)\n+\t    {\n+\t      /* In principle this is a generally valid folding, but\n+\t\t it is not unconditionally an optimization, so do it\n+\t\t here and not in fold_unary.  */\n+\t      /* Convert (T1)(X *+- CST) into (T1)X *+- (T1)CST if T1 is wider\n+\t\t than the type of X and overflow for the type of X is\n+\t\t undefined.  */\n+\t      if (INTEGRAL_TYPE_P (type)\n+\t          && INTEGRAL_TYPE_P (TREE_TYPE (rhs))\n+\t          && TYPE_OVERFLOW_UNDEFINED (TREE_TYPE (rhs))\n+\t          && TYPE_PRECISION (type) > TYPE_PRECISION (TREE_TYPE (rhs))\n+\t          && (TREE_CODE (rhs) == PLUS_EXPR\n+\t              || TREE_CODE (rhs) == MINUS_EXPR\n+\t              || TREE_CODE (rhs) == MULT_EXPR)\n+\t          && TREE_CODE (TREE_OPERAND (rhs, 1)) == INTEGER_CST)\n+\t        {\n+\t          rhs = fold_build2 (TREE_CODE (rhs), type,\n+\t                             fold_convert (type, TREE_OPERAND (rhs, 0)),\n+\t                             fold_convert (type, TREE_OPERAND (rhs, 1)));\n+\t        }\n+\t      else\n+\t        rhs = fold_convert (type, rhs);\n+\t    }\n \t  tree_to_aff_combination_expand (rhs, comb->type, &current, cache);\n \t  exp->expansion = current;\n \t  exp->in_progress = 0;"}]}