{"sha": "fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyMDNmYWYzYzU5OGRiZmM4NWYzZTMzY2U5YTdmMzczMTYzNWIyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-08-10T21:50:45Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-08-10T21:50:45Z"}, "message": "extend.texi (C Implementation): New chapter.\n\n        * doc/extend.texi (C Implementation): New chapter.\n        * doc/gcc.texi (Top): Link it in.\n\nFrom-SVN: r44777", "tree": {"sha": "3ff6cc330e7c1b76096b5c6503c12691a226a810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ff6cc330e7c1b76096b5c6503c12691a226a810"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/comments", "author": null, "committer": null, "parents": [{"sha": "ff14442814586de3a69dd485845cbfeac0743e07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff14442814586de3a69dd485845cbfeac0743e07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff14442814586de3a69dd485845cbfeac0743e07"}], "stats": {"total": 341, "additions": 341, "deletions": 0}, "files": [{"sha": "219130da0d6a41e9e7ea78cd0e37cde8d8a4a7a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "patch": "@@ -1,3 +1,8 @@\n+2001-08-10  Richard Henderson  <rth@redhat.com>\n+\n+\t* doc/extend.texi (C Implementation): New chapter.\n+\t* doc/gcc.texi (Top): Link it in.\n+\n 2001-08-10  Andrew Cagney  <ac131313@redhat.com>\n \n \t* doc/install.texi (Specific): Fix CVS merge botch."}, {"sha": "23deda1409fbdef5adc7caa4e069192bc3126963", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 335, "deletions": 0, "changes": 335, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "patch": "@@ -2,6 +2,341 @@\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n+@node C Implementation\n+@chapter C Implementation-defined behavior\n+@cindex implementation-defined behavior, C language\n+\n+A conforming implementation of ISO C is required to document its\n+choice of behavior in each of the areas that are designated\n+``implementation defined.''  The following lists all such areas,\n+along with the section number from the ISO/IEC 9899:1999 standard.\n+\n+@menu\n+* Translation implementation::\n+* Environment implementation::\n+* Identifiers implementation::\n+* Characters implementation::\n+* Integers implementation::\n+* Floating point implementation::\n+* Arrays and pointers implementation::\n+* Hints implementation::\n+* Structures unions enumerations and bit-fields implementation::\n+* Qualifiers implementation::\n+* Preprocessing directives implementation::\n+* Library functions implementation::\n+* Architecture implementation::\n+* Locale-specific behavior implementation::\n+@end menu\n+\n+@node Translation implementation\n+@section Translation\n+\n+@itemize @bullet\n+@item\n+@cite{How a diagnostic is identified (3.10, 5.1.1.3).}\n+\n+@item\n+@cite{Whether each nonempty sequence of white-space characters other than\n+new-line is retained or replaced by one space character in translation\n+phase 3 (5.1.1.2).}\n+@end itemize\n+\n+@node Environment implementation\n+@section Environment\n+\n+The behavior of these points are dependant on the implementation\n+of the C library, and are not defined by GCC itself.\n+\n+@node Identifiers implementation\n+@section Identifiers\n+\n+@itemize @bullet\n+@item\n+@cite{Which additional multibyte characters may appear in identifiers\n+and their correspondence to universal character names (6.4.2).}\n+\n+@item\n+@cite{The number of significant initial characters in an identifier\n+(5.2.4.1, 6.4.2).}\n+@end itemize\n+\n+@node Characters implementation\n+@section Characters\n+\n+@itemize @bullet\n+@item\n+@cite{The number of bits in a byte (3.6).}\n+\n+@item\n+@cite{The values of the members of the execution character set (5.2.1).}\n+\n+@item\n+@cite{The unique value of the member of the execution character set produced\n+for each of the standard alphabetic escape sequences (5.2.2).}\n+\n+@item\n+@cite{The value of a @code{char} object into which has been stored any\n+character other than a member of the basic execution character set (6.2.5).}\n+\n+@item\n+@cite{Which of @code{signed char} or @code{unsigned char} has the same range,\n+representation, and behavior as ``plain'' char (6.2.5, 6.3.1.1).}\n+\n+@item\n+@cite{The mapping of members of the source character set (in character\n+constants and string literals) to members of the execution character\n+set (6.4.4.4, 5.1.1.2).}\n+\n+@item\n+@cite{The value of an integer character constant containing more than one\n+character or containing a character or escape sequence that does not map\n+to a single-byte execution character (6.4.4.4).}\n+\n+@item\n+@cite{The value of a wide character constant containing more than one\n+multibyte character, or containing a multibyte character or escape\n+sequence not represented in the extended execution character set (6.4.4.4).}\n+\n+@item\n+@cite{The current locale used to convert a wide character constant consisting\n+of a single multibyte character that maps to a member of the extended\n+execution character set into a corresponding wide character code (6.4.4.4).}\n+\n+@item\n+@cite{The current locale used to convert a wide string literal into\n+corresponding wide character codes (6.4.5).}\n+\n+@item\n+@cite{The value of a string literal containing a multibyte character or escape\n+sequence not represented in the execution character set (6.4.5).}\n+@end itemize\n+\n+@node Integers implementation\n+@section Integers\n+\n+@itemize @bullet\n+@item\n+@cite{Any extended integer types that exist in the implementation (6.2.5).}\n+\n+@item\n+@cite{Whether signed integer types are represented using sign and magnitude,\n+two's complement, or one's complement, and whether the extraordinary value\n+is a trap representation or an ordinary value (6.2.6.2).}\n+\n+@item\n+@cite{The rank of any extended integer type relative to another extended\n+integer type with the same precision (6.3.1.1).}\n+\n+@item\n+@cite{The result of, or the signal raised by, converting an integer to a\n+signed integer type when the value cannot be represented in an object of\n+that type (6.3.1.3).}\n+\n+@item\n+@cite{The results of some bitwise operations on signed integers (6.5).}\n+@end itemize\n+\n+@node Floating point implementation\n+@section Floating point\n+\n+@itemize @bullet\n+@item\n+@cite{The accuracy of the floating-point operations and of the library\n+functions in @file{<math.h>} and @file{<complex.h>} that return floating-point\n+results (5.2.4.2.2).}\n+\n+@item\n+@cite{The rounding behaviors characterized by non-standard values\n+of @code{FLT_ROUNDS} (5.2.4.2.2).}\n+\n+@item\n+@cite{The evaluation methods characterized by non-standard negative\n+values of @code{FLT_EVAL_METHOD} (5.2.4.2.2).}\n+\n+@item\n+@cite{The direction of rounding when an integer is converted to a\n+floating-point number that cannot exactly represent the original\n+value (6.3.1.4).}\n+\n+@item\n+@cite{The direction of rounding when a floating-point number is\n+converted to a narrower floating-point number (6.3.1.5).}\n+\n+@item\n+@cite{How the nearest representable value or the larger or smaller\n+representable value immediately adjacent to the nearest representable\n+value is chosen for certain floating constants (6.4.4.2).}\n+\n+@item\n+@cite{Whether and how floating expressions are contracted when not\n+disallowed by the @code{FP_CONTRACT} pragma (6.5).}\n+\n+@item\n+@cite{The default state for the @code{FENV_ACCESS} pragma (7.6.1).}\n+\n+@item\n+@cite{Additional floating-point exceptions, rounding modes, environments,\n+and classifications, and their macro names (7.6, 7.12).}\n+\n+@item\n+@cite{The default state for the @code{FP_CONTRACT} pragma (7.12.2).}\n+\n+@item\n+@cite{Whether the ``inexact'' floating-point exception can be raised\n+when the rounded result actually does equal the mathematical result\n+in an IEC 60559 conformant implementation (F.9).}\n+\n+@item\n+@cite{Whether the ``underflow'' (and ``inexact'') floating-point\n+exception can be raised when a result is tiny but not inexact in an\n+IEC 60559 conformant implementation (F.9).}\n+\n+@end itemize\n+\n+@node Arrays and pointers implementation\n+@section Arrays and pointers\n+\n+@itemize @bullet\n+@item\n+@cite{The result of converting a pointer to an integer or\n+vice versa (6.3.2.3).}\n+\n+@item\n+@cite{The size of the result of subtracting two pointers to elements\n+of the same array (6.5.6).}\n+\n+@end itemize\n+\n+@node Hints implementation\n+@section Hints\n+\n+@itemize @bullet\n+@item\n+@cite{The extent to which suggestions made by using the @code{register}\n+storage-class specifier are effective (6.7.1).}\n+\n+@item\n+@cite{The extent to which suggestions made by using the inline function\n+specifier are effective (6.7.4).}\n+\n+@end itemize\n+\n+@node Structures unions enumerations and bit-fields implementation\n+@section Structures, unions, enumerations, and bit-fields\n+\n+@itemize @bullet\n+@item\n+@cite{Whether a ``plain'' int bit-field is treated as a @code{signed int}\n+bit-field or as an @code{unsigned int} bit-field (6.7.2, 6.7.2.1).}\n+\n+@item\n+@cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n+and @code{unsigned int} (6.7.2.1).}\n+\n+@item\n+@cite{Whether a bit-field can straddle a storage-unit boundary (6.7.2.1).}\n+\n+@item\n+@cite{The order of allocation of bit-fields within a unit (6.7.2.1).}\n+\n+@item\n+@cite{The alignment of non-bit-field members of structures (6.7.2.1).}\n+\n+@item\n+@cite{The integer type compatible with each enumerated type (6.7.2.2).}\n+\n+@end itemize\n+\n+@node Qualifiers implementation\n+@section Qualifiers\n+\n+@itemize @bullet\n+@item\n+@cite{What constitutes an access to an object that has volatile-qualified\n+type (6.7.3).}\n+\n+@end itemize\n+\n+@node Preprocessing directives implementation\n+@section Preprocessing directives\n+\n+@itemize @bullet\n+@item\n+@cite{How sequences in both forms of header names are mapped to headers\n+or external source file names (6.4.7).}\n+\n+@item\n+@cite{Whether the value of a character constant in a constant expression\n+that controls conditional inclusion matches the value of the same character\n+constant in the execution character set (6.10.1).}\n+\n+@item\n+@cite{Whether the value of a single-character character constant in a\n+constant expression that controls conditional inclusion may have a\n+negative value (6.10.1).}\n+\n+@item\n+@cite{The places that are searched for an included @samp{<>} delimited\n+header, and how the places are specified or the header is\n+identified (6.10.2).}\n+\n+@item\n+@cite{How the named source file is searched for in an included @samp{\"\"}\n+delimited header (6.10.2).}\n+\n+@item\n+@cite{The method by which preprocessing tokens (possibly resulting from\n+macro expansion) in a @code{#include} directive are combined into a header\n+name (6.10.2).}\n+\n+@item\n+@cite{The nesting limit for @code{#include} processing (6.10.2).}\n+\n+@item\n+@cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n+the @samp{\\} character that begins a universal character name in a\n+character constant or string literal (6.10.3.2).}\n+\n+@item\n+@cite{The behavior on each recognized non-@code{STDC #pragma}\n+directive (6.10.6).}\n+\n+@item\n+@cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n+respectively, the date and time of translation are not available (6.10.8).}\n+\n+@end itemize\n+\n+@node Library functions implementation\n+@section Library functions\n+\n+The behavior of these points are dependant on the implementation\n+of the C library, and are not defined by GCC itself.\n+\n+@node Architecture implementation\n+@section Architecture\n+\n+@itemize @bullet\n+@item\n+@cite{The values or expressions assigned to the macros specified in the\n+headers @file{<float.h>}, @file{<limits.h>}, and @file{<stdint.h>}\n+(5.2.4.2, 7.18.2, 7.18.3).}\n+\n+@item\n+@cite{The number, order, and encoding of bytes in any object\n+(when not explicitly specified in this International Standard) (6.2.6.1).}\n+\n+@item\n+@cite{The value of the result of the sizeof operator (6.5.3.4).}\n+\n+@end itemize\n+\n+@node Locale-specific behavior implementation\n+@section Locale-specific behavior\n+\n+The behavior of these points are dependant on the implementation\n+of the C library, and are not defined by GCC itself.\n+\n @node C Extensions\n @chapter Extensions to the C Language Family\n @cindex extensions, C language"}, {"sha": "443574244f27dc578eaa54916d16cd99db5cadce", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe203faf3c598dbfc85f3e33ce9a7f3731635b29/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=fe203faf3c598dbfc85f3e33ce9a7f3731635b29", "patch": "@@ -254,6 +254,7 @@ bugs.  It corresponds to GCC version 3.1.\n * Standards::       Language standards supported by GCC.\n * Invoking GCC::    Command options supported by @samp{gcc}.\n * Installation::    How to configure, compile and install GCC.\n+* C Implementation:: How GCC implements the ISO C specification.\n * C Extensions::    GNU extensions to the C language family.\n * C++ Extensions::  GNU extensions to the C++ language.\n * Objective-C::     GNU Objective-C runtime features."}]}