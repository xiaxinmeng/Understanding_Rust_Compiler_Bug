{"sha": "d0d1b24d8989e0f293291e6f31f08c40f332484c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDBkMWIyNGQ4OTg5ZTBmMjkzMjkxZTZmMzFmMDhjNDBmMzMyNDg0Yw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2006-06-09T22:08:55Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2006-06-09T22:08:55Z"}, "message": "env.c (gomp_nthreads_var): Change to unsigned long.\n\n        * env.c (gomp_nthreads_var): Change to unsigned long.\n        (gomp_run_sched_chunk): Likewise.\n        (parse_unsigned_long): Rename from parse_num_threads and generalize.\n        (initialize_env): Initialize gomp_thread_attr.\n        * libgomp.h (gomp_nthreads_var): Update decl.\n        (gomp_run_sched_chunk): Likewise.\n        (gomp_thread_attr): Declare.\n        * team.c (gomp_thread_attr): Export.\n        (initialize_team): Don't initialize it.\n\nFrom-SVN: r114525", "tree": {"sha": "98eb377c774c5cc06d2f045c4c2f3a387829b617", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98eb377c774c5cc06d2f045c4c2f3a387829b617"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d0d1b24d8989e0f293291e6f31f08c40f332484c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d1b24d8989e0f293291e6f31f08c40f332484c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0d1b24d8989e0f293291e6f31f08c40f332484c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0d1b24d8989e0f293291e6f31f08c40f332484c/comments", "author": null, "committer": null, "parents": [{"sha": "45559ef18133512de27d755b6939f6c059ff0cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45559ef18133512de27d755b6939f6c059ff0cec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45559ef18133512de27d755b6939f6c059ff0cec"}], "stats": {"total": 73, "additions": 56, "deletions": 17}, "files": [{"sha": "4069e2dbb6d59d703b4d85bce8ce551aa7dc2ea5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=d0d1b24d8989e0f293291e6f31f08c40f332484c", "patch": "@@ -1,3 +1,15 @@\n+2006-06-09  Richard Henderson  <rth@redhat.com>\n+\n+\t* env.c (gomp_nthreads_var): Change to unsigned long.\n+\t(gomp_run_sched_chunk): Likewise.\n+\t(parse_unsigned_long): Rename from parse_num_threads and generalize.\n+\t(initialize_env): Initialize gomp_thread_attr.\n+\t* libgomp.h (gomp_nthreads_var): Update decl.\n+\t(gomp_run_sched_chunk): Likewise.\n+\t(gomp_thread_attr): Declare.\n+\t* team.c (gomp_thread_attr): Export.\n+\t(initialize_team): Don't initialize it.\n+\n 2006-06-09  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/27916"}, {"sha": "d42e68e6a3c05aff2ead889fd42a2d03370ff9e3", "filename": "libgomp/env.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Fenv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Fenv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fenv.c?ref=d0d1b24d8989e0f293291e6f31f08c40f332484c", "patch": "@@ -32,13 +32,15 @@\n #include \"libgomp_f.h\"\n #include <stdlib.h>\n #include <string.h>\n+#include <limits.h>\n+#include <errno.h>\n \n \n-unsigned gomp_nthreads_var = 1;\n+unsigned long gomp_nthreads_var = 1;\n bool gomp_dyn_var = false;\n bool gomp_nest_var = false;\n enum gomp_schedule_type gomp_run_sched_var = GFS_DYNAMIC;\n-unsigned gomp_run_sched_chunk = 1;\n+unsigned long gomp_run_sched_chunk = 1;\n \n /* Parse the OMP_SCHEDULE environment variable.  */\n \n@@ -98,33 +100,35 @@ parse_schedule (void)\n   return;\n }\n \n-/* Parse the OMP_NUM_THREADS environment varible.  Return true if one was\n+/* Parse an unsigned long environment varible.  Return true if one was\n    present and it was successfully parsed.  */\n \n static bool\n-parse_num_threads (void)\n+parse_unsigned_long (const char *name, unsigned long *pvalue)\n {\n   char *env, *end;\n+  unsigned long value;\n \n-  env = getenv (\"OMP_NUM_THREADS\");\n+  env = getenv (name);\n   if (env == NULL)\n     return false;\n \n   if (*env == '\\0')\n     goto invalid;\n \n-  gomp_nthreads_var = strtoul (env, &end, 10);\n+  value = strtoul (env, &end, 10);\n   if (*end != '\\0')\n     goto invalid;\n+\n+  *pvalue = value;\n   return true;\n \n  invalid:\n-  gomp_error (\"Invalid value for enviroment variable OMP_NUM_THREADS\");\n-  gomp_nthreads_var = 1;\n+  gomp_error (\"Invalid value for environment variable %s\", name);\n   return false;\n }\n \n-/* Parse a boolean value for environement variable NAME and store the \n+/* Parse a boolean value for environment variable NAME and store the \n    result in VALUE.  */\n \n static void\n@@ -141,20 +145,43 @@ parse_boolean (const char *name, bool *value)\n   else if (strcmp (env, \"false\") == 0)\n     *value = false;\n   else\n-    gomp_error (\"Invalid value for environement variable %s\", name);\n+    gomp_error (\"Invalid value for environment variable %s\", name);\n }\n \n static void __attribute__((constructor))\n initialize_env (void)\n {\n+  unsigned long stacksize;\n+\n   /* Do a compile time check that mkomp_h.pl did good job.  */\n   omp_check_defines ();\n \n   parse_schedule ();\n   parse_boolean (\"OMP_DYNAMIC\", &gomp_dyn_var);\n   parse_boolean (\"OMP_NESTED\", &gomp_nest_var);\n-  if (!parse_num_threads ())\n+  if (!parse_unsigned_long (\"OMP_NUM_THREADS\", &gomp_nthreads_var))\n     gomp_init_num_threads ();\n+\n+  /* Not strictly environment related, but ordering constructors is tricky.  */\n+  pthread_attr_init (&gomp_thread_attr);\n+  pthread_attr_setdetachstate (&gomp_thread_attr, PTHREAD_CREATE_DETACHED);\n+\n+  if (parse_unsigned_long (\"OMP_STACKSIZE\", &stacksize))\n+    {\n+      stacksize *= 1024;\n+      if (stacksize < PTHREAD_STACK_MIN)\n+\tgomp_error (\"Stack size less than minimum of %luk\",\n+\t\t    PTHREAD_STACK_MIN / 1024ul\n+\t\t    + (PTHREAD_STACK_MIN % 1024 != 0));\n+      else\n+\t{\n+\t  int err = pthread_attr_setstacksize (&gomp_thread_attr, stacksize);\n+\t  if (err == EINVAL)\n+\t    gomp_error (\"Stack size larger than system limit\");\n+\t  else if (err != 0)\n+\t    gomp_error (\"Stack size change failed: %s\", strerror (err));\n+\t}\n+    }\n }\n \n \f"}, {"sha": "47e68e69cfec3e59ef704f155ba2e87589ca220b", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=d0d1b24d8989e0f293291e6f31f08c40f332484c", "patch": "@@ -237,11 +237,14 @@ static inline struct gomp_thread *gomp_thread (void)\n /* These are the OpenMP 2.5 internal control variables described in\n    section 2.3.  At least those that correspond to environment variables.  */\n \n-extern unsigned gomp_nthreads_var;\n+extern unsigned long gomp_nthreads_var;\n extern bool gomp_dyn_var;\n extern bool gomp_nest_var;\n extern enum gomp_schedule_type gomp_run_sched_var;\n-extern unsigned gomp_run_sched_chunk;\n+extern unsigned long gomp_run_sched_chunk;\n+\n+/* The attributes to be used during thread creation.  */\n+extern pthread_attr_t gomp_thread_attr;\n \n /* Function prototypes.  */\n "}, {"sha": "060f4ea2c6b7ac69efa5154d6d9d414a216a96de", "filename": "libgomp/team.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Fteam.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d0d1b24d8989e0f293291e6f31f08c40f332484c/libgomp%2Fteam.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fteam.c?ref=d0d1b24d8989e0f293291e6f31f08c40f332484c", "patch": "@@ -39,7 +39,7 @@ static unsigned gomp_threads_size;\n static unsigned gomp_threads_used;\n \n /* This attribute contains PTHREAD_CREATE_DETACHED.  */\n-static pthread_attr_t gomp_thread_attr;\n+pthread_attr_t gomp_thread_attr;\n \n /* This barrier holds and releases threads waiting in gomp_threads.  */\n static gomp_barrier_t gomp_threads_dock;\n@@ -338,7 +338,4 @@ initialize_team (void)\n   thr = &initial_thread_tls_data;\n #endif\n   gomp_sem_init (&thr->release, 0);\n-\n-  pthread_attr_init (&gomp_thread_attr);\n-  pthread_attr_setdetachstate (&gomp_thread_attr, PTHREAD_CREATE_DETACHED);\n }"}]}