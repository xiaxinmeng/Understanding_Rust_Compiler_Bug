{"sha": "855a44ee8f73b4c53a0bad7780baa85d043b890f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODU1YTQ0ZWU4ZjczYjRjNTNhMGJhZDc3ODBiYWE4NWQwNDNiODkwZg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-06T18:12:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-11-06T18:12:45Z"}, "message": "compiler, runtime: Memcmp routine returns intgo.\n\nFrom-SVN: r193253", "tree": {"sha": "6c400558efbf8a6da2a288d4c1fa498c441915d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c400558efbf8a6da2a288d4c1fa498c441915d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/855a44ee8f73b4c53a0bad7780baa85d043b890f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855a44ee8f73b4c53a0bad7780baa85d043b890f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/855a44ee8f73b4c53a0bad7780baa85d043b890f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/855a44ee8f73b4c53a0bad7780baa85d043b890f/comments", "author": null, "committer": null, "parents": [{"sha": "d1a0e5330928f46c87640116401f00d0edc623b2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1a0e5330928f46c87640116401f00d0edc623b2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1a0e5330928f46c87640116401f00d0edc623b2"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "d6895336657b0b8b846ba27097a51e1a06a6f571", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a44ee8f73b4c53a0bad7780baa85d043b890f/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a44ee8f73b4c53a0bad7780baa85d043b890f/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=855a44ee8f73b4c53a0bad7780baa85d043b890f", "patch": "@@ -29,7 +29,7 @@\n // result types.\n \n // The standard C memcmp function, used for struct comparisons.\n-DEF_GO_RUNTIME(MEMCMP, \"memcmp\", P3(POINTER, POINTER, UINTPTR), R1(INT))\n+DEF_GO_RUNTIME(MEMCMP, \"__go_memcmp\", P3(POINTER, POINTER, UINTPTR), R1(INT))\n \n // Range over a string, returning the next index.\n DEF_GO_RUNTIME(STRINGITER, \"runtime.stringiter\", P2(STRING, INT), R1(INT))"}, {"sha": "4b244ad75a3abb8913f779d974a9b09a8e55267c", "filename": "libgo/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=855a44ee8f73b4c53a0bad7780baa85d043b890f", "patch": "@@ -462,6 +462,7 @@ runtime_files = \\\n \truntime/go-map-len.c \\\n \truntime/go-map-range.c \\\n \truntime/go-matherr.c \\\n+\truntime/go-memcmp.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-new-map.c \\"}, {"sha": "e70ded3644c9cd998213ea2bad37f17a22a8c49d", "filename": "libgo/Makefile.in", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=855a44ee8f73b4c53a0bad7780baa85d043b890f", "patch": "@@ -201,19 +201,19 @@ am__objects_5 = go-append.lo go-assert.lo go-assert-interface.lo \\\n \tgo-interface-compare.lo go-interface-eface-compare.lo \\\n \tgo-interface-val-compare.lo go-make-slice.lo go-map-delete.lo \\\n \tgo-map-index.lo go-map-len.lo go-map-range.lo go-matherr.lo \\\n-\tgo-nanotime.lo go-now.lo go-new-map.lo go-new.lo go-nosys.lo \\\n-\tgo-panic.lo go-print.lo go-recover.lo go-reflect-call.lo \\\n-\tgo-reflect-map.lo go-rune.lo go-runtime-error.lo go-setenv.lo \\\n-\tgo-signal.lo go-strcmp.lo go-string-to-byte-array.lo \\\n-\tgo-string-to-int-array.lo go-strplus.lo go-strslice.lo \\\n-\tgo-traceback.lo go-trampoline.lo go-type-complex.lo \\\n-\tgo-type-eface.lo go-type-error.lo go-type-float.lo \\\n-\tgo-type-identity.lo go-type-interface.lo go-type-string.lo \\\n-\tgo-typedesc-equal.lo go-typestring.lo go-unsafe-new.lo \\\n-\tgo-unsafe-newarray.lo go-unsafe-pointer.lo go-unwind.lo \\\n-\tchan.lo cpuprof.lo lfstack.lo $(am__objects_1) mcache.lo \\\n-\tmcentral.lo $(am__objects_2) mfinal.lo mfixalloc.lo mgc0.lo \\\n-\tmheap.lo msize.lo panic.lo parfor.lo print.lo proc.lo \\\n+\tgo-memcmp.lo go-nanotime.lo go-now.lo go-new-map.lo go-new.lo \\\n+\tgo-nosys.lo go-panic.lo go-print.lo go-recover.lo \\\n+\tgo-reflect-call.lo go-reflect-map.lo go-rune.lo \\\n+\tgo-runtime-error.lo go-setenv.lo go-signal.lo go-strcmp.lo \\\n+\tgo-string-to-byte-array.lo go-string-to-int-array.lo \\\n+\tgo-strplus.lo go-strslice.lo go-traceback.lo go-trampoline.lo \\\n+\tgo-type-complex.lo go-type-eface.lo go-type-error.lo \\\n+\tgo-type-float.lo go-type-identity.lo go-type-interface.lo \\\n+\tgo-type-string.lo go-typedesc-equal.lo go-typestring.lo \\\n+\tgo-unsafe-new.lo go-unsafe-newarray.lo go-unsafe-pointer.lo \\\n+\tgo-unwind.lo chan.lo cpuprof.lo lfstack.lo $(am__objects_1) \\\n+\tmcache.lo mcentral.lo $(am__objects_2) mfinal.lo mfixalloc.lo \\\n+\tmgc0.lo mheap.lo msize.lo panic.lo parfor.lo print.lo proc.lo \\\n \truntime.lo signal_unix.lo thread.lo yield.lo $(am__objects_3) \\\n \tiface.lo malloc.lo map.lo mprof.lo reflect.lo runtime1.lo \\\n \tsema.lo sigqueue.lo string.lo time.lo $(am__objects_4)\n@@ -793,6 +793,7 @@ runtime_files = \\\n \truntime/go-map-len.c \\\n \truntime/go-map-range.c \\\n \truntime/go-matherr.c \\\n+\truntime/go-memcmp.c \\\n \truntime/go-nanotime.c \\\n \truntime/go-now.c \\\n \truntime/go-new-map.c \\\n@@ -2425,6 +2426,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-map-len.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-map-range.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-matherr.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-memcmp.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-nanotime.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new-map.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/go-new.Plo@am__quote@\n@@ -2731,6 +2733,13 @@ go-matherr.lo: runtime/go-matherr.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-matherr.lo `test -f 'runtime/go-matherr.c' || echo '$(srcdir)/'`runtime/go-matherr.c\n \n+go-memcmp.lo: runtime/go-memcmp.c\n+@am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-memcmp.lo -MD -MP -MF $(DEPDIR)/go-memcmp.Tpo -c -o go-memcmp.lo `test -f 'runtime/go-memcmp.c' || echo '$(srcdir)/'`runtime/go-memcmp.c\n+@am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-memcmp.Tpo $(DEPDIR)/go-memcmp.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tsource='runtime/go-memcmp.c' object='go-memcmp.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o go-memcmp.lo `test -f 'runtime/go-memcmp.c' || echo '$(srcdir)/'`runtime/go-memcmp.c\n+\n go-nanotime.lo: runtime/go-nanotime.c\n @am__fastdepCC_TRUE@\t$(LIBTOOL)  --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT go-nanotime.lo -MD -MP -MF $(DEPDIR)/go-nanotime.Tpo -c -o go-nanotime.lo `test -f 'runtime/go-nanotime.c' || echo '$(srcdir)/'`runtime/go-nanotime.c\n @am__fastdepCC_TRUE@\t$(am__mv) $(DEPDIR)/go-nanotime.Tpo $(DEPDIR)/go-nanotime.Plo"}, {"sha": "78a356b08d0f1262a8695434886a8a5a665a7748", "filename": "libgo/runtime/go-memcmp.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2Fruntime%2Fgo-memcmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/855a44ee8f73b4c53a0bad7780baa85d043b890f/libgo%2Fruntime%2Fgo-memcmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-memcmp.c?ref=855a44ee8f73b4c53a0bad7780baa85d043b890f", "patch": "@@ -0,0 +1,13 @@\n+/* go-memcmp.c -- the go memory comparison function.\n+\n+   Copyright 2012 The Go Authors. All rights reserved.\n+   Use of this source code is governed by a BSD-style\n+   license that can be found in the LICENSE file.  */\n+\n+#include \"runtime.h\"\n+\n+intgo\n+__go_memcmp (const void *p1, const void *p2, uintptr len)\n+{\n+  return __builtin_memcmp (p1, p2, len);\n+}"}]}