{"sha": "cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2MyNjliYjZkOWYxNTM4ODcwZGM5NGJjM2I4Y2FkOGY3NDlkMTIwNA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2013-11-18T14:51:26Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2013-11-18T14:51:26Z"}, "message": "decl.c, [...]: Replace host_integerp (..., 1) with tree_fits_uhwi_p throughout.\n\ngcc/ada/\n\t* gcc-interface/decl.c, gcc-interface/misc.c, gcc-interface/utils.c:\n\tReplace host_integerp (..., 1) with tree_fits_uhwi_p throughout.\n\ngcc/c-family/\n\t* c-ada-spec.c, c-common.c, c-pretty-print.c: Replace\n\thost_integerp (..., 1) with tree_fits_uhwi_p throughout.\n\ngcc/cp/\n\t* decl.c: Replace host_integerp (..., 1) with tree_fits_uhwi_p\n\tthroughout.\n\ngcc/\n\t* builtins.c, config/alpha/alpha.c, config/iq2000/iq2000.c,\n\tconfig/mips/mips.c, dbxout.c, dwarf2out.c, expr.c, fold-const.c,\n\tgimple-fold.c, godump.c, omp-low.c, predict.c, sdbout.c, stor-layout.c,\n\ttree-dfa.c, tree-sra.c, tree-ssa-forwprop.c, tree-ssa-loop-prefetch.c,\n\ttree-ssa-phiopt.c, tree-ssa-sccvn.c, tree-ssa-strlen.c,\n\ttree-ssa-structalias.c, tree-vect-data-refs.c, tree-vect-patterns.c,\n\ttree.c, varasm.c, alias.c, cfgexpand.c, config/aarch64/aarch64.c,\n\tconfig/arm/arm.c, config/epiphany/epiphany.c, config/i386/i386.c,\n\tconfig/m32c/m32c-pragma.c, config/mep/mep-pragma.c,\n\tconfig/rs6000/rs6000.c, config/sparc/sparc.c, emit-rtl.c, function.c,\n\tgimplify.c, ipa-prop.c, stmt.c, trans-mem.c, tree-cfg.c,\n\ttree-object-size.c, tree-ssa-ccp.c, tree-ssa-loop-ivcanon.c,\n\ttree-stdarg.c, tree-switch-conversion.c, tree-vect-generic.c,\n\ttree-vrp.c, tsan.c, ubsan.c: Replace host_integerp (..., 1) with\n\ttree_fits_uhwi_p throughout.\n\nFrom-SVN: r204956", "tree": {"sha": "c2393ba420fc6d0d88f8cff690816f0c2d13f09b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2393ba420fc6d0d88f8cff690816f0c2d13f09b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9541ffee8c7b67cc5ab3bc113dbfd84d0a81feab"}], "stats": {"total": 579, "additions": 306, "deletions": 273}, "files": [{"sha": "e91f89564cb8a0e63874efe32118b0fa9b7b9e0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1,3 +1,21 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* builtins.c, config/alpha/alpha.c, config/iq2000/iq2000.c,\n+\tconfig/mips/mips.c, dbxout.c, dwarf2out.c, expr.c, fold-const.c,\n+\tgimple-fold.c, godump.c, omp-low.c, predict.c, sdbout.c, stor-layout.c,\n+\ttree-dfa.c, tree-sra.c, tree-ssa-forwprop.c, tree-ssa-loop-prefetch.c,\n+\ttree-ssa-phiopt.c, tree-ssa-sccvn.c, tree-ssa-strlen.c,\n+\ttree-ssa-structalias.c, tree-vect-data-refs.c, tree-vect-patterns.c,\n+\ttree.c, varasm.c, alias.c, cfgexpand.c, config/aarch64/aarch64.c,\n+\tconfig/arm/arm.c, config/epiphany/epiphany.c, config/i386/i386.c,\n+\tconfig/m32c/m32c-pragma.c, config/mep/mep-pragma.c,\n+\tconfig/rs6000/rs6000.c, config/sparc/sparc.c, emit-rtl.c, function.c,\n+\tgimplify.c, ipa-prop.c, stmt.c, trans-mem.c, tree-cfg.c,\n+\ttree-object-size.c, tree-ssa-ccp.c, tree-ssa-loop-ivcanon.c,\n+\ttree-stdarg.c, tree-switch-conversion.c, tree-vect-generic.c,\n+\ttree-vrp.c, tsan.c, ubsan.c: Replace host_integerp (..., 1) with\n+\ttree_fits_uhwi_p throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* builtins.c, config/alpha/alpha.c, config/c6x/predicates.md,"}, {"sha": "3b9af6edfacbb577287d66fc882a87014b77d21d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/decl.c, gcc-interface/misc.c, gcc-interface/utils.c:\n+\tReplace host_integerp (..., 1) with tree_fits_uhwi_p throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* gcc-interface/cuintp.c: Replace host_integerp (..., 0) with"}, {"sha": "3ad53c4120d88de321a91cd621d488b6bb517be2", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -837,7 +837,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\talign_cap = get_mode_alignment (ptr_mode);\n \t      }\n \n-\t    if (!host_integerp (TYPE_SIZE (gnu_type), 1)\n+\t    if (!tree_fits_uhwi_p (TYPE_SIZE (gnu_type))\n \t\t|| compare_tree_int (TYPE_SIZE (gnu_type), size_cap) > 0)\n \t      align = 0;\n \t    else if (compare_tree_int (TYPE_SIZE (gnu_type), align_cap) > 0)\n@@ -1482,7 +1482,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    && const_flag\n \t    && gnu_expr && TREE_CONSTANT (gnu_expr)\n \t    && AGGREGATE_TYPE_P (gnu_type)\n-\t    && host_integerp (TYPE_SIZE_UNIT (gnu_type), 1)\n+\t    && tree_fits_uhwi_p (TYPE_SIZE_UNIT (gnu_type))\n \t    && !(TYPE_IS_PADDING_P (gnu_type)\n \t\t && !host_integerp (TYPE_SIZE_UNIT\n \t\t\t\t    (TREE_TYPE (TYPE_FIELDS (gnu_type))), 1)))\n@@ -3497,7 +3497,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t\t\tgnu_size = DECL_SIZE (gnu_old_field);\n \t\t\tif (RECORD_OR_UNION_TYPE_P (gnu_field_type)\n \t\t\t    && !TYPE_FAT_POINTER_P (gnu_field_type)\n-\t\t\t    && host_integerp (TYPE_SIZE (gnu_field_type), 1))\n+\t\t\t    && tree_fits_uhwi_p (TYPE_SIZE (gnu_field_type)))\n \t\t\t  gnu_field_type\n \t\t\t    = make_packable_type (gnu_field_type, true);\n \t\t      }\n@@ -4922,20 +4922,20 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \n \t      /* Consider an alignment as suspicious if the alignment/size\n \t\t ratio is greater or equal to the byte/bit ratio.  */\n-\t      if (host_integerp (size, 1)\n+\t      if (tree_fits_uhwi_p (size)\n \t\t  && align >= TREE_INT_CST_LOW (size) * BITS_PER_UNIT)\n \t\tpost_error_ne (\"?suspiciously large alignment specified for&\",\n \t\t\t       Expression (Alignment_Clause (gnat_entity)),\n \t\t\t       gnat_entity);\n \t    }\n \t}\n       else if (Is_Atomic (gnat_entity) && !gnu_size\n-\t       && host_integerp (TYPE_SIZE (gnu_type), 1)\n+\t       && tree_fits_uhwi_p (TYPE_SIZE (gnu_type))\n \t       && integer_pow2p (TYPE_SIZE (gnu_type)))\n \talign = MIN (BIGGEST_ALIGNMENT,\n \t\t     tree_low_cst (TYPE_SIZE (gnu_type), 1));\n       else if (Is_Atomic (gnat_entity) && gnu_size\n-\t       && host_integerp (gnu_size, 1)\n+\t       && tree_fits_uhwi_p (gnu_size)\n \t       && integer_pow2p (gnu_size))\n \talign = MIN (BIGGEST_ALIGNMENT, tree_low_cst (gnu_size, 1));\n \n@@ -5583,7 +5583,7 @@ gnat_to_gnu_component_type (Entity_Id gnat_array, bool definition,\n       && !Strict_Alignment (gnat_type)\n       && RECORD_OR_UNION_TYPE_P (gnu_type)\n       && !TYPE_FAT_POINTER_P (gnu_type)\n-      && host_integerp (TYPE_SIZE (gnu_type), 1))\n+      && tree_fits_uhwi_p (TYPE_SIZE (gnu_type)))\n     gnu_type = make_packable_type (gnu_type, false);\n \n   if (Has_Atomic_Components (gnat_array))\n@@ -6507,7 +6507,7 @@ gnat_to_gnu_field (Entity_Id gnat_field, tree gnu_record_type, int packed,\n   if (!needs_strict_alignment\n       && RECORD_OR_UNION_TYPE_P (gnu_field_type)\n       && !TYPE_FAT_POINTER_P (gnu_field_type)\n-      && host_integerp (TYPE_SIZE (gnu_field_type), 1)\n+      && tree_fits_uhwi_p (TYPE_SIZE (gnu_field_type))\n       && (packed == 1\n \t  || (gnu_size\n \t      && (tree_int_cst_lt (gnu_size, TYPE_SIZE (gnu_field_type))"}, {"sha": "a82f6fd8f82cf68352938bfa44e8a295429c3b6c", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -591,7 +591,7 @@ gnat_type_max_size (const_tree gnu_type)\n \n   /* If we don't have a constant, see what we can get from TYPE_ADA_SIZE,\n      which should stay untouched.  */\n-  if (!host_integerp (max_unitsize, 1)\n+  if (!tree_fits_uhwi_p (max_unitsize)\n       && RECORD_OR_UNION_TYPE_P (gnu_type)\n       && !TYPE_FAT_POINTER_P (gnu_type)\n       && TYPE_ADA_SIZE (gnu_type))\n@@ -600,7 +600,7 @@ gnat_type_max_size (const_tree gnu_type)\n \n       /* If we have succeeded in finding a constant, round it up to the\n \t type's alignment and return the result in units.  */\n-      if (host_integerp (max_adasize, 1))\n+      if (tree_fits_uhwi_p (max_adasize))\n \tmax_unitsize\n \t  = size_binop (CEIL_DIV_EXPR,\n \t\t\tround_up (max_adasize, TYPE_ALIGN (gnu_type)),"}, {"sha": "4588c52cf19fa1db3ff5907d15838c6eae6f3b78", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -806,7 +806,7 @@ make_packable_type (tree type, bool in_record)\n \n       /* Do not try to shrink the size if the RM size is not constant.  */\n       if (TYPE_CONTAINS_TEMPLATE_P (type)\n-\t  || !host_integerp (TYPE_ADA_SIZE (type), 1))\n+\t  || !tree_fits_uhwi_p (TYPE_ADA_SIZE (type)))\n \treturn type;\n \n       /* Round the RM size up to a unit boundary to get the minimal size\n@@ -832,7 +832,7 @@ make_packable_type (tree type, bool in_record)\n \n       if (RECORD_OR_UNION_TYPE_P (new_field_type)\n \t  && !TYPE_FAT_POINTER_P (new_field_type)\n-\t  && host_integerp (TYPE_SIZE (new_field_type), 1))\n+\t  && tree_fits_uhwi_p (TYPE_SIZE (new_field_type)))\n \tnew_field_type = make_packable_type (new_field_type, true);\n \n       /* However, for the last field in a not already packed record type\n@@ -915,7 +915,7 @@ make_type_from_size (tree type, tree size_tree, bool for_biased)\n \n   /* If size indicates an error, just return TYPE to avoid propagating\n      the error.  Likewise if it's too large to represent.  */\n-  if (!size_tree || !host_integerp (size_tree, 1))\n+  if (!size_tree || !tree_fits_uhwi_p (size_tree))\n     return type;\n \n   size = tree_low_cst (size_tree, 1);\n@@ -1741,7 +1741,7 @@ rest_of_record_type_compilation (tree record_type)\n \n \t  if (!pos\n \t      && TREE_CODE (curpos) == MULT_EXPR\n-\t      && host_integerp (TREE_OPERAND (curpos, 1), 1))\n+\t      && tree_fits_uhwi_p (TREE_OPERAND (curpos, 1)))\n \t    {\n \t      tree offset = TREE_OPERAND (curpos, 0);\n \t      align = tree_low_cst (TREE_OPERAND (curpos, 1), 1);\n@@ -1751,7 +1751,7 @@ rest_of_record_type_compilation (tree record_type)\n \t    }\n \t  else if (!pos\n \t\t   && TREE_CODE (curpos) == PLUS_EXPR\n-\t\t   && host_integerp (TREE_OPERAND (curpos, 1), 1)\n+\t\t   && tree_fits_uhwi_p (TREE_OPERAND (curpos, 1))\n \t\t   && TREE_CODE (TREE_OPERAND (curpos, 0)) == MULT_EXPR\n \t\t   && host_integerp\n \t\t      (TREE_OPERAND (TREE_OPERAND (curpos, 0), 1), 1))\n@@ -2377,7 +2377,7 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n \t that an alignment of 0 is taken as infinite.  */\n       unsigned int known_align;\n \n-      if (host_integerp (pos, 1))\n+      if (tree_fits_uhwi_p (pos))\n \tknown_align = tree_low_cst (pos, 1) & - tree_low_cst (pos, 1);\n       else\n \tknown_align = BITS_PER_UNIT;\n@@ -2388,7 +2388,7 @@ create_field_decl (tree field_name, tree field_type, tree record_type,\n \n       layout_decl (field_decl, known_align);\n       SET_DECL_OFFSET_ALIGN (field_decl,\n-\t\t\t     host_integerp (pos, 1) ? BIGGEST_ALIGNMENT\n+\t\t\t     tree_fits_uhwi_p (pos) ? BIGGEST_ALIGNMENT\n \t\t\t     : BITS_PER_UNIT);\n       pos_from_bit (&DECL_FIELD_OFFSET (field_decl),\n \t\t    &DECL_FIELD_BIT_OFFSET (field_decl),\n@@ -2548,7 +2548,7 @@ invalidate_global_renaming_pointers (void)\n bool\n value_factor_p (tree value, HOST_WIDE_INT factor)\n {\n-  if (host_integerp (value, 1))\n+  if (tree_fits_uhwi_p (value))\n     return tree_low_cst (value, 1) % factor == 0;\n \n   if (TREE_CODE (value) == MULT_EXPR)\n@@ -2608,14 +2608,14 @@ potential_alignment_gap (tree prev_field, tree curr_field, tree offset)\n   /* If the distance between the end of prev_field and the beginning of\n      curr_field is constant, then there is a gap if the value of this\n      constant is not null. */\n-  if (offset && host_integerp (offset, 1))\n+  if (offset && tree_fits_uhwi_p (offset))\n     return !integer_zerop (offset);\n \n   /* If the size and position of the previous field are constant,\n      then check the sum of this size and position. There will be a gap\n      iff it is not multiple of the current field alignment. */\n-  if (host_integerp (DECL_SIZE (prev_field), 1)\n-      && host_integerp (bit_position (prev_field), 1))\n+  if (tree_fits_uhwi_p (DECL_SIZE (prev_field))\n+      && tree_fits_uhwi_p (bit_position (prev_field)))\n     return ((tree_low_cst (bit_position (prev_field), 1)\n \t     + tree_low_cst (DECL_SIZE (prev_field), 1))\n \t    % DECL_ALIGN (curr_field) != 0);\n@@ -6302,7 +6302,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   size = TREE_VALUE (args);\n \n-  if (!host_integerp (size, 1))\n+  if (!tree_fits_uhwi_p (size))\n     {\n       warning (OPT_Wattributes, \"%qs attribute ignored\",\n \t       IDENTIFIER_POINTER (name));\n@@ -6334,7 +6334,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n       || (!SCALAR_FLOAT_MODE_P (orig_mode)\n \t  && GET_MODE_CLASS (orig_mode) != MODE_INT\n \t  && !ALL_SCALAR_FIXED_POINT_MODE_P (orig_mode))\n-      || !host_integerp (TYPE_SIZE_UNIT (type), 1)\n+      || !tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n       || TREE_CODE (type) == BOOLEAN_TYPE)\n     {\n       error (\"invalid vector type for attribute %qs\",\n@@ -6403,7 +6403,7 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n      bases, and this attribute is for binding implementors, not end-users, so\n      we should never get there from legitimate explicit uses.  */\n \n-  if (!host_integerp (rep_size, 1))\n+  if (!tree_fits_uhwi_p (rep_size))\n     return NULL_TREE;\n \n   /* Get the element type/mode and check this is something we know\n@@ -6418,7 +6418,7 @@ handle_vector_type_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n       || (!SCALAR_FLOAT_MODE_P (elem_mode)\n \t  && GET_MODE_CLASS (elem_mode) != MODE_INT\n \t  && !ALL_SCALAR_FIXED_POINT_MODE_P (elem_mode))\n-      || !host_integerp (TYPE_SIZE_UNIT (elem_type), 1))\n+      || !tree_fits_uhwi_p (TYPE_SIZE_UNIT (elem_type)))\n     {\n       error (\"invalid element type for attribute %qs\",\n \t     IDENTIFIER_POINTER (name));"}, {"sha": "b874a045efa222a1bc2a98a49dacf00ff911c476", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -338,7 +338,7 @@ ao_ref_from_mem (ao_ref *ref, const_rtx mem)\n   if (MEM_EXPR (mem) != get_spill_slot_decl (false)\n       && (ref->offset < 0\n \t  || (DECL_P (ref->base)\n-\t      && (!host_integerp (DECL_SIZE (ref->base), 1)\n+\t      && (!tree_fits_uhwi_p (DECL_SIZE (ref->base))\n \t\t  || (TREE_INT_CST_LOW (DECL_SIZE ((ref->base)))\n \t\t      < (unsigned HOST_WIDE_INT)(ref->offset + ref->size))))))\n     return false;\n@@ -2347,7 +2347,7 @@ adjust_offset_for_component_ref (tree x, bool *known_p,\n       tree xoffset = component_ref_field_offset (x);\n       tree field = TREE_OPERAND (x, 1);\n \n-      if (! host_integerp (xoffset, 1))\n+      if (! tree_fits_uhwi_p (xoffset))\n \t{\n \t  *known_p = false;\n \t  return;"}, {"sha": "32812002502fb90da721b956f2bde91e4eff7ada", "filename": "gcc/builtins.c", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -658,7 +658,7 @@ c_getstr (tree src)\n \n   if (offset_node == 0)\n     return TREE_STRING_POINTER (src);\n-  else if (!host_integerp (offset_node, 1)\n+  else if (!tree_fits_uhwi_p (offset_node)\n \t   || compare_tree_int (offset_node, TREE_STRING_LENGTH (src) - 1) > 0)\n     return 0;\n \n@@ -3125,11 +3125,11 @@ determine_block_size (tree len, rtx len_rtx,\n \t}\n       else\n \t{\n-\t  if (host_integerp (TYPE_MIN_VALUE (TREE_TYPE (len)), 1))\n+\t  if (tree_fits_uhwi_p (TYPE_MIN_VALUE (TREE_TYPE (len))))\n \t    *min_size = tree_low_cst (TYPE_MIN_VALUE (TREE_TYPE (len)), 1);\n \t  else\n \t    *min_size = 0;\n-\t  if (host_integerp (TYPE_MAX_VALUE (TREE_TYPE (len)), 1))\n+\t  if (tree_fits_uhwi_p (TYPE_MAX_VALUE (TREE_TYPE (len))))\n \t    *max_size = tree_low_cst (TYPE_MAX_VALUE (TREE_TYPE (len)), 1);\n \t  else\n \t    *max_size = GET_MODE_MASK (GET_MODE (len_rtx));\n@@ -3279,7 +3279,7 @@ expand_builtin_mempcpy_args (tree dest, tree src, tree len,\n \treturn NULL_RTX;\n \n       /* If LEN is not constant, call the normal function.  */\n-      if (! host_integerp (len, 1))\n+      if (! tree_fits_uhwi_p (len))\n \treturn NULL_RTX;\n \n       len_rtx = expand_normal (len);\n@@ -3514,7 +3514,7 @@ expand_builtin_strncpy (tree exp, rtx target)\n       tree slen = c_strlen (src, 1);\n \n       /* We must be passed a constant len and src parameter.  */\n-      if (!host_integerp (len, 1) || !slen || !host_integerp (slen, 1))\n+      if (!tree_fits_uhwi_p (len) || !slen || !tree_fits_uhwi_p (slen))\n \treturn NULL_RTX;\n \n       slen = size_binop_loc (loc, PLUS_EXPR, slen, ssize_int (1));\n@@ -3528,7 +3528,7 @@ expand_builtin_strncpy (tree exp, rtx target)\n \t  const char *p = c_getstr (src);\n \t  rtx dest_mem;\n \n-\t  if (!p || dest_align == 0 || !host_integerp (len, 1)\n+\t  if (!p || dest_align == 0 || !tree_fits_uhwi_p (len)\n \t      || !can_store_by_pieces (tree_low_cst (len, 1),\n \t\t\t\t       builtin_strncpy_read_str,\n \t\t\t\t       CONST_CAST (char *, p),\n@@ -3672,7 +3672,7 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n        * the coefficients by pieces (in the required modes).\n        * We can't pass builtin_memset_gen_str as that emits RTL.  */\n       c = 1;\n-      if (host_integerp (len, 1)\n+      if (tree_fits_uhwi_p (len)\n \t  && can_store_by_pieces (tree_low_cst (len, 1),\n \t\t\t\t  builtin_memset_read_str, &c, dest_align,\n \t\t\t\t  true))\n@@ -3697,7 +3697,7 @@ expand_builtin_memset_args (tree dest, tree val, tree len,\n \n   if (c)\n     {\n-      if (host_integerp (len, 1)\n+      if (tree_fits_uhwi_p (len)\n \t  && can_store_by_pieces (tree_low_cst (len, 1),\n \t\t\t\t  builtin_memset_read_str, &c, dest_align,\n \t\t\t\t  true))\n@@ -4394,7 +4394,7 @@ expand_builtin_frame_address (tree fndecl, tree exp)\n   if (call_expr_nargs (exp) == 0)\n     /* Warning about missing arg was already issued.  */\n     return const0_rtx;\n-  else if (! host_integerp (CALL_EXPR_ARG (exp, 0), 1))\n+  else if (! tree_fits_uhwi_p (CALL_EXPR_ARG (exp, 0)))\n     {\n       if (DECL_FUNCTION_CODE (fndecl) == BUILT_IN_FRAME_ADDRESS)\n \terror (\"invalid argument to %<__builtin_frame_address%>\");\n@@ -8646,7 +8646,7 @@ fold_builtin_memset (location_t loc, tree dest, tree c, tree len,\n       || ! validate_arg (len, INTEGER_TYPE))\n     return NULL_TREE;\n \n-  if (! host_integerp (len, 1))\n+  if (! tree_fits_uhwi_p (len))\n     return NULL_TREE;\n \n   /* If the LEN parameter is zero, return DEST.  */\n@@ -8779,7 +8779,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t  if (!dest_align || !src_align)\n \t    return NULL_TREE;\n \t  if (readonly_data_expr (src)\n-\t      || (host_integerp (len, 1)\n+\t      || (tree_fits_uhwi_p (len)\n \t\t  && (MIN (src_align, dest_align) / BITS_PER_UNIT\n \t\t      >= (unsigned HOST_WIDE_INT) tree_low_cst (len, 1))))\n \t    {\n@@ -8804,7 +8804,7 @@ fold_builtin_memory_op (location_t loc, tree dest, tree src,\n \t      destvar = TREE_OPERAND (dest, 0);\n \t      dest_base = get_ref_base_and_extent (destvar, &dest_offset,\n \t\t\t\t\t\t   &size, &maxsize);\n-\t      if (host_integerp (len, 1))\n+\t      if (tree_fits_uhwi_p (len))\n \t\tmaxsize = tree_low_cst (len, 1);\n \t      else\n \t\tmaxsize = -1;\n@@ -9159,7 +9159,7 @@ fold_builtin_memchr (location_t loc, tree arg1, tree arg2, tree len, tree type)\n       const char *p1;\n \n       if (TREE_CODE (arg2) != INTEGER_CST\n-\t  || !host_integerp (len, 1))\n+\t  || !tree_fits_uhwi_p (len))\n \treturn NULL_TREE;\n \n       p1 = c_getstr (arg1);\n@@ -9211,7 +9211,7 @@ fold_builtin_memcmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   /* If all arguments are constant, and the value of len is not greater\n      than the lengths of arg1 and arg2, evaluate at compile-time.  */\n-  if (host_integerp (len, 1) && p1 && p2\n+  if (tree_fits_uhwi_p (len) && p1 && p2\n       && compare_tree_int (len, strlen (p1) + 1) <= 0\n       && compare_tree_int (len, strlen (p2) + 1) <= 0)\n     {\n@@ -9227,7 +9227,7 @@ fold_builtin_memcmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   /* If len parameter is one, return an expression corresponding to\n      (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n-  if (host_integerp (len, 1) && tree_low_cst (len, 1) == 1)\n+  if (tree_fits_uhwi_p (len) && tree_low_cst (len, 1) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n       tree cst_uchar_ptr_node\n@@ -9339,7 +9339,7 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n   p1 = c_getstr (arg1);\n   p2 = c_getstr (arg2);\n \n-  if (host_integerp (len, 1) && p1 && p2)\n+  if (tree_fits_uhwi_p (len) && p1 && p2)\n     {\n       const int i = strncmp (p1, p2, tree_low_cst (len, 1));\n       if (i > 0)\n@@ -9387,7 +9387,7 @@ fold_builtin_strncmp (location_t loc, tree arg1, tree arg2, tree len)\n \n   /* If len parameter is one, return an expression corresponding to\n      (*(const unsigned char*)arg1 - (const unsigned char*)arg2).  */\n-  if (host_integerp (len, 1) && tree_low_cst (len, 1) == 1)\n+  if (tree_fits_uhwi_p (len) && tree_low_cst (len, 1) == 1)\n     {\n       tree cst_uchar_node = build_type_variant (unsigned_char_type_node, 1, 0);\n       tree cst_uchar_ptr_node\n@@ -12242,7 +12242,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n   if (orig && !validate_arg (orig, POINTER_TYPE))\n     return NULL_TREE;\n \n-  if (!host_integerp (destsize, 1))\n+  if (!tree_fits_uhwi_p (destsize))\n     return NULL_TREE;\n \n   /* Check whether the format is a literal string constant.  */\n@@ -12301,7 +12301,7 @@ fold_builtin_snprintf (location_t loc, tree dest, tree destsize, tree fmt,\n \treturn NULL_TREE;\n \n       retval = c_strlen (orig, 1);\n-      if (!retval || !host_integerp (retval, 1))  \n+      if (!retval || !tree_fits_uhwi_p (retval))\n \treturn NULL_TREE;\n \n       origlen = tree_low_cst (retval, 1);\n@@ -12395,10 +12395,10 @@ expand_builtin_memory_chk (tree exp, rtx target, enum machine_mode mode,\n   len = CALL_EXPR_ARG (exp, 2);\n   size = CALL_EXPR_ARG (exp, 3);\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_RTX;\n \n-  if (host_integerp (len, 1) || integer_all_onesp (size))\n+  if (tree_fits_uhwi_p (len) || integer_all_onesp (size))\n     {\n       tree fn;\n \n@@ -12529,22 +12529,22 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n   if (!len || !size)\n     return;\n \n-  if (! host_integerp (size, 1) || integer_all_onesp (size))\n+  if (! tree_fits_uhwi_p (size) || integer_all_onesp (size))\n     return;\n \n   if (is_strlen)\n     {\n       len = c_strlen (len, 1);\n-      if (! len || ! host_integerp (len, 1) || tree_int_cst_lt (len, size))\n+      if (! len || ! tree_fits_uhwi_p (len) || tree_int_cst_lt (len, size))\n \treturn;\n     }\n   else if (fcode == BUILT_IN_STRNCAT_CHK)\n     {\n       tree src = CALL_EXPR_ARG (exp, 1);\n-      if (! src || ! host_integerp (len, 1) || tree_int_cst_lt (len, size))\n+      if (! src || ! tree_fits_uhwi_p (len) || tree_int_cst_lt (len, size))\n \treturn;\n       src = c_strlen (src, 1);\n-      if (! src || ! host_integerp (src, 1))\n+      if (! src || ! tree_fits_uhwi_p (src))\n \t{\n \t  warning_at (loc, 0, \"%Kcall to %D might overflow destination buffer\",\n \t\t      exp, get_callee_fndecl (exp));\n@@ -12553,7 +12553,7 @@ maybe_emit_chk_warning (tree exp, enum built_in_function fcode)\n       else if (tree_int_cst_lt (src, size))\n \treturn;\n     }\n-  else if (! host_integerp (len, 1) || ! tree_int_cst_lt (size, len))\n+  else if (! tree_fits_uhwi_p (len) || ! tree_int_cst_lt (size, len))\n     return;\n \n   warning_at (loc, 0, \"%Kcall to %D will always overflow destination buffer\",\n@@ -12577,7 +12577,7 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n   size = CALL_EXPR_ARG (exp, 2);\n   fmt = CALL_EXPR_ARG (exp, 3);\n \n-  if (! host_integerp (size, 1) || integer_all_onesp (size))\n+  if (! tree_fits_uhwi_p (size) || integer_all_onesp (size))\n     return;\n \n   /* Check whether the format is a literal string constant.  */\n@@ -12605,7 +12605,7 @@ maybe_emit_sprintf_chk_warning (tree exp, enum built_in_function fcode)\n \treturn;\n \n       len = c_strlen (arg, 1);\n-      if (!len || ! host_integerp (len, 1))\n+      if (!len || ! tree_fits_uhwi_p (len))\n \treturn;\n     }\n   else\n@@ -12726,17 +12726,17 @@ fold_builtin_memory_chk (location_t loc, tree fndecl,\n \t}\n     }\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   if (! integer_all_onesp (size))\n     {\n-      if (! host_integerp (len, 1))\n+      if (! tree_fits_uhwi_p (len))\n \t{\n \t  /* If LEN is not constant, try MAXLEN too.\n \t     For MAXLEN only allow optimizing into non-_ocs function\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n-\t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n+\t  if (maxlen == NULL_TREE || ! tree_fits_uhwi_p (maxlen))\n \t    {\n \t      if (fcode == BUILT_IN_MEMPCPY_CHK && ignore)\n \t\t{\n@@ -12808,18 +12808,18 @@ fold_builtin_stxcpy_chk (location_t loc, tree fndecl, tree dest,\n   if (fcode == BUILT_IN_STRCPY_CHK && operand_equal_p (src, dest, 0))\n     return fold_convert_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), dest);\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   if (! integer_all_onesp (size))\n     {\n       len = c_strlen (src, 1);\n-      if (! len || ! host_integerp (len, 1))\n+      if (! len || ! tree_fits_uhwi_p (len))\n \t{\n \t  /* If LEN is not constant, try MAXLEN too.\n \t     For MAXLEN only allow optimizing into non-_ocs function\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n-\t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n+\t  if (maxlen == NULL_TREE || ! tree_fits_uhwi_p (maxlen))\n \t    {\n \t      if (fcode == BUILT_IN_STPCPY_CHK)\n \t\t{\n@@ -12895,17 +12895,17 @@ fold_builtin_stxncpy_chk (location_t loc, tree dest, tree src,\n          return build_call_expr_loc (loc, fn, 4, dest, src, len, size);\n     }\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   if (! integer_all_onesp (size))\n     {\n-      if (! host_integerp (len, 1))\n+      if (! tree_fits_uhwi_p (len))\n \t{\n \t  /* If LEN is not constant, try MAXLEN too.\n \t     For MAXLEN only allow optimizing into non-_ocs function\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n-\t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n+\t  if (maxlen == NULL_TREE || ! tree_fits_uhwi_p (maxlen))\n \t    return NULL_TREE;\n \t}\n       else\n@@ -12944,7 +12944,7 @@ fold_builtin_strcat_chk (location_t loc, tree fndecl, tree dest,\n   if (p && *p == '\\0')\n     return omit_one_operand_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), dest, src);\n \n-  if (! host_integerp (size, 1) || ! integer_all_onesp (size))\n+  if (! tree_fits_uhwi_p (size) || ! integer_all_onesp (size))\n     return NULL_TREE;\n \n   /* If __builtin_strcat_chk is used, assume strcat is available.  */\n@@ -12978,15 +12978,15 @@ fold_builtin_strncat_chk (location_t loc, tree fndecl,\n   else if (integer_zerop (len))\n     return omit_one_operand_loc (loc, TREE_TYPE (TREE_TYPE (fndecl)), dest, src);\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   if (! integer_all_onesp (size))\n     {\n       tree src_len = c_strlen (src, 1);\n       if (src_len\n-\t  && host_integerp (src_len, 1)\n-\t  && host_integerp (len, 1)\n+\t  && tree_fits_uhwi_p (src_len)\n+\t  && tree_fits_uhwi_p (len)\n \t  && ! tree_int_cst_lt (len, src_len))\n \t{\n \t  /* If LEN >= strlen (SRC), optimize into __strcat_chk.  */\n@@ -13035,7 +13035,7 @@ fold_builtin_sprintf_chk_1 (location_t loc, int nargs, tree *args,\n   if (!validate_arg (fmt, POINTER_TYPE))\n     return NULL_TREE;\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   len = NULL_TREE;\n@@ -13066,7 +13066,7 @@ fold_builtin_sprintf_chk_1 (location_t loc, int nargs, tree *args,\n \t      if (validate_arg (arg, POINTER_TYPE))\n \t\t{\n \t\t  len = c_strlen (arg, 1);\n-\t\t  if (! len || ! host_integerp (len, 1))\n+\t\t  if (! len || ! tree_fits_uhwi_p (len))\n \t\t    len = NULL_TREE;\n \t\t}\n \t    }\n@@ -13143,17 +13143,17 @@ fold_builtin_snprintf_chk_1 (location_t loc, int nargs, tree *args,\n   if (!validate_arg (fmt, POINTER_TYPE))\n     return NULL_TREE;\n \n-  if (! host_integerp (size, 1))\n+  if (! tree_fits_uhwi_p (size))\n     return NULL_TREE;\n \n   if (! integer_all_onesp (size))\n     {\n-      if (! host_integerp (len, 1))\n+      if (! tree_fits_uhwi_p (len))\n \t{\n \t  /* If LEN is not constant, try MAXLEN too.\n \t     For MAXLEN only allow optimizing into non-_ocs function\n \t     if SIZE is >= MAXLEN, never convert to __ocs_fail ().  */\n-\t  if (maxlen == NULL_TREE || ! host_integerp (maxlen, 1))\n+\t  if (maxlen == NULL_TREE || ! tree_fits_uhwi_p (maxlen))\n \t    return NULL_TREE;\n \t}\n       else"}, {"sha": "2f7d02f52b9a0d6a26080dbf47f284f62ec8d41c", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-ada-spec.c, c-common.c, c-pretty-print.c: Replace\n+\thost_integerp (..., 1) with tree_fits_uhwi_p throughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* c-ada-spec.c, c-common.c, c-format.c, c-pretty-print.c: Replace"}, {"sha": "731993337894319e73f256327ca13e6b67ff4e5c", "filename": "gcc/c-family/c-ada-spec.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-ada-spec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-ada-spec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-ada-spec.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -2207,7 +2207,7 @@ dump_generic_ada_node (pretty_printer *buffer, tree node, tree type, int spc,\n \tnode = fold_convert (ssizetype, node);\n       if (tree_fits_shwi_p (node))\n \tpp_wide_integer (buffer, TREE_INT_CST_LOW (node));\n-      else if (host_integerp (node, 1))\n+      else if (tree_fits_uhwi_p (node))\n \tpp_unsigned_wide_integer (buffer, TREE_INT_CST_LOW (node));\n       else\n \t{"}, {"sha": "3ffefec9a2acf896b9d56460ad5255285f534455", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -8477,7 +8477,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   size = TREE_VALUE (args);\n \n-  if (!host_integerp (size, 1))\n+  if (!tree_fits_uhwi_p (size))\n     {\n       warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       return NULL_TREE;\n@@ -8510,7 +8510,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n       || (!SCALAR_FLOAT_MODE_P (orig_mode)\n \t  && GET_MODE_CLASS (orig_mode) != MODE_INT\n \t  && !ALL_SCALAR_FIXED_POINT_MODE_P (orig_mode))\n-      || !host_integerp (TYPE_SIZE_UNIT (type), 1)\n+      || !tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n       || TREE_CODE (type) == BOOLEAN_TYPE)\n     {\n       error (\"invalid vector type for attribute %qE\", name);\n@@ -11702,7 +11702,7 @@ convert_vector_to_pointer_for_subscript (location_t loc,\n       tree type1;\n \n       if (TREE_CODE (index) == INTEGER_CST)\n-        if (!host_integerp (index, 1)\n+        if (!tree_fits_uhwi_p (index)\n             || ((unsigned HOST_WIDE_INT) tree_low_cst (index, 1)\n                >= TYPE_VECTOR_SUBPARTS (type)))\n           warning_at (loc, OPT_Warray_bounds, \"index value is out of bound\");"}, {"sha": "5f538c559f901d189d972431e4e4f6657484f738", "filename": "gcc/c-family/c-pretty-print.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fc-family%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pretty-print.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -917,7 +917,7 @@ pp_c_integer_constant (c_pretty_printer *pp, tree i)\n \n   if (tree_fits_shwi_p (i))\n     pp_wide_integer (pp, TREE_INT_CST_LOW (i));\n-  else if (host_integerp (i, 1))\n+  else if (tree_fits_uhwi_p (i))\n     pp_unsigned_wide_integer (pp, TREE_INT_CST_LOW (i));\n   else\n     {"}, {"sha": "ab4c444fd6efc80a8d2eedd2aff31afd6c38dd56", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1358,7 +1358,7 @@ stack_protect_classify_type (tree type)\n \t  unsigned HOST_WIDE_INT len;\n \n \t  if (!TYPE_SIZE_UNIT (type)\n-\t      || !host_integerp (TYPE_SIZE_UNIT (type), 1))\n+\t      || !tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n \t    len = max;\n \t  else\n \t    len = tree_low_cst (TYPE_SIZE_UNIT (type), 1);"}, {"sha": "290ed6c851a292a89b23624e9b29a1eb3686ac90", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -6030,17 +6030,17 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n-\t    || !host_integerp (TYPE_MAX_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MAX_VALUE (index))\n \t    || !TYPE_MIN_VALUE (index)\n-\t    || !host_integerp (TYPE_MIN_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MIN_VALUE (index))\n \t    || count < 0)\n \t  return -1;\n \n \tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n \t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -6070,7 +6070,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -6102,7 +6102,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;"}, {"sha": "855be32d1035f22b79a24c6ff611a87db25231d4", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -5860,7 +5860,7 @@ va_list_skip_additions (tree lhs)\n       if (!CONVERT_EXPR_CODE_P (code)\n \t  && ((code != PLUS_EXPR && code != POINTER_PLUS_EXPR)\n \t      || TREE_CODE (gimple_assign_rhs2 (stmt)) != INTEGER_CST\n-\t      || !host_integerp (gimple_assign_rhs2 (stmt), 1)))\n+\t      || !tree_fits_uhwi_p (gimple_assign_rhs2 (stmt))))\n \treturn stmt;\n \n       lhs = gimple_assign_rhs1 (stmt);"}, {"sha": "4d8a39f2e0760ce9021058dd260b78806c11cbf4", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -4728,17 +4728,17 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n-\t    || !host_integerp (TYPE_MAX_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MAX_VALUE (index))\n \t    || !TYPE_MIN_VALUE (index)\n-\t    || !host_integerp (TYPE_MIN_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MIN_VALUE (index))\n \t    || count < 0)\n \t  return -1;\n \n \tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n \t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -4768,7 +4768,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -4800,7 +4800,7 @@ aapcs_vfp_sub_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;"}, {"sha": "ea692fa9eea977a14ed06add6d2a2000f009135e", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -2758,7 +2758,7 @@ epiphany_special_round_type_align (tree type, unsigned computed,\n \tcontinue;\n       offset = bit_position (field);\n       size = DECL_SIZE (field);\n-      if (!host_integerp (offset, 1) || !host_integerp (size, 1)\n+      if (!tree_fits_uhwi_p (offset) || !tree_fits_uhwi_p (size)\n \t  || TREE_INT_CST_LOW (offset) >= try_align\n \t  || TREE_INT_CST_LOW (size) >= try_align)\n \treturn try_align;\n@@ -2785,7 +2785,7 @@ epiphany_adjust_field_align (tree field, unsigned computed)\n     {\n       tree elmsz = TYPE_SIZE (TREE_TYPE (TREE_TYPE (field)));\n \n-      if (!host_integerp (elmsz, 1) || tree_low_cst (elmsz, 1) >= 32)\n+      if (!tree_fits_uhwi_p (elmsz) || tree_low_cst (elmsz, 1) >= 32)\n \treturn 64;\n     }\n   return computed;"}, {"sha": "96cf77025fa0be67213a105bf3c89fb5fc27f9ea", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -32657,7 +32657,7 @@ get_element_number (tree vec_type, tree arg)\n {\n   unsigned HOST_WIDE_INT elt, max = TYPE_VECTOR_SUBPARTS (vec_type) - 1;\n \n-  if (!host_integerp (arg, 1)\n+  if (!tree_fits_uhwi_p (arg)\n       || (elt = tree_low_cst (arg, 1), elt > max))\n     {\n       error (\"selector must be an integer constant in the range 0..%wi\", max);"}, {"sha": "759229a1b2be6ea0e6953290ab6a035397120568", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1279,7 +1279,7 @@ iq2000_function_arg (cumulative_args_t cum_v, enum machine_mode mode,\n \n       if (! type || TREE_CODE (type) != RECORD_TYPE\n \t  || ! named  || ! TYPE_SIZE_UNIT (type)\n-\t  || ! host_integerp (TYPE_SIZE_UNIT (type), 1))\n+\t  || ! tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n \tret = gen_rtx_REG (mode, regbase + *arg_words + bias);\n       else\n \t{"}, {"sha": "aca78318600d3394a6af3bc4559b1e32409eed40", "filename": "gcc/config/m32c/m32c-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c-pragma.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -46,7 +46,7 @@ m32c_pragma_memregs (cpp_reader * reader ATTRIBUTE_UNUSED)\n   type = pragma_lex (&val);\n   if (type == CPP_NUMBER)\n     {\n-      if (host_integerp (val, 1))\n+      if (tree_fits_uhwi_p (val))\n \t{\n \t  i = tree_low_cst (val, 1);\n "}, {"sha": "1a4cfee8909bf965ecb728936792cc329fe91135", "filename": "gcc/config/mep/mep-pragma.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fmep%2Fmep-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fmep%2Fmep-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep-pragma.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -232,7 +232,7 @@ mep_pragma_coprocessor_width (void)\n   switch (type)\n     {\n     case CPP_NUMBER:\n-      if (! host_integerp (val, 1))\n+      if (! tree_fits_uhwi_p (val))\n \tbreak;\n       i = tree_low_cst (val, 1);\n       /* This pragma no longer has any effect.  */"}, {"sha": "a99d76c23c2e27834f33e0178cb36350ca94ca48", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -5149,7 +5149,7 @@ mips_function_arg (cumulative_args_t cum_v, enum machine_mode mode,\n       && type != 0\n       && TREE_CODE (type) == RECORD_TYPE\n       && TYPE_SIZE_UNIT (type)\n-      && host_integerp (TYPE_SIZE_UNIT (type), 1))\n+      && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n       tree field;\n "}, {"sha": "8188ba370fcaec9a84be0aeac91182482d21ffb7", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -6125,7 +6125,7 @@ offsettable_ok_by_alignment (rtx op, HOST_WIDE_INT offset,\n \t  if (!DECL_SIZE_UNIT (decl))\n \t    return false;\n \n-\t  if (!host_integerp (DECL_SIZE_UNIT (decl), 1))\n+\t  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (decl)))\n \t    return false;\n \n \t  dsize = tree_low_cst (DECL_SIZE_UNIT (decl), 1);\n@@ -6151,7 +6151,7 @@ offsettable_ok_by_alignment (rtx op, HOST_WIDE_INT offset,\n \t  if (TREE_CODE (decl) == STRING_CST)\n \t    dsize = TREE_STRING_LENGTH (decl);\n \t  else if (TYPE_SIZE_UNIT (type)\n-\t\t   && host_integerp (TYPE_SIZE_UNIT (type), 1))\n+\t\t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n \t    dsize = tree_low_cst (TYPE_SIZE_UNIT (type), 1);\n \t  else\n \t    return false;\n@@ -8553,17 +8553,17 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \tif (count == -1\n \t    || !index\n \t    || !TYPE_MAX_VALUE (index)\n-\t    || !host_integerp (TYPE_MAX_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MAX_VALUE (index))\n \t    || !TYPE_MIN_VALUE (index)\n-\t    || !host_integerp (TYPE_MIN_VALUE (index), 1)\n+\t    || !tree_fits_uhwi_p (TYPE_MIN_VALUE (index))\n \t    || count < 0)\n \t  return -1;\n \n \tcount *= (1 + tree_low_cst (TYPE_MAX_VALUE (index), 1)\n \t\t      - tree_low_cst (TYPE_MIN_VALUE (index), 1));\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -8593,7 +8593,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -8625,7 +8625,7 @@ rs6000_aggregate_candidate (const_tree type, enum machine_mode *modep)\n \t  }\n \n \t/* There must be no padding.  */\n-\tif (!host_integerp (TYPE_SIZE (type), 1)\n+\tif (!tree_fits_uhwi_p (TYPE_SIZE (type))\n \t    || (tree_low_cst (TYPE_SIZE (type), 1)\n \t\t!= count * GET_MODE_BITSIZE (*modep)))\n \t  return -1;\n@@ -9159,7 +9159,7 @@ rs6000_darwin64_record_arg_advance_recurse (CUMULATIVE_ARGS *cum,\n \tmode = TYPE_MODE (ftype);\n \n \tif (DECL_SIZE (f) != 0\n-\t    && host_integerp (bit_position (f), 1))\n+\t    && tree_fits_uhwi_p (bit_position (f)))\n \t  bitpos += int_bit_position (f);\n \n \t/* ??? FIXME: else assume zero offset.  */\n@@ -9641,7 +9641,7 @@ rs6000_darwin64_record_arg_recurse (CUMULATIVE_ARGS *cum, const_tree type,\n \tmode = TYPE_MODE (ftype);\n \n \tif (DECL_SIZE (f) != 0\n-\t    && host_integerp (bit_position (f), 1))\n+\t    && tree_fits_uhwi_p (bit_position (f)))\n \t  bitpos += int_bit_position (f);\n \n \t/* ??? FIXME: else assume zero offset.  */\n@@ -12386,7 +12386,7 @@ get_element_number (tree vec_type, tree arg)\n {\n   unsigned HOST_WIDE_INT elt, max = TYPE_VECTOR_SUBPARTS (vec_type) - 1;\n \n-  if (!host_integerp (arg, 1)\n+  if (!tree_fits_uhwi_p (arg)\n       || (elt = tree_low_cst (arg, 1), elt > max))\n     {\n       error (\"selector must be an integer constant in the range 0..%wi\", max);"}, {"sha": "1d6aa942ef6854e60bf91056b3a762933c3d5a73", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -6332,7 +6332,7 @@ function_arg_record_value_1 (const_tree type, HOST_WIDE_INT startbitpos,\n \t      if (integer_zerop (DECL_SIZE (field)))\n \t\tcontinue;\n \n-\t      if (host_integerp (bit_position (field), 1))\n+\t      if (tree_fits_uhwi_p (bit_position (field)))\n \t\tbitpos += int_bit_position (field);\n \t    }\n \n@@ -6480,7 +6480,7 @@ function_arg_record_value_2 (const_tree type, HOST_WIDE_INT startbitpos,\n \t      if (integer_zerop (DECL_SIZE (field)))\n \t\tcontinue;\n \n-\t      if (host_integerp (bit_position (field), 1))\n+\t      if (tree_fits_uhwi_p (bit_position (field)))\n \t\tbitpos += int_bit_position (field);\n \t    }\n "}, {"sha": "e7a2014a9f9ab0bb3e4fe2ca95415a9f251badb8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1,3 +1,8 @@\n+2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* decl.c: Replace host_integerp (..., 1) with tree_fits_uhwi_p\n+\tthroughout.\n+\n 2013-11-18  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* error.c, init.c, parser.c, semantics.c: Replace"}, {"sha": "770167cacbf98703d3ce0b891e32d2a4658c7577", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -5093,7 +5093,7 @@ reshape_init_array_1 (tree elt_type, tree max_index, reshape_iter *d,\n       if (integer_all_onesp (max_index))\n \treturn new_init;\n \n-      if (host_integerp (max_index, 1))\n+      if (tree_fits_uhwi_p (max_index))\n \tmax_index_cst = tree_low_cst (max_index, 1);\n       /* sizetype is sign extended, not zero extended.  */\n       else"}, {"sha": "ddeb87bf5061acac725d970621ab5537627fbd71", "filename": "gcc/dbxout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1521,7 +1521,7 @@ dbxout_type_fields (tree type)\n \t  || (TREE_CODE (tem) == FIELD_DECL\n \t      && (! tree_fits_shwi_p (bit_position (tem))\n \t\t  || ! DECL_SIZE (tem)\n-\t\t  || ! host_integerp (DECL_SIZE (tem), 1))))\n+\t\t  || ! tree_fits_uhwi_p (DECL_SIZE (tem)))))\n \tcontinue;\n \n       else if (TREE_CODE (tem) != CONST_DECL)\n@@ -1864,7 +1864,7 @@ dbxout_type (tree type, int full)\n \t Sun dbx crashes if we do.  */\n       if (! full || !COMPLETE_TYPE_P (type)\n \t  /* No way in DBX fmt to describe a variable size.  */\n-\t  || ! host_integerp (TYPE_SIZE (type), 1))\n+\t  || ! tree_fits_uhwi_p (TYPE_SIZE (type)))\n \treturn;\n       break;\n     case TYPE_DEFINED:\n@@ -1889,7 +1889,7 @@ dbxout_type (tree type, int full)\n \t && !full)\n \t|| !COMPLETE_TYPE_P (type)\n \t/* No way in DBX fmt to describe a variable size.  */\n-\t|| ! host_integerp (TYPE_SIZE (type), 1))\n+\t|| ! tree_fits_uhwi_p (TYPE_SIZE (type)))\n       {\n \ttypevec[TYPE_SYMTAB_ADDRESS (type)].status = TYPE_XREF;\n \treturn;\n@@ -2147,7 +2147,7 @@ dbxout_type (tree type, int full)\n \t     && !full)\n \t    || !COMPLETE_TYPE_P (type)\n \t    /* No way in DBX fmt to describe a variable size.  */\n-\t    || ! host_integerp (TYPE_SIZE (type), 1))\n+\t    || ! tree_fits_uhwi_p (TYPE_SIZE (type)))\n \t  {\n \t    /* If the type is just a cross reference, output one\n \t       and mark the type as partially described.\n@@ -2796,7 +2796,7 @@ dbxout_symbol (tree decl, int local ATTRIBUTE_UNUSED)\n \t\t/* Do not generate a tag for records of variable size,\n \t\t   since this type can not be properly described in the\n \t\t   DBX format, and it confuses some tools such as objdump.  */\n-\t\t&& host_integerp (TYPE_SIZE (type), 1))\n+\t\t&& tree_fits_uhwi_p (TYPE_SIZE (type)))\n \t      {\n \t\ttree name = TYPE_NAME (type);\n \t\tif (TREE_CODE (name) == TYPE_DECL)"}, {"sha": "73b44ada3efd09024d7ac1b87923e985331692bf", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -10261,7 +10261,7 @@ simple_type_size_in_bits (const_tree type)\n     return BITS_PER_WORD;\n   else if (TYPE_SIZE (type) == NULL_TREE)\n     return 0;\n-  else if (host_integerp (TYPE_SIZE (type), 1))\n+  else if (tree_fits_uhwi_p (TYPE_SIZE (type)))\n     return tree_low_cst (TYPE_SIZE (type), 1);\n   else\n     return TYPE_ALIGN (type);\n@@ -13540,7 +13540,7 @@ dw_sra_loc_expr (tree decl, rtx loc)\n   enum var_init_status initialized;\n \n   if (DECL_SIZE (decl) == NULL\n-      || !host_integerp (DECL_SIZE (decl), 1))\n+      || !tree_fits_uhwi_p (DECL_SIZE (decl)))\n     return NULL;\n \n   decl_size = tree_low_cst (DECL_SIZE (decl), 1);\n@@ -16395,7 +16395,7 @@ add_bit_offset_attribute (dw_die_ref die, tree decl)\n      encounter such things, just return without generating any attribute\n      whatsoever.  Likewise for variable or too large size.  */\n   if (! tree_fits_shwi_p (bit_position (decl))\n-      || ! host_integerp (DECL_SIZE (decl), 1))\n+      || ! tree_fits_uhwi_p (DECL_SIZE (decl)))\n     return;\n \n   bitpos_int = int_bit_position (decl);\n@@ -16435,7 +16435,7 @@ add_bit_size_attribute (dw_die_ref die, tree decl)\n   gcc_assert (TREE_CODE (decl) == FIELD_DECL\n \t      && DECL_BIT_FIELD_TYPE (decl));\n \n-  if (host_integerp (DECL_SIZE (decl), 1))\n+  if (tree_fits_uhwi_p (DECL_SIZE (decl)))\n     add_AT_unsigned (die, DW_AT_bit_size, tree_low_cst (DECL_SIZE (decl), 1));\n }\n \n@@ -17072,7 +17072,7 @@ descr_info_loc (tree val, tree base_decl)\n       return loc;\n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:\n-      if (host_integerp (TREE_OPERAND (val, 1), 1)\n+      if (tree_fits_uhwi_p (TREE_OPERAND (val, 1))\n \t  && (unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (val, 1), 1)\n \t     < 16384)\n \t{"}, {"sha": "385f44a45b990089d04abf2121b071cb9fe27c0f", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1541,8 +1541,8 @@ get_mem_align_offset (rtx mem, unsigned int align)\n \t  tree bit_offset = DECL_FIELD_BIT_OFFSET (field);\n \n \t  if (!byte_offset\n-\t      || !host_integerp (byte_offset, 1)\n-\t      || !host_integerp (bit_offset, 1))\n+\t      || !tree_fits_uhwi_p (byte_offset)\n+\t      || !tree_fits_uhwi_p (bit_offset))\n \t    return -1;\n \n \t  offset += tree_low_cst (byte_offset, 1);\n@@ -1770,7 +1770,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \t    {\n \t      attrs.expr = t2;\n \t      attrs.offset_known_p = false;\n-\t      if (host_integerp (off_tree, 1))\n+\t      if (tree_fits_uhwi_p (off_tree))\n \t\t{\n \t\t  attrs.offset_known_p = true;\n \t\t  attrs.offset = tree_low_cst (off_tree, 1);\n@@ -1800,7 +1800,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n       attrs.align = MAX (attrs.align, obj_align);\n     }\n \n-  if (host_integerp (new_size, 1))\n+  if (tree_fits_uhwi_p (new_size))\n     {\n       attrs.size_known_p = true;\n       attrs.size = tree_low_cst (new_size, 1);\n@@ -2273,7 +2273,7 @@ widen_memory_access (rtx memref, enum machine_mode mode, HOST_WIDE_INT offset)\n \t      && attrs.offset >= 0)\n \t    break;\n \n-\t  if (! host_integerp (offset, 1))\n+\t  if (! tree_fits_uhwi_p (offset))\n \t    {\n \t      attrs.expr = NULL_TREE;\n \t      break;"}, {"sha": "da5c05ea051d7336c20447d464a7686258d1f228", "filename": "gcc/expr.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -4628,8 +4628,8 @@ get_bit_range (unsigned HOST_WIDE_INT *bitstart,\n      relative to the representative.  DECL_FIELD_OFFSET of field and\n      repr are the same by construction if they are not constants,\n      see finish_bitfield_layout.  */\n-  if (host_integerp (DECL_FIELD_OFFSET (field), 1)\n-      && host_integerp (DECL_FIELD_OFFSET (repr), 1))\n+  if (tree_fits_uhwi_p (DECL_FIELD_OFFSET (field))\n+      && tree_fits_uhwi_p (DECL_FIELD_OFFSET (repr)))\n     bitoffset = (tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n \t\t - tree_low_cst (DECL_FIELD_OFFSET (repr), 1)) * BITS_PER_UNIT;\n   else\n@@ -5470,7 +5470,7 @@ count_type_elements (const_tree type, bool for_ctor_p)\n \ttree nelts;\n \n \tnelts = array_type_nelts (type);\n-\tif (nelts && host_integerp (nelts, 1))\n+\tif (nelts && tree_fits_uhwi_p (nelts))\n \t  {\n \t    unsigned HOST_WIDE_INT n;\n \n@@ -5589,7 +5589,7 @@ categorize_ctor_elements_1 (const_tree ctor, HOST_WIDE_INT *p_nz_elts,\n \t  tree lo_index = TREE_OPERAND (purpose, 0);\n \t  tree hi_index = TREE_OPERAND (purpose, 1);\n \n-\t  if (host_integerp (lo_index, 1) && host_integerp (hi_index, 1))\n+\t  if (tree_fits_uhwi_p (lo_index) && tree_fits_uhwi_p (hi_index))\n \t    mult = (tree_low_cst (hi_index, 1)\n \t\t    - tree_low_cst (lo_index, 1) + 1);\n \t}\n@@ -5908,7 +5908,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t    if (cleared && initializer_zerop (value))\n \t      continue;\n \n-\t    if (host_integerp (DECL_SIZE (field), 1))\n+\t    if (tree_fits_uhwi_p (DECL_SIZE (field)))\n \t      bitsize = tree_low_cst (DECL_SIZE (field), 1);\n \t    else\n \t      bitsize = -1;\n@@ -6047,8 +6047,8 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t    tree lo_index = TREE_OPERAND (index, 0);\n \t\t    tree hi_index = TREE_OPERAND (index, 1);\n \n-\t\t    if (! host_integerp (lo_index, 1)\n-\t\t\t|| ! host_integerp (hi_index, 1))\n+\t\t    if (! tree_fits_uhwi_p (lo_index)\n+\t\t\t|| ! tree_fits_uhwi_p (hi_index))\n \t\t      {\n \t\t\tneed_to_clear = 1;\n \t\t\tbreak;\n@@ -6102,7 +6102,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \n \t    mode = TYPE_MODE (elttype);\n \t    if (mode == BLKmode)\n-\t      bitsize = (host_integerp (TYPE_SIZE (elttype), 1)\n+\t      bitsize = (tree_fits_uhwi_p (TYPE_SIZE (elttype))\n \t\t\t ? tree_low_cst (TYPE_SIZE (elttype), 1)\n \t\t\t : -1);\n \t    else\n@@ -6125,7 +6125,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t\tcount = hi - lo + 1,\n \t\t\t(!MEM_P (target)\n \t\t\t || count <= 2\n-\t\t\t || (host_integerp (TYPE_SIZE (elttype), 1)\n+\t\t\t || (tree_fits_uhwi_p (TYPE_SIZE (elttype))\n \t\t\t     && (tree_low_cst (TYPE_SIZE (elttype), 1) * count\n \t\t\t\t <= 40 * 8)))))\n \t\t  {\n@@ -6208,7 +6208,7 @@ store_constructor (tree exp, rtx target, int cleared, HOST_WIDE_INT size)\n \t\t  }\n \t      }\n \t    else if ((index != 0 && ! tree_fits_shwi_p (index))\n-\t\t     || ! host_integerp (TYPE_SIZE (elttype), 1))\n+\t\t     || ! tree_fits_uhwi_p (TYPE_SIZE (elttype)))\n \t      {\n \t\ttree position;\n \n@@ -6676,7 +6676,7 @@ get_inner_reference (tree exp, HOST_WIDE_INT *pbitsize,\n \n   if (size_tree != 0)\n     {\n-      if (! host_integerp (size_tree, 1))\n+      if (! tree_fits_uhwi_p (size_tree))\n \tmode = BLKmode, *pbitsize = -1;\n       else\n \t*pbitsize = tree_low_cst (size_tree, 1);\n@@ -7756,7 +7756,7 @@ expand_constructor (tree exp, rtx target, enum expand_modifier modifier,\n        && ((mode == BLKmode\n \t    && ! (target != 0 && safe_from_p (target, exp, 1)))\n \t\t  || TREE_ADDRESSABLE (exp)\n-\t\t  || (host_integerp (TYPE_SIZE_UNIT (type), 1)\n+\t\t  || (tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n \t\t      && (! MOVE_BY_PIECES_P\n \t\t\t\t     (tree_low_cst (TYPE_SIZE_UNIT (type), 1),\n \t\t\t\t      TYPE_ALIGN (type)))\n@@ -9633,7 +9633,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t    HOST_WIDE_INT offset = mem_ref_offset (exp).low;\n \t    base = TREE_OPERAND (base, 0);\n \t    if (offset == 0\n-\t\t&& host_integerp (TYPE_SIZE (type), 1)\n+\t\t&& tree_fits_uhwi_p (TYPE_SIZE (type))\n \t\t&& (GET_MODE_BITSIZE (DECL_MODE (base))\n \t\t    == TREE_INT_CST_LOW (TYPE_SIZE (type))))\n \t      return expand_expr (build1 (VIEW_CONVERT_EXPR, type, base),\n@@ -10558,7 +10558,7 @@ is_aligning_offset (const_tree offset, const_tree exp)\n   /* We must now have a BIT_AND_EXPR with a constant that is one less than\n      power of 2 and which is larger than BIGGEST_ALIGNMENT.  */\n   if (TREE_CODE (offset) != BIT_AND_EXPR\n-      || !host_integerp (TREE_OPERAND (offset, 1), 1)\n+      || !tree_fits_uhwi_p (TREE_OPERAND (offset, 1))\n       || compare_tree_int (TREE_OPERAND (offset, 1),\n \t\t\t   BIGGEST_ALIGNMENT / BITS_PER_UNIT) <= 0\n       || !exact_log2 (tree_low_cst (TREE_OPERAND (offset, 1), 1) + 1) < 0)\n@@ -10696,7 +10696,7 @@ string_constant (tree arg, tree *ptr_offset)\n \t and inside of the bounds of the string literal.  */\n       offset = fold_convert (sizetype, offset);\n       if (compare_tree_int (DECL_SIZE_UNIT (array), length) > 0\n-\t  && (! host_integerp (offset, 1)\n+\t  && (! tree_fits_uhwi_p (offset)\n \t      || compare_tree_int (offset, length) >= 0))\n \treturn 0;\n "}, {"sha": "e51b2f99b9906bf2988cb371913d67faecd4b958", "filename": "gcc/fold-const.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1430,7 +1430,7 @@ const_binop (enum tree_code code, tree arg1, tree arg2)\n       if (code == VEC_LSHIFT_EXPR\n \t  || code == VEC_RSHIFT_EXPR)\n \t{\n-\t  if (!host_integerp (arg2, 1))\n+\t  if (!tree_fits_uhwi_p (arg2))\n \t    return NULL_TREE;\n \n \t  unsigned HOST_WIDE_INT shiftc = tree_low_cst (arg2, 1);\n@@ -6643,7 +6643,7 @@ fold_single_bit_test (location_t loc, enum tree_code code,\n \t not overflow, adjust BITNUM and INNER.  */\n       if (TREE_CODE (inner) == RSHIFT_EXPR\n \t  && TREE_CODE (TREE_OPERAND (inner, 1)) == INTEGER_CST\n-\t  && host_integerp (TREE_OPERAND (inner, 1), 1)\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (inner, 1))\n \t  && bitnum < TYPE_PRECISION (type)\n \t  && (TREE_INT_CST_LOW (TREE_OPERAND (inner, 1))\n \t      < (unsigned) (TYPE_PRECISION (type) - bitnum)))\n@@ -8098,7 +8098,7 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n \t    change = 1;\n \t  else if (TYPE_PRECISION (TREE_TYPE (and1))\n \t\t   <= HOST_BITS_PER_WIDE_INT\n-\t\t   && host_integerp (and1, 1))\n+\t\t   && tree_fits_uhwi_p (and1))\n \t    {\n \t      unsigned HOST_WIDE_INT cst;\n \n@@ -11864,7 +11864,7 @@ fold_binary_loc (location_t loc,\n \t and for - instead of + (or unary - instead of +)\n \t and/or ^ instead of |.\n \t If B is constant and (B & M) == 0, fold into A & M.  */\n-      if (host_integerp (arg1, 1))\n+      if (tree_fits_uhwi_p (arg1))\n \t{\n \t  unsigned HOST_WIDE_INT cst1 = tree_low_cst (arg1, 1);\n \t  if (~cst1 && (cst1 & (cst1 + 1)) == 0\n@@ -11890,7 +11890,7 @@ fold_binary_loc (location_t loc,\n \t\t  which = 1;\n \t\t}\n \n-\t      if (!host_integerp (TYPE_MAX_VALUE (TREE_TYPE (arg0)), 1)\n+\t      if (!tree_fits_uhwi_p (TYPE_MAX_VALUE (TREE_TYPE (arg0)))\n \t\t  || (tree_low_cst (TYPE_MAX_VALUE (TREE_TYPE (arg0)), 1)\n \t\t      & cst1) != cst1)\n \t\twhich = -1;\n@@ -12013,7 +12013,7 @@ fold_binary_loc (location_t loc,\n       /* If arg0 is derived from the address of an object or function, we may\n \t be able to fold this expression using the object or function's\n \t alignment.  */\n-      if (POINTER_TYPE_P (TREE_TYPE (arg0)) && host_integerp (arg1, 1))\n+      if (POINTER_TYPE_P (TREE_TYPE (arg0)) && tree_fits_uhwi_p (arg1))\n \t{\n \t  unsigned HOST_WIDE_INT modulus, residue;\n \t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (arg1);\n@@ -12035,7 +12035,7 @@ fold_binary_loc (location_t loc,\n \t   || TREE_CODE (arg0) == RSHIFT_EXPR)\n \t  && TYPE_PRECISION (TREE_TYPE (arg0)) <= HOST_BITS_PER_WIDE_INT\n \t  && TREE_CODE (arg1) == INTEGER_CST\n-\t  && host_integerp (TREE_OPERAND (arg0, 1), 1)\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (arg0, 1))\n \t  && tree_low_cst (TREE_OPERAND (arg0, 1), 1) > 0\n \t  && (tree_low_cst (TREE_OPERAND (arg0, 1), 1)\n \t      < TYPE_PRECISION (TREE_TYPE (arg0))))\n@@ -12646,9 +12646,9 @@ fold_binary_loc (location_t loc,\n       prec = element_precision (type);\n \n       /* Turn (a OP c1) OP c2 into a OP (c1+c2).  */\n-      if (TREE_CODE (op0) == code && host_integerp (arg1, true)\n+      if (TREE_CODE (op0) == code && tree_fits_uhwi_p (arg1)\n \t  && TREE_INT_CST_LOW (arg1) < prec\n-\t  && host_integerp (TREE_OPERAND (arg0, 1), true)\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (arg0, 1))\n \t  && TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1)) < prec)\n \t{\n \t  unsigned int low = (TREE_INT_CST_LOW (TREE_OPERAND (arg0, 1))\n@@ -14584,7 +14584,7 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n          fold (nearly) all BIT_FIELD_REFs.  */\n       if (CONSTANT_CLASS_P (arg0)\n \t  && can_native_interpret_type_p (type)\n-\t  && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (arg0)), 1)\n+\t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (arg0)))\n \t  /* This limitation should not be necessary, we just need to\n \t     round this up to mode size.  */\n \t  && tree_low_cst (op1, 1) % BITS_PER_UNIT == 0"}, {"sha": "3ae4b38dceffb72e3b53ca4ab098dd9591cb9ef6", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -3813,7 +3813,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n   {\n     tree s2 = sizetree;\n     if (where_pad != none\n-\t&& (!host_integerp (sizetree, 1)\n+\t&& (!tree_fits_uhwi_p (sizetree)\n \t    || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n       s2 = round_up (s2, round_boundary / BITS_PER_UNIT);\n     SUB_PARM_SIZE (locate->slot_offset, s2);\n@@ -3858,7 +3858,7 @@ locate_and_pad_parm (enum machine_mode passed_mode, tree type, int in_regs,\n     pad_below (&locate->offset, passed_mode, sizetree);\n \n   if (where_pad != none\n-      && (!host_integerp (sizetree, 1)\n+      && (!tree_fits_uhwi_p (sizetree)\n \t  || (tree_low_cst (sizetree, 1) * BITS_PER_UNIT) % round_boundary))\n     sizetree = round_up (sizetree, round_boundary / BITS_PER_UNIT);\n "}, {"sha": "c842dec5d1ee612c4c92c4ce7558304bcf7493a4", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -3057,7 +3057,7 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n \t  if ((low_bound = array_ref_low_bound (t),\n \t       TREE_CODE (low_bound) == INTEGER_CST)\n \t      && (unit_size = array_ref_element_size (t),\n-\t\t  host_integerp (unit_size, 1))\n+\t\t  tree_fits_uhwi_p (unit_size))\n \t      && (doffset = (TREE_INT_CST (idx) - TREE_INT_CST (low_bound))\n \t\t\t    .sext (TYPE_PRECISION (TREE_TYPE (idx))),\n \t\t  doffset.fits_shwi ()))\n@@ -3401,7 +3401,7 @@ gimple_fold_indirect_ref (tree t)\n       if (TREE_CODE (addr) == ADDR_EXPR\n \t  && TREE_CODE (TREE_TYPE (addrtype)) == VECTOR_TYPE\n \t  && useless_type_conversion_p (type, TREE_TYPE (TREE_TYPE (addrtype)))\n-\t  && host_integerp (off, 1))\n+\t  && tree_fits_uhwi_p (off))\n \t{\n           unsigned HOST_WIDE_INT offset = tree_low_cst (off, 1);\n           tree part_width = TYPE_SIZE (type);"}, {"sha": "a65d3d1ced6a4a13bba3f6258f50985b572b7bbd", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -538,7 +538,7 @@ gimple_add_tmp_var (tree tmp)\n   /* Later processing assumes that the object size is constant, which might\n      not be true at this point.  Force the use of a constant upper bound in\n      this case.  */\n-  if (!host_integerp (DECL_SIZE_UNIT (tmp), 1))\n+  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (tmp)))\n     force_constant_size (tmp);\n \n   DECL_CONTEXT (tmp) = current_function_decl;"}, {"sha": "9699559c15131b21d5aac4356c37cd3222cf90eb", "filename": "gcc/godump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -984,7 +984,7 @@ go_output_typedef (struct godump_container *container, tree decl)\n \t  if (tree_fits_shwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_DEC,\n \t\t     tree_low_cst (TREE_VALUE (element), 0));\n-\t  else if (host_integerp (TREE_VALUE (element), 1))\n+\t  else if (tree_fits_uhwi_p (TREE_VALUE (element)))\n \t    snprintf (buf, sizeof buf, HOST_WIDE_INT_PRINT_UNSIGNED,\n \t\t     ((unsigned HOST_WIDE_INT)\n \t\t      tree_low_cst (TREE_VALUE (element), 1)));"}, {"sha": "5857f1a3f0f90c850d9807907a9bf57580dd1f2b", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1264,15 +1264,15 @@ type_like_member_ptr_p (tree type, tree *method_ptr, tree *delta)\n   fld = TYPE_FIELDS (type);\n   if (!fld || !POINTER_TYPE_P (TREE_TYPE (fld))\n       || TREE_CODE (TREE_TYPE (TREE_TYPE (fld))) != METHOD_TYPE\n-      || !host_integerp (DECL_FIELD_OFFSET (fld), 1))\n+      || !tree_fits_uhwi_p (DECL_FIELD_OFFSET (fld)))\n     return false;\n \n   if (method_ptr)\n     *method_ptr = fld;\n \n   fld = DECL_CHAIN (fld);\n   if (!fld || INTEGRAL_TYPE_P (fld)\n-      || !host_integerp (DECL_FIELD_OFFSET (fld), 1))\n+      || !tree_fits_uhwi_p (DECL_FIELD_OFFSET (fld)))\n     return false;\n   if (delta)\n     *delta = fld;\n@@ -1342,7 +1342,7 @@ determine_known_aggregate_parts (gimple call, tree arg,\n       if (TREE_CODE (arg) == SSA_NAME)\n \t{\n \t  tree type_size;\n-          if (!host_integerp (TYPE_SIZE (TREE_TYPE (TREE_TYPE (arg))), 1))\n+          if (!tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (TREE_TYPE (arg)))))\n             return;\n \t  check_ref = true;\n \t  arg_base = arg;"}, {"sha": "9bb5b0b13bdd36c67f43d97a4fc70923db3a9874", "filename": "gcc/omp-low.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fomp-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fomp-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-low.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -6769,7 +6769,7 @@ expand_omp_simd (struct omp_region *region, struct omp_for_data *fd)\n       else\n \t{\n \t  safelen = OMP_CLAUSE_SAFELEN_EXPR (safelen);\n-\t  if (!host_integerp (safelen, 1)\n+\t  if (!tree_fits_uhwi_p (safelen)\n \t      || (unsigned HOST_WIDE_INT) tree_low_cst (safelen, 1)\n \t\t > INT_MAX)\n \t    loop->safelen = INT_MAX;"}, {"sha": "251faa872923774c134f384c461bbb8d3576e837", "filename": "gcc/predict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1557,7 +1557,7 @@ predict_loops (void)\n \n \t  if (TREE_CODE (niter) == INTEGER_CST)\n \t    {\n-\t      if (host_integerp (niter, 1)\n+\t      if (tree_fits_uhwi_p (niter)\n \t\t  && max\n \t\t  && compare_tree_int (niter, max - 1) == -1)\n \t\tnitercst = tree_low_cst (niter, 1) + 1;"}, {"sha": "26ed6aa974e7f0dafb4c484cedb26379ee0d1119", "filename": "gcc/sdbout.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -994,7 +994,7 @@ sdbout_field_types (tree type)\n     if (TREE_CODE (tail) == FIELD_DECL\n \t&& DECL_NAME (tail)\n \t&& DECL_SIZE (tail)\n-\t&& host_integerp (DECL_SIZE (tail), 1)\n+\t&& tree_fits_uhwi_p (DECL_SIZE (tail))\n \t&& tree_fits_shwi_p (bit_position (tail)))\n       {\n \tif (POINTER_TYPE_P (TREE_TYPE (tail)))\n@@ -1173,7 +1173,7 @@ sdbout_one_type (tree type)\n \t    if (TREE_CODE (tem) == FIELD_DECL\n \t\t&& DECL_NAME (tem)\n \t\t&& DECL_SIZE (tem)\n-\t\t&& host_integerp (DECL_SIZE (tem), 1)\n+\t\t&& tree_fits_uhwi_p (DECL_SIZE (tem))\n \t\t&& tree_fits_shwi_p (bit_position (tem)))\n \t      {\n \t\tconst char *name;"}, {"sha": "ef4791b446d2393e23018271ab2369b5f2daf55b", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -854,7 +854,7 @@ expand_switch_as_decision_tree_p (tree range,\n      who knows...  */\n   max_ratio = optimize_insn_for_size_p () ? 3 : 10;\n   if (count < case_values_threshold ()\n-      || ! host_integerp (range, /*pos=*/1)\n+      || ! tree_fits_uhwi_p (range)\n       || compare_tree_int (range, max_ratio * count) > 0)\n     return true;\n "}, {"sha": "44a5f2bf8e1db0151ea7234e20bd35ef4f4e91b7", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -332,7 +332,7 @@ mode_for_size_tree (const_tree size, enum mode_class mclass, int limit)\n   unsigned HOST_WIDE_INT uhwi;\n   unsigned int ui;\n \n-  if (!host_integerp (size, 1))\n+  if (!tree_fits_uhwi_p (size))\n     return BLKmode;\n   uhwi = tree_low_cst (size, 1);\n   ui = uhwi;\n@@ -483,7 +483,7 @@ mode_for_array (tree elem_type, tree size)\n     return TYPE_MODE (elem_type);\n \n   limit_p = true;\n-  if (host_integerp (size, 1) && host_integerp (elem_size, 1))\n+  if (tree_fits_uhwi_p (size) && tree_fits_uhwi_p (elem_size))\n     {\n       int_size = tree_low_cst (size, 1);\n       int_elem_size = tree_low_cst (elem_size, 1);\n@@ -1117,7 +1117,7 @@ place_field (record_layout_info rli, tree field)\n \t\t   & - tree_low_cst (rli->bitpos, 1));\n   else if (integer_zerop (rli->offset))\n     known_align = 0;\n-  else if (host_integerp (rli->offset, 1))\n+  else if (tree_fits_uhwi_p (rli->offset))\n     known_align = (BITS_PER_UNIT\n \t\t   * (tree_low_cst (rli->offset, 1)\n \t\t      & - tree_low_cst (rli->offset, 1)));\n@@ -1194,9 +1194,9 @@ place_field (record_layout_info rli, tree field)\n \t  || TYPE_ALIGN (type) <= BITS_PER_UNIT)\n       && maximum_field_alignment == 0\n       && ! integer_zerop (DECL_SIZE (field))\n-      && host_integerp (DECL_SIZE (field), 1)\n-      && host_integerp (rli->offset, 1)\n-      && host_integerp (TYPE_SIZE (type), 1))\n+      && tree_fits_uhwi_p (DECL_SIZE (field))\n+      && tree_fits_uhwi_p (rli->offset)\n+      && tree_fits_uhwi_p (TYPE_SIZE (type)))\n     {\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n@@ -1238,9 +1238,9 @@ place_field (record_layout_info rli, tree field)\n       && DECL_BIT_FIELD_TYPE (field)\n       && ! DECL_PACKED (field)\n       && ! integer_zerop (DECL_SIZE (field))\n-      && host_integerp (DECL_SIZE (field), 1)\n-      && host_integerp (rli->offset, 1)\n-      && host_integerp (TYPE_SIZE (type), 1))\n+      && tree_fits_uhwi_p (DECL_SIZE (field))\n+      && tree_fits_uhwi_p (rli->offset)\n+      && tree_fits_uhwi_p (TYPE_SIZE (type)))\n     {\n       unsigned int type_align = TYPE_ALIGN (type);\n       tree dsize = DECL_SIZE (field);\n@@ -1383,8 +1383,8 @@ place_field (record_layout_info rli, tree field)\n \t     until we see a bitfield (and come by here again) we just skip\n \t     calculating it.  */\n \t  if (DECL_SIZE (field) != NULL\n-\t      && host_integerp (TYPE_SIZE (TREE_TYPE (field)), 1)\n-\t      && host_integerp (DECL_SIZE (field), 1))\n+\t      && tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (field)))\n+\t      && tree_fits_uhwi_p (DECL_SIZE (field)))\n \t    {\n \t      unsigned HOST_WIDE_INT bitsize\n \t\t= tree_low_cst (DECL_SIZE (field), 1);\n@@ -1425,7 +1425,7 @@ place_field (record_layout_info rli, tree field)\n \t\t    & - tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1));\n   else if (integer_zerop (DECL_FIELD_OFFSET (field)))\n     actual_align = MAX (BIGGEST_ALIGNMENT, rli->record_align);\n-  else if (host_integerp (DECL_FIELD_OFFSET (field), 1))\n+  else if (tree_fits_uhwi_p (DECL_FIELD_OFFSET (field)))\n     actual_align = (BITS_PER_UNIT\n \t\t   * (tree_low_cst (DECL_FIELD_OFFSET (field), 1)\n \t\t      & - tree_low_cst (DECL_FIELD_OFFSET (field), 1)));\n@@ -1584,7 +1584,7 @@ compute_record_mode (tree type)\n      line.  */\n   SET_TYPE_MODE (type, BLKmode);\n \n-  if (! host_integerp (TYPE_SIZE (type), 1))\n+  if (! tree_fits_uhwi_p (TYPE_SIZE (type)))\n     return;\n \n   /* A record which has any BLKmode members must itself be\n@@ -1600,9 +1600,9 @@ compute_record_mode (tree type)\n \t      && ! TYPE_NO_FORCE_BLK (TREE_TYPE (field))\n \t      && !(TYPE_SIZE (TREE_TYPE (field)) != 0\n \t\t   && integer_zerop (TYPE_SIZE (TREE_TYPE (field)))))\n-\t  || ! host_integerp (bit_position (field), 1)\n+\t  || ! tree_fits_uhwi_p (bit_position (field))\n \t  || DECL_SIZE (field) == 0\n-\t  || ! host_integerp (DECL_SIZE (field), 1))\n+\t  || ! tree_fits_uhwi_p (DECL_SIZE (field)))\n \treturn;\n \n       /* If this field is the whole struct, remember its mode so\n@@ -1621,7 +1621,7 @@ compute_record_mode (tree type)\n      matches the type's size.  This only applies to RECORD_TYPE.  This\n      does not apply to unions.  */\n   if (TREE_CODE (type) == RECORD_TYPE && mode != VOIDmode\n-      && host_integerp (TYPE_SIZE (type), 1)\n+      && tree_fits_uhwi_p (TYPE_SIZE (type))\n       && GET_MODE_BITSIZE (mode) == TREE_INT_CST_LOW (TYPE_SIZE (type)))\n     SET_TYPE_MODE (type, mode);\n   else\n@@ -1763,7 +1763,7 @@ finish_bitfield_representative (tree repr, tree field)\n \n   size = size_diffop (DECL_FIELD_OFFSET (field),\n \t\t      DECL_FIELD_OFFSET (repr));\n-  gcc_assert (host_integerp (size, 1));\n+  gcc_assert (tree_fits_uhwi_p (size));\n   bitsize = (tree_low_cst (size, 1) * BITS_PER_UNIT\n \t     + tree_low_cst (DECL_FIELD_BIT_OFFSET (field), 1)\n \t     - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1)\n@@ -1785,7 +1785,7 @@ finish_bitfield_representative (tree repr, tree field)\n \treturn;\n       maxsize = size_diffop (DECL_FIELD_OFFSET (nextf),\n \t\t\t     DECL_FIELD_OFFSET (repr));\n-      if (host_integerp (maxsize, 1))\n+      if (tree_fits_uhwi_p (maxsize))\n \t{\n \t  maxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n \t\t\t+ tree_low_cst (DECL_FIELD_BIT_OFFSET (nextf), 1)\n@@ -1806,7 +1806,7 @@ finish_bitfield_representative (tree repr, tree field)\n \t use bitsize as fallback for this case.  */\n       tree maxsize = size_diffop (TYPE_SIZE_UNIT (DECL_CONTEXT (field)),\n \t\t\t\t  DECL_FIELD_OFFSET (repr));\n-      if (host_integerp (maxsize, 1))\n+      if (tree_fits_uhwi_p (maxsize))\n \tmaxbitsize = (tree_low_cst (maxsize, 1) * BITS_PER_UNIT\n \t\t      - tree_low_cst (DECL_FIELD_BIT_OFFSET (repr), 1));\n       else\n@@ -1919,8 +1919,8 @@ finish_bitfield_layout (record_layout_info rli)\n \t     representative to be generated.  That will at most\n \t     generate worse code but still maintain correctness with\n \t     respect to the C++ memory model.  */\n-\t  else if (!((host_integerp (DECL_FIELD_OFFSET (repr), 1)\n-\t\t      && host_integerp (DECL_FIELD_OFFSET (field), 1))\n+\t  else if (!((tree_fits_uhwi_p (DECL_FIELD_OFFSET (repr))\n+\t\t      && tree_fits_uhwi_p (DECL_FIELD_OFFSET (field)))\n \t\t     || operand_equal_p (DECL_FIELD_OFFSET (repr),\n \t\t\t\t\t DECL_FIELD_OFFSET (field), 0)))\n \t    {"}, {"sha": "1a22838ee04faa6e8c5d54335010a90d18aa9337", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1103,7 +1103,7 @@ tm_log_add (basic_block entry_block, tree addr, gimple stmt)\n       if (entry_block\n \t  && transaction_invariant_address_p (lp->addr, entry_block)\n \t  && TYPE_SIZE_UNIT (type) != NULL\n-\t  && host_integerp (TYPE_SIZE_UNIT (type), 1)\n+\t  && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type))\n \t  && (tree_low_cst (TYPE_SIZE_UNIT (type), 1)\n \t      < PARAM_VALUE (PARAM_TM_MAX_AGGREGATE_SIZE))\n \t  /* We must be able to copy this type normally.  I.e., no\n@@ -1187,7 +1187,7 @@ tm_log_emit_stmt (tree addr, gimple stmt)\n     code = BUILT_IN_TM_LOG_DOUBLE;\n   else if (type == long_double_type_node)\n     code = BUILT_IN_TM_LOG_LDOUBLE;\n-  else if (host_integerp (size, 1))\n+  else if (tree_fits_uhwi_p (size))\n     {\n       unsigned int n = tree_low_cst (size, 1);\n       switch (n)\n@@ -2105,7 +2105,7 @@ build_tm_load (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n   else if (type == long_double_type_node)\n     code = BUILT_IN_TM_LOAD_LDOUBLE;\n   else if (TYPE_SIZE_UNIT (type) != NULL\n-\t   && host_integerp (TYPE_SIZE_UNIT (type), 1))\n+\t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n       switch (tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n \t{\n@@ -2177,7 +2177,7 @@ build_tm_store (location_t loc, tree lhs, tree rhs, gimple_stmt_iterator *gsi)\n   else if (type == long_double_type_node)\n     code = BUILT_IN_TM_STORE_LDOUBLE;\n   else if (TYPE_SIZE_UNIT (type) != NULL\n-\t   && host_integerp (TYPE_SIZE_UNIT (type), 1))\n+\t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (type)))\n     {\n       switch (tree_low_cst (TYPE_SIZE_UNIT (type), 1))\n \t{"}, {"sha": "e8a06ccea67152d7eab97509e9a8691357c2a565", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -2701,8 +2701,8 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n \n       if (TREE_CODE (t) == BIT_FIELD_REF)\n \t{\n-\t  if (!host_integerp (TREE_OPERAND (t, 1), 1)\n-\t      || !host_integerp (TREE_OPERAND (t, 2), 1))\n+\t  if (!tree_fits_uhwi_p (TREE_OPERAND (t, 1))\n+\t      || !tree_fits_uhwi_p (TREE_OPERAND (t, 2)))\n \t    {\n \t      error (\"invalid position or size operand to BIT_FIELD_REF\");\n \t      return t;"}, {"sha": "678bbb9c4e3228fab26a910b2a49422311b261aa", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -407,7 +407,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n     }\n   if (size_tree != NULL_TREE)\n     {\n-      if (! host_integerp (size_tree, 1))\n+      if (! tree_fits_uhwi_p (size_tree))\n \tbitsize = -1;\n       else\n \tbitsize = TREE_INT_CST_LOW (size_tree);\n@@ -475,7 +475,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t   because that would get us out of the structure otherwise.  */\n \t\tif (maxsize != -1\n \t\t    && csize\n-\t\t    && host_integerp (csize, 1)\n+\t\t    && tree_fits_uhwi_p (csize)\n \t\t    && bit_offset.fits_shwi ())\n \t\t  maxsize = TREE_INT_CST_LOW (csize)\n \t\t\t    - bit_offset.to_shwi ();\n@@ -519,7 +519,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t\t   because that would get us outside of the array otherwise.  */\n \t\tif (maxsize != -1\n \t\t    && asize\n-\t\t    && host_integerp (asize, 1)\n+\t\t    && tree_fits_uhwi_p (asize)\n \t\t    && bit_offset.fits_shwi ())\n \t\t  maxsize = TREE_INT_CST_LOW (asize)\n \t\t\t    - bit_offset.to_shwi ();\n@@ -569,7 +569,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n \t  if (seen_variable_array_ref\n \t      && maxsize != -1\n \t      && (!bit_offset.fits_shwi ()\n-\t\t  || !host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+\t\t  || !tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp)))\n \t\t  || (bit_offset.to_shwi () + maxsize\n \t\t      == (HOST_WIDE_INT) TREE_INT_CST_LOW\n \t\t            (TYPE_SIZE (TREE_TYPE (exp))))))\n@@ -606,7 +606,7 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n   if (seen_variable_array_ref\n       && maxsize != -1\n       && (!bit_offset.fits_shwi ()\n-\t  || !host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1)\n+\t  || !tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp)))\n \t  || (bit_offset.to_shwi () + maxsize\n \t      == (HOST_WIDE_INT) TREE_INT_CST_LOW\n \t           (TYPE_SIZE (TREE_TYPE (exp))))))\n@@ -631,15 +631,15 @@ get_ref_base_and_extent (tree exp, HOST_WIDE_INT *poffset,\n       /* If maxsize is unknown adjust it according to the size of the\n          base decl.  */\n       if (maxsize == -1\n-\t  && host_integerp (DECL_SIZE (exp), 1))\n+\t  && tree_fits_uhwi_p (DECL_SIZE (exp)))\n \tmaxsize = TREE_INT_CST_LOW (DECL_SIZE (exp)) - hbit_offset;\n     }\n   else if (CONSTANT_CLASS_P (exp))\n     {\n       /* If maxsize is unknown adjust it according to the size of the\n          base type constant.  */\n       if (maxsize == -1\n-\t  && host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1))\n+\t  && tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp))))\n \tmaxsize = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp))) - hbit_offset;\n     }\n "}, {"sha": "98d44bda3f5835647561997ddf965558f9efa4d2", "filename": "gcc/tree-object-size.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-object-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-object-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-object-size.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -81,7 +81,7 @@ static unsigned HOST_WIDE_INT offset_limit;\n static void\n init_offset_limit (void)\n {\n-  if (host_integerp (TYPE_MAX_VALUE (sizetype), 1))\n+  if (tree_fits_uhwi_p (TYPE_MAX_VALUE (sizetype)))\n     offset_limit = tree_low_cst (TYPE_MAX_VALUE (sizetype), 1);\n   else\n     offset_limit = -1;\n@@ -209,14 +209,14 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n     }\n   else if (pt_var\n \t   && DECL_P (pt_var)\n-\t   && host_integerp (DECL_SIZE_UNIT (pt_var), 1)\n+\t   && tree_fits_uhwi_p (DECL_SIZE_UNIT (pt_var))\n \t   && (unsigned HOST_WIDE_INT)\n \t        tree_low_cst (DECL_SIZE_UNIT (pt_var), 1) < offset_limit)\n     pt_var_size = DECL_SIZE_UNIT (pt_var);\n   else if (pt_var\n \t   && TREE_CODE (pt_var) == STRING_CST\n \t   && TYPE_SIZE_UNIT (TREE_TYPE (pt_var))\n-\t   && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n+\t   && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)))\n \t   && (unsigned HOST_WIDE_INT)\n \t      tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (pt_var)), 1)\n \t      < offset_limit)\n@@ -243,7 +243,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n \t  if (var != pt_var && TREE_CODE (var) == ARRAY_REF)\n \t    var = TREE_OPERAND (var, 0);\n \t  if (! TYPE_SIZE_UNIT (TREE_TYPE (var))\n-\t      || ! host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (var)), 1)\n+\t      || ! tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (var)))\n \t      || (pt_var_size\n \t\t  && tree_int_cst_lt (pt_var_size,\n \t\t\t\t      TYPE_SIZE_UNIT (TREE_TYPE (var)))))\n@@ -371,7 +371,7 @@ addr_object_size (struct object_size_info *osi, const_tree ptr,\n   else\n     bytes = pt_var_size;\n \n-  if (host_integerp (bytes, 1))\n+  if (tree_fits_uhwi_p (bytes))\n     return tree_low_cst (bytes, 1);\n \n   return unknown[object_size_type];\n@@ -435,7 +435,7 @@ alloc_object_size (const_gimple call, int object_size_type)\n   else if (arg1 >= 0)\n     bytes = fold_convert (sizetype, gimple_call_arg (call, arg1));\n \n-  if (bytes && host_integerp (bytes, 1))\n+  if (bytes && tree_fits_uhwi_p (bytes))\n     return tree_low_cst (bytes, 1);\n \n   return unknown[object_size_type];\n@@ -796,7 +796,7 @@ plus_stmt_object_size (struct object_size_info *osi, tree var, gimple stmt)\n       && (TREE_CODE (op0) == SSA_NAME\n \t  || TREE_CODE (op0) == ADDR_EXPR))\n     {\n-      if (! host_integerp (op1, 1))\n+      if (! tree_fits_uhwi_p (op1))\n \tbytes = unknown[object_size_type];\n       else if (TREE_CODE (op0) == SSA_NAME)\n \treturn merge_object_sizes (osi, var, op0, tree_low_cst (op1, 1));\n@@ -1228,7 +1228,7 @@ compute_object_sizes (void)\n \t\t{\n \t\t  tree ost = gimple_call_arg (call, 1);\n \n-\t\t  if (host_integerp (ost, 1))\n+\t\t  if (tree_fits_uhwi_p (ost))\n \t\t    {\n \t\t      unsigned HOST_WIDE_INT object_size_type\n \t\t\t= tree_low_cst (ost, 1);"}, {"sha": "71769eb7d87c45532a8de3e9aaaef050280f5836", "filename": "gcc/tree-sra.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-sra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-sra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-sra.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -742,12 +742,12 @@ type_internals_preclude_sra_p (tree type, const char **msg)\n \t\t*msg = \"zero structure field size\";\n \t        return true;\n \t      }\n-\t    if (!host_integerp (DECL_FIELD_OFFSET (fld), 1))\n+\t    if (!tree_fits_uhwi_p (DECL_FIELD_OFFSET (fld)))\n \t      {\n \t\t*msg = \"structure field offset not fixed\";\n \t\treturn true;\n \t      }\n-\t    if (!host_integerp (DECL_SIZE (fld), 1))\n+\t    if (!tree_fits_uhwi_p (DECL_SIZE (fld)))\n \t      {\n \t        *msg = \"structure field size not fixed\";\n \t\treturn true;\n@@ -1651,12 +1651,12 @@ build_user_friendly_ref_for_offset (tree *res, tree type, HOST_WIDE_INT offset,\n \t\tcontinue;\n \n \t      tr_pos = bit_position (fld);\n-\t      if (!tr_pos || !host_integerp (tr_pos, 1))\n+\t      if (!tr_pos || !tree_fits_uhwi_p (tr_pos))\n \t\tcontinue;\n \t      pos = TREE_INT_CST_LOW (tr_pos);\n \t      gcc_assert (TREE_CODE (type) == RECORD_TYPE || pos == 0);\n \t      tr_size = DECL_SIZE (fld);\n-\t      if (!tr_size || !host_integerp (tr_size, 1))\n+\t      if (!tr_size || !tree_fits_uhwi_p (tr_size))\n \t\tcontinue;\n \t      size = TREE_INT_CST_LOW (tr_size);\n \t      if (size == 0)\n@@ -1681,7 +1681,7 @@ build_user_friendly_ref_for_offset (tree *res, tree type, HOST_WIDE_INT offset,\n \n \tcase ARRAY_TYPE:\n \t  tr_size = TYPE_SIZE (TREE_TYPE (type));\n-\t  if (!tr_size || !host_integerp (tr_size, 1))\n+\t  if (!tr_size || !tree_fits_uhwi_p (tr_size))\n \t    return false;\n \t  el_size = tree_low_cst (tr_size, 1);\n \n@@ -1759,7 +1759,7 @@ maybe_add_sra_candidate (tree var)\n       reject (var, \"has incomplete type\");\n       return false;\n     }\n-  if (!host_integerp (TYPE_SIZE (type), 1))\n+  if (!tree_fits_uhwi_p (TYPE_SIZE (type)))\n     {\n       reject (var, \"type size not fixed\");\n       return false;\n@@ -2799,8 +2799,8 @@ sra_modify_expr (tree *expr, gimple_stmt_iterator *gsi, bool write)\n     {\n       HOST_WIDE_INT start_offset, chunk_size;\n       if (bfr\n-\t  && host_integerp (TREE_OPERAND (bfr, 1), 1)\n-\t  && host_integerp (TREE_OPERAND (bfr, 2), 1))\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (bfr, 1))\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (bfr, 2)))\n \t{\n \t  chunk_size = tree_low_cst (TREE_OPERAND (bfr, 1), 1);\n \t  start_offset = access->offset\n@@ -3693,7 +3693,7 @@ find_param_candidates (void)\n \tcontinue;\n \n       if (!COMPLETE_TYPE_P (type)\n-\t  || !host_integerp (TYPE_SIZE (type), 1)\n+\t  || !tree_fits_uhwi_p (TYPE_SIZE (type))\n           || tree_low_cst (TYPE_SIZE (type), 1) == 0\n \t  || (AGGREGATE_TYPE_P (type)\n \t      && type_internals_preclude_sra_p (type, &msg)))"}, {"sha": "6ba912d11f8a76aeaade54c08b9b4b00c20d2cba", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1487,7 +1487,7 @@ bit_value_assume_aligned (gimple stmt)\n \t       && TREE_CODE (ptrval.value) == INTEGER_CST)\n \t      || ptrval.mask.is_minus_one ());\n   align = gimple_call_arg (stmt, 1);\n-  if (!host_integerp (align, 1))\n+  if (!tree_fits_uhwi_p (align))\n     return ptrval;\n   aligni = tree_low_cst (align, 1);\n   if (aligni <= 1\n@@ -1496,7 +1496,7 @@ bit_value_assume_aligned (gimple stmt)\n   if (gimple_call_num_args (stmt) > 2)\n     {\n       misalign = gimple_call_arg (stmt, 2);\n-      if (!host_integerp (misalign, 1))\n+      if (!tree_fits_uhwi_p (misalign))\n \treturn ptrval;\n       misaligni = tree_low_cst (misalign, 1);\n       if (misaligni >= aligni)\n@@ -1881,7 +1881,7 @@ fold_builtin_alloca_with_align (gimple stmt)\n   arg = get_constant_value (gimple_call_arg (stmt, 0));\n   if (arg == NULL_TREE\n       || TREE_CODE (arg) != INTEGER_CST\n-      || !host_integerp (arg, 1))\n+      || !tree_fits_uhwi_p (arg))\n     return NULL_TREE;\n \n   size = TREE_INT_CST_LOW (arg);"}, {"sha": "e8b4f73ee62e6d0109c18b3c78b1a9395457a56b", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1528,7 +1528,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t  use_operand_p use_p;\n \n \t  if (!tree_fits_shwi_p (val2)\n-\t      || !host_integerp (len2, 1))\n+\t      || !tree_fits_uhwi_p (len2))\n \t    break;\n \t  if (is_gimple_call (stmt1))\n \t    {\n@@ -1547,12 +1547,12 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t      src1 = gimple_call_arg (stmt1, 1);\n \t      len1 = gimple_call_arg (stmt1, 2);\n \t      lhs1 = gimple_call_lhs (stmt1);\n-\t      if (!host_integerp (len1, 1))\n+\t      if (!tree_fits_uhwi_p (len1))\n \t\tbreak;\n \t      str1 = string_constant (src1, &off1);\n \t      if (str1 == NULL_TREE)\n \t\tbreak;\n-\t      if (!host_integerp (off1, 1)\n+\t      if (!tree_fits_uhwi_p (off1)\n \t\t  || compare_tree_int (off1, TREE_STRING_LENGTH (str1) - 1) > 0\n \t\t  || compare_tree_int (len1, TREE_STRING_LENGTH (str1)\n \t\t\t\t\t     - tree_low_cst (off1, 1)) > 0\n@@ -1593,7 +1593,7 @@ simplify_builtin_call (gimple_stmt_iterator *gsi_p, tree callee2)\n \t  /* If the difference between the second and first destination pointer\n \t     is not constant, or is bigger than memcpy length, bail out.  */\n \t  if (diff == NULL\n-\t      || !host_integerp (diff, 1)\n+\t      || !tree_fits_uhwi_p (diff)\n \t      || tree_int_cst_lt (len1, diff))\n \t    break;\n \n@@ -2317,8 +2317,8 @@ simplify_rotate (gimple_stmt_iterator *gsi)\n     return false;\n \n   /* CNT1 + CNT2 == B case above.  */\n-  if (host_integerp (def_arg2[0], 1)\n-      && host_integerp (def_arg2[1], 1)\n+  if (tree_fits_uhwi_p (def_arg2[0])\n+      && tree_fits_uhwi_p (def_arg2[1])\n       && (unsigned HOST_WIDE_INT) tree_low_cst (def_arg2[0], 1)\n \t + tree_low_cst (def_arg2[1], 1) == TYPE_PRECISION (rtype))\n     rotcnt = def_arg2[0];"}, {"sha": "0ac5963e1153deb839a184b68d0a0ad430c22662", "filename": "gcc/tree-ssa-loop-ivcanon.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-loop-ivcanon.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-loop-ivcanon.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-ivcanon.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -667,7 +667,7 @@ try_unroll_loop_completely (struct loop *loop,\n      If the number of execution of loop is determined by standard induction\n      variable test, then EXIT and EDGE_TO_CANCEL are the two edges leaving\n      from the iv test.  */\n-  if (host_integerp (niter, 1))\n+  if (tree_fits_uhwi_p (niter))\n     {\n       n_unroll = tree_low_cst (niter, 1);\n       n_unroll_found = true;"}, {"sha": "426f4bcb4e7e543af9185a02b3e609a16d0f5b6e", "filename": "gcc/tree-ssa-loop-prefetch.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-loop-prefetch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-loop-prefetch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-prefetch.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1508,7 +1508,7 @@ self_reuse_distance (data_reference_p dr, unsigned *loop_sizes, unsigned n,\n       if (TREE_CODE (ref) == ARRAY_REF)\n \t{\n \t  stride = TYPE_SIZE_UNIT (TREE_TYPE (ref));\n-\t  if (host_integerp (stride, 1))\n+\t  if (tree_fits_uhwi_p (stride))\n \t    astride = tree_low_cst (stride, 1);\n \t  else\n \t    astride = L1_CACHE_LINE_SIZE;"}, {"sha": "666a9155e26ab31b812e8bc52d7d8bda3c2f4e9a", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1975,9 +1975,9 @@ hoist_adjacent_loads (basic_block bb0, basic_block bb1,\n       tree_offset2 = bit_position (field2);\n       tree_size2 = DECL_SIZE (field2);\n \n-      if (!host_integerp (tree_offset1, 1)\n-\t  || !host_integerp (tree_offset2, 1)\n-\t  || !host_integerp (tree_size2, 1))\n+      if (!tree_fits_uhwi_p (tree_offset1)\n+\t  || !tree_fits_uhwi_p (tree_offset2)\n+\t  || !tree_fits_uhwi_p (tree_size2))\n \tcontinue;\n \n       offset1 = TREE_INT_CST_LOW (tree_offset1);"}, {"sha": "a49a282a69f6e2a427c952509fd96f9db85d88ab", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -936,7 +936,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n     }\n   if (size_tree != NULL_TREE)\n     {\n-      if (!host_integerp (size_tree, 1))\n+      if (!tree_fits_uhwi_p (size_tree))\n \tsize = -1;\n       else\n \tsize = TREE_INT_CST_LOW (size_tree);\n@@ -1006,7 +1006,7 @@ ao_ref_init_from_vn_reference (ao_ref *ref,\n \t       parts manually.  */\n \n \t    if (op->op1\n-\t\t|| !host_integerp (DECL_FIELD_OFFSET (field), 1))\n+\t\t|| !tree_fits_uhwi_p (DECL_FIELD_OFFSET (field)))\n \t      max_size = -1;\n \t    else\n \t      {\n@@ -1586,7 +1586,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n   if (is_gimple_reg_type (vr->type)\n       && gimple_call_builtin_p (def_stmt, BUILT_IN_MEMSET)\n       && integer_zerop (gimple_call_arg (def_stmt, 1))\n-      && host_integerp (gimple_call_arg (def_stmt, 2), 1)\n+      && tree_fits_uhwi_p (gimple_call_arg (def_stmt, 2))\n       && TREE_CODE (gimple_call_arg (def_stmt, 0)) == ADDR_EXPR)\n     {\n       tree ref2 = TREE_OPERAND (gimple_call_arg (def_stmt, 0), 0);\n@@ -1835,7 +1835,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t       || TREE_CODE (gimple_call_arg (def_stmt, 0)) == SSA_NAME)\n \t   && (TREE_CODE (gimple_call_arg (def_stmt, 1)) == ADDR_EXPR\n \t       || TREE_CODE (gimple_call_arg (def_stmt, 1)) == SSA_NAME)\n-\t   && host_integerp (gimple_call_arg (def_stmt, 2), 1))\n+\t   && tree_fits_uhwi_p (gimple_call_arg (def_stmt, 2)))\n     {\n       tree lhs, rhs;\n       ao_ref r;\n@@ -1862,7 +1862,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  if (!tem)\n \t    return (void *)-1;\n \t  if (TREE_CODE (tem) == MEM_REF\n-\t      && host_integerp (TREE_OPERAND (tem, 1), 1))\n+\t      && tree_fits_uhwi_p (TREE_OPERAND (tem, 1)))\n \t    {\n \t      lhs = TREE_OPERAND (tem, 0);\n \t      lhs_offset += TREE_INT_CST_LOW (TREE_OPERAND (tem, 1));\n@@ -1888,7 +1888,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t  if (!tem)\n \t    return (void *)-1;\n \t  if (TREE_CODE (tem) == MEM_REF\n-\t      && host_integerp (TREE_OPERAND (tem, 1), 1))\n+\t      && tree_fits_uhwi_p (TREE_OPERAND (tem, 1)))\n \t    {\n \t      rhs = TREE_OPERAND (tem, 0);\n \t      rhs_offset += TREE_INT_CST_LOW (TREE_OPERAND (tem, 1));\n@@ -1909,7 +1909,7 @@ vn_reference_lookup_3 (ao_ref *ref, tree vuse, void *vr_)\n \t   && !DECL_P (base))\n \t  || (TREE_CODE (base) == MEM_REF\n \t      && (TREE_OPERAND (base, 0) != lhs\n-\t\t  || !host_integerp (TREE_OPERAND (base, 1), 1)))\n+\t\t  || !tree_fits_uhwi_p (TREE_OPERAND (base, 1))))\n \t  || (DECL_P (base)\n \t      && (TREE_CODE (lhs) != ADDR_EXPR\n \t\t  || TREE_OPERAND (lhs, 0) != base)))\n@@ -3221,7 +3221,7 @@ simplify_binary_expression (gimple stmt)\n   /* Pointer plus constant can be represented as invariant address.\n      Do so to allow further propatation, see also tree forwprop.  */\n   if (code == POINTER_PLUS_EXPR\n-      && host_integerp (op1, 1)\n+      && tree_fits_uhwi_p (op1)\n       && TREE_CODE (op0) == ADDR_EXPR\n       && is_gimple_min_invariant (op0))\n     return build_invariant_address (TREE_TYPE (op0),"}, {"sha": "bacc59fd0e776233db6cc0cd868ce203b2547b69", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -846,9 +846,9 @@ adjust_last_stmt (strinfo si, gimple stmt, bool is_strcat)\n     }\n \n   len = gimple_call_arg (last.stmt, 2);\n-  if (host_integerp (len, 1))\n+  if (tree_fits_uhwi_p (len))\n     {\n-      if (!host_integerp (last.len, 1)\n+      if (!tree_fits_uhwi_p (last.len)\n \t  || integer_zerop (len)\n \t  || (unsigned HOST_WIDE_INT) tree_low_cst (len, 1)\n \t     != (unsigned HOST_WIDE_INT) tree_low_cst (last.len, 1) + 1)\n@@ -1310,7 +1310,7 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n     return;\n \n   if (olddsi != NULL\n-      && host_integerp (len, 1)\n+      && tree_fits_uhwi_p (len)\n       && !integer_zerop (len))\n     adjust_last_stmt (olddsi, stmt, false);\n \n@@ -1336,7 +1336,7 @@ handle_builtin_memcpy (enum built_in_function bcode, gimple_stmt_iterator *gsi)\n       si = NULL;\n       /* Handle memcpy (x, \"abcd\", 5) or\n \t memcpy (x, \"abc\\0uvw\", 7).  */\n-      if (!host_integerp (len, 1)\n+      if (!tree_fits_uhwi_p (len)\n \t  || (unsigned HOST_WIDE_INT) tree_low_cst (len, 1)\n \t     <= (unsigned HOST_WIDE_INT) ~idx)\n \treturn;\n@@ -1626,7 +1626,7 @@ handle_pointer_plus (gimple_stmt_iterator *gsi)\n   if (idx < 0)\n     {\n       tree off = gimple_assign_rhs2 (stmt);\n-      if (host_integerp (off, 1)\n+      if (tree_fits_uhwi_p (off)\n \t  && (unsigned HOST_WIDE_INT) tree_low_cst (off, 1)\n \t     <= (unsigned HOST_WIDE_INT) ~idx)\n \tssa_ver_to_stridx[SSA_NAME_VERSION (lhs)]"}, {"sha": "f1172e7f7c9cf70c35e21836bcb79da8dabc60b8", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -3429,7 +3429,7 @@ get_constraint_for_1 (tree t, vec<ce_s> *results, bool address_p,\n \t\t  && curr)\n \t\t{\n \t\t  unsigned HOST_WIDE_INT size;\n-\t\t  if (host_integerp (TYPE_SIZE (TREE_TYPE (t)), 1))\n+\t\t  if (tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (t))))\n \t\t    size = TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (t)));\n \t\t  else\n \t\t    size = -1;\n@@ -5348,7 +5348,7 @@ push_fields_onto_fieldstack (tree type, vec<fieldoff_s> *fieldstack,\n \t      }\n \n \t    if (!DECL_SIZE (field)\n-\t\t|| !host_integerp (DECL_SIZE (field), 1))\n+\t\t|| !tree_fits_uhwi_p (DECL_SIZE (field)))\n \t      has_unknown_size = true;\n \n \t    /* If adjacent fields do not contain pointers merge them.  */\n@@ -5624,7 +5624,7 @@ create_variable_info_for_1 (tree decl, const char *name)\n   unsigned int i;\n \n   if (!declsize\n-      || !host_integerp (declsize, 1))\n+      || !tree_fits_uhwi_p (declsize))\n     {\n       vi = new_var_info (decl, name);\n       vi->offset = 0;"}, {"sha": "e39734730c4c07bd8158ef45a64a8a68d026187e", "filename": "gcc/tree-stdarg.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-stdarg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-stdarg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-stdarg.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -172,7 +172,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       if ((rhs_code == POINTER_PLUS_EXPR\n \t   || rhs_code == PLUS_EXPR)\n \t  && TREE_CODE (rhs1) == SSA_NAME\n-\t  && host_integerp (gimple_assign_rhs2 (stmt), 1))\n+\t  && tree_fits_uhwi_p (gimple_assign_rhs2 (stmt)))\n \t{\n \t  ret += tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n \t  lhs = rhs1;\n@@ -182,7 +182,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       if (rhs_code == ADDR_EXPR \n \t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == MEM_REF\n \t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n-\t  && host_integerp (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1))\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1)))\n \t{\n \t  ret += tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n \t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n@@ -239,7 +239,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       if ((rhs_code == POINTER_PLUS_EXPR\n \t   || rhs_code == PLUS_EXPR)\n \t  && TREE_CODE (rhs1) == SSA_NAME\n-\t  && host_integerp (gimple_assign_rhs2 (stmt), 1))\n+\t  && tree_fits_uhwi_p (gimple_assign_rhs2 (stmt)))\n \t{\n \t  val -= tree_low_cst (gimple_assign_rhs2 (stmt), 1);\n \t  lhs = rhs1;\n@@ -249,7 +249,7 @@ va_list_counter_bump (struct stdarg_info *si, tree counter, tree rhs,\n       if (rhs_code == ADDR_EXPR \n \t  && TREE_CODE (TREE_OPERAND (rhs1, 0)) == MEM_REF\n \t  && TREE_CODE (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0)) == SSA_NAME\n-\t  && host_integerp (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1))\n+\t  && tree_fits_uhwi_p (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1)))\n \t{\n \t  val -= tree_low_cst (TREE_OPERAND (TREE_OPERAND (rhs1, 0), 1), 1);\n \t  lhs = TREE_OPERAND (TREE_OPERAND (rhs1, 0), 0);\n@@ -589,7 +589,7 @@ check_all_va_list_escapes (struct stdarg_info *si)\n \t\t  if (rhs_code == MEM_REF\n \t\t      && TREE_OPERAND (rhs, 0) == use\n \t\t      && TYPE_SIZE_UNIT (TREE_TYPE (rhs))\n-\t\t      && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (rhs)), 1)\n+\t\t      && tree_fits_uhwi_p (TYPE_SIZE_UNIT (TREE_TYPE (rhs)))\n \t\t      && si->offsets[SSA_NAME_VERSION (use)] != -1)\n \t\t    {\n \t\t      unsigned HOST_WIDE_INT gpr_size;"}, {"sha": "322eafe5272b142088993920a5e39935a371037f", "filename": "gcc/tree-switch-conversion.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-switch-conversion.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-switch-conversion.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-switch-conversion.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -697,7 +697,7 @@ static bool\n check_range (struct switch_conv_info *info)\n {\n   gcc_assert (info->range_size);\n-  if (!host_integerp (info->range_size, 1))\n+  if (!tree_fits_uhwi_p (info->range_size))\n     {\n       info->reason = \"index range way too large or otherwise unusable\";\n       return false;"}, {"sha": "c4246079a259146ce060547591c5971f37f0e7d0", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -772,7 +772,7 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n   /* Modulo alignment.  */\n   misalign = size_binop (FLOOR_MOD_EXPR, misalign, alignment);\n \n-  if (!host_integerp (misalign, 1))\n+  if (!tree_fits_uhwi_p (misalign))\n     {\n       /* Negative or overflowed misalignment value.  */\n       if (dump_enabled_p ())\n@@ -960,7 +960,7 @@ vect_verify_datarefs_alignment (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n static bool\n not_size_aligned (tree exp)\n {\n-  if (!host_integerp (TYPE_SIZE (TREE_TYPE (exp)), 1))\n+  if (!tree_fits_uhwi_p (TYPE_SIZE (TREE_TYPE (exp))))\n     return true;\n \n   return (TREE_INT_CST_LOW (TYPE_SIZE (TREE_TYPE (exp)))\n@@ -2544,8 +2544,8 @@ vect_analyze_data_ref_accesses (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo)\n \t  /* Check that the data-refs have the same constant size and step.  */\n \t  tree sza = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (dra)));\n \t  tree szb = TYPE_SIZE_UNIT (TREE_TYPE (DR_REF (drb)));\n-\t  if (!host_integerp (sza, 1)\n-\t      || !host_integerp (szb, 1)\n+\t  if (!tree_fits_uhwi_p (sza)\n+\t      || !tree_fits_uhwi_p (szb)\n \t      || !tree_int_cst_equal (sza, szb)\n \t      || !tree_fits_shwi_p (DR_STEP (dra))\n \t      || !tree_fits_shwi_p (DR_STEP (drb))\n@@ -3268,7 +3268,7 @@ vect_analyze_data_refs (loop_vec_info loop_vinfo,\n \t\t      STRIP_NOPS (off);\n \t\t      if (TREE_CODE (DR_INIT (newdr)) == INTEGER_CST\n \t\t\t  && TREE_CODE (off) == MULT_EXPR\n-\t\t\t  && host_integerp (TREE_OPERAND (off, 1), 1))\n+\t\t\t  && tree_fits_uhwi_p (TREE_OPERAND (off, 1)))\n \t\t\t{\n \t\t\t  tree step = TREE_OPERAND (off, 1);\n \t\t\t  off = TREE_OPERAND (off, 0);"}, {"sha": "b13e433b24d25803531772f99a9bf53ecaeaec16", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -485,7 +485,7 @@ expand_vector_divmod (gimple_stmt_iterator *gsi, tree type, tree op0,\n \t\t      unsigned HOST_WIDE_INT d2;\n \t\t      int this_pre_shift;\n \n-\t\t      if (!host_integerp (cst2, 1))\n+\t\t      if (!tree_fits_uhwi_p (cst2))\n \t\t\treturn NULL_TREE;\n \t\t      d2 = tree_low_cst (cst2, 1) & mask;\n \t\t      if (d2 == 0)\n@@ -1054,7 +1054,7 @@ vector_element (gimple_stmt_iterator *gsi, tree vect, tree idx, tree *ptmpvec)\n       /* Given that we're about to compute a binary modulus,\n \t we don't care about the high bits of the value.  */\n       index = TREE_INT_CST_LOW (idx);\n-      if (!host_integerp (idx, 1) || index >= elements)\n+      if (!tree_fits_uhwi_p (idx) || index >= elements)\n \t{\n \t  index &= elements - 1;\n \t  idx = build_int_cst (TREE_TYPE (idx), index);\n@@ -1186,7 +1186,7 @@ lower_vec_perm (gimple_stmt_iterator *gsi)\n \t  unsigned HOST_WIDE_INT index;\n \n \t  index = TREE_INT_CST_LOW (i_val);\n-\t  if (!host_integerp (i_val, 1) || index >= elements)\n+\t  if (!tree_fits_uhwi_p (i_val) || index >= elements)\n \t    i_val = build_int_cst (mask_elt_type, index & (elements - 1));\n \n           if (two_operand_p && (index & elements) != 0)"}, {"sha": "a0d366ad211f80d226307dd488f1feb453ae9de7", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1635,7 +1635,7 @@ vect_recog_rotate_pattern (vec<gimple> *stmts, tree *type_in, tree *type_out)\n \n   if (TREE_CODE (def) == INTEGER_CST)\n     {\n-      if (!host_integerp (def, 1)\n+      if (!tree_fits_uhwi_p (def)\n \t  || (unsigned HOST_WIDE_INT) tree_low_cst (def, 1)\n \t     >= GET_MODE_PRECISION (TYPE_MODE (type))\n \t  || integer_zerop (def))"}, {"sha": "e2ff918602aaeef35b2bd54ea100255f216cdab2", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -5015,7 +5015,7 @@ register_edge_assert_for_2 (tree name, edge e, gimple_stmt_iterator bsi,\n \t  name2 = gimple_assign_rhs1 (def_stmt);\n \t  cst2 = gimple_assign_rhs2 (def_stmt);\n \t  if (TREE_CODE (name2) == SSA_NAME\n-\t      && host_integerp (cst2, 1)\n+\t      && tree_fits_uhwi_p (cst2)\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (name2))\n \t      && IN_RANGE (tree_low_cst (cst2, 1), 1, prec - 1)\n \t      && prec <= HOST_BITS_PER_DOUBLE_INT"}, {"sha": "4f290ba2f82a51aba817cadcaed4e86dab25c9ae", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -2210,7 +2210,7 @@ tree_ctz (const_tree expr)\n       return MIN (ret1 + ret2, prec);\n     case LSHIFT_EXPR:\n       ret1 = tree_ctz (TREE_OPERAND (expr, 0));\n-      if (host_integerp (TREE_OPERAND (expr, 1), 1)\n+      if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n \t  && ((unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (expr, 1), 1)\n \t      < (unsigned HOST_WIDE_INT) prec))\n \t{\n@@ -2219,7 +2219,7 @@ tree_ctz (const_tree expr)\n \t}\n       return ret1;\n     case RSHIFT_EXPR:\n-      if (host_integerp (TREE_OPERAND (expr, 1), 1)\n+      if (tree_fits_uhwi_p (TREE_OPERAND (expr, 1))\n \t  && ((unsigned HOST_WIDE_INT) tree_low_cst (TREE_OPERAND (expr, 1), 1)\n \t      < (unsigned HOST_WIDE_INT) prec))\n \t{\n@@ -2674,7 +2674,7 @@ max_int_size_in_bytes (const_tree type)\n     {\n       size_tree = TYPE_ARRAY_MAX_SIZE (type);\n \n-      if (size_tree && host_integerp (size_tree, 1))\n+      if (size_tree && tree_fits_uhwi_p (size_tree))\n \tsize = tree_low_cst (size_tree, 1);\n     }\n \n@@ -2685,7 +2685,7 @@ max_int_size_in_bytes (const_tree type)\n     {\n       size_tree = lang_hooks.types.max_size (type);\n \n-      if (size_tree && host_integerp (size_tree, 1))\n+      if (size_tree && tree_fits_uhwi_p (size_tree))\n \tsize = tree_low_cst (size_tree, 1);\n     }\n \n@@ -7282,7 +7282,7 @@ compare_tree_int (const_tree t, unsigned HOST_WIDE_INT u)\n bool\n valid_constant_size_p (const_tree size)\n {\n-  if (! host_integerp (size, 1)\n+  if (! tree_fits_uhwi_p (size)\n       || TREE_OVERFLOW (size)\n       || tree_int_cst_sign_bit (size) != 0)\n     return false;\n@@ -7686,7 +7686,7 @@ build_nonstandard_integer_type (unsigned HOST_WIDE_INT precision,\n     fixup_signed_type (itype);\n \n   ret = itype;\n-  if (host_integerp (TYPE_MAX_VALUE (itype), 1))\n+  if (tree_fits_uhwi_p (TYPE_MAX_VALUE (itype)))\n     ret = type_hash_canon (tree_low_cst (TYPE_MAX_VALUE (itype), 1), itype);\n   if (precision <= MAX_INT_CACHED_PREC)\n     nonstandard_integer_type_cache[precision + unsignedp] = ret;\n@@ -8523,7 +8523,7 @@ get_narrower (tree op, int *unsignedp_ptr)\n       && TREE_CODE (TREE_TYPE (op)) != FIXED_POINT_TYPE\n       /* Ensure field is laid out already.  */\n       && DECL_SIZE (TREE_OPERAND (op, 1)) != 0\n-      && host_integerp (DECL_SIZE (TREE_OPERAND (op, 1)), 1))\n+      && tree_fits_uhwi_p (DECL_SIZE (TREE_OPERAND (op, 1))))\n     {\n       unsigned HOST_WIDE_INT innerprec\n \t= tree_low_cst (DECL_SIZE (TREE_OPERAND (op, 1)), 1);"}, {"sha": "26833ee244bc1ed9059532b64d7a5f597cae4409", "filename": "gcc/tsan.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Ftsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftsan.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -447,7 +447,7 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t  case check_last:\n \t  case fetch_op:\n \t    last_arg = gimple_call_arg (stmt, num - 1);\n-\t    if (!host_integerp (last_arg, 1)\n+\t    if (!tree_fits_uhwi_p (last_arg)\n \t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (last_arg, 1)\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;\n@@ -519,11 +519,11 @@ instrument_builtin_call (gimple_stmt_iterator *gsi)\n \t    gcc_assert (num == 6);\n \t    for (j = 0; j < 6; j++)\n \t      args[j] = gimple_call_arg (stmt, j);\n-\t    if (!host_integerp (args[4], 1)\n+\t    if (!tree_fits_uhwi_p (args[4])\n \t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[4], 1)\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;\n-\t    if (!host_integerp (args[5], 1)\n+\t    if (!tree_fits_uhwi_p (args[5])\n \t\t|| (unsigned HOST_WIDE_INT) tree_low_cst (args[5], 1)\n \t\t   > MEMMODEL_SEQ_CST)\n \t      return;"}, {"sha": "c752a019589fd93e07bcd54d95bd31816b7a1b4e", "filename": "gcc/ubsan.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -233,7 +233,7 @@ ubsan_source_location (location_t loc)\n static unsigned short\n get_ubsan_type_info_for_type (tree type)\n {\n-  gcc_assert (TYPE_SIZE (type) && host_integerp (TYPE_SIZE (type), 1));\n+  gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));\n   int prec = exact_log2 (tree_low_cst (TYPE_SIZE (type), 1));\n   gcc_assert (prec != -1);\n   return (prec << 1) | !TYPE_UNSIGNED (type);"}, {"sha": "d7930631f88b6c837aba7a852c64cbec3f051e5a", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cc269bb6d9f1538870dc94bc3b8cad8f749d1204/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cc269bb6d9f1538870dc94bc3b8cad8f749d1204", "patch": "@@ -1136,7 +1136,7 @@ get_block_for_decl (tree decl)\n      constant size.  */\n   if (DECL_SIZE_UNIT (decl) == NULL)\n     return NULL;\n-  if (!host_integerp (DECL_SIZE_UNIT (decl), 1))\n+  if (!tree_fits_uhwi_p (DECL_SIZE_UNIT (decl)))\n     return NULL;\n \n   /* Find out which section should contain DECL.  We cannot put it into"}]}