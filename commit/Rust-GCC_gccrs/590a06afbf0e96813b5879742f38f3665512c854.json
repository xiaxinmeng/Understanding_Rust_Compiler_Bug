{"sha": "590a06afbf0e96813b5879742f38f3665512c854", "node_id": "C_kwDOANBUbNoAKDU5MGEwNmFmYmYwZTk2ODEzYjU4Nzk3NDJmMzhmMzY2NTUxMmM4NTQ", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-07T13:22:21Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-14T13:52:15Z"}, "message": "aarch64: Add support for Ampere-1A (-mcpu=ampere1a) CPU\n\nThis patch adds support for Ampere-1A CPU:\n - recognize the name of the core and provide detection for -mcpu=native,\n - updated extra_costs,\n - adds a new fusion pair for (A+B+1 and A-B-1).\n\nAmpere-1A and Ampere-1 have more timing difference than the extra\ncosts indicate, but these don't propagate through to the headline\nitems in our extra costs (e.g. the change in latency for scalar sqrt\ndoesn't have a corresponding table entry).\n\ngcc/ChangeLog:\n\n\t* config/aarch64/aarch64-cores.def (AARCH64_CORE): Add ampere1a.\n\t* config/aarch64/aarch64-cost-tables.h: Add ampere1a_extra_costs.\n\t* config/aarch64/aarch64-fusion-pairs.def (AARCH64_FUSION_PAIR):\n\tDefine a new fusion pair for A+B+1/A-B-1 (i.e., add/subtract two\n\tregisters and then +1/-1).\n\t* config/aarch64/aarch64-tune.md: Regenerate.\n\t* config/aarch64/aarch64.cc (aarch_macro_fusion_pair_p): Implement\n\tidiom-matcher for the new fusion pair.\n\t* doc/invoke.texi: Add ampere1a.", "tree": {"sha": "dbd6aaa5db72286dbd4a9eeba1f5e0ac0aeee694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbd6aaa5db72286dbd4a9eeba1f5e0ac0aeee694"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/590a06afbf0e96813b5879742f38f3665512c854", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590a06afbf0e96813b5879742f38f3665512c854", "html_url": "https://github.com/Rust-GCC/gccrs/commit/590a06afbf0e96813b5879742f38f3665512c854", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/590a06afbf0e96813b5879742f38f3665512c854/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ba25973e2f403ee48af2ba579af5017b2f650fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ba25973e2f403ee48af2ba579af5017b2f650fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ba25973e2f403ee48af2ba579af5017b2f650fb"}], "stats": {"total": 177, "additions": 175, "deletions": 2}, "files": [{"sha": "aead587cec1cc3aa4e773a5ad82a81931a969103", "filename": "gcc/config/aarch64/aarch64-cores.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cores.def?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -70,6 +70,7 @@ AARCH64_CORE(\"thunderxt83\",   thunderxt83,   thunderx,  V8A,  (CRC, CRYPTO), thu\n \n /* Ampere Computing ('\\xC0') cores. */\n AARCH64_CORE(\"ampere1\", ampere1, cortexa57, V8_6A, (F16, RNG, AES, SHA3), ampere1, 0xC0, 0xac3, -1)\n+AARCH64_CORE(\"ampere1a\", ampere1a, cortexa57, V8_6A, (F16, RNG, AES, SHA3, MEMTAG), ampere1a, 0xC0, 0xac4, -1)\n /* Do not swap around \"emag\" and \"xgene1\",\n    this order is required to handle variant correctly. */\n AARCH64_CORE(\"emag\",        emag,      xgene1,    V8A,  (CRC, CRYPTO), emag, 0x50, 0x000, 3)"}, {"sha": "48522606fbef93efb0523ce900cd0b6b9b65210e", "filename": "gcc/config/aarch64/aarch64-cost-tables.h", "status": "modified", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-cost-tables.h?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -775,4 +775,111 @@ const struct cpu_cost_table ampere1_extra_costs =\n   }\n };\n \n+const struct cpu_cost_table ampere1a_extra_costs =\n+{\n+  /* ALU */\n+  {\n+    0,                 /* arith.  */\n+    0,                 /* logical.  */\n+    0,                 /* shift.  */\n+    COSTS_N_INSNS (1), /* shift_reg.  */\n+    0,                 /* arith_shift.  */\n+    COSTS_N_INSNS (1), /* arith_shift_reg.  */\n+    0,                 /* log_shift.  */\n+    COSTS_N_INSNS (1), /* log_shift_reg.  */\n+    0,                 /* extend.  */\n+    COSTS_N_INSNS (1), /* extend_arith.  */\n+    0,                 /* bfi.  */\n+    0,                 /* bfx.  */\n+    0,                 /* clz.  */\n+    0,                 /* rev.  */\n+    0,                 /* non_exec.  */\n+    true               /* non_exec_costs_exec.  */\n+  },\n+  {\n+    /* MULT SImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      COSTS_N_INSNS (3),       /* flag_setting.  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (19)       /* idiv.  */\n+    },\n+    /* MULT DImode */\n+    {\n+      COSTS_N_INSNS (3),       /* simple.  */\n+      0,                       /* flag_setting (N/A).  */\n+      COSTS_N_INSNS (3),       /* extend.  */\n+      COSTS_N_INSNS (4),       /* add.  */\n+      COSTS_N_INSNS (4),       /* extend_add.  */\n+      COSTS_N_INSNS (35)       /* idiv.  */\n+    }\n+  },\n+  /* LD/ST */\n+  {\n+    COSTS_N_INSNS (4),         /* load.  */\n+    COSTS_N_INSNS (4),         /* load_sign_extend.  */\n+    0,                         /* ldrd (n/a).  */\n+    0,                         /* ldm_1st.  */\n+    0,                         /* ldm_regs_per_insn_1st.  */\n+    0,                         /* ldm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (5),         /* loadf.  */\n+    COSTS_N_INSNS (5),         /* loadd.  */\n+    COSTS_N_INSNS (5),         /* load_unaligned.  */\n+    0,                         /* store.  */\n+    0,                         /* strd.  */\n+    0,                         /* stm_1st.  */\n+    0,                         /* stm_regs_per_insn_1st.  */\n+    0,                         /* stm_regs_per_insn_subsequent.  */\n+    COSTS_N_INSNS (2),         /* storef.  */\n+    COSTS_N_INSNS (2),         /* stored.  */\n+    COSTS_N_INSNS (2),         /* store_unaligned.  */\n+    COSTS_N_INSNS (3),         /* loadv.  */\n+    COSTS_N_INSNS (3)          /* storev.  */\n+  },\n+  {\n+    /* FP SFmode */\n+    {\n+      COSTS_N_INSNS (25),      /* div.  */\n+      COSTS_N_INSNS (4),       /* mult.  */\n+      COSTS_N_INSNS (4),       /* mult_addsub.  */\n+      COSTS_N_INSNS (4),       /* fma.  */\n+      COSTS_N_INSNS (4),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst.  */\n+      COSTS_N_INSNS (4),       /* neg.  */\n+      COSTS_N_INSNS (4),       /* compare.  */\n+      COSTS_N_INSNS (4),       /* widen.  */\n+      COSTS_N_INSNS (4),       /* narrow.  */\n+      COSTS_N_INSNS (4),       /* toint.  */\n+      COSTS_N_INSNS (4),       /* fromint.  */\n+      COSTS_N_INSNS (4)        /* roundint.  */\n+    },\n+    /* FP DFmode */\n+    {\n+      COSTS_N_INSNS (34),      /* div.  */\n+      COSTS_N_INSNS (5),       /* mult.  */\n+      COSTS_N_INSNS (5),       /* mult_addsub.  */\n+      COSTS_N_INSNS (5),       /* fma.  */\n+      COSTS_N_INSNS (5),       /* addsub.  */\n+      COSTS_N_INSNS (2),       /* fpconst.  */\n+      COSTS_N_INSNS (5),       /* neg.  */\n+      COSTS_N_INSNS (5),       /* compare.  */\n+      COSTS_N_INSNS (5),       /* widen.  */\n+      COSTS_N_INSNS (5),       /* narrow.  */\n+      COSTS_N_INSNS (6),       /* toint.  */\n+      COSTS_N_INSNS (6),       /* fromint.  */\n+      COSTS_N_INSNS (5)        /* roundint.  */\n+    }\n+  },\n+  /* Vector */\n+  {\n+    COSTS_N_INSNS (3),  /* alu.  */\n+    COSTS_N_INSNS (3),  /* mult.  */\n+    COSTS_N_INSNS (2),  /* movi.  */\n+    COSTS_N_INSNS (2),  /* dup.  */\n+    COSTS_N_INSNS (2)   /* extract.  */\n+  }\n+};\n+\n #endif"}, {"sha": "d91f8a2babd8927416f9315f1998e9d3d512afa9", "filename": "gcc/config/aarch64/aarch64-fusion-pairs.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-fusion-pairs.def?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -36,5 +36,6 @@ AARCH64_FUSION_PAIR (\"cmp+branch\", CMP_BRANCH)\n AARCH64_FUSION_PAIR (\"aes+aesmc\", AES_AESMC)\n AARCH64_FUSION_PAIR (\"alu+branch\", ALU_BRANCH)\n AARCH64_FUSION_PAIR (\"alu+cbz\", ALU_CBZ)\n+AARCH64_FUSION_PAIR (\"addsub_2reg_const1\", ADDSUB_2REG_CONST1)\n \n #undef AARCH64_FUSION_PAIR"}, {"sha": "b7d6fc8cc885fe6a468e9e27cceb9e00c2a34115", "filename": "gcc/config/aarch64/aarch64-tune.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-tune.md?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -1,5 +1,5 @@\n ;; -*- buffer-read-only: t -*-\n ;; Generated automatically by gentune.sh from aarch64-cores.def\n (define_attr \"tune\"\n-\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,ampere1,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,cortexx1c,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexa715,cortexx2,neoversen2,demeter,neoversev2\"\n+\t\"cortexa34,cortexa35,cortexa53,cortexa57,cortexa72,cortexa73,thunderx,thunderxt88p1,thunderxt88,octeontx,octeontxt81,octeontxt83,thunderxt81,thunderxt83,ampere1,ampere1a,emag,xgene1,falkor,qdf24xx,exynosm1,phecda,thunderx2t99p1,vulcan,thunderx2t99,cortexa55,cortexa75,cortexa76,cortexa76ae,cortexa77,cortexa78,cortexa78ae,cortexa78c,cortexa65,cortexa65ae,cortexx1,cortexx1c,ares,neoversen1,neoversee1,octeontx2,octeontx2t98,octeontx2t96,octeontx2t93,octeontx2f95,octeontx2f95n,octeontx2f95mm,a64fx,tsv110,thunderx3t110,zeus,neoversev1,neoverse512tvb,saphira,cortexa57cortexa53,cortexa72cortexa53,cortexa73cortexa35,cortexa73cortexa53,cortexa75cortexa55,cortexa76cortexa55,cortexr82,cortexa510,cortexa710,cortexa715,cortexx2,neoversen2,demeter,neoversev2\"\n \t(const (symbol_ref \"((enum attr_tune) aarch64_tune)\")))"}, {"sha": "a7f7c3c0121d635e629e7354e80ddf7162685715", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -1921,6 +1921,43 @@ static const struct tune_params ampere1_tunings =\n   &ampere1_prefetch_tune\n };\n \n+static const struct tune_params ampere1a_tunings =\n+{\n+  &ampere1a_extra_costs,\n+  &generic_addrcost_table,\n+  &generic_regmove_cost,\n+  &ampere1_vector_cost,\n+  &generic_branch_cost,\n+  &generic_approx_modes,\n+  SVE_NOT_IMPLEMENTED, /* sve_width  */\n+  { 4, /* load_int.  */\n+    4, /* store_int.  */\n+    4, /* load_fp.  */\n+    4, /* store_fp.  */\n+    4, /* load_pred.  */\n+    4 /* store_pred.  */\n+  }, /* memmov_cost.  */\n+  4, /* issue_rate  */\n+  (AARCH64_FUSE_ADRP_ADD | AARCH64_FUSE_AES_AESMC |\n+   AARCH64_FUSE_MOV_MOVK | AARCH64_FUSE_MOVK_MOVK |\n+   AARCH64_FUSE_ALU_BRANCH /* adds, ands, bics, ccmp, ccmn */ |\n+   AARCH64_FUSE_CMP_BRANCH | AARCH64_FUSE_ALU_CBZ |\n+   AARCH64_FUSE_ADDSUB_2REG_CONST1),\n+  /* fusible_ops  */\n+  \"32\",\t\t/* function_align.  */\n+  \"4\",\t\t/* jump_align.  */\n+  \"32:16\",\t/* loop_align.  */\n+  2,\t/* int_reassoc_width.  */\n+  4,\t/* fp_reassoc_width.  */\n+  2,\t/* vec_reassoc_width.  */\n+  2,\t/* min_div_recip_mul_sf.  */\n+  2,\t/* min_div_recip_mul_df.  */\n+  0,\t/* max_case_values.  */\n+  tune_params::AUTOPREFETCHER_WEAK,\t/* autoprefetcher_model.  */\n+  (AARCH64_EXTRA_TUNE_NONE),\t\t/* tune_flags.  */\n+  &ampere1_prefetch_tune\n+};\n+\n static const advsimd_vec_cost neoversev1_advsimd_vector_cost =\n {\n   2, /* int_stmt_cost  */\n@@ -25539,6 +25576,33 @@ aarch_macro_fusion_pair_p (rtx_insn *prev, rtx_insn *curr)\n \t}\n     }\n \n+  /* Fuse A+B+1 and A-B-1 */\n+  if (simple_sets_p\n+      && aarch64_fusion_enabled_p (AARCH64_FUSE_ADDSUB_2REG_CONST1))\n+    {\n+      /* We're trying to match:\n+\t  prev == (set (r0) (plus (r0) (r1)))\n+\t  curr == (set (r0) (plus (r0) (const_int 1)))\n+\tor:\n+\t  prev == (set (r0) (minus (r0) (r1)))\n+\t  curr == (set (r0) (plus (r0) (const_int -1))) */\n+\n+      rtx prev_src = SET_SRC (prev_set);\n+      rtx curr_src = SET_SRC (curr_set);\n+\n+      int polarity = 1;\n+      if (GET_CODE (prev_src) == MINUS)\n+\tpolarity = -1;\n+\n+      if (GET_CODE (curr_src) == PLUS\n+\t  && (GET_CODE (prev_src) == PLUS || GET_CODE (prev_src) == MINUS)\n+\t  && CONST_INT_P (XEXP (curr_src, 1))\n+\t  && INTVAL (XEXP (curr_src, 1)) == polarity\n+\t  && REG_P (XEXP (curr_src, 0))\n+\t  && REGNO (SET_DEST (prev_set)) == REGNO (XEXP (curr_src, 0)))\n+\treturn true;\n+    }\n+\n   return false;\n }\n "}, {"sha": "2e4433d9a058a34a952832734a215235f7559441", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/590a06afbf0e96813b5879742f38f3665512c854/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=590a06afbf0e96813b5879742f38f3665512c854", "patch": "@@ -19995,7 +19995,7 @@ performance of the code.  Permissible values for this option are:\n @samp{cortex-a75.cortex-a55}, @samp{cortex-a76.cortex-a55},\n @samp{cortex-r82}, @samp{cortex-x1}, @samp{cortex-x1c}, @samp{cortex-x2},\n @samp{cortex-a510}, @samp{cortex-a710}, @samp{cortex-a715}, @samp{ampere1},\n-@samp{native}.\n+@samp{ampere1a}, and @samp{native}.\n \n The values @samp{cortex-a57.cortex-a53}, @samp{cortex-a72.cortex-a53},\n @samp{cortex-a73.cortex-a35}, @samp{cortex-a73.cortex-a53},"}]}