{"sha": "e9c00e62d0aa1448248d377d82eb1b186152a061", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTljMDBlNjJkMGFhMTQ0ODI0OGQzNzdkODJlYjFiMTg2MTUyYTA2MQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-08-01T03:34:52Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-08-01T03:34:52Z"}, "message": "More for PR libgcj/11737:\n\n\t* java/io/ObjectInputStream.java (processResolution): Use\n\tgetMethod.\n\t(getMethod): Make method accessible.\n\t(getField): Make field accessible.\n\t(setBooleanField): Don't call setAccessible here.\n\t(setByteField, setCharField, setDoubleField, setFloatField,\n\tsetIntField, setLongField, setShortField, setObjectField):\n\tLikewise.\n\t(callReadMethod): Don't check whether method is null.  Catch\n\tNoSuchMethodException.\n\t* java/io/ObjectOutputStream.java (callWriteMethod): Initialize\n\tcause on thrown exceptions.\n\nFrom-SVN: r70038", "tree": {"sha": "2c95f8943b3e378b8ac84603e28841387ef9467d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c95f8943b3e378b8ac84603e28841387ef9467d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9c00e62d0aa1448248d377d82eb1b186152a061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c00e62d0aa1448248d377d82eb1b186152a061", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9c00e62d0aa1448248d377d82eb1b186152a061", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9c00e62d0aa1448248d377d82eb1b186152a061/comments", "author": null, "committer": null, "parents": [{"sha": "e14c33e5afb8977784f2fbf1c896e130c14282fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e14c33e5afb8977784f2fbf1c896e130c14282fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e14c33e5afb8977784f2fbf1c896e130c14282fb"}], "stats": {"total": 81, "additions": 58, "deletions": 23}, "files": [{"sha": "6ee557e0e42efcbdec1c4ca9021aeccdaf238528", "filename": "libjava/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e9c00e62d0aa1448248d377d82eb1b186152a061", "patch": "@@ -1,3 +1,19 @@\n+2003-07-31  Tom Tromey  <tromey@redhat.com>\n+\n+\tMore for PR libgcj/11737:\n+\t* java/io/ObjectInputStream.java (processResolution): Use\n+\tgetMethod.\n+\t(getMethod): Make method accessible.\n+\t(getField): Make field accessible.\n+\t(setBooleanField): Don't call setAccessible here.\n+\t(setByteField, setCharField, setDoubleField, setFloatField,\n+\tsetIntField, setLongField, setShortField, setObjectField):\n+\tLikewise.\n+\t(callReadMethod): Don't check whether method is null.  Catch\n+\tNoSuchMethodException.\n+\t* java/io/ObjectOutputStream.java (callWriteMethod): Initialize\n+\tcause on thrown exceptions.\n+\n 2003-07-31  Stepan Koltsov  <yozh@mx1.ru>\n \n \tFix for PR libgcj/11728:"}, {"sha": "918626905a4ff4e9becfc1a6e7fbf51f6e195f55", "filename": "libjava/java/io/ObjectInputStream.java", "status": "modified", "additions": 30, "deletions": 18, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2Fjava%2Fio%2FObjectInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2Fjava%2Fio%2FObjectInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectInputStream.java?ref=e9c00e62d0aa1448248d377d82eb1b186152a061", "patch": "@@ -41,10 +41,13 @@\n import java.lang.reflect.Array;\n import java.lang.reflect.Modifier;\n import java.lang.reflect.Proxy;\n+import java.security.PrivilegedAction;\n+import java.security.AccessController;\n import java.util.Arrays;\n import java.util.Hashtable;\n import java.util.Vector;\n \n+\n import gnu.java.io.ObjectIdentityWrapper;\n import gnu.java.lang.reflect.TypeSignature;\n import java.lang.reflect.Field;\n@@ -1075,9 +1078,7 @@ private Object processResolution (Object obj, int handle)\n \ttry\n \t  {\n \t    Class classArgs[] = {};\n-\t    m = obj.getClass ().getDeclaredMethod (\"readResolve\", classArgs);\n-\t    // m can't be null by definition since an exception would\n-\t    // have been thrown so a check for null is not needed.\n+\t    m = getMethod(obj.getClass(), \"readResolve\", classArgs);\n \t    obj = m.invoke (obj, new Object[] {});\t\n \t  }\n \tcatch (NoSuchMethodException ignore)\n@@ -1416,13 +1417,31 @@ private static ClassLoader currentClassLoader (SecurityManager sm)\n   private static Field getField (Class klass, String name)\n     throws java.lang.NoSuchFieldException\n   {\n-    return klass.getDeclaredField(name);\n+    final Field f = klass.getDeclaredField(name);\n+    AccessController.doPrivileged(new PrivilegedAction()\n+      {\n+\tpublic Object run()\n+\t{\n+\t  f.setAccessible(true);\n+\t  return null;\n+\t}\n+      });\n+    return f;\n   }\n \n   private static Method getMethod (Class klass, String name, Class args[])\n     throws java.lang.NoSuchMethodException\n   {\n-    return klass.getDeclaredMethod(name, args);\n+    final Method m = klass.getDeclaredMethod(name, args);\n+    AccessController.doPrivileged(new PrivilegedAction()\n+      {\n+\tpublic Object run()\n+\t{\n+\t  m.setAccessible(true);\n+\t  return null;\n+\t}\n+      });\n+    return m;\n   }\n \n   private void callReadMethod (Object obj, ObjectStreamClass osc) throws IOException\n@@ -1432,11 +1451,13 @@ private void callReadMethod (Object obj, ObjectStreamClass osc) throws IOExcepti\n       {\n \tClass classArgs[] = {ObjectInputStream.class};\n \tMethod m = getMethod (klass, \"readObject\", classArgs);\n-\tif (m == null)\n-\t  return;\n \tObject args[] = {this};\n \tm.invoke (obj, args);\n       }\n+    catch (NoSuchMethodException nsme)\n+      {\n+\t// Nothing.\n+      }\n     catch (InvocationTargetException x)\n       {\n         /* Rethrow if possible. */\n@@ -1467,7 +1488,6 @@ private void setBooleanField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setBoolean (obj, val);\n       }\n     catch (Exception _)\n@@ -1481,7 +1501,6 @@ private void setByteField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setByte (obj, val);\n       }\n     catch (Exception _)\n@@ -1495,7 +1514,6 @@ private void setCharField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setChar (obj, val);\n       }\n     catch (Exception _)\n@@ -1509,7 +1527,6 @@ private void setDoubleField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setDouble (obj, val);\n       }\n     catch (Exception _)\n@@ -1523,7 +1540,6 @@ private void setFloatField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setFloat (obj, val);\n       }\n     catch (Exception _)\n@@ -1537,7 +1553,6 @@ private void setIntField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setInt (obj, val);\n       }\n     catch (Exception _)\n@@ -1552,7 +1567,6 @@ private void setLongField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setLong (obj, val);\n       }\n     catch (Exception _)\n@@ -1567,7 +1581,6 @@ private void setShortField (Object obj, Class klass, String field_name,\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \tf.setShort (obj, val);\n       }\n     catch (Exception _)\n@@ -1576,13 +1589,12 @@ private void setShortField (Object obj, Class klass, String field_name,\n   }\n \n \n-  private void setObjectField (Object obj, Class klass, String field_name, String type_code,\n-\t\t\t       Object val)\n+  private void setObjectField (Object obj, Class klass, String field_name,\n+\t\t\t       String type_code, Object val)\n   {\n     try\n       {\n \tField f = getField (klass, field_name);\n-\tf.setAccessible(true);\n \t// FIXME: We should check the type_code here\n \tf.set (obj, val);\n       }"}, {"sha": "1437a4f69186a0701336386ef85e00bc06cfa078", "filename": "libjava/java/io/ObjectOutputStream.java", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9c00e62d0aa1448248d377d82eb1b186152a061/libjava%2Fjava%2Fio%2FObjectOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FObjectOutputStream.java?ref=e9c00e62d0aa1448248d377d82eb1b186152a061", "patch": "@@ -1197,7 +1197,8 @@ private boolean setBlockDataMode (boolean on) throws IOException\n   }\n \n \n-  private void callWriteMethod (Object obj, ObjectStreamClass osc) throws IOException\n+  private void callWriteMethod (Object obj, ObjectStreamClass osc)\n+    throws IOException\n   {\n     Class klass = osc.forClass();\n     try\n@@ -1220,13 +1221,19 @@ private void callWriteMethod (Object obj, ObjectStreamClass osc) throws IOExcept\n \tif (exception instanceof IOException)\n \t  throw (IOException) exception;\n \n-\tthrow new IOException (\"Exception thrown from writeObject() on \" +\n-\t\t\t       klass + \": \" + exception.getClass().getName());\n+\tIOException ioe\n+\t  = new IOException (\"Exception thrown from writeObject() on \" +\n+\t\t\t     klass + \": \" + exception.getClass().getName());\n+\tioe.initCause(exception);\n+\tthrow ioe;\n       }\n     catch (Exception x)\n       {\n-\tthrow new IOException (\"Failure invoking writeObject() on \" +\n-\t\t\t       klass + \": \" + x.getClass().getName());\n+\tIOException ioe\n+\t  = new IOException (\"Failure invoking writeObject() on \" +\n+\t\t\t     klass + \": \" + x.getClass().getName());\n+\tioe.initCause(x);\n+\tthrow ioe;\n       }\n   }\n "}]}