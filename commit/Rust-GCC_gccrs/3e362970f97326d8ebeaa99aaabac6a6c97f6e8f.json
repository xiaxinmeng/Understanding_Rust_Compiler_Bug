{"sha": "3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UzNjI5NzBmOTczMjZkOGViZWFhOTlhYWFiYWM2YTZjOTdmNmU4Zg==", "commit": {"author": {"name": "Ilya Tocar", "email": "ilya.tocar@intel.com", "date": "2015-01-16T11:01:08Z"}, "committer": {"name": "Ilya Tocar", "email": "tocarip@gcc.gnu.org", "date": "2015-01-16T11:01:08Z"}, "message": "Add new names for intrinsics.\n\ngcc/\n\t* config/i386/avx2intrin.h (_mm256_bslli_epi128,\n\t_mm256_bsrli_epi128): New.\n\t* config/i386/emmintrin.h (_mm_bsrli_si128, _mm_bslli_si128): Ditto.\n\ntestsuite/\n\t* gcc.target/i386/sse-14.c: Test new intrinsic.\n\t* gcc.target/i386/sse-22.c: Ditto.\n\nFrom-SVN: r219719", "tree": {"sha": "8fc1b33f19df0c9eeb056f2f4a39c9da53b900f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8fc1b33f19df0c9eeb056f2f4a39c9da53b900f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/comments", "author": {"login": "TocarIP", "id": 16836375, "node_id": "MDQ6VXNlcjE2ODM2Mzc1", "avatar_url": "https://avatars.githubusercontent.com/u/16836375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TocarIP", "html_url": "https://github.com/TocarIP", "followers_url": "https://api.github.com/users/TocarIP/followers", "following_url": "https://api.github.com/users/TocarIP/following{/other_user}", "gists_url": "https://api.github.com/users/TocarIP/gists{/gist_id}", "starred_url": "https://api.github.com/users/TocarIP/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TocarIP/subscriptions", "organizations_url": "https://api.github.com/users/TocarIP/orgs", "repos_url": "https://api.github.com/users/TocarIP/repos", "events_url": "https://api.github.com/users/TocarIP/events{/privacy}", "received_events_url": "https://api.github.com/users/TocarIP/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e623cedfabf27f9d1ea033a40053ef64833b3777", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e623cedfabf27f9d1ea033a40053ef64833b3777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e623cedfabf27f9d1ea033a40053ef64833b3777"}], "stats": {"total": 51, "additions": 51, "deletions": 0}, "files": [{"sha": "27713b007520a8e2e57f3b0b8aa127644ce5fae5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -1,3 +1,9 @@\n+2015-01-16  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* config/i386/avx2intrin.h (_mm256_bslli_epi128,\n+\t_mm256_bsrli_epi128): New.\n+\t* config/i386/emmintrin.h (_mm_bsrli_si128, _mm_bslli_si128): Ditto.\n+\n 2015-01-15  Jiong Wang  <jiong.wang@arm.com>\n \n \t* expmed.c (store_bit_field_using_insv): Improve warning message."}, {"sha": "b2a2f488c011b5ec91be650d4d27771766474636", "filename": "gcc/config/i386/avx2intrin.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Fconfig%2Fi386%2Favx2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx2intrin.h?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -643,13 +643,22 @@ _mm256_sign_epi32 (__m256i __X, __m256i __Y)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_bslli_epi128 (__m256i __A, const int __N)\n+{\n+  return (__m256i)__builtin_ia32_pslldqi256 (__A, __N * 8);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_slli_si256 (__m256i __A, const int __N)\n {\n   return (__m256i)__builtin_ia32_pslldqi256 (__A, __N * 8);\n }\n #else\n+#define _mm256_bslli_epi128(A, N) \\\n+  ((__m256i)__builtin_ia32_pslldqi256 ((__m256i)(A), (int)(N) * 8))\n #define _mm256_slli_si256(A, N) \\\n   ((__m256i)__builtin_ia32_pslldqi256 ((__m256i)(A), (int)(N) * 8))\n #endif\n@@ -725,13 +734,22 @@ _mm256_sra_epi32 (__m256i __A, __m128i __B)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_bsrli_epi128 (__m256i __A, const int __N)\n+{\n+  return (__m256i)__builtin_ia32_psrldqi256 (__A, __N * 8);\n+}\n+\n extern __inline __m256i\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm256_srli_si256 (__m256i __A, const int __N)\n {\n   return (__m256i)__builtin_ia32_psrldqi256 (__A, __N * 8);\n }\n #else\n+#define _mm256_bsrli_epi128(A, N) \\\n+  ((__m256i)__builtin_ia32_psrldqi256 ((__m256i)(A), (int)(N) * 8))\n #define _mm256_srli_si256(A, N) \\\n   ((__m256i)__builtin_ia32_psrldqi256 ((__m256i)(A), (int)(N) * 8))\n #endif"}, {"sha": "b19f05a10211e74d4811a1658eb18e652c2349ff", "filename": "gcc/config/i386/emmintrin.h", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Fconfig%2Fi386%2Femmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Fconfig%2Fi386%2Femmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Femmintrin.h?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -1164,6 +1164,18 @@ _mm_srai_epi32 (__m128i __A, int __B)\n }\n \n #ifdef __OPTIMIZE__\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bsrli_si128 (__m128i __A, const int __N)\n+{\n+  return (__m128i)__builtin_ia32_psrldqi128 (__A, __N * 8);\n+}\n+\n+extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_bslli_si128 (__m128i __A, const int __N)\n+{\n+  return (__m128i)__builtin_ia32_pslldqi128 (__A, __N * 8);\n+}\n+\n extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_srli_si128 (__m128i __A, const int __N)\n {\n@@ -1176,6 +1188,10 @@ _mm_slli_si128 (__m128i __A, const int __N)\n   return (__m128i)__builtin_ia32_pslldqi128 (__A, __N * 8);\n }\n #else\n+#define _mm_bsrli_si128(A, N) \\\n+  ((__m128i)__builtin_ia32_psrldqi128 ((__m128i)(A), (int)(N) * 8))\n+#define _mm_bslli_si128(A, N) \\\n+  ((__m128i)__builtin_ia32_pslldqi128 ((__m128i)(A), (int)(N) * 8))\n #define _mm_srli_si128(A, N) \\\n   ((__m128i)__builtin_ia32_psrldqi128 ((__m128i)(A), (int)(N) * 8))\n #define _mm_slli_si128(A, N) \\"}, {"sha": "0ab8f94610c2279b419d79b5b5d9cbb028763b10", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -1,3 +1,8 @@\n+2015-01-16  Ilya Tocar  <ilya.tocar@intel.com>\n+\n+\t* gcc.target/i386/sse-14.c: Test new intrinsic.\n+\t* gcc.target/i386/sse-22.c: Ditto.\n+\n 2015-01-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58614"}, {"sha": "e8791e387dc7f17f5cd37156b5a1064f0be51c88", "filename": "gcc/testsuite/gcc.target/i386/sse-14.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-14.c?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -601,6 +601,8 @@ test_2 (_mm_alignr_pi8, __m64, __m64, __m64, 1)\n \n /* emmintrin.h */\n test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n+test_1 (_mm_bsrli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_bslli_si128, __m128i, __m128i, 1)\n test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n test_1 (_mm_extract_epi16, int, __m128i, 1)"}, {"sha": "72017f5f681f54c3c14fd1e14f224bf6cb00ef27", "filename": "gcc/testsuite/gcc.target/i386/sse-22.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e362970f97326d8ebeaa99aaabac6a6c97f6e8f/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-22.c?ref=3e362970f97326d8ebeaa99aaabac6a6c97f6e8f", "patch": "@@ -138,6 +138,8 @@ test_1 (_mm_prefetch, void, void *, _MM_HINT_NTA)\n #endif\n #include <emmintrin.h>\n test_2 (_mm_shuffle_pd, __m128d, __m128d, __m128d, 1)\n+test_1 (_mm_bsrli_si128, __m128i, __m128i, 1)\n+test_1 (_mm_bslli_si128, __m128i, __m128i, 1)\n test_1 (_mm_srli_si128, __m128i, __m128i, 1)\n test_1 (_mm_slli_si128, __m128i, __m128i, 1)\n test_1 (_mm_extract_epi16, int, __m128i, 1)\n@@ -269,6 +271,8 @@ test_2 ( _mm256_blend_epi16, __m256i, __m256i, __m256i, 1)\n test_1 ( _mm256_shuffle_epi32, __m256i, __m256i, 1)\n test_1 ( _mm256_shufflehi_epi16, __m256i, __m256i, 1)\n test_1 ( _mm256_shufflelo_epi16, __m256i, __m256i, 1)\n+test_1 ( _mm256_bslli_epi128, __m256i, __m256i, 8)\n+test_1 ( _mm256_bsrli_epi128, __m256i, __m256i, 8)\n test_1 ( _mm256_slli_si256, __m256i, __m256i, 8)\n test_1 ( _mm256_srli_si256, __m256i, __m256i, 8)\n test_2 ( _mm_blend_epi32, __m128i, __m128i, __m128i, 1)"}]}