{"sha": "9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNmZWVhNmU0ZTFhNzFiNTI5YTgxMWJkNWMyMWY4ZTIzMTg1OWJlNQ==", "commit": {"author": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-02-20T20:20:48Z"}, "committer": {"name": "Phil Edwards", "email": "pme@gcc.gnu.org", "date": "2001-02-20T20:20:48Z"}, "message": "stl_config.h: Remove file.\n\n2001-02-20  Phil Edwards  <pme@sources.redhat.com>\n\n\t* include/bits/stl_config.h:  Remove file.\n\t* src/Makefile.am (base_headers):  Remove from list.\n\t* configure:  Regenerate.\n\t* Makefile.in:  Ditto.\n\t* libio/Makefile.in:  Ditto.\n\t* libmath/Makefile.in:  Ditto.\n\t* libsupc++/Makefile.in:  Ditto.\n\t* src/Makefile.in:  Ditto.\n\n\t* include/bits/c++config:  Move relevant macros to here.\n\t* include/backward/alloc.h:  Include c++config.h instead.\n\t* include/backward/function.h:  Ditto.\n\t* include/backward/heap.h:  Ditto.\n\t* include/backward/pair.h:  Ditto.\n\t* include/bits/pthread_allocimpl.h:  Ditto.\n\t* include/bits/std_functional.h:  Ditto.\n\t* include/bits/std_iterator.h:  Ditto.\n\t* include/bits/std_numeric.h:  Ditto.\n\t* include/bits/std_utility.h:  Ditto.\n\t* include/bits/stl_algobase.h:  Ditto.\n\t* include/bits/type_traits.h:  Ditto.\n\t* src/stl-inst.cc:  Ditto.\n\nFrom-SVN: r39931", "tree": {"sha": "5133cdd3e166fe2cc1933738b510ebf888d2e77e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5133cdd3e166fe2cc1933738b510ebf888d2e77e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/comments", "author": null, "committer": null, "parents": [{"sha": "288edf4753e7813eac144586179f1b3f9fc1a19f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/288edf4753e7813eac144586179f1b3f9fc1a19f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/288edf4753e7813eac144586179f1b3f9fc1a19f"}], "stats": {"total": 2648, "additions": 1194, "deletions": 1454}, "files": [{"sha": "325d9a2acbe4b25ba3751d1ca5aad136a80f0b6a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -1,3 +1,28 @@\n+2001-02-20  Phil Edwards  <pme@sources.redhat.com>\n+\n+\t* include/bits/stl_config.h:  Remove file.\n+\t* src/Makefile.am (base_headers):  Remove from list.\n+\t* configure:  Regenerate.\n+\t* Makefile.in:  Ditto.\n+\t* libio/Makefile.in:  Ditto.\n+\t* libmath/Makefile.in:  Ditto.\n+\t* libsupc++/Makefile.in:  Ditto.\n+\t* src/Makefile.in:  Ditto.\n+\n+\t* include/bits/c++config:  Move relevant macros to here.\n+\t* include/backward/alloc.h:  Include c++config.h instead.\n+\t* include/backward/function.h:  Ditto.\n+\t* include/backward/heap.h:  Ditto.\n+\t* include/backward/pair.h:  Ditto.\n+\t* include/bits/pthread_allocimpl.h:  Ditto.\n+\t* include/bits/std_functional.h:  Ditto.\n+\t* include/bits/std_iterator.h:  Ditto.\n+\t* include/bits/std_numeric.h:  Ditto.\n+\t* include/bits/std_utility.h:  Ditto.\n+\t* include/bits/stl_algobase.h:  Ditto.\n+\t* include/bits/type_traits.h:  Ditto.\n+\t* src/stl-inst.cc:  Ditto.\n+\n 2001-02-19  Gabriel Dos Reis  <gdr@merlin.codesourcery.com>\n \n \t* include/bits/basic_file.h: Add #pragma system_header"}, {"sha": "77309c455d46f86d70f6fd4bfdb1a993d4ba0176", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -138,7 +138,48 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n+AM_MAKEFLAGS = \\\n+\t\"AR_FLAGS=$(AR_FLAGS)\" \\\n+\t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \\\n+\t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \\\n+\t\"CFLAGS=$(CFLAGS)\" \\\n+\t\"CXXFLAGS=$(CXXFLAGS)\" \\\n+\t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \\\n+\t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \\\n+\t\"INSTALL=$(INSTALL)\" \\\n+\t\"INSTALL_DATA=$(INSTALL_DATA)\" \\\n+\t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \\\n+\t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \\\n+\t\"LDFLAGS=$(LDFLAGS)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \\\n+\t\"MAKE=$(MAKE)\" \\\n+\t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \\\n+\t\"SHELL=$(SHELL)\" \\\n+\t\"EXPECT=$(EXPECT)\" \\\n+\t\"RUNTEST=$(RUNTEST)\" \\\n+\t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \\\n+\t\"exec_prefix=$(exec_prefix)\" \\\n+\t\"infodir=$(infodir)\" \\\n+\t\"libdir=$(libdir)\" \\\n+\t\"includedir=$(includedir)\" \\\n+\t\"prefix=$(prefix)\" \\\n+\t\"tooldir=$(tooldir)\" \\\n+\t\"AR=$(AR)\" \\\n+\t\"AS=$(AS)\" \\\n+\t\"CC=$(CC)\" \\\n+\t\"CXX=$(CXX)\" \\\n+\t\"LD=$(LD)\" \\\n+\t\"LIBCFLAGS=$(LIBCFLAGS)\" \\\n+\t\"PICFLAG=$(PICFLAG)\" \\\n+\t\"RANLIB=$(RANLIB)\" \\\n+\t\"NM=$(NM)\" \\\n+\t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n+\t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n+\t\"DESTDIR=$(DESTDIR)\" \\\n+\t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n CONFIG_HEADER = config.h"}, {"sha": "34ece3012ad9afa5883624b15bfa0fe45a1e92bc", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 815, "deletions": 804, "changes": 1619, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5"}, {"sha": "bdca643591777b06c25288bb72f3fb00f1b2a245", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -14,9 +14,7 @@\n #ifndef _CPP_BACKWARD_ALLOC_H\n #define _CPP_BACKWARD_ALLOC_H 1\n \n-#ifndef _CPP_BITS_STL_CONFIG_H\n-#include <bits/stl_config.h>\n-#endif\n+#include <bits/c++config.h>\n #ifndef _CPP_BITS_STL_ALLOC_H\n #include <bits/stl_alloc.h>\n #endif"}, {"sha": "3d923201893df8eda1d28db379ddea6a732b1e5c", "filename": "libstdc++-v3/include/backward/function.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Ffunction.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -27,9 +27,7 @@\n #ifndef _CPP_BACKWARD_FUNCTION_H\n #define _CPP_BACKWARD_FUNCTION_H 1\n \n-#ifndef _CPP_BITS_STL_CONFIG_H\n-#include <bits/stl_config.h>\n-#endif\n+#include <bits/c++config.h>\n #include <stddef.h>\n #ifndef _CPP_BITS_STL_FUNCTION_H\n #include <bits/stl_function.h>"}, {"sha": "bf8b7a18343a64667d4298ff857e7b33c5a370ad", "filename": "libstdc++-v3/include/backward/heap.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fheap.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -26,7 +26,7 @@\n #ifndef _CPP_BACKWARD_HEAP_H\n #define _CPP_BACKWARD_HEAP_H 1\n \n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #include <bits/stl_heap.h>\n \n #ifdef __STL_USE_NAMESPACES"}, {"sha": "97b36d5a1d48a00ddb47ea51148c562a5f71b020", "filename": "libstdc++-v3/include/backward/pair.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Fpair.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -27,9 +27,7 @@\n #ifndef _CPP_BACKWARD_PAIR_H\n #define _CPP_BACKWARD_PAIR_H 1\n \n-#ifndef _CPP_BITS_STL_CONFIG_H\n-#include <bits/stl_config.h>\n-#endif\n+#include <bits/c++config.h>\n #ifndef _CPP_BITS_STL_PAIR_H\n #include <bits/stl_pair.h>\n #endif"}, {"sha": "9143f7b58e3ac8fe7bb8082eaeb9c608fe13496f", "filename": "libstdc++-v3/include/bits/c++config", "status": "modified", "additions": 112, "deletions": 7, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fc%2B%2Bconfig?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -56,12 +56,117 @@\n # define _GLIBCPP_RESOLVE_LIB_DEFECTS 1\n \n \n-\n-\n-\n-\n-\n-\n-\n+// From SGI's stl_config.h; generic settings and user hooks (_NOTHREADS).\n+#if defined(_PTHREADS) && !defined(_NOTHREADS)\n+#    define __STL_PTHREADS\n+#endif\n+#if defined(_UITHREADS) && !defined(_PTHREADS) && !defined(_NOTHREADS)\n+#    define __STL_UITHREADS\n+#endif\n+\n+// Also from SGI's stl_config.h; settings for GCC.\n+#define __STL_HAS_WCHAR_T\n+#define __STL_MEMBER_TEMPLATES\n+#define __STL_MEMBER_TEMPLATE_CLASSES\n+#define __STL_TEMPLATE_FRIENDS\n+#define __STL_CLASS_PARTIAL_SPECIALIZATION \n+#define __STL_PARTIAL_SPECIALIZATION_SYNTAX \n+#define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n+#define __STL_EXPLICIT_FUNCTION_TMPL_ARGS\n+#define __SGI_STL_USE_AUTO_PTR_CONVERSIONS\n+#define __STL_HAS_NAMESPACES\n+#define __STL_USE_NAMESPACES\n+#ifdef __EXCEPTIONS\n+#  define __STL_USE_EXCEPTIONS\n+#  define __STL_TRY try\n+#  define __STL_CATCH_ALL catch(...)\n+#  define __STL_THROW(x) throw x\n+#  define __STL_RETHROW throw\n+#  define __STL_NOTHROW throw()\n+#  define __STL_UNWIND(action) catch(...) { action; throw; }\n+#else\n+#  define __STL_TRY \n+#  define __STL_CATCH_ALL if (false)\n+#  define __STL_THROW(x) \n+#  define __STL_RETHROW \n+#  define __STL_NOTHROW \n+#  define __STL_UNWIND(action) \n+#endif\n+#define __STL_THROW_RANGE_ERRORS \n+#define __STL_CAN_THROW_RANGE_ERRORS \n+#define __STL_USE_STD_ALLOCATORS \n+#define __USE_MALLOC // As the \"underlying allocator\"\n+//#define __STL_USE_NEW_IOSTREAMS //990209 bkoz--use standard .h includes.\n+#ifdef _REENTRANT\n+#  define __STL_THREADS\n+#endif\n+#ifdef _PTHREADS\n+#  define __STL_PTHREADS\n+#endif\n+#ifndef __STRICT_ANSI__\n+#  define __STL_LONG_LONG\n+#endif\n+//#if (__GNUC__ < 2) || (__GNUC__ == 2 && __GNUC_MINOR__ < 95)\n+#  define __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE\n+//#endif\n+\n+// Also from SGI's stl_config.h; settings for GCC.\n+// Mingw32, GCC compiler using the Microsoft C runtime\n+#if defined(__MINGW32__)\n+#  define __STL_NO_DRAND48\n+#  ifdef _MT\n+#    define __STL_WIN32THREADS\n+#  endif\n+#endif\n+\n+// Cygwin32, GCC compiler on MS Windows\n+#if defined(__CYGWIN__)\n+#  define __STL_NO_DRAND48\n+#endif\n+\n+// The old stl_config.h would use the above settings in chains of\n+// if/then/else tests to define the following.\n+#define __STL_DEPENDENT_DEFAULT_TMPL(_Tp) = _Tp\n+#define __STL_TEMPLATE\n+#define __STL_NULL_TMPL_ARGS <>\n+#define __STL_TEMPLATE_NULL template<>\n+#define __STL_DEFAULT_ALLOCATOR(T) allocator< T >\n+\n+#define __STL_USE_NAMESPACES\n+#define __STD std\n+#define __STL_BEGIN_NAMESPACE namespace std {\n+#define __STL_END_NAMESPACE }\n+#define __STL_USE_NAMESPACE_FOR_RELOPS\n+#define __STL_BEGIN_RELOPS_NAMESPACE namespace std { namespace rel_ops {\n+#define __STL_END_RELOPS_NAMESPACE } }\n+#define __STD_RELOPS std::rel_ops\n+#define __STD_QUALIFIER std::\n+\n+\n+#ifdef __STL_ASSERTIONS\n+# include <stdio.h>\n+# define __stl_assert(expr) \\\n+    if (!(expr)) { fprintf(stderr, \"%s:%d STL assertion failure: %s\\n\", \\\n+                          __FILE__, __LINE__, # expr); abort(); }\n+#else\n+# define __stl_assert(expr)\n+#endif\n+\n+#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \\\n+    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)\n+#   define __STL_THREADS\n+#   define __STL_VOLATILE volatile\n+#else\n+#   define __STL_VOLATILE\n+#endif\n+\n+#if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) \\\n+    && defined(__STL_MEMBER_TEMPLATES) \\\n+    && !defined(_STL_NO_CONCEPT_CHECKS)\n+#  define __STL_USE_CONCEPT_CHECKS\n+#endif\n+\n+\n+// End of prewritten config; the discovered settings follow.\n \n "}, {"sha": "bc11f9ced1161159e247ca706d636417bfaee295", "filename": "libstdc++-v3/include/bits/pthread_allocimpl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fpthread_allocimpl.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -27,8 +27,8 @@\n // cache lines among processors, with potentially serious performance\n // consequences.\n \n+#include <bits/c++config.h>\n #include <bits/std_cerrno.h>\n-#include <bits/stl_config.h>\n #include <bits/stl_alloc.h>\n #ifndef __RESTRICT\n #  define __RESTRICT"}, {"sha": "bd30c1041d4bbfd4dca1f0858c983065d68261b4", "filename": "libstdc++-v3/include/bits/std_functional.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_functional.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -16,8 +16,7 @@\n #define _CPP_FUNCTIONAL 1\n \n #pragma GCC system_header\n-\n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n #include <bits/stl_function.h>\n "}, {"sha": "12c3fb43c9cf07e9bba2173e61747e99292acdc2", "filename": "libstdc++-v3/include/bits/std_iterator.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_iterator.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -28,8 +28,7 @@\n #define _CPP_ITERATOR 1\n \n #pragma GCC system_header\n-\n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n #include <bits/std_iosfwd.h>\n #include <bits/stl_iterator_base.h>"}, {"sha": "375245ba9b2175b1c82ca60315cd03bf38b6b0f8", "filename": "libstdc++-v3/include/bits/std_numeric.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_numeric.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -28,8 +28,7 @@\n #define _CPP_NUMERIC 1\n \n #pragma GCC system_header\n-\n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #include <bits/std_cstddef.h>\n #include <bits/std_iterator.h>\n #include <bits/stl_function.h>"}, {"sha": "f32799ecae1d0e4dfbe0c3b8a49e38ff91289b74", "filename": "libstdc++-v3/include/bits/std_utility.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstd_utility.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -28,8 +28,7 @@\n #define _CPP_UTILITY 1\n \n #pragma GCC system_header\n-\n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #include <bits/stl_relops.h>\n #include <bits/stl_pair.h>\n "}, {"sha": "921dbab7f71d25cd0e0df921cd4dc37b1eec7595", "filename": "libstdc++-v3/include/bits/stl_algobase.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algobase.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -32,7 +32,7 @@\n #ifndef __SGI_STL_INTERNAL_ALGOBASE_H\n #define __SGI_STL_INTERNAL_ALGOBASE_H\n \n-#include <bits/stl_config.h>\n+#include <bits/c++config.h>\n #ifndef __SGI_STL_INTERNAL_PAIR_H\n #include <bits/stl_pair.h>\n #endif"}, {"sha": "6fe8f3046bf87c407256e19f6c694cbeeb664155", "filename": "libstdc++-v3/include/bits/stl_config.h", "status": "removed", "additions": 0, "deletions": 570, "changes": 570, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/288edf4753e7813eac144586179f1b3f9fc1a19f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/288edf4753e7813eac144586179f1b3f9fc1a19f/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_config.h?ref=288edf4753e7813eac144586179f1b3f9fc1a19f", "patch": "@@ -1,570 +0,0 @@\n-/*\n- *\n- * Copyright (c) 1994\n- * Hewlett-Packard Company\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Hewlett-Packard Company makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- * Copyright (c) 1997\n- * Silicon Graphics\n- *\n- * Permission to use, copy, modify, distribute and sell this software\n- * and its documentation for any purpose is hereby granted without fee,\n- * provided that the above copyright notice appear in all copies and\n- * that both that copyright notice and this permission notice appear\n- * in supporting documentation.  Silicon Graphics makes no\n- * representations about the suitability of this software for any\n- * purpose.  It is provided \"as is\" without express or implied warranty.\n- *\n- */\n-\n-#ifndef __STL_CONFIG_H\n-# define __STL_CONFIG_H\n-\n-// Flags:\n-// * __STL_NO_BOOL: defined if the compiler doesn't have bool as a builtin\n-//   type.\n-// * __STL_HAS_WCHAR_T: defined if the compier has wchar_t as a builtin type.\n-// * __STL_NO_DRAND48: defined if the compiler doesn't have the drand48 \n-//   function.\n-// * __STL_STATIC_TEMPLATE_MEMBER_BUG: defined if the compiler can't handle\n-//   static members of template classes.\n-// * __STL_STATIC_CONST_INIT_BUG: defined if the compiler can't handle a\n-//   constant-initializer in the declaration of a static const data member\n-//   of integer type.  (See section 9.4.2, paragraph 4, of the C++ standard.)\n-// * __STL_CLASS_PARTIAL_SPECIALIZATION: defined if the compiler supports\n-//   partial specialization of template classes.\n-// * __STL_PARTIAL_SPECIALIZATION_SYNTAX: defined if the compiler \n-//   supports partial specialization syntax for full specialization of\n-//   class templates.  (Even if it doesn't actually support partial \n-//   specialization itself.)\n-// * __STL_FUNCTION_TMPL_PARTIAL_ORDER: defined if the compiler supports\n-//   partial ordering of function templates.  (a.k.a partial specialization\n-//   of function templates.)\n-// * __STL_MEMBER_TEMPLATES: defined if the compiler supports template\n-//   member functions of classes.\n-// * __STL_MEMBER_TEMPLATE_CLASSES: defined if the compiler supports \n-//   nested classes that are member templates of other classes.\n-// * __STL_TEMPLATE_FRIENDS: defined if the compiler supports templatized\n-//   friend declarations.\n-// * __STL_EXPLICIT_FUNCTION_TMPL_ARGS: defined if the compiler \n-//   supports calling a function template by providing its template\n-//   arguments explicitly.\n-// * __STL_LIMITED_DEFAULT_TEMPLATES: defined if the compiler is unable\n-//   to handle default template parameters that depend on previous template\n-//   parameters.\n-// * __STL_NON_TYPE_TMPL_PARAM_BUG: defined if the compiler has trouble with\n-//   function template argument deduction for non-type template parameters.\n-// * __SGI_STL_NO_ARROW_OPERATOR: defined if the compiler is unable\n-//   to support the -> operator for iterators.\n-// * __STL_DEFAULT_CONSTRUCTOR_BUG: defined if T() does not work properly\n-//   when T is a builtin type.\n-// * __STL_USE_EXCEPTIONS: defined if the compiler (in the current compilation\n-//   mode) supports exceptions.\n-// * __STL_USE_NAMESPACES: defined if the compiler has the necessary\n-//   support for namespaces.\n-// * __STL_NO_EXCEPTION_HEADER: defined if the compiler does not have a\n-//   standard-conforming header <exception>.\n-// * __STL_NO_BAD_ALLOC: defined if the compiler does not have a <new>\n-//   header, or if <new> does not contain a bad_alloc class.  If a bad_alloc\n-//   class exists, it is assumed to be in namespace std.\n-// * __STL_SGI_THREADS: defined if this is being compiled for an SGI IRIX\n-//   system in multithreaded mode, using native SGI threads instead of \n-//   pthreads.\n-// * __STL_WIN32THREADS: defined if this is being compiled on a WIN32\n-//   compiler in multithreaded mode.\n-// * __STL_PTHREADS: defined if we should use portable pthreads\n-//   synchronization.\n-// * __STL_UITHREADS: defined if we should use UI / solaris / UnixWare threads\n-//   synchronization.  UIthreads are similar to pthreads, but are based \n-//   on an earlier version of the Posix threads standard.\n-// * __STL_LONG_LONG if the compiler has long long and unsigned long long\n-//   types.  (They're not in the C++ standard, but they are included\n-//   in the C99 standard.)\n-// * __STL_THREADS is defined if thread safety is needed.\n-// * __STL_VOLATILE is defined to be \"volatile\" if threads are being\n-//   used, and the empty string otherwise.\n-// * __STL_USE_CONCEPT_CHECKS enables some extra compile-time error\n-//   checking to make sure that user-defined template arguments satisfy\n-//   all of the appropriate requirements.  This may result in more\n-//   comprehensible error messages.  It incurs no runtime overhead.  This \n-//   feature requires member templates and partial specialization.\n-// * __STL_NO_USING_CLAUSE_IN_CLASS: The compiler does not handle \"using\"\n-//   clauses inside of class definitions.\n-// * __STL_NO_FRIEND_TEMPLATE_CLASS: The compiler does not handle friend\n-//   declaractions where the friend is a template class.\n-// * __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE: The compiler does not\n-//   support the use of a function pointer type as the argument\n-//   for a template.\n-// * __STL_MEMBER_TEMPLATE_KEYWORD: standard C++ requires the template\n-//   keyword in a few new places (14.2.4).  This flag is set for\n-//   compilers that support (and require) this usage.\n-\n-\n-// User-settable macros that control compilation:\n-// * __STL_USE_SGI_ALLOCATORS: if defined, then the STL will use older\n-//   SGI-style allocators, instead of standard-conforming allocators,\n-//   even if the compiler supports all of the language features needed\n-//   for standard-conforming allocators.\n-// * __STL_NO_NAMESPACES: if defined, don't put the library in namespace\n-//   std, even if the compiler supports namespaces.\n-// * __STL_NO_RELOPS_NAMESPACE: if defined, don't put the relational\n-//   operator templates (>, <=. >=, !=) in namespace std::rel_ops, even\n-//   if the compiler supports namespaces and partial ordering of\n-//   function templates.\n-// * __STL_ASSERTIONS: if defined, then enable runtime checking through the\n-//   __stl_assert macro.\n-// * _PTHREADS: if defined, use Posix threads for multithreading support.\n-// * _UITHREADS:if defined, use SCO/Solaris/UI threads for multithreading \n-//   support\n-// * _NOTHREADS: if defined, don't use any multithreading support.  \n-// * _STL_NO_CONCEPT_CHECKS: if defined, disables the error checking that\n-//   we get from __STL_USE_CONCEPT_CHECKS.\n-// * __STL_USE_NEW_IOSTREAMS: if defined, then the STL will use new,\n-//   standard-conforming iostreams (e.g. the <iosfwd> header).  If not\n-//   defined, the STL will use old cfront-style iostreams (e.g. the\n-//   <iostream.h> header).\n-\n-// Other macros defined by this file:\n-\n-// * bool, true, and false, if __STL_NO_BOOL is defined.\n-// * typename, as a null macro if it's not already a keyword.\n-// * explicit, as a null macro if it's not already a keyword.\n-// * namespace-related macros (__STD, __STL_BEGIN_NAMESPACE, etc.)\n-// * exception-related macros (__STL_TRY, __STL_UNWIND, etc.)\n-// * __stl_assert, either as a test or as a null macro, depending on\n-//   whether or not __STL_ASSERTIONS is defined.\n-\n-# if defined(_PTHREADS) && !defined(_NOTHREADS)\n-#     define __STL_PTHREADS\n-# endif\n-\n-# if defined(_UITHREADS) && !defined(_PTHREADS) && !defined(_NOTHREADS)\n-#     define __STL_UITHREADS\n-# endif\n-\n-# if defined(__sgi) && !defined(__GNUC__)\n-#   include <standards.h>\n-#   if !defined(_BOOL)\n-#     define __STL_NO_BOOL\n-#   endif\n-#   if defined(_MIPS_SIM) && _MIPS_SIM == _ABIO32\n-#     define __STL_STATIC_CONST_INIT_BUG\n-#   endif\n-#   if defined(_WCHAR_T_IS_KEYWORD)\n-#     define __STL_HAS_WCHAR_T \n-#   endif\n-#   if !defined(_TYPENAME_IS_KEYWORD)\n-#     define __STL_NEED_TYPENAME\n-#   endif\n-#   ifdef _PARTIAL_SPECIALIZATION_OF_CLASS_TEMPLATES\n-#     define __STL_CLASS_PARTIAL_SPECIALIZATION\n-#   endif\n-#   if (_COMPILER_VERSION >= 730) && defined(_MIPS_SIM) && _MIPS_SIM != _ABIO32\n-#     define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n-#   endif\n-#   ifdef _MEMBER_TEMPLATES\n-#     define __STL_MEMBER_TEMPLATES\n-#     define __STL_TEMPLATE_FRIENDS\n-#     define __STL_MEMBER_TEMPLATE_CLASSES\n-#   endif\n-#   if defined(_MEMBER_TEMPLATE_KEYWORD)\n-#     define __STL_MEMBER_TEMPLATE_KEYWORD\n-#   endif\n-#   if defined(_STANDARD_C_PLUS_PLUS)\n-#     define __STL_EXPLICIT_FUNCTION_TMPL_ARGS\n-#   endif\n-#   if (_COMPILER_VERSION >= 730) && defined(_MIPS_SIM) && _MIPS_SIM != _ABIO32\n-#     define __STL_MEMBER_TEMPLATE_KEYWORD\n-#   endif\n-#   if COMPILER_VERSION < 720 || (defined(_MIPS_SIM) && _MIPS_SIM == _ABIO32)\n-#     define __STL_DEFAULT_CONSTRUCTOR_BUG\n-#   endif\n-#   if !defined(_EXPLICIT_IS_KEYWORD)\n-#     define __STL_NEED_EXPLICIT\n-#   endif\n-#   ifdef __EXCEPTIONS\n-#     define __STL_USE_EXCEPTIONS\n-#   endif\n-#   if (_COMPILER_VERSION >= 721) && defined(_NAMESPACES)\n-#     define __STL_HAS_NAMESPACES\n-#   endif \n-#   if (_COMPILER_VERSION < 721) || \\\n-    !defined(__STL_HAS_NAMESPACES) || defined(__STL_NO_NAMESPACES)\n-#     define __STL_NO_EXCEPTION_HEADER\n-#   endif\n-#   if _COMPILER_VERSION < 730 || !defined(_STANDARD_C_PLUS_PLUS) || \\\n-      !defined(_NAMESPACES)\n-#     define __STL_NO_BAD_ALLOC\n-#   endif\n-#   if !defined(_NOTHREADS) && !defined(__STL_PTHREADS)\n-#     define __STL_SGI_THREADS\n-#   endif\n-#   if defined(_LONGLONG) && defined(_SGIAPI) && _SGIAPI\n-#     define __STL_LONG_LONG\n-#   endif\n-#   if _COMPILER_VERSION >= 730 && defined(_STANDARD_C_PLUS_PLUS)\n-#     define __STL_USE_NEW_IOSTREAMS\n-#   endif\n-#   if _COMPILER_VERSION >= 730 && defined(_STANDARD_C_PLUS_PLUS)\n-#     define __STL_CAN_THROW_RANGE_ERRORS\n-#   endif\n-#   if _COMPILER_VERSION >= 730 && defined(_STANDARD_C_PLUS_PLUS)\n-#     define __SGI_STL_USE_AUTO_PTR_CONVERSIONS\n-#   endif\n-# endif\n-\n-\n-/*\n- * Jochen Schlick '1999  - added new #defines (__STL)_UITHREADS (for \n- *                         providing SCO / Solaris / UI thread support)\n- *                       - added the necessary defines for the SCO UDK 7 \n- *                         compiler (and its template friend behavior)\n- *                       - all UDK7 specific STL changes are based on the \n- *                         macro __USLC__ being defined\n- */\n-// SCO UDK 7 compiler (UnixWare 7x, OSR 5, UnixWare 2x)\n-# if defined(__USLC__)\n-#     define __STL_HAS_WCHAR_T \n-#     define __STL_CLASS_PARTIAL_SPECIALIZATION\n-#     define __STL_PARTIAL_SPECIALIZATION_SYNTAX\n-#     define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n-#     define __STL_MEMBER_TEMPLATES\n-#     define __STL_MEMBER_TEMPLATE_CLASSES\n-#     define __STL_USE_EXCEPTIONS\n-#     define __STL_HAS_NAMESPACES\n-#     define __STL_USE_NAMESPACES\n-#     define __STL_LONG_LONG\n-#     if defined(_REENTRANT)\n-#           define _UITHREADS     /* if      UnixWare < 7.0.1 */\n-#           define __STL_UITHREADS\n-//   use the following defines instead of the UI threads defines when\n-//   you want to use POSIX threads\n-//#         define _PTHREADS      /* only if UnixWare >=7.0.1 */\n-//#         define __STL_PTHREADS\n-#     endif\n-# endif\n-\n-\n-\n-# ifdef __GNUC__\n-#   define __STL_HAS_WCHAR_T\n-#   define __STL_MEMBER_TEMPLATES\n-#   define __STL_MEMBER_TEMPLATE_CLASSES\n-#   define __STL_TEMPLATE_FRIENDS\n-#   define __STL_CLASS_PARTIAL_SPECIALIZATION \n-#   define __STL_PARTIAL_SPECIALIZATION_SYNTAX \n-#   define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n-#   define __STL_EXPLICIT_FUNCTION_TMPL_ARGS\n-#   define __SGI_STL_USE_AUTO_PTR_CONVERSIONS\n-#   define __STL_HAS_NAMESPACES\n-#   define __STL_USE_NAMESPACES\n-#   ifdef __EXCEPTIONS\n-#     define __STL_USE_EXCEPTIONS\n-#   endif\n-#   define __STL_THROW_RANGE_ERRORS \n-#   define __STL_CAN_THROW_RANGE_ERRORS \n-#   define __STL_USE_STD_ALLOCATORS \n-#   define __USE_MALLOC // As the \"underlying allocator\"\n-//#     define __STL_USE_NEW_IOSTREAMS //990209 bkoz--use standard .h includes.\n-#   ifdef _REENTRANT\n-#     define __STL_THREADS\n-#   endif\n-#   ifdef _PTHREADS\n-#     define __STL_PTHREADS\n-#   endif\n-#   ifndef __STRICT_ANSI__\n-#     define __STL_LONG_LONG\n-#   endif\n-#   if (__GNUC__ < 2) || (__GNUC__ == 2 && __GNUC_MINOR__ < 95)\n-#     define __STL_NO_FUNCTION_PTR_IN_CLASS_TEMPLATE\n-#   endif\n-# endif\n-\n-# if defined(__SUNPRO_CC) \n-#   define __STL_NO_BOOL\n-#   define __STL_NEED_TYPENAME\n-#   define __STL_NEED_EXPLICIT\n-#   define __STL_USE_EXCEPTIONS\n-#   ifdef _REENTRANT\n-#     define __STL_PTHREADS\n-#   endif\n-#   define __SGI_STL_NO_ARROW_OPERATOR\n-#   define __STL_PARTIAL_SPECIALIZATION_SYNTAX\n-#   define __STL_NO_EXCEPTION_HEADER\n-#   define __STL_NO_BAD_ALLOC\n-# endif\n-\n-# if defined(__COMO__)\n-#   define __STL_MEMBER_TEMPLATES\n-#   define __STL_MEMBER_TEMPLATE_CLASSES\n-#   define __STL_TEMPLATE_FRIENDS\n-#   define __STL_CLASS_PARTIAL_SPECIALIZATION\n-#   define __STL_USE_EXCEPTIONS\n-#   define __STL_HAS_NAMESPACES\n-# endif\n-\n-// Intel compiler, which uses the EDG front end.\n-# if defined(__ICL)\n-#   define __STL_LONG_LONG \n-#   define __STL_MEMBER_TEMPLATES\n-#   define __STL_MEMBER_TEMPLATE_CLASSES\n-#   define __STL_TEMPLATE_FRIENDS\n-#   define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n-#   define __STL_CLASS_PARTIAL_SPECIALIZATION\n-#   define __STL_NO_DRAND48\n-#   define __STL_HAS_NAMESPACES\n-#   define __STL_USE_EXCEPTIONS\n-#   define __STL_MEMBER_TEMPLATE_KEYWORD\n-#   ifdef _CPPUNWIND\n-#     define __STL_USE_EXCEPTIONS\n-#   endif\n-#   ifdef _MT\n-#     define __STL_WIN32THREADS\n-#   endif\n-# endif\n-\n-// Mingw32, GCC compiler using the Microsoft C runtime\n-# if defined(__MINGW32__)\n-#   define __STL_NO_DRAND48\n-#   ifdef _MT\n-#     define __STL_WIN32THREADS\n-#   endif\n-# endif\n-\n-// Cygwin32, GCC compiler on MS Windows\n-# if defined(__CYGWIN__)\n-#   define __STL_NO_DRAND48\n-# endif\n-\n-\n-\n-// Microsoft compiler.\n-# if defined(_MSC_VER) && !defined(__ICL) && !defined(__MWERKS__)\n-#   define __STL_NO_DRAND48\n-#   define __STL_STATIC_CONST_INIT_BUG\n-#   define __STL_NEED_TYPENAME\n-#   define __STL_NO_USING_CLAUSE_IN_CLASS\n-#   define __STL_NO_FRIEND_TEMPLATE_CLASS\n-#   if _MSC_VER < 1100  /* 1000 is version 4.0, 1100 is 5.0, 1200 is 6.0. */\n-#     define __STL_NEED_EXPLICIT\n-#     define __STL_NO_BOOL\n-#     define __STL_NO_BAD_ALLOC\n-#   endif\n-#   if _MSC_VER > 1000\n-#     include <yvals.h>\n-#     define __STL_DONT_USE_BOOL_TYPEDEF\n-#   endif\n-#   define __STL_NON_TYPE_TMPL_PARAM_BUG\n-#   define __SGI_STL_NO_ARROW_OPERATOR\n-#   define __STL_DEFAULT_CONSTRUCTOR_BUG\n-#   ifdef _CPPUNWIND\n-#     define __STL_USE_EXCEPTIONS\n-#   endif\n-#   ifdef _MT\n-#     define __STL_WIN32THREADS\n-#   endif\n-#   if _MSC_VER >= 1200\n-#     define __STL_PARTIAL_SPECIALIZATION_SYNTAX\n-#     define __STL_HAS_NAMESPACES\n-#     define __STL_CAN_THROW_RANGE_ERRORS\n-#     define NOMINMAX\n-#     undef min\n-#     undef max\n-// disable warning 'initializers put in unrecognized initialization area'\n-#     pragma warning ( disable : 4075 )\n-// disable warning 'empty controlled statement found'\n-#     pragma warning ( disable : 4390 )\n-// disable warning 'debug symbol greater than 255 chars'\n-#     pragma warning ( disable : 4786 )\n-#   endif\n-#   if _MSC_VER < 1100\n-#     define __STL_NO_EXCEPTION_HEADER\n-#     define __STL_NO_BAD_ALLOC\n-#   endif\n-    // Because of a Microsoft front end bug, we must not provide a\n-    // namespace qualifier when declaring a friend function.\n-#   define __STD_QUALIFIER\n-# endif\n-\n-# if defined(__BORLANDC__)\n-#     define __STL_NO_BAD_ALLOC\n-#     define __STL_NO_DRAND48\n-#     define __STL_DEFAULT_CONSTRUCTOR_BUG\n-#   if __BORLANDC__ >= 0x540 /* C++ Builder 4.0 */\n-#     define __STL_CLASS_PARTIAL_SPECIALIZATION\n-#     define __STL_FUNCTION_TMPL_PARTIAL_ORDER\n-#     define __STL_EXPLICIT_FUNCTION_TMPL_ARGS\n-#     define __STL_MEMBER_TEMPLATES\n-#     define __STL_TEMPLATE_FRIENDS\n-#   else\n-#     define __STL_NEED_TYPENAME\n-#     define __STL_LIMITED_DEFAULT_TEMPLATES\n-#     define __SGI_STL_NO_ARROW_OPERATOR\n-#     define __STL_NON_TYPE_TMPL_PARAM_BUG\n-#   endif\n-#   ifdef _CPPUNWIND\n-#     define __STL_USE_EXCEPTIONS\n-#   endif\n-#   ifdef __MT__\n-#     define __STL_WIN32THREADS\n-#   endif\n-# endif\n-\n-# if defined(__STL_NO_BOOL) && !defined(__STL_DONT_USE_BOOL_TYPEDEF)\n-    typedef int bool;\n-#   define true 1\n-#   define false 0\n-# endif\n-\n-# ifdef __STL_NEED_TYPENAME\n-#   define typename\n-# endif\n-\n-# ifdef __STL_LIMITED_DEFAULT_TEMPLATES\n-#   define __STL_DEPENDENT_DEFAULT_TMPL(_Tp)\n-# else\n-#   define __STL_DEPENDENT_DEFAULT_TMPL(_Tp) = _Tp\n-# endif\n-\n-# ifdef __STL_MEMBER_TEMPLATE_KEYWORD\n-#   define __STL_TEMPLATE template\n-# else\n-#   define __STL_TEMPLATE\n-# endif\n-\n-# ifdef __STL_NEED_EXPLICIT\n-#   define explicit\n-# endif\n-\n-# ifdef __STL_EXPLICIT_FUNCTION_TMPL_ARGS\n-#   define __STL_NULL_TMPL_ARGS <>\n-# else\n-#   define __STL_NULL_TMPL_ARGS\n-# endif\n-\n-# if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) \\\n-     || defined (__STL_PARTIAL_SPECIALIZATION_SYNTAX)\n-#   define __STL_TEMPLATE_NULL template<>\n-# else\n-#   define __STL_TEMPLATE_NULL\n-# endif\n-\n-// Use standard-conforming allocators if we have the necessary language\n-// features.  __STL_USE_SGI_ALLOCATORS is a hook so that users can \n-// disable new-style allocators, and continue to use the same kind of\n-// allocators as before, without having to edit library headers.\n-# if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) && \\\n-     defined(__STL_MEMBER_TEMPLATES) && \\\n-     defined(__STL_MEMBER_TEMPLATE_CLASSES) && \\\n-    !defined(__STL_NO_BOOL) && \\\n-    !defined(__STL_NON_TYPE_TMPL_PARAM_BUG) && \\\n-    !defined(__STL_LIMITED_DEFAULT_TEMPLATES) && \\\n-    !defined(__STL_USE_SGI_ALLOCATORS) \n-#   define __STL_USE_STD_ALLOCATORS\n-# endif\n-\n-# ifndef __STL_DEFAULT_ALLOCATOR\n-#   ifdef __STL_USE_STD_ALLOCATORS\n-#     define __STL_DEFAULT_ALLOCATOR(T) allocator< T >\n-#   else\n-#     define __STL_DEFAULT_ALLOCATOR(T) alloc\n-#   endif\n-# endif\n-\n-// __STL_NO_NAMESPACES is a hook so that users can disable namespaces\n-// without having to edit library headers.  __STL_NO_RELOPS_NAMESPACE is\n-// a hook so that users can disable the std::rel_ops namespace, keeping \n-// the relational operator template in namespace std, without having to \n-// edit library headers.\n-# if defined(__STL_HAS_NAMESPACES) && !defined(__STL_NO_NAMESPACES)\n-#   define __STL_USE_NAMESPACES\n-#   define __STD std\n-#   define __STL_BEGIN_NAMESPACE namespace std {\n-#   define __STL_END_NAMESPACE }\n-#   if defined(__STL_FUNCTION_TMPL_PARTIAL_ORDER) && \\\n-       !defined(__STL_NO_RELOPS_NAMESPACE)\n-#     define __STL_USE_NAMESPACE_FOR_RELOPS\n-#     define __STL_BEGIN_RELOPS_NAMESPACE namespace std { namespace rel_ops {\n-#     define __STL_END_RELOPS_NAMESPACE } }\n-#     define __STD_RELOPS std::rel_ops\n-#   else /* Use std::rel_ops namespace */\n-#     define __STL_USE_NAMESPACE_FOR_RELOPS\n-#     define __STL_BEGIN_RELOPS_NAMESPACE namespace std {\n-#     define __STL_END_RELOPS_NAMESPACE }\n-#     define __STD_RELOPS std\n-#   endif /* Use std::rel_ops namespace */\n-# else\n-#   define __STD \n-#   define __STL_BEGIN_NAMESPACE \n-#   define __STL_END_NAMESPACE \n-#   undef  __STL_USE_NAMESPACE_FOR_RELOPS\n-#   define __STL_BEGIN_RELOPS_NAMESPACE \n-#   define __STL_END_RELOPS_NAMESPACE \n-#   define __STD_RELOPS \n-#   undef  __STL_USE_NAMESPACES\n-# endif\n-\n-// Some versions of the EDG front end sometimes require an explicit\n-// namespace spec where they shouldn't.  This macro facilitates that.\n-// If the bug becomes irrelevant, then all uses of __STD_QUALIFIER\n-// should be removed.  The 7.3 beta SGI compiler has this bug, but the\n-// MR version is not expected to have it.\n-\n-# if defined(__STL_USE_NAMESPACES) && !defined(__STD_QUALIFIER)\n-#   define __STD_QUALIFIER std::\n-# else\n-#   define __STD_QUALIFIER\n-# endif\n-\n-# ifdef __STL_USE_EXCEPTIONS\n-#   define __STL_TRY try\n-#   define __STL_CATCH_ALL catch(...)\n-#   define __STL_THROW(x) throw x\n-#   define __STL_RETHROW throw\n-#   define __STL_NOTHROW throw()\n-#   define __STL_UNWIND(action) catch(...) { action; throw; }\n-# else\n-#   define __STL_TRY \n-#   define __STL_CATCH_ALL if (false)\n-#   define __STL_THROW(x) \n-#   define __STL_RETHROW \n-#   define __STL_NOTHROW \n-#   define __STL_UNWIND(action) \n-# endif\n-\n-#ifdef __STL_ASSERTIONS\n-# include <stdio.h>\n-# define __stl_assert(expr) \\\n-    if (!(expr)) { fprintf(stderr, \"%s:%d STL assertion failure: %s\\n\", \\\n-\t\t\t  __FILE__, __LINE__, # expr); abort(); }\n-#else\n-# define __stl_assert(expr)\n-#endif\n-\n-#if defined(__STL_WIN32THREADS) || defined(__STL_SGI_THREADS) \\\n-    || defined(__STL_PTHREADS)  || defined(__STL_UITHREADS)\n-#   define __STL_THREADS\n-#   define __STL_VOLATILE volatile\n-#else\n-#   define __STL_VOLATILE\n-#endif\n-\n-#if defined(__STL_CLASS_PARTIAL_SPECIALIZATION) \\\n-    && defined(__STL_MEMBER_TEMPLATES) \\\n-    && !defined(_STL_NO_CONCEPT_CHECKS)\n-#  define __STL_USE_CONCEPT_CHECKS\n-#endif\n-\n-\n-#endif /* __STL_CONFIG_H */\n-\n-// Local Variables:\n-// mode:C++\n-// End:"}, {"sha": "b683f315347372e64da46cf33d2687fd75ccccbb", "filename": "libstdc++-v3/include/bits/type_traits.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ftype_traits.h?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -17,9 +17,7 @@\n \n #pragma GCC system_header\n \n-#ifndef _CPP_BITS_STL_CONFIG_H\n-#include <bits/stl_config.h>\n-#endif\n+#include <bits/c++config.h>\n \n /*\n This header file provides a framework for allowing compile time dispatch"}, {"sha": "9f30db593dad7c5ca75266285c623128c0fe4710", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -114,7 +114,7 @@ toplevel_srcdir = @toplevel_srcdir@\n AUTOMAKE_OPTIONS = 1.3 cygnus\n \n mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n-@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = libio.la\n+@GLIBCPP_BUILD_LIBIO_TRUE@noinst_LTLIBRARIES = @GLIBCPP_BUILD_LIBIO_TRUE@libio.la\n @GLIBCPP_BUILD_LIBIO_FALSE@noinst_LTLIBRARIES = \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -126,14 +126,21 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n-libio_headers =          libio.h libioP.h iolibio.h\n+libio_headers = \\\n+        libio.h libioP.h iolibio.h\n \n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = \tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \tiofclose.c iofopen.c \n+@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_SRCS = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tfiledoalloc.c genops.c fileops.c stdfiles.c c_codecvt.c \\\n+@GLIBCPP_NEED_LIBIO_TRUE@\tiofclose.c iofopen.c \n @GLIBCPP_NEED_LIBIO_FALSE@LIBIO_SRCS = \n-@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = \twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n+@GLIBCPP_NEED_WLIBIO_TRUE@LIBIO_WSRCS = @GLIBCPP_NEED_WLIBIO_TRUE@\\\n+@GLIBCPP_NEED_WLIBIO_TRUE@\twfiledoalloc.c wfileops.c wgenops.c iofwide.c\n @GLIBCPP_NEED_WLIBIO_FALSE@LIBIO_WSRCS = \n \n EXTRA_DIST = iostreamP.h"}, {"sha": "9d339b9517b70942f0b93dc01f02eb1d3677f606", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -117,18 +117,24 @@ mkinstalldirs = $(SHELL) $(toplevel_srcdir)/mkinstalldirs\n \n noinst_LTLIBRARIES = libmath.la\n \n-EXTRA_LONG_DOUBLE_yes =  \thypotl.c signbitl.c\n+EXTRA_LONG_DOUBLE_yes = \\\n+\thypotl.c signbitl.c\n \n \n-EXTRA_DIST =  \thypot.c hypotf.c atan2f.c expf.c \t$(EXTRA_LONG_DOUBLE_yes) \n+EXTRA_DIST = \\\n+\thypot.c hypotf.c atan2f.c expf.c \\\n+\t$(EXTRA_LONG_DOUBLE_yes) \n \n \n-libmath_la_LIBADD =  \t@LIBMATHOBJS@ \t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n+libmath_la_LIBADD = \\\n+\t@LIBMATHOBJS@ \\\n+\t$(EXTRA_LONG_DOUBLE_$(USE_COMPLEX_LONG_DOUBLE)) \n \n \n libmath_la_DEPENDENCIES = $(libmath_la_LIBADD)\n \n-libmath_la_SOURCES =  \tsignbit.c signbitf.c\n+libmath_la_SOURCES = \\\n+\tsignbit.c signbitf.c\n \n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n@@ -142,7 +148,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "05ed4fab914d5a6257daadc643c1e4a192f9d17d", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -131,11 +131,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -147,13 +149,31 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t $(LIBSUPCXX_INCLUDES)\n+INCLUDES = \\\n+\t-I$(toplevel_srcdir)/gcc -I$(toplevel_srcdir)/include \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t $(LIBSUPCXX_INCLUDES)\n \n \n-headers =  \texception new typeinfo cxxabi.h exception_defines.h \n+headers = \\\n+\texception new typeinfo cxxabi.h exception_defines.h \n \n \n-sources =  \tdel_op.cc \tdel_opnt.cc \tdel_opv.cc \tdel_opvnt.cc \texception_support.cc \tnew_handler.cc \tnew_op.cc \tnew_opnt.cc \tnew_opv.cc \tnew_opvnt.cc \tpure.cc \ttinfo.cc \ttinfo2.cc \tvec.cc\n+sources = \\\n+\tdel_op.cc \\\n+\tdel_opnt.cc \\\n+\tdel_opv.cc \\\n+\tdel_opvnt.cc \\\n+\texception_support.cc \\\n+\tnew_handler.cc \\\n+\tnew_op.cc \\\n+\tnew_opnt.cc \\\n+\tnew_opv.cc \\\n+\tnew_opvnt.cc \\\n+\tpure.cc \\\n+\ttinfo.cc \\\n+\ttinfo2.cc \\\n+\tvec.cc\n \n \n libsupc___la_SOURCES = $(sources)\n@@ -171,7 +191,12 @@ LIBSUPCXX_CXXFLAGS = -prefer-pic\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -195,14 +220,17 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n #\n # We have to put --tag disable-shared after --tag CXX lest things\n # CXX undo the affect of disable-shared.\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared                --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --tag disable-shared \\\n+               --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "6283b5f58669f62a5962832665bdb6a2096f6215", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.71 2001/02/07 20:26:24 bkoz Exp $\n+## $Id: Makefile.am,v 1.72 2001/02/16 00:43:41 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -98,7 +98,7 @@ base_headers = \\\n \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n \tbits/type_traits.h bits/std_algorithm.h \\\n \tbits/concept_checks.h bits/container_concepts.h \\\n-\tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n+\tbits/sequence_concepts.h bits/stl_construct.h\n \n backward_headers = \\\n \tbackward/complex.h backward/iomanip.h backward/istream.h \\"}, {"sha": "c515e1c66276d975f8f9389d4e64adbfe0742c5f", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 126, "deletions": 28, "changes": 154, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -125,11 +125,13 @@ OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n # These bits are all figured out from configure. Look in acinclude.m4\n # or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n # NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n \n \n # Warning flags to use.\n-WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n \n \n # Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n@@ -141,35 +143,121 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \t$(TOPLEVEL_INCLUDES)\t\n-\n-\n-base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/stringfwd.h bits/std_string.h bits/basic_string.h \tbits/basic_string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/stl_config.h bits/stl_construct.h\n-\n-\n-backward_headers =  \tbackward/complex.h backward/iomanip.h backward/istream.h \tbackward/ostream.h backward/stream.h backward/streambuf.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h backward/strstream.h backward/strstream\n-\n-\n-ext_headers =  \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n-\n-\n-c_base_headers =  \tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n-\n-@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = \tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \tfeatures.h langinfo.h \tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \tbits/wrap_features.h bits/wrap_langinfo.h \tsys/cdefs.h \n+INCLUDES = \\\n+\t-nostdinc++ \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) $(CSTD_INCLUDES) -I$(top_builddir)/include \\\n+\t$(LIBSUPCXX_INCLUDES) $(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) \\\n+\t$(TOPLEVEL_INCLUDES)\t\n+\n+\n+base_headers = \\\n+\tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \\\n+\tbits/stringfwd.h bits/std_string.h bits/basic_string.h \\\n+\tbits/basic_string.tcc \\\n+\tbits/generic_shadow.h bits/std_utility.h \\\n+\tbits/std_complex.h \\\n+\tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \\\n+\tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \\\n+\tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \\\n+\tbits/std_fstream.h bits/std_iomanip.h \\\n+\tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \\\n+\tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \\\n+\tbits/std_istream.h bits/istream.tcc bits/std_locale.h \\\n+\tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \\\n+\tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \\\n+\tbits/streambuf.tcc bits/basic_file.h \\\n+\tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \\\n+\tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \\\n+\tbits/stl_threads.h bits/stl_iterator_base.h \\\n+\tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \\\n+\tbits/std_iterator.h bits/std_list.h \\\n+\tbits/std_map.h bits/std_memory.h bits/std_numeric.h \\\n+\tbits/std_queue.h bits/std_set.h bits/std_stack.h \\\n+\tbits/std_stdexcept.h bits/functexcept.h bits/std_vector.h \\\n+\tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \\\n+\tbits/stl_deque.h bits/stl_function.h \\\n+\tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \\\n+\tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \\\n+\tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \\\n+\tbits/stl_relops.h bits/stl_set.h \\\n+\tbits/stl_stack.h bits/stl_tempbuf.h \\\n+\tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \\\n+\tbits/type_traits.h bits/std_algorithm.h \\\n+\tbits/concept_checks.h bits/container_concepts.h \\\n+\tbits/sequence_concepts.h bits/stl_construct.h\n+\n+\n+backward_headers = \\\n+\tbackward/complex.h backward/iomanip.h backward/istream.h \\\n+\tbackward/ostream.h backward/stream.h backward/streambuf.h \\\n+\tbackward/algo.h backward/algobase.h backward/alloc.h \\\n+\tbackward/bvector.h backward/defalloc.h backward/deque.h \\\n+\tbackward/function.h backward/hash_map.h backward/hash_set.h \\\n+\tbackward/hashtable.h backward/heap.h backward/iterator.h \\\n+\tbackward/list.h backward/map.h backward/multimap.h backward/new.h \\\n+\tbackward/multiset.h backward/pair.h backward/iostream.h \\\n+\tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \\\n+\tbackward/tempbuf.h backward/tree.h backward/vector.h \\\n+\tbackward/fstream.h backward/strstream.h backward/strstream\n+\n+\n+ext_headers = \\\n+\text/ropeimpl.h ext/stl_rope.h \\\n+\text/stl_bvector.h ext/stl_hashtable.h ext/stl_hash_fun.h \\\n+\text/hash_map ext/hash_set ext/rope ext/slist \\\n+\text/tree ext/bvector \n+\n+\n+c_base_headers = \\\n+\tbits/std_cassert.h bits/std_cctype.h bits/std_cerrno.h \\\n+\tbits/std_cfloat.h bits/std_climits.h bits/std_clocale.h \\\n+\tbits/std_cmath.h bits/std_csetjmp.h bits/std_csignal.h \\\n+\tbits/std_cstdarg.h bits/std_cstddef.h bits/std_cstdio.h \\\n+\tbits/std_cstdlib.h bits/std_cstring.h bits/std_ctime.h \\\n+\tbits/std_cwchar.h bits/std_cwctype.h bits/cmath.tcc\n+\n+@GLIBCPP_USE_CSHADOW_TRUE@c_shadow_headers = @GLIBCPP_USE_CSHADOW_TRUE@\\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tassert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsignal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h wchar.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\twctype.h fcntl.h libio.h iolibio.h libioP.h pthread.h iconv.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tfeatures.h langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_libio.h bits/wrap_iolibio.h bits/wrap_libioP.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_iconv.h bits/wrap_fcntl.h bits/wrap_pthread.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tbits/wrap_features.h bits/wrap_langinfo.h \\\n+@GLIBCPP_USE_CSHADOW_TRUE@\tsys/cdefs.h \n @GLIBCPP_USE_CSHADOW_FALSE@c_shadow_headers = \n \n-std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios iosfwd iostream istream iterator limits list locale \tmap memory numeric ostream queue set sstream stack stdexcept \tstreambuf string utility valarray vector \tcassert cctype cerrno cfloat climits clocale ciso646 \tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \tcstring ctime cwchar cwctype\n-\n-@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n+std_headers = \\\n+\talgorithm bitset complex deque fstream functional \\\n+\tiomanip ios iosfwd iostream istream iterator limits list locale \\\n+\tmap memory numeric ostream queue set sstream stack stdexcept \\\n+\tstreambuf string utility valarray vector \\\n+\tcassert cctype cerrno cfloat climits clocale ciso646 \\\n+\tcmath csetjmp csignal cstdarg cstddef cstdio cstdlib \\\n+\tcstring ctime cwchar cwctype\n+\n+@GLIBCPP_NEED_LIBIO_TRUE@libio_headers = @GLIBCPP_NEED_LIBIO_TRUE@\\\n+@GLIBCPP_NEED_LIBIO_TRUE@\t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \tbits/std_limits.h \tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n+build_headers = \\\n+\tbits/std_limits.h \\\n+\tbits/c++config.h bits/c++io.h bits/c++locale.h bits/c++threads.h \\\n+\tbits/atomicity.h bits/os_defines.h \\\n+\tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n-sources =  \tlimitsMEMBERS.cc \tstdexcept.cc functexcept.cc bitset.cc         globals.cc \tc++io.cc ios.cc complex_io.cc strstream.cc \tc++locale.cc locale.cc localename.cc codecvt.cc \tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n+sources = \\\n+\tlimitsMEMBERS.cc \\\n+\tstdexcept.cc functexcept.cc bitset.cc \\\n+        globals.cc \\\n+\tc++io.cc ios.cc complex_io.cc strstream.cc \\\n+\tc++locale.cc locale.cc localename.cc codecvt.cc \\\n+\tlocale-inst.cc stl-inst.cc misc-inst.cc valarray-inst.cc string-inst.cc\n \n \n-wstring_sources =  \twstring-inst.cc\n+wstring_sources = \\\n+\twstring-inst.cc\n \n VPATH =  $(top_srcdir) $(top_srcdir)/src $(GLIBCPP_INCLUDE_DIR)  $(GLIBCPP_INCLUDE_DIR)/std $(C_INCLUDE_DIR)\n \n@@ -180,13 +268,16 @@ libstdc___la_SOURCES = $(sources)\n \n libinst_wstring_la_SOURCES = $(wstring_sources)\n \n-libstdc___la_LIBADD =  \t../libmath/libmath.la @libio_la@ \t../libsupc++/libsupc++convenience.la \t@libinst_wstring_la@\n+libstdc___la_LIBADD = \\\n+\t../libmath/libmath.la @libio_la@ \\\n+\t../libsupc++/libsupc++convenience.la \\\n+\t@libinst_wstring_la@\n \n \n libstdc___la_LDFLAGS = -version-info 3:0:0 -lm\n \n libstdc___la_DEPENDENCIES = $(libstdc___la_LIBADD)\n-@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = $(top_builddir)/stamp-cshadow\n+@GLIBCPP_USE_CSHADOW_TRUE@CSHADOW_H = @GLIBCPP_USE_CSHADOW_TRUE@$(top_builddir)/stamp-cshadow\n @GLIBCPP_USE_CSHADOW_FALSE@CSHADOW_H = \n \n # Check for various configure bits that change where the headers get installed.\n@@ -205,7 +296,12 @@ c_incdir = @C_INCLUDE_DIR@\n # set this option because CONFIG_CXXFLAGS has to be after\n # OPTIMIZE_CXXFLAGS on the compile line so that -O2 can be overridden\n # as the occasion call for it. (ie, --enable-debug)\n-AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS) \t$(OPTIMIZE_CXXFLAGS) \t$(CONFIG_CXXFLAGS) \n+AM_CXXFLAGS = \\\n+\t-fno-implicit-templates \\\n+\t$(LIBSUPCXX_CXXFLAGS) \\\n+\t$(WARN_CXXFLAGS) \\\n+\t$(OPTIMIZE_CXXFLAGS) \\\n+\t$(CONFIG_CXXFLAGS) \n \n \n # libstdc++ libtool notes\n@@ -226,14 +322,16 @@ AM_CXXFLAGS =  \t-fno-implicit-templates \t$(LIBSUPCXX_CXXFLAGS) \t$(WARN_CXXFLAGS)\n # correct solution is to add `--tag CXX' to LTCXXCOMPILE and maybe\n # CXXLINK, just after $(LIBTOOL), so that libtool doesn't have to\n # attempt to infer which configuration to use\n-LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n+LTCXXCOMPILE = $(LIBTOOL) --tag CXX --mode=compile $(CXX) $(INCLUDES) \\\n+\t       $(AM_CPPFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(AM_CXXFLAGS) \n \n \n # 3) We have a problem when building the shared libstdc++ object if\n # the rules automake generates would be used.  We cannot allow CXX to\n # be used in libtool since this would add -lstdc++ to the link line\n # which of course is problematic at this point.\n-CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n+CXXLINK = $(LIBTOOL) --mode=link \"$(CC)\" \\\n+\t  @OPT_LDFLAGS@ @SECTION_LDFLAGS@ $(AM_CXXFLAGS) $(LDFLAGS) -o $@\n \n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "319aebb0028cd283b31d56d1efda1a85224bfe83", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cfeea6e4e1a71b529a811bd5c21f8e231859be5/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=9cfeea6e4e1a71b529a811bd5c21f8e231859be5", "patch": "@@ -32,7 +32,6 @@\n //\n \n #include <bits/c++config.h>\n-#include <bits/stl_config.h>\n #include <bits/stl_alloc.h>\n #include <bits/std_vector.h>\n "}]}