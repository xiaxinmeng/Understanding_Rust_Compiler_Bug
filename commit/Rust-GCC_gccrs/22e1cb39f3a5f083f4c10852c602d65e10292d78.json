{"sha": "22e1cb39f3a5f083f4c10852c602d65e10292d78", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJlMWNiMzlmM2E1ZjA4M2Y0YzEwODUyYzYwMmQ2NWUxMDI5MmQ3OA==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2016-07-01T12:09:53Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2016-07-01T12:09:53Z"}, "message": "re PR target/71151 ([avr] -fmerge-constants and -fdata-sections/-ffunction-sections results in string constants in .progmem.gcc_sw section)\n\ngcc/testsuite/\n\tPR target/71151\n\t* gcc.target/avr/pr71151-common.h (foo): Use macro SECTION_NAME\n\tinstead of \".foo\" for its section name.\n\t* gcc.target/avr/pr71151-2.c (SECTION_NAME): Define appropriately\n\tdepending on MCU's flash size.\n\t* gcc.target/avr/pr71151-3.c (SECTION_NAME): Dito.\n\t* gcc.target/avr/pr71151-4.c (SECTION_NAME): Dito.\n\t* gcc.target/avr/pr71151-5.c (SECTION_NAME): Dito.\n\t* gcc.target/avr/pr71151-6.c (SECTION_NAME): Dito.\n\t* gcc.target/avr/pr71151-7.c (SECTION_NAME): Dito.\n\t* gcc.target/avr/pr71151-8.c (SECTION_NAME): Dito.\n\nFrom-SVN: r237910", "tree": {"sha": "5da361799a29b8f80c15f77feb16f75ce2390aea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5da361799a29b8f80c15f77feb16f75ce2390aea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22e1cb39f3a5f083f4c10852c602d65e10292d78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e1cb39f3a5f083f4c10852c602d65e10292d78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22e1cb39f3a5f083f4c10852c602d65e10292d78", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22e1cb39f3a5f083f4c10852c602d65e10292d78/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55dcc361e67fb135be96f5e80e93ee98304b3c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55dcc361e67fb135be96f5e80e93ee98304b3c1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55dcc361e67fb135be96f5e80e93ee98304b3c1e"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "c23836cd8a2ac787266b1af03590618491899ce7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,3 +1,17 @@\n+2016-07-01  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/71151\n+\t* gcc.target/avr/pr71151-common.h (foo): Use macro SECTION_NAME\n+\tinstead of \".foo\" for its section name.\n+\t* gcc.target/avr/pr71151-2.c (SECTION_NAME): Define appropriately\n+\tdepending on MCU's flash size.\n+\t* gcc.target/avr/pr71151-3.c (SECTION_NAME): Dito.\n+\t* gcc.target/avr/pr71151-4.c (SECTION_NAME): Dito.\n+\t* gcc.target/avr/pr71151-5.c (SECTION_NAME): Dito.\n+\t* gcc.target/avr/pr71151-6.c (SECTION_NAME): Dito.\n+\t* gcc.target/avr/pr71151-7.c (SECTION_NAME): Dito.\n+\t* gcc.target/avr/pr71151-8.c (SECTION_NAME): Dito.\n+\n 2016-07-01  Jan Beulich  <jbeulich@suse.com>\n \n \t* gcc.target/i386/pr65105-2.c: Add -msse2."}, {"sha": "f745841df8a66fba27cab29160770545d3d54d0b", "filename": "gcc/testsuite/gcc.target/avr/pr71151-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-2.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -5,6 +5,8 @@\n    flash address for loading jump table entry, 2 byte entry, after\n    removing the special section placement hook. */\n \n+#define SECTION_NAME \".foo\"\n+\n #include \"exit-abort.h\"\n #include \"pr71151-common.h\"\n "}, {"sha": "a8fa6b63e0b2316fe47fc87a9a4948cfa130b47e", "filename": "gcc/testsuite/gcc.target/avr/pr71151-3.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-3.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,10 +1,17 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -mno-relax -fdata-sections -Wl,--section-start=.foo=0x10000\" } */\n \n+#ifdef __AVR_HAVE_ELPM__\n /* Make sure jumptables work properly if placed above 64 KB and below 128 KB,\n    i.e. 3 byte flash address for loading jump table entry and 2 byte jump table\n    entry, with relaxation disabled, after removing the special section\n    placement hook. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort\n+   for, e.g. ATmega64.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\""}, {"sha": "659aff07510425a387b534c082222e4862be8b22", "filename": "gcc/testsuite/gcc.target/avr/pr71151-4.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-4.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,10 +1,17 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x10000\" } */\n \n+#ifdef __AVR_HAVE_ELPM__\n /* Make sure jumptables work properly if placed above 64 KB and below 128 KB,\n    i.e. 3 byte flash address for loading jump table entry and 2 byte jump\n    table entry, with relaxation enabled, after removing the special section\n    placement hook. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort\n+   for, e.g. ATmega64.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\""}, {"sha": "f9b09e8208301610ea28dd03e25ff898fb3f458e", "filename": "gcc/testsuite/gcc.target/avr/pr71151-5.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-5.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,20 +1,23 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mno-relax -Wl,--section-start=.foo=0x20000\" } */\n \n+#ifdef __AVR_3_BYTE_PC__\n /* Make sure jumptables work properly if placed above 128 KB, i.e. 3 byte\n    flash address for loading jump table entry and a jump table entry\n    that is a stub, with relaxation disabled, after removing the special\n    section placement hook. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort\n+   for, e.g. ATmega128.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\"\n \n int main()\n {\n-\t/* Not meant for devices with flash <= 128K */\n-#if defined (__AVR_2_BYTE_PC__)\n-\texit(0);\n-#else\n \tfoo(5);\n \tif (y != 37)\n \t\tabort();\n@@ -26,5 +29,4 @@ int main()\n \tfoo(7);\n \tif (y != 98)\n \t\tabort();\n-#endif\n }"}, {"sha": "dedeffaa425bd3451614ec88f23254a4916df55c", "filename": "gcc/testsuite/gcc.target/avr/pr71151-6.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-6.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,20 +1,23 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x20000\" } */\n \n+#ifdef __AVR_3_BYTE_PC__\n /* Make sure jumptables work properly if placed above 128 KB, i.e. 3 byte\n    flash address for loading jump table entry and a jump table entry\n    that is a stub, with relaxation enabled, after removing the special\n    section placement hook. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort\n+   for, e.g. ATmega128.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\"\n \n int main()\n {\n-\t/* Not meant for devices with flash <= 128K */\n-#if defined (__AVR_2_BYTE_PC__)\n-\texit(0);\n-#else\n \tfoo(5);\n \tif (y != 37)\n \t\tabort();\n@@ -26,5 +29,4 @@ int main()\n \tfoo(7);\n \tif (y != 98)\n \t\tabort();\n-#endif\n }"}, {"sha": "2a440960301c8662eaf0e2163e5388b873ceb067", "filename": "gcc/testsuite/gcc.target/avr/pr71151-7.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-7.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,18 +1,21 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mno-relax -Wl,--section-start=.foo=0x1fffa\" } */\n \n+#ifdef __AVR_3_BYTE_PC__\n /* Make sure jumptables work properly if placed straddling 128 KB i.e\n    some entries below 128 KB and some above it, with relaxation disabled. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort\n+   for, e.g. ATmega128.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\"\n \n int main()\n {\n-\t/* Not meant for devices with flash <= 128K */\n-#if defined (__AVR_2_BYTE_PC__)\n-\texit(0);\n-#else\n \tfoo(5);\n \tif (y != 37)\n \t\tabort();\n@@ -24,5 +27,4 @@ int main()\n \tfoo(7);\n \tif (y != 98)\n \t\tabort();\n-#endif\n }"}, {"sha": "aa3015b0455b5debb90ae6fe3c5672be831c083e", "filename": "gcc/testsuite/gcc.target/avr/pr71151-8.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-8.c?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,18 +1,20 @@\n /* { dg-do run } */\n /* { dg-options \"-Os -fno-tree-switch-conversion -ffunction-sections -fdata-sections -mrelax -Wl,--section-start=.foo=0x1fffa\" } */\n \n+#ifdef __AVR_3_BYTE_PC__\n /* Make sure jumptables work properly if placed straddling 128 KB i.e\n    some entries below 128 KB and some above it, with relaxation disabled. */\n+#define SECTION_NAME \".foo\"\n+#else\n+/* No special jump table placement so that avrtest won't abort.  */\n+#define SECTION_NAME \".text.foo\"\n+#endif\n \n #include \"exit-abort.h\"\n #include \"pr71151-common.h\"\n \n int main()\n {\n-\t/* Not meant for devices with flash <= 128K */\n-#if defined (__AVR_2_BYTE_PC__)\n-\texit(0);\n-#else\n \tfoo(5);\n \tif (y != 37)\n \t\tabort();\n@@ -24,5 +26,4 @@ int main()\n \tfoo(7);\n \tif (y != 98)\n \t\tabort();\n-#endif\n }"}, {"sha": "43379be5d2c65ded551d72bed004cd1f80526014", "filename": "gcc/testsuite/gcc.target/avr/pr71151-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22e1cb39f3a5f083f4c10852c602d65e10292d78/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71151-common.h?ref=22e1cb39f3a5f083f4c10852c602d65e10292d78", "patch": "@@ -1,7 +1,7 @@\n volatile char y;\n volatile char g;\n \n-__attribute__((section(\".foo\")))\n+__attribute__((section(SECTION_NAME)))\n void foo(char x) \n {\n \tswitch (x)"}]}