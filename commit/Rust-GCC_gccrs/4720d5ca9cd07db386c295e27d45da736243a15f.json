{"sha": "4720d5ca9cd07db386c295e27d45da736243a15f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyMGQ1Y2E5Y2QwN2RiMzg2YzI5NWUyN2Q0NWRhNzM2MjQzYTE1Zg==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2006-01-18T15:44:57Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-01-18T15:44:57Z"}, "message": "re PR target/25731 (Complex values passed in wrong registers)\n\n\tPR target/25731\n\t* config.gcc (hppa*-*-linux*, hppa[12]*-*-hpux10*, hppa*64*-*-hpux11*,\n\thppa[12]*-*-hpux11*): Override default shared libgcc version for both\n\tsjlj and dwarf2 exception handling.\n\t* pa/t-hpux-shlib (SHLIB_SOVERSION): New make variable.\n\tRework to allow overriding SHLIB_EXT and SHLIB_SOVERSION.\n\t* pa/pa.c (function_value): Treat complex and vector types as\n\taggregates.\n\t(function_arg): Likewise.  Only pass scalar floats in the floating\n\tpoint argument registers.\n\t* pa/t-slibgcc-dwarf-ver: New file.\n\t* pa/t-slibgcc-sjlj-ver: New file.\n\t* pa/t-slibgcc-elf-ver: Delete file.\n\nFrom-SVN: r109894", "tree": {"sha": "dd0df51dc02b191012bb75941de5dba1cc47248b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd0df51dc02b191012bb75941de5dba1cc47248b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4720d5ca9cd07db386c295e27d45da736243a15f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4720d5ca9cd07db386c295e27d45da736243a15f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4720d5ca9cd07db386c295e27d45da736243a15f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4720d5ca9cd07db386c295e27d45da736243a15f/comments", "author": null, "committer": null, "parents": [{"sha": "4325ca904b4f1176efeb7a76be7a7955b0422740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4325ca904b4f1176efeb7a76be7a7955b0422740", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4325ca904b4f1176efeb7a76be7a7955b0422740"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "04a67b79d8bed14ad80991170052c4a7a23c9ece", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -1,3 +1,19 @@\n+2006-01-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/25731\n+\t* config.gcc (hppa*-*-linux*, hppa[12]*-*-hpux10*, hppa*64*-*-hpux11*,\n+\thppa[12]*-*-hpux11*): Override default shared libgcc version for both\n+\tsjlj and dwarf2 exception handling.\n+\t* pa/t-hpux-shlib (SHLIB_SOVERSION): New make variable.\n+\tRework to allow overriding SHLIB_EXT and SHLIB_SOVERSION.\n+\t* pa/pa.c (function_value): Treat complex and vector types as\n+\taggregates.\n+\t(function_arg): Likewise.  Only pass scalar floats in the floating\n+\tpoint argument registers.\n+\t* pa/t-slibgcc-dwarf-ver: New file.\n+\t* pa/t-slibgcc-sjlj-ver: New file.\n+\t* pa/t-slibgcc-elf-ver: Delete file.\n+\n 2006-01-19  Alan Modra  <amodra@bigpond.net.au>\n \n \t* config/rs6000/rs6000.c (rs6000_assemble_integer): Correct"}, {"sha": "6e29abb998b749b5408be0abc34b071347bc110f", "filename": "gcc/config.gcc", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -846,10 +846,11 @@ hppa*-*-linux* | parisc*-*-linux*)\n \ttm_file=\"${tm_file} dbxelf.h elfos.h svr4.h linux.h pa/pa-linux.h \\\n \t\t pa/pa32-regs.h pa/pa32-linux.h\"\n \ttmake_file=\"${tmake_file} pa/t-linux\"\n-\t# if not configured with --enable-sjlj-exceptions, bump the\n-\t# libgcc version number\n-\tif test x$sjlj != x1; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\t# Set the libgcc version number\n+\tif test x$sjlj = x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n+\telse\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \t;;\n # port not yet contributed.\n@@ -900,8 +901,11 @@ hppa[12]*-*-hpux10*)\n \t    tmake_file=\"${tmake_file} pa/t-dce-thr\"\n \t    ;;\n \tesac\n-\tif test x$sjlj != x1; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\t# Set the libgcc version number\n+\tif test x$sjlj = x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n+\telse\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \tuse_collect2=yes\n \tuse_fixproto=yes\n@@ -935,8 +939,11 @@ hppa*64*-*-hpux11*)\n \t\t       pa/pa-hpux1010.opt pa/pa64-hpux.opt\"\n \tneed_64bit_hwint=yes\n \ttmake_file=\"pa/t-pa64 pa/t-pa-hpux pa/t-hpux-shlib\"\n-\tif test x$sjlj != x1; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\t# Set the libgcc version number\n+\tif test x$sjlj = x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n+\telse\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \textra_parts=\"crtbegin.o crtend.o crtbeginS.o crtendS.o crtbeginT.o\"\n \tcase x${enable_threads} in\n@@ -961,8 +968,11 @@ hppa[12]*-*-hpux11*)\n \t\t;;\n \tesac\n \ttmake_file=\"pa/t-pa pa/t-pa-hpux pa/t-hpux-shlib\"\n-\tif test x$sjlj != x1; then\n-\t    tmake_file=\"$tmake_file pa/t-slibgcc-elf-ver\"\n+\t# Set the libgcc version number\n+\tif test x$sjlj = x1; then\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-sjlj-ver\"\n+\telse\n+\t    tmake_file=\"$tmake_file pa/t-slibgcc-dwarf-ver\"\n \tfi\n \tcase x${enable_threads} in\n \txyes | xposix )"}, {"sha": "1b90e6bb9f8cbc0d585667d8c4cbf27f8db02cd9", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -8791,7 +8791,9 @@ function_value (tree valtype, tree func ATTRIBUTE_UNUSED)\n {\n   enum machine_mode valmode;\n \n-  if (AGGREGATE_TYPE_P (valtype))\n+  if (AGGREGATE_TYPE_P (valtype)\n+      || TREE_CODE (valtype) == COMPLEX_TYPE\n+      || TREE_CODE (valtype) == VECTOR_TYPE)\n     {\n       if (TARGET_64BIT)\n \t{\n@@ -8871,7 +8873,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n      this routine should return zero.  pa_arg_partial_bytes will\n      handle arguments which are split between regs and stack slots if\n      the ABI mandates split arguments.  */\n-  if (! TARGET_64BIT)\n+  if (!TARGET_64BIT)\n     {\n       /* The 32-bit ABI does not split arguments.  */\n       if (cum->words + arg_size > max_arg_words)\n@@ -8906,7 +8908,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t treatment.  */\n       if (arg_size > 1\n \t  || mode == BLKmode\n-\t  || (type && AGGREGATE_TYPE_P (type)))\n+\t  || (type && (AGGREGATE_TYPE_P (type)\n+\t\t       || TREE_CODE (type) == COMPLEX_TYPE\n+\t\t       || TREE_CODE (type) == VECTOR_TYPE)))\n \t{\n \t  /* Double-extended precision (80-bit), quad-precision (128-bit)\n \t     and aggregates including complex numbers are aligned on\n@@ -8960,8 +8964,13 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t     objects.  The data is right-justified and zero-extended\n \t     to 64 bits.  This is opposite to the normal justification\n \t     used on big endian targets and requires special treatment.\n-\t     We now define BLOCK_REG_PADDING to pad these objects.  */\n-\t  if (mode == BLKmode || (type && AGGREGATE_TYPE_P (type)))\n+\t     We now define BLOCK_REG_PADDING to pad these objects.\n+\t     Aggregates, complex and vector types are passed in the same\n+\t     manner as structures.  */\n+\t  if (mode == BLKmode\n+\t      || (type && (AGGREGATE_TYPE_P (type)\n+\t\t\t   || TREE_CODE (type) == COMPLEX_TYPE\n+\t\t\t   || TREE_CODE (type) == VECTOR_TYPE)))\n \t    {\n \t      rtx loc = gen_rtx_EXPR_LIST (VOIDmode,\n \t\t\t\t\t   gen_rtx_REG (DImode, gpr_reg_base),\n@@ -8984,9 +8993,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n        /* If we are doing soft-float with portable runtime, then there\n \t  is no need to worry about FP regs.  */\n        && !TARGET_SOFT_FLOAT\n-       /* The parameter must be some kind of float, else we can just\n+       /* The parameter must be some kind of scalar float, else we just\n \t  pass it in integer registers.  */\n-       && FLOAT_MODE_P (mode)\n+       && GET_MODE_CLASS (mode) == MODE_FLOAT\n        /* The target function must not have a prototype.  */\n        && cum->nargs_prototype <= 0\n        /* libcalls do not need to pass items in both FP and general\n@@ -9002,7 +9011,7 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t  && !TARGET_GAS\n \t  && !cum->incoming\n \t  && cum->indirect\n-\t  && FLOAT_MODE_P (mode)))\n+\t  && GET_MODE_CLASS (mode) == MODE_FLOAT))\n     {\n       retval\n \t= gen_rtx_PARALLEL\n@@ -9025,9 +9034,9 @@ function_arg (CUMULATIVE_ARGS *cum, enum machine_mode mode, tree type,\n \t      && !TARGET_64BIT\n \t      && !TARGET_ELF32\n \t      && cum->indirect)\n-\t  /* If the parameter is not a floating point parameter, then\n-\t     it belongs in GPRs.  */\n-\t  || !FLOAT_MODE_P (mode)\n+\t  /* If the parameter is not a scalar floating-point parameter,\n+\t     then it belongs in GPRs.  */\n+\t  || GET_MODE_CLASS (mode) != MODE_FLOAT\n \t  /* Structure with single SFmode field belongs in GPR.  */\n \t  || (type && AGGREGATE_TYPE_P (type)))\n \tretval = gen_rtx_REG (mode, gpr_reg_base);"}, {"sha": "4bb9d676e7aba9b26ff0483637e046f354ff69eb", "filename": "gcc/config/pa/t-hpux-shlib", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-hpux-shlib?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -1,7 +1,8 @@\n # Build a shared libgcc library.\n SHLIB_EXT = .sl\n-SHLIB_NAME = @shlib_base_name@.sl\n-SHLIB_SONAME = @shlib_base_name@.1\n+SHLIB_NAME = @shlib_base_name@$(SHLIB_EXT)\n+SHLIB_SOVERSION = 1\n+SHLIB_SONAME = @shlib_base_name@.$(SHLIB_SOVERSION)\n SHLIB_OBJS = @shlib_objs@\n SHLIB_DIR = @multilib_dir@\n SHLIB_SLIBDIR_QUAL = @shlib_slibdir_qual@\n@@ -16,7 +17,6 @@ SHLIB_LINK = $(GCC_FOR_TARGET) $(LIBGCC2_CFLAGS) -shared  -nodefaultlibs \\\n \tmv $(SHLIB_DIR)/$(SHLIB_NAME).tmp $(SHLIB_DIR)/$(SHLIB_NAME) && \\\n         $(LN_S) $(SHLIB_NAME) $(SHLIB_DIR)/$(SHLIB_SONAME)\n \n-\n # $(slibdir) double quoted to protect it from expansion while building\n # libgcc.mk.  We want this delayed until actual install time.\n SHLIB_INSTALL = \\"}, {"sha": "fa4688d6994b63e36f94e7296400877e5f40c873", "filename": "gcc/config/pa/t-slibgcc-dwarf-ver", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-slibgcc-dwarf-ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-slibgcc-dwarf-ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-slibgcc-dwarf-ver?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -0,0 +1,3 @@\n+# Set the version number of the shared libgcc library (DWARF2 EH).\n+\n+SHLIB_SOVERSION = 4"}, {"sha": "6aac37cc08fc504880ba07d8d3157f68d06f3498", "filename": "gcc/config/pa/t-slibgcc-elf-ver", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4325ca904b4f1176efeb7a76be7a7955b0422740/gcc%2Fconfig%2Fpa%2Ft-slibgcc-elf-ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4325ca904b4f1176efeb7a76be7a7955b0422740/gcc%2Fconfig%2Fpa%2Ft-slibgcc-elf-ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-slibgcc-elf-ver?ref=4325ca904b4f1176efeb7a76be7a7955b0422740", "patch": "@@ -1,3 +0,0 @@\n-# Bump the version number of the shared libgcc library\n-\n-SHLIB_SOVERSION = 2"}, {"sha": "00140cf204fd643fad6a882ee9e90ada50560971", "filename": "gcc/config/pa/t-slibgcc-sjlj-ver", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-slibgcc-sjlj-ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4720d5ca9cd07db386c295e27d45da736243a15f/gcc%2Fconfig%2Fpa%2Ft-slibgcc-sjlj-ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Ft-slibgcc-sjlj-ver?ref=4720d5ca9cd07db386c295e27d45da736243a15f", "patch": "@@ -0,0 +1,3 @@\n+# Set the version number of the shared libgcc library (SJLJ EH).\n+\n+SHLIB_SOVERSION = 3"}]}