{"sha": "8426b956021a24315114670483f2aa5d230fde5c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyNmI5NTYwMjFhMjQzMTUxMTQ2NzA0ODNmMmFhNWQyMzBmZGU1Yw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-07-18T09:44:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-07-18T09:44:21Z"}, "message": "arm-protos.h (arm_cannot_force_const_mem): Declare.\n\ngcc/\n\t* config/arm/arm-protos.h (arm_cannot_force_const_mem): Declare.\n\t* config/arm/arm.c (TARGET_CANNOT_FORCE_CONST_MEM): Redefine to\n\tarm_cannot_force_const_mem.\n\t(arm_cannot_force_const_mem): New function.\n\t* config/arm/arm.h (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P): New macro.\n\t(LEGITIMATE_CONSTANT_P): Test arm_cannot_force_const_mem instead\n\tof arm_tls_referenced_p.\n\t* config/arm/arm.md (movsi): Split out-of-section constants when\n\tARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P.\n\t* config/arm/vxworks.h (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P): Define.\n\nFrom-SVN: r126718", "tree": {"sha": "f265953e69b78d5f07f6dcd4e973c24c2e324993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f265953e69b78d5f07f6dcd4e973c24c2e324993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8426b956021a24315114670483f2aa5d230fde5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8426b956021a24315114670483f2aa5d230fde5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8426b956021a24315114670483f2aa5d230fde5c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8426b956021a24315114670483f2aa5d230fde5c/comments", "author": null, "committer": null, "parents": [{"sha": "12b36be2c05306f295304061bb199209274cd917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12b36be2c05306f295304061bb199209274cd917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12b36be2c05306f295304061bb199209274cd917"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "6ef674d9ecd95a7f0493927a53b98a2b7151b8c7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -1,3 +1,16 @@\n+2007-07-18  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_cannot_force_const_mem): Declare.\n+\t* config/arm/arm.c (TARGET_CANNOT_FORCE_CONST_MEM): Redefine to\n+\tarm_cannot_force_const_mem.\n+\t(arm_cannot_force_const_mem): New function.\n+\t* config/arm/arm.h (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P): New macro.\n+\t(LEGITIMATE_CONSTANT_P): Test arm_cannot_force_const_mem instead\n+\tof arm_tls_referenced_p.\n+\t* config/arm/arm.md (movsi): Split out-of-section constants when\n+\tARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P.\n+\t* config/arm/vxworks.h (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P): Define.\n+\n 2007-07-18  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/mips/mips.md (clear_cache): Treat the size argument as Pmode."}, {"sha": "98cb5ef2d0c54f25bc402df086121830db634fca", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -71,6 +71,7 @@ extern int vfp3_const_double_rtx (rtx);\n extern enum reg_class coproc_secondary_reload_class (enum machine_mode, rtx,\n \t\t\t\t\t\t     bool);\n extern bool arm_tls_referenced_p (rtx);\n+extern bool arm_cannot_force_const_mem (rtx);\n \n extern int cirrus_memory_offset (rtx);\n extern int arm_coproc_mem_operand (rtx, bool);"}, {"sha": "36fba5b9cf0fe87a2070b6a2e7596924f26c99cd", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -380,7 +380,7 @@ static void arm_output_dwarf_dtprel (FILE *, int, rtx) ATTRIBUTE_UNUSED;\n #endif\n \n #undef TARGET_CANNOT_FORCE_CONST_MEM\n-#define TARGET_CANNOT_FORCE_CONST_MEM arm_tls_referenced_p\n+#define TARGET_CANNOT_FORCE_CONST_MEM arm_cannot_force_const_mem\n \n #ifdef HAVE_AS_TLS\n #undef TARGET_ASM_OUTPUT_DWARF_DTPREL\n@@ -4672,6 +4672,23 @@ arm_tls_referenced_p (rtx x)\n \n   return for_each_rtx (&x, arm_tls_operand_p_1, NULL);\n }\n+\n+/* Implement TARGET_CANNOT_FORCE_CONST_MEM.  */\n+\n+bool\n+arm_cannot_force_const_mem (rtx x)\n+{\n+  rtx base, offset;\n+\n+  if (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P)\n+    {\n+      split_const (x, &base, &offset);\n+      if (GET_CODE (base) == SYMBOL_REF\n+\t  && !offset_within_block_p (base, INTVAL (offset)))\n+\treturn true;\n+    }\n+  return arm_tls_referenced_p (x);\n+}\n \f\n #define REG_OR_SUBREG_REG(X)\t\t\t\t\t\t\\\n   (GET_CODE (X) == REG\t\t\t\t\t\t\t\\"}, {"sha": "b9c6e851f135ca107068746d61bcb4b742687ff0", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -1888,6 +1888,10 @@ typedef struct\n \n #endif /* AOF_ASSEMBLER */\n \n+/* True if SYMBOL + OFFSET constants must refer to something within\n+   SYMBOL's section.  */\n+#define ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P 0\n+\n /* Nonzero if the constant value X is a legitimate general operand.\n    It is given that X satisfies CONSTANT_P or is a CONST_DOUBLE.\n \n@@ -1905,7 +1909,7 @@ typedef struct\n   || flag_pic)\n \n #define LEGITIMATE_CONSTANT_P(X)\t\t\t\\\n-  (!arm_tls_referenced_p (X)\t\t\t\t\\\n+  (!arm_cannot_force_const_mem (X)\t\t\t\\\n    && (TARGET_32BIT ? ARM_LEGITIMATE_CONSTANT_P (X)\t\\\n \t\t    : THUMB_LEGITIMATE_CONSTANT_P (X)))\n "}, {"sha": "661ab044c026124561b541bc411e0c9ac15b3268", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -4649,6 +4649,8 @@\n         (match_operand:SI 1 \"general_operand\" \"\"))]\n   \"TARGET_EITHER\"\n   \"\n+  rtx base, offset, tmp;\n+\n   if (TARGET_32BIT)\n     {\n       /* Everything except mem = const or mem = mem can be done easily.  */\n@@ -4674,6 +4676,19 @@\n         }\n     }\n \n+  if (ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P)\n+    {\n+      split_const (operands[1], &base, &offset);\n+      if (GET_CODE (base) == SYMBOL_REF\n+\t  && !offset_within_block_p (base, INTVAL (offset)))\n+\t{\n+\t  tmp = no_new_pseudos ? operands[0] : gen_reg_rtx (SImode);\n+\t  emit_move_insn (tmp, base);\n+\t  emit_insn (gen_addsi3 (operands[0], tmp, offset));\n+\t  DONE;\n+\t}\n+    }\n+\n   /* Recognize the case where operand[1] is a reference to thread-local\n      data and load its address to a register.  */\n   if (arm_tls_referenced_p (operands[1]))"}, {"sha": "fb6c79b03319196818be2617d67960b323242352", "filename": "gcc/config/arm/vxworks.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8426b956021a24315114670483f2aa5d230fde5c/gcc%2Fconfig%2Farm%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvxworks.h?ref=8426b956021a24315114670483f2aa5d230fde5c", "patch": "@@ -106,3 +106,11 @@ Boston, MA 02110-1301, USA.  */\n    the past before this macro was changed.  */\n #undef DEFAULT_STRUCTURE_SIZE_BOUNDARY\n #define DEFAULT_STRUCTURE_SIZE_BOUNDARY 8\n+\n+/* The kernel loader does not allow relocations to overflow, so we\n+   cannot allow arbitrary relocation addends in kernel modules or RTP\n+   executables.  Also, the dynamic loader uses the resolved relocation\n+   value to distinguish references to the text and data segments, so we\n+   cannot allow arbitrary offsets for shared libraries either.  */\n+#undef ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P\n+#define ARM_OFFSETS_MUST_BE_WITHIN_SECTIONS_P 1"}]}