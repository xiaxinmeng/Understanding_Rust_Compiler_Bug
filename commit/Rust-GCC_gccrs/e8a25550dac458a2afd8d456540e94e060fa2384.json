{"sha": "e8a25550dac458a2afd8d456540e94e060fa2384", "node_id": "C_kwDOANBUbNoAKGU4YTI1NTUwZGFjNDU4YTJhZmQ4ZDQ1NjU0MGU5NGUwNjBmYTIzODQ", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-24T14:18:56Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2022-05-24T14:18:56Z"}, "message": "Optimize double word negation of zero extended values on x86.\n\nIt's not uncommon for GCC to convert between a (zero or one) Boolean\nvalue and a (zero or all ones) mask value, possibly of a wider type,\nusing negation.\n\nCurrently on x86_64, the following simple test case:\n__int128 foo(unsigned long x) { return -(__int128)x; }\n\ncompiles with -O2 to:\n\n        movq    %rdi, %rax\n        xorl    %edx, %edx\n        negq    %rax\n        adcq    $0, %rdx\n        negq    %rdx\n        ret\n\nwith this patch, which adds an additional peephole2 to i386.md,\nwe instead generate the improved:\n\n        movq    %rdi, %rax\n        negq    %rax\n        sbbq    %rdx, %rdx\n        ret\n\n[and likewise for the (DImode) long long version using -m32.]\nA peephole2 is appropriate as the double word negation and the\noperation providing the xor are typically only split after combine.\n\nIn fact, the new peephole2 sequence:\n;; Convert:\n;;   xorl %edx, %edx\n;;   negl %eax\n;;   adcl $0, %edx\n;;   negl %edx\n;; to:\n;;   negl %eax\n;;   sbbl %edx, %edx    // *x86_mov<mode>cc_0_m1\n\nis nearly identical to (and placed immediately after) the existing:\n;; Convert:\n;;   mov %esi, %edx\n;;   negl %eax\n;;   adcl $0, %edx\n;;   negl %edx\n;; to:\n;;   xorl %edx, %edx\n;;   negl %eax\n;;   sbbl %esi, %edx\n\nOne potential objection/concern is that \"sbb? %reg,%reg\" may possibly be\nincorrectly perceived as a false register dependency on older hardware,\nmuch like \"xor? %reg,%reg\" may be perceived as a false dependency on\nreally old hardware.  This doesn't currently appear to be a concern\nfor the i386 backend's *x86_move<mode>cc_0_m1 as shown by the following\ntest code:\n\nint bar(unsigned int x, unsigned int y) {\n  return x > y ? -1 : 0;\n}\n\nwhich currently generates a \"naked\" sbb:\n        cmp     esi, edi\n        sbb     eax, eax\n        ret\n\nIf anyone does potentially encounter a stall, it would easy to add\na splitter or peephole2 controlled by a tuning flag to insert an additional\nxor to break the false dependency chain (when not optimizing for size),\nbut I don't believe this is required on recent microarchitectures.\n\n2022-05-24 Roger Sayle  <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\t* config/i386/i386.md (peephole2): Convert xor;neg;adc;neg,\n\ti.e. a double word negation of a zero extended operand, to\n\tneg;sbb.\n\ngcc/testsuite/ChangeLog\n\t* gcc.target/i386/neg-zext-1.c: New test case for -m32.\n\t* gcc.target/i386/neg-zext-2.c: New test case for -m64.", "tree": {"sha": "db87c6ca8900ef43e803cf1922166474602b6115", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db87c6ca8900ef43e803cf1922166474602b6115"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e8a25550dac458a2afd8d456540e94e060fa2384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a25550dac458a2afd8d456540e94e060fa2384", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8a25550dac458a2afd8d456540e94e060fa2384", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8a25550dac458a2afd8d456540e94e060fa2384/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "793f847ba7dbe7638f1c27178868edbefd3a8108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793f847ba7dbe7638f1c27178868edbefd3a8108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793f847ba7dbe7638f1c27178868edbefd3a8108"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "b9b8f78dc897a9fa3940ba232334d6f383496946", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e8a25550dac458a2afd8d456540e94e060fa2384", "patch": "@@ -11040,6 +11040,46 @@\n      (clobber (reg:CC FLAGS_REG))])]\n   \"ix86_expand_clear (operands[0]);\")\n \n+;; Convert:\n+;;   xorl %edx, %edx\n+;;   negl %eax\n+;;   adcl $0, %edx\n+;;   negl %edx\n+;; to:\n+;;   negl %eax\n+;;   sbbl %edx, %edx\t// *x86_mov<mode>cc_0_m1\n+\n+(define_peephole2\n+  [(parallel\n+    [(set (match_operand:SWI48 0 \"general_reg_operand\") (const_int 0))\n+     (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_operand:SWI48 1 \"general_reg_operand\") (const_int 0)))\n+     (set (match_dup 1) (neg:SWI48 (match_dup 1)))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (plus:SWI48 (plus:SWI48\n+\t\t\t(ltu:SWI48 (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t(match_dup 0))\n+\t\t      (const_int 0)))\n+     (clobber (reg:CC FLAGS_REG))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (neg:SWI48 (match_dup 0)))\n+     (clobber (reg:CC FLAGS_REG))])]\n+  \"REGNO (operands[0]) != REGNO (operands[1])\"\n+  [(parallel\n+    [(set (reg:CCC FLAGS_REG)\n+\t  (ne:CCC (match_dup 1) (const_int 0)))\n+     (set (match_dup 1) (neg:SWI48 (match_dup 1)))])\n+   (parallel\n+    [(set (match_dup 0)\n+\t  (if_then_else:SWI48 (ltu:SWI48 (reg:CC FLAGS_REG) (const_int 0))\n+\t\t\t      (const_int -1)\n+\t\t\t      (const_int 0)))\n+     (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"*neg<mode>_1\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m\")\n \t(neg:SWI (match_operand:SWI 1 \"nonimmediate_operand\" \"0\")))"}, {"sha": "ec91fb1bc0f3d671a88604f782af732b07579225", "filename": "gcc/testsuite/gcc.target/i386/neg-zext-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-1.c?ref=e8a25550dac458a2afd8d456540e94e060fa2384", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target ia32 } } */\n+/* { dg-options \"-O2\" } */\n+\n+long long foo(unsigned int x) { return -(long long)x; }\n+\n+/* { dg-final { scan-assembler \"sbb\" } } */\n+/* { dg-final { scan-assembler-not \"adc\" } } */"}, {"sha": "a6ed077f60ccaa4f169c91810c45ef0a47efba1e", "filename": "gcc/testsuite/gcc.target/i386/neg-zext-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e8a25550dac458a2afd8d456540e94e060fa2384/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fneg-zext-2.c?ref=e8a25550dac458a2afd8d456540e94e060fa2384", "patch": "@@ -0,0 +1,7 @@\n+/* { dg-do compile { target int128 } } */\n+/* { dg-options \"-O2\" } */\n+\n+__int128 fool(unsigned long x) { return -(__int128)x; }\n+\n+/* { dg-final { scan-assembler \"sbb\" } } */\n+/* { dg-final { scan-assembler-not \"adc\" } } */"}]}