{"sha": "af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWY5MGM4YzlhZTNiNzk1ZjI4Y2FiZDlmMTFlOWY3YzlhMWNjY2NiNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2009-07-18T22:58:10Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2009-07-18T22:58:10Z"}, "message": "re PR libstdc++/40712 (locale(const locale&, const char*, locale::category) can create broken locale)\n\n2009-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/40712\n\t* config/locale/gnu/numeric_members.cc (numpunct<>::\n\t_M_initialize_numpunct): Dynamically allocate _M_data->_M_grouping\n\tand copy the langinfo data into it.\n\t(numpunct<>::~numpunct): Free the allocated memory.\n\t* config/locale/gnu/monetary_members.cc (moneypunct<>::\n\t_M_initialize_moneypunct): Dynamically allocate _M_data->_M_grouping,\n\t_M_data->_M_positive_sign, _M_data->_M_negative_sign,\n\t_M_data->_M_curr_symbol.\n\t(moneypunct<>::~moneypunct): Free the allocated memory.\n\t* testsuite/22_locale/moneypunct/40712.cc: New.\n\n\t* include/bits/locale_facets.tcc (__numpunct_cache<>::_M_cache):\n\tDo not leak memory if new throws.\n\t* include/bits/locale_facets_nonio.tcc\n\t(__moneypunct_cache<>::_M_cache): Likewise.\n\nFrom-SVN: r149782", "tree": {"sha": "7563faaf990f548d8b0ebbb3e082086e798b7386", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7563faaf990f548d8b0ebbb3e082086e798b7386"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/comments", "author": null, "committer": null, "parents": [{"sha": "827f4079406b72fce7b49a29abe60ecb801462d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/827f4079406b72fce7b49a29abe60ecb801462d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/827f4079406b72fce7b49a29abe60ecb801462d5"}], "stats": {"total": 687, "additions": 503, "deletions": 184}, "files": [{"sha": "c769be5a2839a0a50aad9a7677001cbff906b8b4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -1,3 +1,22 @@\n+2009-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/40712\n+\t* config/locale/gnu/numeric_members.cc (numpunct<>::\n+\t_M_initialize_numpunct): Dynamically allocate _M_data->_M_grouping\n+\tand copy the langinfo data into it.\n+\t(numpunct<>::~numpunct): Free the allocated memory.\n+\t* config/locale/gnu/monetary_members.cc (moneypunct<>::\n+\t_M_initialize_moneypunct): Dynamically allocate _M_data->_M_grouping,\n+\t_M_data->_M_positive_sign, _M_data->_M_negative_sign,\n+\t_M_data->_M_curr_symbol.\n+\t(moneypunct<>::~moneypunct): Free the allocated memory.\n+\t* testsuite/22_locale/moneypunct/40712.cc: New.\n+\n+\t* include/bits/locale_facets.tcc (__numpunct_cache<>::_M_cache):\n+\tDo not leak memory if new throws.\n+\t* include/bits/locale_facets_nonio.tcc\n+\t(__moneypunct_cache<>::_M_cache): Likewise.\n+\n 2009-07-17  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR other/40784"}, {"sha": "02e48240ba9e6090700192aa661429ead47966a1", "filename": "libstdc++-v3/config/locale/gnu/monetary_members.cc", "status": "modified", "additions": 300, "deletions": 121, "changes": 421, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmonetary_members.cc?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -236,23 +236,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n-\n-\t  // Check for NULL, which implies no grouping.\n-\t  if (_M_data->_M_thousands_sep == '\\0')\n-\t    {\n-\t      // Like in \"C\" locale.\n-\t      _M_data->_M_grouping = \"\";\n-\t      _M_data->_M_grouping_size = 0;\n-\t      _M_data->_M_use_grouping = false;\n-\t      _M_data->_M_thousands_sep = ',';\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\t    }\n \n \t  // Check for NULL, which implies no fractional digits.\n \t  if (_M_data->_M_decimal_point == '\\0')\n@@ -265,25 +248,104 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n \t\t\t\t\t\t\t__cloc));\n \n-\t  char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_data->_M_negative_sign = \"()\";\n-\t  else\n-\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN, \n-\t\t\t\t\t\t\t__cloc);\n-\t  _M_data->_M_negative_sign_size = strlen(_M_data->_M_negative_sign);\n-\n+\t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  // _Intl == true\n-\t  _M_data->_M_curr_symbol = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n-\t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n+\t  const char* __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n+\n+\t  char* __group = 0;\n+\t  char* __ps = 0;\n+\t  char* __ns = 0;\n+\t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\t  \n+\t  __try\n+\t    {\n+\t      size_t __len;\n+\t      \n+\t      // Check for NULL, which implies no grouping.\n+\t      if (_M_data->_M_thousands_sep == '\\0')\n+\t\t{\n+\t\t  // Like in \"C\" locale.\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_grouping_size = 0;\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t  _M_data->_M_thousands_sep = ',';\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cgroup);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __group = new char[__len + 1];\n+\t\t      memcpy(__group, __cgroup, __len + 1);\n+\t\t      _M_data->_M_grouping = __group;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      _M_data->_M_grouping = \"\";\n+\t\t      _M_data->_M_use_grouping = false;\n+\t\t    }\n+\t\t  _M_data->_M_grouping_size = __len;\n+\t\t}\n+\n+\t      __len = strlen(__cpossign);\n+\t      if (__len)\n+\t\t{\n+\t\t  __ps = new char[__len + 1];\n+\t\t  memcpy(__ps, __cpossign, __len + 1);\n+\t\t  _M_data->_M_positive_sign = __ps;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_positive_sign = \"\";\n+\t      _M_data->_M_positive_sign_size = __len;\n+\n+\t      if (!__nposn)\n+\t\t{\n+\t\t  _M_data->_M_negative_sign = \"()\";\n+\t\t  _M_data->_M_negative_sign_size = 2;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cnegsign);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __ns = new char[__len + 1];\n+\t\t      memcpy(__ns, __cnegsign, __len + 1);\n+\t\t      _M_data->_M_negative_sign = __ns;\n+\t\t    }\n+\t\t  else\n+\t\t    _M_data->_M_negative_sign = \"\";\n+\t\t  _M_data->_M_negative_sign_size = __len;\n+\t\t}\n+\n+\t      __len = strlen(__ccurr);\n+\t      if (__len)\n+\t\t{\n+\t\t  char* __curr = new char[__len + 1];\n+\t\t  memcpy(__curr, __ccurr, __len + 1);\n+\t\t  _M_data->_M_curr_symbol = __curr;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_curr_symbol = \"\";\n+\t      _M_data->_M_curr_symbol_size = __len;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      delete _M_data;\n+\t      _M_data = 0;\n+\t      delete [] __group;\n+\t      delete [] __ps;\n+\t      delete [] __ns;\n+\t    }\n+\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace,\n \t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace,\n \t\t\t\t\t\t\t__nposn);\n \t}\n     }\n@@ -324,23 +386,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t\t\t\t\t\t\t__cloc));\n \t  _M_data->_M_thousands_sep = *(__nl_langinfo_l(__MON_THOUSANDS_SEP, \n \t\t\t\t\t\t\t__cloc));\n-\t  _M_data->_M_positive_sign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n-\t  _M_data->_M_positive_sign_size = strlen(_M_data->_M_positive_sign);\n-\n-\t  // Check for NULL, which implies no grouping.\n-\t  if (_M_data->_M_thousands_sep == '\\0')\n-\t    {\n-\t      // Like in \"C\" locale.\n-\t      _M_data->_M_grouping = \"\";\n-\t      _M_data->_M_grouping_size = 0;\n-\t      _M_data->_M_use_grouping = false;\n-\t      _M_data->_M_thousands_sep = ',';\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\t    }\n \n \t  // Check for NULL, which implies no fractional digits.\n \t  if (_M_data->_M_decimal_point == '\\0')\n@@ -353,36 +398,137 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS,\n \t\t\t\t\t\t\t__cloc));\n \n-\t  char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n-\t  if (!__nposn)\n-\t    _M_data->_M_negative_sign = \"()\";\n-\t  else\n-\t    _M_data->_M_negative_sign = __nl_langinfo_l(__NEGATIVE_SIGN,\n-\t\t\t\t\t\t\t__cloc);\n-\t  _M_data->_M_negative_sign_size = strlen(_M_data->_M_negative_sign);\n-\n+\t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n+\t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n+\t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  // _Intl == false\n-\t  _M_data->_M_curr_symbol = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n-\t  _M_data->_M_curr_symbol_size = strlen(_M_data->_M_curr_symbol);\n+\t  const char* __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n+\n+\t  char* __group = 0;\n+\t  char* __ps = 0;\n+\t  char* __ns = 0;\n+\t  const char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n+\t  __try\n+\t    {\n+\t      size_t __len;\n+\n+\t      // Check for NULL, which implies no grouping.\n+\t      if (_M_data->_M_thousands_sep == '\\0')\n+\t\t{\n+\t\t  // Like in \"C\" locale.\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_grouping_size = 0;\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t  _M_data->_M_thousands_sep = ',';\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cgroup);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __group = new char[__len + 1];\n+\t\t      memcpy(__group, __cgroup, __len + 1);\n+\t\t      _M_data->_M_grouping = __group;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      _M_data->_M_grouping = \"\";\n+\t\t      _M_data->_M_use_grouping = false;\n+\t\t    }\n+\t\t  _M_data->_M_grouping_size = __len;\n+\t\t}\n+\n+\t      __len = strlen(__cpossign);\n+\t      if (__len)\n+\t\t{\n+\t\t  __ps = new char[__len + 1];\n+\t\t  memcpy(__ps, __cpossign, __len + 1);\n+\t\t  _M_data->_M_positive_sign = __ps;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_positive_sign = \"\";\n+\t      _M_data->_M_positive_sign_size = __len;\n+\n+\t      if (!__nposn)\n+\t\t{\n+\t\t  _M_data->_M_negative_sign = \"()\";\n+\t\t  _M_data->_M_negative_sign_size = 2;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cnegsign);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __ns = new char[__len + 1];\n+\t\t      memcpy(__ns, __cnegsign, __len + 1);\n+\t\t      _M_data->_M_negative_sign = __ns;\n+\t\t    }\n+\t\t  else\n+\t\t    _M_data->_M_negative_sign = \"\";\n+\t\t  _M_data->_M_negative_sign_size = __len;\n+\t\t}\n+\n+\t      __len = strlen(__ccurr);\n+\t      if (__len)\n+\t\t{\n+\t\t  char* __curr = new char[__len + 1];\n+\t\t  memcpy(__curr, __ccurr, __len + 1);\n+\t\t  _M_data->_M_curr_symbol = __curr;\n+\t\t}\n+\t      else\n+\t\t_M_data->_M_curr_symbol = \"\";\n+\t      _M_data->_M_curr_symbol_size = __len;\n+\t    }\n+\t  __catch(...)\n+\t    {\n+\t      delete _M_data;\n+\t      _M_data = 0;\n+\t      delete [] __group;\n+\t      delete [] __ps;\n+\t      delete [] __ns;\n+\t    }\n+\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace,\n \t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace,\n \t\t\t\t\t\t\t__nposn);\n \t}\n     }\n \n   template<> \n     moneypunct<char, true>::~moneypunct()\n-    { delete _M_data; }\n+    {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n+      if (_M_data->_M_positive_sign_size)\n+\tdelete [] _M_data->_M_positive_sign;\n+      if (_M_data->_M_negative_sign_size\n+          && strcmp(_M_data->_M_negative_sign, \"()\") != 0)\n+\tdelete [] _M_data->_M_negative_sign;\n+      if (_M_data->_M_curr_symbol_size)\n+\tdelete [] _M_data->_M_curr_symbol;\n+      delete _M_data;\n+    }\n \n   template<> \n     moneypunct<char, false>::~moneypunct()\n-    { delete _M_data; }\n+    {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n+      if (_M_data->_M_positive_sign_size)\n+\tdelete [] _M_data->_M_positive_sign;\n+      if (_M_data->_M_negative_sign_size\n+          && strcmp(_M_data->_M_negative_sign, \"()\") != 0)\n+\tdelete [] _M_data->_M_negative_sign;\n+      if (_M_data->_M_curr_symbol_size)\n+\tdelete [] _M_data->_M_curr_symbol;\n+      delete _M_data;\n+    }\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n@@ -441,21 +587,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __u.__s = __nl_langinfo_l(_NL_MONETARY_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = __u.__w;\n \n-\t  // Check for NULL, which implies no grouping.\n-\t  if (_M_data->_M_thousands_sep == L'\\0')\n-\t    {\n-\t      // Like in \"C\" locale.\n-\t      _M_data->_M_grouping = \"\";\n-\t      _M_data->_M_grouping_size = 0;\n-\t      _M_data->_M_use_grouping = false;\n-\t      _M_data->_M_thousands_sep = L',';\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\t    }\n-\n \t  // Check for NULL, which implies no fractional digits.\n \t  if (_M_data->_M_decimal_point == L'\\0')\n \t    {\n@@ -467,52 +598,81 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__INT_FRAC_DIGITS, \n \t\t\t\t\t\t\t__cloc));\n \n+\t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__INT_CURR_SYMBOL, __cloc);\n \n+\t  char* __group = 0;\n \t  wchar_t* __wcs_ps = 0;\n \t  wchar_t* __wcs_ns = 0;\n \t  const char __nposn = *(__nl_langinfo_l(__INT_N_SIGN_POSN, __cloc));\n \t  __try\n \t    {\n+\t      size_t __len;\n+\n+\t      // Check for NULL, which implies no grouping.\n+\t      if (_M_data->_M_thousands_sep == L'\\0')\n+\t\t{\n+\t\t  // Like in \"C\" locale.\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_grouping_size = 0;\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t  _M_data->_M_thousands_sep = L',';\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cgroup);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __group = new char[__len + 1];\n+\t\t      memcpy(__group, __cgroup, __len + 1);\n+\t\t      _M_data->_M_grouping = __group;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      _M_data->_M_grouping = \"\";\n+\t\t      _M_data->_M_use_grouping = false;\n+\t\t    }\n+\t\t  _M_data->_M_grouping_size = __len;\n+\t\t}\n+\n \t      mbstate_t __state;\n-\t      size_t __len = strlen(__cpossign);\n+\t      __len = strlen(__cpossign);\n \t      if (__len)\n \t\t{\n-\t\t  ++__len;\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  __wcs_ps = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len, &__state);\n+\t\t  __wcs_ps = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len + 1, &__state);\n \t\t  _M_data->_M_positive_sign = __wcs_ps;\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-\t      _M_data->_M_positive_sign_size = wcslen(_M_data->_M_positive_sign);\n+\t      _M_data->_M_positive_sign_size = \n+\t\twcslen(_M_data->_M_positive_sign);\n \t      \n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n \t\t_M_data->_M_negative_sign = L\"()\";\n \t      else if (__len)\n-\t\t{ \n-\t\t  ++__len;\n+\t\t{\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  __wcs_ns = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len, &__state);\n+\t\t  __wcs_ns = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len + 1, &__state);\n \t\t  _M_data->_M_negative_sign = __wcs_ns;\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-\t      _M_data->_M_negative_sign_size = wcslen(_M_data->_M_negative_sign);\n+\t      _M_data->_M_negative_sign_size = \n+\t\twcslen(_M_data->_M_negative_sign);\n \t      \n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n \t      if (__len)\n \t\t{\n-\t\t  ++__len;\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  wchar_t* __wcs = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t\t  wchar_t* __wcs = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs, &__ccurr, __len + 1, &__state);\n \t\t  _M_data->_M_curr_symbol = __wcs;\n \t\t}\n \t      else\n@@ -523,6 +683,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    {\n \t      delete _M_data;\n \t      _M_data = 0;\n+\t      delete [] __group;\n \t      delete [] __wcs_ps;\n \t      delete [] __wcs_ns;\t      \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -537,11 +698,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  char __pprecedes = *(__nl_langinfo_l(__INT_P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__INT_P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__INT_P_SIGN_POSN, __cloc));\n-\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace,\n \t\t\t\t\t\t\t__pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__INT_N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__INT_N_SEP_BY_SPACE, __cloc));\n-\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace,\n \t\t\t\t\t\t\t__nposn);\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -609,21 +770,6 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  __u.__s = __nl_langinfo_l(_NL_MONETARY_THOUSANDS_SEP_WC, __cloc);\n \t  _M_data->_M_thousands_sep = __u.__w;\n \n-\t  // Check for NULL, which implies no grouping.\n-\t  if (_M_data->_M_thousands_sep == L'\\0')\n-\t    {\n-\t      // Like in \"C\" locale.\n-\t      _M_data->_M_grouping = \"\";\n-\t      _M_data->_M_grouping_size = 0;\n-\t      _M_data->_M_use_grouping = false;\n-\t      _M_data->_M_thousands_sep = L',';\n-\t    }\n-\t  else\n-\t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(__MON_GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n-\t    }\n-\n \t  // Check for NULL, which implies no fractional digits.\n \t  if (_M_data->_M_decimal_point == L'\\0')\n \t    {\n@@ -635,53 +781,81 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    _M_data->_M_frac_digits = *(__nl_langinfo_l(__FRAC_DIGITS,\n \t\t\t\t\t\t\t__cloc));\n \n+\t  const char* __cgroup = __nl_langinfo_l(__MON_GROUPING, __cloc);\n \t  const char* __cpossign = __nl_langinfo_l(__POSITIVE_SIGN, __cloc);\n \t  const char* __cnegsign = __nl_langinfo_l(__NEGATIVE_SIGN, __cloc);\n \t  const char* __ccurr = __nl_langinfo_l(__CURRENCY_SYMBOL, __cloc);\n \n+\t  char* __group = 0;\n \t  wchar_t* __wcs_ps = 0;\n \t  wchar_t* __wcs_ns = 0;\n \t  const char __nposn = *(__nl_langinfo_l(__N_SIGN_POSN, __cloc));\n \t  __try\n             {\n+\t      size_t __len;\n+\n+\t      // Check for NULL, which implies no grouping.\n+\t      if (_M_data->_M_thousands_sep == L'\\0')\n+\t\t{\n+\t\t  // Like in \"C\" locale.\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_grouping_size = 0;\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t  _M_data->_M_thousands_sep = L',';\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  __len = strlen(__cgroup);\n+\t\t  if (__len)\n+\t\t    {\n+\t\t      __group = new char[__len + 1];\n+\t\t      memcpy(__group, __cgroup, __len + 1);\n+\t\t      _M_data->_M_grouping = __group;\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      _M_data->_M_grouping = \"\";\n+\t\t      _M_data->_M_use_grouping = false;\n+\t\t    }\n+\t\t  _M_data->_M_grouping_size = __len;\n+\t\t}\n+\n               mbstate_t __state;\n-              size_t __len;\n               __len = strlen(__cpossign);\n               if (__len)\n                 {\n-\t\t  ++__len;\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  __wcs_ps = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len, &__state);\n+\t\t  __wcs_ps = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs_ps, &__cpossign, __len + 1, &__state);\n \t\t  _M_data->_M_positive_sign = __wcs_ps;\n \t\t}\n \t      else\n \t\t_M_data->_M_positive_sign = L\"\";\n-              _M_data->_M_positive_sign_size = wcslen(_M_data->_M_positive_sign);\n-\t      \n+              _M_data->_M_positive_sign_size = \n+\t\twcslen(_M_data->_M_positive_sign);\n+\n \t      __len = strlen(__cnegsign);\n \t      if (!__nposn)\n \t\t_M_data->_M_negative_sign = L\"()\";\n \t      else if (__len)\n-\t\t{ \n-\t\t  ++__len;\n+\t\t{\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  __wcs_ns = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len, &__state);\n+\t\t  __wcs_ns = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs_ns, &__cnegsign, __len + 1, &__state);\n \t\t  _M_data->_M_negative_sign = __wcs_ns;\n \t\t}\n \t      else\n \t\t_M_data->_M_negative_sign = L\"\";\n-              _M_data->_M_negative_sign_size = wcslen(_M_data->_M_negative_sign);\n+              _M_data->_M_negative_sign_size = \n+\t\twcslen(_M_data->_M_negative_sign);\n \n \t      // _Intl == true.\n \t      __len = strlen(__ccurr);\n \t      if (__len)\n \t\t{\n-\t\t  ++__len;\n \t\t  memset(&__state, 0, sizeof(mbstate_t));\n-\t\t  wchar_t* __wcs = new wchar_t[__len];\n-\t\t  mbsrtowcs(__wcs, &__ccurr, __len, &__state);\n+\t\t  wchar_t* __wcs = new wchar_t[__len + 1];\n+\t\t  mbsrtowcs(__wcs, &__ccurr, __len + 1, &__state);\n \t\t  _M_data->_M_curr_symbol = __wcs;\n \t\t}\n \t      else\n@@ -692,6 +866,7 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    {\n \t      delete _M_data;\n               _M_data = 0;\n+\t      delete [] __group;\n \t      delete [] __wcs_ps;\n \t      delete [] __wcs_ns;\t      \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -706,11 +881,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t  char __pprecedes = *(__nl_langinfo_l(__P_CS_PRECEDES, __cloc));\n \t  char __pspace = *(__nl_langinfo_l(__P_SEP_BY_SPACE, __cloc));\n \t  char __pposn = *(__nl_langinfo_l(__P_SIGN_POSN, __cloc));\n-\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace, \n+\t  _M_data->_M_pos_format = _S_construct_pattern(__pprecedes, __pspace,\n \t                                                __pposn);\n \t  char __nprecedes = *(__nl_langinfo_l(__N_CS_PRECEDES, __cloc));\n \t  char __nspace = *(__nl_langinfo_l(__N_SEP_BY_SPACE, __cloc));\n-\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace, \n+\t  _M_data->_M_neg_format = _S_construct_pattern(__nprecedes, __nspace,\n \t                                                __nposn);\n \n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n@@ -725,6 +900,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<> \n     moneypunct<wchar_t, true>::~moneypunct()\n     {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n       if (_M_data->_M_positive_sign_size)\n \tdelete [] _M_data->_M_positive_sign;\n       if (_M_data->_M_negative_sign_size\n@@ -738,6 +915,8 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n   template<> \n     moneypunct<wchar_t, false>::~moneypunct()\n     {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n       if (_M_data->_M_positive_sign_size)\n \tdelete [] _M_data->_M_positive_sign;\n       if (_M_data->_M_negative_sign_size"}, {"sha": "637cd59b7115e1702fb740aa2d90744fafc06a4d", "filename": "libstdc++-v3/config/locale/gnu/numeric_members.cc", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fnumeric_members.cc?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -76,8 +76,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  else\n \t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t      const char* __src = __nl_langinfo_l(GROUPING, __cloc);\n+\t      const size_t __len = strlen(__src);\n+\t      if (__len)\n+\t\t{\n+\t\t  __try\n+\t\t    {\n+\t\t      char* __dst = new char[__len + 1];\n+\t\t      memcpy(__dst, __src, __len + 1);\n+\t\t      _M_data->_M_grouping = __dst;\n+\t\t    }\n+\t\t  __catch(...)\n+\t\t    {\n+\t\t      delete _M_data;\n+\t\t      _M_data = 0;\n+\t\t      __throw_exception_again;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t}\n+\t      _M_data->_M_grouping_size = __len;\n \t    }\n \t}\n \n@@ -92,7 +113,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n  \n   template<> \n     numpunct<char>::~numpunct()\n-    { delete _M_data; }\n+    {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n+      delete _M_data;\n+    }\n    \n #ifdef _GLIBCXX_USE_WCHAR_T\n   template<> \n@@ -143,8 +168,29 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \t    }\n \t  else\n \t    {\n-\t      _M_data->_M_grouping = __nl_langinfo_l(GROUPING, __cloc);\n-\t      _M_data->_M_grouping_size = strlen(_M_data->_M_grouping);\n+\t      const char* __src = __nl_langinfo_l(GROUPING, __cloc);\n+\t      const size_t __len = strlen(__src);\n+\t      if (__len)\n+\t\t{\n+\t\t  __try\n+\t\t    {\n+\t\t      char* __dst = new char[__len + 1];\n+\t\t      memcpy(__dst, __src, __len + 1);\n+\t\t      _M_data->_M_grouping = __dst;\n+\t\t    }\n+\t\t  __catch(...)\n+\t\t    {\n+\t\t      delete _M_data;\n+\t\t      _M_data = 0;\n+\t\t      __throw_exception_again;\n+\t\t    }\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  _M_data->_M_grouping = \"\";\n+\t\t  _M_data->_M_use_grouping = false;\n+\t\t}\n+\t      _M_data->_M_grouping_size = __len;\n \t    }\n \t}\n \n@@ -159,7 +205,11 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n   template<> \n     numpunct<wchar_t>::~numpunct()\n-    { delete _M_data; }\n+    {\n+      if (_M_data->_M_grouping_size)\n+\tdelete [] _M_data->_M_grouping;\n+      delete _M_data;\n+    }\n  #endif\n \n _GLIBCXX_END_NAMESPACE"}, {"sha": "1608e2c42daec3a2084f2256855f61ba550b29f1", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -81,33 +81,48 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n \n       const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);\n \n-      _M_grouping_size = __np.grouping().size();\n-      char* __grouping = new char[_M_grouping_size];\n-      __np.grouping().copy(__grouping, _M_grouping_size);\n-      _M_grouping = __grouping;\n-      _M_use_grouping = (_M_grouping_size\n-\t\t\t && static_cast<signed char>(_M_grouping[0]) > 0\n-\t\t\t && (_M_grouping[0]\n-\t\t\t     != __gnu_cxx::__numeric_traits<char>::__max));\n-\n-      _M_truename_size = __np.truename().size();\n-      _CharT* __truename = new _CharT[_M_truename_size];\n-      __np.truename().copy(__truename, _M_truename_size);\n-      _M_truename = __truename;\n-\n-      _M_falsename_size = __np.falsename().size();\n-      _CharT* __falsename = new _CharT[_M_falsename_size];\n-      __np.falsename().copy(__falsename, _M_falsename_size);\n-      _M_falsename = __falsename;\n-\n-      _M_decimal_point = __np.decimal_point();\n-      _M_thousands_sep = __np.thousands_sep();\n-\n-      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n-      __ct.widen(__num_base::_S_atoms_out,\n-\t\t __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);\n-      __ct.widen(__num_base::_S_atoms_in,\n-\t\t __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);\n+      char* __grouping = 0;\n+      _CharT* __truename = 0;\n+      _CharT* __falsename = 0;\n+      __try\n+\t{\n+\t  _M_grouping_size = __np.grouping().size();\n+\t  __grouping = new char[_M_grouping_size];\n+\t  __np.grouping().copy(__grouping, _M_grouping_size);\n+\t  _M_grouping = __grouping;\n+\t  _M_use_grouping = (_M_grouping_size\n+\t\t\t     && static_cast<signed char>(_M_grouping[0]) > 0\n+\t\t\t     && (_M_grouping[0]\n+\t\t\t\t != __gnu_cxx::__numeric_traits<char>::__max));\n+\n+\t  _M_truename_size = __np.truename().size();\n+\t  __truename = new _CharT[_M_truename_size];\n+\t  __np.truename().copy(__truename, _M_truename_size);\n+\t  _M_truename = __truename;\n+\n+\t  _M_falsename_size = __np.falsename().size();\n+\t  __falsename = new _CharT[_M_falsename_size];\n+\t  __np.falsename().copy(__falsename, _M_falsename_size);\n+\t  _M_falsename = __falsename;\n+\n+\t  _M_decimal_point = __np.decimal_point();\n+\t  _M_thousands_sep = __np.thousands_sep();\n+\n+\t  const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n+\t  __ct.widen(__num_base::_S_atoms_out,\n+\t\t     __num_base::_S_atoms_out\n+\t\t     + __num_base::_S_oend, _M_atoms_out);\n+\t  __ct.widen(__num_base::_S_atoms_in,\n+\t\t     __num_base::_S_atoms_in\n+\t\t     + __num_base::_S_iend, _M_atoms_in);\n+\t}\n+      __catch(...)\n+\t{\n+\t  delete [] __grouping;\n+\t  delete [] __truename;\n+\t  delete [] __falsename;\n+\t  __throw_exception_again;\n+\t}\n     }\n \n   // Used by both numeric and monetary facets."}, {"sha": "96feeafc759e7031e2660e95ed192317d036751e", "filename": "libstdc++-v3/include/bits/locale_facets_nonio.tcc", "status": "modified", "additions": 45, "deletions": 30, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets_nonio.tcc?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -71,40 +71,55 @@ _GLIBCXX_BEGIN_NAMESPACE(std)\n       const moneypunct<_CharT, _Intl>& __mp =\n \tuse_facet<moneypunct<_CharT, _Intl> >(__loc);\n \n-      _M_grouping_size = __mp.grouping().size();\n-      char* __grouping = new char[_M_grouping_size];\n-      __mp.grouping().copy(__grouping, _M_grouping_size);\n-      _M_grouping = __grouping;\n-      _M_use_grouping = (_M_grouping_size\n-\t\t\t && static_cast<signed char>(_M_grouping[0]) > 0\n-\t\t\t && (_M_grouping[0]\n-\t\t\t     != __gnu_cxx::__numeric_traits<char>::__max));\n-\n       _M_decimal_point = __mp.decimal_point();\n       _M_thousands_sep = __mp.thousands_sep();\n       _M_frac_digits = __mp.frac_digits();\n-      \n-      _M_curr_symbol_size = __mp.curr_symbol().size();\n-      _CharT* __curr_symbol = new _CharT[_M_curr_symbol_size];\n-      __mp.curr_symbol().copy(__curr_symbol, _M_curr_symbol_size);\n-      _M_curr_symbol = __curr_symbol;\n-      \n-      _M_positive_sign_size = __mp.positive_sign().size();\n-      _CharT* __positive_sign = new _CharT[_M_positive_sign_size];\n-      __mp.positive_sign().copy(__positive_sign, _M_positive_sign_size);\n-      _M_positive_sign = __positive_sign;\n-\n-      _M_negative_sign_size = __mp.negative_sign().size();\n-      _CharT* __negative_sign = new _CharT[_M_negative_sign_size];\n-      __mp.negative_sign().copy(__negative_sign, _M_negative_sign_size);\n-      _M_negative_sign = __negative_sign;\n-      \n-      _M_pos_format = __mp.pos_format();\n-      _M_neg_format = __mp.neg_format();\n \n-      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n-      __ct.widen(money_base::_S_atoms,\n-\t\t money_base::_S_atoms + money_base::_S_end, _M_atoms);\n+      char* __grouping = 0;\n+      _CharT* __curr_symbol = 0;\n+      _CharT* __positive_sign = 0;\n+      _CharT* __negative_sign = 0;     \n+      __try\n+\t{\n+\t  _M_grouping_size = __mp.grouping().size();\n+\t  __grouping = new char[_M_grouping_size];\n+\t  __mp.grouping().copy(__grouping, _M_grouping_size);\n+\t  _M_grouping = __grouping;\n+\t  _M_use_grouping = (_M_grouping_size\n+\t\t\t     && static_cast<signed char>(_M_grouping[0]) > 0\n+\t\t\t     && (_M_grouping[0]\n+\t\t\t\t != __gnu_cxx::__numeric_traits<char>::__max));\n+\n+\t  _M_curr_symbol_size = __mp.curr_symbol().size();\n+\t  __curr_symbol = new _CharT[_M_curr_symbol_size];\n+\t  __mp.curr_symbol().copy(__curr_symbol, _M_curr_symbol_size);\n+\t  _M_curr_symbol = __curr_symbol;\n+\n+\t  _M_positive_sign_size = __mp.positive_sign().size();\n+\t  __positive_sign = new _CharT[_M_positive_sign_size];\n+\t  __mp.positive_sign().copy(__positive_sign, _M_positive_sign_size);\n+\t  _M_positive_sign = __positive_sign;\n+\n+\t  _M_negative_sign_size = __mp.negative_sign().size();\n+\t  __negative_sign = new _CharT[_M_negative_sign_size];\n+\t  __mp.negative_sign().copy(__negative_sign, _M_negative_sign_size);\n+\t  _M_negative_sign = __negative_sign;\n+\n+\t  _M_pos_format = __mp.pos_format();\n+\t  _M_neg_format = __mp.neg_format();\n+\n+\t  const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);\n+\t  __ct.widen(money_base::_S_atoms,\n+\t\t     money_base::_S_atoms + money_base::_S_end, _M_atoms);\n+\t}\n+      __catch(...)\n+\t{\n+\t  delete [] __grouping;\n+\t  delete [] __curr_symbol;\n+\t  delete [] __positive_sign;\n+\t  delete [] __negative_sign;\n+\t  __throw_exception_again;\n+\t}\n     }\n \n _GLIBCXX_BEGIN_LDBL_NAMESPACE"}, {"sha": "49eb21c0f9233e5c2e01afe4c74faca402a9b50c", "filename": "libstdc++-v3/testsuite/22_locale/moneypunct/40712.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F40712.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F40712.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fmoneypunct%2F40712.cc?ref=af90c8c9ae3b795f28cabd9f11e9f7c9a1ccccb4", "patch": "@@ -0,0 +1,41 @@\n+// { dg-require-namedlocale \"\" }\n+\n+// 2009-07-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+// Copyright (C) 2009 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 22.2.6.3  Template class moneypunct\n+\n+#include <locale>\n+\n+// libstdc++/40712\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  locale loc(locale(\"C\"), \"en_US\", locale::monetary);\n+  \n+  use_facet<moneypunct<char> >(loc).grouping();\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}