{"sha": "ed2df68b4b119cbfa7765c45075d16208a63c30e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQyZGY2OGI0YjExOWNiZmE3NzY1YzQ1MDc1ZDE2MjA4YTYzYzMwZQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-06-30T21:56:46Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-06-30T21:56:46Z"}, "message": "Makefile.in (GTFILES): Add cgraph.h.\n\n\n\t* Makefile.in (GTFILES): Add cgraph.h.\n\t* cgraph.c (known_decls): Remove.\n\t(cgraph_hash, cgraph_nodes, cgraph_nodes_queue,\n\tcgraph_varpool_hash, cgraph_varpool_nodes_queue): GTYize.\n\t(cgraph_node): Do not allocate known_decls; use polutate hashtable.\n\t(cgraph_varpool_node): Likewise; add next pointer.\n\t(cgraph_varpool_nodes): New static variable.\n\t* cgraph.h (cgraph_local_info, cgraph_global_info, cgraph_rtl_info,\n\tcgraph_node, cgraph_edge, cgraph_varpool_node, cgraph_nodes, cgraph_n_nodes,\n\tcgraph_varpool_n_nodes, cgraph_varpool_nodes_queue): GTYize.\n\t* gengtype.c (open_base_files): Include cgraph.h\n\nFrom-SVN: r68742", "tree": {"sha": "f704a619a0160f7e2e4daef01e29f11c9aa4fa89", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f704a619a0160f7e2e4daef01e29f11c9aa4fa89"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed2df68b4b119cbfa7765c45075d16208a63c30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2df68b4b119cbfa7765c45075d16208a63c30e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed2df68b4b119cbfa7765c45075d16208a63c30e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed2df68b4b119cbfa7765c45075d16208a63c30e/comments", "author": null, "committer": null, "parents": [{"sha": "f11c1f9089ef8be8221062cdd6ced02f84d8d9a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f11c1f9089ef8be8221062cdd6ced02f84d8d9a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f11c1f9089ef8be8221062cdd6ced02f84d8d9a4"}], "stats": {"total": 133, "additions": 68, "deletions": 65}, "files": [{"sha": "f85f8f4ed989ad0dd719b86c08249e32be33d944", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed2df68b4b119cbfa7765c45075d16208a63c30e", "patch": "@@ -1,3 +1,17 @@\n+Mon Jun 30 23:47:33 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\t* Makefile.in (GTFILES): Add cgraph.h.\n+\t* cgraph.c (known_decls): Remove.\n+\t(cgraph_hash, cgraph_nodes, cgraph_nodes_queue,\n+\tcgraph_varpool_hash, cgraph_varpool_nodes_queue): GTYize.\n+\t(cgraph_node): Do not allocate known_decls; use polutate hashtable.\n+\t(cgraph_varpool_node): Likewise; add next pointer.\n+\t(cgraph_varpool_nodes): New static variable.\n+\t* cgraph.h (cgraph_local_info, cgraph_global_info, cgraph_rtl_info,\n+\tcgraph_node, cgraph_edge, cgraph_varpool_node, cgraph_nodes, cgraph_n_nodes,\n+\tcgraph_varpool_n_nodes, cgraph_varpool_nodes_queue): GTYize.\n+\t* gengtype.c (open_base_files): Include cgraph.h\n+\n 2003-06-30  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n \n \t* Changelog: Remove \">>>>>>>\" from previous change."}, {"sha": "4d12af5bdf788ff57856c6f67283bf21304a7ade", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ed2df68b4b119cbfa7765c45075d16208a63c30e", "patch": "@@ -1999,7 +1999,7 @@ GTFILES = $(srcdir)/input.h $(srcdir)/coretypes.h $(srcdir)/cpplib.h \\\n   $(srcdir)/bitmap.h $(srcdir)/coverage.c $(srcdir)/function.h  $(srcdir)/rtl.h \\\n   $(srcdir)/optabs.h $(srcdir)/tree.h $(srcdir)/libfuncs.h $(srcdir)/hashtable.h \\\n   $(srcdir)/real.h $(srcdir)/varray.h $(srcdir)/ssa.h $(srcdir)/insn-addr.h \\\n-  $(srcdir)/cselib.h $(srcdir)/basic-block.h \\\n+  $(srcdir)/cselib.h $(srcdir)/basic-block.h  $(srcdir)/cgraph.h \\\n   $(srcdir)/c-common.h $(srcdir)/c-tree.h \\\n   $(srcdir)/alias.c $(srcdir)/bitmap.c $(srcdir)/cselib.c $(srcdir)/cgraph.c \\\n   $(srcdir)/dbxout.c $(srcdir)/dwarf2out.c $(srcdir)/dwarf2asm.c \\"}, {"sha": "0f10934a68171732ee1838d8d918404b9c49f6fc", "filename": "gcc/cgraph.c", "status": "modified", "additions": 33, "deletions": 47, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=ed2df68b4b119cbfa7765c45075d16208a63c30e", "patch": "@@ -35,15 +35,9 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"varray.h\"\n #include \"output.h\"\n \n-/* The known declarations must not get garbage collected.  Callgraph\n-   datastructures should not get saved via PCH code since this would\n-   make it difficult to extend into intra-module optimizer later.  So\n-   we store only the references into the array to prevent gabrage\n-   collector from deleting live data.  */\n-static GTY(()) varray_type known_decls;\n \n /* Hash table used to convert declarations into nodes.  */\n-static htab_t cgraph_hash = 0;\n+static GTY((param_is (struct cgraph_node))) htab_t cgraph_hash;\n \n /* The linked list of cgraph nodes.  */\n struct cgraph_node *cgraph_nodes;\n@@ -58,14 +52,17 @@ int cgraph_n_nodes;\n bool cgraph_global_info_ready = false;\n \n /* Hash table used to convert declarations into nodes.  */\n-static htab_t cgraph_varpool_hash = 0;\n+static GTY((param_is (struct cgraph_varpool_node))) htab_t cgraph_varpool_hash;\n \n /* Queue of cgraph nodes scheduled to be lowered and output.  */\n struct cgraph_varpool_node *cgraph_varpool_nodes_queue;\n \n /* Number of nodes in existence.  */\n int cgraph_varpool_n_nodes;\n \n+/* The linked list of cgraph varpool nodes.  */\n+static GTY(())  struct cgraph_varpool_node *cgraph_varpool_nodes;\n+\n static struct cgraph_edge *create_edge PARAMS ((struct cgraph_node *,\n \t\t\t\t\t\tstruct cgraph_node *));\n static void cgraph_remove_edge PARAMS ((struct cgraph_node *, struct cgraph_node *));\n@@ -78,9 +75,9 @@ static hashval_t\n hash_node (p)\n      const void *p;\n {\n-  return (hashval_t)\n-    htab_hash_pointer (DECL_ASSEMBLER_NAME\n-\t\t       (((struct cgraph_node *) p)->decl));\n+  return ((hashval_t)\n+\t  IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME\n+\t\t\t\t (((struct cgraph_node *) p)->decl)));\n }\n \n /* Returns nonzero if P1 and P2 are equal.  */\n@@ -106,21 +103,15 @@ cgraph_node (decl)\n     abort ();\n \n   if (!cgraph_hash)\n-    {\n-      cgraph_hash = htab_create (10, hash_node, eq_node, NULL);\n-      if (!known_decls)\n-        VARRAY_TREE_INIT (known_decls, 32, \"known_decls\");\n-    }\n+    cgraph_hash = htab_create_ggc (10, hash_node, eq_node, NULL);\n \n-  slot =\n-    (struct cgraph_node **) htab_find_slot_with_hash (cgraph_hash,\n-\t\t\t\t\t\t      DECL_ASSEMBLER_NAME (decl),\n-\t\t\t\t\t\t      htab_hash_pointer\n-\t\t\t\t\t\t      (DECL_ASSEMBLER_NAME\n-\t\t\t\t\t\t       (decl)), 1);\n+  slot = (struct cgraph_node **)\n+    htab_find_slot_with_hash (cgraph_hash, DECL_ASSEMBLER_NAME (decl),\n+\t\t\t      IDENTIFIER_HASH_VALUE\n+\t\t\t        (DECL_ASSEMBLER_NAME (decl)), 1);\n   if (*slot)\n     return *slot;\n-  node = xcalloc (sizeof (*node), 1);\n+  node = ggc_alloc_cleared (sizeof (*node));\n   node->decl = decl;\n   node->next = cgraph_nodes;\n   if (cgraph_nodes)\n@@ -135,7 +126,6 @@ cgraph_node (decl)\n       node->next_nested = node->origin->nested;\n       node->origin->nested = node;\n     }\n-  VARRAY_PUSH_TREE (known_decls, decl);\n   return node;\n }\n \n@@ -152,9 +142,9 @@ cgraph_node_for_identifier (id)\n   if (!cgraph_hash)\n     return NULL;\n \n-  slot =\n-    (struct cgraph_node **) htab_find_slot_with_hash (cgraph_hash, id,\n-\t\t\t\t\t\t      htab_hash_pointer (id), 0);\n+  slot = (struct cgraph_node **)\n+    htab_find_slot_with_hash (cgraph_hash, id,\n+\t\t    \t      IDENTIFIER_HASH_VALUE (id), 0);\n   if (!slot)\n     return NULL;\n   return *slot;\n@@ -166,7 +156,7 @@ static struct cgraph_edge *\n create_edge (caller, callee)\n      struct cgraph_node *caller, *callee;\n {\n-  struct cgraph_edge *edge = xmalloc (sizeof (struct cgraph_edge));\n+  struct cgraph_edge *edge = ggc_alloc (sizeof (struct cgraph_edge));\n \n   edge->caller = caller;\n   edge->callee = callee;\n@@ -368,9 +358,9 @@ dump_cgraph (f)\n static hashval_t\n cgraph_varpool_hash_node (const PTR p)\n {\n-  return (hashval_t)\n-    htab_hash_pointer (DECL_ASSEMBLER_NAME\n-\t\t       (((struct cgraph_varpool_node *) p)->decl));\n+  return ((hashval_t)\n+\t  IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME\n+\t\t\t\t (((struct cgraph_varpool_node *) p)->decl)));\n }\n \n /* Returns nonzero if P1 and P2 are equal.  */\n@@ -393,25 +383,21 @@ cgraph_varpool_node (tree decl)\n     abort ();\n \n   if (!cgraph_varpool_hash)\n-    {\n-      cgraph_varpool_hash = htab_create (10, cgraph_varpool_hash_node, eq_cgraph_varpool_node, NULL);\n-      if (!known_decls)\n-        VARRAY_TREE_INIT (known_decls, 32, \"known_decls\");\n-    }\n+    cgraph_varpool_hash = htab_create_ggc (10, cgraph_varpool_hash_node,\n+\t\t\t\t           eq_cgraph_varpool_node, NULL);\n+\n \n-  slot =\n-    (struct cgraph_varpool_node **) htab_find_slot_with_hash (cgraph_varpool_hash,\n-\t\t\t\t\t\t      DECL_ASSEMBLER_NAME (decl),\n-\t\t\t\t\t\t      htab_hash_pointer\n-\t\t\t\t\t\t      (DECL_ASSEMBLER_NAME\n-\t\t\t\t\t\t       (decl)), 1);\n+  slot = (struct cgraph_varpool_node **)\n+    htab_find_slot_with_hash (cgraph_varpool_hash, DECL_ASSEMBLER_NAME (decl),\n+\t\t\t      IDENTIFIER_HASH_VALUE (DECL_ASSEMBLER_NAME (decl)),\n+\t\t\t      1);\n   if (*slot)\n     return *slot;\n-  node = xcalloc (sizeof (*node), 1);\n+  node = ggc_alloc_cleared (sizeof (*node));\n   node->decl = decl;\n   cgraph_varpool_n_nodes++;\n+  cgraph_varpool_nodes = node;\n   *slot = node;\n-  VARRAY_PUSH_TREE (known_decls, decl);\n   return node;\n }\n \n@@ -427,9 +413,9 @@ cgraph_varpool_node_for_identifier (tree id)\n   if (!cgraph_varpool_hash)\n     return NULL;\n \n-  slot =\n-    (struct cgraph_varpool_node **) htab_find_slot_with_hash (cgraph_varpool_hash, id,\n-\t\t\t\t\t\t      htab_hash_pointer (id), 0);\n+  slot = (struct cgraph_varpool_node **)\n+    htab_find_slot_with_hash (cgraph_varpool_hash, id,\n+\t\t\t      IDENTIFIER_HASH_VALUE (id), 0);\n   if (!slot)\n     return NULL;\n   return *slot;"}, {"sha": "8e5ceba0e33d761c2b3893a90e5b49716967a202", "filename": "gcc/cgraph.h", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=ed2df68b4b119cbfa7765c45075d16208a63c30e", "patch": "@@ -25,7 +25,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* Information about the function collected locally.\n    Available after function is lowered  */\n \n-struct cgraph_local_info\n+struct cgraph_local_info GTY(())\n {\n   /* Set when function function is visiable in current compilation unit only\n      and it's address is never taken.  */\n@@ -40,7 +40,7 @@ struct cgraph_local_info\n /* Information about the function that needs to be computed globally\n    once compilation is finished.  Available only with -funit-at-time.  */\n \n-struct cgraph_global_info\n+struct cgraph_global_info GTY(())\n {\n   /* Set when the function will be inlined exactly once.  */\n   bool inline_once;\n@@ -49,29 +49,31 @@ struct cgraph_global_info\n /* Information about the function that is propagated by the RTL backend.\n    Available only for functions that has been already assembled.  */\n \n-struct cgraph_rtl_info\n+struct cgraph_rtl_info GTY(())\n {\n-   bool const_function, pure_function;\n+   bool const_function;\n+   bool pure_function;\n    int preferred_incoming_stack_boundary;\n };\n \n \n /* The cgraph data strutcture.\n    Each function decl has assigned cgraph_node listing calees and callers.  */\n \n-struct cgraph_node\n+struct cgraph_node GTY(())\n {\n   tree decl;\n   struct cgraph_edge *callees;\n   struct cgraph_edge *callers;\n-  struct cgraph_node *next, *previous;\n+  struct cgraph_node *next;\n+  struct cgraph_node *previous;\n   /* For nested functions points to function the node is nested in.  */\n   struct cgraph_node *origin;\n   /* Points to first nested function, if any.  */\n   struct cgraph_node *nested;\n   /* Pointer to the next function with same origin, if any.  */\n   struct cgraph_node *next_nested;\n-  void *aux;\n+  PTR GTY ((skip (\"\"))) aux;\n \n   /* Set when function must be output - it is externally visible\n      or it's address is taken.  */\n@@ -90,20 +92,21 @@ struct cgraph_node\n   struct cgraph_rtl_info rtl;\n };\n \n-struct cgraph_edge\n+struct cgraph_edge GTY(())\n {\n-  struct cgraph_node *caller, *callee;\n+  struct cgraph_node *caller;\n+  struct cgraph_node *callee;\n   struct cgraph_edge *next_caller;\n   struct cgraph_edge *next_callee;\n };\n \n /* The cgraph_varpool data strutcture.\n    Each static variable decl has assigned cgraph_varpool_node.  */\n \n-struct cgraph_varpool_node\n+struct cgraph_varpool_node GTY(())\n {\n   tree decl;\n-  void *aux;\n+  PTR GTY ((skip (\"\"))) aux;\n \n   /* Set when function must be output - it is externally visible\n      or it's address is taken.  */\n@@ -114,13 +117,13 @@ struct cgraph_varpool_node\n   bool output;\n };\n \n-extern struct cgraph_node *cgraph_nodes;\n-extern int cgraph_n_nodes;\n+extern GTY(()) struct cgraph_node *cgraph_nodes;\n+extern GTY(()) int cgraph_n_nodes;\n extern bool cgraph_global_info_ready;\n-extern struct cgraph_node *cgraph_nodes_queue;\n+extern GTY(()) struct cgraph_node *cgraph_nodes_queue;\n \n-extern int cgraph_varpool_n_nodes;\n-extern struct cgraph_varpool_node *cgraph_varpool_nodes_queue;\n+extern GTY(()) int cgraph_varpool_n_nodes;\n+extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes_queue;\n \n \n /* In cgraph.c  */"}, {"sha": "8a0a7101a72c882cfbbf4045c026651fb762bd42", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed2df68b4b119cbfa7765c45075d16208a63c30e/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=ed2df68b4b119cbfa7765c45075d16208a63c30e", "patch": "@@ -1089,7 +1089,7 @@ open_base_files (void)\n       \"hashtab.h\", \"splay-tree.h\", \"bitmap.h\", \"tree.h\", \"rtl.h\",\n       \"function.h\", \"insn-config.h\", \"expr.h\", \"hard-reg-set.h\",\n       \"basic-block.h\", \"cselib.h\", \"insn-addr.h\", \"ssa.h\", \"optabs.h\",\n-      \"libfuncs.h\", \"debug.h\", \"ggc.h\",\n+      \"libfuncs.h\", \"debug.h\", \"ggc.h\", \"cgraph.h\",\n       NULL\n     };\n     const char *const *ifp;"}]}