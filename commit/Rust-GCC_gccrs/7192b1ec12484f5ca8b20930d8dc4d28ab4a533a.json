{"sha": "7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE5MmIxZWMxMjQ4NGY1Y2E4YjIwOTMwZDhkYzRkMjhhYjRhNTMzYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-15T14:31:11Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-01-15T20:02:28Z"}, "message": "PR c++/92871 - bad code with xvalue and GNU ?: extension.\n\nI steered Jakub wrong on the desired behavior for temp-extend1.C in the\ncontext of bug 92831; it doesn't make sense to try to extend the lifetime of\na temporary that we've already materialized to evaluate the test.  So this\npatch munges the stabilized expression so that it won't be subject to\nlifetime extension.\n\n\t* call.c (prevent_lifetime_extension): New.\n\t(build_conditional_expr_1): Use it.", "tree": {"sha": "5e48e9dc719ed39cfc30318de6ce5c84ecb9e716", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e48e9dc719ed39cfc30318de6ce5c84ecb9e716"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc071d3a951a98284a3f46043afd44c03c123376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc071d3a951a98284a3f46043afd44c03c123376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc071d3a951a98284a3f46043afd44c03c123376"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "78eb8340b5a12d95503eeabfcd79ae996b3b76a9", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "patch": "@@ -1,3 +1,9 @@\n+2020-01-15  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/92871 - bad code with xvalue and GNU ?: extension.\n+\t* call.c (prevent_lifetime_extension): New.\n+\t(build_conditional_expr_1): Use it.\n+\n 2020-01-14  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/90916"}, {"sha": "32ccfc973e4e0d5c195d68f6b4d0baee1d48b627", "filename": "gcc/cp/call.c", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "patch": "@@ -217,6 +217,7 @@ static conversion *merge_conversion_sequences (conversion *, conversion *);\n static tree build_temp (tree, tree, int, diagnostic_t *, tsubst_flags_t);\n static conversion *build_identity_conv (tree, tree);\n static inline bool conv_binds_to_array_of_unknown_bound (conversion *);\n+static tree prevent_lifetime_extension (tree);\n \n /* Returns nonzero iff the destructor name specified in NAME matches BASETYPE.\n    NAME can take many forms...  */\n@@ -5078,7 +5079,10 @@ build_conditional_expr_1 (const op_location_t &loc,\n \n       /* Make sure that lvalues remain lvalues.  See g++.oliva/ext1.C.  */\n       if (glvalue_p (arg1))\n-\targ2 = arg1 = cp_stabilize_reference (arg1);\n+\t{\n+\t  arg2 = arg1 = cp_stabilize_reference (arg1);\n+\t  arg2 = arg1 = prevent_lifetime_extension (arg1);\n+\t}\n       else\n \targ2 = arg1 = cp_save_expr (arg1);\n     }\n@@ -12168,6 +12172,24 @@ initialize_reference (tree type, tree expr,\n   return expr;\n }\n \n+/* If *P is an xvalue expression, prevent temporary lifetime extension if it\n+   gets used to initialize a reference.  */\n+\n+static tree\n+prevent_lifetime_extension (tree t)\n+{\n+  tree *p = &t;\n+  while (TREE_CODE (*p) == COMPOUND_EXPR)\n+    p = &TREE_OPERAND (*p, 1);\n+  while (handled_component_p (*p))\n+    p = &TREE_OPERAND (*p, 0);\n+  /* Change a TARGET_EXPR from prvalue to xvalue.  */\n+  if (TREE_CODE (*p) == TARGET_EXPR)\n+    *p = build2 (COMPOUND_EXPR, TREE_TYPE (*p), *p,\n+\t\t move (TARGET_EXPR_SLOT (*p)));\n+  return t;\n+}\n+\n /* Subroutine of extend_ref_init_temps.  Possibly extend one initializer,\n    which is bound either to a reference or a std::initializer_list.  */\n "}, {"sha": "aaef115494c45c8cc45d1129e065e96d04ab26af", "filename": "gcc/testsuite/g++.dg/ext/temp-extend1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftemp-extend1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7192b1ec12484f5ca8b20930d8dc4d28ab4a533a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftemp-extend1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Ftemp-extend1.C?ref=7192b1ec12484f5ca8b20930d8dc4d28ab4a533a", "patch": "@@ -21,7 +21,7 @@ baz (int i)\n {\n   const bool&& a = id<S[3]>{false, true, false}[i].s\n \t\t   ? : id<S[4]>{true, false, true, false}[i].s;\n-  if (S::c != (i ? 3 : 4))\n+  if (S::c != (i ? 0 : 4))\n     __builtin_abort ();\n }\n "}]}