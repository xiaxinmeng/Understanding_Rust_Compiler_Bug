{"sha": "dab1260138c4b5347270ecd535428116b2acab72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFiMTI2MDEzOGM0YjUzNDcyNzBlY2Q1MzU0MjgxMTZiMmFjYWI3Mg==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2007-09-08T09:19:39Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2007-09-08T09:19:39Z"}, "message": "re PR tree-optimization/33301 (wrong vectorization factor due to an invariant type-promotion in the loop)\n\n        PR tree-optimization/33301\n        * tree-vect-analyze (analyze_operations): Look at the type of the rhs\n        when relevant.\n\nFrom-SVN: r128265", "tree": {"sha": "f6cd710146adcfeff56acdc5fb15cd95828fed1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6cd710146adcfeff56acdc5fb15cd95828fed1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dab1260138c4b5347270ecd535428116b2acab72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab1260138c4b5347270ecd535428116b2acab72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dab1260138c4b5347270ecd535428116b2acab72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dab1260138c4b5347270ecd535428116b2acab72/comments", "author": null, "committer": null, "parents": [{"sha": "f1979d7e894829152d25f823db27aef06b518219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1979d7e894829152d25f823db27aef06b518219", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1979d7e894829152d25f823db27aef06b518219"}], "stats": {"total": 50, "additions": 46, "deletions": 4}, "files": [{"sha": "9fd59ac7cb384b248c95fd709b4f64a2d7436273", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab1260138c4b5347270ecd535428116b2acab72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab1260138c4b5347270ecd535428116b2acab72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dab1260138c4b5347270ecd535428116b2acab72", "patch": "@@ -1,3 +1,9 @@\n+2007-09-08  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33301\n+\t* tree-vect-analyze (analyze_operations): Look at the type of the rhs\n+\twhen relevant.\n+\n 2007-09-07  Zdenek Dvorak  <ook@ucw.cz>\n \n \tPR tree-optimization/32183"}, {"sha": "71d7f211a96497e2dcbfc9a7302699939f89989c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dab1260138c4b5347270ecd535428116b2acab72", "patch": "@@ -1,3 +1,8 @@\n+2007-09-08  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/33301\n+\t* gfortran.dg/vect/pr33301.f: New test.\n+\n 2007-09-07  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libfortran/33307"}, {"sha": "0713f3e758389ce611ab8e50a690c4f949cd9818", "filename": "gcc/testsuite/gfortran.dg/vect/pr33301.f", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr33301.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr33301.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr33301.f?ref=dab1260138c4b5347270ecd535428116b2acab72", "patch": "@@ -0,0 +1,14 @@\n+c { dg-do compile }\n+C Derived from lapack\n+      SUBROUTINE ZGELSX( M, N, NRHS, A, LDA, B, LDB, JPVT, RCOND, RANK,\n+     $                   WORK, RWORK, INFO )\n+      COMPLEX(kind=8)         WORK( * )\n+c     Following declaration added on transfer to gfortran testsuite.\n+c     It is present in original lapack source\n+      integer rank\n+            DO 20 I = 1, RANK\n+               WORK( ISMAX+I-1 ) = S2*WORK( ISMAX+I-1 )\n+   20       CONTINUE\n+      END\n+\n+c { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "a37fcf4395b4282245601e0662018563409686db", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dab1260138c4b5347270ecd535428116b2acab72/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=dab1260138c4b5347270ecd535428116b2acab72", "patch": "@@ -216,21 +216,38 @@ vect_determine_vectorization_factor (loop_vec_info loop_vinfo)\n \t    }\n \t  else\n \t    {\n+\t      tree operation;\n+\n \t      gcc_assert (! STMT_VINFO_DATA_REF (stmt_info)\n \t\t\t  && !is_pattern_stmt_p (stmt_info));\n \n-\t      /* We set the vectype according to the type of the result (lhs).\n+\t      /* We generally set the vectype according to the type of the \n+\t\t result (lhs).\n \t\t For stmts whose result-type is different than the type of the\n \t\t arguments (e.g. demotion, promotion), vectype will be reset \n \t\t appropriately (later).  Note that we have to visit the smallest \n \t\t datatype in this function, because that determines the VF.  \n \t\t If the smallest datatype in the loop is present only as the \n \t\t rhs of a promotion operation - we'd miss it here.\n-\t\t However, in such a case, that a variable of this datatype\n-\t\t does not appear in the lhs anywhere in the loop, it shouldn't\n-\t\t affect the vectorization factor.   */\n+\t\t Such a case, where a variable of this datatype does not appear \n+\t\t in the lhs anywhere in the loop, can only occur if it's an\n+\t\t invariant: e.g.: 'int_x = (int) short_inv', which we'd expect\n+\t\t to have been optimized away by invariant motion. However, we \n+\t\t cannot rely on invariant motion to always take invariants out\n+\t\t of the loop, and so in the case of promotion we also have to \n+\t\t check the rhs.  */\n \t      scalar_type = TREE_TYPE (GIMPLE_STMT_OPERAND (stmt, 0));\n \n+\t      operation = GIMPLE_STMT_OPERAND (stmt, 1);\n+\t      if (TREE_CODE (operation) == NOP_EXPR\n+\t\t  || TREE_CODE (operation) == CONVERT_EXPR\n+\t\t  || TREE_CODE (operation) ==  WIDEN_MULT_EXPR)\n+\t\t{\n+\t\t  tree rhs_type = TREE_TYPE (TREE_OPERAND (operation, 0));\n+\t\t  if (TYPE_SIZE_UNIT (rhs_type) < TYPE_SIZE_UNIT (scalar_type))\n+\t\t    scalar_type = TREE_TYPE (TREE_OPERAND (operation, 0));\n+\t\t}\n+\n \t      if (vect_print_dump_info (REPORT_DETAILS))\n \t\t{\n \t\t  fprintf (vect_dump, \"get vectype for scalar type:  \");"}]}