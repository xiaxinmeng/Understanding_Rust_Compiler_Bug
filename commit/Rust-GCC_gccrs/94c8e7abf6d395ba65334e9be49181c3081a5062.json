{"sha": "94c8e7abf6d395ba65334e9be49181c3081a5062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTRjOGU3YWJmNmQzOTViYTY1MzM0ZTliZTQ5MTgxYzMwODFhNTA2Mg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:56:35Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:56:35Z"}, "message": "vqshrun_n.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c: New file.\n\nFrom-SVN: r223386", "tree": {"sha": "b86feed905cc16875ad4a7766695f12c28beab0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b86feed905cc16875ad4a7766695f12c28beab0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/94c8e7abf6d395ba65334e9be49181c3081a5062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c8e7abf6d395ba65334e9be49181c3081a5062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/94c8e7abf6d395ba65334e9be49181c3081a5062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/94c8e7abf6d395ba65334e9be49181c3081a5062/comments", "author": null, "committer": null, "parents": [{"sha": "83846a5923b75824828f5145797f27689531584f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83846a5923b75824828f5145797f27689531584f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83846a5923b75824828f5145797f27689531584f"}], "stats": {"total": 137, "additions": 137, "deletions": 0}, "files": [{"sha": "0805356b6a8617599a5c8a10d6760356ba7a835f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c8e7abf6d395ba65334e9be49181c3081a5062/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c8e7abf6d395ba65334e9be49181c3081a5062/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=94c8e7abf6d395ba65334e9be49181c3081a5062", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqshrn_n.c: New file."}, {"sha": "ce1a3ff09b28227a31fd39c8419cb6f56741a7ce", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqshrun_n.c", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/94c8e7abf6d395ba65334e9be49181c3081a5062/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/94c8e7abf6d395ba65334e9be49181c3081a5062/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqshrun_n.c?ref=94c8e7abf6d395ba65334e9be49181c3081a5062", "patch": "@@ -0,0 +1,133 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag with negative input.  */\n+int VECT_VAR(expected_cumulative_sat_neg,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_neg,int,64,2) = 1;\n+\n+/* Expected results with negative input.  */\n+VECT_VAR_DECL(expected_neg,uint,8,8) [] = { 0x0, 0x0, 0x0, 0x0,\n+\t\t\t\t\t    0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected_neg,uint,32,2) [] = { 0x0, 0x0 };\n+\n+/* Expected values of cumulative_saturation flag with max input value\n+   shifted by 1.  */\n+int VECT_VAR(expected_cumulative_sat_max_sh1,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_sh1,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_max_sh1,int,64,2) = 1;\n+\n+/* Expected results with max input value shifted by 1.  */\n+VECT_VAR_DECL(expected_max_sh1,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_max_sh1,uint,16,4) [] = { 0xffff, 0xffff,\n+\t\t\t\t\t\t 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_max_sh1,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+VECT_VAR_DECL(expected_max_sh1,uint,64,1) [] = { 0x3333333333333333 };\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0x48, 0x48, 0x48, 0x48,\n+\t\t\t\t\t0x48, 0x48, 0x48, 0x48 };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0x0, 0x0, 0x0, 0x0 };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xdeadbe, 0xdeadbe };\n+\n+\n+#define INSN vqshrun_n\n+#define TEST_MSG \"VQSHRUN_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqshrun_n(x,v), then store the result.  */\n+#define TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, uint, W2, N));\t\\\n+  VECT_VAR(vector_res, uint, W2, N) =\t\t\t\t\t\\\n+    INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n+\t\t   V);\t\t\t\t\t\t\t\\\n+  vst1_u##W2(VECT_VAR(result, uint, W2, N),\t\t\t\t\\\n+\t     VECT_VAR(vector_res, uint, W2, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHRUN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQSHRUN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQSHRUN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+\n+  clean_results ();\n+\n+  /* Fill input vector with negative values, to check saturation on\n+     limits.  */\n+  VDUP(vector, q, int, s, 16, 8, -2);\n+  VDUP(vector, q, int, s, 32, 4, -3);\n+  VDUP(vector, q, int, s, 64, 2, -4);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \" (negative input)\"\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 4, expected_cumulative_sat_neg, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat_neg, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_neg, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_neg, CMT);\n+\n+  \n+  /* Fill input vector with max value, to check saturation on\n+     limits.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+\n+#undef CMT\n+#define CMT \" (check cumulative saturation)\"\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat_max_sh1, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat_max_sh1, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 1, expected_cumulative_sat_max_sh1, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_max_sh1, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_max_sh1, CMT);\n+\n+  \n+  /* Fill input vector with positive values, to check normal case.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x1234);\n+  VDUP(vector, q, int, s, 32, 4, 0x87654321);\n+  VDUP(vector, q, int, s, 64, 2, 0xDEADBEEF);\n+\n+#undef CMT\n+#define CMT \"\"\n+  TEST_VQSHRUN_N(int, s, 16, 8, 8, 6, expected_cumulative_sat, CMT);\n+  TEST_VQSHRUN_N(int, s, 32, 16, 4, 7, expected_cumulative_sat, CMT);\n+  TEST_VQSHRUN_N(int, s, 64, 32, 2, 8, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqshrun_n ();\n+  return 0;\n+}"}]}