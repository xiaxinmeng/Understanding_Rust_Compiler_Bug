{"sha": "acb3f79a4af6acc1709d001a33599bf169712c12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNiM2Y3OWE0YWY2YWNjMTcwOWQwMDFhMzM1OTliZjE2OTcxMmMxMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2004-12-14T19:38:25Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2004-12-14T19:38:25Z"}, "message": "re PR c++/18793 (ICE in cp_expr_size)\n\n\tPR c++/18793\n\t* cp-objcp-common.c (cp_expr_size): Loosen assertion.\n\n\tPR c++/18793\n\t* g++.dg/init/aggr3.C: New test.\n\nFrom-SVN: r92156", "tree": {"sha": "6c2b4646df17cb5b7c481f47b94c44bffd17c4f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c2b4646df17cb5b7c481f47b94c44bffd17c4f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/acb3f79a4af6acc1709d001a33599bf169712c12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb3f79a4af6acc1709d001a33599bf169712c12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/acb3f79a4af6acc1709d001a33599bf169712c12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/acb3f79a4af6acc1709d001a33599bf169712c12/comments", "author": null, "committer": null, "parents": [{"sha": "f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f90ac3f0e40f8d7876f8abecc782dd0befd4e2a6"}], "stats": {"total": 53, "additions": 47, "deletions": 6}, "files": [{"sha": "4b2f677a29048a511f23e5f0c21bef91575f791f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=acb3f79a4af6acc1709d001a33599bf169712c12", "patch": "@@ -1,3 +1,8 @@\n+2004-12-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18793\n+\t* cp-objcp-common.c (cp_expr_size): Loosen assertion.\n+\n 2004-12-14  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/18949"}, {"sha": "d43c159c01f1ba83162f3a67db6e6ee48018cce8", "filename": "gcc/cp/cp-objcp-common.c", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Fcp%2Fcp-objcp-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Fcp%2Fcp-objcp-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-objcp-common.c?ref=acb3f79a4af6acc1709d001a33599bf169712c12", "patch": "@@ -75,21 +75,36 @@ cxx_warn_unused_global_decl (tree decl)\n tree\n cp_expr_size (tree exp)\n {\n-  if (CLASS_TYPE_P (TREE_TYPE (exp)))\n+  tree type = TREE_TYPE (exp);\n+\n+  if (CLASS_TYPE_P (type))\n     {\n       /* The backend should not be interested in the size of an expression\n \t of a type with both of these set; all copies of such types must go\n \t through a constructor or assignment op.  */\n-      gcc_assert (!TYPE_HAS_COMPLEX_INIT_REF (TREE_TYPE (exp))\n-\t\t  || !TYPE_HAS_COMPLEX_ASSIGN_REF (TREE_TYPE (exp))\n+      gcc_assert (!TYPE_HAS_COMPLEX_INIT_REF (type)\n+\t\t  || !TYPE_HAS_COMPLEX_ASSIGN_REF (type)\n \t\t  /* But storing a CONSTRUCTOR isn't a copy.  */\n-\t\t  || TREE_CODE (exp) == CONSTRUCTOR);\n+\t\t  || TREE_CODE (exp) == CONSTRUCTOR\n+\t\t  /* And, the gimplifier will sometimes make a copy of\n+\t\t     an aggregate.  In particular, for a case like:\n+\n+\t\t        struct S { S(); };\n+                        struct X { int a; S s; };\n+                        X x = { 0 };\n+\n+                     the gimplifier will create a temporary with\n+                     static storage duration, perform static\n+                     initialization of the temporary, and then copy\n+                     the result.  Since the \"s\" subobject is never\n+                     constructed, this is a valid transformation.  */\n+\t\t  || CP_AGGREGATE_TYPE_P (type));\n       \n       /* This would be wrong for a type with virtual bases, but they are\n \t caught by the assert above.  */\n-      return (is_empty_class (TREE_TYPE (exp))\n+      return (is_empty_class (type)\n \t      ? size_zero_node\n-\t      : CLASSTYPE_SIZE_UNIT (TREE_TYPE (exp)));\n+\t      : CLASSTYPE_SIZE_UNIT (type));\n     }\n   else\n     /* Use the default code.  */"}, {"sha": "b92d0a5d0abc424642575aef05d1b5aab7e33a11", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=acb3f79a4af6acc1709d001a33599bf169712c12", "patch": "@@ -1,3 +1,8 @@\n+2004-12-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/18793\n+\t* g++.dg/init/aggr3.C: New test.\n+\n 2004-12-14  Janis Johnson  <janis187@us.ibm.com\n \n \t* gcc.dg/altivec-types-1.c: New test."}, {"sha": "3376897e105ccec43a43583442fbca57cb8e4af5", "filename": "gcc/testsuite/g++.dg/init/aggr3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/acb3f79a4af6acc1709d001a33599bf169712c12/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Faggr3.C?ref=acb3f79a4af6acc1709d001a33599bf169712c12", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/18793\n+\n+struct S { \n+  S(); \n+  S(const S&); \n+  void operator=(const S&); \n+}; \n+ \n+struct X { \n+  int a, b, c, d, e; \n+  S s; \n+}; \n+ \n+void foobar () { \n+  X x = {0}; \n+} "}]}