{"sha": "5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5Yjc0MDhkYzU3OGNiMmFlMTQyYTVjMWI3MjRjMTgzNDk3YmRiMg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-26T17:28:02Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-07-29T14:16:19Z"}, "message": "d: Ensure casting from bool results in either 0 or 1 (PR96435)\n\nIf casting from bool, the result is either 0 or 1, any other value\nviolates @safe code, so enforce that it is never invalid.\n\n\tPR d/96435\n\ngcc/d/ChangeLog:\n\n\t* d-convert.cc (convert_for_rvalue): New function.\n\t* d-tree.h (convert_for_rvalue): Declare.\n\t* expr.cc (ExprVisitor::visit (CastExp *)): Use convert_for_rvalue.\n\t(build_return_dtor): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/pr96435.d: New test.", "tree": {"sha": "9d66585f4b9e8f11d44c05275ea7016577471721", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d66585f4b9e8f11d44c05275ea7016577471721"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75f2e3f6cbbb79421b12e399498e9c14241359e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75f2e3f6cbbb79421b12e399498e9c14241359e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75f2e3f6cbbb79421b12e399498e9c14241359e7"}], "stats": {"total": 71, "additions": 66, "deletions": 5}, "files": [{"sha": "d43485dca77015376fcb6d76d1fc2306d5c53a2b", "filename": "gcc/d/d-convert.cc", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fd-convert.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fd-convert.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-convert.cc?ref=5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "patch": "@@ -602,6 +602,42 @@ convert_expr (tree exp, Type *etype, Type *totype)\n   return result ? result : convert (build_ctype (totype), exp);\n }\n \n+/* Return a TREE represenwation of EXPR, whose type has been converted from\n+ * ETYPE to TOTYPE, and is being used in an rvalue context.  */\n+\n+tree\n+convert_for_rvalue (tree expr, Type *etype, Type *totype)\n+{\n+  tree result = NULL_TREE;\n+\n+  Type *ebtype = etype->toBasetype ();\n+  Type *tbtype = totype->toBasetype ();\n+\n+  switch (ebtype->ty)\n+    {\n+    case Tbool:\n+      /* If casting from bool, the result is either 0 or 1, any other value\n+\t violates @safe code, so enforce that it is never invalid.  */\n+      if (CONSTANT_CLASS_P (expr))\n+\tresult = d_truthvalue_conversion (expr);\n+      else\n+\t{\n+\t  /* Reinterpret the boolean as an integer and test the first bit.\n+\t     The generated code should end up being equivalent to:\n+\t\t*cast(ubyte *)&expr & 1;  */\n+\t  machine_mode bool_mode = TYPE_MODE (TREE_TYPE (expr));\n+\t  tree mtype = lang_hooks.types.type_for_mode (bool_mode, 1);\n+\t  result = fold_build2 (BIT_AND_EXPR, mtype,\n+\t\t\t\tbuild_vconvert (mtype, expr),\n+\t\t\t\tbuild_one_cst (mtype));\n+\t}\n+\n+      result = convert (build_ctype (tbtype), result);\n+      break;\n+    }\n+\n+  return result ? result : convert_expr (expr, etype, totype);\n+}\n \n /* Apply semantics of assignment to a value of type TOTYPE to EXPR\n    (e.g., pointer = array -> pointer = &array[0])"}, {"sha": "f210b8b1a6e4c7d00e8b7dbe87e7667d4a6f6dd9", "filename": "gcc/d/d-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fd-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fd-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-tree.h?ref=5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "patch": "@@ -598,6 +598,7 @@ extern bool decl_with_nonnull_addr_p (const_tree);\n extern tree d_truthvalue_conversion (tree);\n extern tree d_convert (tree, tree);\n extern tree convert_expr (tree, Type *, Type *);\n+extern tree convert_for_rvalue (tree, Type *, Type *);\n extern tree convert_for_assignment (tree, Type *, Type *);\n extern tree convert_for_argument (tree, Parameter *);\n extern tree convert_for_condition (tree, Type *);"}, {"sha": "99ca958c7c42cba647485d91559d5f16cde9818f", "filename": "gcc/d/expr.cc", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Fd%2Fexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fexpr.cc?ref=5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "patch": "@@ -1491,7 +1491,7 @@ class ExprVisitor : public Visitor\n     if (tbtype->ty == Tvoid)\n       this->result_ = build_nop (build_ctype (tbtype), result);\n     else\n-      this->result_ = convert_expr (result, ebtype, tbtype);\n+      this->result_ = convert_for_rvalue (result, ebtype, tbtype);\n   }\n \n   /* Build a delete expression.  */\n@@ -3169,11 +3169,14 @@ build_return_dtor (Expression *e, Type *type, TypeFunction *tf)\n   tree result = build_expr (e);\n \n   /* Convert for initializing the DECL_RESULT.  */\n-  result = convert_expr (result, e->type, type);\n-\n-  /* If we are returning a reference, take the address.  */\n   if (tf->isref)\n-    result = build_address (result);\n+    {\n+      /* If we are returning a reference, take the address.  */\n+      result = convert_expr (result, e->type, type);\n+      result = build_address (result);\n+    }\n+  else\n+    result = convert_for_rvalue (result, e->type, type);\n \n   /* The decl to store the return expression.  */\n   tree decl = DECL_RESULT (cfun->decl);"}, {"sha": "c6d8785ec5b78c81392383ee98afb478d09ee666", "filename": "gcc/testsuite/gdc.dg/torture/pr96435.d", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr96435.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9b7408dc578cb2ae142a5c1b724c183497bdb2/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr96435.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr96435.d?ref=5c9b7408dc578cb2ae142a5c1b724c183497bdb2", "patch": "@@ -0,0 +1,21 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=96435\n+// { dg-do run }\n+\n+@safe bool test96435()\n+{\n+    int[2] array = [16, 678];\n+    union U { int i; bool b; }\n+    U u;\n+    u.i = 0xDEADBEEF;\n+    assert(array[u.b] == 678);\n+    return u.b;\n+}\n+\n+@safe void main()\n+{\n+    auto b = test96435();\n+    if (b)\n+        assert(true);\n+    if (!b)\n+        assert(false);\n+}"}]}