{"sha": "920aeaf3da2eed578c4f2b73551a44a62b8329a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIwYWVhZjNkYTJlZWQ1NzhjNGYyYjczNTUxYTQ0YTYyYjgzMjlhMw==", "commit": {"author": {"name": "John David Anglin", "email": "dave.anglin@nrc-cnrc.gc.ca", "date": "2006-12-08T23:41:03Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2006-12-08T23:41:03Z"}, "message": "re PR target/30039 (HPPA: Incorrect code generated on 64bit host)\n\n\tPR target/30039\n\t* pa.md (high:DI and lo_sum:DI): Handle 64-bit CONST_INTs in 32-bit\n\tpatterns.  Correct length of high:DI instruction sequence.\n\nFrom-SVN: r119669", "tree": {"sha": "e34ec595bc4581bc54b0a45a2b16af45aa907c13", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e34ec595bc4581bc54b0a45a2b16af45aa907c13"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/920aeaf3da2eed578c4f2b73551a44a62b8329a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920aeaf3da2eed578c4f2b73551a44a62b8329a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920aeaf3da2eed578c4f2b73551a44a62b8329a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920aeaf3da2eed578c4f2b73551a44a62b8329a3/comments", "author": null, "committer": null, "parents": [{"sha": "44f31fec967ed184b6d808455e7417ab2a553284", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44f31fec967ed184b6d808455e7417ab2a553284", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44f31fec967ed184b6d808455e7417ab2a553284"}], "stats": {"total": 21, "additions": 20, "deletions": 1}, "files": [{"sha": "b2ad3536b7e45db71b289de7849cfdedaffc487c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920aeaf3da2eed578c4f2b73551a44a62b8329a3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920aeaf3da2eed578c4f2b73551a44a62b8329a3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=920aeaf3da2eed578c4f2b73551a44a62b8329a3", "patch": "@@ -1,3 +1,9 @@\n+2006-12-08  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n+\n+\tPR target/30039\n+\t* pa.md (high:DI and lo_sum:DI): Handle 64-bit CONST_INTs in 32-bit\n+\tpatterns.  Correct length of high:DI instruction sequence.\n+\n 2006-12-08  Mike Stump  <mrs@apple.com>\n \n \t* config/rs6000/t-darwin (TARGET_LIBGCC2_CFLAGS): Build"}, {"sha": "3b5a5fc28f0a4e35712bdd6bd1174acb51a27ae8", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/920aeaf3da2eed578c4f2b73551a44a62b8329a3/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/920aeaf3da2eed578c4f2b73551a44a62b8329a3/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=920aeaf3da2eed578c4f2b73551a44a62b8329a3", "patch": "@@ -4427,6 +4427,7 @@\n   switch (GET_CODE (op1))\n     {\n     case CONST_INT:\n+#if HOST_BITS_PER_WIDE_INT <= 32\n       operands[0] = operand_subword (op0, 1, 0, DImode);\n       output_asm_insn (\\\"ldil L'%1,%0\\\", operands);\n \n@@ -4435,6 +4436,15 @@\n \toutput_asm_insn (\\\"ldi -1,%0\\\", operands);\n       else\n \toutput_asm_insn (\\\"ldi 0,%0\\\", operands);\n+#else\n+      operands[0] = operand_subword (op0, 1, 0, DImode);\n+      operands[1] = GEN_INT (INTVAL (op1) & 0xffffffff);\n+      output_asm_insn (\\\"ldil L'%1,%0\\\", operands);\n+\n+      operands[0] = operand_subword (op0, 0, 0, DImode);\n+      operands[1] = GEN_INT (INTVAL (op1) >> 32);\n+      output_asm_insn (singlemove_string (operands), operands);\n+#endif\n       break;\n \n     case CONST_DOUBLE:\n@@ -4453,7 +4463,7 @@\n   return \\\"\\\";\n }\"\n   [(set_attr \"type\" \"move\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"12\")])\n \n (define_insn \"\"\n   [(set (match_operand:DI 0 \"move_dest_operand\"\n@@ -4613,6 +4623,9 @@\n      handle it correctly.  */\n   if (GET_CODE (operands[2]) == CONST_DOUBLE)\n     operands[2] = GEN_INT (CONST_DOUBLE_LOW (operands[2]));\n+  else if (HOST_BITS_PER_WIDE_INT > 32\n+\t   && GET_CODE (operands[2]) == CONST_INT)\n+    operands[2] = GEN_INT (INTVAL (operands[2]) & 0xffffffff);\n   if (which_alternative == 1)\n     output_asm_insn (\\\"copy %1,%0\\\", operands);\n   return \\\"ldo R'%G2(%R1),%R0\\\";"}]}