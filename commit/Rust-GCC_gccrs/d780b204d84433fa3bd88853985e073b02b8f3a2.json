{"sha": "d780b204d84433fa3bd88853985e073b02b8f3a2", "node_id": "C_kwDOANBUbNoAKGQ3ODBiMjA0ZDg0NDMzZmEzYmQ4ODg1Mzk4NWUwNzNiMDJiOGYzYTI", "commit": {"author": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-04-24T00:14:29Z"}, "committer": {"name": "antego", "email": "antego@users.noreply.github.com", "date": "2022-04-26T08:28:30Z"}, "message": "Implement macro expansion in `IfExpr`, `IfExprConseqElse`, `IfExprConseqIf`, `IfExprConseqIfLet`.\n\nAddresses #1141", "tree": {"sha": "4046d8b3a3c0cfc3f42ff8e780b01bc0374db1af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4046d8b3a3c0cfc3f42ff8e780b01bc0374db1af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d780b204d84433fa3bd88853985e073b02b8f3a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d780b204d84433fa3bd88853985e073b02b8f3a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d780b204d84433fa3bd88853985e073b02b8f3a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d780b204d84433fa3bd88853985e073b02b8f3a2/comments", "author": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antego", "id": 1451467, "node_id": "MDQ6VXNlcjE0NTE0Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/1451467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antego", "html_url": "https://github.com/antego", "followers_url": "https://api.github.com/users/antego/followers", "following_url": "https://api.github.com/users/antego/following{/other_user}", "gists_url": "https://api.github.com/users/antego/gists{/gist_id}", "starred_url": "https://api.github.com/users/antego/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antego/subscriptions", "organizations_url": "https://api.github.com/users/antego/orgs", "repos_url": "https://api.github.com/users/antego/repos", "events_url": "https://api.github.com/users/antego/events{/privacy}", "received_events_url": "https://api.github.com/users/antego/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b74044fb6278e373da607a8f1f5df2193ce27d65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74044fb6278e373da607a8f1f5df2193ce27d65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74044fb6278e373da607a8f1f5df2193ce27d65"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "842fbdf680a50615b9ba817b2076d4ad107611a6", "filename": "gcc/rust/expand/rust-attribute-visitor.cc", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d780b204d84433fa3bd88853985e073b02b8f3a2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d780b204d84433fa3bd88853985e073b02b8f3a2/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-attribute-visitor.cc?ref=d780b204d84433fa3bd88853985e073b02b8f3a2", "patch": "@@ -1630,6 +1630,9 @@ AttrVisitor::visit (AST::IfExpr &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n+  auto cond_fragment = expander.take_expanded_fragment (*this);\n+  if (cond_fragment.should_expand ())\n+    condition_expr = cond_fragment.take_expression_fragment ();\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1657,6 +1660,9 @@ AttrVisitor::visit (AST::IfExprConseqElse &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n+  auto cond_fragment = expander.take_expanded_fragment (*this);\n+  if (cond_fragment.should_expand ())\n+    condition_expr = cond_fragment.take_expression_fragment ();\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1692,6 +1698,9 @@ AttrVisitor::visit (AST::IfExprConseqIf &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n+  auto cond_fragment = expander.take_expanded_fragment (*this);\n+  if (cond_fragment.should_expand ())\n+    condition_expr = cond_fragment.take_expression_fragment ();\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \"\n@@ -1727,6 +1736,9 @@ AttrVisitor::visit (AST::IfExprConseqIfLet &expr)\n   // can't strip condition expr itself, but can strip sub-expressions\n   auto &condition_expr = expr.get_condition_expr ();\n   condition_expr->accept_vis (*this);\n+  auto cond_fragment = expander.take_expanded_fragment (*this);\n+  if (cond_fragment.should_expand ())\n+    condition_expr = cond_fragment.take_expression_fragment ();\n   if (condition_expr->is_marked_for_strip ())\n     rust_error_at (condition_expr->get_locus (),\n \t\t   \"cannot strip expression in this position - outer \""}, {"sha": "29fa651fcd279ff9a98759dffddd3dc92c9ac113", "filename": "gcc/testsuite/rust/compile/macro42.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d780b204d84433fa3bd88853985e073b02b8f3a2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d780b204d84433fa3bd88853985e073b02b8f3a2/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fmacro42.rs?ref=d780b204d84433fa3bd88853985e073b02b8f3a2", "patch": "@@ -0,0 +1,31 @@\n+// { dg-additional-options \"-w -frust-cfg=A\" }\n+macro_rules! cfg {\n+    () => {{}};\n+}\n+\n+fn main() -> i32 {\n+    let mut res = 0;\n+    if cfg!(A) {\n+        res = 1;\n+    }\n+\n+    if cfg!(A) {\n+        res = 2;\n+    } else {\n+        res = 3;\n+    }\n+\n+    if cfg!(A) {\n+        res = 4;\n+    } else if cfg!(A) {\n+        res = 5;\n+    }\n+\n+    let res = if cfg!(A) {\n+        6\n+    } else {\n+        7\n+    };\n+\n+    return res;\n+}"}]}