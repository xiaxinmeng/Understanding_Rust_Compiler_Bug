{"sha": "2285b0531de3b6f8c81c411ceebe707e38e52cdf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI4NWIwNTMxZGUzYjZmOGM4MWM0MTFjZWViZTcwN2UzOGU1MmNkZg==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2006-10-03T16:28:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2006-10-03T16:28:45Z"}, "message": "* decl.c, utils.c: Fix comment typos.\n\nFrom-SVN: r117405", "tree": {"sha": "1ae31441b081fca67ca135877d4a264fd166f168", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ae31441b081fca67ca135877d4a264fd166f168"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2285b0531de3b6f8c81c411ceebe707e38e52cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2285b0531de3b6f8c81c411ceebe707e38e52cdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2285b0531de3b6f8c81c411ceebe707e38e52cdf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2285b0531de3b6f8c81c411ceebe707e38e52cdf/comments", "author": null, "committer": null, "parents": [{"sha": "baf2c2583472707acd2f6d11d55fc176fe30835f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf2c2583472707acd2f6d11d55fc176fe30835f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf2c2583472707acd2f6d11d55fc176fe30835f"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "77b33552ccd9c1ed55f75eff49fec49a4bc92c5a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=2285b0531de3b6f8c81c411ceebe707e38e52cdf", "patch": "@@ -1,3 +1,7 @@\n+2006-10-03  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* decl.c, utils.c: Fix comment typos.\n+\n 2006-09-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* decl.c (gnat_to_gnu_entity) <E_Procedure>: Do not set \"const\" flag"}, {"sha": "870d5cc842736e589e5454e343b9be67bd0bd7c9", "filename": "gcc/ada/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdecl.c?ref=2285b0531de3b6f8c81c411ceebe707e38e52cdf", "patch": "@@ -2440,7 +2440,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t       To break the circle we first build a dummy COMPONENT_REF which\n \t       represents the \"get to the parent\" operation and initialize\n \t       each of those discriminants to a COMPONENT_REF of the above\n-\t       dummy parent referencing the corresponding discrimant of the\n+\t       dummy parent referencing the corresponding discriminant of the\n \t       base type of the parent subtype.  */\n \t    gnu_get_parent = build3 (COMPONENT_REF, void_type_node,\n \t\t\t\t     build0 (PLACEHOLDER_EXPR, gnu_type),"}, {"sha": "511391dc393d5fc1daf2bfb337cc5968467b1bbc", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2285b0531de3b6f8c81c411ceebe707e38e52cdf/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=2285b0531de3b6f8c81c411ceebe707e38e52cdf", "patch": "@@ -84,7 +84,7 @@ static tree handle_const_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nothrow_attribute (tree *, tree, tree, int, bool *);\n \n /* Table of machine-independent internal attributes for Ada.  We support\n-   this minimal set ot attributes to accomodate the Alpha back-end which\n+   this minimal set ot attributes to accommodate the Alpha back-end which\n    unconditionally puts them on its builtins.  */\n const struct attribute_spec gnat_internal_attribute_table[] =\n {"}]}