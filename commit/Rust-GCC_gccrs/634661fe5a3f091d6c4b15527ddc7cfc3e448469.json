{"sha": "634661fe5a3f091d6c4b15527ddc7cfc3e448469", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM0NjYxZmU1YTNmMDkxZDZjNGIxNTUyN2RkYzdjZmMzZTQ0ODQ2OQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-01-18T22:15:51Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-01-18T22:15:51Z"}, "message": "check-init.c: Fix comment typos.\n\n\t* check-init.c: Fix comment typos.\n\t* class.c: Likewise.\n\t* constants.c: Likewise.\n\t* decl.c: Likewise.\n\t* except.c: Likewise.\n\t* expr.c: Likewise.\n\t* java-except.h: Likewise.\n\t* java-tree.h: Likewise.\n\t* javaop.h: Likewise.\n\t* jcf-dump.c: Likewise.\n\t* jcf-io.c: Likewise.\n\t* jcf-parse.c: Likewise.\n\t* jcf-write.c: Likewise.\n\t* lang.c: Likewise.\n\t* mangle.c: Likewise.\n\t* typeck.c: Likewise.\n\t* verify.c: Likewise.\n\nFrom-SVN: r61477", "tree": {"sha": "844d5b8a384374b2b793ce1f6da97b6f65d60189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/844d5b8a384374b2b793ce1f6da97b6f65d60189"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/634661fe5a3f091d6c4b15527ddc7cfc3e448469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634661fe5a3f091d6c4b15527ddc7cfc3e448469", "html_url": "https://github.com/Rust-GCC/gccrs/commit/634661fe5a3f091d6c4b15527ddc7cfc3e448469", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/634661fe5a3f091d6c4b15527ddc7cfc3e448469/comments", "author": null, "committer": null, "parents": [{"sha": "a1fb4e912af42cf0b6f54136575ffdb09384a4a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1fb4e912af42cf0b6f54136575ffdb09384a4a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1fb4e912af42cf0b6f54136575ffdb09384a4a2"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "32556e78d33d2ae3dac052e56483c31b7b1b86b9", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -1,3 +1,23 @@\n+2003-01-18  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* check-init.c: Fix comment typos.\n+\t* class.c: Likewise.\n+\t* constants.c: Likewise.\n+\t* decl.c: Likewise.\n+\t* except.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* java-except.h: Likewise.\n+\t* java-tree.h: Likewise.\n+\t* javaop.h: Likewise.\n+\t* jcf-dump.c: Likewise.\n+\t* jcf-io.c: Likewise.\n+\t* jcf-parse.c: Likewise.\n+\t* jcf-write.c: Likewise.\n+\t* lang.c: Likewise.\n+\t* mangle.c: Likewise.\n+\t* typeck.c: Likewise.\n+\t* verify.c: Likewise.\n+\n 2003-01-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* Make-lang.in (java/jcf-write.o): Depend on $(TM_P_H)."}, {"sha": "3ca989b424bab85ff79a604916c394412964f453", "filename": "gcc/java/check-init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fcheck-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fcheck-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fcheck-init.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -407,7 +407,7 @@ struct alternatives\n   /* The value of num_current_locals at the start of this compound. */\n   int num_locals;\n \n-  /* The value of the \"before\" set at the start of the control stucture.\n+  /* The value of the \"before\" set at the start of the control structure.\n    Used for SWITCH_EXPR but not set for LABELED_BLOCK_EXPR. */\n   words saved;\n "}, {"sha": "6d4949777cde15e5f9701066f9df861ff78cfb62", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -2044,7 +2044,7 @@ register_class (void)\n \n    The preferred mechanism is through the .jcr section, which contain\n    a list of pointers to classes which get registered during\n-   constructor invoction time.  The fallback mechanism is to generate\n+   constructor invocation time.  The fallback mechanism is to generate\n    a `constructor' function which calls _Jv_RegisterClass for each\n    class in this file.  */\n "}, {"sha": "cdf307c7f6589b163884b6dd31c4da1e7b8c1573", "filename": "gcc/java/constants.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fconstants.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fconstants.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fconstants.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -401,7 +401,7 @@ build_ref_from_constant_pool (int index)\n   return build1 (INDIRECT_REF, ptr_type_node, t);\n }\n \n-/* Build an initializer for the constants field of the current constal pool.\n+/* Build an initializer for the constants field of the current constant pool.\n    Should only be called at top-level, since it may emit declarations. */\n \n tree"}, {"sha": "99c2652160e904dbb6bc7e665273f747204dd7e3", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -65,7 +65,7 @@ tree java_lang_cloneable_identifier_node;\n /* Name of the Serializable class.  */\n tree java_io_serializable_identifier_node;\n \n-/* Set to nonzero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initialization code\n    before static field references.  */\n extern int always_initialize_class_p;\n "}, {"sha": "9ad41a658ba347e8530699a1fb87d7b775ac94d1", "filename": "gcc/java/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexcept.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -315,7 +315,7 @@ prepare_eh_table_type (tree type)\n \n   /* The \"type\" (metch_info) in a (Java) exception table is one:\n    * a) NULL - meaning match any type in a try-finally.\n-   * b) a pointer to a (ccmpiled) class (low-order bit 0).\n+   * b) a pointer to a (compiled) class (low-order bit 0).\n    * c) a pointer to the Utf8Const name of the class, plus one\n    * (which yields a value with low-order bit 1). */\n "}, {"sha": "e5c677c2c11c314321f1e8033a07356b05991e14", "filename": "gcc/java/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -92,7 +92,7 @@ static GTY(()) tree methods_ident;\n static GTY(()) tree ncode_ident;\n tree dtable_ident = NULL_TREE;\n \n-/* Set to nonzero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initialization code\n    before static field references.  */\n int always_initialize_class_p;\n \n@@ -125,7 +125,7 @@ int always_initialize_class_p;\n \n static GTY(()) tree quick_stack;\n \n-/* A free-list of unused permamnet TREE_LIST nodes. */\n+/* A free-list of unused permanent TREE_LIST nodes.  */\n static GTY((deletable (\"\"))) tree tree_list_free_list;\n \n /* The stack pointer of the Java virtual machine.\n@@ -795,7 +795,7 @@ build_java_arraystore_check (tree array, tree object)\n \n   /* No check is needed if the element type is final or is itself an array.  \n      Also check that element_type matches object_type, since in the bytecode \n-     compilation case element_type may be the actual element type of the arra\n+     compilation case element_type may be the actual element type of the array\n      rather than its declared type. */\n   if (element_type == object_type\n       && (TYPE_ARRAY_P (TREE_TYPE (element_type))\n@@ -955,7 +955,7 @@ expand_java_multianewarray (tree class_type, int ndim)\n     ARRAY is an array type. May expand some bound checking and NULL\n     pointer checking. RHS_TYPE_NODE we are going to store. In the case\n     of the CHAR/BYTE/BOOLEAN SHORT, the type popped of the stack is an\n-    INT. In those cases, we make the convertion.\n+    INT. In those cases, we make the conversion.\n \n     if ARRAy is a reference type, the assignment is checked at run-time\n     to make sure that the RHS can be assigned to the array element"}, {"sha": "b536ce0623ee8003fb339ee60fc25b03b9fadf77", "filename": "gcc/java/java-except.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjava-except.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjava-except.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-except.h?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -34,7 +34,7 @@ struct eh_range\n        and the TREE_VALUE is the LABEL_DECL of the handler. */\n     tree handlers;\n \n-    /* Surrunding handler, if any. */\n+    /* Surrounding handler, if any. */\n     struct eh_range *outer;\n \n     /* The first child range.  It is is nested inside this range"}, {"sha": "88e6f07622b11d936efa82ae89f97d57d383c95b", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -810,7 +810,7 @@ union lang_tree_node\n   (DECL_LANG_SPECIFIC(DECL)->u.f.ict)\n /* A list of all the static method calls in the method DECL (if optimizing).\n    Actually each TREE_VALUE points to a COMPONT_EXPR that wraps the\n-   invoation so we can later patch it. */\n+   invocation so we can later patch it.  */\n #define DECL_FUNCTION_STATIC_METHOD_INVOCATION_COMPOUND(DECL) \\\n   (DECL_LANG_SPECIFIC(DECL)->u.f.smic)\n /* The Number of Artificial Parameters (NAP) DECL contains. this$<n>\n@@ -838,7 +838,7 @@ union lang_tree_node\n #define FIELD_LOCAL_ALIAS_USED(DECL) DECL_LANG_FLAG_7 (DECL)\n \n /* True when DECL is a this$<n> field. Note that\n-   FIELD_LOCAL_ALIAS_USED can be differenciated when tested against\n+   FIELD_LOCAL_ALIAS_USED can be differentiated when tested against\n    FIELD_LOCAL_ALIAS.  */\n #define FIELD_THISN(DECL) DECL_LANG_FLAG_7 (DECL)\n \n@@ -1517,7 +1517,7 @@ extern tree *type_map;\n #define MODIFY_EXPR_FROM_INITIALIZATION_P(EXPR) TREE_LANG_FLAG_2 (EXPR)\n \n /* True if EXPR (a TREE_TYPE denoting a class type) has its methods\n-   already checked (for redifitions, etc, see java_check_regular_methods.) */\n+   already checked (for redefinitions, etc, see java_check_regular_methods.) */\n #define CLASS_METHOD_CHECKED_P(EXPR) TREE_LANG_FLAG_2 (EXPR)\n \n /* True if TYPE (a TREE_TYPE denoting a class type) was found to"}, {"sha": "da09254ad10c40b01539bc5184fa74b3aa5ecb35", "filename": "gcc/java/javaop.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjavaop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjavaop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjavaop.h?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -39,7 +39,7 @@ typedef unsigned int16\tuint16;\n #endif\n typedef unsigned int32\tuint32;\n \n-/* A signed 64-bit (or more) integral type, suiteable for Java's 'long'. */\n+/* A signed 64-bit (or more) integral type, suitable for Java's 'long'.  */\n #ifndef int64\n #define int64 long long\n #endif"}, {"sha": "6d976e53450ec43e7806201801f8a6c24d96f141", "filename": "gcc/java/jcf-dump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-dump.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -1079,7 +1079,7 @@ disassemble_method (JCF* jcf, const unsigned char *byte_ops, int len)\n /* This is the actual code emitted for each of opcodes in javaops.def.\n    The actual opcode-specific stuff is handled by the OPKIND macro.\n    I.e. for an opcode whose OPKIND is BINOP, the BINOP will be called.\n-   Those macros are defiend below.  The OPKINDs that do not have any\n+   Those macros are defined below.  The OPKINDs that do not have any\n    inline parameters (such as BINOP) and therefore do mot need anything\n    else to me printed out just use an empty body. */\n "}, {"sha": "abc20736b7de817874da00879e5dbc4874359cad", "filename": "gcc/java/jcf-io.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-io.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-io.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-io.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -310,7 +310,7 @@ typedef struct memoized_dirlist_entry\n   struct dirent **files;\n } memoized_dirlist_entry;\n \n-/* Returns true if ENTRY (a memoized_dirlist_entry *) correponds to\n+/* Returns true if ENTRY (a memoized_dirlist_entry *) corresponds to\n    the directory given by KEY (a char *) giving the directory \n    name.  */\n \n@@ -378,7 +378,7 @@ caching_stat (char *filename, struct stat *buf)\n   else\n     dent = *((memoized_dirlist_entry **) slot);\n \n-  /* Put the spearator back.  */\n+  /* Put the separator back.  */\n   if (sep)\n     *sep = DIR_SEPARATOR;\n "}, {"sha": "892e5616b5f636a0f33bbde9f097d07293a98eb4", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -71,7 +71,7 @@ The Free Software Foundation is independent of Sun Microsystems, Inc.  */\n \n extern struct obstack temporary_obstack;\n \n-/* Set to nonzero value in order to emit class initilization code\n+/* Set to nonzero value in order to emit class initialization code\n    before static field references.  */\n extern int always_initialize_class_p;\n \n@@ -357,7 +357,7 @@ handle_innerclass_attribute (int count, JCF *jcf)\n \t entry isn't a member (like an inner class) the value is 0. */\n       int ocii = JCF_readu2 (jcf);\n       /* Read inner_name_index. If the class we're dealing with is\n-\t an annonymous class, it must be 0. */\n+\t an anonymous class, it must be 0. */\n       int ini = JCF_readu2 (jcf);\n       /* Read the access flag. */\n       int acc = JCF_readu2 (jcf);"}, {"sha": "7133fdb128d8c878b90978615b3d11f01a569d51", "filename": "gcc/java/jcf-write.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-write.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fjcf-write.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-write.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -129,7 +129,7 @@ struct jcf_block\n \n      If the label has been defined:\n      Until perform_relocations is finished, this is the maximum possible\n-     value of the bytecode offset at the begnning of this block.\n+     value of the bytecode offset at the beginning of this block.\n      After perform_relocations, it is the actual offset (pc). */\n   int pc;\n \n@@ -537,7 +537,7 @@ alloc_handler (struct jcf_block *start_label, struct jcf_block *end_label,\n /* The index of jvm local variable allocated for this DECL.\n    This is assigned when generating .class files;\n    contrast DECL_LOCAL_SLOT_NUMBER which is set when *reading* a .class file.\n-   (We don't allocate DECL_LANG_SPECIFIC for locals from Java sourc code.) */\n+   (We don't allocate DECL_LANG_SPECIFIC for locals from Java source code.) */\n \n #define DECL_LOCAL_INDEX(DECL) DECL_ALIGN(DECL)\n \n@@ -1069,7 +1069,7 @@ emit_jsr (struct jcf_block *target, struct jcf_partial *state)\n \n /* Generate code to evaluate EXP.  If the result is true,\n    branch to TRUE_LABEL; otherwise, branch to FALSE_LABEL.\n-   TRUE_BRANCH_FIRST is a code geneation hint that the\n+   TRUE_BRANCH_FIRST is a code generation hint that the\n    TRUE_LABEL may follow right after this. (The idea is that we\n    may be able to optimize away GOTO TRUE_LABEL; TRUE_LABEL:) */\n \n@@ -2820,7 +2820,7 @@ generate_classfile (tree clas, struct jcf_partial *state)\n   append_chunk (NULL, 0, state);\n   cpool_chunk = state->chunk;\n \n-  /* Next allocate the chunk containing acces_flags through fields_counr. */\n+  /* Next allocate the chunk containing acces_flags through fields_count. */\n   if (clas == object_type_node)\n     i = 10;\n   else\n@@ -3292,7 +3292,7 @@ make_class_file_name (tree clas)\n   return r;\n }\n \n-/* Write out the contens of a class (RECORD_TYPE) CLAS, as a .class file.\n+/* Write out the contents of a class (RECORD_TYPE) CLAS, as a .class file.\n    The output .class file name is make_class_file_name(CLAS). */\n \n void"}, {"sha": "63ced434b3088bf9744023a775f1e194f9ca8a89", "filename": "gcc/java/lang.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -920,7 +920,7 @@ java_unsafe_for_reeval (tree t)\n    This variable is used to avoid multiple calls to the static\n    constructor for each class.  \n \n-   It looks somthing like this:\n+   It looks something like this:\n \n    foo ()\n    {\n@@ -937,7 +937,7 @@ java_unsafe_for_reeval (tree t)\n    Each of these boolean variables has an entry in the\n    DECL_FUNCTION_INIT_TEST_TABLE of a method.  When inlining a method\n    we must merge the DECL_FUNCTION_INIT_TEST_TABLE from the function\n-   being linlined and create the boolean variables in the outermost\n+   being inlined and create the boolean variables in the outermost\n    scope of the method being inlined into.  */\n \n /* Create a mapping from a boolean variable in a method being inlined"}, {"sha": "ca5997cba7488bfb871d9edf2d6c2f68a0a49328", "filename": "gcc/java/mangle.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fmangle.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -278,7 +278,7 @@ find_compression_array_template_match (tree string)\n \n /* We go through the compression table and try to find a complete or\n    partial match. The function returns the compression table entry\n-   that (evenutally partially) matches TYPE. *NEXT_CURRENT can be set\n+   that (eventually partially) matches TYPE. *NEXT_CURRENT can be set\n    to the rest of TYPE to be mangled. */\n \n static int\n@@ -380,7 +380,7 @@ mangle_record_type (tree type, int for_pointer)\n }\n \n /* Mangle a pointer type. There are two cases: the pointer is already\n-   in the compression table: the compression is emited sans 'P'\n+   in the compression table: the compression is emitted sans 'P'\n    indicator. Otherwise, a 'P' is emitted and, depending on the type,\n    a partial compression or/plus the rest of the mangling. */\n \n@@ -474,7 +474,7 @@ mangle_array_type (tree p_type)\n   compression_table_add (p_type);\n }\n \n-/* Write a substition string for entry I. Substitution string starts a\n+/* Write a substitution string for entry I. Substitution string starts a\n    -1 (encoded S_.) The base is 36, and the code shamlessly taken from\n    cp/mangle.c.  */\n "}, {"sha": "468de74cbb6841c4912c1b64ebe217ca0779c2c3", "filename": "gcc/java/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Ftypeck.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -337,7 +337,7 @@ java_array_type_length (tree array_type)\n \n /* An array of unknown length will be ultimately given an length of\n    -2, so that we can still have `length' producing a negative value\n-   even if found. This was part of an optimization amaing at removing\n+   even if found. This was part of an optimization aiming at removing\n    `length' from static arrays. We could restore it, FIXME.  */\n \n tree"}, {"sha": "a5375bf135701c5589edf63c3009dde932c7138e", "filename": "gcc/java/verify.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fverify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/634661fe5a3f091d6c4b15527ddc7cfc3e448469/gcc%2Fjava%2Fverify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fverify.c?ref=634661fe5a3f091d6c4b15527ddc7cfc3e448469", "patch": "@@ -363,7 +363,7 @@ start_pc_cmp (const void *xp, const void *yp)\n #define VERIFICATION_ERROR_WITH_INDEX(MESSAGE) \\\n   do { message = MESSAGE;  goto error_with_index; } while (0)\n \n-/* Recursive helper function to pop argument types during verifiation.\n+/* Recursive helper function to pop argument types during verification.\n    ARG_TYPES is the list of formal parameter types.\n    Return NULL on success and a freshly malloc'd error message on failure. */\n \n@@ -713,7 +713,7 @@ verify_jvm_instructions (JCF* jcf, const unsigned char *byte_ops, long length)\n \tprev_eh_ranges = NULL_EH_RANGE;\n \n \t/* Allocate decl and rtx for this variable now, so if we're not\n-\t   optmizing, we get a temporary that survives the whole method. */\n+\t   optimizing, we get a temporary that survives the whole method. */\n \tfind_local_variable (index, type, oldpc);\n \n         if (TYPE_IS_WIDE (type))"}]}