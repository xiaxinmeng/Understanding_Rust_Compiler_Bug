{"sha": "8473ef7be60443c06c949571995f00e2793c2c5b", "node_id": "C_kwDOANBUbNoAKDg0NzNlZjdiZTYwNDQzYzA2Yzk0OTU3MTk5NWYwMGUyNzkzYzJjNWI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-23T23:28:48Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2022-05-23T23:28:48Z"}, "message": "test plugins: use \"final\" and \"override\" directly, rather than via macros\n\ngcc/testsuite/ChangeLog:\n\t* gcc.dg/plugin/analyzer_gil_plugin.c: Replace uses of \"FINAL\" and\n\t\"OVERRIDE\" with \"final\" and \"override\".\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "ddf08ed85cdfc67b7d454044c8d2a2fb3559d7bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddf08ed85cdfc67b7d454044c8d2a2fb3559d7bf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8473ef7be60443c06c949571995f00e2793c2c5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8473ef7be60443c06c949571995f00e2793c2c5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8473ef7be60443c06c949571995f00e2793c2c5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8473ef7be60443c06c949571995f00e2793c2c5b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58c9c7407a1a992ac253826790cd2b8920e3fe8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58c9c7407a1a992ac253826790cd2b8920e3fe8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58c9c7407a1a992ac253826790cd2b8920e3fe8f"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "b5ae128e2e207c8ced79d3e6d8e8186729b6fd2f", "filename": "gcc/testsuite/gcc.dg/plugin/analyzer_gil_plugin.c", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8473ef7be60443c06c949571995f00e2793c2c5b/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_gil_plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8473ef7be60443c06c949571995f00e2793c2c5b/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_gil_plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fanalyzer_gil_plugin.c?ref=8473ef7be60443c06c949571995f00e2793c2c5b", "patch": "@@ -47,13 +47,13 @@ class gil_state_machine : public state_machine\n public:\n   gil_state_machine (logger *logger);\n \n-  bool inherited_state_p () const FINAL OVERRIDE { return false; }\n+  bool inherited_state_p () const final override { return false; }\n \n   bool on_stmt (sm_context *sm_ctxt,\n \t\tconst supernode *node,\n-\t\tconst gimple *stmt) const FINAL OVERRIDE;\n+\t\tconst gimple *stmt) const final override;\n \n-  bool can_purge_p (state_t s) const FINAL OVERRIDE;\n+  bool can_purge_p (state_t s) const final override;\n \n   void check_for_pyobject_usage_without_gil (sm_context *sm_ctxt,\n \t\t\t\t\t     const supernode *node,\n@@ -82,12 +82,12 @@ class gil_diagnostic : public pending_diagnostic\n {\n public:\n   /* There isn't a warning ID for us to use.  */\n-  int get_controlling_option () const FINAL OVERRIDE\n+  int get_controlling_option () const final override\n   {\n     return 0;\n   }\n \n-  location_t fixup_location (location_t loc) const FINAL OVERRIDE\n+  location_t fixup_location (location_t loc) const final override\n   {\n     /* Ideally we'd check for specific macros here, and only\n        resolve certain macros.  */\n@@ -98,7 +98,7 @@ class gil_diagnostic : public pending_diagnostic\n   }\n \n   label_text describe_state_change (const evdesc::state_change &change)\n-    FINAL OVERRIDE\n+    final override\n   {\n     if (change.is_global_p ()\n \t&& change.m_new_state == m_sm.m_released_gil)\n@@ -125,25 +125,25 @@ class double_save_thread : public gil_diagnostic\n   : gil_diagnostic (sm), m_call (call)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"double_save_thread\";\n   }\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     const double_save_thread &sub_other\n       = (const double_save_thread &)base_other;\n     return m_call == sub_other.m_call;\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"nested usage of %qs\", \"Py_BEGIN_ALLOW_THREADS\");\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"nested usage of %qs here\",\n \t\t\t       \"Py_BEGIN_ALLOW_THREADS\");\n@@ -162,12 +162,12 @@ class fncall_without_gil : public gil_diagnostic\n     m_arg_idx (arg_idx)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"fncall_without_gil\";\n   }\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     const fncall_without_gil &sub_other\n       = (const fncall_without_gil &)base_other;\n@@ -176,7 +176,7 @@ class fncall_without_gil : public gil_diagnostic\n \t    && m_arg_idx == sub_other.m_arg_idx);\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     if (m_callee_fndecl)\n@@ -191,7 +191,7 @@ class fncall_without_gil : public gil_diagnostic\n \t\t\t m_arg_idx + 1, m_callee_fndecl);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     if (m_callee_fndecl)\n       return ev.formatted_print (\"use of PyObject as argument %i of %qE here\"\n@@ -216,25 +216,25 @@ class pyobject_usage_without_gil : public gil_diagnostic\n   : gil_diagnostic (sm), m_expr (expr)\n   {}\n \n-  const char *get_kind () const FINAL OVERRIDE\n+  const char *get_kind () const final override\n   {\n     return \"pyobject_usage_without_gil\";\n   }\n \n-  bool subclass_equal_p (const pending_diagnostic &base_other) const OVERRIDE\n+  bool subclass_equal_p (const pending_diagnostic &base_other) const override\n   {\n     return same_tree_p (m_expr,\n \t\t\t((const pyobject_usage_without_gil&)base_other).m_expr);\n   }\n \n-  bool emit (rich_location *rich_loc) FINAL OVERRIDE\n+  bool emit (rich_location *rich_loc) final override\n   {\n     auto_diagnostic_group d;\n     return warning_at (rich_loc, get_controlling_option (),\n \t\t       \"use of PyObject %qE without the GIL\", m_expr);\n   }\n \n-  label_text describe_final_event (const evdesc::final_event &ev) FINAL OVERRIDE\n+  label_text describe_final_event (const evdesc::final_event &ev) final override\n   {\n     return ev.formatted_print (\"PyObject %qE used here without the GIL\",\n \t\t\t       m_expr);"}]}