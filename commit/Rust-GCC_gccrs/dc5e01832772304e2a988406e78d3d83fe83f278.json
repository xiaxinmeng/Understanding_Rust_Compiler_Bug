{"sha": "dc5e01832772304e2a988406e78d3d83fe83f278", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM1ZTAxODMyNzcyMzA0ZTJhOTg4NDA2ZTc4ZDNkODNmZTgzZjI3OA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-05T11:42:31Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-05T11:48:11Z"}, "message": "Fix bad naming of primitive types such as u64 which ended up as usize\n\nThere was a bad port over of the gccgo named_type implementation to try\nbe simple but this ended up overwriting the names of other primitive types\nleading to confusing gimple debug sessions.\n\nIn debugging this I have added a set of ids which are the builtin primitive\ntypes ids and we assert that this range of ids will never be overriten by\nother types during compilation.", "tree": {"sha": "a7b2fca46909c8d6c44d3fba5a77b58d10544ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7b2fca46909c8d6c44d3fba5a77b58d10544ef7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc5e01832772304e2a988406e78d3d83fe83f278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5e01832772304e2a988406e78d3d83fe83f278", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc5e01832772304e2a988406e78d3d83fe83f278", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc5e01832772304e2a988406e78d3d83fe83f278/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210ae4f7b0fea9671482b8f01354fd5b9274f878", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/210ae4f7b0fea9671482b8f01354fd5b9274f878", "html_url": "https://github.com/Rust-GCC/gccrs/commit/210ae4f7b0fea9671482b8f01354fd5b9274f878"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "5d19099c2f07d5bc8cfdc6d7f5dfcf7d3ad796ba", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5e01832772304e2a988406e78d3d83fe83f278/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5e01832772304e2a988406e78d3d83fe83f278/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=dc5e01832772304e2a988406e78d3d83fe83f278", "patch": "@@ -58,8 +58,9 @@ class Context\n \tTyTy::BaseType *lookup;\n \trust_assert (tyctx->lookup_type (ref, &lookup));\n \n-\tauto compiled = TyTyCompile::compile (backend, lookup);\n-\tcompiled_type_map[ref] = compiled;\n+\tBtype *compiled = TyTyCompile::compile (backend, lookup);\n+\tcompiled_type_map.insert (std::pair<HirId, Btype *> (ref, compiled));\n+\tbuiltin_range.insert (ref);\n       }\n   }\n \n@@ -94,7 +95,8 @@ class Context\n   void insert_compiled_type (HirId id, ::Btype *type,\n \t\t\t     const TyTy::BaseType *ref = nullptr)\n   {\n-    compiled_type_map[id] = type;\n+    rust_assert (builtin_range.find (id) == builtin_range.end ());\n+    compiled_type_map.insert (std::pair<HirId, Btype *> (id, type));\n     if (ref != nullptr)\n       {\n \tstd::pair<HirId, ::Btype *> elem (id, type);\n@@ -297,6 +299,7 @@ class Context\n   Resolver::TypeCheckContext *tyctx;\n   Analysis::Mappings *mappings;\n   ConstFold::Context *const_ctx;\n+  std::set<HirId> builtin_range;\n \n   // state\n   std::vector<fncontext> fn_stack;"}, {"sha": "74a8b5221f191c44951843a21cfbe21a2742baef", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc5e01832772304e2a988406e78d3d83fe83f278/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc5e01832772304e2a988406e78d3d83fe83f278/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=dc5e01832772304e2a988406e78d3d83fe83f278", "patch": "@@ -1306,11 +1306,27 @@ Gcc_backend::named_type (const std::string &name, Btype *btype,\n   if (type == error_mark_node)\n     return this->error_type ();\n \n+  // The middle-end expects a basic type to have a name.  In Rust every\n+  // basic type will have a name.  The first time we see a basic type,\n+  // give it whatever Rust name we have at this point.\n+  if (TYPE_NAME (type) == NULL_TREE\n+      && location.gcc_location () == BUILTINS_LOCATION\n+      && (TREE_CODE (type) == INTEGER_TYPE || TREE_CODE (type) == REAL_TYPE\n+\t  || TREE_CODE (type) == COMPLEX_TYPE\n+\t  || TREE_CODE (type) == BOOLEAN_TYPE))\n+    {\n+      tree decl = build_decl (BUILTINS_LOCATION, TYPE_DECL,\n+\t\t\t      get_identifier_from_string (name), type);\n+      TYPE_NAME (type) = decl;\n+      return this->make_type (type);\n+    }\n+\n+  tree copy = build_variant_type_copy (type);\n   tree decl = build_decl (location.gcc_location (), TYPE_DECL,\n-\t\t\t  get_identifier_from_string (name), type);\n-\n-  TYPE_NAME (type) = decl;\n-  return this->make_type (type);\n+\t\t\t  get_identifier_from_string (name), copy);\n+  DECL_ORIGINAL_TYPE (decl) = type;\n+  TYPE_NAME (copy) = decl;\n+  return this->make_type (copy);\n }\n \n // Return a pointer type used as a marker for a circular type."}]}