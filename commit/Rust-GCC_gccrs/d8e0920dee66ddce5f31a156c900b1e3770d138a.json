{"sha": "d8e0920dee66ddce5f31a156c900b1e3770d138a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlMDkyMGRlZTY2ZGRjZTVmMzFhMTU2YzkwMGIxZTM3NzBkMTM4YQ==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2018-02-28T23:39:52Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@gcc.gnu.org", "date": "2018-02-28T23:39:52Z"}, "message": "Warray-bounds-2.c: Declare helper static to avoid -fpic test failures.\n\n\ngcc/testsuite/ChangeLog:\n\n\t* c-c++-common/Warray-bounds-2.c: Declare helper static to avoid\n\t-fpic test failures.\n\t* c-c++-common/Wrestrict-2.c: Same.\n\t* c-c++-common/Wstringop-truncation.c: Same.\n\t* gcc.dg/Warray-bounds-22.c: Same.\n\t* gcc.dg/Wstringop-overflow.c: Same.\n\t* gcc.dg/attr-alloc_size-3.c (unsigned_range): Same.\n\t(signed_range): Same.\n\t(unsigned_anti_range): Same.\n\t* gcc.dg/attr-alloc_size-4.c (unsigned_range): Same.\n\t(signed_range): Same.\n\t(unsigned_anti_range): Same.\n\t* gcc.dg/attr-alloc_size-7.c: Same.\n\t* gcc.dg/attr-alloc_size-8.c: Same.\n\t* gcc.dg/builtin-alloc-size.c: Same.\n\t* gcc.dg/builtin-stpncpy.c: Same.\n\t* gcc.dg/builtins-nonnull.c: Same.\n\t* gcc.dg/nonnull-4.c (g16_1_3_5_7_11_13): Same.\n\t* gcc.dg/pr79214.c: Same.\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-1.c: Same.\n\t* gcc.dg/tree-ssa/builtin-snprintf-warn-2.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-5.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-11.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-12.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-14.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-19.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Same.\n\t* gcc.dg/tree-ssa/builtin-sprintf-warn-9.c: Same.\n\nFrom-SVN: r258089", "tree": {"sha": "fb6626fab468881decdd5a5d7f4563de6353cbaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb6626fab468881decdd5a5d7f4563de6353cbaa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e0920dee66ddce5f31a156c900b1e3770d138a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e0920dee66ddce5f31a156c900b1e3770d138a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e0920dee66ddce5f31a156c900b1e3770d138a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e0920dee66ddce5f31a156c900b1e3770d138a/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ea97097e5ae3d9979e6f72e44f72d665703bad8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ea97097e5ae3d9979e6f72e44f72d665703bad8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ea97097e5ae3d9979e6f72e44f72d665703bad8"}], "stats": {"total": 201, "additions": 105, "deletions": 96}, "files": [{"sha": "aac49641416cdda8abcfa1157176797233d093e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -1,3 +1,36 @@\n+2018-02-28  Martin Sebor  <msebor@redhat.com>\n+\n+\t* c-c++-common/Warray-bounds-2.c: Declare helper static to avoid\n+\t-fpic test failures.\n+\t* c-c++-common/Wrestrict-2.c: Same.\n+\t* c-c++-common/Wstringop-truncation.c: Same.\n+\t* gcc.dg/Warray-bounds-22.c: Same.\n+\t* gcc.dg/Wstringop-overflow.c: Same.\n+\t* gcc.dg/attr-alloc_size-3.c (unsigned_range): Same.\n+\t(signed_range): Same.\n+\t(unsigned_anti_range): Same.\n+\t* gcc.dg/attr-alloc_size-4.c (unsigned_range): Same.\n+\t(signed_range): Same.\n+\t(unsigned_anti_range): Same.\n+\t* gcc.dg/attr-alloc_size-7.c: Same.\n+\t* gcc.dg/attr-alloc_size-8.c: Same.\n+\t* gcc.dg/builtin-alloc-size.c: Same.\n+\t* gcc.dg/builtin-stpncpy.c: Same.\n+\t* gcc.dg/builtins-nonnull.c: Same.\n+\t* gcc.dg/nonnull-4.c (g16_1_3_5_7_11_13): Same.\n+\t* gcc.dg/pr79214.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-1.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-snprintf-warn-2.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-5.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-11.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-12.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-13.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-14.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-15.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-19.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-3.c: Same.\n+\t* gcc.dg/tree-ssa/builtin-sprintf-warn-9.c: Same.\n+\n 2018-02-28  David Edelsohn  <dje.gcc@gmail.com>\n \n \tPR target/84014"}, {"sha": "db05f04163d7d5313da645fdd624b847eee0e0f9", "filename": "gcc/testsuite/c-c++-common/Warray-bounds-2.c", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWarray-bounds-2.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -24,7 +24,8 @@ struct __attribute__ ((packed)) Array\n \n /* Exercise memcpy out-of-bounds offsets with an array of known size.  */\n \n-void wrap_memcpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_memcpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   memcpy (d, s + i, n);   /* { dg-warning \"offset 46 is out of the bounds \\\\\\[0, 45] of object .ar. with type .(struct )?Array.\" \"memcpy\" } */\n }\n@@ -39,7 +40,8 @@ void call_memcpy_src_xsize (char *d, size_t n)\n \n /* Exercise memcpy out-of-bounds offsets with an array of unknown size.  */\n \n-void wrap_memcpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_memcpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   memcpy (d, s + i, n);   /* { dg-warning \"pointer overflow between offset \\[0-9\\]+ and size 3\" \"memcpy\" } */\n }\n@@ -49,7 +51,8 @@ void call_memcpy_src_diff_max (char *d, const char *s, size_t n)\n   wrap_memcpy_src_diff_max (d, s, MAX, 3);\n }\n \n-void wrap_memcpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_memcpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   memcpy (d + i, s, n);   /* { dg-warning \"offset 47 is out of the bounds \\\\\\[0, 45] of object .ar1. with type .(struct )?Array.\" \"memcpy\" } */\n }\n@@ -62,7 +65,8 @@ void call_memcpy_dst_xsize (const char *s, size_t n)\n   sink (&ar1);\n }\n \n-void wrap_memcpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_memcpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   memcpy (d + i, s, n);   /* { dg-warning \"offset -?\\[0-9\\]+ is out of the bounds \\\\\\[0, 45] of object .ar2. with type .(struct )?Array.\" \"memcpy\" } */\n }\n@@ -76,7 +80,7 @@ void call_memcpy_dst_diff_max (const char *s, size_t n)\n }\n \n \n-void wrap_strcat_src_xsize (char *d, const char *s, ptrdiff_t i)\n+static void wrap_strcat_src_xsize (char *d, const char *s, ptrdiff_t i)\n {\n   strcat (d, s + i);   /* { dg-warning \"offset 46 is out of the bounds \\\\\\[0, 45] of object .ar3. with type .(struct )?Array.\" \"strcat\" } */\n }\n@@ -89,7 +93,7 @@ void call_strcat_src_xsize (char *d)\n   sink (&ar3);\n }\n \n-void wrap_strcat_dst_xsize (char *d, const char *s, ptrdiff_t i)\n+static void wrap_strcat_dst_xsize (char *d, const char *s, ptrdiff_t i)\n {\n   strcat (d + i, s);   /* { dg-warning \"offset 47 is out of the bounds \\\\\\[0, 45] of object .ar4. with type .(struct )?Array.\" \"strcat\" } */\n }\n@@ -103,7 +107,7 @@ void call_strcat_dst_xsize (const char *s)\n }\n \n \n-void wrap_strcpy_src_xsize (char *d, const char *s, ptrdiff_t i)\n+static void wrap_strcpy_src_xsize (char *d, const char *s, ptrdiff_t i)\n {\n   strcpy (d, s + i);   /* { dg-warning \"offset 48 is out of the bounds \\\\\\[0, 45] of object .ar5. with type .(struct )?Array.\" \"strcpy\" } */\n }\n@@ -116,7 +120,7 @@ void call_strcpy_src_xsize (char *d)\n   sink (&ar5);\n }\n \n-void wrap_strcpy_dst_xsize (char *d, const char *s, ptrdiff_t i)\n+static void wrap_strcpy_dst_xsize (char *d, const char *s, ptrdiff_t i)\n {\n   strcpy (d + i, s);   /* { dg-warning \"offset 49 is out of the bounds \\\\\\[0, 45] of object .ar6. with type .(struct )?Array.\" \"strcpy\" } */\n }\n@@ -132,7 +136,8 @@ void call_strcpy_dst_xsize (const char *s)\n \n /* Exercise strncpy out-of-bounds offsets with an array of known size.  */\n \n-void wrap_strncpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_strncpy_src_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   strncpy (d, s + i, n);   /* { dg-warning \"offset 46 is out of the bounds \\\\\\[0, 45] of object .ar7. with type '(struct )?Array.\" \"strncpy\" } */\n }\n@@ -147,7 +152,8 @@ void call_strncpy_src_xsize (char *d, size_t n)\n \n /* Exercise strncpy out-of-bounds offsets with an array of unknown size.  */\n \n-void wrap_strncpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_strncpy_src_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   /* Unlike in the similar call to memcpy(), there is no pointer\n      overflow here because the size N is not added to the source\n@@ -160,7 +166,8 @@ void call_strncpy_src_diff_max (char *d, const char *s, size_t n)\n   wrap_strncpy_src_diff_max (d, s, MAX, 3);\n }\n \n-void wrap_strncpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_strncpy_dst_xsize (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   strncpy (d + i, s, n);   /* { dg-warning \"offset 47 is out of the bounds \\\\\\[0, 45] of object .ar8. with type .(struct )?Array.\" \"strncpy\" } */\n }\n@@ -173,21 +180,22 @@ void call_strncpy_dst_xsize (const char *s, size_t n)\n   sink (&ar8);\n }\n \n-void wrap_strncpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n+static void\n+wrap_strncpy_dst_diff_max (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   strncpy (d + i, s, n);   /* { dg-warning \"offset -\\[0-9\\]+ is out of the bounds \\\\\\[0, 45] of object .ar9. with type .(struct )?Array.\" \"strncpy\" } */\n }\n \n void call_strncpy_dst_diff_max (const char *s, size_t n)\n {\n-  struct Array ar9;       /* { dg-message \".ar9. declared here\" } */\n+  struct Array ar9;       /* { dg-message \".ar9. declared here\" \"strncpy\" } */\n   sink (&ar9);\n   wrap_strncpy_dst_diff_max (ar9.a17, s, MAX, n);\n   sink (&ar9);\n }\n \n-void wrap_strncpy_dstarray_diff_neg (char *d, const char *s, ptrdiff_t i,\n-\t\t\t\t     size_t n)\n+static void\n+wrap_strncpy_dstarray_diff_neg (char *d, const char *s, ptrdiff_t i, size_t n)\n {\n   strncpy (d + i, s, n);   /* { dg-warning \"offset -\\[0-9\\]+ is out of the bounds \\\\\\[0, 90] of object .ar10. with type .(struct )?Array ?\\\\\\[2].\" \"strncpy\" } */\n }"}, {"sha": "2c10eeffb515d6573b0a17a295337c7dc4035abf", "filename": "gcc/testsuite/c-c++-common/Wrestrict-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWrestrict-2.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -10,7 +10,7 @@\n \n #include <string.h>\n \n-void wrap_memcpy (void *d, const void *s, size_t n)\n+static void wrap_memcpy (void *d, const void *s, size_t n)\n {\n   memcpy (d, s, n);   /* { dg-warning \"source argument is the same as destination\" \"memcpy\" } */\n }\n@@ -22,7 +22,7 @@ void call_memcpy (void *d, size_t n)\n }\n \n \n-void wrap_strcat (char *d, const char *s)\n+static void wrap_strcat (char *d, const char *s)\n {\n   strcat (d, s);   /* { dg-warning \"source argument is the same as destination\" \"strcat\" } */\n }\n@@ -34,7 +34,7 @@ void call_strcat (char *d)\n }\n \n \n-void wrap_strcpy (char *d, const char *s)\n+static void wrap_strcpy (char *d, const char *s)\n {\n   strcpy (d, s);   /* { dg-warning \"source argument is the same as destination\" \"strcpy\" } */\n }\n@@ -46,7 +46,7 @@ void call_strcpy (char *d)\n }\n \n \n-void wrap_strncat (char *d, const char *s, size_t n)\n+static void wrap_strncat (char *d, const char *s, size_t n)\n {\n   strncat (d, s, n);   /* { dg-warning \"source argument is the same as destination\" \"strncat\" } */\n }\n@@ -58,7 +58,7 @@ void call_strncat (char *d, size_t n)\n }\n \n \n-void wrap_strncpy (char *d, const char *s, size_t n)\n+static void wrap_strncpy (char *d, const char *s, size_t n)\n {\n   strncpy (d, s, n);   /* { dg-warning \"source argument is the same as destination\" \"strncpy\" } */\n }"}, {"sha": "e78e85ec8702f7186763de4a525597733363be65", "filename": "gcc/testsuite/c-c++-common/Wstringop-truncation.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2FWstringop-truncation.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -18,13 +18,13 @@ char* strncpy (char*, const char*, size_t);\n }\n #endif\n \n-extern size_t unsigned_value (void)\n+static size_t unsigned_value (void)\n {\n   extern volatile size_t unsigned_value_source;\n   return unsigned_value_source;\n }\n \n-size_t unsigned_range (size_t min, size_t max)\n+static size_t unsigned_range (size_t min, size_t max)\n {\n   size_t val = unsigned_value ();\n   return val < min || max < val ? min : val;"}, {"sha": "8165140ef42b257f9a2526ca3805078d9061ec25", "filename": "gcc/testsuite/gcc.dg/Warray-bounds-22.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWarray-bounds-22.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -11,13 +11,13 @@\n typedef __PTRDIFF_TYPE__ ptrdiff_t;\n typedef __SIZE_TYPE__    size_t;\n \n-extern ptrdiff_t signed_value (void)\n+static ptrdiff_t signed_value (void)\n {\n   extern volatile ptrdiff_t signed_value_source;\n   return signed_value_source;\n }\n \n-ptrdiff_t signed_range (ptrdiff_t min, ptrdiff_t max)\n+static ptrdiff_t signed_range (ptrdiff_t min, ptrdiff_t max)\n {\n   ptrdiff_t val = signed_value ();\n   return val < min || max < val ? min : val;"}, {"sha": "c615dae03fc31ce3e000c6cdf56775e7b9bcb2a2", "filename": "gcc/testsuite/gcc.dg/Wstringop-overflow.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWstringop-overflow.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -15,13 +15,13 @@ extern char* strncpy (char*, const char*, size_t);\n \n void sink (void*);\n \n-extern size_t unsigned_value (void)\n+static size_t unsigned_value (void)\n {\n   extern volatile size_t unsigned_value_source;\n   return unsigned_value_source;\n }\n \n-size_t unsigned_range (size_t min, size_t max)\n+static size_t unsigned_range (size_t min, size_t max)\n {\n   size_t val = unsigned_value ();\n   return val < min || max < val ? min : val;"}, {"sha": "96ff077ef20f3208d22164a3f6e9a56e24faaf53", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-3.c", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-3.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -65,7 +65,7 @@ void* f_llong_2 (long long, long long) ALLOC_SIZE (1, 2);\n void* f_size_1 (size_t) ALLOC_SIZE (1);\n void* f_size_2 (size_t, size_t) ALLOC_SIZE (1, 2);\n \n-size_t\n+static size_t\n unsigned_range (size_t min, size_t max)\n {\n   extern size_t random_unsigned_value (void);\n@@ -74,7 +74,7 @@ unsigned_range (size_t min, size_t max)\n   return val;\n }\n \n-long long\n+static long long\n signed_range (long long min, long long max)\n {\n   extern long long random_signed_value (void);\n@@ -83,7 +83,7 @@ signed_range (long long min, long long max)\n   return val;\n }\n \n-size_t\n+static size_t\n unsigned_anti_range (size_t min, size_t max)\n {\n   extern size_t random_unsigned_value (void);\n@@ -93,16 +93,6 @@ unsigned_anti_range (size_t min, size_t max)\n   return val;\n }\n \n-long long\n-signed_anti_range (long long min, long long max)\n-{\n-  extern long long random_signed_value (void);\n-  long long val = random_signed_value ();\n-  if (min <= val && val <= max)\n-    val = min - 1;\n-  return val;\n-}\n-\n #define UR(min, max) unsigned_range (min, max)\n #define SR(min, max) signed_range (min, max)\n "}, {"sha": "6ee064bb9fe4f05fb4acf4dc3769775e23158e20", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-4.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -25,7 +25,7 @@ void* f_int_2 (int, int) ALLOC_SIZE (1, 2);\n void* f_size_1 (size_t) ALLOC_SIZE (1);\n void* f_size_2 (size_t, size_t) ALLOC_SIZE (1, 2);\n \n-size_t\n+static size_t\n unsigned_range (size_t min, size_t max)\n {\n   extern size_t random_unsigned_value (void);\n@@ -34,7 +34,7 @@ unsigned_range (size_t min, size_t max)\n   return val;\n }\n \n-int\n+static int\n signed_range (int min, int max)\n {\n   extern int random_signed_value (void);\n@@ -43,7 +43,7 @@ signed_range (int min, int max)\n   return val;\n }\n \n-size_t\n+static size_t\n unsigned_anti_range (size_t min, size_t max)\n {\n   extern size_t random_unsigned_value (void);\n@@ -53,7 +53,7 @@ unsigned_anti_range (size_t min, size_t max)\n   return val;\n }\n \n-int\n+static int\n signed_anti_range (int min, int max)\n {\n   extern int random_signed_value (void);"}, {"sha": "68602ec37d978a61d10e4bccee83717d4d926c59", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-7.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -13,7 +13,7 @@ typedef __SIZE_TYPE__ size_t;\n \n void sink (void*);\n \n-size_t maxobjsize (void)\n+static size_t maxobjsize (void)\n {\n   return MAXOBJSZ;\n }"}, {"sha": "91d7eb58e298f77f1561a47c44ce58043b7b0e6f", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-8.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-8.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -6,23 +6,21 @@\n /* { dg-require-effective-target alloca } */\n /* { dg-options \"-O2 -Walloc-size-larger-than=123 -Walloca-larger-than=234 -Wvla-larger-than=345\" } */\n \n-#define SIZE_MAX   __SIZE_MAX__\n-\n typedef __SIZE_TYPE__ size_t;\n \n void sink (void*);\n \n-size_t alloc_size_limit (void)\n+static size_t alloc_size_limit (void)\n {\n   return 123;\n }\n \n-size_t alloca_limit (void)\n+static size_t alloca_limit (void)\n {\n   return 234;\n }\n \n-size_t vla_limit (void)\n+static size_t vla_limit (void)\n {\n   return 345;\n }"}, {"sha": "400fd9bc8f809db0be7485088abe7c410463df21", "filename": "gcc/testsuite/gcc.dg/builtin-alloc-size.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-alloc-size.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -8,7 +8,7 @@\n \n void sink (void*);\n \n-unsigned size (unsigned n)\n+static unsigned size (unsigned n)\n {\n   return n;\n }"}, {"sha": "9a094fba38bad3394570591cd68b4e51677e1cea", "filename": "gcc/testsuite/gcc.dg/builtin-stpncpy.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-stpncpy.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -12,7 +12,7 @@ void sink (char*);\n \n size_t value (void);\n \n-size_t range (size_t min, size_t max)\n+static size_t range (size_t min, size_t max)\n {\n   size_t val = value ();\n   return val < min || max < val ? min : val;"}, {"sha": "f8c482e9825110d6b83b91bbbc5b35ae32eceab5", "filename": "gcc/testsuite/gcc.dg/builtins-nonnull.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltins-nonnull.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -7,7 +7,7 @@\n \n typedef struct FILE FILE;\n \n-char* null (void)\n+static char* null (void)\n {\n   return 0;\n }"}, {"sha": "a28458cd4f2c174be5f3a6891ff4c57953243eb7", "filename": "gcc/testsuite/gcc.dg/nonnull-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fnonnull-4.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -25,7 +25,7 @@ g16_1_3_5_7_11_13 (void*, void*, void*, void*,\n \t\t   void*, void*, void*, void*,\n \t\t   void*, void*, void*, void*);\n \n-void* null (void) { return 0; }\n+static void* null (void) { return 0; }\n \n void test (void)\n {"}, {"sha": "23119edf16c815bff8982bfd450181bf57b06849", "filename": "gcc/testsuite/gcc.dg/pr79214.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr79214.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -10,7 +10,7 @@ typedef __SIZE_TYPE__ size_t;\n char d[3];\n char s[4];\n \n-size_t range (void)\n+static size_t range (void)\n {\n   extern size_t size ();\n   size_t n = size ();"}, {"sha": "42284dc9c5b4056892bb5bc5ad5d44975467c5d8", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-1.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -17,7 +17,7 @@ typedef struct\n char buffer[1024];\n #define buffer(size) (buffer + sizeof buffer - size)\n \n-int value_range (int min, int max)\n+static int value_range (int min, int max)\n {\n   extern int value (void);\n   int val = value ();"}, {"sha": "e1e1a02b576edda04d74a011995b6caa6561ea40", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-warn-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-warn-2.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -17,7 +17,7 @@ typedef struct\n char buffer[1024];\n #define buffer(size) (buffer + sizeof buffer - size)\n \n-int value_range (int min, int max)\n+static int value_range (int min, int max)\n {\n   extern int value (void);\n   int val = value ();"}, {"sha": "fb7a1bd1e441983b4bb3a45dcc3581597b9b7975", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-5.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-5.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -28,7 +28,7 @@\n     ASSERT (n, expect);\t\t\t\t\t\\\n   } while (0)\n \n-int ival (int i) { return i; }\n+static int ival (int i) { return i; }\n \n /* Generate a signed int value in the specified range.  */\n "}, {"sha": "02072b55e869be396eeaa4fecc31075d8769d63a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-11.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-11.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -19,18 +19,12 @@ typedef __WCHAR_TYPE__ wchar_t;\n extern int int_value (void);\n extern size_t size_value (void);\n \n-int int_range (int min, int max)\n+static int int_range (int min, int max)\n {\n   int n = int_value ();\n   return n < min || max < n ? min : n;\n }\n \n-size_t size_range (size_t min, size_t max)\n-{\n-  size_t n = size_value ();\n-  return n < min || max < n ? min : n;\n-}\n-\n void sink (char*, char*);\n \n int dummy_sprintf (char*, const char*, ...);"}, {"sha": "7137f826ac9c3a31fe16929399ac4e7f91e9a015", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-12.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-12.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -23,14 +23,14 @@ int dummy_sprintf (char*, const char*, ...);\n char buffer [256];\n extern char *ptr;\n \n-int int_range (int min, int max)\n+static int int_range (int min, int max)\n {\n   extern int int_value (void);\n   int n = int_value ();\n   return n < min || max < n ? min : n;\n }\n \n-unsigned uint_range (unsigned min, unsigned max)\n+static unsigned uint_range (unsigned min, unsigned max)\n {\n   extern unsigned uint_value (void);\n   unsigned n = uint_value ();"}, {"sha": "1175127e48707e2663bf20b03ed2a63d03a70b48", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-13.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-13.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -22,20 +22,13 @@ int dummy_sprintf (char*, const char*, ...);\n char buffer [256];\n extern char *ptr;\n \n-int int_range (int min, int max)\n+static int int_range (int min, int max)\n {\n   extern int int_value (void);\n   int n = int_value ();\n   return n < min || max < n ? min : n;\n }\n \n-unsigned uint_range (unsigned min, unsigned max)\n-{\n-  extern unsigned uint_value (void);\n-  unsigned n = uint_value ();\n-  return n < min || max < n ? min : n;\n-}\n-\n /* Evaluate to an array of SIZE characters when non-negative, or to\n    a pointer to an unknown object otherwise.  */\n #define buffer(size)\t\t\t\t\t\\"}, {"sha": "d6f3f0c0d9c6b04297902aa578f803af0dc1a689", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-14.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-14.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -17,13 +17,13 @@ typedef __SIZE_TYPE__  size_t;\n \n extern int int_value (void);\n \n-int int_range (int min, int max)\n+static int int_range (int min, int max)\n {\n   int n = int_value ();\n   return n < min || max < n ? min : n;\n }\n \n-const char*\n+static const char*\n choose_string (const char *s1, const char *s2, const char *s3)\n {\n   int i = int_value ();"}, {"sha": "29ae50c317d693a58eb6343132a128a8606f61f6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-15.c", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-15.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -24,20 +24,13 @@ int dummy_sprintf (char*, const char*, ...);\n char buffer [1024];\n extern char *ptr;\n \n-int int_range (int min, int max)\n+static int int_range (int min, int max)\n {\n   extern int int_value (void);\n   int n = int_value ();\n   return n < min || max < n ? min : n;\n }\n \n-unsigned uint_range (unsigned min, unsigned max)\n-{\n-  extern unsigned uint_value (void);\n-  unsigned n = uint_value ();\n-  return n < min || max < n ? min : n;\n-}\n-\n /* Evaluate to an array of SIZE characters when non-negative, or to\n    a pointer to an unknown object otherwise.  */\n #define buffer(size)\t\t\t\t\t\\"}, {"sha": "1ab19e060ca8934c1ed03f4a29d8b13f6d4c81bb", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-19.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-19.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -6,7 +6,7 @@\n \n void sink (char*);\n \n-long long integer_range (long long min, long long max)\n+static long long integer_range (long long min, long long max)\n {\n   extern long long integer_value (void);\n   long long n = integer_value ();"}, {"sha": "d06248b4bd3eebcdf24a3881cac4fcfa7a6c3e7f", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-3.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-3.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -40,8 +40,8 @@ void sink (void*);\n    of the operand even when it's not constant (i.e., makes use of\n    inlining and constant propagation information).  */\n \n-int i (int x) { return x; }\n-const char* s (const char *str) { return str; }\n+static int i (int x) { return x; }\n+static const char* s (const char *str) { return str; }\n \n /* Function to \"generate\" a unique unknown number (as far as GCC can\n    tell) each time it's called.  It prevents the optimizer from being\n@@ -140,42 +140,42 @@ extern int rand (void);\n    avoid diagnosing the output of sufficiently constrained arguments to\n    integer directives.  */\n \n-signed char\n+static signed char\n range_schar (signed char min, signed char max)\n {\n   signed char val = rand ();\n   return val < min || max < val ? min : val;\n }\n \n-unsigned char\n+static unsigned char\n range_uchar (unsigned char min, unsigned char max)\n {\n   unsigned char val = rand ();\n   return val < min || max < val ? min : val;\n }\n \n-signed short\n+static signed short\n range_sshrt (signed short min, signed short max)\n {\n   signed short val = rand ();\n   return val < min || max < val ? min : val;\n }\n \n-unsigned short\n+static unsigned short\n range_ushrt (unsigned short min, unsigned short max)\n {\n   unsigned short val = rand ();\n   return val < min || max < val ? min : val;\n }\n \n-signed int\n+static signed int\n range_sint (signed int min, signed int max)\n {\n   signed int val = rand ();\n   return val < min || max < val ? min : val;\n }\n \n-unsigned int\n+static unsigned int\n range_uint (unsigned int min, unsigned int max)\n {\n   unsigned int val = rand ();"}, {"sha": "9eb462e4c7184a94b85fc45da38b3d8ea9acba5d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-warn-9.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e0920dee66ddce5f31a156c900b1e3770d138a/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-warn-9.c?ref=d8e0920dee66ddce5f31a156c900b1e3770d138a", "patch": "@@ -38,8 +38,8 @@ char *ptr;\n    of the operand even when it's not constant (i.e., makes use of\n    inlining and constant propagation information).  */\n \n-int i (int x) { return x; }\n-const char* s (const char *str) { return str; }\n+static int i (int x) { return x; }\n+static const char* s (const char *str) { return str; }\n \n /* Function to \"generate\" a unique unknown number (as far as GCC can\n    tell) each time it's called.  It prevents the optimizer from being\n@@ -48,7 +48,7 @@ const char* s (const char *str) { return str; }\n extern int value (void);\n \n /* Return a value in the range [MIN, MAX].  */\n-int range (int min, int max)\n+static int range (int min, int max)\n {\n   int val = value ();\n   return val < min || max < val ? min : val;"}]}