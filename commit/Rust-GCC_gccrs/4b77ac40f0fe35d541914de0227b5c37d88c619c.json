{"sha": "4b77ac40f0fe35d541914de0227b5c37d88c619c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3N2FjNDBmMGZlMzVkNTQxOTE0ZGUwMjI3YjVjMzdkODhjNjE5Yw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-10-12T14:59:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-10-12T14:59:56Z"}, "message": "print_rtx_function: integrate dumping of the CFG into the insn chain\n\ngcc/ChangeLog:\n\t* function-tests.c: Include \"print-rtl.h\".\n\t(selftest::test_expansion_to_rtl): Call print_rtx_function on the\n\tfunction, and verify what is dumped.\n\t* print-rtl-function.c (print_edge): New function.\n\t(begin_any_block): New function.\n\t(end_any_block): New function.\n\t(can_have_basic_block_p): New function.\n\t(print_rtx_function): Track the basic blocks of insns in the\n\tchain, wrapping those that are within blocks within \"(block)\"\n\tdirectives.  Remove the \"(cfg)\" directive.\n\nFrom-SVN: r241057", "tree": {"sha": "6f600c5fed34a8cdcd35c7c128cf15b652125813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f600c5fed34a8cdcd35c7c128cf15b652125813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b77ac40f0fe35d541914de0227b5c37d88c619c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b77ac40f0fe35d541914de0227b5c37d88c619c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b77ac40f0fe35d541914de0227b5c37d88c619c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b77ac40f0fe35d541914de0227b5c37d88c619c/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2934018d2785fa77b1e1e4fdd5c92139210b5056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2934018d2785fa77b1e1e4fdd5c92139210b5056", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2934018d2785fa77b1e1e4fdd5c92139210b5056"}], "stats": {"total": 195, "additions": 156, "deletions": 39}, "files": [{"sha": "35f38fff13ac9de0ad7632efd687e4c55f1826db", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b77ac40f0fe35d541914de0227b5c37d88c619c", "patch": "@@ -1,3 +1,16 @@\n+2016-10-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* function-tests.c: Include \"print-rtl.h\".\n+\t(selftest::test_expansion_to_rtl): Call print_rtx_function on the\n+\tfunction, and verify what is dumped.\n+\t* print-rtl-function.c (print_edge): New function.\n+\t(begin_any_block): New function.\n+\t(end_any_block): New function.\n+\t(can_have_basic_block_p): New function.\n+\t(print_rtx_function): Track the basic blocks of insns in the\n+\tchain, wrapping those that are within blocks within \"(block)\"\n+\tdirectives.  Remove the \"(cfg)\" directive.\n+\n 2016-10-12  David Malcolm  <dmalcolm@redhat.com>\n \n \t* selftest.c (selftest::read_file): New function."}, {"sha": "049a07f9a86f3fc0b941d451d29a794c22230e6c", "filename": "gcc/function-tests.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2Ffunction-tests.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2Ffunction-tests.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction-tests.c?ref=4b77ac40f0fe35d541914de0227b5c37d88c619c", "patch": "@@ -78,6 +78,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"ipa-ref.h\"\n #include \"cgraph.h\"\n #include \"selftest.h\"\n+#include \"print-rtl.h\"\n \n #if CHECKING_P\n \n@@ -643,6 +644,27 @@ test_expansion_to_rtl ()\n \n   /* ...etc; any further checks are likely to over-specify things\n      and run us into target dependencies.  */\n+\n+  /* Verify that print_rtl_function is sane.  */\n+  named_temp_file tmp_out (\".rtl\");\n+  FILE *outfile = fopen (tmp_out.get_filename (), \"w\");\n+  print_rtx_function (outfile, fun);\n+  fclose (outfile);\n+\n+  char *dump = read_file (SELFTEST_LOCATION, tmp_out.get_filename ());\n+  ASSERT_STR_CONTAINS (dump, \"(function \\\"test_fn\\\"\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"  (insn-chain\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"    (block 2\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"      (edge-from entry (flags \\\"FALLTHRU\\\"))\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"      (insn \"); /* ...etc.  */\n+  ASSERT_STR_CONTAINS (dump, \"      (edge-to exit (flags \\\"FALLTHRU\\\"))\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"    ) ;; block 2\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"  ) ;; insn-chain\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"  (crtl\\n\");\n+  ASSERT_STR_CONTAINS (dump, \"  ) ;; crtl\\n\");\n+  ASSERT_STR_CONTAINS (dump, \") ;; function \\\"test_fn\\\"\\n\");\n+\n+  free (dump);\n }\n \n /* Run all of the selftests within this file.  */"}, {"sha": "4f9b4efdb2e3cd0a25f82799aa657210e15a8081", "filename": "gcc/print-rtl-function.c", "status": "modified", "additions": 121, "deletions": 39, "changes": 160, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2Fprint-rtl-function.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b77ac40f0fe35d541914de0227b5c37d88c619c/gcc%2Fprint-rtl-function.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl-function.c?ref=4b77ac40f0fe35d541914de0227b5c37d88c619c", "patch": "@@ -33,14 +33,106 @@ along with GCC; see the file COPYING3.  If not see\n #include \"langhooks.h\"\n #include \"emit-rtl.h\"\n \n+/* Print an \"(edge-from)\" or \"(edge-to)\" directive describing E\n+   to OUTFILE.  */\n+\n+static void\n+print_edge (FILE *outfile, edge e, bool from)\n+{\n+  fprintf (outfile, \"      (%s \", from ? \"edge-from\" : \"edge-to\");\n+  basic_block bb = from ? e->src : e->dest;\n+  gcc_assert (bb);\n+  switch (bb->index)\n+    {\n+    case ENTRY_BLOCK:\n+      fprintf (outfile, \"entry\");\n+      break;\n+    case EXIT_BLOCK:\n+      fprintf (outfile, \"exit\");\n+      break;\n+    default:\n+      fprintf (outfile, \"%i\", bb->index);\n+      break;\n+    }\n+\n+  /* Express edge flags as a string with \" | \" separator.\n+     e.g. (flags \"FALLTHRU | DFS_BACK\").  */\n+  fprintf (outfile, \" (flags \\\"\");\n+  bool seen_flag = false;\n+#define DEF_EDGE_FLAG(NAME,IDX) \\\n+  do {\t\t\t\t\t\t\\\n+    if (e->flags & EDGE_##NAME)\t\t\t\\\n+      {\t\t\t\t\t\t\\\n+\tif (seen_flag)\t\t\t\t\\\n+\t  fprintf (outfile, \" | \");\t\t\\\n+\tfprintf (outfile, \"%s\", (#NAME));\t\\\n+\tseen_flag = true;\t\t\t\\\n+      }\t\t\t\t\t\t\\\n+  } while (0);\n+#include \"cfg-flags.def\"\n+#undef DEF_EDGE_FLAG\n+\n+  fprintf (outfile, \"\\\"))\\n\");\n+}\n+\n+/* If BB is non-NULL, print the start of a \"(block)\" directive for it\n+   to OUTFILE, otherwise do nothing.  */\n+\n+static void\n+begin_any_block (FILE *outfile, basic_block bb)\n+{\n+  if (!bb)\n+    return;\n+\n+  edge e;\n+  edge_iterator ei;\n+\n+  fprintf (outfile, \"    (block %i\\n\", bb->index);\n+  FOR_EACH_EDGE (e, ei, bb->preds)\n+    print_edge (outfile, e, true);\n+}\n+\n+/* If BB is non-NULL, print the end of a \"(block)\" directive for it\n+   to OUTFILE, otherwise do nothing.  */\n+\n+static void\n+end_any_block (FILE *outfile, basic_block bb)\n+{\n+  if (!bb)\n+    return;\n+\n+  edge e;\n+  edge_iterator ei;\n+\n+  FOR_EACH_EDGE (e, ei, bb->succs)\n+    print_edge (outfile, e, false);\n+  fprintf (outfile, \"    ) ;; block %i\\n\", bb->index);\n+}\n+\n+/* Determine if INSN is of a kind that can have a basic block.  */\n+\n+static bool\n+can_have_basic_block_p (const rtx_insn *insn)\n+{\n+  rtx_code code = GET_CODE (insn);\n+  if (code == BARRIER)\n+    return false;\n+  gcc_assert (GET_RTX_FORMAT (code)[2] == 'B');\n+  return true;\n+}\n+\n /* Write FN to OUTFILE in a form suitable for parsing, with indentation\n-   and comments to make the structure easy for a human to grok.\n+   and comments to make the structure easy for a human to grok.  Track\n+   the basic blocks of insns in the chain, wrapping those that are within\n+   blocks within \"(block)\" directives.\n \n    Example output:\n \n-     (function \"times_two\"\n-       (insn-chain\n-\t (note 1 0 4 (nil) NOTE_INSN_DELETED)\n+   (function \"times_two\"\n+     (insn-chain\n+       (note 1 0 4 (nil) NOTE_INSN_DELETED)\n+       (block 2\n+\t (edge-from entry (flags \"FALLTHRU\"))\n \t (note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)\n \t (insn 2 4 3 2 (set (mem/c:SI (plus:DI (reg/f:DI 82 virtual-stack-vars)\n \t\t\t     (const_int -4 [0xfffffffffffffffc])) [1 i+0 S4 A32])\n@@ -69,23 +161,15 @@ along with GCC; see the file COPYING3.  If not see\n \t\t  (nil))\n \t (insn 15 14 0 2 (use (reg/i:SI 0 ax)) t.c:4 -1\n \t\t  (nil))\n-       ) ;; insn-chain\n-       (cfg\n-\t (bb 0\n-\t   (edge 0 2 (flags 0x1))\n-\t ) ;; bb\n-\t (bb 2\n-\t   (edge 2 1 (flags 0x1))\n-\t ) ;; bb\n-\t (bb 1\n-\t ) ;; bb\n-       ) ;; cfg\n-       (crtl\n-\t (return_rtx\n-\t   (reg/i:SI 0 ax)\n-\t ) ;; return_rtx\n-       ) ;; crtl\n-     ) ;; function \"times_two\"\n+\t (edge-to exit (flags \"FALLTHRU\"))\n+       ) ;; block 2\n+     ) ;; insn-chain\n+     (crtl\n+       (return_rtx\n+\t  (reg/i:SI 0 ax)\n+       ) ;; return_rtx\n+     ) ;; crtl\n+   ) ;; function \"times_two\"\n */\n \n DEBUG_FUNCTION void\n@@ -99,27 +183,25 @@ print_rtx_function (FILE *outfile, function *fn)\n \n   /* The instruction chain.  */\n   fprintf (outfile, \"  (insn-chain\\n\");\n+  basic_block curr_bb = NULL;\n   for (rtx_insn *insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    print_rtl_single_with_indent (outfile, insn, 4);\n+    {\n+      basic_block insn_bb;\n+      if (can_have_basic_block_p (insn))\n+\tinsn_bb = BLOCK_FOR_INSN (insn);\n+      else\n+\tinsn_bb = NULL;\n+      if (curr_bb != insn_bb)\n+\t{\n+\t  end_any_block (outfile, curr_bb);\n+\t  curr_bb = insn_bb;\n+\t  begin_any_block (outfile, curr_bb);\n+\t}\n+      print_rtl_single_with_indent (outfile, insn, curr_bb ? 6 : 4);\n+    }\n+  end_any_block (outfile, curr_bb);\n   fprintf (outfile, \"  ) ;; insn-chain\\n\");\n \n-  /* The CFG.  */\n-  fprintf (outfile, \"  (cfg\\n\");\n-  {\n-    basic_block bb;\n-    FOR_ALL_BB_FN (bb, fn)\n-      {\n-\tfprintf (outfile, \"    (bb %i\\n\", bb->index);\n-\tedge e;\n-\tedge_iterator ei;\n-\tFOR_EACH_EDGE (e, ei, bb->succs)\n-\t  fprintf (outfile, \"      (edge %i %i (flags 0x%x))\\n\",\n-\t\t   e->src->index, e->dest->index, e->flags);\n-\tfprintf (outfile, \"    ) ;; bb\\n\");\n-      }\n-  }\n-  fprintf (outfile, \"  ) ;; cfg\\n\");\n-\n   /* Additional RTL state.  */\n   fprintf (outfile, \"  (crtl\\n\");\n   fprintf (outfile, \"    (return_rtx \\n\");"}]}