{"sha": "c613138b6ce48448fa7f62dd03513d28919361d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzYxMzEzOGI2Y2U0ODQ0OGZhN2Y2MmRkMDM1MTNkMjg5MTkzNjFkNg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2019-06-05T14:14:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2019-06-05T14:14:40Z"}, "message": "fold-const.c (extract_muldiv_1): Do not distribute a multiplication by a power-of-two value.\n\n\t* fold-const.c (extract_muldiv_1) <PLUS_EXPR>: Do not distribute a\n\tmultiplication by a power-of-two value.\n\t(fold_plusminus_mult_expr): Use pow2p_hwi to spot a power-of-two value\n\tand turn the modulo operation into a masking operation.\n\nFrom-SVN: r271963", "tree": {"sha": "27268ad59c88a62106450ec1019ad35b0af6396d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27268ad59c88a62106450ec1019ad35b0af6396d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c613138b6ce48448fa7f62dd03513d28919361d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c613138b6ce48448fa7f62dd03513d28919361d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c613138b6ce48448fa7f62dd03513d28919361d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c613138b6ce48448fa7f62dd03513d28919361d6/comments", "author": null, "committer": null, "parents": [{"sha": "2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2098f8ec2f82310104d1e3eb0a3ac0003e78600a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2098f8ec2f82310104d1e3eb0a3ac0003e78600a"}], "stats": {"total": 54, "additions": 46, "deletions": 8}, "files": [{"sha": "2be354c903511af3e6eea7c7b8853f3fd078d530", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c613138b6ce48448fa7f62dd03513d28919361d6", "patch": "@@ -1,3 +1,10 @@\n+2019-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* fold-const.c (extract_muldiv_1) <PLUS_EXPR>: Do not distribute a\n+\tmultiplication by a power-of-two value.\n+\t(fold_plusminus_mult_expr): Use pow2p_hwi to spot a power-of-two value\n+\tand turn the modulo operation into a masking operation.\n+\n 2019-06-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/90733"}, {"sha": "8252cc6bb6bfd5407653c2eee62899696b8f19ab", "filename": "gcc/fold-const.c", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c613138b6ce48448fa7f62dd03513d28919361d6", "patch": "@@ -6475,8 +6475,12 @@ extract_muldiv_1 (tree t, tree c, enum tree_code code, tree wide_type,\n \t apply the distributive law to commute the multiply and addition\n \t if the multiplication of the constants doesn't overflow\n \t and overflow is defined.  With undefined overflow\n-\t op0 * c might overflow, while (op0 + orig_op1) * c doesn't.  */\n-      if (code == MULT_EXPR && TYPE_OVERFLOW_WRAPS (ctype))\n+\t op0 * c might overflow, while (op0 + orig_op1) * c doesn't.\n+\t But fold_plusminus_mult_expr would factor back any power-of-two\n+\t value so do not distribute in the first place in this case.  */\n+      if (code == MULT_EXPR\n+\t  && TYPE_OVERFLOW_WRAPS (ctype)\n+\t  && !(tree_fits_shwi_p (c) && pow2p_hwi (absu_hwi (tree_to_shwi (c)))))\n \treturn fold_build2 (tcode, ctype,\n \t\t\t    fold_build2 (code, ctype,\n \t\t\t\t\t fold_convert (ctype, op0),\n@@ -7124,14 +7128,13 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n   /* No identical multiplicands; see if we can find a common\n      power-of-two factor in non-power-of-two multiplies.  This\n      can help in multi-dimensional array access.  */\n-  else if (tree_fits_shwi_p (arg01)\n-\t   && tree_fits_shwi_p (arg11))\n+  else if (tree_fits_shwi_p (arg01) && tree_fits_shwi_p (arg11))\n     {\n-      HOST_WIDE_INT int01, int11, tmp;\n+      HOST_WIDE_INT int01 = tree_to_shwi (arg01);\n+      HOST_WIDE_INT int11 = tree_to_shwi (arg11);\n+      HOST_WIDE_INT tmp;\n       bool swap = false;\n       tree maybe_same;\n-      int01 = tree_to_shwi (arg01);\n-      int11 = tree_to_shwi (arg11);\n \n       /* Move min of absolute values to int11.  */\n       if (absu_hwi (int01) < absu_hwi (int11))\n@@ -7144,7 +7147,10 @@ fold_plusminus_mult_expr (location_t loc, enum tree_code code, tree type,\n       else\n \tmaybe_same = arg11;\n \n-      if (exact_log2 (absu_hwi (int11)) > 0 && int01 % int11 == 0\n+      const unsigned HOST_WIDE_INT factor = absu_hwi (int11);\n+      if (factor > 1\n+\t  && pow2p_hwi (factor)\n+\t  && (int01 & (factor - 1)) == 0\n \t  /* The remainder should not be a constant, otherwise we\n \t     end up folding i * 4 + 2 to (i * 2 + 1) * 2 which has\n \t     increased the number of multiplications necessary.  */"}, {"sha": "0a88fed79de30a77ff3242c8f122e3dce2fac64e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=c613138b6ce48448fa7f62dd03513d28919361d6", "patch": "@@ -1,3 +1,7 @@\n+2019-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/specs/discr6.ads: New test.\n+\n 2019-06-05  Sam Tebbs  <sam.tebbs@arm.com>\n \n \t* gcc.target/aarch64/return_address_sign_b_1.c: New file."}, {"sha": "af16553694ac3046ec2724992d52d5e65ce2a70c", "filename": "gcc/testsuite/gnat.dg/specs/discr6.ads", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c613138b6ce48448fa7f62dd03513d28919361d6/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fspecs%2Fdiscr6.ads?ref=c613138b6ce48448fa7f62dd03513d28919361d6", "patch": "@@ -0,0 +1,21 @@\n+-- { dg-do compile }\n+\n+package Discr6 is\n+\n+  subtype Index_T is Integer range 0 .. 15;\n+\n+  type Arr is array (Index_T range <> ) of Long_Long_Integer;\n+\n+  type Rec2 (Size : Index_T := 2) is record\n+    A : Arr (2 .. Size);\n+  end record;\n+\n+  type Rec3 (D : Boolean := False) is record\n+    R : Rec2;\n+    case D is\n+      when False=> null;\n+      when True => I : Integer;\n+    end case;\n+  end record;\n+\n+end Discr6;"}]}