{"sha": "1aa696678e45e63f8d59479d593f80f6f0db6b9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFhNjk2Njc4ZTQ1ZTYzZjhkNTk0NzlkNTkzZjgwZjZmMGRiNmI5ZA==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-07-01T00:11:52Z"}, "committer": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2020-07-01T00:19:23Z"}, "message": "testsuite: remove SPE tests.\n\nSPE support was removed from the \"rs6000\" port.  This patch removes some\nleft-over SPE-specific testcases from the gcc.target/powerpc directory.\n\ngcc/testsuite/ChangeLog\n\n2020-06-30  David Edelsohn  <dje.gcc@gmail.com>\n\n\t* gcc.target/powerpc/ppc-spe.c: Delete.\n\t* gcc.target/powerpc/ppc-spe64-1.c: Delete.\n\t* gcc.target/powerpc/pr60102.c: Delete.\n\t* gcc.target/powerpc/pr60158.c: Delete.\n\t* gcc.target/powerpc/pr60735.c: Delete.\n\t* gcc.target/powerpc/pr78458.c: Delete.\n\t* gcc.target/powerpc/pr80343.c: Delete.\n\t* gcc.target/powerpc/spe-evmerge.c: Delete.\n\t* gcc.target/powerpc/spe-small-data-1.c: Delete.\n\t* gcc.target/powerpc/spe-small-data-2.c: Delete.\n\t* gcc.target/powerpc/spe-unwind-1.c: Delete.\n\t* gcc.target/powerpc/spe-vector-memcpy.c: Delete.\n\t* gcc.target/powerpc/spe-vector-memset.c: Delete.\n\t* gcc.target/powerpc/spe1.c: Delete.", "tree": {"sha": "26b62b63acec35aa540fd9e3e88d88759876f30d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/26b62b63acec35aa540fd9e3e88d88759876f30d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aa696678e45e63f8d59479d593f80f6f0db6b9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa696678e45e63f8d59479d593f80f6f0db6b9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aa696678e45e63f8d59479d593f80f6f0db6b9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aa696678e45e63f8d59479d593f80f6f0db6b9d/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46fbb6c68266c62b1fee60f25e515ffae4d9b33c"}], "stats": {"total": 1098, "additions": 0, "deletions": 1098}, "files": [{"sha": "92ace1cf029d16b681c63455e5da2b6138f82bee", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-spe.c", "status": "removed", "additions": 0, "deletions": 663, "changes": 663, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,663 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=8540 -mspe -mabi=spe -mfloat-gprs=single -O0\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-\n-/* (Test with -O0 so we don't optimize any of them away).  */\n-\n-#include <spe.h>\n-\n-/* Test PowerPC SPE extensions.  */\n-\n-#define vector __attribute__((vector_size(8)))\n-\n-vector int a, b, c, *ap;\n-vector float f, g, h;\n-unsigned int *uip;\n-unsigned short *usp;\n-int i, j, *ip;\n-uint64_t ull;\n-int64_t sll;\n-unsigned ui;\n-float fl;\n-uint16_t u16;\n-int16_t s16;\n-\n-/* These are the only documented/supported accessor functions for the\n-   SPE builtins.  */\n-void\n-test_api ()\n-{\n-  c = __ev_addw (a, b);\n-  c = __ev_addiw (a, 8);\n-  c = __ev_subfw (a, b);\n-  c = __ev_subifw (8, a);\n-  c = __ev_abs (a);\n-  c = __ev_neg (a);\n-  c = __ev_extsb (a);\n-  c = __ev_extsh (a);\n-  c = __ev_and (a, b);\n-  c = __ev_or (a, b);\n-  c = __ev_xor (a, b);\n-  c = __ev_nand (a, b);\n-  c = __ev_nor (a, b);\n-  c = __ev_eqv (a, b);\n-  c = __ev_andc (a, b);\n-  c = __ev_orc (a, b);\n-  c = __ev_rlw (a, b);\n-  c = __ev_rlwi (a, 8);\n-  c = __ev_slw (a, b);\n-  c = __ev_slwi (a, 8);\n-  c = __ev_srws (a, b);\n-  c = __ev_srwu (a, b);\n-  c = __ev_srwis (a, 8);\n-  c = __ev_srwiu (a, 8);\n-  c = __ev_cntlzw (a);\n-  c = __ev_cntlsw (a);\n-  c = __ev_rndw (a);\n-  c = __ev_mergehi (a, b);\n-  c = __ev_mergelo (a, b);\n-  c = __ev_mergelohi (a, b);\n-  c = __ev_mergehilo (a, b);\n-  c = __ev_splati (5);\n-  c = __ev_splatfi (6);\n-  c = __ev_divws (a, b);\n-  c = __ev_divwu (a, b);\n-  c = __ev_mra (a);\n-  i = __brinc (5, 6);\n-\n-  /* Loads.  */\n-  c = __ev_lddx (ap, i);\n-  c = __ev_ldwx (ap, i);\n-  c = __ev_ldhx (ap, i);\n-\n-  c = __ev_lwhex (uip, i);\n-  c = __ev_lwhoux (uip, i);\n-  c = __ev_lwhosx (uip, i);\n-  c = __ev_lwwsplatx (uip, i);\n-  c = __ev_lwhsplatx (uip, i);\n-\n-  c = __ev_lhhesplatx (usp, i);\n-  c = __ev_lhhousplatx (usp, i);\n-  c = __ev_lhhossplatx (usp, i);\n-\n-  c = __ev_ldd (ap, 5);\n-  c = __ev_ldw (ap, 6);\n-  c = __ev_ldh (ap, 7);\n-  c = __ev_lwhe (uip, 6);\n-  c = __ev_lwhou (uip, 6);\n-  c = __ev_lwhos (uip, 7);\n-  c = __ev_lwwsplat (uip, 7);\n-  c = __ev_lwhsplat (uip, 7);\n-  c = __ev_lhhesplat (usp, 7);\n-  c = __ev_lhhousplat (usp, 7);\n-  c = __ev_lhhossplat (usp, 7);\n-\n-  /* Stores.  */\n-  __ev_stddx (a, ap, 9);\n-  __ev_stdwx (a, ap, 9);\n-  __ev_stdhx (a, ap, 9);\n-  __ev_stwwex (a, uip, 9);\n-  __ev_stwwox (a, uip, 9);\n-  __ev_stwhex (a, uip, 9);\n-  __ev_stwhox (a, uip, 9);\n-  __ev_stdd (a, ap, 9);\n-  __ev_stdw (a, ap, 9);\n-  __ev_stdh (a, ap, 9);\n-  __ev_stwwe (a, uip, 9);\n-  __ev_stwwo (a, uip, 9);\n-  __ev_stwhe (a, uip, 9);\n-  __ev_stwho (a, uip, 9);\n-\n-  /* Fixed point complex.  */\n-  c = __ev_mhossf (a, b);\n-  c = __ev_mhosmf (a, b);\n-  c = __ev_mhosmi (a, b);\n-  c = __ev_mhoumi (a, b);\n-  c = __ev_mhessf (a, b);\n-  c = __ev_mhesmf (a, b);\n-  c = __ev_mhesmi (a, b);\n-  c = __ev_mheumi (a, b);\n-  c = __ev_mhossfa (a, b);\n-  c = __ev_mhosmfa (a, b);\n-  c = __ev_mhosmia (a, b);\n-  c = __ev_mhoumia (a, b);\n-  c = __ev_mhessfa (a, b);\n-  c = __ev_mhesmfa (a, b);\n-  c = __ev_mhesmia (a, b);\n-  c = __ev_mheumia (a, b);\n-\n-  c = __ev_mhoumf (a, b);\n-  c = __ev_mheumf (a, b);\n-  c = __ev_mhoumfa (a, b);\n-  c = __ev_mheumfa (a, b);\n-\n-  c = __ev_mhossfaaw (a, b);\n-  c = __ev_mhossiaaw (a, b);\n-  c = __ev_mhosmfaaw (a, b);\n-  c = __ev_mhosmiaaw (a, b);\n-  c = __ev_mhousiaaw (a, b);\n-  c = __ev_mhoumiaaw (a, b);\n-  c = __ev_mhessfaaw (a, b);\n-  c = __ev_mhessiaaw (a, b);\n-  c = __ev_mhesmfaaw (a, b);\n-  c = __ev_mhesmiaaw (a, b);\n-  c = __ev_mheusiaaw (a, b);\n-  c = __ev_mheumiaaw (a, b);\n-\n-  c = __ev_mhousfaaw (a, b);\n-  c = __ev_mhoumfaaw (a, b);\n-  c = __ev_mheusfaaw (a, b);\n-  c = __ev_mheumfaaw (a, b);\n-\n-  c = __ev_mhossfanw (a, b);\n-  c = __ev_mhossianw (a, b);\n-  c = __ev_mhosmfanw (a, b);\n-  c = __ev_mhosmianw (a, b);\n-  c = __ev_mhousianw (a, b);\n-  c = __ev_mhoumianw (a, b);\n-  c = __ev_mhessfanw (a, b);\n-  c = __ev_mhessianw (a, b);\n-  c = __ev_mhesmfanw (a, b);\n-  c = __ev_mhesmianw (a, b);\n-  c = __ev_mheusianw (a, b);\n-  c = __ev_mheumianw (a, b);\n-\n-  c = __ev_mhousfanw (a, b);\n-  c = __ev_mhoumfanw (a, b);\n-  c = __ev_mheusfanw (a, b);\n-  c = __ev_mheumfanw (a, b);\n-\n-  c = __ev_mhogsmfaa (a, b);\n-  c = __ev_mhogsmiaa (a, b);\n-  c = __ev_mhogumiaa (a, b);\n-  c = __ev_mhegsmfaa (a, b);\n-  c = __ev_mhegsmiaa (a, b);\n-  c = __ev_mhegumiaa (a, b);\n-\n-  c = __ev_mhogumfaa (a, b);\n-  c = __ev_mhegumfaa (a, b);\n-\n-  c = __ev_mhogsmfan (a, b);\n-  c = __ev_mhogsmian (a, b);\n-  c = __ev_mhogumian (a, b);\n-  c = __ev_mhegsmfan (a, b);\n-  c = __ev_mhegsmian (a, b);\n-  c = __ev_mhegumian (a, b);\n-\n-  c = __ev_mhogumfan (a, b);\n-  c = __ev_mhegumfan (a, b);\n-\n-  c = __ev_mwhssf (a, b);\n-  c = __ev_mwhsmf (a, b);\n-  c = __ev_mwhsmi (a, b);\n-  c = __ev_mwhumi (a, b);\n-  c = __ev_mwhssfa (a, b);\n-  c = __ev_mwhsmfa (a, b);\n-  c = __ev_mwhsmia (a, b);\n-  c = __ev_mwhumia (a, b);\n-\n-  c = __ev_mwhumf (a, b);\n-  c = __ev_mwhumfa (a, b);\n-\n-  c = __ev_mwlumi (a, b);\n-  c = __ev_mwlumia (a, b);\n-  c = __ev_mwlumiaaw (a, b);\n-\n-  c = __ev_mwlssiaaw (a, b);\n-  c = __ev_mwlsmiaaw (a, b);\n-  c = __ev_mwlusiaaw (a, b);\n-  c = __ev_mwlusiaaw (a, b);\n-\n-  c = __ev_mwlssianw (a, b);\n-  c = __ev_mwlsmianw (a, b);\n-  c = __ev_mwlusianw (a, b);\n-  c = __ev_mwlumianw (a, b);\n-\n-  c = __ev_mwssf (a, b);\n-  c = __ev_mwsmf (a, b);\n-  c = __ev_mwsmi (a, b);\n-  c = __ev_mwumi (a, b);\n-  c = __ev_mwssfa (a, b);\n-  c = __ev_mwsmfa (a, b);\n-  c = __ev_mwsmia (a, b);\n-  c = __ev_mwumia (a, b);\n-  c = __ev_mwumf (a, b);\n-  c = __ev_mwumfa (a, b);\n-  c = __ev_mwssfaa (a, b);\n-  c = __ev_mwsmfaa (a, b);\n-  c = __ev_mwsmiaa (a, b);\n-  c = __ev_mwumiaa (a, b);\n-  c = __ev_mwumfaa (a, b);\n-  c = __ev_mwssfan (a, b);\n-  c = __ev_mwsmfan (a, b);\n-  c = __ev_mwsmian (a, b);\n-  c = __ev_mwumian (a, b);\n-  c = __ev_mwumfan (a, b);\n-  c = __ev_addssiaaw (a);\n-  c = __ev_addsmiaaw (a);\n-  c = __ev_addusiaaw (a);\n-  c = __ev_addumiaaw (a);\n-  c = __ev_addusfaaw (a);\n-  c = __ev_addumfaaw (a);\n-  c = __ev_addsmfaaw (a);\n-  c = __ev_addssfaaw (a);\n-  c = __ev_subfssiaaw (a);\n-  c = __ev_subfsmiaaw (a);\n-  c = __ev_subfusiaaw (a);\n-  c = __ev_subfumiaaw (a);\n-  c = __ev_subfusfaaw (a);\n-  c = __ev_subfumfaaw (a);\n-  c = __ev_subfsmfaaw (a);\n-  c = __ev_subfssfaaw (a);\n-\n-  /* Floating point SIMD instructions.  */\n-  c = __ev_fsabs (a);\n-  c = __ev_fsnabs (a);\n-  c = __ev_fsneg (a);\n-  c = __ev_fsadd (a, b);\n-  c = __ev_fssub (a, b);\n-  c = __ev_fsmul (a, b);\n-  c = __ev_fsdiv (a, b);\n-  c = __ev_fscfui (a);\n-  c = __ev_fscfsi (a);\n-  c = __ev_fscfuf (a);\n-  c = __ev_fscfsf (a);\n-  c = __ev_fsctui (a);\n-  c = __ev_fsctsi (a);\n-  c = __ev_fsctuf (a);\n-  c = __ev_fsctsf (a);\n-  c = __ev_fsctuiz (a);\n-  c = __ev_fsctsiz (a);\n-\n-  /* Non supported sythetic instructions made from two instructions.  */\n-\n-  c = __ev_mwhssfaaw (a, b);\n-  c = __ev_mwhssiaaw (a, b);\n-  c = __ev_mwhsmfaaw (a, b);\n-  c = __ev_mwhsmiaaw (a, b);\n-  c = __ev_mwhusiaaw (a, b);\n-  c = __ev_mwhumiaaw (a, b);\n-  c = __ev_mwhusfaaw (a, b);\n-  c = __ev_mwhumfaaw (a, b);\n-  c = __ev_mwhssfanw (a, b);\n-  c = __ev_mwhssianw (a, b);\n-  c = __ev_mwhsmfanw (a, b);\n-  c = __ev_mwhsmianw (a, b);\n-  c = __ev_mwhusianw (a, b);\n-  c = __ev_mwhumianw (a, b);\n-  c = __ev_mwhusfanw (a, b);\n-  c = __ev_mwhumfanw (a, b);\n-\n-  c = __ev_mwhgssfaa (a, b);\n-  c = __ev_mwhgsmfaa (a, b);\n-  c = __ev_mwhgsmiaa (a, b);\n-  c = __ev_mwhgumiaa (a, b);\n-  c = __ev_mwhgssfan (a, b);\n-  c = __ev_mwhgsmfan (a, b);\n-  c = __ev_mwhgsmian (a, b);\n-  c = __ev_mwhgumian (a, b);\n-\n-  /* Creating, insertion, and extraction.  */\n-\n-  a = __ev_create_u64 ((uint64_t) 55);\n-  a = __ev_create_s64 ((int64_t) 66);\n-  a = __ev_create_fs (3.14F, 2.18F);\n-  a = __ev_create_u32 ((uint32_t) 5, (uint32_t) i);\n-  a = __ev_create_s32 ((int32_t) 5, (int32_t) 6);\n-  a = __ev_create_u16 ((uint16_t) 6, (uint16_t) 6, (uint16_t) 7, (uint16_t) 1);\n-  a = __ev_create_s16 ((int16_t) 6, (int16_t) 6, (int16_t) 7, (int16_t) 9);\n-  a = __ev_create_sfix32_fs (3.0F, 2.0F);\n-  a = __ev_create_ufix32_fs (3.0F, 2.0F);\n-  a = __ev_create_ufix32_u32 (3U, 5U);\n-  a = __ev_create_sfix32_s32 (6, 9);\n-  ull = __ev_convert_u64 (a);\n-  sll = __ev_convert_s64 (a);\n-  i = __ev_get_upper_u32 (a);\n-  ui = __ev_get_lower_u32 (a);\n-  i = __ev_get_upper_s32 (a);\n-  i = __ev_get_lower_s32 (a);\n-  fl = __ev_get_upper_fs (a);\n-  fl = __ev_get_lower_fs (a);\n-  u16 = __ev_get_u16 (a, 5U);\n-  s16 = __ev_get_s16 (a, 5U);\n-  ui = __ev_get_upper_ufix32_u32 (a);\n-  ui = __ev_get_lower_ufix32_u32 (a);\n-  i = __ev_get_upper_sfix32_s32 (a);\n-  i = __ev_get_lower_sfix32_s32 (a);\n-  fl = __ev_get_upper_sfix32_fs (a);\n-  fl = __ev_get_lower_sfix32_fs (a);\n-  fl = __ev_get_upper_ufix32_fs (a);\n-  fl = __ev_get_lower_ufix32_fs (a);\n-  a = __ev_set_upper_u32 (a, 5U);\n-  a = __ev_set_lower_u32 (a, 5U);\n-  a = __ev_set_upper_s32 (a, 5U);\n-  a = __ev_set_lower_s32 (a, 6U);\n-  a = __ev_set_upper_fs (a, 6U);\n-  a = __ev_set_lower_fs (a, fl);\n-  a = __ev_set_upper_ufix32_u32 (a, 5U);\n-  a = __ev_set_lower_ufix32_u32 (a, 5U);\n-  a = __ev_set_upper_sfix32_s32 (a, 5);\n-  a = __ev_set_lower_sfix32_s32 (a, 5);\n-  a =  __ev_set_upper_sfix32_fs (a, fl);\n-  a = __ev_set_lower_sfix32_fs (a, fl);\n-  a = __ev_set_upper_ufix32_fs (a, fl);\n-  a = __ev_set_lower_ufix32_fs (a, fl);\n-  a = __ev_set_acc_u64 ((uint64_t) 640);\n-  a = __ev_set_acc_s64 ((int64_t) 460);\n-  a = __ev_set_acc_vec64 (b);\n-  a = __ev_set_u32 (a, 5, 6);\n-  a = __ev_set_s32 (a, 5, 6);\n-  a = __ev_set_fs (a, fl, 5);\n-  a = __ev_set_u16 (a, 5U, 3);\n-  a = __ev_set_s16 (a, 5, 6);\n-  a = __ev_set_ufix32_u32 (a, 5U, 6U);\n-  a = __ev_set_sfix32_s32 (a, 3, 6);\n-  a = __ev_set_ufix32_fs (a, fl, 5);\n-  a = __ev_set_sfix32_fs (a, fl, 5);\n-  ui = __ev_get_u32 (a, 1);\n-  i = __ev_get_s32 (a, 0);\n-  fl = __ev_get_fs (a, 1);\n-  u16 = __ev_get_u16 (a, 2);\n-  s16 = __ev_get_s16 (a, 2);\n-  ui = __ev_get_ufix32_u32 (a, 1);\n-  i = __ev_get_sfix32_s32 (a, 0);\n-  fl = __ev_get_ufix32_fs (a, 1);\n-  fl = __ev_get_sfix32_fs (a, 0);\n-\n-  /* Predicates.  */\n-  i = __ev_any_gts (a, b);\n-  i = __ev_all_gts (a, b);\n-  i = __ev_upper_gts (a, b);\n-  i = __ev_lower_gts (a, b);\n-  a = __ev_select_gts (a, b, c, c);\n-\n-  i = __ev_any_gtu (a, b);\n-  i = __ev_all_gtu (a, b);\n-  i = __ev_upper_gtu (a, b);\n-  i = __ev_lower_gtu (a, b);\n-  a = __ev_select_gtu (a, b, c, c);\n-\n-  i = __ev_any_lts (a, b);\n-  i = __ev_all_lts (a, b);\n-  i = __ev_upper_lts (a, b);\n-  i = __ev_lower_lts (a, b);\n-  a = __ev_select_lts (a, b, c, c);\n-\n-  i = __ev_any_ltu (a, b);\n-  i = __ev_all_ltu (a, b);\n-  i = __ev_upper_ltu (a, b);\n-  i = __ev_lower_ltu (a, b);\n-  a = __ev_select_ltu (a, b, c, c);\n-\n-  i = __ev_any_eq (a, b);\n-  i = __ev_all_eq (a, b);\n-  i = __ev_upper_eq (a, b);\n-  i = __ev_lower_eq (a, b);\n-  a = __ev_select_eq (a, b, c, c);\n-\n-  i = __ev_any_fs_gt (a, b);\n-  i = __ev_all_fs_gt (a, b);\n-  i = __ev_upper_fs_gt (a, b);\n-  i = __ev_lower_fs_gt (a, b);\n-  a = __ev_select_fs_gt (a, b, c, c);\n-\n-  i = __ev_any_fs_lt (a, b);\n-  i = __ev_all_fs_lt (a, b);\n-  i = __ev_upper_fs_lt (a, b);\n-  i = __ev_lower_fs_lt (a, b);\n-  a = __ev_select_fs_lt (a, b, c, b);\n-\n-  i = __ev_any_fs_eq (a, b);\n-  i = __ev_all_fs_eq (a, b);\n-  i = __ev_upper_fs_eq (a, b);\n-  i = __ev_lower_fs_eq (a, b);\n-  a = __ev_select_fs_eq (a, b, c, c);\n-\n-  i = __ev_any_fs_tst_gt (a, b);\n-  i = __ev_all_fs_tst_gt (a, b);\n-  i = __ev_upper_fs_tst_gt (a, b);\n-  i = __ev_lower_fs_tst_gt (a, b);\n-  a = __ev_select_fs_tst_gt (a, b, c, c);\n-\n-  i = __ev_any_fs_tst_lt (a, b);\n-  i = __ev_all_fs_tst_lt (a, b);\n-  i = __ev_upper_fs_tst_lt (a, b);\n-  i = __ev_lower_fs_tst_lt (a, b);\n-  a = __ev_select_fs_tst_lt (a, b, c, c);\n-\n-  i = __ev_any_fs_tst_eq (a, b);\n-  i = __ev_all_fs_tst_eq (a, b);\n-  i = __ev_upper_fs_tst_eq (a, b);\n-  i = __ev_lower_fs_tst_eq (a, b);\n-  a = __ev_select_fs_tst_eq (a, b, c, c);\n-}\n-\n-int\n-main (void)\n-{\n-  /* Generic binary operations.  */\n-  c = __builtin_spe_evaddw (a, b);\n-  c = __builtin_spe_evand (a, b);\n-  c = __builtin_spe_evandc (a, b);\n-  c = __builtin_spe_evdivws (a, b);\n-  c = __builtin_spe_evdivwu (a, b);\n-  c = __builtin_spe_eveqv (a, b);\n-  h = __builtin_spe_evfsadd (f, g);\n-  h = __builtin_spe_evfsdiv (f, g);\n-  h = __builtin_spe_evfsmul (f, g);\n-  h = __builtin_spe_evfssub (f, g);\n-  c = __builtin_spe_evlddx (ap, j);\n-  c = __builtin_spe_evldhx (ap, j);\n-  c = __builtin_spe_evldwx (ap, j);\n-  c = __builtin_spe_evlhhesplatx (usp, j);\n-  c = __builtin_spe_evlhhossplatx (usp, j);\n-  c = __builtin_spe_evlhhousplatx (usp, j);\n-  c = __builtin_spe_evlwhex (uip, j);\n-  c = __builtin_spe_evlwhosx (uip, j);\n-  c = __builtin_spe_evlwhoux (uip, j);\n-  c = __builtin_spe_evlwhsplatx (uip, j);\n-  c = __builtin_spe_evlwwsplatx (uip, j);\n-  c = __builtin_spe_evmergehi (a, b);\n-  c = __builtin_spe_evmergehilo (a, b);\n-  c = __builtin_spe_evmergelo (a, b);\n-  c = __builtin_spe_evmergelohi (a, b);\n-  c = __builtin_spe_evmhegsmfaa (a, b);\n-  c = __builtin_spe_evmhegsmfan (a, b);\n-  c = __builtin_spe_evmhegsmiaa (a, b);\n-  c = __builtin_spe_evmhegsmian (a, b);\n-  c = __builtin_spe_evmhegumiaa (a, b);\n-  c = __builtin_spe_evmhegumian (a, b);\n-  c = __builtin_spe_evmhesmf (a, b);\n-  c = __builtin_spe_evmhesmfa (a, b);\n-  c = __builtin_spe_evmhesmfaaw (a, b);\n-  c = __builtin_spe_evmhesmfanw (a, b);\n-  c = __builtin_spe_evmhesmi (a, b);\n-  c = __builtin_spe_evmhesmia (a, b);\n-  c = __builtin_spe_evmhesmiaaw (a, b);\n-  c = __builtin_spe_evmhesmianw (a, b);\n-  c = __builtin_spe_evmhessf (a, b);\n-  c = __builtin_spe_evmhessfa (a, b);\n-  c = __builtin_spe_evmhessfaaw (a, b);\n-  c = __builtin_spe_evmhessfanw (a, b);\n-  c = __builtin_spe_evmhessiaaw (a, b);\n-  c = __builtin_spe_evmhessianw (a, b);\n-  c = __builtin_spe_evmheumi (a, b);\n-  c = __builtin_spe_evmheumia (a, b);\n-  c = __builtin_spe_evmheumiaaw (a, b);\n-  c = __builtin_spe_evmheumianw (a, b);\n-  c = __builtin_spe_evmheusiaaw (a, b);\n-  c = __builtin_spe_evmheusianw (a, b);\n-  c = __builtin_spe_evmhogsmfaa (a, b);\n-  c = __builtin_spe_evmhogsmfan (a, b);\n-  c = __builtin_spe_evmhogsmiaa (a, b);\n-  c = __builtin_spe_evmhogsmian (a, b);\n-  c = __builtin_spe_evmhogumiaa (a, b);\n-  c = __builtin_spe_evmhogumian (a, b);\n-  c = __builtin_spe_evmhosmf (a, b);\n-  c = __builtin_spe_evmhosmfa (a, b);\n-  c = __builtin_spe_evmhosmfaaw (a, b);\n-  c = __builtin_spe_evmhosmfanw (a, b);\n-  c = __builtin_spe_evmhosmi (a, b);\n-  c = __builtin_spe_evmhosmia (a, b);\n-  c = __builtin_spe_evmhosmiaaw (a, b);\n-  c = __builtin_spe_evmhosmianw (a, b);\n-  c = __builtin_spe_evmhossf (a, b);\n-  c = __builtin_spe_evmhossfa (a, b);\n-  c = __builtin_spe_evmhossfaaw (a, b);\n-  c = __builtin_spe_evmhossfanw (a, b);\n-  c = __builtin_spe_evmhossiaaw (a, b);\n-  c = __builtin_spe_evmhossianw (a, b);\n-  c = __builtin_spe_evmhoumi (a, b);\n-  c = __builtin_spe_evmhoumia (a, b);\n-  c = __builtin_spe_evmhoumiaaw (a, b);\n-  c = __builtin_spe_evmhoumianw (a, b);\n-  c = __builtin_spe_evmhousiaaw (a, b);\n-  c = __builtin_spe_evmhousianw (a, b);\n-  c = __builtin_spe_evmwhsmf (a, b);\n-  c = __builtin_spe_evmwhsmfa (a, b);\n-  c = __builtin_spe_evmwhsmi (a, b);\n-  c = __builtin_spe_evmwhsmia (a, b);\n-  c = __builtin_spe_evmwhssf (a, b);\n-  c = __builtin_spe_evmwhssfa (a, b);\n-  c = __builtin_spe_evmwhumi (a, b);\n-  c = __builtin_spe_evmwhumia (a, b);\n-  c = __builtin_spe_evmwlsmiaaw (a, b);\n-  c = __builtin_spe_evmwlsmianw (a, b);\n-  c = __builtin_spe_evmwlssiaaw (a, b);\n-  c = __builtin_spe_evmwlssianw (a, b);\n-  c = __builtin_spe_evmwlumi (a, b);\n-  c = __builtin_spe_evmwlumia (a, b);\n-  c = __builtin_spe_evmwlumiaaw (a, b);\n-  c = __builtin_spe_evmwlumianw (a, b);\n-  c = __builtin_spe_evmwlusiaaw (a, b);\n-  c = __builtin_spe_evmwlusianw (a, b);\n-  c = __builtin_spe_evmwsmf (a, b);\n-  c = __builtin_spe_evmwsmfa (a, b);\n-  c = __builtin_spe_evmwsmfaa (a, b);\n-  c = __builtin_spe_evmwsmfan (a, b);\n-  c = __builtin_spe_evmwsmi (a, b);\n-  c = __builtin_spe_evmwsmia (a, b);\n-  c = __builtin_spe_evmwsmiaa (a, b);\n-  c = __builtin_spe_evmwsmian (a, b);\n-  c = __builtin_spe_evmwssf (a, b);\n-  c = __builtin_spe_evmwssfa (a, b);\n-  c = __builtin_spe_evmwssfaa (a, b);\n-  c = __builtin_spe_evmwssfan (a, b);\n-  c = __builtin_spe_evmwumi (a, b);\n-  c = __builtin_spe_evmwumia (a, b);\n-  c = __builtin_spe_evmwumiaa (a, b);\n-  c = __builtin_spe_evmwumian (a, b);\n-  c = __builtin_spe_evnand (a, b);\n-  c = __builtin_spe_evnor (a, b);\n-  c = __builtin_spe_evor (a, b);\n-  c = __builtin_spe_evorc (a, b);\n-  c = __builtin_spe_evrlw (a, b);\n-  c = __builtin_spe_evslw (a, b);\n-  c = __builtin_spe_evsrws (a, b);\n-  c = __builtin_spe_evsrwu (a, b);\n-  c = __builtin_spe_evsubfw (a, b);\n-  c = __builtin_spe_evxor (a, b);\n-\n-  c = __builtin_spe_evmwhssfaa (a, b);\n-  c = __builtin_spe_evmwhssmaa (a, b);\n-  c = __builtin_spe_evmwhsmfaa (a, b);\n-  c = __builtin_spe_evmwhsmiaa (a, b);\n-  c = __builtin_spe_evmwhusiaa (a, b);\n-  c = __builtin_spe_evmwhumiaa (a, b);\n-  c = __builtin_spe_evmwhssfan (a, b);\n-  c = __builtin_spe_evmwhssian (a, b);\n-  c = __builtin_spe_evmwhsmfan (a, b);\n-  c = __builtin_spe_evmwhsmian (a, b);\n-  c = __builtin_spe_evmwhusian (a, b);\n-  c = __builtin_spe_evmwhumian (a, b);\n-  c = __builtin_spe_evmwhgssfaa (a, b);\n-  c = __builtin_spe_evmwhgsmfaa (a, b);\n-  c = __builtin_spe_evmwhgsmiaa (a, b);\n-  c = __builtin_spe_evmwhgumiaa (a, b);\n-  c = __builtin_spe_evmwhgssfan (a, b);\n-  c = __builtin_spe_evmwhgsmfan (a, b);\n-  c = __builtin_spe_evmwhgsmian (a, b);\n-  c = __builtin_spe_evmwhgumian (a, b);\n-  i = __builtin_spe_brinc (i, j);\n-\n-  /* Generic unary operations.  */\n-  a = __builtin_spe_evabs (b);\n-  a = __builtin_spe_evaddsmiaaw (b);\n-  a = __builtin_spe_evaddssiaaw (b);\n-  a = __builtin_spe_evaddumiaaw (b);\n-  a = __builtin_spe_evaddusiaaw (b);\n-  a = __builtin_spe_evcntlsw (b);\n-  a = __builtin_spe_evcntlzw (b);\n-  a = __builtin_spe_evextsb (b);\n-  a = __builtin_spe_evextsh (b);\n-  f = __builtin_spe_evfsabs (g);\n-  f = __builtin_spe_evfscfsf (g);\n-  a = __builtin_spe_evfscfsi (g);\n-  f = __builtin_spe_evfscfuf (g);\n-  f = __builtin_spe_evfscfui (a);\n-  f = __builtin_spe_evfsctsf (g);\n-  a = __builtin_spe_evfsctsi (g);\n-  a = __builtin_spe_evfsctsiz (g);\n-  f = __builtin_spe_evfsctuf (g);\n-  a = __builtin_spe_evfsctui (g);\n-  a = __builtin_spe_evfsctuiz (g);\n-  f = __builtin_spe_evfsnabs (g);\n-  f = __builtin_spe_evfsneg (g);\n-  a = __builtin_spe_evmra (b);\n-  a = __builtin_spe_evneg (b);\n-  a = __builtin_spe_evrndw (b);\n-  a = __builtin_spe_evsubfsmiaaw (b);\n-  a = __builtin_spe_evsubfssiaaw (b);\n-  a = __builtin_spe_evsubfumiaaw (b);\n-  a = __builtin_spe_evsubfusiaaw (b);\n-\n-  /* Unary operations of the form: X = foo (5_bit_signed_immediate).  */\n-  a = __builtin_spe_evsplatfi (5);\n-  a = __builtin_spe_evsplati (5);\n-\n-  /* Binary operations of the form: X = foo(Y, 5_bit_immediate).  */\n-  a = __builtin_spe_evaddiw (b, 13);\n-  a = __builtin_spe_evldd (ap, 13);\n-  a = __builtin_spe_evldh (ap, 13);\n-  a = __builtin_spe_evldw (ap, 13);\n-  a = __builtin_spe_evlhhesplat (usp, 13);\n-  a = __builtin_spe_evlhhossplat (usp, 13);\n-  a = __builtin_spe_evlhhousplat (usp, 13);\n-  a = __builtin_spe_evlwhe (uip, 13);\n-  a = __builtin_spe_evlwhos (uip, 13);\n-  a = __builtin_spe_evlwhou (uip, 13);\n-  a = __builtin_spe_evlwhsplat (uip, 13);\n-  a = __builtin_spe_evlwwsplat (uip, 13);\n-\n-  a = __builtin_spe_evrlwi (b, 13);\n-  a = __builtin_spe_evslwi (b, 13);\n-  a = __builtin_spe_evsrwis (b, 13);\n-  a = __builtin_spe_evsrwiu (b, 13);\n-  a = __builtin_spe_evsubifw (b, 13);\n-\n-  /* Store indexed builtins.  */\n-  __builtin_spe_evstddx (b, ap, j);\n-  __builtin_spe_evstdhx (b, ap, j);\n-  __builtin_spe_evstdwx (b, ap, j);\n-  __builtin_spe_evstwhex (b, uip, j);\n-  __builtin_spe_evstwhox (b, uip, j);\n-  __builtin_spe_evstwwex (b, uip, j);\n-  __builtin_spe_evstwwox (b, uip, j);\n-\n-  /* Store indexed immediate builtins.  */\n-  __builtin_spe_evstdd (b, ap, 5);\n-  __builtin_spe_evstdh (b, ap, 5);\n-  __builtin_spe_evstdw (b, ap, 5);\n-  __builtin_spe_evstwhe (b, uip, 5);\n-  __builtin_spe_evstwho (b, uip, 5);\n-  __builtin_spe_evstwwe (b, uip, 5);\n-  __builtin_spe_evstwwo (b, uip, 5);\n-\n-  /* SPEFSCR builtins.  */\n-  i = __builtin_spe_mfspefscr ();\n-  __builtin_spe_mtspefscr (j);\n-\n-  test_api ();\n-  \n-  return 0;\n-}"}, {"sha": "a9d632bf9f3ea0da3a93d4fddcea3f722347b08e", "filename": "gcc/testsuite/gcc.target/powerpc/ppc-spe64-1.c", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fppc-spe64-1.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,7 +0,0 @@\n-/* Test that SPE targets do not permit -m64.  */\n-/* Origin: Joseph Myers <joseph@codesourcery.com> */\n-/* { dg-do compile { target powerpc-*-*spe } } */\n-/* { dg-options \"-m64\" } */\n-\n-/* { dg-error \"-m64 not supported in this configuration\" \"SPE not 64-bit\" { target *-*-* } 0 } */\n-/* { dg-error \"64-bit SPE not supported\" \"64-bit SPE\" { target *-*-* } 0 } */"}, {"sha": "0b572a5f9d7e75ec042596e0d63dc8afef60463e", "filename": "gcc/testsuite/gcc.target/powerpc/pr60102.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60102.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=8548 -mspe -mabi=spe -g -mfloat-gprs=double\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-\n-double\n-pr60102 (double x, int m)\n-{\n-  double y;\n-  y =  m % 2 ? x : 1;\n-  return y;\n-}"}, {"sha": "4395378e17ddfe97b9aa3f190338cbb028bb731a", "filename": "gcc/testsuite/gcc.target/powerpc/pr60158.c", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60158.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,89 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-/* { dg-options \"-mdejagnu-cpu=8548 -mno-spe -mfloat-gprs=double -Os -fdata-sections -fpic -mrelocatable\" } */\n-\n-#define NULL 0\n-int func (int val);\n-void *func2 (void *ptr);\n-\n-static const char *ifs;\n-static char map[256];\n-\n-typedef struct {\n-/* None of these fields are used, but removing any\n-   of them makes the problem go away.  */\n-  char *data;\n-  int length;\n-  int maxlen;\n-  int quote;\n-} o_string;\n-\n-#define NULL_O_STRING {NULL,0,0,0}\n-\n-static int parse_stream (void *dest, void *ctx)\n-{\n-  int ch = func (0), m;\n-\n-  while (ch != -1) {\n-    m = map[ch];\n-    if (ch != '\\n')\n-    func2(dest);\n-\n-    ctx = func2 (ctx);\n-    if (!func (0))\n-      return 0;\n-    if (m != ch) {\n-      func2 (\"htns\");\n-      break;\n-    }\n-  }\n-  return -1;\n-}\n-\n-static void mapset (const char *set, int code)\n-{\n-  const char *s;\n-  for (s=set; *s; s++)  map[(int)*s] = code;\n-}\n-\n-static void update_ifs_map(void)\n-{\n-  /* char *ifs and char map[256] are both globals.  */\n-  ifs = func2 (\"abc\");\n-  if (ifs == NULL) ifs=\"def\";\n-\n-  func2 (map);\n-  {\n-    char subst[2] = {4, 0};\n-    mapset (subst, 3);\n-  }\n-  mapset (\";&|#\", 1);\n-}\n-\n-int parse_stream_outer (int flag)\n-{\n-  int blah;\n-  o_string temp=NULL_O_STRING;\n-  int rcode;\n-\n-  do {\n-    update_ifs_map ();\n-    func2 (&blah); /* a memory clobber works as well.  */\n-    rcode = parse_stream (&temp, NULL);\n-    func2 (\"aoeu\");\n-    if (func (0) != 0) {\n-      func2 (NULL);\n-    }\n-  } while (rcode != -1);\n-  return 0;\n-}\n-\n-/* { dg-final { if ![file exists pr60158.s] { fail \"pr60158.c (compile)\"; return; } } } */\n-\n-/* { dg-final { set c_rel [llength [grep pr60158.s \\\\.data\\\\.rel\\\\.ro\\\\.local]] } } */\n-/* { dg-final { set c_fix [llength [grep pr60158.s \\\\.fixup]] } } */\n-/* { dg-final { if [string match $c_rel $c_fix] \\{\t} } */\n-/* { dg-final {     pass \"pr60158.c (passed)\"\t} } */\n-/* { dg-final { \\} else \\{\t} } */\n-/* { dg-final {     fail \"pr60158.c (.fixup table entries not generated for .data.rel.ro.local section)\"\t} } */\n-/* { dg-final { \\}\t} } */"}, {"sha": "39b9037ac45ff6b884e80d1de2703d600604e8b6", "filename": "gcc/testsuite/gcc.target/powerpc/pr60735.c", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60735.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60735.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr60735.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,11 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=8548 -mspe -mabi=spe -O2\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-\n-/* In PR60735, the type _Decimal64 generated an insn not found message.  */\n-\n-void\n-pr60735 (_Decimal64 *p, _Decimal64 *q)\n-{\n-  *p = *q;\n-}"}, {"sha": "b16f99a49ddccd1f72574c7686cb432eb2d5d7e7", "filename": "gcc/testsuite/gcc.target/powerpc/pr78458.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78458.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78458.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr78458.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=8548 -mspe -mabi=spe\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-\n-extern void bar (void);\n-long double\n-pr78458 (long double p1)\n-{\n-  bar ();\n-  asm volatile (\"# clobbers\" :::\n-\t\t\"r14\", \"r15\", \"r16\", \"r17\", \"r18\", \"r19\",\n-\t\t\"r20\", \"r21\", \"r22\", \"r23\", \"r24\", \"r25\",\n-\t\t\"r26\", \"r27\", \"r28\", \"r29\", \"r30\", \"r31\");\n-  return p1;\n-}"}, {"sha": "cea2a771abba6785bdbca8e4c8121d4dd44479fb", "filename": "gcc/testsuite/gcc.target/powerpc/pr80343.c", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80343.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80343.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr80343.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,50 +0,0 @@\n-/* { dg-do compile { target powerpc-*-*spe } } */\n-/* { dg-options \"-O2 -ftracer -fPIC\" } */\n-long long int vi, ls;\n-int wq, oa, to, fv;\n-signed char zo;\n-\n-long long int\n-ai (long long int ip, long long int jc, int gt)\n-{\n-  ip /= 3;\n-  jc += ip;\n-  if (ip != 0)\n-    vi = 0;\n-  vi += ls;\n-\n-  if (wq != oa)\n-    {\n-      int tz;\n-\n-      for (tz = 0; tz < 32; ++tz)\n-        zo -= wq & gt;\n-\n-      if ((gt & 5) > oa)\n-        {\n-          zo += gt;\n-          fv += zo + to;\n-        }\n-\n-      if (gt != 0)\n-        oa = 0;\n-\n-      if (fv != 0)\n-        {\n-          vi += wq;\n-          ls += ip;\n-          jc += (vi != 0) ? ip : ls;\n-        }\n-\n-      while (tz != 0)\n-        {\n-          zo = wq;\n-          tz = zo;\n-        }\n-\n-      ++to;\n-      wq = ip;\n-    }\n-\n-  return jc;\n-}"}, {"sha": "df0a33e40095f76659c2ecb3f7b289d838bb219c", "filename": "gcc/testsuite/gcc.target/powerpc/spe-evmerge.c", "status": "removed", "additions": 0, "deletions": 71, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-evmerge.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,71 +0,0 @@\n-/* Verify SPE vector permute builtins.  */\n-/* { dg-do run { target { powerpc*-*-* && powerpc_spe } } } */\n-/* Remove `-ansi' from options so that <spe.h> compiles.  */\n-/* { dg-options \"\" } */\n-\n-#include <spe.h>\n-#include <stdlib.h>\n-\n-#define vector __attribute__ ((vector_size (8)))\n-\n-#define WORDS_BIG_ENDIAN (__BYTE_ORDER__ == __ORDER_BIG_ENDIAN__)\n-\n-int\n-main (void)\n-{\n-  vector int a = { 0x11111111, 0x22222222 };\n-  vector int b = { 0x33333333, 0x44444444 };\n-  vector int c;\n-\n-  /* c[hi] = a[hi], c[lo] = b[hi]  */\n-  c = __ev_mergehi (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x44444444))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x22222222))\n-    abort ();\n-  /* c[hi] = a[lo], c[lo] = b[lo]  */\n-  c = __ev_mergelo (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x33333333))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x11111111))\n-    abort ();\n-  /* c[hi] = a[lo], c[lo] = b[hi]  */\n-  c = __ev_mergelohi (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x44444444))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x11111111))\n-    abort ();\n-  /* c[hi] = a[hi], c[lo] = b[lo]  */\n-  c = __ev_mergehilo (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x33333333))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x22222222))\n-    abort ();\n-\n-  /* c[hi] = a[hi], c[lo] = b[hi]  */\n-  c = __builtin_spe_evmergehi (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x44444444))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x22222222))\n-    abort ();\n-  /* c[hi] = a[lo], c[lo] = b[lo]  */\n-  c = __builtin_spe_evmergelo (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x33333333))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x11111111))\n-    abort ();\n-  /* c[hi] = a[lo], c[lo] = b[hi]  */\n-  c = __builtin_spe_evmergelohi (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x22222222 : 0x44444444))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x33333333 : 0x11111111))\n-    abort ();\n-  /* c[hi] = a[hi], c[lo] = b[lo]  */\n-  c = __builtin_spe_evmergehilo (a, b);\n-  if (c[0] != (WORDS_BIG_ENDIAN ? 0x11111111 : 0x33333333))\n-    abort ();\n-  if (c[1] != (WORDS_BIG_ENDIAN ? 0x44444444 : 0x22222222))\n-    abort ();\n-\n-  return 0;\n-}"}, {"sha": "8bdb154e1af167267de6325a5e304a578c51df9f", "filename": "gcc/testsuite/gcc.target/powerpc/spe-small-data-1.c", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-1.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,14 +0,0 @@\n-/* Verify that we don't ICE trying to put SPE data in .sdata2.  */\n-/* { dg-do run { target { powerpc*-*-linux* && powerpc_spe } } } */\n-/* { dg-options \"-msdata=eabi -mcall-eabi -G 8\" } */\n-\n-#include <spe.h>\n-\n-__ev64_fs__ x;\n-\n-int main(void)\n-{\n-  x = __ev_fsabs (x);\n-  return(0);\n-}\n-"}, {"sha": "5354e49f470cb7544f37f40fca256aadf6b683b6", "filename": "gcc/testsuite/gcc.target/powerpc/spe-small-data-2.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-small-data-2.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,13 +0,0 @@\n-/* Verify that we don't ICE trying to put float data in .sdata2.  */\n-/* { dg-do compile } */\n-/* { dg-require-effective-target powerpc_eabi_ok } */\n-/* { dg-options \"-msdata=eabi -mcall-eabi -G 8\" } */\n-\n-double x;\n-\n-int main(void)\n-{\n-  x = x * 2;\n-  return(0);\n-}\n-"}, {"sha": "84d4bf28803f2da00b4b37e088dfcfaca6c30cc0", "filename": "gcc/testsuite/gcc.target/powerpc/spe-unwind-1.c", "status": "removed", "additions": 0, "deletions": 116, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-unwind-1.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,116 +0,0 @@\n-/* Verify that unwinding can find SPE registers in signal frames.  */\n-/* Origin: Joseph Myers <joseph@codesourcery.com> */\n-/* { dg-do run { target { powerpc*-*-linux* && powerpc_spe } } } */\n-/* { dg-options \"-fexceptions -fnon-call-exceptions -O2\" } */\n-\n-#include <unwind.h>\n-#include <stdlib.h>\n-#include <signal.h>\n-#include <string.h>\n-\n-int count;\n-char *null;\n-int found_reg;\n-\n-typedef int v2si __attribute__((__vector_size__(8)));\n-\n-v2si v1 = { 123, 234 };\n-v2si v2 = { 345, 456 };\n-\n-static _Unwind_Reason_Code\n-force_unwind_stop (int version, _Unwind_Action actions,\n-                   _Unwind_Exception_Class exc_class,\n-                   struct _Unwind_Exception *exc_obj,\n-                   struct _Unwind_Context *context,\n-                   void *stop_parameter)\n-{\n-  unsigned int reg;\n-  if (actions & _UA_END_OF_STACK)\n-    abort ();\n-  if (_Unwind_GetGR (context, 1215) == 123)\n-    found_reg = 1;\n-  return _URC_NO_REASON;\n-}\n-\n-static void force_unwind ()\n-{\n-  struct _Unwind_Exception *exc = malloc (sizeof (*exc));\n-  memset (&exc->exception_class, 0, sizeof (exc->exception_class));\n-  exc->exception_cleanup = 0;\n-\n-#ifndef __USING_SJLJ_EXCEPTIONS__\n-  _Unwind_ForcedUnwind (exc, force_unwind_stop, 0);\n-#else\n-  _Unwind_SjLj_ForcedUnwind (exc, force_unwind_stop, 0);\n-#endif\n-\n-  abort ();\n-}\n-\n-static void counter (void *p __attribute__((unused)))\n-{\n-  ++count;\n-}\n-\n-static void handler (void *p __attribute__((unused)))\n-{\n-  if (count != 2)\n-    abort ();\n-  if (!found_reg)\n-    abort ();\n-  exit (0);\n-}\n-\n-static int __attribute__((noinline)) fn5 ()\n-{\n-  char dummy __attribute__((cleanup (counter)));\n-  force_unwind ();\n-  return 0;\n-}\n-\n-static void fn4 (int sig)\n-{\n-  char dummy __attribute__((cleanup (counter)));\n-  /* Clobber high part without compiler's knowledge so the only saved\n-     copy is from the signal frame.  */\n-  asm volatile (\"evmergelo 15,15,15\");\n-  fn5 ();\n-  null = NULL;\n-}\n-\n-static void fn3 ()\n-{\n-  abort ();\n-}\n-\n-static int __attribute__((noinline)) fn2 ()\n-{\n-  register v2si r15 asm(\"r15\");\n-  r15 = v1;\n-  asm volatile (\"\" : \"+r\" (r15));\n-  *null = 0;\n-  fn3 ();\n-  return 0;\n-}\n-\n-static int __attribute__((noinline)) fn1 ()\n-{\n-  signal (SIGSEGV, fn4);\n-  signal (SIGBUS, fn4);\n-  fn2 ();\n-  return 0;\n-}\n-\n-static int __attribute__((noinline)) fn0 ()\n-{\n-  char dummy __attribute__((cleanup (handler)));\n-  fn1 ();\n-  null = 0;\n-  return 0;\n-}\n-\n-int main()\n-{ \n-  fn0 ();\n-  abort ();\n-}"}, {"sha": "c33874b7fcf504c509e398f7a1d3a03e3d58c22e", "filename": "gcc/testsuite/gcc.target/powerpc/spe-vector-memcpy.c", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memcpy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memcpy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memcpy.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,10 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-O -mdejagnu-cpu=8540 -mspe -mabi=spe -mfloat-gprs=single\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-/* { dg-final { scan-assembler \"evstdd\" } } */\n-\n-void foo(void)\n-{\n-  int x[8] __attribute__((aligned(64))) = { 1, 1, 1, 1, 1, 1, 1, 1 };\n-  bar (x);\n-}"}, {"sha": "7ecaf1037064ca2278275b793c1c0ac963b5ae52", "filename": "gcc/testsuite/gcc.target/powerpc/spe-vector-memset.c", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe-vector-memset.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,13 +0,0 @@\n-/* { dg-do compile { target powerpc*-*-* } } */\n-/* { dg-require-effective-target powerpc_spe } */\n-/* { dg-options \"-O -mspe=yes\" } */\n-/* { dg-final { scan-assembler \"evstdd\" } } */\n-\n-#include <string.h>\n-\n-void foo(void)\n-{\n-  int x[8] __attribute__((aligned(64)));\n-  memset (x, 0, sizeof (x));\n-  bar (x);\n-}"}, {"sha": "be80c6ca71810fbe0f6eaecbf83852675f487e29", "filename": "gcc/testsuite/gcc.target/powerpc/spe1.c", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46fbb6c68266c62b1fee60f25e515ffae4d9b33c/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fspe1.c?ref=46fbb6c68266c62b1fee60f25e515ffae4d9b33c", "patch": "@@ -1,15 +0,0 @@\n-/* { dg-do compile } */\n-/* { dg-options \"-mdejagnu-cpu=8540 -mspe -mabi=spe -mfloat-gprs=single -O0\" } */\n-/* { dg-skip-if \"not an SPE target\" { ! powerpc_spe_nocache } } */\n-\n-/* (Test with -O0 so we don't optimize any of them away).  */\n-\n-\n-typedef float __attribute__((vector_size(8))) __ev64_fs__;\n-\n-__ev64_opaque__ Foo (void);\n-\n-void Bar ()\n-{\n-  __ev64_fs__ fs = Foo ();\n-}"}]}