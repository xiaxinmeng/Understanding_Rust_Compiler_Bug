{"sha": "1f34d121911094c91258d39a7499d37baa681c2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYzNGQxMjE5MTEwOTRjOTEyNThkMzlhNzQ5OWQzN2JhYTY4MWMyYw==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-07-24T00:10:09Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-07-24T00:10:09Z"}, "message": "re PR libstdc++/16678 (warning: suggest parentheses around assignment used as truth value)\n\n\n2004-07-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/16678\n\t* include/bits/locale_facets.tcc: Fix for -Werror.\n\nFrom-SVN: r85103", "tree": {"sha": "91cba530c5b196be416306786d75304725b88f5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91cba530c5b196be416306786d75304725b88f5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f34d121911094c91258d39a7499d37baa681c2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f34d121911094c91258d39a7499d37baa681c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f34d121911094c91258d39a7499d37baa681c2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f34d121911094c91258d39a7499d37baa681c2c/comments", "author": null, "committer": null, "parents": [{"sha": "0e7d217a97d7002639bad1e6af71cc1021a92ed0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e7d217a97d7002639bad1e6af71cc1021a92ed0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e7d217a97d7002639bad1e6af71cc1021a92ed0"}], "stats": {"total": 86, "additions": 49, "deletions": 37}, "files": [{"sha": "3a16fce910ed14b175a68f100f93e1459231a15b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f34d121911094c91258d39a7499d37baa681c2c/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f34d121911094c91258d39a7499d37baa681c2c/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1f34d121911094c91258d39a7499d37baa681c2c", "patch": "@@ -1,3 +1,8 @@\n+2004-07-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/16678\n+\t* include/bits/locale_facets.tcc: Fix for -Werror.\n+\n 2004-07-23  Jonathan Wakely  <redi@gcc.gnu.org>\n \n \t* docs/html/debug.html: Say debug mode only available since 3.4.0."}, {"sha": "b967cee1b352c49c63f1dabb3fa7fecdf36ccfb7", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 44, "deletions": 37, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f34d121911094c91258d39a7499d37baa681c2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f34d121911094c91258d39a7499d37baa681c2c/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=1f34d121911094c91258d39a7499d37baa681c2c", "patch": "@@ -325,12 +325,12 @@ namespace std\n \t__found_grouping.reserve(32);\n       int __sep_pos = 0;\n       const char_type* __lit_zero = __lit + __num_base::_S_izero;\n-      const char_type* __q;\n       while (__beg != __end)\n         {\n \t  // According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t  // and decimal_point.\n \t  const char_type __c = *__beg;\n+\t  const char_type* __q = __traits_type::find(__lit_zero, 10, __c);\n           if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t    {\n \t      if (!__found_dec && !__found_sci)\n@@ -368,7 +368,7 @@ namespace std\n \t      else\n \t\tbreak;\n \t    }\n-          else if (__q = __traits_type::find(__lit_zero, 10, __c))\n+          else if (__q != 0)\n \t    {\n \t      __xtrc += __num_base::_S_atoms_in[__q - __lit];\n \t      __found_mantissa = true;\n@@ -508,7 +508,6 @@ namespace std\n \tbool __overflow = false;\n \t_ValueT __result = 0;\n \tconst char_type* __lit_zero = __lit + __num_base::_S_izero;\n-\tconst char_type* __q;\n \tif (__negative)\n \t  {\n \t    const _ValueT __min = numeric_limits<_ValueT>::min() / __base;\n@@ -517,6 +516,8 @@ namespace std\n \t\t// According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t\t// and decimal_point.\n \t\tconst char_type __c = *__beg;\n+\t\tconst char_type* __q = __traits_type::find(__lit_zero, \n+\t\t\t\t\t\t\t   __len, __c);\n \t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    // NB: Thousands separator at the beginning of a string\n@@ -534,7 +535,7 @@ namespace std\n \t\t  }\n \t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n-\t\telse if (__q = __traits_type::find(__lit_zero, __len, __c))\n+\t\telse if (__q != 0)\n \t\t  {\n \t\t    int __digit = __q - __lit_zero;\n \t\t    if (__digit > 15)\n@@ -562,6 +563,8 @@ namespace std\n \t    for (; __beg != __end; ++__beg)\n \t      {\n \t\tconst char_type __c = *__beg;\n+\t\tconst char_type* __q = __traits_type::find(__lit_zero, \n+\t\t\t\t\t\t\t   __len, __c);\n \t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    if (__sep_pos)\n@@ -577,7 +580,7 @@ namespace std\n \t\t  }\n \t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n-\t\telse if (__q = __traits_type::find(__lit_zero, __len, __c))\n+\t\telse if (__q != 0)\n \t\t  {\n \t\t    int __digit = __q - __lit_zero;\n \t\t    if (__digit > 15)\n@@ -1119,8 +1122,8 @@ namespace std\n       // Replace decimal point.\n       const _CharT __cdec = __ctype.widen('.');\n       const _CharT __dec = __lc->_M_decimal_point;\n-      const _CharT* __p;\n-      if (__p = char_traits<_CharT>::find(__ws, __len, __cdec))\n+      const _CharT* __p = char_traits<_CharT>::find(__ws, __len, __cdec);\n+      if (__p)\n \t__ws[__p - __ws] = __dec;\n \n       // Add grouping, if necessary.\n@@ -1294,7 +1297,6 @@ namespace std\n \t__res.reserve(32);\n \n \tconst char_type* __lit_zero = __lit + money_base::_S_zero;\n-\tconst char_type* __q;\n \tconst money_base::pattern __p = __lc->_M_neg_format;\t\n \tfor (int __i = 0; __i < 4 && __testvalid; ++__i)\n \t  {\n@@ -1356,35 +1358,40 @@ namespace std\n \t\t// Extract digits, remove and stash away the\n \t\t// grouping of found thousands separators.\n \t\tfor (; __beg != __end; ++__beg)\n-\t\t  if (__q = __traits_type::find(__lit_zero, 10, *__beg))\n-\t\t    {\n-\t\t      __res += money_base::_S_atoms[__q - __lit];\n-\t\t      ++__n;\n-\t\t    }\n-\t\t  else if (*__beg == __lc->_M_decimal_point && !__testdecfound)\n-\t\t    {\n-\t\t      __last_pos = __n;\n-\t\t      __n = 0;\n-\t\t      __testdecfound = true;\n-\t\t    }\n-\t\t  else if (__lc->_M_use_grouping\n-\t\t\t   && *__beg == __lc->_M_thousands_sep\n-\t\t\t   && !__testdecfound)\n-\t\t    {\n-\t\t      if (__n)\n-\t\t\t{\n-\t\t\t  // Mark position for later analysis.\n-\t\t\t  __grouping_tmp += static_cast<char>(__n);\n-\t\t\t  __n = 0;\n-\t\t\t}\n-\t\t      else\n-\t\t\t{\n-\t\t\t  __testvalid = false;\n-\t\t\t  break;\n-\t\t\t}\n-\t\t    }\n-\t\t  else\n-\t\t    break;\n+\t\t  {\n+\t\t    const char_type* __q = __traits_type::find(__lit_zero, \n+\t\t\t\t\t\t\t       10, *__beg);\n+\t\t    if (__q != 0)\n+\t\t      {\n+\t\t\t__res += money_base::_S_atoms[__q - __lit];\n+\t\t\t++__n;\n+\t\t      }\n+\t\t    else if (*__beg == __lc->_M_decimal_point \n+\t\t\t     && !__testdecfound)\n+\t\t      {\n+\t\t\t__last_pos = __n;\n+\t\t\t__n = 0;\n+\t\t\t__testdecfound = true;\n+\t\t      }\n+\t\t    else if (__lc->_M_use_grouping\n+\t\t\t     && *__beg == __lc->_M_thousands_sep\n+\t\t\t     && !__testdecfound)\n+\t\t      {\n+\t\t\tif (__n)\n+\t\t\t  {\n+\t\t\t    // Mark position for later analysis.\n+\t\t\t    __grouping_tmp += static_cast<char>(__n);\n+\t\t\t    __n = 0;\n+\t\t\t  }\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    __testvalid = false;\n+\t\t\t    break;\n+\t\t\t  }\n+\t\t      }\n+\t\t    else\n+\t\t      break;\n+\t\t  }\n \t\tif (__res.empty())\n \t\t  __testvalid = false;\n \t\tbreak;"}]}