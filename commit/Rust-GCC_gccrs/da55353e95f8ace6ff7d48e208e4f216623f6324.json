{"sha": "da55353e95f8ace6ff7d48e208e4f216623f6324", "node_id": "C_kwDOANBUbNoAKGRhNTUzNTNlOTVmOGFjZTZmZjdkNDhlMjA4ZTRmMjE2NjIzZjYzMjQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-23T17:41:17Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-06-27T10:08:16Z"}, "message": "libstdc++: Simplify std::variant construction using variable templates\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/variant (_Build_FUN::_S_fun): Define fallback case\n\tas deleted.\n\t(__accepted_index, _Extra_visit_slot_needed): Replace class\n\ttemplates with variable templates.", "tree": {"sha": "079e75bf8a651a5ab9969951dd4833c43f5e1885", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/079e75bf8a651a5ab9969951dd4833c43f5e1885"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da55353e95f8ace6ff7d48e208e4f216623f6324", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da55353e95f8ace6ff7d48e208e4f216623f6324", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da55353e95f8ace6ff7d48e208e4f216623f6324", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da55353e95f8ace6ff7d48e208e4f216623f6324/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6177f60d914abcb8520b87ae62658e70a7c13759", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6177f60d914abcb8520b87ae62658e70a7c13759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6177f60d914abcb8520b87ae62658e70a7c13759"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "5ff1e3edcdfff56a0eddccf9ffdabc4e5ea72f38", "filename": "libstdc++-v3/include/std/variant", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da55353e95f8ace6ff7d48e208e4f216623f6324/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da55353e95f8ace6ff7d48e208e4f216623f6324/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fvariant?ref=da55353e95f8ace6ff7d48e208e4f216623f6324", "patch": "@@ -764,7 +764,7 @@ namespace __variant\n     {\n       // This function means 'using _Build_FUN<I, T, Ti>::_S_fun;' is valid,\n       // but only static functions will be considered in the call below.\n-      void _S_fun();\n+      void _S_fun() = delete;\n     };\n \n   // \"... for which Ti x[] = {std::forward<T>(t)}; is well-formed.\"\n@@ -795,29 +795,28 @@ namespace __variant\n \n   // The index selected for FUN(std::forward<T>(t)), or variant_npos if none.\n   template<typename _Tp, typename _Variant, typename = void>\n-    struct __accepted_index\n-    : integral_constant<size_t, variant_npos>\n-    { };\n+    inline constexpr size_t\n+    __accepted_index = variant_npos;\n \n   template<typename _Tp, typename _Variant>\n-    struct __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>\n-    : _FUN_type<_Tp, _Variant>\n-    { };\n+    inline constexpr size_t\n+    __accepted_index<_Tp, _Variant, void_t<_FUN_type<_Tp, _Variant>>>\n+      = _FUN_type<_Tp, _Variant>::value;\n \n-  template <typename _Maybe_variant_cookie, typename _Variant>\n-    struct _Extra_visit_slot_needed\n-    {\n-      template <typename> struct _Variant_never_valueless;\n+  template<typename _Maybe_variant_cookie, typename _Variant,\n+\t   typename = __remove_cvref_t<_Variant>>\n+    inline constexpr bool\n+    __extra_visit_slot_needed = false;\n \n-      template <typename... _Types>\n-\tstruct _Variant_never_valueless<variant<_Types...>>\n-\t: bool_constant<__variant::__never_valueless<_Types...>()> {};\n+  template<typename _Var, typename... _Types>\n+    inline constexpr bool\n+    __extra_visit_slot_needed<__variant_cookie, _Var, variant<_Types...>>\n+      = !__variant::__never_valueless<_Types...>();\n \n-      static constexpr bool value =\n-\t(is_same_v<_Maybe_variant_cookie, __variant_cookie>\n-\t || is_same_v<_Maybe_variant_cookie, __variant_idx_cookie>)\n-\t&& !_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;\n-    };\n+  template<typename _Var, typename... _Types>\n+    inline constexpr bool\n+    __extra_visit_slot_needed<__variant_idx_cookie, _Var, variant<_Types...>>\n+      = !__variant::__never_valueless<_Types...>();\n \n   // Used for storing a multi-dimensional vtable.\n   template<typename _Tp, size_t... _Dimensions>\n@@ -874,7 +873,7 @@ namespace __variant\n       using _Variant = typename _Nth_type<__index, _Variants...>::type;\n \n       static constexpr int __do_cookie =\n-\t_Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;\n+\t__extra_visit_slot_needed<_Ret, _Variant> ? 1 : 0;\n \n       using _Tp = _Ret(*)(_Visitor, _Variants...);\n \n@@ -953,7 +952,7 @@ namespace __variant\n \t_S_apply_all_alts(_Array_type& __vtable,\n \t\t\t  std::index_sequence<__var_indices...>)\n \t{\n-\t  if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)\n+\t  if constexpr (__extra_visit_slot_needed<_Result_type, _Next>)\n \t    (_S_apply_single_alt<true, __var_indices>(\n \t      __vtable._M_arr[__var_indices + 1],\n \t      &(__vtable._M_arr[0])), ...);\n@@ -1372,7 +1371,7 @@ namespace __variant\n \n       template<typename _Tp>\n \tstatic constexpr size_t __accepted_index\n-\t  = __detail::__variant::__accepted_index<_Tp, variant>::value;\n+\t  = __detail::__variant::__accepted_index<_Tp, variant>;\n \n       template<size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>\n \tusing __to_type = typename _Nth_type<_Np, _Types...>::type;"}]}