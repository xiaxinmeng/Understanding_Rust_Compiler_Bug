{"sha": "d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDIxMjUyZGU2YzgxZWQyMzZkODk4MWQ0N2I5YTU3ZGM0ZjFjNmQ1Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-05T19:05:30Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-08-05T19:05:30Z"}, "message": "c++: cxx_eval_vec_init after zero-initialization [PR96282]\n\nIn the first testcase below, expand_aggr_init_1 sets up t's default\nconstructor such that the ctor first zero-initializes the entire base b,\nfollowed by calling b's default constructor, the latter of which just\ndefault-initializes the array member b::m via a VEC_INIT_EXPR.\n\nSo upon constexpr evaluation of this latter VEC_INIT_EXPR, ctx->ctor is\nnonempty due to the prior zero-initialization, and we proceed in\ncxx_eval_vec_init to append new constructor_elts to the end of ctx->ctor\nwithout first checking if a matching constructor_elt already exists.\nThis leads to ctx->ctor having two matching constructor_elts for each\nindex.\n\nThis patch fixes this issue by truncating a zero-initialized array\nCONSTRUCTOR in cxx_eval_vec_init_1 before we begin appending array\nelements to it.  We propagate its zeroed out state during evaluation by\nclearing CONSTRUCTOR_NO_CLEARING on each new appended aggregate element.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/96282\n\t* constexpr.c (cxx_eval_vec_init_1): Truncate ctx->ctor and\n\tthen clear CONSTRUCTOR_NO_CLEARING on each appended element\n\tinitializer if we're initializing a previously zero-initialized\n\tarray object.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/96282\n\t* g++.dg/cpp0x/constexpr-array26.C: New test.\n\t* g++.dg/cpp0x/constexpr-array27.C: New test.\n\t* g++.dg/cpp2a/constexpr-init18.C: New test.\n\nCo-authored-by: Jason Merrill <jason@redhat.com>", "tree": {"sha": "0998a63ef34180ce3fc314ad61f148431bd120b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0998a63ef34180ce3fc314ad61f148431bd120b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/comments", "author": null, "committer": null, "parents": [{"sha": "dd30d93f1a3ead7b814c1b179cf7197e4bf1e183", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd30d93f1a3ead7b814c1b179cf7197e4bf1e183", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd30d93f1a3ead7b814c1b179cf7197e4bf1e183"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "ab747a58fa0ad70e97de49c458b93f5fb43886a0", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "patch": "@@ -4171,6 +4171,18 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n       pre_init = true;\n     }\n \n+  bool zeroed_out = false;\n+  if (!CONSTRUCTOR_NO_CLEARING (ctx->ctor))\n+    {\n+      /* We're initializing an array object that had been zero-initialized\n+\t earlier.  Truncate ctx->ctor, and propagate its zeroed state by\n+\t clearing CONSTRUCTOR_NO_CLEARING on each of the aggregate element\n+\t initializers we append to it.  */\n+      gcc_checking_assert (initializer_zerop (ctx->ctor));\n+      zeroed_out = true;\n+      vec_safe_truncate (*p, 0);\n+    }\n+\n   tree nelts = get_array_or_vector_nelts (ctx, atype, non_constant_p,\n \t\t\t\t\t  overflow_p);\n   unsigned HOST_WIDE_INT max = tree_to_uhwi (nelts);\n@@ -4182,7 +4194,11 @@ cxx_eval_vec_init_1 (const constexpr_ctx *ctx, tree atype, tree init,\n       constexpr_ctx new_ctx;\n       init_subob_ctx (ctx, new_ctx, idx, pre_init ? init : elttype);\n       if (new_ctx.ctor != ctx->ctor)\n-\tCONSTRUCTOR_APPEND_ELT (*p, idx, new_ctx.ctor);\n+\t{\n+\t  if (zeroed_out)\n+\t    CONSTRUCTOR_NO_CLEARING (new_ctx.ctor) = false;\n+\t  CONSTRUCTOR_APPEND_ELT (*p, idx, new_ctx.ctor);\n+\t}\n       if (TREE_CODE (elttype) == ARRAY_TYPE)\n \t{\n \t  /* A multidimensional array; recurse.  */"}, {"sha": "274f55a88bfdf16c6e512e5314a54a5b4789b174", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array26.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array26.C?ref=d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/96282\n+// { dg-do compile { target c++11 } }\n+\n+struct e { bool v = true; };\n+\n+template<int N>\n+struct b { e m[N]; };\n+\n+template<int N>\n+struct t : b<N> { constexpr t() : b<N>() {} };\n+\n+constexpr t<1> h1;\n+constexpr t<42> h2;"}, {"sha": "1234caef31d1c861b2f5f9ba052edc16cf05f73e", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-array27.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-array27.C?ref=d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/96282\n+// { dg-do compile { target c++11 } }\n+\n+struct e { bool v = true; e *p = this; };\n+\n+template<int N>\n+struct b { e m[N][N]; };\n+\n+template<int N>\n+struct t : b<N> { constexpr t() : b<N>() {} };\n+\n+constexpr t<1> h1;\n+constexpr t<42> h2;"}, {"sha": "47ad11f22905a3e52d4943a4434021047270d059", "filename": "gcc/testsuite/g++.dg/cpp2a/constexpr-init18.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d21252de6c81ed236d8981d47b9a57dc4f1c6d57/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconstexpr-init18.C?ref=d21252de6c81ed236d8981d47b9a57dc4f1c6d57", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/96282\n+// { dg-do compile { target c++20 } }\n+\n+struct e { bool v = true; bool w; };\n+\n+template<int N>\n+struct b { e m[N][N]; };\n+\n+template<int N>\n+struct t : b<N> { constexpr t() : b<N>() {} };\n+\n+constexpr t<1> h1;\n+static_assert(h1.m[0][0].w == false);\n+\n+constexpr t<42> h2;\n+static_assert(h2.m[17][17].w == false);"}]}