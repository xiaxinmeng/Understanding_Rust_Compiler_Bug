{"sha": "35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzViYzExYzM1OTBmMDQyNTBmMTUwYTRhYjRkM2I2ZTI2OTc5YzllOA==", "commit": {"author": {"name": "Andreas Krebbel", "email": "Andreas.Krebbel@de.ibm.com", "date": "2015-02-27T10:15:36Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2015-02-27T10:15:36Z"}, "message": "S/390: Implement TARGET_ATOMIC_ASSIGN_EXPAND_FENV.\n\ngcc/ChangeLog:\n\t* config/s390/s390.c: (s390_atomic_assign_expand_fenv): New\n\tfunction.\n\t(TARGET_ATOMIC_ASSIGN_EXPAND_FENV): Define macro.\n\nFrom-SVN: r221048", "tree": {"sha": "7ac1ee3f156eed9b51a85aa2d2fb4fa2d2961ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7ac1ee3f156eed9b51a85aa2d2fb4fa2d2961ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35bc11c3590f04250f150a4ab4d3b6e26979c9e8/comments", "author": null, "committer": null, "parents": [{"sha": "004f64e1b05a568d974669c41a5c0f1af77914de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/004f64e1b05a568d974669c41a5c0f1af77914de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/004f64e1b05a568d974669c41a5c0f1af77914de"}], "stats": {"total": 83, "additions": 83, "deletions": 0}, "files": [{"sha": "39d6d3e827a1989854ab4550af02e9d87bb06d66", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bc11c3590f04250f150a4ab4d3b6e26979c9e8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bc11c3590f04250f150a4ab4d3b6e26979c9e8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "patch": "@@ -1,3 +1,9 @@\n+2015-02-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n+\n+\t* config/s390/s390.c: (s390_atomic_assign_expand_fenv): New\n+\tfunction.\n+\t(TARGET_ATOMIC_ASSIGN_EXPAND_FENV): Define macro.\n+\n 2015-02-27  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* config/s390/s390.c (enum s390_builtin):"}, {"sha": "1924f2acb68f6243e6c8cb6051f1be227babee24", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35bc11c3590f04250f150a4ab4d3b6e26979c9e8/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35bc11c3590f04250f150a4ab4d3b6e26979c9e8/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=35bc11c3590f04250f150a4ab4d3b6e26979c9e8", "patch": "@@ -12139,6 +12139,80 @@ s390_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n \t  || size == 4 || (TARGET_ZARCH && size == 8));\n }\n \n+/* Implement TARGET_ATOMIC_ASSIGN_EXPAND_FENV hook.  */\n+\n+static void\n+s390_atomic_assign_expand_fenv (tree *hold, tree *clear, tree *update)\n+{\n+  tree sfpc = s390_builtin_decls[S390_BUILTIN_S390_SFPC];\n+  tree efpc = s390_builtin_decls[S390_BUILTIN_S390_EFPC];\n+  tree call_efpc = build_call_expr (efpc, 0);\n+  tree fenv_var = create_tmp_var (unsigned_type_node);\n+\n+#define FPC_EXCEPTION_MASK\t HOST_WIDE_INT_UC (0xf8000000)\n+#define FPC_FLAGS_MASK\t\t HOST_WIDE_INT_UC (0x00f80000)\n+#define FPC_DXC_MASK\t\t HOST_WIDE_INT_UC (0x0000ff00)\n+#define FPC_EXCEPTION_MASK_SHIFT HOST_WIDE_INT_UC (24)\n+#define FPC_FLAGS_SHIFT\t\t HOST_WIDE_INT_UC (16)\n+#define FPC_DXC_SHIFT\t\t HOST_WIDE_INT_UC (8)\n+\n+  /* Generates the equivalent of feholdexcept (&fenv_var)\n+\n+     fenv_var = __builtin_s390_efpc ();\n+     __builtin_s390_sfpc (fenv_var & mask) */\n+  tree old_fpc = build2 (MODIFY_EXPR, unsigned_type_node, fenv_var, call_efpc);\n+  tree new_fpc =\n+    build2 (BIT_AND_EXPR, unsigned_type_node, fenv_var,\n+\t    build_int_cst (unsigned_type_node,\n+\t\t\t   ~(FPC_DXC_MASK | FPC_FLAGS_MASK |\n+\t\t\t     FPC_EXCEPTION_MASK)));\n+  tree set_new_fpc = build_call_expr (sfpc, 1, new_fpc);\n+  *hold = build2 (COMPOUND_EXPR, void_type_node, old_fpc, set_new_fpc);\n+\n+  /* Generates the equivalent of feclearexcept (FE_ALL_EXCEPT)\n+\n+     __builtin_s390_sfpc (__builtin_s390_efpc () & mask) */\n+  new_fpc = build2 (BIT_AND_EXPR, unsigned_type_node, call_efpc,\n+\t\t    build_int_cst (unsigned_type_node,\n+\t\t\t\t   ~(FPC_DXC_MASK | FPC_FLAGS_MASK)));\n+  *clear = build_call_expr (sfpc, 1, new_fpc);\n+\n+  /* Generates the equivalent of feupdateenv (fenv_var)\n+\n+  old_fpc = __builtin_s390_efpc ();\n+  __builtin_s390_sfpc (fenv_var);\n+  __atomic_feraiseexcept ((old_fpc & FPC_FLAGS_MASK) >> FPC_FLAGS_SHIFT);  */\n+\n+  old_fpc = create_tmp_var (unsigned_type_node);\n+  tree store_old_fpc = build2 (MODIFY_EXPR, void_type_node,\n+\t\t\t       old_fpc, call_efpc);\n+\n+  set_new_fpc = build_call_expr (sfpc, 1, fenv_var);\n+\n+  tree raise_old_except = build2 (BIT_AND_EXPR, unsigned_type_node, old_fpc,\n+\t\t\t\t  build_int_cst (unsigned_type_node,\n+\t\t\t\t\t\t FPC_FLAGS_MASK));\n+  raise_old_except = build2 (RSHIFT_EXPR, unsigned_type_node, raise_old_except,\n+\t\t\t     build_int_cst (unsigned_type_node,\n+\t\t\t\t\t    FPC_FLAGS_SHIFT));\n+  tree atomic_feraiseexcept\n+    = builtin_decl_implicit (BUILT_IN_ATOMIC_FERAISEEXCEPT);\n+  raise_old_except = build_call_expr (atomic_feraiseexcept,\n+\t\t\t\t      1, raise_old_except);\n+\n+  *update = build2 (COMPOUND_EXPR, void_type_node,\n+\t\t    build2 (COMPOUND_EXPR, void_type_node,\n+\t\t\t    store_old_fpc, set_new_fpc),\n+\t\t    raise_old_except);\n+\n+#undef FPC_EXCEPTION_MASK\n+#undef FPC_FLAGS_MASK\n+#undef FPC_DXC_MASK\n+#undef FPC_EXCEPTION_MASK_SHIFT\n+#undef FPC_FLAGS_SHIFT\n+#undef FPC_DXC_SHIFT\n+}\n+\n /* Initialize GCC target structure.  */\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n@@ -12330,6 +12404,9 @@ s390_use_by_pieces_infrastructure_p (unsigned HOST_WIDE_INT size,\n #define TARGET_USE_BY_PIECES_INFRASTRUCTURE_P \\\n   s390_use_by_pieces_infrastructure_p\n \n+#undef TARGET_ATOMIC_ASSIGN_EXPAND_FENV\n+#define TARGET_ATOMIC_ASSIGN_EXPAND_FENV s390_atomic_assign_expand_fenv\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-s390.h\""}]}