{"sha": "5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWY1MWE3NTI4ZmExZDFjZWU1NWE2NjRiNzFkZDNiM2EwODE1MWZmYw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@cygnus.com", "date": "2000-08-02T19:46:07Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-08-02T19:46:07Z"}, "message": "gc_priv.h (GC_generic_malloc_inner): Prototype.\n\n\t* gc_priv.h (GC_generic_malloc_inner): Prototype.\n\t(GC_generic_malloc): Likewise.\n\t(GC_add_to_black_list_normal): Likewise.\n\t(GC_find_header): Likewise.\n\t(GC_ADD_TO_BLACK_LIST_NORMAL): Cast bits argument to word.\n\t* gc_mark.h (GC_find_start): Prototype.\n\t(GC_signal_mark_stack_overflow): Likewise.\n\nFrom-SVN: r35431", "tree": {"sha": "628d9fc70d0a29eaeacc2a9238606cd5b5290978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/628d9fc70d0a29eaeacc2a9238606cd5b5290978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/comments", "author": null, "committer": null, "parents": [{"sha": "9e9af119531d477c15907b2ab8f7cb9008f6a2ab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e9af119531d477c15907b2ab8f7cb9008f6a2ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e9af119531d477c15907b2ab8f7cb9008f6a2ab"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "b3ef6d36eec98fbe3fa1950a501f92d75b965a1d", "filename": "boehm-gc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2FChangeLog?ref=5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "patch": "@@ -1,3 +1,13 @@\n+2000-08-02  Tom Tromey  <tromey@cygnus.com>\n+\n+\t* gc_priv.h (GC_generic_malloc_inner): Prototype.\n+\t(GC_generic_malloc): Likewise.\n+\t(GC_add_to_black_list_normal): Likewise.\n+\t(GC_find_header): Likewise.\n+\t(GC_ADD_TO_BLACK_LIST_NORMAL): Cast bits argument to word.\n+\t* gc_mark.h (GC_find_start): Prototype.\n+\t(GC_signal_mark_stack_overflow): Likewise.\n+\n 2000-07-24  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* configure.in (THREADS): Don't --enable-threads on IRIX <= 5.*."}, {"sha": "295423a62a19f7321185a332eec13a6fad1bd57f", "filename": "boehm-gc/gc_mark.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2Fgc_mark.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2Fgc_mark.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_mark.h?ref=5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "patch": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 1991-1994 by Xerox Corporation.  All rights reserved.\n+ * Copyright (c) 1991-1994, 2000 by Xerox Corporation.  All rights reserved.\n  *\n  * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED\n  * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.\n@@ -117,9 +117,13 @@ extern mse * GC_mark_stack_top;\n \n extern mse * GC_mark_stack;\n \n-ptr_t GC_find_start();\n+#ifdef PRINT_BLACK_LIST\n+ptr_t GC_find_start(ptr_t, hdr*, word);\n+#else\n+ptr_t GC_find_start(ptr_t, hdr*);\n+#endif\n \n-mse * GC_signal_mark_stack_overflow();\n+mse * GC_signal_mark_stack_overflow(mse *);\n \n # ifdef GATHERSTATS\n #   define ADD_TO_ATOMIC(sz) GC_atomic_in_use += (sz)"}, {"sha": "841b752f9f379e1323f11c4be1347692511bffdc", "filename": "boehm-gc/gc_priv.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2Fgc_priv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5f51a7528fa1d1cee55a664b71dd3b3a08151ffc/boehm-gc%2Fgc_priv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/boehm-gc%2Fgc_priv.h?ref=5f51a7528fa1d1cee55a664b71dd3b3a08151ffc", "patch": "@@ -1597,23 +1597,23 @@ void GC_register_data_segments();\n /* Black listing: */\n void GC_bl_init(); \t\n # ifndef ALL_INTERIOR_POINTERS\n-    void GC_add_to_black_list_normal(/* bits, maybe source */);\n+    void GC_add_to_black_list_normal(word /* bits, maybe source */);\n \t\t\t/* Register bits as a possible future false\t*/\n \t\t\t/* reference from the heap or static data\t*/\n #   ifdef PRINT_BLACK_LIST\n #     define GC_ADD_TO_BLACK_LIST_NORMAL(bits, source) \\\n-\t\t\tGC_add_to_black_list_normal(bits, source)\n+\t\t\tGC_add_to_black_list_normal((word) bits, source)\n #   else\n #     define GC_ADD_TO_BLACK_LIST_NORMAL(bits, source) \\\n-\t\t\tGC_add_to_black_list_normal(bits)\n+\t\t\tGC_add_to_black_list_normal((word) bits)\n #   endif\n # else\n #   ifdef PRINT_BLACK_LIST\n #     define GC_ADD_TO_BLACK_LIST_NORMAL(bits, source) \\\n-\t\t\tGC_add_to_black_list_stack(bits, source)\n+\t\t\tGC_add_to_black_list_stack((word) bits, source)\n #   else\n #     define GC_ADD_TO_BLACK_LIST_NORMAL(bits, source) \\\n-\t\t\tGC_add_to_black_list_stack(bits)\n+\t\t\tGC_add_to_black_list_stack((word) bits)\n #   endif\n # endif\n \n@@ -1713,7 +1713,7 @@ void GC_collect_a_little_inner(/* int n */);\n \t\t\t\t/* collection work, if appropriate.\t*/\n \t\t\t\t/* A unit is an amount appropriate for  */\n \t\t\t\t/* HBLKSIZE bytes of allocation.\t*/\n-ptr_t GC_generic_malloc(/* bytes, kind */);\n+ptr_t GC_generic_malloc(word bytes, int kind);\n \t\t\t\t/* Allocate an object of the given\t*/\n \t\t\t\t/* kind.  By default, there are only\t*/\n \t\t\t\t/* a few kinds: composite(pointerfree), */\n@@ -1727,7 +1727,7 @@ ptr_t GC_generic_malloc_ignore_off_page(/* bytes, kind */);\n \t\t\t\t/* As above, but pointers past the \t*/\n \t\t\t\t/* first page of the resulting object\t*/\n \t\t\t\t/* are ignored.\t\t\t\t*/\n-ptr_t GC_generic_malloc_inner(/* bytes, kind */);\n+ptr_t GC_generic_malloc_inner(word bytes, int kind);\n \t\t\t\t/* Ditto, but I already hold lock, etc.\t*/\n ptr_t GC_generic_malloc_words_small GC_PROTO((size_t words, int kind));\n \t\t\t\t/* As above, but size in units of words */\n@@ -1757,7 +1757,7 @@ void GC_remove_header(/*h*/);\n \t\t\t\t/* Remove the header for block h.\t*/\n void GC_remove_counts(/*h, sz*/);\n \t\t\t\t/* Remove forwarding counts for h.\t*/\n-hdr * GC_find_header(/*p*/);\t/* Debugging only.\t\t\t*/\n+hdr * GC_find_header(ptr_t /*p*/);\t/* Debugging only.\t\t\t*/\n \n void GC_finalize();\t/* Perform all indicated finalization actions\t*/\n \t\t\t/* on unmarked objects.\t\t\t\t*/"}]}