{"sha": "9fe4f60adbda974b46b7fa5fd005adae973f6f80", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWZlNGY2MGFkYmRhOTc0YjQ2YjdmYTVmZDAwNWFkYWU5NzNmNmY4MA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-08-13T07:06:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-08-13T07:06:10Z"}, "message": "re PR tree-optimization/66502 (SCCVN can't handle PHIs optimistically optimally)\n\n2015-08-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/66502\n\tPR tree-optimization/67167\n\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Do not include\n\tbackedge arguments.\n\t(vn_phi_lookup): Adjust.\n\t(vn_phi_insert): Likewise.\n\t(visit_phi): Prefer to value-number to another PHI node\n\tover value-numbering to a PHI argument.\n\t(init_scc_vn): Mark DFS back edges.\n\n\t* gcc.dg/tree-ssa/ssa-fre-46.c: New testcase.\n\nFrom-SVN: r226850", "tree": {"sha": "f2e7b5bd717bc883deb67d37eaeafab5b16e09d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2e7b5bd717bc883deb67d37eaeafab5b16e09d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe4f60adbda974b46b7fa5fd005adae973f6f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe4f60adbda974b46b7fa5fd005adae973f6f80", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe4f60adbda974b46b7fa5fd005adae973f6f80", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe4f60adbda974b46b7fa5fd005adae973f6f80/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "003b40ae57ba5c1acb06752936536298e029c189", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/003b40ae57ba5c1acb06752936536298e029c189", "html_url": "https://github.com/Rust-GCC/gccrs/commit/003b40ae57ba5c1acb06752936536298e029c189"}], "stats": {"total": 98, "additions": 73, "deletions": 25}, "files": [{"sha": "6b62396c7afe3d4b687abb6f8aa6b57102e7c763", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9fe4f60adbda974b46b7fa5fd005adae973f6f80", "patch": "@@ -1,3 +1,15 @@\n+2015-08-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66502\n+\tPR tree-optimization/67167\n+\t* tree-ssa-sccvn.c (vn_phi_compute_hash): Do not include\n+\tbackedge arguments.\n+\t(vn_phi_lookup): Adjust.\n+\t(vn_phi_insert): Likewise.\n+\t(visit_phi): Prefer to value-number to another PHI node\n+\tover value-numbering to a PHI argument.\n+\t(init_scc_vn): Mark DFS back edges.\n+\n 2015-08-13  Richard Biener  <rguenther@suse.de>\n \n \t* gimple.h (gcall::code_): New constant static member."}, {"sha": "79d408e456381bcdea0ae445307db04f7112f80a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9fe4f60adbda974b46b7fa5fd005adae973f6f80", "patch": "@@ -1,3 +1,9 @@\n+2015-08-13  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/66502\n+\tPR tree-optimization/67167\n+\t* gcc.dg/tree-ssa/ssa-fre-46.c: New testcase.\n+\n 2015-08-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53330"}, {"sha": "d6e63518e9f6e9f86fd26686e1503d62bc83c858", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-fre-46.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-46.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-46.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-fre-46.c?ref=9fe4f60adbda974b46b7fa5fd005adae973f6f80", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-fre1-details\" } */\n+\n+int x[1024];\n+int foo (int a, int s, unsigned int k)\n+{\n+  int i = a, j = a;\n+  int sum = 0;\n+  do\n+    {\n+      sum += x[i];\n+      sum += x[j];\n+      i += s;\n+      j += s;\n+    }\n+  while (k--);\n+  return sum;\n+}\n+\n+/* We want to remove the redundant induction variable and thus its PHI node.  */\n+/* { dg-final { scan-tree-dump \"Removing dead stmt \\[^\\r\\n\\]*PHI\" \"fre1\" } } */"}, {"sha": "73d1070df441611a3d731e664e86ce9107f0b850", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe4f60adbda974b46b7fa5fd005adae973f6f80/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=9fe4f60adbda974b46b7fa5fd005adae973f6f80", "patch": "@@ -2663,17 +2663,24 @@ static inline hashval_t\n vn_phi_compute_hash (vn_phi_t vp1)\n {\n   inchash::hash hstate (vp1->block->index);\n-  int i;\n   tree phi1op;\n   tree type;\n+  edge e;\n+  edge_iterator ei;\n \n   /* If all PHI arguments are constants we need to distinguish\n      the PHI node via its type.  */\n   type = vp1->type;\n   hstate.merge_hash (vn_hash_type (type));\n \n-  FOR_EACH_VEC_ELT (vp1->phiargs, i, phi1op)\n+  FOR_EACH_EDGE (e, ei, vp1->block->preds)\n     {\n+      /* Don't hash backedge values they need to be handled as VN_TOP\n+         for optimistic value-numbering.  */\n+      if (e->flags & EDGE_DFS_BACK)\n+\tcontinue;\n+\n+      phi1op = vp1->phiargs[e->dest_idx];\n       if (phi1op == VN_TOP)\n \tcontinue;\n       inchash::add_expr (phi1op, hstate);\n@@ -2726,16 +2733,18 @@ vn_phi_lookup (gimple phi)\n {\n   vn_phi_s **slot;\n   struct vn_phi_s vp1;\n-  unsigned i;\n+  edge e;\n+  edge_iterator ei;\n \n   shared_lookup_phiargs.truncate (0);\n+  shared_lookup_phiargs.safe_grow (gimple_phi_num_args (phi));\n \n   /* Canonicalize the SSA_NAME's to their value number.  */\n-  for (i = 0; i < gimple_phi_num_args (phi); i++)\n+  FOR_EACH_EDGE (e, ei, gimple_bb (phi)->preds)\n     {\n-      tree def = PHI_ARG_DEF (phi, i);\n+      tree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       def = TREE_CODE (def) == SSA_NAME ? SSA_VAL (def) : def;\n-      shared_lookup_phiargs.safe_push (def);\n+      shared_lookup_phiargs[e->dest_idx] = def;\n     }\n   vp1.type = TREE_TYPE (gimple_phi_result (phi));\n   vp1.phiargs = shared_lookup_phiargs;\n@@ -2759,15 +2768,18 @@ vn_phi_insert (gimple phi, tree result)\n {\n   vn_phi_s **slot;\n   vn_phi_t vp1 = current_info->phis_pool->allocate ();\n-  unsigned i;\n   vec<tree> args = vNULL;\n+  edge e;\n+  edge_iterator ei;\n+\n+  args.safe_grow (gimple_phi_num_args (phi));\n \n   /* Canonicalize the SSA_NAME's to their value number.  */\n-  for (i = 0; i < gimple_phi_num_args (phi); i++)\n+  FOR_EACH_EDGE (e, ei, gimple_bb (phi)->preds)\n     {\n-      tree def = PHI_ARG_DEF (phi, i);\n+      tree def = PHI_ARG_DEF_FROM_EDGE (phi, e);\n       def = TREE_CODE (def) == SSA_NAME ? SSA_VAL (def) : def;\n-      args.safe_push (def);\n+      args[e->dest_idx] = def;\n     }\n   vp1->value_id = VN_INFO (result)->value_id;\n   vp1->type = TREE_TYPE (gimple_phi_result (phi));\n@@ -3252,28 +3264,23 @@ visit_phi (gimple phi)\n \tif (def == VN_TOP)\n \t  continue;\n \tif (sameval == VN_TOP)\n+\t  sameval = def;\n+\telse if (!expressions_equal_p (def, sameval))\n \t  {\n-\t    sameval = def;\n-\t  }\n-\telse\n-\t  {\n-\t    if (!expressions_equal_p (def, sameval))\n-\t      {\n-\t\tallsame = false;\n-\t\tbreak;\n-\t      }\n+\t    allsame = false;\n+\t    break;\n \t  }\n       }\n \n-  /* If all value numbered to the same value, the phi node has that\n-     value.  */\n-  if (allsame)\n-    return set_ssa_val_to (PHI_RESULT (phi), sameval);\n-\n-  /* Otherwise, see if it is equivalent to a phi node in this block.  */\n+  /* First see if it is equivalent to a phi node in this block.  We prefer\n+     this as it allows IV elimination - see PRs 66502 and 67167.  */\n   result = vn_phi_lookup (phi);\n   if (result)\n     changed = set_ssa_val_to (PHI_RESULT (phi), result);\n+  /* Otherwise all value numbered to the same value, the phi node has that\n+     value.  */\n+  else if (allsame)\n+    changed = set_ssa_val_to (PHI_RESULT (phi), sameval);\n   else\n     {\n       vn_phi_insert (phi, PHI_RESULT (phi));\n@@ -4163,6 +4170,8 @@ init_scc_vn (void)\n   int *rpo_numbers_temp;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n+  mark_dfs_back_edges ();\n+\n   sccstack.create (0);\n   constant_to_value_id = new hash_table<vn_constant_hasher> (23);\n "}]}