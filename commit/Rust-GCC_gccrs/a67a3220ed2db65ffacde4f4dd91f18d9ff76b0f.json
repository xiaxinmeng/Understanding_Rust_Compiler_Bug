{"sha": "a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTY3YTMyMjBlZDJkYjY1ZmZhY2RlNGY0ZGQ5MWYxOGQ5ZmY3NmIwZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2003-04-02T22:42:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2003-04-02T22:42:59Z"}, "message": "re PR inline-asm/8808 (Internal compiler error in extract_constrain_insn_cached)\n\n\n\tPR inline-asm/8088\n\t* i386.c (ix86_hard_regno_mode_ok):  Return 0 for MMX/SSE registers\n\twhen MMX/SSE is not available.\n\nFrom-SVN: r65181", "tree": {"sha": "bc0fa32412039a90719788fe30ebf81d656c12f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc0fa32412039a90719788fe30ebf81d656c12f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f/comments", "author": null, "committer": null, "parents": [{"sha": "112924807cce5d54ff6d94409e1e0a9690edf182", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/112924807cce5d54ff6d94409e1e0a9690edf182", "html_url": "https://github.com/Rust-GCC/gccrs/commit/112924807cce5d54ff6d94409e1e0a9690edf182"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "514256844f3b5dbd4e659b39078379fc3f68133e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "patch": "@@ -1,3 +1,9 @@\n+Thu Apr  3 00:31:21 CEST 2003  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR inline-asm/8088\n+\t* i386.c (ix86_hard_regno_mode_ok):  Return 0 for MMX/SSE registers\n+\twhen MMX/SSE is not available.\n+\n 2003-04-02  Mike Stump  <mrs@apple.com>\n \n \t* doc/install.texi (Specific): Update pointers to apple.com."}, {"sha": "a96c6ecc436293ba95c9b3498c74a81ea7693ed9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=a67a3220ed2db65ffacde4f4dd91f18d9ff76b0f", "patch": "@@ -6080,13 +6080,11 @@ legitimate_address_p (mode, addr, strict)\n \t     that never results in lea, this seems to be easier and\n \t     correct fix for crash to disable this test.  */\n \t}\n-#if 0\n       else if (!CONSTANT_ADDRESS_P (disp))\n \t{\n \t  reason = \"displacement is not constant\";\n \t  goto report_error;\n \t}\n-#endif\n       else if (TARGET_64BIT && !x86_64_sign_extended_value (disp))\n \t{\n \t  reason = \"displacement is out of range\";\n@@ -14817,9 +14815,10 @@ ix86_hard_regno_mode_ok (regno, mode)\n   if (FP_REGNO_P (regno))\n     return VALID_FP_MODE_P (mode);\n   if (SSE_REGNO_P (regno))\n-    return VALID_SSE_REG_MODE (mode);\n+    return (TARGET_SSE ? VALID_SSE_REG_MODE (mode) : 0);\n   if (MMX_REGNO_P (regno))\n-    return VALID_MMX_REG_MODE (mode) || VALID_MMX_REG_MODE_3DNOW (mode);\n+    return (TARGET_MMX\n+\t    ? VALID_MMX_REG_MODE (mode) || VALID_MMX_REG_MODE_3DNOW (mode) : 0);\n   /* We handle both integer and floats in the general purpose registers.\n      In future we should be able to handle vector modes as well.  */\n   if (!VALID_INT_MODE_P (mode) && !VALID_FP_MODE_P (mode))"}]}