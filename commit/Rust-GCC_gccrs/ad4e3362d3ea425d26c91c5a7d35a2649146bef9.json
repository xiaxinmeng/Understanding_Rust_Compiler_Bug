{"sha": "ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ0ZTMzNjJkM2VhNDI1ZDI2YzkxYzVhN2QzNWEyNjQ5MTQ2YmVmOQ==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2014-01-24T14:51:19Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-24T14:51:19Z"}, "message": "sem_ch3.adb (Analyze_Declarations): At the end of an appropriate declarative part...\n\n2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch3.adb (Analyze_Declarations): At the end of an\n\tappropriate declarative part, call Freeze_All from the first\n\tdeclaration in the scope, not from the first unfrozen one. This\n\tis necessary to apply visibility checks to entities with delayed\n\taspects. Otherwise, in the presence of instantiations and cleanups\n\tthat they may generate, the delayed aspects may be analyzed too\n\tlate and produce spurious visibility errors.\n\t* sem_attr.adb: Place etype on range.\n\t* sem_ch6.adb: Documentation expression functions.\n\nFrom-SVN: r207039", "tree": {"sha": "b7dba3998c295f3018673747616d89ddc6056caf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7dba3998c295f3018673747616d89ddc6056caf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bff2d234281c10f137b8e2a2b9957c5675506eab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff2d234281c10f137b8e2a2b9957c5675506eab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff2d234281c10f137b8e2a2b9957c5675506eab"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "af31feaf69812ab36ee4d5ca806934920cb1209b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "patch": "@@ -1,3 +1,15 @@\n+2014-01-24  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch3.adb (Analyze_Declarations): At the end of an\n+\tappropriate declarative part, call Freeze_All from the first\n+\tdeclaration in the scope, not from the first unfrozen one. This\n+\tis necessary to apply visibility checks to entities with delayed\n+\taspects. Otherwise, in the presence of instantiations and cleanups\n+\tthat they may generate, the delayed aspects may be analyzed too\n+\tlate and produce spurious visibility errors.\n+\t* sem_attr.adb: Place etype on range.\n+\t* sem_ch6.adb: Documentation expression functions.\n+\n 2014-01-24  Robert Dewar  <dewar@adacore.com>\n \n \t* exp_ch7.adb: Minor change of Indices to Indexes (preferred"}, {"sha": "7db09d441f2815be14ecba3b4f28e34b06830963", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "patch": "@@ -6117,6 +6117,7 @@ package body Sem_Attr is\n                                 (Low_Bound (Index), Etype (Index_Type));\n                               Analyze_And_Resolve\n                                 (High_Bound (Index), Etype (Index_Type));\n+                              Set_Etype (Index, Etype (Index_Type));\n \n                            else\n                               Analyze_And_Resolve (Index, Etype (Index_Type));"}, {"sha": "cdfc062a5db31915a111dd4e9a8db9961cbd4bfe", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "patch": "@@ -2333,8 +2333,14 @@ package body Sem_Ch3 is\n                   Freeze_From := First_Entity (Current_Scope);\n                end if;\n \n+               --  There may have been several freezing points previously,\n+               --  for example object declarations or subprogram bodies, but\n+               --  at the end of a declarative part we check freezing from\n+               --  the beginning, even though entities may already be frozen,\n+               --  in order to perform visibility checks on delayed aspects.\n+\n                Adjust_Decl;\n-               Freeze_All (Freeze_From, Decl);\n+               Freeze_All (First_Entity (Current_Scope), Decl);\n                Freeze_From := Last_Entity (Current_Scope);\n \n             elsif Scope (Current_Scope) /= Standard_Standard\n@@ -2348,7 +2354,7 @@ package body Sem_Ch3 is\n                or else Is_Empty_List (Private_Declarations (Parent (L)))\n             then\n                Adjust_Decl;\n-               Freeze_All (Freeze_From, Decl);\n+               Freeze_All (First_Entity (Current_Scope), Decl);\n                Freeze_From := Last_Entity (Current_Scope);\n             end if;\n "}, {"sha": "ce3fcf4ca729fd4d15f291e3d8806c0a6e35d974", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad4e3362d3ea425d26c91c5a7d35a2649146bef9/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=ad4e3362d3ea425d26c91c5a7d35a2649146bef9", "patch": "@@ -435,7 +435,11 @@ package body Sem_Ch6 is\n          --  To prevent premature freeze action, insert the new body at the end\n          --  of the current declarations, or at the end of the package spec.\n          --  However, resolve usage names now, to prevent spurious visibility\n-         --  on later entities.\n+         --  on later entities. Note that the function can now be called in\n+         --  the current declarative part, which will appear to be prior to\n+         --  the presence of the body in the code. There are nevertheless no\n+         --  order of elaboration issues because all name resolution has taken\n+         --  place at the point of declaration.\n \n          declare\n             Decls : List_Id            := List_Containing (N);"}]}