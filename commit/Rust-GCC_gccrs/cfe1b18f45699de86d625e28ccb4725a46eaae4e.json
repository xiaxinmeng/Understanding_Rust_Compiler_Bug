{"sha": "cfe1b18f45699de86d625e28ccb4725a46eaae4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZlMWIxOGY0NTY5OWRlODZkNjI1ZTI4Y2NiNDcyNWE0NmVhYWU0ZQ==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2006-10-27T22:43:00Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2006-10-27T22:43:00Z"}, "message": "2006-10-27  Vladimir Makarov  <vmakarov@redhat.com>\n\n\t* config/i386/i386.h (TARGET_GEODE):\n\t(TARGET_CPU_CPP_BUILTINS): Add code for geode.\n\t(TARGET_CPU_DEFAULT_geode): New macro.\n\t(TARGET_CPU_DEFAULT_k6, TARGET_CPU_DEFAULT_k6_2,\n\tTARGET_CPU_DEFAULT_k6_3, TARGET_CPU_DEFAULT_athlon,\n\tTARGET_CPU_DEFAULT_athlon_sse, TARGET_CPU_DEFAULT_k8,\n\tTARGET_CPU_DEFAULT_pentium_m, TARGET_CPU_DEFAULT_prescott,\n\tTARGET_CPU_DEFAULT_nocona, TARGET_CPU_DEFAULT_generic): Increase\n\tthe macro values.\n\t(TARGET_CPU_DEFAULT_NAMES): Add geode.\n\t(processor_type): Add PROCESSOR_GEODE.\n\n\t* config/i386/i386.md: Include geode.md.\n\t(cpu): Add geode.\n\n\t* config/i386/i386.c (geode_cost): New initialized global\n\tvariable.\n\t(m_GEODE, m_K6_GEODE): New macros.\n\t(x86_use_leave, x86_push_memory, x86_deep_branch, x86_use_sahf,\n\tx86_use_himode_fiop, x86_promote_QImode, x86_add_esp_4,\n\tx86_add_esp_8, x86_rep_movl_optimal, x86_ext_80387_constants,\n\tx86_schedule): Use m_K6_GEODE instead of m_K6.\n\t(x86_movx, x86_cmove): Set up m_GEODE.\n\t(x86_integer_DFmode_moves): Clear m_GEODE.\n\t(processor_target_table): Add entry for geode.\n\t(processor_alias_table): Ditto.\n\n\t* config/i386/geode.md: New file.\n\n\t* doc/invoke.texi: Add entry about geode processor.\n\nFrom-SVN: r118090", "tree": {"sha": "362ff73e1cbfad45a002c7528995651c5f3bc435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/362ff73e1cbfad45a002c7528995651c5f3bc435"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfe1b18f45699de86d625e28ccb4725a46eaae4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe1b18f45699de86d625e28ccb4725a46eaae4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfe1b18f45699de86d625e28ccb4725a46eaae4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfe1b18f45699de86d625e28ccb4725a46eaae4e/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2810ec2fd53234afb6dd71e732117ab9c0fd1237", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2810ec2fd53234afb6dd71e732117ab9c0fd1237", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2810ec2fd53234afb6dd71e732117ab9c0fd1237"}], "stats": {"total": 312, "additions": 286, "deletions": 26}, "files": [{"sha": "0ebad7c0bba138e66e71242a26101b8784dcfd1f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -1,3 +1,36 @@\n+2006-10-27  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\t* config/i386/i386.h (TARGET_GEODE):\n+\t(TARGET_CPU_CPP_BUILTINS): Add code for geode.\n+\t(TARGET_CPU_DEFAULT_geode): New macro.\n+\t(TARGET_CPU_DEFAULT_k6, TARGET_CPU_DEFAULT_k6_2,\n+\tTARGET_CPU_DEFAULT_k6_3, TARGET_CPU_DEFAULT_athlon,\n+\tTARGET_CPU_DEFAULT_athlon_sse, TARGET_CPU_DEFAULT_k8,\n+\tTARGET_CPU_DEFAULT_pentium_m, TARGET_CPU_DEFAULT_prescott,\n+\tTARGET_CPU_DEFAULT_nocona, TARGET_CPU_DEFAULT_generic): Increase\n+\tthe macro values.\n+\t(TARGET_CPU_DEFAULT_NAMES): Add geode.\n+\t(processor_type): Add PROCESSOR_GEODE.\n+\n+\t* config/i386/i386.md: Include geode.md.\n+\t(cpu): Add geode.\n+\n+\t* config/i386/i386.c (geode_cost): New initialized global\n+\tvariable.\n+\t(m_GEODE, m_K6_GEODE): New macros.\n+\t(x86_use_leave, x86_push_memory, x86_deep_branch, x86_use_sahf,\n+\tx86_use_himode_fiop, x86_promote_QImode, x86_add_esp_4,\n+\tx86_add_esp_8, x86_rep_movl_optimal, x86_ext_80387_constants,\n+\tx86_schedule): Use m_K6_GEODE instead of m_K6.\n+\t(x86_movx, x86_cmove): Set up m_GEODE.\n+\t(x86_integer_DFmode_moves): Clear m_GEODE.\n+\t(processor_target_table): Add entry for geode.\n+\t(processor_alias_table): Ditto.\n+\n+\t* config/i386/geode.md: New file.\n+\n+\t* doc/invoke.texi: Add entry about geode processor.\n+    \n 2006-10-27  Mike Stump  <mrs@apple.com>\n \n \t* config/darwin-c.c (darwin_cpp_builtins): Move __STATIC__ and"}, {"sha": "050216acdd595deb7984db4c166aafb7baf1e27a", "filename": "gcc/config/i386/geode.md", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fgeode.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fgeode.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgeode.md?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -0,0 +1,153 @@\n+;; Geode Scheduling\n+;; Copyright (C) 2006\n+;; Free Software Foundation, Inc.\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify\n+;; it under the terms of the GNU General Public License as published by\n+;; the Free Software Foundation; either version 2, or (at your option)\n+;; any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful,\n+;; but WITHOUT ANY WARRANTY; without even the implied warranty of\n+;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+;; GNU General Public License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING.  If not, write to\n+;; the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+;; Boston, MA 02110-1301, USA.\n+;;\n+;; The Geode architecture is one insn issue processor.\n+;;\n+;; This description is based on data from the following documents:\n+;;\n+;;    \"AMD Geode GX Processor Data Book\"\n+;;    Advanced Micro Devices, Inc., Aug 2005.\n+;;\n+;;    \"AMD Geode LX Processor Data Book\"\n+;;    Advanced Micro Devices, Inc., Jan 2006.\n+;;\n+;;\n+;; CPU execution units of the Geode:\n+;;\n+;; issue\tdescribes the issue pipeline.\n+;; alu\t\tdescribes the Integer unit\n+;; fpu\t\tdescribes the FP unit\n+;;\n+;; The fp unit is out of order execution unit with register renaming.\n+;; There is also memory management unit and execution pipeline for\n+;; load/store operations.  We ignore it and difference between insns\n+;; using memory and registers.\n+\n+(define_automaton \"geode\")\n+\n+(define_cpu_unit \"geode_issue,geode_alu,geode_fpu\" \"geode\")\n+\n+(define_insn_reservation \"alu\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"alu,alu1,negnot,icmp,lea,test,imov,imovx,icmov,incdec,setcc\"))\n+\t\t\t \"geode_issue,geode_alu\")\n+\n+(define_insn_reservation \"shift\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"ishift,ishift1,rotate,rotate1,cld\"))\n+\t\t\t \"geode_issue,geode_alu*2\")\n+\n+(define_insn_reservation \"imul\" 7\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"imul\"))\n+\t\t\t \"geode_issue,geode_alu*7\")\n+\n+(define_insn_reservation \"idiv\" 40\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"idiv\"))\n+\t\t\t \"geode_issue,geode_alu*40\")\n+\n+;; The branch unit.\n+(define_insn_reservation \"call\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"call,callv\"))\n+\t\t\t \"geode_issue,geode_alu*2\")\n+\n+(define_insn_reservation \"geode_branch\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"ibr\"))\n+\t\t\t \"geode_issue,geode_alu\")\n+\n+(define_insn_reservation \"geode_pop_push\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"pop,push\"))\n+\t\t\t \"geode_issue,geode_alu\")\n+\n+(define_insn_reservation \"geode_leave\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"leave\"))\n+\t\t\t \"geode_issue,geode_alu*2\")\n+\n+(define_insn_reservation \"geode_load_str\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (and (eq_attr \"type\" \"str\")\n+\t\t\t\t   (eq_attr \"memory\" \"load,both\")))\n+\t\t\t \"geode_issue,geode_alu*4\")\n+\n+(define_insn_reservation \"geode_store_str\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (and (eq_attr \"type\" \"str\")\n+\t\t\t\t   (eq_attr \"memory\" \"store\")))\n+\t\t\t \"geode_issue,geode_alu*2\")\n+\n+;; Be optimistic\n+(define_insn_reservation \"geode_unknown\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"multi,other\"))\n+\t\t\t \"geode_issue,geode_alu\")\n+\n+;; FPU\n+\n+(define_insn_reservation \"geode_fop\" 6\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fop,fcmp\"))\n+\t\t\t \"geode_issue,geode_fpu*6\")\n+\n+(define_insn_reservation \"geode_fsimple\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fmov,fcmov,fsgn,fxch\"))\n+\t\t\t \"geode_issue,geode_fpu\")\n+\n+(define_insn_reservation \"geode_fist\" 4\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fistp,fisttp\"))\n+\t\t\t \"geode_issue,geode_fpu*4\")\n+\n+(define_insn_reservation \"geode_fmul\" 10\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fmul\"))\n+\t\t\t \"geode_issue,geode_fpu*10\")\n+\n+(define_insn_reservation \"geode_fdiv\" 47\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fdiv\"))\n+\t\t\t \"geode_issue,geode_fpu*47\")\n+\n+;; We use minimal latency (fsin) here\n+(define_insn_reservation \"geode_fpspc\" 54\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"fpspc\"))\n+\t\t\t \"geode_issue,geode_fpu*54\")\n+\n+(define_insn_reservation \"geode_frndint\" 12\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"frndint\"))\n+\t\t\t \"geode_issue,geode_fpu*12\")\n+\n+(define_insn_reservation \"geode_mmxmov\" 1\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"mmxmov\"))\n+\t\t\t \"geode_issue,geode_fpu\")\n+\n+(define_insn_reservation \"geode_mmx\" 2\n+\t\t\t (and (eq_attr \"cpu\" \"geode\")\n+\t\t\t      (eq_attr \"type\" \"mmx,mmxadd,mmxmul,mmxcmp,mmxcvt,mmxshft\"))\n+\t\t\t \"geode_issue,geode_fpu*2\")"}, {"sha": "41d76c3689f03310490504ece344293d57bf7766", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 73, "deletions": 14, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -333,6 +333,60 @@ struct processor_costs pentiumpro_cost = {\n   COSTS_N_INSNS (56),\t\t\t/* cost of FSQRT instruction.  */\n };\n \n+static const\n+struct processor_costs geode_cost = {\n+  COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of a lea instruction */\n+  COSTS_N_INSNS (2),\t\t\t/* variable shift costs */\n+  COSTS_N_INSNS (1),\t\t\t/* constant shift costs */\n+  {COSTS_N_INSNS (3),\t\t\t/* cost of starting multiply for QI */\n+   COSTS_N_INSNS (4),\t\t\t/*                               HI */\n+   COSTS_N_INSNS (7),\t\t\t/*                               SI */\n+   COSTS_N_INSNS (7),\t\t\t/*                               DI */\n+   COSTS_N_INSNS (7)},\t\t\t/*                               other */\n+  0,\t\t\t\t\t/* cost of multiply per each bit set */\n+  {COSTS_N_INSNS (15),\t\t\t/* cost of a divide/mod for QI */\n+   COSTS_N_INSNS (23),\t\t\t/*                          HI */\n+   COSTS_N_INSNS (39),\t\t\t/*                          SI */\n+   COSTS_N_INSNS (39),\t\t\t/*                          DI */\n+   COSTS_N_INSNS (39)},\t\t\t/*                          other */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movsx */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of movzx */\n+  8,\t\t\t\t\t/* \"large\" insn */\n+  4,\t\t\t\t\t/* MOVE_RATIO */\n+  1,\t\t\t\t\t/* cost for loading QImode using movzbl */\n+  {1, 1, 1},\t\t\t\t/* cost of loading integer registers\n+\t\t\t\t\t   in QImode, HImode and SImode.\n+\t\t\t\t\t   Relative to reg-reg move (2).  */\n+  {1, 1, 1},\t\t\t\t/* cost of storing integer registers */\n+  1,\t\t\t\t\t/* cost of reg,reg fld/fst */\n+  {1, 1, 1},\t\t\t\t/* cost of loading fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+  {4, 6, 6},\t\t\t\t/* cost of storing fp registers\n+\t\t\t\t\t   in SFmode, DFmode and XFmode */\n+\n+  1,\t\t\t\t\t/* cost of moving MMX register */\n+  {1, 1},\t\t\t\t/* cost of loading MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  {1, 1},\t\t\t\t/* cost of storing MMX registers\n+\t\t\t\t\t   in SImode and DImode */\n+  1,\t\t\t\t\t/* cost of moving SSE register */\n+  {1, 1, 1},\t\t\t\t/* cost of loading SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  {1, 1, 1},\t\t\t\t/* cost of storing SSE registers\n+\t\t\t\t\t   in SImode, DImode and TImode */\n+  1,\t\t\t\t\t/* MMX or SSE register to integer */\n+  32,\t\t\t\t\t/* size of prefetch block */\n+  1,\t\t\t\t\t/* number of parallel prefetches */\n+  1,\t\t\t\t\t/* Branch cost */\n+  COSTS_N_INSNS (6),\t\t\t/* cost of FADD and FSUB insns.  */\n+  COSTS_N_INSNS (11),\t\t\t/* cost of FMUL instruction.  */\n+  COSTS_N_INSNS (47),\t\t\t/* cost of FDIV instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FABS instruction.  */\n+  COSTS_N_INSNS (1),\t\t\t/* cost of FCHS instruction.  */\n+  COSTS_N_INSNS (54),\t\t\t/* cost of FSQRT instruction.  */\n+};\n+\n static const\n struct processor_costs k6_cost = {\n   COSTS_N_INSNS (1),\t\t\t/* cost of an add instruction */\n@@ -719,6 +773,8 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n #define m_486 (1<<PROCESSOR_I486)\n #define m_PENT (1<<PROCESSOR_PENTIUM)\n #define m_PPRO (1<<PROCESSOR_PENTIUMPRO)\n+#define m_GEODE  (1<<PROCESSOR_GEODE)\n+#define m_K6_GEODE  (m_K6 | m_GEODE)\n #define m_K6  (1<<PROCESSOR_K6)\n #define m_ATHLON  (1<<PROCESSOR_ATHLON)\n #define m_PENT4  (1<<PROCESSOR_PENTIUM4)\n@@ -735,22 +791,22 @@ const struct processor_costs *ix86_cost = &pentium_cost;\n /* Leave is not affecting Nocona SPEC2000 results negatively, so enabling for\n    Generic64 seems like good code size tradeoff.  We can't enable it for 32bit\n    generic because it is not working well with PPro base chips.  */\n-const int x86_use_leave = m_386 | m_K6 | m_ATHLON_K8 | m_GENERIC64;\n-const int x86_push_memory = m_386 | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_use_leave = m_386 | m_K6_GEODE | m_ATHLON_K8 | m_GENERIC64;\n+const int x86_push_memory = m_386 | m_K6_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n const int x86_zero_extend_with_and = m_486 | m_PENT;\n-const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA | m_GENERIC /* m_386 | m_K6 */;\n+const int x86_movx = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA | m_GENERIC | m_GEODE /* m_386 | m_K6 */;\n const int x86_double_with_add = ~m_386;\n const int x86_use_bit_test = m_386;\n const int x86_unroll_strlen = m_486 | m_PENT | m_PPRO | m_ATHLON_K8 | m_K6 | m_GENERIC;\n-const int x86_cmove = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n+const int x86_cmove = m_PPRO | m_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA;\n const int x86_3dnow_a = m_ATHLON_K8;\n-const int x86_deep_branch = m_PPRO | m_K6 | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_deep_branch = m_PPRO | m_K6_GEODE | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n /* Branch hints were put in P4 based on simulation result. But\n    after P4 was made, no performance benefit was observed with\n    branch hints. It also increases the code size. As the result,\n    icc never generates branch hints.  */\n const int x86_branch_hints = 0;\n-const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC32; /*m_GENERIC | m_ATHLON_K8 ? */\n+const int x86_use_sahf = m_PPRO | m_K6_GEODE | m_PENT4 | m_NOCONA | m_GENERIC32; /*m_GENERIC | m_ATHLON_K8 ? */\n /* We probably ought to watch for partial register stalls on Generic32\n    compilation setting as well.  However in current implementation the\n    partial register stalls are not eliminated very well - they can\n@@ -761,14 +817,14 @@ const int x86_use_sahf = m_PPRO | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC32; /*m_G\n    to leave it off for generic32 for now.  */\n const int x86_partial_reg_stall = m_PPRO;\n const int x86_partial_flag_reg_stall = m_GENERIC;\n-const int x86_use_himode_fiop = m_386 | m_486 | m_K6;\n+const int x86_use_himode_fiop = m_386 | m_486 | m_K6_GEODE;\n const int x86_use_simode_fiop = ~(m_PPRO | m_ATHLON_K8 | m_PENT | m_GENERIC);\n const int x86_use_mov0 = m_K6;\n const int x86_use_cltd = ~(m_PENT | m_K6 | m_GENERIC);\n const int x86_read_modify_write = ~m_PENT;\n const int x86_read_modify = ~(m_PENT | m_PPRO);\n const int x86_split_long_moves = m_PPRO;\n-const int x86_promote_QImode = m_K6 | m_PENT | m_386 | m_486 | m_ATHLON_K8 | m_GENERIC; /* m_PENT4 ? */\n+const int x86_promote_QImode = m_K6_GEODE | m_PENT | m_386 | m_486 | m_ATHLON_K8 | m_GENERIC; /* m_PENT4 ? */\n const int x86_fast_prefix = ~(m_PENT | m_486 | m_386);\n const int x86_single_stringop = m_386 | m_PENT4 | m_NOCONA;\n const int x86_qimode_math = ~(0);\n@@ -780,9 +836,9 @@ const int x86_himode_math = ~(m_PPRO);\n const int x86_promote_hi_regs = m_PPRO;\n const int x86_sub_esp_4 = m_ATHLON_K8 | m_PPRO | m_PENT4 | m_NOCONA | m_GENERIC;\n const int x86_sub_esp_8 = m_ATHLON_K8 | m_PPRO | m_386 | m_486 | m_PENT4 | m_NOCONA | m_GENERIC;\n-const int x86_add_esp_4 = m_ATHLON_K8 | m_K6 | m_PENT4 | m_NOCONA | m_GENERIC;\n-const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6 | m_386 | m_486 | m_PENT4 | m_NOCONA | m_GENERIC;\n-const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC);\n+const int x86_add_esp_4 = m_ATHLON_K8 | m_K6_GEODE | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_add_esp_8 = m_ATHLON_K8 | m_PPRO | m_K6_GEODE | m_386 | m_486 | m_PENT4 | m_NOCONA | m_GENERIC;\n+const int x86_integer_DFmode_moves = ~(m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC | m_GEODE);\n const int x86_partial_reg_dependency = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n const int x86_memory_mismatch_stall = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n const int x86_accumulate_outgoing_args = m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC;\n@@ -808,18 +864,18 @@ const int x86_sse_split_regs = m_ATHLON_K8;\n const int x86_sse_typeless_stores = m_ATHLON_K8;\n const int x86_sse_load0_by_pxor = m_PPRO | m_PENT4 | m_NOCONA;\n const int x86_use_ffreep = m_ATHLON_K8;\n-const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6;\n+const int x86_rep_movl_optimal = m_386 | m_PENT | m_PPRO | m_K6_GEODE;\n const int x86_use_incdec = ~(m_PENT4 | m_NOCONA | m_GENERIC);\n \n /* ??? Allowing interunit moves makes it all too easy for the compiler to put\n    integer data in xmm registers.  Which results in pretty abysmal code.  */\n const int x86_inter_unit_moves = 0 /* ~(m_ATHLON_K8) */;\n \n-const int x86_ext_80387_constants = m_K6 | m_ATHLON | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC32;\n+const int x86_ext_80387_constants = m_K6_GEODE | m_ATHLON | m_PENT4 | m_NOCONA | m_PPRO | m_GENERIC32;\n /* Some CPU cores are not able to predict more than 4 branch instructions in\n    the 16 byte window.  */\n const int x86_four_jump_limit = m_PPRO | m_ATHLON_K8 | m_PENT4 | m_NOCONA | m_GENERIC;\n-const int x86_schedule = m_PPRO | m_ATHLON_K8 | m_K6 | m_PENT | m_GENERIC;\n+const int x86_schedule = m_PPRO | m_ATHLON_K8 | m_K6_GEODE | m_PENT | m_GENERIC;\n const int x86_use_bt = m_ATHLON_K8;\n /* Compare and exchange was added for 80486.  */\n const int x86_cmpxchg = ~m_386;\n@@ -1453,6 +1509,7 @@ override_options (void)\n       {&i486_cost, 0, 0, 16, 15, 16, 15, 16},\n       {&pentium_cost, 0, 0, 16, 7, 16, 7, 16},\n       {&pentiumpro_cost, 0, 0, 16, 15, 16, 7, 16},\n+      {&geode_cost, 0, 0, 0, 0, 0, 0, 0},\n       {&k6_cost, 0, 0, 32, 7, 32, 7, 32},\n       {&athlon_cost, 0, 0, 16, 7, 16, 7, 16},\n       {&pentium4_cost, 0, 0, 0, 0, 0, 0, 0},\n@@ -1505,6 +1562,8 @@ override_options (void)\n \t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n       {\"nocona\", PROCESSOR_NOCONA, PTA_SSE | PTA_SSE2 | PTA_SSE3 | PTA_64BIT\n \t\t\t\t        | PTA_MMX | PTA_PREFETCH_SSE},\n+      {\"geode\", PROCESSOR_GEODE, PTA_MMX | PTA_PREFETCH_SSE | PTA_3DNOW\n+\t\t\t\t   | PTA_3DNOW_A},\n       {\"k6\", PROCESSOR_K6, PTA_MMX},\n       {\"k6-2\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},\n       {\"k6-3\", PROCESSOR_K6, PTA_MMX | PTA_3DNOW},"}, {"sha": "cc7e8907d504ba4c971ab3cb2c8ef6e998d5bb3f", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -130,6 +130,7 @@ extern const struct processor_costs *ix86_cost;\n #define TARGET_486 (ix86_tune == PROCESSOR_I486)\n #define TARGET_PENTIUM (ix86_tune == PROCESSOR_PENTIUM)\n #define TARGET_PENTIUMPRO (ix86_tune == PROCESSOR_PENTIUMPRO)\n+#define TARGET_GEODE (ix86_tune == PROCESSOR_GEODE)\n #define TARGET_K6 (ix86_tune == PROCESSOR_K6)\n #define TARGET_ATHLON (ix86_tune == PROCESSOR_ATHLON)\n #define TARGET_PENTIUM4 (ix86_tune == PROCESSOR_PENTIUM4)\n@@ -375,6 +376,10 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \t      break;\t\t\t\t\t\t\\\n \t    }\t\t\t\t\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n+      else if (TARGET_GEODE)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__tune_geode__\");\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else if (TARGET_K6)\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t  builtin_define (\"__tune_k6__\");\t\t\t\\\n@@ -438,6 +443,11 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \t  builtin_define (\"__pentiumpro\");\t\t\t\\\n \t  builtin_define (\"__pentiumpro__\");\t\t\t\\\n \t}\t\t\t\t\t\t\t\\\n+      else if (ix86_arch == PROCESSOR_GEODE)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  builtin_define (\"__geode\");\t\t\t\t\\\n+\t  builtin_define (\"__geode__\");\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n       else if (ix86_arch == PROCESSOR_K6)\t\t\t\\\n \t{\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\\\n@@ -482,20 +492,21 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n #define TARGET_CPU_DEFAULT_pentium2 5\n #define TARGET_CPU_DEFAULT_pentium3 6\n #define TARGET_CPU_DEFAULT_pentium4 7\n-#define TARGET_CPU_DEFAULT_k6 8\n-#define TARGET_CPU_DEFAULT_k6_2 9\n-#define TARGET_CPU_DEFAULT_k6_3 10\n-#define TARGET_CPU_DEFAULT_athlon 11\n-#define TARGET_CPU_DEFAULT_athlon_sse 12\n-#define TARGET_CPU_DEFAULT_k8 13\n-#define TARGET_CPU_DEFAULT_pentium_m 14\n-#define TARGET_CPU_DEFAULT_prescott 15\n-#define TARGET_CPU_DEFAULT_nocona 16\n-#define TARGET_CPU_DEFAULT_generic 17\n+#define TARGET_CPU_DEFAULT_geode 8\n+#define TARGET_CPU_DEFAULT_k6 9\n+#define TARGET_CPU_DEFAULT_k6_2 10\n+#define TARGET_CPU_DEFAULT_k6_3 11\n+#define TARGET_CPU_DEFAULT_athlon 12\n+#define TARGET_CPU_DEFAULT_athlon_sse 13\n+#define TARGET_CPU_DEFAULT_k8 14\n+#define TARGET_CPU_DEFAULT_pentium_m 15\n+#define TARGET_CPU_DEFAULT_prescott 16\n+#define TARGET_CPU_DEFAULT_nocona 17\n+#define TARGET_CPU_DEFAULT_generic 18\n \n #define TARGET_CPU_DEFAULT_NAMES {\"i386\", \"i486\", \"pentium\", \"pentium-mmx\",\\\n \t\t\t\t  \"pentiumpro\", \"pentium2\", \"pentium3\", \\\n-\t\t\t\t  \"pentium4\", \"k6\", \"k6-2\", \"k6-3\",\\\n+                                  \"pentium4\", \"geode\", \"k6\", \"k6-2\", \"k6-3\", \\\n \t\t\t\t  \"athlon\", \"athlon-4\", \"k8\", \\\n \t\t\t\t  \"pentium-m\", \"prescott\", \"nocona\", \\\n \t\t\t\t  \"generic\"}\n@@ -2067,6 +2078,7 @@ enum processor_type\n   PROCESSOR_I486,\t\t\t/* 80486DX, 80486SX, 80486DX[24] */\n   PROCESSOR_PENTIUM,\n   PROCESSOR_PENTIUMPRO,\n+  PROCESSOR_GEODE,\n   PROCESSOR_K6,\n   PROCESSOR_ATHLON,\n   PROCESSOR_PENTIUM4,"}, {"sha": "4e2f9dd6197e461c4becae85cc95563b8e013ba2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -194,7 +194,7 @@\n \f\n ;; Processor type.  This attribute must exactly match the processor_type\n ;; enumeration in i386.h.\n-(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,k6,athlon,pentium4,k8,nocona,generic32,generic64\"\n+(define_attr \"cpu\" \"i386,i486,pentium,pentiumpro,geode,k6,athlon,pentium4,k8,nocona,generic32,generic64\"\n   (const (symbol_ref \"ix86_tune\")))\n \n ;; A basic instruction type.  Refinements due to arguments to be\n@@ -480,6 +480,7 @@\n (include \"ppro.md\")\n (include \"k6.md\")\n (include \"athlon.md\")\n+(include \"geode.md\")\n \n \f\n ;; Operand and operator predicates and constraints"}, {"sha": "3f52d6c76179a3181c65e119f3e8f788daf28cba", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfe1b18f45699de86d625e28ccb4725a46eaae4e/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=cfe1b18f45699de86d625e28ccb4725a46eaae4e", "patch": "@@ -9290,6 +9290,8 @@ implemented for this chip.)\n @item c3-2\n Via C3-2 CPU with MMX and SSE instruction set support.  (No scheduling is\n implemented for this chip.)\n+@item geode\n+Embedded AMD CPU with MMX and 3dNOW! instruction set support.\n @end table\n \n While picking a specific @var{cpu-type} will schedule things appropriately"}]}