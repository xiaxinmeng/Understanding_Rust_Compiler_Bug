{"sha": "4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEyOGIxODFhNjE2NDU2MWE1NmJmMDJkZmExZmQ1NjhlM2QwZWM1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T16:01:22Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-01-20T16:01:22Z"}, "message": "[multiple changes]\n\n2014-01-20  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Make warnings on exceptions into errors in GNATprove mode.\n\t* errout.adb: Implement [ and ] insertion characters.\n\t* errout.ads: Document new [ and ] insertion characters.\n\t* sem_ch12.adb, restrict.adb, frontend.adb, exp_ch7.adb: Minor\n\taddition of ??? comment.\n\t* lib-xref.adb, exp_util.adb, gnat1drv.adb: Minor reformatting\n\t* exp_ch4.adb, sem_ch3.adb, sem_ch4.adb, sem_ch6.adb, sem_elab.adb,\n\tsem_eval.adb, sem_res.adb, sem_util.adb, sem_attr.adb, sem_aggr.adb:\n\tMake warnings on exceptions into errors in GNATprove mode.\n\t* sem_dim.adb: Minor reformatting throughout Quote [ and ]\n\tin error messages.\n\n2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch13.adb: Code clean up.\n\nFrom-SVN: r206841", "tree": {"sha": "d8ec142379c7b7924fd770f6a516efecf89fcc58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d8ec142379c7b7924fd770f6a516efecf89fcc58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/comments", "author": null, "committer": null, "parents": [{"sha": "9e540e3750db65b21ed5f6883176a984f5ab451e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e540e3750db65b21ed5f6883176a984f5ab451e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e540e3750db65b21ed5f6883176a984f5ab451e"}], "stats": {"total": 704, "additions": 414, "deletions": 290}, "files": [{"sha": "fec727aab4f3f589753aa34721a3f1eb9695aada", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -1,3 +1,21 @@\n+2014-01-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Make warnings on exceptions into errors in GNATprove mode.\n+\t* errout.adb: Implement [ and ] insertion characters.\n+\t* errout.ads: Document new [ and ] insertion characters.\n+\t* sem_ch12.adb, restrict.adb, frontend.adb, exp_ch7.adb: Minor\n+\taddition of ??? comment.\n+\t* lib-xref.adb, exp_util.adb, gnat1drv.adb: Minor reformatting\n+\t* exp_ch4.adb, sem_ch3.adb, sem_ch4.adb, sem_ch6.adb, sem_elab.adb,\n+\tsem_eval.adb, sem_res.adb, sem_util.adb, sem_attr.adb, sem_aggr.adb:\n+\tMake warnings on exceptions into errors in GNATprove mode.\n+\t* sem_dim.adb: Minor reformatting throughout Quote [ and ]\n+\tin error messages.\n+\n+2014-01-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch13.adb: Code clean up.\n+\n 2014-01-20  Robert Dewar  <dewar@adacore.com>\n \n \t* errout.ads, errout.adb: Implement >? >x? >X? sequences in error"}, {"sha": "eb6c5b74343fc148bbf76a81bfffa47a5f22c065", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -2956,9 +2956,12 @@ package body Checks is\n       Loc         : constant Source_Ptr := Sloc (Ck_Node);\n       Checks_On   : constant Boolean :=\n         (not Index_Checks_Suppressed (Target_Typ))\n-         or else (not Length_Checks_Suppressed (Target_Typ));\n+          or else (not Length_Checks_Suppressed (Target_Typ));\n \n    begin\n+      --  Note: this means that we lose some useful warnings if the expander\n+      --  is not active, and we also lose these warnings in SPARK mode ???\n+\n       if not Expander_Active then\n          return;\n       end if;\n@@ -3694,15 +3697,30 @@ package body Checks is\n       --  Here we have the optimizable case, warn if not short-circuited\n \n       if K = N_Op_And or else K = N_Op_Or then\n+         Error_Msg_Warn := not GNATprove_Mode;\n+\n          case Check is\n             when Access_Check =>\n-               Error_Msg_N\n-                 (\"Constraint_Error may be raised (access check)??\",\n-                  Parent (Nod));\n+               if GNATprove_Mode then\n+                  Error_Msg_N\n+                    (\"Constraint_Error might have been raised (access check)\",\n+                     Parent (Nod));\n+               else\n+                  Error_Msg_N\n+                    (\"Constraint_Error may be raised (access check)??\",\n+                     Parent (Nod));\n+               end if;\n+\n             when Division_Check =>\n-               Error_Msg_N\n-                 (\"Constraint_Error may be raised (zero divide)??\",\n-                  Parent (Nod));\n+               if GNATprove_Mode then\n+                  Error_Msg_N\n+                    (\"Constraint_Error might have been raised (zero divide)\",\n+                     Parent (Nod));\n+               else\n+                  Error_Msg_N\n+                    (\"Constraint_Error may be raised (zero divide)??\",\n+                     Parent (Nod));\n+               end if;\n \n             when others =>\n                raise Program_Error;\n@@ -3870,22 +3888,22 @@ package body Checks is\n                     N_Discriminant_Specification =>\n                   Apply_Compile_Time_Constraint_Error\n                     (N      => Expr,\n-                     Msg    => \"(Ada 2005) null not allowed \" &\n-                               \"in null-excluding components??\",\n+                     Msg    => \"(Ada 2005) null not allowed \"\n+                               & \"in null-excluding components??\",\n                      Reason => CE_Null_Not_Allowed);\n \n                when N_Object_Declaration =>\n                   Apply_Compile_Time_Constraint_Error\n                     (N      => Expr,\n-                     Msg    => \"(Ada 2005) null not allowed \" &\n-                               \"in null-excluding objects?\",\n+                     Msg    => \"(Ada 2005) null not allowed \"\n+                               & \"in null-excluding objects?\",\n                      Reason => CE_Null_Not_Allowed);\n \n                when N_Parameter_Specification =>\n                   Apply_Compile_Time_Constraint_Error\n                     (N      => Expr,\n-                     Msg    => \"(Ada 2005) null not allowed \" &\n-                               \"in null-excluding formals??\",\n+                     Msg    => \"(Ada 2005) null not allowed \"\n+                               & \"in null-excluding formals??\",\n                      Reason => CE_Null_Not_Allowed);\n \n                when others =>\n@@ -6682,9 +6700,7 @@ package body Checks is\n \n          if not Inside_Init_Proc then\n             Apply_Compile_Time_Constraint_Error\n-              (N,\n-               \"null value not allowed here??\",\n-               CE_Access_Check_Failed);\n+              (N, \"null value not allowed here??\", CE_Access_Check_Failed);\n          else\n             Insert_Action (N,\n               Make_Raise_Constraint_Error (Loc,"}, {"sha": "6372fea3895e7ea3b8f256aea35a017ad38cc1cc", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -2712,19 +2712,20 @@ package body Errout is\n       C : Character;   -- Current character\n       P : Natural;     -- Current index;\n \n-      procedure Set_Msg_Insertion_Warning;\n-      --  Deal with ? ?? ?x? ?X? insertion sequences (also < <? <x? <X?). The\n-      --  caller has already bumped the pointer past the initial ? or <.\n+      procedure Set_Msg_Insertion_Warning (C : Character);\n+      --  Deal with ? ?? ?x? ?X? insertion sequences (also < << <x< <X<). The\n+      --  caller has already bumped the pointer past the initial ? or < and C\n+      --  is set to this initial character (? or <).\n \n       -------------------------------\n       -- Set_Msg_Insertion_Warning --\n       -------------------------------\n \n-      procedure Set_Msg_Insertion_Warning is\n+      procedure Set_Msg_Insertion_Warning (C : Character) is\n       begin\n          Warning_Msg_Char := ' ';\n \n-         if P <= Text'Last and then Text (P) = '?' then\n+         if P <= Text'Last and then Text (P) = C then\n             if Warning_Doc_Switch then\n                Warning_Msg_Char := '?';\n             end if;\n@@ -2735,7 +2736,7 @@ package body Errout is\n            and then (Text (P) in 'a' .. 'z'\n                       or else\n                      Text (P) in 'A' .. 'Z')\n-           and then Text (P + 1) = '?'\n+           and then Text (P + 1) = C\n          then\n             if Warning_Doc_Switch then\n                Warning_Msg_Char := Text (P);\n@@ -2816,7 +2817,7 @@ package body Errout is\n                null; -- already dealt with\n \n             when '?' =>\n-               Set_Msg_Insertion_Warning;\n+               Set_Msg_Insertion_Warning ('?');\n \n             when '<' =>\n \n@@ -2825,7 +2826,7 @@ package body Errout is\n                --  is False, the call to Set_Msg_Insertion_Warning here does\n                --  no harm, since Warning_Msg_Char is ignored in that case.\n \n-               Set_Msg_Insertion_Warning;\n+               Set_Msg_Insertion_Warning ('<');\n \n             when '|' =>\n                null; -- already dealt with\n@@ -2853,6 +2854,24 @@ package body Errout is\n                   Set_Msg_Char (C);\n                end if;\n \n+            --  '[' (will be/would have been raised at run time)\n+\n+            when '[' =>\n+               if Is_Warning_Msg then\n+                  Set_Msg_Str (\"will be raised at run time\");\n+               else\n+                  Set_Msg_Str (\"would have been raised at run time\");\n+               end if;\n+\n+            --   ']' (may be/might have been raised at run time)\n+\n+            when ']' =>\n+               if Is_Warning_Msg then\n+                  Set_Msg_Str (\"may be raised at run time\");\n+               else\n+                  Set_Msg_Str (\"might have been raised at run time\");\n+               end if;\n+\n             --  Normal character with no special treatment\n \n             when others =>\n@@ -2960,6 +2979,9 @@ package body Errout is\n          --  Suppress \"size too small\" errors in CodePeer mode and SPARK mode,\n          --  since pragma Pack is also ignored in these configurations.\n \n+         --  At least the comment is bogus, since you can have this message\n+         --  with no pragma Pack in sight! ???\n+\n          if CodePeer_Mode or GNATprove_Mode then\n             return True;\n "}, {"sha": "8e5874b139b16326c56e835224807209e1645ee1", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -304,9 +304,9 @@ package Errout is\n    --    Insertion character < (Less Than: conditional warning message)\n    --      The character < appearing anywhere in a message is used for a\n    --      conditional error message. If Error_Msg_Warn is True, then the\n-   --      effect is the same as ? described above, and in particular <? and\n-   --      <X? have the effect of ?? and ?X? respectively. If Error_Msg_Warn\n-   --      is False, then the < <? or <X? sequence is ignored and the message\n+   --      effect is the same as ? described above, and in particular << and\n+   --      <X< have the effect of ?? and ?X? respectively. If Error_Msg_Warn\n+   --      is False, then the < << or <X< sequence is ignored and the message\n    --      is treated as a error rather than a warning.\n \n    --    Insertion character A-Z (Upper case letter: Ada reserved word)\n@@ -355,6 +355,31 @@ package Errout is\n    --      inserted to replace the ~ character. The string is inserted in the\n    --      literal form it appears, without any action on special characters.\n \n+   --    Insertion character [ (Left bracket: will/would be raised at run time)\n+   --      This is used in messages about exceptions being raised at run-time.\n+   --      If the current message is a warning message, then if the code is\n+   --      executed, the exception will be raised, and [ inserts:\n+   --\n+   --        will be raised at run time\n+   --\n+   --      If the current message is an error message, then it is an error\n+   --      because the exception would have been raised and [ inserts:\n+   --\n+   --        would have been raised at run time\n+   --\n+   --      Typically the message contains a < insertion which means that the\n+   --      message is a warning or error depending on Error_Msg_Warn. This is\n+   --      most typically used in the context of messages which are normally\n+   --      warnings, but are errors in GNATprove mode, corresponding to the\n+   --      permission in the definition of SPARK that allows an implementation\n+   --      to reject a program as illegal if a situation arises in which the\n+   --      compiler can determine that it is certain that a run-time check\n+   --      would have fail if the statement was executed.\n+\n+   --    Insertion character ] (Right bracket: may/might be raised at run time)\n+   --      This is like [ except that the insertion messages say may/might,\n+   --      instead of will/would.\n+\n    ----------------------------------------\n    -- Specialization of Messages for VMS --\n    ----------------------------------------"}, {"sha": "b154a6f6e3fa14fd5cdd017d1b390778df9fb804", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -9654,15 +9654,14 @@ package body Exp_Ch4 is\n \n       procedure Raise_Accessibility_Error is\n       begin\n+         Error_Msg_Warn := not GNATprove_Mode;\n          Rewrite (N,\n            Make_Raise_Program_Error (Sloc (N),\n              Reason => PE_Accessibility_Check_Failed));\n          Set_Etype (N, Target_Type);\n \n-         Error_Msg_N\n-           (\"??accessibility check failure\", N);\n-         Error_Msg_NE\n-           (\"\\??& will be raised at run time\", N, Standard_Program_Error);\n+         Error_Msg_N (\"<<accessibility check failure\", N);\n+         Error_Msg_NE (\"\\<<& [\", N, Standard_Program_Error);\n       end Raise_Accessibility_Error;\n \n       ----------------------"}, {"sha": "591606e6d845dbab56da007079b60e9fb9a4e01b", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -937,6 +937,8 @@ package body Exp_Ch7 is\n       --  Do not create finalization masters in SPARK mode because they result\n       --  in unwanted expansion.\n \n+      --  More detail would be useful here ???\n+\n       elsif GNATprove_Mode then\n          return;\n       end if;"}, {"sha": "cc5d3949791a203965c75805c498ea400e3efa0d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -2034,7 +2034,7 @@ package body Exp_Util is\n       --  may be constants that depend on the bounds of a string literal, both\n       --  standard string types and more generally arrays of characters.\n \n-      --  In GNATprove mode, we also need the more precise subtype to be set.\n+      --  In GNATprove mode, we also need the more precise subtype to be set\n \n       if not (Expander_Active or GNATprove_Mode)\n         and then (No (Etype (Exp)) or else not Is_String_Type (Etype (Exp)))"}, {"sha": "20a92f47980b624264367f23c7e9d2563d7ebb4d", "filename": "gcc/ada/frontend.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ffrontend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Ffrontend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffrontend.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -360,6 +360,8 @@ begin\n \n          --  Cleanup processing after completing main analysis\n \n+         --  Comment needed for ASIS mode test and GNATprove mode test???\n+\n          if Operating_Mode = Generate_Code\n            or else (Operating_Mode = Check_Semantics\n                      and then (ASIS_Mode or GNATprove_Mode))"}, {"sha": "0816e8962275fad9e8b90c56c61a71bb4b60d0db", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -341,6 +341,8 @@ procedure Gnat1drv is\n          --  trees between specs compiled as part of a main unit or as part of\n          --  a with-clause.\n \n+         --  Comment is incomplete, SPARK semantics rely on static mode no???\n+\n          Dynamic_Elaboration_Checks := False;\n \n          --  Set STRICT mode for overflow checks if not set explicitly. This\n@@ -373,6 +375,8 @@ procedure Gnat1drv is\n \n          --  Skip call to gigi\n \n+         --  This debug flag is not documented, AARGH! ???\n+\n          Debug_Flag_HH := True;\n \n          --  Enable assertions, since they give valuable extra information for\n@@ -1145,11 +1149,11 @@ begin\n       --  since representations are largely symbolic there.\n \n       if Back_End_Mode = Declarations_Only\n-           and then\n-         (not (Back_Annotate_Rep_Info or Generate_SCIL or GNATprove_Mode)\n-           or else Main_Kind = N_Subunit\n-           or else Targparm.Frontend_Layout_On_Target\n-           or else Targparm.VM_Target /= No_VM)\n+        and then\n+          (not (Back_Annotate_Rep_Info or Generate_SCIL or GNATprove_Mode)\n+            or else Main_Kind = N_Subunit\n+            or else Targparm.Frontend_Layout_On_Target\n+            or else Targparm.VM_Target /= No_VM)\n       then\n          Sem_Ch13.Validate_Unchecked_Conversions;\n          Sem_Ch13.Validate_Address_Clauses;"}, {"sha": "14462ce93ebac6f1b6f3cca59436688e10481c2e", "filename": "gcc/ada/lib-xref.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Flib-xref.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Flib-xref.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flib-xref.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -645,8 +645,8 @@ package body Lib.Xref is\n \n            or else\n              (GNATprove_Mode\n-                and then In_Extended_Main_Code_Unit (N)\n-                and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n+               and then In_Extended_Main_Code_Unit (N)\n+               and then (Typ = 'm' or else Typ = 'r' or else Typ = 's'))\n          then\n             null;\n          else\n@@ -1015,6 +1015,8 @@ package body Lib.Xref is\n             Actual_Typ := 'P';\n          end if;\n \n+         --  Comment needed here for special SPARK code ???\n+\n          if GNATprove_Mode then\n             Ref := Sloc (Nod);\n             Def := Sloc (Ent);"}, {"sha": "e244526389d1fc03164a5c2361a5cf2c87e91cbb", "filename": "gcc/ada/restrict.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Frestrict.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Frestrict.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -538,6 +538,8 @@ package body Restrict is\n       --  set in gnat1drv.adb so that we have consistency between each\n       --  compilation.\n \n+      --  Just checking, SPARK does not allow restrictions to be set ???\n+\n       if CodePeer_Mode or GNATprove_Mode then\n          return;\n       end if;"}, {"sha": "7096aae5bed67153861216d2b41c51ed4dbedc9a", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -597,9 +597,9 @@ package body Sem_Aggr is\n \n                elsif Expr_Value (This_Low) /= Expr_Value (Aggr_Low (Dim)) then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_N (\"sub-aggregate low bound mismatch??\", N);\n-                  Error_Msg_N\n-                     (\"\\Constraint_Error will be raised at run time??\", N);\n+                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_N (\"sub-aggregate low bound mismatch<<\", N);\n+                  Error_Msg_N (\"\\Constraint_Error [<<\", N);\n                end if;\n             end if;\n \n@@ -611,9 +611,9 @@ package body Sem_Aggr is\n                  Expr_Value (This_High) /= Expr_Value (Aggr_High (Dim))\n                then\n                   Set_Raises_Constraint_Error (N);\n-                  Error_Msg_N (\"sub-aggregate high bound mismatch??\", N);\n-                  Error_Msg_N\n-                     (\"\\Constraint_Error will be raised at run time??\", N);\n+                  Error_Msg_Warn := not GNATprove_Mode;\n+                  Error_Msg_N (\"sub-aggregate high bound mismatch<<\", N);\n+                  Error_Msg_N (\"\\Constraint_Error [<<\", N);\n                end if;\n             end if;\n          end if;\n@@ -1456,8 +1456,9 @@ package body Sem_Aggr is\n \n          if OK_BH and then OK_AH and then Val_BH < Val_AH then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_N (\"upper bound out of range??\", AH);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run time??\", AH);\n+            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_N (\"upper bound out of range<<\", AH);\n+            Error_Msg_N (\"\\Constraint_Error [<<\", AH);\n \n             --  You need to set AH to BH or else in the case of enumerations\n             --  indexes we will not be able to resolve the aggregate bounds.\n@@ -1499,14 +1500,16 @@ package body Sem_Aggr is\n \n          if OK_L and then Val_L > Val_AL then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_N (\"lower bound of aggregate out of range??\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run time??\", N);\n+            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_N (\"lower bound of aggregate out of range<<\", N);\n+            Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;\n \n          if OK_H and then Val_H < Val_AH then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_N (\"upper bound of aggregate out of range??\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run time??\", N);\n+            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_N (\"upper bound of aggregate out of range<<\", N);\n+            Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;\n       end Check_Bounds;\n \n@@ -1545,8 +1548,9 @@ package body Sem_Aggr is\n \n          if Range_Len < Len then\n             Set_Raises_Constraint_Error (N);\n-            Error_Msg_N (\"too many elements??\", N);\n-            Error_Msg_N (\"\\Constraint_Error will be raised at run time??\", N);\n+            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_N (\"too many elements<<\", N);\n+            Error_Msg_N (\"\\Constraint_Error [<<\", N);\n          end if;\n       end Check_Length;\n "}, {"sha": "5ff96d7843ed0f126f9bae3cf81e16908eb93fb4", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -5396,10 +5396,10 @@ package body Sem_Attr is\n                                            Name_Simple_Storage_Pool_Type))\n                then\n                   Error_Msg_Name_1 := Aname;\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                   Error_Msg_N (\"cannot use % attribute for type with simple \"\n-                               & \"storage pool??\", N);\n-                  Error_Msg_N\n-                     (\"\\Program_Error will be raised at run time??\", N);\n+                               & \"storage pool<<\", N);\n+                  Error_Msg_N (\"\\Program_Error [<<\", N);\n \n                   Rewrite\n                     (N, Make_Raise_Program_Error\n@@ -9311,10 +9311,10 @@ package body Sem_Attr is\n          --  know will fail, so generate an appropriate warning.\n \n          if In_Instance_Body then\n+            Error_Msg_Warn := not GNATprove_Mode;\n             Error_Msg_F\n-              (\"??non-local pointer cannot point to local object\", P);\n-            Error_Msg_F\n-              (\"\\??Program_Error will be raised at run time\", P);\n+              (\"non-local pointer cannot point to local object<<\", P);\n+            Error_Msg_F (\"\\Program_Error [<<\", P);\n             Rewrite (N,\n               Make_Raise_Program_Error (Loc,\n                 Reason => PE_Accessibility_Check_Failed));\n@@ -9792,10 +9792,11 @@ package body Sem_Attr is\n                   --  know will fail, so generate an appropriate warning.\n \n                   if In_Instance_Body then\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                      Error_Msg_F\n-                       (\"??non-local pointer cannot point to local object\", P);\n-                     Error_Msg_F\n-                       (\"\\??Program_Error will be raised at run time\", P);\n+                       (\"non-local pointer cannot point to local object<<\", P);\n+                     Error_Msg_F (\"\\Program_Error [<<\", P);\n+\n                      Rewrite (N,\n                        Make_Raise_Program_Error (Loc,\n                          Reason => PE_Accessibility_Check_Failed));"}, {"sha": "5388f63ca970a4a28ec3e1cc7d7da3d650db0d0f", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -3722,6 +3722,9 @@ package body Sem_Ch12 is\n                 and then not Is_Actual_Pack\n                 and then not Inline_Now\n                 and then (Operating_Mode = Generate_Code\n+\n+                           --  Need comment for this check ???\n+\n                            or else (Operating_Mode = Check_Semantics\n                                      and then (ASIS_Mode or GNATprove_Mode)));\n "}, {"sha": "9d452b13ea576600e18fa84c1b5ec65f05b45469", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -6047,6 +6047,20 @@ package body Sem_Ch13 is\n                Set_Parent (Exp, N);\n                Preanalyze_Assert_Expression (Exp, Standard_Boolean);\n \n+               --  In ASIS mode, even if assertions are not enabled, we must\n+               --  analyze the original expression in the aspect specification\n+               --  because it is part of the original tree.\n+\n+               if ASIS_Mode then\n+                  declare\n+                     Inv : constant Node_Id :=\n+                             Expression (Corresponding_Aspect (Ritem));\n+                  begin\n+                     Replace_Type_References (Inv, Chars (T));\n+                     Preanalyze_Assert_Expression (Inv, Standard_Boolean);\n+                  end;\n+               end if;\n+\n                --  Build first two arguments for Check pragma\n \n                Assoc := New_List ("}, {"sha": "68cffb6ba37fc8a726585dab37ad8a7a24ff4d51", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -3797,10 +3797,10 @@ package body Sem_Ch3 is\n                     and then Present (Get_Attribute_Definition_Clause\n                                         (E, Attribute_Address))\n                   then\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                      Error_Msg_N\n-                       (\"??more than one task with same entry address\", N);\n-                     Error_Msg_N\n-                       (\"\\??Program_Error will be raised at run time\", N);\n+                       (\"more than one task with same entry address<<\", N);\n+                     Error_Msg_N (\"\\Program_Error [<<\", N);\n                      Insert_Action (N,\n                        Make_Raise_Program_Error (Loc,\n                          Reason => PE_Duplicated_Entry_Address));"}, {"sha": "a95aea9e47073cdffd5ecfe6a6620145e7bc6ceb", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -4627,23 +4627,17 @@ package body Sem_Ch4 is\n                      Set_Etype (Sel, Etype (Comp));\n                      Set_Etype (N,   Etype (Comp));\n \n-                     --  Emit appropriate message. Gigi will replace the\n-                     --  node subsequently with the appropriate Raise.\n+                     --  Emit appropriate message. Gigi will replace the node\n+                     --  subsequently with the appropriate Raise.\n \n                      --  In SPARK mode, this is made into an error to simplify\n                      --  the processing of the formal verification backend.\n \n-                     if GNATprove_Mode then\n-                        Apply_Compile_Time_Constraint_Error\n-                          (N, \"component not present in }\",\n-                           CE_Discriminant_Check_Failed,\n-                           Ent => Prefix_Type, Rep => False);\n-                     else\n-                        Apply_Compile_Time_Constraint_Error\n-                          (N, \"component not present in }??\",\n-                           CE_Discriminant_Check_Failed,\n-                           Ent => Prefix_Type, Rep => False);\n-                     end if;\n+                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Apply_Compile_Time_Constraint_Error\n+                       (N, \"component not present in }<<\",\n+                        CE_Discriminant_Check_Failed,\n+                        Ent => Prefix_Type, Rep => False);\n \n                      Set_Raises_Constraint_Error (N);\n                      return;"}, {"sha": "22b661a21baf144f4acd00e99113f7288debb6ed", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -983,11 +983,9 @@ package body Sem_Ch6 is\n                    Reason => PE_Accessibility_Check_Failed));\n                Analyze (N);\n \n-               Error_Msg_N\n-                 (\"cannot return a local value by reference??\", N);\n-               Error_Msg_NE\n-                 (\"\\& will be raised at run time??\",\n-                   N, Standard_Program_Error);\n+               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_N (\"cannot return a local value by reference<<\", N);\n+               Error_Msg_NE (\"\\& [<<\", N, Standard_Program_Error);\n             end if;\n          end if;\n \n@@ -7225,21 +7223,12 @@ package body Sem_Ch6 is\n \n                --  In GNATprove mode, it is an error to have a missing return\n \n-               if GNATprove_Mode then\n-                  Error_Msg_N\n-                    (\"RETURN statement missing following this statement!\",\n-                     Last_Stm);\n-\n-               --  Otherwise normal case of warning (RM insists this is legal)\n-\n-               else\n-                  Error_Msg_N\n-                    (\"RETURN statement missing following this statement??!\",\n-                     Last_Stm);\n-                  Error_Msg_N\n-                    (\"\\Program_Error may be raised at run time??!\",\n-                     Last_Stm);\n-               end if;\n+               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_N\n+                 (\"RETURN statement missing following this statement<<!\",\n+                  Last_Stm);\n+               Error_Msg_N\n+                 (\"\\Program_Error ]<<!\", Last_Stm);\n             end if;\n \n             --  Note: we set Err even though we have not issued a warning\n@@ -7253,13 +7242,19 @@ package body Sem_Ch6 is\n \n          else\n             if not Raise_Exception_Call then\n-               Error_Msg_N\n-                 (\"implied return after this statement \" &\n-                  \"will raise Program_Error??\",\n-                  Last_Stm);\n+               if GNATprove_Mode then\n+                  Error_Msg_N\n+                    (\"implied return after this statement \"\n+                     & \"would have raised Program_Error\", Last_Stm);\n+               else\n+                  Error_Msg_N\n+                    (\"implied return after this statement \"\n+                     & \"will raise Program_Error??\", Last_Stm);\n+               end if;\n+\n+               Error_Msg_Warn := not GNATprove_Mode;\n                Error_Msg_NE\n-                 (\"\\procedure & is marked as No_Return??!\",\n-                  Last_Stm, Proc);\n+                 (\"\\procedure & is marked as No_Return<<!\", Last_Stm, Proc);\n             end if;\n \n             declare"}, {"sha": "4e4f248c9c52a0d146be952313c0009005f6fb49", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 96, "deletions": 112, "changes": 208, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -107,14 +107,14 @@ package body Sem_Dim is\n    type Name_Array is\n      array (Dimension_Position range\n               Low_Position_Bound .. High_Position_Bound) of Name_Id;\n-   --  A data structure used to store the names of all units within a system\n+   --  Store the names of all units within a system\n \n    No_Names : constant Name_Array := (others => No_Name);\n \n    type Symbol_Array is\n      array (Dimension_Position range\n               Low_Position_Bound ..  High_Position_Bound) of String_Id;\n-   --  A data structure used to store the symbols of all units within a system\n+   --  Store the symbols of all units within a system\n \n    No_Symbols : constant Symbol_Array := (others => No_String);\n \n@@ -291,12 +291,12 @@ package body Sem_Dim is\n       (N                  : Node_Id;\n        Description_Needed : Boolean := False) return String;\n    --  Given a node N, return the dimension symbols of N, preceded by \"has\n-   --  dimension\" if Description_Needed. if N is dimensionless, return \"[]\", or\n-   --  \"is dimensionless\" if Description_Needed.\n+   --  dimension\" if Description_Needed. if N is dimensionless, return \"'[']\",\n+   --  or \"is dimensionless\" if Description_Needed.\n \n    procedure Dim_Warning_For_Numeric_Literal (N : Node_Id; Typ : Entity_Id);\n-   --  Issue a warning on the given numeric literal N to indicate the\n-   --  compilateur made the assumption that the literal is not dimensionless\n+   --  Issue a warning on the given numeric literal N to indicate that the\n+   --  compiler made the assumption that the literal is not dimensionless\n    --  but has the dimension of Typ.\n \n    procedure Eval_Op_Expon_With_Rational_Exponent\n@@ -320,7 +320,7 @@ package body Sem_Dim is\n    --  Given a dimension vector and a dimension system, return the proper\n    --  string of dimension symbols. If In_Error_Msg is True (i.e. the String_Id\n    --  will be used to issue an error message) then this routine has a special\n-   --  handling for the insertion character asterisk * which must be precede by\n+   --  handling for the insertion characters * or [ which must be preceded by\n    --  a quote ' to to be placed literally into the message.\n \n    function From_Dim_To_Str_Of_Unit_Symbols\n@@ -365,15 +365,14 @@ package body Sem_Dim is\n \n    function \"+\" (Right : Whole) return Rational is\n    begin\n-      return Rational'(Numerator =>   Right,\n-                       Denominator => 1);\n+      return Rational'(Numerator => Right, Denominator => 1);\n    end \"+\";\n \n    function \"+\" (Left, Right : Rational) return Rational is\n       R : constant Rational :=\n-            Rational'(Numerator =>   Left.Numerator * Right.Denominator +\n-                                       Left.Denominator * Right.Numerator,\n-                      Denominator => Left.Denominator * Right.Denominator);\n+            Rational'(Numerator   =>  Left.Numerator   * Right.Denominator +\n+                                      Left.Denominator * Right.Numerator,\n+                      Denominator => Left.Denominator  * Right.Denominator);\n    begin\n       return Reduce (R);\n    end \"+\";\n@@ -384,14 +383,14 @@ package body Sem_Dim is\n \n    function \"-\" (Right : Rational) return Rational is\n    begin\n-      return Rational'(Numerator =>   -Right.Numerator,\n+      return Rational'(Numerator   => -Right.Numerator,\n                        Denominator => Right.Denominator);\n    end \"-\";\n \n    function \"-\" (Left, Right : Rational) return Rational is\n       R : constant Rational :=\n-            Rational'(Numerator =>   Left.Numerator * Right.Denominator -\n-                                       Left.Denominator * Right.Numerator,\n+            Rational'(Numerator   => Left.Numerator   * Right.Denominator -\n+                                     Left.Denominator * Right.Numerator,\n                       Denominator => Left.Denominator * Right.Denominator);\n \n    begin\n@@ -404,7 +403,7 @@ package body Sem_Dim is\n \n    function \"*\" (Left, Right : Rational) return Rational is\n       R : constant Rational :=\n-            Rational'(Numerator =>   Left.Numerator * Right.Numerator,\n+            Rational'(Numerator   => Left.Numerator   * Right.Numerator,\n                       Denominator => Left.Denominator * Right.Denominator);\n    begin\n       return Reduce (R);\n@@ -423,7 +422,7 @@ package body Sem_Dim is\n          L.Numerator := Whole (-Integer (L.Numerator));\n       end if;\n \n-      return Reduce (Rational'(Numerator =>   L.Numerator * R.Denominator,\n+      return Reduce (Rational'(Numerator   => L.Numerator   * R.Denominator,\n                                Denominator => L.Denominator * R.Numerator));\n    end \"/\";\n \n@@ -433,7 +432,7 @@ package body Sem_Dim is\n \n    function \"abs\" (Right : Rational) return Rational is\n    begin\n-      return Rational'(Numerator =>   abs Right.Numerator,\n+      return Rational'(Numerator   => abs Right.Numerator,\n                        Denominator => Right.Denominator);\n    end \"abs\";\n \n@@ -493,6 +492,7 @@ package body Sem_Dim is\n          --  Integer case\n \n          if Is_Integer_Type (Def_Id) then\n+\n             --  Dimension value must be an integer literal\n \n             if Nkind (Expr) = N_Integer_Literal then\n@@ -644,8 +644,8 @@ package body Sem_Dim is\n                                                    N_String_Literal)\n                then\n                   Num_Choices := Num_Choices + 1;\n-                  Error_Msg_N (\"optional component Symbol expected, found&\",\n-                               Choice);\n+                  Error_Msg_N\n+                    (\"optional component Symbol expected, found&\", Choice);\n                end if;\n             end if;\n          end if;\n@@ -790,7 +790,7 @@ package body Sem_Dim is\n \n       if Present (First (Expressions (Aggr)))\n         and then (First (Expressions (Aggr)) /= Symbol_Expr\n-                    or else Present (Next (Symbol_Expr)))\n+                   or else Present (Next (Symbol_Expr)))\n         and then (Num_Choices > 1\n                    or else (Num_Choices = 1 and then not Others_Seen))\n       then\n@@ -931,8 +931,7 @@ package body Sem_Dim is\n          Position := Position + 1;\n \n          if Position > High_Position_Bound then\n-            Error_Msg_N\n-              (\"too many dimensions in system\", Aggr);\n+            Error_Msg_N (\"too many dimensions in system\", Aggr);\n             exit;\n          end if;\n \n@@ -953,7 +952,7 @@ package body Sem_Dim is\n               and then List_Length (Expressions (Dim_Aggr)) /= 3\n             then\n                Error_Msg_N\n-                  (\"three components expected in aggregate\", Dim_Aggr);\n+                 (\"three components expected in aggregate\", Dim_Aggr);\n \n             else\n                --  Named dimension aggregate\n@@ -1000,7 +999,6 @@ package body Sem_Dim is\n                     or else Nkind (Choice) /= N_Identifier\n                   then\n                      Error_Msg_NE (\"wrong syntax for aspect&\", Choice, Id);\n-\n                   elsif Chars (Choice) /= Name_Dim_Symbol then\n                      Error_Msg_N (\"expected Dim_Symbol, found&\", Choice);\n                   end if;\n@@ -1083,8 +1081,7 @@ package body Sem_Dim is\n                   --  Verify that the string is not empty\n \n                   if String_Length (Dim_Symbols (Position)) = 0 then\n-                     Error_Msg_N\n-                       (\"empty string not allowed here\", Dim_Symbol);\n+                     Error_Msg_N (\"empty string not allowed here\", Dim_Symbol);\n                   end if;\n                end if;\n             end if;\n@@ -1242,11 +1239,8 @@ package body Sem_Dim is\n             end if;\n \n             Error_Msg_N\n-              (\"\\expected dimension \"\n-                & Dimensions_Msg_Of (Comp_Typ)\n-                & \", found \"\n-                & Dimensions_Msg_Of (Expr),\n-               Expr);\n+              (\"\\expected dimension \" & Dimensions_Msg_Of (Comp_Typ)\n+               & \", found \" & Dimensions_Msg_Of (Expr), Expr);\n          end if;\n \n          --  Look at the named components right after the positional components\n@@ -1321,10 +1315,9 @@ package body Sem_Dim is\n \n       procedure Error_Dim_Msg_For_Binary_Op (N, L, R : Node_Id) is\n       begin\n-         Error_Msg_NE (\"both operands for operation& must have same \" &\n-                       \"dimensions\",\n-                       N,\n-                       Entity (N));\n+         Error_Msg_NE\n+           (\"both operands for operation& must have same dimensions\",\n+            N, Entity (N));\n          Error_Msg_N (\"\\left operand \"  & Dimensions_Msg_Of (L, True), N);\n          Error_Msg_N (\"\\right operand \" & Dimensions_Msg_Of (R, True), N);\n       end Error_Dim_Msg_For_Binary_Op;\n@@ -1337,13 +1330,13 @@ package body Sem_Dim is\n         or else N_Kind in N_Op_Compare\n       then\n          declare\n-            L                : constant Node_Id := Left_Opnd (N);\n+            L                : constant Node_Id        := Left_Opnd (N);\n             Dims_Of_L        : constant Dimension_Type := Dimensions_Of (L);\n-            L_Has_Dimensions : constant Boolean := Exists (Dims_Of_L);\n-            R                : constant Node_Id := Right_Opnd (N);\n+            L_Has_Dimensions : constant Boolean        := Exists (Dims_Of_L);\n+            R                : constant Node_Id        := Right_Opnd (N);\n             Dims_Of_R        : constant Dimension_Type := Dimensions_Of (R);\n-            R_Has_Dimensions : constant Boolean := Exists (Dims_Of_R);\n-            Dims_Of_N        : Dimension_Type := Null_Dimension;\n+            R_Has_Dimensions : constant Boolean        := Exists (Dims_Of_R);\n+            Dims_Of_N        : Dimension_Type          := Null_Dimension;\n \n          begin\n             --  N_Op_Add, N_Op_Mod, N_Op_Rem or N_Op_Subtract case\n@@ -1408,8 +1401,9 @@ package body Sem_Dim is\n \n                if L_Has_Dimensions then\n                   if not Compile_Time_Known_Value (R) then\n-                     Error_Msg_N (\"exponent of dimensioned operand must be \" &\n-                                  \"known at compile time\", N);\n+                     Error_Msg_N\n+                       (\"exponent of dimensioned operand must be \"\n+                        & \"known at compile time\", N);\n                   end if;\n \n                   declare\n@@ -1584,14 +1578,15 @@ package body Sem_Dim is\n                            --  Check if error has already been encountered\n \n                            if not Error_Detected then\n-                              Error_Msg_NE (\"dimensions mismatch in call of&\",\n-                                            N, Name (N));\n+                              Error_Msg_NE\n+                                (\"dimensions mismatch in call of&\",\n+                                 N, Name (N));\n                               Error_Detected := True;\n                            end if;\n \n-                           Error_Msg_N (\"\\expected dimension [], found \" &\n-                                        Dimensions_Msg_Of (Actual),\n-                                        Actual);\n+                           Error_Msg_N\n+                             (\"\\expected dimension '['], found \"\n+                              & Dimensions_Msg_Of (Actual), Actual);\n                         end if;\n \n                         Next_Actual (Actual);\n@@ -1610,7 +1605,6 @@ package body Sem_Dim is\n \n          Actual := First_Actual (N);\n          Formal := First_Formal (Nam);\n-\n          while Present (Formal) loop\n \n             --  A missing corresponding actual indicates that the analysis of\n@@ -1682,11 +1676,9 @@ package body Sem_Dim is\n          Expr : Node_Id) is\n       begin\n          Error_Msg_N (\"dimensions mismatch in component declaration\", N);\n-         Error_Msg_N (\"\\expected dimension \"\n-                       & Dimensions_Msg_Of (Etyp)\n-                       & \", found \"\n-                       & Dimensions_Msg_Of (Expr),\n-                      Expr);\n+         Error_Msg_N\n+           (\"\\expected dimension \" & Dimensions_Msg_Of (Etyp) & \", found \"\n+            & Dimensions_Msg_Of (Expr), Expr);\n       end Error_Dim_Msg_For_Component_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Component_Declaration\n@@ -1700,6 +1692,7 @@ package body Sem_Dim is\n          --  Check dimensions match\n \n          if Dims_Of_Etyp /= Dims_Of_Expr then\n+\n             --  Numeric literal case. Issue a warning if the object type is not\n             --  dimensionless to indicate the literal is treated as if its\n             --  dimension matches the type dimension.\n@@ -1725,7 +1718,7 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Extended_Return_Statement (N : Node_Id) is\n       Return_Ent       : constant Entity_Id := Return_Statement_Entity (N);\n       Return_Etyp      : constant Entity_Id :=\n-        Etype (Return_Applies_To (Return_Ent));\n+                           Etype (Return_Applies_To (Return_Ent));\n       Return_Obj_Decls : constant List_Id := Return_Object_Declarations (N);\n       Return_Obj_Decl  : Node_Id;\n       Return_Obj_Id    : Entity_Id;\n@@ -1735,9 +1728,8 @@ package body Sem_Dim is\n         (N              : Node_Id;\n          Return_Etyp    : Entity_Id;\n          Return_Obj_Typ : Entity_Id);\n-      --  Error using Error_Msg_N at node N. Output the dimensions of the\n-      --  returned type Return_Etyp and the returned object type Return_Obj_Typ\n-      --  of N.\n+      --  Error using Error_Msg_N at node N. Output dimensions of the returned\n+      --  type Return_Etyp and the returned object type Return_Obj_Typ of N.\n \n       -------------------------------------------------\n       -- Error_Dim_Msg_For_Extended_Return_Statement --\n@@ -1750,11 +1742,9 @@ package body Sem_Dim is\n       is\n       begin\n          Error_Msg_N (\"dimensions mismatch in extended return statement\", N);\n-         Error_Msg_N (\"\\expected dimension \"\n-                       & Dimensions_Msg_Of (Return_Etyp)\n-                       & \", found \"\n-                       & Dimensions_Msg_Of (Return_Obj_Typ),\n-                      N);\n+         Error_Msg_N\n+           (\"\\expected dimension \" & Dimensions_Msg_Of (Return_Etyp)\n+            & \", found \" & Dimensions_Msg_Of (Return_Obj_Typ), N);\n       end Error_Dim_Msg_For_Extended_Return_Statement;\n \n    --  Start of processing for Analyze_Dimension_Extended_Return_Statement\n@@ -1845,11 +1835,8 @@ package body Sem_Dim is\n                end if;\n \n                Error_Msg_N\n-                 (\"\\expected dimension \"\n-                   & Dimensions_Msg_Of (Comp_Typ)\n-                   & \", found \"\n-                   & Dimensions_Msg_Of (Expr),\n-                  Comp);\n+                 (\"\\expected dimension \" & Dimensions_Msg_Of (Comp_Typ)\n+                  & \", found \" & Dimensions_Msg_Of (Expr), Comp);\n             end if;\n          end if;\n \n@@ -1951,7 +1938,6 @@ package body Sem_Dim is\n             declare\n                Expr  : Node_Id;\n                Exprs : constant List_Id := Expressions (N);\n-\n             begin\n                if Present (Exprs) then\n                   Expr := First (Exprs);\n@@ -2003,11 +1989,8 @@ package body Sem_Dim is\n       begin\n          Error_Msg_N (\"dimensions mismatch in object declaration\", N);\n          Error_Msg_N\n-           (\"\\expected dimension \"\n-             & Dimensions_Msg_Of (Etyp)\n-             & \", found \"\n-             & Dimensions_Msg_Of (Expr),\n-            Expr);\n+           (\"\\expected dimension \" & Dimensions_Msg_Of (Etyp) & \", found \"\n+            & Dimensions_Msg_Of (Expr), Expr);\n       end Error_Dim_Msg_For_Object_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Declaration\n@@ -2078,11 +2061,8 @@ package body Sem_Dim is\n       begin\n          Error_Msg_N (\"dimensions mismatch in object renaming declaration\", N);\n          Error_Msg_N\n-           (\"\\expected dimension \"\n-             & Dimensions_Msg_Of (Sub_Mark)\n-             & \", found \"\n-             & Dimensions_Msg_Of (Renamed_Name),\n-            Renamed_Name);\n+           (\"\\expected dimension \" & Dimensions_Msg_Of (Sub_Mark) & \", found \"\n+            & Dimensions_Msg_Of (Renamed_Name), Renamed_Name);\n       end Error_Dim_Msg_For_Object_Renaming_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Renaming_Declaration\n@@ -2126,11 +2106,8 @@ package body Sem_Dim is\n       begin\n          Error_Msg_N (\"dimensions mismatch in return statement\", N);\n          Error_Msg_N\n-           (\"\\expected dimension \"\n-             & Dimensions_Msg_Of (Return_Etyp)\n-             & \", found \"\n-             & Dimensions_Msg_Of (Expr),\n-            Expr);\n+           (\"\\expected dimension \" & Dimensions_Msg_Of (Return_Etyp)\n+            & \", found \" & Dimensions_Msg_Of (Expr), Expr);\n       end Error_Dim_Msg_For_Simple_Return_Statement;\n \n    --  Start of processing for Analyze_Dimension_Simple_Return_Statement\n@@ -2167,7 +2144,6 @@ package body Sem_Dim is\n             if Exists (Dims_Of_Id) then\n                Error_Msg_N\n                  (\"subtype& already\" & Dimensions_Msg_Of (Id, True), N);\n-\n             else\n                Set_Dimensions (Id, Dims_Of_Etyp);\n                Set_Symbol (Id, Symbol_Of (Etyp));\n@@ -2195,12 +2171,12 @@ package body Sem_Dim is\n    begin\n       case Nkind (N) is\n          when N_Op_Plus | N_Op_Minus | N_Op_Abs =>\n+\n+            --  Propagate the dimension if the operand is not dimensionless\n+\n             declare\n                R : constant Node_Id := Right_Opnd (N);\n-\n             begin\n-               --  Propagate the dimension if the operand is not dimensionless\n-\n                Move_Dimensions (R, N);\n             end;\n \n@@ -2298,10 +2274,11 @@ package body Sem_Dim is\n          Right_Rat : Rational;\n \n       begin\n-         --  Both left and right operands are an integer literal\n+         --  Both left and right operands are integer literals\n \n          if Nkind (Left) = N_Integer_Literal\n-           and then Nkind (Right) = N_Integer_Literal\n+              and then\n+            Nkind (Right) = N_Integer_Literal\n          then\n             Left_Rat := Process_Literal (Left);\n             Right_Rat := Process_Literal (Right);\n@@ -2407,10 +2384,10 @@ package body Sem_Dim is\n       elsif Description_Needed then\n          Add_Str_To_Name_Buffer (\"is dimensionless\");\n \n-      --  Otherwise, return \"[]\"\n+      --  Otherwise, return \"'[']\"\n \n       else\n-         Add_Str_To_Name_Buffer (\"[]\");\n+         Add_Str_To_Name_Buffer (\"'[']\");\n       end if;\n \n       Dimensions_Msg := Name_Find;\n@@ -2441,12 +2418,12 @@ package body Sem_Dim is\n       Add_String_To_Name_Buffer (String_From_Numeric_Literal (N));\n \n       --  Insert a blank between the literal and the symbol\n-      Add_Str_To_Name_Buffer    (\" \");\n \n+      Add_Str_To_Name_Buffer (\" \");\n       Add_String_To_Name_Buffer (Symbol_Of (Typ));\n \n       Error_Msg_Name_1 := Name_Find;\n-      Error_Msg_N (\"??assumed to be%%\", N);\n+      Error_Msg_N (\"assumed to be%%??\", N);\n    end Dim_Warning_For_Numeric_Literal;\n \n    ----------------------------------------\n@@ -2492,11 +2469,11 @@ package body Sem_Dim is\n      (N              : Node_Id;\n       Exponent_Value : Rational)\n    is\n+      Loc                   : constant Source_Ptr     := Sloc (N);\n       Dims_Of_N             : constant Dimension_Type := Dimensions_Of (N);\n-      L                     : constant Node_Id := Left_Opnd (N);\n-      Etyp_Of_L             : constant Entity_Id := Etype (L);\n-      Btyp_Of_L             : constant Entity_Id := Base_Type (Etyp_Of_L);\n-      Loc                   : constant Source_Ptr := Sloc (N);\n+      L                     : constant Node_Id        := Left_Opnd (N);\n+      Etyp_Of_L             : constant Entity_Id      := Etype (L);\n+      Btyp_Of_L             : constant Entity_Id      := Base_Type (Etyp_Of_L);\n       Actual_1              : Node_Id;\n       Actual_2              : Node_Id;\n       Dim_Power             : Rational;\n@@ -2544,18 +2521,16 @@ package body Sem_Dim is\n          --  Step 1: Generate the new aggregate for the aspect Dimension\n \n          New_Aspects  := Empty_List;\n-         List_Of_Dims := New_List;\n \n+         List_Of_Dims := New_List;\n          for Position in Dims_Of_N'First ..  System.Count loop\n             Dim_Power := Dims_Of_N (Position);\n             Append_To (List_Of_Dims,\n                Make_Op_Divide (Loc,\n                  Left_Opnd  =>\n-                   Make_Integer_Literal (Loc,\n-                     Int (Dim_Power.Numerator)),\n+                   Make_Integer_Literal (Loc, Int (Dim_Power.Numerator)),\n                  Right_Opnd =>\n-                   Make_Integer_Literal (Loc,\n-                     Int (Dim_Power.Denominator))));\n+                   Make_Integer_Literal (Loc, Int (Dim_Power.Denominator))));\n          end loop;\n \n          --  Step 2: Create the new Aspect Specification for Aspect Dimension\n@@ -2625,7 +2600,7 @@ package body Sem_Dim is\n       New_N :=\n          Make_Type_Conversion (Loc,\n            Subtype_Mark => New_Reference_To (New_Id, Loc),\n-           Expression =>\n+           Expression   =>\n              Make_Function_Call (Loc,\n                Name => New_Reference_To (RTE (RE_Expon_LLF), Loc),\n                Parameter_Associations => New_List (\n@@ -2749,10 +2724,9 @@ package body Sem_Dim is\n          Actual_Str : Node_Id;\n \n       begin\n-         Actual := First (Actuals);\n-\n          --  Look for a symbols parameter association in the list of actuals\n \n+         Actual := First (Actuals);\n          while Present (Actual) loop\n \n             --  Positional parameter association case when the actual is a\n@@ -3034,7 +3008,11 @@ package body Sem_Dim is\n \n       --  Store the dimension symbols inside boxes\n \n-      Store_String_Char ('[');\n+      if In_Error_Msg then\n+         Store_String_Chars (\"'[\");\n+      else\n+         Store_String_Char ('[');\n+      end if;\n \n       for Position in Dimension_Type'Range loop\n          Dim_Power := Dims (Position);\n@@ -3051,6 +3029,7 @@ package body Sem_Dim is\n             --  Positive dimension case\n \n             if Dim_Power.Numerator > 0 then\n+\n                --  Integer case\n \n                if Dim_Power.Denominator = 1 then\n@@ -3094,7 +3073,12 @@ package body Sem_Dim is\n          end if;\n       end loop;\n \n-      Store_String_Char (']');\n+      if In_Error_Msg then\n+         Store_String_Chars (\"']\");\n+      else\n+         Store_String_Char (']');\n+      end if;\n+\n       return End_String;\n    end From_Dim_To_Str_Of_Dim_Symbols;\n \n@@ -3128,7 +3112,6 @@ package body Sem_Dim is\n          Dim_Power := Dims (Position);\n \n          if Dim_Power /= Zero then\n-\n             if First_Dim then\n                First_Dim := False;\n             else\n@@ -3289,7 +3272,7 @@ package body Sem_Dim is\n       declare\n          G : constant Int := GCD (X.Numerator, X.Denominator);\n       begin\n-         return Rational'(Numerator =>   Whole (Int (X.Numerator) / G),\n+         return Rational'(Numerator =>   Whole (Int (X.Numerator)   / G),\n                           Denominator => Whole (Int (X.Denominator) / G));\n       end;\n    end Reduce;\n@@ -3369,8 +3352,9 @@ package body Sem_Dim is\n       Sbuffer : constant Source_Buffer_Ptr :=\n                   Source_Text (Get_Source_File_Index (Loc));\n       Src_Ptr : Source_Ptr := Loc;\n-      C       : Character  := Sbuffer (Src_Ptr);\n-         --  Current source program character\n+\n+      C : Character  := Sbuffer (Src_Ptr);\n+      --  Current source program character\n \n       function Belong_To_Numeric_Literal (C : Character) return Boolean;\n       --  Return True if C belongs to a numeric literal"}, {"sha": "0c789c20211647c9a274b8bd998cdbb7d60d6d67", "filename": "gcc/ada/sem_elab.adb", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_elab.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_elab.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_elab.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -1138,13 +1138,14 @@ package body Sem_Elab is\n \n       --  Here we definitely have a bad instantiation\n \n-      Error_Msg_NE (\"??cannot instantiate& before body seen\", N, Ent);\n+      Error_Msg_Warn := not GNATprove_Mode;\n+      Error_Msg_NE (\"cannot instantiate& before body seen<<\", N, Ent);\n \n       if Present (Instance_Spec (N)) then\n          Supply_Bodies (Instance_Spec (N));\n       end if;\n \n-      Error_Msg_N (\"\\??Program_Error will be raised at run time\", N);\n+      Error_Msg_N (\"\\Program_Error [<<\", N);\n       Insert_Elab_Check (N);\n       Set_ABE_Is_Certain (N);\n    end Check_Bad_Instantiation;\n@@ -2178,14 +2179,17 @@ package body Sem_Elab is\n       --  level, and the ABE is bound to occur.\n \n       if Elab_Call.Last = 0 then\n+         Error_Msg_Warn := not GNATprove_Mode;\n+\n          if Inst_Case then\n             Error_Msg_NE\n-              (\"??cannot instantiate& before body seen\", N, Orig_Ent);\n+              (\"cannot instantiate& before body seen<<\", N, Orig_Ent);\n          else\n-            Error_Msg_NE (\"??cannot call& before body seen\", N, Orig_Ent);\n+            Error_Msg_NE\n+              (\"cannot call& before body seen<<\", N, Orig_Ent);\n          end if;\n \n-         Error_Msg_N (\"\\??Program_Error will be raised at run time\", N);\n+         Error_Msg_N (\"\\Program_Error [<<\", N);\n          Insert_Elab_Check (N);\n \n       --  Call is not at outer level\n@@ -2259,17 +2263,19 @@ package body Sem_Elab is\n            and then (Nkind (Original_Node (N)) /= N_Function_Call\n                       or else not In_Assertion_Expression (Original_Node (N)))\n          then\n+            Error_Msg_Warn := not GNATprove_Mode;\n+\n             if Inst_Case then\n                Error_Msg_NE\n-                 (\"instantiation of& may occur before body is seen??\",\n+                 (\"instantiation of& may occur before body is seen<<\",\n                   N, Orig_Ent);\n             else\n                Error_Msg_NE\n-                 (\"call to& may occur before body is seen??\", N, Orig_Ent);\n+                 (\"call to& may occur before body is seen<<\", N, Orig_Ent);\n             end if;\n \n             Error_Msg_N\n-              (\"\\Program_Error may be raised at run time??\", N);\n+              (\"\\Program_Error ]<<\", N);\n \n             Output_Calls (N);\n          end if;\n@@ -2364,11 +2370,11 @@ package body Sem_Elab is\n                       or else\n                     Scope (Proc) = Scope (Defining_Identifier (Decl)))\n                then\n+                  Error_Msg_Warn := not GNATprove_Mode;\n                   Error_Msg_N\n-                    (\"task will be activated before elaboration of its body??\",\n+                    (\"task will be activated before elaboration of its body<<\",\n                       Decl);\n-                  Error_Msg_N\n-                    (\"\\Program_Error will be raised at run time??\", Decl);\n+                  Error_Msg_N (\"\\Program_Error [<<\", Decl);\n \n                elsif\n                  Present (Corresponding_Body (Unit_Declaration_Node (Proc)))"}, {"sha": "5ee8ecc0cc6357fed44ea09a54da4423e23646c0", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -369,7 +369,7 @@ package body Sem_Eval is\n            Intval (N) > Expr_Value (Type_High_Bound (Universal_Integer)))\n       then\n          Apply_Compile_Time_Constraint_Error\n-           (N, \"non-static universal integer value out of range??\",\n+           (N, \"non-static universal integer value out of range<<\",\n             CE_Range_Check_Failed);\n \n       --  Check out of range of base type\n@@ -390,7 +390,7 @@ package body Sem_Eval is\n \n          elsif Is_Out_Of_Range (N, T, Assume_Valid => True) then\n             Apply_Compile_Time_Constraint_Error\n-              (N, \"value not in range of}??\", CE_Range_Check_Failed);\n+              (N, \"value not in range of}<<\", CE_Range_Check_Failed);\n \n          elsif Checks_On then\n             Enable_Range_Check (N);\n@@ -5225,6 +5225,8 @@ package body Sem_Eval is\n       Stat := False;\n       Fold := False;\n \n+      --  Inhibit folding if -gnatd.f flag set\n+\n       if Debug_Flag_Dot_F and then In_Extended_Main_Source_Unit (N) then\n          return;\n       end if;"}, {"sha": "1b00377257890268289d46a7a4d8831508bf97d6", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 50, "deletions": 42, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -769,8 +769,9 @@ package body Sem_Res is\n               and then Nkind (Parent (P)) = N_Subprogram_Body\n               and then Is_Empty_List (Declarations (Parent (P)))\n             then\n-               Error_Msg_N (\"!??infinite recursion\", N);\n-               Error_Msg_N (\"\\!??Storage_Error will be raised at run time\", N);\n+               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_N (\"!infinite recursion<<\", N);\n+               Error_Msg_N (\"\\!Storage_Error [<<\", N);\n                Insert_Action (N,\n                  Make_Raise_Storage_Error (Sloc (N),\n                    Reason => SE_Infinite_Recursion));\n@@ -867,8 +868,9 @@ package body Sem_Res is\n          end if;\n       end loop;\n \n-      Error_Msg_N (\"!??possible infinite recursion\", N);\n-      Error_Msg_N (\"\\!??Storage_Error may be raised at run time\", N);\n+      Error_Msg_Warn := not GNATprove_Mode;\n+      Error_Msg_N (\"!possible infinite recursion<<\", N);\n+      Error_Msg_N (\"\\!??Storage_Error ]<<\", N);\n \n       return True;\n    end Check_Infinite_Recursion;\n@@ -4553,11 +4555,11 @@ package body Sem_Res is\n                  Deepest_Type_Access_Level (Typ)\n             then\n                if In_Instance_Body then\n+                  Error_Msg_Warn := not GNATprove_Mode;\n                   Error_Msg_N\n-                    (\"??type in allocator has deeper level than \"\n-                     & \"designated class-wide type\", E);\n-                  Error_Msg_N\n-                    (\"\\??Program_Error will be raised at run time\", E);\n+                    (\"type in allocator has deeper level than \"\n+                     & \"designated class-wide type<<\", E);\n+                  Error_Msg_N (\"\\Program_Error [<<\", E);\n                   Rewrite (N,\n                     Make_Raise_Program_Error (Sloc (N),\n                       Reason => PE_Accessibility_Check_Failed));\n@@ -4664,8 +4666,9 @@ package body Sem_Res is\n         and then Ekind (Current_Scope) = E_Package\n         and then not In_Package_Body (Current_Scope)\n       then\n-         Error_Msg_N (\"??cannot activate task before body seen\", N);\n-         Error_Msg_N (\"\\??Program_Error will be raised at run time\", N);\n+         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_N (\"cannot activate task before body seen<<\", N);\n+         Error_Msg_N (\"\\Program_Error [<<\", N);\n       end if;\n \n       --  Ada 2012 (AI05-0111-3): Detect an attempt to allocate a task or a\n@@ -4677,8 +4680,9 @@ package body Sem_Res is\n         and then Present (Subpool_Handle_Name (N))\n         and then Has_Task (Desig_T)\n       then\n-         Error_Msg_N (\"??cannot allocate task on subpool\", N);\n-         Error_Msg_N (\"\\??Program_Error will be raised at run time\", N);\n+         Error_Msg_Warn := not GNATprove_Mode;\n+         Error_Msg_N (\"cannot allocate task on subpool<<\", N);\n+         Error_Msg_N (\"\\Program_Error [<<\", N);\n \n          Rewrite (N,\n            Make_Raise_Program_Error (Sloc (N),\n@@ -5392,11 +5396,11 @@ package body Sem_Res is\n                            and then Is_Entry_Barrier_Function (P))\n                then\n                   Rtype := Etype (N);\n+                  Error_Msg_Warn := not GNATprove_Mode;\n                   Error_Msg_NE\n-                    (\"??& should not be used in entry body (RM C.7(17))\",\n+                    (\"& should not be used in entry body (RM C.7(17))<<\",\n                      N, Nam);\n-                  Error_Msg_NE\n-                    (\"\\Program_Error will be raised at run time??\", N, Nam);\n+                  Error_Msg_NE (\"\\Program_Error [<<\", N, Nam);\n                   Rewrite (N,\n                     Make_Raise_Program_Error (Loc,\n                       Reason => PE_Current_Task_In_Entry_Body));\n@@ -5693,10 +5697,9 @@ package body Sem_Res is\n                      --  Here warning is to be issued\n \n                      Set_Has_Recursive_Call (Nam);\n-                     Error_Msg_N\n-                       (\"??possible infinite recursion!\", N);\n-                     Error_Msg_N\n-                       (\"\\??Storage_Error may be raised at run time!\", N);\n+                     Error_Msg_Warn := not GNATprove_Mode;\n+                     Error_Msg_N (\"possible infinite recursion<<!\", N);\n+                     Error_Msg_N (\"\\Storage_Error ]<<!\", N);\n                   end if;\n \n                   exit Scope_Loop;\n@@ -6008,8 +6011,9 @@ package body Sem_Res is\n             end loop;\n \n             if not Call_OK then\n-               Error_Msg_N (\"!?? cannot determine tag of result\", N);\n-               Error_Msg_N (\"!?? Program_Error will be raised\", N);\n+               Error_Msg_Warn := not GNATprove_Mode;\n+               Error_Msg_N (\"!cannot determine tag of result<<\", N);\n+               Error_Msg_N (\"\\Program_Error [<<!\", N);\n                Insert_Action (N,\n                  Make_Raise_Program_Error (Sloc (N),\n                     Reason => PE_Explicit_Raise));\n@@ -10873,12 +10877,11 @@ package body Sem_Res is\n                     Deepest_Type_Access_Level (Opnd_Type)\n                then\n                   if In_Instance_Body then\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                      Conversion_Error_N\n-                       (\"??source array type has deeper accessibility \"\n-                        & \"level than target\", Operand);\n-                     Conversion_Error_N\n-                       (\"\\??Program_Error will be raised at run time\",\n-                        Operand);\n+                       (\"source array type has deeper accessibility \"\n+                        & \"level than target<<\", Operand);\n+                     Conversion_Error_N (\"\\Program_Error [<<\", Operand);\n                      Rewrite (N,\n                        Make_Raise_Program_Error (Sloc (N),\n                          Reason => PE_Accessibility_Check_Failed));\n@@ -11183,11 +11186,11 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n+                  Error_Msg_Warn := not GNATprove_Mode;\n                   Conversion_Error_N\n-                    (\"??cannot convert local pointer to non-local access type\",\n+                    (\"cannot convert local pointer to non-local access type<<\",\n                      Operand);\n-                  Conversion_Error_N\n-                    (\"\\??Program_Error will be raised at run time\", Operand);\n+                  Conversion_Error_N (\"\\Program_Error [<<\", Operand);\n \n                else\n                   Conversion_Error_N\n@@ -11216,12 +11219,14 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                      Conversion_Error_N\n-                       (\"??cannot convert access discriminant to non-local \"\n-                        & \"access type\", Operand);\n-                     Conversion_Error_N\n-                       (\"\\??Program_Error will be raised at run time\",\n-                        Operand);\n+                       (\"cannot convert access discriminant to non-local \"\n+                        & \"access type<<\", Operand);\n+                     Conversion_Error_N (\"\\Program_Error [<<\", Operand);\n+\n+                  --  Real error if not in instance body\n+\n                   else\n                      Conversion_Error_N\n                        (\"cannot convert access discriminant to non-local \"\n@@ -11361,11 +11366,13 @@ package body Sem_Res is\n                --  will be generated by Expand_N_Type_Conversion.\n \n                if In_Instance_Body then\n+                  Error_Msg_Warn := not GNATprove_Mode;\n                   Conversion_Error_N\n-                    (\"??cannot convert local pointer to non-local access type\",\n+                    (\"cannot convert local pointer to non-local access type<<\",\n                      Operand);\n-                  Conversion_Error_N\n-                    (\"\\??Program_Error will be raised at run time\", Operand);\n+                  Conversion_Error_N (\"\\Program_Error [<<\", Operand);\n+\n+               --  If not in an instance body, this is a real error\n \n                else\n                   --  Avoid generation of spurious error message\n@@ -11399,12 +11406,13 @@ package body Sem_Res is\n                   --  will be generated by Expand_N_Type_Conversion.\n \n                   if In_Instance_Body then\n+                     Error_Msg_Warn := not GNATprove_Mode;\n                      Conversion_Error_N\n-                       (\"??cannot convert access discriminant to non-local \"\n-                        & \"access type\", Operand);\n-                     Conversion_Error_N\n-                       (\"\\??Program_Error will be raised at run time\",\n-                        Operand);\n+                       (\"cannot convert access discriminant to non-local \"\n+                        & \"access type<<\", Operand);\n+                     Conversion_Error_N (\"\\Program_Error [<<\", Operand);\n+\n+                  --  If not in an instance body, this is a real error\n \n                   else\n                      Conversion_Error_N"}, {"sha": "cce45be570a72ffbb63deabb5a3f42a60115283c", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a28b181a6164561a56bf02dfa1fd568e3d0ec5b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=4a28b181a6164561a56bf02dfa1fd568e3d0ec5b", "patch": "@@ -578,8 +578,9 @@ package body Sem_Util is\n    begin\n       if Has_Predicates (Typ) then\n          if Is_Generic_Actual_Type (Typ) then\n-            Error_Msg_FE (Msg & \"??\", N, Typ);\n-            Error_Msg_F (\"\\Program_Error will be raised at run time??\", N);\n+            Error_Msg_Warn := not GNATprove_Mode;\n+            Error_Msg_FE (Msg & \"<<\", N, Typ);\n+            Error_Msg_F (\"\\Program_Error [<<\", N);\n             Insert_Action (N,\n               Make_Raise_Program_Error (Sloc (N),\n                 Reason => PE_Bad_Predicated_Generic_Type));\n@@ -3257,7 +3258,7 @@ package body Sem_Util is\n       Warn : Boolean    := False) return Node_Id\n    is\n       Msgc : String (1 .. Msg'Length + 3);\n-      --  Copy of message, with room for possible ?? and ! at end\n+      --  Copy of message, with room for possible ?? or << and ! at end\n \n       Msgl : Natural;\n       Wmsg : Boolean;\n@@ -3267,6 +3268,12 @@ package body Sem_Util is\n       Eloc : Source_Ptr;\n \n    begin\n+      --  If this is a warning, convert it into an error if we are operating\n+      --  in GNATprove mode, because in SPARK, we are allowed to consider\n+      --  such warnings as illegalities, and we choose to do so!\n+\n+      Error_Msg_Warn := not GNATprove_Mode;\n+\n       --  A static constraint error in an instance body is not a fatal error.\n       --  we choose to inhibit the message altogether, because there is no\n       --  obvious node (for now) on which to post it. On the other hand the\n@@ -3281,12 +3288,22 @@ package body Sem_Util is\n             Eloc := Sloc (N);\n          end if;\n \n-         Msgc (1 .. Msg'Length) := Msg;\n+         --  Copy message to Msgc, converting any ? in the message into\n+         --  < instead, so that we have an error in GNATprove mode.\n+\n          Msgl := Msg'Length;\n \n+         for J in 1 .. Msgl loop\n+            if Msg (J) = '?' and then (J = 1 or else Msg (J) /= ''') then\n+               Msgc (J) := '<';\n+            else\n+               Msgc (J) := Msg (J);\n+            end if;\n+         end loop;\n+\n          --  Message is a warning, even in Ada 95 case\n \n-         if Msg (Msg'Last) = '?' then\n+         if Msg (Msg'Last) = '?' or else Msg (Msg'Last) = '<' then\n             Wmsg := True;\n \n          --  In Ada 83, all messages are warnings. In the private part and\n@@ -3297,16 +3314,16 @@ package body Sem_Util is\n            or else (Ada_Version = Ada_83 and then Comes_From_Source (N))\n          then\n             Msgl := Msgl + 1;\n-            Msgc (Msgl) := '?';\n+            Msgc (Msgl) := '<';\n             Msgl := Msgl + 1;\n-            Msgc (Msgl) := '?';\n+            Msgc (Msgl) := '<';\n             Wmsg := True;\n \n          elsif In_Instance_Not_Visible then\n             Msgl := Msgl + 1;\n-            Msgc (Msgl) := '?';\n+            Msgc (Msgl) := '<';\n             Msgl := Msgl + 1;\n-            Msgc (Msgl) := '?';\n+            Msgc (Msgl) := '<';\n             Wmsg := True;\n \n          --  Otherwise we have a real error message (Ada 95 static case)\n@@ -3397,6 +3414,8 @@ package body Sem_Util is\n          end loop;\n \n          if Msgs then\n+            Error_Msg_Warn := not GNATprove_Mode;\n+\n             if Present (Ent) then\n                Error_Msg_NEL (Msgc (1 .. Msgl), N, Ent, Eloc);\n             else\n@@ -3424,25 +3443,27 @@ package body Sem_Util is\n                        and then not Comes_From_Source (Conc_Typ)\n                      then\n                         Error_Msg_NEL\n-                          (\"\\??& will be raised at run time\",\n-                           N, Standard_Constraint_Error, Eloc);\n+                          (\"\\& [<<\", N, Standard_Constraint_Error, Eloc);\n \n                      else\n-                        Error_Msg_NEL\n-                          (\"\\??& will be raised for objects of this type\",\n-                           N, Standard_Constraint_Error, Eloc);\n+                        if GNATprove_Mode then\n+                           Error_Msg_NEL\n+                             (\"\\& would have been raised for objects of this \"\n+                              & \"type\", N, Standard_Constraint_Error, Eloc);\n+                        else\n+                           Error_Msg_NEL\n+                             (\"\\& will be raised for objects of this type??\",\n+                              N, Standard_Constraint_Error, Eloc);\n+                        end if;\n                      end if;\n                   end;\n \n                else\n-                  Error_Msg_NEL\n-                    (\"\\??& will be raised at run time\",\n-                     N, Standard_Constraint_Error, Eloc);\n+                  Error_Msg_NEL (\"\\& [<<\", N, Standard_Constraint_Error, Eloc);\n                end if;\n \n             else\n-               Error_Msg\n-                 (\"\\static expression fails Constraint_Check\", Eloc);\n+               Error_Msg (\"\\static expression fails Constraint_Check\", Eloc);\n                Set_Error_Posted (N);\n             end if;\n          end if;"}]}