{"sha": "bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmJkNmZjZjMyMDQ2MGYyOWMxZWY4YzNiNDJkNTcxMjM4YjBmODZlNQ==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-09-23T14:14:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-09-23T14:14:52Z"}, "message": "Provide location information for terminator characters (PR preprocessor/77672)\n\nsubstring_loc::get_location currently fails for the final terminator\ncharacter in a STRING_CST from the C frontend, so that format_warning_va\nfalls back to using the location of the string as a whole.\n\nThis patch tweaks things [1] so that we use the final closing quote\nas the location of the terminator character, as requested in\nPR preprocessor/77672.\n\n[1] specifically, cpp_interpret_string_1.\n\ngcc/ChangeLog:\n\tPR preprocessor/77672\n\t* input.c (selftest::test_lexer_string_locations_simple): Update\n\ttest to expect location information of the terminator character\n\tat the location of the final closing quote.\n\t(selftest::test_lexer_string_locations_hex): Likewise.\n\t(selftest::test_lexer_string_locations_oct): Likewise.\n\t(selftest::test_lexer_string_locations_letter_escape_1): Likewise.\n\t(selftest::test_lexer_string_locations_letter_escape_2): Likewise.\n\t(selftest::test_lexer_string_locations_ucn4): Likewise.\n\t(selftest::test_lexer_string_locations_ucn8): Likewise.\n\t(selftest::test_lexer_string_locations_u8): Likewise.\n\t(selftest::test_lexer_string_locations_utf8_source): Likewise.\n\t(selftest::test_lexer_string_locations_concatenation_1): Likewise.\n\t(selftest::test_lexer_string_locations_concatenation_2): Likewise.\n\t(selftest::test_lexer_string_locations_concatenation_3): Likewise.\n\t(selftest::test_lexer_string_locations_macro): Likewise.\n\t(selftest::test_lexer_string_locations_long_line): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR preprocessor/77672\n\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n\t(test_terminator_location): New function.\n\nlibcpp/ChangeLog:\n\tPR preprocessor/77672\n\t* charset.c (cpp_interpret_string_1): Add a source_range for the\n\tNUL-terminator, using the location of the trailing quote of the\n\tfinal string.\n\nFrom-SVN: r240434", "tree": {"sha": "4c2c701cee2b268d267262bed245ca34c5893ec9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c2c701cee2b268d267262bed245ca34c5893ec9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30faeb0f99e8618739217ff3efa930cc382d8448", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30faeb0f99e8618739217ff3efa930cc382d8448", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30faeb0f99e8618739217ff3efa930cc382d8448"}], "stats": {"total": 137, "additions": 104, "deletions": 33}, "files": [{"sha": "14a5518f6ec621a403a159b79913b40c85cad31f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -1,3 +1,23 @@\n+2016-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/77672\n+\t* input.c (selftest::test_lexer_string_locations_simple): Update\n+\ttest to expect location information of the terminator character\n+\tat the location of the final closing quote.\n+\t(selftest::test_lexer_string_locations_hex): Likewise.\n+\t(selftest::test_lexer_string_locations_oct): Likewise.\n+\t(selftest::test_lexer_string_locations_letter_escape_1): Likewise.\n+\t(selftest::test_lexer_string_locations_letter_escape_2): Likewise.\n+\t(selftest::test_lexer_string_locations_ucn4): Likewise.\n+\t(selftest::test_lexer_string_locations_ucn8): Likewise.\n+\t(selftest::test_lexer_string_locations_u8): Likewise.\n+\t(selftest::test_lexer_string_locations_utf8_source): Likewise.\n+\t(selftest::test_lexer_string_locations_concatenation_1): Likewise.\n+\t(selftest::test_lexer_string_locations_concatenation_2): Likewise.\n+\t(selftest::test_lexer_string_locations_concatenation_3): Likewise.\n+\t(selftest::test_lexer_string_locations_macro): Likewise.\n+\t(selftest::test_lexer_string_locations_long_line): Likewise.\n+\n 2016-09-23  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (visit_reference_op_call): Value number"}, {"sha": "9b263781776242af309a4bc4c1764c11fc8714b8", "filename": "gcc/input.c", "status": "modified", "additions": 49, "deletions": 32, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Finput.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Finput.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finput.c?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -2239,12 +2239,12 @@ test_lexer_string_locations_simple (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.  */\n-  for (int i = 0; i <= 9; i++)\n+     opening quote, but does include the closing quote.  */\n+  for (int i = 0; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1,\n \t\t\t  10 + i, 10 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 10);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 11);\n }\n \n /* As test_lexer_string_locations_simple, but use an EBCDIC execution\n@@ -2339,14 +2339,14 @@ test_lexer_string_locations_hex (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.  */\n+     opening quote, but does include the closing quote.  */\n   for (int i = 0; i <= 4; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n   ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, 5, 1, 15, 18);\n-  for (int i = 6; i <= 9; i++)\n+  for (int i = 6; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 13 + i, 13 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 10);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 11);\n }\n \n /* Lex a string literal containing an octal-escaped character.\n@@ -2380,14 +2380,14 @@ test_lexer_string_locations_oct (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.  */\n+     opening quote, but does include the closing quote.  */\n   for (int i = 0; i < 5; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n   ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, 5, 1, 15, 18);\n-  for (int i = 6; i <= 9; i++)\n+  for (int i = 6; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 13 + i, 13 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 10);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 11);\n }\n \n /* Test of string literal containing letter escapes.  */\n@@ -2420,12 +2420,12 @@ test_lexer_string_locations_letter_escape_1 (const line_table_case &case_)\n   ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n \t\t\t5, 1, 17, 18);\n \n-  /* \"bar\".  */\n-  for (int i = 6; i <= 8; i++)\n+  /* \"bar\" and closing quote for nul-terminator.  */\n+  for (int i = 6; i <= 9; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n \t\t\t  i, 1, 13 + i, 13 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 9);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 10);\n }\n \n /* Another test of a string literal containing a letter escape.\n@@ -2455,7 +2455,11 @@ test_lexer_string_locations_letter_escape_2 (const line_table_case &case_)\n   ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n \t\t\t3, 1, 13, 14);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 4);\n+  /* Closing quote for nul-terminator.  */\n+  ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n+\t\t\t4, 1, 15, 15);\n+\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 5);\n }\n \n /* Lex a string literal containing UCN 4 characters.\n@@ -2498,6 +2502,7 @@ test_lexer_string_locations_ucn4 (const line_table_case &case_)\n      11           0x37         '7'      27\n      12           0x38         '8'      28\n      13           0x39         '9'      29\n+     14           0x00                  30 (closing quote)\n      -----------  ----  -----  -------  ---------------.  */\n \n   cpp_string dst_string;\n@@ -2510,7 +2515,7 @@ test_lexer_string_locations_ucn4 (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.\n+     opening quote, but does include the closing quote.\n      '01234'.  */\n   for (int i = 0; i <= 4; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n@@ -2520,11 +2525,11 @@ test_lexer_string_locations_ucn4 (const line_table_case &case_)\n   /* U+2175.  */\n   for (int i = 8; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 21, 26);\n-  /* '789'.  */\n-  for (int i = 11; i <= 13; i++)\n+  /* '789' and nul terminator  */\n+  for (int i = 11; i <= 14; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 16 + i, 16 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 14);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 15);\n }\n \n /* Lex a string literal containing UCN 8 characters.\n@@ -2561,7 +2566,7 @@ test_lexer_string_locations_ucn8 (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.\n+     opening quote, but does include the closing quote.\n      '01234'.  */\n   for (int i = 0; i <= 4; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n@@ -2574,8 +2579,10 @@ test_lexer_string_locations_ucn8 (const line_table_case &case_)\n   /* '789' at columns 35-37  */\n   for (int i = 11; i <= 13; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 24 + i, 24 + i);\n+  /* Closing quote/nul-terminator at column 38.  */\n+  ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, 14, 1, 38, 38);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 14);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 15);\n }\n \n /* Fetch a big-endian 32-bit value and convert to host endianness.  */\n@@ -2751,8 +2758,8 @@ test_lexer_string_locations_u8 (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.  */\n-  for (int i = 0; i <= 9; i++)\n+     opening quote, but does include the closing quote.  */\n+  for (int i = 0; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n }\n \n@@ -2829,13 +2836,15 @@ test_lexer_string_locations_utf8_source (const line_table_case &case_)\n   free (const_cast <unsigned char *> (dst_string.text));\n \n   /* Verify ranges of individual characters.  This no longer includes the\n-     quotes.\n+     opening quote, but does include the closing quote.\n      Assuming that both source and execution encodings are UTF-8, we have\n-     a run of 25 octets in each.  */\n+     a run of 25 octets in each, plus the NUL terminator.  */\n   for (int i = 0; i < 25; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, i, 1, 10 + i, 10 + i);\n+  /* NUL-terminator should use the closing quote at column 35.  */\n+  ASSERT_CHAR_AT_RANGE (test, tok->src_loc, type, 25, 1, 35, 35);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 25);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, type, 26);\n }\n \n /* Test of string literal concatenation.  */\n@@ -2881,12 +2890,14 @@ test_lexer_string_locations_concatenation_1 (const line_table_case &case_)\n \n   location_t initial_loc = input_locs[0];\n \n+  /* \"01234\" on line 1.  */\n   for (int i = 0; i <= 4; i++)\n     ASSERT_CHAR_AT_RANGE (test, initial_loc, type, i, 1, 10 + i, 10 + i);\n-  for (int i = 5; i <= 9; i++)\n+  /* \"56789\" in line 2, plus its closing quote for the nul terminator.  */\n+  for (int i = 5; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, initial_loc, type, i, 2, 5 + i, 5 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 10);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 11);\n }\n \n /* Another test of string literal concatenation.  */\n@@ -2958,7 +2969,10 @@ test_lexer_string_locations_concatenation_2 (const line_table_case &case_)\n       ASSERT_CHAR_AT_RANGE (test, initial_loc, type, (i * 2) + j,\n \t\t\t    i + 1, 10 + j, 10 + j);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 10);\n+  /* NUL-terminator should use the final closing quote at line 5 column 12.  */\n+  ASSERT_CHAR_AT_RANGE (test, initial_loc, type, 10, 5, 12, 12);\n+\n+  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 11);\n }\n \n /* Another test of string literal concatenation, this time combined with\n@@ -3009,7 +3023,10 @@ test_lexer_string_locations_concatenation_3 (const line_table_case &case_)\n   for (int i = 7; i <= 9; i++)\n     ASSERT_CHAR_AT_RANGE (test, initial_loc, type, i, 1, 28 + i, 28 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 10);\n+  /* NUL-terminator should use the location of the final closing quote.  */\n+  ASSERT_CHAR_AT_RANGE (test, initial_loc, type, 10, 1, 38, 38);\n+\n+  ASSERT_NUM_SUBSTRING_RANGES (test, initial_loc, type, 11);\n }\n \n /* Test of string literal in a macro.  */\n@@ -3034,11 +3051,11 @@ test_lexer_string_locations_macro (const line_table_case &case_)\n \n   /* Verify ranges of individual characters.  We ought to\n      see columns within the macro definition.  */\n-  for (int i = 0; i <= 9; i++)\n+  for (int i = 0; i <= 10; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n \t\t\t  i, 1, 20 + i, 20 + i);\n \n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 10);\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 11);\n \n   tok = test.get_token ();\n   ASSERT_EQ (tok->type, CPP_PADDING);\n@@ -3132,8 +3149,8 @@ test_lexer_string_locations_long_line (const line_table_case &case_)\n     return;\n \n   /* Verify ranges of individual characters.  */\n-  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 130);\n-  for (int i = 0; i < 130; i++)\n+  ASSERT_NUM_SUBSTRING_RANGES (test, tok->src_loc, CPP_STRING, 131);\n+  for (int i = 0; i < 131; i++)\n     ASSERT_CHAR_AT_RANGE (test, tok->src_loc, CPP_STRING,\n \t\t\t  i, 2, 7 + i, 7 + i);\n }"}, {"sha": "55bb6e6e7597ea35df0daa6f6c0faffa594eab94", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -1,3 +1,9 @@\n+2016-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/77672\n+\t* gcc.dg/plugin/diagnostic-test-string-literals-1.c\n+\t(test_terminator_location): New function.\n+\n 2016-09-23  Richard Biener  <rguenther@suse.de>\n \n \t* gcc.dg/tree-ssa/ssa-fre-56.c: New testcase."}, {"sha": "3d5ff6d9414fdfb2a8dc138016cad0b13abce000", "filename": "gcc/testsuite/gcc.dg/plugin/diagnostic-test-string-literals-1.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fplugin%2Fdiagnostic-test-string-literals-1.c?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -209,3 +209,17 @@ test_macro (void)\n                                 ~~~\n    { dg-end-multiline-output \"\" } */\n }\n+\n+/* Verify that the location of the closing quote is used\n+   for the location of the null terminating character.  */\n+\n+void\n+test_terminator_location (void)\n+{\n+  __emit_string_literal_range (\"0123456789\", /* { dg-warning \"range\" } */\n+\t\t\t       10, 10, 10);\n+/* { dg-begin-multiline-output \"\" }\n+   __emit_string_literal_range (\"0123456789\",\n+                                           ^\n+   { dg-end-multiline-output \"\" } */\n+}"}, {"sha": "61304cb6bcbf0274aae29d2d410c29a70a869c81", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -1,3 +1,10 @@\n+2016-09-23  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR preprocessor/77672\n+\t* charset.c (cpp_interpret_string_1): Add a source_range for the\n+\tNUL-terminator, using the location of the trailing quote of the\n+\tfinal string.\n+\n 2016-09-21  Jason Merrill  <jason@redhat.com>\n \n \t* line-map.c (linemap_location_from_macro_definition_p): New."}, {"sha": "e77270a18eb957e29f4a5e391a4969f1a2fb0ce0", "filename": "libcpp/charset.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bbd6fcf320460f29c1ef8c3b42d571238b0f86e5/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=bbd6fcf320460f29c1ef8c3b42d571238b0f86e5", "patch": "@@ -1538,9 +1538,9 @@ cpp_interpret_string_1 (cpp_reader *pfile, const cpp_string *from, size_t count,\n       tbuf.len = 0;\n     }\n \n+  cpp_string_location_reader *loc_reader = NULL;\n   for (i = 0; i < count; i++)\n     {\n-      cpp_string_location_reader *loc_reader = NULL;\n       if (loc_readers)\n \tloc_reader = &loc_readers[i];\n \n@@ -1652,6 +1652,13 @@ cpp_interpret_string_1 (cpp_reader *pfile, const cpp_string *from, size_t count,\n       to->text = tbuf.text;\n       to->len = tbuf.len;\n     }\n+  /* Use the location of the trailing quote as the location of the\n+     NUL-terminator.  */\n+  if (loc_reader)\n+    {\n+      source_range range = loc_reader->get_next ();\n+      out->add_range (range);\n+    }\n \n   return true;\n "}]}