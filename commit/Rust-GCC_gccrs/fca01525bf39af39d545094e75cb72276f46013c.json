{"sha": "fca01525bf39af39d545094e75cb72276f46013c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNhMDE1MjViZjM5YWYzOWQ1NDUwOTRlNzVjYjcyMjc2ZjQ2MDEzYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-02-21T18:38:05Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-02-21T18:38:05Z"}, "message": "tree-cfg.c (fold_cond_expr_cond): New.\n\n\t* tree-cfg.c (fold_cond_expr_cond): New.\n\t(make_edges): Call fold_cond_expr_cond.\n\t(find_taken_edge): Accept nothing but INTEGER_CST.\n\t(find_taken_edge_cond_expr): Reject INTEGER_CST other than 0\n\tand 1.\n\t(find_taken_edge_switch_expr): Remove a check for INTEGER_CST.\n\nFrom-SVN: r95339", "tree": {"sha": "94ecbbfd3758ca781238f888eea60894968ddc3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94ecbbfd3758ca781238f888eea60894968ddc3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fca01525bf39af39d545094e75cb72276f46013c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca01525bf39af39d545094e75cb72276f46013c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fca01525bf39af39d545094e75cb72276f46013c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fca01525bf39af39d545094e75cb72276f46013c/comments", "author": null, "committer": null, "parents": [{"sha": "92c91cf7fe57f41771273f941431432c77f76f59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/92c91cf7fe57f41771273f941431432c77f76f59", "html_url": "https://github.com/Rust-GCC/gccrs/commit/92c91cf7fe57f41771273f941431432c77f76f59"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "e18b08a627117ab98e5d86767e1f638c9878c1a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca01525bf39af39d545094e75cb72276f46013c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca01525bf39af39d545094e75cb72276f46013c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fca01525bf39af39d545094e75cb72276f46013c", "patch": "@@ -1,3 +1,12 @@\n+2005-02-21  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-cfg.c (fold_cond_expr_cond): New.\n+\t(make_edges): Call fold_cond_expr_cond.\n+\t(find_taken_edge): Accept nothing but INTEGER_CST.\n+\t(find_taken_edge_cond_expr): Reject INTEGER_CST other than 0\n+\tand 1.\n+\t(find_taken_edge_switch_expr): Remove a check for INTEGER_CST.\n+\n 2005-02-21  Jeff Law  <law@redhat.com>\n \n \t* cfganal.c (find_unreachable_blocks): Manually CSE load of"}, {"sha": "9e87dbfccb00941078893d38c58692f2cc33239b", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fca01525bf39af39d545094e75cb72276f46013c/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fca01525bf39af39d545094e75cb72276f46013c/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=fca01525bf39af39d545094e75cb72276f46013c", "patch": "@@ -440,6 +440,29 @@ create_bb (void *h, void *e, basic_block after)\n \t\t\t\t Edge creation\n ---------------------------------------------------------------------------*/\n \n+/* Fold COND_EXPR_COND of each COND_EXPR.  */\n+\n+static void\n+fold_cond_expr_cond (void)\n+{\n+  basic_block bb;\n+\n+  FOR_EACH_BB (bb)\n+    {\n+      tree stmt = last_stmt (bb);\n+\n+      if (stmt\n+\t  && TREE_CODE (stmt) == COND_EXPR)\n+\t{\n+\t  tree cond = fold (COND_EXPR_COND (stmt));\n+\t  if (integer_zerop (cond))\n+\t    COND_EXPR_COND (stmt) = integer_zero_node;\n+\t  else if (integer_onep (cond))\n+\t    COND_EXPR_COND (stmt) = integer_one_node;\n+\t}\n+    }\n+}\n+\n /* Join all the blocks in the flowgraph.  */\n \n static void\n@@ -478,6 +501,9 @@ make_edges (void)\n      builder inserted for completeness.  */\n   remove_fake_exit_edges ();\n \n+  /* Fold COND_EXPR_COND of each COND_EXPR.  */\n+  fold_cond_expr_cond ();\n+\n   /* Clean up the graph and warn for unreachable code.  */\n   cleanup_tree_cfg ();\n }\n@@ -2198,14 +2224,7 @@ find_taken_edge (basic_block bb, tree val)\n   gcc_assert (is_ctrl_stmt (stmt));\n   gcc_assert (val);\n \n-  /* If VAL is a predicate of the form N RELOP N, where N is an\n-     SSA_NAME, we can usually determine its truth value.  */\n-  if (COMPARISON_CLASS_P (val))\n-    val = fold (val);\n-\n-  /* If VAL is not a constant, we can't determine which edge might\n-     be taken.  */\n-  if (!really_constant_p (val))\n+  if (TREE_CODE (val) != INTEGER_CST)\n     return NULL;\n \n   if (TREE_CODE (stmt) == COND_EXPR)\n@@ -2237,12 +2256,12 @@ find_taken_edge_cond_expr (basic_block bb, tree val)\n     return true_edge;\n   else if (integer_zerop (val))\n     return false_edge;\n-  else\n-    return NULL;\n+\n+  gcc_unreachable ();\n }\n \n \n-/* Given a constant value VAL and the entry block BB to a SWITCH_EXPR\n+/* Given an INTEGER_CST VAL and the entry block BB to a SWITCH_EXPR\n    statement, determine which edge will be taken out of the block.  Return\n    NULL if any edge may be taken.  */\n \n@@ -2253,9 +2272,6 @@ find_taken_edge_switch_expr (basic_block bb, tree val)\n   basic_block dest_bb;\n   edge e;\n \n-  if (TREE_CODE (val) != INTEGER_CST)\n-    return NULL;\n-\n   switch_expr = last_stmt (bb);\n   taken_case = find_case_label_for_value (switch_expr, val);\n   dest_bb = label_to_block (CASE_LABEL (taken_case));"}]}