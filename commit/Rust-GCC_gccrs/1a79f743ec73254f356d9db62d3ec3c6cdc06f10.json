{"sha": "1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWE3OWY3NDNlYzczMjU0ZjM1NmQ5ZGI2MmQzZWMzYzZjZGMwNmYxMA==", "commit": {"author": {"name": "Bob Wilson", "email": "bob.wilson@acm.org", "date": "2007-11-29T02:50:46Z"}, "committer": {"name": "Bob Wilson", "email": "bwilson@gcc.gnu.org", "date": "2007-11-29T02:50:46Z"}, "message": "target-supports.exp (check_effective_target_mips_soft_float): Delete.\n\n\t* lib/target-supports.exp (check_effective_target_mips_soft_float):\n\tDelete.\n\t(check_effective_target_hard_float): New.\n\t* gcc.dg/var-expand1.c: Skip for targets without FPU instructions.\n\t* gcc.dg/pr30957-1.c: Likewise.\n\nFrom-SVN: r130509", "tree": {"sha": "28085564c9407678cdd894587ae74410ab4118d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/28085564c9407678cdd894587ae74410ab4118d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/comments", "author": null, "committer": null, "parents": [{"sha": "20c8e40d2544735e6fdd34f45877a94474d7ddf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20c8e40d2544735e6fdd34f45877a94474d7ddf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20c8e40d2544735e6fdd34f45877a94474d7ddf1"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "f5090210c1c15665dd561e9d035be82a32fe059c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "patch": "@@ -1,3 +1,11 @@\n+2007-11-28  Bob Wilson  <bob.wilson@acm.org>\n+\t\n+\t* lib/target-supports.exp (check_effective_target_mips_soft_float):\n+\tDelete.\n+\t(check_effective_target_hard_float): New.\n+\t* gcc.dg/var-expand1.c: Skip for targets without FPU instructions.\n+\t* gcc.dg/pr30957-1.c: Likewise.\n+\t\n 2007-11-28  Samuel Tardieu  <sam@rfc1149.net>\n \n \tPR ada/15803"}, {"sha": "5600ee9ee777128aceddb9652fc7f90168c9a95d", "filename": "gcc/testsuite/gcc.dg/pr30957-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c?ref=1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run { xfail vax-*-* powerpc-*-*spe } } */\n /* We don't (and don't want to) perform this optimisation on soft-float\n-   MIPS targets, where each addition is a library call.  */\n-/* { dg-skip-if \"\" { mips_soft_float } { \"*\" } { \"\" } } */\n+   targets, where each addition is a library call.  */\n+/* { dg-require-effective-target hard_float } */\n /* { dg-options \"-O2 -funroll-loops -funsafe-math-optimizations -fvariable-expansion-in-unroller -dL\" } */\n \n extern void abort (void);"}, {"sha": "707e346d63b49d49ac29b6e6ca72ad05c32f0f3c", "filename": "gcc/testsuite/gcc.dg/var-expand1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvar-expand1.c?ref=1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do compile } */\n /* We don't (and don't want to) perform this optimisation on soft-float\n-   MIPS targets, where each addition is a library call.  */\n-/* { dg-skip-if \"\" { mips_soft_float } { \"*\" } { \"\" } } */\n+   targets, where each addition is a library call.  */\n+/* { dg-require-effective-target hard_float } */\n /* { dg-options \"-O2 -funroll-loops --fast-math -fvariable-expansion-in-unroller -dL\" } */\n \n extern void abort (void);"}, {"sha": "2cd9165518f7e46bb1fa649ba13ed638ed31faf0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a79f743ec73254f356d9db62d3ec3c6cdc06f10/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=1a79f743ec73254f356d9db62d3ec3c6cdc06f10", "patch": "@@ -615,12 +615,13 @@ proc check_effective_target_mpaired_single { } {\n     } \"-mpaired-single\"]\n }\n \n-# Return true if we're testing a MIPS target that does not have access\n-# to FPU instructions.\n+# Return true if the target has access to FPU instructions.\n \n-proc check_effective_target_mips_soft_float { } {\n-    return [check_no_compiler_messages mips_soft_float assembly {\n-\t#if !defined (__mips_soft_float) && !defined (__mips16)\n+proc check_effective_target_hard_float { } {\n+    return [check_no_compiler_messages hard_float assembly {\n+\t#if ((defined __mips \\\n+\t      && (defined __mips_soft_float || defined __mips16)) \\\n+\t     || (defined __xtensa__ && defined __XTENSA_SOFT_FLOAT__))\n \t#error FOO\n \t#endif\n     }]"}]}