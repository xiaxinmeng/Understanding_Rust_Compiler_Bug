{"sha": "58b1581b23694181ffde4cea00c941727379d050", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThiMTU4MWIyMzY5NDE4MWZmZGU0Y2VhMDBjOTQxNzI3Mzc5ZDA1MA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-26T05:51:04Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-10-26T05:51:04Z"}, "message": "(emit_reload_insns): If not -O, Don't try find_equiv_reg.\n\n(choose_reload_regs): If not -O, don't inherit reloads.\n\nFrom-SVN: r2607", "tree": {"sha": "bbbb3ef4fab551c86480bb4a030b999313a8fda1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bbbb3ef4fab551c86480bb4a030b999313a8fda1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58b1581b23694181ffde4cea00c941727379d050", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b1581b23694181ffde4cea00c941727379d050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58b1581b23694181ffde4cea00c941727379d050", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58b1581b23694181ffde4cea00c941727379d050/comments", "author": null, "committer": null, "parents": [{"sha": "37548fa3f38cafca60e654671cec44c2ae93283b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37548fa3f38cafca60e654671cec44c2ae93283b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37548fa3f38cafca60e654671cec44c2ae93283b"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "88c5e6dd2e344255400e2bb2ee0e86adef50d20b", "filename": "gcc/reload1.c", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58b1581b23694181ffde4cea00c941727379d050/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58b1581b23694181ffde4cea00c941727379d050/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=58b1581b23694181ffde4cea00c941727379d050", "patch": "@@ -4288,9 +4288,13 @@ choose_reload_regs (insn, avoid_return_reg)\n   COPY_HARD_REG_SET (save_reload_reg_used_in_op_addr,\n \t\t     reload_reg_used_in_op_addr);\n \n-  /* Try first with inheritance, then turning it off.  */\n+  /* If -O, try first with inheritance, then turning it off.\n+     If not -O, don't do inheritance.\n+     Using inheritance when not optimizing leads to paradoxes\n+     with fp on the 68k: fp numbers (not NaNs) fail to be equal to themselves\n+     because one side of the comparison might be inherited.  */\n \n-  for (inheritance = 1; inheritance >= 0; inheritance--)\n+  for (inheritance = optimize > 0; inheritance >= 0; inheritance--)\n     {\n       /* Process the reloads in order of preference just found.\n \t Beyond this point, subregs can be found in reload_reg_rtx.\n@@ -4763,7 +4767,8 @@ emit_reload_insns (insn)\n \t     register.  */\n \n \t  if (reload_secondary_reload[j] >= 0\n-\t      && reload_secondary_icode[j] == CODE_FOR_nothing)\n+\t      && reload_secondary_icode[j] == CODE_FOR_nothing\n+\t      && optimize)\n \t    oldequiv\n \t      = find_equiv_reg (old, insn,\n \t\t\t\treload_reg_class[reload_secondary_reload[j]],\n@@ -4778,7 +4783,7 @@ emit_reload_insns (insn)\n \t     or has yet to be emitted, in which case it doesn't matter\n \t     because we will use this equiv reg right away.  */\n \n-\t  if (oldequiv == 0\n+\t  if (oldequiv == 0 && optimize\n \t      && (GET_CODE (old) == MEM\n \t\t  || (GET_CODE (old) == REG\n \t\t      && REGNO (old) >= FIRST_PSEUDO_REGISTER"}]}