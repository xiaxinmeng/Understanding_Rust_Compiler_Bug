{"sha": "b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1OGUyNjNlMGQ3NGNhMWY3NmFlYWFjNWY0ZDFhYmVmNmIxMzcwNw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-19T02:28:26Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2021-02-19T02:28:26Z"}, "message": "jit: fix ICE on BUILT_IN_TRAP [PR99126]\n\ngcc/jit/ChangeLog:\n\tPR jit/99126\n\t* jit-builtins.c\n\t(gcc::jit::builtins_manager::get_builtin_function_by_id):\n\tUpdate assertion to reject BUILT_IN_NONE.\n\t(gcc::jit::builtins_manager::ensure_optimization_builtins_exist):\n\tNew.\n\t* jit-builtins.h\n\t(gcc::jit::builtins_manager::ensure_optimization_builtins_exist):\n\tNew decl.\n\t* jit-playback.c (gcc::jit::playback::context::replay): Call it.\n\tRemove redundant conditional on bm.\n\ngcc/testsuite/ChangeLog:\n\tPR jit/99126\n\t* jit.dg/test-trap.c: New test.", "tree": {"sha": "10ba2366bcfa77c851197f56f429d4f3ba921b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/10ba2366bcfa77c851197f56f429d4f3ba921b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187d0d5871b1fa572b0238b4989fa067df56778f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/187d0d5871b1fa572b0238b4989fa067df56778f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/187d0d5871b1fa572b0238b4989fa067df56778f"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "1ea96f4e0253f45e78364d86a9cb653d33b1e697", "filename": "gcc/jit/jit-builtins.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.c?ref=b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "patch": "@@ -162,7 +162,7 @@ builtins_manager::get_builtin_function (const char *name)\n recording::function *\n builtins_manager::get_builtin_function_by_id (enum built_in_function builtin_id)\n {\n-  gcc_assert (builtin_id >= 0);\n+  gcc_assert (builtin_id > BUILT_IN_NONE);\n   gcc_assert (builtin_id < END_BUILTINS);\n \n   /* Lazily build the functions, caching them so that repeated calls for\n@@ -600,6 +600,18 @@ builtins_manager::make_ptr_type (enum jit_builtin_type,\n   return base_type->get_pointer ();\n }\n \n+/* Ensure that builtins that could be needed during optimization\n+   get created ahead of time.  */\n+\n+void\n+builtins_manager::ensure_optimization_builtins_exist ()\n+{\n+  /* build_common_builtin_nodes does most of this, but not all.\n+     We can't loop through all of the builtin_data array, we don't\n+     support all types yet.  */\n+  (void)get_builtin_function_by_id (BUILT_IN_TRAP);\n+}\n+\n /* Playback support.  */\n \n /* A builtins_manager is associated with a recording::context"}, {"sha": "c5e2b2dd6007428ceff7ffe2fa6d3a07bd7dce93", "filename": "gcc/jit/jit-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-builtins.h?ref=b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "patch": "@@ -127,6 +127,9 @@ class builtins_manager\n   tree\n   get_attrs_tree (enum built_in_attribute attr);\n \n+  void\n+  ensure_optimization_builtins_exist ();\n+\n   void\n   finish_playback (void);\n "}, {"sha": "c613630124304a9186ac5e30bb1c687157979df2", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "patch": "@@ -2949,6 +2949,11 @@ replay ()\n   /* Replay the recorded events:  */\n   timevar_push (TV_JIT_REPLAY);\n \n+  /* Ensure that builtins that could be needed during optimization\n+     get created ahead of time.  */\n+  builtins_manager *bm = m_recording_ctxt->get_builtins_manager ();\n+  bm->ensure_optimization_builtins_exist ();\n+\n   m_recording_ctxt->replay_into (this);\n \n   /* Clean away the temporary references from recording objects\n@@ -2957,13 +2962,11 @@ replay ()\n      refs.  Hence we must stop using them before the GC can run.  */\n   m_recording_ctxt->disassociate_from_playback ();\n \n-  /* The builtins_manager, if any, is associated with the recording::context\n+  /* The builtins_manager is associated with the recording::context\n      and might be reused for future compiles on other playback::contexts,\n      but its m_attributes array is not GTY-labeled and hence will become\n      nonsense if the GC runs.  Purge this state.  */\n-  builtins_manager *bm = get_builtins_manager ();\n-  if (bm)\n-    bm->finish_playback ();\n+  bm->finish_playback ();\n \n   timevar_pop (TV_JIT_REPLAY);\n "}, {"sha": "4eb65cd14c1466ce1685845e6c3e81ada3deed22", "filename": "gcc/testsuite/jit.dg/test-trap.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Ftestsuite%2Fjit.dg%2Ftest-trap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b258e263e0d74ca1f76aeaac5f4d1abef6b13707/gcc%2Ftestsuite%2Fjit.dg%2Ftest-trap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-trap.c?ref=b258e263e0d74ca1f76aeaac5f4d1abef6b13707", "patch": "@@ -0,0 +1,59 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <stddef.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+\n+     void\n+     test_trap (void)\n+     {\n+       *((int *)0) = 42;\n+     }\n+  */\n+  gcc_jit_type *void_type\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_VOID);\n+  gcc_jit_type *int_type\n+    = gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *int_ptr_type\n+    = gcc_jit_type_get_pointer (int_type);\n+\n+  /* Build the test_fn.  */\n+  gcc_jit_function *func\n+    = gcc_jit_context_new_function (ctxt, NULL,\n+\t\t\t\t    GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t    void_type,\n+\t\t\t\t    \"test_trap\",\n+\t\t\t\t    0, NULL,\n+\t\t\t\t    0);\n+\n+  gcc_jit_block *initial = gcc_jit_function_new_block (func, \"initial\");\n+\n+  gcc_jit_rvalue *null_ptr\n+    = gcc_jit_context_new_rvalue_from_ptr (ctxt, int_ptr_type, NULL);\n+\n+  /* \"*((int *)0) = 42;\" */\n+  gcc_jit_block_add_assignment (\n+    initial, NULL,\n+    gcc_jit_rvalue_dereference (null_ptr, NULL),\n+    gcc_jit_context_new_rvalue_from_int (ctxt, int_type, 42));\n+\n+  gcc_jit_block_end_with_void_return (initial, NULL);\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef void (*fn_type) (void);\n+  CHECK_NON_NULL (result);\n+  fn_type test_array =\n+    (fn_type)gcc_jit_result_get_code (result, \"test_trap\");\n+  CHECK_NON_NULL (test_array);\n+  /* Don't attempt to call it.  */\n+}"}]}