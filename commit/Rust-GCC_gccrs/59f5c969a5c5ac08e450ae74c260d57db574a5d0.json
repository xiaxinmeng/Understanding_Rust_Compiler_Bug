{"sha": "59f5c969a5c5ac08e450ae74c260d57db574a5d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmNWM5NjlhNWM1YWMwOGU0NTBhZTc0YzI2MGQ1N2RiNTc0YTVkMA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2014-01-20T10:29:09Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2014-01-20T10:29:09Z"}, "message": "decl.c (gnat_to_gnu_entity): Remove obsolete code for type_annotate_only mode...\n\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Component>: Remove\n\tobsolete code for type_annotate_only mode, simplify code and slightly\n\timprove wording of comments.\n\nFrom-SVN: r206794", "tree": {"sha": "dcc064d96f4f7e1da1b454bb6466873d8b32b50f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dcc064d96f4f7e1da1b454bb6466873d8b32b50f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f5c969a5c5ac08e450ae74c260d57db574a5d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f5c969a5c5ac08e450ae74c260d57db574a5d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f5c969a5c5ac08e450ae74c260d57db574a5d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f5c969a5c5ac08e450ae74c260d57db574a5d0/comments", "author": null, "committer": null, "parents": [{"sha": "621955cb7cc891dc7504523d7cac10e0ec8c17e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/621955cb7cc891dc7504523d7cac10e0ec8c17e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/621955cb7cc891dc7504523d7cac10e0ec8c17e7"}], "stats": {"total": 62, "additions": 22, "deletions": 40}, "files": [{"sha": "357f1c4be97381afb28da5b0662f9e9d11002160", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f5c969a5c5ac08e450ae74c260d57db574a5d0/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f5c969a5c5ac08e450ae74c260d57db574a5d0/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=59f5c969a5c5ac08e450ae74c260d57db574a5d0", "patch": "@@ -1,3 +1,9 @@\n+2014-01-20  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity) <case E_Component>: Remove\n+\tobsolete code for type_annotate_only mode, simplify code and slightly\n+\timprove wording of comments.\n+\n 2014-01-12  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR ada/59772"}, {"sha": "9e1ecb0a23746b09ef4ee79b897f8f7e6af5bbf0", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f5c969a5c5ac08e450ae74c260d57db574a5d0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f5c969a5c5ac08e450ae74c260d57db574a5d0/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=59f5c969a5c5ac08e450ae74c260d57db574a5d0", "patch": "@@ -491,19 +491,17 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t run-time library.  */\n       goto object;\n \n-    case E_Discriminant:\n     case E_Component:\n+    case E_Discriminant:\n       {\n \t/* The GNAT record where the component was defined.  */\n \tEntity_Id gnat_record = Underlying_Type (Scope (gnat_entity));\n \n-\t/* If the variable is an inherited record component (in the case of\n-\t   extended record types), just return the inherited entity, which\n-\t   must be a FIELD_DECL.  Likewise for discriminants.\n-\t   For discriminants of untagged records which have explicit\n-\t   stored discriminants, return the entity for the corresponding\n-\t   stored discriminant.  Also use Original_Record_Component\n-\t   if the record has a private extension.  */\n+\t/* If the entity is an inherited component (in the case of extended\n+\t   tagged record types), just return the original entity, which must\n+\t   be a FIELD_DECL.  Likewise for discriminants.  If the entity is a\n+\t   non-girder discriminant (in the case of derived untagged record\n+\t   types), return the stored discriminant it renames.  */\n \tif (Present (Original_Record_Component (gnat_entity))\n \t    && Original_Record_Component (gnat_entity) != gnat_entity)\n \t  {\n@@ -514,45 +512,23 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \t    break;\n \t  }\n \n-\t/* If the enclosing record has explicit stored discriminants,\n-\t   then it is an untagged record.  If the Corresponding_Discriminant\n-\t   is not empty then this must be a renamed discriminant and its\n-\t   Original_Record_Component must point to the corresponding explicit\n-\t   stored discriminant (i.e. we should have taken the previous\n-\t   branch).  */\n-\telse if (Present (Corresponding_Discriminant (gnat_entity))\n-\t\t && Is_Tagged_Type (gnat_record))\n+\t/* If this is a discriminant of an extended tagged type used to rename\n+\t   a discriminant of the parent type, return the latter.  */\n+\telse if (Present (Corresponding_Discriminant (gnat_entity)))\n \t  {\n-\t    /* A tagged record has no explicit stored discriminants.  */\n-\t    gcc_assert (First_Discriminant (gnat_record)\n-\t\t       == First_Stored_Discriminant (gnat_record));\n+\t    /* If the derived type is untagged, then this is a non-girder\n+\t       discriminant and its Original_Record_Component must point to\n+\t       the stored discriminant it renames (i.e. we should have taken\n+\t       the previous branch).  */\n+\t    gcc_assert (Is_Tagged_Type (gnat_record));\n+\n \t    gnu_decl\n \t      = gnat_to_gnu_entity (Corresponding_Discriminant (gnat_entity),\n \t\t\t\t    gnu_expr, definition);\n \t    saved = true;\n \t    break;\n \t  }\n \n-\telse if (Present (CR_Discriminant (gnat_entity))\n-\t\t && type_annotate_only)\n-\t  {\n-\t    gnu_decl = gnat_to_gnu_entity (CR_Discriminant (gnat_entity),\n-\t\t\t\t\t   gnu_expr, definition);\n-\t    saved = true;\n-\t    break;\n-\t  }\n-\n-\t/* If the enclosing record has explicit stored discriminants, then\n-\t   it is an untagged record.  If the Corresponding_Discriminant\n-\t   is not empty then this must be a renamed discriminant and its\n-\t   Original_Record_Component must point to the corresponding explicit\n-\t   stored discriminant (i.e. we should have taken the first\n-\t   branch).  */\n-\telse if (Present (Corresponding_Discriminant (gnat_entity))\n-\t\t && (First_Discriminant (gnat_record)\n-\t\t     != First_Stored_Discriminant (gnat_record)))\n-\t  gcc_unreachable ();\n-\n \t/* Otherwise, if we are not defining this and we have no GCC type\n \t   for the containing record, make one for it.  Then we should\n \t   have made our own equivalent.  */\n@@ -586,7 +562,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, int definition)\n \telse\n \t  /* Here we have no GCC type and this is a reference rather than a\n \t     definition.  This should never happen.  Most likely the cause is\n-\t     reference before declaration in the gnat tree for gnat_entity.  */\n+\t     reference before declaration in the GNAT tree for gnat_entity.  */\n \t  gcc_unreachable ();\n       }\n "}]}