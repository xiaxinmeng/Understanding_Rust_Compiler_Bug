{"sha": "8a8e515c2bf1a48117f463a949174c666932711b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE4ZTUxNWMyYmYxYTQ4MTE3ZjQ2M2E5NDkxNzRjNjY2OTMyNzExYg==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-27T12:23:15Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-01-28T14:18:17Z"}, "message": "aarch64: Use RTL builtins for [su]mlsl_n intrinsics\n\nRewrite [su]mlsl_n Neon intrinsics to use RTL builtins rather than\ninline assembly code, allowing for better scheduling and\noptimization.\n\ngcc/ChangeLog:\n\n2021-01-27  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Add [su]mlsl_n\n\tbuiltin generator macros.\n\t* config/aarch64/aarch64-simd.md (aarch64_<su>mlsl_n<mode>):\n\tDefine.\n\t* config/aarch64/arm_neon.h (vmlsl_n_s16): Use RTL builtin\n\tinstead of inline asm.\n\t(vmlsl_n_s32): Likewise.\n\t(vmlsl_n_u16): Likewise.\n\t(vmlsl_n_u32): Likewise.", "tree": {"sha": "da3915d826838fa9f1cae97b5ca8e69e085d37b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da3915d826838fa9f1cae97b5ca8e69e085d37b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a8e515c2bf1a48117f463a949174c666932711b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8e515c2bf1a48117f463a949174c666932711b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a8e515c2bf1a48117f463a949174c666932711b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a8e515c2bf1a48117f463a949174c666932711b/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff119f340e427bd6db8ce66719030fb78a99ded6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff119f340e427bd6db8ce66719030fb78a99ded6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff119f340e427bd6db8ce66719030fb78a99ded6"}], "stats": {"total": 47, "additions": 23, "deletions": 24}, "files": [{"sha": "cb79c08ba66df817e289d891b206ea7f66c81527", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=8a8e515c2bf1a48117f463a949174c666932711b", "patch": "@@ -198,6 +198,10 @@\n   BUILTIN_VD_BHSI (TERNOP, smlsl, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlsl, 0, NONE)\n \n+  /* Implemented by aarch64_<su>mlsl_n<mode>.  */\n+  BUILTIN_VD_HSI (TERNOP, smlsl_n, 0, NONE)\n+  BUILTIN_VD_HSI (TERNOPU, umlsl_n, 0, NONE)\n+\n   /* Implemented by aarch64_<su>mlal<mode>.  */\n   BUILTIN_VD_BHSI (TERNOP, smlal, 0, NONE)\n   BUILTIN_VD_BHSI (TERNOPU, umlal, 0, NONE)"}, {"sha": "919d0b03998d893232331d6f4da5c93ae6bf41b8", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=8a8e515c2bf1a48117f463a949174c666932711b", "patch": "@@ -1961,6 +1961,21 @@\n   [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n )\n \n+(define_insn \"aarch64_<su>mlsl_n<mode>\"\n+  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n+        (minus:<VWIDE>\n+          (match_operand:<VWIDE> 1 \"register_operand\" \"0\")\n+          (mult:<VWIDE>\n+            (ANY_EXTEND:<VWIDE>\n+              (vec_duplicate:VD_HSI\n+\t              (match_operand:<VEL> 3 \"register_operand\" \"<h_con>\")))\n+            (ANY_EXTEND:<VWIDE>\n+              (match_operand:VD_HSI 2 \"register_operand\" \"w\")))))]\n+  \"TARGET_SIMD\"\n+  \"<su>mlsl\\t%0.<Vwtype>, %2.<Vtype>, %3.<Vetype>[0]\"\n+  [(set_attr \"type\" \"neon_mla_<Vetype>_long\")]\n+)\n+\n (define_insn \"aarch64_simd_vec_<su>mult_lo_<mode>\"\n  [(set (match_operand:<VWIDE> 0 \"register_operand\" \"=w\")\n        (mult:<VWIDE> (ANY_EXTEND:<VWIDE> (vec_select:<VHALF>"}, {"sha": "b56ab68aad57afb97447c9f5d24f392f6e2b618b", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 4, "deletions": 24, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a8e515c2bf1a48117f463a949174c666932711b/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=8a8e515c2bf1a48117f463a949174c666932711b", "patch": "@@ -8184,48 +8184,28 @@ __extension__ extern __inline int32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_n_s16 (int32x4_t __a, int16x4_t __b, int16_t __c)\n {\n-  int32x4_t __result;\n-  __asm__ (\"smlsl %0.4s, %2.4h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlsl_nv4hi (__a, __b, __c);\n }\n \n __extension__ extern __inline int64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_n_s32 (int64x2_t __a, int32x2_t __b, int32_t __c)\n {\n-  int64x2_t __result;\n-  __asm__ (\"smlsl %0.2d, %2.2s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_smlsl_nv2si (__a, __b, __c);\n }\n \n __extension__ extern __inline uint32x4_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_n_u16 (uint32x4_t __a, uint16x4_t __b, uint16_t __c)\n {\n-  uint32x4_t __result;\n-  __asm__ (\"umlsl %0.4s, %2.4h, %3.h[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"x\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlsl_nv4hi_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline uint64x2_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vmlsl_n_u32 (uint64x2_t __a, uint32x2_t __b, uint32_t __c)\n {\n-  uint64x2_t __result;\n-  __asm__ (\"umlsl %0.2d, %2.2s, %3.s[0]\"\n-           : \"=w\"(__result)\n-           : \"0\"(__a), \"w\"(__b), \"w\"(__c)\n-           : /* No clobbers */);\n-  return __result;\n+  return __builtin_aarch64_umlsl_nv2si_uuuu (__a, __b, __c);\n }\n \n __extension__ extern __inline int16x8_t"}]}