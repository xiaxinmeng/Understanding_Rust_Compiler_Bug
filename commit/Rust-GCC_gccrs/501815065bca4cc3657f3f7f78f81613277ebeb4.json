{"sha": "501815065bca4cc3657f3f7f78f81613277ebeb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTAxODE1MDY1YmNhNGNjMzY1N2YzZjdmNzhmODE2MTMyNzdlYmViNA==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-01T14:43:02Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2017-03-01T14:43:02Z"}, "message": "re PR target/79395 (Compile error with -mcpu=power9 and __builtin_vec_vcmpne_p)\n\ngcc/ChangeLog:\n\n2017-03-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/79395\n\t* config/rs6000/altivec.h (vec_ctz and others): Change the\n\tpreprocessor macro that controls conditional compilation from\n\t_ARCH_PWR9 to __POWER9_VECTOR__.\n\t(vec_all_ne): Change parameterization of __altivec_scalar_pred\n\tmacro expansion under preprocessor #ifdef __POWER9_VECTOR__\n\tcontrol (instead of _ARCH_PWR9 control) so that template\n\tdefinition uses power9-specific function.\n\t(vec_any_eq): Likewise.\n\t(vec_all_ne): Change macro definition to use a power9-specific\n\texpansion under #ifdef __POWER9_VECTOR__ control (instead of\n\t_ARCH_PWR9 control).\n\t(vec_any_eq) Likewise.\n\t* config/rs6000/rs6000-builtin.def (CMPNEF): Remove BU_P9V_AV_2\n\texpansion for CMPNEF to remove support for xvcmpnesp instruction.\n\t(CMPNED): Remove BU_P9V_AV2 expansion for CMPNED to remove\n\tsupport for xvcmpnedp instruction.\n\t(VCMPNEB_P): Replace BU_P9V_AV_P macro expansion with BU_P9V_AV_2\n\tmacro expansion so that Power9 implementation of vec_all_ne does\n\tnot use the AltiVec predicate framework.\n\t(VCMPNEH_P): Likewise.\n\t(VCMPNEW_P): Likewise.\n\t(VCMPNED_P): Likewise.\n\t(VCMPNEFP_P): Likewise.\n\t(VCMPNEDP_P): Likewise.\n\t(VCMPAEB_P): Add BU_P9V_AV_2 macro expansion to change\n\timplementation of vec_any_eq to not use AltiVec predicate\n\tframework.\n\t(VCMPAEH_P): Likewise.\n\t(VCMPAEW_P): Likewise.\n\t(VCMPAED_P): Likewise.\n\t(VCMPAEFP_P): Likewise.\n\t(VCMPAEDP_P): Likewise.\n\t(VCMPNE_P): Replace BU_P9V_OVERLOAD_P macro expansion with\n\tBU_P9V_OVERLOAD_2 so that Power9 implementation of vec_all_ne does\n\tnot use the AltiVec predicate framework.\n\t(VCMPAE_P): Add BU_P9V_OVERLOAD_2 macro to change implementation\n\tof vec_any_eq to not use AltiVec predicate framework.\n\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Add\n\tsupport for predefined __POWER9_VECTOR__ macro to indicate that\n\tPower9 instruction selection is enabled.\n\t(altivec_overloaded_builtins): Remove extraneous\n\tALTIVEC_BUILTIN_VEC_CMPNE entry for overloaded\n\tfunction argument types RS6000_BTI_bool_V16QI and\n\tRS6000_BTI_bool_V16QI.  Remove erroneous ALTIVEC_BUILTIN_VEC_CMPNE\n\tentry for overloaded function argument types RS6000_BTI_bool_V4SI\n\tandRS6000_BTI_bool_V4SI, mapping to P9V_BUILTIN_CMPNEB.  Remove\n\ttwo entries mapping to P9V_BUITIN_CMPNED and one entry mapping to\n\tP9V_BUILTIN_CMPNEF to force use of instructions not specific to\n\tPower9 for implementations of vec_cmpne.  Change the signature for\n\tall definitions of the overloaded P9V_BUILTIN_VEC_CMPNE_P function\n\t(representing vec_all_ne) to remove the previously described first\n\targument of type RS6000_BTI_INTSI, as this was an artifact of\n\treliance on the AltiVec predicate framework, which is no longer\n\tused in the implementation of these functions.  Add\n\tP9V_BUILTIN_VEC_VCMPAE_P entries (representing the vec_anyeq\n\tfunction) to match all of the P9V_BUILTIN_VEC_VCMNE_P entries\n\tsince, unlike the AltiVec predicate framework implementation, we\n\tdo not share function descriptors between vec_alle and vec_anyeq.\n\t(altivec_resolve_overloaded_builtin): Add SFmode and DFmode to the\n\tset of modes that receive special treatment even when\n\tTARGET_P9_VECTOR is true.  The special treatment emits code that\n\tdoes not depend on Power9 instructions.\n\t* config/rs6000/vector.md (vector_ne_<mode>_p): Change this\n\tdefine_expand to not rely on AltiVec predicate framework.\n\t(vector_ae_<mode>p): New define_expand to represent vec_any_eq\n\tfunction.\n\t(vector_ne_v2di_p): Change this define_expand to not rely on\n\tAltiVec predicate framework.\n\t(vector_ae_v2di_p): New define_expand to represent vec_any_eq\n\tfunction.\n\t(vector_ne_<mode>_p): Change this define_expand to not rely on\n\tAltiVec predicate framework.\n\t(vector_ae_<mode>p): New define_expand to represent vec_any_eq\n\tfunction.\n\t* config/rs6000/vsx.md (*vsx_ne_<mode>_p): For modes VSX_EXTRACT_I\n\t(V16QI, V8HI, V4SI), correct a typo in the code emitted for this\n\tdefine_insn pattern.\n\t(*vsx_ne_<mode>_p): For modes VSX_F (V4SF and V2DF), remove this\n\tdefine_insn pattern because the xvcmpne<VSs>. instruction is not\n\tsupported.\n\t(vcmpne<VSs>): Remove this define_insn because xvcmpne<VSs>\n\tinstruction is not supported.\n\ngcc/testsuite/ChangeLog:\n\n2017-03-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\tPR target/79395\n\t* gcc.target/powerpc/vsu/vec-all-ne-10.c: Change scan-assembler\n\tpattern to look for vcmpequd. instead of vcmpnew.\n\t* gcc.target/powerpc/vsu/vec-all-ne-14.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-all-ne-7.c: Change scan-assembler\n\tpattern to look for xvcmpeqsp. instead of xvcmpnesp.\n\t* gcc.target/powerpc/vsu/vec-all-ne-8.c: Change scan-assembler to\n\tlook for xvcmpeqdp. instead of xvcmpnedp.\n\t* gcc.target/powerpc/vsu/vec-all-ne-9.c: Change scan-assembler to\n\tlook for vcmpequd. instead of vcmpnew.\n\t* gcc.target/powerpc/vsu/vec-any-eq-10.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-any-eq-14.c: Likewise.\n\t* gcc.target/powerpc/vsu/vec-any-eq-7.c: Change scan-assembler to\n\tlook for xvcmpeqsp. instead of xvcmpnesp.\n\t* gcc.target/powerpc/vsu/vec-any-eq-8.c: Change scan-assembler to\n\tlook for xvcmpeqdp. instead of xvcmpnedp.\n\t* gcc.target/powerpc/vsu/vec-any-eq-9.c: Change scan-assembler to\n\tlook for vcmpequd. instead of vcmpnew.\n\t* gcc.target/powerpc/vsu/vec-cmpne-8.c: Change scan-assembler to\n\tlook for vcmpeqsp instead of xvcmpnesp.\n\t* gcc.target/powerpc/vsu/vec-cmpne-9.c: Change scan-assembler to\n\tlook for xvcmpeqdp instead of xvcmpnedp.\n\nFrom-SVN: r245811", "tree": {"sha": "06693c72af542ea7fb5f37a9a3513d90994c38ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06693c72af542ea7fb5f37a9a3513d90994c38ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/501815065bca4cc3657f3f7f78f81613277ebeb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501815065bca4cc3657f3f7f78f81613277ebeb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/501815065bca4cc3657f3f7f78f81613277ebeb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/501815065bca4cc3657f3f7f78f81613277ebeb4/comments", "author": null, "committer": null, "parents": [{"sha": "00133e166c949e15502d4a0ffb9f55bb53a880fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00133e166c949e15502d4a0ffb9f55bb53a880fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00133e166c949e15502d4a0ffb9f55bb53a880fc"}], "stats": {"total": 591, "additions": 433, "deletions": 158}, "files": [{"sha": "febbf100946fc6144ca26499d7bdafc6a938a8b2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -1,3 +1,89 @@\n+2017-03-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/79395\n+\t* config/rs6000/altivec.h (vec_ctz and others): Change the\n+\tpreprocessor macro that controls conditional compilation from\n+\t_ARCH_PWR9 to __POWER9_VECTOR__.\n+\t(vec_all_ne): Change parameterization of __altivec_scalar_pred\n+\tmacro expansion under preprocessor #ifdef __POWER9_VECTOR__\n+\tcontrol (instead of _ARCH_PWR9 control) so that template\n+\tdefinition uses power9-specific function.\n+\t(vec_any_eq): Likewise.\n+\t(vec_all_ne): Change macro definition to use a power9-specific\n+\texpansion under #ifdef __POWER9_VECTOR__ control (instead of\n+\t_ARCH_PWR9 control).\n+\t(vec_any_eq) Likewise.\n+\t* config/rs6000/rs6000-builtin.def (CMPNEF): Remove BU_P9V_AV_2\n+\texpansion for CMPNEF to remove support for xvcmpnesp instruction.\n+\t(CMPNED): Remove BU_P9V_AV2 expansion for CMPNED to remove\n+\tsupport for xvcmpnedp instruction.\n+\t(VCMPNEB_P): Replace BU_P9V_AV_P macro expansion with BU_P9V_AV_2\n+\tmacro expansion so that Power9 implementation of vec_all_ne does\n+\tnot use the AltiVec predicate framework.\n+\t(VCMPNEH_P): Likewise.\n+\t(VCMPNEW_P): Likewise.\n+\t(VCMPNED_P): Likewise.\n+\t(VCMPNEFP_P): Likewise.\n+\t(VCMPNEDP_P): Likewise.\n+\t(VCMPAEB_P): Add BU_P9V_AV_2 macro expansion to change\n+\timplementation of vec_any_eq to not use AltiVec predicate\n+\tframework.\n+\t(VCMPAEH_P): Likewise.\n+\t(VCMPAEW_P): Likewise.\n+\t(VCMPAED_P): Likewise.\n+\t(VCMPAEFP_P): Likewise.\n+\t(VCMPAEDP_P): Likewise.\n+\t(VCMPNE_P): Replace BU_P9V_OVERLOAD_P macro expansion with\n+\tBU_P9V_OVERLOAD_2 so that Power9 implementation of vec_all_ne does\n+\tnot use the AltiVec predicate framework.\n+\t(VCMPAE_P): Add BU_P9V_OVERLOAD_2 macro to change implementation\n+\tof vec_any_eq to not use AltiVec predicate framework.\n+\t* config/rs6000/rs6000-c.c (rs6000_target_modify_macros): Add\n+\tsupport for predefined __POWER9_VECTOR__ macro to indicate that\n+\tPower9 instruction selection is enabled.\n+\t(altivec_overloaded_builtins): Remove extraneous\n+\tALTIVEC_BUILTIN_VEC_CMPNE entry for overloaded\n+\tfunction argument types RS6000_BTI_bool_V16QI and\n+\tRS6000_BTI_bool_V16QI.  Remove erroneous ALTIVEC_BUILTIN_VEC_CMPNE\n+\tentry for overloaded function argument types RS6000_BTI_bool_V4SI\n+\tandRS6000_BTI_bool_V4SI, mapping to P9V_BUILTIN_CMPNEB.  Remove\n+\ttwo entries mapping to P9V_BUITIN_CMPNED and one entry mapping to\n+\tP9V_BUILTIN_CMPNEF to force use of instructions not specific to\n+\tPower9 for implementations of vec_cmpne.  Change the signature for\n+\tall definitions of the overloaded P9V_BUILTIN_VEC_CMPNE_P function\n+\t(representing vec_all_ne) to remove the previously described first\n+\targument of type RS6000_BTI_INTSI, as this was an artifact of\n+\treliance on the AltiVec predicate framework, which is no longer\n+\tused in the implementation of these functions.  Add\n+\tP9V_BUILTIN_VEC_VCMPAE_P entries (representing the vec_anyeq\n+\tfunction) to match all of the P9V_BUILTIN_VEC_VCMNE_P entries\n+\tsince, unlike the AltiVec predicate framework implementation, we\n+\tdo not share function descriptors between vec_alle and vec_anyeq.\n+\t(altivec_resolve_overloaded_builtin): Add SFmode and DFmode to the\n+\tset of modes that receive special treatment even when\n+\tTARGET_P9_VECTOR is true.  The special treatment emits code that\n+\tdoes not depend on Power9 instructions.\n+\t* config/rs6000/vector.md (vector_ne_<mode>_p): Change this\n+\tdefine_expand to not rely on AltiVec predicate framework.\n+\t(vector_ae_<mode>p): New define_expand to represent vec_any_eq\n+\tfunction.\n+\t(vector_ne_v2di_p): Change this define_expand to not rely on\n+\tAltiVec predicate framework.\n+\t(vector_ae_v2di_p): New define_expand to represent vec_any_eq\n+\tfunction.\n+\t(vector_ne_<mode>_p): Change this define_expand to not rely on\n+\tAltiVec predicate framework.\n+\t(vector_ae_<mode>p): New define_expand to represent vec_any_eq\n+\tfunction.\n+\t* config/rs6000/vsx.md (*vsx_ne_<mode>_p): For modes VSX_EXTRACT_I\n+\t(V16QI, V8HI, V4SI), correct a typo in the code emitted for this\n+\tdefine_insn pattern.\n+\t(*vsx_ne_<mode>_p): For modes VSX_F (V4SF and V2DF), remove this\n+\tdefine_insn pattern because the xvcmpne<VSs>. instruction is not\n+\tsupported.\n+\t(vcmpne<VSs>): Remove this define_insn because xvcmpne<VSs>\n+\tinstruction is not supported.\n+\n 2017-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/nvptx/nvptx.c: Include intl.h."}, {"sha": "cd4b724bc5248bfd3eb2684112020f2caca750aa", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -390,7 +390,7 @@\n #define vec_vupklsw __builtin_vec_vupklsw\n #endif\n \n-#ifdef _ARCH_PWR9\n+#ifdef __POWER9_VECTOR__\n /* Vector additions added in ISA 3.0.  */\n #define vec_vctz __builtin_vec_vctz\n #define vec_cnttz __builtin_vec_vctz\n@@ -510,7 +510,7 @@ __altivec_unary_pred(vec_any_numeric,\n __altivec_scalar_pred(vec_all_eq,\n   __builtin_vec_vcmpeq_p (__CR6_LT, a1, a2))\n \n-#ifndef _ARCH_PWR9\n+#ifndef __POWER9_VECTOR__\n __altivec_scalar_pred(vec_all_ne,\n   __builtin_vec_vcmpeq_p (__CR6_EQ, a1, a2))\n __altivec_scalar_pred(vec_any_eq,\n@@ -521,9 +521,9 @@ __altivec_scalar_pred(vec_all_nez,\n __altivec_scalar_pred(vec_any_eqz,\n   __builtin_vec_vcmpnez_p (__CR6_LT_REV, a1, a2))\n __altivec_scalar_pred(vec_all_ne,\n-  __builtin_vec_vcmpne_p (__CR6_LT, a1, a2))\n+  __builtin_vec_allne_p (a1, a2))\n __altivec_scalar_pred(vec_any_eq,\n-  __builtin_vec_vcmpne_p (__CR6_LT_REV, a1, a2))\n+  __builtin_vec_anyeq_p (a1, a2))\n #endif\n \n __altivec_scalar_pred(vec_any_ne,\n@@ -586,11 +586,11 @@ __altivec_scalar_pred(vec_any_nle,\n \n #define vec_all_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_LT, (a1), (a2))\n \n-#ifdef _ARCH_PWR9\n+#ifdef __POWER9_VECTOR__\n #define vec_all_nez(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT, (a1), (a2))\n #define vec_any_eqz(a1, a2) __builtin_vec_vcmpnez_p (__CR6_LT_REV, (a1), (a2))\n-#define vec_all_ne(a1, a2) __builtin_vec_vcmpne_p (__CR6_LT, (a1), (a2))\n-#define vec_any_eq(a1, a2) __builtin_vec_vcmpne_p (__CR6_LT_REV, (a1), (a2))\n+#define vec_all_ne(a1, a2) __builtin_vec_vcmpne_p ((a1), (a2))\n+#define vec_any_eq(a1, a2) __builtin_vec_vcmpae_p ((a1), (a2))\n #else\n #define vec_all_ne(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ, (a1), (a2))\n #define vec_any_eq(a1, a2) __builtin_vec_vcmpeq_p (__CR6_EQ_REV, (a1), (a2))"}, {"sha": "9c856424c8d059d1c75056988083b47bafa91a47", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -2053,24 +2053,27 @@ BU_P9V_AV_1 (VCTZLSBB, \"vctzlsbb\",\t\tCONST,\tvctzlsbb)\n    new awareness of the \"vector compare not equal\" (vcmpneb, vcmpneb.,\n    vcmpneh, vcmpneh., vcmpnew, vcmpnew.) and \"vector compare\n    not equal or zero\" (vcmpnezb, vcmpnezb., vcmpnezh, vcmpnezh.,\n-   vcmpnezw, vcmpnezw.) instructions.  For consistency with existing\n-   infrastructure, this new awareness is integrated in the style of\n-   earlier implementations of the __builtin_vec_cmpne and\n-   __builtin_vec_cmpeq_p functions. */\n+   vcmpnezw, vcmpnezw.) instructions.  */\n \n BU_P9V_AV_2 (CMPNEB,\t\"vcmpneb\",\tCONST,\tvcmpneb)\n BU_P9V_AV_2 (CMPNEH,\t\"vcmpneh\",\tCONST,\tvcmpneh)\n BU_P9V_AV_2 (CMPNEW,\t\"vcmpnew\",\tCONST,\tvcmpnew)\n-BU_P9V_AV_2 (CMPNEF,\t\"vcmpnef\",\tCONST,\tvcmpnesp)\n-BU_P9V_AV_2 (CMPNED,\t\"vcmpned\",\tCONST,\tvcmpnedp)\n \n-BU_P9V_AV_P (VCMPNEB_P,\t\"vcmpneb_p\",\tCONST,\tvector_ne_v16qi_p)\n-BU_P9V_AV_P (VCMPNEH_P,\t\"vcmpneh_p\",\tCONST,\tvector_ne_v8hi_p)\n-BU_P9V_AV_P (VCMPNEW_P,\t\"vcmpnew_p\",\tCONST,\tvector_ne_v4si_p)\n-BU_P9V_AV_P (VCMPNED_P,\t\"vcmpned_p\",\tCONST,\tvector_ne_v2di_p)\n+BU_P9V_AV_2 (VCMPNEB_P,\t\"vcmpneb_p\",\tCONST,\tvector_ne_v16qi_p)\n+BU_P9V_AV_2 (VCMPNEH_P,\t\"vcmpneh_p\",\tCONST,\tvector_ne_v8hi_p)\n+BU_P9V_AV_2 (VCMPNEW_P,\t\"vcmpnew_p\",\tCONST,\tvector_ne_v4si_p)\n+BU_P9V_AV_2 (VCMPNED_P,\t\"vcmpned_p\",\tCONST,\tvector_ne_v2di_p)\n \n-BU_P9V_AV_P (VCMPNEFP_P,\t\"vcmpnefp_p\",\tCONST,\tvector_ne_v4sf_p)\n-BU_P9V_AV_P (VCMPNEDP_P,\t\"vcmpnedp_p\",\tCONST,\tvector_ne_v2df_p)\n+BU_P9V_AV_2 (VCMPNEFP_P,\t\"vcmpnefp_p\",\tCONST,\tvector_ne_v4sf_p)\n+BU_P9V_AV_2 (VCMPNEDP_P,\t\"vcmpnedp_p\",\tCONST,\tvector_ne_v2df_p)\n+\n+BU_P9V_AV_2 (VCMPAEB_P,\t\"vcmpaeb_p\",\tCONST,\tvector_ae_v16qi_p)\n+BU_P9V_AV_2 (VCMPAEH_P,\t\"vcmpaeh_p\",\tCONST,\tvector_ae_v8hi_p)\n+BU_P9V_AV_2 (VCMPAEW_P,\t\"vcmpaew_p\",\tCONST,\tvector_ae_v4si_p)\n+BU_P9V_AV_2 (VCMPAED_P,\t\"vcmpaed_p\",\tCONST,\tvector_ae_v2di_p)\n+\n+BU_P9V_AV_2 (VCMPAEFP_P,\t\"vcmpaefp_p\",\tCONST,\tvector_ae_v4sf_p)\n+BU_P9V_AV_2 (VCMPAEDP_P,\t\"vcmpaedp_p\",\tCONST,\tvector_ae_v2df_p)\n \n BU_P9V_AV_2 (CMPNEZB,\t\"vcmpnezb\",\tCONST,\tvcmpnezb)\n BU_P9V_AV_2 (CMPNEZH,\t\"vcmpnezh\",\tCONST,\tvcmpnezh)\n@@ -2095,7 +2098,8 @@ BU_P9V_OVERLOAD_3 (VINSERT4B,\t\"vinsert4b\")\n BU_P9V_OVERLOAD_2 (CMPNEZ,\t\"vcmpnez\")\n \n BU_P9V_OVERLOAD_P (VCMPNEZ_P,\t\"vcmpnez_p\")\n-BU_P9V_OVERLOAD_P (VCMPNE_P,\t\"vcmpne_p\")\n+BU_P9V_OVERLOAD_2 (VCMPNE_P,\t\"vcmpne_p\")\n+BU_P9V_OVERLOAD_2 (VCMPAE_P,\t\"vcmpae_p\")\n \n /* ISA 3.0 Vector scalar overloaded 1 argument functions */\n BU_P9V_OVERLOAD_1 (VCLZLSBB,\t\"vclzlsbb\")"}, {"sha": "0ab71a6c9e0db5c3bfc5f8c584ce846d8f506020", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 169, "deletions": 70, "changes": 239, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -391,6 +391,8 @@ rs6000_target_modify_macros (bool define_p, HOST_WIDE_INT flags,\n     }\n   if ((flags & OPTION_MASK_P8_VECTOR) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__POWER8_VECTOR__\");\n+  if ((flags & OPTION_MASK_P9_VECTOR) != 0)\n+    rs6000_define_or_undefine_macro (define_p, \"__POWER9_VECTOR__\");\n   if ((flags & OPTION_MASK_QUAD_MEMORY) != 0)\n     rs6000_define_or_undefine_macro (define_p, \"__QUAD_MEMORY__\");\n   if ((flags & OPTION_MASK_QUAD_MEMORY_ATOMIC) != 0)\n@@ -4543,9 +4545,6 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI,\n     RS6000_BTI_V16QI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n-    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI,\n-    RS6000_BTI_bool_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n@@ -4569,119 +4568,216 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n-    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI,\n-    RS6000_BTI_bool_V4SI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNED,\n-    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n-  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEF,\n-    RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n-  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNED,\n-    RS6000_BTI_bool_V2DI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n-    RS6000_BTI_unsigned_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n-    RS6000_BTI_bool_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n-    RS6000_BTI_unsigned_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n-    RS6000_BTI_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_V16QI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI,\n-    RS6000_BTI_bool_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEB_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n-    RS6000_BTI_bool_V16QI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n-    RS6000_BTI_unsigned_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n-    RS6000_BTI_bool_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n-    RS6000_BTI_unsigned_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n-    RS6000_BTI_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V8HI,\n-    RS6000_BTI_bool_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n-    RS6000_BTI_bool_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEH_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_pixel_V8HI,\n-    RS6000_BTI_pixel_V8HI },\n+    RS6000_BTI_INTSI, RS6000_BTI_pixel_V8HI,\n+    RS6000_BTI_pixel_V8HI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n-    RS6000_BTI_unsigned_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_bool_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_unsigned_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n-    RS6000_BTI_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_V4SI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI,\n-    RS6000_BTI_bool_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEW_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n-    RS6000_BTI_bool_V4SI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n-    RS6000_BTI_unsigned_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n-      RS6000_BTI_bool_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n-    RS6000_BTI_unsigned_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0\n+  },\n \n   /* The following 2 entries have been deprecated.  */\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n-    RS6000_BTI_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_V2DI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI,\n-    RS6000_BTI_bool_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNED_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n-    RS6000_BTI_bool_V2DI },\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n \n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEFP_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF },\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { P9V_BUILTIN_VEC_VCMPNE_P, P9V_BUILTIN_VCMPNEDP_P,\n-    RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF },\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEB_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V8HI,\n+    RS6000_BTI_bool_V8HI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEH_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_pixel_V8HI,\n+    RS6000_BTI_pixel_V8HI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEW_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_unsigned_V2DI,\n+    RS6000_BTI_unsigned_V2DI, 0\n+  },\n+\n+  /* The following 2 entries have been deprecated.  */\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAED_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_bool_V2DI,\n+    RS6000_BTI_bool_V2DI, 0 },\n+\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEFP_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n+  { P9V_BUILTIN_VEC_VCMPAE_P, P9V_BUILTIN_VCMPAEDP_P,\n+    RS6000_BTI_INTSI, RS6000_BTI_V2DF, RS6000_BTI_V2DF, 0 },\n \n   { P9V_BUILTIN_VEC_VCMPNEZ_P, P9V_BUILTIN_VCMPNEZB_P,\n     RS6000_BTI_INTSI, RS6000_BTI_INTSI, RS6000_BTI_unsigned_V16QI,\n@@ -5339,10 +5435,13 @@ altivec_resolve_overloaded_builtin (location_t loc, tree fndecl,\n       tree arg1_type = TREE_TYPE (arg1);\n \n       /* Power9 instructions provide the most efficient implementation of\n-\t ALTIVEC_BUILTIN_VEC_CMPNE if the mode is not DImode or TImode.  */\n+\t ALTIVEC_BUILTIN_VEC_CMPNE if the mode is not DImode or TImode\n+\t or SFmode or DFmode.  */\n       if (!TARGET_P9_VECTOR\n \t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == DImode)\n-\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == TImode))\n+\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == TImode)\n+\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == SFmode)\n+\t  || (TYPE_MODE (TREE_TYPE (arg0_type)) == DFmode))\n \t{\n \t  /* Both arguments must be vectors and the types must match.  */\n \t  if (arg0_type != arg1_type)"}, {"sha": "ef6bd14b2b1a4a71d89468937fefae6dbceacd46", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 114, "deletions": 28, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -693,19 +693,45 @@\n   \"\")\n \n ;; This expansion handles the V16QI, V8HI, and V4SI modes in the\n-;; implementation of the vec_all_ne and vec_any_eq built-in functions\n-;; on Power9.\n+;; implementation of the vec_all_ne built-in functions on Power9.\n (define_expand \"vector_ne_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n \t  (unspec:CC [(ne:CC (match_operand:VI 1 \"vlogical_operand\")\n \t\t\t     (match_operand:VI 2 \"vlogical_operand\"))]\n \t   UNSPEC_PREDICATE))\n-     (set (match_operand:VI 0 \"vlogical_operand\")\n+     (set (match_dup 4)\n \t  (ne:VI (match_dup 1)\n-\t\t (match_dup 2)))])]\n+\t\t (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))]\n   \"TARGET_P9_VECTOR\"\n-  \"\")\n+{\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+})\n+\n+;; This expansion handles the V16QI, V8HI, and V4SI modes in the\n+;; implementation of the vec_any_eq built-in functions on Power9.\n+(define_expand \"vector_ae_<mode>_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(ne:CC (match_operand:VI 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VI 2 \"vlogical_operand\"))]\n+\t   UNSPEC_PREDICATE))\n+     (set (match_dup 4)\n+\t  (ne:VI (match_dup 1)\n+\t\t (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))\n+   (set (match_dup 0)\n+\t(xor:SI (match_dup 0)\n+\t\t(const_int 1)))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+})\n \n ;; This expansion handles the V16QI, V8HI, and V4SI modes in the\n ;; implementation of the vec_all_nez and vec_any_eqz built-in\n@@ -725,41 +751,101 @@\n   \"TARGET_P9_VECTOR\"\n   \"\")\n \n-;; This expansion handles the V4DI mode in the implementation of the\n-;; vec_all_ne and vec_any_eq built-in function on Power9.\n+;; This expansion handles the V2DI mode in the implementation of the\n+;; vec_all_ne built-in function on Power9.\n ;;\n-;; Since the \"xvcmpne<mode>.\" instruction does not support DImode,\n-;; we'll use a V4SI comparison, which will set the values of the CR6\n-;; flags to be the same as if we had performed a DImode comparison.\n-;; (All of the entries in a V2DI vector are not equal iff all of the\n-;; entries in the same vector, interpeted as V4SI are not equal, and\n-;; likewise in the test for \"any equal\".)\n+;; Since the Power9 \"xvcmpne<mode>.\" instruction does not support DImode,\n+;; this expands into the same rtl that would be used for the Power8\n+;; architecture.\n (define_expand \"vector_ne_v2di_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(ne:CC (match_operand:V4SI 1 \"vlogical_operand\")\n-\t\t\t     (match_operand:V4SI 2 \"vlogical_operand\"))]\n-\t   UNSPEC_PREDICATE))\n-     (set (match_operand:V4SI 0 \"vlogical_operand\")\n-\t  (ne:V4SI (match_dup 1)\n-\t\t   (match_dup 2)))])]\n+\t  (unspec:CC [(eq:CC (match_operand:V2DI 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:V2DI 2 \"vlogical_operand\"))]\n+\t\t     UNSPEC_PREDICATE))\n+     (set (match_dup 4)\n+\t  (eq:V2DI (match_dup 1)\n+\t\t   (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))]\n   \"TARGET_P9_VECTOR\"\n-  \"\")\n+{\n+  operands[4] = gen_reg_rtx (V2DImode);\n+})\n+\n+;; This expansion handles the V2DI mode in the implementation of the\n+;; vec_any_eq built-in function on Power9.\n+;;\n+;; Since the Power9 \"xvcmpne<mode>.\" instruction does not support DImode,\n+;; this expands into the same rtl that would be used for the Power8\n+;; architecture.\n+(define_expand \"vector_ae_v2di_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(eq:CC (match_operand:V2DI 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:V2DI 2 \"vlogical_operand\"))]\n+\t\t     UNSPEC_PREDICATE))\n+     (set (match_dup 4)\n+\t  (eq:V2DI (match_dup 1)\n+\t\t   (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))\n+   (set (match_dup 0)\n+\t(xor:SI (match_dup 0)\n+\t\t(const_int 1)))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  operands[4] = gen_reg_rtx (V2DImode);\n+})\n \n ;; This expansion handles the V4SF and V2DF modes in the Power9\n-;; implementation of the vec_all_ne and vec_any_eq built-in\n-;; functions.\n+;; implementation of the vec_all_ne built-in functions.  Note that the\n+;; expansions for this pattern with these modes makes no use of power9-\n+;; specific instructions since there are no new power9 instructions\n+;; for vector compare not equal with floating point arguments.\n (define_expand \"vector_ne_<mode>_p\"\n   [(parallel\n     [(set (reg:CC CR6_REGNO)\n-\t  (unspec:CC [(ne:CC (match_operand:VEC_F 1 \"vlogical_operand\")\n+\t  (unspec:CC [(eq:CC (match_operand:VEC_F 1 \"vlogical_operand\")\n \t\t\t     (match_operand:VEC_F 2 \"vlogical_operand\"))]\n-\t   UNSPEC_PREDICATE))\n-     (set (match_operand:VEC_F 0 \"vlogical_operand\")\n-\t  (ne:VEC_F (match_dup 1)\n-\t\t    (match_dup 2)))])]\n+\t\t     UNSPEC_PREDICATE))\n+     (set (match_dup 4)\n+\t  (eq:VEC_F (match_dup 1)\n+\t\t    (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(eq:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))]\n   \"TARGET_P9_VECTOR\"\n-  \"\")\n+{\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+})\n+\n+;; This expansion handles the V4SF and V2DF modes in the Power9\n+;; implementation of the vec_any_eq built-in functions.  Note that the\n+;; expansions for this pattern with these modes makes no use of power9-\n+;; specific instructions since there are no new power9 instructions\n+;; for vector compare not equal with floating point arguments.\n+(define_expand \"vector_ae_<mode>_p\"\n+  [(parallel\n+    [(set (reg:CC CR6_REGNO)\n+\t  (unspec:CC [(eq:CC (match_operand:VEC_F 1 \"vlogical_operand\")\n+\t\t\t     (match_operand:VEC_F 2 \"vlogical_operand\"))]\n+\t\t     UNSPEC_PREDICATE))\n+     (set (match_dup 4)\n+\t  (eq:VEC_F (match_dup 1)\n+\t\t    (match_dup 2)))])\n+   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(lt:SI (reg:CC CR6_REGNO)\n+\t       (const_int 0)))\n+   (set (match_dup 0)\n+\t(xor:SI (match_dup 0)\n+\t\t(const_int 1)))]\n+  \"TARGET_P9_VECTOR\"\n+{\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+})\n \n (define_expand \"vector_gt_<mode>_p\"\n   [(parallel"}, {"sha": "111c2e8214bd26661f2a5fd1fccc50e9806cfc48", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 28, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -3596,7 +3596,8 @@\n ;; Compare vectors producing a vector result and a predicate, setting CR6\n ;; to indicate a combined status.  This pattern matches v16qi, v8hi, and\n ;; v4si modes.  It does not match v2df, v4sf, or v2di modes.  There's no\n-;; need to match the v2di mode because that is expanded into v4si.\n+;; need to match v4sf, v2df, or v2di modes because those are expanded\n+;; to use Power8 instructions.\n (define_insn \"*vsx_ne_<mode>_p\"\n   [(set (reg:CC CR6_REGNO)\n \t(unspec:CC\n@@ -3607,22 +3608,7 @@\n \t(ne:VSX_EXTRACT_I (match_dup 1)\n \t\t\t  (match_dup 2)))]\n   \"TARGET_P9_VECTOR\"\n-  \"xvcmpne<VSX_EXTRACT_WIDTH>. %0,%1,%2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n-;; Compare vectors producing a vector result and a predicate, setting CR6\n-;; to indicate a combined status, for v4sf and v2df operands.\n-(define_insn \"*vsx_ne_<mode>_p\"\n-  [(set (reg:CC CR6_REGNO)\n-\t(unspec:CC [(ne:CC\n-\t\t     (match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n-\t\t     (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\"))]\n-\t UNSPEC_PREDICATE))\n-   (set (match_operand:VSX_F 0 \"vsx_register_operand\" \"=wa\")\n-\t(ne:VSX_F (match_dup 1)\n-\t\t  (match_dup 2)))]\n-  \"TARGET_P9_VECTOR\"\n-  \"xvcmpne<VSs>. %x0,%x1,%x2\"\n+  \"vcmpne<VSX_EXTRACT_WIDTH>. %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n (define_insn \"*vector_nez_<mode>_p\"\n@@ -3742,17 +3728,6 @@\n   \"vcmpnew %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-;; Vector Compare Not Equal Float or Double\n-(define_insn \"vcmpne<VSs>\"\n-  [(set (match_operand:<VSI> 0 \"vsx_register_operand\" \"=wa\")\n-\t(unspec:<VSI>\n-\t [(match_operand:VSX_F 1 \"vsx_register_operand\" \"wa\")\n-\t  (match_operand:VSX_F 2 \"vsx_register_operand\" \"wa\")]\n-\t UNSPEC_VCMPNEH))]\n-  \"TARGET_P9_VECTOR\"\n-  \"xvcmpne<VSs> %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"vecsimple\")])\n-\n ;; Vector Compare Not Equal or Zero Word\n (define_insn \"vcmpnezw\"\n   [(set (match_operand:V4SI 0 \"altivec_register_operand\" \"=v\")"}, {"sha": "3408e1cdd7bfdec8121a51fafaff5ecd97be913d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -1,3 +1,28 @@\n+2017-03-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\tPR target/79395\n+\t* gcc.target/powerpc/vsu/vec-all-ne-10.c: Change scan-assembler\n+\tpattern to look for vcmpequd. instead of vcmpnew.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-14.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-7.c: Change scan-assembler\n+\tpattern to look for xvcmpeqsp. instead of xvcmpnesp.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-8.c: Change scan-assembler to\n+\tlook for xvcmpeqdp. instead of xvcmpnedp.\n+\t* gcc.target/powerpc/vsu/vec-all-ne-9.c: Change scan-assembler to\n+\tlook for vcmpequd. instead of vcmpnew.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-10.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-14.c: Likewise.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-7.c: Change scan-assembler to\n+\tlook for xvcmpeqsp. instead of xvcmpnesp.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-8.c: Change scan-assembler to\n+\tlook for xvcmpeqdp. instead of xvcmpnedp.\n+\t* gcc.target/powerpc/vsu/vec-any-eq-9.c: Change scan-assembler to\n+\tlook for vcmpequd. instead of vcmpnew.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-8.c: Change scan-assembler to\n+\tlook for vcmpeqsp instead of xvcmpnesp.\n+\t* gcc.target/powerpc/vsu/vec-cmpne-9.c: Change scan-assembler to\n+\tlook for xvcmpeqdp instead of xvcmpnedp.\n+\n 2017-03-01  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/79721"}, {"sha": "39bd065c442e4c9178138310a029bad3e4415015", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-10.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -15,4 +15,4 @@ test_all_not_equal (vector unsigned long long *arg1_p,\n   return vec_all_ne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "55d484be7d86c7431a42d61e0af1722a8f974af5", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-14.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_all_not_equal (vector bool long long *arg1_p, vector bool long long *arg2_p\n   return vec_all_ne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "7bb7093098e615f2656a3b36baeac3bd1f0b5de1", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-7.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_all_not_equal (vector float *arg1_p, vector float *arg2_p)\n   return vec_all_ne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnesp.\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqsp.\" } } */"}, {"sha": "55bae87ac50e53dfe01a0f9bdab14c7ba62df73d", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-8.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_all_not_equal (vector double *arg1_p, vector double *arg2_p)\n   return vec_all_ne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnedp.\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqdp.\" } } */"}, {"sha": "3d7e6a5a6a5978554bf822200e48979ce263596c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-all-ne-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-all-ne-9.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_all_not_equal (vector long long *arg1_p, vector long long *arg2_p)\n   return vec_all_ne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "7a3660e25fc4562d1409c55bf6e35969674446cf", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-10.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -15,4 +15,4 @@ test_any_equal (vector unsigned long long *arg1_p,\n   return vec_any_eq (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "658b4dffa8398ea4f58059fd4b912cf26d98232c", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-14.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-14.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_any_equal (vector bool long long *arg1_p, vector bool long long *arg2_p)\n   return vec_any_eq (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "5cd9e36f3bb4952349fdfcade27e3712683da5e4", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-7.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-7.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_any_equal (vector float *arg1_p, vector float *arg2_p)\n   return vec_any_eq (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnesp.\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqsp.\" } } */"}, {"sha": "038753ff069ab257a5ef0a84b33382ec7cfeeb2e", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-8.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_any_equal (vector double *arg1_p, vector double *arg2_p)\n   return vec_any_eq (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnedp.\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqdp.\" } } */"}, {"sha": "e8c058d6f32793590159e7a7d7cf5dc3382fb3e7", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-any-eq-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-any-eq-9.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ test_any_equal (vector long long *arg1_p, vector long long *arg2_p)\n   return vec_any_eq (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"vcmpnew.\" } } */\n+/* { dg-final { scan-assembler \"vcmpequd.\" } } */"}, {"sha": "67fbf85bd552cc8ee5b94b84a8a1fa0f5886466b", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-8.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-8.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ fetch_data (vector float *arg1_p, vector float *arg2_p)\n   return vec_cmpne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnesp\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqsp\" } } */"}, {"sha": "0b00daa87ba9ddb72dc70401cd6efdbf50b5f265", "filename": "gcc/testsuite/gcc.target/powerpc/vsu/vec-cmpne-9.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/501815065bca4cc3657f3f7f78f81613277ebeb4/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsu%2Fvec-cmpne-9.c?ref=501815065bca4cc3657f3f7f78f81613277ebeb4", "patch": "@@ -14,4 +14,4 @@ fetch_data (vector double *arg1_p, vector double *arg2_p)\n   return vec_cmpne (arg_1, arg_2);\n }\n \n-/* { dg-final { scan-assembler \"xvcmpnedp\" } } */\n+/* { dg-final { scan-assembler \"xvcmpeqdp\" } } */"}]}