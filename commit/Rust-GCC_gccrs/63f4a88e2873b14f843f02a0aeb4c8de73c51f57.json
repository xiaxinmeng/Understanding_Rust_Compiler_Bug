{"sha": "63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNmNGE4OGUyODczYjE0Zjg0M2YwMmEwYWViNGM4ZGU3M2M1MWY1Nw==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2002-06-04T17:32:59Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2002-06-04T17:32:59Z"}, "message": "Tue Jun  4 19:29:42 CEST 2002  Jan Hubicka  <jh@suse.cz>\n\n\t* cfglayout.c (duplicate_insn_chain): Kill NOTE_INSN_RANGE notes.\n\t* final.c (final_scan_insn): Likewise.\n\t* ggc-common.c (ggc_mark_rtx_children_1): Likewise; use\n\tNOTE_EXPECTED_VALUE instead of NOTE_RANGE.\n\t* haifa-sched.c (unlink_other_notes): Likeewise.\n\t(reemit_notes): Likewise.\n\t* print-rtl.c (print_rtx): Likewise.\n\t* sched-deps (sched-analyze): Likewise.\n\t* rtl.c (note_insn_name): Likewise.\n\t* rtl.h (NOTE_RANGE_INFO, NOTE_LIVE_INFO): Kill.\n\t(enum insn_note): Kill NOTE_INSN_RANGE_*, NOTE_INSN_LIVE.\n\t(RANGE_*): Kill.\n\nFrom-SVN: r54250", "tree": {"sha": "2c86c9a05e23b1ae6c7c454f4735a7512ecc5a18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c86c9a05e23b1ae6c7c454f4735a7512ecc5a18"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/comments", "author": null, "committer": null, "parents": [{"sha": "a5d1f75b65ba49002e3d84312c4b0120f84b4121", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5d1f75b65ba49002e3d84312c4b0120f84b4121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5d1f75b65ba49002e3d84312c4b0120f84b4121"}], "stats": {"total": 182, "additions": 25, "deletions": 157}, "files": [{"sha": "89defd1d15e1b0c4853821992724a21778505b26", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -1,3 +1,18 @@\n+Tue Jun  4 19:29:42 CEST 2002  Jan Hubicka  <jh@suse.cz>\n+\n+\t* cfglayout.c (duplicate_insn_chain): Kill NOTE_INSN_RANGE notes.\n+\t* final.c (final_scan_insn): Likewise.\n+\t* ggc-common.c (ggc_mark_rtx_children_1): Likewise; use\n+\tNOTE_EXPECTED_VALUE instead of NOTE_RANGE.\n+\t* haifa-sched.c (unlink_other_notes): Likeewise.\n+\t(reemit_notes): Likewise.\n+\t* print-rtl.c (print_rtx): Likewise.\n+\t* sched-deps (sched-analyze): Likewise.\n+\t* rtl.c (note_insn_name): Likewise.\n+\t* rtl.h (NOTE_RANGE_INFO, NOTE_LIVE_INFO): Kill.\n+\t(enum insn_note): Kill NOTE_INSN_RANGE_*, NOTE_INSN_LIVE.\n+\t(RANGE_*): Kill.\n+\n 2002-06-04  Jason Thorpe  <thorpej@wasabisystems.com>\n \n \t* varasm.c (mark_constants): Handle RTX format 'B'."}, {"sha": "83bc6b71d9772bf9792acbb9501029f3ff3a6108", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -779,8 +779,6 @@ duplicate_insn_chain (from, to)\n \t         reordering is in the progress.  */\n \t    case NOTE_INSN_EH_REGION_BEG:\n \t    case NOTE_INSN_EH_REGION_END:\n-\t    case NOTE_INSN_RANGE_BEG:\n-\t    case NOTE_INSN_RANGE_END:\n \t      /* Should never exist at BB duplication time.  */\n \t      abort ();\n \t      break;"}, {"sha": "aa4caf19eb747d02beb2472440cac026600c6643", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -1995,9 +1995,6 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \tcase NOTE_INSN_LOOP_VTOP:\n \tcase NOTE_INSN_FUNCTION_END:\n \tcase NOTE_INSN_REPEATED_LINE_NUMBER:\n-\tcase NOTE_INSN_RANGE_BEG:\n-\tcase NOTE_INSN_RANGE_END:\n-\tcase NOTE_INSN_LIVE:\n \tcase NOTE_INSN_EXPECTED_VALUE:\n \t  break;\n "}, {"sha": "b5dad6bbd7689e56c803a0a55eda5b3ca593d5ab", "filename": "gcc/ggc-common.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fggc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fggc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-common.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -215,11 +215,8 @@ ggc_mark_rtx_children_1 (r)\n \tcase NOTE:\n \t  switch (NOTE_LINE_NUMBER (r))\n \t    {\n-\t    case NOTE_INSN_RANGE_BEG:\n-\t    case NOTE_INSN_RANGE_END:\n-\t    case NOTE_INSN_LIVE:\n \t    case NOTE_INSN_EXPECTED_VALUE:\n-\t      ggc_mark_rtx (NOTE_RANGE_INFO (r));\n+\t      ggc_mark_rtx (NOTE_EXPECTED_VALUE (r));\n \t      break;\n \n \t    case NOTE_INSN_BLOCK_BEG:"}, {"sha": "b59f7e1cf9286a9b60b6d80f7a24d925529d2eb0", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -1233,8 +1233,6 @@ unlink_other_notes (insn, tail)\n       /* See sched_analyze to see how these are handled.  */\n       if (NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_BEG\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_LOOP_END\n-\t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_RANGE_BEG\n-\t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_RANGE_END\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_EH_REGION_BEG\n \t  && NOTE_LINE_NUMBER (insn) != NOTE_INSN_EH_REGION_END)\n \t{\n@@ -1726,23 +1724,12 @@ reemit_notes (insn, last)\n \t{\n \t  enum insn_note note_type = INTVAL (XEXP (note, 0));\n \n-\t  if (note_type == NOTE_INSN_RANGE_BEG\n-              || note_type == NOTE_INSN_RANGE_END)\n-\t    {\n-\t      last = emit_note_before (note_type, last);\n-\t      remove_note (insn, note);\n-\t      note = XEXP (note, 1);\n-\t      NOTE_RANGE_INFO (last) = XEXP (note, 0);\n-\t    }\n-\t  else\n-\t    {\n-\t      last = emit_note_before (note_type, last);\n-\t      remove_note (insn, note);\n-\t      note = XEXP (note, 1);\n-\t      if (note_type == NOTE_INSN_EH_REGION_BEG\n-\t\t  || note_type == NOTE_INSN_EH_REGION_END)\n-\t\tNOTE_EH_HANDLER (last) = INTVAL (XEXP (note, 0));\n-\t    }\n+\t  last = emit_note_before (note_type, last);\n+\t  remove_note (insn, note);\n+\t  note = XEXP (note, 1);\n+\t  if (note_type == NOTE_INSN_EH_REGION_BEG\n+\t      || note_type == NOTE_INSN_EH_REGION_END)\n+\t    NOTE_EH_HANDLER (last) = INTVAL (XEXP (note, 0));\n \t  remove_note (insn, note);\n \t}\n     }"}, {"sha": "da8a0520a05fd6af6774ea8c4686d6627439c81b", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -251,16 +251,6 @@ print_rtx (in_rtx)\n \t\tsawclose = 1;\n \t\tbreak;\n \n-\t      case NOTE_INSN_RANGE_BEG:\n-\t      case NOTE_INSN_RANGE_END:\n-\t      case NOTE_INSN_LIVE:\n-\t\tindent += 2;\n-\t\tif (!sawclose)\n-\t\t  fprintf (outfile, \" \");\n-\t\tprint_rtx (NOTE_RANGE_INFO (in_rtx));\n-\t\tindent -= 2;\n-\t\tbreak;\n-\n \t      case NOTE_INSN_BASIC_BLOCK:\n \t\t{\n \t\t  basic_block bb = NOTE_BASIC_BLOCK (in_rtx);"}, {"sha": "7b6c0a1f9bddb6c19c601a73fa71755300974a4b", "filename": "gcc/rtl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Frtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Frtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -214,8 +214,7 @@ const char * const note_insn_name[NOTE_INSN_MAX - NOTE_INSN_BIAS] =\n   \"NOTE_INSN_PROLOGUE_END\", \"NOTE_INSN_EPILOGUE_BEG\",\n   \"NOTE_INSN_DELETED_LABEL\", \"NOTE_INSN_FUNCTION_BEG\",\n   \"NOTE_INSN_EH_REGION_BEG\", \"NOTE_INSN_EH_REGION_END\",\n-  \"NOTE_INSN_REPEATED_LINE_NUMBER\", \"NOTE_INSN_RANGE_BEG\",\n-  \"NOTE_INSN_RANGE_END\", \"NOTE_INSN_LIVE\",\n+  \"NOTE_INSN_REPEATED_LINE_NUMBER\",\n   \"NOTE_INSN_BASIC_BLOCK\", \"NOTE_INSN_EXPECTED_VALUE\",\n   \"NOTE_INSN_PREDICTION\"\n };"}, {"sha": "ab03d6bff1b2e5ecbb6d2574d77294e479c01389", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 106, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -754,14 +754,11 @@ extern const char * const reg_note_name[];\n    line is in.  We use the same field to record block numbers temporarily in\n    NOTE_INSN_BLOCK_BEG and NOTE_INSN_BLOCK_END notes.  (We avoid lots of casts\n    between ints and pointers if we use a different macro for the block number.)\n-   The NOTE_INSN_RANGE_{START,END} and NOTE_INSN_LIVE notes record their\n-   information as an rtx in the field.  */\n+   */\n \n #define NOTE_SOURCE_FILE(INSN) \tXCSTR (INSN, 4, NOTE)\n #define NOTE_BLOCK(INSN)\tXCTREE (INSN, 4, NOTE)\n #define NOTE_EH_HANDLER(INSN)\tXCINT (INSN, 4, NOTE)\n-#define NOTE_RANGE_INFO(INSN)  \tXCEXP (INSN, 4, NOTE)\n-#define NOTE_LIVE_INFO(INSN)   \tXCEXP (INSN, 4, NOTE)\n #define NOTE_BASIC_BLOCK(INSN)\tXCBBDEF (INSN, 4, NOTE)\n #define NOTE_EXPECTED_VALUE(INSN) XCEXP (INSN, 4, NOTE)\n #define NOTE_PREDICTION(INSN)   XCINT (INSN, 4, NOTE)\n@@ -853,14 +850,6 @@ enum insn_note\n      the line containing the inline call from being counted twice in gcov.  */\n   NOTE_INSN_REPEATED_LINE_NUMBER,\n \n-  /* Start/end of a live range region, where pseudos allocated on the stack\n-     can be allocated to temporary registers.  Uses NOTE_RANGE_INFO.  */\n-  NOTE_INSN_RANGE_BEG,\n-  NOTE_INSN_RANGE_END,\n-\n-  /* Record which registers are currently live.  Uses NOTE_LIVE_INFO.  */\n-  NOTE_INSN_LIVE,\n-\n   /* Record the struct for the following basic block.  Uses NOTE_BASIC_BLOCK.  */\n   NOTE_INSN_BASIC_BLOCK,\n \n@@ -1261,100 +1250,6 @@ do {\t\t\t\t\t\t\\\n #define USE_STORE_PRE_DECREMENT(MODE)   HAVE_PRE_DECREMENT\n #endif\n \n-\n-/* Accessors for RANGE_INFO.  */\n-/* For RANGE_{START,END} notes return the RANGE_START note.  */\n-#define RANGE_INFO_NOTE_START(INSN) XCEXP (INSN, 0, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes return the RANGE_START note.  */\n-#define RANGE_INFO_NOTE_END(INSN) XCEXP (INSN, 1, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, return the vector containing the registers used\n-   in the range.  */\n-#define RANGE_INFO_REGS(INSN) XCVEC (INSN, 2, RANGE_INFO)\n-#define RANGE_INFO_REGS_REG(INSN, N) XCVECEXP (INSN, 2, N, RANGE_INFO)\n-#define RANGE_INFO_NUM_REGS(INSN) XCVECLEN (INSN, 2, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the number of calls within the range.  */\n-#define RANGE_INFO_NCALLS(INSN) XCINT (INSN, 3, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the number of insns within the range.  */\n-#define RANGE_INFO_NINSNS(INSN) XCINT (INSN, 4, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, a unique # to identify this range.  */\n-#define RANGE_INFO_UNIQUE(INSN) XCINT (INSN, 5, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the basic block # the range starts with.  */\n-#define RANGE_INFO_BB_START(INSN) XCINT (INSN, 6, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the basic block # the range ends with.  */\n-#define RANGE_INFO_BB_END(INSN) XCINT (INSN, 7, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the loop depth the range is in.  */\n-#define RANGE_INFO_LOOP_DEPTH(INSN) XCINT (INSN, 8, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the bitmap of live registers at the start\n-   of the range.  */\n-#define RANGE_INFO_LIVE_START(INSN) XCBITMAP (INSN, 9, RANGE_INFO)\n-\n-/* For RANGE_{START,END} notes, the bitmap of live registers at the end\n-   of the range.  */\n-#define RANGE_INFO_LIVE_END(INSN) XCBITMAP (INSN, 10, RANGE_INFO)\n-\n-/* For RANGE_START notes, the marker # of the start of the range.  */\n-#define RANGE_INFO_MARKER_START(INSN) XCINT (INSN, 11, RANGE_INFO)\n-\n-/* For RANGE_START notes, the marker # of the end of the range.  */\n-#define RANGE_INFO_MARKER_END(INSN) XCINT (INSN, 12, RANGE_INFO)\n-\n-/* Original pseudo register # for a live range note.  */\n-#define RANGE_REG_PSEUDO(INSN,N) XCINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 0, REG)\n-\n-/* Pseudo register # original register is copied into or -1.  */\n-#define RANGE_REG_COPY(INSN,N) XCINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 1, REG)\n-\n-/* How many times a register in a live range note was referenced.  */\n-#define RANGE_REG_REFS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 2)\n-\n-/* How many times a register in a live range note was set.  */\n-#define RANGE_REG_SETS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 3)\n-\n-/* How many times a register in a live range note died.  */\n-#define RANGE_REG_DEATHS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 4)\n-\n-/* Whether the original value is needed to be copied into the range register at\n-   the start of the range.  */\n-#define RANGE_REG_COPY_FLAGS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 5)\n-\n-/* # of insns the register copy is live over.  */\n-#define RANGE_REG_LIVE_LENGTH(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 6)\n-\n-/* # of calls the register copy is live over.  */\n-#define RANGE_REG_N_CALLS(INSN,N) XINT (XCVECEXP (INSN, 2, N, RANGE_INFO), 7)\n-\n-/* DECL_NODE pointer of the declaration if the register is a user defined\n-   variable.  */\n-#define RANGE_REG_SYMBOL_NODE(INSN,N) XTREE (XCVECEXP (INSN, 2, N, RANGE_INFO), 8)\n-\n-/* BLOCK_NODE pointer to the block the variable is declared in if the\n-   register is a user defined variable.  */\n-#define RANGE_REG_BLOCK_NODE(INSN,N) XTREE (XCVECEXP (INSN, 2, N, RANGE_INFO), 9)\n-\n-/* EXPR_LIST of the distinct ranges a variable is in.  */\n-#define RANGE_VAR_LIST(INSN) (XEXP (INSN, 0))\n-\n-/* Block a variable is declared in.  */\n-#define RANGE_VAR_BLOCK(INSN) (XTREE (INSN, 1))\n-\n-/* # of distinct ranges a variable is in.  */\n-#define RANGE_VAR_NUM(INSN) (XINT (INSN, 2))\n-\n-/* For a NOTE_INSN_LIVE note, the registers which are currently live.  */\n-#define RANGE_LIVE_BITMAP(INSN) (XBITMAP (INSN, 0))\n-\n-/* For a NOTE_INSN_LIVE note, the original basic block number.  */\n-#define RANGE_LIVE_ORIG_BLOCK(INSN) (XINT (INSN, 1))\n-\n /* Determine if the insn is a PHI node.  */\n #define PHI_NODE_P(X)\t\t\t\t\\\n   ((X) && GET_CODE (X) == INSN\t\t\t\\"}, {"sha": "268f58e6cd10351b9722a38a2940efe491280465", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63f4a88e2873b14f843f02a0aeb4c8de73c51f57/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=63f4a88e2873b14f843f02a0aeb4c8de73c51f57", "patch": "@@ -1315,17 +1315,7 @@ sched_analyze (deps, head, tail)\n       /* See comments on reemit_notes as to why we do this.\n \t ??? Actually, the reemit_notes just say what is done, not why.  */\n \n-      else if (GET_CODE (insn) == NOTE\n-\t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_BEG\n-\t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_RANGE_END))\n-\t{\n-\t  loop_notes = alloc_EXPR_LIST (REG_SAVE_NOTE, NOTE_RANGE_INFO (insn),\n-\t\t\t\t\tloop_notes);\n-\t  loop_notes = alloc_EXPR_LIST (REG_SAVE_NOTE,\n-\t\t\t\t\tGEN_INT (NOTE_LINE_NUMBER (insn)),\n-\t\t\t\t\tloop_notes);\n-\t}\n-      else if (GET_CODE (insn) == NOTE\n+      if (GET_CODE (insn) == NOTE\n \t       && (NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_BEG\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END\n \t\t   || NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG"}]}