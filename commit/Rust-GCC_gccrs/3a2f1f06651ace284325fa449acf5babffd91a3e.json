{"sha": "3a2f1f06651ace284325fa449acf5babffd91a3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2EyZjFmMDY2NTFhY2UyODQzMjVmYTQ0OWFjZjViYWJmZmQ5MWEzZQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-24T20:47:43Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-24T20:47:43Z"}, "message": "tree-flow-inline.h (phi_arg_from_edge): Remove.\n\n\t* tree-flow-inline.h (phi_arg_from_edge): Remove.\n\t* tree-flow.h: Remove the corresponding prototype.\n\t* tree-ssa-operands.h, tree-ssa-threadupdate.c, tree-ssa.c,\n\ttree-vectorizer.c: Use dest_idx instead of phi_arg_from_edge.\n\nFrom-SVN: r94183", "tree": {"sha": "15c9cc34f3a169e8b5913e2a149242fb5c4879f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15c9cc34f3a169e8b5913e2a149242fb5c4879f2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3a2f1f06651ace284325fa449acf5babffd91a3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2f1f06651ace284325fa449acf5babffd91a3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a2f1f06651ace284325fa449acf5babffd91a3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a2f1f06651ace284325fa449acf5babffd91a3e/comments", "author": null, "committer": null, "parents": [{"sha": "2a4d06261820a8fa78728d40ea51ba4658b6d914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a4d06261820a8fa78728d40ea51ba4658b6d914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a4d06261820a8fa78728d40ea51ba4658b6d914"}], "stats": {"total": 38, "additions": 15, "deletions": 23}, "files": [{"sha": "b701448bb2490e0a2946ab7ee68d52ad0b23ac8c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -1,3 +1,10 @@\n+2005-01-24  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-flow-inline.h (phi_arg_from_edge): Remove.\n+\t* tree-flow.h: Remove the corresponding prototype.\n+\t* tree-ssa-operands.h, tree-ssa-threadupdate.c, tree-ssa.c,\n+\ttree-vectorizer.c: Use dest_idx instead of phi_arg_from_edge.\n+\n 2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/17751"}, {"sha": "e2204d5243911a79620f6ceb2dbc0c8d7d224152", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -389,15 +389,6 @@ set_phi_nodes (basic_block bb, tree l)\n     set_bb_for_stmt (phi, bb);\n }\n \n-/* Return the phi index number for an edge.  */\n-static inline int\n-phi_arg_from_edge (tree phi, edge e)\n-{\n-  gcc_assert (phi);\n-  gcc_assert (TREE_CODE (phi) == PHI_NODE);\n-  return e->dest_idx;\n-}\n-\n /* Mark VAR as used, so that it'll be preserved during rtl expansion.  */\n \n static inline void"}, {"sha": "55ff2e7404b153f2e10d55a955d0cacb88624b73", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -698,7 +698,6 @@ enum move_pos\n extern enum move_pos movement_possibility (tree);\n \n /* In tree-flow-inline.h  */\n-static inline int phi_arg_from_edge (tree, edge);\n static inline bool is_call_clobbered (tree);\n static inline void mark_call_clobbered (tree);\n static inline void set_is_used (tree);"}, {"sha": "aa369430ca9576774271d7748a5be822c56636c6", "filename": "gcc/tree-ssa-operands.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa-operands.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa-operands.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.h?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -175,11 +175,9 @@ typedef stmt_operands_t *stmt_operands_p;\n #define SET_PHI_ARG_DEF(PHI, I, V)\t\t\t\t\t\\\n \t\t\t\tSET_USE (PHI_ARG_DEF_PTR ((PHI), (I)), (V))\n #define PHI_ARG_DEF_FROM_EDGE(PHI, E)\t\t\t\t\t\\\n-\t\t\t\tPHI_ARG_DEF ((PHI),\t\t\t\\\n-\t\t\t\t\t     phi_arg_from_edge ((PHI),(E)))\n+\t\t\t\tPHI_ARG_DEF ((PHI), (E)->dest_idx)\n #define PHI_ARG_DEF_PTR_FROM_EDGE(PHI, E)\t\t\t\t\\\n-\t\t\t\tPHI_ARG_DEF_PTR ((PHI), \t\t\\\n-\t\t\t\t\t     phi_arg_from_edge ((PHI),(E)))\n+\t\t\t\tPHI_ARG_DEF_PTR ((PHI), (E)->dest_idx)\n \n \n extern void init_ssa_operands (void);"}, {"sha": "92436a92ff729beca3d4031f3506ec1d4b75f80d", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -298,7 +298,7 @@ create_edge_and_update_destination_phis (struct redirection_data *rd)\n      associated with the outgoing edge stored in RD.  */\n   for (phi = phi_nodes (e->dest); phi; phi = PHI_CHAIN (phi))\n     {\n-      int indx = phi_arg_from_edge (phi, rd->outgoing_edge);\n+      int indx = rd->outgoing_edge->dest_idx;\n       add_phi_arg (phi, PHI_ARG_DEF_TREE (phi, indx), e);\n     }\n }"}, {"sha": "d7fa593dc2900b407d2cf25341e33f9c07693985", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -56,18 +56,16 @@ ssa_redirect_edge (edge e, basic_block dest)\n   tree phi, next;\n   tree list = NULL, *last = &list;\n   tree src, dst, node;\n-  int i;\n \n   /* Remove the appropriate PHI arguments in E's destination block.  */\n   for (phi = phi_nodes (e->dest); phi; phi = next)\n     {\n       next = PHI_CHAIN (phi);\n \n-      i = phi_arg_from_edge (phi, e);\n-      if (PHI_ARG_DEF (phi, i) == NULL_TREE)\n+      if (PHI_ARG_DEF (phi, e->dest_idx) == NULL_TREE)\n \tcontinue;\n \n-      src = PHI_ARG_DEF (phi, i);\n+      src = PHI_ARG_DEF (phi, e->dest_idx);\n       dst = PHI_RESULT (phi);\n       node = build_tree_list (dst, src);\n       *last = node;"}, {"sha": "d0892bc3a4c60213ac6e5d169c015ea1d74c72fd", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3a2f1f06651ace284325fa449acf5babffd91a3e/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=3a2f1f06651ace284325fa449acf5babffd91a3e", "patch": "@@ -523,7 +523,7 @@ slpeel_update_phis_for_duplicate_loop (struct loop *orig_loop,\n         {\n           gcc_assert (new_loop_exit_e == orig_entry_e);\n           SET_PHI_ARG_DEF (phi_orig,\n-                           phi_arg_from_edge (phi_orig, new_loop_exit_e),\n+                           new_loop_exit_e->dest_idx,\n                            new_ssa_name);\n         }\n     }\n@@ -639,8 +639,7 @@ slpeel_update_phi_nodes_for_guard (edge guard_edge,\n       /* 3. Update phi in successor block.  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (update_phi, e) == loop_arg\n                   || PHI_ARG_DEF_FROM_EDGE (update_phi, e) == guard_arg);\n-      SET_PHI_ARG_DEF (update_phi, phi_arg_from_edge (update_phi, e),\n-                       PHI_RESULT (new_phi));\n+      SET_PHI_ARG_DEF (update_phi, e->dest_idx, PHI_RESULT (new_phi));\n     }\n \n   set_phi_nodes (new_merge_bb, phi_reverse (phi_nodes (new_merge_bb)));\n@@ -3188,7 +3187,7 @@ vect_update_ivs_after_vectorizer (struct loop *loop, tree niters, edge update_e)\n       /* Fix phi expressions in the successor bb.  */\n       gcc_assert (PHI_ARG_DEF_FROM_EDGE (phi1, update_e) ==\n                   PHI_ARG_DEF_FROM_EDGE (phi, EDGE_SUCC (loop->latch, 0)));\n-      SET_PHI_ARG_DEF (phi1, phi_arg_from_edge (phi1, update_e), ni_name);\n+      SET_PHI_ARG_DEF (phi1, update_e->dest_idx, ni_name);\n     }\n }\n "}]}