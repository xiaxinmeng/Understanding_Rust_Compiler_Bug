{"sha": "842322d3aa7b61a5a2349f67d507509b2577efdb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQyMzIyZDNhYTdiNjFhNWEyMzQ5ZjY3ZDUwNzUwOWIyNTc3ZWZkYg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-01-02T15:46:39Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-01-02T15:46:39Z"}, "message": "invoke.texi (-flto and related options): Copy-edit.\n\n2012-01-02  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (-flto and related options): Copy-edit.\n\nFrom-SVN: r182804", "tree": {"sha": "f746aef3b6ad58882e98c7c23ad3b5b0ba5039d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f746aef3b6ad58882e98c7c23ad3b5b0ba5039d9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/842322d3aa7b61a5a2349f67d507509b2577efdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842322d3aa7b61a5a2349f67d507509b2577efdb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/842322d3aa7b61a5a2349f67d507509b2577efdb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/842322d3aa7b61a5a2349f67d507509b2577efdb/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "21e8e84df70ddf25bfc8f41e7dd25980fa4f28f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21e8e84df70ddf25bfc8f41e7dd25980fa4f28f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21e8e84df70ddf25bfc8f41e7dd25980fa4f28f9"}], "stats": {"total": 155, "additions": 76, "deletions": 79}, "files": [{"sha": "28db5f9ec48959e8cf67e034680f0f69867e5764", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842322d3aa7b61a5a2349f67d507509b2577efdb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842322d3aa7b61a5a2349f67d507509b2577efdb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=842322d3aa7b61a5a2349f67d507509b2577efdb", "patch": "@@ -1,3 +1,7 @@\n+2012-01-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (-flto and related options): Copy-edit.\n+\n 2012-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.md (loadgp_newabi_<mode>): Add missing"}, {"sha": "bb05d88b55f5c3c3385bd64776e34f8083cdfb2e", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 72, "deletions": 79, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/842322d3aa7b61a5a2349f67d507509b2577efdb/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/842322d3aa7b61a5a2349f67d507509b2577efdb/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=842322d3aa7b61a5a2349f67d507509b2577efdb", "patch": "@@ -7763,34 +7763,34 @@ file.  When the object files are linked together, all the function\n bodies are read from these ELF sections and instantiated as if they\n had been part of the same translation unit.\n \n-To use the link-timer optimizer, @option{-flto} needs to be specified at\n-compile time and during the final link.  For example,\n+To use the link-time optimizer, @option{-flto} needs to be specified at\n+compile time and during the final link.  For example:\n \n @smallexample\n gcc -c -O2 -flto foo.c\n gcc -c -O2 -flto bar.c\n gcc -o myprog -flto -O2 foo.o bar.o\n @end smallexample\n \n-The first two invocations to GCC will save a bytecode representation\n+The first two invocations to GCC save a bytecode representation\n of GIMPLE into special ELF sections inside @file{foo.o} and\n-@file{bar.o}.  The final invocation will read the GIMPLE bytecode from\n-@file{foo.o} and @file{bar.o}, merge the two files into a single\n-internal image, and compile the result as usual.  Since both\n+@file{bar.o}.  The final invocation reads the GIMPLE bytecode from\n+@file{foo.o} and @file{bar.o}, merges the two files into a single\n+internal image, and compiles the result as usual.  Since both\n @file{foo.o} and @file{bar.o} are merged into a single image, this\n-causes all the inter-procedural analyses and optimizations in GCC to\n+causes all the interprocedural analyses and optimizations in GCC to\n work across the two files as if they were a single one.  This means,\n-for example, that the inliner will be able to inline functions in\n+for example, that the inliner is able to inline functions in\n @file{bar.o} into functions in @file{foo.o} and vice-versa.\n \n-Another (simpler) way to enable link-time optimization is,\n+Another (simpler) way to enable link-time optimization is:\n \n @smallexample\n gcc -o myprog -flto -O2 foo.c bar.c\n @end smallexample\n \n-The above will generate bytecode for @file{foo.c} and @file{bar.c},\n-merge them together into a single GIMPLE representation and optimize\n+The above generates bytecode for @file{foo.c} and @file{bar.c},\n+merges them together into a single GIMPLE representation and optimizes\n them as usual to produce @file{myprog}.\n \n The only important thing to keep in mind is that to enable link-time\n@@ -7800,68 +7800,65 @@ compile and the link commands.\n To make whole program optimization effective, it is necessary to make\n certain whole program assumptions.  The compiler needs to know\n what functions and variables can be accessed by libraries and runtime\n-outside of the link time optimized unit.  When supported by the linker,\n-the linker plugin (see @option{-fuse-linker-plugin}) passes to the\n-compiler information about used and externally visible symbols.  When\n+outside of the link-time optimized unit.  When supported by the linker,\n+the linker plugin (see @option{-fuse-linker-plugin}) passes information\n+to the compiler about used and externally visible symbols.  When\n the linker plugin is not available, @option{-fwhole-program} should be\n-used to allow the compiler to make these assumptions, which will lead\n+used to allow the compiler to make these assumptions, which leads\n to more aggressive optimization decisions.\n \n Note that when a file is compiled with @option{-flto}, the generated\n-object file will be larger than a regular object file because it will\n-contain GIMPLE bytecodes and the usual final code.  This means that\n-object files with LTO information can be linked as a normal object\n-file.  So, in the previous example, if the final link is done with\n-\n-@smallexample\n-gcc -o myprog foo.o bar.o\n-@end smallexample\n-\n-The only difference will be that no inter-procedural optimizations\n-will be applied to produce @file{myprog}.  The two object files\n-@file{foo.o} and @file{bar.o} will be simply sent to the regular\n-linker.\n+object file is larger than a regular object file because it \n+contains GIMPLE bytecodes and the usual final code.  This means that\n+object files with LTO information can be linked as normal object\n+files; if @option{-flto} is not passed to the linker, no\n+interprocedural optimizations are applied.\n \n Additionally, the optimization flags used to compile individual files\n-are not necessarily related to those used at link-time.  For instance,\n+are not necessarily related to those used at link time.  For instance,\n \n @smallexample\n gcc -c -O0 -flto foo.c\n gcc -c -O0 -flto bar.c\n gcc -o myprog -flto -O3 foo.o bar.o\n @end smallexample\n \n-This will produce individual object files with unoptimized assembler\n-code, but the resulting binary @file{myprog} will be optimized at\n-@option{-O3}.  Now, if the final binary is generated without\n-@option{-flto}, then @file{myprog} will not be optimized.\n+This produces individual object files with unoptimized assembler\n+code, but the resulting binary @file{myprog} is optimized at\n+@option{-O3}.  If, instead, the final binary is generated without\n+@option{-flto}, then @file{myprog} is not optimized.\n \n-When producing the final binary with @option{-flto}, GCC will only\n-apply link-time optimizations to those files that contain bytecode.\n+When producing the final binary with @option{-flto}, GCC only\n+applies link-time optimizations to those files that contain bytecode.\n Therefore, you can mix and match object files and libraries with\n-GIMPLE bytecodes and final object code.  GCC will automatically select\n+GIMPLE bytecodes and final object code.  GCC automatically selects\n which files to optimize in LTO mode and which files to link without\n further processing.\n \n-There are some code generation flags that GCC will preserve when\n+There are some code generation flags that GCC preserves when\n generating bytecodes, as they need to be used during the final link\n stage.  Currently, the following options are saved into the GIMPLE\n bytecode files: @option{-fPIC}, @option{-fcommon} and all the\n @option{-m} target flags.\n \n-At link time, these options are read-in and reapplied.  Note that the\n-current implementation makes no attempt at recognizing conflicting\n-values for these options.  If two or more files have a conflicting\n-value (e.g., one file is compiled with @option{-fPIC} and another\n-isn't), the compiler will simply use the last value read from the\n-bytecode files.  It is recommended, then, that all the files\n-participating in the same link be compiled with the same options.\n+At link time, these options are read in and reapplied.  Note that the\n+current implementation makes no attempt to recognize conflicting\n+values for these options.  If different files have conflicting option\n+values (e.g., one file is compiled with @option{-fPIC} and another\n+isn't), the compiler simply uses the last value read from the\n+bytecode files.  It is recommended, then, that you compile all the files\n+participating in the same link with the same options.\n+\n+If LTO encounters objects with C linkage declared with incompatible\n+types in separate translation units to be linked together (undefined\n+behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be\n+issued.  The behavior is still undefined at runtime.\n \n Another feature of LTO is that it is possible to apply interprocedural\n optimizations on files written in different languages.  This requires\n-some support in the language front end.  Currently, the C, C++ and\n+support in the language front end.  Currently, the C, C++ and\n Fortran front ends are capable of emitting GIMPLE bytecodes, so\n-something like this should work\n+something like this should work:\n \n @smallexample\n gcc -c -flto foo.c\n@@ -7873,49 +7870,43 @@ g++ -o myprog -flto -O3 foo.o bar.o baz.o -lgfortran\n Notice that the final link is done with @command{g++} to get the C++\n runtime libraries and @option{-lgfortran} is added to get the Fortran\n runtime libraries.  In general, when mixing languages in LTO mode, you\n-should use the same link command used when mixing languages in a\n-regular (non-LTO) compilation.  This means that if your build process\n-was mixing languages before, all you need to add is @option{-flto} to\n+should use the same link command options as when mixing languages in a\n+regular (non-LTO) compilation; all you need to add is @option{-flto} to\n all the compile and link commands.\n \n-If LTO encounters objects with C linkage declared with incompatible\n-types in separate translation units to be linked together (undefined\n-behavior according to ISO C99 6.2.7), a non-fatal diagnostic may be\n-issued.  The behavior is still undefined at runtime.\n-\n If object files containing GIMPLE bytecode are stored in a library archive, say\n @file{libfoo.a}, it is possible to extract and use them in an LTO link if you\n-are using a linker with linker plugin support.  To enable this feature, use\n-the flag @option{-fuse-linker-plugin} at link-time:\n+are using a linker with plugin support.  To enable this feature, use\n+the flag @option{-fuse-linker-plugin} at link time:\n \n @smallexample\n gcc -o myprog -O2 -flto -fuse-linker-plugin a.o b.o -lfoo\n @end smallexample\n \n-With the linker plugin enabled, the linker will extract the needed\n-GIMPLE files from @file{libfoo.a} and pass them on to the running GCC\n+With the linker plugin enabled, the linker extracts the needed\n+GIMPLE files from @file{libfoo.a} and passes them on to the running GCC\n to make them part of the aggregated GIMPLE image to be optimized.\n \n-If you are not using a linker with linker plugin support and/or do not\n-enable linker plugin then the objects inside @file{libfoo.a}\n-will be extracted and linked as usual, but they will not participate\n+If you are not using a linker with plugin support and/or do not\n+enable the linker plugin, then the objects inside @file{libfoo.a}\n+are extracted and linked as usual, but they do not participate\n in the LTO optimization process.\n \n-Link time optimizations do not require the presence of the whole program to\n+Link-time optimizations do not require the presence of the whole program to\n operate.  If the program does not require any symbols to be exported, it is\n-possible to combine @option{-flto} and with @option{-fwhole-program} to allow\n+possible to combine @option{-flto} and @option{-fwhole-program} to allow\n the interprocedural optimizers to use more aggressive assumptions which may\n lead to improved optimization opportunities.\n Use of @option{-fwhole-program} is not needed when linker plugin is\n active (see @option{-fuse-linker-plugin}).\n \n-Regarding portability: the current implementation of LTO makes no\n-attempt at generating bytecode that can be ported between different\n+The current implementation of LTO makes no\n+attempt to generate bytecode that is portable between different\n types of hosts.  The bytecode files are versioned and there is a\n strict version check, so bytecode files generated in one version of\n GCC will not work with an older/newer version of GCC.\n \n-Link time optimization does not play well with generating debugging\n+Link-time optimization does not work well with generation of debugging\n information.  Combining @option{-flto} with\n @option{-g} is currently experimental and expected to produce wrong\n results.\n@@ -7929,15 +7920,15 @@ used.  The default value for @var{n} is 1.\n You can also specify @option{-flto=jobserver} to use GNU make's\n job server mode to determine the number of parallel jobs. This\n is useful when the Makefile calling GCC is already executing in parallel.\n-The parent Makefile will need a @samp{+} prepended to the command recipe\n-for this to work. This will likely only work if @env{MAKE} is\n+You must prepend a @samp{+} to the command recipe in the parent Makefile\n+for this to work.  This option likely only works if @env{MAKE} is\n GNU make.\n \n-This option is disabled by default.\n+This option is disabled by default\n \n @item -flto-partition=@var{alg}\n @opindex flto-partition\n-Specify the partitioning algorithm used by the link time optimizer.\n+Specify the partitioning algorithm used by the link-time optimizer.\n The value is either @code{1to1} to specify a partitioning mirroring\n the original source files or @code{balanced} to specify partitioning\n into equally sized chunks (whenever possible).  Specifying @code{none}\n@@ -7954,35 +7945,36 @@ given, a default balanced compression setting is used.\n \n @item -flto-report\n Prints a report with internal details on the workings of the link-time\n-optimizer.  The contents of this report vary from version to version,\n-it is meant to be useful to GCC developers when processing object\n+optimizer.  The contents of this report vary from version to version.\n+It is meant to be useful to GCC developers when processing object\n files in LTO mode (via @option{-flto}).\n \n Disabled by default.\n \n @item -fuse-linker-plugin\n-Enables the use of a linker plugin during link time optimization.  This\n+Enables the use of a linker plugin during link-time optimization.  This\n option relies on plugin support in the linker, which is available in gold\n or in GNU ld 2.21 or newer.\n \n This option enables the extraction of object files with GIMPLE bytecode out\n of library archives. This improves the quality of optimization by exposing\n-more code to the link time optimizer.  This information specifies what\n+more code to the link-time optimizer.  This information specifies what\n symbols can be accessed externally (by non-LTO object or during dynamic\n linking).  Resulting code quality improvements on binaries (and shared\n libraries that use hidden visibility) are similar to @code{-fwhole-program}.\n See @option{-flto} for a description of the effect of this flag and how to\n use it.\n \n-Enabled by default when LTO support in GCC is enabled and GCC was compiled\n-with a linker supporting plugins (GNU ld 2.21 or newer or gold).\n+This option is enabled by default when LTO support in GCC is enabled\n+and GCC was configured for use with\n+a linker supporting plugins (GNU ld 2.21 or newer or gold).\n \n @item -ffat-lto-objects\n @opindex ffat-lto-objects\n Fat LTO objects are object files that contain both the intermediate language\n-and the object code. This makes them useable for both LTO linking and normal\n-linking. This option makes effect only with @option{-flto} and is ignored \n-at linktime.\n+and the object code. This makes them usable for both LTO linking and normal\n+linking. This option is effective only when compiling with @option{-flto}\n+and is ignored at link time.\n \n @option{-fno-fat-lto-objects} improves compilation time over plain LTO, but\n requires the complete toolchain to be aware of LTO. It requires a linker with\n@@ -7993,6 +7985,7 @@ need to support linker plugins to allow a full-featured build environment\n The default is @option{-ffat-lto-objects} but this default is intended to\n change in future releases when linker plugin enabled environments become more\n common.\n+\n @item -fcompare-elim\n @opindex fcompare-elim\n After register allocation and post-register allocation instruction splitting,"}]}