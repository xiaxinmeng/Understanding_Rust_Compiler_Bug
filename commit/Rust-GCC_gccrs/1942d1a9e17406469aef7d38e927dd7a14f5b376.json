{"sha": "1942d1a9e17406469aef7d38e927dd7a14f5b376", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTk0MmQxYTllMTc0MDY0NjlhZWY3ZDM4ZTkyN2RkN2ExNGY1YjM3Ng==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2014-09-09T12:12:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2014-09-09T12:12:06Z"}, "message": "bb-reorder.h (default_target_bb_reorder): Remove redundant GTY.\n\ngcc/\n\t* bb-reorder.h (default_target_bb_reorder): Remove redundant GTY.\n\t* builtins.h (default_target_builtins): Likewise.\n\t* gcse.h (default_target_gcse): Likewise.\n\t* target-globals.h (target_globals): Add a destructor.  Convert\n\tvoid-pointer fields back to their real type and change from\n\tGTY((atomic)) to GTY((skip)).\n\t(restore_target_globals): Remove casts accordingly.\n\t* target-globals.c (save_target_globals): Use XCNEW rather than\n\tggc_internal_cleared_alloc to allocate non-GC structures.\n\tUse ggc_cleared_alloc to allocate the target_globals structure\n\titself.\n\t(target_globals::~target_globals): Define.\n\nFrom-SVN: r215063", "tree": {"sha": "d22a546f0e257dd3a005547ab16d0d91106212a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22a546f0e257dd3a005547ab16d0d91106212a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1942d1a9e17406469aef7d38e927dd7a14f5b376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1942d1a9e17406469aef7d38e927dd7a14f5b376", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1942d1a9e17406469aef7d38e927dd7a14f5b376", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1942d1a9e17406469aef7d38e927dd7a14f5b376/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb3037199c8e3ca9f7982ec3a0024f8ab007cfbb"}], "stats": {"total": 117, "additions": 71, "deletions": 46}, "files": [{"sha": "ad2092b770f3897ad1b43798eb119dab237fb6a4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -1,3 +1,18 @@\n+2014-09-09  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* bb-reorder.h (default_target_bb_reorder): Remove redundant GTY.\n+\t* builtins.h (default_target_builtins): Likewise.\n+\t* gcse.h (default_target_gcse): Likewise.\n+\t* target-globals.h (target_globals): Add a destructor.  Convert\n+\tvoid-pointer fields back to their real type and change from\n+\tGTY((atomic)) to GTY((skip)).\n+\t(restore_target_globals): Remove casts accordingly.\n+\t* target-globals.c (save_target_globals): Use XCNEW rather than\n+\tggc_internal_cleared_alloc to allocate non-GC structures.\n+\tUse ggc_cleared_alloc to allocate the target_globals structure\n+\titself.\n+\t(target_globals::~target_globals): Define.\n+\n 2014-09-09  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.md (vfp_pop_multiple_with_writeback): Use vldm"}, {"sha": "1200f0fc7e81684c8e5cd57824513b8ab524981f", "filename": "gcc/bb-reorder.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fbb-reorder.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fbb-reorder.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.h?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -26,7 +26,7 @@ struct target_bb_reorder {\n   int x_uncond_jump_length;\n };\n \n-extern GTY(()) struct target_bb_reorder default_target_bb_reorder;\n+extern struct target_bb_reorder default_target_bb_reorder;\n #if SWITCHABLE_TARGET\n extern struct target_bb_reorder *this_target_bb_reorder;\n #else"}, {"sha": "dd1cdbcec7e191f1a6900825b94b04ffa3883cd9", "filename": "gcc/builtins.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fbuiltins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fbuiltins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.h?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -39,7 +39,7 @@ struct target_builtins {\n   enum machine_mode x_apply_result_mode[FIRST_PSEUDO_REGISTER];\n };\n \n-extern GTY(()) struct target_builtins default_target_builtins;\n+extern struct target_builtins default_target_builtins;\n #if SWITCHABLE_TARGET\n extern struct target_builtins *this_target_builtins;\n #else"}, {"sha": "1b8c1c65a2b6916c413b574eb8754b7bc6ae4e11", "filename": "gcc/gcse.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fgcse.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Fgcse.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.h?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -32,7 +32,7 @@ struct target_gcse {\n   bool x_can_copy_init_p;\n };\n \n-extern GTY(()) struct target_gcse default_target_gcse;\n+extern struct target_gcse default_target_gcse;\n #if SWITCHABLE_TARGET\n extern struct target_gcse *this_target_gcse;\n #else"}, {"sha": "5a9843f6bb9e05b39bc4d0bf58a4aca4486752ce", "filename": "gcc/target-globals.c", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Ftarget-globals.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Ftarget-globals.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.c?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -67,37 +67,23 @@ struct target_globals default_target_globals = {\n struct target_globals *\n save_target_globals (void)\n {\n-  struct target_globals *g;\n-  struct target_globals_extra {\n-    struct target_globals g;\n-    struct target_flag_state flag_state;\n-    struct target_optabs optabs;\n-    struct target_cfgloop cfgloop;\n-    struct target_builtins builtins;\n-    struct target_gcse gcse;\n-    struct target_bb_reorder bb_reorder;\n-    struct target_lower_subreg lower_subreg;\n-  } *p;\n-  p = (struct target_globals_extra *)\n-      ggc_internal_cleared_alloc (sizeof (struct target_globals_extra));\n-  g = (struct target_globals *) p;\n-  g->flag_state = &p->flag_state;\n-  g->regs = ggc_internal_cleared_alloc (sizeof (struct target_regs));\n+  struct target_globals *g = ggc_cleared_alloc <target_globals> ();\n+  g->flag_state = XCNEW (struct target_flag_state);\n+  g->regs = XCNEW (struct target_regs);\n   g->rtl = ggc_cleared_alloc<target_rtl> ();\n-  g->recog = ggc_internal_cleared_alloc (sizeof (struct target_recog));\n-  g->hard_regs\n-    = ggc_internal_cleared_alloc (sizeof (struct target_hard_regs));\n-  g->reload = ggc_internal_cleared_alloc (sizeof (struct target_reload));\n-  g->expmed =  ggc_internal_cleared_alloc (sizeof (struct target_expmed));\n-  g->optabs = &p->optabs;\n+  g->recog = XCNEW (struct target_recog);\n+  g->hard_regs = XCNEW (struct target_hard_regs);\n+  g->reload = XCNEW (struct target_reload);\n+  g->expmed = XCNEW (struct target_expmed);\n+  g->optabs = XCNEW (struct target_optabs);\n   g->libfuncs = ggc_cleared_alloc<target_libfuncs> ();\n-  g->cfgloop = &p->cfgloop;\n-  g->ira = ggc_internal_cleared_alloc (sizeof (struct target_ira));\n-  g->ira_int = ggc_internal_cleared_alloc (sizeof (struct target_ira_int));\n-  g->builtins = &p->builtins;\n-  g->gcse = &p->gcse;\n-  g->bb_reorder = &p->bb_reorder;\n-  g->lower_subreg = &p->lower_subreg;\n+  g->cfgloop = XCNEW (struct target_cfgloop);\n+  g->ira = XCNEW (struct target_ira);\n+  g->ira_int = XCNEW (struct target_ira_int);\n+  g->builtins = XCNEW (struct target_builtins);\n+  g->gcse = XCNEW (struct target_gcse);\n+  g->bb_reorder = XCNEW (struct target_bb_reorder);\n+  g->lower_subreg = XCNEW (struct target_lower_subreg);\n   restore_target_globals (g);\n   init_reg_sets ();\n   target_reinit ();\n@@ -133,4 +119,26 @@ save_target_globals_default_opts ()\n   return save_target_globals ();\n }\n \n+target_globals::~target_globals ()\n+{\n+  /* default_target_globals points to static data so shouldn't be freed.  */\n+  if (this != &default_target_globals)\n+    {\n+      XDELETE (flag_state);\n+      XDELETE (regs);\n+      XDELETE (recog);\n+      XDELETE (hard_regs);\n+      XDELETE (reload);\n+      XDELETE (expmed);\n+      XDELETE (optabs);\n+      XDELETE (cfgloop);\n+      XDELETE (ira);\n+      XDELETE (ira_int);\n+      XDELETE (builtins);\n+      XDELETE (gcse);\n+      XDELETE (bb_reorder);\n+      XDELETE (lower_subreg);\n+    }\n+}\n+\n #endif"}, {"sha": "fc9d36eae1586c92bca4931cbd6668102abfe443", "filename": "gcc/target-globals.h", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Ftarget-globals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1942d1a9e17406469aef7d38e927dd7a14f5b376/gcc%2Ftarget-globals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-globals.h?ref=1942d1a9e17406469aef7d38e927dd7a14f5b376", "patch": "@@ -40,18 +40,20 @@ extern struct target_lower_subreg *this_target_lower_subreg;\n #endif\n \n struct GTY(()) target_globals {\n+  ~target_globals ();\n+\n   struct target_flag_state *GTY((skip)) flag_state;\n-  void *GTY((atomic)) regs;\n+  struct target_regs *GTY((skip)) regs;\n   struct target_rtl *rtl;\n-  void *GTY((atomic)) recog;\n-  void *GTY((atomic)) hard_regs;\n-  void *GTY((atomic)) reload;\n-  void *GTY((atomic)) expmed;\n+  struct target_recog *GTY((skip)) recog;\n+  struct target_hard_regs *GTY((skip)) hard_regs;\n+  struct target_reload *GTY((skip)) reload;\n+  struct target_expmed *GTY((skip)) expmed;\n   struct target_optabs *GTY((skip)) optabs;\n   struct target_libfuncs *libfuncs;\n   struct target_cfgloop *GTY((skip)) cfgloop;\n-  void *GTY((atomic)) ira;\n-  void *GTY((atomic)) ira_int;\n+  struct target_ira *GTY((skip)) ira;\n+  struct target_ira_int *GTY((skip)) ira_int;\n   struct target_builtins *GTY((skip)) builtins;\n   struct target_gcse *GTY((skip)) gcse;\n   struct target_bb_reorder *GTY((skip)) bb_reorder;\n@@ -68,17 +70,17 @@ static inline void\n restore_target_globals (struct target_globals *g)\n {\n   this_target_flag_state = g->flag_state;\n-  this_target_regs = (struct target_regs *) g->regs;\n+  this_target_regs = g->regs;\n   this_target_rtl = g->rtl;\n-  this_target_recog = (struct target_recog *) g->recog;\n-  this_target_hard_regs = (struct target_hard_regs *) g->hard_regs;\n-  this_target_reload = (struct target_reload *) g->reload;\n-  this_target_expmed = (struct target_expmed *) g->expmed;\n+  this_target_recog = g->recog;\n+  this_target_hard_regs = g->hard_regs;\n+  this_target_reload = g->reload;\n+  this_target_expmed = g->expmed;\n   this_target_optabs = g->optabs;\n   this_target_libfuncs = g->libfuncs;\n   this_target_cfgloop = g->cfgloop;\n-  this_target_ira = (struct target_ira *) g->ira;\n-  this_target_ira_int = (struct target_ira_int *) g->ira_int;\n+  this_target_ira = g->ira;\n+  this_target_ira_int = g->ira_int;\n   this_target_builtins = g->builtins;\n   this_target_gcse = g->gcse;\n   this_target_bb_reorder = g->bb_reorder;"}]}