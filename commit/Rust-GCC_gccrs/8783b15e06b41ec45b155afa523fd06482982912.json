{"sha": "8783b15e06b41ec45b155afa523fd06482982912", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODc4M2IxNWUwNmI0MWVjNDViMTU1YWZhNTIzZmQwNjQ4Mjk4MjkxMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-21T17:04:26Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-08-21T17:04:26Z"}, "message": "(reg_unused_after): For a SEQUENCE, make sure all insns are safe\nbefore returning 1.\n\nFrom-SVN: r10261", "tree": {"sha": "6104b5d1a023e83e90ebce256664c06fa9920b8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6104b5d1a023e83e90ebce256664c06fa9920b8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8783b15e06b41ec45b155afa523fd06482982912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8783b15e06b41ec45b155afa523fd06482982912", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8783b15e06b41ec45b155afa523fd06482982912", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8783b15e06b41ec45b155afa523fd06482982912/comments", "author": null, "committer": null, "parents": [{"sha": "32c5cac2a5b73cc2ad5e8017ffc21c1f4da00025", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32c5cac2a5b73cc2ad5e8017ffc21c1f4da00025", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32c5cac2a5b73cc2ad5e8017ffc21c1f4da00025"}], "stats": {"total": 49, "additions": 38, "deletions": 11}, "files": [{"sha": "f52ba43d66f85c045f4ce26269083e9a4aefa6fd", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 38, "deletions": 11, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8783b15e06b41ec45b155afa523fd06482982912/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8783b15e06b41ec45b155afa523fd06482982912/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=8783b15e06b41ec45b155afa523fd06482982912", "patch": "@@ -1868,7 +1868,7 @@ reg_unused_after (reg, insn)\n      rtx reg;\n      rtx insn;\n {\n-  enum rtx_code code, prev_code = UNKNOWN;\n+  enum rtx_code code;\n   rtx set;\n \n   /* If the reg is set by this instruction, then it is safe for our\n@@ -1881,20 +1881,45 @@ reg_unused_after (reg, insn)\n \n   while (insn = NEXT_INSN (insn))\n     {\n-      if (prev_code == CALL_INSN && call_used_regs[REGNO (reg)])\n-\treturn 1;\n-\n       code = GET_CODE (insn);\n-      if (GET_CODE (insn) == CODE_LABEL)\n+\n+      if (code == CODE_LABEL)\n \treturn 1;\n \n-      if (code == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n+      /* If this is a sequence, we must handle them all at once.\n+\t We could have for instance a call that sets the target register,\n+\t and a insn in a delay slot that uses the register.  In this case,\n+\t we must return 0.  */\n+      else if (code == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{\n-\t  insn = XVECEXP (PATTERN (insn), 0, 0);\n-\t  code = GET_CODE (insn);\n-\t}\n+\t  int i;\n+\t  int retval = 0;\n+\n+\t  for (i = 0; i < XVECLEN (PATTERN (insn), 0); i++)\n+\t    {\n+\t      rtx this_insn = XVECEXP (PATTERN (insn), 0, i);\n+\t      rtx set = single_set (this_insn);\n+\n+\t      if (GET_CODE (this_insn) == CALL_INSN)\n+\t\tcode = CALL_INSN;\n \n-      if (GET_RTX_CLASS (code) == 'i')\n+\t      if (set && reg_overlap_mentioned_p (reg, SET_SRC (set)))\n+\t\treturn 0;\n+\t      if (set && reg_overlap_mentioned_p (reg, SET_DEST (set)))\n+\t\t{\n+\t\t  if (GET_CODE (SET_DEST (set)) != MEM)\n+\t\t    retval = 1;\n+\t\t  else\n+\t\t    return 0;\n+\t\t}\n+\t      if (set == 0\n+\t\t  && reg_overlap_mentioned_p (reg, PATTERN (this_insn)))\n+\t\treturn 0;\n+\t    }\n+\t  if (retval == 1)\n+\t    return 1;\n+\t}\n+      else if (GET_RTX_CLASS (code) == 'i')\n \t{\n \t  rtx set = single_set (insn);\n \n@@ -1905,7 +1930,9 @@ reg_unused_after (reg, insn)\n \t  if (set == 0 && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n \t    return 0;\n \t}\n-      prev_code = code;\n+\n+      if (code == CALL_INSN && call_used_regs[REGNO (reg)])\n+\treturn 1;\n     }\n   return 1;\n }"}]}