{"sha": "17a73ba04992fcbd31b572c7492699cff0248995", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTdhNzNiYTA0OTkyZmNiZDMxYjU3MmM3NDkyNjk5Y2ZmMDI0ODk5NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2012-10-31T08:00:51Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-10-31T08:00:51Z"}, "message": "expmed.c (store_bit_field_1): Move generation of MEM insvs to the MEM_P block.\n\ngcc/\n\t* expmed.c (store_bit_field_1): Move generation of MEM insvs\n\tto the MEM_P block.\n\t(extract_bit_field_1): Likewise extvs and extzvs.\n\nFrom-SVN: r193024", "tree": {"sha": "39571545027a22af25e3d94bc68b1278ceedcc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39571545027a22af25e3d94bc68b1278ceedcc26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17a73ba04992fcbd31b572c7492699cff0248995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a73ba04992fcbd31b572c7492699cff0248995", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17a73ba04992fcbd31b572c7492699cff0248995", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17a73ba04992fcbd31b572c7492699cff0248995/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a20556e46c7cbc73250211e2bc9cdec76730cdc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20556e46c7cbc73250211e2bc9cdec76730cdc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20556e46c7cbc73250211e2bc9cdec76730cdc6"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "9f4f4ce92cf81f546a879f6aca900c35ef84c3d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a73ba04992fcbd31b572c7492699cff0248995/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a73ba04992fcbd31b572c7492699cff0248995/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=17a73ba04992fcbd31b572c7492699cff0248995", "patch": "@@ -1,3 +1,9 @@\n+2012-10-31  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* expmed.c (store_bit_field_1): Move generation of MEM insvs\n+\tto the MEM_P block.\n+\t(extract_bit_field_1): Likewise extvs and extzvs.\n+\n 2012-10-31  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* expmed.c (store_bit_field_using_insv): New function,"}, {"sha": "5b697a1cd2d765d1b6832e901973533711adaca4", "filename": "gcc/expmed.c", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17a73ba04992fcbd31b572c7492699cff0248995/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17a73ba04992fcbd31b572c7492699cff0248995/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=17a73ba04992fcbd31b572c7492699cff0248995", "patch": "@@ -784,16 +784,7 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n \n   enum machine_mode op_mode = mode_for_extraction (EP_insv, 3);\n   if (op_mode != MAX_MACHINE_MODE\n-      /* Do not use insv for volatile bitfields when\n-         -fstrict-volatile-bitfields is in effect.  */\n-      && !(MEM_P (op0) && MEM_VOLATILE_P (op0)\n-\t   && flag_strict_volatile_bitfields > 0)\n-      /* Do not use insv if the bit region is restricted and\n-\t op_mode integer at offset doesn't fit into the\n-\t restricted region.  */\n-      && !(MEM_P (op0) && bitregion_end\n-\t   && bitnum - (bitnum % BITS_PER_UNIT) + GET_MODE_BITSIZE (op_mode)\n-\t      > bitregion_end + 1)\n+      && !MEM_P (op0)\n       && store_bit_field_using_insv (op0, bitsize, bitnum, value, op_mode))\n     return true;\n \n@@ -804,6 +795,18 @@ store_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n       enum machine_mode bestmode;\n       unsigned HOST_WIDE_INT maxbits = MAX_FIXED_MODE_SIZE;\n \n+      /* Do not use insv for volatile bitfields when\n+         -fstrict-volatile-bitfields is in effect.  */\n+      if (!(MEM_VOLATILE_P (op0) && flag_strict_volatile_bitfields > 0)\n+\t  /* Do not use insv if the bit region is restricted and\n+\t     an op_mode integer doesn't fit into the restricted region.  */\n+\t  && !(bitregion_end\n+\t       && (bitnum - (bitnum % BITS_PER_UNIT)\n+\t\t   + GET_MODE_BITSIZE (op_mode)\n+\t\t   > bitregion_end + 1))\n+\t  && store_bit_field_using_insv (op0, bitsize, bitnum, value, op_mode))\n+\treturn true;\n+\n       if (bitregion_end)\n \tmaxbits = bitregion_end - bitregion_start + 1;\n \n@@ -1594,11 +1597,7 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n      If OP0 is a register, it too fits within a word.  */\n \n   ext_mode = mode_for_extraction (unsignedp ? EP_extzv : EP_extv, 0);\n-  if (ext_mode != MAX_MACHINE_MODE\n-      /* Do not use extv/extzv for volatile bitfields when\n-         -fstrict-volatile-bitfields is in effect.  */\n-      && !(MEM_P (op0) && MEM_VOLATILE_P (op0)\n-\t   && flag_strict_volatile_bitfields > 0))\n+  if (ext_mode != MAX_MACHINE_MODE && !MEM_P (op0))\n     {\n       rtx result = extract_bit_field_using_extv (op0, bitsize, bitnum,\n \t\t\t\t\t\t unsignedp, target, mode,\n@@ -1613,6 +1612,17 @@ extract_bit_field_1 (rtx str_rtx, unsigned HOST_WIDE_INT bitsize,\n     {\n       enum machine_mode bestmode;\n \n+      /* Do not use extv/extzv for volatile bitfields when\n+         -fstrict-volatile-bitfields is in effect.  */\n+      if (!(MEM_VOLATILE_P (op0) && flag_strict_volatile_bitfields > 0))\n+\t{\n+\t  rtx result = extract_bit_field_using_extv (op0, bitsize, bitnum,\n+\t\t\t\t\t\t     unsignedp, target, mode,\n+\t\t\t\t\t\t     tmode, ext_mode);\n+\t  if (result)\n+\t    return result;\n+\t}\n+\n       /* Get the mode to use for inserting into this field.  If\n \t OP0 is BLKmode, get the smallest mode consistent with the\n \t alignment. If OP0 is a non-BLKmode object that is no"}]}