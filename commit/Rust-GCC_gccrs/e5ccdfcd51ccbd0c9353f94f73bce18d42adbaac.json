{"sha": "e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjY2RmY2Q1MWNjYmQwYzkzNTNmOTRmNzNiY2UxOGQ0MmFkYmFhYw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-31T18:37:29Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-10-31T18:37:29Z"}, "message": "i386.c (ix86_expand_sse2_abs): Rename function arguments.\n\n\t* config/i386/i386.c (ix86_expand_sse2_abs): Rename function arguments.\n\tUse gcc_unreachable for unhandled modes.  Do not check results of\n\texpand_simple_binop.  If not expanded to target, move the result.\n\nFrom-SVN: r204271", "tree": {"sha": "3f4deea604524913db4766b044ac517245f03376", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f4deea604524913db4766b044ac517245f03376"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/comments", "author": null, "committer": null, "parents": [{"sha": "5e5f34bf635888199217753e461cfea3bb8ab390", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e5f34bf635888199217753e461cfea3bb8ab390", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e5f34bf635888199217753e461cfea3bb8ab390"}], "stats": {"total": 128, "additions": 58, "deletions": 70}, "files": [{"sha": "48a6aab2fb50a6cbdef24138f040ae9dac2f200b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "patch": "@@ -1,3 +1,9 @@\n+2013-10-31  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_expand_sse2_abs): Rename function arguments.\n+\tUse gcc_unreachable for unhandled modes.  Do not check results of\n+\texpand_simple_binop.  If not expanded to target, move the result.\n+\n 2013-10-31  Chung-Ju Wu  <jasonwucj@gmail.com>\n \t    Shiva Chen  <shiva0217@gmail.com>\n \n@@ -131,9 +137,8 @@\n \tPR other/58545\n \t* reload1.c (update_eliminables_and_spill): New function, broken\n \tout of reload.\n-\t(reload): Use it.  Check for frame size change after frame\n-\tsize alignment, and call update_eliminables_and_spill first\n-\tif continue-ing.\n+\t(reload): Use it.  Check for frame size change after frame size\n+\talignment, and call update_eliminables_and_spill first if continue-ing.\n \n 2013-10-30  Cong Hou  <congh@google.com>\n \n@@ -162,9 +167,8 @@\n \n 2013-10-30  David Malcolm  <dmalcolm@redhat.com>\n \n-\t* cgraphunit.c (analyze_functions): Split symtab_node\n-\tdeclarations onto multiple lines to make things easier\n-\tfor rename_symtab.py.\n+\t* cgraphunit.c (analyze_functions): Split symtab_node declarations\n+\tonto multiple lines to make things easier for rename_symtab.py.\n \n \t* symtab.c (symtab_dissolve_same_comdat_group_list): Likewise.\n \t(symtab_semantically_equivalent_p): Likewise.\n@@ -198,10 +202,8 @@\n \t(struct ira_allocno) New member allocno_prefs.\n \t(ALLOCNO_PREFS): New macro.\n \t(ira_prefs, ira_prefs_num): New external vars.\n-\t(ira_setup_alts, ira_get_dup_out_num, ira_debug_pref): New\n-\tprototypes.\n-\t(ira_debug_prefs, ira_debug_allocno_prefs, ira_create_pref):\n-\tDitto.\n+\t(ira_setup_alts, ira_get_dup_out_num, ira_debug_pref): New prototypes.\n+\t(ira_debug_prefs, ira_debug_allocno_prefs, ira_create_pref): Ditto.\n \t(ira_add_allocno_pref, ira_remove_pref, ira_remove_allocno_prefs):\n \tDitto.\n \t(ira_add_allocno_copy_to_list): Remove prototype.\n@@ -354,7 +356,8 @@\n \tBUILT_IN_CHKP_INTERSECT, BUILT_IN_CHKP_ARG_BND, BUILT_IN_CHKP_NARROW,\n \tBUILT_IN_CHKP_EXTRACT_LOWER, BUILT_IN_CHKP_EXTRACT_UPPER.\n \t* common.opt (fcheck-pointer-bounds): New.\n-\t* toplev.c (process_options): Check Pointer Bounds Checker is supported.\n+\t* toplev.c (process_options): Check Pointer Bounds Checker is\n+\tsupported.\n \t* doc/extend.texi: Document Pointer Bounds Checker built-in functions.\n \n 2013-10-30  Ilya Enkovich  <ilya.enkovich@intel.com>\n@@ -391,11 +394,10 @@\n 2013-10-29  Andrew Pinski <apinski@cavium.com>\n \n \t* tree-ssa-ifcombine.c: Include rtl.h and tm_p.h.\n-\t(ifcombine_ifandif): Handle cases where\n-\tmaybe_fold_and_comparisons fails, combining the branches\n-\tanyways.\n-\t(tree_ssa_ifcombine): Inverse the order of\n-\tthe basic block walk, increases the number of combinings.\n+\t(ifcombine_ifandif): Handle cases where maybe_fold_and_comparisons\n+\tfails, combining the branches anyways.\n+\t(tree_ssa_ifcombine): Inverse the order of the basic block walk,\n+\tincreases the number of combinings.\n \t* gimple.h (gsi_start_nondebug_after_labels_bb): New function.\n \n 2013-10-29  Mike Stump  <mikestump@comcast.net>\n@@ -489,7 +491,7 @@\n \t(CILK_SYNC_STMT): Added documentation for _Cilk_sync.\n \t* passes.texi (Cilk Keywords): New section that describes the compiler\n \tcode changes for handling Cilk Keywords.\n-\t\n+\n 2013-10-29  David Malcolm  <dmalcolm@redhat.com>\n \n \tPatch autogenerated by refactor_symtab.py from\n@@ -898,8 +900,7 @@\n \t(varpool_remove_node): Likewise.\n \t(varpool_node_for_decl): Likewise.\n \t(varpool_create_empty_node): Likewise.\n-\t* config/i386/i386.c (ix86_generate_version_dispatcher_body):\n-\tLikewise.\n+\t* config/i386/i386.c (ix86_generate_version_dispatcher_body): Likewise.\n \t(ix86_get_function_versions_dispatcher): Likewise.\n \n 2013-10-29  David Malcolm  <dmalcolm@redhat.com>\n@@ -927,13 +928,13 @@\n \t* symtab.c (symtab_hash): Change symtab_node_def to symtab_node_base.\n \t(assembler_name_hash): Likewise.\n \n-2013-10-29  Martin Liska <marxin.liska@gmail.com>\n+2013-10-29  Martin Liska  <marxin.liska@gmail.com>\n \n-       * doc/tree-ssa.texi (gimple_phi_result): Document.\n-       (gimple_phi_num_args, gimple_phi_arg): Likewise.\n-       (gimple_phi_arg_edge, gimple_phi_arg_def): Likewise.\n-       (PHI_RESULT, PHI_NUM_ARGS): Remove.\n-       (PHI_ARG_ELT, PHI_ARG_EDGE, PHI_ARG_DEF): Likewise.\n+\t* doc/tree-ssa.texi (gimple_phi_result): Document.\n+\t(gimple_phi_num_args, gimple_phi_arg): Likewise.\n+\t(gimple_phi_arg_edge, gimple_phi_arg_def): Likewise.\n+\t(PHI_RESULT, PHI_NUM_ARGS): Remove.\n+\t(PHI_ARG_ELT, PHI_ARG_EDGE, PHI_ARG_DEF): Likewise.\n \n 2013-10-29  Andrew MacLeod  <amacleod@redhat.com>\n \n@@ -1050,8 +1051,7 @@\n \tfields of the type (including inherited ones).\n \t(write_func_for_structure): Don't write fns for subclasses, only\n \tfor the ultimate base class within an inheritance hierarchy.\n-\tSubclasses-marking will be handled by the base class marking\n-\tfunctions.\n+\tSubclasses-marking will be handled by the base class marking functions.\n \t(write_types): Likewise.\n \t(write_local_func_for_structure): Likewise.\n \t(USED_BY_TYPED_GC_P): Emit allocators for subclasses that have\n@@ -1213,7 +1213,6 @@\n \t(VEC_PERM_AVX2): Ditto.\n \t(VEC_PERM_CONST): Ditto.\n \n-\n 2013-10-28  Joern Rennecke  <joern.rennecke@embecosm.com>\n \n \t* config/arc/arc.c (arc_ccfsm_post_advance):\n@@ -1310,17 +1309,15 @@\n \t(rs6000_legitimate_offset_address_p): Call\n \tlegitimate_constant_pool_address_p in strict mode for LRA.\n \t(rs6000_legitimate_address_p): Ditto.\n-\t(legitimate_lo_sum_address_p): Add code for LRA.\n-\tUse lra_in_progress.\n+\t(legitimate_lo_sum_address_p): Add code for LRA.  Use lra_in_progress.\n \t(rs6000_emit_move): Add LRA version of code to generate load/store\n \tof SDmode values.\n \t(rs6000_secondary_memory_needed_mode): New.\n \t(rs6000_alloc_sdmode_stack_slot): Do nothing for LRA.\n \t(rs6000_secondary_reload_class): Return NO_REGS for LRA for\n \tconstants, memory, and FP registers.\n \t(rs6000_lra_p): New.\n-\t* config/rs6000/rs6000.h (SECONDARY_MEMORY_NEEDED_MODE): New\n-\tmacro.\n+\t* config/rs6000/rs6000.h (SECONDARY_MEMORY_NEEDED_MODE): New macro.\n \t* config/rs6000/rs6000.opt (mlra): New option.\n \t* lra-spills.c (lra_final_code_change): Remove useless move insns.\n \n@@ -1379,8 +1376,8 @@\n 2013-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/58831\n-\t* alias.c (init_alias_analysis): At the beginning of each iteration, set\n-\tthe reg_seen[N] bit if static_reg_base_value[N] is non-null.\n+\t* alias.c (init_alias_analysis): At the beginning of each iteration,\n+\tset the reg_seen[N] bit if static_reg_base_value[N] is non-null.\n \n 2013-10-25  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "5a2597b01abe197a8ebd822f8e0632ef10f00282", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "patch": "@@ -42020,51 +42020,54 @@ ix86_bnd_prefixed_insn_p (rtx insn ATTRIBUTE_UNUSED)\n   return false;\n }\n \n+/* Calculate integer abs() using only SSE2 instructions.  */\n+\n void\n-ix86_expand_sse2_abs (rtx op0, rtx op1)\n+ix86_expand_sse2_abs (rtx target, rtx input)\n {\n-  enum machine_mode mode = GET_MODE (op0);\n-  rtx tmp0, tmp1;\n+  enum machine_mode mode = GET_MODE (target);\n+  rtx tmp0, tmp1, x;\n \n   switch (mode)\n     {\n       /* For 32-bit signed integer X, the best way to calculate the absolute\n \t value of X is (((signed) X >> (W-1)) ^ X) - ((signed) X >> (W-1)).  */\n       case V4SImode:\n-\ttmp0 = expand_simple_binop (mode, ASHIFTRT, op1,\n+\ttmp0 = expand_simple_binop (mode, ASHIFTRT, input,\n \t\t\t\t    GEN_INT (GET_MODE_BITSIZE\n-\t\t\t\t\t\t (GET_MODE_INNER (mode)) - 1),\n+\t\t\t\t\t     (GET_MODE_INNER (mode)) - 1),\n \t\t\t\t    NULL, 0, OPTAB_DIRECT);\n-\tif (tmp0)\n-\t  tmp1 = expand_simple_binop (mode, XOR, op1, tmp0,\n-\t\t\t\t      NULL, 0, OPTAB_DIRECT);\n-\tif (tmp0 && tmp1)\n-\t  expand_simple_binop (mode, MINUS, tmp1, tmp0,\n-\t\t\t       op0, 0, OPTAB_DIRECT);\n+\ttmp1 = expand_simple_binop (mode, XOR, tmp0, input,\n+\t\t\t\t    NULL, 0, OPTAB_DIRECT);\n+\tx = expand_simple_binop (mode, MINUS, tmp1, tmp0,\n+\t\t\t\t target, 0, OPTAB_DIRECT);\n \tbreak;\n \n       /* For 16-bit signed integer X, the best way to calculate the absolute\n \t value of X is max (X, -X), as SSE2 provides the PMAXSW insn.  */\n       case V8HImode:\n-\ttmp0 = expand_unop (mode, neg_optab, op1, NULL_RTX, 0);\n-\tif (tmp0)\n-\t  expand_simple_binop (mode, SMAX, op1, tmp0, op0, 0,\n-\t\t\t       OPTAB_DIRECT);\n+\ttmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n+\n+\tx = expand_simple_binop (mode, SMAX, tmp0, input,\n+\t\t\t\t target, 0, OPTAB_DIRECT);\n \tbreak;\n \n       /* For 8-bit signed integer X, the best way to calculate the absolute\n \t value of X is min ((unsigned char) X, (unsigned char) (-X)),\n \t as SSE2 provides the PMINUB insn.  */\n       case V16QImode:\n-\ttmp0 = expand_unop (mode, neg_optab, op1, NULL_RTX, 0);\n-\tif (tmp0)\n-\t  expand_simple_binop (V16QImode, UMIN, op1, tmp0, op0, 0,\n-\t\t\t       OPTAB_DIRECT);\n+\ttmp0 = expand_unop (mode, neg_optab, input, NULL_RTX, 0);\n+\n+\tx = expand_simple_binop (V16QImode, UMIN, tmp0, input,\n+\t\t\t\t target, 0, OPTAB_DIRECT);\n \tbreak;\n \n       default:\n-\tbreak;\n+\tgcc_unreachable ();\n     }\n+\n+  if (x != target)\n+    emit_move_insn (target, x);\n }\n \n /* Expand an insert into a vector register through pinsr insn."}, {"sha": "68f93f4e027199208c5e076b593407d58b0158b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5ccdfcd51ccbd0c9353f94f73bce18d42adbaac", "patch": "@@ -1,6 +1,6 @@\n 2013-10-31  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n-        Implement C++14 digit separators.\n+\tImplement C++14 digit separators.\n \t* g++.dg/cpp1y/digit-sep.C: New.\n \t* g++.dg/cpp1y/digit-sep-neg.C: New.\n \t* g++.dg/cpp1y/digit-sep-cxx11-neg.C: New.\n@@ -29,19 +29,6 @@\n \t2013-10-18  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58466\n-The Velvet Underground and Nico Full album vinyl LP\n-vinylanalog vinylanalog\ufffd13 videos\n-581\n-150,561\n-Like 1,087     Dislike 6\n-\n-Published on Jun 18, 2013\n-\n-The Velvet Underground and Nico legendary debut record produced by Andy Warhol (1967) presented in a non-modified recording of Verve V6-5008 vinyl LP. All efforts were made to realistically reproduce the natural vinyl stereo LP sound, so record levels were restrained and album noise is present.\n-\n-NOTE: THIS VIDEO IS FOR EDUCATION PURPOSES. ANY AND ALL COPYRIGHTS BELONG TO THE RIGHTFUL ARTISTS AND OWNERS.\n-\n-\n \t* g++.dg/cpp0x/variadic145.C: New.\n \n \t* g++.dg/cpp0x/sfinae49.C: New.\n@@ -80,7 +67,7 @@ NOTE: THIS VIDEO IS FOR EDUCATION PURPOSES. ANY AND ALL COPYRIGHTS BELONG TO THE\n \n 2013-10-30  Mikael Pettersson  <mikpe@it.uu.se>\n \n-\t* PR rtl-optimization/58369\n+\tPR rtl-optimization/58369\n \t* g++.dg/torture/pr58369.C: New test.\n \n 2013-10-30  Tobias Burnus  <burnus@net-b.de>\n@@ -133,7 +120,7 @@ NOTE: THIS VIDEO IS FOR EDUCATION PURPOSES. ANY AND ALL COPYRIGHTS BELONG TO THE\n \t* gcc.dg/ira-shrinkwrap-prep-2.c: Likewise.\n \n 2013-10-29  Andrew Pinski <apinski@cavium.com>\n-            Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n+\t    Zhenqiang Chen  <zhenqiang.chen@linaro.org>\n \n \t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-1.c: New test case.\n \t* gcc.dg/tree-ssa/ssa-ifcombine-ccmp-2.c: New test case.\n@@ -2429,6 +2416,7 @@ NOTE: THIS VIDEO IS FOR EDUCATION PURPOSES. ANY AND ALL COPYRIGHTS BELONG TO THE\n \n 2013-08-08  Richard Sandiford  <rdsandiford@googlemail.com>\n \n+\tPR rtl-optimization/58079\n \t* gcc.dg/torture/pr58079.c: New test.\n \n 2013-08-07  Eric Botcazou  <ebotcazou@adacore.com>"}]}