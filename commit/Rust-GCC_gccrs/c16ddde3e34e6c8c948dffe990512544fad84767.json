{"sha": "c16ddde3e34e6c8c948dffe990512544fad84767", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzE2ZGRkZTNlMzRlNmM4Yzk0OGRmZmU5OTA1MTI1NDRmYWQ4NDc2Nw==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-06-20T00:35:42Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-06-20T00:35:42Z"}, "message": "calls.c (expand_call): Initialize \"src\" and \"dest\".\n\n        * calls.c (expand_call): Initialize \"src\" and \"dest\".\n        * stmt.c (expand_return): Likewise.\n        * expmed.c (extract_split_bit_field): Similarly for \"result\"\n        * gcse.c (compute_hash_table): Mark first arg as unused.\n        * jump.c (jump_optimize): Initialize reversep.\n        * tree.c (make_node): Initialize length.\n\nFrom-SVN: r20629", "tree": {"sha": "76be7f9aafbf2a7cead5502b9c955038688e5e31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76be7f9aafbf2a7cead5502b9c955038688e5e31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c16ddde3e34e6c8c948dffe990512544fad84767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16ddde3e34e6c8c948dffe990512544fad84767", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c16ddde3e34e6c8c948dffe990512544fad84767", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c16ddde3e34e6c8c948dffe990512544fad84767/comments", "author": null, "committer": null, "parents": [{"sha": "2305ac0d57edd55ab075ced9f7376c5f85ef0298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2305ac0d57edd55ab075ced9f7376c5f85ef0298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2305ac0d57edd55ab075ced9f7376c5f85ef0298"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "c626e8f381dac5b781cdfbc0dad4b51d3746874f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -1,5 +1,12 @@\n Sat Jun 20 00:36:16 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* calls.c (expand_call): Initialize \"src\" and \"dest\".\n+\t* stmt.c (expand_return): Likewise.\n+\t* expmed.c (extract_split_bit_field): Similarly for \"result\"\n+\t* gcse.c (compute_hash_table): Mark first arg as unused.\n+\t* jump.c (jump_optimize): Initialize reversep.\n+\t* tree.c (make_node): Initialize length.\n+\n \t* c-common.c (check_format_info): Initialize length_char and\n \tfci to keep -Wall quiet.\n "}, {"sha": "6271a611a8c643f481ec9ca24983503d5548ef02", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -2116,7 +2116,7 @@ expand_call (exp, target, ignore)\n \t Deal with them explicitly by copying from the return registers\n \t into the target MEM locations.  */\n       int bytes = int_size_in_bytes (TREE_TYPE (exp));\n-      rtx src, dst;\n+      rtx src = NULL, dst = NULL;\n       int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (exp)), BITS_PER_WORD);\n       int bitpos, xbitpos, big_endian_correction = 0;\n       "}, {"sha": "d952d1b0ab82e341369733e3423e6789e966f019", "filename": "gcc/expmed.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -1614,7 +1614,7 @@ extract_split_bit_field (op0, bitsize, bitpos, unsignedp, align)\n {\n   int unit;\n   int bitsdone = 0;\n-  rtx result;\n+  rtx result = NULL_RTX;\n   int first = 1;\n \n   /* Make sure UNIT isn't larger than BITS_PER_WORD, we can only handle that"}, {"sha": "bcabf3e52ec019b00d69b7ded0143a49e70def94", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -2011,7 +2011,7 @@ record_last_set_info (dest, setter)\n \n static void\n compute_hash_table (f, set_p)\n-     rtx f;\n+     rtx f ATTRIBUTE_UNUSED;\n      int set_p;\n {\n   int bb;"}, {"sha": "273d31d662cde5e17faf7bd08b4a6c3946795391", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -598,7 +598,7 @@ jump_optimize (f, cross_jump, noop_moves, after_regscan)\n \t  rtx reallabelprev;\n \t  rtx temp, temp1, temp2, temp3, temp4, temp5, temp6;\n \t  rtx nlabel;\n-\t  int this_is_simplejump, this_is_condjump, reversep;\n+\t  int this_is_simplejump, this_is_condjump, reversep = 0;\n \t  int this_is_condjump_in_parallel;\n #if 0\n \t  /* If NOT the first iteration, if this is the last jump pass"}, {"sha": "138783b47b6ed8f492279bbdf44be1fcf0de6d06", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -2452,7 +2452,7 @@ expand_return (retval)\n       int n_regs = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n       int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (retval_rhs)),BITS_PER_WORD);\n       rtx *result_pseudos = (rtx *) alloca (sizeof (rtx) * n_regs);\n-      rtx result_reg, src, dst;\n+      rtx result_reg, src = NULL_RTX, dst = NULL_RTX;\n       rtx result_val = expand_expr (retval_rhs, NULL_RTX, VOIDmode, 0);\n       enum machine_mode tmpmode, result_reg_mode;\n "}, {"sha": "baf4551cadda32f55fd0fb2e227fcf58aa152499", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c16ddde3e34e6c8c948dffe990512544fad84767/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c16ddde3e34e6c8c948dffe990512544fad84767", "patch": "@@ -936,7 +936,7 @@ make_node (code)\n {\n   register tree t;\n   register int type = TREE_CODE_CLASS (code);\n-  register int length;\n+  register int length = 0;\n   register struct obstack *obstack = current_obstack;\n   register int i;\n #ifdef GATHER_STATISTICS"}]}