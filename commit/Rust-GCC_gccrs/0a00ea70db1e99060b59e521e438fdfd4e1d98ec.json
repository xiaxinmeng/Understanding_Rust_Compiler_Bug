{"sha": "0a00ea70db1e99060b59e521e438fdfd4e1d98ec", "node_id": "C_kwDOANBUbNoAKDBhMDBlYTcwZGIxZTk5MDYwYjU5ZTUyMWU0MzhmZGZkNGUxZDk4ZWM", "commit": {"author": {"name": "Owen Avery", "email": "powerboat9.gamer@gmail.com", "date": "2023-02-05T01:15:52Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2023-04-13T11:50:47Z"}, "message": "Move functionality into HIR::ExprStmt from deriving classes\n\ngcc/rust/ChangeLog:\n\n\t* hir/tree/rust-hir-stmt.h\n\t(ExprStmt::expr): Add field.\n\t(ExprStmt::get_expr): Add method.\n\t(ExprStmt::ExprStmt): Add copy/move constructors, modify existing constructor.\n\t(ExprStmt::operator=): Add assignment operator.\n\t(ExprStmtWithoutBlock::expr): Remove field.\n\t(ExprStmtWithoutBlock::get_expr): Remove method.\n\t(ExprStmtWithoutBlock::ExprStmt):\n\tRemove copy/move constructors, modify existing constructor.\n\t(ExprStmtWithoutBlock::operator=): Remove assignment operator.\n\t(ExprStmtWithBlock::expr): Remove field.\n\t(ExprStmtWithBlock::get_expr): Remove method.\n\t(ExprStmtWithBlock::ExprStmt): Remove copy/move constructors, modify existing constructor.\n\t(ExprStmtWithBlock::operator=): Remove assignment operator.\n\nSigned-off-by: Owen Avery <powerboat9.gamer@gmail.com>", "tree": {"sha": "51c69db49fe75f17e9d8efaa564b98547c877037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/51c69db49fe75f17e9d8efaa564b98547c877037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a00ea70db1e99060b59e521e438fdfd4e1d98ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a00ea70db1e99060b59e521e438fdfd4e1d98ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a00ea70db1e99060b59e521e438fdfd4e1d98ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a00ea70db1e99060b59e521e438fdfd4e1d98ec/comments", "author": {"login": "powerboat9", "id": 7397652, "node_id": "MDQ6VXNlcjczOTc2NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7397652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/powerboat9", "html_url": "https://github.com/powerboat9", "followers_url": "https://api.github.com/users/powerboat9/followers", "following_url": "https://api.github.com/users/powerboat9/following{/other_user}", "gists_url": "https://api.github.com/users/powerboat9/gists{/gist_id}", "starred_url": "https://api.github.com/users/powerboat9/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/powerboat9/subscriptions", "organizations_url": "https://api.github.com/users/powerboat9/orgs", "repos_url": "https://api.github.com/users/powerboat9/repos", "events_url": "https://api.github.com/users/powerboat9/events{/privacy}", "received_events_url": "https://api.github.com/users/powerboat9/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "132a5011e384994e6121eb606f2442ca61fbe908", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/132a5011e384994e6121eb606f2442ca61fbe908", "html_url": "https://github.com/Rust-GCC/gccrs/commit/132a5011e384994e6121eb606f2442ca61fbe908"}], "stats": {"total": 72, "additions": 26, "deletions": 46}, "files": [{"sha": "f9fc6a646d7f716e54715701e263b6541f62cf37", "filename": "gcc/rust/hir/tree/rust-hir-stmt.h", "status": "modified", "additions": 26, "deletions": 46, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a00ea70db1e99060b59e521e438fdfd4e1d98ec/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a00ea70db1e99060b59e521e438fdfd4e1d98ec/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-stmt.h?ref=0a00ea70db1e99060b59e521e438fdfd4e1d98ec", "patch": "@@ -158,56 +158,57 @@ class ExprStmt : public Stmt\n {\n   // TODO: add any useful virtual functions\n \n+  std::unique_ptr<Expr> expr;\n   Location locus;\n \n public:\n   Location get_locus () const override final { return locus; }\n \n   bool is_item () const override final { return false; }\n \n+  Expr *get_expr () { return expr.get (); }\n+\n+  // Copy constructor with clone\n+  ExprStmt (ExprStmt const &other)\n+    : Stmt (other), expr (other.expr->clone_expr ()), locus (other.locus)\n+  {}\n+\n+  // Overloaded assignment operator to clone\n+  ExprStmt &operator= (ExprStmt const &other)\n+  {\n+    Stmt::operator= (other);\n+    expr = other.expr->clone_expr ();\n+    locus = other.locus;\n+\n+    return *this;\n+  }\n+\n+  // move constructors\n+  ExprStmt (ExprStmt &&other) = default;\n+  ExprStmt &operator= (ExprStmt &&other) = default;\n+\n protected:\n-  ExprStmt (Analysis::NodeMapping mappings, Location locus)\n-    : Stmt (std::move (mappings)), locus (locus)\n+  ExprStmt (Analysis::NodeMapping mappings, std::unique_ptr<Expr> expr, Location locus)\n+    : Stmt (std::move (mappings)), expr (std::move (expr)), locus (locus)\n   {}\n };\n \n /* Statement containing an expression without a block (or, due to technical\n  * difficulties, can only be guaranteed to hold an expression). */\n class ExprStmtWithoutBlock : public ExprStmt\n {\n-  std::unique_ptr<Expr> expr;\n \n public:\n   std::string as_string () const override;\n \n   ExprStmtWithoutBlock (Analysis::NodeMapping mappings,\n \t\t\tstd::unique_ptr<Expr> expr, Location locus)\n-    : ExprStmt (std::move (mappings), locus), expr (std::move (expr))\n+    : ExprStmt (std::move (mappings), std::move (expr), locus)\n   {}\n \n-  // Copy constructor with clone\n-  ExprStmtWithoutBlock (ExprStmtWithoutBlock const &other)\n-    : ExprStmt (other), expr (other.expr->clone_expr ())\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock const &other)\n-  {\n-    ExprStmt::operator= (other);\n-    expr = other.expr->clone_expr ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ExprStmtWithoutBlock (ExprStmtWithoutBlock &&other) = default;\n-  ExprStmtWithoutBlock &operator= (ExprStmtWithoutBlock &&other) = default;\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n \n-  Expr *get_expr () { return expr.get (); }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -220,7 +221,6 @@ class ExprStmtWithoutBlock : public ExprStmt\n // Statement containing an expression with a block\n class ExprStmtWithBlock : public ExprStmt\n {\n-  std::unique_ptr<ExprWithBlock> expr;\n   bool must_be_unit;\n \n public:\n@@ -229,33 +229,13 @@ class ExprStmtWithBlock : public ExprStmt\n   ExprStmtWithBlock (Analysis::NodeMapping mappings,\n \t\t     std::unique_ptr<ExprWithBlock> expr, Location locus,\n \t\t     bool must_be_unit)\n-    : ExprStmt (std::move (mappings), locus), expr (std::move (expr)),\n+    : ExprStmt (std::move (mappings), std::move (expr), locus),\n       must_be_unit (must_be_unit)\n   {}\n \n-  // Copy constructor with clone\n-  ExprStmtWithBlock (ExprStmtWithBlock const &other)\n-    : ExprStmt (other), expr (other.expr->clone_expr_with_block ())\n-  {}\n-\n-  // Overloaded assignment operator to clone\n-  ExprStmtWithBlock &operator= (ExprStmtWithBlock const &other)\n-  {\n-    ExprStmt::operator= (other);\n-    expr = other.expr->clone_expr_with_block ();\n-\n-    return *this;\n-  }\n-\n-  // move constructors\n-  ExprStmtWithBlock (ExprStmtWithBlock &&other) = default;\n-  ExprStmtWithBlock &operator= (ExprStmtWithBlock &&other) = default;\n-\n   void accept_vis (HIRFullVisitor &vis) override;\n   void accept_vis (HIRStmtVisitor &vis) override;\n \n-  ExprWithBlock *get_expr () { return expr.get (); }\n-\n   bool is_unit_check_needed () const override { return must_be_unit; }\n \n protected:"}]}