{"sha": "e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTg1OTg4YjVkNWQ3NWExM2UwYTY5MDhhYmQ4ZTI4N2YxYjYyNjRjNg==", "commit": {"author": {"name": "Manfred Hollstein", "email": "manfred@s-direktnet.de", "date": "1997-10-26T18:28:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1997-10-26T18:28:57Z"}, "message": "Makefile.in (compare, [...]): Combined to one ruleset determining actions to be performed via $@.\n\n        * Makefile.in (compare, compare-lean, compare3): Combined to one\n        ruleset determining actions to be performed via $@.\n        (compare4, compare4-lean): New targets.\n        (gnucompare, gnucompare3): Combined to one ruleset determining\n        actions to be performed via $@. Also, note which files failed\n        the comparison test in .bad_compare.\n        (gnucompare-lean, gnucompare3-lean, gnucompare4-lean): New targets.\n\nFrom-SVN: r16184", "tree": {"sha": "493245c2bfc3a529a0b36ee1a5284c6b7b1eee0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/493245c2bfc3a529a0b36ee1a5284c6b7b1eee0d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e85988b5d5d75a13e0a6908abd8e287f1b6264c6/comments", "author": null, "committer": null, "parents": [{"sha": "7337c67fcd3ff3f5cc47c611462fdb948c3f6bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7337c67fcd3ff3f5cc47c611462fdb948c3f6bfa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7337c67fcd3ff3f5cc47c611462fdb948c3f6bfa"}], "stats": {"total": 93, "additions": 32, "deletions": 61}, "files": [{"sha": "7fa5613a7a4e844d21503bc6b22c7285332ba45c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e85988b5d5d75a13e0a6908abd8e287f1b6264c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e85988b5d5d75a13e0a6908abd8e287f1b6264c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "patch": "@@ -1,3 +1,13 @@\n+Sun Oct 26 11:32:16 1997  Manfred Hollstein  <manfred@s-direktnet.de>\n+\n+\t* Makefile.in (compare, compare-lean, compare3): Combined to one\n+\truleset determining actions to be performed via $@.\n+\t(compare4, compare4-lean): New targets.\n+\t(gnucompare, gnucompare3): Combined to one ruleset determining\n+\tactions to be performed via $@. Also, note which files failed\n+\tthe comparison test in .bad_compare.\n+\t(gnucompare-lean, gnucompare3-lean, gnucompare4-lean): New targets.\n+\n Sun Oct 26 10:06:11 1997  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \t* fold-const (fold): Also simplify FLOOR_DIV_EXPR to EXACT_DIV_EXPR"}, {"sha": "2f72f7504990ea6c4076a66ac052abe6b5208036", "filename": "gcc/Makefile.in", "status": "modified", "additions": 22, "deletions": 61, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e85988b5d5d75a13e0a6908abd8e287f1b6264c6/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e85988b5d5d75a13e0a6908abd8e287f1b6264c6/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e85988b5d5d75a13e0a6908abd8e287f1b6264c6", "patch": "@@ -2617,18 +2617,20 @@ bootstrap3: force\n # stage2 directory.\n \n # ./ avoids bug in some versions of tail.\n-compare: force\n+compare compare3 compare4 compare-lean compare3-lean compare4-lean: force\n \t-rm -f .bad_compare\n+\tcase \"$@\" in compare | compare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^compare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n \tfor file in *$(objext); do \\\n \t  tail +16c ./$$file > tmp-foo1; \\\n-\t  tail +16c stage2/$$file > tmp-foo2 \\\n+\t  tail +16c stage$$stage/$$file > tmp-foo2 \\\n \t    && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n \tdone\n+\tcase \"$@\" in compare | compare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^compare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n \tfor dir in tmp-foo $(SUBDIRS); do \\\n \t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n \t    for file in $$dir/*$(objext); do \\\n \t      tail +16c ./$$file > tmp-foo1; \\\n-\t      tail +16c stage2/$$file > tmp-foo2 \\\n+\t      tail +16c stage$$stage/$$file > tmp-foo2 \\\n \t        && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n \t    done; \\\n \t  fi; \\\n@@ -2638,81 +2640,40 @@ compare: force\n \t  echo \"Bootstrap comparison failure!\"; \\\n \t  cat .bad_compare; \\\n \t  exit 1; \\\n-\telse true; \\\n+\telse \\\n+\t  case \"$@\" in \\\n+\t    *-lean ) rm -rf stage$$stage ;; \\\n+\t  esac; true; \\\n \tfi\n \n-# ./ avoids bug in some versions of tail.\n-compare-lean: force\n+# Compare the object files in the current directory with those in the\n+# stage2 directory.  Use gnu cmp (diffutils v2.4 or later) to avoid\n+# running tail and the overhead of twice copying each object file.\n+\n+gnucompare gnucompare3 gnucompare4 gnucompare-lean gnucompare3-lean gnucompare4-lean: force\n \t-rm -f .bad_compare\n+\tcase \"$@\" in gnucompare | gnucompare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^gnucompare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n \tfor file in *$(objext); do \\\n-\t  tail +16c ./$$file > tmp-foo1; \\\n-\t  tail +16c stage2/$$file > tmp-foo2 \\\n-\t    && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n+\t  (cmp --ignore-initial=16 $$file stage$$stage/$$file > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n \tdone\n+\tcase \"$@\" in gnucompare | gnucompare-lean ) stage=2 ;; * ) stage=`echo $@ | sed -e 's,^gnucompare\\([0-9][0-9]*\\).*,\\1,'` ;; esac; \\\n \tfor dir in tmp-foo $(SUBDIRS); do \\\n \t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n \t    for file in $$dir/*$(objext); do \\\n-\t      tail +16c ./$$file > tmp-foo1; \\\n-\t      tail +16c stage2/$$file > tmp-foo2 \\\n-\t        && (cmp tmp-foo1 tmp-foo2 > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n+\t      (cmp --ignore-initial=16 $$file stage$$stage/$$file > /dev/null 2>&1 || echo $$file differs >> .bad_compare) || true; \\\n \t    done; \\\n \t  fi; \\\n \tdone\n-\t-rm -f tmp-foo*\n \tif [ -f .bad_compare ]; then \\\n \t  echo \"Bootstrap comparison failure!\"; \\\n \t  cat .bad_compare; \\\n \t  exit 1; \\\n-\telse rm -rf stage2; \\\n+\telse \\\n+\t  case \"$@\" in \\\n+\t    *-lean ) rm -rf stage$$stage ;; \\\n+\t  esac; true; \\\n \tfi\n \n-# Similar, but compare with stage3 directory\n-compare3: force\n-\tfor file in *$(objext); do \\\n-\t  tail +16c ./$$file > tmp-foo1; \\\n-\t  tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n-\t    && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \\\n-\tdone\n-\tfor dir in tmp-foo $(SUBDIRS); do \\\n-\t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n-\t    for file in $$dir/*$(objext); do \\\n-\t      tail +16c ./$$file > tmp-foo1; \\\n-\t      tail +16c stage3/$$file > tmp-foo2 2>/dev/null \\\n-\t        && (cmp tmp-foo1 tmp-foo2 || echo $$file differs) || true; \\\n-\t    done; \\\n-\t  fi; \\\n-\tdone\n-\t-rm -f tmp-foo*\n-\n-# Compare the object files in the current directory with those in the\n-# stage2 directory.  Use gnu cmp (diffutils v2.4 or later) to avoid\n-# running tail and the overhead of twice copying each object file.\n-\n-gnucompare: force\n-\tfor file in *$(objext); do \\\n-\t  cmp --ignore-initial=16 $$file stage2/$$file || true ; \\\n-\tdone\n-\tfor dir in tmp-foo $(SUBDIRS); do \\\n-\t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n-\t    for file in $$dir/*$(objext); do \\\n-\t      cmp --ignore-initial=16 $$file stage2/$$file || true ; \\\n-\t    done; \\\n-\t  fi; \\\n-\tdone\n-\n-# Similar, but compare with stage3 directory\n-gnucompare3: force\n-\tfor file in *$(objext); do \\\n-\t  cmp --ignore-initial=16 $$file stage3/$$file || true ; \\\n-\tdone\n-\tfor dir in tmp-foo $(SUBDIRS); do \\\n-\t  if [ \"`echo $$dir/*$(objext)`\" != \"$$dir/*$(objext)\" ] ; then \\\n-\t    for file in $$dir/*$(objext); do \\\n-\t      cmp --ignore-initial=16 $$file stage3/$$file || true ; \\\n-\t    done; \\\n-\t  fi; \\\n-\tdone\n-\n # Copy the object files from a particular stage into a subdirectory.\n stage1-start:\n \t-if [ -d stage1 ] ; then true ; else mkdir stage1 ; fi"}]}