{"sha": "6c44cf797280a744e28133ceb3c1e483557d5cf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmM0NGNmNzk3MjgwYTc0NGUyODEzM2NlYjNjMWU0ODM1NTdkNWNmNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-09T15:47:39Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2009-04-09T15:47:39Z"}, "message": "Change spaces to tab.\n\nFrom-SVN: r145843", "tree": {"sha": "140e1b90c5fd0573ec1857b4976fef0ada6314cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/140e1b90c5fd0573ec1857b4976fef0ada6314cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c44cf797280a744e28133ceb3c1e483557d5cf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c44cf797280a744e28133ceb3c1e483557d5cf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c44cf797280a744e28133ceb3c1e483557d5cf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c44cf797280a744e28133ceb3c1e483557d5cf6/comments", "author": null, "committer": null, "parents": [{"sha": "d18ff35aff6a6a47b336b6e61ea8c645823c6230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d18ff35aff6a6a47b336b6e61ea8c645823c6230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d18ff35aff6a6a47b336b6e61ea8c645823c6230"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "45c31fc0a69a612bd91a8ce3dc7132cfcf308945", "filename": "gcc/ChangeLog", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c44cf797280a744e28133ceb3c1e483557d5cf6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c44cf797280a744e28133ceb3c1e483557d5cf6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c44cf797280a744e28133ceb3c1e483557d5cf6", "patch": "@@ -338,40 +338,40 @@\n \n 2009-04-09  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * config/i386/i386.md (cmpcc): New.\n-        * config/i386/sync.md (sync_compare_and_swap*): Set FLAGS_REG.\n-        (sync_compare_and_swap_cc*): Delete.\n-\n-        * config/s390/s390.c (s390_compare_emitted): Remove.\n-        (s390_emit_compare): Handle MODE_CC s390_compare_op0 like\n-        s390_compare_emitted used to be handled.  Assert that modes match.\n-        (s390_emit_compare_and_swap): Use s390_emit_compare, do not\n-        refer to sync_compare_and_swap_ccsi.\n-        * config/s390/s390.h (s390_compare_emitted): Remove.\n-        * config/s390/s390.md (seq): Look for MODE_CC s390_compare_op0\n-        instead of s390_compare_emitted.\n-        (stack_protect_test, sync_compare_and_swap_cc): Set s390_compare_op0\n-        instead of s390_compare_emitted.\n-        * config/s390/s390.md (cmpcc): New.\n-        (sync_compare_and_swapqi, sync_compare_and_swaphi): Clobber\n-        CC_REGNUM, do not pretend it's set.\n-        (sync_compare_and_swap_cc*): Delete.\n-        * config/s390/predicates.md (cc_reg_operand): New.\n-\n-        * expr.c (sync_compare_and_swap_cc): Delete.\n-        * optabs.h (sync_compare_and_swap_cc): Delete.\n-        * optabs.c (prepare_cmp_insn): Ignore which specific CCmode\n-        is being used with can_compare_p.\n-        (emit_cmp_and_jump_insn_1): Likewise when looking in the optab.\n-        (find_cc_set): New.\n-        (expand_bool_compare_and_swap): Do not use sync_compare_and_swap_cc,\n-        look for a MODE_CC set instead.  Use emit_store_flag.\n-        (expand_compare_and_swap_loop): Likewise, with some additional\n-        complication to avoid a force_reg when useless.  Use\n-        emit_cmp_and_jump_insns.\n-        * genopinit.c (optabs): Delete sync_compare_and_swap_cc.\n-        * doc/md.texi (sync_compare_and_swap_cc): Merge with\n-        sync_compare_and_swap documentation.\n+\t* config/i386/i386.md (cmpcc): New.\n+\t* config/i386/sync.md (sync_compare_and_swap*): Set FLAGS_REG.\n+\t(sync_compare_and_swap_cc*): Delete.\n+\n+\t* config/s390/s390.c (s390_compare_emitted): Remove.\n+\t(s390_emit_compare): Handle MODE_CC s390_compare_op0 like\n+\ts390_compare_emitted used to be handled.  Assert that modes match.\n+\t(s390_emit_compare_and_swap): Use s390_emit_compare, do not\n+\trefer to sync_compare_and_swap_ccsi.\n+\t* config/s390/s390.h (s390_compare_emitted): Remove.\n+\t* config/s390/s390.md (seq): Look for MODE_CC s390_compare_op0\n+\tinstead of s390_compare_emitted.\n+\t(stack_protect_test, sync_compare_and_swap_cc): Set s390_compare_op0\n+\tinstead of s390_compare_emitted.\n+\t* config/s390/s390.md (cmpcc): New.\n+\t(sync_compare_and_swapqi, sync_compare_and_swaphi): Clobber\n+\tCC_REGNUM, do not pretend it's set.\n+\t(sync_compare_and_swap_cc*): Delete.\n+\t* config/s390/predicates.md (cc_reg_operand): New.\n+\n+\t* expr.c (sync_compare_and_swap_cc): Delete.\n+\t* optabs.h (sync_compare_and_swap_cc): Delete.\n+\t* optabs.c (prepare_cmp_insn): Ignore which specific CCmode\n+\tis being used with can_compare_p.\n+\t(emit_cmp_and_jump_insn_1): Likewise when looking in the optab.\n+\t(find_cc_set): New.\n+\t(expand_bool_compare_and_swap): Do not use sync_compare_and_swap_cc,\n+\tlook for a MODE_CC set instead.  Use emit_store_flag.\n+\t(expand_compare_and_swap_loop): Likewise, with some additional\n+\tcomplication to avoid a force_reg when useless.  Use\n+\temit_cmp_and_jump_insns.\n+\t* genopinit.c (optabs): Delete sync_compare_and_swap_cc.\n+\t* doc/md.texi (sync_compare_and_swap_cc): Merge with\n+\tsync_compare_and_swap documentation.\n \n 2009-04-09  Jan Hubicka  <jh@suse.cz>\n \n@@ -446,8 +446,8 @@\n \n 2009-04-08  Paolo Bonzini  <bonzini@gnu.org>\n \n-        * recog.c (ordered_comparison_operator): New.\n-        * gensupport.c (std_preds): Add it.\n+\t* recog.c (ordered_comparison_operator): New.\n+\t* gensupport.c (std_preds): Add it.\n \t* doc/md.texi (Machine-Independent Predicates): Document it.\n \n 2009-04-08  Jan Hubicka  <jh@suse.cz>\n@@ -500,7 +500,7 @@\n 2009-04-08 Bingfeng Mei <bmei@broadcom.com>\n \n \t* fold-const.c (const_binop): Combine two VECTOR_CST under operation \n-        CODE to produce a new one. Add a prototype to use fold_convert_const\n+\tCODE to produce a new one. Add a prototype to use fold_convert_const\n \n 2009-04-08  Danny Smith  <dannysmith@users.sourceforge.net>\n "}]}