{"sha": "4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5NTM5M2IzY2UyNTljMTFlMGZiN2VhOTk4NWNhNDM1N2IzN2UxYQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@netcologne.de", "date": "2015-01-21T19:40:54Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2015-01-21T19:40:54Z"}, "message": "re PR fortran/57023 (Not packing arrays with changing variable used for size)\n\n2015-01-21  Thomas Koenig  <tkoenig@netcologne.de>\n\n\tPR fortran/57023\n\t* dependency.c (callback_dummy_intent_not_int):  New function.\n\t(dummy_intent_not_in):  New function.\n\t(gfc_full_array_ref_p):  Use dummy_intent_not_in.\n\n2015-01-21  Thomas Koenig  <tkoenig@netcologne.de>\n\n\tPR fortran/57023\n\t* gfortran.dg/internal_pack_15.f90:  New test.\n\nFrom-SVN: r219963", "tree": {"sha": "ea4531562c1ed52959afd99fdc5026ce907f4279", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea4531562c1ed52959afd99fdc5026ce907f4279"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/comments", "author": {"login": "tkoenig1", "id": 12239367, "node_id": "MDQ6VXNlcjEyMjM5MzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12239367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tkoenig1", "html_url": "https://github.com/tkoenig1", "followers_url": "https://api.github.com/users/tkoenig1/followers", "following_url": "https://api.github.com/users/tkoenig1/following{/other_user}", "gists_url": "https://api.github.com/users/tkoenig1/gists{/gist_id}", "starred_url": "https://api.github.com/users/tkoenig1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tkoenig1/subscriptions", "organizations_url": "https://api.github.com/users/tkoenig1/orgs", "repos_url": "https://api.github.com/users/tkoenig1/repos", "events_url": "https://api.github.com/users/tkoenig1/events{/privacy}", "received_events_url": "https://api.github.com/users/tkoenig1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "173148bb1200269fb5d9c0aab13ca9c34fbc8d36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173148bb1200269fb5d9c0aab13ca9c34fbc8d36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173148bb1200269fb5d9c0aab13ca9c34fbc8d36"}], "stats": {"total": 126, "additions": 123, "deletions": 3}, "files": [{"sha": "db43df4cd7800cced5ec842e33b219f35cc154ec", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "patch": "@@ -1,3 +1,10 @@\n+2015-01-21  Thomas Koenig  <tkoenig@netcologne.de>\n+\n+\tPR fortran/57023\n+\t* dependency.c (callback_dummy_intent_not_int):  New function.\n+\t(dummy_intent_not_in):  New function.\n+\t(gfc_full_array_ref_p):  Use dummy_intent_not_in.\n+\n 2015-01-18  Andre Vehreschild  <vehre@gmx.de>\n \t    Janus Weil <janus@gcc.gnu.org>\n "}, {"sha": "63c66303497ad99b1f5cc7ee9fc0b7a2a2b3833d", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "patch": "@@ -1853,11 +1853,40 @@ gfc_check_element_vs_element (gfc_ref *lref, gfc_ref *rref, int n)\n   return GFC_DEP_EQUAL;\n }\n \n+/* Callback function for checking if an expression depends on a\n+   dummy variable which is any other than INTENT(IN).  */\n+\n+static int\n+callback_dummy_intent_not_in (gfc_expr **ep,\n+\t\t\t      int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t\t      void *data ATTRIBUTE_UNUSED)\n+{\n+  gfc_expr *e = *ep;\n+\n+  if (e->expr_type == EXPR_VARIABLE && e->symtree\n+      && e->symtree->n.sym->attr.dummy)\n+    return e->symtree->n.sym->attr.intent != INTENT_IN;\n+  else\n+    return 0;\n+}\n+\n+/* Auxiliary function to check if subexpressions have dummy variables which\n+   are not intent(in).\n+*/\n+\n+static bool\n+dummy_intent_not_in (gfc_expr **ep)\n+{\n+  return gfc_expr_walker (ep, callback_dummy_intent_not_in, NULL);\n+}\n \n /* Determine if an array ref, usually an array section specifies the\n    entire array.  In addition, if the second, pointer argument is\n    provided, the function will return true if the reference is\n-   contiguous; eg. (:, 1) gives true but (1,:) gives false.  */\n+   contiguous; eg. (:, 1) gives true but (1,:) gives false. \n+   If one of the bounds depends on a dummy variable which is\n+   not INTENT(IN), also return false, because the user may\n+   have changed the variable.  */\n \n bool\n gfc_full_array_ref_p (gfc_ref *ref, bool *contiguous)\n@@ -1921,14 +1950,16 @@ gfc_full_array_ref_p (gfc_ref *ref, bool *contiguous)\n \t  && (!ref->u.ar.as\n \t      || !ref->u.ar.as->lower[i]\n \t      || gfc_dep_compare_expr (ref->u.ar.start[i],\n-\t\t\t\t       ref->u.ar.as->lower[i])))\n+\t\t\t\t       ref->u.ar.as->lower[i])\n+\t      || dummy_intent_not_in (&ref->u.ar.start[i])))\n \tlbound_OK = false;\n       /* Check the upper bound.  */\n       if (ref->u.ar.end[i]\n \t  && (!ref->u.ar.as\n \t      || !ref->u.ar.as->upper[i]\n \t      || gfc_dep_compare_expr (ref->u.ar.end[i],\n-\t\t\t\t       ref->u.ar.as->upper[i])))\n+\t\t\t\t       ref->u.ar.as->upper[i])\n+\t      || dummy_intent_not_in (&ref->u.ar.end[i])))\n \tubound_OK = false;\n       /* Check the stride.  */\n       if (ref->u.ar.stride[i]"}, {"sha": "314e9e1acc1483c0d499fbdc488143563ad7c697", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "patch": "@@ -1,3 +1,8 @@\n+2015-01-21  Thomas Koenig  <tkoenig@netcologne.de>\n+\n+\tPR fortran/57023\n+\t* gfortran.dg/internal_pack_15.f90:  New test.\n+\n 2015-01-21  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gcc/testsuite/c-c++-common/tsan/step.c: New testcase."}, {"sha": "13e33047e48e7dd6d07f3d88410c1c9480e0c16f", "filename": "gcc/testsuite/gfortran.dg/internal_pack_15.f90", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4195393b3ce259c11e0fb7ea9985ca4357b37e1a/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_15.f90?ref=4195393b3ce259c11e0fb7ea9985ca4357b37e1a", "patch": "@@ -0,0 +1,77 @@\n+! { dg-do run }\n+! { dg-options \"-Warray-temporaries\" }\n+! PR 57023\n+! This used to cause wrong packing because a(1:n,1:n) was\n+! assumed to be a full array.\n+module mymod\n+  implicit none\n+contains\n+  subroutine foo1(a,n)\n+    integer, dimension(n,n), intent(inout) :: a\n+    integer :: n\n+    n = n - 1\n+    call baz(a(1:n,1:n),n)  ! { dg-warning \"array temporary\" }\n+  end subroutine foo1\n+\n+  subroutine foo2(a,n)\n+    integer, dimension(n,n), intent(inout) :: a\n+    integer :: n\n+    call decrement(n)\n+    call baz(a(1:n,1:n),n)  ! { dg-warning \"array temporary\" }\n+  end subroutine foo2\n+\n+  subroutine foo3(a,n)\n+    integer, dimension(n,n), intent(inout) :: a\n+    integer :: n, m\n+    m = n - 1\n+    call baz(a(1:m,1:m),m)  ! { dg-warning \"array temporary\" }\n+  end subroutine foo3\n+\n+  subroutine foo4(a,n)\n+    integer, dimension(n,n), intent(inout) :: a\n+    integer, intent(in) :: n\n+    a(1:n,1:n) = 1\n+  end subroutine foo4\n+\n+  subroutine baz(a,n)\n+    integer, dimension(n,n), intent(inout) :: a\n+    integer, intent(in) :: n\n+    a = 1\n+  end subroutine baz\n+\n+  subroutine decrement(n)\n+    integer, intent(inout) :: n\n+    n = n - 1\n+  end subroutine decrement\n+\n+end module mymod\n+\n+program main\n+  use mymod\n+  implicit none\n+  integer, dimension(5,5) :: a, b\n+  integer :: n\n+\n+  b = 0\n+  b(1:4,1:4) = 1\n+\n+  n = 5\n+  a = 0\n+  call foo1(a,n)\n+  if (any(a /= b)) call abort\n+\n+  n = 5\n+  a = 0\n+  call foo2(a,n)\n+  if (any(a /= b)) call abort\n+\n+  n = 5\n+  a = 0\n+  call foo3(a,n)\n+  if (any(a /= b)) call abort\n+\n+  n = 5\n+  a = 0\n+  call foo4(a,n)\n+  if (any(a /= 1)) call abort\n+end program main"}]}