{"sha": "ad8228bd350b55db13960a809b9995ec9588605a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWQ4MjI4YmQzNTBiNTVkYjEzOTYwYTgwOWI5OTk1ZWM5NTg4NjA1YQ==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-19T09:22:39Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-19T09:22:39Z"}, "message": "[multiple changes]\n\n2005-02-19  Sven de Marothy  <sven@physto.se>\n\n\t* javax/swing/SpinnerDateModel.java: Implemented.\n\n2005-02-19  Michael Koch  <konqueror@gmx.de>\n\n\t* Makefile.am: Added javax/swing/SpinnerDateModel.java.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r95274", "tree": {"sha": "bcec3774f2ba472c95d4af1f1eb6595aa0860c6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcec3774f2ba472c95d4af1f1eb6595aa0860c6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ad8228bd350b55db13960a809b9995ec9588605a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8228bd350b55db13960a809b9995ec9588605a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ad8228bd350b55db13960a809b9995ec9588605a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ad8228bd350b55db13960a809b9995ec9588605a/comments", "author": null, "committer": null, "parents": [{"sha": "b376ca1ad61da0f6135a43ac877ea23f712844db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b376ca1ad61da0f6135a43ac877ea23f712844db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b376ca1ad61da0f6135a43ac877ea23f712844db"}], "stats": {"total": 255, "additions": 255, "deletions": 0}, "files": [{"sha": "cabf8d609322431d9ea11359fa75325a30e2889c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ad8228bd350b55db13960a809b9995ec9588605a", "patch": "@@ -1,3 +1,12 @@\n+2005-02-19  Sven de Marothy  <sven@physto.se>\n+\n+\t* javax/swing/SpinnerDateModel.java: Implemented.\n+\n+2005-02-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* Makefile.am: Added javax/swing/SpinnerDateModel.java.\n+\t* Makefile.in: Regenerated.\n+\n 2005-02-19  Michael Koch  <konqueror@gmx.de>\n \n \t* gnu/java/nio/SelectorImpl.java:"}, {"sha": "f686db788a37acb6589757150372a649df164040", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ad8228bd350b55db13960a809b9995ec9588605a", "patch": "@@ -1653,6 +1653,7 @@ javax/swing/ListSelectionModel.java \\\n javax/swing/LookAndFeel.java \\\n javax/swing/Scrollable.java \\\n javax/swing/SortingFocusTraversalPolicy.java \\\n+javax/swing/SpinnerDateModel.java \\\n javax/swing/SpinnerListModel.java \\\n javax/swing/SpinnerModel.java \\\n javax/swing/SpinnerNumberModel.java \\"}, {"sha": "ed9942b4837d713b2d58347ed59c4425cb545621", "filename": "libjava/Makefile.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ad8228bd350b55db13960a809b9995ec9588605a", "patch": "@@ -1781,6 +1781,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjavax/swing/ListSelectionModel.java \\\n \tjavax/swing/LookAndFeel.java javax/swing/Scrollable.java \\\n \tjavax/swing/SortingFocusTraversalPolicy.java \\\n+\tjavax/swing/SpinnerDateModel.java \\\n \tjavax/swing/SpinnerListModel.java \\\n \tjavax/swing/SpinnerModel.java \\\n \tjavax/swing/SpinnerNumberModel.java javax/swing/Spring.java \\\n@@ -3309,6 +3310,7 @@ am__objects_11 = gnu/awt/LightweightRedirector.lo \\\n \tjavax/swing/ListSelectionModel.lo javax/swing/LookAndFeel.lo \\\n \tjavax/swing/Scrollable.lo \\\n \tjavax/swing/SortingFocusTraversalPolicy.lo \\\n+\tjavax/swing/SpinnerDateModel.lo \\\n \tjavax/swing/SpinnerListModel.lo javax/swing/SpinnerModel.lo \\\n \tjavax/swing/SpinnerNumberModel.lo javax/swing/Spring.lo \\\n \tjavax/swing/SpringLayout.lo javax/swing/SwingConstants.lo \\\n@@ -5976,6 +5978,7 @@ javax/swing/ListSelectionModel.java \\\n javax/swing/LookAndFeel.java \\\n javax/swing/Scrollable.java \\\n javax/swing/SortingFocusTraversalPolicy.java \\\n+javax/swing/SpinnerDateModel.java \\\n javax/swing/SpinnerListModel.java \\\n javax/swing/SpinnerModel.java \\\n javax/swing/SpinnerNumberModel.java \\\n@@ -13429,6 +13432,8 @@ javax/swing/Scrollable.lo: javax/swing/$(am__dirstamp) \\\n javax/swing/SortingFocusTraversalPolicy.lo:  \\\n \tjavax/swing/$(am__dirstamp) \\\n \tjavax/swing/$(DEPDIR)/$(am__dirstamp)\n+javax/swing/SpinnerDateModel.lo: javax/swing/$(am__dirstamp) \\\n+\tjavax/swing/$(DEPDIR)/$(am__dirstamp)\n javax/swing/SpinnerListModel.lo: javax/swing/$(am__dirstamp) \\\n \tjavax/swing/$(DEPDIR)/$(am__dirstamp)\n javax/swing/SpinnerModel.lo: javax/swing/$(am__dirstamp) \\\n@@ -20828,6 +20833,8 @@ mostlyclean-compile:\n \t-rm -f javax/swing/SizeSequence.lo\n \t-rm -f javax/swing/SortingFocusTraversalPolicy.$(OBJEXT)\n \t-rm -f javax/swing/SortingFocusTraversalPolicy.lo\n+\t-rm -f javax/swing/SpinnerDateModel.$(OBJEXT)\n+\t-rm -f javax/swing/SpinnerDateModel.lo\n \t-rm -f javax/swing/SpinnerListModel.$(OBJEXT)\n \t-rm -f javax/swing/SpinnerListModel.lo\n \t-rm -f javax/swing/SpinnerModel.$(OBJEXT)\n@@ -24022,6 +24029,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SizeRequirements.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SizeSequence.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SortingFocusTraversalPolicy.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SpinnerDateModel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SpinnerListModel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SpinnerModel.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@javax/swing/$(DEPDIR)/SpinnerNumberModel.Plo@am__quote@"}, {"sha": "53bf9ec0c35e0ebe82348757c9bd9a18a5b232a9", "filename": "libjava/javax/swing/SpinnerDateModel.java", "status": "added", "additions": 237, "deletions": 0, "changes": 237, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2Fjavax%2Fswing%2FSpinnerDateModel.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ad8228bd350b55db13960a809b9995ec9588605a/libjava%2Fjavax%2Fswing%2FSpinnerDateModel.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjavax%2Fswing%2FSpinnerDateModel.java?ref=ad8228bd350b55db13960a809b9995ec9588605a", "patch": "@@ -0,0 +1,237 @@\n+/* SpinnerDateModel.java --\n+   Copyright (C) 2002, 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package javax.swing;\n+\n+import java.io.Serializable;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+/**\n+ * SpinnerDateModel\n+ *\n+ * Implements a SpinnerModel for dates, rotating a calendar field such as \n+ * month, year, day, week, hour, minute.\n+ *\n+ * @author Sven de Marothy\n+ * @version 0.1 (first implementation)\n+ */\n+public class SpinnerDateModel extends AbstractSpinnerModel\n+  implements Serializable\n+{\n+  private Calendar date;\n+  private Comparable start;\n+  private Comparable end;\n+  private int calendarField;\n+\n+  /**\n+   * For compatability with Sun's JDK\n+   * FIXME: what's the number? And which fields should be serialized?\n+   */\n+  private static final long serialVersionUID = 1L;\n+\n+  /**\n+   * Constructs a SpinnerDateModel using the current date,\n+   * no start or end limit, and Calendar.DAY_OF_MONTH as the calendar field.\n+   */\n+  public SpinnerDateModel()\n+  {\n+    this(new Date(), null, null, Calendar.DAY_OF_MONTH);\n+  }\n+\n+  /**\n+   * Constructs a SpinnerDateModel which spins a given calendar field,\n+   * using a given date and start and end date limits.\n+   * @param value - the initial Date value\n+   * @param start - start limit, as a Date object, or <code>null</code>\n+   * for no lower limit.\n+   * @param end - end limit, or <code>null</code> for no upper limit.\n+   * @param calendarField - the <code>Calendar</code> field to spin,\n+   * (Calendar.ZONE_OFFSET and Calendar.DST_OFFSET are invalid)\n+   */\n+  public SpinnerDateModel(Date value, Comparable start, Comparable end,\n+                          int calendarField)\n+  {\n+    date = Calendar.getInstance();\n+    date.setTime(value);\n+    this.start = start;\n+    this.end = end;\n+    setCalendarField(calendarField);\n+  }\n+\n+  /**\n+   * Returns the value of the Calendar field to spin.\n+   */\n+  public int getCalendarField()\n+  {\n+    return calendarField;\n+  }\n+\n+  /**\n+   * Returns the current date in the sequence.\n+   * @return a <code>Date</code> object.\n+   */\n+  public Date getDate()\n+  {\n+    return date.getTime();\n+  }\n+\n+  /**\n+   * Returns the starting limit of the SpinnerModel.\n+   * @return a Date object, or <code>null</code> if there is no limit.\n+   */\n+  public Comparable getStart()\n+  {\n+    return start;\n+  }\n+\n+  /**\n+   * Returns the end limit of the SpinnerModel.\n+   * @return a Date object, or <code>null</code> if there is no limit.\n+   */\n+  public Comparable getEnd()\n+  {\n+    return end;\n+  }\n+\n+  /**\n+   * Returns the current date in the sequence,\n+   * this method returns the same as <code>getDate()</code>.\n+   * @return a <code>Date</code> object.\n+   */\n+  public Object getValue()\n+  {\n+    return date.getTime();\n+  }\n+\n+  /**\n+   * Returns the next date in the sequence, or <code>null</code> if the\n+   * next date is equal to or past the end limit.\n+   * @return a Date object, or <code>null</code>.\n+   */\n+  public Object getNextValue()\n+  {\n+    Calendar nextCal = Calendar.getInstance();\n+    nextCal.setTime(date.getTime());\n+    nextCal.roll(calendarField, true);\n+    Date nextDate = nextCal.getTime();\n+    if (end != null)\n+      if (end.compareTo(nextDate) < 0)\n+\treturn null;\n+    return nextDate;\n+  }\n+\n+  /**\n+   * Returns the previous date in the sequence, or <code>null</code> if the\n+   * next date is equal to or past the end limit.\n+   * @return a Date object, or <code>null</code>.\n+   */\n+  public Object getPreviousValue()\n+  {\n+    Calendar prevCal = Calendar.getInstance();\n+    prevCal.setTime(date.getTime());\n+    prevCal.roll(calendarField, false);\n+    Date prevDate = prevCal.getTime();\n+    if (end != null)\n+      if (end.compareTo(prevDate) > 0)\n+\treturn null;\n+    return prevDate;\n+  }\n+\n+  /**\n+   * Sets the date field to change. It must be a valid Calendar field,\n+   * excluding Calendar.ZONE_OFFSET and Calendar.DST_OFFSET.\n+   * @param calendarField - the calendar field to set.\n+   */\n+  public void setCalendarField(int calendarField)\n+  {\n+    if (calendarField < 0 || calendarField >= Calendar.FIELD_COUNT\n+        || calendarField == Calendar.ZONE_OFFSET\n+        || calendarField == Calendar.DST_OFFSET)\n+      throw new IllegalArgumentException(\"Illegal calendarField\");\n+\n+    if (this.calendarField != calendarField)\n+      {\n+\tthis.calendarField = calendarField;\n+\tfireStateChanged();\n+      }\n+  }\n+\n+  /**\n+   * Sets the starting date limit for the sequence.\n+   *\n+   * @param start - a Date object of the limit date,\n+   * or <code>null</code> for no limit.\n+   */\n+  public void setStart(Comparable start)\n+  {\n+    if (this.start != start)\n+      {\n+\tthis.start = start;\n+\tfireStateChanged();\n+      }\n+  }\n+\n+  /**\n+   * Sets the end date limit for the sequence.\n+   *\n+   * @param end - a Date object of the limit date,\n+   * or <code>null</code> for no limit.\n+   */\n+  public void setEnd(Comparable end)\n+  {\n+    if (this.end != end)\n+      {\n+\tthis.end = end;\n+\tfireStateChanged();\n+      }\n+  }\n+\n+  /**\n+   * Sets the current date in the sequence.\n+   *\n+   * @param value - a Date object.\n+   */\n+  public void setValue(Object value)\n+  {\n+    if (! (value instanceof Date) || value == null)\n+      throw new IllegalArgumentException(\"Value not a date.\");\n+    date.setTime((Date) value);\n+    fireStateChanged();\n+  }\n+}"}]}