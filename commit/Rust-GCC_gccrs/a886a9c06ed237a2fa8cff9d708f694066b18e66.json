{"sha": "a886a9c06ed237a2fa8cff9d708f694066b18e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTg4NmE5YzA2ZWQyMzdhMmZhOGNmZjlkNzA4ZjY5NDA2NmIxOGU2Ng==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-02-25T17:44:42Z"}, "committer": {"name": "Philip Herron", "email": "herron.philip@googlemail.com", "date": "2021-03-03T22:46:24Z"}, "message": "Add in TyTy support for an initial String Literal\n\nThis gives the apropriate reference type over const char *.\n\nFixes #85", "tree": {"sha": "6805a79a9dbecc5d6975e1ace93a91517beb612e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6805a79a9dbecc5d6975e1ace93a91517beb612e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a886a9c06ed237a2fa8cff9d708f694066b18e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a886a9c06ed237a2fa8cff9d708f694066b18e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a886a9c06ed237a2fa8cff9d708f694066b18e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a886a9c06ed237a2fa8cff9d708f694066b18e66/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e76855ab401d70361cc8c1738d95127b6f45df86", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e76855ab401d70361cc8c1738d95127b6f45df86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e76855ab401d70361cc8c1738d95127b6f45df86"}], "stats": {"total": 150, "additions": 145, "deletions": 5}, "files": [{"sha": "a4c32d848997a6b1ff2c5bd80c316c87b30ca5a0", "filename": "gcc/rust/backend/rust-compile-context.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-context.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-context.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -268,8 +268,6 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     return compiler.translated;\n   }\n \n-  virtual ~TyTyResolveCompile () {}\n-\n   void visit (TyTy::ErrorType &) override { gcc_unreachable (); }\n \n   void visit (TyTy::InferType &) override { gcc_unreachable (); }\n@@ -460,6 +458,14 @@ class TyTyResolveCompile : public TyTy::TyVisitor\n     translated = ctx->get_backend ()->reference_type (base_compiled_type);\n   }\n \n+  void visit (TyTy::StrType &type) override\n+  {\n+    ::Btype *compiled_type = nullptr;\n+    bool ok = ctx->lookup_compiled_types (type.get_ty_ref (), &compiled_type);\n+    rust_assert (ok);\n+    translated = compiled_type;\n+  }\n+\n private:\n   TyTyResolveCompile (Context *ctx) : ctx (ctx) {}\n "}, {"sha": "b48d79eb16e8b83dd9282a7df9c9593d3a917ff8", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -225,6 +225,14 @@ class CompileExpr : public HIRCompileBase\n \t}\n \treturn;\n \n+\tcase HIR::Literal::STRING: {\n+\t  auto base = ctx->get_backend ()->string_constant_expression (\n+\t    literal_value->as_string ());\n+\t  translated\n+\t    = ctx->get_backend ()->address_expression (base, expr.get_locus ());\n+\t}\n+\treturn;\n+\n       default:\n \trust_fatal_error (expr.get_locus (), \"unknown literal\");\n \treturn;"}, {"sha": "e043a5089fa626d2798a445c619748339a337c73", "filename": "gcc/rust/backend/rust-compile-tyty.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-tyty.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -209,6 +209,13 @@ class TyTyCompile : public TyTy::TyVisitor\n \t\t\t\t      Linemap::predeclared_location ());\n   }\n \n+  void visit (TyTy::StrType &) override\n+  {\n+    Btype *raw_str = backend->raw_str_type ();\n+    translated\n+      = backend->named_type (\"str\", raw_str, Linemap::predeclared_location ());\n+  }\n+\n private:\n   TyTyCompile (::Backend *backend)\n     : backend (backend), translated (nullptr),"}, {"sha": "65750a93b63f5a62b8dd90660fa8a3e3079e1c53", "filename": "gcc/rust/resolve/rust-ast-resolve.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fresolve%2Frust-ast-resolve.cc?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -157,6 +157,7 @@ Resolver::generate_builtins ()\n   auto usize = new TyTy::USizeType (mappings->get_next_hir_id ());\n   auto isize = new TyTy::ISizeType (mappings->get_next_hir_id ());\n   auto char_tyty = new TyTy::CharType (mappings->get_next_hir_id ());\n+  auto str = new TyTy::StrType (mappings->get_next_hir_id ());\n \n   MKBUILTIN_TYPE (\"u8\", builtins, u8);\n   MKBUILTIN_TYPE (\"u16\", builtins, u16);\n@@ -174,6 +175,7 @@ Resolver::generate_builtins ()\n   MKBUILTIN_TYPE (\"usize\", builtins, usize);\n   MKBUILTIN_TYPE (\"isize\", builtins, isize);\n   MKBUILTIN_TYPE (\"char\", builtins, char_tyty);\n+  MKBUILTIN_TYPE (\"str\", builtins, str);\n \n   // unit type ()\n   TyTy::UnitType *unit_tyty = new TyTy::UnitType (mappings->get_next_hir_id ());"}, {"sha": "700a3769a5171e7d2f44202e8a80a5bf96e28dc1", "filename": "gcc/rust/rust-backend.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Frust-backend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Frust-backend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-backend.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -116,6 +116,9 @@ class Backend\n   // Get the Host pointer size in bits\n   virtual int get_pointer_size () = 0;\n \n+  // Get the raw str type const char*\n+  virtual Btype *raw_str_type () = 0;\n+\n   // Get an unnamed integer type with the given signedness and number\n   // of bits.\n   virtual Btype *integer_type (bool is_unsigned, int bits) = 0;"}, {"sha": "9a1333214e57db14e083539a00f62d1738cdefeb", "filename": "gcc/rust/rust-gcc.cc", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Frust-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Frust-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Frust-gcc.cc?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -187,6 +187,8 @@ class Gcc_backend : public Backend\n \n   int get_pointer_size ();\n \n+  Btype *raw_str_type ();\n+\n   Btype *integer_type (bool, int);\n \n   Btype *float_type (int);\n@@ -803,6 +805,14 @@ Gcc_backend::get_pointer_size ()\n   return POINTER_SIZE;\n }\n \n+Btype *\n+Gcc_backend::raw_str_type ()\n+{\n+  tree char_ptr = build_pointer_type (char_type_node);\n+  tree const_char_type = build_qualified_type (char_ptr, TYPE_QUAL_CONST);\n+  return this->make_type (const_char_type);\n+}\n+\n Btype *\n Gcc_backend::integer_type (bool is_unsigned, int bits)\n {\n@@ -1427,8 +1437,7 @@ Bexpression *\n Gcc_backend::string_constant_expression (const std::string &val)\n {\n   tree index_type = build_index_type (size_int (val.length ()));\n-  tree const_char_type\n-    = build_qualified_type (unsigned_char_type_node, TYPE_QUAL_CONST);\n+  tree const_char_type = build_qualified_type (char_type_node, TYPE_QUAL_CONST);\n   tree string_type = build_array_type (const_char_type, index_type);\n   TYPE_STRING_FLAG (string_type) = 1;\n   tree string_val = build_string (val.length (), val.data ());"}, {"sha": "3cc0da892436ae664b9d407924cfab1a6c20da0b", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -454,6 +454,16 @@ class TypeCheckExpr : public TypeCheckBase\n \t}\n \tbreak;\n \n+\tcase HIR::Literal::LitType::STRING: {\n+\t  TyTy::BaseType *base = nullptr;\n+\t  auto ok = context->lookup_builtin (\"str\", &base);\n+\t  rust_assert (ok);\n+\n+\t  infered = new TyTy::ReferenceType (expr.get_mappings ().get_hirid (),\n+\t\t\t\t\t     base->get_ref ());\n+\t}\n+\tbreak;\n+\n       default:\n \tgcc_unreachable ();\n \tbreak;"}, {"sha": "2e65244d13b63ac4b4c2f76262d7cba7fd39e618", "filename": "gcc/rust/typecheck/rust-tyty-call.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-call.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -53,6 +53,7 @@ class TypeCheckCallExpr : private TyVisitor\n   void visit (CharType &type) override { gcc_unreachable (); }\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n+  void visit (StrType &) override { gcc_unreachable (); }\n \n   // tuple-structs\n   void visit (ADTType &type) override;\n@@ -98,6 +99,7 @@ class TypeCheckMethodCallExpr : private TyVisitor\n   void visit (CharType &type) override { gcc_unreachable (); }\n   void visit (ReferenceType &type) override { gcc_unreachable (); }\n   void visit (ParamType &) override { gcc_unreachable (); }\n+  void visit (StrType &) override { gcc_unreachable (); }\n \n   // call fns\n   void visit (FnType &type) override;"}, {"sha": "59c18909b89dfbfc908d0a4ffbb0bc60be15923d", "filename": "gcc/rust/typecheck/rust-tyty-rules.h", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-rules.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -231,6 +231,14 @@ class BaseRules : public TyVisitor\n     gcc_unreachable ();\n   }\n \n+  virtual void visit (StrType &type) override\n+  {\n+    Location ref_locus = mappings->lookup_location (type.get_ref ());\n+    rust_error_at (ref_locus, \"expected [%s] got [%s]\",\n+\t\t   get_base ()->as_string ().c_str (),\n+\t\t   type.as_string ().c_str ());\n+  }\n+\n protected:\n   BaseRules (BaseType *base)\n     : mappings (Analysis::Mappings::get ()),\n@@ -866,6 +874,13 @@ class ReferenceRules : public BaseRules\n     auto other_base_type = type.get_base ();\n \n     TyTy::BaseType *base_resolved = base_type->unify (other_base_type);\n+    if (base_resolved == nullptr\n+\t|| base_resolved->get_kind () == TypeKind::ERROR)\n+      {\n+\tBaseRules::visit (type);\n+\treturn;\n+      }\n+\n     resolved = new ReferenceType (base->get_ref (), base->get_ty_ref (),\n \t\t\t\t  base_resolved->get_ref ());\n   }\n@@ -916,6 +931,21 @@ class ParamRules : public BaseRules\n   ParamType *base;\n };\n \n+class StrRules : public BaseRules\n+{\n+  // FIXME we will need a enum for the StrType like ByteBuf etc..\n+\n+public:\n+  StrRules (StrType *base) : BaseRules (base), base (base) {}\n+\n+  void visit (StrType &type) override { resolved = type.clone (); }\n+\n+private:\n+  BaseType *get_base () override { return base; }\n+\n+  StrType *base;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "61fd905ffffc9f302a51449da7a58a56a06ca88d", "filename": "gcc/rust/typecheck/rust-tyty-visitor.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty-visitor.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -43,6 +43,7 @@ class TyVisitor\n   virtual void visit (CharType &type) = 0;\n   virtual void visit (ReferenceType &type) = 0;\n   virtual void visit (ParamType &type) = 0;\n+  virtual void visit (StrType &type) = 0;\n };\n \n } // namespace TyTy"}, {"sha": "4894f0647ff15c453b715914937c6b2dfac92855", "filename": "gcc/rust/typecheck/rust-tyty.cc", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.cc?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -799,6 +799,37 @@ ParamType::resolve ()\n   return lookup;\n }\n \n+BaseType *\n+StrType::clone ()\n+{\n+  return new StrType (get_ref (), get_ty_ref (), get_combined_refs ());\n+}\n+\n+void\n+StrType::accept_vis (TyVisitor &vis)\n+{\n+  vis.visit (*this);\n+}\n+\n+std::string\n+StrType::as_string () const\n+{\n+  return \"str\";\n+}\n+\n+BaseType *\n+StrType::unify (BaseType *other)\n+{\n+  StrRules r (this);\n+  return r.unify (other);\n+}\n+\n+bool\n+StrType::is_equal (const BaseType &other) const\n+{\n+  return get_kind () == other.get_kind ();\n+}\n+\n // rust-tyty-call.h\n \n void"}, {"sha": "4812932c5f3d4a32cec5efdedac6f8af118afff5", "filename": "gcc/rust/typecheck/rust-tyty.h", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Frust%2Ftypecheck%2Frust-tyty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tyty.h?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -809,14 +809,38 @@ class ReferenceType : public BaseType\n \n   BaseType *unify (BaseType *other) override;\n \n-  virtual bool is_equal (const BaseType &other) const override;\n+  bool is_equal (const BaseType &other) const override;\n \n   BaseType *clone () final override;\n \n private:\n   HirId base;\n };\n \n+class StrType : public BaseType\n+{\n+public:\n+  StrType (HirId ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ref, TypeKind::STR)\n+  {}\n+\n+  StrType (HirId ref, HirId ty_ref, std::set<HirId> refs = std::set<HirId> ())\n+    : BaseType (ref, ty_ref, TypeKind::STR)\n+  {}\n+\n+  std::string get_name () const override final { return as_string (); }\n+\n+  void accept_vis (TyVisitor &vis) override;\n+\n+  std::string as_string () const override;\n+\n+  BaseType *unify (BaseType *other) override;\n+\n+  bool is_equal (const BaseType &other) const override;\n+\n+  BaseType *clone () final override;\n+};\n+\n } // namespace TyTy\n } // namespace Rust\n "}, {"sha": "088827853d81d3e54f687270aabfa1c2d48f9d1c", "filename": "gcc/testsuite/rust.test/compilable/str1.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstr1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a886a9c06ed237a2fa8cff9d708f694066b18e66/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstr1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust.test%2Fcompilable%2Fstr1.rs?ref=a886a9c06ed237a2fa8cff9d708f694066b18e66", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let a;\n+    a = \"hello world infer\";\n+\n+    let b: &str;\n+    b = \"hello world specified\";\n+}"}]}