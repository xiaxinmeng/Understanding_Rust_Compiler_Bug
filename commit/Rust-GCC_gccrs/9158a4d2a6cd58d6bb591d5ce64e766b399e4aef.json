{"sha": "9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTE1OGE0ZDJhNmNkNThkNmJiNTkxZDVjZTY0ZTc2NmIzOTllNGFlZg==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T22:10:05Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-10-08T22:10:05Z"}, "message": "libstdc++: Make ranges::construct_at constexpr-friendly [PR95788]\n\nThis rewrites ranges::construct_at in terms of std::construct_at so\nthat we can piggyback on the compiler's existing support for\nintercepting placement new within std::construct_at during constexpr\nevaluation, instead of having to additionally teach the compiler about\nranges::construct_at.\n\nWhile we're making changes to ranges::construct_at, this patch also\ndeclares it conditionally noexcept and qualifies the calls to declval in\nits requires-clause.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95788\n\t* include/bits/ranges_uninitialized.h:\n\t(__construct_at_fn::operator()): Rewrite in terms of\n\tstd::construct_at.  Declare it conditionally noexcept.  Qualify\n\tcalls to declval in its requires-clause.\n\t* testsuite/20_util/specialized_algorithms/construct_at/95788.cc:\n\tNew test.", "tree": {"sha": "656f664ff2891cf51daf7ec0db1d1b5287a139bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/656f664ff2891cf51daf7ec0db1d1b5287a139bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef/comments", "author": null, "committer": null, "parents": [{"sha": "1c56c143b2011080d8a4516f37f78f647b0ee258", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c56c143b2011080d8a4516f37f78f647b0ee258", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c56c143b2011080d8a4516f37f78f647b0ee258"}], "stats": {"total": 51, "additions": 48, "deletions": 3}, "files": [{"sha": "25e664de753e8f56b6964a1f239021078b1848e6", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "patch": "@@ -493,12 +493,16 @@ namespace ranges\n   struct __construct_at_fn\n   {\n     template<typename _Tp, typename... _Args>\n-      requires requires { ::new (declval<void*>()) _Tp(declval<_Args>()...); }\n+      requires requires {\n+\t::new (std::declval<void*>()) _Tp(std::declval<_Args>()...);\n+      }\n       constexpr _Tp*\n       operator()(_Tp* __location, _Args&&... __args) const\n+      noexcept(noexcept(std::construct_at(__location,\n+\t\t\t\t\t  std::forward<_Args>(__args)...)))\n       {\n-\treturn ::new (__detail::__voidify(*__location))\n-\t\t     _Tp(std::forward<_Args>(__args)...);\n+\treturn std::construct_at(__location,\n+\t\t\t\t std::forward<_Args>(__args)...);\n       }\n   };\n "}, {"sha": "895332b302b692d8fda68becc1b739e4785fb33b", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/construct_at/95788.cc", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F95788.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9158a4d2a6cd58d6bb591d5ce64e766b399e4aef/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F95788.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F95788.cc?ref=9158a4d2a6cd58d6bb591d5ce64e766b399e4aef", "patch": "@@ -0,0 +1,41 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <memory>\n+\n+constexpr bool\n+test01()\n+{\n+  const int sz{1};\n+  int* data{std::allocator<int>{}.allocate(sz)};\n+  static_assert(noexcept(std::ranges::construct_at(data, 42)));\n+  std::ranges::construct_at(data, 42);\n+  if (*data != 42)\n+    return false;\n+  std::ranges::destroy_at(data);\n+  std::allocator<int>{}.deallocate(data, sz);\n+  return true;\n+}\n+\n+static_assert(test01());\n+\n+struct S { S(); };\n+S* p;\n+static_assert(!noexcept(std::ranges::construct_at(p)));"}]}