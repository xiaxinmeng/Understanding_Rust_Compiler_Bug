{"sha": "5385594074b33ef05ad5eb5a02b902b7be02f529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM4NTU5NDA3NGIzM2VmMDVhZDVlYjVhMDJiOTAyYjdiZTAyZjUyOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2010-12-20T19:11:12Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2010-12-20T19:11:12Z"}, "message": "mn10300: Cleanup PIC unspec generation\n\n        * config/mn10300/mn10300.c (mn10300_legitimize_pic_address): Generate\n        UNSPEC patterns by hand, with the proper mode; use gen_const_mem.\n        * config/mn10300/mn10300.md (call, call_value): Generate UNSPEC_PLT\n        by hand, with the proper mode.\n        (symGOT2reg, symGOT2reg_i, symGOTOFF2reg): Remove.\n        (symGOTOFF2reg_i, sym2PIC, sym2PLT): Remove.\n\nFrom-SVN: r168093", "tree": {"sha": "decf7775a18fab3902aa2555a6df53ddb22a5a85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/decf7775a18fab3902aa2555a6df53ddb22a5a85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5385594074b33ef05ad5eb5a02b902b7be02f529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5385594074b33ef05ad5eb5a02b902b7be02f529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5385594074b33ef05ad5eb5a02b902b7be02f529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5385594074b33ef05ad5eb5a02b902b7be02f529/comments", "author": null, "committer": null, "parents": [{"sha": "c02a5ccbdf231861265f03f2e75dc7dc3665215b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02a5ccbdf231861265f03f2e75dc7dc3665215b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02a5ccbdf231861265f03f2e75dc7dc3665215b"}], "stats": {"total": 151, "additions": 57, "deletions": 94}, "files": [{"sha": "dd2d71ed18d85d883dda9200d3ef1105447f323b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5385594074b33ef05ad5eb5a02b902b7be02f529", "patch": "@@ -1,3 +1,12 @@\n+2010-12-20  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/mn10300/mn10300.c (mn10300_legitimize_pic_address): Generate\n+\tUNSPEC patterns by hand, with the proper mode; use gen_const_mem.\n+\t* config/mn10300/mn10300.md (call, call_value): Generate UNSPEC_PLT\n+\tby hand, with the proper mode.\n+\t(symGOT2reg, symGOT2reg_i, symGOTOFF2reg): Remove.\n+\t(symGOTOFF2reg_i, sym2PIC, sym2PLT): Remove.\n+\n 2010-12-20  Sanjin Liu\t<scliu@faraday-tech.com>\n \tMingfeng Wu  <mingfeng@faraday-tech.com>\n "}, {"sha": "23b198a44afbef33253c8b0d3a2d878a69c3b8ee", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=5385594074b33ef05ad5eb5a02b902b7be02f529", "patch": "@@ -1867,26 +1867,39 @@ mn10300_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n rtx\n mn10300_legitimize_pic_address (rtx orig, rtx reg)\n {\n+  rtx x;\n+\n   if (GET_CODE (orig) == LABEL_REF\n       || (GET_CODE (orig) == SYMBOL_REF\n \t  && (CONSTANT_POOL_ADDRESS_P (orig)\n \t      || ! MN10300_GLOBAL_P (orig))))\n     {\n-      if (reg == 0)\n+      if (reg == NULL)\n \treg = gen_reg_rtx (Pmode);\n \n-      emit_insn (gen_symGOTOFF2reg (reg, orig));\n-      return reg;\n+      x = gen_rtx_UNSPEC (SImode, gen_rtvec (1, orig), UNSPEC_GOTOFF);\n+      x = gen_rtx_CONST (SImode, x);\n+      emit_move_insn (reg, x);\n+\n+      x = emit_insn (gen_addsi3 (reg, reg, pic_offset_table_rtx));\n     }\n   else if (GET_CODE (orig) == SYMBOL_REF)\n     {\n-      if (reg == 0)\n+      if (reg == NULL)\n \treg = gen_reg_rtx (Pmode);\n \n-      emit_insn (gen_symGOT2reg (reg, orig));\n-      return reg;\n+      x = gen_rtx_UNSPEC (SImode, gen_rtvec (1, orig), UNSPEC_GOT);\n+      x = gen_rtx_CONST (SImode, x);\n+      x = gen_rtx_PLUS (SImode, pic_offset_table_rtx, x);\n+      x = gen_const_mem (SImode, x);\n+\n+      x = emit_move_insn (reg, x);\n     }\n-  return orig;\n+  else\n+    return orig;\n+\n+  set_unique_reg_note (x, REG_EQUAL, orig);\n+  return reg;\n }\n \n /* Return zero if X references a SYMBOL_REF or LABEL_REF whose symbol"}, {"sha": "3fad021b527d982028f346021f47f25267e451fc", "filename": "gcc/config/mn10300/mn10300.md", "status": "modified", "additions": 28, "deletions": 87, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5385594074b33ef05ad5eb5a02b902b7be02f529/gcc%2Fconfig%2Fmn10300%2Fmn10300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.md?ref=5385594074b33ef05ad5eb5a02b902b7be02f529", "patch": "@@ -2133,33 +2133,32 @@\n   [(call (match_operand:QI 0 \"general_operand\")\n \t (match_operand:SI 1 \"general_operand\"))]\n   \"\"\n-  \"\n {\n-  if (flag_pic && GET_CODE (XEXP (operands[0], 0)) == SYMBOL_REF)\n+  rtx fn = XEXP (operands[0], 0);\n+\n+  if (flag_pic && GET_CODE (fn) == SYMBOL_REF)\n     {\n-      if (MN10300_GLOBAL_P (XEXP (operands[0], 0)))\n+      if (MN10300_GLOBAL_P (fn))\n \t{\n \t  /* The PLT code won't run on AM30, but then, there's no\n \t     shared library support for AM30 either, so we just assume\n \t     the linker is going to adjust all @PLT relocs to the\n \t     actual symbols.  */\n \t  emit_use (pic_offset_table_rtx);\n-\t  XEXP (operands[0], 0) = gen_sym2PLT (XEXP (operands[0], 0));\n+\t  fn = gen_rtx_UNSPEC (SImode, gen_rtvec (1, fn), UNSPEC_PLT);\n \t}\n       else\n-\tXEXP (operands[0], 0) = gen_sym2PIC (XEXP (operands[0], 0));\n+\tfn = gen_rtx_UNSPEC (SImode, gen_rtvec (1, fn), UNSPEC_PIC);\n     }\n-  if (! call_address_operand (XEXP (operands[0], 0), VOIDmode))\n-    XEXP (operands[0], 0) = force_reg (SImode, XEXP (operands[0], 0));\n-  emit_call_insn (gen_call_internal (XEXP (operands[0], 0), operands[1]));\n-  DONE;\n-}\")\n+  if (! call_address_operand (fn, VOIDmode))\n+    fn = force_reg (SImode, fn);\n+\n+  XEXP (operands[0], 0) = fn;\n+})\n \n-;; NB: Mode on match_operand 0 deliberately omitted in\n-;;     order to be able to match UNSPECs in PIC mode.\n-(define_insn \"call_internal\"\n-  [(call (mem:QI (match_operand 0 \"call_address_operand\" \"a,S\"))\n-\t (match_operand:SI      1 \"general_operand\"      \"g,g\"))]\n+(define_insn \"*call_internal\"\n+  [(call (mem:QI (match_operand:SI 0 \"call_address_operand\" \"a,S\"))\n+\t (match_operand:SI 1 \"\" \"\"))]\n   \"\"\n   \"@\n    calls %C0\n@@ -2181,36 +2180,33 @@\n \t(call (match_operand:QI 1 \"general_operand\")\n \t      (match_operand:SI 2 \"general_operand\")))]\n   \"\"\n-  \"\n {\n-  if (flag_pic && GET_CODE (XEXP (operands[1], 0)) == SYMBOL_REF)\n+  rtx fn = XEXP (operands[1], 0);\n+\n+  if (flag_pic && GET_CODE (fn) == SYMBOL_REF)\n     {\n-      if (MN10300_GLOBAL_P (XEXP (operands[1], 0)))\n+      if (MN10300_GLOBAL_P (fn))\n \t{\n \t  /* The PLT code won't run on AM30, but then, there's no\n \t     shared library support for AM30 either, so we just assume\n \t     the linker is going to adjust all @PLT relocs to the\n \t     actual symbols.  */\n \t  emit_use (pic_offset_table_rtx);\n-\t  XEXP (operands[1], 0) = gen_sym2PLT (XEXP (operands[1], 0));\n+\t  fn = gen_rtx_UNSPEC (SImode, gen_rtvec (1, fn), UNSPEC_PLT);\n \t}\n       else\n-\tXEXP (operands[1], 0) = gen_sym2PIC (XEXP (operands[1], 0));\n+\tfn = gen_rtx_UNSPEC (SImode, gen_rtvec (1, fn), UNSPEC_PIC);\n     }\n-  if (! call_address_operand (XEXP (operands[1], 0), VOIDmode))\n-    XEXP (operands[1], 0) = force_reg (SImode, XEXP (operands[1], 0));\n-  emit_call_insn (gen_call_value_internal (operands[0],\n-\t\t\t\t\t   XEXP (operands[1], 0),\n-\t\t\t\t\t   operands[2]));\n-  DONE;\n-}\")\n+  if (! call_address_operand (fn, VOIDmode))\n+    fn = force_reg (SImode, fn);\n+\n+  XEXP (operands[1], 0) = fn;\n+})\n \n-;; NB: Mode on match_operands 0 and 1 deliberately omitted\n-;;     in order to be able to match UNSPECs in PIC mode.\n (define_insn \"call_value_internal\"\n-  [(set (match_operand               0 \"register_operand\"    \"=dax,dax\")\n-\t(call (mem:QI (match_operand 1 \"call_address_operand\" \"a,S\"))\n-\t      (match_operand:SI      2 \"general_operand\"      \"g,g\")))]\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (mem:QI (match_operand:SI 1 \"call_address_operand\" \"a,S\"))\n+\t      (match_operand:SI 2 \"\" \"\")))]\n   \"\"\n   \"@\n    calls %C1\n@@ -3119,58 +3115,3 @@\n   \"\"\n   \"operands[3] = gen_rtx_SYMBOL_REF (VOIDmode, GOT_SYMBOL_NAME);\"\n )\n-\n-(define_expand \"symGOT2reg\"\n-  [(match_operand:SI 0 \"\")\n-   (match_operand:SI 1 \"\")]\n-  \"\"\n-  \"\n-{\n-  rtx insn = emit_insn (gen_symGOT2reg_i (operands[0], operands[1]));\n-\n-  MEM_READONLY_P (SET_SRC (PATTERN (insn))) = 1;\n-\n-  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n-\n-  DONE;\n-}\")\n-\n-(define_expand \"symGOT2reg_i\"\n-  [(set (match_operand:SI 0 \"\")\n-\t(mem:SI (plus:SI (reg:SI PIC_REG)\n-\t\t\t (const (unspec [(match_operand:SI 1 \"\")]\n-\t\t\t\t\tUNSPEC_GOT)))))]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"symGOTOFF2reg\"\n-  [(match_operand:SI 0 \"\") (match_operand:SI 1 \"\")]\n-  \"\"\n-  \"\n-{\n-  rtx insn = emit_insn (gen_symGOTOFF2reg_i (operands[0], operands[1]));\n-\n-  set_unique_reg_note (insn, REG_EQUAL, operands[1]);\n-\n-  DONE;\n-}\")\n-\n-(define_expand \"symGOTOFF2reg_i\"\n-  [(set (match_operand:SI 0 \"\")\n-\t(const (unspec [(match_operand:SI 1 \"\")] UNSPEC_GOTOFF)))\n-   (parallel [(set (match_dup 0)\n-\t\t   (plus:SI (match_dup 0)\n-\t\t\t    (reg:SI PIC_REG)))\n-\t      (clobber (reg:CC CC_REG))\n-\t     ])\n-  ]\n-  \"\"\n-  \"\")\n-\n-(define_expand \"sym2PIC\"\n-  [(unspec [(match_operand:SI 0 \"\")] UNSPEC_PIC)]\n-  \"\" \"\")\n-\n-(define_expand \"sym2PLT\"\n-  [(unspec [(match_operand:SI 0 \"\")] UNSPEC_PLT)]\n-  \"\" \"\")"}]}