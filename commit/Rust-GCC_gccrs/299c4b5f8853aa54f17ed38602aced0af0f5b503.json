{"sha": "299c4b5f8853aa54f17ed38602aced0af0f5b503", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk5YzRiNWY4ODUzYWE1NGYxN2VkMzg2MDJhY2VkMGFmMGY1YjUwMw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-01-04T12:39:26Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-01-04T12:39:26Z"}, "message": "Fix clearing ZERO_REG\n\n\tFix clearing ZERO_REG\n\t* config/avr/avr.md (cc): Add alternative \"ldi\".\n\t(movqi_insn): Use it in cc attribute.\n\t* config/avr/avr.c (notice_update_cc): Handle CC_LDI.\n\t(output_reload_in_const): Use CLR to move 0 to ZERO_REG.\n\t(output_reload_insisf): Use ZERO_REG to pre-clear register.\n\nFrom-SVN: r182871", "tree": {"sha": "c824bcb45c14a6f935a158dd58ff75b45770aba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c824bcb45c14a6f935a158dd58ff75b45770aba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/299c4b5f8853aa54f17ed38602aced0af0f5b503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299c4b5f8853aa54f17ed38602aced0af0f5b503", "html_url": "https://github.com/Rust-GCC/gccrs/commit/299c4b5f8853aa54f17ed38602aced0af0f5b503", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/299c4b5f8853aa54f17ed38602aced0af0f5b503/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74d1a34e8600c3b8254eb198ef450e761598a18c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74d1a34e8600c3b8254eb198ef450e761598a18c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74d1a34e8600c3b8254eb198ef450e761598a18c"}], "stats": {"total": 64, "additions": 48, "deletions": 16}, "files": [{"sha": "e34cfa07d303685caa5b3dffa3ed25fa3ecbf3e3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=299c4b5f8853aa54f17ed38602aced0af0f5b503", "patch": "@@ -1,3 +1,12 @@\n+2012-01-04  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tFix clearing ZERO_REG\n+\t* config/avr/avr.md (cc): Add alternative \"ldi\".\n+\t(movqi_insn): Use it in cc attribute.\n+\t* config/avr/avr.c (notice_update_cc): Handle CC_LDI.\n+\t(output_reload_in_const): Use CLR to move 0 to ZERO_REG.\n+\t(output_reload_insisf): Use ZERO_REG to pre-clear register.\n+\n 2012-01-04  Andreas Krebbel  <Andreas.Krebbel@de.ibm.com>\n \n \t* configure: Regenerate."}, {"sha": "48306329a7297fbeefdd1a1f02307fc2c251e449", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 37, "deletions": 14, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=299c4b5f8853aa54f17ed38602aced0af0f5b503", "patch": "@@ -1994,23 +1994,44 @@ notice_update_cc (rtx body ATTRIBUTE_UNUSED, rtx insn)\n \n     case CC_OUT_PLUS:\n     case CC_OUT_PLUS_NOCLOBBER:\n+    case CC_LDI:\n       {\n         rtx *op = recog_data.operand;\n         int len_dummy, icc;\n         \n         /* Extract insn's operands.  */\n         extract_constrain_insn_cached (insn);\n \n-        if (CC_OUT_PLUS == cc)\n-          avr_out_plus (op, &len_dummy, &icc);\n-        else\n-          avr_out_plus_noclobber (op, &len_dummy, &icc);\n-        \n-        cc = (enum attr_cc) icc;\n-        \n+        switch (cc)\n+          {\n+          default:\n+            gcc_unreachable();\n+            \n+          case CC_OUT_PLUS:\n+            avr_out_plus (op, &len_dummy, &icc);\n+            cc = (enum attr_cc) icc;\n+            break;\n+            \n+          case CC_OUT_PLUS_NOCLOBBER:\n+            avr_out_plus_noclobber (op, &len_dummy, &icc);\n+            cc = (enum attr_cc) icc;\n+            break;\n+\n+          case CC_LDI:\n+\n+            cc = (op[1] == CONST0_RTX (GET_MODE (op[0]))\n+                  && reg_overlap_mentioned_p (op[0], zero_reg_rtx))\n+              /* Loading zero-reg with 0 uses CLI and thus clobbers cc0.  */\n+              ? CC_CLOBBER\n+              /* Any other \"r,rL\" combination does not alter cc0.  */\n+              : CC_NONE;\n+            \n+            break;\n+          } /* inner switch */\n+\n         break;\n       }\n-    }\n+    } /* outer swicth */\n \n   switch (cc)\n     {\n@@ -8945,9 +8966,9 @@ avr_regno_mode_code_ok_for_base_p (int regno,\n \n    The effect on cc0 is as follows:\n \n-   Load 0 to any register          : NONE\n-   Load ld register with any value : NONE\n-   Anything else:                  : CLOBBER  */\n+   Load 0 to any register except ZERO_REG : NONE\n+   Load ld register with any value        : NONE\n+   Anything else:                         : CLOBBER  */\n \n static void\n output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n@@ -9062,7 +9083,9 @@ output_reload_in_const (rtx *op, rtx clobber_reg, int *len, bool clear_p)\n       if (ival[n] == 0)\n         {\n           if (!clear_p)\n-            avr_asm_len (ldreg_p ? \"ldi %0,0\" : \"mov %0,__zero_reg__\",\n+            avr_asm_len (ldreg_p ? \"ldi %0,0\"\n+                         : ZERO_REGNO == REGNO (xdest[n]) ? \"clr %0\"\n+                         : \"mov %0,__zero_reg__\",\n                          &xdest[n], len, 1);\n           continue;\n         }\n@@ -9224,8 +9247,8 @@ output_reload_insisf (rtx *op, rtx clobber_reg, int *len)\n         {\n           /* Default needs 4 CLR instructions: clear register beforehand.  */\n           \n-          avr_asm_len (\"clr %A0\" CR_TAB\n-                       \"clr %B0\" CR_TAB\n+          avr_asm_len (\"mov %A0,__zero_reg__\" CR_TAB\n+                       \"mov %B0,__zero_reg__\" CR_TAB\n                        \"movw %C0,%A0\", &op[0], len, 3);\n           \n           output_reload_in_const (op, clobber_reg, len, true);"}, {"sha": "9f3c3f107a0c4685f4e1894a61617fe4aeecde1a", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/299c4b5f8853aa54f17ed38602aced0af0f5b503/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=299c4b5f8853aa54f17ed38602aced0af0f5b503", "patch": "@@ -95,7 +95,7 @@\n   \n ;; Condition code settings.\n (define_attr \"cc\" \"none,set_czn,set_zn,set_n,compare,clobber,\n-                   out_plus, out_plus_noclobber\"\n+                   out_plus, out_plus_noclobber,ldi\"\n   (const_string \"none\"))\n \n (define_attr \"type\" \"branch,branch1,arith,xcall\"\n@@ -584,7 +584,7 @@\n   }\n   [(set_attr \"length\" \"1,1,5,5,1,1,4\")\n    (set_attr \"adjust_len\" \"mov8\")\n-   (set_attr \"cc\" \"none,none,clobber,clobber,none,none,clobber\")])\n+   (set_attr \"cc\" \"ldi,none,clobber,clobber,none,none,clobber\")])\n \n ;; This is used in peephole2 to optimize loading immediate constants\n ;; if a scratch register from LD_REGS happens to be available."}]}