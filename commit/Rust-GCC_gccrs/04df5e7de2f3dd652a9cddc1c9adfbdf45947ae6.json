{"sha": "04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkZjVlN2RlMmYzZGQ2NTJhOWNkZGMxYzlhZGZiZGY0NTk0N2FlNg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-27T16:44:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-08-27T16:44:40Z"}, "message": "ia32: Fix alignment of _Atomic fields [PR65146]\n\nFor _Atomic fields, lowering the alignment of long long or double etc.\nfields on ia32 is undesirable, because then one really can't perform atomic\noperations on those using cmpxchg8b.\n\nThe following patch stops lowering the alignment in fields for _Atomic\ntypes (the x86_field_alignment change) and for -mpreferred-stack-boundary=2\nalso ensures we don't misalign _Atomic long long etc. automatic variables\n(the ix86_{local,minimum}_alignment changes).\nNot sure about iamcu_alignment change, I know next to nothing about IA MCU,\nbut unless it doesn't have cmpxchg8b instruction, it would surprise me if we\ndon't want to do it as well.\nclang apparently doesn't lower the field alignment for _Atomic.\n\n2020-08-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/65146\n\t* config/i386/i386.c (iamcu_alignment): Don't decrease alignment\n\tfor TYPE_ATOMIC types.\n\t(ix86_local_alignment): Likewise.\n\t(ix86_minimum_alignment): Likewise.\n\t(x86_field_alignment): Likewise, and emit a -Wpsabi diagnostic\n\tfor it.\n\n\t* gcc.target/i386/pr65146.c: New test.", "tree": {"sha": "c72fded4155fe7118553038173a04e3b507d0d66", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c72fded4155fe7118553038173a04e3b507d0d66"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abca87c57847cd04f5e05935ff9ae5121c1ecb1d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/abca87c57847cd04f5e05935ff9ae5121c1ecb1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/abca87c57847cd04f5e05935ff9ae5121c1ecb1d"}], "stats": {"total": 47, "additions": 42, "deletions": 5}, "files": [{"sha": "a15807d91da366eebf7a0f17f61d0f702f6f10e9", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "patch": "@@ -16487,7 +16487,11 @@ iamcu_alignment (tree type, int align)\n \n   /* Intel MCU psABI specifies scalar types > 4 bytes aligned to 4\n      bytes.  */\n-  mode = TYPE_MODE (strip_array_types (type));\n+  type = strip_array_types (type);\n+  if (TYPE_ATOMIC (type))\n+    return align;\n+\n+  mode = TYPE_MODE (type);\n   switch (GET_MODE_CLASS (mode))\n     {\n     case MODE_INT:\n@@ -16644,7 +16648,8 @@ ix86_local_alignment (tree exp, machine_mode mode,\n       && align == 64\n       && ix86_preferred_stack_boundary < 64\n       && (mode == DImode || (type && TYPE_MODE (type) == DImode))\n-      && (!type || !TYPE_USER_ALIGN (type))\n+      && (!type || (!TYPE_USER_ALIGN (type)\n+\t\t    && !TYPE_ATOMIC (strip_array_types (type))))\n       && (!decl || !DECL_USER_ALIGN (decl)))\n     align = 32;\n \n@@ -16757,7 +16762,8 @@ ix86_minimum_alignment (tree exp, machine_mode mode,\n   /* Don't do dynamic stack realignment for long long objects with\n      -mpreferred-stack-boundary=2.  */\n   if ((mode == DImode || (type && TYPE_MODE (type) == DImode))\n-      && (!type || !TYPE_USER_ALIGN (type))\n+      && (!type || (!TYPE_USER_ALIGN (type)\n+\t\t    && !TYPE_ATOMIC (strip_array_types (type))))\n       && (!decl || !DECL_USER_ALIGN (decl)))\n     {\n       gcc_checking_assert (!TARGET_STV);\n@@ -20293,11 +20299,30 @@ x86_field_alignment (tree type, int computed)\n     return computed;\n   if (TARGET_IAMCU)\n     return iamcu_alignment (type, computed);\n-  mode = TYPE_MODE (strip_array_types (type));\n+  type = strip_array_types (type);\n+  mode = TYPE_MODE (type);\n   if (mode == DFmode || mode == DCmode\n       || GET_MODE_CLASS (mode) == MODE_INT\n       || GET_MODE_CLASS (mode) == MODE_COMPLEX_INT)\n-    return MIN (32, computed);\n+    {\n+      if (TYPE_ATOMIC (type) && computed > 32)\n+\t{\n+\t  static bool warned;\n+\n+\t  if (!warned && warn_psabi)\n+\t    {\n+\t      const char *url\n+\t\t= CHANGES_ROOT_URL \"gcc-11/changes.html#ia32_atomic\";\n+\n+\t      warned = true;\n+\t      inform (input_location, \"the alignment of %<_Atomic %T%> \"\n+\t\t\t\t      \"fields changed in %{GCC 11.1%}\",\n+\t\t      TYPE_MAIN_VARIANT (type), url);\n+\t    }\n+\t}\n+      else\n+      return MIN (32, computed);\n+    }\n   return computed;\n }\n "}, {"sha": "96284e0557073cf48e36d1309584d9403ac43fbc", "filename": "gcc/testsuite/gcc.target/i386/pr65146.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65146.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65146.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65146.c?ref=04df5e7de2f3dd652a9cddc1c9adfbdf45947ae6", "patch": "@@ -0,0 +1,12 @@\n+/* PR target/65146 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wno-psabi\" } */\n+\n+struct A { char a; _Atomic long long b; };\n+struct B { char a; _Atomic double b; };\n+struct C { char a; _Atomic long long b[2]; };\n+struct D { char a; _Atomic double b[2]; };\n+extern int a[__builtin_offsetof (struct A, b) == 8 ? 1 : -1];\n+extern int b[__builtin_offsetof (struct B, b) == 8 ? 1 : -1];\n+extern int c[__builtin_offsetof (struct C, b) == 8 ? 1 : -1];\n+extern int d[__builtin_offsetof (struct D, b) == 8 ? 1 : -1];"}]}