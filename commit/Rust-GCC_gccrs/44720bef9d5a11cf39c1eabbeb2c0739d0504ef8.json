{"sha": "44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQ3MjBiZWY5ZDVhMTFjZjM5YzFlYWJiZWIyYzA3MzlkMDUwNGVmOA==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-12T19:27:49Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2011-04-12T19:27:49Z"}, "message": "Cleanup memsize types\n\nFrom-SVN: r172340", "tree": {"sha": "17933ebe7d8de121ec47c896cf51dd424e7498fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17933ebe7d8de121ec47c896cf51dd424e7498fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/comments", "author": null, "committer": null, "parents": [{"sha": "99ee02511431124acbfded6350ce5f857664560d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99ee02511431124acbfded6350ce5f857664560d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99ee02511431124acbfded6350ce5f857664560d"}], "stats": {"total": 292, "additions": 176, "deletions": 116}, "files": [{"sha": "82c59bcd04f92d9ce9678dc8e802d91886b762ae", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -1,3 +1,18 @@\n+2011-04-12  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+\t* configure.ac: Use AC_TYPE_* to make sure we have (u)intptr_t,\n+\tcheck for ptrdiff_t.\n+\t* libgfortran.h: Remove (u)intptr_t definitions, use ptrdiff_t for\n+\tindex_type, change cshift0* prototypes.\n+\t* config.h.in: Regenerated.\n+\t* configure: Regenerated.\n+\t* intrinsics/cshift0.c (cshift0): Use ptrdiff_t instead of ssize_t.\n+\t* io/io.h (array_loop_spec): Use index_type instead of ssize_t.\n+\t* io/list_read.c (nml_parse_qualifier): Likewise.\n+\t* io/write.c (nml_write_obj): Likewise.\n+\t* m4/cshift0.c (cshift0_'rtype_code`): Likewise.\n+\t* generated/cshift0_*.c: Regenerated.\n+\n 2011-04-12  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* Makefile.am: Remove _GNU_SOURCE from AM_CPPFLAGS."}, {"sha": "76f1b2d3d1625063a1fc88b6d7a2551aebf8c47a", "filename": "libgfortran/config.h.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfig.h.in?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -630,6 +630,9 @@\n /* libm includes powl */\n #undef HAVE_POWL\n \n+/* Define to 1 if the system has the type `ptrdiff_t'. */\n+#undef HAVE_PTRDIFF_T\n+\n /* Define to 1 if you have the <pwd.h> header file. */\n #undef HAVE_PWD_H\n \n@@ -945,5 +948,13 @@\n /* Define to 1 if you need to in order for `stat' and other things to work. */\n #undef _POSIX_SOURCE\n \n+/* Define to the type of a signed integer type wide enough to hold a pointer,\n+   if such a type exists, and if the system does not define it. */\n+#undef intptr_t\n+\n /* Define to `long int' if <sys/types.h> does not define. */\n #undef off_t\n+\n+/* Define to the type of an unsigned integer type wide enough to hold a\n+   pointer, if such a type exists, and if the system does not define it. */\n+#undef uintptr_t"}, {"sha": "393650ad97e2455971ebfb51c50a8aece411a7ea", "filename": "libgfortran/configure", "status": "modified", "additions": 83, "deletions": 22, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -15634,6 +15634,8 @@ rm -rf conftest*\n   fi\n fi\n \n+\n+# Types\n ac_fn_c_check_type \"$LINENO\" \"off_t\" \"ac_cv_type_off_t\" \"$ac_includes_default\"\n if test \"x$ac_cv_type_off_t\" = x\"\"yes; then :\n \n@@ -15643,6 +15645,87 @@ cat >>confdefs.h <<_ACEOF\n #define off_t long int\n _ACEOF\n \n+fi\n+\n+\n+  ac_fn_c_check_type \"$LINENO\" \"intptr_t\" \"ac_cv_type_intptr_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_intptr_t\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_INTPTR_T 1\" >>confdefs.h\n+\n+else\n+  for ac_type in 'int' 'long int' 'long long int'; do\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(sizeof (void *) <= sizeof ($ac_type))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define intptr_t $ac_type\n+_ACEOF\n+\n+\t  ac_type=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+       test -z \"$ac_type\" && break\n+     done\n+fi\n+\n+\n+\n+  ac_fn_c_check_type \"$LINENO\" \"uintptr_t\" \"ac_cv_type_uintptr_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_uintptr_t\" = x\"\"yes; then :\n+\n+$as_echo \"#define HAVE_UINTPTR_T 1\" >>confdefs.h\n+\n+else\n+  for ac_type in 'unsigned int' 'unsigned long int' \\\n+\t'unsigned long long int'; do\n+       cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$ac_includes_default\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(sizeof (void *) <= sizeof ($ac_type))];\n+test_array [0] = 0\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define uintptr_t $ac_type\n+_ACEOF\n+\n+\t  ac_type=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+       test -z \"$ac_type\" && break\n+     done\n+fi\n+\n+\n+ac_fn_c_check_type \"$LINENO\" \"ptrdiff_t\" \"ac_cv_type_ptrdiff_t\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_ptrdiff_t\" = x\"\"yes; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_PTRDIFF_T 1\n+_ACEOF\n+\n+\n fi\n \n \n@@ -16404,28 +16487,6 @@ fi\n done\n \n \n-# Check for types\n-ac_fn_c_check_type \"$LINENO\" \"intptr_t\" \"ac_cv_type_intptr_t\" \"$ac_includes_default\"\n-if test \"x$ac_cv_type_intptr_t\" = x\"\"yes; then :\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_INTPTR_T 1\n-_ACEOF\n-\n-\n-fi\n-\n-ac_fn_c_check_type \"$LINENO\" \"uintptr_t\" \"ac_cv_type_uintptr_t\" \"$ac_includes_default\"\n-if test \"x$ac_cv_type_uintptr_t\" = x\"\"yes; then :\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HAVE_UINTPTR_T 1\n-_ACEOF\n-\n-\n-fi\n-\n-\n # Check libc for getgid, getpid, getuid\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for getgid in -lc\" >&5\n $as_echo_n \"checking for getgid in -lc... \" >&6; }"}, {"sha": "8235c8835723fe34d5d55526d691e9316041e175", "filename": "libgfortran/configure.ac", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fconfigure.ac?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -236,7 +236,12 @@ AC_SUBST(extra_ldflags_libgfortran)\n LIBGFOR_WORKING_GFORTRAN\n \n AC_SYS_LARGEFILE\n+\n+# Types\n AC_TYPE_OFF_T\n+AC_TYPE_INTPTR_T\n+AC_TYPE_UINTPTR_T\n+AC_CHECK_TYPES([ptrdiff_t])\n \n # check header files\n AC_STDC_HEADERS\n@@ -264,10 +269,6 @@ AC_CHECK_FUNCS(clock_gettime strftime)\n # Check for glibc backtrace functions\n AC_CHECK_FUNCS(backtrace backtrace_symbols)\n \n-# Check for types\n-AC_CHECK_TYPES([intptr_t])\n-AC_CHECK_TYPES([uintptr_t])\n-\n # Check libc for getgid, getpid, getuid\n AC_CHECK_LIB([c],[getgid],[AC_DEFINE([HAVE_GETGID],[1],[libc includes getgid])])\n AC_CHECK_LIB([c],[getpid],[AC_DEFINE([HAVE_GETPID],[1],[libc includes getpid])])"}, {"sha": "ec4bb8a084db1aa4d867b17505c1db33fbd74d28", "filename": "libgfortran/generated/cshift0_c10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_c10.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_COMPLEX_10)\n \n void\n-cshift0_c10 (gfc_array_c10 *ret, const gfc_array_c10 *array, ssize_t shift,\n+cshift0_c10 (gfc_array_c10 *ret, const gfc_array_c10 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_c10 (gfc_array_c10 *ret, const gfc_array_c10 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "ac7e8b762c7981464c62c8be9aaa498a59c9faa7", "filename": "libgfortran/generated/cshift0_c16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_c16.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_COMPLEX_16)\n \n void\n-cshift0_c16 (gfc_array_c16 *ret, const gfc_array_c16 *array, ssize_t shift,\n+cshift0_c16 (gfc_array_c16 *ret, const gfc_array_c16 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_c16 (gfc_array_c16 *ret, const gfc_array_c16 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "482af77f2a84c436d633bd1452e23d006107e824", "filename": "libgfortran/generated/cshift0_c4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_c4.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_COMPLEX_4)\n \n void\n-cshift0_c4 (gfc_array_c4 *ret, const gfc_array_c4 *array, ssize_t shift,\n+cshift0_c4 (gfc_array_c4 *ret, const gfc_array_c4 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_c4 (gfc_array_c4 *ret, const gfc_array_c4 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "2b3a69ef4955e6d26294d4bea8aabca23eafece7", "filename": "libgfortran/generated/cshift0_c8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_c8.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_COMPLEX_8)\n \n void\n-cshift0_c8 (gfc_array_c8 *ret, const gfc_array_c8 *array, ssize_t shift,\n+cshift0_c8 (gfc_array_c8 *ret, const gfc_array_c8 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_c8 (gfc_array_c8 *ret, const gfc_array_c8 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "65173e3cc6a787e27281f6a4e343b6ba465e420d", "filename": "libgfortran/generated/cshift0_i1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_i1.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_INTEGER_1)\n \n void\n-cshift0_i1 (gfc_array_i1 *ret, const gfc_array_i1 *array, ssize_t shift,\n+cshift0_i1 (gfc_array_i1 *ret, const gfc_array_i1 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_i1 (gfc_array_i1 *ret, const gfc_array_i1 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "4374c45f8206721709cbb4a75ef0727ab870f9fc", "filename": "libgfortran/generated/cshift0_i16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_i16.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_INTEGER_16)\n \n void\n-cshift0_i16 (gfc_array_i16 *ret, const gfc_array_i16 *array, ssize_t shift,\n+cshift0_i16 (gfc_array_i16 *ret, const gfc_array_i16 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_i16 (gfc_array_i16 *ret, const gfc_array_i16 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "1a39632d21757eacbef61cb087e0903a14bf2c2a", "filename": "libgfortran/generated/cshift0_i2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_i2.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_INTEGER_2)\n \n void\n-cshift0_i2 (gfc_array_i2 *ret, const gfc_array_i2 *array, ssize_t shift,\n+cshift0_i2 (gfc_array_i2 *ret, const gfc_array_i2 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_i2 (gfc_array_i2 *ret, const gfc_array_i2 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "9d223634fcefa80e1dcefd521ab3f977b38e3b0e", "filename": "libgfortran/generated/cshift0_i4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_i4.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_INTEGER_4)\n \n void\n-cshift0_i4 (gfc_array_i4 *ret, const gfc_array_i4 *array, ssize_t shift,\n+cshift0_i4 (gfc_array_i4 *ret, const gfc_array_i4 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_i4 (gfc_array_i4 *ret, const gfc_array_i4 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "43358aa1224987f28b21fc9298b94d8970489ffa", "filename": "libgfortran/generated/cshift0_i8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_i8.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_INTEGER_8)\n \n void\n-cshift0_i8 (gfc_array_i8 *ret, const gfc_array_i8 *array, ssize_t shift,\n+cshift0_i8 (gfc_array_i8 *ret, const gfc_array_i8 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_i8 (gfc_array_i8 *ret, const gfc_array_i8 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "bf469fd1a0072ba226a7f405735f36ae4f6d15bb", "filename": "libgfortran/generated/cshift0_r10.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_r10.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_10)\n \n void\n-cshift0_r10 (gfc_array_r10 *ret, const gfc_array_r10 *array, ssize_t shift,\n+cshift0_r10 (gfc_array_r10 *ret, const gfc_array_r10 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_r10 (gfc_array_r10 *ret, const gfc_array_r10 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "b9e19ffb6e98d2178bd899f0880c24bad30c3ae9", "filename": "libgfortran/generated/cshift0_r16.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_r16.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_16)\n \n void\n-cshift0_r16 (gfc_array_r16 *ret, const gfc_array_r16 *array, ssize_t shift,\n+cshift0_r16 (gfc_array_r16 *ret, const gfc_array_r16 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_r16 (gfc_array_r16 *ret, const gfc_array_r16 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "9bd02142455cf64057355c43cf686d08af1c45e3", "filename": "libgfortran/generated/cshift0_r4.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_r4.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_4)\n \n void\n-cshift0_r4 (gfc_array_r4 *ret, const gfc_array_r4 *array, ssize_t shift,\n+cshift0_r4 (gfc_array_r4 *ret, const gfc_array_r4 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_r4 (gfc_array_r4 *ret, const gfc_array_r4 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "1f99135eb94be0a71945a1a419818e373cdcfb44", "filename": "libgfortran/generated/cshift0_r8.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fgenerated%2Fcshift0_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fcshift0_r8.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -32,7 +32,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #if defined (HAVE_GFC_REAL_8)\n \n void\n-cshift0_r8 (gfc_array_r8 *ret, const gfc_array_r8 *array, ssize_t shift,\n+cshift0_r8 (gfc_array_r8 *ret, const gfc_array_r8 *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -97,7 +97,7 @@ cshift0_r8 (gfc_array_r8 *ret, const gfc_array_r8 *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "00a50d5db7c6fe00de717da3f0d3e2f545f5e40a", "filename": "libgfortran/intrinsics/cshift0.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fintrinsics%2Fcshift0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fintrinsics%2Fcshift0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fcshift0.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -30,7 +30,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n static void\n cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n-\t ssize_t shift, int which, index_type size)\n+\t ptrdiff_t shift, int which, index_type size)\n {\n   /* r.* indicates the return array.  */\n   index_type rstride[GFC_MAX_DIMENSIONS];\n@@ -328,7 +328,7 @@ cshift0 (gfc_array_char * ret, const gfc_array_char * array,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}, {"sha": "37353d742e87d45464c6a6cde0782ffd716cc18a", "filename": "libgfortran/io/io.h", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Fio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Fio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fio.h?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -53,22 +53,21 @@ struct gfc_unit;\n #define is_char4_unit(dtp) ((dtp)->u.p.unit_is_internal && (dtp)->common.unit)\n \n /* The array_loop_spec contains the variables for the loops over index ranges\n-   that are encountered.  Since the variables can be negative, ssize_t\n-   is used.  */\n+   that are encountered.  */\n \n typedef struct array_loop_spec\n {\n   /* Index counter for this dimension.  */\n-  ssize_t idx;\n+  index_type idx;\n \n   /* Start for the index counter.  */\n-  ssize_t start;\n+  index_type start;\n \n   /* End for the index counter.  */\n-  ssize_t end;\n+  index_type end;\n \n   /* Step for the index counter.  */\n-  ssize_t step;\n+  index_type step;\n }\n array_loop_spec;\n "}, {"sha": "39783bf3c61f4e56840408b614705452771fb112", "filename": "libgfortran/io/list_read.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Flist_read.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Flist_read.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Flist_read.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -2172,7 +2172,7 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t\t}\n \n \t      /* Now read the index.  */\n-\t      if (convert_integer (dtp, sizeof(ssize_t), neg))\n+\t      if (convert_integer (dtp, sizeof(index_type), neg))\n \t\t{\n \t\t  if (is_char)\n \t\t    sprintf (parse_err_msg, \"Bad integer substring qualifier\");\n@@ -2187,19 +2187,19 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t  if (!null_flag)\n \t    {\n \t      if (indx == 0)\n-\t\tmemcpy (&ls[dim].start, dtp->u.p.value, sizeof(ssize_t));\n+\t\tmemcpy (&ls[dim].start, dtp->u.p.value, sizeof(index_type));\n \t      if (indx == 1)\n-\t\tmemcpy (&ls[dim].end, dtp->u.p.value, sizeof(ssize_t));\n+\t\tmemcpy (&ls[dim].end, dtp->u.p.value, sizeof(index_type));\n \t      if (indx == 2)\n-\t\tmemcpy (&ls[dim].step, dtp->u.p.value, sizeof(ssize_t));\n+\t\tmemcpy (&ls[dim].step, dtp->u.p.value, sizeof(index_type));\n \t    }\n \n \t  /* Singlet or doublet indices.  */\n \t  if (c==',' || c==')')\n \t    {\n \t      if (indx == 0)\n \t\t{\n-\t\t  memcpy (&ls[dim].start, dtp->u.p.value, sizeof(ssize_t));\n+\t\t  memcpy (&ls[dim].start, dtp->u.p.value, sizeof(index_type));\n \n \t\t  /*  If -std=f95/2003 or an array section is specified,\n \t\t      do not allow excess data to be processed.  */\n@@ -2229,10 +2229,10 @@ nml_parse_qualifier (st_parameter_dt *dtp, descriptor_dimension *ad,\n \t}\n \n       /* Check the values of the triplet indices.  */\n-      if ((ls[dim].start > (ssize_t) GFC_DIMENSION_UBOUND(ad[dim]))\n-\t   || (ls[dim].start < (ssize_t) GFC_DIMENSION_LBOUND(ad[dim]))\n-\t   || (ls[dim].end > (ssize_t) GFC_DIMENSION_UBOUND(ad[dim]))\n-\t   || (ls[dim].end < (ssize_t) GFC_DIMENSION_LBOUND(ad[dim])))\n+      if ((ls[dim].start > GFC_DIMENSION_UBOUND(ad[dim]))\n+\t   || (ls[dim].start < GFC_DIMENSION_LBOUND(ad[dim]))\n+\t   || (ls[dim].end > GFC_DIMENSION_UBOUND(ad[dim]))\n+\t   || (ls[dim].end < GFC_DIMENSION_LBOUND(ad[dim])))\n \t{\n \t  if (is_char)\n \t    sprintf (parse_err_msg, \"Substring out of range\");"}, {"sha": "4733d51e8822b140eba2a9367baf992cc6fcbfbb", "filename": "libgfortran/io/write.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Fwrite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fio%2Fwrite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Fwrite.c?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -1932,7 +1932,7 @@ nml_write_obj (st_parameter_dt *dtp, namelist_info * obj, index_type offset,\n       {\n \tobj->ls[dim_i].idx += nml_carry ;\n \tnml_carry = 0;\n- \tif (obj->ls[dim_i].idx  > (ssize_t) GFC_DESCRIPTOR_UBOUND(obj,dim_i))\n+ \tif (obj->ls[dim_i].idx  > GFC_DESCRIPTOR_UBOUND(obj,dim_i))\n \t  {\n  \t    obj->ls[dim_i].idx = GFC_DESCRIPTOR_LBOUND(obj,dim_i);\n \t    nml_carry = 1;"}, {"sha": "7d9aca1cb72dc018d4a7dde98b3d1ab0203ab368", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 17, "deletions": 44, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -106,38 +106,11 @@ typedef off_t gfc_offset;\n #endif\n \n \n-/* We use intptr_t and uintptr_t, which may not be always defined in\n-   system headers.  */\n-\n-#ifndef HAVE_INTPTR_T\n-#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n-#define intptr_t long\n-#elif __SIZEOF_POINTER__ == __SIZEOF_LONG_LONG__\n-#define intptr_t long long\n-#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n-#define intptr_t int\n-#elif __SIZEOF_POINTER__ == __SIZEOF_SHORT__\n-#define intptr_t short\n-#else\n-#error \"Pointer type with unexpected size\"\n-#endif\n+/* Make sure we have ptrdiff_t. */\n+#ifndef HAVE_PTRDIFF_T\n+typedef intptr_t ptrdiff_t;\n #endif\n \n-#ifndef HAVE_UINTPTR_T\n-#if __SIZEOF_POINTER__ == __SIZEOF_LONG__\n-#define uintptr_t unsigned long\n-#elif __SIZEOF_POINTER__ == __SIZEOF_LONG_LONG__\n-#define uintptr_t unsigned long long\n-#elif __SIZEOF_POINTER__ == __SIZEOF_INT__\n-#define uintptr_t unsigned int\n-#elif __SIZEOF_POINTER__ == __SIZEOF_SHORT__\n-#define uintptr_t unsigned short\n-#else\n-#error \"Pointer type with unexpected size\"\n-#endif\n-#endif\n-\n-\n /* On mingw, work around the buggy Windows snprintf() by using the one\n    mingw provides, __mingw_snprintf().  We also provide a prototype for\n    __mingw_snprintf(), because the mingw headers currently don't have one.  */\n@@ -269,7 +242,7 @@ typedef GFC_INTEGER_4 GFC_IO_INT;\n /* The following two definitions must be consistent with the types used\n    by the compiler.  */\n /* The type used of array indices, amongst other things.  */\n-typedef ssize_t index_type;\n+typedef ptrdiff_t index_type;\n \n /* The type used for the lengths of character variables.  */\n typedef GFC_INTEGER_4 gfc_charlen_type;\n@@ -1323,52 +1296,52 @@ internal_proto(count_0);\n \n /* Internal auxiliary functions for cshift */\n \n-void cshift0_i1 (gfc_array_i1 *, const gfc_array_i1 *, ssize_t, int);\n+void cshift0_i1 (gfc_array_i1 *, const gfc_array_i1 *, ptrdiff_t, int);\n internal_proto(cshift0_i1);\n \n-void cshift0_i2 (gfc_array_i2 *, const gfc_array_i2 *, ssize_t, int);\n+void cshift0_i2 (gfc_array_i2 *, const gfc_array_i2 *, ptrdiff_t, int);\n internal_proto(cshift0_i2);\n \n-void cshift0_i4 (gfc_array_i4 *, const gfc_array_i4 *, ssize_t, int);\n+void cshift0_i4 (gfc_array_i4 *, const gfc_array_i4 *, ptrdiff_t, int);\n internal_proto(cshift0_i4);\n \n-void cshift0_i8 (gfc_array_i8 *, const gfc_array_i8 *, ssize_t, int);\n+void cshift0_i8 (gfc_array_i8 *, const gfc_array_i8 *, ptrdiff_t, int);\n internal_proto(cshift0_i8);\n \n #ifdef HAVE_GFC_INTEGER_16\n-void cshift0_i16 (gfc_array_i16 *, const gfc_array_i16 *, ssize_t, int);\n+void cshift0_i16 (gfc_array_i16 *, const gfc_array_i16 *, ptrdiff_t, int);\n internal_proto(cshift0_i16);\n #endif\n \n-void cshift0_r4 (gfc_array_r4 *, const gfc_array_r4 *, ssize_t, int);\n+void cshift0_r4 (gfc_array_r4 *, const gfc_array_r4 *, ptrdiff_t, int);\n internal_proto(cshift0_r4);\n \n-void cshift0_r8 (gfc_array_r8 *, const gfc_array_r8 *, ssize_t, int);\n+void cshift0_r8 (gfc_array_r8 *, const gfc_array_r8 *, ptrdiff_t, int);\n internal_proto(cshift0_r8);\n \n #ifdef HAVE_GFC_REAL_10\n-void cshift0_r10 (gfc_array_r10 *, const gfc_array_r10 *, ssize_t, int);\n+void cshift0_r10 (gfc_array_r10 *, const gfc_array_r10 *, ptrdiff_t, int);\n internal_proto(cshift0_r10);\n #endif\n \n #ifdef HAVE_GFC_REAL_16\n-void cshift0_r16 (gfc_array_r16 *, const gfc_array_r16 *, ssize_t, int);\n+void cshift0_r16 (gfc_array_r16 *, const gfc_array_r16 *, ptrdiff_t, int);\n internal_proto(cshift0_r16);\n #endif\n \n-void cshift0_c4 (gfc_array_c4 *, const gfc_array_c4 *, ssize_t, int);\n+void cshift0_c4 (gfc_array_c4 *, const gfc_array_c4 *, ptrdiff_t, int);\n internal_proto(cshift0_c4);\n \n-void cshift0_c8 (gfc_array_c8 *, const gfc_array_c8 *, ssize_t, int);\n+void cshift0_c8 (gfc_array_c8 *, const gfc_array_c8 *, ptrdiff_t, int);\n internal_proto(cshift0_c8);\n \n #ifdef HAVE_GFC_COMPLEX_10\n-void cshift0_c10 (gfc_array_c10 *, const gfc_array_c10 *, ssize_t, int);\n+void cshift0_c10 (gfc_array_c10 *, const gfc_array_c10 *, ptrdiff_t, int);\n internal_proto(cshift0_c10);\n #endif\n \n #ifdef HAVE_GFC_COMPLEX_16\n-void cshift0_c16 (gfc_array_c16 *, const gfc_array_c16 *, ssize_t, int);\n+void cshift0_c16 (gfc_array_c16 *, const gfc_array_c16 *, ptrdiff_t, int);\n internal_proto(cshift0_c16);\n #endif\n "}, {"sha": "5c0d22e8191c44958f17fd6b26d60c035728c1b0", "filename": "libgfortran/m4/cshift0.m4", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fm4%2Fcshift0.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/44720bef9d5a11cf39c1eabbeb2c0739d0504ef8/libgfortran%2Fm4%2Fcshift0.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fcshift0.m4?ref=44720bef9d5a11cf39c1eabbeb2c0739d0504ef8", "patch": "@@ -33,7 +33,7 @@ include(iparm.m4)dnl\n `#if defined (HAVE_'rtype_name`)\n \n void\n-cshift0_'rtype_code` ('rtype` *ret, const 'rtype` *array, ssize_t shift,\n+cshift0_'rtype_code` ('rtype` *ret, const 'rtype` *array, ptrdiff_t shift,\n \t\t     int which)\n {\n   /* r.* indicates the return array.  */\n@@ -98,7 +98,7 @@ cshift0_'rtype_code` ('rtype` *ret, const 'rtype` *array, ssize_t shift,\n   rptr = ret->data;\n   sptr = array->data;\n \n-  shift = len == 0 ? 0 : shift % (ssize_t)len;\n+  shift = len == 0 ? 0 : shift % (ptrdiff_t)len;\n   if (shift < 0)\n     shift += len;\n "}]}