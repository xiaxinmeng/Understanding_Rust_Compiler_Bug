{"sha": "6c1f23fff1c23c17d9a6599e0855743474ff9f57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmMxZjIzZmZmMWMyM2MxN2Q5YTY1OTllMDg1NTc0MzQ3NGZmOWY1Nw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2017-09-26T18:12:33Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2017-09-26T18:12:33Z"}, "message": "rs6000.md (movsi_from_df): Optimize converting a DFmode to a SFmode...\n\n2017-09-26  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\t* config/rs6000/rs6000.md (movsi_from_df): Optimize converting a\n\tDFmode to a SFmode, and then needing to move the SFmode to a GPR\n\tto use the XSCVDPSP instruction instead of FRSP and XSCVDPSPN.\n\nFrom-SVN: r253210", "tree": {"sha": "130f78f492150af7bcc7381c7655f140f0f71b68", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/130f78f492150af7bcc7381c7655f140f0f71b68"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6c1f23fff1c23c17d9a6599e0855743474ff9f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1f23fff1c23c17d9a6599e0855743474ff9f57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c1f23fff1c23c17d9a6599e0855743474ff9f57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c1f23fff1c23c17d9a6599e0855743474ff9f57/comments", "author": null, "committer": null, "parents": [{"sha": "d33a4d86f19ea7017216d2363fe045d044d8fdf1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d33a4d86f19ea7017216d2363fe045d044d8fdf1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d33a4d86f19ea7017216d2363fe045d044d8fdf1"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "7c8ff6c20fd0e0fd55cdd366fcead20f40b15b7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1f23fff1c23c17d9a6599e0855743474ff9f57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1f23fff1c23c17d9a6599e0855743474ff9f57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6c1f23fff1c23c17d9a6599e0855743474ff9f57", "patch": "@@ -11,7 +11,9 @@\n \t(movdi_from_sf_zero_ext): Likewise.\n \t(reload_gpr_from_vsxsf): Likewise.\n \t(p8_mfvsrd_4_disf): Delete, no longer used.\n-\n+\t(movsi_from_df): Optimize converting a DFmode to a SFmode, and\n+\tthen needing to move the SFmode to a GPR to use the XSCVDPSP\n+\tinstruction instead of FRSP and XSCVDPSPN.\n \n 2017-09-26  Martin Jambor  <mjambor@suse.cz>\n "}, {"sha": "9b10e7fd44aa28b919f97ea2b439ce3643ff4973", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6c1f23fff1c23c17d9a6599e0855743474ff9f57/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6c1f23fff1c23c17d9a6599e0855743474ff9f57/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=6c1f23fff1c23c17d9a6599e0855743474ff9f57", "patch": "@@ -6919,6 +6919,26 @@\n \t\t\"4,          4,           4,           4,        8,\n \t\t 8,          4\")])\n \n+;; Like movsi_from_sf, but combine a convert from DFmode to SFmode before\n+;; moving it to SImode.  We can do a SFmode store without having to do the\n+;; conversion explicitly.  If we are doing a register->register conversion, use\n+;; XSCVDPSP instead of XSCVDPSPN, since the former handles cases where the\n+;; input will not fit in a SFmode, and the later assumes the value has already\n+;; been rounded.\n+(define_insn \"*movsi_from_df\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\"         \"=wa,m,wY,Z\")\n+\t(unspec:SI [(float_truncate:SF\n+\t\t     (match_operand:DF 1 \"gpc_reg_operand\" \"wa, f,wb,wa\"))]\n+\t\t    UNSPEC_SI_FROM_SF))]\n+\n+  \"TARGET_NO_SF_SUBREG\"\n+  \"@\n+   xscvdpsp %x0,%x1\n+   stfs%U0%X0 %1,%0\n+   stxssp %1,%0\n+   stxsspx %x1,%y0\"\n+  [(set_attr \"type\"   \"fp,fpstore,fpstore,fpstore\")])\n+\n ;; Split a load of a large constant into the appropriate two-insn\n ;; sequence.\n "}]}