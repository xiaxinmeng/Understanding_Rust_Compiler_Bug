{"sha": "43b45e9412666bbca236671eb66284847951a2e6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiNDVlOTQxMjY2NmJiY2EyMzY2NzFlYjY2Mjg0ODQ3OTUxYTJlNg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-15T21:21:12Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-08-15T21:21:12Z"}, "message": "diagnostic.c (fatal_function): New variable.\n\n\t* diagnostic.c (fatal_function): New variable.\n\t(set_fatal_function): New function.\n\t(fatal): Call it.\n\t* diagnostic.h (set_fatal_function): New declaration.\n\nFrom-SVN: r35731", "tree": {"sha": "7de5257933eb4f46d5ff0bb085d32477aaacc543", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7de5257933eb4f46d5ff0bb085d32477aaacc543"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b45e9412666bbca236671eb66284847951a2e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b45e9412666bbca236671eb66284847951a2e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b45e9412666bbca236671eb66284847951a2e6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b45e9412666bbca236671eb66284847951a2e6/comments", "author": null, "committer": null, "parents": [{"sha": "568472074acbbbb5ea2964161c9eb26fd5f55a0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/568472074acbbbb5ea2964161c9eb26fd5f55a0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/568472074acbbbb5ea2964161c9eb26fd5f55a0b"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "fbaaec6f1db3e2fe7b84e2034abf29ce5dc3ea3f", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b45e9412666bbca236671eb66284847951a2e6/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b45e9412666bbca236671eb66284847951a2e6/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=43b45e9412666bbca236671eb66284847951a2e6", "patch": "@@ -127,7 +127,7 @@ static tree last_error_function = NULL;\n static int last_error_tick;\n \n /* Called by report_error_function to print out function name.\n- * Default may be overridden by language front-ends.  */\n+   Default may be overridden by language front-ends.  */\n \n void (*print_error_function) PARAMS ((const char *)) =\n   default_print_error_function;\n@@ -153,6 +153,7 @@ initialize_diagnostics ()\n   /* By default, we don't line-wrap messages.  */\n   diagnostic_message_length_per_line = 0;\n   set_message_prefixing_rule (DIAGNOSTICS_SHOW_PREFIX_ONCE);\n+\n   /* Proceed to actual initialization.  */\n   default_initialize_buffer (diagnostic_buffer);\n }\n@@ -165,6 +166,7 @@ set_message_prefixing_rule (rule)\n }\n \n /* Returns true if BUFFER is in line-wrappind mode.  */\n+\n int\n output_is_line_wrapping (buffer)\n      output_buffer *buffer;\n@@ -173,6 +175,7 @@ output_is_line_wrapping (buffer)\n }\n \n /* Return BUFFER's prefix.  */\n+\n const char *\n output_get_prefix (buffer)\n      const output_buffer *buffer;\n@@ -182,6 +185,7 @@ output_get_prefix (buffer)\n \n /* Subroutine of output_set_maximum_length.  Set up BUFFER's\n    internal maximum characters per line.  */\n+\n static void\n set_real_maximum_length (buffer)\n      output_buffer *buffer;\n@@ -204,6 +208,7 @@ set_real_maximum_length (buffer)\n \n /* Sets the number of maximum characters per line BUFFER can output\n    in line-wrapping mode.  A LENGTH value 0 suppresses line-wrapping.  */\n+\n void\n output_set_maximum_length (buffer, length)\n      output_buffer *buffer;\n@@ -214,6 +219,7 @@ output_set_maximum_length (buffer, length)\n }\n \n /* Sets BUFFER's PREFIX.  */\n+\n void\n output_set_prefix (buffer, prefix)\n      output_buffer *buffer;\n@@ -224,7 +230,7 @@ output_set_prefix (buffer, prefix)\n   prefix_was_emitted_for (buffer) = 0;\n }\n \n-/* Free BUFFER's prefix, a previously malloc()'d string.  */\n+/* Free BUFFER's prefix, a previously malloc'd string.  */\n \n void\n output_destroy_prefix (buffer)\n@@ -238,6 +244,7 @@ output_destroy_prefix (buffer)\n }\n \n /* Zero out any text output so far in BUFFER.  */\n+\n static void\n clear_text_info (buffer)\n      output_buffer *buffer;\n@@ -247,6 +254,7 @@ clear_text_info (buffer)\n }\n \n /* Zero out any diagnostic data used so far by BUFFER.  */\n+\n static void\n clear_diagnostic_info (buffer)\n      output_buffer *buffer;\n@@ -258,6 +266,7 @@ clear_diagnostic_info (buffer)\n \n /* Construct an output BUFFER with PREFIX and of MAXIMUM_LENGTH\n    characters per line.  */\n+\n void\n init_output_buffer (buffer, prefix, maximum_length)\n      output_buffer *buffer;\n@@ -283,6 +292,7 @@ default_initialize_buffer (buffer)\n \n /* Recompute diagnostic_buffer's attributes to reflect any change\n    in diagnostic formatting global options.  */\n+\n void\n reshape_diagnostic_buffer ()\n {\n@@ -303,6 +313,7 @@ output_clear (buffer)\n \n /* Finishes to construct a NULL-terminated character string representing\n    the BUFFERed message.  */\n+\n const char *\n output_finish (buffer)\n      output_buffer *buffer;\n@@ -313,6 +324,7 @@ output_finish (buffer)\n \n /* Return the amount of characters BUFFER can accept to\n    make a full line.  */\n+\n int\n output_space_left (buffer)\n      const output_buffer *buffer;\n@@ -321,6 +333,7 @@ output_space_left (buffer)\n }\n \n /* Write out BUFFER's prefix.  */\n+\n void\n output_emit_prefix (buffer)\n      output_buffer *buffer;\n@@ -350,6 +363,7 @@ output_emit_prefix (buffer)\n }\n \n /* Have BUFFER start a new line.  */\n+\n void\n output_add_newline (buffer)\n      output_buffer *buffer;\n@@ -359,6 +373,7 @@ output_add_newline (buffer)\n }\n \n /* Appends a character to BUFFER.  */\n+\n void\n output_add_character (buffer, c)\n      output_buffer *buffer;\n@@ -371,6 +386,7 @@ output_add_character (buffer, c)\n }\n \n /* Adds a space to BUFFER.  */\n+\n void\n output_add_space (buffer)\n      output_buffer *buffer;\n@@ -386,6 +402,7 @@ output_add_space (buffer)\n \n /* These functions format an INTEGER into BUFFER as suggested by their\n    names.  */\n+\n void\n output_decimal (buffer, i)\n      output_buffer *buffer;\n@@ -452,6 +469,7 @@ output_long_hexadecimal (buffer, i)\n \n /* Append to BUFFER a string specified by its STARTING character\n    and LENGTH.  */\n+\n static void\n output_append_r (buffer, start, length)\n      output_buffer *buffer;\n@@ -466,6 +484,7 @@ output_append_r (buffer, start, length)\n    done.  However, if beginning a new line then emit output_prefix (BUFFER)\n    and skip any leading whitespace if appropriate.  The caller must ensure\n    that it is safe to do so.  */\n+\n void\n output_append (buffer, start, end)\n      output_buffer *buffer;\n@@ -484,6 +503,7 @@ output_append (buffer, start, end)\n }\n \n /* Wrap a text delimited by START and END into BUFFER.  */\n+\n static void\n wrap_text (buffer, start, end)\n      output_buffer *buffer;\n@@ -565,6 +585,7 @@ output_to_stream (buffer, file)\n    %s: string.\n    %%: `%'.\n    %*.s: a substring the length of which is specified by an integer.  */\n+\n static void\n output_format (buffer)\n      output_buffer *buffer;\n@@ -573,6 +594,7 @@ output_format (buffer)\n        ++output_buffer_text_cursor (buffer))\n     {\n       int long_integer = 0;\n+\n       /* Ignore text.  */\n       {\n         const char *p = output_buffer_text_cursor (buffer);\n@@ -581,6 +603,7 @@ output_format (buffer)\n         maybe_wrap_text (buffer, output_buffer_text_cursor (buffer), p);\n         output_buffer_text_cursor (buffer) = p;\n       }\n+\n       if (!*output_buffer_text_cursor (buffer))\n         break;\n \n@@ -670,11 +693,11 @@ output_format (buffer)\n           break;\n \n         default:\n-          if (!lang_printer || !(*lang_printer) (buffer))\n+          if (! lang_printer || !(*lang_printer) (buffer))\n             {\n               /* Hmmm.  The front-end failed to install a format translator\n                  but called us with an unrecognized format.  Sorry.  */\n-              abort();\n+              abort ();\n             }\n         }\n     }\n@@ -881,6 +904,7 @@ file_and_line_for_asm (insn, pfile, pline)\n /* Report a diagnostic MESSAGE (an errror or a WARNING) at the line number\n    of the insn INSN.  This is used only when INSN is an `asm' with operands,\n    and each ASM_OPERANDS records its own source file and line.  */\n+\n static void\n diagnostic_for_asm (insn, msg, args_ptr, warn)\n      rtx insn;\n@@ -898,6 +922,7 @@ diagnostic_for_asm (insn, msg, args_ptr, warn)\n /* Report a diagnostic MESSAGE at the declaration DECL.\n    MSG is a format string which uses %s to substitute the declaration\n    name; subsequent substitutions are a la output_format.  */\n+\n static void\n diagnostic_for_decl (decl, msg, args_ptr, warn)\n      tree decl;\n@@ -956,6 +981,7 @@ count_error (warningp)\n }\n \n /* Print a diagnistic MSGID on FILE.  */\n+\n void\n fnotice VPARAMS ((FILE *file, const char *msgid, ...))\n {\n@@ -998,6 +1024,7 @@ fatal_io_error (name)\n }\n \n /* Issue a pedantic warning MSGID.  */\n+\n void\n pedwarn VPARAMS ((const char *msgid, ...))\n {\n@@ -1018,6 +1045,7 @@ pedwarn VPARAMS ((const char *msgid, ...))\n }\n \n /* Issue a pedantic waring about DECL.  */\n+\n void\n pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n {\n@@ -1045,6 +1073,7 @@ pedwarn_with_decl VPARAMS ((tree decl, const char *msgid, ...))\n }\n \n /* Same as above but within the context FILE and LINE. */\n+\n void\n pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n \t\t\t\t     const char *msgid, ...))\n@@ -1069,6 +1098,7 @@ pedwarn_with_file_and_line VPARAMS ((const char *file, int line,\n }\n \n /* Just apologize with MSGID.  */\n+\n void\n sorry VPARAMS ((const char *msgid, ...))\n {\n@@ -1268,6 +1298,18 @@ error VPARAMS ((const char *msgid, ...))\n \n /* Report a fatal error at the current line number.  Allow a front end to\n    intercept the message.  */\n+\n+static void (*fatal_function) PARAMS((const char *, va_list *));\n+\n+/* Set the function to call when a fatal error occurs.  */\n+\n+void\n+set_fatal_function (f)\n+     void (*f) PARAMS ((const char *, va_list *));\n+{\n+  fatal_function = f;\n+}\n+\n void\n fatal VPARAMS ((const char *msgid, ...))\n {\n@@ -1282,6 +1324,9 @@ fatal VPARAMS ((const char *msgid, ...))\n   msgid = va_arg (ap, const char *);\n #endif\n \n+   if (fatal_function != 0)\n+     (*fatal_function) (_(msgid), &ap);\n+\n   report_diagnostic (msgid, &ap, input_filename, lineno, 0);\n   va_end (ap);\n   exit (FATAL_EXIT_CODE);"}, {"sha": "4108227f50bc33f3d16b341f6a98a34f08060cea", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b45e9412666bbca236671eb66284847951a2e6/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b45e9412666bbca236671eb66284847951a2e6/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=43b45e9412666bbca236671eb66284847951a2e6", "patch": "@@ -101,6 +101,8 @@ extern int diagnostic_message_length_per_line;\n extern output_buffer *diagnostic_buffer;\n \n /* Prototypes */\n+void set_fatal_function\t\tPARAMS ((void (*) PARAMS ((const char *,\n+\t\t\t\t\t\t\t   va_list *))));\n void report_diagnostic          PARAMS ((const char *, va_list *,\n                                          const char *, int, int));\n void initialize_diagnostics     PARAMS ((void));"}]}