{"sha": "441f52642d3247e9ee95f2608f94b4533bcde168", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDQxZjUyNjQyZDMyNDdlOWVlOTVmMjYwOGY5NGI0NTMzYmNkZTE2OA==", "commit": {"author": {"name": "Janis Johnson", "email": "janis187@us.ibm.com", "date": "2002-01-15T17:30:28Z"}, "committer": {"name": "Janis Johnson", "email": "janis@gcc.gnu.org", "date": "2002-01-15T17:30:28Z"}, "message": "i386-prefetch.exp: New.\n\n\t* gcc.misc-tests/i386-prefetch.exp: New.\n\t* gcc.misc-tests/i386-pf-3dnow-1.c: New test.\n\t* gcc.misc-tests/i386-pf-athlon-1.c: New test.\n\t* gcc.misc-tests/i386-pf-none-1.c: New test.\n\t* gcc.misc-tests/i386-pf-sse-1.c: New test.\n\nFrom-SVN: r48876", "tree": {"sha": "d46597272ce323319586bcb3ec895d145695fdb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d46597272ce323319586bcb3ec895d145695fdb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/441f52642d3247e9ee95f2608f94b4533bcde168", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441f52642d3247e9ee95f2608f94b4533bcde168", "html_url": "https://github.com/Rust-GCC/gccrs/commit/441f52642d3247e9ee95f2608f94b4533bcde168", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/441f52642d3247e9ee95f2608f94b4533bcde168/comments", "author": null, "committer": null, "parents": [{"sha": "82598228f08d373948f195d474ccc6a7aa9b2aab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82598228f08d373948f195d474ccc6a7aa9b2aab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82598228f08d373948f195d474ccc6a7aa9b2aab"}], "stats": {"total": 216, "additions": 216, "deletions": 0}, "files": [{"sha": "44274ce1c0a40a1da9203bd249464299812c2fc6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -1,3 +1,11 @@\n+2002-01-15  Janis Johnson  <janis187@us.ibm.com>\n+\n+\t* gcc.misc-tests/i386-prefetch.exp: New.\n+\t* gcc.misc-tests/i386-pf-3dnow-1.c: New test.\n+\t* gcc.misc-tests/i386-pf-athlon-1.c: New test.\n+\t* gcc.misc-tests/i386-pf-none-1.c: New test.\n+\t* gcc.misc-tests/i386-pf-sse-1.c: New test.\n+\n 2002-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/gnu89-init-1.c: Add new tests."}, {"sha": "5774963d04fc6afa74b80030fbbf4a2f308939dd", "filename": "gcc/testsuite/gcc.misc-tests/i386-pf-3dnow-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-3dnow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-3dnow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-3dnow-1.c?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -0,0 +1,29 @@\n+/* Test that the correct data prefetch instructions are generated for i386\n+   variants that use 3DNow! prefetch instructions.  */\n+\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+char *msg = \"howdy there\";\n+\n+void foo (char *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+  __builtin_prefetch (p, 0, 1);\n+  __builtin_prefetch (p, 0, 2);\n+  __builtin_prefetch (p, 0, 3);\n+  __builtin_prefetch (p, 1, 0);\n+  __builtin_prefetch (p, 1, 1);\n+  __builtin_prefetch (p, 1, 2);\n+  __builtin_prefetch (p, 1, 3);\n+}\n+\n+int main ()\n+{\n+  foo (msg);\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler \"prefetch\" } } */\n+/* { dg-final { scan-assembler \"prefetchw\" } } */\n+/* { dg-final { scan-assembler-not \"prefetchnta\" } } */\n+/* { dg-final { scan-assembler-not \"prefetcht\" } } */"}, {"sha": "301e8b7ed9f8d352793832ec2ad30370dfc45f2a", "filename": "gcc/testsuite/gcc.misc-tests/i386-pf-athlon-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-athlon-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-athlon-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-athlon-1.c?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -0,0 +1,29 @@\n+/* Test that the correct data prefetch instructions are generated for i386\n+   variants that use 3DNow! prefetchw or SSE prefetch instructions with\n+   locality hints.  */\n+\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+char *msg = \"howdy there\";\n+\n+void foo (char *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+  __builtin_prefetch (p, 0, 1);\n+  __builtin_prefetch (p, 0, 2);\n+  __builtin_prefetch (p, 0, 3);\n+  __builtin_prefetch (p, 1, 0);\n+  __builtin_prefetch (p, 1, 1);\n+  __builtin_prefetch (p, 1, 2);\n+  __builtin_prefetch (p, 1, 3);\n+}\n+\n+int main ()\n+{\n+  foo (msg);\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler \"prefetchw\" } } */\n+/* { dg-final { scan-assembler \"prefetchnta\" } } */\n+/* { dg-final { scan-assembler \"prefetcht\" } } */"}, {"sha": "bdd236ade8837a46262a3372d035ff2ffbf18ec4", "filename": "gcc/testsuite/gcc.misc-tests/i386-pf-none-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-none-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-none-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-none-1.c?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -0,0 +1,26 @@\n+/* Test that data prefetch instructions are not generated for i386 variants\n+   that do not support those instructions.  */\n+\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+char *msg = \"howdy there\";\n+\n+void foo (char *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+  __builtin_prefetch (p, 0, 1);\n+  __builtin_prefetch (p, 0, 2);\n+  __builtin_prefetch (p, 0, 3);\n+  __builtin_prefetch (p, 1, 0);\n+  __builtin_prefetch (p, 1, 1);\n+  __builtin_prefetch (p, 1, 2);\n+  __builtin_prefetch (p, 1, 3);\n+}\n+\n+int main ()\n+{\n+  foo (msg);\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler-not \"fetch\" } } */"}, {"sha": "783fc822dae13509da14e979dffdc2bd31775c14", "filename": "gcc/testsuite/gcc.misc-tests/i386-pf-sse-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-sse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-sse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-pf-sse-1.c?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -0,0 +1,30 @@\n+/* Test that the correct data prefetch instructions are generated for i386\n+   variants that use SSE prefetch instructions.  */\n+\n+/* { dg-do compile { target i?86-*-* } } */\n+\n+char *msg = \"howdy there\";\n+\n+void foo (char *p)\n+{\n+  __builtin_prefetch (p, 0, 0);\n+  __builtin_prefetch (p, 0, 1);\n+  __builtin_prefetch (p, 0, 2);\n+  __builtin_prefetch (p, 0, 3);\n+  __builtin_prefetch (p, 1, 0);\n+  __builtin_prefetch (p, 1, 1);\n+  __builtin_prefetch (p, 1, 2);\n+  __builtin_prefetch (p, 1, 3);\n+}\n+\n+int main ()\n+{\n+  foo (msg);\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-assembler \"prefetchnta\" } } */\n+/* { dg-final { scan-assembler \"prefetcht0\" } } */\n+/* { dg-final { scan-assembler \"prefetcht1\" } } */\n+/* { dg-final { scan-assembler \"prefetcht2\" } } */\n+/* { dg-final { scan-assembler-not \"prefetchw\" } } */"}, {"sha": "353a1e6f1f9f159fc8493e7564f0818c9923365e", "filename": "gcc/testsuite/gcc.misc-tests/i386-prefetch.exp", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/441f52642d3247e9ee95f2608f94b4533bcde168/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fi386-prefetch.exp?ref=441f52642d3247e9ee95f2608f94b4533bcde168", "patch": "@@ -0,0 +1,94 @@\n+#   Copyright (C) 2002 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 2 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with this program; if not, write to the Free Software\n+# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  \n+\n+# Test that the correct data prefetch instructions (SSE or 3DNow! variant,\n+# or none) are used for various i386 cpu-type and instruction set\n+# extension options for __builtin_prefetch.\n+\n+# Failure reports do not include the compile option that was used; that\n+# information can be seen in the compile line in the log file.\n+\n+# Do not generate prefetch instructions for the following options.\n+\n+set PREFETCH_NONE [list \\\n+\t{ -mcpu=i386 } \\\n+\t{ -mcpu=i486 } \\\n+\t{ -mcpu=i586 } \\\n+\t{ -mcpu=i686 } \\\n+\t{ -mcpu=pentium2 } \\\n+\t{ -mcpu=k6 } \\\n+\t{ -mcpu=k6-2 } \\\n+\t{ -mcpu=k6-3 } \\\n+\t{ -march=i386 } \\\n+\t{ -march=i486 } \\\n+\t{ -march=i586 } \\\n+\t{ -march=i686 } \\\n+\t{ -march=pentium2 } \\\n+\t{ -march=k6 } ]\n+\n+# For options in PREFETCH_SSE, generate SSE prefetch instructions for\n+# __builtin_prefetch.  This includes -mcpu for targets that treat prefetch\n+# instructions as nops.\n+\n+set PREFETCH_SSE [list \\\n+\t{ -mcpu=pentium3 } \\\n+\t{ -mcpu=pentium4 } \\\n+\t{ -mcpu=athlon } \\\n+\t{ -mcpu=athlon-4 } \\\n+\t{ -march=pentium3 } \\\n+\t{ -march=pentium4 } ]\n+\n+# Generate 3DNow! prefetch instructions for the following.\n+\n+set PREFETCH_3DNOW [list \\\n+\t{ -march=k6-2 } \\\n+\t{ -march=k6-3 } ]\n+\n+# Athlon supports both 3DNow! and SSE prefetch instructions.  For\n+# __builtin_prefetch, generate the 3DNow! instruction for write\n+# prefetches but SSE prefetch instructions for read prefetches.\n+\n+set PREFETCH_ATHLON [list \\\n+\t{ -march=athlon } \\\n+\t{ -march=athlon-4 } ]\n+\n+if $tracelevel then {\n+    strace $tracelevel\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# Initialize harness.\n+dg-init\n+\n+set torture_with_loops $PREFETCH_NONE\n+set torture_without_loops $PREFETCH_NONE\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-none-*.c]] \"\"\n+\n+set torture_with_loops $PREFETCH_SSE\n+set torture_without_loops $PREFETCH_SSE\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-sse-*.c]] \"\"\n+\n+set torture_with_loops $PREFETCH_3DNOW\n+set torture_without_loops $PREFETCH_3DNOW\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-3dnow-*.c]] \"\"\n+\n+set torture_with_loops $PREFETCH_ATHLON\n+set torture_without_loops $PREFETCH_ATHLON\n+gcc-dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/i386-pf-athlon-*.c]] \"\"\n+\n+dg-finish"}]}