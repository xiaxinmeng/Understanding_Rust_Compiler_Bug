{"sha": "aa18fb30ad9c857b5fe102b2a34c335734eca475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWExOGZiMzBhZDljODU3YjVmZTEwMmIyYTM0YzMzNTczNGVjYTQ3NQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2004-03-17T08:09:32Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2004-03-17T08:09:32Z"}, "message": "2004-03-17  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/natPlainSocketImplPosix.cc\n\t(write): Just call write(jbyteArray, offset, len).\n\t(read): Just call read(jbyteArray, offset, len).\n\nFrom-SVN: r79578", "tree": {"sha": "3b0ac7b3f6371284917ba6f89fd7ad76c90b72ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b0ac7b3f6371284917ba6f89fd7ad76c90b72ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa18fb30ad9c857b5fe102b2a34c335734eca475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa18fb30ad9c857b5fe102b2a34c335734eca475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa18fb30ad9c857b5fe102b2a34c335734eca475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa18fb30ad9c857b5fe102b2a34c335734eca475/comments", "author": null, "committer": null, "parents": [{"sha": "6582c808a76c894491753cbf41b928836b8245a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6582c808a76c894491753cbf41b928836b8245a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6582c808a76c894491753cbf41b928836b8245a0"}], "stats": {"total": 112, "additions": 33, "deletions": 79}, "files": [{"sha": "8a322f73fbcd69433c2c54276cdea0041018cd0c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa18fb30ad9c857b5fe102b2a34c335734eca475/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa18fb30ad9c857b5fe102b2a34c335734eca475/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=aa18fb30ad9c857b5fe102b2a34c335734eca475", "patch": "@@ -1,3 +1,9 @@\n+2004-03-17  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/natPlainSocketImplPosix.cc\n+\t(write): Just call write(jbyteArray, offset, len).\n+\t(read): Just call read(jbyteArray, offset, len).\n+\n 2004-03-16  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/JTabbedPane.java"}, {"sha": "1dbc90d60104c6cd7c7b8e6c2dbe66b203f2bc90", "filename": "libjava/gnu/java/net/natPlainSocketImplPosix.cc", "status": "modified", "additions": 27, "deletions": 79, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa18fb30ad9c857b5fe102b2a34c335734eca475/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa18fb30ad9c857b5fe102b2a34c335734eca475/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2FnatPlainSocketImplPosix.cc?ref=aa18fb30ad9c857b5fe102b2a34c335734eca475", "patch": "@@ -1,4 +1,4 @@\n-/* Copyright (C) 2003  Free Software Foundation\n+/* Copyright (C) 2003, 2004  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -309,32 +309,15 @@ gnu::java::net::PlainSocketImpl::close()\n   timeout = 0;\n }\n \n+static void\n+write_helper (jint native_fd, jbyte *bytes, jint len);\n+\n // Write a byte to the socket.\n void\n gnu::java::net::PlainSocketImpl$SocketOutputStream::write(jint b)\n {\n-  jbyte d =(jbyte) b;\n-  int r = 0;\n-\n-  while (r != 1)\n-    {\n-      r = _Jv_write (this$0->native_fd, &d, 1);\n-      if (r == -1)\n-        {\n-          if (::java::lang::Thread::interrupted())\n-            {\n-              ::java::io::InterruptedIOException *iioe\n-                = new ::java::io::InterruptedIOException \n-                (JvNewStringLatin1 (strerror (errno)));\n-              iioe->bytesTransferred = 0;\n-              throw iioe;\n-            }\n-          // Some errors should not cause exceptions.\n-          if (errno != ENOTCONN && errno != ECONNRESET && errno != EBADF)\n-            throw new ::java::io::IOException (JvNewStringUTF (strerror (errno)));\n-          break;\n-        }\n-    }\n+  jbyte data = (jbyte) b;\n+  write_helper (this$0->native_fd, &data, 1);\n }\n \n // Write some bytes to the socket.\n@@ -346,12 +329,17 @@ gnu::java::net::PlainSocketImpl$SocketOutputStream::write(jbyteArray b, jint off\n   if (offset < 0 || len < 0 || offset + len > JvGetArrayLength (b))\n     throw new ::java::lang::ArrayIndexOutOfBoundsException;\n \n-  jbyte *bytes = elements (b) + offset;\n+  write_helper (this$0->native_fd, elements (b) + offset * sizeof (jbyte), len);\n+}\n+\n+static void\n+write_helper(jint native_fd, jbyte *bytes, jint len)\n+{\n   int written = 0;\n \n   while (len > 0)\n     {\n-      int r = _Jv_write (this$0->native_fd, bytes, len);\n+      int r = _Jv_write (native_fd, bytes, len);\n \n       if (r == -1)\n         {\n@@ -382,81 +370,41 @@ gnu::java::net::PlainSocketImpl::sendUrgentData (jint)\n     \"PlainSocketImpl: sending of urgent data not supported by this socket\"));\n }\n \n+static jint\n+read_helper (jint native_fd, jint timeout, jbyte *bytes, jint count);\n+\n // Read a single byte from the socket.\n jint\n gnu::java::net::PlainSocketImpl$SocketInputStream::read(void)\n {\n-  jbyte b;\n-  jint timeout = this$0->timeout;\n-  jint native_fd = this$0->native_fd;\n+  jbyte data;\n \n-  // Do timeouts via select.\n-  if (timeout > 0 && native_fd >= 0 && native_fd < FD_SETSIZE)\n-    {\n-      // Create the file descriptor set.\n-      fd_set read_fds;\n-      FD_ZERO (&read_fds);\n-      FD_SET (native_fd,&read_fds);\n-      // Create the timeout struct based on our internal timeout value.\n-      struct timeval timeout_value;\n-      timeout_value.tv_sec = timeout / 1000;\n-      timeout_value.tv_usec = (timeout % 1000) * 1000;\n-      // Select on the fds.\n-      int sel_retval =\n-        _Jv_select (native_fd + 1, &read_fds, NULL, NULL, &timeout_value);\n-      // If select returns 0 we've waited without getting data...\n-      // that means we've timed out.\n-      if (sel_retval == 0)\n-        throw new ::java::net::SocketTimeoutException\n-          (JvNewStringUTF (\"Read timed out\") );\n-      // If select returns ok we know we either got signalled or read some data...\n-      // either way we need to try to read.\n-    }\n-\n-  int r = _Jv_read (native_fd, &b, 1);\n-\n-  if (r == 0)\n-    return -1;\n-\n-  if (::java::lang::Thread::interrupted())\n-    {\n-      ::java::io::InterruptedIOException *iioe =\n-        new ::java::io::InterruptedIOException\n-        (JvNewStringUTF(\"Read interrupted\"));\n-      iioe->bytesTransferred = r == -1 ? 0 : r;\n-      throw iioe;\n-    }\n-  else if (r == -1)\n-    {\n-      // Some errors cause us to return end of stream...\n-      if (errno == ENOTCONN)\n-        return -1;\n+  if (read_helper (this$0->native_fd, this$0->timeout, &data, 1) == 1)\n+    return data;\n \n-      // Other errors need to be signalled.\n-      throw new ::java::io::IOException (JvNewStringUTF (strerror (errno)));\n-    }\n-\n-  return b & 0xFF;\n+  return -1;\n }\n \n // Read count bytes into the buffer, starting at offset.\n jint\n gnu::java::net::PlainSocketImpl$SocketInputStream::read(jbyteArray buffer, jint offset, \n   jint count)\n {\n-  jint native_fd = this$0->native_fd;\n-  jint timeout = this$0->timeout;\n-\n-  if (! buffer)\n+ if (! buffer)\n     throw new ::java::lang::NullPointerException;\n \n   jsize bsize = JvGetArrayLength (buffer);\n \n   if (offset < 0 || count < 0 || offset + count > bsize)\n     throw new ::java::lang::ArrayIndexOutOfBoundsException;\n \n-  jbyte *bytes = elements (buffer) + offset;\n+  return read_helper (this$0->native_fd, this$0->timeout,\n+\t\t      elements (buffer) + offset * sizeof (jbyte), count);\n+}\n \n+static jint\n+read_helper (jint native_fd, jint timeout, jbyte *bytes, jint count)\n+{\n   // Do timeouts via select.\n   if (timeout > 0 && native_fd >= 0 && native_fd < FD_SETSIZE)\n     {"}]}