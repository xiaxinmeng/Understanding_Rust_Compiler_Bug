{"sha": "4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI3ZTY4ZTdkMjVjM2NiM2M0NWVmODk4ZDNhMWFjNGU1Mjc0MTYxOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2002-09-08T12:47:27Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-09-08T12:47:27Z"}, "message": "basic-block.h: Fix comment formatting.\n\n\t* basic-block.h: Fix comment formatting.\n\t* c-common.c: Likewise.\n\t* c-common.h: Likewise.\n\t* c-lex.c: Likewise.\n\t* c-pretty-print.c: Likewise.\n\t* cfglayout.c: Likewise.\n\t* cfgloop.c: Likewise.\n\t* defaults.h: Likewise.\n\t* et-forest.c: Likewise.\n\t* explow.c: Likewise.\n\t* function.h: Likewise.\n\t* gcov.c: Likewise.\n\t* genattrtab.c: Likewise.\n\t* gengtype.c: Likewise.\n\t* ifcvt.c: Likewise.\n\t* libgcc2.c: Likewise.\n\t* loop.c: Likewise.\n\t* profile.c: Likewise.\n\t* ra-build.c: Likewise.\n\t* real.c: Likewise.\n\t* rtl.h: Likewise.\n\t* tracer.c: Likewise.\n\t* tree-inline.c: Likewise.\n\t* varasm.c: Likewise.\n\nFrom-SVN: r56952", "tree": {"sha": "1597dda2c873e24f24656f766f741b0d4814230e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1597dda2c873e24f24656f766f741b0d4814230e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/comments", "author": null, "committer": null, "parents": [{"sha": "2567406a17362fdf2f3b7150d1c006b87c63ee1f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2567406a17362fdf2f3b7150d1c006b87c63ee1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2567406a17362fdf2f3b7150d1c006b87c63ee1f"}], "stats": {"total": 129, "additions": 78, "deletions": 51}, "files": [{"sha": "97747a29f3d0fb1a022dc0ec6f6bb750c9af237d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1,3 +1,30 @@\n+2002-09-08  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* basic-block.h: Fix comment formatting.\n+\t* c-common.c: Likewise.\n+\t* c-common.h: Likewise.\n+\t* c-lex.c: Likewise.\n+\t* c-pretty-print.c: Likewise.\n+\t* cfglayout.c: Likewise.\n+\t* cfgloop.c: Likewise.\n+\t* defaults.h: Likewise.\n+\t* et-forest.c: Likewise.\n+\t* explow.c: Likewise.\n+\t* function.h: Likewise.\n+\t* gcov.c: Likewise.\n+\t* genattrtab.c: Likewise.\n+\t* gengtype.c: Likewise.\n+\t* ifcvt.c: Likewise.\n+\t* libgcc2.c: Likewise.\n+\t* loop.c: Likewise.\n+\t* profile.c: Likewise.\n+\t* ra-build.c: Likewise.\n+\t* real.c: Likewise.\n+\t* rtl.h: Likewise.\n+\t* tracer.c: Likewise.\n+\t* tree-inline.c: Likewise.\n+\t* varasm.c: Likewise.\n+\n 2002-09-08  Jan Hubicka  <jh@suse.cz>\n \n \t* emit-rtl.c (set_mem_attributes_minus_bitpos): Fix array_ref"}, {"sha": "e0760ea0445a7b1cb62861688c5c1c3d300e8e28", "filename": "gcc/basic-block.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -144,7 +144,7 @@ typedef struct edge_def {\n #define EDGE_FAKE\t\t16\t/* Not a real edge (profile.c) */\n #define EDGE_DFS_BACK\t\t32\t/* A backwards edge */\n #define EDGE_CAN_FALLTHRU\t64\t/* Candidate for straight line\n-\t\t\t\t\t   flow. */\n+\t\t\t\t\t   flow.  */\n \n #define EDGE_COMPLEX\t(EDGE_ABNORMAL | EDGE_ABNORMAL_CALL | EDGE_EH)\n "}, {"sha": "2bc4592e32ed1d84cb1e5ecd242a65ab4e2e173b", "filename": "gcc/c-common.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -291,7 +291,7 @@ int warn_write_strings;\n \n int warn_redundant_decls;\n \n-/* Warn about testing equality of floating point numbers. */\n+/* Warn about testing equality of floating point numbers.  */\n \n int warn_float_equal;\n \n@@ -1121,7 +1121,7 @@ fname_decl (rid, id)\n \t the current statement.  Later this tree will be moved to the\n \t beginning of the function and this line number will be wrong.\n \t To avoid this problem set the lineno to 0 here; that prevents\n-\t it from appearing in the RTL. */\n+\t it from appearing in the RTL.  */\n       int saved_lineno = lineno;\n       lineno = 0;\n       "}, {"sha": "9c3e9994e06d16d95ed019ebc73de5031b643ba1", "filename": "gcc/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -465,7 +465,7 @@ extern int warn_write_strings;\n \n extern int warn_redundant_decls;\n \n-/* Warn about testing equality of floating point numbers. */\n+/* Warn about testing equality of floating point numbers.  */\n \n extern int warn_float_equal;\n "}, {"sha": "e5f786176a3d7bab2a62905bba8c828a0d57afb4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1016,7 +1016,7 @@ lex_string (str, len, wide)\n #ifdef MULTIBYTE_CHARS\n       else if (char_len > 1)\n \t{\n-\t  /* We're dealing with a multibyte character. */\n+\t  /* We're dealing with a multibyte character.  */\n \t  for ( ; char_len >0; --char_len)\n \t    {\n \t      *q++ = *(p - char_len);"}, {"sha": "0961798d6d08fa61ce48ea3aebb4f8b087336967", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -463,7 +463,7 @@ pp_c_integer_literal (ppi, i)\n     }\n }\n \n-/* Print out a REAL value. */\n+/* Print out a REAL value.  */\n static inline void\n pp_c_real_literal (ppi, r)\n      c_pretty_printer ppi;\n@@ -556,7 +556,7 @@ pp_c_primary_expression (ppi, e)\n       break;\n \n     default:\n-      /*  Make sure this call won't cause any infinite loop. */\n+      /*  Make sure this call won't cause any infinite loop.  */\n       pp_c_left_paren (ppi);\n       pp_c_expression (ppi, e);\n       pp_c_right_paren (ppi);"}, {"sha": "1f3bc97ff286a31f506842ea0add1691372ce01a", "filename": "gcc/cfglayout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fcfglayout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fcfglayout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfglayout.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -342,7 +342,7 @@ scope_to_insns_finalize ()\n \n       this_block = INSN_SCOPE (insn);\n       /* For sequences compute scope resulting from merging all scopes\n-         of instructions nested inside. */\n+         of instructions nested inside.  */\n       if (GET_CODE (PATTERN (insn)) == SEQUENCE)\n \t{\n \t  int i;"}, {"sha": "42a403d1272a6d1325cff9d0129a142768a7d85e", "filename": "gcc/cfgloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fcfgloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fcfgloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -617,7 +617,7 @@ make_forwarder_block (bb, redirect_latch, redirect_nonlatch, except,\n   HEADER_BLOCK (dummy) = 0;\n   HEADER_BLOCK (bb) = 1;\n \n-  /* Redirect back edges we want to keep. */\n+  /* Redirect back edges we want to keep.  */\n   for (e = dummy->pred; e; e = next_e)\n     {\n       next_e = e->pred_next;"}, {"sha": "e08ed8ec6c9623a2ef26470df097844a9ff676d0", "filename": "gcc/defaults.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -437,7 +437,7 @@ do { fputs (integer_asm_op (POINTER_SIZE / UNITS_PER_WORD, TRUE), FILE); \\\n /* By default, the vtable entries are void pointers, the so the alignment\n    is the same as pointer alignment.  The value of this macro specifies\n    the alignment of the vtable entry in bits.  It should be defined only\n-   when special alignment is necessary. */\n+   when special alignment is necessary.  */\n #ifndef TARGET_VTABLE_ENTRY_ALIGN\n #define TARGET_VTABLE_ENTRY_ALIGN POINTER_SIZE\n #endif\n@@ -576,7 +576,7 @@ You Lose!  You must define PREFERRED_DEBUGGING_TYPE!\n #endif\n \n /* Determine whether __cxa_atexit, rather than atexit, is used to\n-   register C++ destructors for local statics and global objects. */\n+   register C++ destructors for local statics and global objects.  */\n #ifndef DEFAULT_USE_CXA_ATEXIT\n #define DEFAULT_USE_CXA_ATEXIT 0\n #endif"}, {"sha": "84594d44365e26043f666cdf120146e1a6b4b06c", "filename": "gcc/et-forest.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -664,7 +664,7 @@ et_forest_enumerate_sons (forest, node, array)\n \n   /* Parent is the rightmost node of the left successor.\n      Look for all occurences having no right succesor\n-     and lookup the sons. */\n+     and lookup the sons.  */\n   while (occ != stop)\n     {\n       splay (occ);"}, {"sha": "3962a7af0a074b5a22d73bd2cbfb742913ca67a9", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1087,7 +1087,7 @@ emit_stack_restore (save_level, sa, after)\n       sa = validize_mem (sa);\n       /* These clobbers prevent the scheduler from moving\n \t references to variable arrays below the code\n-\t that deletes (pops) the arrays. */\n+\t that deletes (pops) the arrays.  */\n       emit_insn (gen_rtx_CLOBBER (VOIDmode,\n \t\t    gen_rtx_MEM (BLKmode, \n \t\t\tgen_rtx_SCRATCH (VOIDmode))));"}, {"sha": "dacd63c019e6297779073a4322bf699cc80ba529", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -441,7 +441,7 @@ struct function GTY(())\n      calls (if any) are sibling calls.  Such functions do not have to\n      have EH tables generated, as they cannot throw.  A call to such a\n      function, however, should be treated as throwing if any of its callees\n-     can throw. */\n+     can throw.  */\n   unsigned int all_throwers_are_sibcalls : 1;\n  \n   /* Nonzero if instrumentation calls for function entry and exit should be"}, {"sha": "38a8293327e244c8f6303867e09c9211af5eb6e8", "filename": "gcc/gcov.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -159,12 +159,12 @@ struct bb_info_list\n   struct bb_info_list *next;\n };\n \n-/* Used to hold information about each line. */\n+/* Used to hold information about each line.  */\n struct line_info\n {\n   gcov_type count;\t      /* execution count */\n-  struct arcdata *branches;   /* list of branch probabilities for line. */\n-  unsigned exists : 1;\t      /* has code associated with it. */\n+  struct arcdata *branches;   /* list of branch probabilities for line.  */\n+  unsigned exists : 1;\t      /* has code associated with it.  */\n };\n   \n struct coverage\n@@ -186,7 +186,7 @@ struct coverage\n \n static struct bb_info_list *bb_graph_list = 0;\n \n-/* Modification time of data files. */\n+/* Modification time of data files.  */\n \n static time_t bb_file_time;\n \n@@ -477,7 +477,7 @@ open_files ()\n \n       strcat (name, cptr);\n     }\n-  /* Remove the extension. */\n+  /* Remove the extension.  */\n   cptr = strrchr (name, '.');\n   if (cptr)\n     *cptr = 0;\n@@ -1225,7 +1225,7 @@ function_summary (function, title)\n    to each output name (except when the current source file is the\n    input file, so you don't get a double concatenation). The two\n    components are separated by '##'. Also '.' filename components are\n-   removed and '..'  components are renamed to '^'. */\n+   removed and '..'  components are renamed to '^'.  */\n \n static char *\n make_gcov_file_name (src_name)\n@@ -1244,7 +1244,7 @@ make_gcov_file_name (src_name)\n       strcat (name, \"##\");\n     }\n    \n-  /* Generate the source filename part. */\n+  /* Generate the source filename part.  */\n   cptr = preserve_paths ? NULL : strrchr (src_name, '/');\n   cptr = cptr ? cptr + 1 : src_name;\n   strcat (name, cptr);\n@@ -1303,12 +1303,12 @@ init_line_info (line_info, total, maxlineno)\n   struct bb_info *block_ptr = NULL;\t/* current block ptr */\n   struct coverage function;\n   struct coverage *func_ptr = NULL;\n-  struct bb_info_list *current_graph = NULL; /* Graph for current function. */\n-  int is_this_file = 0;\t/* We're scanning a block from the desired file. */\n+  struct bb_info_list *current_graph = NULL; /* Graph for current function.  */\n+  int is_this_file = 0;\t/* We're scanning a block from the desired file.  */\n   char *ptr = bb_data;\n   long count;\n   long line_num;\n-  struct line_info *line_ptr = 0; /* line info ptr. */\n+  struct line_info *line_ptr = 0; /* line info ptr.  */\n    \n   memset (&function, 0, sizeof (function));\n   if (output_function_summary)\n@@ -1431,7 +1431,7 @@ init_line_info (line_info, total, maxlineno)\n \t    total->lines_executed++;\n \t}\n \n-      /* Total and reverse the branch information. */\n+      /* Total and reverse the branch information.  */\n       for (a_ptr = line_ptr->branches, prev = NULL; a_ptr; a_ptr = next)\n \t{\n \t  next = a_ptr->next;\n@@ -1457,9 +1457,9 @@ output_line_info (gcov_file, line_info, total, maxlineno)\n {\n   FILE *source_file;\n   long line_num;                    /* current line number */\n-  const struct line_info *line_ptr; /* current line info ptr. */\n-  char string[STRING_SIZE];         /* line buffer. */\n-  char const *retval = \"\";\t    /* status of source file reading. */\n+  const struct line_info *line_ptr; /* current line info ptr.  */\n+  char string[STRING_SIZE];         /* line buffer.  */\n+  char const *retval = \"\";\t    /* status of source file reading.  */\n \n   fprintf (gcov_file, \"%9s:%5d:Source:%s\\n\", \"-\", 0, total->name);\n   fprintf (gcov_file, \"%9s:%5d:Object:%s\\n\", \"-\", 0, bb_file_name);\n@@ -1619,7 +1619,7 @@ output_data (s_ptr)\n       free (gcov_file_name);\n     }\n \n-  /* Free data. */\n+  /* Free data.  */\n   for (line_num = 1; line_num != s_ptr->maxlineno; line_num++)\n     {\n       struct arcdata *branch, *next;"}, {"sha": "f5b2681308b2f0a3c2ba0de9379fbbcc3012717f", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -6246,7 +6246,7 @@ from the machine description file `md'.  */\\n\\n\");\n       /* Write out information about function units.  */\n       write_function_unit_info ();\n       /* Output code for pipeline hazards recognition based on DFA\n-\t (deterministic finite state automata. */\n+\t (deterministic finite state automata.  */\n       write_automata ();\n     }\n "}, {"sha": "ac6e2fff1f6b87dec46357182fa01cd1d44cde08", "filename": "gcc/gengtype.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgengtype.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fgengtype.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengtype.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1081,7 +1081,7 @@ write_gc_structure_fields (of, s, val, prev_val, opts, indent, line, bitmap,\n \t\tbreak;\n \t      }\n \t  }\n-\t  /* Fall through... */\n+\t  /* Fall through...  */\n \tcase TYPE_STRUCT:\n \tcase TYPE_UNION:\n \t  {"}, {"sha": "3ae828b43f8e925bcd1b7fb0ad4f9bdeefa0c0c7", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -358,7 +358,7 @@ cond_exec_process_if_block (ce_info, do_multiple_p)\n   rtx then_end;\t\t\t/* last insn + 1 in THEN block */\n   rtx else_start = NULL_RTX;\t/* first insn in ELSE block or NULL */\n   rtx else_end = NULL_RTX;\t/* last insn + 1 in ELSE block */\n-  int max;\t\t\t/* max # of insns to convert. */\n+  int max;\t\t\t/* max # of insns to convert.  */\n   int then_mod_ok;\t\t/* whether conditional mods are ok in THEN */\n   rtx true_expr;\t\t/* test for else block insns */\n   rtx false_expr;\t\t/* test for then block insns */"}, {"sha": "8c10689f02c34b7cfcdfe0c1e36c672df8a313eb", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1271,7 +1271,7 @@ struct bb\n #include <errno.h>\n #endif\n \n-/* Chain of per-object file bb structures. */\n+/* Chain of per-object file bb structures.  */\n static struct bb *bb_head;\n \n /* Dump the coverage counts. We merge with existing counts when\n@@ -1295,7 +1295,7 @@ __bb_exit_func (void)\n   s_flock.l_type = F_WRLCK;\n   s_flock.l_whence = SEEK_SET;\n   s_flock.l_start = 0;\n-  s_flock.l_len = 0; /* Until EOF. */\n+  s_flock.l_len = 0; /* Until EOF.  */\n   s_flock.l_pid = getpid ();\n #endif\n \n@@ -1432,7 +1432,7 @@ __bb_exit_func (void)\n \tmerged_max = object_max;\n       merged_arcs += ptr->ncounts;\n       \n-      /* Write out the data. */\n+      /* Write out the data.  */\n       if (/* magic */\n \t  __write_long (-123, da_file, 4)\n \t  /* number of functions in object file.  */"}, {"sha": "c601f5b84e63236c88a4cd558485291f35793a22", "filename": "gcc/loop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -4279,7 +4279,7 @@ for_each_insn_in_loop (loop, fncall)\n   if (prev_nonnote_insn (loop->scan_start) != prev_nonnote_insn (loop->start))\n     maybe_multiple = back_branch_in_range_p (loop, loop->scan_start);\n \n-  /* Scan through loop and update NOT_EVERY_ITERATION and MAYBE_MULTIPLE. */\n+  /* Scan through loop and update NOT_EVERY_ITERATION and MAYBE_MULTIPLE.  */\n   for (p = next_insn_in_loop (loop, loop->scan_start);\n        p != NULL_RTX;\n        p = next_insn_in_loop (loop, p))"}, {"sha": "37e0c813a0b106cc7efa25f1f0cc60691670ad62", "filename": "gcc/profile.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -91,18 +91,18 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n struct edge_info {\n   unsigned int count_valid : 1;\n   \n-  /* Is on the spanning tree. */\n+  /* Is on the spanning tree.  */\n   unsigned int on_tree : 1;\n   \n   /* Pretend this edge does not exist (it is abnormal and we've\n-     inserted a fake to compensate). */\n+     inserted a fake to compensate).  */\n   unsigned int ignore : 1;\n };\n \n struct bb_info {\n   unsigned int count_valid : 1;\n \n-  /* Number of successor and predecessor edges. */\n+  /* Number of successor and predecessor edges.  */\n   gcov_type succ_count;\n   gcov_type pred_count;\n };"}, {"sha": "e320e514d905d9658a50f2940d6cf77e0c1158ae", "filename": "gcc/ra-build.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fra-build.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fra-build.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fra-build.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -275,7 +275,7 @@ copy_insn_p (insn, source, target)\n   s_regno = (unsigned) REGNO (GET_CODE (s) == SUBREG ? SUBREG_REG (s) : s);\n   d_regno = (unsigned) REGNO (GET_CODE (d) == SUBREG ? SUBREG_REG (d) : d);\n \n-  /* Copies between hardregs are useless for us, as not coalesable anyway. */\n+  /* Copies between hardregs are useless for us, as not coalesable anyway.  */\n   if ((s_regno < FIRST_PSEUDO_REGISTER\n        && d_regno < FIRST_PSEUDO_REGISTER)\n       || s_regno >= max_normal_pseudo\n@@ -563,7 +563,7 @@ remember_move (insn)\n       SET_BIT (move_handled, INSN_UID (insn));\n       if (copy_insn_p (insn, &s, &d))\n \t{\n-\t  /* Some sanity test for the copy insn. */\n+\t  /* Some sanity test for the copy insn.  */\n \t  struct df_link *slink = DF_INSN_USES (df, insn);\n \t  struct df_link *link = DF_INSN_DEFS (df, insn);\n \t  if (!link || !link->ref || !slink || !slink->ref)\n@@ -844,7 +844,7 @@ live_out_1 (df, use, insn)\n       else\n \t{\n \t  /* If this insn doesn't completely define the USE, increment also\n-\t     it's spanned deaths count (if this insn contains a death). */\n+\t     it's spanned deaths count (if this insn contains a death).  */\n \t  if (uid >= death_insns_max_uid)\n \t    abort ();\n \t  if (TEST_BIT (insns_with_deaths, uid))\n@@ -876,7 +876,7 @@ live_out (df, use, insn)\n       && (use->undefined & ~visit_trace[uid].undefined) == 0)\n     {\n       union_web_parts (visit_trace[uid].wp, use->wp);\n-      /* Don't search any further, as we already were here with this regno. */\n+      /* Don't search any further, as we already were here with this regno.  */\n       return 0;\n     }\n   else\n@@ -2813,7 +2813,7 @@ moves_to_webs (df)\n       if (m->source_web && m->target_web\n \t  /* If the usable_regs don't intersect we can't coalesce the two\n \t     webs anyway, as this is no simple copy insn (it might even\n-\t     need an intermediate stack temp to execute this \"copy\" insn). */\n+\t     need an intermediate stack temp to execute this \"copy\" insn).  */\n \t  && hard_regs_intersect_p (&m->source_web->usable_regs,\n \t\t\t\t    &m->target_web->usable_regs))\n \t{"}, {"sha": "fdac05d54cf9b02684bfb3f4d4f9798fcd5c6cd5", "filename": "gcc/real.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -129,14 +129,14 @@ unknown arithmetic type\n \n #define REAL_WORDS_BIG_ENDIAN FLOAT_WORDS_BIG_ENDIAN\n \n-/* Make sure that the endianness is correct for IBM and DEC. */\n+/* Make sure that the endianness is correct for IBM and DEC.  */\n #if defined(DEC)\n #undef LARGEST_EXPONENT_IS_NORMAL\n #define LARGEST_EXPONENT_IS_NORMAL(x) 1\n #undef REAL_WORDS_BIG_ENDIAN\n /* Strangely enough, DEC float most closely resembles big endian IEEE */\n #define REAL_WORDS_BIG_ENDIAN 1\n-/* ... but the halfwords are reversed from IEEE big endian. */\n+/* ... but the halfwords are reversed from IEEE big endian.  */\n #ifndef VAX_HALFWORD_ORDER\n #define VAX_HALFWORD_ORDER 1\n #endif\n@@ -3942,7 +3942,7 @@ toieee (x, y, fmt)\n     }\n \n   /* Shift denormal double extended Intel format significand down\n-     one bit. */\n+     one bit.  */\n   if (fmt->precision == 64 && x[E] == 0 && ! REAL_WORDS_BIG_ENDIAN)\n     eshdn1 (x);\n "}, {"sha": "d27b9a2d41ca320d5eabd5a44f4e9c12f148ebab", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -860,7 +860,7 @@ enum insn_note\n      NOTE_EXPECTED_VALUE; stored as (eq (reg) (const_int)).  */\n   NOTE_INSN_EXPECTED_VALUE,\n \n-  /* Record a prediction.  Uses NOTE_PREDICTION. */\n+  /* Record a prediction.  Uses NOTE_PREDICTION.  */\n   NOTE_INSN_PREDICTION,\n \n   NOTE_INSN_MAX"}, {"sha": "970b5f46b40ae925d9b57f738c24e6c014caaf48", "filename": "gcc/tracer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ftracer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ftracer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftracer.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -65,7 +65,7 @@ static int branch_ratio_cutoff;\n \n #define seen(bb) (RBI (bb)->visited || RBI (bb)->next)\n \n-/* Return true if we should ignore the basic block for purposes of tracing. */\n+/* Return true if we should ignore the basic block for purposes of tracing.  */\n static bool\n ignore_bb_p (bb)\n      basic_block bb;"}, {"sha": "52f9544b2018cfc3c8febaa622ae531d34749c0b", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -1737,7 +1737,7 @@ remap_save_expr (tp, st_, fn, walk_subtrees)\n \n #ifdef INLINER_FOR_JAVA\n /* Add STMT to EXISTING if possible, otherwise create a new\n-   COMPOUND_EXPR and add STMT to it. */\n+   COMPOUND_EXPR and add STMT to it.  */\n \n static tree\n add_stmt_to_compound (existing, type, stmt)"}, {"sha": "edd02622b09a6759882ed7580054f4f4cdc65b43", "filename": "gcc/varasm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=4b7e68e7d25c3cb3c45ef898d3a1ac4e52741619", "patch": "@@ -2452,7 +2452,7 @@ compare_constant (t1, t2)\n \t       l1 && l2;\n \t       l1 = TREE_CHAIN (l1), l2 = TREE_CHAIN (l2))\n \t    {\n-\t      /* Check that each value is the same... */\n+\t      /* Check that each value is the same...  */\n \t      if (! compare_constant (TREE_VALUE (l1), TREE_VALUE (l2)))\n \t\treturn 0;\n \t      /* ... and that they apply to the same fields!  */"}]}