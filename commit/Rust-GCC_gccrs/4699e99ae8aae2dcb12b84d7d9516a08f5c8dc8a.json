{"sha": "4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY5OWU5OWFlOGFhZTJkY2IxMmI4NGQ3ZDk1MTZhMDhmNWM4ZGM4YQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2013-11-14T20:16:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-11-14T20:16:51Z"}, "message": "re PR c++/57887 (nested non-type template parameters not declared in this scope)\n\n/cp\n2013-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57887\n\t* parser.c (cp_parser_late_parsing_nsdmi): Call\n\tmaybe_begin_member_template_processing.\n\t* pt.c (maybe_begin_member_template_processing): Handle NSDMIs.\n\t(inline_needs_template_parms): Adjust.\n\n/testsuite\n2013-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/57887\n\t* g++.dg/cpp0x/nsdmi-template3.C: New.\n\t* g++.dg/cpp0x/nsdmi-template4.C: Likewise.\n\nFrom-SVN: r204818", "tree": {"sha": "6d59cdf20f8923f0d77ccbba3fdef079f1e2533b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d59cdf20f8923f0d77ccbba3fdef079f1e2533b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/comments", "author": null, "committer": null, "parents": [{"sha": "03a231f7521b62a593fd7a4ce7067102288bd28f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03a231f7521b62a593fd7a4ce7067102288bd28f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03a231f7521b62a593fd7a4ce7067102288bd28f"}], "stats": {"total": 77, "additions": 71, "deletions": 6}, "files": [{"sha": "b252637421f7d05763295fb169ac63c73f65e566", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -1,3 +1,11 @@\n+2013-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57887\n+\t* parser.c (cp_parser_late_parsing_nsdmi): Call\n+\tmaybe_begin_member_template_processing.\n+\t* pt.c (maybe_begin_member_template_processing): Handle NSDMIs.\n+\t(inline_needs_template_parms): Adjust.\n+\n 2013-11-14  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* class.c: Include only gimplify.h and gimple.h as needed."}, {"sha": "ab3325794d1ba7099ed3877beba7229d378b96ec", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -23378,12 +23378,16 @@ cp_parser_late_parsing_nsdmi (cp_parser *parser, tree field)\n {\n   tree def;\n \n+  maybe_begin_member_template_processing (field);\n+\n   push_unparsed_function_queues (parser);\n   def = cp_parser_late_parse_one_default_arg (parser, field,\n \t\t\t\t\t      DECL_INITIAL (field),\n \t\t\t\t\t      NULL_TREE);\n   pop_unparsed_function_queues (parser);\n \n+  maybe_end_member_template_processing ();\n+\n   DECL_INITIAL (field) = def;\n }\n "}, {"sha": "e714e790eadfcda808efb6c9bc583e865bed86ec", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -152,7 +152,7 @@ static int for_each_template_parm (tree, tree_fn_t, void*,\n \t\t\t\t   struct pointer_set_t*, bool);\n static tree expand_template_argument_pack (tree);\n static tree build_template_parm_index (int, int, int, tree, tree);\n-static bool inline_needs_template_parms (tree);\n+static bool inline_needs_template_parms (tree, bool);\n static void push_inline_template_parms_recursive (tree, int);\n static tree retrieve_local_specialization (tree);\n static void register_local_specialization (tree, tree);\n@@ -378,9 +378,9 @@ template_class_depth (tree type)\n    Returns true if processing DECL needs us to push template parms.  */\n \n static bool\n-inline_needs_template_parms (tree decl)\n+inline_needs_template_parms (tree decl, bool nsdmi)\n {\n-  if (! DECL_TEMPLATE_INFO (decl))\n+  if (!decl || (!nsdmi && ! DECL_TEMPLATE_INFO (decl)))\n     return false;\n \n   return (TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (most_general_template (decl)))\n@@ -449,16 +449,23 @@ push_inline_template_parms_recursive (tree parmlist, int levels)\n     }\n }\n \n-/* Restore the template parameter context for a member template or\n-   a friend template defined in a class definition.  */\n+/* Restore the template parameter context for a member template, a\n+   friend template defined in a class definition, or a non-template\n+   member of template class.  */\n \n void\n maybe_begin_member_template_processing (tree decl)\n {\n   tree parms;\n   int levels = 0;\n+  bool nsdmi = TREE_CODE (decl) == FIELD_DECL;\n \n-  if (inline_needs_template_parms (decl))\n+  if (nsdmi)\n+    decl = (CLASSTYPE_TEMPLATE_INFO (DECL_CONTEXT (decl))\n+\t    ? CLASSTYPE_TI_TEMPLATE (DECL_CONTEXT (decl))\n+\t    : NULL_TREE);\n+\n+  if (inline_needs_template_parms (decl, nsdmi))\n     {\n       parms = DECL_TEMPLATE_PARMS (most_general_template (decl));\n       levels = TMPL_PARMS_DEPTH (parms) - processing_template_decl;"}, {"sha": "2077304a55c945729e49882ded7c6abe72fba6c2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -1,3 +1,9 @@\n+2013-11-14  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/57887\n+\t* g++.dg/cpp0x/nsdmi-template3.C: New.\n+\t* g++.dg/cpp0x/nsdmi-template4.C: Likewise.\n+\n 2013-11-14  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n \n \t* gcc.target/powerpc/ppc64-abi-1.c (stack_frame_t): Remove"}, {"sha": "8a6f913d215be4c445fe5f40dc613627984478ae", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template3.C", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template3.C?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -0,0 +1,16 @@\n+// PR c++/58760\n+// { dg-do compile { target c++11 } }\n+\n+enum en\n+{\n+  a,b,c\n+};\n+ \n+struct B\n+{\n+  template<en N>\n+  struct A\n+  {\n+    const int X = N;\n+  };\n+};"}, {"sha": "ff8dc7e932bc9d137ec1f9f422f575c1b412e2ae", "filename": "gcc/testsuite/g++.dg/cpp0x/nsdmi-template4.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnsdmi-template4.C?ref=4699e99ae8aae2dcb12b84d7d9516a08f5c8dc8a", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/57887\n+// { dg-do compile { target c++11 } }\n+\n+struct B\n+{\n+  template<int N>\n+  struct A\n+  {\n+    int X = N;\n+  };\n+};\n+\n+template<int M>\n+struct C\n+{\n+  int Y = M;\n+\n+  template<int N>\n+  struct A\n+  {\n+    int X = N;\n+    int Y = M;\n+  };\n+};"}]}