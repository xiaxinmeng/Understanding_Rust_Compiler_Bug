{"sha": "4c6f5562dce997c013340fb5d6891d777efb99be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGM2ZjU1NjJkY2U5OTdjMDEzMzQwZmI1ZDY4OTFkNzc3ZWZiOTliZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-12-06T13:32:06Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2017-12-06T13:32:06Z"}, "message": "compiler: handle set-and-use-temp in nilcheck code\n    \n    Change the code in Unary_expression::do_get_backend that introduces\n    explicit nil checks for dereference operations to special case\n    set-and-use-temporary expressions. For this case it is better to\n    generate an explicit reference of the temp in the final conditional\n    (avoids introducing tree sharing).\n    \n    Reviewed-on: https://go-review.googlesource.com/81915\n\nFrom-SVN: r255442", "tree": {"sha": "7fffcd9e8ba3dcd0a191a595a2135dabded952b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7fffcd9e8ba3dcd0a191a595a2135dabded952b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4c6f5562dce997c013340fb5d6891d777efb99be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6f5562dce997c013340fb5d6891d777efb99be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c6f5562dce997c013340fb5d6891d777efb99be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c6f5562dce997c013340fb5d6891d777efb99be/comments", "author": null, "committer": null, "parents": [{"sha": "40242256f156e91244d770ac422e6e244b99152b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40242256f156e91244d770ac422e6e244b99152b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40242256f156e91244d770ac422e6e244b99152b"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "b185c9e59c3eee2cdc3b9faf2b66b3b97773851c", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6f5562dce997c013340fb5d6891d777efb99be/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6f5562dce997c013340fb5d6891d777efb99be/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4c6f5562dce997c013340fb5d6891d777efb99be", "patch": "@@ -1,4 +1,4 @@\n-297cf346f2400274946650ab9ecd039427fc986b\n+d16e370c93e2866a961847a15f5001413e66d179\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "219b16361ed532fe147d8b7286c55c45efda4de0", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4c6f5562dce997c013340fb5d6891d777efb99be/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4c6f5562dce997c013340fb5d6891d777efb99be/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=4c6f5562dce997c013340fb5d6891d777efb99be", "patch": "@@ -4455,18 +4455,31 @@ Unary_expression::do_get_backend(Translate_context* context)\n             case NIL_CHECK_NEEDED:\n               {\n                 go_assert(this->expr_->is_variable());\n+\n+                // If we're nil-checking the result of a set-and-use-temporary\n+                // expression, then pick out the target temp and use that\n+                // for the final result of the conditional.\n+                Bexpression* tbexpr = bexpr;\n+                Bexpression* ubexpr = bexpr;\n+                Set_and_use_temporary_expression* sut =\n+                    this->expr_->set_and_use_temporary_expression();\n+                if (sut != NULL) {\n+                  Temporary_statement* temp = sut->temporary();\n+                  Bvariable* bvar = temp->get_backend_variable(context);\n+                  ubexpr = gogo->backend()->var_expression(bvar, loc);\n+                }\n                 Bexpression* nil =\n                     Expression::make_nil(loc)->get_backend(context);\n                 Bexpression* compare =\n-                    gogo->backend()->binary_expression(OPERATOR_EQEQ, bexpr,\n+                    gogo->backend()->binary_expression(OPERATOR_EQEQ, tbexpr,\n                                                        nil, loc);\n                 Bexpression* crash =\n                     gogo->runtime_error(RUNTIME_ERROR_NIL_DEREFERENCE,\n                                         loc)->get_backend(context);\n                 Bfunction* bfn = context->function()->func_value()->get_decl();\n                 bexpr = gogo->backend()->conditional_expression(bfn, btype,\n                                                                 compare,\n-                                                                crash, bexpr,\n+                                                                crash, ubexpr,\n                                                                 loc);\n                 known_valid = true;\n                 break;"}]}