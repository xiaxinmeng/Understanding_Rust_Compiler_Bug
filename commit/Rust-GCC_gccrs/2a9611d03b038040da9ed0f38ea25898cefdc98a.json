{"sha": "2a9611d03b038040da9ed0f38ea25898cefdc98a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE5NjExZDAzYjAzODA0MGRhOWVkMGYzOGVhMjU4OThjZWZkYzk4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-03-18T16:17:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-03-18T16:17:47Z"}, "message": "re PR libstdc++/13631 (Problems in messages)\n\n\tPR libstdc++/13631\n\t* config/locale/gnu/messages_members.cc (get_glibc_msg): Fix fallback\n\timplementation for old glibc. Fix whitespace.\n\nFrom-SVN: r221494", "tree": {"sha": "f86c15c6bb0c38cfd5575f7d5bdc946c7e29438a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f86c15c6bb0c38cfd5575f7d5bdc946c7e29438a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a9611d03b038040da9ed0f38ea25898cefdc98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9611d03b038040da9ed0f38ea25898cefdc98a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a9611d03b038040da9ed0f38ea25898cefdc98a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a9611d03b038040da9ed0f38ea25898cefdc98a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4f3051a5fc315c5103f034b81e4d4b3c288fdc4"}], "stats": {"total": 75, "additions": 41, "deletions": 34}, "files": [{"sha": "534927fc92ab47466b8b657f7b0203ca89d5182b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9611d03b038040da9ed0f38ea25898cefdc98a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9611d03b038040da9ed0f38ea25898cefdc98a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2a9611d03b038040da9ed0f38ea25898cefdc98a", "patch": "@@ -1,3 +1,9 @@\n+2015-03-18  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/13631\n+\t* config/locale/gnu/messages_members.cc (get_glibc_msg): Fix fallback\n+\timplementation for old glibc. Fix whitespace.\n+\n 2015-03-18  Jonathan Wakely  <jwakely@redhat.com>\n \t    Torvald Riegel  <triegel@redhat.com>\n "}, {"sha": "2e6122d2ea520fca9f44659b2b34d9c6f1fa1772", "filename": "libstdc++-v3/config/locale/gnu/messages_members.cc", "status": "modified", "additions": 35, "deletions": 34, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a9611d03b038040da9ed0f38ea25898cefdc98a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a9611d03b038040da9ed0f38ea25898cefdc98a/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fmessages_members.cc?ref=2a9611d03b038040da9ed0f38ea25898cefdc98a", "patch": "@@ -34,6 +34,8 @@\n #include <limits>\n #include <algorithm>\n #include <vector>\n+#include <cstdlib>\t// std::free\n+#include <string.h>\t// ::strdup\n \n #include <backward/auto_ptr.h>\n #include <ext/concurrence.h>\n@@ -139,28 +141,28 @@ namespace\n   }\n \n   const char*\n-  get_glibc_msg(__c_locale __attribute__((unused)) __locale_messages,\n+  get_glibc_msg(__c_locale __locale_messages __attribute__((unused)),\n+\t\tconst char* __name_messages __attribute__((unused)),\n \t\tconst char* __domainname,\n \t\tconst char* __dfault)\n   {\n #if __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ > 2)\n     std::__c_locale __old = __uselocale(__locale_messages);\n-    const char* __msg =\n-      const_cast<const char*>(dgettext(__domainname, __dfault));\n-      __uselocale(__old);\n-#else\n-      char* __old = setlocale(LC_ALL, 0);\n-      const size_t __len = strlen(__old) + 1;\n-      char* __sav = new char[__len];\n-      memcpy(__sav, __old, __len);\n-      setlocale(LC_ALL, _M_name_messages);\n     const char* __msg = dgettext(__domainname, __dfault);\n-      setlocale(LC_ALL, __sav);\n-      delete [] __sav;\n-#endif\n-\n+    __uselocale(__old);\n     return __msg;\n-    }\n+#else\n+    if (char* __sav = strdup(setlocale(LC_ALL, 0)))\n+      {\n+\tsetlocale(LC_ALL, __name_messages);\n+\tconst char* __msg = dgettext(__domainname, __dfault);\n+\tsetlocale(LC_ALL, __sav);\n+\tfree(__sav);\n+\treturn __msg;\n+      }\n+    return __dfault;\n+#endif\n+  }\n }\n \n namespace std _GLIBCXX_VISIBILITY(default)\n@@ -172,14 +174,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename messages<char>::catalog\n     messages<char>::do_open(const basic_string<char>& __s,\n \t\t\t    const locale& __l) const\n-  {\n-    typedef codecvt<char, char, mbstate_t> __codecvt_t;\n-    const __codecvt_t& __codecvt = use_facet<__codecvt_t>(__l);\n+    {\n+      typedef codecvt<char, char, mbstate_t> __codecvt_t;\n+      const __codecvt_t& __codecvt = use_facet<__codecvt_t>(__l);\n \n-    bind_textdomain_codeset(__s.c_str(),\n-\t__nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n-    return get_catalogs()._M_add(__s, __l);\n-  }\n+      bind_textdomain_codeset(__s.c_str(),\n+\t  __nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n+      return get_catalogs()._M_add(__s, __l);\n+    }\n \n   template<>\n     void\n@@ -199,7 +201,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       if (!__cat_info)\n \treturn __dfault;\n \n-      return get_glibc_msg(_M_c_locale_messages,\n+      return get_glibc_msg(_M_c_locale_messages, _M_name_messages,\n \t\t\t   __cat_info->_M_domain.c_str(),\n \t\t\t   __dfault.c_str());\n     }\n@@ -209,15 +211,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     typename messages<wchar_t>::catalog\n     messages<wchar_t>::do_open(const basic_string<char>& __s,\n \t\t\t       const locale& __l) const\n-  {\n-    typedef codecvt<wchar_t, char, mbstate_t> __codecvt_t;\n-    const __codecvt_t& __codecvt = use_facet<__codecvt_t>(__l);\n+    {\n+      typedef codecvt<wchar_t, char, mbstate_t> __codecvt_t;\n+      const __codecvt_t& __codecvt = use_facet<__codecvt_t>(__l);\n \n-    bind_textdomain_codeset(__s.c_str(),\n-\t__nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n+      bind_textdomain_codeset(__s.c_str(),\n+\t  __nl_langinfo_l(CODESET, __codecvt._M_c_locale_codecvt));\n \n-    return get_catalogs()._M_add(__s, __l);\n-  }\n+      return get_catalogs()._M_add(__s, __l);\n+    }\n \n   template<>\n     void\n@@ -257,15 +259,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \t// Make sure string passed to dgettext is \\0 terminated.\n \t*__dfault_next = '\\0';\n-\t__translation\n-\t  = get_glibc_msg(_M_c_locale_messages,\n-\t\t\t  __cat_info->_M_domain.c_str(), __dfault);\n+\t__translation = get_glibc_msg(_M_c_locale_messages, _M_name_messages,\n+\t\t\t\t      __cat_info->_M_domain.c_str(), __dfault);\n \n \t// If we end up getting default value back we can simply return original\n \t// default value.\n \tif (__translation == __dfault)\n \t  return __wdfault;\n-    }\n+      }\n \n       __builtin_memset(&__state, 0, sizeof(mbstate_t));\n       size_t __size = __builtin_strlen(__translation);"}]}