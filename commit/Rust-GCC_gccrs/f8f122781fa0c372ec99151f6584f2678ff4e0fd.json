{"sha": "f8f122781fa0c372ec99151f6584f2678ff4e0fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmMTIyNzgxZmEwYzM3MmVjOTkxNTFmNjU4NGYyNjc4ZmY0ZTBmZA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-03-16T20:03:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-03-16T20:03:56Z"}, "message": "re PR c++/48113 ([C++0x] bind with tuple argument fails)\n\n\tPR c++/48113\n\t* typeck.c (convert_for_initialization): Use\n\tperform_implicit_conversion_flags.\n\t* call.c (standard_conversion): If LOOKUP_PREFER_RVALUE, set\n\trvaluedness_matches_p on ck_rvalue.\n\t(convert_like_real) [ck_rvalue]: And restore it here.\n\nFrom-SVN: r171067", "tree": {"sha": "95b9109a4d887acbe3edbcfb522799811fb9b98e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/95b9109a4d887acbe3edbcfb522799811fb9b98e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f122781fa0c372ec99151f6584f2678ff4e0fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f122781fa0c372ec99151f6584f2678ff4e0fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f122781fa0c372ec99151f6584f2678ff4e0fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f122781fa0c372ec99151f6584f2678ff4e0fd/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "85a273bae4165216919c029f0dfa28ca5800aa23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a273bae4165216919c029f0dfa28ca5800aa23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a273bae4165216919c029f0dfa28ca5800aa23"}], "stats": {"total": 65, "additions": 59, "deletions": 6}, "files": [{"sha": "4649d965ddf4108ce756b5e30111bc1022ba5835", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -1,5 +1,12 @@\n 2011-03-16  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/48113\n+\t* typeck.c (convert_for_initialization): Use\n+\tperform_implicit_conversion_flags.\n+\t* call.c (standard_conversion): If LOOKUP_PREFER_RVALUE, set\n+\trvaluedness_matches_p on ck_rvalue.\n+\t(convert_like_real) [ck_rvalue]: And restore it here.\n+\n \tPR c++/48115\n \t* call.c (convert_arg_to_ellipsis): Handle incomplete type.\n "}, {"sha": "436c9569d48d2964985f92bc444c9487c3013289", "filename": "gcc/cp/call.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -98,7 +98,9 @@ struct conversion {\n   BOOL_BITFIELD base_p : 1;\n   /* If KIND is ck_ref_bind, true when either an lvalue reference is\n      being bound to an lvalue expression or an rvalue reference is\n-     being bound to an rvalue expression. */\n+     being bound to an rvalue expression.  If KIND is ck_rvalue,\n+     true when we should treat an lvalue as an rvalue (12.8p33).  If\n+     KIND is ck_base, always false.  */\n   BOOL_BITFIELD rvaluedness_matches_p: 1;\n   BOOL_BITFIELD check_narrowing: 1;\n   /* The type of the expression resulting from the conversion.  */\n@@ -897,6 +899,8 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n \t    }\n \t}\n       conv = build_conv (ck_rvalue, from, conv);\n+      if (flags & LOOKUP_PREFER_RVALUE)\n+\tconv->rvaluedness_matches_p = true;\n     }\n \n    /* Allow conversion between `__complex__' data types.  */\n@@ -5489,6 +5493,8 @@ convert_like_real (conversion *convs, tree expr, tree fn, int argnum,\n \t   conversion (i.e. the second step of copy-initialization), so\n \t   don't allow any more.  */\n \tflags |= LOOKUP_NO_CONVERSION;\n+      if (convs->rvaluedness_matches_p)\n+\tflags |= LOOKUP_PREFER_RVALUE;\n       if (TREE_CODE (expr) == TARGET_EXPR\n \t  && TARGET_EXPR_LIST_INIT_P (expr))\n \t/* Copy-list-initialization doesn't actually involve a copy.  */"}, {"sha": "0e8a6d79b3490372d8162b4e8ab9d5d0061c3603", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -7454,7 +7454,7 @@ convert_for_initialization (tree exp, tree type, tree rhs, int flags,\n     return rhs;\n \n   if (MAYBE_CLASS_TYPE_P (type))\n-    return ocp_convert (type, rhs, CONV_IMPLICIT|CONV_FORCE_TEMP, flags);\n+    return perform_implicit_conversion_flags (type, rhs, complain, flags);\n \n   return convert_for_assignment (type, rhs, errtype, fndecl, parmnum,\n \t\t\t\t complain, flags);"}, {"sha": "dee4a8d4aa0ae57b650cfe404a7e95757a676dee", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -1,3 +1,12 @@\n+2011-03-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* g++.dg/cpp0x/sfinae6.C: New.\n+\t* gcc/testsuite/g++.dg/cpp0x/initlist38.C: Adjust expected error.\n+\t* gcc/testsuite/g++.dg/cpp0x/pr45908.C: Likewise.\n+\t* gcc/testsuite/g++.dg/cpp0x/sfinae6.C: Likewise.\n+\t* gcc/testsuite/g++.old-deja/g++.jason/conversion11.C: Likewise.\n+\t* gcc/testsuite/g++.old-deja/g++.law/arg11.C: Likewise.\n+\n 2011-03-16  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/template/incomplete6.C: New."}, {"sha": "32e20d591c7ff3f58ab91e882d6b41710b983f7d", "filename": "gcc/testsuite/g++.dg/cpp0x/initlist38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Finitlist38.C?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -17,5 +17,5 @@ int main()\n   f({});\n   B b0 = { };\n   B b1 { };    // OK, uses #1\n-  B b2 { 1 };  // { dg-error \"conversion\" }\n+  B b2 { 1 };  // { dg-error \"could not convert\" }\n }"}, {"sha": "3a8508890ee1839a347e5cc28b14698513caa31d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr45908.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr45908.C?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -14,5 +14,5 @@ struct vector {\n class block {\n     vector v;\n     auto end() const -> decltype(v.begin())\n-    { return v.begin(); } // { dg-error \"conversion\" }\n+    { return v.begin(); } // { dg-error \"could not convert\" }\n };"}, {"sha": "401d5362d849b5e023c9ed78802d1e9e7bca5329", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae6.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae6.C?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/48113\n+// { dg-options -std=c++0x }\n+\n+template<typename T> T declval();\n+\n+struct tuple { };\n+\n+struct F1\n+{\n+    void operator()(tuple, int);\n+};\n+\n+typedef void (*F2)(tuple, int);\n+\n+template<typename F, typename T>\n+struct Bind\n+{\n+    template<typename A,\n+             typename R = decltype( F()(declval<T&>(), A()) )>\n+    R f(A);\n+\n+    template<typename A,\n+             typename R = decltype( F()(declval<volatile T&>(), A()) )>\n+    R f(A) volatile;\n+};\n+\n+int main()\n+{\n+    Bind<F1, tuple>().f(0);  // OK\n+    Bind<F2, tuple>().f(0);  // ERROR, should be OK\n+}"}, {"sha": "6621a27b6a2cbcb8717e4439b3eb2df9851d3c54", "filename": "gcc/testsuite/g++.old-deja/g++.jason/conversion11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fconversion11.C?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -21,7 +21,7 @@ void DoSomething(Ding A);\n \n void foo(Something* pX)\n {\n-  DoSomething(1);\t\t// { dg-error \"conversion\" } \n+  DoSomething(1);\t\t// { dg-error \"could not convert\" }\n   pX->DoSomething(1);\t\t// { dg-error \"no matching\" } \n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 25 }\n   (*pX).DoSomething(1);\t\t// { dg-error \"no matching\" } "}, {"sha": "fc9357964f497215c211aa968d7245ad8d7722d1", "filename": "gcc/testsuite/g++.old-deja/g++.law/arg11.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farg11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f122781fa0c372ec99151f6584f2678ff4e0fd/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farg11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.law%2Farg11.C?ref=f8f122781fa0c372ec99151f6584f2678ff4e0fd", "patch": "@@ -16,7 +16,7 @@ void function(Ack);\n int\n foo(S *o)\n { // Neither call has a usable constructor for conversions of char[5] to Ack.\n-  function(\"adsf\");// { dg-error \"conversion\" } \n+  function(\"adsf\");// { dg-error \"could not convert\" }\n   o->method(\"adsf\");// { dg-error \"no matching\" } \n   // { dg-message \"candidate\" \"candidate note\" { target *-*-* } 20 }\n   return 0;"}]}