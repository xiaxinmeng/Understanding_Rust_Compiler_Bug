{"sha": "d1b83e6253d01de1e917f2f32a0142a765e9be5b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFiODNlNjI1M2QwMWRlMWU5MTdmMmYzMmEwMTQyYTc2NWU5YmU1Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:27:34Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-06-16T10:27:34Z"}, "message": "[multiple changes]\n\n2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Overridden_Ancestor): Clean up code to use\n\tcontrolling type of desired primitive rather than its scope,\n\tbecause the primitive that inherits the classwide condition may\n\tcomes from several derivation steps.\n\n2016-06-16  Javier Miranda  <miranda@adacore.com>\n\n\t* einfo.adb (Set_Default_Init_Cond_Procedure): Allow calls setting\n\tthis attribute to Empty (only if the attribute has not been set).\n\t* sem_util.adb (Build_Default_Init_Cond_Procedure_Body):\n\tNo action needed if the spec was not built.\n\t(Build_Default_Init_Cond_Procedure_Declaration): The spec is\n\tnot built if DIC is set to NULL or no condition was specified.\n\t* exp_ch3.adb (Expand_N_Object_Declaration): Check availability\n\tof the Init_Cond procedure before generating code to call it.\n\n2016-06-16  Emmanuel Briot  <briot@adacore.com>\n\n\t* s-regpat.adb: Fix invalid index check when matching end-of-line\n\ton substrings.\n\n2016-06-16  Arnaud Charlet  <charlet@adacore.com>\n\n\t* gnat1drv.adb: Minor reformatting.\n\nFrom-SVN: r237516", "tree": {"sha": "e86b073f649b694ac43ce179b304778932285b56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e86b073f649b694ac43ce179b304778932285b56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1b83e6253d01de1e917f2f32a0142a765e9be5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b83e6253d01de1e917f2f32a0142a765e9be5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1b83e6253d01de1e917f2f32a0142a765e9be5b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1b83e6253d01de1e917f2f32a0142a765e9be5b/comments", "author": null, "committer": null, "parents": [{"sha": "3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3386e3ae5dcea06e710c0bccdc2af72b1ab8dde4"}], "stats": {"total": 75, "additions": 65, "deletions": 10}, "files": [{"sha": "10ccf7ef46aec5b7410cf2843495293ba2bba43c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -1,3 +1,30 @@\n+2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Overridden_Ancestor): Clean up code to use\n+\tcontrolling type of desired primitive rather than its scope,\n+\tbecause the primitive that inherits the classwide condition may\n+\tcomes from several derivation steps.\n+\n+2016-06-16  Javier Miranda  <miranda@adacore.com>\n+\n+\t* einfo.adb (Set_Default_Init_Cond_Procedure): Allow calls setting\n+\tthis attribute to Empty (only if the attribute has not been set).\n+\t* sem_util.adb (Build_Default_Init_Cond_Procedure_Body):\n+\tNo action needed if the spec was not built.\n+\t(Build_Default_Init_Cond_Procedure_Declaration): The spec is\n+\tnot built if DIC is set to NULL or no condition was specified.\n+\t* exp_ch3.adb (Expand_N_Object_Declaration): Check availability\n+\tof the Init_Cond procedure before generating code to call it.\n+\n+2016-06-16  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* s-regpat.adb: Fix invalid index check when matching end-of-line\n+\ton substrings.\n+\n+2016-06-16  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* gnat1drv.adb: Minor reformatting.\n+\n 2016-06-16  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Check_Entry_Contracts): New procedure, subsidiary"}, {"sha": "39cfe35c30232422f17662f913de85de9959b24c", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -8567,6 +8567,13 @@ package body Einfo is\n       Subp_Id  : Entity_Id;\n \n    begin\n+      --  Once set this attribute it cannot be reset\n+\n+      if No (V) then\n+         pragma Assert (No (Default_Init_Cond_Procedure (Id)));\n+         return;\n+      end if;\n+\n       pragma Assert\n         (Is_Type (Id)\n           and then (Has_Default_Init_Cond (Id)"}, {"sha": "43d27ba613ac6f7fb94bdb034adf68b9177e2ace", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -6963,6 +6963,7 @@ package body Exp_Ch3 is\n                     or else\n                   Has_Inherited_Default_Init_Cond (Typ))\n         and then not Has_Init_Expression (N)\n+        and then Present (Default_Init_Cond_Procedure (Typ))\n       then\n          declare\n             DIC_Call : constant Node_Id :="}, {"sha": "702545a1718e4bf024d2513441b50c3eac78cc72", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -317,7 +317,7 @@ procedure Gnat1drv is\n          Assertions_Enabled := True;\n \n          --  Set normal RM validity checking and checking of copies (to catch\n-         --  e.g.  wrong values used in unchecked conversions).\n+         --  e.g. wrong values used in unchecked conversions).\n          --  All other validity checking is turned off, since this can generate\n          --  very complex trees that only confuse CodePeer and do not bring\n          --  enough useful info."}, {"sha": "f672b9e92a11c3387b9d2b7a6b50229aaea6dbc0", "filename": "gcc/ada/s-regpat.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fs-regpat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fs-regpat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-regpat.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -7,7 +7,7 @@\n --                                 B o d y                                  --\n --                                                                          --\n --               Copyright (C) 1986 by University of Toronto.               --\n---                      Copyright (C) 1999-2015, AdaCore                    --\n+--                      Copyright (C) 1999-2016, AdaCore                    --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2614,16 +2614,16 @@ package body System.Regpat is\n                   exit State_Machine when Input_Pos /= BOL_Pos;\n \n                when EOL =>\n-                  exit State_Machine when Input_Pos <= Data'Last\n+                  exit State_Machine when Input_Pos <= Last_In_Data\n                     and then ((Self.Flags and Multiple_Lines) = 0\n                                or else Data (Input_Pos) /= ASCII.LF);\n \n                when MEOL =>\n-                  exit State_Machine when Input_Pos <= Data'Last\n+                  exit State_Machine when Input_Pos <= Last_In_Data\n                     and then Data (Input_Pos) /= ASCII.LF;\n \n                when SEOL =>\n-                  exit State_Machine when Input_Pos <= Data'Last;\n+                  exit State_Machine when Input_Pos <= Last_In_Data;\n \n                when BOUND | NBOUND =>\n "}, {"sha": "fd8352398588ed902055600ea5a515a3d5e7e8a2", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -26342,13 +26342,18 @@ package body Sem_Prag is\n             -------------------------\n \n             function Overridden_Ancestor (S : Entity_Id) return Entity_Id is\n+               Par : constant Entity_Id := Find_Dispatching_Type (Inher_Id);\n                Anc : Entity_Id;\n \n             begin\n                Anc := S;\n+\n+               --  Locate the ancestor subprogram with the proper controlling\n+               --  type.\n+\n                while Present (Overridden_Operation (Anc)) loop\n-                  exit when Scope (Anc) = Scope (Inher_Id);\n                   Anc := Overridden_Operation (Anc);\n+                  exit when Find_Dispatching_Type (Anc) = Par;\n                end loop;\n \n                return Anc;"}, {"sha": "43b08912504ffebf0a4a4462731b9b3918fd77f1", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1b83e6253d01de1e917f2f32a0142a765e9be5b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=d1b83e6253d01de1e917f2f32a0142a765e9be5b", "patch": "@@ -1214,9 +1214,9 @@ package body Sem_Util is\n          Prag      : constant Node_Id    :=\n                        Get_Pragma (Typ, Pragma_Default_Initial_Condition);\n          Proc_Id   : constant Entity_Id  := Default_Init_Cond_Procedure (Typ);\n-         Spec_Decl : constant Node_Id    := Unit_Declaration_Node (Proc_Id);\n          Body_Decl : Node_Id;\n          Expr      : Node_Id;\n+         Spec_Decl : Node_Id;\n          Stmt      : Node_Id;\n \n          Save_Ghost_Mode : constant Ghost_Mode_Type := Ghost_Mode;\n@@ -1230,11 +1230,14 @@ package body Sem_Util is\n \n          pragma Assert (Has_Default_Init_Cond (Typ));\n          pragma Assert (Present (Prag));\n-         pragma Assert (Present (Proc_Id));\n \n-         --  Nothing to do if the body was already built\n+         --  No action needed if the spec was not built or if the body was\n+         --  already built.\n \n-         if Present (Corresponding_Body (Spec_Decl)) then\n+         if No (Proc_Id)\n+           or else\n+             Present (Corresponding_Body (Unit_Declaration_Node (Proc_Id)))\n+         then\n             return;\n          end if;\n \n@@ -1293,6 +1296,7 @@ package body Sem_Util is\n          --       <Stmt>;\n          --    end <Typ>Default_Init_Cond;\n \n+         Spec_Decl := Unit_Declaration_Node (Proc_Id);\n          Body_Decl :=\n            Make_Subprogram_Body (Loc,\n              Specification              =>\n@@ -1378,6 +1382,17 @@ package body Sem_Util is\n \n       if Present (Default_Init_Cond_Procedure (Typ)) then\n          return;\n+\n+      --  The procedure must not be generated when DIC has one of these two\n+      --  forms: 1. Default_Initial_Condition => null\n+      --         2. Default_Initial_Condition\n+\n+      elsif No (Pragma_Argument_Associations (Prag))\n+        or else\n+          Nkind (Get_Pragma_Arg (First (Pragma_Argument_Associations (Prag))))\n+            = N_Null\n+      then\n+         return;\n       end if;\n \n       --  The related type may be subject to pragma Ghost. Set the mode now to"}]}