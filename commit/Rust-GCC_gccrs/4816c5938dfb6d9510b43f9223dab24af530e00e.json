{"sha": "4816c5938dfb6d9510b43f9223dab24af530e00e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDgxNmM1OTM4ZGZiNmQ5NTEwYjQzZjkyMjNkYWIyNGFmNTMwZTAwZQ==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2010-12-10T14:20:26Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2010-12-10T14:20:26Z"}, "message": "c-typeck.c (readonly_error): Delete.\n\ngcc/\n\t* c-typeck.c (readonly_error): Delete.\n\ngcc/c-family/\n\t* c-common.h (readonly_error): Declare.\n\t* c-common.c (readonly_error): Define.\n\ngcc/cp/\n\t* cp-tree.h (readonly_error_kind): Delete.\n\t(readonly_error): Rename to...\n\t(cxx_readonly_error): ...this.  Change second argument to be an\n\tenum lvalue_use.\n\t* semantics.c (finish_asm_stmt): Call cxx_readonly_error.\n\t* typeck.c (cp_build_unary_op): Likewise.\n\t(cp_build_modify_expr): Likewise.\n\t* typeck2.c (readonly_error): Rename to...\n\t(cxx_readonly_error): ...this.  Delegate to readonly_error for\n\tmost cases.\n\ngcc/testsuite/\n\t* gcc.dg/dfp/struct-union.c: Adjust.\n\t* gcc.dg/lvalue-2.c: Adjust.\n\t* gcc.dg/pr21419.c: Adjust.\n\t* gcc.dg/qual-component-1.c: Adjust.\n\t* g++.dg/other/const1.C: Adjust.\n\nFrom-SVN: r167687", "tree": {"sha": "ba520fa5422c9cc016fb1652664a621506caa191", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba520fa5422c9cc016fb1652664a621506caa191"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4816c5938dfb6d9510b43f9223dab24af530e00e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4816c5938dfb6d9510b43f9223dab24af530e00e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4816c5938dfb6d9510b43f9223dab24af530e00e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4816c5938dfb6d9510b43f9223dab24af530e00e/comments", "author": null, "committer": null, "parents": [{"sha": "fee457233eea9e0f2a88273ba3e6b75b9f9b73d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee457233eea9e0f2a88273ba3e6b75b9f9b73d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee457233eea9e0f2a88273ba3e6b75b9f9b73d9"}], "stats": {"total": 323, "additions": 151, "deletions": 172}, "files": [{"sha": "f967a667cb831bfe30f4ca2ac1de7b99d5830b6b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -1,3 +1,7 @@\n+2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-typeck.c (readonly_error): Delete.\n+\n 2010-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/46865"}, {"sha": "20d59d991ee0701ddce7be94915934bc15b6e43f", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -1,3 +1,8 @@\n+2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* c-common.h (readonly_error): Declare.\n+\t* c-common.c (readonly_error): Define.\n+\n 2010-12-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* c-common.h (invalid_indirection_error): Declare."}, {"sha": "7b39d55ae4680659fe4047ab1fa8e9bc52eaf3ff", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -8558,6 +8558,78 @@ warn_for_omitted_condop (location_t location, tree cond)\n \t\t\"suggest explicit middle operand\");\n } \n \n+/* Give an error for storing into ARG, which is 'const'.  USE indicates\n+   how ARG was being used.  */\n+\n+void\n+readonly_error (tree arg, enum lvalue_use use)\n+{\n+  gcc_assert (use == lv_assign || use == lv_increment || use == lv_decrement\n+\t      || use == lv_asm);\n+  /* Using this macro rather than (for example) arrays of messages\n+     ensures that all the format strings are checked at compile\n+     time.  */\n+#define READONLY_MSG(A, I, D, AS) (use == lv_assign ? (A)\t\t\\\n+\t\t\t\t   : (use == lv_increment ? (I)\t\t\\\n+\t\t\t\t   : (use == lv_decrement ? (D) : (AS))))\n+  if (TREE_CODE (arg) == COMPONENT_REF)\n+    {\n+      if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n+        error (READONLY_MSG (G_(\"assignment of member \"\n+\t\t\t\t\"%qD in read-only object\"),\n+\t\t\t     G_(\"increment of member \"\n+\t\t\t\t\"%qD in read-only object\"),\n+\t\t\t     G_(\"decrement of member \"\n+\t\t\t\t\"%qD in read-only object\"),\n+\t\t\t     G_(\"member %qD in read-only object \"\n+\t\t\t\t\"used as %<asm%> output\")),\n+\t       TREE_OPERAND (arg, 1));\n+      else\n+\terror (READONLY_MSG (G_(\"assignment of read-only member %qD\"),\n+\t\t\t     G_(\"increment of read-only member %qD\"),\n+\t\t\t     G_(\"decrement of read-only member %qD\"),\n+\t\t\t     G_(\"read-only member %qD used as %<asm%> output\")),\n+\t       TREE_OPERAND (arg, 1));\n+    }\n+  else if (TREE_CODE (arg) == VAR_DECL)\n+    error (READONLY_MSG (G_(\"assignment of read-only variable %qD\"),\n+\t\t\t G_(\"increment of read-only variable %qD\"),\n+\t\t\t G_(\"decrement of read-only variable %qD\"),\n+\t\t\t G_(\"read-only variable %qD used as %<asm%> output\")),\n+\t   arg);\n+  else if (TREE_CODE (arg) == PARM_DECL)\n+    error (READONLY_MSG (G_(\"assignment of read-only parameter %qD\"),\n+\t\t\t G_(\"increment of read-only parameter %qD\"),\n+\t\t\t G_(\"decrement of read-only parameter %qD\"),\n+\t\t\t G_(\"read-only parameter %qD use as %<asm%> output\")),\n+\t   arg);  \n+  else if (TREE_CODE (arg) == RESULT_DECL)\n+    {\n+      gcc_assert (c_dialect_cxx ());\n+      error (READONLY_MSG (G_(\"assignment of \"\n+\t\t\t      \"read-only named return value %qD\"),\n+\t\t\t   G_(\"increment of \"\n+\t\t\t      \"read-only named return value %qD\"),\n+\t\t\t   G_(\"decrement of \"\n+\t\t\t      \"read-only named return value %qD\"),\n+\t\t\t   G_(\"read-only named return value %qD \"\n+\t\t\t      \"used as %<asm%>output\")),\n+\t     arg);\n+    }\n+  else if (TREE_CODE (arg) == FUNCTION_DECL)\n+    error (READONLY_MSG (G_(\"assignment of function %qD\"),\n+\t\t\t G_(\"increment of function %qD\"),\n+\t\t\t G_(\"decrement of function %qD\"),\n+\t\t\t G_(\"function %qD used as %<asm%> output\")),\n+\t   arg);\n+  else\n+    error (READONLY_MSG (G_(\"assignment of read-only location %qE\"),\n+\t\t\t G_(\"increment of read-only location %qE\"),\n+\t\t\t G_(\"decrement of read-only location %qE\"),\n+\t\t\t G_(\"read-only location %qE used as %<asm%> output\")),\n+\t   arg);\n+}\n+\n /* Print an error message for an invalid lvalue.  USE says\n    how the lvalue is being used and so selects the error message.  */\n "}, {"sha": "12845757c093eb5a88da5e1d3d12ce7fddce55cd", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -928,6 +928,7 @@ enum lvalue_use {\n   lv_asm\n };\n \n+extern void readonly_error (tree, enum lvalue_use);\n extern void lvalue_error (enum lvalue_use);\n extern void invalid_indirection_error (location_t, tree, ref_operator);\n "}, {"sha": "44223fb38da39cfe08b16f7bbf1331c0e085b194", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -97,7 +97,6 @@ static void add_pending_init (tree, tree, tree, bool, struct obstack *);\n static void set_nonincremental_init (struct obstack *);\n static void set_nonincremental_init_from_string (tree, struct obstack *);\n static tree find_init_member (tree, struct obstack *);\n-static void readonly_error (tree, enum lvalue_use);\n static void readonly_warning (tree, enum lvalue_use);\n static int lvalue_or_else (const_tree, enum lvalue_use);\n static void record_maybe_used_decl (tree);\n@@ -3880,44 +3879,6 @@ lvalue_p (const_tree ref)\n     }\n }\n \f\n-/* Give an error for storing in something that is 'const'.  */\n-\n-static void\n-readonly_error (tree arg, enum lvalue_use use)\n-{\n-  gcc_assert (use == lv_assign || use == lv_increment || use == lv_decrement\n-\t      || use == lv_asm);\n-  /* Using this macro rather than (for example) arrays of messages\n-     ensures that all the format strings are checked at compile\n-     time.  */\n-#define READONLY_MSG(A, I, D, AS) (use == lv_assign ? (A)\t\t\\\n-\t\t\t\t   : (use == lv_increment ? (I)\t\t\\\n-\t\t\t\t   : (use == lv_decrement ? (D) : (AS))))\n-  if (TREE_CODE (arg) == COMPONENT_REF)\n-    {\n-      if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n-\treadonly_error (TREE_OPERAND (arg, 0), use);\n-      else\n-\terror (READONLY_MSG (G_(\"assignment of read-only member %qD\"),\n-\t\t\t     G_(\"increment of read-only member %qD\"),\n-\t\t\t     G_(\"decrement of read-only member %qD\"),\n-\t\t\t     G_(\"read-only member %qD used as %<asm%> output\")),\n-\t       TREE_OPERAND (arg, 1));\n-    }\n-  else if (TREE_CODE (arg) == VAR_DECL)\n-    error (READONLY_MSG (G_(\"assignment of read-only variable %qD\"),\n-\t\t\t G_(\"increment of read-only variable %qD\"),\n-\t\t\t G_(\"decrement of read-only variable %qD\"),\n-\t\t\t G_(\"read-only variable %qD used as %<asm%> output\")),\n-\t   arg);\n-  else\n-    error (READONLY_MSG (G_(\"assignment of read-only location %qE\"),\n-\t\t\t G_(\"increment of read-only location %qE\"),\n-\t\t\t G_(\"decrement of read-only location %qE\"),\n-\t\t\t G_(\"read-only location %qE used as %<asm%> output\")),\n-\t   arg);\n-}\n-\n /* Give a warning for storing in something that is read-only in GCC\n    terms but not const in ISO C terms.  */\n "}, {"sha": "de7160fd469e1df1d62adbd9e69fa85ec0fc7a60", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -1,3 +1,16 @@\n+2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* cp-tree.h (readonly_error_kind): Delete.\n+\t(readonly_error): Rename to...\n+\t(cxx_readonly_error): ...this.  Change second argument to be an\n+\tenum lvalue_use.\n+\t* semantics.c (finish_asm_stmt): Call cxx_readonly_error.\n+\t* typeck.c (cp_build_unary_op): Likewise.\n+\t(cp_build_modify_expr): Likewise.\n+\t* typeck2.c (readonly_error): Rename to...\n+\t(cxx_readonly_error): ...this.  Delegate to readonly_error for\n+\tmost cases.\n+\n 2010-12-10  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* parser.c (cp_parser_objc_superclass_or_category): Recognize"}, {"sha": "79f9f24eee04918e15fb54c2e4f83e6fa68774a8", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -406,19 +406,6 @@ typedef enum composite_pointer_operation\n   CPO_CONDITIONAL_EXPR\n } composite_pointer_operation;\n \n-/* The various readonly error string used by readonly_error.  */\n-typedef enum readonly_error_kind\n-{\n-  /* assignment */\n-  REK_ASSIGNMENT,\n-  /* assignment (via 'asm' output) */\n-  REK_ASSIGNMENT_ASM,\n-  /* increment */\n-  REK_INCREMENT,\n-  /* decrement */\n-  REK_DECREMENT\n-} readonly_error_kind;\n-\n /* Possible cases of expression list used by build_x_compound_expr_from_list. */\n typedef enum expr_list_kind {\n   ELK_INIT,\t\t/* initializer */\n@@ -5589,7 +5576,7 @@ extern void cxx_incomplete_type_error\t\t(const_tree, const_tree);\n   (cxx_incomplete_type_diagnostic ((V), (T), DK_ERROR))\n extern tree error_not_base_type\t\t\t(tree, tree);\n extern tree binfo_or_else\t\t\t(tree, tree);\n-extern void readonly_error\t\t\t(tree, readonly_error_kind);\n+extern void cxx_readonly_error\t\t\t(tree, enum lvalue_use);\n extern void complete_type_check_abstract\t(tree);\n extern int abstract_virtuals_error\t\t(tree, tree);\n "}, {"sha": "7e4255325d2b5ff437401e64960a6bc3fd7f66de", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -1317,7 +1317,7 @@ finish_asm_stmt (int volatile_p, tree string, tree output_operands,\n \t\t     effectively const.  */\n \t\t  || (CLASS_TYPE_P (TREE_TYPE (operand))\n \t\t      && C_TYPE_FIELDS_READONLY (TREE_TYPE (operand)))))\n-\t    readonly_error (operand, REK_ASSIGNMENT_ASM);\n+\t    cxx_readonly_error (operand, lv_asm);\n \n \t  constraint = TREE_STRING_POINTER (TREE_VALUE (TREE_PURPOSE (t)));\n \t  oconstraints[i] = constraint;"}, {"sha": "edf1c1378475abacfd5033412ec8997bea4e82b8", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -5115,9 +5115,9 @@ cp_build_unary_op (enum tree_code code, tree xarg, int noconvert,\n \t  || TREE_READONLY (arg)) \n         {\n           if (complain & tf_error)\n-            readonly_error (arg, ((code == PREINCREMENT_EXPR\n-                                   || code == POSTINCREMENT_EXPR)\n-                                  ? REK_INCREMENT : REK_DECREMENT));\n+            cxx_readonly_error (arg, ((code == PREINCREMENT_EXPR\n+\t\t\t\t      || code == POSTINCREMENT_EXPR)\n+\t\t\t\t     ? lv_increment : lv_decrement));\n           else\n             return error_mark_node;\n         }\n@@ -6660,7 +6660,7 @@ cp_build_modify_expr (tree lhs, enum tree_code modifycode, tree rhs,\n \t      && C_TYPE_FIELDS_READONLY (lhstype))))\n     {\n       if (complain & tf_error)\n-\treadonly_error (lhs, REK_ASSIGNMENT);\n+\tcxx_readonly_error (lhs, lv_assign);\n       else\n \treturn error_mark_node;\n     }"}, {"sha": "3d6593929a1066f54b85967fc994b35c0924d3a4", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 21, "deletions": 93, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -70,7 +70,7 @@ binfo_or_else (tree base, tree type)\n    value may not be changed thereafter.  */\n \n void\n-readonly_error (tree arg, readonly_error_kind errstring)\n+cxx_readonly_error (tree arg, enum lvalue_use errstring)\n {\n  \n /* This macro is used to emit diagnostics to ensure that all format\n@@ -81,125 +81,53 @@ readonly_error (tree arg, readonly_error_kind errstring)\n   do {                                                                  \\\n     switch (errstring)                                                  \\\n       {                                                                 \\\n-      case REK_ASSIGNMENT:                                              \\\n+      case lv_assign:\t\t\t\t\t\t\t\\\n         error(AS, ARG);                                                 \\\n         break;                                                          \\\n-      case REK_ASSIGNMENT_ASM:                                          \\\n+      case lv_asm:\t\t\t\t\t\t\t\\\n         error(ASM, ARG);                                                \\\n         break;                                                          \\\n-      case REK_INCREMENT:                                               \\\n+      case lv_increment:\t\t\t\t\t\t\\\n         error (IN, ARG);                                                \\\n         break;                                                          \\\n-      case REK_DECREMENT:                                               \\\n+      case lv_decrement:                                               \\\n         error (DE, ARG);                                                \\\n         break;                                                          \\\n       default:                                                          \\\n         gcc_unreachable ();                                             \\\n       }                                                                 \\\n   } while (0)\n \n-  if (TREE_CODE (arg) == COMPONENT_REF)\n-    {\n-      if (TYPE_READONLY (TREE_TYPE (TREE_OPERAND (arg, 0))))\n-        ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                                 \"data-member %qD in read-only structure\"),\n-                              G_(\"assignment (via 'asm' output) of \"\n-                                 \"data-member %qD in read-only structure\"),\n-                              G_(\"increment of \"\n-                                 \"data-member %qD in read-only structure\"),\n-                              G_(\"decrement of \"\n-                                 \"data-member %qD in read-only structure\"),\n-                              TREE_OPERAND (arg, 1));\n-      else\n-        ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                                 \"read-only data-member %qD\"),\n-                              G_(\"assignment (via 'asm' output) of \"\n-                                 \"read-only data-member %qD\"),\n-                              G_(\"increment of \"\n-                                 \"read-only data-member %qD\"),\n-                              G_(\"decrement of \"\n-                                 \"read-only data-member %qD\"),\n-                              TREE_OPERAND (arg, 1));\n-    }\n-  else if (TREE_CODE (arg) == VAR_DECL)\n-    {\n-      if (DECL_LANG_SPECIFIC (arg)\n-\t  && DECL_IN_AGGR_P (arg)\n-\t  && !TREE_STATIC (arg))\n-        ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                              \"constant field %qD\"),\n-                              G_(\"assignment (via 'asm' output) of \"\n-                              \"constant field %qD\"),\n-                              G_(\"increment of \"\n-                              \"constant field %qD\"),\n-                              G_(\"decrement of \"\n-                              \"constant field %qD\"),\n-                              arg);\n-      else\n-        ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                              \"read-only variable %qD\"),\n-                              G_(\"assignment (via 'asm' output) of \"\n-                              \"read-only variable %qD\"),\n-                              G_(\"increment of \"\n-                              \"read-only variable %qD\"),\n-                              G_(\"decrement of \"\n-                              \"read-only variable %qD\"),\n-                              arg);\n+  /* Handle C++-specific things first.  */\n \n-    }\n-  else if (TREE_CODE (arg) == PARM_DECL)\n+  if (TREE_CODE (arg) == VAR_DECL\n+      && DECL_LANG_SPECIFIC (arg)\n+      && DECL_IN_AGGR_P (arg)\n+      && !TREE_STATIC (arg))\n     ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                             \"read-only parameter %qD\"),\n-                          G_(\"assignment (via 'asm' output) of \"\n-                             \"read-only parameter %qD\"),\n-                          G_(\"increment of \"\n-                             \"read-only parameter %qD\"),\n-                          G_(\"decrement of \"\n-                             \"read-only parameter %qD\"),\n-                          arg);  \n+\t\t\t     \"constant field %qD\"),\n+\t\t\t  G_(\"constant field %qD \"\n+\t\t\t     \"used as %<asm%> output\"),\n+\t\t\t  G_(\"increment of \"\n+\t\t\t     \"constant field %qD\"),\n+\t\t\t  G_(\"decrement of \"\n+\t\t\t     \"constant field %qD\"),\n+\t\t\t  arg);\n   else if (TREE_CODE (arg) == INDIRECT_REF\n \t   && TREE_CODE (TREE_TYPE (TREE_OPERAND (arg, 0))) == REFERENCE_TYPE\n \t   && (TREE_CODE (TREE_OPERAND (arg, 0)) == VAR_DECL\n \t       || TREE_CODE (TREE_OPERAND (arg, 0)) == PARM_DECL))\n     ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n                              \"read-only reference %qD\"),\n-                          G_(\"assignment (via 'asm' output) of \"\n-                             \"read-only reference %qD\"), \n+                          G_(\"read-only reference %qD \"\n+\t\t\t     \"used as %<asm%> output\"), \n                           G_(\"increment of \"\n                              \"read-only reference %qD\"),\n                           G_(\"decrement of \"\n                              \"read-only reference %qD\"),\n                           TREE_OPERAND (arg, 0));\n-  else if (TREE_CODE (arg) == RESULT_DECL)\n-    ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                             \"read-only named return value %qD\"),\n-                          G_(\"assignment (via 'asm' output) of \"\n-                             \"read-only named return value %qD\"),\n-                          G_(\"increment of \"\n-                             \"read-only named return value %qD\"),\n-                          G_(\"decrement of \"\n-                             \"read-only named return value %qD\"),\n-                          arg);\n-  else if (TREE_CODE (arg) == FUNCTION_DECL)\n-    ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                             \"function %qD\"),\n-                          G_(\"assignment (via 'asm' output) of \"\n-                             \"function %qD\"),\n-                          G_(\"increment of \"\n-                             \"function %qD\"),\n-                          G_(\"decrement of \"\n-                             \"function %qD\"),\n-                          arg);\n   else\n-    ERROR_FOR_ASSIGNMENT (G_(\"assignment of \"\n-                             \"read-only location %qE\"),\n-                          G_(\"assignment (via 'asm' output) of \"\n-                             \"read-only location %qE\"),\n-                          G_(\"increment of \"\n-                             \"read-only location %qE\"),\n-                          G_(\"decrement of \"\n-                             \"read-only location %qE\"),\n-                          arg);\n+    readonly_error (arg, errstring);\n }\n \n \f"}, {"sha": "8322e96ca597942aeeaa50127c15c6bd7843d085", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -1,3 +1,11 @@\n+2010-12-10  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* gcc.dg/dfp/struct-union.c: Adjust.\n+\t* gcc.dg/lvalue-2.c: Adjust.\n+\t* gcc.dg/pr21419.c: Adjust.\n+\t* gcc.dg/qual-component-1.c: Adjust.\n+\t* g++.dg/other/const1.C: Adjust.\n+\n 2010-12-10  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/46865"}, {"sha": "f010138378f4b0f2ea6ce04fbed73285e75c7ead", "filename": "gcc/testsuite/g++.dg/other/const1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fconst1.C?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -13,5 +13,5 @@ struct Foo\n \n void Foo::Modify(unsigned j) const\n {\n-  Foo::i = j;  // { dg-error \"assignment of data-member\" \"\" }\n+  Foo::i = j;  // { dg-error \"assignment of member\" \"\" }\n }"}, {"sha": "956fdcf2158357f5f6db8a187c3e53f9d14b24a7", "filename": "gcc/testsuite/gcc.dg/dfp/struct-union.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdfp%2Fstruct-union.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -33,22 +33,22 @@ union u h (union u u)\n \n void f()\n {\n-  cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only variable\" } */\n-  cs.d64 = 1.23df; /* { dg-error \"assignment of read-only variable\" } */\n+  cs.d32 = 1.23dd; /* { dg-error \"assignment of member 'd32' in read-only object\" } */\n+  cs.d64 = 1.23df; /* { dg-error \"assignment of member 'd64' in read-only object\" } */\n   s.d64 = 1.23df;  /* { dg-error \"assignment of read-only member\" } */\n \n   s.d32 = 1.23dd;\n   u.d32 = 1.23dd;\n \n   u.d64 = 1.23df;    /* { dg-error \"assignment of read-only member\" } */\n-  u.cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only member\" } */\n-  u.cs.d64 = 1.23df; /* { dg-error \"assignment of read-only member\" } */\n+  u.cs.d32 = 1.23dd; /* { dg-error \"assignment of member 'd32' in read-only object\" } */\n+  u.cs.d64 = 1.23df; /* { dg-error \"assignment of member 'd64' in read-only object\" } */\n   \n-  cu.d32 = 1.23dd;   /* { dg-error \"assignment of read-only variable\" } */\n+  cu.d32 = 1.23dd;   /* { dg-error \"assignment of member 'd32' in read-only object\" } */\n \n-  cu.d64 = 1.23df;    /* { dg-error \"assignment of read-only variable\" } */\n-  cu.cs.d32 = 1.23dd; /* { dg-error \"assignment of read-only variable\" } */\n-  cu.cs.d64 = 1.23df; /* { dg-error \"assignment of read-only variable\" } */\n+  cu.d64 = 1.23df;    /* { dg-error \"assignment of member 'd64' in read-only object\" } */\n+  cu.cs.d32 = 1.23dd; /* { dg-error \"assignment of member 'd32' in read-only object\" } */\n+  cu.cs.d64 = 1.23df; /* { dg-error \"assignment of member 'd64' in read-only object\" } */\n \n   /* f().x is a valid postfix expression but is not an lvalue if \n      function f() returning a structure or union.  */"}, {"sha": "7f9372f30e2d8db2ecec4a3575901cc7bbc856e0", "filename": "gcc/testsuite/gcc.dg/lvalue-2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flvalue-2.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -26,23 +26,23 @@ void\n f1 (void)\n {\n   c = 1; /* { dg-error \"assignment of read-only variable 'c'\" } */\n-  d.x = 1; /* { dg-error \"assignment of read-only variable 'd'\" } */\n+  d.x = 1; /* { dg-error \"assignment of member 'x' in read-only object\" } */\n   e.x = 1; /* { dg-error \"assignment of read-only member 'x'\" } */\n   *f = 1; /* { dg-error \"assignment of read-only location\" } */\n   c++; /* { dg-error \"increment of read-only variable 'c'\" } */\n-  d.x++; /* { dg-error \"increment of read-only variable 'd'\" } */\n+  d.x++; /* { dg-error \"increment of member 'x' in read-only object\" } */\n   e.x++; /* { dg-error \"increment of read-only member 'x'\" } */\n   (*f)++; /* { dg-error \"increment of read-only location\" } */\n   ++c; /* { dg-error \"increment of read-only variable 'c'\" } */\n-  ++d.x; /* { dg-error \"increment of read-only variable 'd'\" } */\n+  ++d.x; /* { dg-error \"increment of member 'x' in read-only object\" } */\n   ++e.x; /* { dg-error \"increment of read-only member 'x'\" } */\n   ++(*f); /* { dg-error \"increment of read-only location\" } */\n   c--; /* { dg-error \"decrement of read-only variable 'c'\" } */\n-  d.x--; /* { dg-error \"decrement of read-only variable 'd'\" } */\n+  d.x--; /* { dg-error \"decrement of member 'x' in read-only object\" } */\n   e.x--; /* { dg-error \"decrement of read-only member 'x'\" } */\n   (*f)--; /* { dg-error \"decrement of read-only location\" } */\n   --c; /* { dg-error \"decrement of read-only variable 'c'\" } */\n-  --d.x; /* { dg-error \"decrement of read-only variable 'd'\" } */\n+  --d.x; /* { dg-error \"decrement of member 'x' in read-only object\" } */\n   --e.x; /* { dg-error \"decrement of read-only member 'x'\" } */\n   --(*f); /* { dg-error \"decrement of read-only location\" } */\n }"}, {"sha": "120ed7f141521d4d0a1d8b78b670c859b53e06d0", "filename": "gcc/testsuite/gcc.dg/pr21419.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr21419.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -9,7 +9,7 @@ void f(void)\n \n void g(const int set)\n {\n-  __asm__ __volatile__ (\"\" : \"=r\" (set)); /* { dg-error \"read-only location\" } */\n+  __asm__ __volatile__ (\"\" : \"=r\" (set)); /* { dg-error \"read-only parameter\" } */\n }\n \n "}, {"sha": "dedc63f39b201ddf377c4abc9dbd470b9cc225be", "filename": "gcc/testsuite/gcc.dg/qual-component-1.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4816c5938dfb6d9510b43f9223dab24af530e00e/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fqual-component-1.c?ref=4816c5938dfb6d9510b43f9223dab24af530e00e", "patch": "@@ -62,39 +62,39 @@ f (void)\n   *v2->f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v2->f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v3->a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->a = 0; /* { dg-error \"assignment of member\" } */\n   v3->b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v3->b = 0; /* { dg-error \"assignment of read-only\" } */\n   v3->c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v3->c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v3->c = 0; /* { dg-error \"assignment of read-only\" } */\n-  v3->d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v3->d = 0; /* { dg-error \"assignment of member\" } */\n   v3->e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v3->e = 0; /* { dg-error \"assignment of read-only\" } */\n   v3->f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v3->f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v3->f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v4.a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.a = 0; /* { dg-error \"assignment of member\" } */\n   v4.b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v4.b = 0; /* { dg-error \"assignment of read-only\" } */\n   v4.c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v4.c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v4.c = 0; /* { dg-error \"assignment of read-only\" } */\n-  v4.d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v4.d = 0; /* { dg-error \"assignment of member\" } */\n   v4.e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v4.e = 0; /* { dg-error \"assignment of read-only\" } */\n   v4.f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v4.f[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v4.f = 0; /* { dg-error \"assignment of read-only\" } */\n \n-  v5.x.a = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.a = 0; /* { dg-error \"assignment of member\" } */\n   v5.x.b[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v5.x.b = 0; /* { dg-error \"assignment of read-only\" } */\n   v5.x.c[0][0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v5.x.c[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   **v5.x.c = 0; /* { dg-error \"assignment of read-only\" } */\n-  v5.x.d = 0; /* { dg-error \"assignment of read-only\" } */\n+  v5.x.d = 0; /* { dg-error \"assignment of member\" } */\n   v5.x.e[0] = 0; /* { dg-error \"assignment of read-only\" } */\n   *v5.x.e = 0; /* { dg-error \"assignment of read-only\" } */\n   v5.x.f[0][0] = 0; /* { dg-error \"assignment of read-only\" } */"}]}