{"sha": "2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjE5NTg2N2YxZDZjZGM5ZThkMzZhZWVlZmMzYzBmMDAwYmNjYmRhMw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2014-04-22T20:31:29Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2014-04-22T20:31:29Z"}, "message": "AArch64 add, sub, mul in TImode\n\n\t* config/aarch64/aarch64.md (multi3): New expander.\n\t(madd<GPI>): Remove leading * from name.\n\n\t* config/aarch64/aarch64.md (<su_optab>mulditi3): New expander.\n\n\t* config/aarch64/aarch64 (addti3, subti3): New expanders.\n\t(add<GPI>3_compare0): Remove leading * from name.\n\t(add<GPI>3_carryin): Likewise.\n\t(sub<GPI>3_compare0): Likewise.\n\t(sub<GPI>3_carryin): Likewise.\n\nFrom-SVN: r209659", "tree": {"sha": "84bee9aaafc38cd54f126b2eef638988f1bcc8cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84bee9aaafc38cd54f126b2eef638988f1bcc8cc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3/comments", "author": null, "committer": null, "parents": [{"sha": "b1dc55ad71a5b75889e1675b01bfa13d494797eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1dc55ad71a5b75889e1675b01bfa13d494797eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1dc55ad71a5b75889e1675b01bfa13d494797eb"}], "stats": {"total": 100, "additions": 95, "deletions": 5}, "files": [{"sha": "8f84b6a180c28751dbdd7aff599a5fa2360e0897", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "patch": "@@ -1,3 +1,14 @@\n+2014-04-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/aarch64/aarch64 (addti3, subti3): New expanders.\n+\t(add<GPI>3_compare0): Remove leading * from name.\n+\t(add<GPI>3_carryin): Likewise.\n+\t(sub<GPI>3_compare0): Likewise.\n+\t(sub<GPI>3_carryin): Likewise.\n+\t(<su_optab>mulditi3): New expander.\n+\t(multi3): New expander.\n+\t(madd<GPI>): Remove leading * from name.\n+\n 2014-04-22  Martin Jambor  <mjambor@suse.cz>\n \n \t* cgraphclones.c (cgraph_function_versioning): Copy"}, {"sha": "ee32b6cf4adfed090fc62ebeb21cc75b44e19c96", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 84, "deletions": 5, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=2195867f1d6cdc9e8d36aeeefc3c0f000bccbda3", "patch": "@@ -1106,7 +1106,26 @@\n    (set_attr \"simd\" \"*,*,*,yes\")]\n )\n \n-(define_insn \"*add<mode>3_compare0\"\n+(define_expand \"addti3\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(plus:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t (match_operand:TI 2 \"register_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx low = gen_reg_rtx (DImode);\n+  emit_insn (gen_adddi3_compare0 (low, gen_lowpart (DImode, operands[1]),\n+\t\t\t\t  gen_lowpart (DImode, operands[2])));\n+\n+  rtx high = gen_reg_rtx (DImode);\n+  emit_insn (gen_adddi3_carryin (high, gen_highpart (DImode, operands[1]),\n+\t\t\t\t gen_highpart (DImode, operands[2])));\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high);\n+  DONE;\n+})\n+\n+(define_insn \"add<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ\n \t (plus:GPI (match_operand:GPI 1 \"register_operand\" \"%r,r,r\")\n@@ -1390,7 +1409,7 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*add<mode>3_carryin\"\n+(define_insn \"add<mode>3_carryin\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n     (plus:GPI (geu:GPI (reg:CC CC_REGNUM) (const_int 0))\n@@ -1558,8 +1577,26 @@\n    (set_attr \"simd\" \"*,yes\")]\n )\n \n+(define_expand \"subti3\"\n+  [(set (match_operand:TI 0 \"register_operand\" \"\")\n+\t(minus:TI (match_operand:TI 1 \"register_operand\" \"\")\n+\t\t  (match_operand:TI 2 \"register_operand\" \"\")))]\n+  \"\"\n+{\n+  rtx low = gen_reg_rtx (DImode);\n+  emit_insn (gen_subdi3_compare0 (low, gen_lowpart (DImode, operands[1]),\n+\t\t\t\t  gen_lowpart (DImode, operands[2])));\n+\n+  rtx high = gen_reg_rtx (DImode);\n+  emit_insn (gen_subdi3_carryin (high, gen_highpart (DImode, operands[1]),\n+\t\t\t\t gen_highpart (DImode, operands[2])));\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high);\n+  DONE;\n+})\n \n-(define_insn \"*sub<mode>3_compare0\"\n+(define_insn \"sub<mode>3_compare0\"\n   [(set (reg:CC_NZ CC_REGNUM)\n \t(compare:CC_NZ (minus:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t\t  (match_operand:GPI 2 \"register_operand\" \"r\"))\n@@ -1706,7 +1743,7 @@\n   [(set_attr \"type\" \"alu_ext\")]\n )\n \n-(define_insn \"*sub<mode>3_carryin\"\n+(define_insn \"sub<mode>3_carryin\"\n   [(set\n     (match_operand:GPI 0 \"register_operand\" \"=r\")\n     (minus:GPI (minus:GPI\n@@ -1935,7 +1972,7 @@\n   [(set_attr \"type\" \"mul\")]\n )\n \n-(define_insn \"*madd<mode>\"\n+(define_insn \"madd<mode>\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(plus:GPI (mult:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n \t\t\t    (match_operand:GPI 2 \"register_operand\" \"r\"))\n@@ -2045,6 +2082,48 @@\n   [(set_attr \"type\" \"<su>mull\")]\n )\n \n+(define_expand \"<su_optab>mulditi3\"\n+  [(set (match_operand:TI 0 \"register_operand\")\n+\t(mult:TI (ANY_EXTEND:TI (match_operand:DI 1 \"register_operand\"))\n+\t\t (ANY_EXTEND:TI (match_operand:DI 2 \"register_operand\"))))]\n+  \"\"\n+{\n+  rtx low = gen_reg_rtx (DImode);\n+  emit_insn (gen_muldi3 (low, operands[1], operands[2]));\n+\n+  rtx high = gen_reg_rtx (DImode);\n+  emit_insn (gen_<su>muldi3_highpart (high, operands[1], operands[2]));\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), low);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), high);\n+  DONE;\n+})\n+\n+;; The default expansion of multi3 using umuldi3_highpart will perform\n+;; the additions in an order that fails to combine into two madd insns.\n+(define_expand \"multi3\"\n+  [(set (match_operand:TI 0 \"register_operand\")\n+\t(mult:TI (match_operand:TI 1 \"register_operand\")\n+\t\t (match_operand:TI 2 \"register_operand\")))]\n+  \"\"\n+{\n+  rtx l0 = gen_reg_rtx (DImode);\n+  rtx l1 = gen_lowpart (DImode, operands[1]);\n+  rtx l2 = gen_lowpart (DImode, operands[2]);\n+  rtx h0 = gen_reg_rtx (DImode);\n+  rtx h1 = gen_highpart (DImode, operands[1]);\n+  rtx h2 = gen_highpart (DImode, operands[2]);\n+\n+  emit_insn (gen_muldi3 (l0, l1, l2));\n+  emit_insn (gen_umuldi3_highpart (h0, l1, l2));\n+  emit_insn (gen_madddi (h0, h1, l2, h0));\n+  emit_insn (gen_madddi (h0, l1, h2, h0));\n+\n+  emit_move_insn (gen_lowpart (DImode, operands[0]), l0);\n+  emit_move_insn (gen_highpart (DImode, operands[0]), h0);\n+  DONE;\n+})\n+\n (define_insn \"<su>muldi3_highpart\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(truncate:DI"}]}