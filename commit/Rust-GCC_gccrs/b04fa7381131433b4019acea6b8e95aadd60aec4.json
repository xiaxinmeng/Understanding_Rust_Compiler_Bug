{"sha": "b04fa7381131433b4019acea6b8e95aadd60aec4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA0ZmE3MzgxMTMxNDMzYjQwMTlhY2VhNmI4ZTk1YWFkZDYwYWVjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-05-09T15:38:21Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-05-09T15:38:21Z"}, "message": "re PR libstdc++/48933 (Infinite recursion in tr1/cmath functions with complex parameters)\n\n2011-05-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR libstdc++/48933\n\t* include/c_global/cmath (acosh, asinh, atanh, cbrt, copysign,\n\terf, erfc, exp2, expm1, fdim, fma, fmax, hypot, ilogb, lgamma,\n\tllrint, llround, log1p, log2, logb, lrint, lround, nearbyint,\n\tnextafter, nexttoward, remainder, remquo, rint, round, scalbln,\n\tscalbn, tgamma, trunc): Use __enable_if on the return type.\n\t* include/tr1/cmath: Likewise.\n\t* testsuite/26_numerics/headers/cmath/overloads_c++0x_neg.cc: New.\n\t* testsuite/tr1/8_c_compatibility/cmath/overloads_neg.cc: Likewise.\n\nFrom-SVN: r173574", "tree": {"sha": "20e5b92b56d2f0953650bff5a899f3322af42ab5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20e5b92b56d2f0953650bff5a899f3322af42ab5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b04fa7381131433b4019acea6b8e95aadd60aec4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fa7381131433b4019acea6b8e95aadd60aec4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b04fa7381131433b4019acea6b8e95aadd60aec4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b04fa7381131433b4019acea6b8e95aadd60aec4/comments", "author": null, "committer": null, "parents": [{"sha": "a9e6994ab9f27c07d9345b6e5cbeb3ed2cf21625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9e6994ab9f27c07d9345b6e5cbeb3ed2cf21625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9e6994ab9f27c07d9345b6e5cbeb3ed2cf21625"}], "stats": {"total": 659, "additions": 389, "deletions": 270}, "files": [{"sha": "0ba711832dc7854a1ed6133af0189f0f16b55b4b", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b04fa7381131433b4019acea6b8e95aadd60aec4", "patch": "@@ -1,3 +1,15 @@\n+2011-05-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR libstdc++/48933\n+\t* include/c_global/cmath (acosh, asinh, atanh, cbrt, copysign,\n+\terf, erfc, exp2, expm1, fdim, fma, fmax, hypot, ilogb, lgamma,\n+\tllrint, llround, log1p, log2, logb, lrint, lround, nearbyint,\n+\tnextafter, nexttoward, remainder, remquo, rint, round, scalbln,\n+\tscalbn, tgamma, trunc): Use __enable_if on the return type.\n+\t* include/tr1/cmath: Likewise.\n+\t* testsuite/26_numerics/headers/cmath/overloads_c++0x_neg.cc: New.\n+\t* testsuite/tr1/8_c_compatibility/cmath/overloads_neg.cc: Likewise.\n+\n 2011-05-07  Fran\u00e7ois Dumont  <francois.cppdevs@free.fr>\n \n \t* include/debug/macro.h (_GLIBCXX_DEBUG_VERIFY_AT): New."}, {"sha": "e38ab9d6e212abad09b33fed172a84b582a386ed", "filename": "libstdc++-v3/include/c_global/cmath", "status": "modified", "additions": 123, "deletions": 136, "changes": 259, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcmath?ref=b04fa7381131433b4019acea6b8e95aadd60aec4", "patch": "@@ -1,7 +1,7 @@\n // -*- C++ -*- C forwarding header.\n \n // Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-// 2006, 2007, 2008, 2009, 2010\n+// 2006, 2007, 2008, 2009, 2010, 2011\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -1120,12 +1120,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_acoshl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     acosh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return acosh(__type(__x));\n-    }\n+    { return __builtin_acosh(__x); }\n \n   inline float\n   asinh(float __x)\n@@ -1136,12 +1134,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_asinhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     asinh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return asinh(__type(__x));\n-    }\n+    { return __builtin_asinh(__x); }\n \n   inline float\n   atanh(float __x)\n@@ -1152,12 +1148,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_atanhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     atanh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return atanh(__type(__x));\n-    }\n+    { return __builtin_atanh(__x); }\n \n   inline float\n   cbrt(float __x)\n@@ -1168,12 +1162,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_cbrtl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     cbrt(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return cbrt(__type(__x));\n-    }\n+    { return __builtin_cbrt(__x); }\n \n   inline float\n   copysign(float __x, float __y)\n@@ -1184,7 +1176,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_copysignl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     copysign(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1200,12 +1196,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     erf(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return erf(__type(__x));\n-    }\n+    { return __builtin_erf(__x); }\n \n   inline float\n   erfc(float __x)\n@@ -1216,12 +1210,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfcl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     erfc(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return erfc(__type(__x));\n-    }\n+    { return __builtin_erfc(__x); }\n \n   inline float\n   exp2(float __x)\n@@ -1232,12 +1224,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_exp2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     exp2(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return exp2(__type(__x));\n-    }\n+    { return __builtin_exp2(__x); }\n \n   inline float\n   expm1(float __x)\n@@ -1248,12 +1238,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_expm1l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     expm1(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return expm1(__type(__x));\n-    }\n+    { return __builtin_expm1(__x); }\n \n   inline float\n   fdim(float __x, float __y)\n@@ -1264,7 +1252,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fdiml(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fdim(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1280,7 +1272,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmal(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n+    inline\n+    typename __gnu_cxx::__promote_3<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value\n+\t\t\t\t    && __is_arithmetic<_Vp>::__value,\n+\t\t\t\t    _Tp>::__type, _Up, _Vp>::__type\n     fma(_Tp __x, _Up __y, _Vp __z)\n     {\n       typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;\n@@ -1296,7 +1293,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmaxl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fmax(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1312,7 +1313,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fminl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fmin(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1328,8 +1333,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_hypotl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n-    hypot(_Tp __x, _Up __y)\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n+     hypot(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n       return hypot(__type(__x), __type(__y));\n@@ -1344,12 +1353,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_ilogbl(__x); }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   int>::__type\n     ilogb(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return ilogb(__type(__x));\n-    }\n+    { return __builtin_ilogb(__x); }\n \n   inline float\n   lgamma(float __x)\n@@ -1360,12 +1367,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     lgamma(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lgamma(__type(__x));\n-    }\n+    { return __builtin_lgamma(__x); }\n \n   inline long long\n   llrint(float __x)\n@@ -1376,12 +1381,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llrintl(__x); }\n \n   template<typename _Tp>\n-    inline long long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long long>::__type\n     llrint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return llrint(__type(__x));\n-    }\n+    { return __builtin_llrint(__x); }\n \n   inline long long\n   llround(float __x)\n@@ -1392,12 +1395,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llroundl(__x); }\n \n   template<typename _Tp>\n-    inline long long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+                                           long long>::__type\n     llround(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return llround(__type(__x));\n-    }\n+    { return __builtin_llround(__x); }\n \n   inline float\n   log1p(float __x)\n@@ -1408,12 +1409,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log1pl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log1p(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return log1p(__type(__x));\n-    }\n+    { return __builtin_log1p(__x); }\n \n   // DR 568.\n   inline float\n@@ -1425,12 +1424,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log2(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return log2(__type(__x));\n-    }\n+    { return __builtin_log2(__x); }\n \n   inline float\n   logb(float __x)\n@@ -1441,12 +1438,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_logbl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     logb(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return logb(__type(__x));\n-    }\n+    { return __builtin_logb(__x); }\n \n   inline long\n   lrint(float __x)\n@@ -1457,12 +1452,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lrintl(__x); }\n \n   template<typename _Tp>\n-    inline long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long>::__type\n     lrint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lrint(__type(__x));\n-    }\n+    { return __builtin_lrint(__x); }\n \n   inline long\n   lround(float __x)\n@@ -1473,12 +1466,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lroundl(__x); }\n \n   template<typename _Tp>\n-    inline long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long>::__type\n     lround(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lround(__type(__x));\n-    }\n+    { return __builtin_lround(__x); }\n \n   inline float\n   nearbyint(float __x)\n@@ -1489,12 +1480,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nearbyintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     nearbyint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return nearbyint(__type(__x));\n-    }\n+    { return __builtin_nearbyint(__x); }\n \n   inline float\n   nextafter(float __x, float __y)\n@@ -1505,7 +1494,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nextafterl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     nextafter(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1521,12 +1514,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nexttowardl(__x, __y); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     nexttoward(_Tp __x, long double __y)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return nexttoward(__type(__x), __y);\n-    }\n+    { return __builtin_nexttoward(__x, __y); }\n \n   inline float\n   remainder(float __x, float __y)\n@@ -1537,7 +1528,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remainderl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     remainder(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1553,7 +1548,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remquol(__x, __y, __pquo); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     remquo(_Tp __x, _Up __y, int* __pquo)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -1569,12 +1568,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_rintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     rint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return rint(__type(__x));\n-    }\n+    { return __builtin_rint(__x); }\n \n   inline float\n   round(float __x)\n@@ -1585,12 +1582,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_roundl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     round(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return round(__type(__x));\n-    }\n+    { return __builtin_round(__x); }\n \n   inline float\n   scalbln(float __x, long __ex)\n@@ -1601,12 +1596,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalblnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     scalbln(_Tp __x, long __ex)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return scalbln(__type(__x), __ex);\n-    }\n+    { return __builtin_scalbln(__x, __ex); }\n  \n   inline float\n   scalbn(float __x, int __ex)\n@@ -1617,12 +1610,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalbnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     scalbn(_Tp __x, int __ex)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return scalbn(__type(__x), __ex);\n-    }\n+    { return __builtin_scalbn(__x, __ex); }\n \n   inline float\n   tgamma(float __x)\n@@ -1633,12 +1624,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_tgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     tgamma(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return tgamma(__type(__x));\n-    }\n+    { return __builtin_tgamma(__x); }\n  \n   inline float\n   trunc(float __x)\n@@ -1649,12 +1638,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_truncl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     trunc(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return trunc(__type(__x));\n-    }\n+    { return __builtin_trunc(__x); }\n \n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "9ada6379a772a9bb90bc5200c2a7bc3853b7c4e7", "filename": "libstdc++-v3/include/tr1/cmath", "status": "modified", "additions": 123, "deletions": 134, "changes": 257, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcmath?ref=b04fa7381131433b4019acea6b8e95aadd60aec4", "patch": "@@ -429,12 +429,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_acoshl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     acosh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return acosh(__type(__x));\n-    }\n+    { return __builtin_acosh(__x); }\n \n   using std::asin;\n \n@@ -447,12 +445,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_asinhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     asinh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return asinh(__type(__x));\n-    }\n+    { return __builtin_asinh(__x); }\n \n   using std::atan;\n   using std::atan2;\n@@ -466,12 +462,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_atanhl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     atanh(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return atanh(__type(__x));\n-    }\n+    { return __builtin_atanh(__x); }\n \n   inline float\n   cbrt(float __x)\n@@ -482,12 +476,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_cbrtl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     cbrt(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return cbrt(__type(__x));\n-    }\n+    { return __builtin_cbrt(__x); }\n \n   using std::ceil;\n \n@@ -500,7 +492,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_copysignl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     copysign(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -519,12 +515,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     erf(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return erf(__type(__x));\n-    }\n+    { return __builtin_erf(__x); }\n \n   inline float\n   erfc(float __x)\n@@ -535,12 +529,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_erfcl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     erfc(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return erfc(__type(__x));\n-    }\n+    { return __builtin_erfc(__x); }\n \n   using std::exp;\n \n@@ -553,12 +545,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_exp2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     exp2(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return exp2(__type(__x));\n-    }\n+    { return __builtin_exp2(__x); }\n \n   inline float\n   expm1(float __x)\n@@ -569,12 +559,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_expm1l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     expm1(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return expm1(__type(__x));\n-    }\n+    { return __builtin_expm1(__x); }\n \n   // Note: we deal with fabs in a special way, because an using std::fabs\n   // would bring in also the overloads for complex types, which in C++0x\n@@ -604,7 +592,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fdiml(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fdim(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -622,7 +614,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmal(__x, __y, __z); }\n \n   template<typename _Tp, typename _Up, typename _Vp>\n-    inline typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type\n+    inline\n+    typename __gnu_cxx::__promote_3<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value\n+\t\t\t\t    && __is_arithmetic<_Vp>::__value,\n+\t\t\t\t    _Tp>::__type, _Up, _Vp>::__type\n     fma(_Tp __x, _Up __y, _Vp __z)\n     {\n       typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;\n@@ -638,7 +635,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fmaxl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fmax(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -654,7 +655,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_fminl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     fmin(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -673,11 +678,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_hypotl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n-    hypot(_Tp __x, _Up __y)\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n+    hypot(_Tp __y, _Up __x)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n-      return hypot(__type(__x), __type(__y));\n+      return hypot(__type(__y), __type(__x));\n     }\n \n   inline int\n@@ -689,12 +698,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_ilogbl(__x); }\n \n   template<typename _Tp>\n-    inline int\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   int>::__type\n     ilogb(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return ilogb(__type(__x));\n-    }\n+    { return __builtin_ilogb(__x); }\n \n   using std::ldexp;\n \n@@ -707,12 +714,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     lgamma(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lgamma(__type(__x));\n-    }\n+    { return __builtin_lgamma(__x); }\n \n   inline long long\n   llrint(float __x)\n@@ -723,12 +728,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llrintl(__x); }\n \n   template<typename _Tp>\n-    inline long long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long long>::__type\n     llrint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return llrint(__type(__x));\n-    }\n+    { return __builtin_llrint(__x); }\n \n   inline long long\n   llround(float __x)\n@@ -739,12 +742,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_llroundl(__x); }\n \n   template<typename _Tp>\n-    inline long long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long long>::__type\n     llround(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return llround(__type(__x));\n-    }\n+    { return __builtin_llround(__x); }\n \n   using std::log;\n   using std::log10;\n@@ -758,12 +759,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log1pl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log1p(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return log1p(__type(__x));\n-    }\n+    { return __builtin_log1p(__x); }\n \n   // DR 568.\n   inline float\n@@ -775,12 +774,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_log2l(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     log2(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return log2(__type(__x));\n-    }\n+    { return __builtin_log2(__x); }\n \n   inline float\n   logb(float __x)\n@@ -791,11 +788,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_logbl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     logb(_Tp __x)\n     {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return logb(__type(__x));\n+      return __builtin_logb(__x);\n     }\n \n   inline long\n@@ -807,12 +804,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lrintl(__x); }\n \n   template<typename _Tp>\n-    inline long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long>::__type\n     lrint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lrint(__type(__x));\n-    }\n+    { return __builtin_lrint(__x); }\n \n   inline long\n   lround(float __x)\n@@ -823,12 +818,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_lroundl(__x); }\n \n   template<typename _Tp>\n-    inline long\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   long>::__type\n     lround(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return lround(__type(__x));\n-    }\n+    { return __builtin_lround(__x); }\n \n   inline float\n   nearbyint(float __x)\n@@ -839,12 +832,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nearbyintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     nearbyint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return nearbyint(__type(__x));\n-    }\n+    { return __builtin_nearbyint(__x); }\n \n   inline float\n   nextafter(float __x, float __y)\n@@ -855,7 +846,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nextafterl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     nextafter(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -871,12 +866,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_nexttowardl(__x, __y); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     nexttoward(_Tp __x, long double __y)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return nexttoward(__type(__x), __y);\n-    }\n+    { return __builtin_nexttoward(__x, __y); }\n \n   // DR 550. What should the return type of pow(float,int) be?\n   // NB: C++0x and TR1 != C++03.\n@@ -891,7 +884,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remainderl(__x, __y); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     remainder(_Tp __x, _Up __y)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -907,7 +904,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_remquol(__x, __y, __pquo); }\n \n   template<typename _Tp, typename _Up>\n-    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type\n+    inline\n+    typename __gnu_cxx::__promote_2<\n+    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value\n+\t\t\t\t    && __is_arithmetic<_Up>::__value,\n+\t\t\t\t    _Tp>::__type, _Up>::__type\n     remquo(_Tp __x, _Up __y, int* __pquo)\n     {\n       typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;\n@@ -923,12 +924,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_rintl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     rint(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return rint(__type(__x));\n-    }\n+    { return __builtin_rint(__x); }\n \n   inline float\n   round(float __x)\n@@ -939,12 +938,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_roundl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type\n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     round(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return round(__type(__x));\n-    }\n+    { return __builtin_round(__x); }\n \n   inline float\n   scalbln(float __x, long __ex)\n@@ -955,12 +952,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalblnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     scalbln(_Tp __x, long __ex)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return scalbln(__type(__x), __ex);\n-    }\n+    { return __builtin_scalbln(__x, __ex); }\n  \n   inline float\n   scalbn(float __x, int __ex)\n@@ -971,12 +966,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_scalbnl(__x, __ex); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     scalbn(_Tp __x, int __ex)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return scalbn(__type(__x), __ex);\n-    }\n+    { return __builtin_scalbn(__x, __ex); }\n \n   using std::sin;\n   using std::sinh;\n@@ -993,12 +986,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_tgammal(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     tgamma(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return tgamma(__type(__x));\n-    }\n+    { return __builtin_tgamma(__x); }\n  \n   inline float\n   trunc(float __x)\n@@ -1009,12 +1000,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   { return __builtin_truncl(__x); }\n \n   template<typename _Tp>\n-    inline typename __gnu_cxx::__promote<_Tp>::__type \n+    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, \n+\t\t\t\t\t   double>::__type\n     trunc(_Tp __x)\n-    {\n-      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;\n-      return trunc(__type(__x));\n-    }\n+    { return __builtin_trunc(__x); }\n \n #endif\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "2d8862ead15f59dc2cbcb2cda04f44d373ae42d8", "filename": "libstdc++-v3/testsuite/26_numerics/headers/cmath/overloads_c++0x_neg.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads_c%2B%2B0x_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads_c%2B%2B0x_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fheaders%2Fcmath%2Foverloads_c%2B%2B0x_neg.cc?ref=b04fa7381131433b4019acea6b8e95aadd60aec4", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <cmath>\n+\n+// libstdc++/48933\n+\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+\n+struct Foo { };\n+\n+template Foo std::atan2<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::acosh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::asinh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::atanh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::cbrt<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::copysign<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::erf<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::erfc<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::exp2<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::expm1<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::fdim<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::fma<Foo, Foo, Foo>(Foo(), Foo(), Foo()); // { dg-error \"not match\" }\n+template Foo std::fmax<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::fmin<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::hypot<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template int std::ilogb<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::lgamma<Foo>(Foo); // { dg-error \"not match\" }\n+template long long std::llrint<Foo>(Foo); // { dg-error \"not match\" }\n+template long long std::llround<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::log1p<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::log2<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::logb<Foo>(Foo); // { dg-error \"not match\" }\n+template long std::lrint<Foo>(Foo); // { dg-error \"not match\" }\n+template long std::lround<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::nearbyint<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::nextafter<Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::nexttoward<Foo>(Foo, long double); // { dg-error \"not match\" }\n+template Foo std::remainder<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::remquo<Foo>(Foo, Foo, int*); // { dg-error \"not match\" }\n+template Foo std::rint<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::round<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::scalbln<Foo>(Foo, long); // { dg-error \"not match\" }\n+template Foo std::scalbn<Foo>(Foo, int); // { dg-error \"not match\" }\n+template Foo std::tgamma<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::trunc<Foo>(Foo); // { dg-error \"not match\" }\n+\n+#endif"}, {"sha": "174a81dc5f94c7eea1c7161fb2be73ab744a0221", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cmath/overloads_neg.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b04fa7381131433b4019acea6b8e95aadd60aec4/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcmath%2Foverloads_neg.cc?ref=b04fa7381131433b4019acea6b8e95aadd60aec4", "patch": "@@ -0,0 +1,66 @@\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 8.16.4 Additional overloads\n+\n+#include <tr1/cmath>\n+\n+// libstdc++/48933\n+\n+#ifdef _GLIBCXX_USE_C99_MATH_TR1\n+\n+struct Foo { };\n+\n+template Foo std::tr1::atan2<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::acosh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::asinh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::atanh<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::cbrt<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::copysign<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::erf<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::erfc<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::exp2<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::expm1<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::fdim<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::fma<Foo, Foo, Foo>(Foo(), Foo(), Foo()); // { dg-error \"not match\" }\n+template Foo std::tr1::fmax<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::fmin<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::hypot<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template int std::tr1::ilogb<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::lgamma<Foo>(Foo); // { dg-error \"not match\" }\n+template long long std::tr1::llrint<Foo>(Foo); // { dg-error \"not match\" }\n+template long long std::tr1::llround<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::log1p<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::log2<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::logb<Foo>(Foo); // { dg-error \"not match\" }\n+template long std::tr1::lrint<Foo>(Foo); // { dg-error \"not match\" }\n+template long std::tr1::lround<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::nearbyint<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::nextafter<Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::nexttoward<Foo>(Foo, long double); // { dg-error \"not match\" }\n+template Foo std::tr1::remainder<Foo, Foo>(Foo, Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::remquo<Foo>(Foo, Foo, int*); // { dg-error \"not match\" }\n+template Foo std::tr1::rint<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::round<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::scalbln<Foo>(Foo, long); // { dg-error \"not match\" }\n+template Foo std::tr1::scalbn<Foo>(Foo, int); // { dg-error \"not match\" }\n+template Foo std::tr1::tgamma<Foo>(Foo); // { dg-error \"not match\" }\n+template Foo std::tr1::trunc<Foo>(Foo); // { dg-error \"not match\" }\n+\n+#endif"}]}