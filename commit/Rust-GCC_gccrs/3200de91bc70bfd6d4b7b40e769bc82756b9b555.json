{"sha": "3200de91bc70bfd6d4b7b40e769bc82756b9b555", "node_id": "C_kwDOANBUbNoAKDMyMDBkZTkxYmM3MGJmZDZkNGI3YjQwZTc2OWJjODI3NTZiOWI1NTU", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-15T22:55:09Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2021-11-16T03:31:57Z"}, "message": "tree-optimization: [PR103245] Improve detection of abs pattern using multiplication\n\nSo while working on PR 103228 (and a few others), I noticed the testcase for PR 94785\nwas failing. The problem is that the nop_convert moved from being inside the IOR to be\noutside of it. I also noticed the patch for PR 103228 was not needed to reproduce the\nissue either.\nThis patch combines the two patterns together for the abs match when using multiplication\nand adds a few places where nop_convert are optional.\n\nOK? Bootstrapped and tested on x86_64-linux-gnu with no regressions.\n\n\tPR tree-optimization/103245\n\ngcc/ChangeLog:\n\n\t* match.pd: Combine the abs pattern matching using multiplication.\n\tAdding optional nop_convert too.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/tree-ssa/pr103245-1.c: New test.", "tree": {"sha": "f7c0910ed3a84d8c23b1d58c02cc54c421ce8b65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f7c0910ed3a84d8c23b1d58c02cc54c421ce8b65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3200de91bc70bfd6d4b7b40e769bc82756b9b555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3200de91bc70bfd6d4b7b40e769bc82756b9b555", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3200de91bc70bfd6d4b7b40e769bc82756b9b555", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3200de91bc70bfd6d4b7b40e769bc82756b9b555/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "074ee8d9a91d7573c1e8774a22e4e08f923adb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/074ee8d9a91d7573c1e8774a22e4e08f923adb18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/074ee8d9a91d7573c1e8774a22e4e08f923adb18"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "758322da217f57470840c15933862264221fef2c", "filename": "gcc/match.pd", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3200de91bc70bfd6d4b7b40e769bc82756b9b555/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3200de91bc70bfd6d4b7b40e769bc82756b9b555/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=3200de91bc70bfd6d4b7b40e769bc82756b9b555", "patch": "@@ -1478,21 +1478,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (absu tree_expr_nonnegative_p@0)\n  (convert @0))\n \n-/* Simplify (-(X < 0) | 1) * X into abs (X).  */\n+/* Simplify (-(X < 0) | 1) * X into abs (X) or absu(X).  */\n (simplify\n- (mult:c (bit_ior (negate (convert? (lt @0 integer_zerop))) integer_onep) @0)\n- (if (INTEGRAL_TYPE_P (type) && !TYPE_UNSIGNED (type))\n-  (abs @0)))\n-\n-/* Similarly (-(X < 0) | 1U) * X into absu (X).  */\n-(simplify\n- (mult:c (bit_ior (nop_convert (negate (convert? (lt @0 integer_zerop))))\n-\t\t  integer_onep) (nop_convert @0))\n+ (mult:c (nop_convert1?\n+\t  (bit_ior (nop_convert2? (negate (convert? (lt @0 integer_zerop))))\n+\t\t    integer_onep))\n+\t (nop_convert3? @0))\n  (if (INTEGRAL_TYPE_P (type)\n-      && TYPE_UNSIGNED (type)\n       && INTEGRAL_TYPE_P (TREE_TYPE (@0))\n       && !TYPE_UNSIGNED (TREE_TYPE (@0)))\n-  (absu @0)))\n+  (if (TYPE_UNSIGNED (type))\n+   (absu @0)\n+   (abs @0)\n+  )\n+ )\n+)\n \n /* A few cases of fold-const.c negate_expr_p predicate.  */\n (match negate_expr_p"}, {"sha": "68ddeadb7996d5b31b08b676da858416c9e5bba0", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr103245-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3200de91bc70bfd6d4b7b40e769bc82756b9b555/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103245-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3200de91bc70bfd6d4b7b40e769bc82756b9b555/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103245-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr103245-1.c?ref=3200de91bc70bfd6d4b7b40e769bc82756b9b555", "patch": "@@ -0,0 +1,25 @@\n+/* PR tree-optimization/103245 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-times \" = ABSU_EXPR <v_\\[0-9]*\\\\\\(D\\\\\\)>;\" 1 \"optimized\" } } */\n+\n+unsigned\n+f1 (int v)\n+{\n+  unsigned int d_6;\n+  int b_5;\n+  int a_4;\n+  _Bool _1;\n+  unsigned int v1_2;\n+  unsigned int _7;\n+  int _9;\n+\n+  _1 = v < 0;\n+  a_4 = (int) _1;\n+  b_5 = -a_4;\n+  _9 = b_5 | 1;\n+  d_6 = (unsigned int) _9;\n+  v1_2 = (unsigned int) v;\n+  _7 = v1_2 * d_6;\n+  return _7;\n+}"}]}