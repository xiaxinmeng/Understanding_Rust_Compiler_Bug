{"sha": "6380a82ebec199fcd27f320c1f7115293781386b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4MGE4MmViZWMxOTlmY2QyN2YzMjBjMWY3MTE1MjkzNzgxMzg2Yg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-06-21T10:52:57Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-06-21T10:52:57Z"}, "message": "cse.c (canon_asm_operands): New function extracted from...\n\n\t* cse.c (canon_asm_operands): New function extracted from...\n\t(canonicalize_insn): ...here.  Call it to canonicalize an ASM_OPERANDS\n\teither standalone or member of a PARALLEL.\n\nFrom-SVN: r237642", "tree": {"sha": "0f7a959861ab11b1c518ef5f522bb31a65930958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0f7a959861ab11b1c518ef5f522bb31a65930958"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6380a82ebec199fcd27f320c1f7115293781386b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6380a82ebec199fcd27f320c1f7115293781386b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6380a82ebec199fcd27f320c1f7115293781386b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6380a82ebec199fcd27f320c1f7115293781386b/comments", "author": null, "committer": null, "parents": [{"sha": "e9305990d98af36affb5ee11d9060915f1f3890c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9305990d98af36affb5ee11d9060915f1f3890c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9305990d98af36affb5ee11d9060915f1f3890c"}], "stats": {"total": 36, "additions": 25, "deletions": 11}, "files": [{"sha": "954ca4be32125f4dbd5f9a62d6e3263569947a32", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6380a82ebec199fcd27f320c1f7115293781386b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6380a82ebec199fcd27f320c1f7115293781386b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6380a82ebec199fcd27f320c1f7115293781386b", "patch": "@@ -1,3 +1,9 @@\n+2016-06-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* cse.c (canon_asm_operands): New function extracted from...\n+\t(canonicalize_insn): ...here.  Call it to canonicalize an ASM_OPERANDS\n+\teither standalone or member of a PARALLEL.\n+\n 2016-06-21  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/30417"}, {"sha": "c14f29ddf730b881809858b44e8912548da8c84f", "filename": "gcc/cse.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6380a82ebec199fcd27f320c1f7115293781386b/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6380a82ebec199fcd27f320c1f7115293781386b/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=6380a82ebec199fcd27f320c1f7115293781386b", "patch": "@@ -4298,6 +4298,22 @@ find_sets_in_insn (rtx_insn *insn, struct set **psets)\n   return n_sets;\n }\n \f\n+/* Subroutine of canonicalize_insn.  X is an ASM_OPERANDS in INSN.  */\n+\n+static void\n+canon_asm_operands (rtx x, rtx_insn *insn)\n+{\n+  for (int i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n+    {\n+      rtx input = ASM_OPERANDS_INPUT (x, i);\n+      if (!(REG_P (input) && HARD_REGISTER_P (input)))\n+\t{\n+\t  input = canon_reg (input, insn);\n+\t  validate_change (insn, &ASM_OPERANDS_INPUT (x, i), input, 1);\n+\t}\n+    }\n+}\n+\n /* Where possible, substitute every register reference in the N_SETS\n    number of SETS in INSN with the canonical register.\n \n@@ -4361,17 +4377,7 @@ canonicalize_insn (rtx_insn *insn, struct set **psets, int n_sets)\n     /* Canonicalize a USE of a pseudo register or memory location.  */\n     canon_reg (x, insn);\n   else if (GET_CODE (x) == ASM_OPERANDS)\n-    {\n-      for (i = ASM_OPERANDS_INPUT_LENGTH (x) - 1; i >= 0; i--)\n-\t{\n-\t  rtx input = ASM_OPERANDS_INPUT (x, i);\n-\t  if (!(REG_P (input) && REGNO (input) < FIRST_PSEUDO_REGISTER))\n-\t    {\n-\t      input = canon_reg (input, insn);\n-\t      validate_change (insn, &ASM_OPERANDS_INPUT (x, i), input, 1);\n-\t    }\n-\t}\n-    }\n+    canon_asm_operands (x, insn);\n   else if (GET_CODE (x) == CALL)\n     {\n       canon_reg (x, insn);\n@@ -4400,6 +4406,8 @@ canonicalize_insn (rtx_insn *insn, struct set **psets, int n_sets)\n \t\t   && ! (REG_P (XEXP (y, 0))\n \t\t\t && REGNO (XEXP (y, 0)) < FIRST_PSEUDO_REGISTER))\n \t    canon_reg (y, insn);\n+\t  else if (GET_CODE (y) == ASM_OPERANDS)\n+\t    canon_asm_operands (y, insn);\n \t  else if (GET_CODE (y) == CALL)\n \t    {\n \t      canon_reg (y, insn);"}]}