{"sha": "f3f312b535f57b5773953746f6ad0d890ce09b88", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjNmMzEyYjUzNWY1N2I1NzczOTUzNzQ2ZjZhZDBkODkwY2UwOWI4OA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-18T20:53:36Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-11-18T20:53:36Z"}, "message": "analyzer: only use CWE-690 for unchecked return value [PR97893]\n\nCWE-690 is only for dereferencing an unchecked return value; for\nother kinds of NULL dereference, use the parent classification, CWE-476.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/97893\n\t* sm-malloc.cc (null_deref::emit): Use CWE-476 rather than\n\tCWE-690, as this isn't due to an unchecked return value.\n\t(null_arg::emit): Likewise.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/97893\n\t* gcc.dg/analyzer/malloc-1.c: Add CWE-690 and CWE-476 codes to\n\texpected output.", "tree": {"sha": "38172f9eeb84e79b451af0045f37e113f3b5b656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38172f9eeb84e79b451af0045f37e113f3b5b656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3f312b535f57b5773953746f6ad0d890ce09b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f312b535f57b5773953746f6ad0d890ce09b88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3f312b535f57b5773953746f6ad0d890ce09b88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3f312b535f57b5773953746f6ad0d890ce09b88/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08028093211c1b57f33e5669f816157934ab23dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08028093211c1b57f33e5669f816157934ab23dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08028093211c1b57f33e5669f816157934ab23dd"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "4c387381137b0f9e8aa04f88c8626be751bec768", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f312b535f57b5773953746f6ad0d890ce09b88/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f312b535f57b5773953746f6ad0d890ce09b88/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=f3f312b535f57b5773953746f6ad0d890ce09b88", "patch": "@@ -675,9 +675,9 @@ class null_deref : public malloc_diagnostic\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE\n   {\n-    /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n+    /* CWE-476: NULL Pointer Dereference.  */\n     diagnostic_metadata m;\n-    m.add_cwe (690);\n+    m.add_cwe (476);\n     return warning_meta (rich_loc, m,\n \t\t\t OPT_Wanalyzer_null_dereference,\n \t\t\t \"dereference of NULL %qE\", m_arg);\n@@ -723,10 +723,10 @@ class null_arg : public malloc_diagnostic\n \n   bool emit (rich_location *rich_loc) FINAL OVERRIDE\n   {\n-    /* CWE-690: Unchecked Return Value to NULL Pointer Dereference.  */\n+    /* CWE-476: NULL Pointer Dereference.  */\n     auto_diagnostic_group d;\n     diagnostic_metadata m;\n-    m.add_cwe (690);\n+    m.add_cwe (476);\n \n     bool warned;\n     if (zerop (m_arg))"}, {"sha": "c5bf1227c559c960b1e6cf09aa7a7149dfa1d2f7", "filename": "gcc/testsuite/gcc.dg/analyzer/malloc-1.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3f312b535f57b5773953746f6ad0d890ce09b88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3f312b535f57b5773953746f6ad0d890ce09b88/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fmalloc-1.c?ref=f3f312b535f57b5773953746f6ad0d890ce09b88", "patch": "@@ -30,14 +30,14 @@ void test_2a (void *ptr)\n int *test_3 (void)\n {\n   int *ptr = (int *)malloc (sizeof (int));\n-  *ptr = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr'\" } */\n+  *ptr = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr' \\\\\\[CWE-690\\\\\\]\" } */\n   return ptr;\n }\n \n int *test_3a (void)\n {\n   int *ptr = (int *)__builtin_malloc (sizeof (int));\n-  *ptr = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr'\" } */\n+  *ptr = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr' \\\\\\[CWE-690\\\\\\]\" } */\n   return ptr;\n }\n \n@@ -47,7 +47,7 @@ int *test_4 (void)\n   if (ptr)\n     *ptr = 42;\n   else\n-    *ptr = 43; /* { dg-warning \"dereference of NULL 'ptr'\" } */\n+    *ptr = 43; /* { dg-warning \"dereference of NULL 'ptr' \\\\\\[CWE-476\\\\\\]\" } */\n   return ptr;\n }\n \n@@ -260,14 +260,14 @@ void test_22 (void)\n int *test_23 (int n)\n {\n   int *ptr = (int *)calloc (n, sizeof (int));\n-  ptr[0] = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr'\" } */\n+  ptr[0] = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr' \\\\\\[CWE-690\\\\\\]\" } */\n   return ptr;\n }\n \n int *test_23a (int n)\n {\n   int *ptr = (int *)__builtin_calloc (n, sizeof (int));\n-  ptr[0] = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr'\" } */\n+  ptr[0] = 42; /* { dg-warning \"dereference of possibly-NULL 'ptr' \\\\\\[CWE-690\\\\\\]\" } */\n   return ptr;\n }\n \n@@ -302,7 +302,7 @@ struct coord {\n struct coord *test_27 (void)\n {\n   struct coord *p = (struct coord *) malloc (sizeof (struct coord)); /* { dg-message \"this call could return NULL\" } */\n-  p->x = 0.f;  /* { dg-warning \"dereference of possibly-NULL 'p'\" } */\n+  p->x = 0.f;  /* { dg-warning \"dereference of possibly-NULL 'p' \\\\\\[CWE-690\\\\\\]\" } */\n \n   /* Only the first such usage should be reported: */\n   p->y = 0.f;\n@@ -313,7 +313,7 @@ struct coord *test_27 (void)\n struct coord *test_28 (void)\n {\n   struct coord *p = NULL;\n-  p->x = 0.f; /* { dg-warning \"dereference of NULL 'p'\" } */\n+  p->x = 0.f; /* { dg-warning \"dereference of NULL 'p' \\\\\\[CWE-476\\\\\\]\" } */\n \n   /* Only the first such usage should be reported: */\n   p->y = 0.f;\n@@ -416,7 +416,7 @@ void test_36 (void)\n void *test_37a (void)\n {\n   void *ptr = malloc(4096); /* { dg-message \"this call could return NULL\" } */\n-  __builtin_memset(ptr, 0, 4096); /* { dg-warning \"use of possibly-NULL 'ptr' where non-null expected\" } */\n+  __builtin_memset(ptr, 0, 4096); /* { dg-warning \"use of possibly-NULL 'ptr' where non-null expected \\\\\\[CWE-690\\\\\\]\" } */\n   return ptr;\n }\n \n@@ -427,7 +427,7 @@ int test_37b (void)\n   if (p) {\n     __builtin_memset(p, 0, 4096); /* Not a bug: checked */\n   } else {\n-    __builtin_memset(q, 0, 4096); /* { dg-warning \"use of possibly-NULL 'q' where non-null expected\" } */\n+    __builtin_memset(q, 0, 4096); /* { dg-warning \"use of possibly-NULL 'q' where non-null expected \\\\\\[CWE-690\\\\\\]\" } */\n   }\n   free(p);\n   free(q);\n@@ -452,15 +452,15 @@ int *\n test_39 (int i)\n {\n   int *p = (int*)malloc(sizeof(int*)); /* { dg-message \"this call could return NULL\" } */\n-  *p = i; /* { dg-warning \"dereference of possibly-NULL 'p'\" } */\n+  *p = i; /* { dg-warning \"dereference of possibly-NULL 'p' \\\\\\[CWE-690\\\\\\]\" } */\n   return p;\n }\n \n int *\n test_40 (int i)\n {\n   int *p = (int*)malloc(sizeof(int*));\n-  i = *p; /* { dg-warning \"dereference of possibly-NULL 'p'\" } */\n+  i = *p; /* { dg-warning \"dereference of possibly-NULL 'p' \\\\\\[CWE-690\\\\\\]\" } */\n   /* TODO: (it's also uninitialized) */\n   return p;\n }\n@@ -476,8 +476,8 @@ test_41 (int flag)\n     buffer = NULL;\n   }\n \n-  buffer[0] = 'a'; /* { dg-warning \"dereference of possibly-NULL 'buffer'\" \"possibly-NULL\" } */\n-  /* { dg-warning \"dereference of NULL 'buffer'\" \"NULL\" { target *-*-* } .-1 } */\n+  buffer[0] = 'a'; /* { dg-warning \"dereference of possibly-NULL 'buffer' \\\\\\[CWE-690\\\\\\]\" \"possibly-NULL\" } */\n+  /* { dg-warning \"dereference of NULL 'buffer' \\\\\\[CWE-476\\\\\\]\" \"NULL\" { target *-*-* } .-1 } */\n \n   return buffer;\n }\n@@ -594,7 +594,7 @@ int test_47 (void)\n void test_48 (void)\n {\n   int *p = NULL; /* { dg-message \"'p' is NULL\" } */\n-  *p = 1; /* { dg-warning \"dereference of NULL 'p'\" } */\n+  *p = 1; /* { dg-warning \"dereference of NULL 'p' \\\\\\[CWE-476\\\\\\]\" } */\n }\n \n /* As test_48, but where the assignment of NULL is not at the start of a BB.  */\n@@ -606,6 +606,6 @@ int test_49 (int i)\n \n   x = i * 2;\n   p = NULL; /* { dg-message \"'p' is NULL\" } */\n-  *p = 1; /* { dg-warning \"dereference of NULL 'p'\" } */\n+  *p = 1; /* { dg-warning \"dereference of NULL 'p' \\\\\\[CWE-476\\\\\\]\" } */\n   return x;\n }"}]}