{"sha": "16507dea753527d073f1cfb7200c6612a7fa44aa", "node_id": "C_kwDOANBUbNoAKDE2NTA3ZGVhNzUzNTI3ZDA3M2YxY2ZiNzIwMGM2NjEyYTdmYTQ0YWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-24T14:57:03Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-11-29T10:17:22Z"}, "message": "Remove unreachable returns\n\nThis removes unreachable return statements as diagnosed by\nthe -Wunreachable-code patch.  Some cases are more obviously\nan improvement than others - in fact some may get you the idea\nto replace them with gcc_unreachable () instead, leading to\ncases of the 'Remove unreachable gcc_unreachable () at the end\nof functions' patch.\n\n2021-11-25  Richard Biener  <rguenther@suse.de>\n\n\t* vec.c (qsort_chk): Do not return the void return value\n\tfrom the noreturn qsort_chk_error.\n\t* ccmp.c (expand_ccmp_expr_1): Remove unreachable return.\n\t* df-scan.c (df_ref_equal_p): Likewise.\n\t* dwarf2out.c (is_base_type): Likewise.\n\t(add_const_value_attribute): Likewise.\n\t* fixed-value.c (fixed_arithmetic): Likewise.\n\t* gimple-fold.c (gimple_fold_builtin_fputs): Likewise.\n\t* gimple-ssa-strength-reduction.c (stmt_cost): Likewise.\n\t* graphite-isl-ast-to-gimple.c\n\t(gcc_expression_from_isl_expr_op): Likewise.\n\t(gcc_expression_from_isl_expression): Likewise.\n\t* ipa-fnsummary.c (will_be_nonconstant_expr_predicate):\n\tLikewise.\n\t* lto-streamer-in.c (lto_input_mode_table): Likewise.\n\ngcc/c-family/\n\t* c-opts.c (c_common_post_options): Remove unreachable return.\n\t* c-pragma.c (handle_pragma_target): Likewise.\n\t(handle_pragma_optimize): Likewise.\n\ngcc/c/\n\t* c-typeck.c (c_tree_equal): Remove unreachable return.\n\t* c-parser.c (get_matching_symbol): Likewise.\n\nlibgomp/\n\t* oacc-plugin.c (GOMP_PLUGIN_acc_default_dim): Remove unreachable\n\treturn.", "tree": {"sha": "f13e89465f67d80f55fb179f6b576feda3c95ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f13e89465f67d80f55fb179f6b576feda3c95ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/16507dea753527d073f1cfb7200c6612a7fa44aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16507dea753527d073f1cfb7200c6612a7fa44aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16507dea753527d073f1cfb7200c6612a7fa44aa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16507dea753527d073f1cfb7200c6612a7fa44aa/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11d0a2af33910c6d243e7265fb7ea04d2bc89b25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11d0a2af33910c6d243e7265fb7ea04d2bc89b25"}], "stats": {"total": 50, "additions": 10, "deletions": 40}, "files": [{"sha": "93845d57deef982376e56322afd0101b6f40adcb", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -1109,10 +1109,7 @@ c_common_post_options (const char **pfilename)\n \tout_stream = fopen (out_fname, \"w\");\n \n       if (out_stream == NULL)\n-\t{\n-\t  fatal_error (input_location, \"opening output file %s: %m\", out_fname);\n-\t  return false;\n-\t}\n+\tfatal_error (input_location, \"opening output file %s: %m\", out_fname);\n \n       init_pp_output (out_stream);\n     }"}, {"sha": "c4ed420582033a072dda0660315a7410427150a8", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -916,10 +916,7 @@ handle_pragma_target(cpp_reader *ARG_UNUSED(dummy))\n     }\n \n   if (token != CPP_STRING)\n-    {\n-      GCC_BAD_AT (loc, \"%<#pragma GCC option%> is not a string\");\n-      return;\n-    }\n+    GCC_BAD_AT (loc, \"%<#pragma GCC option%> is not a string\");\n \n   /* Strings are user options.  */\n   else\n@@ -991,10 +988,7 @@ handle_pragma_optimize (cpp_reader *ARG_UNUSED(dummy))\n     }\n \n   if (token != CPP_STRING && token != CPP_NUMBER)\n-    {\n-      GCC_BAD (\"%<#pragma GCC optimize%> is not a string or number\");\n-      return;\n-    }\n+    GCC_BAD (\"%<#pragma GCC optimize%> is not a string or number\");\n \n   /* Strings/numbers are user options.  */\n   else"}, {"sha": "af2bb5bc8cc7c6de7895023cc96c1bd0aa48f339", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -1132,7 +1132,6 @@ get_matching_symbol (enum cpp_ttype type)\n     {\n     default:\n       gcc_unreachable ();\n-      return \"\";\n     case CPP_CLOSE_PAREN:\n       return \"(\";\n     case CPP_CLOSE_BRACE:"}, {"sha": "7524304f2bd3be9de506f6d55d9073338f9f5f9c", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -15984,8 +15984,6 @@ c_tree_equal (tree t1, tree t2)\n     default:\n       gcc_unreachable ();\n     }\n-  /* We can get here with --disable-checking.  */\n-  return false;\n }\n \n /* Returns true when the function declaration FNDECL is implicit,"}, {"sha": "616fe035e79c3d7d7ddb768b5b33ed1234fc5c49", "filename": "gcc/ccmp.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fccmp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fccmp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fccmp.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -273,8 +273,6 @@ expand_ccmp_expr_1 (gimple *g, rtx_insn **prep_seq, rtx_insn **gen_seq)\n \treturn NULL_RTX;\n       return expand_ccmp_next (op1, code, tmp, prep_seq, gen_seq);\n     }\n-\n-  return NULL_RTX;\n }\n \n /* Main entry to expand conditional compare statement G."}, {"sha": "1baa6e7350baa9f1965ac33850b9425e76e1bc87", "filename": "gcc/df-scan.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fdf-scan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fdf-scan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf-scan.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -2059,7 +2059,6 @@ df_ref_equal_p (df_ref ref1, df_ref ref2)\n     default:\n       gcc_unreachable ();\n     }\n-  return false;\n }\n \n "}, {"sha": "1677923a439663551e1579e4d38be12be408e143", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -13359,8 +13359,6 @@ is_base_type (tree type)\n \treturn 0;\n       gcc_unreachable ();\n     }\n-\n-  return 0;\n }\n \n /* Given a pointer to a tree node, assumed to be some kind of a ..._TYPE\n@@ -20240,7 +20238,6 @@ add_const_value_attribute (dw_die_ref die, machine_mode mode, rtx rtl)\n       /* No other kinds of rtx should be possible here.  */\n       gcc_unreachable ();\n     }\n-  return false;\n }\n \n /* Determine whether the evaluation of EXPR references any variables"}, {"sha": "fdfb700ae66bea64693a47ef0d031901f3710ed6", "filename": "gcc/fixed-value.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Ffixed-value.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Ffixed-value.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixed-value.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -756,7 +756,6 @@ fixed_arithmetic (FIXED_VALUE_TYPE *f, int icode, const FIXED_VALUE_TYPE *op0,\n     default:\n       gcc_unreachable ();\n     }\n-  return false;\n }\n \n /* Compare fixed-point values by tree_code."}, {"sha": "1f54219fe43d10aaaf9d7e753c2ede0d083142f6", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -2993,7 +2993,6 @@ gimple_fold_builtin_fputs (gimple_stmt_iterator *gsi,\n     default:\n       gcc_unreachable ();\n     }\n-  return false;\n }\n \n /* Fold a call to the __mem{cpy,pcpy,move,set}_chk builtin."}, {"sha": "8943c57b7a9ed747c392993eb6d62c7a67c8fdd9", "filename": "gcc/gimple-ssa-strength-reduction.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgimple-ssa-strength-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgimple-ssa-strength-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-strength-reduction.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -763,7 +763,6 @@ stmt_cost (gimple *gs, bool speed)\n     }\n   \n   gcc_unreachable ();\n-  return 0;\n }\n \n /* Look up the defining statement for BASE_IN and return a pointer"}, {"sha": "8c5cd33f451c1ab4a5e57db23e5a1bd69e72ccb4", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -526,8 +526,6 @@ gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n     default:\n       gcc_unreachable ();\n     }\n-\n-  return NULL_TREE;\n }\n \n /* Converts an isl AST expression E back to a GCC expression tree of\n@@ -557,8 +555,6 @@ gcc_expression_from_isl_expression (tree type, __isl_take isl_ast_expr *expr,\n     default:\n       gcc_unreachable ();\n     }\n-\n-  return NULL_TREE;\n }\n \n /* Creates a new LOOP corresponding to isl_ast_node_for.  Inserts an"}, {"sha": "6c1cdf17e47b7c75da47a7138e6ef463beae5771", "filename": "gcc/ipa-fnsummary.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fipa-fnsummary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fipa-fnsummary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-fnsummary.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -2042,7 +2042,6 @@ will_be_nonconstant_expr_predicate (ipa_func_body_info *fbi,\n       debug_tree (expr);\n       gcc_unreachable ();\n     }\n-  return false;\n }\n \n "}, {"sha": "536de3a71b710a56e97766f356ce0696991eb9b8", "filename": "gcc/lto-streamer-in.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Flto-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Flto-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-streamer-in.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -1963,11 +1963,8 @@ lto_input_mode_table (struct lto_file_decl_data *file_data)\n   const char *data\n     = lto_get_summary_section_data (file_data, LTO_section_mode_table, &len);\n   if (! data)\n-    {\n-      internal_error (\"cannot read LTO mode table from %s\",\n-\t\t      file_data->file_name);\n-      return;\n-    }\n+    internal_error (\"cannot read LTO mode table from %s\",\n+\t\t    file_data->file_name);\n \n   unsigned char *table = ggc_cleared_vec_alloc<unsigned char> (1 << 8);\n   file_data->mode_table = table;"}, {"sha": "bdbd1ad6e044437c15413591a48969dd0f02e185", "filename": "gcc/vec.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fvec.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/gcc%2Fvec.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvec.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -229,23 +229,23 @@ qsort_chk (void *base, size_t n, size_t size, sort_r_cmp_fn *cmp, void *data)\n \tif (CMP (i1, i2))\n \t  break;\n \telse if (CMP (i2, i1))\n-\t  return ERR2 (i1, i2);\n+\t  ERR2 (i1, i2);\n       size_t lim1 = LIM (i2 - i1), lim2 = LIM (n - i2);\n       /* Verify that other pairs within current span compare equal.  */\n       for (i = i1 + 1; i + 1 < i2; i++)\n \tfor (j = i + 1; j < i1 + lim1; j++)\n \t  if (CMP (i, j))\n-\t    return ERR3 (i, i1, j);\n+\t    ERR3 (i, i1, j);\n \t  else if (CMP (j, i))\n-\t    return ERR2 (i, j);\n+\t    ERR2 (i, j);\n       /* Verify that elements within this span compare less than\n          elements beyond the span.  */\n       for (i = i1; i < i2; i++)\n \tfor (j = i2; j < i2 + lim2; j++)\n \t  if (CMP (i, j) >= 0)\n-\t    return ERR3 (i, i1, j);\n+\t    ERR3 (i, i1, j);\n \t  else if (CMP (j, i) <= 0)\n-\t    return ERR2 (i, j);\n+\t    ERR2 (i, j);\n     }\n #undef ERR3\n #undef ERR2"}, {"sha": "98166fe5cd1413429aaa55acaa5b3fc3a2ec1697", "filename": "libgomp/oacc-plugin.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/16507dea753527d073f1cfb7200c6612a7fa44aa/libgomp%2Foacc-plugin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/16507dea753527d073f1cfb7200c6612a7fa44aa/libgomp%2Foacc-plugin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-plugin.c?ref=16507dea753527d073f1cfb7200c6612a7fa44aa", "patch": "@@ -62,7 +62,6 @@ GOMP_PLUGIN_acc_default_dim (unsigned int i)\n   if (i >= GOMP_DIM_MAX)\n     {\n       gomp_fatal (\"invalid dimension argument: %d\", i);\n-      return -1;\n     }\n   return goacc_default_dims[i];\n }"}]}