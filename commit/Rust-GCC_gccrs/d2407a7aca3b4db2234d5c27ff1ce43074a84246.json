{"sha": "d2407a7aca3b4db2234d5c27ff1ce43074a84246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDI0MDdhN2FjYTNiNGRiMjIzNGQ1YzI3ZmYxY2U0MzA3NGE4NDI0Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-06T13:52:59Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-06T13:52:59Z"}, "message": "i386.md (SWI48, SDWI, DWI): New mode iterators.\n\n\t* config/i386/i386.md (SWI48, SDWI, DWI): New mode iterators.\n\t(DWIH, g, di, doubleint_general_operand): New mode attributes.\n\t(general_operand): Handle TI mode.\n\t(add<mode>3): Macroize expander from add{qi,hi,si,di,ti}3 patterns\n\tusing SDWI mode iterator.\n\t(*add<mode>3_doubleword): New insn_and_split pattern.  Macroize\n\tpattern from *add{di,ti}3_1 patterns and corresponding splitters\n\tusing SDWI mode iterator.\n\t(add<mode>3_carry): Macroize insn from add{qi,hi,si,di}3_carry\n\tpatterns using SWI mode iterator.\n\t(*add<mode>3_cc): Macroize insn from add{si,di}3_cc patterns\n\tusing SWI48 mode iterator.\n\t(*add<mode>_1): Ditto from add{si,di}_1 patterns.\n\t(*add<mode>_2): Ditto from add{si,di}_2 patterns.\n\t(*add<mode>_3): Ditto from add{si,di}_3 patterns.\n\t(*add<mode>_5): Ditto from add{si,di}_5 patterns.\n\t(sub<mode>3): Macroize expander from sub{qi,hi,si,di,ti}3 patterns\n\tusing SDWI mode iterator.\n\t(*sub<mode>3_doubleword): New insn_and_split pattern.  Macroize\n\tpattern from *sub{di,ti}3_1 patterns and corresponding splitters\n\tusing SDWI mode iterator.\n\t(sub<mode>3_carry): Macroize insn from sub{qi,hi,si,di}3_carry\n\tpatterns using SWI mode iterator.\n\t(*sub<mode>_1): Ditto from from sub{qi,hi,si,di}_1 patterns.\n\t(*sub<mode>_2): Ditto from sub{qi,hi,si,di}_2 patterns.\n\t(*sub<mode>_3): Ditto from sub{qi,hi,si,di}_3 patterns.\n\t(<plusminus_insn>xf3): Macroize expander from addxf3 and subxf3\n\tpatterns using plusminus code iterator.\n\t(<plusminus_insn><mode>3): Macroize expander from add<mode>3 and\n\tsub<mode>3 patterns using plusminus code iterator.\n\t* config/i386/i386.c (override_options): Update call to\n\tgen_subdi_carry_rex64 for renamed function.\n\t(ix86_expand_int_addcc): Update calls to gen_subdi3_carry_rex64\n\tand gen_adddi3_carry_rex64 for renamed functions.  Use indirect\n\tcalls to instruction expanders.\n\nFrom-SVN: r152495", "tree": {"sha": "9e16b9b3486a9d7baa3b802c8c7dc4d9651e0e41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9e16b9b3486a9d7baa3b802c8c7dc4d9651e0e41"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2407a7aca3b4db2234d5c27ff1ce43074a84246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2407a7aca3b4db2234d5c27ff1ce43074a84246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2407a7aca3b4db2234d5c27ff1ce43074a84246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2407a7aca3b4db2234d5c27ff1ce43074a84246/comments", "author": null, "committer": null, "parents": [{"sha": "7b7c01e739fb93ab56e9514bfc49fea7e7d63cde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b7c01e739fb93ab56e9514bfc49fea7e7d63cde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b7c01e739fb93ab56e9514bfc49fea7e7d63cde"}], "stats": {"total": 2513, "additions": 1033, "deletions": 1480}, "files": [{"sha": "f9c63e5f1e81e8bec73e1d17062496ee46e7fc55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2407a7aca3b4db2234d5c27ff1ce43074a84246", "patch": "@@ -1,3 +1,41 @@\n+2009-10-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (SWI48, SDWI, DWI): New mode iterators.\n+\t(DWIH, g, di, doubleint_general_operand): New mode attributes.\n+\t(general_operand): Handle TI mode.\n+\t(add<mode>3): Macroize expander from add{qi,hi,si,di,ti}3 patterns\n+\tusing SDWI mode iterator.\n+\t(*add<mode>3_doubleword): New insn_and_split pattern.  Macroize\n+\tpattern from *add{di,ti}3_1 patterns and corresponding splitters\n+\tusing SDWI mode iterator.\n+\t(add<mode>3_carry): Macroize insn from add{qi,hi,si,di}3_carry\n+\tpatterns using SWI mode iterator.\n+\t(*add<mode>3_cc): Macroize insn from add{si,di}3_cc patterns\n+\tusing SWI48 mode iterator.\n+\t(*add<mode>_1): Ditto from add{si,di}_1 patterns.\n+\t(*add<mode>_2): Ditto from add{si,di}_2 patterns.\n+\t(*add<mode>_3): Ditto from add{si,di}_3 patterns.\n+\t(*add<mode>_5): Ditto from add{si,di}_5 patterns.\n+\t(sub<mode>3): Macroize expander from sub{qi,hi,si,di,ti}3 patterns\n+\tusing SDWI mode iterator.\n+\t(*sub<mode>3_doubleword): New insn_and_split pattern.  Macroize\n+\tpattern from *sub{di,ti}3_1 patterns and corresponding splitters\n+\tusing SDWI mode iterator.\n+\t(sub<mode>3_carry): Macroize insn from sub{qi,hi,si,di}3_carry\n+\tpatterns using SWI mode iterator.\n+\t(*sub<mode>_1): Ditto from from sub{qi,hi,si,di}_1 patterns.\n+\t(*sub<mode>_2): Ditto from sub{qi,hi,si,di}_2 patterns.\n+\t(*sub<mode>_3): Ditto from sub{qi,hi,si,di}_3 patterns.\n+\t(<plusminus_insn>xf3): Macroize expander from addxf3 and subxf3\n+\tpatterns using plusminus code iterator.\n+\t(<plusminus_insn><mode>3): Macroize expander from add<mode>3 and\n+\tsub<mode>3 patterns using plusminus code iterator.\n+\t* config/i386/i386.c (override_options): Update call to\n+\tgen_subdi_carry_rex64 for renamed function.\n+\t(ix86_expand_int_addcc): Update calls to gen_subdi3_carry_rex64\n+\tand gen_adddi3_carry_rex64 for renamed functions.  Use indirect\n+\tcalls to instruction expanders.\n+\n 2009-10-06  Martin Jambor  <mjambor@suse.cz>\n \n \tPR bootstrap/41395\n@@ -215,8 +253,8 @@\n \n 2009-10-05  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n-        * config/arm/arm.c (arm_override_options): Really initialize\n-        flag_dwarf2_cfi_asm to 0.\n+\t* config/arm/arm.c (arm_override_options): Really initialize\n+\tflag_dwarf2_cfi_asm to 0.\n \n 2009-10-05  Doug Kwan  <dougkwan@google.com>\n "}, {"sha": "9da427faaa76fbd5c552aab5b18178ee078e36d3", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=d2407a7aca3b4db2234d5c27ff1ce43074a84246", "patch": "@@ -3394,7 +3394,7 @@ override_options (bool main_args_p)\n       ix86_gen_pop1 = gen_popdi1;\n       ix86_gen_add3 = gen_adddi3;\n       ix86_gen_sub3 = gen_subdi3;\n-      ix86_gen_sub3_carry = gen_subdi3_carry_rex64;\n+      ix86_gen_sub3_carry = gen_subdi3_carry;\n       ix86_gen_one_cmpl2 = gen_one_cmpldi2;\n       ix86_gen_monitor = gen_sse3_monitor64;\n       ix86_gen_andsp = gen_anddi3;\n@@ -16171,6 +16171,7 @@ int\n ix86_expand_int_addcc (rtx operands[])\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n+  rtx (*insn)(rtx, rtx, rtx, rtx);\n   rtx compare_op;\n   rtx val = const0_rtx;\n   bool fpcmp = false;\n@@ -16211,16 +16212,16 @@ ix86_expand_int_addcc (rtx operands[])\n       switch (GET_MODE (operands[0]))\n \t{\n \t  case QImode:\n-            emit_insn (gen_subqi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_subqi3_carry;\n \t    break;\n \t  case HImode:\n-            emit_insn (gen_subhi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_subhi3_carry;\n \t    break;\n \t  case SImode:\n-            emit_insn (gen_subsi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_subsi3_carry;\n \t    break;\n \t  case DImode:\n-            emit_insn (gen_subdi3_carry_rex64 (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_subdi3_carry;\n \t    break;\n \t  default:\n \t    gcc_unreachable ();\n@@ -16231,21 +16232,23 @@ ix86_expand_int_addcc (rtx operands[])\n       switch (GET_MODE (operands[0]))\n \t{\n \t  case QImode:\n-            emit_insn (gen_addqi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_addqi3_carry;\n \t    break;\n \t  case HImode:\n-            emit_insn (gen_addhi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_addhi3_carry;\n \t    break;\n \t  case SImode:\n-            emit_insn (gen_addsi3_carry (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_addsi3_carry;\n \t    break;\n \t  case DImode:\n-            emit_insn (gen_adddi3_carry_rex64 (operands[0], operands[2], val, compare_op));\n+\t    insn = gen_adddi3_carry;\n \t    break;\n \t  default:\n \t    gcc_unreachable ();\n \t}\n     }\n+  emit_insn (insn (operands[0], operands[2], val, compare_op));\n+\n   return 1; /* DONE */\n }\n "}, {"sha": "10c2dc6fd73b1d33b61ba4dbf5248285c5b8023d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 981, "deletions": 1469, "changes": 2450, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2407a7aca3b4db2234d5c27ff1ce43074a84246/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=d2407a7aca3b4db2234d5c27ff1ce43074a84246"}]}