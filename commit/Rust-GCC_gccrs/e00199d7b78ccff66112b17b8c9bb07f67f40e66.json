{"sha": "e00199d7b78ccff66112b17b8c9bb07f67f40e66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTAwMTk5ZDdiNzhjY2ZmNjYxMTJiMTdiOGM5YmIwN2Y2N2Y0MGU2Ng==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-12-13T08:00:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-12-13T08:00:42Z"}, "message": "re PR target/88461 (AVX512: gcc should keep value in kN registers if possible)\n\n\tPR target/88461\n\t* config/i386/sse.md (VI1248_AVX512VLBW, AVX512ZEXTMASK): New\n\tmode iterators.\n\t(<avx512>_testm<mode>3<mask_scalar_merge_name>,\n\t<avx512>_testnm<mode>3<mask_scalar_merge_name>): Merge patterns\n\twith VI12_AVX512VL and VI48_AVX512VL iterators into ones with\n\tVI1248_AVX512VLBW iterator.\n\t(*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext,\n\t*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext_mask,\n\t*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext,\n\t*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext_mask): New\n\tdefine_insns.\n\n\t* gcc.target/i386/pr88461.c: New test.\n\nFrom-SVN: r267077", "tree": {"sha": "930d6ce062ca71600002c77a0c82070859acb1e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/930d6ce062ca71600002c77a0c82070859acb1e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e00199d7b78ccff66112b17b8c9bb07f67f40e66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00199d7b78ccff66112b17b8c9bb07f67f40e66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e00199d7b78ccff66112b17b8c9bb07f67f40e66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e00199d7b78ccff66112b17b8c9bb07f67f40e66/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "87d570a02295ac9391a17d6bb4e4a1d226a0af1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d570a02295ac9391a17d6bb4e4a1d226a0af1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d570a02295ac9391a17d6bb4e4a1d226a0af1b"}], "stats": {"total": 131, "additions": 107, "deletions": 24}, "files": [{"sha": "55c291b8e592df0c3ad594e97e353a7901749a75", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e00199d7b78ccff66112b17b8c9bb07f67f40e66", "patch": "@@ -1,5 +1,18 @@\n 2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/88461\n+\t* config/i386/sse.md (VI1248_AVX512VLBW, AVX512ZEXTMASK): New\n+\tmode iterators.\n+\t(<avx512>_testm<mode>3<mask_scalar_merge_name>,\n+\t<avx512>_testnm<mode>3<mask_scalar_merge_name>): Merge patterns\n+\twith VI12_AVX512VL and VI48_AVX512VL iterators into ones with\n+\tVI1248_AVX512VLBW iterator.\n+\t(*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext,\n+\t*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext_mask,\n+\t*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext,\n+\t*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext_mask): New\n+\tdefine_insns.\n+\n \tPR target/88461\n \t* config/i386/i386.md (*zero_extendsidi2, zero_extend<mode>di2,\n \t*zero_extend<mode>si2, *zero_extendqihi2): Add =*k, *km alternatives."}, {"sha": "be65f902d9ebe48d79aac7c2519b758232c65ebb", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 73, "deletions": 24, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=e00199d7b78ccff66112b17b8c9bb07f67f40e66", "patch": "@@ -12322,22 +12322,22 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_testm<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n-\t(unspec:<avx512fmaskmode>\n-\t [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n-\t UNSPEC_TESTM))]\n-  \"TARGET_AVX512BW\"\n-  \"vptestm<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n-  [(set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\"  \"<sseinsnmode>\")])\n+(define_mode_iterator VI1248_AVX512VLBW\n+  [(V64QI \"TARGET_AVX512BW\") (V32QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V16QI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V32HI \"TARGET_AVX512BW\") (V16HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   (V8HI \"TARGET_AVX512VL && TARGET_AVX512BW\")\n+   V16SI (V8SI \"TARGET_AVX512VL\") (V4SI \"TARGET_AVX512VL\")\n+   V8DI (V4DI \"TARGET_AVX512VL\") (V2DI \"TARGET_AVX512VL\")])\n+\n+(define_mode_iterator AVX512ZEXTMASK\n+  [(DI \"TARGET_AVX512BW\") (SI \"TARGET_AVX512BW\") HI])\n \n (define_insn \"<avx512>_testm<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n-\t [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n+\t [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n \t UNSPEC_TESTM))]\n   \"TARGET_AVX512F\"\n   \"vptestm<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n@@ -12347,24 +12347,73 @@\n (define_insn \"<avx512>_testnm<mode>3<mask_scalar_merge_name>\"\n   [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n \t(unspec:<avx512fmaskmode>\n-\t [(match_operand:VI12_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI12_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n+\t [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t  (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n \t UNSPEC_TESTNM))]\n-  \"TARGET_AVX512BW\"\n+  \"TARGET_AVX512F\"\n   \"vptestnm<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n   [(set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\"  \"<sseinsnmode>\")])\n \n-(define_insn \"<avx512>_testnm<mode>3<mask_scalar_merge_name>\"\n-  [(set (match_operand:<avx512fmaskmode> 0 \"register_operand\" \"=Yk\")\n-\t(unspec:<avx512fmaskmode>\n-\t [(match_operand:VI48_AVX512VL 1 \"register_operand\" \"v\")\n-\t  (match_operand:VI48_AVX512VL 2 \"nonimmediate_operand\" \"vm\")]\n-\t UNSPEC_TESTNM))]\n-  \"TARGET_AVX512F\"\n-  \"vptestnm<ssemodesuffix>\\t{%2, %1, %0<mask_scalar_merge_operand3>|%0<mask_scalar_merge_operand3>, %1, %2}\"\n+(define_insn \"*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext\"\n+  [(set (match_operand:AVX512ZEXTMASK 0 \"register_operand\" \"=Yk\")\n+\t(zero_extend:AVX512ZEXTMASK\n+\t  (unspec:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t   [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t    (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n+\t   UNSPEC_TESTM)))]\n+  \"TARGET_AVX512BW\n+   && (<AVX512ZEXTMASK:MODE_SIZE>\n+       > GET_MODE_SIZE (<VI1248_AVX512VLBW:avx512fmaskmode>mode))\"\n+  \"vptestm<VI1248_AVX512VLBW:ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n   [(set_attr \"prefix\" \"evex\")\n-   (set_attr \"mode\"  \"<sseinsnmode>\")])\n+   (set_attr \"mode\"  \"<VI1248_AVX512VLBW:sseinsnmode>\")])\n+\n+(define_insn \"*<avx512>_testm<VI1248_AVX512VLBW:mode>3_zext_mask\"\n+  [(set (match_operand:AVX512ZEXTMASK 0 \"register_operand\" \"=Yk\")\n+\t(zero_extend:AVX512ZEXTMASK\n+\t  (and:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t    (unspec:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t     [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t      (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n+\t     UNSPEC_TESTM)\n+\t    (match_operand:<VI1248_AVX512VLBW:avx512fmaskmode> 3 \"register_operand\" \"Yk\"))))]\n+  \"TARGET_AVX512BW\n+   && (<AVX512ZEXTMASK:MODE_SIZE>\n+       > GET_MODE_SIZE (<VI1248_AVX512VLBW:avx512fmaskmode>mode))\"\n+  \"vptestm<VI1248_AVX512VLBW:ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<VI1248_AVX512VLBW:sseinsnmode>\")])\n+\n+(define_insn \"*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext\"\n+  [(set (match_operand:AVX512ZEXTMASK 0 \"register_operand\" \"=Yk\")\n+\t(zero_extend:AVX512ZEXTMASK\n+\t  (unspec:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t   [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t    (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n+\t   UNSPEC_TESTNM)))]\n+  \"TARGET_AVX512BW\n+   && (<AVX512ZEXTMASK:MODE_SIZE>\n+       > GET_MODE_SIZE (<VI1248_AVX512VLBW:avx512fmaskmode>mode))\"\n+  \"vptestnm<VI1248_AVX512VLBW:ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<VI1248_AVX512VLBW:sseinsnmode>\")])\n+\n+(define_insn \"*<avx512>_testnm<VI1248_AVX512VLBW:mode>3_zext_mask\"\n+  [(set (match_operand:AVX512ZEXTMASK 0 \"register_operand\" \"=Yk\")\n+\t(zero_extend:AVX512ZEXTMASK\n+\t  (and:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t    (unspec:<VI1248_AVX512VLBW:avx512fmaskmode>\n+\t     [(match_operand:VI1248_AVX512VLBW 1 \"register_operand\" \"v\")\n+\t      (match_operand:VI1248_AVX512VLBW 2 \"nonimmediate_operand\" \"vm\")]\n+\t     UNSPEC_TESTNM)\n+\t    (match_operand:<VI1248_AVX512VLBW:avx512fmaskmode> 3 \"register_operand\" \"Yk\"))))]\n+  \"TARGET_AVX512BW\n+   && (<AVX512ZEXTMASK:MODE_SIZE>\n+       > GET_MODE_SIZE (<VI1248_AVX512VLBW:avx512fmaskmode>mode))\"\n+  \"vptestnm<VI1248_AVX512VLBW:ssemodesuffix>\\t{%2, %1, %0%{%3%}|%0%{%3%}, %1, %2}\"\n+  [(set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\"  \"<VI1248_AVX512VLBW:sseinsnmode>\")])\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;"}, {"sha": "295b160ee54d44a3a3c86307e8bec35bf61ebe59", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e00199d7b78ccff66112b17b8c9bb07f67f40e66", "patch": "@@ -1,3 +1,8 @@\n+2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/88461\n+\t* gcc.target/i386/pr88461.c: New test.\n+\t\n 2018-12-12  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* g++.dg/other/static5.C: New."}, {"sha": "68349c197108cda164540d79146496915ef81d33", "filename": "gcc/testsuite/gcc.target/i386/pr88461.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88461.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e00199d7b78ccff66112b17b8c9bb07f67f40e66/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88461.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr88461.c?ref=e00199d7b78ccff66112b17b8c9bb07f67f40e66", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/88461 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512bw\" } */\n+/* { dg-final { scan-assembler-times \"kmovw\\[ \\t]\" 2 } } */\n+\n+#include <x86intrin.h>\n+\n+int\n+foo (const __m128i *data, int a)\n+{\n+  __m128i v = _mm_load_si128 (data);\n+  __mmask16 m = _mm_testn_epi16_mask (v, v);\n+  m = _kshiftli_mask16 (m, 1);\n+  m = _kandn_mask16 (m, a);\n+  return m;\n+}"}]}