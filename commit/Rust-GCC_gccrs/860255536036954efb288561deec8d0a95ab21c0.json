{"sha": "860255536036954efb288561deec8d0a95ab21c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYwMjU1NTM2MDM2OTU0ZWZiMjg4NTYxZGVlYzhkMGE5NWFiMjFjMA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-12-10T00:05:36Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-12-10T00:05:36Z"}, "message": "re PR libstdc++/13296 (unnecessary libunwind support in libstdc++-v3)\n\n\n2003-12-09  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/13296\n\t* acinclude.m4 (GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS): Remove.\n\t* aclocal.m4: Regenerate.\n\t* configure.ac: Remove call to GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS.\n\t* conigure: Regenerate.\n\t* src/Makefile.am (libstdc___la_LDFLAGS): Remove LIBUNWIND_FLAGS.\n\t* src/Makefile.in: Regenerate.\n\t* docs/html/17_intro/configury.html: Modify.\n\nFrom-SVN: r74479", "tree": {"sha": "f1ff29bdf2d97714d3c7cc65f87671233ffbb722", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ff29bdf2d97714d3c7cc65f87671233ffbb722"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/860255536036954efb288561deec8d0a95ab21c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860255536036954efb288561deec8d0a95ab21c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/860255536036954efb288561deec8d0a95ab21c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/860255536036954efb288561deec8d0a95ab21c0/comments", "author": null, "committer": null, "parents": [{"sha": "7c1ca56950e508e9effafa7de349db2e77f9d7a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c1ca56950e508e9effafa7de349db2e77f9d7a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c1ca56950e508e9effafa7de349db2e77f9d7a8"}], "stats": {"total": 122, "additions": 19, "deletions": 103}, "files": [{"sha": "6434d662e40ed30b333f116d76079744bf1c3a1f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -1,3 +1,14 @@\n+2003-12-09  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/13296\n+\t* acinclude.m4 (GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS): Remove.\n+\t* aclocal.m4: Regenerate.\n+\t* configure.ac: Remove call to GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS.\n+\t* conigure: Regenerate.\n+\t* src/Makefile.am (libstdc___la_LDFLAGS): Remove LIBUNWIND_FLAGS.\n+\t* src/Makefile.in: Regenerate.\n+\t* docs/html/17_intro/configury.html: Modify.\n+\t\n 2003-12-09  Paolo Carlini  <pcaelini@suse.de>\n \t\n \t* include/bits/demangle.h (struct implementation_details):\n@@ -5757,7 +5768,8 @@\n \n 2003-04-09  Benjamin Kosnik  <bkoz@redhat.com>\n \n-\tReshuffle 27_io testsuite.  * testsuite/27_io/filebuf.cc,\n+\tReshuffle 27_io testsuite.  \n+\t* testsuite/27_io/filebuf.cc,\n \tfilebuf_members-1.tst, filebuf_members-1.txt, filebuf_members.cc,\n \tfilebuf_virtuals-1.tst, filebuf_virtuals-1.txt,\n \tfilebuf_virtuals-2.tst, filebuf_virtuals-3.tst,"}, {"sha": "084c9ec472f65d289d5a9026c097d5037a104eea", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -108,7 +108,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@"}, {"sha": "f124358d71a043b36d798e42cecdf4fb74bc24b2", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -1347,33 +1347,6 @@ AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n ])\n \n \n-dnl\n-dnl Check for libunwind exception handling support.  If enabled, then\n-dnl we assume that the _Unwind_* functions that make up the Unwind ABI\n-dnl (_Unwind_RaiseException, _Unwind_Resume, etc.) are defined by\n-dnl libunwind instead of libgcc, and that libstdc++ has a dependency\n-dnl on libunwind as well as libgcc.\n-dnl\n-dnl --enable-libunwind-exceptions forces the use of libunwind.\n-dnl --disable-libunwind-exceptions assumes there is no libunwind.\n-dnl\n-dnl Substs:\n-dnl  LIBUNWIND_FLAG\n-dnl\n-AC_DEFUN(GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS, [\n-  AC_MSG_CHECKING([for use of libunwind])\n-  GLIBCXX_ENABLE(libunwind-exceptions,no,,\n-    [force use of libunwind for exceptions])\n-  AC_MSG_RESULT($use_libunwind_exceptions)\n-  if test $enable_libunwind_exceptions = yes; then\n-    LIBUNWIND_FLAG=\"-lunwind\"\n-  else\n-    LIBUNWIND_FLAG=\"\"\n-  fi\n-  AC_SUBST(LIBUNWIND_FLAG)\n-])\n-\n-\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl The result determines only whether 'long long' I/O is enabled; things"}, {"sha": "a0aeed2c2cc2085d9e800c72718189d993e958f0", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -1360,33 +1360,6 @@ AC_DEFUN(GLIBCXX_ENABLE_HOSTED, [\n ])\n \n \n-dnl\n-dnl Check for libunwind exception handling support.  If enabled, then\n-dnl we assume that the _Unwind_* functions that make up the Unwind ABI\n-dnl (_Unwind_RaiseException, _Unwind_Resume, etc.) are defined by\n-dnl libunwind instead of libgcc, and that libstdc++ has a dependency\n-dnl on libunwind as well as libgcc.\n-dnl\n-dnl --enable-libunwind-exceptions forces the use of libunwind.\n-dnl --disable-libunwind-exceptions assumes there is no libunwind.\n-dnl\n-dnl Substs:\n-dnl  LIBUNWIND_FLAG\n-dnl\n-AC_DEFUN(GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS, [\n-  AC_MSG_CHECKING([for use of libunwind])\n-  GLIBCXX_ENABLE(libunwind-exceptions,no,,\n-    [force use of libunwind for exceptions])\n-  AC_MSG_RESULT($use_libunwind_exceptions)\n-  if test $enable_libunwind_exceptions = yes; then\n-    LIBUNWIND_FLAG=\"-lunwind\"\n-  else\n-    LIBUNWIND_FLAG=\"\"\n-  fi\n-  AC_SUBST(LIBUNWIND_FLAG)\n-])\n-\n-\n dnl\n dnl Check for template specializations for the 'long long' type extension.\n dnl The result determines only whether 'long long' I/O is enabled; things"}, {"sha": "ca6ec978b1cb1a551e9d874129f2d84b63762baa", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 3, "deletions": 34, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -308,7 +308,7 @@ ac_includes_default=\"\\\n # include <unistd.h>\n #endif\"\n \n-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE LIBUNWIND_FLAG GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS libtool_VERSION multi_basedir build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO AMTAR install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM AWK SET_MAKE am__leading_dot glibcxx_builddir glibcxx_srcdir toplevel_srcdir CC ac_ct_CC EXEEXT OBJEXT CXX ac_ct_CXX CFLAGS CXXFLAGS LN_S AS ac_ct_AS AR ac_ct_AR RANLIB ac_ct_RANLIB MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBTOOL CXXCPP CPPFLAGS enable_shared enable_static GLIBCXX_HOSTED_TRUE GLIBCXX_HOSTED_FALSE GLIBCXX_BUILD_PCH_TRUE GLIBCXX_BUILD_PCH_FALSE glibcxx_PCHFLAGS CSTDIO_H BASIC_FILE_H BASIC_FILE_CC CPP EGREP check_msgfmt glibcxx_MOFILES glibcxx_POFILES glibcxx_localedir USE_NLS CLOCALE_H CCODECVT_H CMESSAGES_H CCODECVT_CC CCOLLATE_CC CCTYPE_CC CMESSAGES_CC CMONEY_CC CNUMERIC_CC CTIME_H CTIME_CC CLOCALE_CC CLOCALE_INTERNAL_H C_INCLUDE_DIR GLIBCXX_C_HEADERS_C_TRUE GLIBCXX_C_HEADERS_C_FALSE GLIBCXX_C_HEADERS_C_STD_TRUE GLIBCXX_C_HEADERS_C_STD_FALSE GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE glibcxx_thread_h DEBUG_FLAGS GLIBCXX_BUILD_DEBUG_TRUE GLIBCXX_BUILD_DEBUG_FALSE EXTRA_CXX_FLAGS WERROR SECTION_FLAGS SECTION_LDFLAGS OPT_LDFLAGS LIBMATHOBJS SYMVER_MAP port_specific_symbol_files GLIBCXX_BUILD_VERSIONED_SHLIB_TRUE GLIBCXX_BUILD_VERSIONED_SHLIB_FALSE baseline_dir GLIBCXX_TEST_WCHAR_T_TRUE GLIBCXX_TEST_WCHAR_T_FALSE GLIBCXX_TEST_ABI_TRUE GLIBCXX_TEST_ABI_FALSE ATOMICITY_INC_SRCDIR OS_INC_SRCDIR glibcxx_prefixdir gxx_include_dir glibcxx_toolexecdir glibcxx_toolexeclibdir GLIBCXX_INCLUDES TOPLEVEL_INCLUDES OPTIMIZE_CXXFLAGS WARN_FLAGS LIBSUPCXX_PICFLAGS LIBOBJS LTLIBOBJS'\n ac_subst_files=''\n \n # Initialize some variables set by options.\n@@ -855,9 +855,6 @@ Optional Features:\n   --enable-sjlj-exceptions\n                           force use of builtin_setjmp for exceptions\n                           [default=auto]\n-  --enable-libunwind-exceptions\n-                          force use of libunwind for exceptions\n-                          [default=no]\n   --enable-libstdcxx-pch  build pre-compiled libstdc++ headers\n                           [default=$is_hosted]\n   --enable-cstdio=PACKAGE use target-specific I/O package\n@@ -4269,7 +4266,7 @@ test x\"$pic_mode\" = xno && libtool_flags=\"$libtool_flags --prefer-non-pic\"\n case $host in\n *-*-irix6*)\n   # Find out which ABI we are using.\n-  echo '#line 4272 \"configure\"' > conftest.$ac_ext\n+  echo '#line 4269 \"configure\"' > conftest.$ac_ext\n   if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n   (eval $ac_compile) 2>&5\n   ac_status=$?\n@@ -4873,7 +4870,7 @@ fi;\n     #\n     # Fake what AC_TRY_COMPILE does.  XXX Look at redoing this new-style.\n     cat > conftest.$ac_ext << EOF\n-#line 4876 \"configure\"\n+#line 4873 \"configure\"\n struct S { ~S(); };\n void bar();\n void foo()\n@@ -4929,33 +4926,6 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n echo \"${ECHO_T}$ac_exception_model_name\" >&6\n \n \n-  echo \"$as_me:$LINENO: checking for use of libunwind\" >&5\n-echo $ECHO_N \"checking for use of libunwind... $ECHO_C\" >&6\n-   # Check whether --enable-libunwind-exceptions or --disable-libunwind-exceptions was given.\n-if test \"${enable_libunwind_exceptions+set}\" = set; then\n-  enableval=\"$enable_libunwind_exceptions\"\n-\n-      case \"$enableval\" in\n-       yes|no) ;;\n-       *) { { echo \"$as_me:$LINENO: error: Argument to enable/disable libunwind-exceptions must be yes or no\" >&5\n-echo \"$as_me: error: Argument to enable/disable libunwind-exceptions must be yes or no\" >&2;}\n-   { (exit 1); exit 1; }; } ;;\n-      esac\n-\n-else\n-  enable_libunwind_exceptions=no\n-fi;\n-\n-  echo \"$as_me:$LINENO: result: $use_libunwind_exceptions\" >&5\n-echo \"${ECHO_T}$use_libunwind_exceptions\" >&6\n-  if test $enable_libunwind_exceptions = yes; then\n-    LIBUNWIND_FLAG=\"-lunwind\"\n-  else\n-    LIBUNWIND_FLAG=\"\"\n-  fi\n-\n-\n-\n   echo \"$as_me:$LINENO: checking for enabled PCH\" >&5\n echo $ECHO_N \"checking for enabled PCH... $ECHO_C\" >&6\n    # Check whether --enable-libstdcxx-pch or --disable-libstdcxx-pch was given.\n@@ -62630,7 +62600,6 @@ s,@enable_shared@,$enable_shared,;t t\n s,@enable_static@,$enable_static,;t t\n s,@GLIBCXX_HOSTED_TRUE@,$GLIBCXX_HOSTED_TRUE,;t t\n s,@GLIBCXX_HOSTED_FALSE@,$GLIBCXX_HOSTED_FALSE,;t t\n-s,@LIBUNWIND_FLAG@,$LIBUNWIND_FLAG,;t t\n s,@GLIBCXX_BUILD_PCH_TRUE@,$GLIBCXX_BUILD_PCH_TRUE,;t t\n s,@GLIBCXX_BUILD_PCH_FALSE@,$GLIBCXX_BUILD_PCH_FALSE,;t t\n s,@glibcxx_PCHFLAGS@,$glibcxx_PCHFLAGS,;t t"}, {"sha": "fc635b8f4d41afc2654cc22bb3197af21d8d7c9e", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -77,7 +77,6 @@ GLIBCXX_ENABLE_HOSTED\n \n # Check for support bits and g++ features that don't require linking.\n GLIBCXX_ENABLE_SJLJ_EXCEPTIONS\n-GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n GLIBCXX_ENABLE_PCH($is_hosted)\n \n # Enable all the variable C++ runtime options.  "}, {"sha": "d099e596575fcfbed7a71146ab1ca0ed60c4957a", "filename": "libstdc++-v3/docs/html/17_intro/configury.html", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconfigury.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconfigury.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fconfigury.html?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -165,7 +165,6 @@ <h3><a name=\"aclayout\">acinclude.m4 layout</a></h3>\n     GLIBCXX_ENABLE_C_MBCHAR\n     GLIBCXX_ENABLE_DEBUG\n     GLIBCXX_ENABLE_DEBUG_FLAGS\n-    GLIBCXX_ENABLE_LIBUNWIND_EXCEPTIONS\n     GLIBCXX_ENABLE_LONG_LONG\n     GLIBCXX_ENABLE_PCH\n     GLIBCXX_ENABLE_SJLJ_EXCEPTIONS"}, {"sha": "8fdc4c0c0082321fbe501c3c4f80dccd97c5257c", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -108,7 +108,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n@@ -525,9 +524,9 @@ debug_headers = \\\n # For --enable-cheaders=c_std\n @GLIBCXX_C_HEADERS_C_STD_TRUE@c_base_headers_extra = ${c_base_srcdir}/cmath.tcc\n @GLIBCXX_C_HEADERS_C_STD_FALSE@c_base_headers_extra = \n+@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n @GLIBCXX_C_HEADERS_COMPATIBILITY_TRUE@c_compatibility_headers_extra = ${c_compatibility_headers}\n-@GLIBCXX_C_HEADERS_COMPATIBILITY_FALSE@c_compatibility_headers_extra = \n \n host_srcdir = ${glibcxx_srcdir}/$(OS_INC_SRCDIR)\n host_builddir = ./${host_alias}/bits"}, {"sha": "199235fc7dea45e2dac1b8b86c2878b453535a4d", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -110,7 +110,6 @@ LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n \n # Only compiling \"C\" sources in this directory.\n LIBTOOL = @LIBTOOL@ --tag CC\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@"}, {"sha": "a6da61304d6c30259e103acc04ae0829a369b862", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -108,7 +108,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@"}, {"sha": "c61b4b022faeb86998934427b2d3280db1625f98", "filename": "libstdc++-v3/po/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fpo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpo%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -108,7 +108,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@"}, {"sha": "a0d0187c7cf437c88d101973bc5b4bfcec3834dc", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -141,8 +141,7 @@ libstdc___la_LIBADD = \\\n libstdc___la_DEPENDENCIES = ${version_dep} $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info $(libtool_VERSION) ${version_arg} \\\n-\t-lm $(LIBUNWIND_FLAG)\n+\t-version-info $(libtool_VERSION) ${version_arg} -lm \n \n \n # Use special rules for the deprecated source files so that they find"}, {"sha": "c599363b45892366f4fa654c45692548f6e06d88", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -109,7 +109,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@\n@@ -298,8 +297,7 @@ libstdc___la_LIBADD = \\\n libstdc___la_DEPENDENCIES = ${version_dep} $(libstdc___la_LIBADD)\n \n libstdc___la_LDFLAGS = \\\n-\t-version-info $(libtool_VERSION) ${version_arg} \\\n-\t-lm $(LIBUNWIND_FLAG)\n+\t-version-info $(libtool_VERSION) ${version_arg} -lm \n \n \n # Use special rules for the deprecated source files so that they find"}, {"sha": "ca3f4f74379816a77d4ddb3318c7860799814fca", "filename": "libstdc++-v3/testsuite/Makefile.in", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/860255536036954efb288561deec8d0a95ab21c0/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2FMakefile.in?ref=860255536036954efb288561deec8d0a95ab21c0", "patch": "@@ -108,7 +108,6 @@ LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBSUPCXX_PICFLAGS = @LIBSUPCXX_PICFLAGS@\n LIBTOOL = @LIBTOOL@\n-LIBUNWIND_FLAG = @LIBUNWIND_FLAG@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n MAINT = @MAINT@"}]}