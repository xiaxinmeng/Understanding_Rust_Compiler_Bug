{"sha": "e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTkxYTE3ZmUzOWMzOWU5OGNlYmU2ZTFjYmM4MDY0ZWU2ODQ2YTNhNw==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-05-17T14:22:39Z"}, "committer": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2021-05-17T14:26:11Z"}, "message": "AArch64: Have -mcpu=native and -march=native enable extensions when CPU is unknown\n\nCurrently when using -mcpu=native or -march=native on a CPU that is unknown to\nthe compiler the compiler currently just used -march=armv8-a and enables none\nof the extensions.\n\nTo make this a bit more useful this patch changes it to still use -march=armv8.a\nbut to enable the extensions.  We still cannot do tuning but at least if using\nthis on a future SVE core the compiler will at the very least enable SVE etc.\n\ngcc/ChangeLog:\n\n\t* config/aarch64/driver-aarch64.c (DEFAULT_ARCH): New.\n\t(host_detect_local_cpu): Use it.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/aarch64/cpunative/info_16: New test.\n\t* gcc.target/aarch64/cpunative/info_17: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_16.c: New test.\n\t* gcc.target/aarch64/cpunative/native_cpu_17.c: New test.", "tree": {"sha": "067f3390f86a0545c9ec90eff79d8caa15559fa1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/067f3390f86a0545c9ec90eff79d8caa15559fa1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a060800d3998c8a55eea65b02693cbbfee3e14", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6a060800d3998c8a55eea65b02693cbbfee3e14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6a060800d3998c8a55eea65b02693cbbfee3e14"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "b58591d497461cae6e8014fa39afd9dd26ae67bf", "filename": "gcc/config/aarch64/driver-aarch64.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fdriver-aarch64.c?ref=e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "patch": "@@ -58,6 +58,8 @@ struct aarch64_core_data\n #define INVALID_IMP ((unsigned char) -1)\n #define INVALID_CORE ((unsigned)-1)\n #define ALL_VARIANTS ((unsigned)-1)\n+/* Default architecture to use if -mcpu=native did not detect a known CPU.  */\n+#define DEFAULT_ARCH \"8A\"\n \n #define AARCH64_CORE(CORE_NAME, CORE_IDENT, SCHED, ARCH, FLAGS, COSTS, IMP, PART, VARIANT) \\\n   { CORE_NAME, #ARCH, IMP, PART, VARIANT, FLAGS },\n@@ -390,10 +392,18 @@ host_detect_local_cpu (int argc, const char **argv)\n             && (aarch64_cpu_data[i].variant == ALL_VARIANTS\n                 || variants[0] == aarch64_cpu_data[i].variant))\n \t  break;\n+\n       if (aarch64_cpu_data[i].name == NULL)\n-        goto not_found;\n+\t{\n+\t  aarch64_arch_driver_info* arch_info\n+\t    = get_arch_from_id (DEFAULT_ARCH);\n+\n+\t  gcc_assert (arch_info);\n \n-      if (arch)\n+\t  res = concat (\"-march=\", arch_info->name, NULL);\n+\t  default_flags = arch_info->flags;\n+\t}\n+      else if (arch)\n \t{\n \t  const char *arch_id = aarch64_cpu_data[i].arch;\n \t  aarch64_arch_driver_info* arch_info = get_arch_from_id (arch_id);"}, {"sha": "b0679579d9167d46c832e55cb63d9077f7a80f70", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_16", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_16?ref=e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2\n+CPU implementer\t: 0xff\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "b0679579d9167d46c832e55cb63d9077f7a80f70", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/info_17", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Finfo_17?ref=e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "patch": "@@ -0,0 +1,8 @@\n+processor\t: 0\n+BogoMIPS\t: 100.00\n+Features\t: fp asimd evtstrm aes pmull sha1 sha2 crc32 asimddp sve sve2\n+CPU implementer\t: 0xff\n+CPU architecture: 8\n+CPU variant\t: 0x0\n+CPU part\t: 0xd08\n+CPU revision\t: 2"}, {"sha": "a424e7c56c782ca6e6917248e2fa7a18eb94e06a", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_16.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_16.c?ref=e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_16\" } */\n+/* { dg-additional-options \"-mcpu=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+crc\\+dotprod\\+sve2} } } */\n+\n+/* Test a normal looking procinfo.  */"}, {"sha": "c269c5fef7f4ed0686f4f39d05952364c5682e54", "filename": "gcc/testsuite/gcc.target/aarch64/cpunative/native_cpu_17.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_17.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_17.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcpunative%2Fnative_cpu_17.c?ref=e91a17fe39c39e98cebe6e1cbc8064ee6846a3a7", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile { target { { aarch64*-*-linux*} && native } } } */\n+/* { dg-set-compiler-env-var GCC_CPUINFO \"$srcdir/gcc.target/aarch64/cpunative/info_17\" } */\n+/* { dg-additional-options \"-march=native\" } */\n+\n+int main()\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\.arch armv8-a\\+crypto\\+crc\\+dotprod\\+sve2} } } */\n+\n+/* Test a normal looking procinfo.  */"}]}