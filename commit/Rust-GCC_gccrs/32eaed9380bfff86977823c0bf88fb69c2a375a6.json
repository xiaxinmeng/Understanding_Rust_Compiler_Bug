{"sha": "32eaed9380bfff86977823c0bf88fb69c2a375a6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJlYWVkOTM4MGJmZmY4Njk3NzgyM2MwYmY4OGZiNjljMmEzNzVhNg==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2015-05-28T09:29:19Z"}, "committer": {"name": "Julian Brown", "email": "jules@gcc.gnu.org", "date": "2015-05-28T09:29:19Z"}, "message": "re PR libgomp/65742 (Several libgomp.oacc-* failures after r221922.)\n\n    PR libgomp/65742\n\n    gcc/\n    * builtins.c (expand_builtin_acc_on_device): Don't use open-coded\n    sequence for !ACCEL_COMPILER.\n\n    libgomp/\n    * oacc-init.c (plugin/plugin-host.h): Include.\n    (acc_on_device): Check whether we're in an offloaded region for\n    host_nonshm\n    plugin. Don't use __builtin_acc_on_device.\n    * plugin/plugin-host.c (GOMP_OFFLOAD_openacc_parallel): Set\n    nonshm_exec flag in thread-local data.\n    (GOMP_OFFLOAD_openacc_create_thread_data): Allocate thread-local\n    data for host_nonshm plugin.\n    (GOMP_OFFLOAD_openacc_destroy_thread_data): Free thread-local data\n    for host_nonshm plugin.\n    * plugin/plugin-host.h: New.\n\nFrom-SVN: r223801", "tree": {"sha": "2bd3ae354d8dfe258860472c06b79b535af2b30b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bd3ae354d8dfe258860472c06b79b535af2b30b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32eaed9380bfff86977823c0bf88fb69c2a375a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32eaed9380bfff86977823c0bf88fb69c2a375a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32eaed9380bfff86977823c0bf88fb69c2a375a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32eaed9380bfff86977823c0bf88fb69c2a375a6/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9880c94ce8d5bbce64f56f4e75c1ed073a1e52"}], "stats": {"total": 104, "additions": 94, "deletions": 10}, "files": [{"sha": "a3769389bfd941f9865b55cc78f125e3b6aa0aa1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -1,3 +1,10 @@\n+2015-05-28  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR libgomp/65742\n+\n+\t* builtins.c (expand_builtin_acc_on_device): Don't use open-coded\n+\tsequence for !ACCEL_COMPILER.\n+\n 2015-05-28  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rx/rx.c (push_regs): New function.  Extracts code from..."}, {"sha": "4ce8e5224ca07b6ac1f7c1ef7b55aac01ca1a5dd", "filename": "gcc/builtins.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -5913,6 +5913,7 @@ expand_stack_save (void)\n static rtx\n expand_builtin_acc_on_device (tree exp, rtx target)\n {\n+#ifdef ACCEL_COMPILER\n   if (!validate_arglist (exp, INTEGER_TYPE, VOID_TYPE))\n     return NULL_RTX;\n \n@@ -5921,13 +5922,8 @@ expand_builtin_acc_on_device (tree exp, rtx target)\n   /* Return (arg == v1 || arg == v2) ? 1 : 0.  */\n   machine_mode v_mode = TYPE_MODE (TREE_TYPE (arg));\n   rtx v = expand_normal (arg), v1, v2;\n-#ifdef ACCEL_COMPILER\n   v1 = GEN_INT (GOMP_DEVICE_NOT_HOST);\n   v2 = GEN_INT (ACCEL_COMPILER_acc_device);\n-#else\n-  v1 = GEN_INT (GOMP_DEVICE_NONE);\n-  v2 = GEN_INT (GOMP_DEVICE_HOST);\n-#endif\n   machine_mode target_mode = TYPE_MODE (integer_type_node);\n   if (!target || !register_operand (target, target_mode))\n     target = gen_reg_rtx (target_mode);\n@@ -5941,6 +5937,9 @@ expand_builtin_acc_on_device (tree exp, rtx target)\n   emit_label (done_label);\n \n   return target;\n+#else\n+  return NULL;\n+#endif\n }\n \n "}, {"sha": "fda3b5fb0dbe4fa10915d2fcf5a4333961e863c9", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -1,3 +1,19 @@\n+2015-05-28  Julian Brown  <julian@codesourcery.com>\n+\n+\tPR libgomp/65742\n+\n+\t* oacc-init.c (plugin/plugin-host.h): Include.\n+\t(acc_on_device): Check whether we're in an offloaded region for\n+\thost_nonshm\n+\tplugin. Don't use __builtin_acc_on_device.\n+\t* plugin/plugin-host.c (GOMP_OFFLOAD_openacc_parallel): Set\n+\tnonshm_exec flag in thread-local data.\n+\t(GOMP_OFFLOAD_openacc_create_thread_data): Allocate thread-local\n+\tdata for host_nonshm plugin.\n+\t(GOMP_OFFLOAD_openacc_destroy_thread_data): Free thread-local data\n+\tfor host_nonshm plugin.\n+\t* plugin/plugin-host.h: New.\n+\n 2015-05-27  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/linux/ia64/futex.h (sys_futex0) Change operand \"op\" to int."}, {"sha": "8e5fc3bbb7971edcbfde3a78e8bef54cee64b6f4", "filename": "libgomp/oacc-init.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Foacc-init.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Foacc-init.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Foacc-init.c?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -29,6 +29,7 @@\n #include \"libgomp.h\"\n #include \"oacc-int.h\"\n #include \"openacc.h\"\n+#include \"plugin/plugin-host.h\"\n #include <assert.h>\n #include <stdlib.h>\n #include <strings.h>\n@@ -580,11 +581,18 @@ ialias (acc_set_device_num)\n int\n acc_on_device (acc_device_t dev)\n {\n-  if (acc_get_device_type () == acc_device_host_nonshm)\n+  struct goacc_thread *thr = goacc_thread ();\n+\n+  /* We only want to appear to be the \"host_nonshm\" plugin from \"offloaded\"\n+     code -- i.e. within a parallel region.  Test a flag set by the\n+     openacc_parallel hook of the host_nonshm plugin to determine that.  */\n+  if (acc_get_device_type () == acc_device_host_nonshm\n+      && thr && thr->target_tls\n+      && ((struct nonshm_thread *)thr->target_tls)->nonshm_exec)\n     return dev == acc_device_host_nonshm || dev == acc_device_not_host;\n \n-  /* Just rely on the compiler builtin.  */\n-  return __builtin_acc_on_device (dev);\n+  /* For OpenACC, libgomp is only built for the host, so this is sufficient.  */\n+  return dev == acc_device_host || dev == acc_device_none;\n }\n \n ialias (acc_on_device)"}, {"sha": "3cb4dab3778f8e8085749911294c2ac060a0a523", "filename": "libgomp/plugin/plugin-host.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Fplugin%2Fplugin-host.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Fplugin%2Fplugin-host.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-host.c?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -44,6 +44,7 @@\n #include <stdlib.h>\n #include <string.h>\n #include <stdio.h>\n+#include <stdbool.h>\n \n #ifdef HOST_NONSHM_PLUGIN\n #define STATIC\n@@ -55,6 +56,10 @@\n #define SELF \"host: \"\n #endif\n \n+#ifdef HOST_NONSHM_PLUGIN\n+#include \"plugin-host.h\"\n+#endif\n+\n STATIC const char *\n GOMP_OFFLOAD_get_name (void)\n {\n@@ -174,7 +179,10 @@ GOMP_OFFLOAD_openacc_parallel (void (*fn) (void *),\n \t\t\t       void *targ_mem_desc __attribute__ ((unused)))\n {\n #ifdef HOST_NONSHM_PLUGIN\n+  struct nonshm_thread *thd = GOMP_PLUGIN_acc_thread ();\n+  thd->nonshm_exec = true;\n   fn (devaddrs);\n+  thd->nonshm_exec = false;\n #else\n   fn (hostaddrs);\n #endif\n@@ -232,11 +240,20 @@ STATIC void *\n GOMP_OFFLOAD_openacc_create_thread_data (int ord\n \t\t\t\t\t __attribute__ ((unused)))\n {\n+#ifdef HOST_NONSHM_PLUGIN\n+  struct nonshm_thread *thd\n+    = GOMP_PLUGIN_malloc (sizeof (struct nonshm_thread));\n+  thd->nonshm_exec = false;\n+  return thd;\n+#else\n   return NULL;\n+#endif\n }\n \n STATIC void\n-GOMP_OFFLOAD_openacc_destroy_thread_data (void *tls_data\n-\t\t\t\t\t  __attribute__ ((unused)))\n+GOMP_OFFLOAD_openacc_destroy_thread_data (void *tls_data)\n {\n+#ifdef HOST_NONSHM_PLUGIN\n+  free (tls_data);\n+#endif\n }"}, {"sha": "96955d19414f70acb8d7e0e09c75d5eba2480914", "filename": "libgomp/plugin/plugin-host.h", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Fplugin%2Fplugin-host.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32eaed9380bfff86977823c0bf88fb69c2a375a6/libgomp%2Fplugin%2Fplugin-host.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fplugin%2Fplugin-host.h?ref=32eaed9380bfff86977823c0bf88fb69c2a375a6", "patch": "@@ -0,0 +1,37 @@\n+/* OpenACC Runtime Library: acc_device_host, acc_device_host_nonshm.\n+\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+   Contributed by Mentor Embedded.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef PLUGIN_HOST_H\n+#define PLUGIN_HOST_H\n+\n+struct nonshm_thread\n+{\n+  bool nonshm_exec;\n+};\n+\n+#endif"}]}