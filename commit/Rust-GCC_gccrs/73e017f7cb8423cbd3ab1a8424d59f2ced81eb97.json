{"sha": "73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "node_id": "C_kwDOANBUbNoAKDczZTAxN2Y3Y2I4NDIzY2JkM2FiMWE4NDI0ZDU5ZjJjZWQ4MWViOTc", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-04-14T06:56:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-14T06:56:37Z"}, "message": "Merge #1113\n\n1113: macros: Add env! macro r=CohenArthur a=omachota\n\nAdded the `env!()` macro and relevant test cases\r\n\r\nFixes: #977 \r\n\r\nSigned-off-by: Ond\u0159ej Machota <ondrejmachota@gmail.com>\n\nCo-authored-by: Ond\u0159ej Machota <ondrejmachota@gmail.com>", "tree": {"sha": "f751ad4d9a6a539657adc7e62052056db0dc276b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f751ad4d9a6a539657adc7e62052056db0dc276b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiV8WlCRBK7hj4Ov3rIwAAJUEIAAyui+v5SpDBWRZd6mQ4+zUv\n20zQsnpDXWYKObwDRBFwRPBKfZDPa/dSFot3r5HdyGravLSvHyVoab9eq0YkWMNv\nyw/mn1qNX2NeDiGRphh2WdoIprpgwfGt9ojnWCCL96lkCML3ExyOIcKH94sOF3cQ\njoH19Gy4kBD6dz89wFsNaVk1e8aWvD0Lx51AI/PSmOrt293XrYsoPAUxTNkk286J\nflPodA+TUr7thoU/oEMfHeoAQPGLqEyDTdHOZ4DqNuRXG/pXMpYacBphiuUeOCwO\n2ktq2IFBAaAeJILZ601Mw8PKVSzucQOOHJ9MUyFZ51A4HWQshokQHyR3Gm/uyOM=\n=waYa\n-----END PGP SIGNATURE-----\n", "payload": "tree f751ad4d9a6a539657adc7e62052056db0dc276b\nparent 60324125c3dbfd2f1551ec41dcfd4322ca80d6fa\nparent 1e6e42769665288b3e2a12148ee9bacf057b2fe8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1649919397 +0000\ncommitter GitHub <noreply@github.com> 1649919397 +0000\n\nMerge #1113\n\n1113: macros: Add env! macro r=CohenArthur a=omachota\n\nAdded the `env!()` macro and relevant test cases\r\n\r\nFixes: #977 \r\n\r\nSigned-off-by: Ond\u0159ej Machota <ondrejmachota@gmail.com>\n\nCo-authored-by: Ond\u0159ej Machota <ondrejmachota@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60324125c3dbfd2f1551ec41dcfd4322ca80d6fa"}, {"sha": "1e6e42769665288b3e2a12148ee9bacf057b2fe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e6e42769665288b3e2a12148ee9bacf057b2fe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e6e42769665288b3e2a12148ee9bacf057b2fe8"}], "stats": {"total": 119, "additions": 119, "deletions": 0}, "files": [{"sha": "d0f73024ca90f6778ad23e77495bd3083bd5da1b", "filename": "gcc/rust/expand/rust-macro-builtins.cc", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.cc?ref=73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "patch": "@@ -306,4 +306,74 @@ MacroBuiltin::concat (Location invoc_locus, AST::MacroInvocData &invoc)\n   return AST::ASTFragment ({node});\n }\n \n+/* Expand builtin macro env!(), which inspects an environment variable at\n+   compile time. */\n+\n+AST::ASTFragment\n+MacroBuiltin::env (Location invoc_locus, AST::MacroInvocData &invoc)\n+{\n+  auto invoc_token_tree = invoc.get_delim_tok_tree ();\n+  MacroInvocLexer lex (invoc_token_tree.to_token_stream ());\n+  Parser<MacroInvocLexer> parser (std::move (lex));\n+\n+  auto last_token_id = macro_end_token (invoc_token_tree, parser);\n+\n+  if (parser.peek_current_token ()->get_id () != STRING_LITERAL)\n+    {\n+      if (parser.peek_current_token ()->get_id () == last_token_id)\n+\trust_error_at (invoc_locus, \"env! takes 1 or 2 arguments\");\n+      else\n+\trust_error_at (parser.peek_current_token ()->get_locus (),\n+\t\t       \"argument must be a string literal\");\n+      return AST::ASTFragment::create_error ();\n+    }\n+\n+  auto lit_expr = parser.parse_literal_expr ();\n+  auto comma_skipped = parser.maybe_skip_token (COMMA);\n+\n+  std::unique_ptr<AST::LiteralExpr> error_expr = nullptr;\n+\n+  if (parser.peek_current_token ()->get_id () != last_token_id)\n+    {\n+      if (!comma_skipped)\n+\t{\n+\t  rust_error_at (parser.peek_current_token ()->get_locus (),\n+\t\t\t \"expected token: %<,%>\");\n+\t  return AST::ASTFragment::create_error ();\n+\t}\n+      if (parser.peek_current_token ()->get_id () != STRING_LITERAL)\n+\t{\n+\t  rust_error_at (parser.peek_current_token ()->get_locus (),\n+\t\t\t \"argument must be a string literal\");\n+\t  return AST::ASTFragment::create_error ();\n+\t}\n+\n+      error_expr = parser.parse_literal_expr ();\n+      parser.maybe_skip_token (COMMA);\n+    }\n+\n+  if (parser.peek_current_token ()->get_id () != last_token_id)\n+    {\n+      rust_error_at (invoc_locus, \"env! takes 1 or 2 arguments\");\n+      return AST::ASTFragment::create_error ();\n+    }\n+\n+  parser.skip_token (last_token_id);\n+\n+  auto env_value = getenv (lit_expr->as_string ().c_str ());\n+\n+  if (env_value == nullptr)\n+    {\n+      if (error_expr == nullptr)\n+\trust_error_at (invoc_locus, \"environment variable %qs not defined\",\n+\t\t       lit_expr->as_string ().c_str ());\n+      else\n+\trust_error_at (invoc_locus, \"%s\", error_expr->as_string ().c_str ());\n+      return AST::ASTFragment::create_error ();\n+    }\n+\n+  auto node = AST::SingleASTNode (make_string (invoc_locus, env_value));\n+  return AST::ASTFragment ({node});\n+}\n+\n } // namespace Rust"}, {"sha": "047181146c1a684f8172294bf453835f6a7e16d4", "filename": "gcc/rust/expand/rust-macro-builtins.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fexpand%2Frust-macro-builtins.h?ref=73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "patch": "@@ -89,6 +89,9 @@ class MacroBuiltin\n \n   static AST::ASTFragment concat (Location invoc_locus,\n \t\t\t\t  AST::MacroInvocData &invoc);\n+\n+  static AST::ASTFragment env (Location invoc_locus,\n+\t\t\t       AST::MacroInvocData &invoc);\n };\n } // namespace Rust\n "}, {"sha": "23b78efcf07757e50c7e0d81b402fcbd9c7dfc05", "filename": "gcc/rust/util/rust-hir-map.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Futil%2Frust-hir-map.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Frust%2Futil%2Frust-hir-map.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-hir-map.cc?ref=73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "patch": "@@ -755,6 +755,7 @@ Mappings::insert_macro_def (AST::MacroRulesDefinition *macro)\n       {\"include_str\", MacroBuiltin::include_str},\n       {\"compile_error\", MacroBuiltin::compile_error},\n       {\"concat\", MacroBuiltin::concat},\n+      {\"env\", MacroBuiltin::env},\n     };\n \n   auto builtin = builtin_macros.find (macro->get_rule_name ());"}, {"sha": "8c50a7d89018cd4e8038f9da9700f7711351c10e", "filename": "gcc/testsuite/rust/compile/builtin_macro_env.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Fbuiltin_macro_env.rs?ref=73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "patch": "@@ -0,0 +1,19 @@\n+macro_rules! env {\n+  () => {{}};\n+}\n+\n+fn main () {\n+  let message = \"error message\";\n+  env! (message); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (); // { dg-error \"env! takes 1 or 2 arguments\" \"\" }\n+  env! (,); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (1); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (\"NOT_DEFINED\"); // { dg-error \"environment variable 'NOT_DEFINED' not defined\" \"\" }\n+  env! (\"NOT_DEFINED\",); // { dg-error \"environment variable 'NOT_DEFINED' not defined\" \"\" }\n+  env! (\"NOT_DEFINED\", 1); // { dg-error \"argument must be a string literal\" \"\" }\n+  env! (\"NOT_DEFINED\", \"two\", \"three\"); // { dg-error \"env! takes 1 or 2 arguments\" \"\" }\n+  env! (\"NOT_DEFINED\" \"expected error message\"); // { dg-error \"expected token: ','\" \"\" }\n+  env! (\"NOT_DEFINED\", \"expected error message\"); // { dg-error \"expected error message\" \"\" }\n+  env! (\"NOT_DEFINED\", \"expected error message\",); // { dg-error \"expected error message\" \"\" }\n+  env! (1, \"two\"); // { dg-error \"argument must be a string literal\" \"\" }\n+}"}, {"sha": "ab6f139075c7cd2863fe2a1f128adf8f6ed58383", "filename": "gcc/testsuite/rust/execute/torture/builtin_macro_env.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73e017f7cb8423cbd3ab1a8424d59f2ced81eb97/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fbuiltin_macro_env.rs?ref=73e017f7cb8423cbd3ab1a8424d59f2ced81eb97", "patch": "@@ -0,0 +1,26 @@\n+// { dg-output \"VALUE\\nVALUE\\n\" }\n+// { dg-set-compiler-env-var ENV_MACRO_TEST \"VALUE\" }\n+\n+macro_rules! env {\n+    () => {{}};\n+}\n+\n+extern \"C\" {\n+    fn printf(fmt: *const i8, ...);\n+}\n+\n+fn print(s: &str) {\n+    printf(\"%s\\n\" as *const str as *const i8, s as *const str as *const i8);\n+}\n+\n+fn main() -> i32 {\n+    let val0 = env!(\"ENV_MACRO_TEST\");\n+\n+    print(val0);\n+\n+    let val1 = env!(\"ENV_MACRO_TEST\",);\n+\n+    print(val1);\n+\n+    0\n+}"}]}