{"sha": "21f65dc872f5b746181d6e78f8be9f7ecb625292", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFmNjVkYzg3MmY1Yjc0NjE4MWQ2ZTc4ZjhiZTlmN2VjYjYyNTI5Mg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-03-23T18:57:58Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2015-03-23T18:57:58Z"}, "message": "re PR target/65505 ([SH] ICE in sh_disp_addr_displacement)\n\ngcc/\n\tPR target/65505\n\t* config/sh/predicates.md (simple_mem_operand,\n\tdisplacement_mem_operand): Add test for reg.\n\t(short_displacement_mem_operand): Test for displacement_mem_operand\n\tbefore invoking sh_disp_addr_displacement.\n\t* config/sh/constraints.md (Sdd, Sra): Simplify.\n\t* config/sh/sync.md (atomic_mem_operand_0, atomic_mem_operand_1):\n\tRemove redundant displacement_mem_operand tests.\n\ngcc/testsuite/\n\tPR target/65505\n\t* gcc.target/sh/torture/pr65505.c: New.\n\nFrom-SVN: r221604", "tree": {"sha": "789b9c7cac5c22ded1c4e42b1d0917543468053b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/789b9c7cac5c22ded1c4e42b1d0917543468053b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21f65dc872f5b746181d6e78f8be9f7ecb625292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f65dc872f5b746181d6e78f8be9f7ecb625292", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21f65dc872f5b746181d6e78f8be9f7ecb625292", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21f65dc872f5b746181d6e78f8be9f7ecb625292/comments", "author": null, "committer": null, "parents": [{"sha": "ed137300ca45443f9986b4a0322298a38610ddce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed137300ca45443f9986b4a0322298a38610ddce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed137300ca45443f9986b4a0322298a38610ddce"}], "stats": {"total": 163, "additions": 151, "deletions": 12}, "files": [{"sha": "2df46f56d6c98f79bf78d3e1f76c3bc31e1261cf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -1,3 +1,14 @@\n+2015-03-23  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/65505\n+\t* config/sh/predicates.md (simple_mem_operand,\n+\tdisplacement_mem_operand): Add test for reg.\n+\t(short_displacement_mem_operand): Test for displacement_mem_operand\n+\tbefore invoking sh_disp_addr_displacement.\n+\t* config/sh/constraints.md (Sdd, Sra): Simplify.\n+\t* config/sh/sync.md (atomic_mem_operand_0, atomic_mem_operand_1):\n+\tRemove redundant displacement_mem_operand tests.\n+\n 2015-03-23  Georg-Johann Lay  <avr@gjlay.de>\n \n \tPR target/65296"}, {"sha": "bd059a439d8d28bfe7f26ff4c13d9c76bc47cb1b", "filename": "gcc/config/sh/constraints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fconstraints.md?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -300,9 +300,9 @@\n (define_memory_constraint \"Sdd\"\n   \"A memory reference that uses displacement addressing.\"\n   (and (match_code \"mem\")\n-       (match_test \"GET_CODE (XEXP (op, 0)) == PLUS\")\n-       (match_test \"REG_P (XEXP (XEXP (op, 0), 0))\")\n-       (match_test \"CONST_INT_P (XEXP (XEXP (op, 0), 1))\")))\n+       (match_code \"plus\" \"0\")\n+       (match_code \"reg\" \"00\")\n+       (match_code \"const_int\" \"01\")))\n \n (define_memory_constraint \"Snd\"\n   \"A memory reference that excludes displacement addressing.\"\n@@ -322,8 +322,8 @@\n \n (define_memory_constraint \"Sra\"\n   \"A memory reference that uses simple register addressing.\"\n-  (and (match_test \"MEM_P (op)\")\n-       (match_test \"REG_P (XEXP (op, 0))\")))\n+  (and (match_code \"mem\")\n+       (match_code \"reg\" \"0\")))\n \n (define_memory_constraint \"Ara\"\n   \"A memory reference that uses simple register addressing suitable for"}, {"sha": "6f0d89e1f196463470809d2ba4b24322b0cb80b8", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -437,12 +437,14 @@\n ;; Returns 1 if OP is a simple register address.\n (define_predicate \"simple_mem_operand\"\n   (and (match_code \"mem\")\n+       (match_code \"reg\" \"0\")\n        (match_test \"arith_reg_operand (XEXP (op, 0), SImode)\")))\n \n ;; Returns 1 if OP is a valid displacement address.\n (define_predicate \"displacement_mem_operand\"\n   (and (match_code \"mem\")\n-       (match_test \"GET_CODE (XEXP (op, 0)) == PLUS\")\n+       (match_code \"plus\" \"0\")\n+       (match_code \"reg\" \"00\")\n        (match_test \"arith_reg_operand (XEXP (XEXP (op, 0), 0), SImode)\")\n        (match_test \"sh_legitimate_index_p (GET_MODE (op),\n \t\t\t\t\t   XEXP (XEXP (op, 0), 1),\n@@ -451,8 +453,10 @@\n ;; Returns true if OP is a displacement address that can fit into a\n ;; 16 bit (non-SH2A) memory load / store insn.\n (define_predicate \"short_displacement_mem_operand\"\n-  (match_test \"sh_disp_addr_displacement (op)\n-\t       <= sh_max_mov_insn_displacement (GET_MODE (op), false)\"))\n+  (and (match_code \"mem\")\n+       (match_operand 0 \"displacement_mem_operand\")\n+       (match_test \"sh_disp_addr_displacement (op)\n+\t\t    <= sh_max_mov_insn_displacement (GET_MODE (op), false)\")))\n \n ;; Returns 1 if the operand can be used in an SH2A movu.{b|w} insn.\n (define_predicate \"zero_extend_movu_operand\""}, {"sha": "6e054e6f39ae1d4ebe74e60d89957d1c37b0879f", "filename": "gcc/config/sh/sync.md", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fsync.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Fconfig%2Fsh%2Fsync.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsync.md?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -217,7 +217,6 @@\n \t    (and (match_test \"mode == SImode\")\n \t\t (and (match_test \"!TARGET_ATOMIC_HARD_LLCS\")\n \t\t      (match_test \"!TARGET_SH4A || TARGET_ATOMIC_STRICT\"))\n-\t\t (match_operand 0 \"displacement_mem_operand\")\n \t\t (match_operand 0 \"short_displacement_mem_operand\")))))\n \n (define_expand \"atomic_compare_and_swap<mode>\"\n@@ -707,7 +706,6 @@\n \t    (and (match_test \"mode == SImode\")\n \t\t (match_test \"TARGET_ATOMIC_SOFT_GUSA\n \t\t\t      && (!TARGET_SH4A || TARGET_ATOMIC_STRICT)\")\n-\t\t (match_operand 0 \"displacement_mem_operand\")\n \t\t (match_operand 0 \"short_displacement_mem_operand\"))\n \t    (and (ior (match_test \"(TARGET_ATOMIC_SOFT_TCB\n \t\t\t\t    || TARGET_ATOMIC_SOFT_IMASK)\n@@ -716,8 +714,7 @@\n \t\t\t\t    || TARGET_ATOMIC_SOFT_IMASK)\n \t\t\t\t   && TARGET_SH4A && !TARGET_ATOMIC_STRICT\n \t\t\t\t   && mode != SImode\"))\n-\t\t (ior (and (match_operand 0 \"displacement_mem_operand\")\n-\t\t\t   (match_operand 0 \"short_displacement_mem_operand\"))\n+\t\t (ior (match_operand 0 \"short_displacement_mem_operand\")\n \t\t      (match_operand 0 \"gbr_address_mem\"))))))\n \n (define_expand \"atomic_fetch_<fetchop_name><mode>\""}, {"sha": "d0db874f219891bd106684b1a9a8a28e4086aad8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -1,3 +1,8 @@\n+2015-03-23  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/65505\n+\t* gcc.target/sh/torture/pr65505.c: New.\n+\n 2015-03-23  Martin Sebor  <msebor@redhat.com>\n \n \tPR testsuite/63175"}, {"sha": "3e930027094a366a9dafb247263eb2427f04f49c", "filename": "gcc/testsuite/gcc.target/sh/torture/pr65505.c", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr65505.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21f65dc872f5b746181d6e78f8be9f7ecb625292/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr65505.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Ftorture%2Fpr65505.c?ref=21f65dc872f5b746181d6e78f8be9f7ecb625292", "patch": "@@ -0,0 +1,122 @@\n+/* { dg-do compile }  */\n+/* { dg-additional-options \"-std=gnu99\" }  */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m5*\" } { \"\" } }  */\n+\n+struct thread_info {\n+ struct task_struct *task;\n+};\n+\n+static inline __attribute__((always_inline))\n+              __attribute__((no_instrument_function))\n+struct thread_info *current_thread_info(void)\n+{\n+ struct thread_info *ti;\n+\n+ unsigned long __dummy;\n+\n+ __asm__ __volatile__ (\n+  \"mov\tr15, %0\\n\\t\"\n+  \"and\t%1, %0\\n\\t\"\n+  : \"=&r\" (ti), \"=r\" (__dummy)\n+  : \"1\" (~((1 << 13) - 1))\n+  : \"memory\");\n+\n+ return ti;\n+}\n+\n+typedef struct seqcount {\n+ unsigned sequence;\n+} seqcount_t;\n+\n+struct inode;\n+\n+struct dentry {\n+ seqcount_t d_seq;\n+ struct inode *d_inode;\n+};\n+\n+struct path {\n+ struct vfsmount *mnt;\n+ struct dentry *dentry;\n+};\n+\n+struct file {\n+ struct path f_path;\n+} __attribute__((aligned(4)));\n+\n+struct task_struct\n+{\n+ int link_count, total_link_count;\n+ struct fs_struct *fs;\n+};\n+\n+struct fd {\n+ struct file *file;\n+ unsigned int flags;\n+};\n+\n+static inline __attribute__((always_inline))\n+              __attribute__((no_instrument_function))\n+struct fd\n+fdget_raw(unsigned int fd)\n+{\n+  return (struct fd){(struct file *)(fd & ~3),fd & 3};\n+}\n+\n+\n+struct fs_struct;\n+\n+struct nameidata {\n+ struct path path;\n+ struct path root;\n+ struct inode *inode;\n+ unsigned int flags;\n+ unsigned seq, m_seq;\n+ struct file *base;\n+};\n+\n+int read_seqcount_retry(const seqcount_t *s, unsigned start);\n+\n+int\n+path_init(int dfd, const char *name, unsigned int flags,\n+          struct nameidata *nd)\n+{\n+ int retval = 0;\n+\n+ if (*name=='/') {\n+  nd->path = nd->root;\n+ } else if (dfd == -100) {\n+\n+  if (flags & 0x0040) {\n+   struct fs_struct *fs = (current_thread_info()->task)->fs;\n+  }\n+ } else {\n+\n+  struct fd f = fdget_raw(dfd);\n+  struct dentry *dentry;\n+\n+  if (!f.file)\n+   return -9;\n+\n+  dentry = f.file->f_path.dentry;\n+\n+  nd->path = f.file->f_path;\n+  if (flags & 0x0040) {\n+   if (f.flags & 1)\n+    nd->base = f.file;\n+  }\n+ }\n+\n+ nd->inode = nd->path.dentry->d_inode;\n+ if (!(flags & 0x0040))\n+  goto done;\n+ if (__builtin_expect(!!(!read_seqcount_retry(&nd->path.dentry->d_seq, nd->seq)), 1))\n+  goto done;\n+ if (!(nd->flags & 0x2000))\n+  nd->root.mnt = ((void *)0);\n+\n+ return -10;\n+done:\n+ (current_thread_info()->task)->total_link_count = 0;\n+ return 0;\n+}"}]}