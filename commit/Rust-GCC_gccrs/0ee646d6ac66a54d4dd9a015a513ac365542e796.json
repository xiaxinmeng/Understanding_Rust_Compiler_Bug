{"sha": "0ee646d6ac66a54d4dd9a015a513ac365542e796", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVlNjQ2ZDZhYzY2YTU0ZDRkZDlhMDE1YTUxM2FjMzY1NTQyZTc5Ng==", "commit": {"author": {"name": "Hosaka Yuji", "email": "hos@tamanegi.org", "date": "2003-12-04T17:51:17Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2003-12-04T17:51:17Z"}, "message": "many_win32.c: Include <float.h>.\n\n2003-12-04  Hosaka Yuji  <hos@tamanegi.org>\n\n\t* testsuite/libffi.call/many_win32.c: Include <float.h>.\n\t* testsuite/libffi.call/many_win32.c (main): Replace variable\n\tint i with unsigned long ul.\n\n\t* testsuite/libffi.call/cls_align_uint64.c: New test case.\n\t* testsuite/libffi.call/cls_align_sint64.c: Likewise.\n\t* testsuite/libffi.call/cls_align_uint32.c: Likewise.\n\t* testsuite/libffi.call/cls_align_sint32.c: Likewise.\n\t* testsuite/libffi.call/cls_align_uint16.c: Likewise.\n\t* testsuite/libffi.call/cls_align_sint16.c: Likewise.\n\t* testsuite/libffi.call/cls_align_float.c: Likewise.\n\t* testsuite/libffi.call/cls_align_double.c: Likewise.\n\t* testsuite/libffi.call/cls_align_longdouble.c: Likewise.\n\t* testsuite/libffi.call/cls_align_pointer.c: Likewise.\n\nFrom-SVN: r74282", "tree": {"sha": "bc0ac7c732cd59aaa2bbec56e16bc88ea4559194", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc0ac7c732cd59aaa2bbec56e16bc88ea4559194"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0ee646d6ac66a54d4dd9a015a513ac365542e796", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee646d6ac66a54d4dd9a015a513ac365542e796", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ee646d6ac66a54d4dd9a015a513ac365542e796", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ee646d6ac66a54d4dd9a015a513ac365542e796/comments", "author": null, "committer": null, "parents": [{"sha": "40779a725ef76fe738ccf876272613ed4c380c8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40779a725ef76fe738ccf876272613ed4c380c8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40779a725ef76fe738ccf876272613ed4c380c8c"}], "stats": {"total": 1000, "additions": 999, "deletions": 1}, "files": [{"sha": "988527c2536816cdaa60ffb0f0aabe394e25d18c", "filename": "libffi/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -1,3 +1,20 @@\n+2003-12-04  Hosaka Yuji  <hos@tamanegi.org>\n+\n+\t* testsuite/libffi.call/many_win32.c: Include <float.h>.\n+\t* testsuite/libffi.call/many_win32.c (main): Replace variable\n+\tint i with unsigned long ul.\n+\n+\t* testsuite/libffi.call/cls_align_uint64.c: New test case.\n+\t* testsuite/libffi.call/cls_align_sint64.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_uint32.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_sint32.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_uint16.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_sint16.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_float.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_double.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_longdouble.c: Likewise.\n+\t* testsuite/libffi.call/cls_align_pointer.c: Likewise.\n+\n 2003-12-02  Hosaka Yuji  <hos@tamanegi.org>\n \n \tPR other/13221"}, {"sha": "826b6a81189af07c2a92ff8c85c31b3900256cdf", "filename": "libffi/testsuite/libffi.call/cls_align_double.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_double.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_double.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_double.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  double b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %g %d %d %g %d: %d %g %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_double;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "6deff30babcf228fcfa7388ac7362f95fcf5c416", "filename": "libffi/testsuite/libffi.call/cls_align_float.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_float.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_float.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_float.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of float.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  float b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %g %d %d %g %d: %d %g %d\\n\", a1.a, (double)a1.b, a1.c, a2.a, (double)a2.b, a2.c, result.a, (double)result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_float;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, (double)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, (double)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "a4c33481c8a95b711131347c016cf9e7bd486734", "filename": "libffi/testsuite/libffi.call/cls_align_longdouble.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_longdouble.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of long double.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  long double b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %g %d %d %g %d: %d %g %d\\n\", a1.a, (double)a1.b, a1.c, a2.a, (double)a2.b, a2.c, result.a, (double)result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_longdouble;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, (double)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %g %d\\n\", res_dbl.a, (double)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "24eaa9f0a082635162f8a8af6a504d8cb528ea0b", "filename": "libffi/testsuite/libffi.call/cls_align_pointer.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_pointer.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of pointer.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  void *b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = (void *)((int)a1.b + (int)a2.b);\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, (int)a1.b, a1.c, a2.a, (int)a2.b, a2.c, result.a, (int)result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, (void *)4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, (void *)9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_pointer;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, (int)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, (int)res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "611d5a3272a03bbe19074ef11c5db8b977931994", "filename": "libffi/testsuite/libffi.call/cls_align_sint16.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint16.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of sint16.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  signed short b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_sint16;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "fcfae033d8f746b3f9b7bdace07eaa4e7bf5af1c", "filename": "libffi/testsuite/libffi.call/cls_align_sint32.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint32.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of sint32.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  signed int b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_sint32;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "fd88e7c7b84304afd60927f1cb28b301729231a8", "filename": "libffi/testsuite/libffi.call/cls_align_sint64.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_sint64.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of sint64.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  signed long long b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %lld %d %d %lld %d: %d %lld %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_sint64;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %lld %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %lld %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "bad9cd8832d5f9437c06deb58b2ae1837955f368", "filename": "libffi/testsuite/libffi.call/cls_align_uint16.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint16.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of uint16.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  unsigned short b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_uint16;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "d6d0fe033d3cfd54c9bd252ad451b9cb6ce0b714", "filename": "libffi/testsuite/libffi.call/cls_align_uint32.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint32.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of uint32.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  unsigned int b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %d %d %d %d %d: %d %d %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_uint32;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %d %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "69dc7b522114687775bb7954c78cb71269b7c680", "filename": "libffi/testsuite/libffi.call/cls_align_uint64.c", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fcls_align_uint64.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -0,0 +1,98 @@\n+/* Area:\tffi_call, closure_call\n+   Purpose:\tCheck structure alignment of uint64.\n+   Limitations:\tnone.\n+   PR:\t\tnone.\n+   Originator:\t<hos@tamanegi.org> 20031203\t */\n+\n+/* { dg-do run { xfail mips*-*-* arm*-*-* strongarm*-*-* xscale*-*-* } } */\n+#include \"ffitest.h\"\n+\n+typedef struct cls_struct_align {\n+  unsigned char a;\n+  unsigned long long b;\n+  unsigned char c;\n+} cls_struct_align;\n+\n+cls_struct_align cls_struct_align_fn(struct cls_struct_align a1,\n+\t\t\t    struct cls_struct_align a2)\n+{\n+  struct cls_struct_align result;\n+\n+  result.a = a1.a + a2.a;\n+  result.b = a1.b + a2.b;\n+  result.c = a1.c + a2.c;\n+\n+  printf(\"%d %lld %d %d %lld %d: %d %lld %d\\n\", a1.a, a1.b, a1.c, a2.a, a2.b, a2.c, result.a, result.b, result.c);\n+\n+  return  result;\n+}\n+\n+static void\n+cls_struct_align_gn(ffi_cif* cif, void* resp, void** args, void* userdata)\n+{\n+\n+  struct cls_struct_align a1, a2;\n+\n+  a1 = *(struct cls_struct_align*)(args[0]);\n+  a2 = *(struct cls_struct_align*)(args[1]);\n+\n+  *(cls_struct_align*)resp = cls_struct_align_fn(a1, a2);\n+}\n+\n+int main (void)\n+{\n+  ffi_cif cif;\n+#ifndef USING_MMAP\n+  static ffi_closure cl;\n+#endif\n+  ffi_closure *pcl;\n+  void* args_dbl[5];\n+  ffi_type* cls_struct_fields[4];\n+  ffi_type cls_struct_type;\n+  ffi_type* dbl_arg_types[5];\n+\n+#ifdef USING_MMAP\n+  pcl = allocate_mmap (sizeof(ffi_closure));\n+#else\n+  pcl = &cl;\n+#endif\n+\n+  cls_struct_type.size = 0;\n+  cls_struct_type.alignment = 0;\n+  cls_struct_type.type = FFI_TYPE_STRUCT;\n+  cls_struct_type.elements = cls_struct_fields;\n+\n+  struct cls_struct_align g_dbl = { 12, 4951, 127 };\n+  struct cls_struct_align f_dbl = { 1, 9320, 13 };\n+  struct cls_struct_align res_dbl;\n+\n+  cls_struct_fields[0] = &ffi_type_uchar;\n+  cls_struct_fields[1] = &ffi_type_uint64;\n+  cls_struct_fields[2] = &ffi_type_uchar;\n+  cls_struct_fields[3] = NULL;\n+\n+  dbl_arg_types[0] = &cls_struct_type;\n+  dbl_arg_types[1] = &cls_struct_type;\n+  dbl_arg_types[2] = NULL;\n+\n+  CHECK(ffi_prep_cif(&cif, FFI_DEFAULT_ABI, 2, &cls_struct_type,\n+\t\t     dbl_arg_types) == FFI_OK);\n+\n+  args_dbl[0] = &g_dbl;\n+  args_dbl[1] = &f_dbl;\n+  args_dbl[2] = NULL;\n+\n+  ffi_call(&cif, FFI_FN(cls_struct_align_fn), &res_dbl, args_dbl);\n+  /* { dg-output \"12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %lld %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  CHECK(ffi_prep_closure(pcl, &cif, cls_struct_align_gn, NULL) == FFI_OK);\n+\n+  res_dbl = ((cls_struct_align(*)(cls_struct_align, cls_struct_align))(pcl))(g_dbl, f_dbl);\n+  /* { dg-output \"\\n12 4951 127 1 9320 13: 13 14271 140\" } */\n+  printf(\"res: %d %lld %d\\n\", res_dbl.a, res_dbl.b, res_dbl.c);\n+  /* { dg-output \"\\nres: 13 14271 140\" } */\n+\n+  exit(0);\n+}"}, {"sha": "7cb5336780220777ad99e6808f474aed405f74ae", "filename": "libffi/testsuite/libffi.call/many_win32.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fmany_win32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0ee646d6ac66a54d4dd9a015a513ac365542e796/libffi%2Ftestsuite%2Flibffi.call%2Fmany_win32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Ftestsuite%2Flibffi.call%2Fmany_win32.c?ref=0ee646d6ac66a54d4dd9a015a513ac365542e796", "patch": "@@ -7,6 +7,7 @@\n /* { dg-do run { target i?86-*-cygwin* i?86-*-mingw* } } */\n \n #include \"ffitest.h\"\n+#include <float.h>\n \n static float __attribute__((stdcall)) stdcall_many(float f1,\n \t\t\t\t\t\t   float f2,\n@@ -32,7 +33,7 @@ int main (void)\n   void *values[13];\n   float fa[13];\n   float f, ff;\n-  int i;\n+  unsigned long ul;\n   \n   for (ul = 0; ul < 13; ul++)\n     {"}]}