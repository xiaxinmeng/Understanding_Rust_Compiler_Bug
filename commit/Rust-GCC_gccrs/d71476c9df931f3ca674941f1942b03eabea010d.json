{"sha": "d71476c9df931f3ca674941f1942b03eabea010d", "node_id": "C_kwDOANBUbNoAKGQ3MTQ3NmM5ZGY5MzFmM2NhNjc0OTQxZjE5NDJiMDNlYWJlYTAxMGQ", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-10T18:00:00Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:49Z"}, "message": "libstdc++: Add utility for creating std::error_code from OS errors\n\nThis adds a helper function to encapsulate obtaining an error code for\nerrors from OS calls. For Windows we want to use GetLastError() and the\nsystem error category, but otherwise just use errno and the generic\nerror category.\n\nThis should not be used to replace existing uses of\nec.assign(errno, generic_category()) because in those cases we really do\nwant to get the value of errno, not a system-specific error. Only the\ncases that currently use GetLastError() are replace by this new\nfunction.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/filesystem/ops-common.h (last_error): New helper function.\n\t(filesystem::do_space): Use last_error().\n\t* src/c++17/fs_ops.cc (fs::absolute, fs::create_hard_link)\n\t(fs::equivalent, fs::remove, fs::temp_directory_path): Use\n\tlast_error().\n\t* src/filesystem/ops.cc (fs::create_hard_link)\n\t(fs::remove, fs::temp_directory_path): Likewise.", "tree": {"sha": "33076cef361719f15219ea8cd2b9f32b28996e9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/33076cef361719f15219ea8cd2b9f32b28996e9c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d71476c9df931f3ca674941f1942b03eabea010d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71476c9df931f3ca674941f1942b03eabea010d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d71476c9df931f3ca674941f1942b03eabea010d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d71476c9df931f3ca674941f1942b03eabea010d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a09bb4a852f82af02b3f965358cd44b0aa266a5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a09bb4a852f82af02b3f965358cd44b0aa266a5b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a09bb4a852f82af02b3f965358cd44b0aa266a5b"}], "stats": {"total": 30, "additions": 21, "deletions": 9}, "files": [{"sha": "4f3715bbbec07b5b3b7851e68e514c07eae38384", "filename": "libstdc++-v3/src/c++17/fs_ops.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_ops.cc?ref=d71476c9df931f3ca674941f1942b03eabea010d", "patch": "@@ -113,7 +113,7 @@ fs::absolute(const path& p, error_code& ec)\n   while (len > buf.size());\n \n   if (len == 0)\n-    ec.assign((int)GetLastError(), std::system_category());\n+    ec = __last_system_error();\n   else\n     {\n       buf.resize(len);\n@@ -682,7 +682,7 @@ fs::create_hard_link(const path& to, const path& new_hard_link,\n   if (CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))\n     ec.clear();\n   else\n-    ec.assign((int)GetLastError(), system_category());\n+    ec = __last_system_error();\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -874,12 +874,12 @@ fs::equivalent(const path& p1, const path& p2, error_code& ec) noexcept\n       if (!h1 || !h2)\n \t{\n \t  if (!h1 && !h2)\n-\t    ec.assign((int)GetLastError(), system_category());\n+\t    ec = __last_system_error();\n \t  return false;\n \t}\n       if (!h1.get_info() || !h2.get_info())\n \t{\n-\t  ec.assign((int)GetLastError(), system_category());\n+\t  ec = __last_system_error();\n \t  return false;\n \t}\n       return h1.info.dwVolumeSerialNumber == h2.info.dwVolumeSerialNumber\n@@ -1255,7 +1255,7 @@ fs::remove(const path& p, error_code& ec) noexcept\n \t  return true;\n \t}\n       else if (!ec)\n-\tec.assign((int)GetLastError(), system_category());\n+\tec = __last_system_error();\n     }\n   else if (status_known(st))\n     ec.clear();"}, {"sha": "e999e11b422d161b449ab3726910b1f3948ed602", "filename": "libstdc++-v3/src/filesystem/ops-common.h", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops-common.h?ref=d71476c9df931f3ca674941f1942b03eabea010d", "patch": "@@ -57,6 +57,18 @@\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // Get the last OS error (for POSIX this is just errno).\n+  inline error_code\n+  __last_system_error() noexcept\n+  {\n+#ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n+    return {::GetLastError(), std::system_category()};\n+#else\n+    return {errno, std::generic_category()};\n+#endif\n+  }\n+\n namespace filesystem\n {\n namespace __gnu_posix\n@@ -558,7 +570,7 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n \tec.clear();\n       }\n     else\n-      ec.assign((int)GetLastError(), std::system_category());\n+      ec = std::last_system_error();\n #else\n     ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -583,7 +595,7 @@ _GLIBCXX_BEGIN_NAMESPACE_FILESYSTEM\n       } while (len > buf.size());\n \n     if (len == 0)\n-      ec.assign((int)GetLastError(), std::system_category());\n+      ec = __last_system_error();\n     else\n       ec.clear();\n "}, {"sha": "cc7117b0cd1b3e8723d83363d1f91e50e5764696", "filename": "libstdc++-v3/src/filesystem/ops.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d71476c9df931f3ca674941f1942b03eabea010d/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Ffilesystem%2Fops.cc?ref=d71476c9df931f3ca674941f1942b03eabea010d", "patch": "@@ -590,7 +590,7 @@ fs::create_hard_link(const path& to, const path& new_hard_link,\n   if (CreateHardLinkW(new_hard_link.c_str(), to.c_str(), NULL))\n     ec.clear();\n   else\n-    ec.assign((int)GetLastError(), system_category());\n+    ec = __last_system_error();\n #else\n   ec = std::make_error_code(std::errc::not_supported);\n #endif\n@@ -1062,7 +1062,7 @@ fs::remove(const path& p, error_code& ec) noexcept\n \t  return true;\n \t}\n       else if (!ec)\n-\tec.assign((int)GetLastError(), system_category());\n+\tec = __last_system_error();\n     }\n   else if (status_known(st))\n     ec.clear();"}]}