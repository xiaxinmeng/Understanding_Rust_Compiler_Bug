{"sha": "1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWNjMWFjN2YzNzVjMzRiYmQ3YWUxNjA1YzZmYzNmZjM3ZWJhYThhNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-06-03T21:09:25Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-06-03T21:09:25Z"}, "message": "re PR c++/44282 (fastcall is not mangled at all)\n\n\tPR c++/44282\n\t* mangle.c (mangle_decl): Always SET_IDENTIFIER_GLOBAL_VALUE.\n\t(write_CV_qualifiers_for_type): Set G.need_abi_warning.\n\t(decl_implicit_alias_p): Split out from maybe_remove_implicit_alias.\n\t* cp-tree.h (DECL_REALLY_EXTERN): Handle null DECL_LANG_SPECIFIC.\n\nFrom-SVN: r224101", "tree": {"sha": "6fe433ffcd80debde3c1abdac4a1b98a58a3ae21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fe433ffcd80debde3c1abdac4a1b98a58a3ae21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "82b544ad2569e54aeaf5b44d89e2693c9d7824dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82b544ad2569e54aeaf5b44d89e2693c9d7824dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82b544ad2569e54aeaf5b44d89e2693c9d7824dd"}], "stats": {"total": 82, "additions": 59, "deletions": 23}, "files": [{"sha": "a9be43a8ffc13894c2c7acc91a315ca38c0e7a45", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "patch": "@@ -1,3 +1,11 @@\n+2015-06-03  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/44282\n+\t* mangle.c (mangle_decl): Always SET_IDENTIFIER_GLOBAL_VALUE.\n+\t(write_CV_qualifiers_for_type): Set G.need_abi_warning.\n+\t(decl_implicit_alias_p): Split out from maybe_remove_implicit_alias.\n+\t* cp-tree.h (DECL_REALLY_EXTERN): Handle null DECL_LANG_SPECIFIC.\n+\n 2015-06-03  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Paolo Carlini  <paolo.carlini@oracle.com>\n "}, {"sha": "7690af77d8d0393a42c72748501d6ff3839a6532", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "patch": "@@ -4101,7 +4101,8 @@ more_aggr_init_expr_args_p (const aggr_init_expr_arg_iterator *iter)\n   (DECL_LANG_SPECIFIC (NODE)->u.base.not_really_extern)\n \n #define DECL_REALLY_EXTERN(NODE) \\\n-  (DECL_EXTERNAL (NODE) && ! DECL_NOT_REALLY_EXTERN (NODE))\n+  (DECL_EXTERNAL (NODE)\t\t\t\t\\\n+   && (!DECL_LANG_SPECIFIC (NODE) || !DECL_NOT_REALLY_EXTERN (NODE)))\n \n /* A thunk is a stub function.\n "}, {"sha": "cc5faf7755ed49105e9d973bc92a8970b58e7729", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "patch": "@@ -2205,10 +2205,6 @@ write_CV_qualifiers_for_type (const tree type)\n \n   /* Mangle attributes that affect type identity as extended qualifiers.\n \n-     We mangle them onto the obstack, then copy the result into a string\n-     vector and back up the obstack.  Once we've handled all of them we\n-     sort them and write them out in order.\n-\n      We don't do this with classes and enums because their attributes\n      are part of their definitions, not something added on.  */\n \n@@ -2246,6 +2242,8 @@ write_CV_qualifiers_for_type (const tree type)\n \t    }\n \n \t  ++num_qualifiers;\n+\t  if (abi_version_crosses (9))\n+\t    G.need_abi_warning = true;\n \t}\n     }\n \n@@ -3535,11 +3533,11 @@ get_mangled_id (tree decl)\n   return targetm.mangle_decl_assembler_name (decl, id);\n }\n \n-/* If DECL is a mangling alias, remove it from the symbol table and return\n-   true; otherwise return false.  */\n+/* If DECL is an implicit mangling alias, return its symtab node; otherwise\n+   return NULL.  */\n \n-bool\n-maybe_remove_implicit_alias (tree decl)\n+static symtab_node *\n+decl_implicit_alias_p (tree decl)\n {\n   if (DECL_P (decl) && DECL_ARTIFICIAL (decl)\n       && DECL_IGNORED_P (decl)\n@@ -3549,10 +3547,21 @@ maybe_remove_implicit_alias (tree decl)\n     {\n       symtab_node *n = symtab_node::get (decl);\n       if (n && n->cpp_implicit_alias)\n-\t{\n-\t  n->remove();\n-\t  return true;\n-\t}\n+\treturn n;\n+    }\n+  return NULL;\n+}\n+\n+/* If DECL is a mangling alias, remove it from the symbol table and return\n+   true; otherwise return false.  */\n+\n+bool\n+maybe_remove_implicit_alias (tree decl)\n+{\n+  if (symtab_node *n = decl_implicit_alias_p (decl))\n+    {\n+      n->remove();\n+      return true;\n     }\n   return false;\n }\n@@ -3592,21 +3601,38 @@ mangle_decl (const tree decl)\n     }\n   SET_DECL_ASSEMBLER_NAME (decl, id);\n \n-  if (G.need_abi_warning\n+  if (id != DECL_NAME (decl)\n+      && !DECL_REALLY_EXTERN (decl)\n       /* Don't do this for a fake symbol we aren't going to emit anyway.  */\n       && TREE_CODE (decl) != TYPE_DECL\n       && !DECL_MAYBE_IN_CHARGE_CONSTRUCTOR_P (decl)\n       && !DECL_MAYBE_IN_CHARGE_DESTRUCTOR_P (decl))\n     {\n+      bool set = false;\n+\n+      /* Check IDENTIFIER_GLOBAL_VALUE before setting to avoid redundant\n+\t errors from multiple definitions.  */\n+      tree d = IDENTIFIER_GLOBAL_VALUE (id);\n+      if (!d || decl_implicit_alias_p (d))\n+\t{\n+\t  set = true;\n+\t  SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n+\t}\n+\n+      if (!G.need_abi_warning)\n+\treturn;\n+\n       /* If the mangling will change in the future, emit an alias with the\n \t future mangled name for forward-compatibility.  */\n       int save_ver;\n       tree id2;\n \n-      SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n-      if (IDENTIFIER_GLOBAL_VALUE (id) != decl)\n-\tinform (DECL_SOURCE_LOCATION (decl), \"a later -fabi-version= (or =0) \"\n-\t\t\"avoids this error with a change in mangling\");\n+      if (!set)\n+\t{\n+\t  SET_IDENTIFIER_GLOBAL_VALUE (id, decl);\n+\t  inform (DECL_SOURCE_LOCATION (decl), \"a later -fabi-version= (or \"\n+\t\t  \"=0) avoids this error with a change in mangling\");\n+\t}\n \n       save_ver = flag_abi_version;\n       flag_abi_version = flag_abi_compat_version;"}, {"sha": "122d37390db7f50f0a0b9d651d93467df5030f0c", "filename": "gcc/testsuite/g++.dg/abi/mangle-regparm.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle-regparm.C?ref=1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "patch": "@@ -1,10 +1,11 @@\n // { dg-do run { target { { i?86-*-* x86_64-*-* } && ia32 } } }\n+// { dg-options \"-Wabi=8\" }\n // { dg-final { scan-assembler \"_Z18IndirectExternCallIPU7stdcallU7regparmILi3EEFviiEiEvT_T0_S3_\" } }\n \n typedef __SIZE_TYPE__ size_t;\n \n template <typename F, typename T>\n-void IndirectExternCall(F f, T t1, T t2) {\n+void IndirectExternCall(F f, T t1, T t2) { // { dg-warning \"mangled name\" }\n   typedef F (*WrapF)(F);\n   f (t1, t2);\n }"}, {"sha": "d2c90b43a2d415870caaef007439d77d7fa31c06", "filename": "gcc/testsuite/g++.dg/abi/mangle58.C", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fmangle58.C?ref=1cc1ac7f375c34bbd7ae1605c6fc3ff37ebaa8a4", "patch": "@@ -6,13 +6,13 @@ struct B {\n   template<typename T> static int cmp1(T a, T b);\n   static int cmp2(char a, char b);\n   // { dg-final { scan-assembler \"_ZN1B1fIcEEvR1AIT_X4cmp1EE\" } }\n-  template <typename T> static void f (A<T,cmp1> &);\n+  template <typename T> static void f (A<T,cmp1> &) {}\n   // { dg-final { scan-assembler \"_ZN1B1gIcEEvR1AIT_XsrS_4cmp1EE\" } }\n-  template <typename T> static void g (A<T,B::cmp1> &);\n+  template <typename T> static void g (A<T,B::cmp1> &) {}\n   // { dg-final { scan-assembler \"_ZN1B1fIcEEvR1AIT_L_ZNS_4cmp2EccEE\" } }\n-  template <typename T> static void f (A<T,cmp2> &); // { dg-warning \"mangle\" }\n+  template <typename T> static void f (A<T,cmp2> &) {} // { dg-warning \"mangle\" }\n   // { dg-final { scan-assembler \"_ZN1B1gIcEEvR1AIT_L_ZNS_4cmp2EccEE\" } }\n-  template <typename T> static void g (A<T,B::cmp2> &); // { dg-warning \"mangle\" }\n+  template <typename T> static void g (A<T,B::cmp2> &) {} // { dg-warning \"mangle\" }\n };\n \n void g()"}]}