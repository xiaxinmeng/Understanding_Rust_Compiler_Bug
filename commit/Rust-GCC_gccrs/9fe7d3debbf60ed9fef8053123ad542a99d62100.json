{"sha": "9fe7d3debbf60ed9fef8053123ad542a99d62100", "node_id": "C_kwDOANBUbNoAKDlmZTdkM2RlYmJmNjBlZDlmZWY4MDUzMTIzYWQ1NDJhOTlkNjIxMDA", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-12-10T21:11:41Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2022-12-12T19:10:25Z"}, "message": "d: Fix undefined reference to nested lambda in template (PR108055)\n\nSometimes, nested lambdas of templated functions get no code generation\ndue to them being marked as instantianted outside of all modules being\ncompiled in the current compilation unit.  This despite enclosing\ntemplate instances being marked as instantiated inside the current\ncompilation unit.  To fix, all enclosing templates are now checked in\n`function_defined_in_root_p'.\n\nBecause of this change, `function_needs_inline_definition_p' has also\nbeen fixed up to only check whether the regular function definition\nitself is to be emitted in the current compilation unit.\n\n\tPR d/108055\n\ngcc/d/ChangeLog:\n\n\t* decl.cc (function_defined_in_root_p): Check all enclosing template\n\tinstances for definition in a root module.\n\t(function_needs_inline_definition_p): Replace call to\n\tfunction_defined_in_root_p with test for outer module `isRoot'.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/torture/imports/pr108055conv.d: New.\n\t* gdc.dg/torture/imports/pr108055spec.d: New.\n\t* gdc.dg/torture/imports/pr108055write.d: New.\n\t* gdc.dg/torture/pr108055.d: New test.", "tree": {"sha": "1d955d496d79e4daa1b37bb1d6a89f6592a14681", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d955d496d79e4daa1b37bb1d6a89f6592a14681"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fe7d3debbf60ed9fef8053123ad542a99d62100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe7d3debbf60ed9fef8053123ad542a99d62100", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fe7d3debbf60ed9fef8053123ad542a99d62100", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fe7d3debbf60ed9fef8053123ad542a99d62100/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d7c73ee5eae47eee16ddab3df2928ff5a7dd89c"}], "stats": {"total": 89, "additions": 84, "deletions": 5}, "files": [{"sha": "35081083cd6f33e8d02169581448cc85b707a239", "filename": "gcc/d/decl.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Fd%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Fd%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fdecl.cc?ref=9fe7d3debbf60ed9fef8053123ad542a99d62100", "patch": "@@ -1028,7 +1028,8 @@ build_decl_tree (Dsymbol *d)\n   input_location = saved_location;\n }\n \n-/* Returns true if function FD is defined or instantiated in a root module.  */\n+/* Returns true if function FD, or any lexically enclosing scope function of FD\n+   is defined or instantiated in a root module.  */\n \n static bool\n function_defined_in_root_p (FuncDeclaration *fd)\n@@ -1037,9 +1038,11 @@ function_defined_in_root_p (FuncDeclaration *fd)\n   if (md && md->isRoot ())\n     return true;\n \n-  TemplateInstance *ti = fd->isInstantiated ();\n-  if (ti && ti->minst && ti->minst->isRoot ())\n-    return true;\n+  for (TemplateInstance *ti = fd->isInstantiated (); ti != NULL; ti = ti->tinst)\n+    {\n+      if (ti->minst && ti->minst->isRoot ())\n+\treturn true;\n+    }\n \n   return false;\n }\n@@ -1067,7 +1070,8 @@ function_needs_inline_definition_p (FuncDeclaration *fd)\n \n   /* Check whether function will be regularly defined later in the current\n      translation unit.  */\n-  if (function_defined_in_root_p (fd))\n+  Module *md = fd->getModule ();\n+  if (md && md->isRoot ())\n     return false;\n \n   /* Non-inlineable functions are always external.  */"}, {"sha": "93ebba747b17d9694161caa180d4b910a0a47f12", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr108055conv.d", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055conv.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055conv.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055conv.d?ref=9fe7d3debbf60ed9fef8053123ad542a99d62100", "patch": "@@ -0,0 +1,26 @@\n+module imports.pr108055conv;\n+\n+T toStr(T, S)(S src)\n+{\n+    static if (is(typeof(T.init[0]) E))\n+    {\n+        struct Appender\n+        {\n+            inout(E)[] data;\n+        }\n+\n+        import imports.pr108055spec;\n+        import imports.pr108055write;\n+\n+        auto w = Appender();\n+        FormatSpec!E f;\n+        formatValue(w, src, f);\n+        return w.data;\n+    }\n+}\n+\n+T to(T, A)(A args)\n+{\n+    return toStr!T(args);\n+}\n+"}, {"sha": "801c581051621eba645effc9f402b39f32f43905", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr108055spec.d", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055spec.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055spec.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055spec.d?ref=9fe7d3debbf60ed9fef8053123ad542a99d62100", "patch": "@@ -0,0 +1,18 @@\n+module imports.pr108055spec;\n+\n+template Unqual(T : const U, U)\n+{\n+    alias Unqual = U;\n+}\n+\n+template FormatSpec(Char)\n+if (!is(Unqual!Char == Char))\n+{\n+    alias FormatSpec = FormatSpec!(Unqual!Char);\n+}\n+\n+struct FormatSpec(Char)\n+if (is(Unqual!Char == Char))\n+{\n+    const(Char)[] nested;\n+}"}, {"sha": "fe41d7baa7cfed0eba81b31f6b85fc5953485364", "filename": "gcc/testsuite/gdc.dg/torture/imports/pr108055write.d", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055write.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055write.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fimports%2Fpr108055write.d?ref=9fe7d3debbf60ed9fef8053123ad542a99d62100", "patch": "@@ -0,0 +1,19 @@\n+module imports.pr108055write;\n+import imports.pr108055spec;\n+\n+void formatValueImpl(Writer, T, Char)(ref Writer , const(T) ,\n+                                      scope const ref FormatSpec!Char )\n+{\n+    T val;\n+    char spec;\n+\n+    (ref val) @trusted {\n+        return (cast(const char*) &val)[0 .. val.sizeof];\n+    }(val);\n+\n+}\n+\n+void formatValue(Writer, T, Char)(Writer w, T val, Char f)\n+{\n+    formatValueImpl(w, val, f);\n+}"}, {"sha": "c4ffad26d1e3a67e4835e225a39f76649eb9856b", "filename": "gcc/testsuite/gdc.dg/torture/pr108055.d", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr108055.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fe7d3debbf60ed9fef8053123ad542a99d62100/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr108055.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Ftorture%2Fpr108055.d?ref=9fe7d3debbf60ed9fef8053123ad542a99d62100", "patch": "@@ -0,0 +1,12 @@\n+// { dg-do link }\n+// { dg-additional-files \"imports/pr108055conv.d imports/pr108055spec.d imports/pr108055write.d\" }\n+// { dg-additional-options \"-I[srcdir] -fno-druntime\" }\n+import imports.pr108055conv;\n+\n+extern(C) int main()\n+{\n+    float zis;\n+    static if (is(typeof(to!string(&zis))))\n+        to!string(&zis);\n+    return 0;\n+}"}]}