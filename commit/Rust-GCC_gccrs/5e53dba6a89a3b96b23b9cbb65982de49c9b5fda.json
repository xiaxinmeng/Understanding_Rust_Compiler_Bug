{"sha": "5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWU1M2RiYTZhODlhM2I5NmIyM2I5Y2JiNjU5ODJkZTQ5YzliNWZkYQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-29T22:32:30Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-29T22:32:30Z"}, "message": "configure.in: Simplify use of AC_CACHE_SAVE.\n\n\n2000-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.in: Simplify use of AC_CACHE_SAVE.  Put linked files\n\tin $(top_builddir)/include/bits, not $(top_builddir)/bits, to help\n\twith libgcj build issues and improve consistency with the source\n\tdirectory's include directory setup.\n\t* configure: Regenerate.\n\t* acinclude.m4: Same here.\n\t* aclocal.m4: Regenerate.\n\t* mknumeric_limits (OUT_H): Also change paths here.\n\t* mkcheck.in (C_DIR): And here.\n\t* mkc++config (OUT_H): And here.\n\t* libmath/Makefile.am (INCLUDES): And here.\n\t* src/Makefile.am (INCLUDES): Change to $(top_builddir)/include.\n\t* libio/Makefile.am: Ditto.\n\t* libsupc++/Makefile.am (INCLUDES): Ditto.\n\nFrom-SVN: r37134", "tree": {"sha": "9ac810abde498017fb5175ecb2bb43e209946fc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9ac810abde498017fb5175ecb2bb43e209946fc1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/comments", "author": null, "committer": null, "parents": [{"sha": "37ab89b9cf948efe11e7f3a44e02ddc62842de50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37ab89b9cf948efe11e7f3a44e02ddc62842de50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37ab89b9cf948efe11e7f3a44e02ddc62842de50"}], "stats": {"total": 2239, "additions": 1107, "deletions": 1132}, "files": [{"sha": "0c31a82f8b57643dd5ff3704a4fff576a15b226c", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 37, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -1,3 +1,27 @@\n+2000-10-29   Mark Harig <mharig@landmark.com>\n+\n+\t* src/Makefile.am: Change logic for include dir options.\n+\t* src/Makefile.in: Regenerate.\n+\t* libsupc++/Makefile.am: Ditto.\n+\t* libsupc++/Makefile.in: Regenerate.\n+\t\n+2000-10-29  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.in: Simplify use of AC_CACHE_SAVE.  Put linked files\n+\tin $(top_builddir)/include/bits, not $(top_builddir)/bits, to help\n+\twith libgcj build issues and improve consistency with the source\n+\tdirectory's include directory setup.\n+\t* configure: Regenerate.\n+\t* acinclude.m4: Same here.\n+\t* aclocal.m4: Regenerate.\n+\t* mknumeric_limits (OUT_H): Also change paths here.\n+\t* mkcheck.in (C_DIR): And here.\n+\t* mkc++config (OUT_H): And here.\n+\t* libmath/Makefile.am (INCLUDES): And here.\n+\t* src/Makefile.am (INCLUDES): Change to $(top_builddir)/include.\n+\t* libio/Makefile.am: Ditto.\n+\t* libsupc++/Makefile.am (INCLUDES): Ditto.\n+\n 2000-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* config/c_io_libio.cc (basic_file<char>::__basic_file): \n@@ -219,43 +243,6 @@\n \t* include/c_std/bits/std_cstdlib.h: abort, exit comment.\n \t* include/c_std/stdlib.h: Same here.\n \t\n-2000-10-23  Benjamin Kosnik  <bkoz@redhat.com>\n-\n-\t* testsuite/21_strings/compare.cc (test01): Add using declarations.\n-\n-\t* include/c_std/bits/std_cerrno.h: And here.\n-\t* include/c_std/bits/std_cassert.h: Tweaks.\n-\n-\t* mkcheck.in: Simplify.\n-\t\n-\t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): Simplify.\n-\t(GLIBCPP_ENABLE_LONG_LONG): Same.\n-\t* aclocal.m4: Regenerate.\n-\n-\t* src/Makefile.am (c_shadow_headers): Add features.h,\n-\tbits/wrap_features.h.\n-\t* src/Makefile.in: Regenerate.\n-\t* include/c_std/features.h: New file.\n-\t* include/c_std/bits/wrap_features.h (_CPP_WRAP_FEATURES_H): New\n-\tfile. Need to have c++config.h included before this file so\n-\t_ISOC99_SOURCE around.\n-\n-\t* include/c_std/sys/cdefs.h: Hack.\n-\t* include/c_std/stdlib.h: Same, use c++config.h.\n-\t* include/c_std/bits/std_cstdlib.h: Use _GLIBCPP_HAVE_STRTOLD.\n-\n-\t* include/c_std/bits/std_cassert.h: Fix.\n-\t* include/c_std/bits/std_cerrno.h: Make consistent.\n-\n-\t* include/c_std/bits/std_csetjmp.h (setjmp): Unscope global\n-\tdeclaration from ::_C_legacy to _C_legacy.\n-\n-\t* include/c_std/bits/std_cstdio.h: same with printf.\n-\t* include/c_std/stdio.h: And here.\n-\n-\t* include/c_std/bits/std_cstdlib.h: abort, exit comment.\n-\t* include/c_std/stdlib.h: Same here.\n-\t\n 2000-10-21  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_ENABLE_LONG_DOUBLE): New macro."}, {"sha": "1c8ae92a6c9e021266590f7a652309e767ec7254", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -821,7 +821,7 @@ AC_DEFUN(GLIBCPP_CHECK_OS, [\n         ;;\n     esac\n     AC_MSG_RESULT($os_include_dir)\n-    AC_LINK_FILES($os_include_dir/bits/os_defines.h, bits/os_defines.h)\n+    AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n \n@@ -972,10 +972,12 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n \n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, bits/ctype_inline.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n+    include/bits/ctype_base.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \n+    include/bits/ctype_inline.h)\n     AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-    bits/ctype_noninline.h)\n+    include/bits/ctype_noninline.h)\n   ])\n ])\n \n@@ -1335,7 +1337,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n-  AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n+  AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n \n   # 2000-08-04 bkoz hack\n@@ -1409,7 +1411,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   esac\n   AC_MSG_RESULT($THREADH)\n \n-  AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n+  AC_LINK_FILES(config/$THREADH, include/bits/c++threads.h)\n   if test $THREADH != threads-no.h; then\n     AC_DEFINE(_GLIBCPP_USE_THREADS)\n   fi\n@@ -1436,7 +1438,7 @@ AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n         ;;\n     esac\n     AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n-    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n+    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n ])\n \n "}, {"sha": "d2f4a14fd84ca06deeee030d2154a3ffc4a346c7", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -833,7 +833,7 @@ AC_DEFUN(GLIBCPP_CHECK_OS, [\n         ;;\n     esac\n     AC_MSG_RESULT($os_include_dir)\n-    AC_LINK_FILES($os_include_dir/bits/os_defines.h, bits/os_defines.h)\n+    AC_LINK_FILES($os_include_dir/bits/os_defines.h, include/bits/os_defines.h)\n ])\n \n \n@@ -984,10 +984,12 @@ AC_DEFUN(GLIBCPP_CHECK_CTYPE_SUPPORT, [\n       AC_MSG_WARN(\"Using default ctype headers.\")\n     fi\n \n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n-    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, bits/ctype_inline.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n+    include/bits/ctype_base.h)\n+    AC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \n+    include/bits/ctype_inline.h)\n     AC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-    bits/ctype_noninline.h)\n+    include/bits/ctype_noninline.h)\n   ])\n ])\n \n@@ -1347,7 +1349,7 @@ AC_DEFUN(GLIBCPP_ENABLE_CSTDIO, [\n       exit 1\n       ;;\n   esac\n-  AC_LINK_FILES($CSTDIO_H, bits/c++io.h)\n+  AC_LINK_FILES($CSTDIO_H, include/bits/c++io.h)\n   AC_LINK_FILES($CSTDIO_CC, src/c++io.cc)\n \n   # 2000-08-04 bkoz hack\n@@ -1421,7 +1423,7 @@ AC_DEFUN(GLIBCPP_ENABLE_THREADS, [\n   esac\n   AC_MSG_RESULT($THREADH)\n \n-  AC_LINK_FILES(config/$THREADH, bits/c++threads.h)\n+  AC_LINK_FILES(config/$THREADH, include/bits/c++threads.h)\n   if test $THREADH != threads-no.h; then\n     AC_DEFINE(_GLIBCPP_USE_THREADS)\n   fi\n@@ -1448,7 +1450,7 @@ AC_DEFUN(GLIBCPP_ENABLE_ATOMICITY, [\n         ;;\n     esac\n     AC_MSG_RESULT($ATOMICITYH/bits/atomicity.h)\n-    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, bits/atomicity.h)\n+    AC_LINK_FILES($ATOMICITYH/bits/atomicity.h, include/bits/atomicity.h)\n ])\n \n "}, {"sha": "70c351d4c8ae6fd7f76eb1644a26ab0c35793ac4", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 995, "deletions": 1038, "changes": 2033, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda"}, {"sha": "5f1edb99a42d3918b30030bd66701be00ca18a2f", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -29,8 +29,6 @@ GLIBCPP_CHECK_COMPILER_VERSION\n GLIBCPP_CHECK_CPU\n GLIBCPP_CHECK_OS\n \n-AC_CACHE_SAVE\n-\n # Enable all the crazy c++ stuff.  C_MBCHAR must come early.\n GLIBCPP_ENABLE_DEBUG($USE_MAINTAINER_MODE)\n GLIBCPP_ENABLE_C_MBCHAR([yes])\n@@ -73,11 +71,12 @@ if test -n \"$with_cross_host\"; then\n \tAC_DEFINE(HAVE_MODF)\n \n \tctype_include_dir=\"config/os/wince\"\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n+\tinclude/bits/ctype_base.h)\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n-\tbits/ctype_inline.h)\n+\tinclude/bits/ctype_inline.h)\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-\tbits/ctype_noninline.h)\n+\tinclude/bits/ctype_noninline.h)\n \n \n \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n@@ -95,11 +94,12 @@ if test -n \"$with_cross_host\"; then\n \tAC_DEFINE(HAVE_ISINFF)\n \n \tctype_include_dir=\"config/os/newlib\"\n-\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, bits/ctype_base.h)\n+\tAC_LINK_FILES($ctype_include_dir/bits/ctype_base.h, \n+\tinclude/bits/ctype_base.h)\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_inline.h, \\\n-\tbits/ctype_inline.h)\n+\tinclude/bits/ctype_inline.h)\n \tAC_LINK_FILES($ctype_include_dir/bits/ctype_noninline.h, \\\n-\tbits/ctype_noninline.h)\n+\tinclude/bits/ctype_noninline.h)\n \n \tAC_DEFINE(_GLIBCPP_NEED_MBSTATE_T)\n \n@@ -129,7 +129,6 @@ else\n   GLIBCPP_CHECK_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_SUPPORT\n   GLIBCPP_CHECK_COMPLEX_MATH_COMPILER_SUPPORT\n-  AC_CACHE_SAVE\n   GLIBCPP_CHECK_WCHAR_T_SUPPORT\n   GLIBCPP_CHECK_CTYPE_SUPPORT\n   GLIBCPP_CHECK_STDLIB_SUPPORT\n@@ -143,6 +142,7 @@ AM_CONDITIONAL(NULL_TARGET, test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(NATIVE, test \"$NATIVE\" = yes || test \"$NULL_TARGET\" = yes)\n AM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")\n \n+AC_CACHE_SAVE\n AC_LC_MESSAGES\n \n if test \"${multilib}\" = \"yes\"; then\n@@ -214,6 +214,14 @@ fi\n GLIBCPP_EXPORT_INCLUDES\n GLIBCPP_EXPORT_FLAGS\n \n+# This should be done by mkincludedir, but hack around it now.\n+blddir=`pwd`\n+echo \"checking for $blddir/include\"\n+\n+if test ! -d \"$blddir/include\"; then\n+  mkdir \"$blddir/include\"\n+fi\n+\n # NB: Multilibs need MULTISUBDIR defined correctly in src/Makefile.am\n # so that multilib installs will end up installed in the correct\n # place. To work around this not being passed down from config-ml.in\n@@ -238,7 +246,6 @@ CXX=\"${CXX}\"\n )\n \n \n-blddir=`pwd`\n # Generate bits/c++config.h\n # NB: This must be the first generated file as others include it. . .\n AC_OUTPUT_COMMANDS([$srcdir/mkc++config $blddir $srcdir])\n@@ -253,8 +260,6 @@ fi\n # Sanity checking & User-visible messages.\n # Checks down here, otherwise they get scrolled off before\n # the user will notice.\n-### warnings removed; none were applicable anymore\n-\n \n # Trying to get more people to read documentation.  Possibly remove\n # check and warn all the time. There is no \"informational\" AC_MSG_"}, {"sha": "33b74e461124879ad72afa674dda28e763890d8f", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -1,3 +1,7 @@\n+2000-10-29  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am (INCLUDES): Change to $(top_builddir)/include.\n+\n 2000-10-29  Mark Mitchell  <mark@codesourcery.com>\n \n \t* iofopen.c (_IO_new_fopen): Don't define `_IO_wide_data wd'"}, {"sha": "92a8d5b7f6f42fa186c5bce39e5afca94184691b", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -36,7 +36,7 @@ CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\\n-\t-I$(top_builddir) -I$(GLIBCPP_INCLUDE_DIR) \\\n+\t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \\\n \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n libio_headers = \\"}, {"sha": "a250990484cfb30bdb56146d062029fc9c3c7fe5", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -118,7 +118,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-nostdinc++ \t-I$(top_builddir)/include -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n \n libio_headers =          libio.h libioP.h iolibio.h"}, {"sha": "03e904483a35f56cc01947c9fe0f5479c17d8c68", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -59,7 +59,9 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n+INCLUDES = \\\n+\t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \\\n+\t$(TOPLEVEL_INCLUDES) \n \n \n "}, {"sha": "3f14dea0b1d80b298d35ffee705a8afd275587cf", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -134,7 +134,8 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n+INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR) -I$(top_builddir)/include  \t$(TOPLEVEL_INCLUDES) \n+\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h\n CONFIG_CLEAN_FILES = "}, {"sha": "a11a68125c5b952a5bc78e026046619f9a068565", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -104,12 +104,15 @@ libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 cygnus\n MAINT_CHARSET = latin1\n-@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+\n+# Cross compiler and multilib support.\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n # Need this library to both be part of libstdc++.a, and installed\n # separately too.\n@@ -141,7 +144,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)\n+INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)/include\n \n \n headers =  \tcxxabi.h exception new new.h typeinfo"}, {"sha": "b7a11a46da679f04425d698b4141679930cc89e6", "filename": "libstdc++-v3/mkc++config", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkc%2B%2Bconfig?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -21,15 +21,19 @@ fi\n \n BASE_H=\"$SRC_DIR/include/bits/c++config\"\n IN_H=\"$BUILD_DIR/config.h\"\n-OUT_H=\"$BUILD_DIR/bits/c++config.h\"\n+OUT_H=\"$BUILD_DIR/include/bits/c++config.h\"\n \n if [ ! -f $IN_H ]; then\n   echo \"necessary file $IN_H not found, exiting\"\n   exit 1\n fi\n \n-if [ ! -d \"$BUILD_DIR/bits\" ]; then\n-  mkdir  \"$BUILD_DIR/bits\"\n+if [ ! -d \"$BUILD_DIR/include\" ]; then\n+  mkdir  \"$BUILD_DIR/include\"\n+fi\n+\n+if [ ! -d \"$BUILD_DIR/include/bits\" ]; then\n+  mkdir  \"$BUILD_DIR/include/bits\"\n fi\n \n "}, {"sha": "ffc3b31b9189a10b6f884b9633edb3af6b9fda87", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -57,7 +57,7 @@ fi\n top_srcdir=@top_srcdir@\n C_DIR=\"`basename @C_INCLUDE_DIR@`\"\n if [ $WHICH != \"1\" ]; then\n-  INC_PATH=\"@CSHADOW_FLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio \\\n+  INC_PATH=\"@CSHADOW_FLAGS@ -I$BUILD_DIR/include -I$BUILD_DIR/libio \\\n     -I$SRC_DIR/include/std  -I$SRC_DIR/include/$C_DIR \\\n     -I$SRC_DIR/include -I$SRC_DIR/libsupc++ -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\""}, {"sha": "3eaf084bc75b7c95dc5e441c70e80e6530fecb9f", "filename": "libstdc++-v3/mknumeric_limits", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmknumeric_limits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fmknumeric_limits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmknumeric_limits?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -23,14 +23,19 @@ if [ ! -d \"$BUILD_DIR\" ]; then\n   exit 1\n fi\n \n-if [ ! -d \"$BUILD_DIR/bits\" ]; then\n-  mkdir  \"$BUILD_DIR/bits\"\n+if [ ! -d \"$BUILD_DIR/include\" ]; then\n+  mkdir  \"$BUILD_DIR/include\"\n fi\n+\n+if [ ! -d \"$BUILD_DIR/include/bits\" ]; then\n+  mkdir  \"$BUILD_DIR/include/bits\"\n+fi\n+\n if [ ! -d \"$BUILD_DIR/src\" ]; then\n   mkdir  \"$BUILD_DIR/src\"\n fi\n \n-OUT_H=\"$BUILD_DIR/bits/std_limits.h\"\n+OUT_H=\"$BUILD_DIR/include/bits/std_limits.h\"\n OUT_C=\"$BUILD_DIR/src/limitsMEMBERS.cc\"\n \n if [ -f $OUT_C ]; then\n@@ -46,7 +51,7 @@ fi\n XCOMPILE=$3\n if [ $XCOMPILE -eq 1 ]; then\n   echo \"using default values for cross compiles\"\n-  cp $SRC_DIR/bits/limits_generic.h $OUT_H\n+  cp $SRC_DIR/include/bits/limits_generic.h $OUT_H\n   cp $SRC_DIR/src/limits_generic.cc $OUT_C\n   exit 0;\n fi   \n@@ -163,11 +168,11 @@ namespace std {\n \n EOF\n \n-echo \"$CXX $CPPFLAGS -I$BUILD_DIR \\\n+echo \"$CXX $CPPFLAGS -I$BUILD_DIR/include \\\n     -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\" \\\n      $LDFLAGS\"\n \n-$CXX $CPPFLAGS -I$BUILD_DIR \\\n+$CXX $CPPFLAGS -I$BUILD_DIR/include \\\n     -o \"$BUILD_DIR/src/gen-num-limits\" \"$SRC_DIR/src/gen-num-limits.cc\" \\\n      $LDFLAGS\n "}, {"sha": "126f0bc3db5292081cc7ece60abf129587011ffd", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e53dba6a89a3b96b23b9cbb65982de49c9b5fda/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=5e53dba6a89a3b96b23b9cbb65982de49c9b5fda", "patch": "@@ -104,12 +104,15 @@ libstdcxx_interface = @libstdcxx_interface@\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n-@USE_LIBDIR_TRUE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n-@USE_LIBDIR_FALSE@@VERSION_SPECIFIC_LIBS_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+\n+# Cross compiler and multilib support.\n+# Install a library built with a cross compiler in tooldir, not libdir.\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@gcc_version = @gcc_version@\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexecdir = $(libdir)/gcc-lib/$(target_alias)\n+@USE_LIBDIR_FALSE@toolexecdir = $(exec_prefix)/$(target_alias)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_TRUE@toolexeclibdir = $(toolexecdir)/$(gcc_version)\n+@USE_LIBDIR_TRUE@@VERSION_SPECIFIC_LIBS_FALSE@toolexeclibdir = $(libdir)$(MULTISUBDIR)\n+@USE_LIBDIR_FALSE@toolexeclibdir = $(toolexecdir)/lib$(MULTISUBDIR)\n \n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n@@ -137,7 +140,7 @@ LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBIO_INCLUDES = @LIBIO_INCLUDES@\n CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n-INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir) \t$(TOPLEVEL_INCLUDES)\t\n+INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir)/include \t$(TOPLEVEL_INCLUDES)\t\n \n \n base_headers =  \tbits/cpp_type_traits.h bits/char_traits.h bits/codecvt.h \tbits/basic_string.h bits/std_string.h  bits/string.tcc \tbits/generic_shadow.h bits/std_utility.h \tbits/std_complex.h \tbits/valarray_array.h bits/valarray_array.tcc bits/valarray_meta.h \tbits/std_valarray.h bits/mask_array.h bits/slice.h bits/slice_array.h \tbits/gslice.h bits/gslice_array.h bits/indirect_array.h \tbits/exception_support.h \tbits/std_fstream.h bits/std_iomanip.h \tbits/ios_base.h bits/fpos.h bits/basic_ios.h bits/basic_ios.tcc \tbits/std_ios.h bits/std_iosfwd.h bits/std_iostream.h \tbits/std_istream.h bits/istream.tcc bits/std_locale.h \tbits/fstream.tcc bits/ostream.tcc bits/sbuf_iter.h bits/sstream.tcc \tbits/std_ostream.h bits/std_sstream.h bits/std_streambuf.h \tbits/streambuf.tcc bits/basic_file.h \tbits/locale_facets.h bits/locale_facets.tcc bits/localefwd.h \tbits/stl_pthread_alloc.h bits/pthread_allocimpl.h \tbits/stl_threads.h bits/stl_iterator_base.h \tbackward/algo.h backward/algobase.h backward/alloc.h \tbackward/bvector.h backward/defalloc.h backward/deque.h \tbackward/function.h backward/hash_map.h backward/hash_set.h \tbackward/hashtable.h backward/heap.h backward/iterator.h \tbackward/list.h backward/map.h backward/multimap.h backward/new.h \tbackward/multiset.h backward/pair.h backward/iostream.h \tbackward/rope.h backward/set.h backward/slist.h backward/stack.h \tbackward/tempbuf.h backward/tree.h backward/vector.h \tbackward/fstream.h \tbits/std_bitset.h bits/std_deque.h bits/std_functional.h \tbits/std_iterator.h bits/std_list.h \tbits/std_map.h bits/std_memory.h bits/std_numeric.h \tbits/std_queue.h bits/std_set.h bits/std_stack.h \tbits/std_stdexcept.h bits/std_vector.h \tbits/stl_algo.h bits/stl_algobase.h bits/stl_alloc.h \tbits/stl_deque.h bits/stl_function.h \tbits/stl_heap.h bits/stl_iterator.h bits/stl_list.h bits/stl_map.h \tbits/stl_multimap.h bits/stl_multiset.h bits/stl_numeric.h \tbits/stl_pair.h bits/stl_queue.h bits/stl_raw_storage_iter.h \tbits/stl_relops.h bits/stl_set.h \tbits/stl_stack.h bits/stl_string_fwd.h bits/stl_tempbuf.h \tbits/stl_tree.h bits/stl_uninitialized.h bits/stl_vector.h \tbits/type_traits.h bits/stl_range_errors.h bits/std_algorithm.h \tbits/concept_checks.h bits/container_concepts.h \tbits/sequence_concepts.h bits/std_strstream.h \text/ropeimpl.h ext/stl_rope.h \text/stl_bvector.h bits/stl_config.h bits/stl_construct.h \text/stl_hashtable.h ext/stl_hash_fun.h \text/hash_map ext/hash_set ext/rope ext/slist \text/tree ext/bvector \n@@ -156,7 +159,7 @@ std_headers =  \talgorithm bitset complex deque fstream functional \tiomanip ios i\n @GLIBCPP_NEED_LIBIO_TRUE@libio_headers = \t$(top_srcdir)/libio/_G_config.h $(top_srcdir)/libio/libio.h\n @GLIBCPP_NEED_LIBIO_FALSE@libio_headers = \n \n-build_headers =  \t$(top_builddir)/bits/std_limits.h $(top_builddir)/bits/c++config.h \t$(top_builddir)/bits/c++io.h $(top_builddir)/bits/c++threads.h \t$(top_builddir)/bits/atomicity.h $(top_builddir)/bits/os_defines.h \t$(top_builddir)/bits/ctype_base.h \t$(top_builddir)/bits/ctype_noninline.h \t$(top_builddir)/bits/ctype_inline.h \n+build_headers =  \tbits/std_limits.h bits/c++config.h bits/c++io.h bits/c++threads.h \tbits/atomicity.h bits/os_defines.h \tbits/ctype_base.h bits/ctype_noninline.h bits/ctype_inline.h \n \n \n headers = $(base_headers) $(c_headers)\n@@ -505,8 +508,8 @@ myinstallheaders: $(headers:%=$(myincludep)/%)\n \t        $(INSTALL_DATA) $(GLIBCPP_INCLUDE_DIR)/std/$$i $(myincludep); \\\n \tdone; \\\n \tfor i in $(build_headers); do \\\n-\t  echo \"$(INSTALL_DATA) $$i $(myincludep)/bits/\"; \\\n-\t        $(INSTALL_DATA) $$i $(myincludep)/bits/; \\\n+          echo \"$(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/\"; \\\n+\t     $(INSTALL_DATA) $(top_builddir)/include/$$i $(myincludep)/bits/; \\\n \tdone; \\\n \tlibio_headers_install='$(libio_headers)'; \\\n \tfor i in $$libio_headers_install; do \\"}]}