{"sha": "fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmJkMjhiYzNiMmMzMzk0ZGIwOTU3N2ZmMmY1YTU5NGQ1MGM3NWIyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-03-14T09:13:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-03-14T09:13:36Z"}, "message": "re PR tree-optimization/53265 (Warn when undefined behavior implies smaller iteration count)\n\n\tPR tree-optimization/53265\n\t* common.opt (Waggressive-loop-optimizations): New option.\n\t* tree-ssa-loop-niter.c: Include tree-pass.h.\n\t(do_warn_aggressive_loop_optimizations): New function.\n\t(record_estimate): Call it.  Don't add !is_exit bounds to loop->bounds\n\tif number_of_latch_executions returned constant.\n\t(estimate_numbers_of_iterations_loop): Call number_of_latch_executions\n\tearly.  If number_of_latch_executions returned constant, set\n\tnb_iterations_upper_bound back to it.\n\t* cfgloop.h (struct loop): Add warned_aggressive_loop_optimizations\n\tfield.\n\t* Makefile.in (tree-ssa-loop-niter.o): Depend on $(TREE_PASS_H).\n\t* doc/invoke.texi (-Wno-aggressive-loop-optimizations): Document.\n\n\t* gcc.dg/pr53265.c: New test.\n\t* gcc.dg/torture/pr49518.c: Add -Wno-aggressive-loop-optimizations\n\tto dg-options.\n\t* g++.dg/opt/longbranch2.C (EBCOTLut): Double sizes of a2 and a3\n\tarrays.\n\t* gcc.dg/tree-ssa/cunroll-10.c (main): Rename to foo.  Add argument\n\tn, use it as high bound instead of 4.\n\n\t* unwind-dw2.c (execute_cfa_program): Avoid\n\t-Waggressive-array-optimizations warnings for DW_CFA_GNU_window_save\n\ton targets with DWARF_FRAME_REGISTERS < 32.\n\n\t* testsuite/libmudflap.c/fail37-frag.c: Add optimization barrier.\n\nFrom-SVN: r196650", "tree": {"sha": "20df72f941802d316ad1e5b63a60b221cc29586a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20df72f941802d316ad1e5b63a60b221cc29586a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df2dfaea4e76a6159e733073aff5aa5e6837289a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2dfaea4e76a6159e733073aff5aa5e6837289a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2dfaea4e76a6159e733073aff5aa5e6837289a"}], "stats": {"total": 300, "additions": 286, "deletions": 14}, "files": [{"sha": "c403ca72d6dc0135c6058266b5ef594ddaa0a181", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1,5 +1,19 @@\n 2013-03-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/53265\n+\t* common.opt (Waggressive-loop-optimizations): New option.\n+\t* tree-ssa-loop-niter.c: Include tree-pass.h.\n+\t(do_warn_aggressive_loop_optimizations): New function.\n+\t(record_estimate): Call it.  Don't add !is_exit bounds to loop->bounds\n+\tif number_of_latch_executions returned constant.\n+\t(estimate_numbers_of_iterations_loop): Call number_of_latch_executions\n+\tearly.  If number_of_latch_executions returned constant, set\n+\tnb_iterations_upper_bound back to it.\n+\t* cfgloop.h (struct loop): Add warned_aggressive_loop_optimizations\n+\tfield.\n+\t* Makefile.in (tree-ssa-loop-niter.o): Depend on $(TREE_PASS_H).\n+\t* doc/invoke.texi (-Wno-aggressive-loop-optimizations): Document.\n+\n \t* config/aarch64/t-aarch64-linux (MULTARCH_DIRNAME): Remove.\n \t(MULTILIB_OSDIRNAMES): Set.\n \t* genmultilib: If defaultosdirname doesn't start with :: , set"}, {"sha": "54ea04f644a1a2d0224598933472a7cca6c9eaed", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -2446,7 +2446,7 @@ tree-ssa-loop-niter.o : tree-ssa-loop-niter.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h dumpfile.h \\\n    $(DIAGNOSTIC_CORE_H) $(FLAGS_H) $(TREE_DATA_REF_H) \\\n-   $(BASIC_BLOCK_H) $(GGC_H) intl.h $(GIMPLE_PRETTY_PRINT_H)\n+   $(BASIC_BLOCK_H) $(GGC_H) intl.h $(GIMPLE_PRETTY_PRINT_H) $(TREE_PASS_H)\n tree-ssa-loop-ivcanon.o : tree-ssa-loop-ivcanon.c $(TREE_FLOW_H) $(CONFIG_H) \\\n    $(SYSTEM_H) $(TREE_H) $(TM_P_H) $(CFGLOOP_H) $(PARAMS_H) \\\n    $(TREE_INLINE_H) $(DIAGNOSTIC_H) $(TM_H) coretypes.h \\"}, {"sha": "01cef519a0ca56e97ba14164045dbd34ee0e28b5", "filename": "gcc/cfgloop.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fcfgloop.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fcfgloop.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgloop.h?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -159,6 +159,10 @@ struct GTY ((chain_next (\"%h.next\"))) loop {\n   /* True if the loop can be parallel.  */\n   bool can_be_parallel;\n \n+  /* True if -Waggressive-loop-optimizations warned about this loop\n+     already.  */\n+  bool warned_aggressive_loop_optimizations;\n+\n   /* An integer estimation of the number of iterations.  Estimate_state\n      describes what is the state of the estimation.  */\n   enum loop_estimation estimate_state;"}, {"sha": "bdbd3b6cd9ea549490137779d29e53cfdb0d7fe0", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -505,6 +505,10 @@ Waggregate-return\n Common Var(warn_aggregate_return) Warning\n Warn about returning structures, unions or arrays\n \n+Waggressive-loop-optimizations\n+Common Var(warn_aggressive_loop_optimizations) Init(1) Warning\n+Warn if a loop with constant number of iterations triggers undefined behavior\n+\n Warray-bounds\n Common Var(warn_array_bounds) Warning\n Warn if an array is accessed out of bounds"}, {"sha": "9273d7d7cbdbcbf1104eb1eb74b7b1a028f3fc8c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -232,7 +232,8 @@ Objective-C and Objective-C++ Dialects}.\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -fmax-errors=@var{n}  -Wpedantic @gol\n -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waddress  -Waggregate-return  -Warray-bounds @gol\n+-w  -Wextra  -Wall  -Waddress  -Waggregate-return  @gol\n+-Waggressive-loop-optimizations -Warray-bounds @gol\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc++-compat -Wc++11-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n@@ -4423,6 +4424,12 @@ Warn if any functions that return structures or unions are defined or\n called.  (In languages where you can return an array, this also elicits\n a warning.)\n \n+@item -Wno-aggressive-loop-optimizations\n+@opindex Wno-aggressive-loop-optimizations\n+@opindex Waggressive-loop-optimizations\n+Warn if in a loop with constant number of iterations the compiler detects\n+undefined behavior in some statement during one or more of the iterations.\n+\n @item -Wno-attributes\n @opindex Wno-attributes\n @opindex Wattributes"}, {"sha": "19fab0e0d5bac1d8bbdd5252788e1b9f0155c90e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1,3 +1,14 @@\n+2013-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53265\n+\t* gcc.dg/pr53265.c: New test.\n+\t* gcc.dg/torture/pr49518.c: Add -Wno-aggressive-loop-optimizations\n+\tto dg-options.\n+\t* g++.dg/opt/longbranch2.C (EBCOTLut): Double sizes of a2 and a3\n+\tarrays.\n+\t* gcc.dg/tree-ssa/cunroll-10.c (main): Rename to foo.  Add argument\n+\tn, use it as high bound instead of 4.\n+\n 2013-03-13  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/49880"}, {"sha": "4a8d5eef735fc6ec3e08539f98e28f00362476db", "filename": "gcc/testsuite/g++.dg/opt/longbranch2.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fopt%2Flongbranch2.C?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -15,8 +15,8 @@ public:\n \n class EBCOTLut : public JKeeper {\n   unsigned char a1[1<<8];   \n-  unsigned char a2[1<<8];\n-  unsigned char a3[1<<8];\n+  unsigned char a2[1<<9];\n+  unsigned char a3[1<<9];\n   long          a4[1<<9];\n public:\n   EBCOTLut(void);"}, {"sha": "c60a736a9279717b0db2316ae5d70dd78c27ff64", "filename": "gcc/testsuite/gcc.dg/pr53265.c", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr53265.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -0,0 +1,156 @@\n+/* PR tree-optimization/53265 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -Wall\" } */\n+\n+void bar (void *);\n+int baz (int);\n+\n+void\n+fn1 (void)\n+{\n+  unsigned int a[128];\n+  int i;\n+\n+  for (i = 0; i < 128; ++i)\t/* { dg-message \"note: containing loop\" } */\n+    a[i] = i * 0x02000001;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  bar (a);\n+}\n+\n+void\n+fn2 (void)\n+{\n+  unsigned long long a[128];\n+  int i;\n+\n+  for (i = 0; i < 128; i++)\t\t\t/* { dg-message \"note: containing loop\" } */\n+    a[i] = (i + 1LL) * 0x0123456789ABCDEFLL;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  bar (a);\n+}\n+\n+void\n+fn3 (void)\n+{\n+  unsigned char a[16], b[16], c[16];\n+  int i;\n+\n+  bar (b);\n+  for (i = 0; i < (int) (sizeof (a) / sizeof (a[0])); i++)\t/* { dg-message \"note: containing loop\" } */\n+    {\n+      c[i + 8] = b[i];\t/* { dg-warning \"invokes undefined behavior\" } */\n+      a[i + 8] = b[i + 8];\n+    }\n+  bar (a);\n+  bar (c);\n+}\n+\n+void\n+fn4 (void)\n+{\n+  unsigned int *a[32], *o, i;\n+\n+  bar (a);\n+  for (i = 0; i <= sizeof (a) / sizeof (a[0]); i++)\t/* { dg-message \"note: containing loop\" \"\" { xfail *-*-* } } */\n+    {\n+      o = a[i];\t/* { dg-warning \"invokes undefined behavior\" \"\" { xfail *-*-* } } */\n+      bar (o);\n+    }\n+}\n+\n+void\n+fn5 (void)\n+{\n+  unsigned short a[23940];\n+  unsigned int b[1140];\n+  int j;\n+\n+  bar (b);\n+  for (j = 0; j < 1140; j++)\t/* { dg-message \"note: containing loop\" } */\n+    a[23940 + j - 950] = b[j];\t/* { dg-warning \"invokes undefined behavior\" } */\n+  bar (a);\n+}\n+\n+void\n+fn6 (void)\n+{\n+  double a[4][3], b[12];\n+  int i;\n+  bar (b);\n+  for (i = 0; i < 12; i++)\t/* { dg-message \"note: containing loop\" } */\n+    a[0][i] = b[i] / 10000.0;\t/* { dg-warning \"invokes undefined behavior\" } */\n+  bar (a);\n+}\n+\n+void\n+fn7 (void)\n+{\n+  int a[16], b, c;\n+  bar (a);\n+  for (b = a[c = 0]; c < 16; b = a[++c])\t/* { dg-warning \"invokes undefined behavior\" \"\" { xfail *-*-* } } */\n+    baz (b);\n+}\n+\n+/* { dg-message \"note: containing loop\" \"\" { xfail *-*-* } 88 } */\n+\n+const void *va, *vb, *vc, *vd, *ve;\n+const void *vf[4];\n+void\n+fn8 (void)\n+{\n+  unsigned long i;\n+  vf[0] = va; vf[1] = vb; vf[2] = vc; vf[3] = vd;\n+  for (i = 0; i < (sizeof (vf) / sizeof (vf[0])); i++)\n+    if (!vf[i])\n+      vf[i] = ve;\n+}\n+\n+int wa, wb[53][5], wc[53][5];\n+\n+void\n+fn9 (void)\n+{\n+  int i, j, k;\n+  for (i = 0; i < 53; i++)\n+    for (j = 16 / (((wa & 1) != 0) ? 8 : 4); j > 0; j--)\n+      {\n+\tint d = 1;\n+\tif (wb[i][j] == 0 || wc[i][1] != 0)\n+\t  continue;\n+\tfor (k = 0; k < j; k++)\n+\t  if (wc[i + k][1])\n+\t    {\n+\t      d = 0;\n+\t      break;\n+\t    }\n+\tif (!d)\n+\t  continue;\n+\twc[i][j] = baz (0);\n+      }\n+}\n+\n+int xa[18];\n+\n+void\n+fn10 (void)\n+{\n+  int i;\n+  for (i = 16; i < 32; i++)\t/* { dg-message \"note: containing loop\" } */\n+    xa[i] = 26;\t\t\t/* { dg-warning \"invokes undefined behavior\" } */\n+}\n+\n+__attribute__((noinline)) static void\n+fn11 (int x)\n+{\n+  int i = 1;\n+  if (x > 1)\n+    do\n+      baz (i);\n+    while (++i != x);\t\t/* { dg-bogus \"invokes undefined behavior\" } */\n+}\n+\n+void\n+fn12 (void)\n+{\n+  fn11 (1);\n+  fn11 (1);\n+  fn11 (1);\n+}"}, {"sha": "55761fd6108babff7d883cbf4e8ab097759eb6d7", "filename": "gcc/testsuite/gcc.dg/torture/pr49518.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr49518.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-options \"-Wno-aggressive-loop-optimizations\" } */\n \n int a, b;\n struct S { unsigned int s, t, u; } c, d = { 0, 1, 0 };"}, {"sha": "f2cd904efc61ce9b0dd383c1e3118cb0f82f9248", "filename": "gcc/testsuite/gcc.dg/tree-ssa/cunroll-10.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fcunroll-10.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -2,10 +2,11 @@\n /* { dg-options \"-O3 -Warray-bounds -fdump-tree-cunroll-details\" } */\n int a[3];\n int b[4];\n-main()\n+int\n+foo (int n)\n {\n   int i;\n-  for (i=0;i<4;i++)\n+  for (i=0;i<n;i++)\n     if (b[i]==2)\n      a[i]++;\n }"}, {"sha": "bcd4317f39048f0a1d6cee160e70551ad27176f0", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -37,6 +37,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"diagnostic-core.h\"\n #include \"tree-inline.h\"\n+#include \"tree-pass.h\"\n \n #define SWAP(X, Y) do { affine_iv *tmp = (X); (X) = (Y); (Y) = tmp; } while (0)\n \n@@ -2525,6 +2526,40 @@ record_niter_bound (struct loop *loop, double_int i_bound, bool realistic,\n     loop->nb_iterations_estimate = loop->nb_iterations_upper_bound;\n }\n \n+/* Emit a -Waggressive-loop-optimizations warning if needed.  */\n+\n+static void\n+do_warn_aggressive_loop_optimizations (struct loop *loop,\n+\t\t\t\t       double_int i_bound, gimple stmt)\n+{\n+  /* Don't warn if the loop doesn't have known constant bound.  */\n+  if (!loop->nb_iterations\n+      || TREE_CODE (loop->nb_iterations) != INTEGER_CST\n+      || !warn_aggressive_loop_optimizations\n+      /* To avoid warning multiple times for the same loop,\n+\t only start warning when we preserve loops.  */\n+      || (cfun->curr_properties & PROP_loops) == 0\n+      /* Only warn once per loop.  */\n+      || loop->warned_aggressive_loop_optimizations\n+      /* Only warn if undefined behavior gives us lower estimate than the\n+\t known constant bound.  */\n+      || i_bound.ucmp (tree_to_double_int (loop->nb_iterations)) >= 0\n+      /* And undefined behavior happens unconditionally.  */\n+      || !dominated_by_p (CDI_DOMINATORS, loop->latch, gimple_bb (stmt)))\n+    return;\n+\n+  edge e = single_exit (loop);\n+  if (e == NULL)\n+    return;\n+\n+  gimple estmt = last_stmt (e->src);\n+  warning_at (gimple_location (stmt), OPT_Waggressive_loop_optimizations,\n+\t      \"iteration %E invokes undefined behavior\",\n+\t      double_int_to_tree (TREE_TYPE (loop->nb_iterations), i_bound));\n+  inform (gimple_location (estmt), \"containing loop\");\n+  loop->warned_aggressive_loop_optimizations = true;\n+}\n+\n /* Records that AT_STMT is executed at most BOUND + 1 times in LOOP.  IS_EXIT\n    is true if the loop is exited immediately after STMT, and this exit\n    is taken at last when the STMT is executed BOUND + 1 times.\n@@ -2560,8 +2595,12 @@ record_estimate (struct loop *loop, tree bound, double_int i_bound,\n     return;\n \n   /* If we have a guaranteed upper bound, record it in the appropriate\n-     list.  */\n-  if (upper)\n+     list, unless this is an !is_exit bound (i.e. undefined behavior in\n+     at_stmt) in a loop with known constant number of iterations.  */\n+  if (upper\n+      && (is_exit\n+\t  || loop->nb_iterations == NULL_TREE\n+\t  || TREE_CODE (loop->nb_iterations) != INTEGER_CST))\n     {\n       struct nb_iter_bound *elt = ggc_alloc_nb_iter_bound ();\n \n@@ -2591,6 +2630,8 @@ record_estimate (struct loop *loop, tree bound, double_int i_bound,\n   if (i_bound.ult (delta))\n     return;\n \n+  if (upper && !is_exit)\n+    do_warn_aggressive_loop_optimizations (loop, i_bound, at_stmt);\n   record_niter_bound (loop, i_bound, realistic, upper);\n }\n \n@@ -3311,6 +3352,11 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n   /* Force estimate compuation but leave any existing upper bound in place.  */\n   loop->any_estimate = false;\n \n+  /* Ensure that loop->nb_iterations is computed if possible.  If it turns out\n+     to be constant, we avoid undefined behavior implied bounds and instead\n+     diagnose those loops with -Waggressive-loop-optimizations.  */\n+  number_of_latch_executions (loop);\n+\n   exits = get_loop_exit_edges (loop);\n   likely_exit = single_likely_exit (loop);\n   FOR_EACH_VEC_ELT (exits, i, ex)\n@@ -3345,6 +3391,17 @@ estimate_numbers_of_iterations_loop (struct loop *loop)\n       bound = gcov_type_to_double_int (nit);\n       record_niter_bound (loop, bound, true, false);\n     }\n+\n+  /* If we know the exact number of iterations of this loop, try to\n+     not break code with undefined behavior by not recording smaller\n+     maximum number of iterations.  */\n+  if (loop->nb_iterations\n+      && TREE_CODE (loop->nb_iterations) == INTEGER_CST)\n+    {\n+      loop->any_upper_bound = true;\n+      loop->nb_iterations_upper_bound\n+\t= tree_to_double_int (loop->nb_iterations);\n+    }\n }\n \n /* Sets NIT to the estimated number of executions of the latch of the"}, {"sha": "aa10774ba9871be56f996cf92d4e3a356b0fcab0", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1,3 +1,10 @@\n+2013-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53265\n+\t* unwind-dw2.c (execute_cfa_program): Avoid\n+\t-Waggressive-array-optimizations warnings for DW_CFA_GNU_window_save\n+\ton targets with DWARF_FRAME_REGISTERS < 32.\n+\n 2013-03-13  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/49880"}, {"sha": "80de5ab1894bd99534868d4e15e379875e0690b1", "filename": "libgcc/unwind-dw2.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libgcc%2Funwind-dw2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libgcc%2Funwind-dw2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Funwind-dw2.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1128,11 +1128,12 @@ execute_cfa_program (const unsigned char *insn_ptr,\n \n \tcase DW_CFA_GNU_window_save:\n \t  /* ??? Hardcoded for SPARC register window configuration.  */\n-\t  for (reg = 16; reg < 32; ++reg)\n-\t    {\n-\t      fs->regs.reg[reg].how = REG_SAVED_OFFSET;\n-\t      fs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n-\t    }\n+\t  if (DWARF_FRAME_REGISTERS >= 32)\n+\t    for (reg = 16; reg < 32; ++reg)\n+\t      {\n+\t\tfs->regs.reg[reg].how = REG_SAVED_OFFSET;\n+\t\tfs->regs.reg[reg].loc.offset = (reg - 16) * sizeof (void *);\n+\t      }\n \t  break;\n \n \tcase DW_CFA_GNU_args_size:"}, {"sha": "6e0d65c2fb79391f1077fa20bd6467a11cdca3a0", "filename": "libmudflap/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libmudflap%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libmudflap%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2FChangeLog?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -1,3 +1,8 @@\n+2013-03-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/53265\n+\t* testsuite/libmudflap.c/fail37-frag.c: Add optimization barrier.\n+\n 2013-02-03  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years."}, {"sha": "38dbde56a814c3edfa234363637ef4ac29efcbc0", "filename": "libmudflap/testsuite/libmudflap.c/fail37-frag.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fbd28bc3b2c3394db09577ff2f5a594d50c75b2c/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libmudflap%2Ftestsuite%2Flibmudflap.c%2Ffail37-frag.c?ref=fbd28bc3b2c3394db09577ff2f5a594d50c75b2c", "patch": "@@ -13,7 +13,11 @@ main ()\n {\n   int i;\n   for (i = 0; i < 5; i++)\n-    x.s[i].f = 0;\n+    {\n+      /* Optimization barrier.  Prevent gcc from seeing the undefined behavior.  */\n+      __asm (\"\" : \"+r\" (i));\n+      x.s[i].f = 0;\n+    }\n   exit (0);\n }\n /* { dg-output \"mudflap violation 1.*\" } */"}]}