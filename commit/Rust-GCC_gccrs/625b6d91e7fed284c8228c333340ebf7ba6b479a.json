{"sha": "625b6d91e7fed284c8228c333340ebf7ba6b479a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1YjZkOTFlN2ZlZDI4NGM4MjI4YzMzMzM0MGViZjdiYTZiNDc5YQ==", "commit": {"author": {"name": "Douglas Gregor", "email": "doug.gregor@gmail.com", "date": "2008-02-15T03:09:18Z"}, "committer": {"name": "Doug Gregor", "email": "dgregor@gcc.gnu.org", "date": "2008-02-15T03:09:18Z"}, "message": "re PR c++/34050 (ICE derived classes and variadic templates)\n\n2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34050\n\t* pt.c (tsubst_initializer_list): Deal with the use of\n\tVOID_TYPE_NODE to indicate value-initialization of the bases.\n\n\n2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>\n\n\tPR c++/34050\n\t* g++.dg/cpp0x/vt-34050.C: New.\n\nFrom-SVN: r132331", "tree": {"sha": "b1217c8cd8434e9df01019e65abc92a3b7e3ec04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1217c8cd8434e9df01019e65abc92a3b7e3ec04"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/625b6d91e7fed284c8228c333340ebf7ba6b479a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625b6d91e7fed284c8228c333340ebf7ba6b479a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625b6d91e7fed284c8228c333340ebf7ba6b479a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625b6d91e7fed284c8228c333340ebf7ba6b479a/comments", "author": {"login": "DougGregor", "id": 989428, "node_id": "MDQ6VXNlcjk4OTQyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/989428?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DougGregor", "html_url": "https://github.com/DougGregor", "followers_url": "https://api.github.com/users/DougGregor/followers", "following_url": "https://api.github.com/users/DougGregor/following{/other_user}", "gists_url": "https://api.github.com/users/DougGregor/gists{/gist_id}", "starred_url": "https://api.github.com/users/DougGregor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DougGregor/subscriptions", "organizations_url": "https://api.github.com/users/DougGregor/orgs", "repos_url": "https://api.github.com/users/DougGregor/repos", "events_url": "https://api.github.com/users/DougGregor/events{/privacy}", "received_events_url": "https://api.github.com/users/DougGregor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "512d1f4b7da783c91f11453b42fedbdb3a01465e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/512d1f4b7da783c91f11453b42fedbdb3a01465e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/512d1f4b7da783c91f11453b42fedbdb3a01465e"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "385398346b064daef852c52fe7042d9325331e6e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=625b6d91e7fed284c8228c333340ebf7ba6b479a", "patch": "@@ -1,3 +1,9 @@\n+2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34050\n+\t* pt.c (tsubst_initializer_list): Deal with the use of\n+\tVOID_TYPE_NODE to indicate value-initialization of the bases.\n+\n 2008-02-14  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \t    Jason Merrill  <jason@redhat.com>\n "}, {"sha": "d11a959fba8cf342d5f21f8615bb62b204310418", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 42, "deletions": 30, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=625b6d91e7fed284c8228c333340ebf7ba6b479a", "patch": "@@ -15190,37 +15190,49 @@ tsubst_initializer_list (tree t, tree argvec)\n           PACK_EXPANSION_PARAMETER_PACKS (expr) =\n             PACK_EXPANSION_PARAMETER_PACKS (TREE_PURPOSE (t));\n \n-          /* Substitute parameter packs into each argument in the\n-             TREE_LIST.  */\n-          in_base_initializer = 1;\n-          for (arg = TREE_VALUE (t); arg; arg = TREE_CHAIN (arg))\n-            {\n-              tree expanded_exprs;\n-\n-              /* Expand the argument.  */\n-              SET_PACK_EXPANSION_PATTERN (expr, TREE_VALUE (arg));\n-              expanded_exprs = tsubst_pack_expansion (expr, argvec,\n-                                                      tf_warning_or_error,\n-                                                      NULL_TREE);\n-\n-              /* Prepend each of the expanded expressions to the\n-                 corresponding TREE_LIST in EXPANDED_ARGUMENTS.  */\n-              for (i = 0; i < len; i++)\n-                {\n-                  TREE_VEC_ELT (expanded_arguments, i) = \n-                    tree_cons (NULL_TREE, TREE_VEC_ELT (expanded_exprs, i),\n-                               TREE_VEC_ELT (expanded_arguments, i));\n-                }\n-            }\n-          in_base_initializer = 0;\n+\t  if (TREE_VALUE (t) == void_type_node)\n+\t    /* VOID_TYPE_NODE is used to indicate\n+\t       value-initialization.  */\n+\t    {\n+\t      for (i = 0; i < len; i++)\n+\t\tTREE_VEC_ELT (expanded_arguments, i) = void_type_node;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* Substitute parameter packs into each argument in the\n+\t\t TREE_LIST.  */\n+\t      in_base_initializer = 1;\n+\t      for (arg = TREE_VALUE (t); arg; arg = TREE_CHAIN (arg))\n+\t\t{\n+\t\t  tree expanded_exprs;\n+\n+\t\t  /* Expand the argument.  */\n+\t\t  SET_PACK_EXPANSION_PATTERN (expr, TREE_VALUE (arg));\n+\t\t  expanded_exprs \n+\t\t    = tsubst_pack_expansion (expr, argvec,\n+\t\t\t\t\t     tf_warning_or_error,\n+\t\t\t\t\t     NULL_TREE);\n+\n+\t\t  /* Prepend each of the expanded expressions to the\n+\t\t     corresponding TREE_LIST in EXPANDED_ARGUMENTS.  */\n+\t\t  for (i = 0; i < len; i++)\n+\t\t    {\n+\t\t      TREE_VEC_ELT (expanded_arguments, i) = \n+\t\t\ttree_cons (NULL_TREE, \n+\t\t\t\t   TREE_VEC_ELT (expanded_exprs, i),\n+\t\t\t\t   TREE_VEC_ELT (expanded_arguments, i));\n+\t\t    }\n+\t\t}\n+\t      in_base_initializer = 0;\n \n-          /* Reverse all of the TREE_LISTs in EXPANDED_ARGUMENTS,\n-             since we built them backwards.  */\n-          for (i = 0; i < len; i++)\n-            {\n-              TREE_VEC_ELT (expanded_arguments, i) = \n-                nreverse (TREE_VEC_ELT (expanded_arguments, i));\n-            }\n+\t      /* Reverse all of the TREE_LISTs in EXPANDED_ARGUMENTS,\n+\t\t since we built them backwards.  */\n+\t      for (i = 0; i < len; i++)\n+\t\t{\n+\t\t  TREE_VEC_ELT (expanded_arguments, i) = \n+\t\t    nreverse (TREE_VEC_ELT (expanded_arguments, i));\n+\t\t}\n+\t    }\n         }\n \n       for (i = 0; i < len; ++i)"}, {"sha": "792ae4c856a81a48e460e106a5df0214f026f4fd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=625b6d91e7fed284c8228c333340ebf7ba6b479a", "patch": "@@ -1,3 +1,8 @@\n+2008-02-14  Douglas Gregor  <doug.gregor@gmail.com>\n+\n+\tPR c++/34050\n+\t* g++.dg/cpp0x/vt-34050.C: New.\n+\n 2008-02-14  Danny Smith  <dannysmith@users.sourceforge.net>\n \n \tPR preprocessor/35061"}, {"sha": "cb19b3914c03294f3a32c4127a74a93e31f6afeb", "filename": "gcc/testsuite/g++.dg/cpp0x/vt-34050.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34050.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625b6d91e7fed284c8228c333340ebf7ba6b479a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34050.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvt-34050.C?ref=625b6d91e7fed284c8228c333340ebf7ba6b479a", "patch": "@@ -0,0 +1,9 @@\n+// { dg-options \"-std=c++0x\" }\n+struct A {};\n+\n+template<typename... T> struct B : T...\n+{\n+  B() : T()... {}\n+};\n+\n+B<A> b;"}]}