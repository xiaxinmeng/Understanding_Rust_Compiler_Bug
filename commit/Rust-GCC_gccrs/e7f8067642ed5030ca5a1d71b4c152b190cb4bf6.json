{"sha": "e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdmODA2NzY0MmVkNTAzMGNhNWExZDcxYjRjMTUyYjE5MGNiNGJmNg==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-03T18:18:53Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1994-09-03T18:18:53Z"}, "message": "Fix DImode move problems.\n\nFrom-SVN: r8022", "tree": {"sha": "9402c5a84473ef9dece47b4077bd026ab3229adf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9402c5a84473ef9dece47b4077bd026ab3229adf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6/comments", "author": null, "committer": null, "parents": [{"sha": "29226a190a0e67f01199283d4fdfd591c107c718", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29226a190a0e67f01199283d4fdfd591c107c718", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29226a190a0e67f01199283d4fdfd591c107c718"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "f2fccf832a3af2d824a9813836b4ea9e6dd077fd", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7f8067642ed5030ca5a1d71b4c152b190cb4bf6/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=e7f8067642ed5030ca5a1d71b4c152b190cb4bf6", "patch": "@@ -1352,40 +1352,45 @@\n   \"* return output_move_double (operands);\")\n \n (define_insn \"\"\n-  [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:DI 1 \"nonmemory_operand\" \"riF\"))\n-   (clobber (match_scratch:SI 2 \"X\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n-  \"!TARGET_386 && TARGET_MOVE\"\n-  \"* return output_move_double (operands);\")\n+  [(set (match_operand:DI 0 \"push_operand\" \"=<,<,<\")\n+\t(match_operand:DI 1 \"general_operand\" \"riF,o,o\"))\n+   (clobber (match_scratch:SI 2 \"X,=&r,=&r\"))\n+   (clobber (match_scratch:SI 3 \"X,=&r,X\"))]\n+  \"!TARGET_386\"\n+  \"*\n+{\n+  rtx low[1], high[1], xop[4];\n \n-(define_insn \"\"\n-  [(set (match_operand:DI 0 \"push_operand\" \"=<\")\n-\t(match_operand:DI 1 \"general_operand\" \"roiF\"))\n-   (clobber (match_scratch:SI 2 \"X\"))\n-   (clobber (match_scratch:SI 3 \"X\"))]\n-  \"!TARGET_386 && !TARGET_MOVE\"\n-  \"* return output_move_double (operands);\")\n+  split_di (&operands[1], 1, low, high);\n+  xop[0] = operands[2];\n+  xop[1] = operands[3];\n+  xop[2] = high[0];\n+  xop[3] = low[0];\n \n-(define_expand \"movdi\"\n-  [(parallel [(set (match_operand:DI 0 \"general_operand\" \"\")\n-\t\t   (match_operand:DI 1 \"general_operand\" \"\"))\n-\t      (clobber (match_scratch:SI 2 \"\"))\n-\t      (clobber (match_scratch:SI 3 \"\"))])]\n-  \"\"\n-  \"\n-{\n-  /* Don't generate memory->memory moves, go through a register */\n-  if (TARGET_MOVE\n-      && (reload_in_progress | reload_completed) == 0\n-      && GET_CODE (operands[0]) == MEM\n-      && GET_CODE (operands[1]) == MEM)\n+  if (GET_CODE (operands[1]) != MEM)\n     {\n-      operands[1] = force_reg (DImode, operands[1]);\n+      output_asm_insn (AS1 (push%L0,%2), xop);\n+      output_asm_insn (AS1 (push%L0,%3), xop);\n     }\n+  else if (GET_CODE (operands[3]) == REG)\n+    {\t\t\t\t/* 2 scratch registers available */\n+      output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%3,%1), xop);\n+      output_asm_insn (AS1 (push%L0,%0), xop);\n+      output_asm_insn (AS1 (push%L0,%1), xop);\n+    }\n+  else\n+    {\t\t\t\t/* 1 scratch register */\n+      output_asm_insn (AS2 (mov%L0,%2,%0), xop);\n+      output_asm_insn (AS1 (push%L0,%0), xop);\n+      output_asm_insn (AS2 (mov%L0,%3,%0), xop);\n+      output_asm_insn (AS1 (push%L0,%0), xop);\n+    }\n+\n+  RET;\n }\")\n \n-(define_insn \"\"\n+(define_insn \"movdi\"\n   [(set (match_operand:DI 0 \"general_operand\" \"=r,rm,o,o\")\n \t(match_operand:DI 1 \"general_operand\" \"m,riF,o,o\"))\n    (clobber (match_scratch:SI 2 \"X,X,=&r,=&r\"))"}]}