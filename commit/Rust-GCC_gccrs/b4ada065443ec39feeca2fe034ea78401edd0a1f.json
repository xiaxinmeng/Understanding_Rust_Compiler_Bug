{"sha": "b4ada065443ec39feeca2fe034ea78401edd0a1f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRhZGEwNjU0NDNlYzM5ZmVlY2EyZmUwMzRlYTc4NDAxZWRkMGExZg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2013-09-26T15:15:28Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2013-09-26T15:15:28Z"}, "message": "alias.h (component_uses_parent_alias_set): Rename to ...\n\n2013-09-26  Richard Biener  <rguenther@suse.de>\n\n\t* alias.h (component_uses_parent_alias_set): Rename to ...\n\t(component_uses_parent_alias_set_from): ... this.\n\t* alias.c (component_uses_parent_alias_set): Rename to ...\n\t(component_uses_parent_alias_set_from): ... this and return\n\tthe desired parent.\n\t(reference_alias_ptr_type_1): Use the result from\n\tcomponent_uses_parent_alias_set_from instead of stripping\n\tcomponents one at a time.\n\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Adjust.\n\nFrom-SVN: r202948", "tree": {"sha": "ed3cda18db90db3a4a3281d0e1ae3992e9f3f3a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed3cda18db90db3a4a3281d0e1ae3992e9f3f3a3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4ada065443ec39feeca2fe034ea78401edd0a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ada065443ec39feeca2fe034ea78401edd0a1f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4ada065443ec39feeca2fe034ea78401edd0a1f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4ada065443ec39feeca2fe034ea78401edd0a1f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1aab66787a9ade8446be9324f10575738627c6eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aab66787a9ade8446be9324f10575738627c6eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aab66787a9ade8446be9324f10575738627c6eb"}], "stats": {"total": 80, "additions": 48, "deletions": 32}, "files": [{"sha": "d16da9371787afb0b8bb32ee99fbd84ae5229df8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4ada065443ec39feeca2fe034ea78401edd0a1f", "patch": "@@ -1,3 +1,15 @@\n+2013-09-26  Richard Biener  <rguenther@suse.de>\n+\n+\t* alias.h (component_uses_parent_alias_set): Rename to ...\n+\t(component_uses_parent_alias_set_from): ... this.\n+\t* alias.c (component_uses_parent_alias_set): Rename to ...\n+\t(component_uses_parent_alias_set_from): ... this and return\n+\tthe desired parent.\n+\t(reference_alias_ptr_type_1): Use the result from\n+\tcomponent_uses_parent_alias_set_from instead of stripping\n+\tcomponents one at a time.\n+\t* emit-rtl.c (set_mem_attributes_minus_bitpos): Adjust.\n+\n 2013-09-26  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* tree-ssa-live.h (find_replaceable_exprs, dump_replaceable_exprs): Move"}, {"sha": "a48bb51ed962e1f6922b95348e9cc143f28e52ce", "filename": "gcc/alias.c", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=b4ada065443ec39feeca2fe034ea78401edd0a1f", "patch": "@@ -500,51 +500,58 @@ objects_must_conflict_p (tree t1, tree t2)\n   return alias_sets_must_conflict_p (set1, set2);\n }\n \f\n-/* Return true if all nested component references handled by\n-   get_inner_reference in T are such that we should use the alias set\n-   provided by the object at the heart of T.\n+/* Return the outermost parent of component present in the chain of\n+   component references handled by get_inner_reference in T with the\n+   following property:\n+     - the component is non-addressable, or\n+     - the parent has alias set zero,\n+   or NULL_TREE if no such parent exists.  In the former cases, the alias\n+   set of this parent is the alias set that must be used for T itself.  */\n \n-   This is true for non-addressable components (which don't have their\n-   own alias set), as well as components of objects in alias set zero.\n-   This later point is a special case wherein we wish to override the\n-   alias set used by the component, but we don't have per-FIELD_DECL\n-   assignable alias sets.  */\n-\n-bool\n-component_uses_parent_alias_set (const_tree t)\n+tree\n+component_uses_parent_alias_set_from (const_tree t)\n {\n-  while (1)\n-    {\n-      /* If we're at the end, it vacuously uses its own alias set.  */\n-      if (!handled_component_p (t))\n-\treturn false;\n+  const_tree found = NULL_TREE;\n \n+  while (handled_component_p (t))\n+    {\n       switch (TREE_CODE (t))\n \t{\n \tcase COMPONENT_REF:\n \t  if (DECL_NONADDRESSABLE_P (TREE_OPERAND (t, 1)))\n-\t    return true;\n+\t    found = t;\n \t  break;\n \n \tcase ARRAY_REF:\n \tcase ARRAY_RANGE_REF:\n \t  if (TYPE_NONALIASED_COMPONENT (TREE_TYPE (TREE_OPERAND (t, 0))))\n-\t    return true;\n+\t    found = t;\n \t  break;\n \n \tcase REALPART_EXPR:\n \tcase IMAGPART_EXPR:\n \t  break;\n \n-\tdefault:\n+\tcase BIT_FIELD_REF:\n+\tcase VIEW_CONVERT_EXPR:\n \t  /* Bitfields and casts are never addressable.  */\n-\t  return true;\n+\t  found = t;\n+\t  break;\n+\n+\tdefault:\n+\t  gcc_unreachable ();\n \t}\n \n+      if (get_alias_set (TREE_TYPE (TREE_OPERAND (t, 0))) == 0)\n+\tfound = t;\n+\n       t = TREE_OPERAND (t, 0);\n-      if (get_alias_set (TREE_TYPE (t)) == 0)\n-\treturn true;\n     }\n+ \n+  if (found)\n+    return TREE_OPERAND (found, 0);\n+\n+  return NULL_TREE;\n }\n \n \n@@ -645,14 +652,11 @@ reference_alias_ptr_type_1 (tree *t)\n \t       (TREE_TYPE (TREE_TYPE (TREE_OPERAND (inner, 1))))))\n     return TREE_TYPE (TREE_OPERAND (inner, 1));\n \n-  /* Otherwise, pick up the outermost object that we could have a pointer\n-     to, processing conversions as above.  */\n-  /* ???  Ick, this is worse than quadratic!  */\n-  while (component_uses_parent_alias_set (*t))\n-    {\n-      *t = TREE_OPERAND (*t, 0);\n-      STRIP_NOPS (*t);\n-    }\n+  /* Otherwise, pick up the outermost object that we could have\n+     a pointer to.  */\n+  tree tem = component_uses_parent_alias_set_from (*t);\n+  if (tem)\n+    *t = tem;\n \n   return NULL_TREE;\n }"}, {"sha": "ff190eb094e54d7778da8f199f8959fcf66857d1", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=b4ada065443ec39feeca2fe034ea78401edd0a1f", "patch": "@@ -33,7 +33,7 @@ extern alias_set_type get_alias_set (tree);\n extern alias_set_type get_deref_alias_set (tree);\n extern alias_set_type get_varargs_alias_set (void);\n extern alias_set_type get_frame_alias_set (void);\n-extern bool component_uses_parent_alias_set (const_tree);\n+extern tree component_uses_parent_alias_set_from (const_tree);\n extern bool alias_set_subset_of (alias_set_type, alias_set_type);\n extern void record_alias_subset (alias_set_type, alias_set_type);\n extern void record_component_aliases (tree);"}, {"sha": "888076cf4d7c431328e2c9816bf4e46dcddcb316", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4ada065443ec39feeca2fe034ea78401edd0a1f/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=b4ada065443ec39feeca2fe034ea78401edd0a1f", "patch": "@@ -1704,7 +1704,7 @@ set_mem_attributes_minus_bitpos (rtx ref, tree t, int objectp,\n \n       /* If this expression uses it's parent's alias set, mark it such\n \t that we won't change it.  */\n-      if (component_uses_parent_alias_set (t))\n+      if (component_uses_parent_alias_set_from (t) != NULL_TREE)\n \tMEM_KEEP_ALIAS_SET_P (ref) = 1;\n \n       /* If this is a decl, set the attributes of the MEM from it.  */"}]}