{"sha": "480caa1f4ab1f138435239d67ffe3126c5e27b2b", "node_id": "C_kwDOANBUbNoAKDQ4MGNhYTFmNGFiMWYxMzg0MzUyMzlkNjdmZmUzMTI2YzVlMjdiMmI", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-25T11:48:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-01-25T11:48:35Z"}, "message": "libfortran: Provide fallback __issignalingl for IBM extended long double\n\nOn Mon, Jan 17, 2022 at 12:11:59AM +0100, FX via Gcc-patches wrote:\n> This patch is the third in my \u201csignaling NaN\u201d series.\n> For targets with IEEE support but without the issignaling macro in libc\n> (i.e., everywhere except glibc), this allows us to provide a fallback\n> implementation.\n\nThis doesn't seem to handle the powerpc* IBM double double long double.\n\n__LDBL_IS_IEC_60559__ isn't defined for this type, because it is far from\nan IEEE754 type, but it has signaling NaNs - as can be seen in glibc\nlibc/sysdeps/ieee754/ldbl-128ibm/s_issignalingl.c\nthe type is a pair of doubles and whether it is a sNaN or qNaN is determined\nby whether the first double is a sNaN or qNaN.\n\n2022-01-25  Jakub Jelinek  <jakub@redhat.com>\n\n\t* ieee/issignaling_fallback.h (__issignalingl): Define for\n\tIBM extended long double are returning __issignaling on the\n\tfirst double.", "tree": {"sha": "e3963231117ec75c9832ce8e7c33a04df15b42b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3963231117ec75c9832ce8e7c33a04df15b42b7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/480caa1f4ab1f138435239d67ffe3126c5e27b2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480caa1f4ab1f138435239d67ffe3126c5e27b2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/480caa1f4ab1f138435239d67ffe3126c5e27b2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/480caa1f4ab1f138435239d67ffe3126c5e27b2b/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e211a02290f3b3533b56c593fc7b95edb8593b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e211a02290f3b3533b56c593fc7b95edb8593b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e211a02290f3b3533b56c593fc7b95edb8593b0"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "5b9e1c88d6f36966aa9f85d2036f174d4b0a04dc", "filename": "libgfortran/ieee/issignaling_fallback.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/480caa1f4ab1f138435239d67ffe3126c5e27b2b/libgfortran%2Fieee%2Fissignaling_fallback.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/480caa1f4ab1f138435239d67ffe3126c5e27b2b/libgfortran%2Fieee%2Fissignaling_fallback.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fieee%2Fissignaling_fallback.h?ref=480caa1f4ab1f138435239d67ffe3126c5e27b2b", "patch": "@@ -137,6 +137,19 @@ __issignalingl (long double x)\n   return ret || (((exi & 0x7fff) == 0x7fff) && (hxi > 0xc0000000));\n }\n \n+#elif (__LDBL_DIG__ == 31)\n+\n+/* Long double is 128-bit IBM extended type.  */\n+\n+static inline int\n+__issignalingl (long double x)\n+{\n+  union { long double value; double parts[2]; } u;\n+\n+  u.value = x;\n+  return __issignaling (u.parts[0]);\n+}\n+\n #elif (__LDBL_DIG__ == 33) && __LDBL_IS_IEC_60559__\n \n /* Long double is 128-bit type.  */"}]}