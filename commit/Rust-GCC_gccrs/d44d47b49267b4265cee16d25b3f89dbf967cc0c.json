{"sha": "d44d47b49267b4265cee16d25b3f89dbf967cc0c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ0ZDQ3YjQ5MjY3YjQyNjVjZWUxNmQyNWIzZjg5ZGJmOTY3Y2MwYw==", "commit": {"author": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-12-18T18:18:57Z"}, "committer": {"name": "Przemyslaw Wirkus", "email": "przemyslaw.wirkus@arm.com", "date": "2020-12-18T18:19:49Z"}, "message": "aarch64: SVE: ICE in expand_direct_optab_fn [PR98177]\n\nProblem comes from using the wrong interface to get the index type for a\nCOND_REDUCTION. For fixed-length SVE we get a V2SI (a 64-bit Advanced\nSIMD vector) instead of a VNx2SI (an SVE vector that stores SI elements\nin DI containers).\n\nCredits to Richard Sandiford for pointing out the issue's root cause.\n\nOriginal PR snippet proposed to reproduce issue was only causing ICE for C++\ncompiler (see pr98177-1 test cases). I've slightly modified original\nsnippet in order to reproduce issue on both C and C++ compilers. These\nare pr98177-2 test cases.\n\ngcc/ChangeLog:\n\n\tPR target/98177\n\t* tree-vect-loop.c (vect_create_epilog_for_reduction): Use\n\tget_same_sized_vectype to obtain index type.\n\t(vectorizable_reduction): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR target/98177\n\t* g++.target/aarch64/sve/pr98177-1.C: New test.\n\t* g++.target/aarch64/sve/pr98177-2.C: New test.\n\t* gcc.target/aarch64/sve/pr98177-1.c: New test.\n\t* gcc.target/aarch64/sve/pr98177-2.c: New test.", "tree": {"sha": "d46cbc2aa30675bb8e449070a51008e01acb2c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d46cbc2aa30675bb8e449070a51008e01acb2c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d44d47b49267b4265cee16d25b3f89dbf967cc0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44d47b49267b4265cee16d25b3f89dbf967cc0c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d44d47b49267b4265cee16d25b3f89dbf967cc0c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d44d47b49267b4265cee16d25b3f89dbf967cc0c/comments", "author": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrzemekWirkus", "id": 6360720, "node_id": "MDQ6VXNlcjYzNjA3MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrzemekWirkus", "html_url": "https://github.com/PrzemekWirkus", "followers_url": "https://api.github.com/users/PrzemekWirkus/followers", "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}", "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions", "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs", "repos_url": "https://api.github.com/users/PrzemekWirkus/repos", "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}", "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60cecb2b83ffcebac6e83076f5552df14b073248", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60cecb2b83ffcebac6e83076f5552df14b073248", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60cecb2b83ffcebac6e83076f5552df14b073248"}], "stats": {"total": 48, "additions": 44, "deletions": 4}, "files": [{"sha": "978919363f40c42518da89ad60df7269812f593a", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr98177-1.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-1.C?ref=d44d47b49267b4265cee16d25b3f89dbf967cc0c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -msve-vector-bits=128\" } */\n+\n+int a, b;\n+short c;\n+void d(long e) {\n+  for (int f = 0; f < b; f += 1)\n+    for (short g = 0; g < c; g += 5)\n+      a = (short)e;\n+}"}, {"sha": "c7244ef7390646cd4d13c7c87f9444217fd954d8", "filename": "gcc/testsuite/g++.target/aarch64/sve/pr98177-2.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Faarch64%2Fsve%2Fpr98177-2.C?ref=d44d47b49267b4265cee16d25b3f89dbf967cc0c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -msve-vector-bits=128\" } */\n+\n+int a, b, c;\n+\n+void foo(long e) {\n+  for (int f = 0; f < b; f ++)\n+    for (int g = 0; g < c; g ++)\n+      a = (short)e;\n+}"}, {"sha": "978919363f40c42518da89ad60df7269812f593a", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr98177-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-1.c?ref=d44d47b49267b4265cee16d25b3f89dbf967cc0c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -msve-vector-bits=128\" } */\n+\n+int a, b;\n+short c;\n+void d(long e) {\n+  for (int f = 0; f < b; f += 1)\n+    for (short g = 0; g < c; g += 5)\n+      a = (short)e;\n+}"}, {"sha": "c7244ef7390646cd4d13c7c87f9444217fd954d8", "filename": "gcc/testsuite/gcc.target/aarch64/sve/pr98177-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fpr98177-2.c?ref=d44d47b49267b4265cee16d25b3f89dbf967cc0c", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Ofast -msve-vector-bits=128\" } */\n+\n+int a, b, c;\n+\n+void foo(long e) {\n+  for (int f = 0; f < b; f ++)\n+    for (int g = 0; g < c; g ++)\n+      a = (short)e;\n+}"}, {"sha": "d6f1ffcd386c1e0b63cac21fabf8e5bad9be99ca", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d44d47b49267b4265cee16d25b3f89dbf967cc0c/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d44d47b49267b4265cee16d25b3f89dbf967cc0c", "patch": "@@ -5278,8 +5278,8 @@ vect_create_epilog_for_reduction (loop_vec_info loop_vinfo,\n       int scalar_precision\n \t= GET_MODE_PRECISION (SCALAR_TYPE_MODE (scalar_type));\n       tree scalar_type_unsigned = make_unsigned_type (scalar_precision);\n-      tree vectype_unsigned = build_vector_type\n-\t(scalar_type_unsigned, TYPE_VECTOR_SUBPARTS (vectype));\n+      tree vectype_unsigned = get_same_sized_vectype (scalar_type_unsigned,\n+\t\t\t\t\t\tvectype);\n \n       /* First we need to create a vector (ZERO_VEC) of zeros and another\n \t vector (MAX_INDEX_VEC) filled with the last matching index, which we\n@@ -6942,8 +6942,8 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n       int scalar_precision\n \t= GET_MODE_PRECISION (SCALAR_TYPE_MODE (scalar_type));\n       cr_index_scalar_type = make_unsigned_type (scalar_precision);\n-      cr_index_vector_type = build_vector_type (cr_index_scalar_type,\n-\t\t\t\t\t\tnunits_out);\n+      cr_index_vector_type = get_same_sized_vectype (cr_index_scalar_type,\n+\t\t\t\t\t\tvectype_out);\n \n       if (direct_internal_fn_supported_p (IFN_REDUC_MAX, cr_index_vector_type,\n \t\t\t\t\t  OPTIMIZE_FOR_SPEED))"}]}