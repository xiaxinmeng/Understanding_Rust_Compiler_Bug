{"sha": "1618f9483f44a3f6ee5791ae1609d8493eb52253", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTYxOGY5NDgzZjQ0YTNmNmVlNTc5MWFlMTYwOWQ4NDkzZWI1MjI1Mw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-01-10T19:34:36Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-01-10T19:34:36Z"}, "message": "* tree-vectorizer.c, tree.def: Fix comment typos.\n\nFrom-SVN: r93153", "tree": {"sha": "a75410aebc3dd80bbaa2e1c5f88eddd9e4fd101a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a75410aebc3dd80bbaa2e1c5f88eddd9e4fd101a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1618f9483f44a3f6ee5791ae1609d8493eb52253", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1618f9483f44a3f6ee5791ae1609d8493eb52253", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1618f9483f44a3f6ee5791ae1609d8493eb52253", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1618f9483f44a3f6ee5791ae1609d8493eb52253/comments", "author": null, "committer": null, "parents": [{"sha": "0006c7b00d82d3e08e7ea2080ebc586d15c5ef95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0006c7b00d82d3e08e7ea2080ebc586d15c5ef95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0006c7b00d82d3e08e7ea2080ebc586d15c5ef95"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f9d67abf337f2fa9ab65943ed69d69e254b0f4c1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1618f9483f44a3f6ee5791ae1609d8493eb52253", "patch": "@@ -1,3 +1,7 @@\n+2005-01-10  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-vectorizer.c, tree.def: Fix comment typos.\n+\n 2005-01-10  Mark Dettinger  <dettinge@de.ibm.com>\n \n \t* config/s390/s390.c (struct processor_costs): 4 new fields:"}, {"sha": "9276b89f3e5ac9b8069cd79780d6d465287c6ea6", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=1618f9483f44a3f6ee5791ae1609d8493eb52253", "patch": "@@ -1377,13 +1377,13 @@ vect_strip_conversion (tree expr)\n             a[j].b[i][j] = 0;\n \t \n    For a[j].b[i][j], EXPR will be 'i * C_i + j * C_j + C'. 'i' cannot be \n-   subsituted, since its access_fn in the inner loop is i. 'j' will be \n+   substituted, since its access_fn in the inner loop is i. 'j' will be \n    substituted with 3. An INITIAL_OFFSET will be 'i * C_i + C`', where\n    C` =  3 * C_j + C.\n \n    Compute MISALIGN (the misalignment of the data reference initial access from\n    its base) if possible. Misalignment can be calculated only if all the\n-   variables can be substitued with constants, or if a variable is multiplied\n+   variables can be substituted with constants, or if a variable is multiplied\n    by a multiple of VECTYPE_ALIGNMENT. In the above example, since 'i' cannot\n    be substituted, MISALIGN will be NULL_TREE in case that C_i is not a multiple\n    of VECTYPE_ALIGNMENT, and C` otherwise. (We perform MISALIGN modulo \n@@ -4894,7 +4894,7 @@ vect_get_memtag_and_dr (tree memref, tree stmt, bool is_read,\n    1.1.1- vect_get_base_and_offset():\n       Calculate base, initial_offset, step and alignment.      \n       For ARRAY_REFs and COMPONENT_REFs use call get_inner_reference.\n-   2- vect_analyze_dependences(): apply dependece testing using ref_stmt.DR\n+   2- vect_analyze_dependences(): apply dependence testing using ref_stmt.DR\n    3- vect_analyze_drs_alignment(): check that ref_stmt.alignment is ok.\n    4- vect_analyze_drs_access(): check that ref_stmt.step is ok.\n "}, {"sha": "37f85ad77bd6bd3e0da0991af6e36d41e1629015", "filename": "gcc/tree.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2Ftree.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1618f9483f44a3f6ee5791ae1609d8493eb52253/gcc%2Ftree.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.def?ref=1618f9483f44a3f6ee5791ae1609d8493eb52253", "patch": "@@ -32,7 +32,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n    These tree codes have been sorted so that the macros in tree.h that\n    check for various tree codes are optimized into range checks.  This\n-   gives a measureable performance improvement.  When adding a new\n+   gives a measurable performance improvement.  When adding a new\n    code, consider its placement in relation to the other codes.  */\n \n /* Any erroneous construct is parsed into a node of this type."}]}