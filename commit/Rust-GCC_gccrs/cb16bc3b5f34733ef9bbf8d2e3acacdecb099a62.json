{"sha": "cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "node_id": "C_kwDOANBUbNoAKGNiMTZiYzNiNWYzNDczM2VmOWJiZjhkMmUzYWNhY2RlY2IwOTlhNjI", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-03-04T15:03:44Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2022-03-04T15:04:21Z"}, "message": "rs6000: Allow -mlong-double-64 after -mabi={ibm,ieee}longdouble [PR104208, PR87496]\n\nThe glibc build is showing a build error due to extra \"error\" checking from my\nPR87496 fix.  That checking was overeager, disallowing setting the long double\nsize to 64-bits if the 128-bit long double ABI had already been specified.\nNow we only emit an error if we specify a 128-bit long double ABI if our\nlong double size is not 128 bits.  This also fixes an erroneous error when\n-mabi=ieeelongdouble is used and ISA 2.06 is not enabled, but the long double\nsize has been changed to 64 bits.\n\n2022-03-04  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/87496\n\tPR target/104208\n\t* config/rs6000/rs6000.cc (rs6000_option_override_internal): Make the\n\tISA 2.06 requirement for -mabi=ieeelongdouble conditional on\n\t-mlong-double-128.\n\tMove the -mabi=ieeelongdouble and -mabi=ibmlongdouble error checking\n\tfrom here...\n\t* common/config/rs6000/rs6000-common.cc (rs6000_handle_option):\n\t... to here.\n\ngcc/testsuite/\n\tPR target/87496\n\tPR target/104208\n\t* gcc.target/powerpc/pr104208-1.c: New test.\n\t* gcc.target/powerpc/pr104208-2.c: Likewise.\n\t* gcc.target/powerpc/pr87496-2.c: Swap long double options to trigger\n\tthe expected error.\n\t* gcc.target/powerpc/pr87496-3.c: Likewise.", "tree": {"sha": "b1614c76bd39cb049682a22f202139ad285e0f6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1614c76bd39cb049682a22f202139ad285e0f6a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28eb86c18ed765dceb3c56471a848e9f0e120ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e28eb86c18ed765dceb3c56471a848e9f0e120ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e28eb86c18ed765dceb3c56471a848e9f0e120ff"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "8e393d08a23d735f1d761475e00191360d517b21", "filename": "gcc/common/config/rs6000/rs6000-common.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Frs6000%2Frs6000-common.cc?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -227,6 +227,16 @@ rs6000_handle_option (struct gcc_options *opts, struct gcc_options *opts_set,\n \t}\n       break;\n \n+    case OPT_mabi_ibmlongdouble:\n+    case OPT_mabi_ieeelongdouble:\n+      if (opts->x_rs6000_long_double_type_size == 64)\n+\t{\n+\t  error_at (loc, \"option %<%s%> requires %<-mlong-double-128%>\",\n+\t\t    decoded->orig_option_with_args_text);\n+\t  return true;\n+\t}\n+      break;\n+\n     case OPT_mrecip:\n       opts->x_rs6000_recip_name = (value) ? \"default\" : \"none\";\n       break;"}, {"sha": "5b100a8f2fbecaab785775c0cd8adf279c8225d2", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -4178,13 +4178,6 @@ rs6000_option_override_internal (bool global_init_p)\n     ; /* The option value can be seen when cl_target_option_restore is called.  */\n   else if (rs6000_long_double_type_size == 128)\n     rs6000_long_double_type_size = FLOAT_PRECISION_TFmode;\n-  else if (OPTION_SET_P (rs6000_ieeequad))\n-    {\n-      if (global_options.x_rs6000_ieeequad)\n-\terror (\"%qs requires %qs\", \"-mabi=ieeelongdouble\", \"-mlong-double-128\");\n-      else\n-\terror (\"%qs requires %qs\", \"-mabi=ibmlongdouble\", \"-mlong-double-128\");\n-    }\n \n   /* Set -mabi=ieeelongdouble on some old targets.  In the future, power server\n      systems will also set long double to be IEEE 128-bit.  AIX and Darwin\n@@ -4194,13 +4187,13 @@ rs6000_option_override_internal (bool global_init_p)\n   if (!OPTION_SET_P (rs6000_ieeequad))\n     rs6000_ieeequad = TARGET_IEEEQUAD_DEFAULT;\n \n-  else\n+  else if (TARGET_LONG_DOUBLE_128)\n     {\n       if (global_options.x_rs6000_ieeequad\n \t  && (!TARGET_POPCNTD || !TARGET_VSX))\n \terror (\"%qs requires full ISA 2.06 support\", \"-mabi=ieeelongdouble\");\n \n-      if (rs6000_ieeequad != TARGET_IEEEQUAD_DEFAULT && TARGET_LONG_DOUBLE_128)\n+      if (rs6000_ieeequad != TARGET_IEEEQUAD_DEFAULT)\n \t{\n \t  /* Determine if the user can change the default long double type at\n \t     compilation time.  You need GLIBC 2.32 or newer to be able to"}, {"sha": "39d46027a1962de6d0e8ebce287bdfd0a69dfc13", "filename": "gcc/testsuite/gcc.target/powerpc/pr104208-1.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-1.c?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -0,0 +1,9 @@\n+/* PR target/104208 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mabi=ibmlongdouble -mlong-double-64 -Wno-psabi\" } */\n+\n+/* Verify we do not emit an error with the options above.  It is allowed\n+   to reset the long double size to 64-bits after a 128-bit long double\n+   ABI has been selected.  */\n+\n+int i;"}, {"sha": "4e8ab5b099f692a0b9140552bed4878599f6ce0c", "filename": "gcc/testsuite/gcc.target/powerpc/pr104208-2.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr104208-2.c?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -0,0 +1,10 @@\n+/* PR target/104208 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mlong-double-128 -mabi=ieeelongdouble -mlong-double-64 -mno-vsx -Wno-psabi\" } */\n+\n+/* Verify we do not emit an error with the options above.  IEEE 128-bit\n+   long double requires VSX, so using -mno-vsx would normally generate\n+   an error.  However, if we have changed to a 64-bit long double, then\n+   we should allow it.  */\n+\n+int i;"}, {"sha": "f9dc6426418d7f07f7e1877231526f34f12328ce", "filename": "gcc/testsuite/gcc.target/powerpc/pr87496-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-2.c?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -1,7 +1,7 @@\n /* PR target/87496 */\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-options \"-O2 -mdejagnu-cpu=power7 -mabi=ieeelongdouble -mlong-double-64 -Wno-psabi\" } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power7 -mlong-double-64 -mabi=ieeelongdouble -Wno-psabi\" } */\n \n int i;\n "}, {"sha": "39fb73cbb32364ccc9f24aea8ce0657fbaa68977", "filename": "gcc/testsuite/gcc.target/powerpc/pr87496-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr87496-3.c?ref=cb16bc3b5f34733ef9bbf8d2e3acacdecb099a62", "patch": "@@ -1,7 +1,7 @@\n /* PR target/87496 */\n /* { dg-do compile { target { powerpc*-*-* } } } */\n /* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n-/* { dg-options \"-O2 -mabi=ibmlongdouble -mlong-double-64 -Wno-psabi\" } */\n+/* { dg-options \"-O2 -mlong-double-64 -mabi=ibmlongdouble -Wno-psabi\" } */\n \n int i;\n "}]}