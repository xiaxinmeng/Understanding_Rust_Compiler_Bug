{"sha": "daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGFlZmQ3OGI0Y2NjMjhjZTUyZTVjOGE3YWJlYmU1YjZmYzkwM2NjMw==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-05-16T01:02:59Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1995-05-16T01:02:59Z"}, "message": "Update weak symbol support\n\nFrom-SVN: r9697", "tree": {"sha": "9d5f3bb804d2bbfb71d3beebd8c3bc2c6f1f2499", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d5f3bb804d2bbfb71d3beebd8c3bc2c6f1f2499"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/comments", "author": null, "committer": null, "parents": [{"sha": "27a2e668fddbb747a6f62e3c2388ca846319ebe5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27a2e668fddbb747a6f62e3c2388ca846319ebe5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27a2e668fddbb747a6f62e3c2388ca846319ebe5"}], "stats": {"total": 173, "additions": 109, "deletions": 64}, "files": [{"sha": "f06be296d8fb9827fcb72c972ccb94dfd23adcb2", "filename": "gcc/c-decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -1791,6 +1791,7 @@ duplicate_decls (newdecl, olddecl)\n     }\n \n   /* Merge the storage class information.  */\n+  DECL_WEAK (newdecl) |= DECL_WEAK (olddecl);\t  \n   /* For functions, static overrides non-static.  */\n   if (TREE_CODE (newdecl) == FUNCTION_DECL)\n     {"}, {"sha": "530492b06b321f9d8e4579094cdd11b7661b33ae", "filename": "gcc/c-pragma.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -17,10 +17,10 @@ You should have received a copy of the GNU General Public License\n along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n-/* Support #pragma weak by default if WEAK_ASM_OP and ASM_OUTPUT_DEF\n-   are defined.  */\n-#if !defined (HANDLE_PRAGMA_WEAK) && defined (WEAK_ASM_OP) && defined (ASM_OUTPUT_DEF)\n-#define HANDLE_PRAGMA_WEAK 1\n+/* Support #pragma weak iff ASM_WEAKEN_LABEL and ASM_OUTPUT_DEF are\n+   defined.  */\n+#if defined (ASM_WEAKEN_LABEL) && defined (ASM_OUTPUT_DEF)\n+#define HANDLE_PRAGMA_WEAK SUPPORTS_WEAK\n #endif\n \n enum pragma_state"}, {"sha": "b398965e7adb835d34e005ce04c3d9518a749434", "filename": "gcc/config/aoutos.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Faoutos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Faoutos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faoutos.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -85,18 +85,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \tfputc ('\\n', FILE);\t\t\t\t\t\t\\\n       }\t\t\t\t\t\t\t\t\t\\\n   } while (0)\n-\n-/* If we're using GNU as and ld, we support weak symbols.  */\n-\n-#define HANDLE_PRAGMA_WEAK flag_gnu_linker\n-#define WEAK_ASM_OP\t\".weak\"\n-#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n- do { if (flag_gnu_linker)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"\\t%s\\t\", \".set\");\t\t\t\t\\\n-\t  assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\t  assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "102cb94813401e15abdf3d2c1ea0b111c7b05520", "filename": "gcc/config/i386/freebsd.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fi386%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Ffreebsd.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -118,7 +118,12 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #define TYPE_ASM_OP\t\".type\"\n #define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers"}, {"sha": "159c1840268a670ca2e03a50a81a12d5566dd3bf", "filename": "gcc/config/i386/osfrose.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fi386%2Fosfrose.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fi386%2Fosfrose.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fosfrose.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -94,7 +94,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Handle #pragma weak and #pragma pack.  */\n \n #define HANDLE_SYSV_PRAGMA\n-#define HANDLE_PRAGMA_WEAK\tTARGET_ELF\n+#define SUPPORTS_WEAK\tTARGET_ELF\n \n /* Change default predefines.  */\n #undef\tCPP_PREDEFINES\n@@ -617,9 +617,14 @@ while (0)\n \n #define TYPE_ASM_OP\t\".type\"\n #define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n #define SET_ASM_OP\t\".set\"\n \n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n+\n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers\n    expect various different forms for this operand.  The one given here"}, {"sha": "3f84cd672a336bfc5a6857bd3dd5ccde00ad892f", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -198,13 +198,13 @@ extern char * reg_names[];\n    Redefined in sysv4.h, and luna.h.  */\n #define VERSION_INFO1\t\"88open OCS/BCS, \"\n #ifndef VERSION_INFO2\n-#define VERSION_INFO2   \"$Revision: 1.1.1.2.2.2 $\"\n+#define VERSION_INFO2   \"$Revision: 1.63 $\"\n #endif\n \n #ifndef VERSION_STRING\n #define VERSION_STRING  version_string\n #ifdef __STDC__\n-#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.1.1.2.2.2 $ \" __DATE__\n+#define TM_RCS_ID      \"@(#)\" __FILE__ \" $Revision: 1.63 $ \" __DATE__\n #else\n #define TM_RCS_ID      \"$What: <@(#) m88k.h,v\t1.1.1.2.2.2> $\"\n #endif  /* __STDC__ */\n@@ -1542,7 +1542,7 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #define HANDLE_SYSV_PRAGMA\n \n /* Tell when to handle #pragma weak.  This is only done for V.4.  */\n-#define HANDLE_PRAGMA_WEAK TARGET_SVR4\n+#define SUPPORTS_WEAK TARGET_SVR4\n \n /* Max number of bytes we can move from memory to memory\n    in one reasonably fast instruction.  */\n@@ -1725,7 +1725,6 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n #undef\tFINI_SECTION_ASM_OP\n #undef\tTYPE_ASM_OP\n #undef\tSIZE_ASM_OP\n-#undef\tWEAK_ASM_OP\n #undef\tSET_ASM_OP\n #undef\tSKIP_ASM_OP\n #undef\tCOMMON_ASM_OP\n@@ -1776,12 +1775,18 @@ enum reg_class { NO_REGS, AP_REG, XRF_REGS, GENERAL_REGS, AGRF_REGS,\n /* These are specific to PIC.  */\n #define TYPE_ASM_OP\t\t\"type\"\n #define SIZE_ASM_OP\t\t\"size\"\n-#define WEAK_ASM_OP\t\t\"weak\"\n #ifndef AS_BUG_POUND_TYPE /* Faulty assemblers require @ rather than #.  */\n #undef\tTYPE_OPERAND_FMT\n #define TYPE_OPERAND_FMT\t\"#%s\"\n #endif\n \n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#undef ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\tweak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n+\n /* These are specific to version 03.00 assembler syntax.  */\n #define INTERNAL_ASM_OP\t\t\"local\"\n #define VERSION_ASM_OP\t\t\"version\""}, {"sha": "8c0974ade4dafca578a1de01c6ae96e7235713c0", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -82,10 +82,15 @@\n \n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n-#undef WEAK_ASM_OP\n #define TYPE_ASM_OP\t\".type\"\n #define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#undef ASM_WEAKEN_LABEL\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers"}, {"sha": "c7bcaad12c414c5a958a0ad99101bea34d0ba6c6", "filename": "gcc/config/sparc/sunos4.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fsparc%2Fsunos4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsunos4.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -20,18 +20,3 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #define SUNOS4_SHARED_LIBRARIES 1\n \n #include \"sparc/sparc.h\"\n-\n-/* If we're using GNU as and ld, we support weak symbols.  */\n-\n-#define HANDLE_PRAGMA_WEAK flag_gnu_linker\n-#define WEAK_ASM_OP\t\".weak\"\n-#define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n- do { if (flag_gnu_linker)\t\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  fprintf ((FILE), \"\\t%s\\t\", \".set\");\t\t\t\t\\\n-\t  assemble_name (FILE, LABEL1);\t\t\t\t\t\\\n-\t  fprintf (FILE, \",\");\t\t\t\t\t\t\\\n-\t  assemble_name (FILE, LABEL2);\t\t\t\t\t\\\n-\t  fprintf (FILE, \"\\n\");\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-  } while (0)"}, {"sha": "c1c8692aea3d5643950b14547fdabedc4a26f2e9", "filename": "gcc/config/svr4.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fsvr4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fconfig%2Fsvr4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsvr4.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -648,7 +648,12 @@ dtors_section ()\t\t\t\t\t\t\t\\\n \n #define TYPE_ASM_OP\t\".type\"\n #define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n+\n+/* This is how we tell the assembler that a symbol is weak.  */\n+\n+#define ASM_WEAKEN_LABEL(FILE,NAME) \\\n+  do { fputs (\"\\t.weak\\t\", FILE); assemble_name (FILE, NAME); \\\n+       fputc ('\\n', FILE); } while (0)\n \n /* The following macro defines the format used to output the second\n    operand of the .type assembler directive.  Different svr4 assemblers"}, {"sha": "f43a3f084c8e27376c6268d7ac99d929c1c3a31e", "filename": "gcc/defaults.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -131,3 +131,12 @@ do { fprintf (FILE, \"\\t%s\\t\", ASM_SHORT);\t\t\t\t\\\n   } while (0)\n #endif\n #endif\n+\n+/* This determines whether or not we support weak symbols.  */\n+#ifndef SUPPORTS_WEAK\n+#ifdef ASM_WEAKEN_LABEL\n+#define SUPPORTS_WEAK 1\n+#else\n+#define SUPPORTS_WEAK 0\n+#endif\n+#endif"}, {"sha": "32cb00bca05b5294b21c56b03fdf4adab09415e1", "filename": "gcc/libgcc2.c", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Flibgcc2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Flibgcc2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flibgcc2.c?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -31,6 +31,7 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"tconfig.h\"\n #include \"machmode.h\"\n+#include \"defaults.h\" \n #ifndef L_trampoline\n #include <stddef.h>\n #endif\n@@ -40,6 +41,10 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #undef abort\n #endif\n \n+#if (SUPPORTS_WEAK == 1) && defined (ASM_OUTPUT_DEF)\n+#define WEAK_ALIAS\n+#endif\n+\n /* Permit the tm.h file to select the endianness to use just for this\n    file.  This is used when the endianness is determined when the\n    compiler is run.  */\n@@ -1606,9 +1611,15 @@ typedef void (*vfp)(void);\n extern vfp __new_handler;\n extern void __default_new_handler (void);\n \n-void * __builtin_new (size_t sz) __attribute__ ((weak));\n+#ifdef WEAK_ALIAS\n+void * __builtin_new (size_t sz)\n+     __attribute__ ((weak, alias (\"___builtin_new\")));\n+void *\n+___builtin_new (size_t sz)\n+#else\n void *\n __builtin_new (size_t sz)\n+#endif\n {\n   void *p;\n   vfp handler = (__new_handler) ? __new_handler : __default_new_handler;\n@@ -1633,9 +1644,15 @@ __builtin_new (size_t sz)\n \n extern void * __builtin_new (size_t);\n \n-void * __builtin_vec_new (size_t sz) __attribute__ ((weak));\n+#ifdef WEAK_ALIAS\n+void * __builtin_vec_new (size_t sz)\n+     __attribute__ ((weak, alias (\"___builtin_vec_new\")));\n+void *\n+___builtin_vec_new (size_t sz)\n+#else\n void *\n __builtin_vec_new (size_t sz)\n+#endif\n {\n   return __builtin_new (sz);\n }\n@@ -1696,9 +1713,15 @@ __default_new_handler ()\n    by C++ programs to return to the free store a block of memory allocated\n    as a single object. */\n \n-void __builtin_delete (void *ptr) __attribute__ ((weak));\n+#ifdef WEAK_ALIAS\n+void __builtin_delete (void *ptr)\n+     __attribute__ ((weak, alias (\"___builtin_delete\")));\n+void\n+___builtin_delete (void *ptr)\n+#else\n void\n __builtin_delete (void *ptr)\n+#endif\n {\n   if (ptr)\n     free (ptr);\n@@ -1712,9 +1735,15 @@ __builtin_delete (void *ptr)\n \n extern void __builtin_delete (void *);\n \n-void __builtin_vec_delete (void *ptr) __attribute__ ((weak));\n+#ifdef WEAK_ALIAS\n+void __builtin_vec_delete (void *ptr)\n+     __attribute__ ((weak, alias (\"___builtin_vec_delete\")));\n+void\n+___builtin_vec_delete (void *ptr)\n+#else\n void\n __builtin_vec_delete (void *ptr)\n+#endif\n {\n   __builtin_delete (ptr);\n }"}, {"sha": "e30fe04743e979085f41569a189f20144c6981a0", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -958,6 +958,9 @@ struct tree_type\n /* Used to indicate that this DECL represents a compiler-generated entity.  */\n #define DECL_ARTIFICIAL(NODE) ((NODE)->decl.artificial_flag)\n \n+/* Used to indicate that this DECL has weak linkage.  */\n+#define DECL_WEAK(NODE) ((NODE)->decl.weak_flag)\n+\n /* Additional flags for language-specific uses.  */\n #define DECL_LANG_FLAG_0(NODE) ((NODE)->decl.lang_flag_0)\n #define DECL_LANG_FLAG_1(NODE) ((NODE)->decl.lang_flag_1)\n@@ -997,7 +1000,8 @@ struct tree_decl\n   unsigned static_ctor_flag : 1;\n   unsigned static_dtor_flag : 1;\n   unsigned artificial_flag : 1;\n-  /* room for one more */\n+  unsigned weak_flag : 1;\n+  /* room for no more */\n \n   unsigned lang_flag_0 : 1;\n   unsigned lang_flag_1 : 1;"}, {"sha": "a06680b40b22659d5790ae2d205a0e6e7308d49d", "filename": "gcc/varasm.c", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=daefd78b4ccc28ce52e5c8a7abebe5b6fc903cc3", "patch": "@@ -802,6 +802,11 @@ assemble_start_function (decl, fnname)\n     {\n       if (!first_global_object_name)\n \tSTRIP_NAME_ENCODING (first_global_object_name, fnname);\n+#ifdef ASM_WEAKEN_LABEL\n+      if (DECL_WEAK (decl))\n+\tASM_WEAKEN_LABEL (asm_out_file, fnname);\n+      else\n+#endif\n       if (output_bytecode)\n \tBC_GLOBALIZE_LABEL (asm_out_file, fnname);\n       else\n@@ -1172,6 +1177,11 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n     {\n       if (!first_global_object_name)\n \tSTRIP_NAME_ENCODING(first_global_object_name, name);\n+#ifdef ASM_WEAKEN_LABEL\n+      if (DECL_WEAK (decl))\n+\tASM_WEAKEN_LABEL (asm_out_file, name);\n+      else\n+#endif\n       ASM_GLOBALIZE_LABEL (asm_out_file, name);\n     }\n #if 0\n@@ -3964,14 +3974,12 @@ void\n declare_weak (decl)\n      tree decl;\n {\n-#ifdef HANDLE_PRAGMA_WEAK\n   if (! TREE_PUBLIC (decl))\n     error_with_decl (decl, \"weak declaration of `%s' must be public\");\n-  else\n-    handle_pragma_weak (ps_name,\n-\t\t\tIDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (decl)),\n-\t\t\tNULL_PTR);\n-#endif\n+  else if (TREE_ASM_WRITTEN (decl))\n+    error_with_decl (decl, \"weak declaration of `%s' must precede definition\");\n+  else if (SUPPORTS_WEAK)\n+    DECL_WEAK (decl) = 1;\n }\n \n /* Emit any pending weak declarations.  */\n@@ -3985,14 +3993,7 @@ weak_finish ()\n       struct weak_syms *t;\n       for (t = weak_decls; t; t = t->next)\n \t{\n-\t  fprintf (asm_out_file, \"\\t%s\\t\", WEAK_ASM_OP);\n-\n-\t  if (output_bytecode)\n-\t    BC_OUTPUT_LABELREF (asm_out_file, t->name);\n-\t  else\n-\t    ASM_OUTPUT_LABELREF (asm_out_file, t->name);\n-\n-\t  fputc ('\\n', asm_out_file);\n+\t  ASM_WEAKEN_LABEL (asm_out_file, t->name);\n \t  if (t->value)\n \t    ASM_OUTPUT_DEF (asm_out_file, t->name, t->value);\n \t}\n@@ -4014,13 +4015,19 @@ assemble_alias (decl, target)\n \n   if (TREE_PUBLIC (decl))\n     {\n+#ifdef ASM_WEAKEN_LABEL\n+      if (DECL_WEAK (decl))\n+\tASM_WEAKEN_LABEL (asm_out_file, name);\n+      else\n+#endif\n       if (output_bytecode)\n \tBC_GLOBALIZE_LABEL (asm_out_file, name);\n       else\n \tASM_GLOBALIZE_LABEL (asm_out_file, name);\n     }\n \n   ASM_OUTPUT_DEF (asm_out_file, name, IDENTIFIER_POINTER (target));\n+  TREE_ASM_WRITTEN (decl) = 1;\n #else\n   warning (\"alias definitions not supported in this configuration\");\n #endif"}]}