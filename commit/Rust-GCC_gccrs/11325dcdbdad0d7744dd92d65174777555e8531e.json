{"sha": "11325dcdbdad0d7744dd92d65174777555e8531e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTEzMjVkY2RiZGFkMGQ3NzQ0ZGQ5MmQ2NTE3NDc3NzU1NWU4NTMxZQ==", "commit": {"author": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@users.sourceforge.net", "date": "2003-10-20T12:42:37Z"}, "committer": {"name": "Kriang Lerdsuwanakij", "email": "lerdsuwa@gcc.gnu.org", "date": "2003-10-20T12:42:37Z"}, "message": "PR c++/9781, c++/10583, c++/11862\n\n\tPR c++/9781, c++/10583, c++/11862\n\t* decl.c (cp_finish_decl): Exit immediately if decl is an\n\terror_mark_node.\n\t* pt.c (push_template_decl_real): Return error_mark_node for\n\tinvalid template declaration of variable.\n\n\t* g++.dg/parse/crash13.C: New test.\n\nFrom-SVN: r72701", "tree": {"sha": "3889a0af25f3e42e85de9eb3f6a37620a052feda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3889a0af25f3e42e85de9eb3f6a37620a052feda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11325dcdbdad0d7744dd92d65174777555e8531e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11325dcdbdad0d7744dd92d65174777555e8531e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11325dcdbdad0d7744dd92d65174777555e8531e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11325dcdbdad0d7744dd92d65174777555e8531e/comments", "author": null, "committer": null, "parents": [{"sha": "adccacc41df4afbdaaa6a5b45364a51708e56088", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adccacc41df4afbdaaa6a5b45364a51708e56088", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adccacc41df4afbdaaa6a5b45364a51708e56088"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "ca19a4b17b1a89aed89717d8e7744880097b6b09", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=11325dcdbdad0d7744dd92d65174777555e8531e", "patch": "@@ -1,3 +1,11 @@\n+2003-10-20  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/9781, c++/10583, c++/11862\n+\t* decl.c (cp_finish_decl): Exit immediately if decl is an\n+\terror_mark_node.\n+\t* pt.c (push_template_decl_real): Return error_mark_node for\n+\tinvalid template declaration of variable.\n+\n 2003-10-18  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n \n \tPR c++/12495"}, {"sha": "8ca69d139895cfa3082dc90447fc9e132e27d240", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=11325dcdbdad0d7744dd92d65174777555e8531e", "patch": "@@ -4658,7 +4658,9 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   const char *asmspec = NULL;\n   int was_readonly = 0;\n \n-  if (! decl)\n+  if (decl == error_mark_node)\n+    return;\n+  else if (! decl)\n     {\n       if (init)\n \terror (\"assignment (not initialization) in declaration\");"}, {"sha": "3470193d1898617333e4b221a539e7efd1d8e364", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=11325dcdbdad0d7744dd92d65174777555e8531e", "patch": "@@ -2690,7 +2690,10 @@ push_template_decl_real (tree decl, int is_friend)\n \t       || TREE_CODE (decl) == FUNCTION_DECL)\n \t/* OK */;\n       else\n-\terror (\"template declaration of `%#D'\", decl);\n+\t{\n+\t  error (\"template declaration of `%#D'\", decl);\n+\t  return error_mark_node;\n+\t}\n     }\n \n   /* Check to see that the rules regarding the use of default"}, {"sha": "9617fc22c72d41dfec5ca3b01328a1fdb9af97c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=11325dcdbdad0d7744dd92d65174777555e8531e", "patch": "@@ -1,3 +1,8 @@\n+2003-10-20  Kriang Lerdsuwanakij  <lerdsuwa@users.sourceforge.net>\n+\n+\tPR c++/9781, c++/10583, c++/11862\n+\t* g++.dg/parse/crash13.C: New test.\n+\n 2003-10-20  Zdenek Dvorak  <rakdver@atrey.karlin.mff.cuni.cz>\n \n \t* gcc.dg/old-style-asm-1.c: Count jump_insns instead of labels."}, {"sha": "d81b6a55e7a6108b04d5be7d35f17d2f026efb93", "filename": "gcc/testsuite/g++.dg/parse/crash13.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11325dcdbdad0d7744dd92d65174777555e8531e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fcrash13.C?ref=11325dcdbdad0d7744dd92d65174777555e8531e", "patch": "@@ -0,0 +1,22 @@\n+// { dg-do compile }\n+\n+// Origin: Giovanni Bajo <giovannibajo@libero.it>\n+\n+// PR c++/10583: ICE using template function with invalid signature.\n+\n+template <typename> \n+struct A \n+{\n+    struct B \n+    {};\n+};\n+\n+template <typename T> \n+void func(A<T>::B* )\t// { dg-error \"variable|template|expression\" }\n+{\t\t\t// { dg-error \";\" }\n+}\n+\n+int main() \n+{\n+  func<void>(0);\t// { dg-error \"undeclared|expression|;\" }\n+}"}]}