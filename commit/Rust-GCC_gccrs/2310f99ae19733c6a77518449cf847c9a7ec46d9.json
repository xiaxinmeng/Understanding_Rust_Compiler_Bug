{"sha": "2310f99ae19733c6a77518449cf847c9a7ec46d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjMxMGY5OWFlMTk3MzNjNmE3NzUxODQ0OWNmODQ3YzlhN2VjNDZkOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@mhpcc.edu", "date": "1998-09-25T19:11:55Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "1998-09-25T19:11:55Z"}, "message": "rs6000.c (function_arg_boundary): Revert accidental change on September 18.\n\n        * rs6000.c (function_arg_boundary): Revert accidental change on\n        September 18.\n\nFrom-SVN: r22595", "tree": {"sha": "7adf5d03a4afc26276a35852824dce7be141a2ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7adf5d03a4afc26276a35852824dce7be141a2ff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2310f99ae19733c6a77518449cf847c9a7ec46d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2310f99ae19733c6a77518449cf847c9a7ec46d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2310f99ae19733c6a77518449cf847c9a7ec46d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2310f99ae19733c6a77518449cf847c9a7ec46d9/comments", "author": null, "committer": null, "parents": [{"sha": "17167fd8b5d38d7a273d66ef86a29492cace62f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17167fd8b5d38d7a273d66ef86a29492cace62f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17167fd8b5d38d7a273d66ef86a29492cace62f6"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "62c224b5913760a7eb76a0ded8fc403308ceacf4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2310f99ae19733c6a77518449cf847c9a7ec46d9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2310f99ae19733c6a77518449cf847c9a7ec46d9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2310f99ae19733c6a77518449cf847c9a7ec46d9", "patch": "@@ -1,3 +1,8 @@\n+Fri Sep 25 22:09:47 1998  David Edelsohn  <edelsohn@mhpcc.edu>\n+\n+\t* rs6000.c (function_arg_boundary): Revert accidental change on\n+\tSeptember 18.\n+\n Fri Sep 25 20:30:00 1998  Michael Meissner  <meissner@cygnus.com>\n \n \t* rs6000.h (ASM_OUTPUT_MI_THUNK): Declare, call output_mi_thunk."}, {"sha": "b7a7d3d0db348f416fd7b1f3b34baa9196b6e121", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2310f99ae19733c6a77518449cf847c9a7ec46d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2310f99ae19733c6a77518449cf847c9a7ec46d9/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2310f99ae19733c6a77518449cf847c9a7ec46d9", "patch": "@@ -228,7 +228,7 @@ rs6000_override_options (default_cpu)\n \t {\"604\", PROCESSOR_PPC604,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n-\t {\"604e\", PROCESSOR_PPC604,\n+\t {\"604e\", PROCESSOR_PPC604e,\n \t    MASK_POWERPC | MASK_PPC_GFXOPT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | MASK_PPC_GPOPT | MASK_POWERPC64},\n \t {\"620\", PROCESSOR_PPC620,\n@@ -353,13 +353,11 @@ optimization_options (level, size)\n      int level;\n      int size ATTRIBUTE_UNUSED;\n {\n-#if 0\n #ifdef HAIFA\n   /* When optimizing, enable use of BCT instruction.  */\n   if (level >= 1)\n       flag_branch_on_count_reg = 1;\n #endif\n-#endif\n }\n \f\n /* Do anything needed at the start of the asm file.  */\n@@ -1319,18 +1317,14 @@ function_arg_padding (mode, type)\n    \n    Windows NT wants anything >= 8 bytes to be double word aligned.\n \n-   V.4 wants long longs to be double word aligned.\n-\n-   FP emulation: double precision passed, returned, and same alignment\n-   as long long.  */\n+   V.4 wants long longs to be double word aligned.  */\n \n int\n function_arg_boundary (mode, type)\n      enum machine_mode mode;\n      tree type;\n {\n-  if ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS)\n-      && ((mode == DImode) || (TARGET_SOFT_FLOAT && mode == DFmode)))\n+  if ((DEFAULT_ABI == ABI_V4 || DEFAULT_ABI == ABI_SOLARIS) && mode == DImode)\n     return 64;\n \n   if (DEFAULT_ABI != ABI_NT || TARGET_64BIT)"}]}