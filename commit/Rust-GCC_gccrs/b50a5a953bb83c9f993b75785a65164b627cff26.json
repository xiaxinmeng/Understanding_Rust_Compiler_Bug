{"sha": "b50a5a953bb83c9f993b75785a65164b627cff26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwYTVhOTUzYmI4M2M5Zjk5M2I3NTc4NWE2NTE2NGI2MjdjZmYyNg==", "commit": {"author": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-24T17:48:01Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2004-07-24T17:48:01Z"}, "message": "libiberty.h (XNEW, [...]): Move here from libcpp/internal.h.\n\n\t* libiberty.h (XNEW, XCNEW, XNEWVEC, XCNEWVEC, XOBNEW): Move here from\n\tlibcpp/internal.h.\n\t(XDELETE, XRESIZEVEC, XDELETEVEC, XNEWVAR, XCNEWVAR, XRESIZEVAR): New\n\tmacros.\n\nFrom-SVN: r85119", "tree": {"sha": "4c504fd2a4d3f4268fba46853fbb3488c315c964", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c504fd2a4d3f4268fba46853fbb3488c315c964"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b50a5a953bb83c9f993b75785a65164b627cff26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50a5a953bb83c9f993b75785a65164b627cff26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b50a5a953bb83c9f993b75785a65164b627cff26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b50a5a953bb83c9f993b75785a65164b627cff26/comments", "author": null, "committer": null, "parents": [{"sha": "8b66a9e980e7f7d1b73abe11bec3dfb25b1bfc81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b66a9e980e7f7d1b73abe11bec3dfb25b1bfc81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b66a9e980e7f7d1b73abe11bec3dfb25b1bfc81"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "68eeeae739699c75ab87d61a95b330c0a01d449c", "filename": "include/libiberty.h", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b50a5a953bb83c9f993b75785a65164b627cff26/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b50a5a953bb83c9f993b75785a65164b627cff26/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=b50a5a953bb83c9f993b75785a65164b627cff26", "patch": "@@ -250,6 +250,37 @@ extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;\n extern double physmem_total PARAMS ((void));\n extern double physmem_available PARAMS ((void));\n \n+\n+/* These macros provide a K&R/C89/C++-friendly way of allocating structures\n+   with nice encapsulation.  The XDELETE*() macros are technically\n+   superfluous, but provided here for symmetry.  Using them consistently\n+   makes it easier to update client code to use different allocators such\n+   as new/delete and new[]/delete[].  */\n+\n+/* Scalar allocators.  */\n+\n+#define XNEW(T)\t\t\t((T *) xmalloc (sizeof (T)))\n+#define XCNEW(T)\t\t((T *) xcalloc (1, sizeof (T)))\n+#define XDELETE(P)\t\tfree ((P))\n+\n+/* Array allocators.  */\n+\n+#define XNEWVEC(T, N)\t\t((T *) xmalloc (sizeof (T) * (N)))\n+#define XCNEWVEC(T, N)\t\t((T *) xcalloc ((N), sizeof (T)))\n+#define XRESIZEVEC(T, P, N)\t((T *) xrealloc ((P), sizeof (T) * (N)))\n+#define XDELETEVEC(P)\t\tfree ((P))\n+\n+/* Allocators for variable-sized structures and raw buffers.  */\n+\n+#define XNEWVAR(T, S)\t\t((T *) xmalloc ((S)))\n+#define XCNEWVAR(T, S)\t\t((T *) xcalloc (1, (S)))\n+#define XRESIZEVAR(T, P, S)\t((T *) xrealloc ((P), (S)))\n+\n+/* Type-safe obstack allocator.  */\n+\n+#define XOBNEW(O, T)\t\t((T *) obstack_alloc ((O), sizeof (T)))\n+\n+\n /* hex character manipulation routines */\n \n #define _hex_array_size 256"}]}