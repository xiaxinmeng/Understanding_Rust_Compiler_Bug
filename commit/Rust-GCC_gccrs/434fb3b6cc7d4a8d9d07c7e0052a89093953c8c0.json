{"sha": "434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM0ZmIzYjZjYzdkNGE4ZDlkMDdjN2UwMDUyYTg5MDkzOTUzYzhjMA==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-11-13T13:05:43Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2020-12-14T10:47:29Z"}, "message": "arm: Auto-vectorization for MVE: veor\n\nThis patch enables MVE veorq instructions for auto-vectorization.  MVE\nveorq insns in mve.md are modified to use xor instead of unspec\nexpression to support xor<mode>3.  The xor<mode>3 expander is added to\nvec-common.md\n\n2020-12-11  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/iterators.md (supf): Remove VEORQ_S and VEORQ_U.\n\t(VEORQ): Remove.\n\t* config/arm/mve.md (mve_veorq_u<mode>): New entry for veor\n\tinstruction using expression xor.\n\t(mve_veorq_s<mode>): New expander.\n\t(mve_veorq_f<mode>): Use 'xor' code instead of unspec.\n\t* config/arm/neon.md (xor<mode>3): Renamed into xor<mode>3_neon.\n\t* config/arm/unspecs.md (VEORQ_S, VEORQ_U, VEORQ_F): Remove.\n\t* config/arm/vec-common.md (xor<mode>3): New expander.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-veor.c: Add tests for veor.", "tree": {"sha": "2ebe83e351e0e892bb39c63edc19348d196798a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ebe83e351e0e892bb39c63edc19348d196798a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/comments", "author": null, "committer": null, "parents": [{"sha": "ebc15a4e1eee66f68b106e93d4fbf4ed9c8ef07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebc15a4e1eee66f68b106e93d4fbf4ed9c8ef07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebc15a4e1eee66f68b106e93d4fbf4ed9c8ef07a"}], "stats": {"total": 98, "additions": 84, "deletions": 14}, "files": [{"sha": "01952756e0889ad1c6a3b357d9495aeadff260ef", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -1237,7 +1237,7 @@\n \t\t       (VCADDQ_ROT270_U \"u\") (VCADDQ_ROT90_S \"s\")\n \t\t       (VCMPEQQ_S \"s\") (VCMPEQQ_U \"u\") (VCADDQ_ROT90_U \"u\")\n \t\t       (VCMPEQQ_N_S \"s\") (VCMPEQQ_N_U \"u\") (VCMPNEQ_N_S \"s\")\n-\t\t       (VCMPNEQ_N_U \"u\") (VEORQ_S \"s\") (VEORQ_U \"u\")\n+\t\t       (VCMPNEQ_N_U \"u\")\n \t\t       (VHADDQ_N_S \"s\") (VHADDQ_N_U \"u\") (VHADDQ_S \"s\")\n \t\t       (VHADDQ_U \"u\") (VHSUBQ_N_S \"s\")\t(VHSUBQ_N_U \"u\")\n \t\t       (VHSUBQ_S \"s\") (VMAXQ_S \"s\") (VMAXQ_U \"u\") (VHSUBQ_U \"u\")\n@@ -1507,7 +1507,6 @@\n (define_int_iterator VCMPEQQ [VCMPEQQ_U VCMPEQQ_S])\n (define_int_iterator VCMPEQQ_N [VCMPEQQ_N_S VCMPEQQ_N_U])\n (define_int_iterator VCMPNEQ_N [VCMPNEQ_N_U VCMPNEQ_N_S])\n-(define_int_iterator VEORQ [VEORQ_U VEORQ_S])\n (define_int_iterator VHADDQ [VHADDQ_S VHADDQ_U])\n (define_int_iterator VHADDQ_N [VHADDQ_N_U VHADDQ_N_S])\n (define_int_iterator VHSUBQ [VHSUBQ_S VHSUBQ_U])"}, {"sha": "10512ad000725cf254a726b7ca3efd193d0d1c36", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -1207,17 +1207,24 @@\n ;;\n ;; [veorq_u, veorq_s])\n ;;\n-(define_insn \"mve_veorq_<supf><mode>\"\n+(define_insn \"mve_veorq_u<mode>\"\n   [\n    (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_2 2 \"s_register_operand\" \"w\")]\n-\t VEORQ))\n+\t(xor:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\" \"w\")\n+\t\t   (match_operand:MVE_2 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE\"\n-  \"veor %q0, %q1, %q2\"\n+  \"veor\\t%q0, %q1, %q2\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+(define_expand \"mve_veorq_s<mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\")\n+\t(xor:MVE_2 (match_operand:MVE_2 1 \"s_register_operand\")\n+\t\t   (match_operand:MVE_2 2 \"s_register_operand\")))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+)\n \n ;;\n ;; [vhaddq_n_u, vhaddq_n_s])\n@@ -2404,9 +2411,8 @@\n (define_insn \"mve_veorq_f<mode>\"\n   [\n    (set (match_operand:MVE_0 0 \"s_register_operand\" \"=w\")\n-\t(unspec:MVE_0 [(match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n-\t\t       (match_operand:MVE_0 2 \"s_register_operand\" \"w\")]\n-\t VEORQ_F))\n+\t(xor:MVE_0 (match_operand:MVE_0 1 \"s_register_operand\" \"w\")\n+\t\t   (match_operand:MVE_0 2 \"s_register_operand\" \"w\")))\n   ]\n   \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n   \"veor %q0, %q1, %q2\""}, {"sha": "e1263b00b39ddd908a7f1e22f81ea545ebde1df6", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -747,7 +747,7 @@\n   [(set_attr \"type\" \"neon_logic<q>\")]\n )\n \n-(define_insn \"xor<mode>3\"\n+(define_insn \"xor<mode>3_neon\"\n   [(set (match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n \t(xor:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"w\")\n \t\t (match_operand:VDQ 2 \"s_register_operand\" \"w\")))]"}, {"sha": "fe240e8968a7aa98aecbb7463ebddf17fc3edb70", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -608,7 +608,6 @@\n   VCMPEQQ_S\n   VCMPEQQ_N_S\n   VCMPNEQ_N_S\n-  VEORQ_S\n   VHADDQ_S\n   VHADDQ_N_S\n   VHSUBQ_S\n@@ -653,7 +652,6 @@\n   VCMPEQQ_U\n   VCMPEQQ_N_U\n   VCMPNEQ_N_U\n-  VEORQ_U\n   VHADDQ_U\n   VHADDQ_N_U\n   VHSUBQ_U\n@@ -736,7 +734,6 @@\n   VCMULQ_ROT180_F\n   VCMULQ_ROT270_F\n   VCMULQ_ROT90_F\n-  VEORQ_F\n   VMAXNMAQ_F\n   VMAXNMAVQ_F\n   VMAXNMQ_F"}, {"sha": "030ed82ca7e21346db267a191c95e5ec97085286", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -186,3 +186,10 @@\n \t\t (match_operand:VDQ 2 \"neon_logic_op2\" \"\")))]\n   \"ARM_HAVE_<MODE>_ARITH\"\n )\n+\n+(define_expand \"xor<mode>3\"\n+  [(set (match_operand:VDQ 0 \"s_register_operand\" \"\")\n+\t(xor:VDQ (match_operand:VDQ 1 \"s_register_operand\" \"\")\n+\t\t (match_operand:VDQ 2 \"s_register_operand\" \"\")))]\n+  \"ARM_HAVE_<MODE>_ARITH\"\n+)"}, {"sha": "321961f251ecd68e77fbc03f32c02bcd79ef703b", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-veor.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-veor.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-veor.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-veor.c?ref=434fb3b6cc7d4a8d9d07c7e0052a89093953c8c0", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do assemble } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a, TYPE##BITS##_t *b) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP b[i];\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define FUNC_IMM(SIGN, TYPE, BITS, NB, OP, NAME)\t\t\t\t\\\n+  void test_ ## NAME ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t * __restrict__ dest, TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      dest[i] = a[i] OP 1;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* 64-bit vectors.  */\n+FUNC(s, int, 32, 2, ^, veor)\n+FUNC(u, uint, 32, 2, ^, veor)\n+FUNC(s, int, 16, 4, ^, veor)\n+FUNC(u, uint, 16, 4, ^, veor)\n+FUNC(s, int, 8, 8, ^, veor)\n+FUNC(u, uint, 8, 8, ^, veor)\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 32, 4, ^, veor)\n+FUNC(u, uint, 32, 4, ^, veor)\n+FUNC(s, int, 16, 8, ^, veor)\n+FUNC(u, uint, 16, 8, ^, veor)\n+FUNC(s, int, 8, 16, ^, veor)\n+FUNC(u, uint, 8, 16, ^, veor)\n+\n+/* 64-bit vectors.  */\n+FUNC_IMM(s, int, 32, 2, ^, veorimm)\n+FUNC_IMM(u, uint, 32, 2, ^, veorimm)\n+FUNC_IMM(s, int, 16, 4, ^, veorimm)\n+FUNC_IMM(u, uint, 16, 4, ^, veorimm)\n+FUNC_IMM(s, int, 8, 8, ^, veorimm)\n+FUNC_IMM(u, uint, 8, 8, ^, veorimm)\n+\n+/* 128-bit vectors.  */\n+FUNC_IMM(s, int, 32, 4, ^, veorimm)\n+FUNC_IMM(u, uint, 32, 4, ^, veorimm)\n+FUNC_IMM(s, int, 16, 8, ^, veorimm)\n+FUNC_IMM(u, uint, 16, 8, ^, veorimm)\n+FUNC_IMM(s, int, 8, 16, ^, veorimm)\n+FUNC_IMM(u, uint, 8, 16, ^, veorimm)\n+\n+/* MVE has only 128-bit vectors, so we can vectorize only half of the\n+   functions above.  */\n+/* Although float16 and float32 types are supported at assembly level,\n+   we cannot test them with the '^' operator, so we check only the\n+   integer variants.  */\n+/* { dg-final { scan-assembler-times {veor\\tq[0-9]+, q[0-9]+, q[0-9]+} 12 } } */"}]}