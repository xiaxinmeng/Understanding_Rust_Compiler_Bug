{"sha": "87f2a9f57bfc1a95934202110badb4d1a31409ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdmMmE5ZjU3YmZjMWE5NTkzNDIwMjExMGJhZGI0ZDFhMzE0MDllZA==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-12-02T04:40:05Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-12-02T04:40:05Z"}, "message": "tree.h (TREE_OVERFLOW): Make this flag/predicate specific to constant nodes, i.e.\n\n\n\t* tree.h (TREE_OVERFLOW): Make this flag/predicate specific to\n\tconstant nodes, i.e. INTEGER_CST, REAL_CST, etc...\n\t* tree-vrp.c (compare_values): Only check TREE_OVERFLOW for\n\tinteger constant comparisons.\n\nada/\n\t* utils.c (max_size): Only test for TREE_OVERFLOW on INTEGER_CST\n\tnodes.\n\nFrom-SVN: r107870", "tree": {"sha": "47739b99c89ff7ea1c1f4167c8dc616b6a27c981", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/47739b99c89ff7ea1c1f4167c8dc616b6a27c981"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87f2a9f57bfc1a95934202110badb4d1a31409ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f2a9f57bfc1a95934202110badb4d1a31409ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87f2a9f57bfc1a95934202110badb4d1a31409ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87f2a9f57bfc1a95934202110badb4d1a31409ed/comments", "author": null, "committer": null, "parents": [{"sha": "cf84391c40d0f336cd8e5981ab7cae08fcde341e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf84391c40d0f336cd8e5981ab7cae08fcde341e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf84391c40d0f336cd8e5981ab7cae08fcde341e"}], "stats": {"total": 44, "additions": 31, "deletions": 13}, "files": [{"sha": "a3c113adcff02dc8794a282dd78aabaee67237d3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87f2a9f57bfc1a95934202110badb4d1a31409ed", "patch": "@@ -1,3 +1,10 @@\n+2005-12-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* tree.h (TREE_OVERFLOW): Make this flag/predicate specific to\n+\tconstant nodes, i.e. INTEGER_CST, REAL_CST, etc...\n+\t* tree-vrp.c (compare_values): Only check TREE_OVERFLOW for\n+\tinteger constant comparisons.\n+\n 2005-12-02  Jon Grimm  <jgrimm2@us.ibm.com>\n \t    Janis Johnson  <janis187@us.ibm.com>\n \t    David Edelsohn  <dje@watson.ibm.com>"}, {"sha": "74ebace0d31a1012753d8711c3676f9cf070dfc9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=87f2a9f57bfc1a95934202110badb4d1a31409ed", "patch": "@@ -1,3 +1,8 @@\n+2005-12-01  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* utils.c (max_size): Only test for TREE_OVERFLOW on INTEGER_CST\n+\tnodes.\n+\n 2005-11-23  Laurent GUERBY  <laurent@guerby.net>\n \n         * mlib-prj.adb (Build_Library): Initialize Delete."}, {"sha": "0e0153ffb7312da923ec2b1720305fd2fff59615", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=87f2a9f57bfc1a95934202110badb4d1a31409ed", "patch": "@@ -2031,12 +2031,19 @@ max_size (tree exp, bool max_p)\n \t       Likewise, handle a MINUS_EXPR or PLUS_EXPR with the LHS\n \t       overflowing or the maximum possible value and the RHS\n \t       a variable.  */\n-\t    if (max_p && code == MIN_EXPR && TREE_OVERFLOW (rhs))\n+\t    if (max_p\n+\t\t&& code == MIN_EXPR\n+\t\t&& TREE_CODE (rhs) == INTEGER_CST\n+\t\t&& TREE_OVERFLOW (rhs))\n \t      return lhs;\n-\t    else if (max_p && code == MIN_EXPR && TREE_OVERFLOW (lhs))\n+\t    else if (max_p\n+\t\t     && code == MIN_EXPR\n+\t\t     && TREE_CODE (lhs) == INTEGER_CST\n+\t\t     && TREE_OVERFLOW (lhs))\n \t      return rhs;\n \t    else if ((code == MINUS_EXPR || code == PLUS_EXPR)\n-\t\t     && ((TREE_CONSTANT (lhs) && TREE_OVERFLOW (lhs))\n+\t\t     && ((TREE_CODE (lhs) == INTEGER_CST\n+\t\t\t  && TREE_OVERFLOW (lhs))\n \t\t\t || operand_equal_p (lhs, TYPE_MAX_VALUE (type), 0))\n \t\t     && !TREE_CONSTANT (rhs))\n \t      return lhs;"}, {"sha": "0797b5c028a4705b3b35b9d068d9843ee28bbe2b", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=87f2a9f57bfc1a95934202110badb4d1a31409ed", "patch": "@@ -528,12 +528,14 @@ compare_values (tree val1, tree val2)\n   if (!is_gimple_min_invariant (val1) || !is_gimple_min_invariant (val2))\n     return -2;\n \n-  /* We cannot compare overflowed values.  */\n-  if (TREE_OVERFLOW (val1) || TREE_OVERFLOW (val2))\n-    return -2;\n-\n   if (!POINTER_TYPE_P (TREE_TYPE (val1)))\n-    return tree_int_cst_compare (val1, val2);\n+    {\n+      /* We cannot compare overflowed values.  */\n+      if (TREE_OVERFLOW (val1) || TREE_OVERFLOW (val2))\n+\treturn -2;\n+\n+      return tree_int_cst_compare (val1, val2);\n+    }\n   else\n     {\n       tree t;"}, {"sha": "2a1d6e2664e9548f9b6748921adb980d80c259d7", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87f2a9f57bfc1a95934202110badb4d1a31409ed/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=87f2a9f57bfc1a95934202110badb4d1a31409ed", "patch": "@@ -335,7 +335,6 @@ struct tree_common GTY(())\n \n        TREE_OVERFLOW in\n            INTEGER_CST, REAL_CST, COMPLEX_CST, VECTOR_CST\n-\t   ??? and other expressions?\n        TREE_PUBLIC in\n            VAR_DECL or FUNCTION_DECL or IDENTIFIER_NODE\n        ASM_VOLATILE_P in\n@@ -907,11 +906,9 @@ extern void tree_operand_check_failed (int, enum tree_code,\n /* In an INTEGER_CST, REAL_CST, COMPLEX_CST, or VECTOR_CST, this means\n    there was an overflow in folding, and no warning has been issued\n    for this subexpression.  TREE_OVERFLOW implies TREE_CONSTANT_OVERFLOW,\n-   but not vice versa.\n+   but not vice versa.  */\n \n-   ??? Apparently, lots of code assumes this is defined in all\n-   expressions.  */\n-#define TREE_OVERFLOW(NODE) ((NODE)->common.public_flag)\n+#define TREE_OVERFLOW(NODE) (CST_CHECK (NODE)->common.public_flag)\n \n /* In a VAR_DECL or FUNCTION_DECL,\n    nonzero means name is to be accessible from outside this module."}]}