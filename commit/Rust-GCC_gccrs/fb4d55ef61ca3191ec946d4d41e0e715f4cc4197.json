{"sha": "fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "node_id": "C_kwDOANBUbNoAKGZiNGQ1NWVmNjFjYTMxOTFlYzk0NmQ0ZDQxZTBlNzE1ZjRjYzQxOTc", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-06T12:44:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-10-01T19:34:48Z"}, "message": "libstdc++: Simplify __normal_iterator converting constructor\n\nThis uses C++11 features to simplify the definition of the\n__normal_iterator constructor that allows converting from iterator to\nconst_iterator. The previous definition relied on _Container::pointer\nwhich is present in std::vector and std::basic_string, but is not\nactually part of the container requirements.\n\nRemoving the use of _Container::pointer and defining it in terms of\nis_convertible allows __normal_iterator to be used with new container\ntypes which do not define a pointer member. Specifically, this will\nallow it to be used in std::basic_stacktrace.\n\nIn theory this will enable some conversions which were not previously\npermitted, for example __normal_iterator<volatile T*, vector<T>> can\nnow be converted to __normal_iterator<const volatile T*, vector<T>>.\nIn practice this doesn't matter because the library never uses such\ntypes.  In any case, allowing those conversions is consistent with\nthe corresponding constructors of std::reverse_iterator and\nstd::move_iterator.\n\nSigned-off-by: Jonathan Wakely <jwakely@redhat.com>\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (__normal_iterator): Simplify\n\tconverting constructor and do not require _Container::pointer.", "tree": {"sha": "bb8483706c5a4ceb0663a4c79dc4e087c253dfd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8483706c5a4ceb0663a4c79dc4e087c253dfd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10b6d89baddd86139480ba902f491903fcb464a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10b6d89baddd86139480ba902f491903fcb464a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10b6d89baddd86139480ba902f491903fcb464a6"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "df774eeb63ff71c7841fec91f4bda8fe33cf1e31", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb4d55ef61ca3191ec946d4d41e0e715f4cc4197/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=fb4d55ef61ca3191ec946d4d41e0e715f4cc4197", "patch": "@@ -1022,6 +1022,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       typedef std::iterator_traits<_Iterator>\t\t__traits_type;\n \n+#if __cplusplus >= 201103L\n+      template<typename _Iter>\n+\tusing __convertible_from\n+\t  = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;\n+#endif\n+\n     public:\n       typedef _Iterator\t\t\t\t\titerator_type;\n       typedef typename __traits_type::iterator_category iterator_category;\n@@ -1042,12 +1048,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       : _M_current(__i) { }\n \n       // Allow iterator to const_iterator conversion\n+#if __cplusplus >= 201103L\n+      template<typename _Iter, typename = __convertible_from<_Iter>>\n+\t_GLIBCXX20_CONSTEXPR\n+\t__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)\n+\tnoexcept\n+#else\n+      // N.B. _Container::pointer is not actually in container requirements,\n+      // but is present in std::vector and std::basic_string.\n       template<typename _Iter>\n-        _GLIBCXX20_CONSTEXPR\n         __normal_iterator(const __normal_iterator<_Iter,\n \t\t\t  typename __enable_if<\n-      \t       (std::__are_same<_Iter, typename _Container::pointer>::__value),\n-\t\t      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT\n+\t       (std::__are_same<_Iter, typename _Container::pointer>::__value),\n+\t\t      _Container>::__type>& __i)\n+#endif\n         : _M_current(__i.base()) { }\n \n       // Forward iterator requirements"}]}