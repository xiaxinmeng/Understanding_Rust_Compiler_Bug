{"sha": "f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjA3MDI4NWE3YjAwNDhhY2ViYmIxYTllYzlmOWZiZWY1YzljMGMzZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2007-04-01T18:28:16Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2007-04-01T18:28:16Z"}, "message": "poly_laguerre.tcc: s/__alpha/__alpha1/g.\n\n        * include/tr1/poly_laguerre.tcc: s/__alpha/__alpha1/g.\n        * include/tr1/ell_integral.tcc: Likewise.\n\nFrom-SVN: r123407", "tree": {"sha": "111713860c01af2104e59c073aac164490846519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/111713860c01af2104e59c073aac164490846519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/comments", "author": null, "committer": null, "parents": [{"sha": "5b52976bb8586161e10f6544b69e6fa236aaa829", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b52976bb8586161e10f6544b69e6fa236aaa829", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b52976bb8586161e10f6544b69e6fa236aaa829"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "eb773d27dc4f01e37fe798591976bb2a4a0e4385", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "patch": "@@ -1,3 +1,8 @@\n+2007-04-01  Richard Henderson  <rth@redhat.com>\n+\n+\t* include/tr1/poly_laguerre.tcc: s/__alpha/__alpha1/g.\n+\t* include/tr1/ell_integral.tcc: Likewise.\n+\n 2007-03-31  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/stl_bvector.h (_M_fill_insert(iterator, size_type,"}, {"sha": "03cfefa4fa7e31f698e7d773825781075043b074", "filename": "libstdc++-v3/include/tr1/ell_integral.tcc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fell_integral.tcc?ref=f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "patch": "@@ -627,9 +627,9 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n               const _Tp __znroot = std::sqrt(__zn);\n               const _Tp __lambda = __xnroot * (__ynroot + __znroot)\n                                  + __ynroot * __znroot;\n-              const _Tp __alpha = __pn * (__xnroot + __ynroot + __znroot)\n+              const _Tp __alpha1 = __pn * (__xnroot + __ynroot + __znroot)\n                                 + __xnroot * __ynroot * __znroot;\n-              const _Tp __alpha2 = __alpha * __alpha;\n+              const _Tp __alpha2 = __alpha1 * __alpha1;\n               const _Tp __beta = __pn * (__pn + __lambda)\n                                       * (__pn + __lambda);\n               __sigma += __power4 * __ellint_rc(__alpha2, __beta);"}, {"sha": "bcaef453677fd46d29192c920c8de78425bc2952", "filename": "libstdc++-v3/include/tr1/poly_laguerre.tcc", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fpoly_laguerre.tcc?ref=f070285a7b0048acebbb1a9ec9f9fbef5c9c0c3e", "patch": "@@ -80,11 +80,11 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n      */\n     template<typename _Tpa, typename _Tp>\n     _Tp\n-    __poly_laguerre_large_n(const unsigned __n, const _Tpa __alpha,\n+    __poly_laguerre_large_n(const unsigned __n, const _Tpa __alpha1,\n                             const _Tp __x)\n     {\n       const _Tp __a = -_Tp(__n);\n-      const _Tp __b = _Tp(__alpha) + _Tp(1);\n+      const _Tp __b = _Tp(__alpha1) + _Tp(1);\n       const _Tp __eta = _Tp(2) * __b - _Tp(4) * __a;\n       const _Tp __cos2th = __x / __eta;\n       const _Tp __sin2th = _Tp(1) - __cos2th;\n@@ -135,9 +135,10 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n      */\n     template<typename _Tpa, typename _Tp>\n     _Tp\n-    __poly_laguerre_hyperg(const unsigned int __n, const _Tpa __alpha, const _Tp __x)\n+    __poly_laguerre_hyperg(const unsigned int __n, const _Tpa __alpha1,\n+\t\t\t   const _Tp __x)\n     {\n-      const _Tp __b = _Tp(__alpha) + _Tp(1);\n+      const _Tp __b = _Tp(__alpha1) + _Tp(1);\n       const _Tp __mx = -__x;\n       const _Tp __tc_sgn = (__x < _Tp(0) ? _Tp(1)\n                          : ((__n % 2 == 1) ? -_Tp(1) : _Tp(1)));\n@@ -192,15 +193,15 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n     template<typename _Tpa, typename _Tp>\n     _Tp\n     __poly_laguerre_recursion(const unsigned int __n,\n-                              const _Tpa __alpha, const _Tp __x)\n+                              const _Tpa __alpha1, const _Tp __x)\n     {\n       //   Compute l_0.\n       _Tp __l_0 = _Tp(1);\n       if  (__n == 0)\n         return __l_0;\n \n       //  Compute l_1^alpha.\n-      _Tp __l_1 = -__x + _Tp(1) + _Tp(__alpha);\n+      _Tp __l_1 = -__x + _Tp(1) + _Tp(__alpha1);\n       if  (__n == 1)\n         return __l_1;\n \n@@ -210,9 +211,9 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n       _Tp __l_n = _Tp(0);\n       for  (unsigned int __nn = 2; __nn <= __n; ++__nn)\n         {\n-            __l_n = (_Tp(2 * __nn - 1) + _Tp(__alpha) - __x)\n+            __l_n = (_Tp(2 * __nn - 1) + _Tp(__alpha1) - __x)\n                   * __l_n1 / _Tp(__nn)\n-                  - (_Tp(__nn - 1) + _Tp(__alpha)) * __l_n2 / _Tp(__nn);\n+                  - (_Tp(__nn - 1) + _Tp(__alpha1)) * __l_n2 / _Tp(__nn);\n             __l_n2 = __l_n1;\n             __l_n1 = __l_n;\n         }\n@@ -251,7 +252,7 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n      */\n     template<typename _Tpa, typename _Tp>\n     inline _Tp\n-    __poly_laguerre(const unsigned int __n, const _Tpa __alpha,\n+    __poly_laguerre(const unsigned int __n, const _Tpa __alpha1,\n                     const _Tp __x)\n     {\n       if (__x < _Tp(0))\n@@ -263,22 +264,22 @@ _GLIBCXX_BEGIN_NAMESPACE(_GLIBCXX_TR1)\n       else if (__n == 0)\n         return _Tp(1);\n       else if (__n == 1)\n-        return _Tp(1) + _Tp(__alpha) - __x;\n+        return _Tp(1) + _Tp(__alpha1) - __x;\n       else if (__x == _Tp(0))\n         {\n-          _Tp __prod = _Tp(__alpha) + _Tp(1);\n+          _Tp __prod = _Tp(__alpha1) + _Tp(1);\n           for (unsigned int __k = 2; __k <= __n; ++__k)\n-            __prod *= (_Tp(__alpha) + _Tp(__k)) / _Tp(__k);\n+            __prod *= (_Tp(__alpha1) + _Tp(__k)) / _Tp(__k);\n           return __prod;\n         }\n-      else if (__n > 10000000 && _Tp(__alpha) > -_Tp(1)\n-            && __x < _Tp(2) * (_Tp(__alpha) + _Tp(1)) + _Tp(4 * __n))\n-        return __poly_laguerre_large_n(__n, __alpha, __x);\n+      else if (__n > 10000000 && _Tp(__alpha1) > -_Tp(1)\n+            && __x < _Tp(2) * (_Tp(__alpha1) + _Tp(1)) + _Tp(4 * __n))\n+        return __poly_laguerre_large_n(__n, __alpha1, __x);\n       else if (_Tp(__alpha) >= _Tp(0)\n-           || (__x > _Tp(0) && _Tp(__alpha) < -_Tp(__n + 1)))\n-        return __poly_laguerre_recursion(__n, __alpha, __x);\n+           || (__x > _Tp(0) && _Tp(__alpha1) < -_Tp(__n + 1)))\n+        return __poly_laguerre_recursion(__n, __alpha1, __x);\n       else\n-        return __poly_laguerre_hyperg(__n, __alpha, __x);\n+        return __poly_laguerre_hyperg(__n, __alpha1, __x);\n     }\n \n "}]}