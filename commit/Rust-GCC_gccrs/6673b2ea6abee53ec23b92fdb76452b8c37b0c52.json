{"sha": "6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY3M2IyZWE2YWJlZTUzZWMyM2I5MmZkYjc2NDUyYjhjMzdiMGM1Mg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1998-07-16T14:10:24Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-07-16T14:10:24Z"}, "message": "mn10300.c (count_tst_insns): New arg oreg_countp.\n\n        * mn10300.c (count_tst_insns): New arg oreg_countp.  Callers changed.\n        Simplify tests for clearing an address register.\n        (expand_prologue): Corresponding changes.\n\nFrom-SVN: r21215", "tree": {"sha": "a2690045230b0798c06c17885f7e7a609099ced1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a2690045230b0798c06c17885f7e7a609099ced1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6673b2ea6abee53ec23b92fdb76452b8c37b0c52/comments", "author": null, "committer": null, "parents": [{"sha": "fed2012bae24629914df855e05208385b04fcd38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fed2012bae24629914df855e05208385b04fcd38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fed2012bae24629914df855e05208385b04fcd38"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "feb3de766d8e022277dc8c41a9afcc2fe782c271", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673b2ea6abee53ec23b92fdb76452b8c37b0c52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673b2ea6abee53ec23b92fdb76452b8c37b0c52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "patch": "@@ -1,5 +1,9 @@\n Thu Jul 16 14:48:47 1998  Jeffrey A Law  (law@cygnus.com)\n \n+\t* mn10300.c (count_tst_insns): New arg oreg_countp.  Callers changed.\n+\tSimplify tests for clearing an address register.\n+\t(expand_prologue): Corresponding changes.\n+\n \t* mn10300.md (movXX patterns): Make sure the destination is an\n \tADDRESS_REG when substituting \"zero_areg\" for (const_int 0).\n \t(logical patterns): Split into expanders + patterns"}, {"sha": "c6102acb1fcd0642a974043c4f8d68b8c1da12b0", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6673b2ea6abee53ec23b92fdb76452b8c37b0c52/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6673b2ea6abee53ec23b92fdb76452b8c37b0c52/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=6673b2ea6abee53ec23b92fdb76452b8c37b0c52", "patch": "@@ -382,15 +382,17 @@ can_use_return_insn ()\n /* Count the number of tst insns which compare a data or address\n    register with zero.  */\n static void \n-count_tst_insns (dreg_countp, areg_countp)\n+count_tst_insns (dreg_countp, areg_countp, oreg_countp)\n      int *dreg_countp;\n      int *areg_countp;\n+     int *oreg_countp;\n {\n   rtx insn;\n \n   /* Assume no tst insns exist.  */\n   *dreg_countp = 0;\n   *areg_countp = 0;\n+  *oreg_countp = 0;\n \n   /* If not optimizing, then quit now.  */\n   if (!optimize)\n@@ -424,8 +426,7 @@ count_tst_insns (dreg_countp, areg_countp)\n       /* Setting an address register to zero can also be optimized,\n \t so count it just like a tst insn.  */\n       if (GET_CODE (SET_DEST (pat)) == REG\n-\t  && GET_CODE (SET_SRC (pat)) == CONST_INT\n-\t  && INTVAL (SET_SRC (pat)) == 0\n+\t  && SET_SRC (pat) == CONST0_RTX (GET_MODE (SET_DEST (pat)))\n \t  && REGNO_REG_CLASS (REGNO (SET_DEST (pat))) == ADDRESS_REGS)\n \t(*areg_countp)++;\n     }\n@@ -447,16 +448,16 @@ expand_prologue ()\n       || regs_ever_live[6] || regs_ever_live[7]\n       || frame_pointer_needed)\n     {\n-      int dreg_count, areg_count;\n+      int dreg_count, areg_count, oreg_count;\n \n       /* Get a count of the number of tst insns which use address and\n \t data registers.  */\n-      count_tst_insns (&dreg_count, &areg_count);\n+      count_tst_insns (&dreg_count, &areg_count, &oreg_count);\n \n       /* If there's more than one tst insn using a data register, then\n \t this optimization is a win.  */\n-      if (dreg_count > 1\n-\t  && (!regs_ever_live[2] || !regs_ever_live[3]))\n+      if ((dreg_count > 1 || oreg_count > 1)\n+\t   && (!regs_ever_live[2] || !regs_ever_live[3]))\n \t{\n  \t  if (!regs_ever_live[2])\n \t    {\n@@ -474,8 +475,8 @@ expand_prologue ()\n \n       /* If there's more than two tst insns using an address register,\n \t then this optimization is a win.  */\n-      if (areg_count > 2\n-\t  && (!regs_ever_live[6] || !regs_ever_live[7]))\n+      if ((areg_count > 2 || oreg_count > 1)\n+\t   && (!regs_ever_live[6] || !regs_ever_live[7]))\n \t{\n  \t  if (!regs_ever_live[6])\n \t    {"}]}