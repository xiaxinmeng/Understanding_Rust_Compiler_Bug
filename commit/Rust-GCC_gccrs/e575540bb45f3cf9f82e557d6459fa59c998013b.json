{"sha": "e575540bb45f3cf9f82e557d6459fa59c998013b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU3NTU0MGJiNDVmM2NmOWY4MmU1NTdkNjQ1OWZhNTljOTk4MDEzYg==", "commit": {"author": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-12-14T10:31:56Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2013-12-14T10:31:56Z"}, "message": "re PR fortran/59450 ([OOP] ICE for type-bound-procedure expression in module procedure interface)\n\n2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59450\n\t* module.c (mio_expr): Handle type-bound function expressions.\n\n\n2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/59450\n\t* gfortran.dg/typebound_proc_31.f90: New.\n\nFrom-SVN: r205983", "tree": {"sha": "681d0f8e6ea9d9be00d9ed90c300f3723c5987dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/681d0f8e6ea9d9be00d9ed90c300f3723c5987dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e575540bb45f3cf9f82e557d6459fa59c998013b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e575540bb45f3cf9f82e557d6459fa59c998013b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e575540bb45f3cf9f82e557d6459fa59c998013b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e575540bb45f3cf9f82e557d6459fa59c998013b/comments", "author": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb1de6782e139ccbccc6d4e5dc20c8c320eef78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb1de6782e139ccbccc6d4e5dc20c8c320eef78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb1de6782e139ccbccc6d4e5dc20c8c320eef78"}], "stats": {"total": 71, "additions": 63, "deletions": 8}, "files": [{"sha": "197b890c47c33c92f01ed52d4666bd89c738e41a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e575540bb45f3cf9f82e557d6459fa59c998013b", "patch": "@@ -1,3 +1,8 @@\n+2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59450\n+\t* module.c (mio_expr): Handle type-bound function expressions.\n+\n 2013-12-12  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/59440"}, {"sha": "98e22df99633da9d708cc1a7bdab5cff62b98ef2", "filename": "gcc/fortran/module.c", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ffortran%2Fmodule.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ffortran%2Fmodule.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmodule.c?ref=e575540bb45f3cf9f82e557d6459fa59c998013b", "patch": "@@ -3358,12 +3358,24 @@ mio_expr (gfc_expr **ep)\n \t{\n \t  e->value.function.name\n \t    = mio_allocated_string (e->value.function.name);\n-\t  flag = e->value.function.esym != NULL;\n-\t  mio_integer (&flag);\n-\t  if (flag)\n-\t    mio_symbol_ref (&e->value.function.esym);\n+\t  if (e->value.function.esym)\n+\t    flag = 1;\n+\t  else if (e->ref)\n+\t    flag = 2;\n \t  else\n-\t    write_atom (ATOM_STRING, e->value.function.isym->name);\n+\t    flag = 0;\n+\t  mio_integer (&flag);\n+\t  switch (flag)\n+\t    {\n+\t    case 1:\n+\t      mio_symbol_ref (&e->value.function.esym);\n+\t      break;\n+\t    case 2:\n+\t      mio_ref_list (&e->ref);\n+\t      break;\n+\t    default:\n+\t      write_atom (ATOM_STRING, e->value.function.isym->name);\n+\t    }\n \t}\n       else\n \t{\n@@ -3372,10 +3384,15 @@ mio_expr (gfc_expr **ep)\n \t  free (atom_string);\n \n \t  mio_integer (&flag);\n-\t  if (flag)\n-\t    mio_symbol_ref (&e->value.function.esym);\n-\t  else\n+\t  switch (flag)\n \t    {\n+\t    case 1:\n+\t      mio_symbol_ref (&e->value.function.esym);\n+\t      break;\n+\t    case 2:\n+\t      mio_ref_list (&e->ref);\n+\t      break;\n+\t    default:\n \t      require_atom (ATOM_STRING);\n \t      e->value.function.isym = gfc_find_function (atom_string);\n \t      free (atom_string);"}, {"sha": "91dcb335bb14a14335688cdf1918479d993bb97c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e575540bb45f3cf9f82e557d6459fa59c998013b", "patch": "@@ -1,3 +1,8 @@\n+2013-12-14  Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/59450\n+\t* gfortran.dg/typebound_proc_31.f90: New.\n+\n 2013-12-13  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* g++.dg/cilk-plus/cilk-plus.exp: Properly set ld_library_path."}, {"sha": "d83a9cdb4d0ec601fff9490cbea979657afe7d04", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_31.f90", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_31.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e575540bb45f3cf9f82e557d6459fa59c998013b/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_31.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_31.f90?ref=e575540bb45f3cf9f82e557d6459fa59c998013b", "patch": "@@ -0,0 +1,28 @@\n+! { dg-do compile }\n+!\n+! PR 59450: [OOP] ICE for type-bound-procedure expression in module procedure interface\n+!\n+! Contributed by <bugs@miller-mohr.de>\n+\n+module classes\n+\n+  implicit none\n+\n+  type :: base_class\n+   contains\n+     procedure, nopass :: get_num\n+  end type\n+\n+contains\n+\n+  pure integer function get_num()\n+  end function\n+\n+  function get_array( this ) result(array)\n+    class(base_class), intent(in) :: this\n+    integer, dimension( this%get_num() ) :: array\n+  end function\n+\n+end module\n+\n+! { dg-final { cleanup-modules \"classes\" } }"}]}