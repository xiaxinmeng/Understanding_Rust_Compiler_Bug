{"sha": "85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkMTU5YTM2YWFhZDVkNDVmYmU5YzFhNDkxZTZlNmUzOTIzZDVjYg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T22:59:23Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-06-29T22:59:23Z"}, "message": "(LIB_SPEC): If -pg, add -lprof2.\n\n(STARTFILE_SPEC, {FUNCTION,BLOCK,FUNCTION_BLOCK}_PROFILER): New macros.\n\nFrom-SVN: r7610", "tree": {"sha": "5afe3a310ae6fde2f7c630f6e06cf0c9e68d3b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5afe3a310ae6fde2f7c630f6e06cf0c9e68d3b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb/comments", "author": null, "committer": null, "parents": [{"sha": "0d45dc27a174acaf7170bb60c341bc9ad42b32b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d45dc27a174acaf7170bb60c341bc9ad42b32b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d45dc27a174acaf7170bb60c341bc9ad42b32b8"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "a718d0bbc76c457bdb3b6037ddb3530dcb6926e0", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=85d159a36aaad5d45fbe9c1a491e6e6e3923d5cb", "patch": "@@ -46,13 +46,16 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n /* Right now Alpha OSF/1 doesn't seem to have debugging libraries.  */\n \n-#define LIB_SPEC \"%{p:-lprof1} -lc\"\n+#define LIB_SPEC \"%{p:-lprof1} %{pg:-lprof2} -lc\"\n \n /* Pass \"-G 8\" to ld because Alpha's CC does.  Pass -O3 if we are optimizing,\n    -O1 if we are not.  Pass -non_shared or -call_shared as appropriate.  */\n #define LINK_SPEC  \\\n   \"-G 8 %{O*:-O3} %{!O*:-O1} %{static:-non_shared} %{!static:-call_shared}\"\n \n+#define STARTFILE_SPEC  \\\n+  \"%{pg:mcrt0.o%s}%{!pg:%{p:mcrt0.o%s}%{!p:crt0.o%s}}\"\n+\n /* Print subsidiary information on the compiler version in use.  */\n #define TARGET_VERSION\n \n@@ -900,9 +903,56 @@ extern char *alpha_function_name;\n #define FUNCTION_PROLOGUE(FILE, SIZE)  output_prolog (FILE, SIZE)\n \n /* Output assembler code to FILE to increment profiler label # LABELNO\n-   for profiling a function entry.  */\n+   for profiling a function entry.  Profiling for gprof does not\n+   require LABELNO so we don't reference it at all.  This does,\n+   however, mean that -p won't work.  But OSF/1 doesn't support the\n+   traditional prof anyways, so there is no good reason to be\n+   backwards compatible. */\n+\n+#define FUNCTION_PROFILER(FILE, LABELNO)\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tfputs (\"\\tlda $27,_mcount\\n\"\t\t\t\t\\\n+\t       \"\\tjsr $27,($27),_mcount\\n\"\t\t\t\\\n+\t       \"\\tldgp $29,0($26)\\n\", (FILE));\t\t\t\\\n+    } while (0);\n+\n+\n+/* Output assembler code to FILE to initialize this source file's\n+   basic block profiling info, if that has not already been done.\n+   This assumes that __bb_init_func doesn't garble a1-a5. */\n+\n+#define FUNCTION_BLOCK_PROFILER(FILE, LABELNO)\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tASM_OUTPUT_REG_PUSH (FILE, 16);\t\t\t\t\\\n+\tfputs (\t \"\\tlda $16,$PBX32\\n\"\t\t\t\t\\\n+\t\t \"\\tldq $26,0($16)\\n\"\t\t\t\t\\\n+\t\t \"\\tbne $26,1f\\n\"\t\t\t\t\\\n+\t\t \"\\tlda $27,__bb_init_func\\n\"\t\t\t\\\n+\t\t \"\\tjsr $26,($27),__bb_init_func\\n\"\t\t\\\n+\t\t \"\\tldgp $29,0($26)\\n\"\t\t\t\t\\\n+\t\t \"1:\\n\", (FILE));\t\t\t\t\\\n+\tASM_OUTPUT_REG_POP (FILE, 16);\t\t\t\t\\\n+    } while (0);\n+\n+/* Output assembler code to FILE to increment the entry-count for\n+   the BLOCKNO'th basic block in this source file.  */\n+\n+#define BLOCK_PROFILER(FILE, BLOCKNO)\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+\tint blockn = (BLOCKNO);\t\t\t\t\t\\\n+\tfprintf (FILE,\t\t\t\t\t\t\\\n+\t\t \"\\tsubq $30,16,$30\\n\"\t\t\t\t\\\n+\t\t \"\\tstq $0,0($30)\\n\"\t\t\t\t\\\n+\t\t \"\\tstq $1,8($30)\\n\"\t\t\t\t\\\n+\t\t \"\\tlda $0,$PBX34\\n\"\t\t\t\t\\\n+\t\t \"\\tldq $1,%d($0)\\n\"\t\t\t\t\\\n+\t\t \"\\taddq $1,1,$1\\n\"\t\t\t\t\\\n+\t\t \"\\tstq $1,%d($0)\\n\"\t\t\t\t\\\n+\t\t \"\\tldq $0,0($30)\\n\"\t\t\t\t\\\n+\t\t \"\\tldq $1,8($30)\\n\"\t\t\t\t\\\n+\t\t \"\\taddq $30,16,$30\\n\", 8*blockn, 8*blockn);\t\\\n+    } while (0)\n \n-#define FUNCTION_PROFILER(FILE, LABELNO)\n \n /* EXIT_IGNORE_STACK should be nonzero if, when returning from a function,\n    the stack pointer does not matter.  The value is tested only in"}]}