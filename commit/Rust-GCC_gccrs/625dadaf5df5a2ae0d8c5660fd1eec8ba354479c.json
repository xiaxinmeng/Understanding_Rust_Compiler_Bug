{"sha": "625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI1ZGFkYWY1ZGY1YTJhZTBkOGM1NjYwZmQxZWVjOGJhMzU0NDc5Yw==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-08T18:39:28Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-04-09T14:23:30Z"}, "message": "c++: Fix two issues with auto function parameter [PR99806]\n\nWhen we have a member function with auto parameter like this:\n\n  struct S {\n    void f(auto);\n  };\n\ncp_parser_member_declaration -> grokfield produces a FUNCTION_DECL\n\"void S::foo(auto:1)\", and then finish_fully_implicit_template turns\nthat FUNCTION_DECL into a TEMPLATE_DECL.  The bug here is that we only\ncall cp_parser_save_default_args for a FUNCTION_DECL.  As a consequence,\nabbrev10.C is rejected because we complain that the default argument has\nnot been defined, and abbrev11.C ICEs, because we don't re-parse the\ndelayed noexcept, so the DEFERRED_PARSE tree leaks into tsubst* where we\ncrash.  This patch fixes both issues.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99806\n\t* parser.c (cp_parser_member_declaration): Call\n\tcp_parser_save_default_args even for function templates.  Use\n\tSTRIP_TEMPLATE on the declaration we're passing.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99806\n\t* g++.dg/concepts/abbrev10.C: New test.\n\t* g++.dg/concepts/abbrev11.C: New test.", "tree": {"sha": "d2241dd0b717ec3196f7b3f1c239342ffbd64a08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d2241dd0b717ec3196f7b3f1c239342ffbd64a08"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dd7c570e67ce47702db4c5f776f02e0b35d7dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd7c570e67ce47702db4c5f776f02e0b35d7dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd7c570e67ce47702db4c5f776f02e0b35d7dd4"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "e6e6ed72a42270a704d130c23b11b729a5c05df4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "patch": "@@ -26433,8 +26433,8 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t  || !DECL_DECLARES_FUNCTION_P (decl))\n \t\tfinish_member_declaration (decl);\n \n-\t      if (TREE_CODE (decl) == FUNCTION_DECL)\n-\t\tcp_parser_save_default_args (parser, decl);\n+\t      if (DECL_DECLARES_FUNCTION_P (decl))\n+\t\tcp_parser_save_default_args (parser, STRIP_TEMPLATE (decl));\n \t      else if (TREE_CODE (decl) == FIELD_DECL\n \t\t       && DECL_INITIAL (decl))\n \t\t/* Add DECL to the queue of NSDMI to be parsed later.  */"}, {"sha": "b611346e926de35e3e7051f6ed6e46d3a286b3bd", "filename": "gcc/testsuite/g++.dg/concepts/abbrev10.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev10.C?ref=625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/99806\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fconcepts\" }\n+\n+struct S {\n+  void f(auto, auto, int = 3);\n+  void f2(auto, auto, int = 3) { }\n+  template<typename T> static T g(T, auto, int = 3);\n+};\n+\n+void\n+g ()\n+{\n+  S::g(1, 2);\n+  S s;\n+  s.f(1, 2);\n+  s.f2(1, 2);\n+}"}, {"sha": "ddb479313df70fda4e9338ca574bc7622bde1e7e", "filename": "gcc/testsuite/g++.dg/concepts/abbrev11.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/625dadaf5df5a2ae0d8c5660fd1eec8ba354479c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fconcepts%2Fabbrev11.C?ref=625dadaf5df5a2ae0d8c5660fd1eec8ba354479c", "patch": "@@ -0,0 +1,10 @@\n+// PR c++/99806\n+// { dg-do compile { target c++14 } }\n+// { dg-additional-options \"-fconcepts\" }\n+\n+template <typename T> concept C = requires (T a) { a.f(0); };\n+struct S {\n+  void f(auto) noexcept(B);\n+  static constexpr bool B = true;\n+};\n+static_assert(C<S>, \"\");"}]}