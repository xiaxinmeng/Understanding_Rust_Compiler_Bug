{"sha": "eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWVkZTFhNmJmM2E0ZjMzZmE1YWZlZjllNGRmYzgwYzRkZDg5ZWViMw==", "commit": {"author": {"name": "Nick Clifton", "email": "nickc@redhat.com", "date": "2018-06-18T10:39:01Z"}, "committer": {"name": "Nick Clifton", "email": "nickc@gcc.gnu.org", "date": "2018-06-18T10:39:01Z"}, "message": "Ensure that control characters in user supplied error and warning messages are escaped.\n\n\tPR 84195\n\t* tree.c (escaped_string): New class.  Converts an unescaped\n\tstring into its escaped equivalent.\n\t(warn_deprecated_use): Use the new class to convert the\n\tdeprecation message, if present.\n\t(test_escaped_strings): New self test.\n\t(test_c_tests): Add test_escaped_strings.\n\nFrom-SVN: r261697", "tree": {"sha": "56e8a2dfac5211be83d19bc9c4f8c9b0fe4ed49e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/56e8a2dfac5211be83d19bc9c4f8c9b0fe4ed49e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3/comments", "author": {"login": "nickclifton", "id": 31441682, "node_id": "MDQ6VXNlcjMxNDQxNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nickclifton", "html_url": "https://github.com/nickclifton", "followers_url": "https://api.github.com/users/nickclifton/followers", "following_url": "https://api.github.com/users/nickclifton/following{/other_user}", "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}", "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions", "organizations_url": "https://api.github.com/users/nickclifton/orgs", "repos_url": "https://api.github.com/users/nickclifton/repos", "events_url": "https://api.github.com/users/nickclifton/events{/privacy}", "received_events_url": "https://api.github.com/users/nickclifton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7fc274f87deeeacb1e0b41bcb571b097b4c929f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7fc274f87deeeacb1e0b41bcb571b097b4c929f"}], "stats": {"total": 165, "additions": 158, "deletions": 7}, "files": [{"sha": "4134a2ca7163cdd736ea04da3e15f58d2cb34da6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "patch": "@@ -1,3 +1,21 @@\n+2018-06-18  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 84195\n+\t* tree.c (escaped_string): New class.  Converts an unescaped\n+\tstring into its escaped equivalent.\n+\t(warn_deprecated_use): Use the new class to convert the\n+\tdeprecation message, if present.\n+\t(test_escaped_strings): New self test.\n+\t(test_c_tests): Add test_escaped_strings.\n+\t* doc/extend.texi (deprecated): Add a note that the\n+\tdeprecation message is affected by the -fmessage-length\n+\toption, and that control characters will be escaped.\n+\t(#pragma GCC error): Document this pragma.\n+\t(#pragma GCC warning): Likewise.\n+\t* doc/invoke.texi (-fmessage-length): Document this option's\n+\teffect on the #warning and #error preprocessor directives and\n+\tthe deprecated attribute.\n+\n 2018-06-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree.c (decl_value_expr_lookup): Revert latest change."}, {"sha": "6728f1c2ce61255b3f9e1c060bd9335d9052a82e", "filename": "gcc/tree.c", "status": "modified", "additions": 140, "deletions": 7, "changes": 147, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=eede1a6bf3a4f33fa5afef9e4dfc80c4dd89eeb3", "patch": "@@ -12423,13 +12423,103 @@ typedef_variant_p (const_tree type)\n   return is_typedef_decl (TYPE_NAME (type));\n }\n \n+/* A class to handle converting a string that might contain\n+   control characters, (eg newline, form-feed, etc), into one\n+   in which contains escape sequences instead.  */\n+\n+class escaped_string\n+{\n+ public:\n+  escaped_string () { m_owned = false; m_str = NULL; };\n+  ~escaped_string () { if (m_owned) free (m_str); }\n+  operator const char *() const { return (const char *) m_str; }\n+  void escape (const char *);\n+ private:\n+  char *m_str;\n+  bool  m_owned;\n+};\n+\n+/* PR 84195: Replace control characters in \"unescaped\" with their\n+   escaped equivalents.  Allow newlines if -fmessage-length has\n+   been set to a non-zero value.  This is done here, rather than\n+   where the attribute is recorded as the message length can\n+   change between these two locations.  */\n+\n+void\n+escaped_string::escape (const char *unescaped)\n+{\n+  char *escaped;\n+  size_t i, new_i, len;\n+\n+  if (m_owned)\n+    free (m_str);\n+\n+  m_str = (char *) unescaped;\n+  m_owned = false;\n+\n+  if (unescaped == NULL || *unescaped == 0)\n+    return;\n+\n+  len = strlen (unescaped);\n+  escaped = NULL;\n+  new_i = 0;\n+\n+  for (i = 0; i < len; i++)\n+    {\n+      char c = unescaped[i];\n+\n+      if (!ISCNTRL (c))\n+\t{\n+\t  if (escaped)\n+\t    escaped[new_i++] = c;\n+\t  continue;\n+\t}\n+\n+      if (c != '\\n' || !pp_is_wrapping_line (global_dc->printer))\n+\t{\n+\t  if (escaped == NULL)\n+\t    {\n+\t      /* We only allocate space for a new string if we\n+\t\t actually encounter a control character that\n+\t\t needs replacing.  */\n+\t      escaped = (char *) xmalloc (len * 2 + 1);\n+\t      strncpy (escaped, unescaped, i);\n+\t      new_i = i;\n+\t    }\n+\n+\t  escaped[new_i++] = '\\\\';\n+\n+\t  switch (c)\n+\t    {\n+\t    case '\\a': escaped[new_i++] = 'a'; break;\n+\t    case '\\b': escaped[new_i++] = 'b'; break;\n+\t    case '\\f': escaped[new_i++] = 'f'; break;\n+\t    case '\\n': escaped[new_i++] = 'n'; break;\n+\t    case '\\r': escaped[new_i++] = 'r'; break;\n+\t    case '\\t': escaped[new_i++] = 't'; break;\n+\t    case '\\v': escaped[new_i++] = 'v'; break;\n+\t    default:   escaped[new_i++] = '?'; break;\n+\t    }\n+\t}\n+      else if (escaped)\n+\tescaped[new_i++] = c;\n+    }\n+\n+  if (escaped)\n+    {\n+      escaped[new_i] = 0;\n+      m_str = escaped;\n+      m_owned = true;\n+    }\n+}\n+\n /* Warn about a use of an identifier which was marked deprecated.  Returns\n    whether a warning was given.  */\n \n bool\n warn_deprecated_use (tree node, tree attr)\n {\n-  const char *msg;\n+  escaped_string msg;\n \n   if (node == 0 || !warn_deprecated_decl)\n     return false;\n@@ -12451,16 +12541,14 @@ warn_deprecated_use (tree node, tree attr)\n     attr = lookup_attribute (\"deprecated\", attr);\n \n   if (attr)\n-    msg = TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr)));\n-  else\n-    msg = NULL;\n+    msg.escape (TREE_STRING_POINTER (TREE_VALUE (TREE_VALUE (attr))));\n \n   bool w = false;\n   if (DECL_P (node))\n     {\n       if (msg)\n \tw = warning (OPT_Wdeprecated_declarations,\n-\t\t     \"%qD is deprecated: %s\", node, msg);\n+\t\t     \"%qD is deprecated: %s\", node, (const char *) msg);\n       else\n \tw = warning (OPT_Wdeprecated_declarations,\n \t\t     \"%qD is deprecated\", node);\n@@ -12485,7 +12573,7 @@ warn_deprecated_use (tree node, tree attr)\n \t{\n \t  if (msg)\n \t    w = warning (OPT_Wdeprecated_declarations,\n-\t\t\t \"%qE is deprecated: %s\", what, msg);\n+\t\t\t \"%qE is deprecated: %s\", what, (const char *) msg);\n \t  else\n \t    w = warning (OPT_Wdeprecated_declarations,\n \t\t\t \"%qE is deprecated\", what);\n@@ -12494,11 +12582,12 @@ warn_deprecated_use (tree node, tree attr)\n \t{\n \t  if (msg)\n \t    w = warning (OPT_Wdeprecated_declarations,\n-\t\t\t \"type is deprecated: %s\", msg);\n+\t\t\t \"type is deprecated: %s\", (const char *) msg);\n \t  else\n \t    w = warning (OPT_Wdeprecated_declarations,\n \t\t\t \"type is deprecated\");\n \t}\n+\n       if (w && decl)\n \tinform (DECL_SOURCE_LOCATION (decl), \"declared here\");\n     }\n@@ -14537,6 +14626,49 @@ test_location_wrappers ()\n   check_strip_nops (wrapped_int_var, int_var);\n }\n \n+/* Check that string escaping works correctly.  */\n+\n+static void\n+test_escaped_strings (void)\n+{\n+  int saved_cutoff;\n+  escaped_string msg;\n+\n+  msg.escape (NULL);\n+  /* ASSERT_STREQ does not accept NULL as a valid test\n+     result, so we have to use ASSERT_EQ instead.  */\n+  ASSERT_EQ (NULL, (const char *) msg);\n+\n+  msg.escape (\"\");\n+  ASSERT_STREQ (\"\", (const char *) msg);\n+\n+  msg.escape (\"foobar\");\n+  ASSERT_STREQ (\"foobar\", (const char *) msg);\n+\n+  /* Ensure that we have -fmessage-length set to 0.  */\n+  saved_cutoff = pp_line_cutoff (global_dc->printer);\n+  pp_line_cutoff (global_dc->printer) = 0;\n+\n+  msg.escape (\"foo\\nbar\");\n+  ASSERT_STREQ (\"foo\\\\nbar\", (const char *) msg);\n+\n+  msg.escape (\"\\a\\b\\f\\n\\r\\t\\v\");\n+  ASSERT_STREQ (\"\\\\a\\\\b\\\\f\\\\n\\\\r\\\\t\\\\v\", (const char *) msg);\n+\n+  /* Now repeat the tests with -fmessage-length set to 5.  */\n+  pp_line_cutoff (global_dc->printer) = 5;\n+\n+  /* Note that the newline is not translated into an escape.  */\n+  msg.escape (\"foo\\nbar\");\n+  ASSERT_STREQ (\"foo\\nbar\", (const char *) msg);\n+\n+  msg.escape (\"\\a\\b\\f\\n\\r\\t\\v\");\n+  ASSERT_STREQ (\"\\\\a\\\\b\\\\f\\n\\\\r\\\\t\\\\v\", (const char *) msg);\n+\n+  /* Restore the original message length setting.  */\n+  pp_line_cutoff (global_dc->printer) = saved_cutoff;\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n@@ -14547,6 +14679,7 @@ tree_c_tests ()\n   test_labels ();\n   test_vector_cst_patterns ();\n   test_location_wrappers ();\n+  test_escaped_strings ();\n }\n \n } // namespace selftest"}]}