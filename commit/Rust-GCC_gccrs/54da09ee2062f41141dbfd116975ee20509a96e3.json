{"sha": "54da09ee2062f41141dbfd116975ee20509a96e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRkYTA5ZWUyMDYyZjQxMTQxZGJmZDExNjk3NWVlMjA1MDlhOTZlMw==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-05-20T08:01:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-05-20T08:01:32Z"}, "message": "config.gcc: Remove need_64bit_hwint.\n\n2014-05-20  Richard Biener  <rguenther@suse.de>\n\n\tgcc/\n\t* config.gcc: Remove need_64bit_hwint.\n\t* configure.ac: Do not define NEED_64BIT_HOST_WIDE_INT.\n\t* hwint.h: Do not check NEED_64BIT_HOST_WIDE_INT but assume\n\tit to be true.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\n\tlibcpp/\n\t* configure.ac: Copy gcc logic of detecting a 64bit type.\n\tRemove HOST_WIDE_INT define.\n\t* include/cpplib.h: typedef cpp_num_part to a 64bit type,\n\tsimilar to how hwint.h does it.\n\t* config.in: Regenerate.\n\t* configure: Likewise.\n\nFrom-SVN: r210632", "tree": {"sha": "b0ae04d799914545c090c859c13d25a91264e970", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0ae04d799914545c090c859c13d25a91264e970"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54da09ee2062f41141dbfd116975ee20509a96e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54da09ee2062f41141dbfd116975ee20509a96e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54da09ee2062f41141dbfd116975ee20509a96e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54da09ee2062f41141dbfd116975ee20509a96e3/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "74145685ed423198e739bc1eba4ebed843207341", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74145685ed423198e739bc1eba4ebed843207341", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74145685ed423198e739bc1eba4ebed843207341"}], "stats": {"total": 257, "additions": 138, "deletions": 119}, "files": [{"sha": "16c7f518f40645d5793a6965ec16757d9b09a112", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -1,3 +1,12 @@\n+2014-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* config.gcc: Remove need_64bit_hwint.\n+\t* configure.ac: Do not define NEED_64BIT_HOST_WIDE_INT.\n+\t* hwint.h: Do not check NEED_64BIT_HOST_WIDE_INT but assume\n+\tit to be true.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2014-05-19  David Wohlferd <dw@LimeGreenSocks.com>\n \n \t* doc/extend.texi: Create Label Attributes section,"}, {"sha": "de010da7c1f43b4ec3505f4dea8472dbb5d8c815", "filename": "gcc/config.gcc", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -164,13 +164,6 @@\n #  gas\t\t\tSet to yes or no depending on whether the target\n #\t\t\tsystem normally uses GNU as.\n #\n-#  need_64bit_hwint\tSet to yes if HOST_WIDE_INT must be 64 bits wide\n-#\t\t\tfor this target.  This is true if this target\n-#\t\t\tsupports \"long\" or \"wchar_t\" wider than 32 bits,\n-#\t\t\tor BITS_PER_WORD is wider than 32 bits.\n-#\t\t\tThe setting made here must match the one made in\n-#\t\t\tother locations such as libcpp/configure.ac\n-#\n #  configure_default_options\n #\t\t\tSet to an initializer for configure_default_options\n #\t\t\tin configargs.h, based on --with-cpu et cetera.\n@@ -233,7 +226,6 @@ gnu_ld=\"$gnu_ld_flag\"\n default_use_cxa_atexit=no\n default_gnu_indirect_function=no\n target_gtfiles=\n-need_64bit_hwint=yes\n need_64bit_isa=\n native_system_header_dir=/usr/include\n target_type_format_char='@'\n@@ -310,14 +302,12 @@ m32c*-*-*)\n         ;;\n aarch64*-*-*)\n \tcpu_type=aarch64\n-\tneed_64bit_hwint=yes\n \textra_headers=\"arm_neon.h\"\n \textra_objs=\"aarch64-builtins.o aarch-common.o\"\n \ttarget_has_targetm_common=yes\n \t;;\n alpha*-*-*)\n \tcpu_type=alpha\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} g.opt\"\n \t;;\n am33_2.0-*-linux*)\n@@ -333,7 +323,6 @@ arm*-*-*)\n \ttarget_type_format_char='%'\n \tc_target_objs=\"arm-c.o\"\n \tcxx_target_objs=\"arm-c.o\"\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} arm/arm-tables.opt\"\n \t;;\n avr-*-*)\n@@ -363,7 +352,6 @@ i[34567]86-*-*)\n \tcpu_type=i386\n \tc_target_objs=\"i386-c.o\"\n \tcxx_target_objs=\"i386-c.o\"\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"cpuid.h mmintrin.h mm3dnow.h xmmintrin.h emmintrin.h\n \t\t       pmmintrin.h tmmintrin.h ammintrin.h smmintrin.h\n@@ -395,11 +383,9 @@ x86_64-*-*)\n \t\t       avx512cdintrin.h avx512erintrin.h avx512pfintrin.h\n \t\t       shaintrin.h clflushoptintrin.h xsavecintrin.h\n \t\t       xsavesintrin.h\"\n-\tneed_64bit_hwint=yes\n \t;;\n ia64-*-*)\n \textra_headers=ia64intrin.h\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} g.opt fused-madd.opt\"\n \t;;\n hppa*-*-*)\n@@ -422,7 +408,6 @@ microblaze*-*-*)\n         ;;\n mips*-*-*)\n \tcpu_type=mips\n-\tneed_64bit_hwint=yes\n \textra_headers=\"loongson.h\"\n \textra_options=\"${extra_options} g.opt mips/mips-tables.opt\"\n \t;;\n@@ -440,7 +425,6 @@ picochip-*-*)\n powerpc*-*-*)\n \tcpu_type=rs6000\n \textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h htmintrin.h htmxlintrin.h\"\n-\tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n \t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[345678]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|Xe6500)\n \t\tcpu_is_64bit=yes\n@@ -449,7 +433,6 @@ powerpc*-*-*)\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n \t;;\n rs6000*-*-*)\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} g.opt fused-madd.opt rs6000/rs6000-tables.opt\"\n \t;;\n score*-*-*)\n@@ -461,22 +444,18 @@ sparc*-*-*)\n \tc_target_objs=\"sparc-c.o\"\n \tcxx_target_objs=\"sparc-c.o\"\n \textra_headers=\"visintrin.h\"\n-\tneed_64bit_hwint=yes\n \t;;\n spu*-*-*)\n \tcpu_type=spu\n-\tneed_64bit_hwint=yes\n \t;;\n s390*-*-*)\n \tcpu_type=s390\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_headers=\"s390intrin.h htmintrin.h htmxlintrin.h\"\n \t;;\n # Note the 'l'; we need to be able to match e.g. \"shle\" or \"shl\".\n sh[123456789lbe]*-*-* | sh-*-*)\n \tcpu_type=sh\n-\tneed_64bit_hwint=yes\n \textra_options=\"${extra_options} fused-madd.opt\"\n \textra_objs=\"${extra_objs} sh_treg_combine.o sh-mem.o sh_optimize_sett_clrt.o\"\n \t;;\n@@ -493,11 +472,9 @@ xtensa*-*-*)\n \t;;\n tilegx*-*-*)\n \tcpu_type=tilegx\n-\tneed_64bit_hwint=yes\n \t;;\n tilepro*-*-*)\n \tcpu_type=tilepro\n-\tneed_64bit_hwint=yes\n \t;;\n esac\n \n@@ -685,7 +662,6 @@ case ${target} in\n     *)\n       default_use_cxa_atexit=yes;;\n   esac\n-  # need_64bit_hwint=yes # system compiler has this for all arch!\n   use_gcc_stdint=wrap\n   ;;\n *-*-linux* | frv-*-*linux* | *-*-kfreebsd*-gnu | *-*-knetbsd*-gnu | *-*-gnu* | *-*-kopensolaris*-gnu)\n@@ -1186,7 +1162,6 @@ hppa*64*-*-linux*)\n \t\t glibc-stdint.h pa/pa-linux.h pa/pa64-regs.h pa/pa-64.h \\\n \t\t pa/pa64-linux.h\"\n \tgas=yes gnu_ld=yes\n-\tneed_64bit_hwint=yes\n \t;;\n hppa*-*-linux*)\n \ttarget_cpu_default=\"MASK_PA_11|MASK_NO_SPACE_REGS\"\n@@ -1261,7 +1236,6 @@ hppa*64*-*-hpux11*)\n \tesac\n \textra_options=\"${extra_options} pa/pa-hpux.opt \\\n \t\t       pa/pa-hpux1010.opt pa/pa64-hpux.opt hpux11.opt\"\n-\tneed_64bit_hwint=yes\n \ttmake_file=\"t-slibgcc\"\n \tcase x${enable_threads} in\n \tx | xyes | xposix )\n@@ -2094,7 +2068,6 @@ mipstx39-*-elf* | mipstx39el-*-elf*)\n \t;;\n mmix-knuth-mmixware)\n \ttm_file=\"${tm_file} newlib-stdint.h\"\n-\tneed_64bit_hwint=yes\n \tuse_gcc_stdint=wrap\n \t;;\n mn10300-*-*)"}, {"sha": "f03ed8288a143ac616acc0c140cbe5a94558d181", "filename": "gcc/config.in", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -1729,12 +1729,6 @@\n #endif\n \n \n-/* Define to 1 if HOST_WIDE_INT must be 64 bits wide (see hwint.h). */\n-#ifndef USED_FOR_TARGET\n-#undef NEED_64BIT_HOST_WIDE_INT\n-#endif\n-\n-\n /* Define to the address where bug reports for this package should be sent. */\n #ifndef USED_FOR_TARGET\n #undef PACKAGE_BUGREPORT"}, {"sha": "127dceeef7318af4dc5b406abf2a79c65ce0e588", "filename": "gcc/configure", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -11150,12 +11150,6 @@ else\n \tdone\n fi\n \n-if test x$need_64bit_hwint = xyes; then\n-\n-$as_echo \"#define NEED_64BIT_HOST_WIDE_INT 1\" >>confdefs.h\n-\n-fi\n-\n if test x$use_long_long_for_widest_fast_int = xyes; then\n \n $as_echo \"#define USE_LONG_LONG_FOR_WIDEST_FAST_INT 1\" >>confdefs.h\n@@ -17994,7 +17988,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 17997 \"configure\"\n+#line 17991 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -18100,7 +18094,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 18103 \"configure\"\n+#line 18097 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H"}, {"sha": "a339a0f54d8d2fbe6d2a297ee73c63b7bb9f0b3b", "filename": "gcc/configure.ac", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -1372,11 +1372,6 @@ else\n \tdone\n fi\n \n-if test x$need_64bit_hwint = xyes; then\n-\tAC_DEFINE(NEED_64BIT_HOST_WIDE_INT, 1,\n-[Define to 1 if HOST_WIDE_INT must be 64 bits wide (see hwint.h).])\n-fi\n-\n if test x$use_long_long_for_widest_fast_int = xyes; then\n \tAC_DEFINE(USE_LONG_LONG_FOR_WIDEST_FAST_INT, 1,\n [Define to 1 if the 'long long' (or '__int64') is wider than 'long' but still"}, {"sha": "4cc4614b4ead9d2fb739c54a4f49b91950d8549e", "filename": "gcc/hwint.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -56,7 +56,7 @@ extern char sizeof_long_long_must_be_8[sizeof (long long) == 8 ? 1 : -1];\n    Thus, we use that unless we have to use 'long long' or '__int64'\n    because we're targeting a 64-bit machine from a 32-bit host.  */\n \n-#if HOST_BITS_PER_LONG >= 64 || !defined NEED_64BIT_HOST_WIDE_INT\n+#if HOST_BITS_PER_LONG >= 64\n #   define HOST_BITS_PER_WIDE_INT HOST_BITS_PER_LONG\n #   define HOST_WIDE_INT long\n #   define HOST_WIDE_INT_C(X) X ## L"}, {"sha": "e767aa518db730c26104aeb4a1ae381db6fed90d", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -1,3 +1,12 @@\n+2014-05-20  Richard Biener  <rguenther@suse.de>\n+\n+\t* configure.ac: Copy gcc logic of detecting a 64bit type.\n+\tRemove HOST_WIDE_INT define.\n+\t* include/cpplib.h: typedef cpp_num_part to a 64bit type,\n+\tsimilar to how hwint.h does it.\n+\t* config.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2014-05-09  Joey Ye  <joey.ye@arm.com>\n \n \t* files.c (find_file_in_dir): Always try to shorten for DOS"}, {"sha": "1d69a75a2dffb5b3ef047da7769a40e0d7cb7f07", "filename": "libcpp/config.in", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfig.in?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -180,6 +180,9 @@\n /* Define to 1 if you have the <locale.h> header file. */\n #undef HAVE_LOCALE_H\n \n+/* Define to 1 if the system has the type `long long'. */\n+#undef HAVE_LONG_LONG\n+\n /* Define to 1 if you have the <memory.h> header file. */\n #undef HAVE_MEMORY_H\n \n@@ -228,9 +231,8 @@\n /* Define to 1 if you have the <unistd.h> header file. */\n #undef HAVE_UNISTD_H\n \n-/* Define to the widest efficient host integer type at least as wide as the\n-   target's size_t type. */\n-#undef HOST_WIDE_INT\n+/* Define to 1 if the system has the type `__int64'. */\n+#undef HAVE___INT64\n \n /* Define as const if the declaration of iconv() needs const. */\n #undef ICONV_CONST\n@@ -262,6 +264,12 @@\n /* The size of `long', as computed by sizeof. */\n #undef SIZEOF_LONG\n \n+/* The size of `long long', as computed by sizeof. */\n+#undef SIZEOF_LONG_LONG\n+\n+/* The size of `__int64', as computed by sizeof. */\n+#undef SIZEOF___INT64\n+\n /* If using the C implementation of alloca, define if you know the\n    direction of stack growth for your system; otherwise it will be\n    automatically deduced at runtime."}, {"sha": "6b0f6dc4a7279ab137e87cef7cb4dd758170ffe7", "filename": "libcpp/configure", "status": "modified", "additions": 86, "deletions": 35, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -5564,6 +5564,92 @@ cat >>confdefs.h <<_ACEOF\n #define ptrdiff_t int\n _ACEOF\n \n+fi\n+\n+ac_fn_c_check_type \"$LINENO\" \"long long\" \"ac_cv_type_long_long\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type_long_long\" = x\"\"yes; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_LONG_LONG 1\n+_ACEOF\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of long long\" >&5\n+$as_echo_n \"checking size of long long... \" >&6; }\n+if test \"${ac_cv_sizeof_long_long+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (long long))\" \"ac_cv_sizeof_long_long\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_long_long\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+{ as_fn_set_status 77\n+as_fn_error \"cannot compute sizeof (long long)\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }; }\n+   else\n+     ac_cv_sizeof_long_long=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_long_long\" >&5\n+$as_echo \"$ac_cv_sizeof_long_long\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_LONG_LONG $ac_cv_sizeof_long_long\n+_ACEOF\n+\n+\n+fi\n+\n+ac_fn_c_check_type \"$LINENO\" \"__int64\" \"ac_cv_type___int64\" \"$ac_includes_default\"\n+if test \"x$ac_cv_type___int64\" = x\"\"yes; then :\n+\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE___INT64 1\n+_ACEOF\n+\n+# The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of __int64\" >&5\n+$as_echo_n \"checking size of __int64... \" >&6; }\n+if test \"${ac_cv_sizeof___int64+set}\" = set; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (__int64))\" \"ac_cv_sizeof___int64\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type___int64\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+{ as_fn_set_status 77\n+as_fn_error \"cannot compute sizeof (__int64)\n+See \\`config.log' for more details.\" \"$LINENO\" 5; }; }\n+   else\n+     ac_cv_sizeof___int64=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof___int64\" >&5\n+$as_echo \"$ac_cv_sizeof___int64\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF___INT64 $ac_cv_sizeof___int64\n+_ACEOF\n+\n+\n fi\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether struct tm is in sys/time.h or time.h\" >&5\n@@ -7151,41 +7237,6 @@ $as_echo \"#define ENABLE_CANONICAL_SYSTEM_HEADERS 1\" >>confdefs.h\n \n fi\n \n-\n-case $target in\n-\taarch64*-*-* | \\\n-\talpha*-*-* | \\\n-\tarm*-*-* | \\\n-\tx86_64-*-* | \\\n-\tia64-*-* | \\\n-\thppa*64*-*-* | \\\n-\ti[34567]86-*-* | x86_64-*-solaris2.1[0-9]* | \\\n-\tmips*-*-* | \\\n-\tmmix-*-* | \\\n-\tpowerpc*-*-* | \\\n-\trs6000*-*-* | \\\n-\ts390*-*-* | \\\n-\tsparc*-*-* | \\\n-\tspu-*-* | \\\n-\tsh[123456789lbe]*-*-* | sh-*-* | \\\n-\ttilegx*-*-* | tilepro*-*-* )\n-\t\tneed_64bit_hwint=yes ;;\n-\t*)\n-\t\tneed_64bit_hwint=yes ;;\n-esac\n-\n-case $need_64bit_hwint:$ac_cv_sizeof_long in\n-\t*:8 | no:*) host_wide_int=long ;;\n-\t*) host_wide_int='long long' ;;\n-esac\n-\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define HOST_WIDE_INT $host_wide_int\n-_ACEOF\n-\n-\n case $target in\n   i?86-* | x86_64-*)\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext"}, {"sha": "93616add3bd15d5c85ad23337b37e058e2be3ecc", "filename": "libcpp/configure.ac", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fconfigure.ac?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -64,6 +64,8 @@ AC_TYPE_SIZE_T\n AC_TYPE_SSIZE_T\n AC_TYPE_UINTPTR_T\n AC_CHECK_TYPE(ptrdiff_t, int)\n+AC_CHECK_TYPES([long long], [AC_CHECK_SIZEOF(long long)])\n+AC_CHECK_TYPES([__int64], [AC_CHECK_SIZEOF(__int64)])\n AC_STRUCT_TM\n AC_CHECK_SIZEOF(int)\n AC_CHECK_SIZEOF(long)\n@@ -180,39 +182,6 @@ if test $enable_canonical_system_headers != no; then\n             1, [Define to enable system headers canonicalization.])\n fi\n \n-m4_changequote(,)\n-case $target in\n-\taarch64*-*-* | \\\n-\talpha*-*-* | \\\n-\tarm*-*-* | \\\n-\tx86_64-*-* | \\\n-\tia64-*-* | \\\n-\thppa*64*-*-* | \\\n-\ti[34567]86-*-* | x86_64-*-solaris2.1[0-9]* | \\\n-\tmips*-*-* | \\\n-\tmmix-*-* | \\\n-\tpowerpc*-*-* | \\\n-\trs6000*-*-* | \\\n-\ts390*-*-* | \\\n-\tsparc*-*-* | \\\n-\tspu-*-* | \\\n-\tsh[123456789lbe]*-*-* | sh-*-* | \\\n-\ttilegx*-*-* | tilepro*-*-* )\n-\t\tneed_64bit_hwint=yes ;;\n-\t*)\n-\t\tneed_64bit_hwint=yes ;;\n-esac\n-\n-case $need_64bit_hwint:$ac_cv_sizeof_long in\n-\t*:8 | no:*) host_wide_int=long ;;\n-\t*) host_wide_int='long long' ;;\n-esac\n-m4_changequote([,])\n-\n-AC_DEFINE_UNQUOTED(HOST_WIDE_INT, $host_wide_int,\n-[Define to the widest efficient host integer type at least\n-   as wide as the target's size_t type.])\n-\n case $target in\n   i?86-* | x86_64-*)\n     AC_TRY_COMPILE([], [asm (\"pcmpestri %0, %%xmm0, %%xmm1\" : : \"i\"(0))],"}, {"sha": "594c89940dff144af29a5835980b81ca146db0a8", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54da09ee2062f41141dbfd116975ee20509a96e3/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=54da09ee2062f41141dbfd116975ee20509a96e3", "patch": "@@ -819,7 +819,24 @@ extern int cpp_defined (cpp_reader *, const unsigned char *, int);\n \n /* A preprocessing number.  Code assumes that any unused high bits of\n    the double integer are set to zero.  */\n-typedef unsigned HOST_WIDE_INT cpp_num_part;\n+\n+/* Find a type with at least 64bit precision, mimicking hwint.h.\n+   This type has to be equal to unsigned HOST_WIDE_INT, see\n+   gcc/c-family/c-lex.c.  */\n+#if SIZEOF_LONG >= 8\n+typedef unsigned long cpp_num_part;\n+#else\n+# if SIZEOF_LONG_LONG >= 8\n+typedef unsigned long long cpp_num_part;\n+# else\n+#  if SIZEOF___INT64 >= 8\n+typedef unsigned __int64 cpp_num_part;\n+#  else\n+    #error \"This line should be impossible to reach\"\n+#  endif\n+# endif\n+#endif\n+\n typedef struct cpp_num cpp_num;\n struct cpp_num\n {"}]}