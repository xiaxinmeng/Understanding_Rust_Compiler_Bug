{"sha": "5ada012290883e98d76a3ac6dcd34e56d50057e3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWFkYTAxMjI5MDg4M2U5OGQ3NmEzYWM2ZGNkMzRlNTZkNTAwNTdlMw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-24T16:24:38Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-04-24T16:24:38Z"}, "message": "compiler: Fix order of evalation for m[0] = len(m) when m is a map.\n\nFrom-SVN: r186772", "tree": {"sha": "77d2ef18af6f3cc34a841faf5a5d20309be8ec31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77d2ef18af6f3cc34a841faf5a5d20309be8ec31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5ada012290883e98d76a3ac6dcd34e56d50057e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ada012290883e98d76a3ac6dcd34e56d50057e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5ada012290883e98d76a3ac6dcd34e56d50057e3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5ada012290883e98d76a3ac6dcd34e56d50057e3/comments", "author": null, "committer": null, "parents": [{"sha": "24d5b351b1bb9d2fd66202cbf76857c404e06e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24d5b351b1bb9d2fd66202cbf76857c404e06e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24d5b351b1bb9d2fd66202cbf76857c404e06e85"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "7bc0b557c9f2f7bcb56f5474ac8069eaac241714", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5ada012290883e98d76a3ac6dcd34e56d50057e3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5ada012290883e98d76a3ac6dcd34e56d50057e3/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=5ada012290883e98d76a3ac6dcd34e56d50057e3", "patch": "@@ -2216,12 +2216,18 @@ Order_eval::statement(Block* block, size_t* pindex, Statement* s)\n       Expression::traverse(&init, &find_eval_ordering);\n     }\n \n-  if (find_eval_ordering.size() <= 1)\n-    {\n-      // If there is only one expression with a side-effect, we can\n-      // leave it in place.\n-      return TRAVERSE_CONTINUE;\n-    }\n+  size_t c = find_eval_ordering.size();\n+  if (c == 0)\n+    return TRAVERSE_CONTINUE;\n+\n+  // If there is only one expression with a side-effect, we can\n+  // usually leave it in place.  However, for an assignment statement,\n+  // we need to evaluate an expression on the right hand side before\n+  // we evaluate any index expression on the left hand side, so for\n+  // that case we always move the expression.  Otherwise we mishandle\n+  // m[0] = len(m) where m is a map.\n+  if (c == 1 && s->classification() != Statement::STATEMENT_ASSIGNMENT)\n+    return TRAVERSE_CONTINUE;\n \n   bool is_thunk = s->thunk_statement() != NULL;\n   for (Find_eval_ordering::const_iterator p = find_eval_ordering.begin();"}]}