{"sha": "7d6a09934cc7def8199c104c196cb9bd51cf4711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q2YTA5OTM0Y2M3ZGVmODE5OWMxMDRjMTk2Y2I5YmQ1MWNmNDcxMQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-07-01T03:04:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-07-01T03:04:43Z"}, "message": "1-in.cc: New.\n\n\n2003-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* 27_io/basic_filebuf/seekoff/char/1-in.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/1-io.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/1-out.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/2-in.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/2-io.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/2-out.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/2.cc: Remove.\n\t* 27_io/basic_filebuf/seekoff/char/3-in.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/3-io.cc: Change.\n\t* 27_io/basic_filebuf/seekoff/char/3-out.cc: New.\n\t* 27_io/basic_filebuf/seekoff/char/4-io.cc: Remove.\n\t* 27_io/basic_filebuf/seekpos/char/1-in.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/1-io.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/1-out.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/2-in.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/2-io.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/2-out.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/2.cc: Change.\n\t* 27_io/basic_filebuf/seekpos/char/3-in.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/3-io.cc: Remove.\n\t* 27_io/basic_filebuf/seekpos/char/3-out.cc: New.\n\t* 27_io/basic_filebuf/seekpos/char/4-io.cc: Remove.\n \t* data/seekoff-1.tst: Remove.\n\t* data/seekoff-1io.tst: New.\n\t* data/seekoff-1out.tst: New.\n\t* data/seekoff-2.tst: Remove.\n\t* data/seekoff-2io.tst: New.\n\t* data/seekoff-2out.tst: New.\n\t* data/seekoff.txt\n\t* data/seekpos-1.tst: Remove.\n\t* data/seekpos-1io.tst: New.\n\t* data/seekpos-1out.tst: New.\n\t* data/seekpos-2.tst: Remove.\n\t* data/seekpos-2io.tst: New.\n\t* data/seekpos-2out.tst: New.\n\t* data/seekpos.txt: New.\n\nFrom-SVN: r68757", "tree": {"sha": "aac50e13b4a0f5258bba3f2931612a42e72ae3cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aac50e13b4a0f5258bba3f2931612a42e72ae3cb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d6a09934cc7def8199c104c196cb9bd51cf4711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6a09934cc7def8199c104c196cb9bd51cf4711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d6a09934cc7def8199c104c196cb9bd51cf4711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d6a09934cc7def8199c104c196cb9bd51cf4711/comments", "author": null, "committer": null, "parents": [{"sha": "cf0cad0951699a14ddff54f7c1064d7b45c7af41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0cad0951699a14ddff54f7c1064d7b45c7af41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0cad0951699a14ddff54f7c1064d7b45c7af41"}], "stats": {"total": 1671, "additions": 1456, "deletions": 215}, "files": [{"sha": "79fc528b896bd4d46acba3df36475739917cca8d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -1,3 +1,42 @@\n+2003-06-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* 27_io/basic_filebuf/seekoff/char/1-in.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/1-io.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/1-out.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/2-in.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/2-io.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/2-out.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/2.cc: Remove.\n+\t* 27_io/basic_filebuf/seekoff/char/3-in.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/3-io.cc: Change.\n+\t* 27_io/basic_filebuf/seekoff/char/3-out.cc: New.\n+\t* 27_io/basic_filebuf/seekoff/char/4-io.cc: Remove.\n+\t* 27_io/basic_filebuf/seekpos/char/1-in.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/1-io.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/1-out.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/2-in.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/2-io.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/2-out.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/2.cc: Change.\n+\t* 27_io/basic_filebuf/seekpos/char/3-in.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/3-io.cc: Remove.\n+\t* 27_io/basic_filebuf/seekpos/char/3-out.cc: New.\n+\t* 27_io/basic_filebuf/seekpos/char/4-io.cc: Remove.\n+ \t* data/seekoff-1.tst: Remove.\n+\t* data/seekoff-1io.tst: New.\n+\t* data/seekoff-1out.tst: New.\n+\t* data/seekoff-2.tst: Remove.\n+\t* data/seekoff-2io.tst: New.\n+\t* data/seekoff-2out.tst: New.\n+\t* data/seekoff.txt\n+\t* data/seekpos-1.tst: Remove.\n+\t* data/seekpos-1io.tst: New.\n+\t* data/seekpos-1out.tst: New.\n+\t* data/seekpos-2.tst: Remove.\n+\t* data/seekpos-2io.tst: New.\n+\t* data/seekpos-2out.tst: New.\n+\t* data/seekpos.txt: New.\n+\n 2003-06-27  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* src/locale.cc (__use_cache<numpunct>): Move from here ..."}, {"sha": "62173d0c843718901ab37596fbf8e088fb086c59", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-in.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,124 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff.txt\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // in\n+  {\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::in);\n+    VERIFY( !fb.write_position() );\n+\n+    //beg\n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '9' );\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n+    VERIFY( c2 == traits_type::eof() ); \n+    VERIFY( c3 == '9' );\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //cur\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '1' );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( c3 == traits_type::eof() );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //end\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 0 );\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( !fb.write_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "00872f4117d0b0be8dae489dcec2c31bfe1d43d9", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-io.cc", "status": "renamed", "additions": 39, "deletions": 38, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -27,7 +27,7 @@\n // @require@ %-*.tst %-*.txt\n // @diff@ %-*.tst %*.txt\n \n-const char name_01[] = \"seekoff-2.tst\";\n+const char name_01[] = \"seekoff-1io.tst\";\n \n void test05() \n {\n@@ -38,7 +38,7 @@ void test05()\n   typedef filebuf::pos_type \tpos_type;\n   typedef filebuf::off_type \toff_type;\n \n-  bool\t\t\t\ttest = true;\n+  bool \t\t\t\ttest = true;\n   streamsize \t\t\tstrmsz_1, strmsz_2;\n   streamoff  \t\t\tstrmof_1, strmof_2;\n \n@@ -57,61 +57,62 @@ void test05()\n \n   // in | out\n   {\n-    constraint_filebuf fb_03;\n-    fb_03.pubsetbuf(0, 0);\n-    fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( fb_03.unbuffered() );\n-    // 27filebuf-3.txt = bd23456789:;<=>?...\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+\n     //beg\n-    strmsz_1 = fb_03.in_avail(); \n-    pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n-    strmsz_2 = fb_03.in_avail(); \n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n     off_1 = pt_1;\n     VERIFY( off_1 > 0 );\n-    c1 = fb_03.snextc(); //current in pointer +1\n+    c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '9' );\n-    fb_03.pubseekoff(3, ios_base::beg);\n-    c2 = fb_03.sputc('\\n');  //current in pointer +1\n-    fb_03.pubseekoff(4, ios_base::beg);\n-    c3 = fb_03.sgetc();\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n     VERIFY( c2 != c3 ); \n     VERIFY( c3 == '9' );\n-    fb_03.pubsync(); \n-    c1 = fb_03.sgetc();\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n     VERIFY( c1 == c3 );\n+\n     //cur\n-    // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n-    pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n     off_2 = pt_2;\n     VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n-    c1 = fb_03.snextc(); //current in pointer +1\n+    c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == '1' );\n-    fb_03.pubseekoff(0, ios_base::cur);\n-    c2 = fb_03.sputc('x');  //test current out pointer\n-    c3 = fb_03.sputc('\\n');\n-    fb_03.pubseekoff(0, ios_base::cur);\n-    c1 = fb_03.sgetc();\n-    fb_03.pubsync(); \n-    c3 = fb_03.sgetc();\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n     VERIFY( c1 == c3 );\n+\n     //end\n-    // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n-    pt_2 = fb_03.pubseekoff(0, ios_base::end);\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n     off_1 = pt_2;\n     VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n-    c3 = fb_03.sputc('\\n');\n-    strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n     VERIFY( strmsz_1 == 28 );\n-    fb_03.pubseekoff(-1, ios_base::end);\n-    fb_03.sgetc();\n-    c1 = fb_03.sungetc();\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n     // Defect?  retval of sungetc is not necessarily the character ungotten.\n     // So re-get it.\n-    c1 = fb_03.sgetc();\n-    fb_03.pubsync(); \n-    c3 = fb_03.sgetc();\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n     VERIFY( c1 == c3 );\n-    VERIFY( fb_03.unbuffered() );\n+    VERIFY( !fb.write_position() );\n+    VERIFY( fb.read_position() );\n   }\n }\n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/4-io.cc"}, {"sha": "39abdac89d32e526ba72e5536e94cf809c147cdc", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/1-out.cc", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F1-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,124 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff-1out.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // out\n+  {\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::out);\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+\n+    //beg\n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n+    VERIFY( c2 != c3 ); \n+    VERIFY( c3 == traits_type::eof() );\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //cur\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //end\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 28 );\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "0dc97ded28a3aeda5c5d017d0aaa8b550ec0baf5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-in.cc", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,125 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff.txt\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // in\n+  {\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::in);\n+    VERIFY( fb.unbuffered() );\n+\n+    //beg\n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '9' );\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n+    VERIFY( c2 == traits_type::eof() ); \n+    VERIFY( c3 == '9' );\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //cur\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '1' );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( c3 == traits_type::eof() );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //end\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 0 );\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( fb.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "8be6f5e7adfa40796f043c50fd961df21ab50f4f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-io.cc", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,122 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff-2io.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb.unbuffered() );\n+\n+    //beg\n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '9' );\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n+    VERIFY( c2 != c3 ); \n+    VERIFY( c3 == '9' );\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //cur\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == '1' );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //end\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 28 );\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( fb.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "4a39a2164f338f2465a59c3c91bbed65ccbd1a3d", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2-out.cc", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F2-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,123 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekoff-2out.tst\";\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekoff\n+  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n+  // alters the stream position to off\n+\n+  // out\n+  {\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::out);\n+    VERIFY( fb.unbuffered() );\n+\n+    //beg\n+    strmsz_1 = fb.in_avail(); \n+    pt_1 = fb.pubseekoff(2, ios_base::beg);\n+    strmsz_2 = fb.in_avail(); \n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+    fb.pubseekoff(3, ios_base::beg);\n+    c2 = fb.sputc('\\n');  //current in pointer +1\n+    fb.pubseekoff(4, ios_base::beg);\n+    c3 = fb.sgetc();\n+    VERIFY( c2 != c3 ); \n+    VERIFY( c3 == traits_type::eof() );\n+    fb.pubsync(); \n+    c1 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //cur\n+    pt_2 = fb.pubseekoff(2, ios_base::cur);\n+    off_2 = pt_2;\n+    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+    fb.pubseekoff(0, ios_base::cur);\n+    c2 = fb.sputc('x');  //test current out pointer\n+    c3 = fb.sputc('\\n');\n+    fb.pubseekoff(0, ios_base::cur);\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+\n+    //end\n+    pt_2 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_2;\n+    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n+    c3 = fb.sputc('\\n');\n+    strmsz_1 = fb.sputn(\"because because because. . .\", 28);  \n+    VERIFY( strmsz_1 == 28 );\n+    fb.pubseekoff(-1, ios_base::end);\n+    fb.sgetc();\n+    c1 = fb.sungetc();\n+    // Defect?  retval of sungetc is not necessarily the character ungotten.\n+    // So re-get it.\n+    c1 = fb.sgetc();\n+    fb.pubsync(); \n+    c3 = fb.sgetc();\n+    VERIFY( c1 == c3 );\n+    VERIFY( fb.unbuffered() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "b0a192d2337993e4ebcd4383b004ef13815beb02", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/3-in.cc", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -52,7 +52,6 @@ int main()\n {\n   using namespace std;\n \n-  // movie star, submarine scientist!\n   filebuf in1;\n   in1.open(name_01, ios_base::in);\n   filebuf in2;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/2.cc"}, {"sha": "df03ad6cae2a3d95b4b41cf82943e3340fc061b5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/3-io.cc", "status": "modified", "additions": 31, "deletions": 89, "changes": 120, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -18,106 +18,48 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 27.8.1.4 Overridden virtual functions\n+// 27.7.1.3 Overridden virtual functions\n \n #include <fstream>\n #include <testsuite_hooks.h>\n-#include <testsuite_io.h>\n \n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-const char name_01[] = \"seekoff-1.tst\";\n-\n-void test05() \n+void test02(std::filebuf& in, bool pass)\n {\n+  bool test = true;\n   using namespace std;\n-  using namespace __gnu_cxx_test;\n-\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-\n-  bool \t\t\t\ttest = true;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-\n-  int_type c1;\n-  int_type c2;\n-  int_type c3;\n-\n-  pos_type pt_1(off_type(-1));\n-  pos_type pt_2(off_type(0));\n-  off_type off_1 = 0;\n-  off_type off_2 = 0;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n \n   // seekoff\n-  // pubseekoff(off_type off, ios_base::seekdir way, ios_base::openmode which)\n-  // alters the stream position to off\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  if (pass)\n+    VERIFY( p != bad );\n \n-  // in | out\n-  {\n-    constraint_filebuf fb_03;\n-    fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( !fb_03.write_position() );\n-    VERIFY( !fb_03.read_position() );\n-    // 27filebuf-3.txt = bd23456789:;<=>?...\n-    //beg\n-    strmsz_1 = fb_03.in_avail(); \n-    pt_1 = fb_03.pubseekoff(2, ios_base::beg);\n-    strmsz_2 = fb_03.in_avail(); \n-    off_1 = pt_1;\n-    VERIFY( off_1 > 0 );\n-    c1 = fb_03.snextc(); //current in pointer +1\n-    VERIFY( c1 == '9' );\n-    fb_03.pubseekoff(3, ios_base::beg);\n-    c2 = fb_03.sputc('\\n');  //current in pointer +1\n-    fb_03.pubseekoff(4, ios_base::beg);\n-    c3 = fb_03.sgetc();\n-    VERIFY( c2 != c3 ); \n-    VERIFY( c3 == '9' );\n-    fb_03.pubsync(); \n-    c1 = fb_03.sgetc();\n-    VERIFY( c1 == c3 );\n-    //cur\n-    // 27filebuf-3.txt = bd2\\n456789:;<=>?...\n-    pt_2 = fb_03.pubseekoff(2, ios_base::cur);\n-    off_2 = pt_2;\n-    VERIFY( (off_2 == (off_1 + 2 + 1 + 1)) );\n-    c1 = fb_03.snextc(); //current in pointer +1\n-    VERIFY( c1 == '1' );\n-    fb_03.pubseekoff(0, ios_base::cur);\n-    c2 = fb_03.sputc('x');  //test current out pointer\n-    c3 = fb_03.sputc('\\n');\n-    fb_03.pubseekoff(0, ios_base::cur);\n-    c1 = fb_03.sgetc();\n-    fb_03.pubsync(); \n-    c3 = fb_03.sgetc();\n-    VERIFY( c1 == c3 );\n-    //end\n-    // 27filebuf-3.txt = \"bd2\\n456x\\n9\" \n-    pt_2 = fb_03.pubseekoff(0, ios_base::end);\n-    off_1 = pt_2;\n-    VERIFY( off_1 > off_2 ); //weak, but don't know exactly where it ends\n-    c3 = fb_03.sputc('\\n');\n-    strmsz_1 = fb_03.sputn(\"because because because. . .\", 28);  \n-    VERIFY( strmsz_1 == 28 );\n-    fb_03.pubseekoff(-1, ios_base::end);\n-    fb_03.sgetc();\n-    c1 = fb_03.sungetc();\n-    // Defect?  retval of sungetc is not necessarily the character ungotten.\n-    // So re-get it.\n-    c1 = fb_03.sgetc();\n-    fb_03.pubsync(); \n-    c3 = fb_03.sgetc();\n-    VERIFY( c1 == c3 );\n-    VERIFY( !fb_03.write_position() );\n-    VERIFY( fb_03.read_position() );\n-  }\n+  p = in.pubseekoff(0, ios_base::beg); \n+  if (pass)\n+    VERIFY( p != bad );\n }\n \n-main() \n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n {\n-  test05();\n+  using namespace std;\n+\n+  filebuf in1;\n+  in1.open(name_01, ios_base::in | ios_base::out);\n+  filebuf in2;\n+  filebuf in3;\n+  in3.open(name_03, ios_base::in | ios_base::out);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, true);\n   return 0;\n }"}, {"sha": "8749ff0bea4ca6af6c73a1db1dd115e93b7edee5", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekoff/char/3-out.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekoff%2Fchar%2F3-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,64 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::filebuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekoff\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::in);\n+  VERIFY( p == bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg, ios_base::out); \n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekoff(0, ios_base::beg); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  filebuf out1;\n+  out1.open(name_01, ios_base::out);\n+  filebuf out2;\n+  filebuf out3;\n+  out3.open(name_03, ios_base::out);\n+  test02(out1, true);\n+  test02(out2, false);\n+  test02(out3, true);\n+  return 0;\n+}"}, {"sha": "9464eefc1d3ebf6a32f62d0323ffe77b77ab6d81", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-in.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,104 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // in \n+  {\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::in);\n+    VERIFY( !fb.write_position() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == 't' );\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb.snextc(); //current in pointer +1\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( c2 != c3 );\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( !fb.write_position() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "009886032aae3c95ba4f1b35402e0c2e5d9c8890", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-io.cc", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,104 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos-1io.tst\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // in | out\n+  {\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == 't' );\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb.snextc(); //current in pointer +1\n+    VERIFY( c2 == c3 );\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "b0008f3cb43851652742ec3ba6bbcaca73714ad1", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/1-out.cc", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F1-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,106 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos-1out.tst\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // out\n+  {\n+    constraint_filebuf fb;\n+    fb.open(name_01, ios_base::out);\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb.snextc(); //current in pointer +1\n+    VERIFY( c2 != c3 );\n+    VERIFY( c3 == traits_type::eof() );\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( !fb.write_position() );\n+    VERIFY( !fb.read_position() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "ec1dca5abb8dbd2df395be80741656dce99cce22", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-in.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,105 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos.txt\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // in \n+  {\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::in);\n+    VERIFY( fb.unbuffered() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == 't' );\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb.snextc(); //current in pointer +1\n+    VERIFY( c2 == traits_type::eof() );\n+    VERIFY( c2 != c3 );\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( fb.unbuffered() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "f883cf9ef3a3f46422383f5cb3ac1f570f7ab62f", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-io.cc", "status": "renamed", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -27,7 +27,7 @@\n // @require@ %-*.tst %-*.txt\n // @diff@ %-*.tst %*.txt\n \n-const char name_01[] = \"seekpos-2.tst\"; // file with data in it\n+const char name_01[] = \"seekpos-2io.tst\"; // file with data in it\n \n void test05() \n {\n@@ -58,35 +58,41 @@ void test05()\n \n   // in | out\n   {\n-    constraint_filebuf fb_03;\n-    fb_03.pubsetbuf(0, 0);\n-    fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( fb_03.unbuffered() );\n-    pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::out | ios_base::in);\n+    VERIFY( fb.unbuffered() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n     off_1 = pt_1;\n     VERIFY( off_1 > 0 );\n-    c1 = fb_03.snextc(); \t\t//current in pointer +1\n+    c1 = fb.snextc(); //current in pointer +1\n     VERIFY( c1 == 't' );\n-    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n-    fb_03.pubseekpos(pt_3);\n-    c2 = fb_03.sputc('\\n');  \t//test current out pointer\n-    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n-    fb_03.pubseekpos(pt_3);\n-    c3 = fb_03.sgetc();\n-    fb_03.pubsync(); \t\t//resets pointers\n-    pt_2 = fb_03.pubseekpos(pt_1);\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n     off_2 = pt_2;\n     VERIFY( off_1 == off_2 );\n-    c3 = fb_03.snextc(); \t\t//current in pointer +1\n+    c3 = fb.snextc(); //current in pointer +1\n     VERIFY( c2 == c3 );\n-    pt_1 = fb_03.pubseekoff(0, ios_base::end);\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n     off_1 = pt_1;\n     VERIFY( off_1 > off_2 );\n-    fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n-    fb_03.pubsync();\n-    VERIFY( fb_03.unbuffered() );\n-    fb_03.close();\n-    VERIFY( !fb_03.is_open() );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( fb.unbuffered() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n   }\n }\n ", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/4-io.cc"}, {"sha": "9531e01c6095764b2ee651563301b81ce770baef", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2-out.cc", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F2-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,105 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.8.1.4 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+#include <testsuite_io.h>\n+\n+// @require@ %-*.tst %-*.txt\n+// @diff@ %-*.tst %*.txt\n+\n+const char name_01[] = \"seekpos-2out.tst\"; // file with data in it\n+\n+void test05() \n+{\n+  using namespace std;\n+  using namespace __gnu_cxx_test;\n+\n+  typedef filebuf::int_type \tint_type;\n+  typedef filebuf::pos_type \tpos_type;\n+  typedef filebuf::off_type \toff_type;\n+  typedef filebuf::traits_type \ttraits_type;\n+\n+  bool \t\t\t\ttest = true;\n+  streamsize \t\t\tstrmsz_1, strmsz_2;\n+  streamoff  \t\t\tstrmof_1, strmof_2;\n+\n+  int_type c1;\n+  int_type c2;\n+  int_type c3;\n+\n+  pos_type pt_1(off_type(-1));\n+  pos_type pt_2(off_type(0));\n+  pos_type pt_3;\n+  off_type off_1 = 0;\n+  off_type off_2 = 0;\n+\n+  // seekpos\n+  // pubseekpos(pos_type sp, ios_base::openmode)\n+  // alters the stream position to sp\n+\n+  // out\n+  {\n+    constraint_filebuf fb;\n+    fb.pubsetbuf(0, 0);\n+    fb.open(name_01, ios_base::out);\n+    VERIFY( fb.unbuffered() );\n+\n+    // beg\n+    pt_1 = fb.pubseekoff(78, ios_base::beg);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > 0 );\n+    c1 = fb.snextc(); //current in pointer +1\n+    VERIFY( c1 == traits_type::eof() );\n+\n+    // cur\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c2 = fb.sputc('\\n'); //test current out pointer\n+    pt_3 = fb.pubseekoff(0, ios_base::cur);\n+    fb.pubseekpos(pt_3);\n+    c3 = fb.sgetc();\n+    fb.pubsync(); //resets pointers\n+    pt_2 = fb.pubseekpos(pt_1);\n+    off_2 = pt_2;\n+    VERIFY( off_1 == off_2 );\n+    c3 = fb.snextc(); //current in pointer +1\n+    VERIFY( c2 != c3 );\n+    VERIFY( c3 == traits_type::eof() );\n+\n+    // end\n+    pt_1 = fb.pubseekoff(0, ios_base::end);\n+    off_1 = pt_1;\n+    VERIFY( off_1 > off_2 );\n+    fb.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n+    fb.pubsync();\n+    VERIFY( fb.unbuffered() );\n+    fb.close();\n+    VERIFY( !fb.is_open() );\n+  }\n+}\n+\n+main() \n+{\n+  test05();\n+  return 0;\n+}"}, {"sha": "70585273b011d78f49ca3c4853ce545461ec4df2", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/3-in.cc", "status": "renamed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-in.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-in.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-in.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -52,7 +52,6 @@ int main()\n {\n   using namespace std;\n \n-  // movie star, submarine scientist!\n   filebuf in1;\n   in1.open(name_01, ios_base::in);\n   filebuf in2;", "previous_filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/2.cc"}, {"sha": "d0cc3b1f80c906bca749da14abf6ca537f10c3c0", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/3-io.cc", "status": "modified", "additions": 31, "deletions": 64, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-io.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -18,81 +18,48 @@\n // Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n // USA.\n \n-// 27.8.1.4 Overridden virtual functions\n+// 27.7.1.3 Overridden virtual functions\n \n #include <fstream>\n #include <testsuite_hooks.h>\n-#include <testsuite_io.h>\n \n-// @require@ %-*.tst %-*.txt\n-// @diff@ %-*.tst %*.txt\n-\n-const char name_01[] = \"seekpos-1.tst\"; // file with data in it\n-\n-void test05() \n+void test02(std::filebuf& in, bool pass)\n {\n+  bool test = true;\n   using namespace std;\n-  using namespace __gnu_cxx_test;\n-\n-  typedef filebuf::int_type \tint_type;\n-  typedef filebuf::pos_type \tpos_type;\n-  typedef filebuf::off_type \toff_type;\n-\n-  bool \t\t\t\ttest = true;\n-  streamsize \t\t\tstrmsz_1, strmsz_2;\n-  streamoff  \t\t\tstrmof_1, strmof_2;\n-\n-  int_type c1;\n-  int_type c2;\n-  int_type c3;\n-\n-  pos_type pt_1(off_type(-1));\n-  pos_type pt_2(off_type(0));\n-  pos_type pt_3;\n-  off_type off_1 = 0;\n-  off_type off_2 = 0;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n \n   // seekpos\n-  // pubseekpos(pos_type sp, ios_base::openmode)\n-  // alters the stream position to sp\n+  p = in.pubseekpos(0, ios_base::in);\n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  if (pass)\n+    VERIFY( p != bad );\n \n-  // in | out\n-  {\n-    constraint_filebuf fb_03;\n-    fb_03.open(name_01, ios_base::out | ios_base::in);\n-    VERIFY( !fb_03.write_position() );\n-    VERIFY( !fb_03.read_position() );\n-    pt_1 = fb_03.pubseekoff(78, ios_base::beg);\n-    off_1 = pt_1;\n-    VERIFY( off_1 > 0 );\n-    c1 = fb_03.snextc(); \t\t//current in pointer +1\n-    VERIFY( c1 == 't' );\n-    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n-    fb_03.pubseekpos(pt_3);\n-    c2 = fb_03.sputc('\\n');  \t//test current out pointer\n-    pt_3 = fb_03.pubseekoff(0, ios_base::cur);\n-    fb_03.pubseekpos(pt_3);\n-    c3 = fb_03.sgetc();\n-    fb_03.pubsync(); \t\t//resets pointers\n-    pt_2 = fb_03.pubseekpos(pt_1);\n-    off_2 = pt_2;\n-    VERIFY( off_1 == off_2 );\n-    c3 = fb_03.snextc(); \t\t//current in pointer +1\n-    VERIFY( c2 == c3 );\n-    pt_1 = fb_03.pubseekoff(0, ios_base::end);\n-    off_1 = pt_1;\n-    VERIFY( off_1 > off_2 );\n-    fb_03.sputn(\"\\nof the wonderful things he does!!\\nok\", 37);\n-    fb_03.pubsync();\n-    VERIFY( !fb_03.write_position() );\n-    VERIFY( !fb_03.read_position() );\n-    fb_03.close();\n-    VERIFY( !fb_03.is_open() );\n-  }\n+  p = in.pubseekpos(0); \n+  if (pass)\n+    VERIFY( p != bad );\n }\n \n-main() \n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n {\n-  test05();\n+  using namespace std;\n+\n+  filebuf in1;\n+  in1.open(name_01, ios_base::in | ios_base::out);\n+  filebuf in2;\n+  filebuf in3;\n+  in3.open(name_03, ios_base::in | ios_base::out);\n+  test02(in1, true);\n+  test02(in2, false);\n+  test02(in3, true);\n   return 0;\n }"}, {"sha": "35e5a4f0db2e91481326cbe37a4b9ea1e116cf33", "filename": "libstdc++-v3/testsuite/27_io/basic_filebuf/seekpos/char/3-out.cc", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-out.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-out.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_filebuf%2Fseekpos%2Fchar%2F3-out.cc?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,64 @@\n+// 2001-05-21 Benjamin Kosnik  <bkoz@redhat.com>\n+\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 27.7.1.3 Overridden virtual functions\n+\n+#include <fstream>\n+#include <testsuite_hooks.h>\n+\n+void test02(std::filebuf& in, bool pass)\n+{\n+  bool test = true;\n+  using namespace std;\n+  typedef streambuf::pos_type pos_type;\n+  typedef streambuf::off_type off_type;\n+  pos_type bad = pos_type(off_type(-1));\n+  pos_type p = 0;\n+\n+  // seekpos\n+  p = in.pubseekpos(0, ios_base::in);\n+  VERIFY( p == bad );\n+\n+  p = in.pubseekpos(0, ios_base::out); \n+  if (pass)\n+    VERIFY( p != bad );\n+\n+  p = in.pubseekpos(0); \n+  if (pass)\n+    VERIFY( p != bad );\n+}\n+\n+const char name_01[] = \"filebuf_virtuals-1.tst\"; // file with data in it\n+const char name_03[] = \"filebuf_members-1.tst\"; // empty file\n+\n+int main() \n+{\n+  using namespace std;\n+\n+  filebuf out1;\n+  out1.open(name_01, ios_base::out);\n+  filebuf out2;\n+  filebuf out3;\n+  out3.open(name_03, ios_base::out);\n+  test02(out1, true);\n+  test02(out2, false);\n+  test02(out3, true);\n+  return 0;\n+}"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-1io.tst", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1io.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1io.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1io.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "previous_filename": "libstdc++-v3/testsuite/data/seekoff-1.tst"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-1out.tst", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1out.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1out.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-1out.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "previous_filename": "libstdc++-v3/testsuite/data/seekoff-2.tst"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-2io.tst", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2io.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2io.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2io.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "previous_filename": "libstdc++-v3/testsuite/data/seekpos-1.tst"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff-2out.tst", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2out.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2out.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff-2out.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "previous_filename": "libstdc++-v3/testsuite/data/seekpos-2.tst"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekoff.txt", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekoff.txt?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-1io.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1io.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1io.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1io.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-1out.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1out.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1out.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-1out.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-2io.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2io.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2io.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2io.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos-2out.tst", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2out.tst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2out.tst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos-2out.tst?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}, {"sha": "87e81f677720969277d3eb798576ba1a26429254", "filename": "libstdc++-v3/testsuite/data/seekpos.txt", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d6a09934cc7def8199c104c196cb9bd51cf4711/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fdata%2Fseekpos.txt?ref=7d6a09934cc7def8199c104c196cb9bd51cf4711", "patch": "@@ -0,0 +1,3 @@\n+// 990117 bkoz\n+// test functionality of basic_filebuf for char_type == char\n+// this is a data file for 27filebuf.cc"}]}