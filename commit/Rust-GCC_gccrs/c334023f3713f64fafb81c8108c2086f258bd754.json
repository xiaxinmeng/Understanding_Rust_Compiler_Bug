{"sha": "c334023f3713f64fafb81c8108c2086f258bd754", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzMzNDAyM2YzNzEzZjY0ZmFmYjgxYzgxMDhjMjA4NmYyNThiZDc1NA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-16T13:21:38Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-16T13:21:38Z"}, "message": "tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1): Remove set-only bitmap of new names.\n\n2012-05-16  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1):\n\tRemove set-only bitmap of new names.\n\t(slpeel_tree_peel_loop_to_edge): Likewise.  Do not set\n\tCFG hooks.\n\t* tree-flow.h (ssa_names_to_replace): Remove.\n\t* tree-into-ssa.c (ssa_names_to_replace): Likewise.\n\nFrom-SVN: r187591", "tree": {"sha": "83ab2cd685a4da64ad2e41a9643ad3c31f8e102e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/83ab2cd685a4da64ad2e41a9643ad3c31f8e102e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c334023f3713f64fafb81c8108c2086f258bd754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c334023f3713f64fafb81c8108c2086f258bd754", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c334023f3713f64fafb81c8108c2086f258bd754", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c334023f3713f64fafb81c8108c2086f258bd754/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a952cc068c5df10333be537e9283e1aebc24c55d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a952cc068c5df10333be537e9283e1aebc24c55d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a952cc068c5df10333be537e9283e1aebc24c55d"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "198284fe3ceac1527d7c576d48dc201a3a783b7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c334023f3713f64fafb81c8108c2086f258bd754", "patch": "@@ -1,3 +1,12 @@\n+2012-05-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-vect-loop-manip.c (slpeel_update_phi_nodes_for_guard1):\n+\tRemove set-only bitmap of new names.\n+\t(slpeel_tree_peel_loop_to_edge): Likewise.  Do not set\n+\tCFG hooks.\n+\t* tree-flow.h (ssa_names_to_replace): Remove.\n+\t* tree-into-ssa.c (ssa_names_to_replace): Likewise.\n+\n 2012-05-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/53364"}, {"sha": "ddc169abe19016de326238624bdeae62ab7b9e8a", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=c334023f3713f64fafb81c8108c2086f258bd754", "patch": "@@ -576,7 +576,6 @@ tree create_new_def_for (tree, gimple, def_operand_p);\n bool need_ssa_update_p (struct function *);\n bool name_mappings_registered_p (void);\n bool name_registered_for_update_p (tree);\n-bitmap ssa_names_to_replace (void);\n void release_ssa_name_after_update_ssa (tree);\n void compute_global_livein (bitmap, bitmap);\n void mark_sym_for_renaming (tree);"}, {"sha": "170d8d023111a645312abd65c56226b80b21d1c2", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=c334023f3713f64fafb81c8108c2086f258bd754", "patch": "@@ -3053,26 +3053,6 @@ name_registered_for_update_p (tree n ATTRIBUTE_UNUSED)\n }\n \n \n-/* Return the set of all the SSA names marked to be replaced.  */\n-\n-bitmap\n-ssa_names_to_replace (void)\n-{\n-  unsigned i = 0;\n-  bitmap ret;\n-  sbitmap_iterator sbi;\n-\n-  gcc_assert (update_ssa_initialized_fn == NULL\n-\t      || update_ssa_initialized_fn == cfun);\n-\n-  ret = BITMAP_ALLOC (NULL);\n-  EXECUTE_IF_SET_IN_SBITMAP (old_ssa_names, 0, i, sbi)\n-    bitmap_set_bit (ret, i);\n-\n-  return ret;\n-}\n-\n-\n /* Mark NAME to be released after update_ssa has finished.  */\n \n void"}, {"sha": "f0bb2416cbf486a18e2193f89966a4a65658d231", "filename": "gcc/tree-vect-loop-manip.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-vect-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c334023f3713f64fafb81c8108c2086f258bd754/gcc%2Ftree-vect-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop-manip.c?ref=c334023f3713f64fafb81c8108c2086f258bd754", "patch": "@@ -489,8 +489,7 @@ LOOP->  loop1\n \n static void\n slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n-                                    bool is_new_loop, basic_block *new_exit_bb,\n-                                    bitmap *defs)\n+                                    bool is_new_loop, basic_block *new_exit_bb)\n {\n   gimple orig_phi, new_phi;\n   gimple update_phi, update_phi2;\n@@ -586,7 +585,6 @@ slpeel_update_phi_nodes_for_guard1 (edge guard_edge, struct loop *loop,\n       gcc_assert (get_current_def (current_new_name) == NULL_TREE);\n \n       set_current_def (current_new_name, PHI_RESULT (new_phi));\n-      bitmap_set_bit (*defs, SSA_NAME_VERSION (current_new_name));\n     }\n }\n \n@@ -1159,7 +1157,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n   struct loop *new_loop = NULL, *first_loop, *second_loop;\n   edge skip_e;\n   tree pre_condition = NULL_TREE;\n-  bitmap definitions;\n   basic_block bb_before_second_loop, bb_after_second_loop;\n   basic_block bb_before_first_loop;\n   basic_block bb_between_loops;\n@@ -1172,12 +1169,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n   if (!slpeel_can_duplicate_loop_p (loop, e))\n     return NULL;\n \n-  /* We have to initialize cfg_hooks. Then, when calling\n-   cfg_hooks->split_edge, the function tree_split_edge\n-   is actually called and, when calling cfg_hooks->duplicate_block,\n-   the function tree_duplicate_bb is called.  */\n-  gimple_register_cfg_hooks ();\n-\n   /* If the loop has a virtual PHI, but exit bb doesn't, create a virtual PHI\n      in the exit bb and rename all the uses after the loop.  This simplifies\n      the *guard[12] routines, which assume loop closed SSA form for all PHIs\n@@ -1259,7 +1250,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n       second_loop = loop;\n     }\n \n-  definitions = ssa_names_to_replace ();\n   slpeel_update_phis_for_duplicate_loop (loop, new_loop, e == exit_e);\n   rename_variables_in_loop (new_loop);\n \n@@ -1397,7 +1387,7 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n                                   bb_before_second_loop, bb_before_first_loop);\n   slpeel_update_phi_nodes_for_guard1 (skip_e, first_loop,\n \t\t\t\t      first_loop == new_loop,\n-\t\t\t\t      &new_exit_bb, &definitions);\n+\t\t\t\t      &new_exit_bb);\n \n \n   /* 3. Add the guard that controls whether the second loop is executed.\n@@ -1441,7 +1431,6 @@ slpeel_tree_peel_loop_to_edge (struct loop *loop,\n   if (update_first_loop_count)\n     slpeel_make_loop_iterate_ntimes (first_loop, *first_niters);\n \n-  BITMAP_FREE (definitions);\n   delete_update_ssa ();\n \n   adjust_vec_debug_stmts ();"}]}