{"sha": "f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFhNjgxYTE3NGNkZmI4MmU2MmMyNDZkNmY0YWRkOWEyNWZjMmU0Mw==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2020-02-24T06:25:45Z"}, "committer": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2020-02-24T06:25:45Z"}, "message": "PR47785: Add support for handling Xassembler/Wa options with LTO.\n\n2020-02-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n\t    Kugan Vivekandarajah  <kugan.vivekanandarajah@linaro.org>\n\n\tPR driver/47785\n\t* gcc.c (putenv_COLLECT_AS_OPTIONS): New function.\n\t(driver::main): Call putenv_COLLECT_AS_OPTIONS.\n\t* opts-common.c (parse_options_from_collect_gcc_options): New function.\n\t(prepend_xassembler_to_collect_as_options): Likewise.\n\t* opts.h (parse_options_from_collect_gcc_options): Declare prototype.\n\t(prepend_xassembler_to_collect_as_options): Likewise.\n\t* lto-opts.c (lto_write_options): Stream assembler options\n\tin COLLECT_AS_OPTIONS.\n\t* lto-wrapper.c (xassembler_options_error): New static variable.\n\t(get_options_from_collect_gcc_options): Move parsing options code to\n\tparse_options_from_collect_gcc_options and call it.\n\t(merge_and_complain): Validate -Xassembler options.\n\t(append_compiler_options): Handle OPT_Xassembler.\n\t(run_gcc): Append command line -Xassembler options to\n\tcollect_gcc_options.\n\t* doc/invoke.texi: Add documentation about using Xassembler\n\toptions with LTO.\n\ntestsuite/\n\t* gcc.target/arm/pr78353-1.c: New test.\n\t* gcc.target/arm/pr78353-2.c: Likewise.", "tree": {"sha": "8c6d66f99473e10c0265b47eec8831eacc05392b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c6d66f99473e10c0265b47eec8831eacc05392b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/comments", "author": null, "committer": null, "parents": [{"sha": "9069e9484cec2ff981c87c75b226ad738847ca07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9069e9484cec2ff981c87c75b226ad738847ca07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9069e9484cec2ff981c87c75b226ad738847ca07"}], "stats": {"total": 262, "additions": 230, "deletions": 32}, "files": [{"sha": "b5fc309ce8402fd378255614d8c35bb4b4a4b65e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -1,3 +1,25 @@\n+2020-02-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\t    Kugan Vivekandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\tPR driver/47785\n+\t* gcc.c (putenv_COLLECT_AS_OPTIONS): New function.\n+\t(driver::main): Call putenv_COLLECT_AS_OPTIONS.\n+\t* opts-common.c (parse_options_from_collect_gcc_options): New function.\n+\t(prepend_xassembler_to_collect_as_options): Likewise.\n+\t* opts.h (parse_options_from_collect_gcc_options): Declare prototype.\n+\t(prepend_xassembler_to_collect_as_options): Likewise.\n+\t* lto-opts.c (lto_write_options): Stream assembler options\n+\tin COLLECT_AS_OPTIONS.\n+\t* lto-wrapper.c (xassembler_options_error): New static variable.\n+\t(get_options_from_collect_gcc_options): Move parsing options code to\n+\tparse_options_from_collect_gcc_options and call it.\n+\t(merge_and_complain): Validate -Xassembler options.\n+\t(append_compiler_options): Handle OPT_Xassembler.\n+\t(run_gcc): Append command line -Xassembler options to\n+\tcollect_gcc_options.\n+\t* doc/invoke.texi: Add documentation about using Xassembler\n+\toptions with LTO.\n+\n 2020-02-24  Kito Cheng  <kito.cheng@sifive.com>\n \n \t* config/riscv/riscv.c (riscv_emit_float_compare): Change the code gen"}, {"sha": "d4fe9a4d9d4ea3382cc186ea7d3c5aa84cf4a01a", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -11159,6 +11159,12 @@ conflicting translation units.  Specifically\n precedence; and for example @option{-ffp-contract=off} takes precedence\n over @option{-ffp-contract=fast}.  You can override them at link time.\n \n+When you need to pass options to the assembler via @option{-Wa} or\n+@option{-Xassembler} make sure to either compile such translation\n+units with @option{-fno-lto} or consistently use the same assembler\n+options on all translation units.  You can alternatively also\n+specify assembler options at LTO link time.\n+\n To enable debug info generation you need to supply @option{-g} at\n compile time.  If any of the input files at link time were built\n with debug info generation enabled the link will enable debug info"}, {"sha": "9f790db0daf407f3b095cbb8ade31e762b87ef3c", "filename": "gcc/gcc.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -5242,6 +5242,34 @@ do_specs_vec (vec<char_p> vec)\n     }\n }\n \n+/* Add options passed via -Xassembler or -Wa to COLLECT_AS_OPTIONS.  */\n+\n+static void\n+putenv_COLLECT_AS_OPTIONS (vec<char_p> vec)\n+{\n+  if (vec.is_empty ())\n+     return;\n+\n+  obstack_init (&collect_obstack);\n+  obstack_grow (&collect_obstack, \"COLLECT_AS_OPTIONS=\",\n+\t\tstrlen (\"COLLECT_AS_OPTIONS=\"));\n+\n+  char *opt;\n+  unsigned ix;\n+\n+  FOR_EACH_VEC_ELT (vec, ix, opt)\n+    {\n+      obstack_1grow (&collect_obstack, '\\'');\n+      obstack_grow (&collect_obstack, opt, strlen (opt));\n+      obstack_1grow (&collect_obstack, '\\'');\n+      if (ix < vec.length () - 1)\n+\tobstack_1grow(&collect_obstack, ' ');\n+    }\n+\n+  obstack_1grow (&collect_obstack, '\\0');\n+  xputenv (XOBFINISH (&collect_obstack, char *));\n+}\n+\n /* Process the sub-spec SPEC as a portion of a larger spec.\n    This is like processing a whole spec except that we do\n    not initialize at the beginning and we do not supply a\n@@ -7363,6 +7391,7 @@ driver::main (int argc, char **argv)\n   global_initializations ();\n   build_multilib_strings ();\n   set_up_specs ();\n+  putenv_COLLECT_AS_OPTIONS (assembler_options);\n   putenv_COLLECT_GCC (argv[0]);\n   maybe_putenv_COLLECT_LTO_WRAPPER ();\n   maybe_putenv_OFFLOAD_TARGETS ();"}, {"sha": "87e916a274174abc3c00ae7eaa9e7548a1b15e9a", "filename": "gcc/lto-opts.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Flto-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Flto-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-opts.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -163,6 +163,12 @@ lto_write_options (void)\n \tappend_to_collect_gcc_options (&temporary_obstack, &first_p,\n \t\t\t\t       option->canonical_option[j]);\n     }\n+\n+  const char *collect_as_options = getenv (\"COLLECT_AS_OPTIONS\");\n+  if (collect_as_options)\n+    prepend_xassembler_to_collect_as_options (collect_as_options,\n+\t\t\t\t\t      &temporary_obstack);\n+\n   obstack_grow (&temporary_obstack, \"\\0\", 1);\n   args = XOBFINISH (&temporary_obstack, char *);\n   lto_write_data (args, strlen (args) + 1);"}, {"sha": "6e3f294257e673cbd0eeb441f8df1f697d697aea", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 71, "deletions": 32, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -73,6 +73,7 @@ static char *offload_objects_file_name;\n static char *makefile;\n static unsigned int num_deb_objs;\n static const char **early_debug_object_names;\n+static bool xassembler_options_error = false;\n \n const char tool_name[] = \"lto-wrapper\";\n \n@@ -137,42 +138,14 @@ get_options_from_collect_gcc_options (const char *collect_gcc,\n \t\t\t\t      unsigned int *decoded_options_count)\n {\n   struct obstack argv_obstack;\n-  char *argv_storage;\n   const char **argv;\n-  int j, k, argc;\n+  int argc;\n \n-  argv_storage = xstrdup (collect_gcc_options);\n   obstack_init (&argv_obstack);\n   obstack_ptr_grow (&argv_obstack, collect_gcc);\n \n-  for (j = 0, k = 0; argv_storage[j] != '\\0'; ++j)\n-    {\n-      if (argv_storage[j] == '\\'')\n-\t{\n-\t  obstack_ptr_grow (&argv_obstack, &argv_storage[k]);\n-\t  ++j;\n-\t  do\n-\t    {\n-\t      if (argv_storage[j] == '\\0')\n-\t\tfatal_error (input_location,\n-\t\t\t     \"malformed %<COLLECT_GCC_OPTIONS%>\");\n-\t      else if (strncmp (&argv_storage[j], \"'\\\\''\", 4) == 0)\n-\t\t{\n-\t\t  argv_storage[k++] = '\\'';\n-\t\t  j += 4;\n-\t\t}\n-\t      else if (argv_storage[j] == '\\'')\n-\t\tbreak;\n-\t      else\n-\t\targv_storage[k++] = argv_storage[j++];\n-\t    }\n-\t  while (1);\n-\t  argv_storage[k++] = '\\0';\n-\t}\n-    }\n-\n-  obstack_ptr_grow (&argv_obstack, NULL);\n-  argc = obstack_object_size (&argv_obstack) / sizeof (void *) - 1;\n+  parse_options_from_collect_gcc_options (collect_gcc_options,\n+\t\t\t\t\t  &argv_obstack, &argc);\n   argv = XOBFINISH (&argv_obstack, const char **);\n \n   decode_cmdline_options_to_array (argc, (const char **)argv, CL_DRIVER,\n@@ -512,6 +485,45 @@ merge_and_complain (struct cl_decoded_option **decoded_options,\n       }\n    else\n      j++;\n+\n+  if (!xassembler_options_error)\n+    for (i = j = 0; ; i++, j++)\n+      {\n+\tfor (; i < *decoded_options_count; i++)\n+\t  if ((*decoded_options)[i].opt_index == OPT_Xassembler)\n+\t    break;\n+\n+\tfor (; j < fdecoded_options_count; j++)\n+\t  if (fdecoded_options[j].opt_index == OPT_Xassembler)\n+\t    break;\n+\n+\tif (i == *decoded_options_count && j == fdecoded_options_count)\n+\t  break;\n+\telse if (i < *decoded_options_count && j == fdecoded_options_count)\n+\t  {\n+\t    warning (0, \"Extra option to -Xassembler: %s,\"\n+\t\t     \" dropping all -Xassembler and -Wa options.\",\n+\t\t     (*decoded_options)[i].arg);\n+\t    xassembler_options_error = true;\n+\t    break;\n+\t  }\n+\telse if (i == *decoded_options_count && j < fdecoded_options_count)\n+\t  {\n+\t    warning (0, \"Extra option to -Xassembler: %s,\"\n+\t\t     \" dropping all -Xassembler and -Wa options.\",\n+\t\t     fdecoded_options[j].arg);\n+\t    xassembler_options_error = true;\n+\t    break;\n+\t  }\n+\telse if (strcmp ((*decoded_options)[i].arg, fdecoded_options[j].arg))\n+\t  {\n+\t    warning (0, \"Options to Xassembler do not match: %s, %s,\"\n+\t\t     \" dropping all -Xassembler and -Wa options.\",\n+\t\t     (*decoded_options)[i].arg, fdecoded_options[j].arg);\n+\t    xassembler_options_error = true;\n+\t    break;\n+\t  }\n+      }\n }\n \n /* Auxiliary function that frees elements of PTR and PTR itself.\n@@ -626,6 +638,13 @@ append_compiler_options (obstack *argv_obstack, struct cl_decoded_option *opts,\n \tcase OPT_Os:\n \t  break;\n \n+\tcase OPT_Xassembler:\n+\t  /* When we detected a mismatch in assembler options between\n+\t     the input TU's fall back to previous behavior of ignoring them.  */\n+\t  if (xassembler_options_error)\n+\t    continue;\n+\t  break;\n+\n \tdefault:\n \t  if (!(cl_options[option->opt_index].flags & CL_TARGET))\n \t    continue;\n@@ -1251,7 +1270,8 @@ run_gcc (unsigned argc, char *argv[])\n   const char **argv_ptr;\n   char *list_option_full = NULL;\n   const char *linker_output = NULL;\n-  const char *collect_gcc, *collect_gcc_options;\n+  const char *collect_gcc;\n+  char *collect_gcc_options;\n   int parallel = 0;\n   int jobserver = 0;\n   int auto_parallel = 0;\n@@ -1281,6 +1301,25 @@ run_gcc (unsigned argc, char *argv[])\n   if (!collect_gcc_options)\n     fatal_error (input_location,\n \t\t \"environment variable %<COLLECT_GCC_OPTIONS%> must be set\");\n+\n+  char *collect_as_options = getenv (\"COLLECT_AS_OPTIONS\");\n+\n+  /* Prepend -Xassembler to each option, and append the string\n+     to collect_gcc_options.  */\n+  if (collect_as_options)\n+    {\n+      obstack temporary_obstack;\n+      obstack_init (&temporary_obstack);\n+\n+      prepend_xassembler_to_collect_as_options (collect_as_options,\n+\t\t\t\t\t\t&temporary_obstack);\n+      obstack_1grow (&temporary_obstack, '\\0');\n+\n+      char *xassembler_opts_string\n+\t= XOBFINISH (&temporary_obstack, char *);\n+      strcat (collect_gcc_options, xassembler_opts_string);\n+    }\n+\n   get_options_from_collect_gcc_options (collect_gcc, collect_gcc_options,\n \t\t\t\t\t&decoded_options,\n \t\t\t\t\t&decoded_options_count);"}, {"sha": "de9510abd64faa84f220fb29e526b87375364652", "filename": "gcc/opts-common.c", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fopts-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fopts-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts-common.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -1739,3 +1739,69 @@ control_warning_option (unsigned int opt_index, int kind, const char *arg,\n \t}\n     }\n }\n+\n+/* Parse options in COLLECT_GCC_OPTIONS and push them on ARGV_OBSTACK.\n+   Store number of arguments into ARGC_P.  */\n+\n+void\n+parse_options_from_collect_gcc_options (const char *collect_gcc_options,\n+\t\t\t\t\tobstack *argv_obstack,\n+\t\t\t\t\tint *argc_p)\n+{\n+  char *argv_storage = xstrdup (collect_gcc_options);\n+  int j, k;\n+\n+  for (j = 0, k = 0; argv_storage[j] != '\\0'; ++j)\n+    {\n+      if (argv_storage[j] == '\\'')\n+\t{\n+\t  obstack_ptr_grow (argv_obstack, &argv_storage[k]);\n+\t  ++j;\n+\t  do\n+\t    {\n+\t      if (argv_storage[j] == '\\0')\n+\t\tfatal_error (input_location,\n+\t\t\t     \"malformed %<COLLECT_GCC_OPTIONS%>\");\n+\t      else if (strncmp (&argv_storage[j], \"'\\\\''\", 4) == 0)\n+\t\t{\n+\t\t  argv_storage[k++] = '\\'';\n+\t\t  j += 4;\n+\t\t}\n+\t      else if (argv_storage[j] == '\\'')\n+\t\tbreak;\n+\t      else\n+\t\targv_storage[k++] = argv_storage[j++];\n+\t    }\n+\t  while (1);\n+\t  argv_storage[k++] = '\\0';\n+\t}\n+    }\n+\n+  obstack_ptr_grow (argv_obstack, NULL);\n+  *argc_p = obstack_object_size (argv_obstack) / sizeof (void *) - 1;\n+}\n+\n+/* Prepend -Xassembler for each option in COLLECT_AS_OPTIONS,\n+   and push on O.  */\n+\n+void prepend_xassembler_to_collect_as_options (const char *collect_as_options,\n+\t\t\t\t\t       obstack *o)\n+{\n+  obstack opts_obstack;\n+  int opts_count;\n+\n+  obstack_init (&opts_obstack);\n+  parse_options_from_collect_gcc_options (collect_as_options,\n+\t\t\t\t\t  &opts_obstack, &opts_count);\n+  const char **assembler_opts = XOBFINISH (&opts_obstack, const char **);\n+\n+  for (int i = 0; i < opts_count; i++)\n+    {\n+      obstack_grow (o, \" '-Xassembler' \",\n+\t\t    strlen (\" '-Xassembler' \"));\n+      const char *opt = assembler_opts[i];\n+      obstack_1grow (o, '\\'');\n+      obstack_grow (o, opt, strlen (opt));\n+      obstack_1grow (o, '\\'');\n+    }\n+}"}, {"sha": "8f594b46e330b9ac5497035b93f19a39e2d4928c", "filename": "gcc/opts.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -460,6 +460,11 @@ extern bool parse_and_check_align_values (const char *flag,\n \t\t\t\t\t  bool report_error,\n \t\t\t\t\t  location_t loc);\n \n+extern void parse_options_from_collect_gcc_options (const char *, obstack *,\n+\t\t\t\t\t\t    int *);\n+\n+extern void prepend_xassembler_to_collect_as_options (const char *, obstack *);\n+\n /* Set OPTION in OPTS to VALUE if the option is not set in OPTS_SET.  */\n \n #define SET_OPTION_IF_UNSET(OPTS, OPTS_SET, OPTION, VALUE) \\"}, {"sha": "13c1a132cc1f0c679f83b201bd2be4d29b2b26de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -1,3 +1,11 @@\n+2020-02-24  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\t    Kugan Vivekandarajah  <kugan.vivekanandarajah@linaro.org>\n+\n+\tPR driver/47785\n+\tPR lto/78353\n+\t* gcc.target/arm/pr78353-1.c: New test.\n+\t* gcc.target/arm/pr78353-2.c: Likewise.\n+\n 2020-02-23  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/93890"}, {"sha": "aec0fb0cbfdb891fe30462267209061a051a37dd", "filename": "gcc/testsuite/gcc.target/arm/pr78353-1.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-1.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do link }  */\n+/* { dg-options \"-march=armv7-a -mthumb -O2 -flto -Wa,-mimplicit-it=always\" }  */\n+\n+int main(int x)\n+{\n+  asm(\"teq %0, #0; addne %0, %0, #1\" : \"=r\" (x));\n+  return x;\n+}"}, {"sha": "18a90e8834e055f15753dced5cfa1caf49a009ad", "filename": "gcc/testsuite/gcc.target/arm/pr78353-2.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1a681a174cdfb82e62c246d6f4add9a25fc2e43/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpr78353-2.c?ref=f1a681a174cdfb82e62c246d6f4add9a25fc2e43", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do link }  */\n+/* { dg-options \"-march=armv7-a -mthumb -O2 -flto -Wa,-mimplicit-it=always,-mthumb\" }  */\n+\n+int main(int x)\n+{\n+  asm(\"teq %0, #0; addne %0, %0, #1\" : \"=r\" (x));\n+  return x;\n+}\n+"}]}