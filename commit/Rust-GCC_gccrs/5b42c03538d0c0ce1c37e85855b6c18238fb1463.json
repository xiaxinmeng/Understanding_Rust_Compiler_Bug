{"sha": "5b42c03538d0c0ce1c37e85855b6c18238fb1463", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI0MmMwMzUzOGQwYzBjZTFjMzdlODU4NTViNmMxODIzOGZiMTQ2Mw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T13:59:48Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-10-12T13:59:48Z"}, "message": "[multiple changes]\n\n2016-10-12  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb Add new usage for Elist29 and Node35.\n\t(Anonymous_Designated_Type): New routine.\n\t(Anonymous_Master): Removed.\n\t(Anonymous_Masters): New routine.\n\t(Set_Anonymous_Designated_Type): New routine.\n\t(Set_Anonymous_Master): Removed.\n\t(Set_Anonymous_Masters): New routine.\n\t(Write_Field29_Name): Add output for Anonymous_Masters.\n\t(Write_Field35_Name): Remove the output for Anonymous_Master. Add\n\toutput for Anonymous_Designated_Type.\n\t* einfo.ads Remove attribute Anonymous_Master along with\n\tusage in entities. Add attributes Anonymous_Designated_Type\n\tand Anonymous_Masters along with usage in entities.\n\t(Anonymous_Designated_Type): New routine along with pragma Inline.\n\t(Anonymous_Master): Removed along with pragma Inline.\n\t(Anonymous_Masters): New routine along with pragma Inline.\n\t(Set_Anonymous_Designated_Type): New routine along with pragma Inline.\n\t(Set_Anonymous_Master): Removed along with pragma Inline.\n\t(Set_Anonymous_Masters): New routine along with pragma Inline.\n\t* exp_ch7.adb (Build_Anonymous_Master): Reuse an anonymous master\n\tdefined in the same unit if it services the same designated\n\ttype, otherwise create a new one.\n\t(Create_Anonymous_Master): Reimplemented.\n\t(Current_Anonymous_Master): New routine.\n\t(In_Subtree): Removed.\n\n2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Dynamic_Predicate):\n\tCheck properly whether there is an explicit assertion policy\n\tfor predicate checking, even in the presence of a general Ignore\n\tassertion policy.\n\n2016-10-12  Steve Baird  <baird@adacore.com>\n\n\t* sem.adb (Walk_Library_Items): Cope with ignored ghost units.\n\nFrom-SVN: r241049", "tree": {"sha": "35774e6c6f3c60d8922e4d405268a2bb5d401b33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35774e6c6f3c60d8922e4d405268a2bb5d401b33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b42c03538d0c0ce1c37e85855b6c18238fb1463", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b42c03538d0c0ce1c37e85855b6c18238fb1463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b42c03538d0c0ce1c37e85855b6c18238fb1463", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b42c03538d0c0ce1c37e85855b6c18238fb1463/comments", "author": null, "committer": null, "parents": [{"sha": "d89ce4324c613e79d9e4855a284c809773cbc30f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d89ce4324c613e79d9e4855a284c809773cbc30f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d89ce4324c613e79d9e4855a284c809773cbc30f"}], "stats": {"total": 331, "additions": 207, "deletions": 124}, "files": [{"sha": "d47f3d1cfe247381ffc2e1dc19e7e4ca16e2b37a", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -1,3 +1,42 @@\n+2016-10-12  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb Add new usage for Elist29 and Node35.\n+\t(Anonymous_Designated_Type): New routine.\n+\t(Anonymous_Master): Removed.\n+\t(Anonymous_Masters): New routine.\n+\t(Set_Anonymous_Designated_Type): New routine.\n+\t(Set_Anonymous_Master): Removed.\n+\t(Set_Anonymous_Masters): New routine.\n+\t(Write_Field29_Name): Add output for Anonymous_Masters.\n+\t(Write_Field35_Name): Remove the output for Anonymous_Master. Add\n+\toutput for Anonymous_Designated_Type.\n+\t* einfo.ads Remove attribute Anonymous_Master along with\n+\tusage in entities. Add attributes Anonymous_Designated_Type\n+\tand Anonymous_Masters along with usage in entities.\n+\t(Anonymous_Designated_Type): New routine along with pragma Inline.\n+\t(Anonymous_Master): Removed along with pragma Inline.\n+\t(Anonymous_Masters): New routine along with pragma Inline.\n+\t(Set_Anonymous_Designated_Type): New routine along with pragma Inline.\n+\t(Set_Anonymous_Master): Removed along with pragma Inline.\n+\t(Set_Anonymous_Masters): New routine along with pragma Inline.\n+\t* exp_ch7.adb (Build_Anonymous_Master): Reuse an anonymous master\n+\tdefined in the same unit if it services the same designated\n+\ttype, otherwise create a new one.\n+\t(Create_Anonymous_Master): Reimplemented.\n+\t(Current_Anonymous_Master): New routine.\n+\t(In_Subtree): Removed.\n+\n+2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Dynamic_Predicate):\n+\tCheck properly whether there is an explicit assertion policy\n+\tfor predicate checking, even in the presence of a general Ignore\n+\tassertion policy.\n+\n+2016-10-12  Steve Baird  <baird@adacore.com>\n+\n+\t* sem.adb (Walk_Library_Items): Cope with ignored ghost units.\n+\n 2016-10-12  Ed Schonberg  <schonberg@adacore.com>\n \n \t* lib-writ.adb (Write_ALI): Removal of unused file entries from"}, {"sha": "83eddf3ee06d43450a62cd0cb8da18646ceef669", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -244,6 +244,7 @@ package body Einfo is\n    --    Relative_Deadline_Variable      Node28\n    --    Underlying_Record_View          Node28\n \n+   --    Anonymous_Masters               Elist29\n    --    BIP_Initialization_Call         Node29\n    --    Subprograms_For_Type            Elist29\n \n@@ -265,7 +266,7 @@ package body Einfo is\n \n    --    Contract                        Node34\n \n-   --    Anonymous_Master                Node35\n+   --    Anonymous_Designated_Type       Node35\n    --    Import_Pragma                   Node35\n \n    --    Class_Wide_Preconds             List38\n@@ -766,11 +767,20 @@ package body Einfo is\n       return Uint14 (Id);\n    end Alignment;\n \n-   function Anonymous_Master (Id : E) return E is\n+   function Anonymous_Designated_Type (Id : E) return E is\n    begin\n-      pragma Assert (Is_Type (Id));\n+      pragma Assert (Ekind (Id) = E_Variable);\n       return Node35 (Id);\n-   end Anonymous_Master;\n+   end Anonymous_Designated_Type;\n+\n+   function Anonymous_Masters (Id : E) return L is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Function,\n+                                   E_Package,\n+                                   E_Procedure,\n+                                   E_Subprogram_Body));\n+      return Elist29 (Id);\n+   end Anonymous_Masters;\n \n    function Anonymous_Object (Id : E) return E is\n    begin\n@@ -3726,11 +3736,20 @@ package body Einfo is\n       Set_Elist16 (Id, V);\n    end Set_Access_Disp_Table;\n \n-   procedure Set_Anonymous_Master (Id : E; V : E) is\n+   procedure Set_Anonymous_Designated_Type (Id : E; V : E) is\n    begin\n-      pragma Assert (Is_Type (Id));\n+      pragma Assert (Ekind (Id) = E_Variable);\n       Set_Node35 (Id, V);\n-   end Set_Anonymous_Master;\n+   end Set_Anonymous_Designated_Type;\n+\n+   procedure Set_Anonymous_Masters (Id : E; V : L) is\n+   begin\n+      pragma Assert (Ekind_In (Id, E_Function,\n+                                   E_Package,\n+                                   E_Procedure,\n+                                   E_Subprogram_Body));\n+      Set_Elist29 (Id, V);\n+   end Set_Anonymous_Masters;\n \n    procedure Set_Anonymous_Object (Id : E; V : E) is\n    begin\n@@ -10503,6 +10522,12 @@ package body Einfo is\n    procedure Write_Field29_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n+         when E_Function                                   |\n+              E_Package                                    |\n+              E_Procedure                                  |\n+              E_Subprogram_Body                            =>\n+            Write_Str (\"Anonymous_Masters\");\n+\n          when E_Constant                                   |\n               E_Variable                                   =>\n             Write_Str (\"BIP_Initialization_Call\");\n@@ -10650,8 +10675,8 @@ package body Einfo is\n    procedure Write_Field35_Name (Id : Entity_Id) is\n    begin\n       case Ekind (Id) is\n-         when Type_Kind                                    =>\n-            Write_Str (\"Anonymous_Master\");\n+         when E_Variable                                   =>\n+            Write_Str (\"Anonymous_Designated_Type\");\n \n          when Subprogram_Kind                              =>\n             Write_Str (\"Import_Pragma\");"}, {"sha": "9ffc2a8141d129e58e0012b2ce9af188f9b372be", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -438,11 +438,15 @@ package Einfo is\n --       definition clause with an (obsolescent) mod clause is converted\n --       into an attribute definition clause for this purpose.\n \n---    Anonymous_Master (Node35)\n---       Defined in all types. Contains the entity of an anonymous finalization\n---       master which services all anonymous access types associated with the\n---       same designated type within the current semantic unit. The attribute\n---       is set reactively during the expansion of allocators.\n+--    Anonymous_Designated_Type (Node35)\n+--       Defined in variables which represent anonymous finalization masters.\n+--       Contains the designated type which is being services by the master.\n+\n+--    Anonymous_Masters (Elist29)\n+--       Defined in packages, subprograms, and subprogram bodies. Contains a\n+--       list of anonymous finalization masters declared within the related\n+--       unit. The list acts as a mapping between a master and a designated\n+--       type.\n \n --    Anonymous_Object (Node30)\n --       Present in protected and task type entities. Contains the entity of\n@@ -5530,7 +5534,6 @@ package Einfo is\n    --    Derived_Type_Link                   (Node31)\n    --    No_Tagged_Streams_Pragma            (Node32)\n    --    Linker_Section_Pragma               (Node33)\n-   --    Anonymous_Master                    (Node35)\n \n    --    Depends_On_Private                  (Flag14)\n    --    Disable_Controlled                  (Flag253)\n@@ -5982,6 +5985,7 @@ package Einfo is\n    --    Overridden_Operation                (Node26)\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)\n    --    Extra_Formals                       (Node28)\n+   --    Anonymous_Masters                   (Elist29)  (non-generic case only)\n    --    Corresponding_Equality              (Node30)   (implicit /= only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    Corresponding_Procedure             (Node32)   (generate C code only)\n@@ -6207,6 +6211,7 @@ package Einfo is\n    --    Package_Instantiation               (Node26)\n    --    Current_Use_Clause                  (Node27)\n    --    Finalizer                           (Node28)   (non-generic case only)\n+   --    Anonymous_Masters                   (Elist29)  (non-generic case only)\n    --    Contract                            (Node34)\n    --    SPARK_Pragma                        (Node40)\n    --    SPARK_Aux_Pragma                    (Node41)\n@@ -6292,6 +6297,7 @@ package Einfo is\n    --    Overridden_Operation                (Node26)   (never for init proc)\n    --    Wrapped_Entity                      (Node27)   (non-generic case only)\n    --    Extra_Formals                       (Node28)\n+   --    Anonymous_Masters                   (Elist29)  (non-generic case only)\n    --    Static_Initialization               (Node30)   (init_proc only)\n    --    Thunk_Entity                        (Node31)   (thunk case only)\n    --    Corresponding_Function              (Node32)   (generate C code only)\n@@ -6483,6 +6489,7 @@ package Einfo is\n    --    Last_Entity                         (Node20)\n    --    Scope_Depth_Value                   (Uint22)\n    --    Extra_Formals                       (Node28)\n+   --    Anonymous_Masters                   (Elist29)\n    --    Contract                            (Node34)\n    --    SPARK_Pragma                        (Node40)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n@@ -6564,6 +6571,7 @@ package Einfo is\n    --    Encapsulating_State                 (Node32)\n    --    Linker_Section_Pragma               (Node33)\n    --    Contract                            (Node34)\n+   --    Anonymous_Designated_Type           (Node35)\n    --    SPARK_Pragma                        (Node40)\n    --    Has_Alignment_Clause                (Flag46)\n    --    Has_Atomic_Components               (Flag86)\n@@ -6837,7 +6845,8 @@ package Einfo is\n    function Address_Taken                       (Id : E) return B;\n    function Alias                               (Id : E) return E;\n    function Alignment                           (Id : E) return U;\n-   function Anonymous_Master                    (Id : E) return E;\n+   function Anonymous_Designated_Type           (Id : E) return E;\n+   function Anonymous_Masters                   (Id : E) return L;\n    function Anonymous_Object                    (Id : E) return E;\n    function Associated_Entity                   (Id : E) return E;\n    function Associated_Formal_Package           (Id : E) return E;\n@@ -7516,7 +7525,8 @@ package Einfo is\n    procedure Set_Address_Taken                   (Id : E; V : B := True);\n    procedure Set_Alias                           (Id : E; V : E);\n    procedure Set_Alignment                       (Id : E; V : U);\n-   procedure Set_Anonymous_Master                (Id : E; V : E);\n+   procedure Set_Anonymous_Designated_Type       (Id : E; V : E);\n+   procedure Set_Anonymous_Masters               (Id : E; V : L);\n    procedure Set_Anonymous_Object                (Id : E; V : E);\n    procedure Set_Associated_Entity               (Id : E; V : E);\n    procedure Set_Associated_Formal_Package       (Id : E; V : E);\n@@ -8314,7 +8324,8 @@ package Einfo is\n    pragma Inline (Address_Taken);\n    pragma Inline (Alias);\n    pragma Inline (Alignment);\n-   pragma Inline (Anonymous_Master);\n+   pragma Inline (Anonymous_Designated_Type);\n+   pragma Inline (Anonymous_Masters);\n    pragma Inline (Anonymous_Object);\n    pragma Inline (Associated_Entity);\n    pragma Inline (Associated_Formal_Package);\n@@ -8832,7 +8843,8 @@ package Einfo is\n    pragma Inline (Set_Address_Taken);\n    pragma Inline (Set_Alias);\n    pragma Inline (Set_Alignment);\n-   pragma Inline (Set_Anonymous_Master);\n+   pragma Inline (Set_Anonymous_Designated_Type);\n+   pragma Inline (Set_Anonymous_Masters);\n    pragma Inline (Set_Anonymous_Object);\n    pragma Inline (Set_Associated_Entity);\n    pragma Inline (Set_Associated_Formal_Package);"}, {"sha": "bd4695571c8756a5bef492951d0ba57cf65e4d15", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 96, "deletions": 101, "changes": 197, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -541,14 +541,16 @@ package body Exp_Ch7 is\n         (Desig_Typ : Entity_Id;\n          Unit_Id   : Entity_Id;\n          Unit_Decl : Node_Id) return Entity_Id;\n-      --  Create a new anonymous finalization master for access type Ptr_Typ\n-      --  with designated type Desig_Typ. The declaration of the master along\n-      --  with its specialized initialization is inserted in the declarative\n-      --  part of unit Unit_Decl. Unit_Id denotes the entity of Unit_Decl.\n+      --  Create a new anonymous master for access type Ptr_Typ with designated\n+      --  type Desig_Typ. The declaration of the master and its initialization\n+      --  are inserted in the declarative part of unit Unit_Decl. Unit_Id is\n+      --  the entity of Unit_Decl.\n \n-      function In_Subtree (N : Node_Id; Root : Node_Id) return Boolean;\n-      --  Determine whether arbitrary node N appears within the subtree rooted\n-      --  at node Root.\n+      function Current_Anonymous_Master\n+        (Desig_Typ : Entity_Id;\n+         Unit_Id   : Entity_Id) return Entity_Id;\n+      --  Find an anonymous master declared within unit Unit_Id which services\n+      --  designated type Desig_Typ. If there is no such master, return Empty.\n \n       -----------------------------\n       -- Create_Anonymous_Master --\n@@ -559,16 +561,42 @@ package body Exp_Ch7 is\n          Unit_Id   : Entity_Id;\n          Unit_Decl : Node_Id) return Entity_Id\n       is\n-         Loc       : constant Source_Ptr := Sloc (Unit_Id);\n-         Spec_Id   : constant Entity_Id  := Unique_Defining_Entity (Unit_Decl);\n+         Loc : constant Source_Ptr := Sloc (Unit_Id);\n+\n+         All_FMs   : Elist_Id;\n          Decls     : List_Id;\n          FM_Decl   : Node_Id;\n          FM_Id     : Entity_Id;\n          FM_Init   : Node_Id;\n-         Pref      : Character;\n          Unit_Spec : Node_Id;\n \n       begin\n+         --  Generate:\n+         --    <FM_Id> : Finalization_Master;\n+\n+         FM_Id := Make_Temporary (Loc, 'A');\n+\n+         FM_Decl :=\n+           Make_Object_Declaration (Loc,\n+             Defining_Identifier => FM_Id,\n+             Object_Definition   =>\n+               New_Occurrence_Of (RTE (RE_Finalization_Master), Loc));\n+\n+         --  Generate:\n+         --    Set_Base_Pool\n+         --      (<FM_Id>, Global_Pool_Object'Unrestricted_Access);\n+\n+         FM_Init :=\n+           Make_Procedure_Call_Statement (Loc,\n+             Name                   =>\n+               New_Occurrence_Of (RTE (RE_Set_Base_Pool), Loc),\n+             Parameter_Associations => New_List (\n+               New_Occurrence_Of (FM_Id, Loc),\n+               Make_Attribute_Reference (Loc,\n+                 Prefix         =>\n+                   New_Occurrence_Of (RTE (RE_Global_Pool_Object), Loc),\n+                 Attribute_Name => Name_Unrestricted_Access)));\n+\n          --  Find the declarative list of the unit\n \n          if Nkind (Unit_Decl) = N_Package_Declaration then\n@@ -588,8 +616,8 @@ package body Exp_Ch7 is\n \n          --    procedure Comp_Unit_Proc (Param : access Ctrl := new Ctrl);\n \n-         --  There is no suitable place to create the anonymous master as the\n-         --  subprogram is not in a declarative list.\n+         --  There is no suitable place to create the master as the subprogram\n+         --  is not in a declarative list.\n \n          else\n             Decls := Declarations (Unit_Decl);\n@@ -600,100 +628,74 @@ package body Exp_Ch7 is\n             end if;\n          end if;\n \n-         --  Step 1: Anonymous master creation\n-\n-         --  Use a unique prefix in case the same unit requires two anonymous\n-         --  masters, one for the spec (S) and one for the body (B).\n-\n-         if Ekind_In (Unit_Id, E_Function, E_Package, E_Procedure) then\n-            Pref := 'S';\n-         else\n-            Pref := 'B';\n-         end if;\n-\n-         --  The name of the anonymous master has the following format:\n-\n-         --    [BS]scopN__scop1__chars_of_desig_typAM\n-\n-         --  The name utilizes the fully qualified name of the designated type\n-         --  in case two controlled types with the same name are declared in\n-         --  different scopes and both have anonymous access types.\n-\n-         FM_Id :=\n-           Make_Defining_Identifier (Loc,\n-             New_External_Name\n-               (Related_Id => Get_Qualified_Name (Desig_Typ),\n-                Suffix     => \"AM\",\n-                Prefix     => Pref));\n-\n-         --  Associate the anonymous master with the designated type. This\n-         --  ensures that any additional anonymous access types with the same\n-         --  designated type will share the same anonymous master within the\n-         --  same unit.\n-\n-         Set_Anonymous_Master (Desig_Typ, FM_Id);\n+         Prepend_To (Decls, FM_Init);\n+         Prepend_To (Decls, FM_Decl);\n \n-         --  Generate:\n-         --    <FM_Id> : Finalization_Master;\n+         --  Use the scope of the unit when analyzing the declaration of the\n+         --  master and its initialization actions.\n \n-         FM_Decl :=\n-           Make_Object_Declaration (Loc,\n-             Defining_Identifier => FM_Id,\n-             Object_Definition   =>\n-               New_Occurrence_Of (RTE (RE_Finalization_Master), Loc));\n+         Push_Scope (Unit_Id);\n+         Analyze (FM_Decl);\n+         Analyze (FM_Init);\n+         Pop_Scope;\n \n-         --  Step 2: Initialization actions\n+         --  Mark the master as servicing this specific designated type\n \n-         --  Generate:\n-         --    Set_Base_Pool\n-         --      (<FM_Id>, Global_Pool_Object'Unrestricted_Access);\n+         Set_Anonymous_Designated_Type (FM_Id, Desig_Typ);\n \n-         FM_Init :=\n-           Make_Procedure_Call_Statement (Loc,\n-             Name                   =>\n-               New_Occurrence_Of (RTE (RE_Set_Base_Pool), Loc),\n-             Parameter_Associations => New_List (\n-               New_Occurrence_Of (FM_Id, Loc),\n-               Make_Attribute_Reference (Loc,\n-                 Prefix         =>\n-                   New_Occurrence_Of (RTE (RE_Global_Pool_Object), Loc),\n-                 Attribute_Name => Name_Unrestricted_Access)));\n+         --  Include the anonymous master in the list of existing masters which\n+         --  appear in this unit. This effectively creates a mapping between a\n+         --  master and a designated type which in turn allows for the reusal\n+         --  of masters on a per-unit basis.\n \n-         Prepend_To (Decls, FM_Init);\n-         Prepend_To (Decls, FM_Decl);\n+         All_FMs := Anonymous_Masters (Unit_Id);\n \n-         --  Since the anonymous master and all its initialization actions are\n-         --  inserted at top level, use the scope of the unit when analyzing.\n+         if No (All_FMs) then\n+            All_FMs := New_Elmt_List;\n+            Set_Anonymous_Masters (Unit_Id, All_FMs);\n+         end if;\n \n-         Push_Scope (Spec_Id);\n-         Analyze (FM_Decl);\n-         Analyze (FM_Init);\n-         Pop_Scope;\n+         Prepend_Elmt (FM_Id, All_FMs);\n \n          return FM_Id;\n       end Create_Anonymous_Master;\n \n-      ----------------\n-      -- In_Subtree --\n-      ----------------\n+      ------------------------------\n+      -- Current_Anonymous_Master --\n+      ------------------------------\n \n-      function In_Subtree (N : Node_Id; Root : Node_Id) return Boolean is\n-         Par : Node_Id;\n+      function Current_Anonymous_Master\n+        (Desig_Typ : Entity_Id;\n+         Unit_Id   : Entity_Id) return Entity_Id\n+      is\n+         All_FMs : constant Elist_Id := Anonymous_Masters (Unit_Id);\n+         FM_Elmt : Elmt_Id;\n+         FM_Id   : Entity_Id;\n \n       begin\n-         --  Traverse the parent chain until reaching the same root\n+         --  Inspect the list of anonymous masters declared within the unit\n+         --  looking for an existing master which services the same designated\n+         --  type.\n \n-         Par := N;\n-         while Present (Par) loop\n-            if Par = Root then\n-               return True;\n-            end if;\n+         if Present (All_FMs) then\n+            FM_Elmt := First_Elmt (All_FMs);\n+            while Present (FM_Elmt) loop\n+               FM_Id := Node (FM_Elmt);\n \n-            Par := Parent (Par);\n-         end loop;\n+               --  The currect master services the same designated type. As a\n+               --  result the master can be reused and associated with another\n+               --  anonymous access-to-controlled type.\n \n-         return False;\n-      end In_Subtree;\n+               if Anonymous_Designated_Type (FM_Id) = Desig_Typ then\n+                  return FM_Id;\n+               end if;\n+\n+               Next_Elmt (FM_Elmt);\n+            end loop;\n+         end if;\n+\n+         return Empty;\n+      end Current_Anonymous_Master;\n \n       --  Local variables\n \n@@ -714,7 +716,7 @@ package body Exp_Ch7 is\n       end if;\n \n       Unit_Decl := Unit (Cunit (Current_Sem_Unit));\n-      Unit_Id   := Defining_Entity (Unit_Decl);\n+      Unit_Id   := Unique_Defining_Entity (Unit_Decl);\n \n       --  The compilation unit is a package instantiation. In this case the\n       --  anonymous master is associated with the package spec as both the\n@@ -738,21 +740,14 @@ package body Exp_Ch7 is\n          Desig_Typ := Priv_View;\n       end if;\n \n-      FM_Id := Anonymous_Master (Desig_Typ);\n+      --  Determine whether the current semantic unit already has an anonymous\n+      --  master which services the designated type.\n \n-      --  The designated type already has at least one anonymous access type\n-      --  pointing to it within the current unit. Reuse the anonymous master\n-      --  because the designated type is the same.\n+      FM_Id := Current_Anonymous_Master (Desig_Typ, Unit_Id);\n \n-      if Present (FM_Id)\n-        and then In_Subtree (Declaration_Node (FM_Id), Root => Unit_Decl)\n-      then\n-         null;\n+      --  If this is not the case, create a new master\n \n-      --  Otherwise the designated type lacks an anonymous master or it is\n-      --  declared in a different unit. Create a brand new master.\n-\n-      else\n+      if No (FM_Id) then\n          FM_Id := Create_Anonymous_Master (Desig_Typ, Unit_Id, Unit_Decl);\n       end if;\n "}, {"sha": "6e8ab45575e62ce6cd45313227ea0df306b9bd01", "filename": "gcc/ada/sem.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fsem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fsem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem.adb?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -1767,6 +1767,11 @@ package body Sem is\n                pragma Assert (False, \"subunit\");\n                null;\n \n+            when N_Null_Statement =>\n+               pragma Assert (Is_Ignored_Ghost_Node (Original_Node (Item)));\n+               --  Do not call Action for an ignored ghost unit\n+               return;\n+\n             when others =>\n                pragma Assert (False);\n                null;\n@@ -2095,6 +2100,11 @@ package body Sem is\n                   --  happen when the body of a parent depends on some other\n                   --  descendant.\n \n+               when N_Null_Statement =>\n+                  --  Ignore an ignored ghost unit\n+                  pragma Assert (Is_Ignored_Ghost_Node (Original_Node (N)));\n+                  null;\n+\n                when others =>\n                   Par := Scope (Defining_Entity (Unit (CU)));\n "}, {"sha": "545b43da9e45382cf7bcc04bb560da2fdee5baf6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b42c03538d0c0ce1c37e85855b6c18238fb1463/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5b42c03538d0c0ce1c37e85855b6c18238fb1463", "patch": "@@ -19136,15 +19136,17 @@ package body Sem_Prag is\n             --  the rep item chain, for processing when the type is frozen.\n             --  This is accomplished by a call to Rep_Item_Too_Late. We also\n             --  mark the type as having predicates.\n-            --  If the current policy is Ignore mark the subtype accordingly.\n-            --  In the case of predicates we consider them enabled unless an\n-            --  Ignore is specified, to preserve existing warnings.\n+\n+            --  If the current policy for predicate checking is Ignore mark the\n+            --  subtype accordingly. In the case of predicates we consider them\n+            --  enabled unless Ignore is specified (either directly or with a\n+            --  general Assertion_Policy pragma) to preserve existing warnings.\n \n             Set_Has_Predicates (Typ);\n             Set_Predicates_Ignored (Typ,\n               Present (Check_Policy_List)\n                 and then\n-                  Policy_In_Effect (Name_Assertion_Policy) = Name_Ignore);\n+                  Policy_In_Effect (Name_Dynamic_Predicate) = Name_Ignore);\n             Discard := Rep_Item_Too_Late (Typ, N, FOnly => True);\n          end Predicate;\n "}]}