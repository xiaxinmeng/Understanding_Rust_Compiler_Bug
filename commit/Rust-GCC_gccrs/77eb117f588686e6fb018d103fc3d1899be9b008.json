{"sha": "77eb117f588686e6fb018d103fc3d1899be9b008", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdlYjExN2Y1ODg2ODZlNmZiMDE4ZDEwM2ZjM2QxODk5YmU5YjAwOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-08-10T10:18:25Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-08-10T10:18:25Z"}, "message": "tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_DEVICE_TYPE.\n\n\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_DEVICE_TYPE.\n\t(enum omp_clause_device_type_kind): New enum.\n\t(struct tree_omp_clause): Add subcode.device_type_kind.\n\t* tree.h (OMP_CLAUSE_DEVICE_TYPE_KIND): Define.\n\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries\n\tfor device_type clause.\n\t(walk_tree_1): Handle OMP_CLAUSE_DEVICE_TYPE.\n\t* tree-pretty-print.c (dump_omp_clause): Likewise.\nc-family/\n\t* c-pragma.h (enum pragma_omp_clause): Add\n\tPRAGMA_OMP_CLAUSE_DEVICE_TYPE.\nc/\n\t* c-parser.c (c_parser_omp_clause_name): Parse device_type.\n\t(c_parser_omp_clause_device_type): New function.\n\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n\t(c_parser_omp_declare_target): Handle device_type clauses.  Remove\n\tdiagnostics for declare target with clauses nested in clause-less\n\tdeclare target declaration-definition-seq.\n\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_DEVICE_TYPE.\ncp/\n\t* parser.c (cp_parser_omp_clause_name): Parse device_type.\n\t(cp_parser_omp_clause_device_type): New function.\n\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n\t(cp_parser_omp_declare_target): Handle device_type clauses.  Remove\n\tdiagnostics for declare target with clauses nested in clause-less\n\tdeclare target declaration-definition-seq.\n\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_DEVICE_TYPE.\ntestsuite/\n\t* c-c++-common/gomp/declare-target-2.c: Don't expect error for\n\tdeclare target with clauses in between declare target without clauses\n\tand end declare target.\n\t* c-c++-common/gomp/declare-target-4.c: New test.\n\nFrom-SVN: r274252", "tree": {"sha": "9a022bfea1239471ef385682ffd6de3991c16408", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a022bfea1239471ef385682ffd6de3991c16408"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77eb117f588686e6fb018d103fc3d1899be9b008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb117f588686e6fb018d103fc3d1899be9b008", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77eb117f588686e6fb018d103fc3d1899be9b008", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77eb117f588686e6fb018d103fc3d1899be9b008/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b7ed762347ea9e82a3982b57975747de0943eb4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7ed762347ea9e82a3982b57975747de0943eb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7ed762347ea9e82a3982b57975747de0943eb4"}], "stats": {"total": 319, "additions": 306, "deletions": 13}, "files": [{"sha": "4ce2f4ef4e2cb0f9ff2bcc0eb36b59f327231b4a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1,5 +1,14 @@\n 2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* tree-core.h (enum omp_clause_code): Add OMP_CLAUSE_DEVICE_TYPE.\n+\t(enum omp_clause_device_type_kind): New enum.\n+\t(struct tree_omp_clause): Add subcode.device_type_kind.\n+\t* tree.h (OMP_CLAUSE_DEVICE_TYPE_KIND): Define.\n+\t* tree.c (omp_clause_num_ops, omp_clause_code_name): Add entries\n+\tfor device_type clause.\n+\t(walk_tree_1): Handle OMP_CLAUSE_DEVICE_TYPE.\n+\t* tree-pretty-print.c (dump_omp_clause): Likewise.\n+\n \tPR target/91408\n \t* config/i386/mmx.md (usadv8qi): Use register_operand instead of\n \tvector_operand."}, {"sha": "507e536e3cab6c5deec45ab8a6ebb52e7dad1ce1", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1,3 +1,8 @@\n+2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-pragma.h (enum pragma_omp_clause): Add\n+\tPRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n+\n 2019-08-07  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pragma.h (enum pragma_omp_clause): Add"}, {"sha": "e0aa774555a36b947ca3848514d29f97e846b418", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -93,6 +93,7 @@ enum pragma_omp_clause {\n   PRAGMA_OMP_CLAUSE_DEFAULTMAP,\n   PRAGMA_OMP_CLAUSE_DEPEND,\n   PRAGMA_OMP_CLAUSE_DEVICE,\n+  PRAGMA_OMP_CLAUSE_DEVICE_TYPE,\n   PRAGMA_OMP_CLAUSE_DIST_SCHEDULE,\n   PRAGMA_OMP_CLAUSE_FINAL,\n   PRAGMA_OMP_CLAUSE_FIRSTPRIVATE,"}, {"sha": "335801b36979c3af38896fdc5bc38cc79ae53be2", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1,3 +1,14 @@\n+2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-parser.c (c_parser_omp_clause_name): Parse device_type.\n+\t(c_parser_omp_clause_device_type): New function.\n+\t(c_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n+\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n+\t(c_parser_omp_declare_target): Handle device_type clauses.  Remove\n+\tdiagnostics for declare target with clauses nested in clause-less\n+\tdeclare target declaration-definition-seq.\n+\t* c-typeck.c (c_finish_omp_clauses): Handle OMP_CLAUSE_DEVICE_TYPE.\n+\n 2019-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-parser.c (check_no_duplicate_clause): Simplify using"}, {"sha": "81919a89cc66bf15a4766f86ea2d7cebd911c246", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 87, "deletions": 6, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -11720,6 +11720,8 @@ c_parser_omp_clause_name (c_parser *parser)\n \t    result = PRAGMA_OACC_CLAUSE_DEVICEPTR;\n \t  else if (!strcmp (\"device_resident\", p))\n \t    result = PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT;\n+\t  else if (!strcmp (\"device_type\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_DEVICE_TYPE;\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n@@ -14863,6 +14865,50 @@ c_parser_omp_clause_proc_bind (c_parser *parser, tree list)\n   return list;\n }\n \n+/* OpenMP 5.0:\n+   device_type ( host | nohost | any )  */\n+\n+static tree\n+c_parser_omp_clause_device_type (c_parser *parser, tree list)\n+{\n+  location_t clause_loc = c_parser_peek_token (parser)->location;\n+  enum omp_clause_device_type_kind kind;\n+  tree c;\n+\n+  matching_parens parens;\n+  if (!parens.require_open (parser))\n+    return list;\n+\n+  if (c_parser_next_token_is (parser, CPP_NAME))\n+    {\n+      const char *p = IDENTIFIER_POINTER (c_parser_peek_token (parser)->value);\n+      if (strcmp (\"host\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_HOST;\n+      else if (strcmp (\"nohost\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_NOHOST;\n+      else if (strcmp (\"any\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_ANY;\n+      else\n+\tgoto invalid_kind;\n+    }\n+  else\n+    goto invalid_kind;\n+\n+  /* check_no_duplicate_clause (list, OMP_CLAUSE_DEVICE_TYPE,\n+\t\t\t\t\"device_type\");  */\n+  c_parser_consume_token (parser);\n+  parens.skip_until_found_close (parser);\n+  c = build_omp_clause (clause_loc, OMP_CLAUSE_DEVICE_TYPE);\n+  OMP_CLAUSE_DEVICE_TYPE_KIND (c) = kind;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+\n+ invalid_kind:\n+  c_parser_error (parser, \"expected %<host%>, %<nohost%> or %<any%>\");\n+  parens.skip_until_found_close (parser);\n+  return list;\n+}\n+\n /* OpenMP 4.0:\n    to ( variable-list ) */\n \n@@ -15350,6 +15396,10 @@ c_parser_omp_all_clauses (c_parser *parser, omp_clause_mask mask,\n \t  clauses = c_parser_omp_clause_proc_bind (parser, clauses);\n \t  c_name = \"proc_bind\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_DEVICE_TYPE:\n+\t  clauses = c_parser_omp_clause_device_type (parser, clauses);\n+\t  c_name = \"device_type\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_SAFELEN:\n \t  clauses = c_parser_omp_clause_safelen (parser, clauses);\n \t  c_name = \"safelen\";\n@@ -18997,13 +19047,15 @@ c_finish_omp_declare_simd (c_parser *parser, tree fndecl, tree parms,\n \n #define OMP_DECLARE_TARGET_CLAUSE_MASK\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TO)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE_TYPE))\n \n static void\n c_parser_omp_declare_target (c_parser *parser)\n {\n-  location_t loc = c_parser_peek_token (parser)->location;\n   tree clauses = NULL_TREE;\n+  int device_type = 0;\n+  bool only_device_type = true;\n   if (c_parser_next_token_is (parser, CPP_NAME))\n     clauses = c_parser_omp_all_clauses (parser, OMP_DECLARE_TARGET_CLAUSE_MASK,\n \t\t\t\t\t\"#pragma omp declare target\");\n@@ -19020,16 +19072,18 @@ c_parser_omp_declare_target (c_parser *parser)\n       current_omp_declare_target_attribute++;\n       return;\n     }\n-  if (current_omp_declare_target_attribute)\n-    error_at (loc, \"%<#pragma omp declare target%> with clauses in between \"\n-\t\t   \"%<#pragma omp declare target%> without clauses and \"\n-\t\t   \"%<#pragma omp end declare target%>\");\n+  for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEVICE_TYPE)\n+      device_type |= OMP_CLAUSE_DEVICE_TYPE_KIND (c);\n   for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n     {\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEVICE_TYPE)\n+\tcontinue;\n       tree t = OMP_CLAUSE_DECL (c), id;\n       tree at1 = lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (t));\n       tree at2 = lookup_attribute (\"omp declare target link\",\n \t\t\t\t   DECL_ATTRIBUTES (t));\n+      only_device_type = false;\n       if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINK)\n \t{\n \t  id = get_identifier (\"omp declare target link\");\n@@ -19062,7 +19116,34 @@ c_parser_omp_declare_target (c_parser *parser)\n \t\t}\n \t    }\n \t}\n+      if (TREE_CODE (t) != FUNCTION_DECL)\n+\tcontinue;\n+      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_HOST) != 0)\n+\t{\n+\t  tree at3 = lookup_attribute (\"omp declare target host\",\n+\t\t\t\t       DECL_ATTRIBUTES (t));\n+\t  if (at3 == NULL_TREE)\n+\t    {\n+\t      id = get_identifier (\"omp declare target host\");\n+\t      DECL_ATTRIBUTES (t)\n+\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t    }\n+\t}\n+      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_NOHOST) != 0)\n+\t{\n+\t  tree at3 = lookup_attribute (\"omp declare target nohost\",\n+\t\t\t\t       DECL_ATTRIBUTES (t));\n+\t  if (at3 == NULL_TREE)\n+\t    {\n+\t      id = get_identifier (\"omp declare target nohost\");\n+\t      DECL_ATTRIBUTES (t)\n+\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t    }\n+\t}\n     }\n+  if (device_type && only_device_type)\n+    warning_at (OMP_CLAUSE_LOCATION (clauses), 0,\n+\t\t\"directive with only %<device_type%> clauses ignored\");\n }\n \n static void"}, {"sha": "2bbf0e21fb9a1cecf55b820b1ca1324b09827a16", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -14690,6 +14690,7 @@ c_finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_SECTIONS:\n \tcase OMP_CLAUSE_TASKGROUP:\n \tcase OMP_CLAUSE_PROC_BIND:\n+\tcase OMP_CLAUSE_DEVICE_TYPE:\n \tcase OMP_CLAUSE_PRIORITY:\n \tcase OMP_CLAUSE_GRAINSIZE:\n \tcase OMP_CLAUSE_NUM_TASKS:"}, {"sha": "e32582514f70d467ce3608bb4e1c2335a150e4ae", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1,3 +1,14 @@\n+2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* parser.c (cp_parser_omp_clause_name): Parse device_type.\n+\t(cp_parser_omp_clause_device_type): New function.\n+\t(cp_parser_omp_all_clauses): Handle PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n+\t(OMP_DECLARE_TARGET_CLAUSE_MASK): Add PRAGMA_OMP_CLAUSE_DEVICE_TYPE.\n+\t(cp_parser_omp_declare_target): Handle device_type clauses.  Remove\n+\tdiagnostics for declare target with clauses nested in clause-less\n+\tdeclare target declaration-definition-seq.\n+\t* semantics.c (finish_omp_clauses): Handle OMP_CLAUSE_DEVICE_TYPE.\n+\n 2019-08-09  Jakub Jelinek  <jakub@redhat.com>\n \n \t* parser.c (check_no_duplicate_clause): Simplify using"}, {"sha": "b56cc6924f42458ffaedb644a52957906abd15fc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 94, "deletions": 6, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -32510,6 +32510,8 @@ cp_parser_omp_clause_name (cp_parser *parser)\n \t    result = PRAGMA_OACC_CLAUSE_DEVICEPTR;\n \t  else if (!strcmp (\"device_resident\", p))\n \t    result = PRAGMA_OACC_CLAUSE_DEVICE_RESIDENT;\n+\t  else if (!strcmp (\"device_type\", p))\n+\t    result = PRAGMA_OMP_CLAUSE_DEVICE_TYPE;\n \t  else if (!strcmp (\"dist_schedule\", p))\n \t    result = PRAGMA_OMP_CLAUSE_DIST_SCHEDULE;\n \t  break;\n@@ -35321,6 +35323,56 @@ cp_parser_omp_clause_proc_bind (cp_parser *parser, tree list,\n   return list;\n }\n \n+/* OpenMP 5.0:\n+   device_type ( host | nohost | any )  */\n+\n+static tree\n+cp_parser_omp_clause_device_type (cp_parser *parser, tree list,\n+\t\t\t\t  location_t location)\n+{\n+  tree c;\n+  enum omp_clause_device_type_kind kind;\n+\n+  if (!cp_parser_require (parser, CPP_OPEN_PAREN, RT_OPEN_PAREN))\n+    return list;\n+\n+  if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n+    {\n+      tree id = cp_lexer_peek_token (parser->lexer)->u.value;\n+      const char *p = IDENTIFIER_POINTER (id);\n+\n+      if (strcmp (\"host\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_HOST;\n+      else if (strcmp (\"nohost\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_NOHOST;\n+      else if (strcmp (\"any\", p) == 0)\n+\tkind = OMP_CLAUSE_DEVICE_TYPE_ANY;\n+      else\n+\tgoto invalid_kind;\n+    }\n+  else\n+    goto invalid_kind;\n+\n+  cp_lexer_consume_token (parser->lexer);\n+  if (!cp_parser_require (parser, CPP_CLOSE_PAREN, RT_COMMA_CLOSE_PAREN))\n+    goto resync_fail;\n+\n+  c = build_omp_clause (location, OMP_CLAUSE_DEVICE_TYPE);\n+  /* check_no_duplicate_clause (list, OMP_CLAUSE_DEVICE_TYPE, \"device_type\",\n+\t\t\t\tlocation);  */\n+  OMP_CLAUSE_DEVICE_TYPE_KIND (c) = kind;\n+  OMP_CLAUSE_CHAIN (c) = list;\n+  return c;\n+\n+ invalid_kind:\n+  cp_parser_error (parser, \"invalid depend kind\");\n+ resync_fail:\n+  cp_parser_skip_to_closing_parenthesis (parser, /*recovering=*/true,\n+\t\t\t\t\t /*or_comma=*/false,\n+\t\t\t\t\t /*consume_paren=*/true);\n+  return list;\n+}\n+\n /* OpenACC:\n    async [( int-expr )] */\n \n@@ -35849,6 +35901,11 @@ cp_parser_omp_all_clauses (cp_parser *parser, omp_clause_mask mask,\n \t\t\t\t\t\t    token->location);\n \t  c_name = \"proc_bind\";\n \t  break;\n+\tcase PRAGMA_OMP_CLAUSE_DEVICE_TYPE:\n+\t  clauses = cp_parser_omp_clause_device_type (parser, clauses,\n+\t\t\t\t\t\t      token->location);\n+\t  c_name = \"device_type\";\n+\t  break;\n \tcase PRAGMA_OMP_CLAUSE_SAFELEN:\n \t  clauses = cp_parser_omp_clause_safelen (parser, clauses,\n \t\t\t\t\t\t  token->location);\n@@ -39831,12 +39888,15 @@ cp_parser_late_parsing_omp_declare_simd (cp_parser *parser, tree attrs)\n \n #define OMP_DECLARE_TARGET_CLAUSE_MASK\t\t\t\t\\\n \t( (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_TO)\t\t\\\n-\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK))\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_LINK)\t\t\\\n+\t| (OMP_CLAUSE_MASK_1 << PRAGMA_OMP_CLAUSE_DEVICE_TYPE))\n \n static void\n cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n {\n   tree clauses = NULL_TREE;\n+  int device_type = 0;\n+  bool only_device_type = true;\n   if (cp_lexer_next_token_is (parser->lexer, CPP_NAME))\n     clauses\n       = cp_parser_omp_all_clauses (parser, OMP_DECLARE_TARGET_CLAUSE_MASK,\n@@ -39854,17 +39914,18 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n       scope_chain->omp_declare_target_attribute++;\n       return;\n     }\n-  if (scope_chain->omp_declare_target_attribute)\n-    error_at (pragma_tok->location,\n-\t      \"%<#pragma omp declare target%> with clauses in between \"\n-\t      \"%<#pragma omp declare target%> without clauses and \"\n-\t      \"%<#pragma omp end declare target%>\");\n+  for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n+    if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEVICE_TYPE)\n+      device_type |= OMP_CLAUSE_DEVICE_TYPE_KIND (c);\n   for (tree c = clauses; c; c = OMP_CLAUSE_CHAIN (c))\n     {\n+      if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_DEVICE_TYPE)\n+\tcontinue;\n       tree t = OMP_CLAUSE_DECL (c), id;\n       tree at1 = lookup_attribute (\"omp declare target\", DECL_ATTRIBUTES (t));\n       tree at2 = lookup_attribute (\"omp declare target link\",\n \t\t\t\t   DECL_ATTRIBUTES (t));\n+      only_device_type = false;\n       if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_LINK)\n \t{\n \t  id = get_identifier (\"omp declare target link\");\n@@ -39897,7 +39958,34 @@ cp_parser_omp_declare_target (cp_parser *parser, cp_token *pragma_tok)\n \t\t}\n \t    }\n \t}\n+      if (TREE_CODE (t) != FUNCTION_DECL)\n+\tcontinue;\n+      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_HOST) != 0)\n+\t{\n+\t  tree at3 = lookup_attribute (\"omp declare target host\",\n+\t\t\t\t       DECL_ATTRIBUTES (t));\n+\t  if (at3 == NULL_TREE)\n+\t    {\n+\t      id = get_identifier (\"omp declare target host\");\n+\t      DECL_ATTRIBUTES (t)\n+\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t    }\n+\t}\n+      if ((device_type & OMP_CLAUSE_DEVICE_TYPE_NOHOST) != 0)\n+\t{\n+\t  tree at3 = lookup_attribute (\"omp declare target nohost\",\n+\t\t\t\t       DECL_ATTRIBUTES (t));\n+\t  if (at3 == NULL_TREE)\n+\t    {\n+\t      id = get_identifier (\"omp declare target nohost\");\n+\t      DECL_ATTRIBUTES (t)\n+\t\t= tree_cons (id, NULL_TREE, DECL_ATTRIBUTES (t));\n+\t    }\n+\t}\n     }\n+  if (device_type && only_device_type)\n+    warning_at (OMP_CLAUSE_LOCATION (clauses), 0,\n+\t\t\"directive with only %<device_type%> clauses ignored\");\n }\n \n static void"}, {"sha": "7ac1ba058e5591bad336cd2ec09bbd18128b4e33", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -7578,6 +7578,7 @@ finish_omp_clauses (tree clauses, enum c_omp_region_type ort)\n \tcase OMP_CLAUSE_SECTIONS:\n \tcase OMP_CLAUSE_TASKGROUP:\n \tcase OMP_CLAUSE_PROC_BIND:\n+\tcase OMP_CLAUSE_DEVICE_TYPE:\n \tcase OMP_CLAUSE_NOGROUP:\n \tcase OMP_CLAUSE_THREADS:\n \tcase OMP_CLAUSE_SIMD:"}, {"sha": "17387f6a7bcb5443cb6f79a3ae56623dc1297aa0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1,5 +1,10 @@\n 2019-08-10  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/gomp/declare-target-2.c: Don't expect error for\n+\tdeclare target with clauses in between declare target without clauses\n+\tand end declare target.\n+\t* c-c++-common/gomp/declare-target-4.c: New test.\n+\n \tPR target/91408\n \t* gcc.target/i386/pr91408.c: New test.\n "}, {"sha": "c7a325c615512d90d8c57884672ff7cba73b394c", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-2.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -3,7 +3,7 @@\n \n extern int a;\n #pragma omp declare target\n-#pragma omp declare target to (a)\t\t/* { dg-error \"with clauses in between\" } */\n+#pragma omp declare target to (a)\n #pragma omp end declare target\n int b;\n #pragma omp declare target to (b) link (b)\t/* { dg-error \"appears more than once on the same .declare target. directive\" } */"}, {"sha": "887a815e84a4b5cc2133f268fff7eaf7bd117644", "filename": "gcc/testsuite/c-c++-common/gomp/declare-target-4.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-target-4.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fopenmp\" } */\n+\n+#pragma omp declare target device_type (any)\t\t/* { dg-warning \"directive with only 'device_type' clauses ignored\" } */\n+\n+void f1 (void) {}\n+void f2 (void);\n+#pragma omp declare target to (f1) device_type (any) to (f2)\n+\n+void f3 (void) {}\n+void f4 (void) {}\n+#pragma omp declare target device_type (host) to (f3)\n+#pragma omp declare target to (f4) device_type (nohost)\n+\n+#pragma omp declare target\n+void f5 (void);\n+void f6 (void) {}\n+void f7 (void) {}\n+#pragma omp declare target to (f7)\n+void f8 (void) {}\n+#pragma omp declare target to (f8, f5)\n+#pragma omp declare target to (f5) to(f8)\n+#pragma omp declare target to (f8) device_type (host)\n+void f9 (void) {}\n+#pragma omp declare target to (f9) device_type (nohost)\n+#pragma omp declare target to (f9)\n+void f10 (void) {}\n+#pragma omp declare target device_type (any) to (f10)\n+void f11 (void) {}\n+#pragma omp end declare target\n+\n+void f12 (void) {}\n+#pragma omp declare target device_type (any) to (f12)\n+#pragma omp declare target to (f12) device_type (host)\n+void f13 (void) {}\n+#pragma omp declare target device_type (host) to (f13)\n+#pragma omp declare target to (f13) device_type (nohost)\n+void f14 (void) {}\n+#pragma omp declare target device_type (nohost) to (f14)\n+#pragma omp declare target device_type (any) to (f14)\n+void f15 (void) {}\n+#pragma omp declare target device_type (host) to (f15) device_type (nohost)\n+void f16 (void) {}\n+#pragma omp declare target device_type (any) to (f15) device_type (any)"}, {"sha": "0979180dd0b5c081887f7b7ca2beb7e4cb143ac2", "filename": "gcc/tree-core.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree-core.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree-core.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-core.h?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -415,6 +415,9 @@ enum omp_clause_code {\n   /* OpenMP clause: simdlen (constant-integer-expression).  */\n   OMP_CLAUSE_SIMDLEN,\n \n+  /* OpenMP clause: device_type ({host,nohost,any}).  */\n+  OMP_CLAUSE_DEVICE_TYPE,\n+\n   /* OpenMP clause: for.  */\n   OMP_CLAUSE_FOR,\n \n@@ -1468,6 +1471,13 @@ enum omp_clause_proc_bind_kind\n   OMP_CLAUSE_PROC_BIND_LAST\n };\n \n+enum omp_clause_device_type_kind\n+{\n+  OMP_CLAUSE_DEVICE_TYPE_HOST = 1,\n+  OMP_CLAUSE_DEVICE_TYPE_NOHOST = 2,\n+  OMP_CLAUSE_DEVICE_TYPE_ANY = 3\n+};\n+\n enum omp_clause_linear_kind\n {\n   OMP_CLAUSE_LINEAR_DEFAULT,\n@@ -1544,6 +1554,7 @@ struct GTY(()) tree_omp_clause {\n     enum tree_code                 if_modifier;\n     enum omp_clause_defaultmap_kind defaultmap_kind;\n     enum omp_clause_bind_kind      bind_kind;\n+    enum omp_clause_device_type_kind device_type_kind;\n     /* The dimension a OMP_CLAUSE__GRIDDIM_ clause of a gridified target\n        construct describes.  */\n     unsigned int\t\t   dimension;"}, {"sha": "53b3f55a3e6a14d4df19e65deb7eb5829b5b06ae", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -951,6 +951,25 @@ dump_omp_clause (pretty_printer *pp, tree clause, int spc, dump_flags_t flags)\n       pp_right_paren (pp);\n       break;\n \n+    case OMP_CLAUSE_DEVICE_TYPE:\n+      pp_string (pp, \"device_type(\");\n+      switch (OMP_CLAUSE_DEVICE_TYPE_KIND (clause))\n+\t{\n+\tcase OMP_CLAUSE_DEVICE_TYPE_HOST:\n+\t  pp_string (pp, \"host\");\n+\t  break;\n+\tcase OMP_CLAUSE_DEVICE_TYPE_NOHOST:\n+\t  pp_string (pp, \"nohost\");\n+\t  break;\n+\tcase OMP_CLAUSE_DEVICE_TYPE_ANY:\n+\t  pp_string (pp, \"any\");\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      pp_right_paren (pp);\n+      break;\n+\n     case OMP_CLAUSE_SAFELEN:\n       pp_string (pp, \"safelen(\");\n       dump_generic_node (pp, OMP_CLAUSE_SAFELEN_EXPR (clause),"}, {"sha": "154ef3ac38ff4901aa4d67a6eda6ed6b399fe6d5", "filename": "gcc/tree.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -332,6 +332,7 @@ unsigned const char omp_clause_num_ops[] =\n   0, /* OMP_CLAUSE_PROC_BIND  */\n   1, /* OMP_CLAUSE_SAFELEN  */\n   1, /* OMP_CLAUSE_SIMDLEN  */\n+  0, /* OMP_CLAUSE_DEVICE_TYPE  */\n   0, /* OMP_CLAUSE_FOR  */\n   0, /* OMP_CLAUSE_PARALLEL  */\n   0, /* OMP_CLAUSE_SECTIONS  */\n@@ -416,6 +417,7 @@ const char * const omp_clause_code_name[] =\n   \"proc_bind\",\n   \"safelen\",\n   \"simdlen\",\n+  \"device_type\",\n   \"for\",\n   \"parallel\",\n   \"sections\",\n@@ -12404,6 +12406,7 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tcase OMP_CLAUSE_UNTIED:\n \tcase OMP_CLAUSE_MERGEABLE:\n \tcase OMP_CLAUSE_PROC_BIND:\n+\tcase OMP_CLAUSE_DEVICE_TYPE:\n \tcase OMP_CLAUSE_INBRANCH:\n \tcase OMP_CLAUSE_NOTINBRANCH:\n \tcase OMP_CLAUSE_FOR:"}, {"sha": "94dbb95a78ab231f915ac1bc6db3b589103548cf", "filename": "gcc/tree.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77eb117f588686e6fb018d103fc3d1899be9b008/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=77eb117f588686e6fb018d103fc3d1899be9b008", "patch": "@@ -1620,6 +1620,9 @@ class auto_suppress_location_wrappers\n #define OMP_CLAUSE_PROC_BIND_KIND(NODE) \\\n   (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_PROC_BIND)->omp_clause.subcode.proc_bind_kind)\n \n+#define OMP_CLAUSE_DEVICE_TYPE_KIND(NODE) \\\n+  (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_DEVICE_TYPE)->omp_clause.subcode.device_type_kind)\n+\n #define OMP_CLAUSE_COLLAPSE_EXPR(NODE) \\\n   OMP_CLAUSE_OPERAND (OMP_CLAUSE_SUBCODE_CHECK (NODE, OMP_CLAUSE_COLLAPSE), 0)\n #define OMP_CLAUSE_COLLAPSE_ITERVAR(NODE) \\"}]}