{"sha": "5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTExMWYxZDRhYzZiMWNjYzQxYWFjNGNjYWY5YTZhOGMwNDdmMGU2Nw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2016-05-06T13:13:09Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2016-05-06T13:13:09Z"}, "message": "sse.md (*vec_extractv4sf_0, [...]): Use v instead of x in vex or maybe_vex alternatives...\n\n\t* config/i386/sse.md (*vec_extractv4sf_0, *sse4_1_extractps,\n\t*vec_extractv4sf_mem, vec_extract_lo_v16hi, vec_extract_hi_v16hi,\n\tvec_extract_lo_v32qi, vec_extract_hi_v32qi): Use v instead of x\n\tin vex or maybe_vex alternatives, use maybe_evex instead of vex\n\tin prefix.\n\nFrom-SVN: r235970", "tree": {"sha": "70d5bc9d49d9f37a9374723b3ac59da76308a29d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/70d5bc9d49d9f37a9374723b3ac59da76308a29d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17f9471472e966b8daa02bdc2911887ca34ca357", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17f9471472e966b8daa02bdc2911887ca34ca357", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17f9471472e966b8daa02bdc2911887ca34ca357"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "d22d7105795e2b71dc48dfc2dfcbaf1e292ee65e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "patch": "@@ -1,5 +1,11 @@\n 2016-05-06  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* config/i386/sse.md (*vec_extractv4sf_0, *sse4_1_extractps,\n+\t*vec_extractv4sf_mem, vec_extract_lo_v16hi, vec_extract_hi_v16hi,\n+\tvec_extract_lo_v32qi, vec_extract_hi_v32qi): Use v instead of x\n+\tin vex or maybe_vex alternatives, use maybe_evex instead of vex\n+\tin prefix.\n+\n \t* config/i386/sse.md (*vec_concatv2sf_sse4_1, *vec_concatv4sf): Use\n \tv instead of x in vex or maybe_vex alternatives, use\n \tmaybe_evex instead of vex in prefix."}, {"sha": "8b02e841873fea23473e5c23f6d7a7e8b75a50de", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=5111f1d4ac6b1ccc41aac4ccaf9a6a8c047f0e67", "patch": "@@ -6613,9 +6613,9 @@\n })\n \n (define_insn_and_split \"*vec_extractv4sf_0\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=x,m,f,r\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=v,m,f,r\")\n \t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,x,m,m\")\n+\t  (match_operand:V4SF 1 \"nonimmediate_operand\" \"vm,v,m,m\")\n \t  (parallel [(const_int 0)])))]\n   \"TARGET_SSE && !(MEM_P (operands[0]) && MEM_P (operands[1]))\"\n   \"#\"\n@@ -6624,9 +6624,9 @@\n   \"operands[1] = gen_lowpart (SFmode, operands[1]);\")\n \n (define_insn_and_split \"*sse4_1_extractps\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,x,x\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,v,v\")\n \t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*x,0,x\")\n+\t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*v,0,v\")\n \t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n,n\")])))]\n   \"TARGET_SSE4_1\"\n   \"@\n@@ -6665,7 +6665,7 @@\n    (set_attr \"mode\" \"V4SF,V4SF,*,*\")])\n \n (define_insn_and_split \"*vec_extractv4sf_mem\"\n-  [(set (match_operand:SF 0 \"register_operand\" \"=x,*r,f\")\n+  [(set (match_operand:SF 0 \"register_operand\" \"=v,*r,f\")\n \t(vec_select:SF\n \t  (match_operand:V4SF 1 \"memory_operand\" \"o,o,o\")\n \t  (parallel [(match_operand 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n@@ -7239,9 +7239,9 @@\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn_and_split \"vec_extract_lo_v16hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=v,m\")\n \t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (match_operand:V16HI 1 \"nonimmediate_operand\" \"vm,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -7253,20 +7253,27 @@\n   \"operands[1] = gen_lowpart (V8HImode, operands[1]);\")\n \n (define_insn \"vec_extract_hi_v16hi\"\n-  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m\")\n+  [(set (match_operand:V8HI 0 \"nonimmediate_operand\" \"=x,m,v,m,v,m\")\n \t(vec_select:V8HI\n-\t  (match_operand:V16HI 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V16HI 1 \"register_operand\" \"x,x,v,v,v,v\")\n \t  (parallel [(const_int 8) (const_int 9)\n \t\t     (const_int 10) (const_int 11)\n \t\t     (const_int 12) (const_int 13)\n \t\t     (const_int 14) (const_int 15)])))]\n   \"TARGET_AVX\"\n-  \"vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  \"@\n+   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\n+   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"isa\" \"*,*,avx512dq,avx512dq,avx512f,avx512f\")\n+   (set_attr \"memory\" \"none,store,none,store,none,store\")\n+   (set_attr \"prefix\" \"vex,vex,evex,evex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn_and_split \"vec_extract_lo_v64qi\"\n@@ -7325,9 +7332,9 @@\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn_and_split \"vec_extract_lo_v32qi\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=v,m\")\n \t(vec_select:V16QI\n-\t  (match_operand:V32QI 1 \"nonimmediate_operand\" \"xm,x\")\n+\t  (match_operand:V32QI 1 \"nonimmediate_operand\" \"vm,v\")\n \t  (parallel [(const_int 0) (const_int 1)\n \t\t     (const_int 2) (const_int 3)\n \t\t     (const_int 4) (const_int 5)\n@@ -7343,9 +7350,9 @@\n   \"operands[1] = gen_lowpart (V16QImode, operands[1]);\")\n \n (define_insn \"vec_extract_hi_v32qi\"\n-  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m\")\n+  [(set (match_operand:V16QI 0 \"nonimmediate_operand\" \"=x,m,v,m,v,m\")\n \t(vec_select:V16QI\n-\t  (match_operand:V32QI 1 \"register_operand\" \"x,x\")\n+\t  (match_operand:V32QI 1 \"register_operand\" \"x,x,v,v,v,v\")\n \t  (parallel [(const_int 16) (const_int 17)\n \t\t     (const_int 18) (const_int 19)\n \t\t     (const_int 20) (const_int 21)\n@@ -7355,12 +7362,19 @@\n \t\t     (const_int 28) (const_int 29)\n \t\t     (const_int 30) (const_int 31)])))]\n   \"TARGET_AVX\"\n-  \"vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\"\n+  \"@\n+   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextract%~128\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %1, %0|%0, %1, 0x1}\n+   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\n+   vextracti32x4\\t{$0x1, %g1, %0|%0, %g1, 0x1}\"\n   [(set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"memory\" \"none,store\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"isa\" \"*,*,avx512dq,avx512dq,avx512f,avx512f\")\n+   (set_attr \"memory\" \"none,store,none,store,none,store\")\n+   (set_attr \"prefix\" \"vex,vex,evex,evex,evex,evex\")\n    (set_attr \"mode\" \"OI\")])\n \n ;; Modes handled by vec_extract patterns."}]}