{"sha": "b2536b7c3de5aaaa18a5205a851d43059f868c57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjI1MzZiN2MzZGU1YWFhYTE4YTUyMDVhODUxZDQzMDU5Zjg2OGM1Nw==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-09T05:28:42Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-05-09T05:28:42Z"}, "message": "stl_deque.h (operator==(const _Deque_iterator<>&, const _Deque_iterator<>&)): Make hidden friend.\n\n2019-05-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_deque.h\n\t(operator==(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tMake hidden friend.\n\t(operator!=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tLikewise.\n\t(operator<(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tLikewise.\n\t(operator<=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tLikewise.\n\t(operator>(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tLikewise.\n\t(operator>=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n\tLikewise.\n\t(_Deque_iterator<>::operator+(difference_type)): Likewise and allow NRVO\n\tcopy elision.\n\t(_Deque_iterator<>::operator-(difference_type)): Likewise.\n\nFrom-SVN: r271027", "tree": {"sha": "2bb211761cda36ff88dab67257c3ae4121e10868", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bb211761cda36ff88dab67257c3ae4121e10868"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2536b7c3de5aaaa18a5205a851d43059f868c57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2536b7c3de5aaaa18a5205a851d43059f868c57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2536b7c3de5aaaa18a5205a851d43059f868c57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2536b7c3de5aaaa18a5205a851d43059f868c57/comments", "author": null, "committer": null, "parents": [{"sha": "20a7c51dcaa17204b0a49f4f7b58454d0a0cefd2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a7c51dcaa17204b0a49f4f7b58454d0a0cefd2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a7c51dcaa17204b0a49f4f7b58454d0a0cefd2"}], "stats": {"total": 266, "additions": 130, "deletions": 136}, "files": [{"sha": "f8344812ba519769e32bb88dd281c9eb26c3a7e5", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2536b7c3de5aaaa18a5205a851d43059f868c57/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2536b7c3de5aaaa18a5205a851d43059f868c57/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b2536b7c3de5aaaa18a5205a851d43059f868c57", "patch": "@@ -1,3 +1,22 @@\n+2019-05-09  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\t* include/bits/stl_deque.h\n+\t(operator==(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tMake hidden friend.\n+\t(operator!=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tLikewise.\n+\t(operator<(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tLikewise.\n+\t(operator<=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tLikewise.\n+\t(operator>(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tLikewise.\n+\t(operator>=(const _Deque_iterator<>&, const _Deque_iterator<>&)):\n+\tLikewise.\n+\t(_Deque_iterator<>::operator+(difference_type)): Likewise and allow NRVO\n+\tcopy elision.\n+\t(_Deque_iterator<>::operator-(difference_type)): Likewise.\n+\n 2019-05-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/90277"}, {"sha": "6e0f6dcd7846d6e671830a6c84f6b3095d0061d0", "filename": "libstdc++-v3/include/bits/stl_deque.h", "status": "modified", "additions": 111, "deletions": 136, "changes": 247, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2536b7c3de5aaaa18a5205a851d43059f868c57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2536b7c3de5aaaa18a5205a851d43059f868c57/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_deque.h?ref=b2536b7c3de5aaaa18a5205a851d43059f868c57", "patch": "@@ -239,24 +239,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \treturn *this;\n       }\n \n-      _Self\n-      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_Self __tmp = *this;\n-\treturn __tmp += __n;\n-      }\n-\n       _Self&\n       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT\n       { return *this += -__n; }\n \n-      _Self\n-      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT\n-      {\n-\t_Self __tmp = *this;\n-\treturn __tmp -= __n;\n-      }\n-\n       reference\n       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT\n       { return *(*this + __n); }\n@@ -273,123 +259,118 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t_M_first = *__new_node;\n \t_M_last = _M_first + difference_type(_S_buffer_size());\n       }\n-    };\n-\n-  // Note: we also provide overloads whose operands are of the same type in\n-  // order to avoid ambiguous overload resolution when std::rel_ops operators\n-  // are in scope (for additional details, see libstdc++/3628)\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator==(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_cur == __y._M_cur; }\n-\n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator==(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return __x._M_cur == __y._M_cur; }\n-\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator!=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__x == __y); }\n-\n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator!=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__x == __y); }\n-\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)\n-\t\t\t\t\t  : (__x._M_node < __y._M_node); }\n \n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator<(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return (__x._M_node == __y._M_node) ? (__x._M_cur < __y._M_cur)\n-\t\t\t\t\t  : (__x._M_node < __y._M_node); }\n-\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return __y < __x; }\n-\n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator>(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return __y < __x; }\n-\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator<=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__y < __x); }\n+      friend bool\n+      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __x._M_cur == __y._M_cur; }\n+\n+      // Note: we also provide overloads whose operands are of the same type in\n+      // order to avoid ambiguous overload resolution when std::rel_ops operators\n+      // are in scope (for additional details, see libstdc++/3628)\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator==(const _Self& __x,\n+\t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{ return __x._M_cur == __y._M_cur; }\n+\n+      friend bool\n+      operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return !(__x == __y); }\n+\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator!=(const _Self& __x,\n+\t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{ return !(__x == __y); }\n+\n+      friend bool\n+      operator<(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      {\n+\treturn (__x._M_node == __y._M_node)\n+\t  ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);\n+      }\n \n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator<=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__y < __x); }\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator<(const _Self& __x,\n+\t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{\n+\t  return (__x._M_node == __y._M_node)\n+\t    ? (__x._M_cur < __y._M_cur) : (__x._M_node < __y._M_node);\n+\t}\n \n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline bool\n-    operator>=(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t       const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__x < __y); }\n+      friend bool\n+      operator>(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return __y < __x; }\n+\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator>(const _Self& __x,\n+\t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{ return __y < __x; }\n+\n+      friend bool\n+      operator<=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return !(__y < __x); }\n+\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator<=(const _Self& __x,\n+\t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{ return !(__y < __x); }\n+\n+      friend bool\n+      operator>=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      { return !(__x < __y); }\n+\n+      template<typename _RefR, typename _PtrR>\n+\tfriend bool\n+\toperator>=(const _Self& __x,\n+\t\t   const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{ return !(__x < __y); }\n+\n+      friend difference_type\n+      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT\n+      {\n+\treturn difference_type(_S_buffer_size())\n+\t  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)\n+\t  + (__y._M_last - __y._M_cur);\n+      }\n \n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline bool\n-    operator>=(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t       const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    { return !(__x < __y); }\n+      // _GLIBCXX_RESOLVE_LIB_DEFECTS\n+      // According to the resolution of DR179 not only the various comparison\n+      // operators but also operator- must accept mixed iterator/const_iterator\n+      // parameters.\n+      template<typename _RefR, typename _PtrR>\n+\tfriend difference_type\n+\toperator-(const _Self& __x,\n+\t\t  const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n+\t{\n+\t  return difference_type(_S_buffer_size())\n+\t    * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)\n+\t    + (__y._M_last - __y._M_cur);\n+\t}\n \n-  // _GLIBCXX_RESOLVE_LIB_DEFECTS\n-  // According to the resolution of DR179 not only the various comparison\n-  // operators but also operator- must accept mixed iterator/const_iterator\n-  // parameters.\n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n-    operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>& __x,\n-\t      const _Deque_iterator<_Tp, _Ref, _Ptr>& __y) _GLIBCXX_NOEXCEPT\n-    {\n-      return typename _Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\n-\t(_Deque_iterator<_Tp, _Ref, _Ptr>::_S_buffer_size())\n-\t* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)\n-\t+ (__y._M_last - __y._M_cur);\n-    }\n+      friend _Self\n+      operator+(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_Self __tmp = __x;\n+\t__tmp += __n;\n+\treturn __tmp;\n+      }\n \n-  template<typename _Tp, typename _RefL, typename _PtrL,\n-\t   typename _RefR, typename _PtrR>\n-    inline typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type\n-    operator-(const _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n-\t      const _Deque_iterator<_Tp, _RefR, _PtrR>& __y) _GLIBCXX_NOEXCEPT\n-    {\n-      return typename _Deque_iterator<_Tp, _RefL, _PtrL>::difference_type\n-\t(_Deque_iterator<_Tp, _RefL, _PtrL>::_S_buffer_size())\n-\t* (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)\n-\t+ (__y._M_last - __y._M_cur);\n-    }\n+      friend _Self\n+      operator-(const _Self& __x, difference_type __n) _GLIBCXX_NOEXCEPT\n+      {\n+\t_Self __tmp = __x;\n+\t__tmp -= __n;\n+\treturn __tmp;\n+      }\n \n-  template<typename _Tp, typename _Ref, typename _Ptr>\n-    inline _Deque_iterator<_Tp, _Ref, _Ptr>\n-    operator+(ptrdiff_t __n, const _Deque_iterator<_Tp, _Ref, _Ptr>& __x)\n-    _GLIBCXX_NOEXCEPT\n-    { return __x + __n; }\n+      friend _Self\n+      operator+(difference_type __n, const _Self& __x) _GLIBCXX_NOEXCEPT\n+      { return __x + __n; }\n+    };\n \n   template<typename _Tp>\n     void\n@@ -2306,8 +2287,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   */\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator==(const deque<_Tp, _Alloc>& __x,\n-                         const deque<_Tp, _Alloc>& __y)\n+    operator==(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return __x.size() == __y.size()\n \t     && std::equal(__x.begin(), __x.end(), __y.begin()); }\n \n@@ -2324,37 +2304,32 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n   */\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<(const deque<_Tp, _Alloc>& __x,\n-\t      const deque<_Tp, _Alloc>& __y)\n+    operator<(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return std::lexicographical_compare(__x.begin(), __x.end(),\n \t\t\t\t\t  __y.begin(), __y.end()); }\n \n   /// Based on operator==\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator!=(const deque<_Tp, _Alloc>& __x,\n-\t       const deque<_Tp, _Alloc>& __y)\n+    operator!=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__x == __y); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>(const deque<_Tp, _Alloc>& __x,\n-\t      const deque<_Tp, _Alloc>& __y)\n+    operator>(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return __y < __x; }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator<=(const deque<_Tp, _Alloc>& __x,\n-\t       const deque<_Tp, _Alloc>& __y)\n+    operator<=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__y < __x); }\n \n   /// Based on operator<\n   template<typename _Tp, typename _Alloc>\n     inline bool\n-    operator>=(const deque<_Tp, _Alloc>& __x,\n-\t       const deque<_Tp, _Alloc>& __y)\n+    operator>=(const deque<_Tp, _Alloc>& __x, const deque<_Tp, _Alloc>& __y)\n     { return !(__x < __y); }\n \n   /// See std::deque::swap()."}]}