{"sha": "0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0ZDMyYzk2NDEzMTVkOTNlZWNhY2IxMzhiYTQwZTZkNGQ4OWNhOA==", "commit": {"author": {"name": "Graham Stott", "email": "grahams@redhat.com", "date": "2002-01-07T08:50:07Z"}, "committer": {"name": "Graham Stott", "email": "grahams@gcc.gnu.org", "date": "2002-01-07T08:50:07Z"}, "message": "diagnostic.h: Update copyright date.\n\n\n\t* diagnostic.h: Update copyright date.\n\t(output_buffer_state): Add perenthesis.\n\t(output_buffer_format_args): Likewise.\n\nFrom-SVN: r48596", "tree": {"sha": "2341a9679b119922b6823aee7ca273d2d0fe8b92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2341a9679b119922b6823aee7ca273d2d0fe8b92"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b4d32c9641315d93eecacb138ba40e6d4d89ca8/comments", "author": null, "committer": null, "parents": [{"sha": "6253d571fac307ce4a23a3d5a840ac58cceb6463", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6253d571fac307ce4a23a3d5a840ac58cceb6463", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6253d571fac307ce4a23a3d5a840ac58cceb6463"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "8e2852bfb84bac75d10c698efa95eec3bcd05526", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4d32c9641315d93eecacb138ba40e6d4d89ca8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4d32c9641315d93eecacb138ba40e6d4d89ca8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "patch": "@@ -1,5 +1,9 @@\n 2002-01-07  Graham Stott  <grahams@redhat.com>\n \n+\t* diagnostic.h: Update copyright date.\n+\t(output_buffer_state): Add parenthesis.\n+\t(output_buffer_format_args): Likewise.\n+\n \t* combine.c (combine_instructions): Replace XEXP (links, 0)\n \twith link.\n "}, {"sha": "c864405c0224903f57b985616abf8b742bf93dce", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b4d32c9641315d93eecacb138ba40e6d4d89ca8/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b4d32c9641315d93eecacb138ba40e6d4d89ca8/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=0b4d32c9641315d93eecacb138ba40e6d4d89ca8", "patch": "@@ -1,5 +1,5 @@\n /* Various declarations for language-independent diagnostics subroutines.\n-   Copyright (C) 2000, 2001 Free Software Foundation, Inc.\n+   Copyright (C) 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Gabriel Dos Reis <gdr@codesourcery.com>\n \n This file is part of GCC.\n@@ -132,7 +132,7 @@ struct output_buffer\n \n /* Current state of the diagnostic_context' output_buffer.  This macro\n    accepts both `diagnostic_context *' and `output_buffer *'.  */\n-#define output_buffer_state(BUFFER) ((output_buffer *)BUFFER)->state\n+#define output_buffer_state(BUFFER) ((output_buffer *)(BUFFER))->state\n \n /* The stream attached to the output_buffer, where the formatted\n    diagnostics will ultimately go.  Works only on `output_buffer *'.  */\n@@ -145,7 +145,7 @@ struct output_buffer\n /* The rest of the `variable argument list' not yet processed.\n    This macro works on both `output_state *' and `output_buffer *'.  */\n #define output_buffer_format_args(BUFFER) \\\n-   *(((output_state *)BUFFER)->format_args)\n+   *(((output_state *)(BUFFER))->format_args)\n \n /* In line-wrapping mode, whether we should start a new line.  */\n #define output_needs_newline(BUFFER) (BUFFER)->state.need_newline_p"}]}