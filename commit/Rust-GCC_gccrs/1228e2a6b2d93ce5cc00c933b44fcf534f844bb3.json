{"sha": "1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTIyOGUyYTZiMmQ5M2NlNWNjMDBjOTMzYjQ0ZmNmNTM0Zjg0NGJiMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T22:55:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-02-21T22:55:41Z"}, "message": "(decl_attributes): Add third argument prefix_attributes.\n\n(valid_machine_attribute): Deleted; moved to tree.c.\n\nFrom-SVN: r8993", "tree": {"sha": "dedf18ea443490fa08bc01d6c71013a477eb418c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dedf18ea443490fa08bc01d6c71013a477eb418c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3/comments", "author": null, "committer": null, "parents": [{"sha": "173712fb10a791dedd5d4eb1f360d31300219345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/173712fb10a791dedd5d4eb1f360d31300219345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/173712fb10a791dedd5d4eb1f360d31300219345"}], "stats": {"total": 70, "additions": 25, "deletions": 45}, "files": [{"sha": "6c60d6d6c0689af4005a693f8a48f4efcb6a3d56", "filename": "gcc/c-common.c", "status": "modified", "additions": 25, "deletions": 45, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1228e2a6b2d93ce5cc00c933b44fcf534f844bb3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1228e2a6b2d93ce5cc00c933b44fcf534f844bb3", "patch": "@@ -199,18 +199,27 @@ combine_strings (strings)\n   return value;\n }\n \f\n-/* Process the attributes listed in ATTRIBUTES\n-   and install them in DECL.  */\n+/* Process the attributes listed in ATTRIBUTES and PREFIX_ATTRIBUTES\n+   and install them in DECL.  PREFIX_ATTRIBUTES can appear after the\n+   declaration specifiers and declaration modifiers but before the\n+   declaration proper. */\n \n void\n-decl_attributes (decl, attributes)\n-     tree decl, attributes;\n+decl_attributes (decl, attributes, prefix_attributes)\n+     tree decl, attributes, prefix_attributes;\n {\n-  tree a, name, args, type, new_attr;\n+  tree a, name, args, type;\n \n   type = TREE_TYPE (decl);\n \n-  new_attr = TYPE_ATTRIBUTES (type);\n+  for (a = prefix_attributes; a; a = TREE_CHAIN (a))\n+    if (!(name = TREE_VALUE (a)))\n+      continue;\n+    else if (valid_machine_attribute (name, decl, type))\n+      ;\n+    else\n+      warning (\"`%s' attribute directive ignored\",\n+\t       IDENTIFIER_POINTER (name));\n \n   for (a = attributes; a; a = TREE_CHAIN (a))\n     if (!(name = TREE_VALUE (a)))\n@@ -273,8 +282,8 @@ decl_attributes (decl, attributes)\n \telse\n \t  warning_with_decl (decl, \"`transparent_union' attribute ignored\");\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"constructor\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__constructor__\"))\n+    else if (name == get_identifier (\"constructor\")\n+\t     || name == get_identifier (\"__constructor__\"))\n       {\n \tif (TREE_CODE (decl) != FUNCTION_DECL\n \t    || TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n@@ -286,8 +295,8 @@ decl_attributes (decl, attributes)\n \t  }\n \tDECL_STATIC_CONSTRUCTOR (decl) = 1;\n       }\n-    else if (TREE_VALUE (a) == get_identifier (\"destructor\")\n-\t     || TREE_VALUE (a) == get_identifier (\"__destructor__\"))\n+    else if (name == get_identifier (\"destructor\")\n+\t     || name == get_identifier (\"__destructor__\"))\n       {\n \tif (TREE_CODE (decl) != FUNCTION_DECL\n \t    || TREE_CODE (TREE_TYPE (decl)) != FUNCTION_TYPE\n@@ -299,25 +308,6 @@ decl_attributes (decl, attributes)\n \t  }\n \tDECL_STATIC_DESTRUCTOR (decl) = 1;\n       }\n-    else if (TREE_CODE (name) != TREE_LIST)\n-      {\n-#ifdef VALID_MACHINE_ATTRIBUTE\n-\tif (VALID_MACHINE_ATTRIBUTE (type, new_attr, name))\n-\t  { \n-\t    register tree atlist;\n-\n-\t    for (atlist = new_attr; atlist; atlist = TREE_CHAIN (atlist))\n-\t       if (TREE_VALUE (atlist) == name)\n-\t\t  goto found_attr;\n-\n-\t    new_attr = tree_cons (NULL_TREE, name, new_attr);\n-\t  found_attr:;\n-\t  }\n-\telse\n-#endif\n-\t  warning (\"`%s' attribute directive ignored\",\n-\t\t   IDENTIFIER_POINTER (name));\n-      }\n     else if ( args = TREE_CHAIN (name),\n \t      (!strcmp (IDENTIFIER_POINTER (name = TREE_PURPOSE (name)), \"mode\")\n \t       || !strcmp (IDENTIFIER_POINTER (name), \"__mode__\"))\n@@ -364,7 +354,8 @@ decl_attributes (decl, attributes)\n #ifdef ASM_OUTPUT_SECTION_NAME\n \tif (TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n \t  {\n-\t    if (TREE_CODE (decl) == VAR_DECL && current_function_decl != NULL_TREE)\n+\t    if (TREE_CODE (decl) == VAR_DECL \n+                && current_function_decl != NULL_TREE)\n \t      error_with_decl (decl,\n \t\t\t       \"section attribute cannot be specified for local variables\");\n \t    /* The decl may have already been given a section attribute from\n@@ -422,7 +413,8 @@ decl_attributes (decl, attributes)\n \t     && list_length (args) == 3\n \t     && TREE_CODE (TREE_VALUE (args)) == IDENTIFIER_NODE\n \t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (args))) == INTEGER_CST\n-\t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (args)))) == INTEGER_CST )\n+\t     && TREE_CODE (TREE_VALUE (TREE_CHAIN (TREE_CHAIN (args)))) \n+                == INTEGER_CST )\n       {\n         tree format_type = TREE_VALUE (args);\n \ttree format_num_expr = TREE_VALUE (TREE_CHAIN (args));\n@@ -519,24 +511,12 @@ decl_attributes (decl, attributes)\n \trecord_function_format (DECL_NAME (decl), DECL_ASSEMBLER_NAME (decl),\n \t\t\t\tis_scan, format_num, first_arg_num);\n       }\n-#ifdef VALID_MACHINE_ATTRIBUTE\n-    else if (VALID_MACHINE_ATTRIBUTE (type, new_attr, TREE_VALUE (a)))\n-      { \n-\tregister tree atlist;\n-\n-\tfor (atlist = new_attr; atlist; atlist = TREE_CHAIN (atlist))\n-\t  if (TREE_VALUE (atlist) == TREE_VALUE (a))\n-\t    goto found_attr2;\n-\n-\tnew_attr = tree_cons (NULL_TREE, TREE_VALUE (a), new_attr);\n-      found_attr2:;\n-      }\n-#endif\n+    else if (valid_machine_attribute (name, decl, type))\n+      ;\n     else\n       warning (\"`%s' attribute directive ignored\",\n \t       IDENTIFIER_POINTER (name));\n \n-  TREE_TYPE (decl) = build_type_attribute_variant (type, new_attr);\n }\n \f\n /* Check a printf/fprintf/sprintf/scanf/fscanf/sscanf format against"}]}