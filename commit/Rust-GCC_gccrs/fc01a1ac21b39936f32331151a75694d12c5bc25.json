{"sha": "fc01a1ac21b39936f32331151a75694d12c5bc25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmMwMWExYWMyMWIzOTkzNmYzMjMzMTE1MWE3NTY5NGQxMmM1YmMyNQ==", "commit": {"author": {"name": "Alexander Ivchenko", "email": "alexander.ivchenko@intel.com", "date": "2014-09-23T07:20:37Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2014-09-23T07:20:37Z"}, "message": "AVX-512. Add vshufps insn patterns.\n\ngcc/\n\t* config/i386/sse.md\n\t(define_expand \"avx_shufps256<mask_expand4_name>\"): Add masking.\n\t(define_insn \"avx_shufps256_1<mask_name>\"): Ditto.\n\t(define_expand \"sse_shufps<mask_expand4_name>\"): Ditto.\n\t(define_insn \"sse_shufps_v4sf_mask\"): New.\n\n\nCo-Authored-By: Andrey Turetskiy <andrey.turetskiy@intel.com>\nCo-Authored-By: Anna Tikhonova <anna.tikhonova@intel.com>\nCo-Authored-By: Ilya Tocar <ilya.tocar@intel.com>\nCo-Authored-By: Ilya Verbin <ilya.verbin@intel.com>\nCo-Authored-By: Kirill Yukhin <kirill.yukhin@intel.com>\nCo-Authored-By: Maxim Kuznetsov <maxim.kuznetsov@intel.com>\nCo-Authored-By: Michael Zolotukhin <michael.v.zolotukhin@intel.com>\n\nFrom-SVN: r215495", "tree": {"sha": "f3816a61a87cb0283c1dddbba96490d3627551c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3816a61a87cb0283c1dddbba96490d3627551c1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc01a1ac21b39936f32331151a75694d12c5bc25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc01a1ac21b39936f32331151a75694d12c5bc25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc01a1ac21b39936f32331151a75694d12c5bc25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc01a1ac21b39936f32331151a75694d12c5bc25/comments", "author": null, "committer": null, "parents": [{"sha": "471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/471452553b11cc11ddf4c83a0a5e1c91c9a95ca1"}], "stats": {"total": 95, "additions": 73, "deletions": 22}, "files": [{"sha": "090a9877e401696ca539c51ace9d6a296e4fc34c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01a1ac21b39936f32331151a75694d12c5bc25/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01a1ac21b39936f32331151a75694d12c5bc25/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc01a1ac21b39936f32331151a75694d12c5bc25", "patch": "@@ -1,3 +1,18 @@\n+2014-09-23  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n+\t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n+\t    Anna Tikhonova  <anna.tikhonova@intel.com>\n+\t    Ilya Tocar  <ilya.tocar@intel.com>\n+\t    Andrey Turetskiy  <andrey.turetskiy@intel.com>\n+\t    Ilya Verbin  <ilya.verbin@intel.com>\n+\t    Kirill Yukhin  <kirill.yukhin@intel.com>\n+\t    Michael Zolotukhin  <michael.v.zolotukhin@intel.com>\n+\n+\t* config/i386/sse.md\n+\t(define_expand \"avx_shufps256<mask_expand4_name>\"): Add masking.\n+\t(define_insn \"avx_shufps256_1<mask_name>\"): Ditto.\n+\t(define_expand \"sse_shufps<mask_expand4_name>\"): Ditto.\n+\t(define_insn \"sse_shufps_v4sf_mask\"): New.\n+\n 2014-09-23  Alexander Ivchenko  <alexander.ivchenko@intel.com>\n \t    Maxim Kuznetsov  <maxim.kuznetsov@intel.com>\n \t    Anna Tikhonova  <anna.tikhonova@intel.com>"}, {"sha": "9151063c4ba4579a7c55d08113a58fb9d445b751", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 58, "deletions": 22, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc01a1ac21b39936f32331151a75694d12c5bc25/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc01a1ac21b39936f32331151a75694d12c5bc25/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=fc01a1ac21b39936f32331151a75694d12c5bc25", "patch": "@@ -5805,33 +5805,36 @@\n    (set_attr \"prefix\" \"evex\")\n    (set_attr \"mode\" \"V16SF\")])\n \n-(define_expand \"avx_shufps256\"\n+(define_expand \"avx_shufps256<mask_expand4_name>\"\n   [(match_operand:V8SF 0 \"register_operand\")\n    (match_operand:V8SF 1 \"register_operand\")\n    (match_operand:V8SF 2 \"nonimmediate_operand\")\n    (match_operand:SI 3 \"const_int_operand\")]\n   \"TARGET_AVX\"\n {\n   int mask = INTVAL (operands[3]);\n-  emit_insn (gen_avx_shufps256_1 (operands[0], operands[1], operands[2],\n-\t\t\t\t  GEN_INT ((mask >> 0) & 3),\n-\t\t\t\t  GEN_INT ((mask >> 2) & 3),\n-\t\t\t\t  GEN_INT (((mask >> 4) & 3) + 8),\n-\t\t\t\t  GEN_INT (((mask >> 6) & 3) + 8),\n-\t\t\t\t  GEN_INT (((mask >> 0) & 3) + 4),\n-\t\t\t\t  GEN_INT (((mask >> 2) & 3) + 4),\n-\t\t\t\t  GEN_INT (((mask >> 4) & 3) + 12),\n-\t\t\t\t  GEN_INT (((mask >> 6) & 3) + 12)));\n+  emit_insn (gen_avx_shufps256_1<mask_expand4_name> (operands[0],\n+\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t     GEN_INT ((mask >> 0) & 3),\n+\t\t\t\t\t\t     GEN_INT ((mask >> 2) & 3),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 4) & 3) + 8),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 6) & 3) + 8),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 0) & 3) + 4),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 2) & 3) + 4),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 4) & 3) + 12),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 6) & 3) + 12)\n+\t\t\t\t\t\t     <mask_expand4_args>));\n   DONE;\n })\n \n ;; One bit in mask selects 2 elements.\n-(define_insn \"avx_shufps256_1\"\n-  [(set (match_operand:V8SF 0 \"register_operand\" \"=x\")\n+(define_insn \"avx_shufps256_1<mask_name>\"\n+  [(set (match_operand:V8SF 0 \"register_operand\" \"=v\")\n \t(vec_select:V8SF\n \t  (vec_concat:V16SF\n-\t    (match_operand:V8SF 1 \"register_operand\" \"x\")\n-\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:V8SF 1 \"register_operand\" \"v\")\n+\t    (match_operand:V8SF 2 \"nonimmediate_operand\" \"vm\"))\n \t  (parallel [(match_operand 3  \"const_0_to_3_operand\"  )\n \t\t     (match_operand 4  \"const_0_to_3_operand\"  )\n \t\t     (match_operand 5  \"const_8_to_11_operand\" )\n@@ -5841,6 +5844,7 @@\n \t\t     (match_operand 9  \"const_12_to_15_operand\")\n \t\t     (match_operand 10 \"const_12_to_15_operand\")])))]\n   \"TARGET_AVX\n+   && <mask_avx512vl_condition>\n    && (INTVAL (operands[3]) == (INTVAL (operands[7]) - 4)\n        && INTVAL (operands[4]) == (INTVAL (operands[8]) - 4)\n        && INTVAL (operands[5]) == (INTVAL (operands[9]) - 4)\n@@ -5853,29 +5857,61 @@\n   mask |= (INTVAL (operands[6]) - 8) << 6;\n   operands[3] = GEN_INT (mask);\n \n-  return \"vshufps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+  return \"vshufps\\t{%3, %2, %1, %0<mask_operand11>|%0<mask_operand11>, %1, %2, %3}\";\n }\n   [(set_attr \"type\" \"sseshuf\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"vex\")\n+   (set_attr \"prefix\" \"<mask_prefix>\")\n    (set_attr \"mode\" \"V8SF\")])\n \n-(define_expand \"sse_shufps\"\n+(define_expand \"sse_shufps<mask_expand4_name>\"\n   [(match_operand:V4SF 0 \"register_operand\")\n    (match_operand:V4SF 1 \"register_operand\")\n    (match_operand:V4SF 2 \"nonimmediate_operand\")\n    (match_operand:SI 3 \"const_int_operand\")]\n   \"TARGET_SSE\"\n {\n   int mask = INTVAL (operands[3]);\n-  emit_insn (gen_sse_shufps_v4sf (operands[0], operands[1], operands[2],\n-\t\t\t       GEN_INT ((mask >> 0) & 3),\n-\t\t\t       GEN_INT ((mask >> 2) & 3),\n-\t\t\t       GEN_INT (((mask >> 4) & 3) + 4),\n-\t\t\t       GEN_INT (((mask >> 6) & 3) + 4)));\n+  emit_insn (gen_sse_shufps_v4sf<mask_expand4_name> (operands[0],\n+\t\t\t\t\t\t     operands[1],\n+\t\t\t\t\t\t     operands[2],\n+\t\t\t\t\t\t     GEN_INT ((mask >> 0) & 3),\n+\t\t\t\t\t\t     GEN_INT ((mask >> 2) & 3),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 4) & 3) + 4),\n+\t\t\t\t\t\t     GEN_INT (((mask >> 6) & 3) + 4)\n+\t\t\t\t\t\t     <mask_expand4_args>));\n   DONE;\n })\n \n+(define_insn \"sse_shufps_v4sf_mask\"\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=v\")\n+    (vec_merge:V4SF\n+\t  (vec_select:V4SF\n+\t    (vec_concat:V8SF\n+\t      (match_operand:V4SF 1 \"register_operand\" \"v\")\n+\t      (match_operand:V4SF 2 \"nonimmediate_operand\" \"vm\"))\n+\t    (parallel [(match_operand 3 \"const_0_to_3_operand\")\n+\t               (match_operand 4 \"const_0_to_3_operand\")\n+\t               (match_operand 5 \"const_4_to_7_operand\")\n+\t               (match_operand 6 \"const_4_to_7_operand\")]))\n+      (match_operand:V4SF 7 \"vector_move_operand\" \"0C\")\n+      (match_operand:QI 8 \"register_operand\" \"Yk\")))]\n+  \"TARGET_AVX512VL\"\n+{\n+  int mask = 0;\n+  mask |= INTVAL (operands[3]) << 0;\n+  mask |= INTVAL (operands[4]) << 2;\n+  mask |= (INTVAL (operands[5]) - 4) << 4;\n+  mask |= (INTVAL (operands[6]) - 4) << 6;\n+  operands[3] = GEN_INT (mask);\n+\n+  return \"vshufps\\t{%3, %2, %1, %0%{%8%}%N7|%0%{%8%}%N7, %1, %2, %3}\";\n+}\n+  [(set_attr \"type\" \"sseshuf\")\n+   (set_attr \"length_immediate\" \"1\")\n+   (set_attr \"prefix\" \"evex\")\n+   (set_attr \"mode\" \"V4SF\")])\n+\n (define_insn \"sse_shufps_<mode>\"\n   [(set (match_operand:VI4F_128 0 \"register_operand\" \"=x,x\")\n \t(vec_select:VI4F_128"}]}