{"sha": "c3edc63382ef1856d8ba86fed77342b50007ddd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzNlZGM2MzM4MmVmMTg1NmQ4YmE4NmZlZDc3MzQyYjUwMDA3ZGRkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-07-08T21:32:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-07-08T21:32:06Z"}, "message": "Rename lvalue_or_rvalue_with_address_p to glvalue_p.\n\n\t* tree.c (glvalue_p): Rename from lvalue_or_rvalue_with_address_p.\n\t* call.c, cp-tree.h, typeck.c: Adjust.\n\nFrom-SVN: r238181", "tree": {"sha": "f5c511a74bf9eb4fb56d339132634e6eae6b387a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5c511a74bf9eb4fb56d339132634e6eae6b387a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c3edc63382ef1856d8ba86fed77342b50007ddd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3edc63382ef1856d8ba86fed77342b50007ddd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3edc63382ef1856d8ba86fed77342b50007ddd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3edc63382ef1856d8ba86fed77342b50007ddd3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0596c4485c684abe3ad34d81c8cbc79d2787c42b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0596c4485c684abe3ad34d81c8cbc79d2787c42b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0596c4485c684abe3ad34d81c8cbc79d2787c42b"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "98fb41a5d9ad1cc3fa1b4cab28f40ce5374cb38c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3", "patch": "@@ -1,5 +1,8 @@\n 2016-07-08  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (glvalue_p): Rename from lvalue_or_rvalue_with_address_p.\n+\t* call.c, cp-tree.h, typeck.c: Adjust.\n+\n \t* lambda.c (maybe_add_lambda_conv_op): Fix null object argument.\n \n \tP0145R2: Refining Expression Order for C++."}, {"sha": "850956647a6d24b1524bcd560ee9786d1d61af72", "filename": "gcc/cp/call.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3", "patch": "@@ -4549,7 +4549,7 @@ conditional_conversion (tree e1, tree e2, tsubst_flags_t complain)\n      If E2 is an xvalue: E1 can be converted to match E2 if E1 can be\n      implicitly converted to the type \"rvalue reference to T2\", subject to\n      the constraint that the reference must bind directly.  */\n-  if (lvalue_or_rvalue_with_address_p (e2))\n+  if (glvalue_p (e2))\n     {\n       tree rtype = cp_build_reference_type (t2, !real_lvalue_p (e2));\n       conv = implicit_conversion (rtype,\n@@ -4882,8 +4882,7 @@ build_conditional_expr_1 (location_t loc, tree arg1, tree arg2, tree arg3,\n \t    && (CLASS_TYPE_P (arg2_type) || CLASS_TYPE_P (arg3_type)\n \t\t|| (same_type_ignoring_top_level_qualifiers_p (arg2_type,\n \t\t\t\t\t\t\t       arg3_type)\n-\t\t    && lvalue_or_rvalue_with_address_p (arg2)\n-\t\t    && lvalue_or_rvalue_with_address_p (arg3)\n+\t\t    && glvalue_p (arg2) && glvalue_p (arg3)\n \t\t    && real_lvalue_p (arg2) == real_lvalue_p (arg3))))\n     {\n       conversion *conv2;"}, {"sha": "81f4a05d3491ddbe9fb5df1721d72e7f8ffc0d26", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3", "patch": "@@ -6515,7 +6515,7 @@ extern tree copy_binfo\t\t\t\t(tree, tree, tree,\n extern int member_p\t\t\t\t(const_tree);\n extern cp_lvalue_kind real_lvalue_p\t\t(const_tree);\n extern cp_lvalue_kind lvalue_kind\t\t(const_tree);\n-extern bool lvalue_or_rvalue_with_address_p\t(const_tree);\n+extern bool glvalue_p\t\t\t\t(const_tree);\n extern bool xvalue_p\t                        (const_tree);\n extern tree cp_stabilize_reference\t\t(tree);\n extern bool builtin_valid_in_constant_expr_p    (const_tree);"}, {"sha": "57da88f6d54a9d50cd2ee52210a8a6cdb2bb8642", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3", "patch": "@@ -266,20 +266,10 @@ real_lvalue_p (const_tree ref)\n     return kind;\n }\n \n-/* This differs from real_lvalue_p in that class rvalues are considered\n-   lvalues.  */\n+/* This differs from real_lvalue_p in that xvalues are included.  */\n \n bool\n-lvalue_p (const_tree ref)\n-{\n-  return (lvalue_kind (ref) != clk_none);\n-}\n-\n-/* This differs from real_lvalue_p in that rvalues formed by dereferencing\n-   rvalue references are considered rvalues.  */\n-\n-bool\n-lvalue_or_rvalue_with_address_p (const_tree ref)\n+glvalue_p (const_tree ref)\n {\n   cp_lvalue_kind kind = lvalue_kind (ref);\n   if (kind & clk_class)\n@@ -288,7 +278,16 @@ lvalue_or_rvalue_with_address_p (const_tree ref)\n     return (kind != clk_none);\n }\n \n-/* Returns true if REF is an xvalue, false otherwise.  */\n+/* This differs from glvalue_p in that class prvalues are included.  */\n+\n+bool\n+lvalue_p (const_tree ref)\n+{\n+  return (lvalue_kind (ref) != clk_none);\n+}\n+\n+/* Returns true if REF is an xvalue (the result of dereferencing an rvalue\n+   reference), false otherwise.  */\n \n bool\n xvalue_p (const_tree ref)\n@@ -781,7 +780,7 @@ rvalue (tree expr)\n \n   /* We need to do this for rvalue refs as well to get the right answer\n      from decltype; see c++/36628.  */\n-  if (!processing_template_decl && lvalue_or_rvalue_with_address_p (expr))\n+  if (!processing_template_decl && glvalue_p (expr))\n     expr = build1 (NON_LVALUE_EXPR, type, expr);\n   else if (type != TREE_TYPE (expr))\n     expr = build_nop (type, expr);\n@@ -4260,7 +4259,7 @@ stabilize_expr (tree exp, tree* initp)\n      arguments with such a type; just treat it as a pointer.  */\n   else if (TREE_CODE (TREE_TYPE (exp)) == REFERENCE_TYPE\n \t   || SCALAR_TYPE_P (TREE_TYPE (exp))\n-\t   || !lvalue_or_rvalue_with_address_p (exp))\n+\t   || !glvalue_p (exp))\n     {\n       init_expr = get_target_expr (exp);\n       exp = TARGET_EXPR_SLOT (init_expr);\n@@ -4388,7 +4387,7 @@ stabilize_init (tree init, tree *initp)\n       && TREE_CODE (t) != CONSTRUCTOR\n       && TREE_CODE (t) != AGGR_INIT_EXPR\n       && (SCALAR_TYPE_P (TREE_TYPE (t))\n-\t  || lvalue_or_rvalue_with_address_p (t)))\n+\t  || glvalue_p (t)))\n     {\n       TREE_OPERAND (init, 1) = stabilize_expr (t, initp);\n       return true;"}, {"sha": "005fc040540acf95a78553f18d8a7c03706946d5", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3", "patch": "@@ -6302,8 +6302,7 @@ build_x_conditional_expr (location_t loc, tree ifexp, tree op1, tree op2,\n       tree min = build_min_non_dep (COND_EXPR, expr,\n \t\t\t\t    orig_ifexp, orig_op1, orig_op2);\n       /* Remember that the result is an lvalue or xvalue.  */\n-      if (lvalue_or_rvalue_with_address_p (expr)\n-\t  && !lvalue_or_rvalue_with_address_p (min))\n+      if (glvalue_p (expr) && !glvalue_p (min))\n \tTREE_TYPE (min) = cp_build_reference_type (TREE_TYPE (min),\n \t\t\t\t\t\t   !real_lvalue_p (expr));\n       expr = convert_from_reference (min);\n@@ -7243,7 +7242,7 @@ build_const_cast_1 (tree dst_type, tree expr, tsubst_flags_t complain,\n \t  ? real_lvalue_p (expr)\n \t  : (CLASS_TYPE_P (TREE_TYPE (dst_type))\n \t     ? lvalue_p (expr)\n-\t     : lvalue_or_rvalue_with_address_p (expr)))\n+\t     : glvalue_p (expr)))\n \t/* OK.  */;\n       else\n \t{"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "gcc/cp/typeck.s", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftypeck.s", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c3edc63382ef1856d8ba86fed77342b50007ddd3/gcc%2Fcp%2Ftypeck.s", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.s?ref=c3edc63382ef1856d8ba86fed77342b50007ddd3"}]}