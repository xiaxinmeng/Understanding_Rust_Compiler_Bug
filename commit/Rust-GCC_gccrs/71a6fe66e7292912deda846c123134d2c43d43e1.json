{"sha": "71a6fe66e7292912deda846c123134d2c43d43e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFhNmZlNjZlNzI5MjkxMmRlZGE4NDZjMTIzMTM0ZDJjNDNkNDNlMQ==", "commit": {"author": {"name": "Bingfeng Mei", "email": "bmei@broadcom.com", "date": "2009-01-21T11:39:19Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2009-01-21T11:39:19Z"}, "message": "check alias sets in add_inter_loop_mem_dep\n\nFrom-SVN: r143540", "tree": {"sha": "9f0d4349fb3beba6fbbe170f65b83dc48644a965", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f0d4349fb3beba6fbbe170f65b83dc48644a965"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71a6fe66e7292912deda846c123134d2c43d43e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a6fe66e7292912deda846c123134d2c43d43e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71a6fe66e7292912deda846c123134d2c43d43e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71a6fe66e7292912deda846c123134d2c43d43e1/comments", "author": null, "committer": null, "parents": [{"sha": "954a782e53528ecd7cf7dac4f68506ab74d629c2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/954a782e53528ecd7cf7dac4f68506ab74d629c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/954a782e53528ecd7cf7dac4f68506ab74d629c2"}], "stats": {"total": 139, "additions": 139, "deletions": 0}, "files": [{"sha": "35de52a867a196418fc7227ff73f8ee833b60f73", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -1,3 +1,14 @@\n+2009-01-21  Bingfeng Mei  <bmei@broadcom.com>\n+\n+\t* alias.c (walk_mems_1, walk_mems_2, insn_alias_sets_conflict_p):\n+\tCheck whether two instructions have memory references that\n+\tbelong to conflicting alias sets.  walk_mems_1 and walk_mems_2\n+\tare helper functions for traversing.\n+\t* alias.h (insn_alias_sets_confilict_p): New prototypes.\n+\t* ddg.c (add_inter_loop_mem_dep): Call insn_alias_sets_conflict_p\n+\tnot to draw dependency edge for instructions with non-conflicting\n+\talias sets.\n+\n 2009-01-20  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR other/38758"}, {"sha": "18c7d87a52f981bd3b34f2227edf89d43afe47ef", "filename": "gcc/alias.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -344,6 +344,43 @@ alias_sets_conflict_p (alias_set_type set1, alias_set_type set2)\n   return 0;\n }\n \n+static int\n+walk_mems_2 (rtx *x, rtx mem)\n+{\n+  if (MEM_P (*x))\n+    {\n+      if (alias_sets_conflict_p (MEM_ALIAS_SET(*x), MEM_ALIAS_SET(mem)))\n+        return 1;\n+        \n+      return -1;  \n+    }\n+  return 0;\n+}\n+\n+static int\n+walk_mems_1 (rtx *x, rtx *pat)\n+{\n+  if (MEM_P (*x))\n+    {\n+      /* Visit all MEMs in *PAT and check indepedence.  */\n+      if (for_each_rtx (pat, (rtx_function) walk_mems_2, *x))\n+        /* Indicate that dependence was determined and stop traversal.  */\n+        return 1;\n+        \n+      return -1;\n+    }\n+  return 0;\n+}\n+\n+/* Return 1 if two specified instructions have mem expr with conflict alias sets*/\n+bool\n+insn_alias_sets_conflict_p (rtx insn1, rtx insn2)\n+{\n+  /* For each pair of MEMs in INSN1 and INSN2 check their independence.  */\n+  return  for_each_rtx (&PATTERN (insn1), (rtx_function) walk_mems_1,\n+\t\t\t &PATTERN (insn2));\n+}\n+\n /* Return 1 if the two specified alias sets will always conflict.  */\n \n int"}, {"sha": "3492d7ee6ca6a66b827d5650c7b657fe36155fb8", "filename": "gcc/alias.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Falias.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Falias.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.h?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -41,6 +41,7 @@ extern int alias_sets_conflict_p (alias_set_type, alias_set_type);\n extern int alias_sets_must_conflict_p (alias_set_type, alias_set_type);\n extern int objects_must_conflict_p (tree, tree);\n extern int nonoverlapping_memrefs_p (const_rtx, const_rtx);\n+extern bool insn_alias_sets_conflict_p (rtx, rtx);\n \n /* This alias set can be used to force a memory to conflict with all\n    other memories, creating a barrier across which no memory reference"}, {"sha": "a0eaaea7d2c3c98b1e1cf5e42e19690e8532f2d4", "filename": "gcc/ddg.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Fddg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Fddg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fddg.c?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -345,6 +345,10 @@ build_inter_loop_deps (ddg_ptr g)\n static void\n add_inter_loop_mem_dep (ddg_ptr g, ddg_node_ptr from, ddg_node_ptr to)\n {\n+  if (!insn_alias_sets_conflict_p (from->insn, to->insn))\n+    /* Do not create edge if memory references have disjoint alias sets.  */\n+    return;\n+    \n   if (mem_write_insn_p (from->insn))\n     {\n       if (mem_read_insn_p (to->insn))"}, {"sha": "4bf0f2fc8563886c9bf9c1157cb38e5f163cf32e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -1,3 +1,8 @@\n+2009-01-21  Bingfeng Mei  <bmei@broadcom.com>\n+\n+\t* gcc.dg/sms-6.c: New test.\n+\t* gcc.dg/sms-7.c: Likewise.\n+\n 2009-01-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/38907"}, {"sha": "3fe8ecda167a4c88c90eefda1440d73b2581f7f5", "filename": "gcc/testsuite/gcc.dg/sms-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-6.c?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmodulo-sched \" } */\n+\n+extern void abort (void);\n+\n+void foo (int * __restrict__ a, int * __restrict__ b, int * __restrict__ c)\n+{\n+   int i;\n+   for(i = 0; i < 100; i+=4)\n+     {\n+       a[i] = b[i] * c[i];\n+       a[i+1] = b[i+1] * c[i+1];\n+       a[i+2] = b[i+2] * c[i+2];\n+       a[i+3] = b[i+3] * c[i+3];\n+     }\n+}   \n+\n+\n+int a[100], b[100], c[100];\n+int main()\n+{\n+  int i, res;\n+  for(i = 0; i < 100; i++)\n+    {\n+      b[i] = c[i] = i;\n+    }  \n+  foo(a, b, c);\n+  \n+  res = 0;  \n+  for(i = 0; i < 100; i++)\n+    {\n+      res += a[i];\n+    }\n+  if(res != 328350)\n+    abort();\n+  \n+  return 0;        \n+}\n+\n+"}, {"sha": "35f04a5ac307d9379920c169f8295ec909748937", "filename": "gcc/testsuite/gcc.dg/sms-7.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71a6fe66e7292912deda846c123134d2c43d43e1/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fsms-7.c?ref=71a6fe66e7292912deda846c123134d2c43d43e1", "patch": "@@ -0,0 +1,41 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fmodulo-sched -fstrict-aliasing \" } */\n+\n+extern void abort (void);\n+\n+void foo (int *a, short * __restrict__ b, short * __restrict__ c) \n+{\n+   int i;\n+   for(i = 0; i < 100; i+=4)\n+     {\n+       a[i] = b[i] * c[i];\n+       a[i+1] = b[i+1] * c[i+1];\n+       a[i+2] = b[i+2] * c[i+2];\n+       a[i+3] = b[i+3] * c[i+3];\n+     }\n+}   \n+\n+int a[100];\n+short b[100], c[100];\n+\n+int main()\n+{\n+  int i, res;\n+  for(i = 0; i < 100; i++)\n+    {\n+      b[i] = c[i] = i;\n+    }  \n+  foo(a, b, c);\n+  \n+  res = 0;  \n+  for(i = 0; i < 100; i++)\n+    {\n+      res += a[i];\n+    }\n+  if(res != 328350)\n+    abort();\n+  \n+  return 0;        \n+}\n+\n+"}]}