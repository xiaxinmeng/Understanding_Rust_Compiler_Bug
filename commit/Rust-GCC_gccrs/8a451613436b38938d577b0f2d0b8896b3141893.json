{"sha": "8a451613436b38938d577b0f2d0b8896b3141893", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE0NTE2MTM0MzZiMzg5MzhkNTc3YjBmMmQwYjg4OTZiMzE0MTg5Mw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-08-23T16:13:47Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-08-23T16:13:47Z"}, "message": "tr-warn4.c, [...]: New tests.\n\n\t* gcc.dg/cpp/tr-warn4.c, gcc.dg/cpp/tr-warn5.c,\n\tgcc.dg/wtr-aggr-init-1.c, gcc.dg/wtr-escape-1.c,\n\tgcc.dg/wtr-int-type-1.c, gcc.dg/wtr-static-1.c,\n\tgcc.dg/wtr-strcat-1.c, gcc.dg/wtr-switch-1.c,\n\tgcc.dg/wtr-unary-plus-1.c, gcc.dg/wtr-union-init-1.c: New tests.\n\nFrom-SVN: r35913", "tree": {"sha": "5e8a157ec041c96ec106a6df77176615b5972056", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e8a157ec041c96ec106a6df77176615b5972056"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a451613436b38938d577b0f2d0b8896b3141893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a451613436b38938d577b0f2d0b8896b3141893", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a451613436b38938d577b0f2d0b8896b3141893", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a451613436b38938d577b0f2d0b8896b3141893/comments", "author": null, "committer": null, "parents": [{"sha": "23d168774ed0113530edf9b65beab12241890870", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23d168774ed0113530edf9b65beab12241890870", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23d168774ed0113530edf9b65beab12241890870"}], "stats": {"total": 233, "additions": 233, "deletions": 0}, "files": [{"sha": "3eb6b803d42f75a72bdeb8e6e5f38c7f62e69cd1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -1,3 +1,11 @@\n+2000-08-23  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.dg/cpp/tr-warn4.c, gcc.dg/cpp/tr-warn5.c,\n+\tgcc.dg/wtr-aggr-init-1.c, gcc.dg/wtr-escape-1.c,\n+\tgcc.dg/wtr-int-type-1.c, gcc.dg/wtr-static-1.c,\n+\tgcc.dg/wtr-strcat-1.c, gcc.dg/wtr-switch-1.c,\n+\tgcc.dg/wtr-unary-plus-1.c, gcc.dg/wtr-union-init-1.c: New tests.\n+\n 2000-08-22  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* gcc.dg/c90-strftime-2.c, gcc.dg/c99-strftime-1.c,"}, {"sha": "108397761d94821736375fb46005b790785bcc71", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn4.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,26 @@\n+/* Test for -Wtraditional warnings on integer constant suffixes.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wtraditional -fno-show-column\" } */\n+\n+#if 1U /* { dg-warning \"traditional C rejects.*suffix\" \"numeric constant suffix\" } */\n+#endif\n+#if 1u /* { dg-warning \"traditional C rejects.*suffix\" \"numeric constant suffix\" } */\n+#endif\n+#if 1L\n+#endif\n+#if 1l\n+#endif\n+  \n+#line 17 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+#if 1U\n+#endif\n+#if 1u\n+#endif\n+#if 1L\n+#endif\n+#if 1l\n+#endif"}, {"sha": "ab301b3aa0707618d8857ed71f384d59185883f4", "filename": "gcc/testsuite/gcc.dg/cpp/tr-warn5.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Ftr-warn5.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,14 @@\n+/* Test for -Wtraditional warnings on the unary plus operator.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do preprocess } */\n+/* { dg-options \"-Wtraditional -fno-show-column\" } */\n+\n+#if +1 /* { dg-warning \"unary plus operator\" \"unary plus operator\" } */\n+#endif\n+  \n+#line 11 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+#if +1\n+#endif"}, {"sha": "259716e5e423092612ff681e305105a63f9e2c37", "filename": "gcc/testsuite/gcc.dg/wtr-aggr-init-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-aggr-init-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,38 @@\n+/* Test for -Wtraditional warnings on automatic aggregate initialization.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+struct foo\n+{\n+  int i;\n+  long l;\n+};\n+\n+struct foo f0 = { 0, 0 };\n+static struct foo f1 = { 0, 0 };\n+\n+void\n+testfunc1 (void)\n+{\n+  struct foo f3 = { 0, 0 }; /* { dg-warning \"traditional C rejects automatic\" \"automatic aggregate initialization\" } */\n+  static struct foo f4 = { 0, 0 };\n+  \n+  f3 = f4;\n+}\n+  \n+#line 26 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+struct foo f5 = { 0, 0 };\n+static struct foo f6 = { 0, 0 };\n+\n+void\n+testfunc2 (void)\n+{\n+  struct foo f7 = { 0, 0 };\n+  static struct foo f8 = { 0, 0 };\n+  \n+  f7 = f8;\n+}"}, {"sha": "a83bdc5117acd9bb8eda8e4f5074b6e1b6bda7e6", "filename": "gcc/testsuite/gcc.dg/wtr-escape-1.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-escape-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,22 @@\n+/* Test for -Wtraditional warnings on escape characters.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+void\n+testfunc (void)\n+{\n+  char c;\n+\n+  c = '\\a'; /* { dg-warning \"the meaning of\" \"escaped character warning \" } */\n+  c = '\\x2'; /* { dg-warning \"the meaning of\" \"escaped character warning \" } */\n+  c = '\\n';\n+\n+#line 17 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  c = '\\a';\n+  c = '\\x2';\n+  c = '\\n';\n+}"}, {"sha": "27ab1441001a9c72b53b78ee7c0a7555d7079f3d", "filename": "gcc/testsuite/gcc.dg/wtr-int-type-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-int-type-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,24 @@\n+/* Test for -Wtraditional warnings on integer constant types.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+void\n+testfunc (void)\n+{\n+  long long i;\n+  \n+  i = 0x80000000;\n+  i = 0x8000000000000000;\n+  i = 9223372036854775807; /* { dg-warning \"integer constant.*with -traditional\" \"integer constant\" } */\n+  i = 4294967295; /* { dg-warning \"decimal constant|integer constant.*with -traditional\" \"integer constant\" } */\n+  \n+#line 18 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  i = 0x80000000;\n+  i = 0x8000000000000000;\n+  i = 9223372036854775807;\n+  i = 4294967295; /* { dg-warning \"decimal constant\" \"decimal constant\" } */\n+}"}, {"sha": "676b48231e4c27c5f3b94b84672f735c539d6ab7", "filename": "gcc/testsuite/gcc.dg/wtr-static-1.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-static-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,14 @@\n+/* Test for -Wtraditional warnings on static/non-static mismatches.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu>  8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+static void testfunc1(void);\n+void testfunc1(void) {} /* { dg-warning \"non-static.*follows static\" \"non-static follows static\" } */\n+\n+#line 11 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+static void testfunc2(void);\n+void testfunc2(void) {}"}, {"sha": "06806b133478e689d69083302bd18ad3cca85e88", "filename": "gcc/testsuite/gcc.dg/wtr-strcat-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-strcat-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,18 @@\n+/* Test for -Wtraditional warnings on string concatenation.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+void\n+testfunc (void)\n+{\n+  const char *foo;\n+  \n+  foo = \"hello\" \"hello\"; /* { dg-warning \"string concatenation\" \"string concatenation\" } */\n+\n+#line 15 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  foo = \"hello\" \"hello\";\n+}"}, {"sha": "c42cdb11031ce951704bea4423b2a0057730016a", "filename": "gcc/testsuite/gcc.dg/wtr-switch-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-switch-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,24 @@\n+/* Test for -Wtraditional warnings on switch operands of type long.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+void\n+testfunc (long l)\n+{\n+  switch (l) /* { dg-warning \"switch expression\" \"switch expression\" } */\n+  {\n+  default:\n+    break;\n+  }\n+\n+#line 17 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  switch (l)\n+  {\n+  default:\n+    break;\n+  }\n+}"}, {"sha": "ec3cd19fa19cbad914eaafe4751468c95a24baed", "filename": "gcc/testsuite/gcc.dg/wtr-unary-plus-1.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-unary-plus-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,20 @@\n+/* Test for -Wtraditional warnings on the unary plus operator.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+void\n+testfunc (void)\n+{\n+  int i;\n+  \n+  i = +1; /* { dg-warning \"unary plus operator\" \"unary plus operator\" } */\n+  i = +i; /* { dg-warning \"unary plus operator\" \"unary plus operator\" } */\n+  \n+#line 16 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  i = +1;\n+  i = +i;\n+}"}, {"sha": "1f00069d51040b9888cc3c4a7ed65803380efd0e", "filename": "gcc/testsuite/gcc.dg/wtr-union-init-1.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a451613436b38938d577b0f2d0b8896b3141893/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fwtr-union-init-1.c?ref=8a451613436b38938d577b0f2d0b8896b3141893", "patch": "@@ -0,0 +1,25 @@\n+/* Test for -Wtraditional warnings on union initialization.\n+   Note, gcc should omit these warnings in system header files.\n+   By Kaveh R. Ghazi <ghazi@caip.rutgers.edu> 8/22/2000.  */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wtraditional\" } */\n+\n+union foo\n+{\n+  int i;\n+  long l;\n+};\n+\n+void\n+testfunc (void)\n+{\n+  /* Note we only warn for non-zero initializers.  */\n+  static union foo f1 = { 0 };\n+  static union foo f2 = { 1 }; /* { dg-warning \"traditional C rejects initialization of unions\" \"initialization of unions\" } */\n+\n+#line 21 \"sys-header.h\" 3\n+/* We are in system headers now, no -Wtraditional warnings should issue.  */\n+\n+  static union foo f3 = { 0 };\n+  static union foo f4 = { 1 };\n+}"}]}