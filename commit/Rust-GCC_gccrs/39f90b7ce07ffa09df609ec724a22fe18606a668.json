{"sha": "39f90b7ce07ffa09df609ec724a22fe18606a668", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmOTBiN2NlMDdmZmEwOWRmNjA5ZWM3MjRhMjJmZTE4NjA2YTY2OA==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2001-02-20T19:01:55Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2001-02-20T19:01:55Z"}, "message": "PipedWriter.java (flush): Throw exception if stream closed.\n\n\t* java/io/PipedWriter.java (flush): Throw exception if stream\n\tclosed.\n\t* java/io/OutputStreamWriter.java (write): Throw exception if\n\tstream closed.\n\t(writeChars): Don't throw exception if stream closed.\n\t* java/io/CharArrayWriter.java (closed): New field.\n\t(close): Set it.\n\t(flush): Throw exception if stream closed.\n\t(reset): Synchronize on correct lock.  Allow stream to be\n\treopened.\n\t(toCharArray, toString, writeTo): Synchronize.\n\t(write): Throwe exception if stream closed.\n\t* java/io/BufferedWriter.java (close): Clear `buffer'.\n\t(flush): Throw IOException if stream is closed.\n\t(write): Likewise.\n\nFrom-SVN: r39927", "tree": {"sha": "bea0be04a6a6d1d16e61e97edbf76650ad68223a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bea0be04a6a6d1d16e61e97edbf76650ad68223a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f90b7ce07ffa09df609ec724a22fe18606a668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f90b7ce07ffa09df609ec724a22fe18606a668", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f90b7ce07ffa09df609ec724a22fe18606a668", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f90b7ce07ffa09df609ec724a22fe18606a668/comments", "author": null, "committer": null, "parents": [{"sha": "c9407e4c671efb42c76dbb80a13ecf0c5dc09f05", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9407e4c671efb42c76dbb80a13ecf0c5dc09f05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9407e4c671efb42c76dbb80a13ecf0c5dc09f05"}], "stats": {"total": 149, "additions": 120, "deletions": 29}, "files": [{"sha": "2693f7404b5f8faf8279620f36b4d4a83b6cdbb7", "filename": "libjava/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=39f90b7ce07ffa09df609ec724a22fe18606a668", "patch": "@@ -1,3 +1,21 @@\n+2001-02-20  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/io/PipedWriter.java (flush): Throw exception if stream\n+\tclosed.\n+\t* java/io/OutputStreamWriter.java (write): Throw exception if\n+\tstream closed.\n+\t(writeChars): Don't throw exception if stream closed.\n+\t* java/io/CharArrayWriter.java (closed): New field.\n+\t(close): Set it.\n+\t(flush): Throw exception if stream closed.\n+\t(reset): Synchronize on correct lock.  Allow stream to be\n+\treopened.\n+\t(toCharArray, toString, writeTo): Synchronize.\n+\t(write): Throwe exception if stream closed.\n+\t* java/io/BufferedWriter.java (close): Clear `buffer'.\n+\t(flush): Throw IOException if stream is closed.\n+\t(write): Likewise.\n+\n 2001-02-16  Tom Tromey  <tromey@cygnus.com>\n \n \t* java/lang/ThreadGroup.java (activeCount): Only include threads"}, {"sha": "e99586121dbe8cdd0a880136929cf1407d4eac9a", "filename": "libjava/java/io/BufferedWriter.java", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FBufferedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FBufferedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FBufferedWriter.java?ref=39f90b7ce07ffa09df609ec724a22fe18606a668", "patch": "@@ -1,12 +1,29 @@\n-// BufferedWriter.java - Filtered character output stream.\n+/* BufferedWriter.java -- Buffer output into large blocks before writing\n+   Copyright (C) 1998, 1999, 2000 Free Software Foundation, Inc.\n \n-/* Copyright (C) 1998, 1999, 2000  Free Software Foundation\n+This file is part of GNU Classpath.\n \n-   This file is part of libgcj.\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+As a special exception, if you link this library with other files to\n+produce an executable, this library does not by itself cause the\n+resulting executable to be covered by the GNU General Public License.\n+This exception does not however invalidate any other reasons why the\n+executable file might be covered by the GNU General Public License. */\n \n-This software is copyrighted work licensed under the terms of the\n-Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n-details.  */\n \n package java.io;\n \n@@ -67,8 +84,14 @@ public BufferedWriter (Writer ox, int size)\n    */\n   public void close () throws IOException\n   {\n-    localFlush ();\n-    out.close();\n+    synchronized (lock)\n+      {\n+\t// It is safe to call localFlush even if the stream is already\n+\t// closed.\n+\tlocalFlush ();\n+\tout.close();\n+\tbuffer = null;\n+      }\n   }\n \n   /**\n@@ -79,8 +102,13 @@ public void close () throws IOException\n    */\n   public void flush () throws IOException\n   {\n-    localFlush ();\n-    out.flush();\n+    synchronized (lock)\n+      {\n+\tif (buffer == null)\n+\t  throw new IOException (\"Stream closed\");\n+\tlocalFlush ();\n+\tout.flush();\n+      }\n   }\n \n   /**\n@@ -109,6 +137,8 @@ public void write (int oneChar) throws IOException\n   {\n     synchronized (lock)\n       {\n+\tif (buffer == null)\n+\t  throw new IOException (\"Stream closed\");\n \tbuffer[count++] = (char) oneChar;\n \tif (count == buffer.length)\n \t  localFlush ();\n@@ -135,6 +165,9 @@ public void write (char[] buf, int offset, int len) throws IOException\n \n     synchronized (lock)\n       {\n+\tif (buffer == null)\n+\t  throw new IOException (\"Stream closed\");\n+\n \t// Bypass buffering if there is too much incoming data.\n \tif (count + len > buffer.length)\n \t  {\n@@ -171,6 +204,9 @@ public void write (String str, int offset, int len) throws IOException\n \n     synchronized (lock)\n       {\n+\tif (buffer == null)\n+\t  throw new IOException (\"Stream closed\");\n+\n \tif (count + len > buffer.length)\n \t  {\n \t    localFlush ();"}, {"sha": "7bec5558a01bce04ee7ce113d69b3068de2583a7", "filename": "libjava/java/io/CharArrayWriter.java", "status": "modified", "additions": 44, "deletions": 15, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FCharArrayWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FCharArrayWriter.java?ref=39f90b7ce07ffa09df609ec724a22fe18606a668", "patch": "@@ -1,6 +1,6 @@\n // CharArrayWriter.java - Character array output stream.\n \n-/* Copyright (C) 1998, 1999  Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001  Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -35,18 +35,27 @@ public CharArrayWriter (int size)\n \n   public void close ()\n   {\n-    // JCL says this does nothing.  This seems to violate the Writer\n-    // contract, in that other methods should still throw and\n-    // IOException after a close.  Still, we just follow JCL.\n+    closed = true;\n   }\n \n-  public void flush ()\n+  public void flush () throws IOException\n   {\n+    synchronized (lock)\n+      {\n+\tif (closed)\n+\t  throw new IOException (\"Stream closed\");\n+      }\n   }\n \n-  public synchronized void reset ()\n+  public void reset ()\n   {\n-    count = 0;\n+    synchronized (lock)\n+      {\n+\tcount = 0;\n+\t// Allow this to reopen the stream.\n+\t// FIXME - what does the JDK do?\n+\tclosed = false;\n+      }\n   }\n \n   public int size ()\n@@ -56,40 +65,55 @@ public int size ()\n \n   public char[] toCharArray ()\n   {\n-    char[] nc = new char[count];\n-    System.arraycopy(buf, 0, nc, 0, count);\n-    return nc;\n+    synchronized (lock)\n+      {      \n+\tchar[] nc = new char[count];\n+\tSystem.arraycopy(buf, 0, nc, 0, count);\n+\treturn nc;\n+      }\n   }\n \n   public String toString ()\n   {\n-    return new String (buf, 0, count);\n+    synchronized (lock)\n+      {\n+\treturn new String (buf, 0, count);\n+      }\n   }\n \n-  public void write (int oneChar)\n+  public void write (int oneChar) throws IOException\n   {\n     synchronized (lock)\n       {\n+\tif (closed)\n+\t  throw new IOException (\"Stream closed\");\n+\n \tresize (1);\n \tbuf[count++] = (char) oneChar;\n       }\n   }\n \n-  public void write (char[] buffer, int offset, int len)\n+  public void write (char[] buffer, int offset, int len) throws IOException\n   {\n     synchronized (lock)\n       {\n+\tif (closed)\n+\t  throw new IOException (\"Stream closed\");\n+\n \tif (len >= 0)\n \t  resize (len);\n \tSystem.arraycopy(buffer, offset, buf, count, len);\n \tcount += len;\n       }\n   }\n \n-  public void write (String str, int offset, int len)\n+  public void write (String str, int offset, int len) throws IOException\n   {\n     synchronized (lock)\n       {\n+\tif (closed)\n+\t  throw new IOException (\"Stream closed\");\n+\n \tif (len >= 0)\n \t  resize (len);\n \tstr.getChars(offset, offset + len, buf, count);\n@@ -99,7 +123,10 @@ public void write (String str, int offset, int len)\n \n   public void writeTo (Writer out) throws IOException\n   {\n-    out.write(buf, 0, count);\n+    synchronized (lock)\n+      {\n+\tout.write(buf, 0, count);\n+      }\n   }\n \n   private final void resize (int len)\n@@ -119,4 +146,6 @@ private final void resize (int len)\n   protected char[] buf;\n   // Number of valid characters in buffer.\n   protected int count;\n+  // True if stream is closed.\n+  private boolean closed;\n }"}, {"sha": "527ff75c66b6d41c1ac2f682cddb3ae290d84626", "filename": "libjava/java/io/OutputStreamWriter.java", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FOutputStreamWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FOutputStreamWriter.java?ref=39f90b7ce07ffa09df609ec724a22fe18606a668", "patch": "@@ -86,6 +86,9 @@ public void write(char[] buf, int offset, int count)\n   {\n     synchronized (lock)\n       {\n+\tif (out == null)\n+\t  throw new IOException(\"Stream closed\");\n+\n \tif (wcount > 0)\n \t  {\n \t    writeChars(work, 0, wcount);\n@@ -100,9 +103,6 @@ public void write(char[] buf, int offset, int count)\n   private void writeChars(char[] buf, int offset, int count)\n     throws IOException\n   {\n-    if (out == null)\n-      throw new IOException(\"Stream closed\");\n-  \n     while (count > 0)\n       {\n \t// We must flush if out.count == out.buf.length.\n@@ -127,6 +127,9 @@ public void write(String str, int offset, int count)\n   {\n     synchronized (lock)\n       {\n+\tif (out == null)\n+\t  throw new IOException(\"Stream closed\");\n+\n \tif (work == null)\n \t  work = new char[100];\n \tint wlength = work.length;\n@@ -155,6 +158,9 @@ public void write(int ch) throws IOException\n   {\n     synchronized (lock)\n       {\n+\tif (out == null)\n+\t  throw new IOException(\"Stream closed\");\n+\n \tif (work == null)\n \t  work = new char[100];\n \tif (wcount >= work.length)"}, {"sha": "ebcbde783ec088d4468d59926ace0a00774e07a3", "filename": "libjava/java/io/PipedWriter.java", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FPipedWriter.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f90b7ce07ffa09df609ec724a22fe18606a668/libjava%2Fjava%2Fio%2FPipedWriter.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FPipedWriter.java?ref=39f90b7ce07ffa09df609ec724a22fe18606a668", "patch": "@@ -142,8 +142,10 @@ public void write(char[] b, int off, int len) throws IOException\n     *           had read all available data. Thats not the case - this method\n     *           appears to be a no-op?\n     */\n-  public void flush()\n+  public void flush() throws IOException\n   {\n+    if (closed)\n+      throw new IOException (\"Pipe closed\");\n   }\n   \n   /**"}]}