{"sha": "f64bedbd7d93173ad2077cd86d7af11064205a22", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjY0YmVkYmQ3ZDkzMTczYWQyMDc3Y2Q4NmQ3YWYxMTA2NDIwNWEyMg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-19T16:04:14Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "2000-04-19T16:04:14Z"}, "message": "conflict.c (conflict_graph_add): Pass enum type to htab_find_slot.\n\n\t* gcc/conflict.c (conflict_graph_add): Pass enum type to\n\thtab_find_slot.\n\t* gcc/cpperror.c (hashtab.h): Now include.\n\t* gcc/cppexp.c (hashtab.h): Likewise.\n\t* gcc/cpplex.c (hashtab.h): Likewise.\n\t* gcc/cppfiles.c (hashtab.h): Likewise.\n\t(find_include_file, _cpp_calc_hash, cpp_read_file): Pass enum type\n\tto htab_find_slot_with_hash.\n\t* gcc/cpphash.c (hashtab.h): Now include.\n\t(_cpp_lookup_slot): INSERT is now enum insert_option.\n\t* gcc/cpphash.h (_cpp_lookup_slot): Likewise.\n\t* gcc/cppinit.c (hashtab.h): Include earlier.\n\t(initialize_builtins): Pass enum to htab_find_slot.\n\t* gcc/cpplib.c (hashtab.h): Now include.\n\t(do_define, do_undef): Pass enum type to _cpp_lookup_slot.\n\t(do_pragma_poison, do_assert): Likewise.\n\t* gcc/emit-rtl.c (gen_rtx_CONST_INT): Pass enum to\n\thtab_find_slot_with_hash.\n\t* gcc/simplify-rtx.c (cselib_lookup_mem, cselib_lookup): Likewise.\n\t* gcc/tree.c (type_hash_add): Likewise.\n\t(build1): Minor cleanup.\n\t* include/hashtab.h (enum insert_option): New type.\n\t(htab_find_slot, htab_find_slot_with_hash): Use it.\n\t* libiberty/hashtab.c: Various minor cleanups.\n\t(htab_find_slot_with_hash): INSERT is now enum insert_option.\n\t(htab_find_slot): Likewise.\n\nFrom-SVN: r33260", "tree": {"sha": "46a87fa88d2c48f56935bac988649f280e0f74a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46a87fa88d2c48f56935bac988649f280e0f74a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f64bedbd7d93173ad2077cd86d7af11064205a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64bedbd7d93173ad2077cd86d7af11064205a22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f64bedbd7d93173ad2077cd86d7af11064205a22", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f64bedbd7d93173ad2077cd86d7af11064205a22/comments", "author": null, "committer": null, "parents": [{"sha": "456f6501a9a6476b2fa33940968f42521ffcfabc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/456f6501a9a6476b2fa33940968f42521ffcfabc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/456f6501a9a6476b2fa33940968f42521ffcfabc"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "3113aa7d8ad3efcf0b77b29ba148b091c31d21cd", "filename": "gcc/conflict.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64bedbd7d93173ad2077cd86d7af11064205a22/gcc%2Fconflict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64bedbd7d93173ad2077cd86d7af11064205a22/gcc%2Fconflict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconflict.c?ref=f64bedbd7d93173ad2077cd86d7af11064205a22", "patch": "@@ -206,7 +206,7 @@ conflict_graph_add (graph, reg1, reg2)\n \n   dummy.smaller = smaller;\n   dummy.larger = larger;\n-  slot = htab_find_slot (graph->arc_hash_table, (void *) &dummy, 1);\n+  slot = htab_find_slot (graph->arc_hash_table, (void *) &dummy, INSERT);\n   \n   /* If the conflict is already there, do nothing.  */\n   if (*slot != NULL)"}, {"sha": "7a04d49953a95436c0a2cfe2b1cc1e91b3738f9c", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f64bedbd7d93173ad2077cd86d7af11064205a22/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f64bedbd7d93173ad2077cd86d7af11064205a22/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=f64bedbd7d93173ad2077cd86d7af11064205a22", "patch": "@@ -3400,11 +3400,8 @@ build1 (code, type, node)\n   TREE_SET_PERMANENT (t);\n \n   TREE_OPERAND (t, 0) = node;\n-  if (node && first_rtl_op (code) != 0)\n-    {\n-      if (TREE_SIDE_EFFECTS (node))\n-\tTREE_SIDE_EFFECTS (t) = 1;\n-    }\n+  if (node && first_rtl_op (code) != 0 && TREE_SIDE_EFFECTS (node))\n+    TREE_SIDE_EFFECTS (t) = 1;\n \n   switch (code)\n     {\n@@ -4082,8 +4079,8 @@ type_hash_add (hashcode, type)\n   h = (struct type_hash *) permalloc (sizeof (struct type_hash));\n   h->hash = hashcode;\n   h->type = type;\n-  loc = htab_find_slot_with_hash (type_hash_table, h, hashcode, 1);\n-  *(struct type_hash**)loc = h;\n+  loc = htab_find_slot_with_hash (type_hash_table, h, hashcode, INSERT);\n+  *(struct type_hash**) loc = h;\n }\n \n /* Given TYPE, and HASHCODE its hash code, return the canonical"}]}