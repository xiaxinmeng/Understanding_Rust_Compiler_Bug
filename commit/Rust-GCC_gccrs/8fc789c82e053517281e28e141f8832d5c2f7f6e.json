{"sha": "8fc789c82e053517281e28e141f8832d5c2f7f6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZjNzg5YzgyZTA1MzUxNzI4MWUyOGUxNDFmODgzMmQ1YzJmN2Y2ZQ==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2008-03-24T17:48:07Z"}, "committer": {"name": "Ralf Wildenhues", "email": "rwild@gcc.gnu.org", "date": "2008-03-24T17:48:07Z"}, "message": "9drpc.adb, [...]: Fix comment typos.\n\n2008-03-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n\n\t* 9drpc.adb, a-caldel-vms.adb, a-caldel.adb,\n\ta-calend-vms.adb, a-calend.adb, a-calend.ads,\n\ta-calfor.adb, a-chahan.ads, a-chtgke.adb,\n\ta-cihama.ads, a-ciorse.adb, a-clrefi.ads,\n\ta-cohama.ads, a-comlin.ads, a-coorse.adb,\n\ta-crbtgk.adb, a-direct.adb, a-except-2005.adb,\n\ta-except-2005.ads, a-except.adb, a-except.ads,\n\ta-exexda.adb, a-exexpr-gcc.adb, a-exexpr.adb,\n\ta-exextr.adb, a-filico.ads, a-finali.ads,\n\ta-intnam-aix.ads, a-intnam-solaris.ads, a-ngcefu.adb,\n\ta-ngelfu.adb, a-numaux-darwin.adb, a-numeri.ads,\n\ta-sequio.ads, a-strbou.ads, a-strfix.adb,\n\tchecks.adb, exp_ch3.adb, exp_ch4.adb,\n\texp_ch4.ads, exp_ch5.adb, exp_ch6.adb,\n\texp_ch6.ads, exp_ch7.adb, exp_ch7.ads,\n\texp_ch9.adb, exp_ch9.ads, exp_dbug.adb,\n\texp_dbug.ads, exp_disp.adb, exp_dist.adb,\n\texp_dist.ads, exp_fixd.adb, exp_fixd.ads: Fix comment typos.\n\nFrom-SVN: r133483", "tree": {"sha": "89b2171703528d83f5a20ddb5bbf2e0adb78a9ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89b2171703528d83f5a20ddb5bbf2e0adb78a9ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fc789c82e053517281e28e141f8832d5c2f7f6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc789c82e053517281e28e141f8832d5c2f7f6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fc789c82e053517281e28e141f8832d5c2f7f6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fc789c82e053517281e28e141f8832d5c2f7f6e/comments", "author": null, "committer": null, "parents": [{"sha": "01b119402f3f7e1edf6e72ad00499ba1ff80cb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01b119402f3f7e1edf6e72ad00499ba1ff80cb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01b119402f3f7e1edf6e72ad00499ba1ff80cb8e"}], "stats": {"total": 381, "additions": 201, "deletions": 180}, "files": [{"sha": "a867313fc94401f66e7cf2e013ba419a318f4b6a", "filename": "gcc/ada/9drpc.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2F9drpc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2F9drpc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2F9drpc.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -81,7 +81,7 @@ package body System.RPC is\n    --  or when a write procedure is executed on a full stream\n \n    Partition_RPC_Receiver : RPC_Receiver;\n-   --  Cache the RPC_Recevier passed by Establish_RPC_Receiver\n+   --  Cache the RPC_Receiver passed by Establish_RPC_Receiver\n \n    type Anonymous_Task_Node;\n \n@@ -155,7 +155,7 @@ package body System.RPC is\n       entry Wake_Up\n         (Request : Request_Id_Type;\n          Length  : Ada.Streams.Stream_Element_Count);\n-      --  To wake up the calling stub when the environnement task has\n+      --  To wake up the calling stub when the environment task has\n       --  received a reply for this request\n \n    end Dispatcher;\n@@ -544,7 +544,7 @@ package body System.RPC is\n             New_Result : aliased Params_Stream_Type (R_Length);\n          begin\n             --  Adjust the Result stream size right now to be able to load\n-            --  the stream in one receive call. Create a temporary resutl\n+            --  the stream in one receive call. Create a temporary result\n             --  that will be substituted to Do_RPC one\n \n             Streams.Allocate (New_Result);\n@@ -728,7 +728,7 @@ package body System.RPC is\n                Request := Last_Request;\n \n                --  << TODO >>\n-               --  ??? Avaibility check\n+               --  ??? Availability check\n \n                if Last_Request = Request_Id_Type'Last then\n                   Last_Request := Request_Id_Type'First;\n@@ -867,7 +867,7 @@ package body System.RPC is\n                  (Header'Access,\n                   Streams.Get_Stream_Size (Result'Access));\n \n-               --  Get a protocol method to comunicate with the remote\n+               --  Get a protocol method to communicate with the remote\n                --  partition and give the message size\n \n                D (D_Communication,\n@@ -1010,7 +1010,7 @@ package body System.RPC is\n             Garbage_Collector.Allocate (Anonymous);\n \n             --  We subtracted the size of the header from the size of the\n-            --  global message in order to provide immediatly Params size\n+            --  global message in order to provide immediately Params size\n \n             Anonymous.Element.Start\n               (Message_Id,"}, {"sha": "9cfba05d2d15a798dcf29a0c718d0cc2e47acec6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -1,3 +1,24 @@\n+2008-03-24  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* 9drpc.adb, a-caldel-vms.adb, a-caldel.adb,\n+\ta-calend-vms.adb, a-calend.adb, a-calend.ads,\n+\ta-calfor.adb, a-chahan.ads, a-chtgke.adb,\n+\ta-cihama.ads, a-ciorse.adb, a-clrefi.ads,\n+\ta-cohama.ads, a-comlin.ads, a-coorse.adb,\n+\ta-crbtgk.adb, a-direct.adb, a-except-2005.adb,\n+\ta-except-2005.ads, a-except.adb, a-except.ads,\n+\ta-exexda.adb, a-exexpr-gcc.adb, a-exexpr.adb,\n+\ta-exextr.adb, a-filico.ads, a-finali.ads,\n+\ta-intnam-aix.ads, a-intnam-solaris.ads, a-ngcefu.adb,\n+\ta-ngelfu.adb, a-numaux-darwin.adb, a-numeri.ads,\n+\ta-sequio.ads, a-strbou.ads, a-strfix.adb,\n+\tchecks.adb, exp_ch3.adb, exp_ch4.adb,\n+\texp_ch4.ads, exp_ch5.adb, exp_ch6.adb,\n+\texp_ch6.ads, exp_ch7.adb, exp_ch7.ads,\n+\texp_ch9.adb, exp_ch9.ads, exp_dbug.adb,\n+\texp_dbug.ads, exp_disp.adb, exp_dist.adb,\n+\texp_dist.ads, exp_fixd.adb, exp_fixd.ads: Fix comment typos.\n+\n 2008-03-24  Robert Dewar  <dewar@adacore.com>\n \n \t* s-tpopsp-posix.adb, s-tpopsp-solaris.adb, s-tpopsp-posix-foreign.adb,"}, {"sha": "b58e17e39e6a4e6ea7288be199c01300a2f7269f", "filename": "gcc/ada/a-caldel-vms.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-caldel-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-caldel-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel-vms.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -90,7 +90,7 @@ begin\n    --  Set up the Timed_Delay soft link to the non tasking version if it has\n    --  not been already set.\n    --  If tasking is present, Timed_Delay has already set this soft link, or\n-   --  this will be overriden during the elaboration of\n+   --  this will be overridden during the elaboration of\n    --  System.Tasking.Initialization\n \n    if TSL.Timed_Delay = null then"}, {"sha": "d2b701e815f9978e22b7f70e8f0ddf5964774b96", "filename": "gcc/ada/a-caldel.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-caldel.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-caldel.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-caldel.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -54,7 +54,7 @@ package body Ada.Calendar.Delays is\n \n    use System.Traces;\n \n-   --  Earlier, System.Time_Opeations was used to implement the following\n+   --  Earlier, System.Time_Operations was used to implement the following\n    --  operations. The idea was to avoid sucking in the tasking packages. This\n    --  did not work. Logically, we can't have it both ways. There is no way to\n    --  implement time delays that will have correct task semantics without\n@@ -132,7 +132,7 @@ begin\n    --  not been already set.\n \n    --  If tasking is present, Timed_Delay has already set this soft link, or\n-   --  this will be overriden during the elaboration of\n+   --  this will be overridden during the elaboration of\n    --  System.Tasking.Initialization\n \n    if SSL.Timed_Delay = null then"}, {"sha": "89cda37c8f37aab8051a338674a00d05b9e3c733", "filename": "gcc/ada/a-calend-vms.adb", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend-vms.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -48,7 +48,7 @@ package body Ada.Calendar is\n \n    --  Because time is measured in different units and from different origins\n    --  on various targets, a system independent model is incorporated into\n-   --  Ada.Calendar. The idea behing the design is to encapsulate all target\n+   --  Ada.Calendar. The idea behind the design is to encapsulate all target\n    --  dependent machinery in a single package, thus providing a uniform\n    --  interface to all existing and any potential children.\n \n@@ -86,12 +86,12 @@ package body Ada.Calendar is\n       End_Date      : Time;\n       Elapsed_Leaps : out Natural;\n       Next_Leap_Sec : out Time);\n-   --  Elapsed_Leaps is the sum of the leap seconds that have occured on or\n+   --  Elapsed_Leaps is the sum of the leap seconds that have occurred on or\n    --  after Start_Date and before (strictly before) End_Date. Next_Leap_Sec\n-   --  represents the next leap second occurence on or after End_Date. If\n+   --  represents the next leap second occurrence on or after End_Date. If\n    --  there are no leaps seconds after End_Date, End_Of_Time is returned.\n    --  End_Of_Time can be used as End_Date to count all the leap seconds that\n-   --  have occured on or after Start_Date.\n+   --  have occurred on or after Start_Date.\n    --\n    --  Note: Any sub seconds of Start_Date and End_Date are discarded before\n    --  the calculations are done. For instance: if 113 seconds is a leap\n@@ -358,7 +358,7 @@ package body Ada.Calendar is\n \n       Next_Leap_Sec := End_Of_Time;\n \n-      --  Make sure that the end date does not excede the upper bound\n+      --  Make sure that the end date does not exceed the upper bound\n       --  of Ada time.\n \n       if End_Date > Ada_High then\n@@ -387,7 +387,7 @@ package body Ada.Calendar is\n       end if;\n \n       --  Perform the calculations only if the start date is within the leap\n-      --  second occurences table.\n+      --  second occurrences table.\n \n       if Start_T <= Leap_Second_Times (Leap_Seconds_Count) then\n \n@@ -449,12 +449,12 @@ package body Ada.Calendar is\n \n    function Is_Leap (Year : Year_Number) return Boolean is\n    begin\n-      --  Leap centenial years\n+      --  Leap centennial years\n \n       if Year mod 400 = 0 then\n          return True;\n \n-      --  Non-leap centenial years\n+      --  Non-leap centennial years\n \n       elsif Year mod 100 = 0 then\n          return False;"}, {"sha": "b897fa762ac7c49a0e9220c76623341e4fab6f92", "filename": "gcc/ada/a-calend.adb", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -85,12 +85,12 @@ package body Ada.Calendar is\n       End_Date      : Time_Rep;\n       Elapsed_Leaps : out Natural;\n       Next_Leap     : out Time_Rep);\n-   --  Elapsed_Leaps is the sum of the leap seconds that have occured on or\n+   --  Elapsed_Leaps is the sum of the leap seconds that have occurred on or\n    --  after Start_Date and before (strictly before) End_Date. Next_Leap_Sec\n-   --  represents the next leap second occurence on or after End_Date. If\n+   --  represents the next leap second occurrence on or after End_Date. If\n    --  there are no leaps seconds after End_Date, End_Of_Time is returned.\n    --  End_Of_Time can be used as End_Date to count all the leap seconds that\n-   --  have occured on or after Start_Date.\n+   --  have occurred on or after Start_Date.\n    --\n    --  Note: Any sub seconds of Start_Date and End_Date are discarded before\n    --  the calculations are done. For instance: if 113 seconds is a leap\n@@ -154,7 +154,7 @@ package body Ada.Calendar is\n \n    --  Lower and upper bound of Ada time. The zero (0) value of type Time is\n    --  positioned at year 2150. Note that the lower and upper bound account\n-   --  for the non-leap centenial years.\n+   --  for the non-leap centennial years.\n \n    Ada_Low  : constant Time_Rep := -(61 * 366 + 188 * 365) * Nanos_In_Day;\n    Ada_High : constant Time_Rep :=  (60 * 366 + 190 * 365) * Nanos_In_Day;\n@@ -391,7 +391,7 @@ package body Ada.Calendar is\n \n       Next_Leap := End_Of_Time;\n \n-      --  Make sure that the end date does not excede the upper bound\n+      --  Make sure that the end date does not exceed the upper bound\n       --  of Ada time.\n \n       if End_Date > Ada_High then\n@@ -420,7 +420,7 @@ package body Ada.Calendar is\n       end if;\n \n       --  Perform the calculations only if the start date is within the leap\n-      --  second occurences table.\n+      --  second occurrences table.\n \n       if Start_T <= Leap_Second_Times (Leap_Seconds_Count) then\n \n@@ -483,12 +483,12 @@ package body Ada.Calendar is\n \n    function Is_Leap (Year : Year_Number) return Boolean is\n    begin\n-      --  Leap centenial years\n+      --  Leap centennial years\n \n       if Year mod 400 = 0 then\n          return True;\n \n-      --  Non-leap centenial years\n+      --  Non-leap centennial years\n \n       elsif Year mod 100 = 0 then\n          return False;\n@@ -724,7 +724,7 @@ package body Ada.Calendar is\n \n          --  Difference processing. This operation should be able to calculate\n          --  the difference between opposite values which are close to the end\n-         --  and start of Ada time. To accomodate the large range, we convert\n+         --  and start of Ada time. To accommodate the large range, we convert\n          --  to seconds. This action may potentially round the two values and\n          --  either add or drop a second. We compensate for this issue in the\n          --  previous step.\n@@ -780,13 +780,13 @@ package body Ada.Calendar is\n          Res_N := Time_Rep (Date);\n \n          --  If the target supports leap seconds, remove any leap seconds\n-         --  elapsed upto the input date.\n+         --  elapsed up to the input date.\n \n          if Leap_Support then\n             Cumulative_Leap_Seconds\n               (Start_Of_Time, Res_N, Elapsed_Leaps, Next_Leap_N);\n \n-            --  The input time value may fall on a leap second occurence\n+            --  The input time value may fall on a leap second occurrence\n \n             if Res_N >= Next_Leap_N then\n                Elapsed_Leaps := Elapsed_Leaps + 1;\n@@ -899,7 +899,7 @@ package body Ada.Calendar is\n       is\n          --  The following constants represent the number of nanoseconds\n          --  elapsed since the start of Ada time to and including the non\n-         --  leap centenial years.\n+         --  leap centennial years.\n \n          Year_2101 : constant Time_Rep := Ada_Low +\n                        Time_Rep (49 * 366 + 151 * 365) * Nanos_In_Day;\n@@ -963,11 +963,11 @@ package body Ada.Calendar is\n             end;\n          end if;\n \n-         --  Step 3: Non-leap centenial year adjustment in local time zone\n+         --  Step 3: Non-leap centennial year adjustment in local time zone\n \n          --  In order for all divisions to work properly and to avoid more\n-         --  complicated arithmetic, we add fake Febriary 29s to dates which\n-         --  occur after a non-leap centenial year.\n+         --  complicated arithmetic, we add fake February 29s to dates which\n+         --  occur after a non-leap centennial year.\n \n          if Date_N >= Year_2301 then\n             Date_N := Date_N + Time_Rep (3) * Nanos_In_Day;\n@@ -1096,14 +1096,14 @@ package body Ada.Calendar is\n \n          Res_N := Ada_Low;\n \n-         --  Step 2: Year processing and centenial year adjustment. Determine\n+         --  Step 2: Year processing and centennial year adjustment. Determine\n          --  the number of four year segments since the start of Ada time and\n          --  the input date.\n \n          Count := (Year - Year_Number'First) / 4;\n          Res_N := Res_N + Time_Rep (Count) * Secs_In_Four_Years * Nano;\n \n-         --  Note that non-leap centenial years are automatically considered\n+         --  Note that non-leap centennial years are automatically considered\n          --  leap in the operation above. An adjustment of several days is\n          --  required to compensate for this.\n \n@@ -1236,7 +1236,7 @@ package body Ada.Calendar is\n                    Time_Rep (Leap_Seconds_Count) * Nano;\n \n       --  The following constants denote February 28 during non-leap\n-      --  centenial years, the units are nanoseconds.\n+      --  centennial years, the units are nanoseconds.\n \n       T_2100_2_28 : constant Time_Rep := Ada_Low +\n                       (Time_Rep (49 * 366 + 150 * 365 + 59) * Secs_In_Day +\n@@ -1307,8 +1307,8 @@ package body Ada.Calendar is\n       begin\n          Date_N := Time_Rep (Date);\n \n-         --  Dates which are 56 years appart fall on the same day, day light\n-         --  saving and so on. Non-leap centenial years violate this rule by\n+         --  Dates which are 56 years apart fall on the same day, day light\n+         --  saving and so on. Non-leap centennial years violate this rule by\n          --  one day and as a consequence, special adjustment is needed.\n \n          if Date_N > T_2100_2_28 then"}, {"sha": "2bacb9ba823fdcc953fc27d8e330105c53ce3379", "filename": "gcc/ada/a-calend.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -139,7 +139,7 @@ private\n \n    --  Time is represented as a signed 64 bit integer count of nanoseconds\n    --  since the start of Ada time (1901-01-01 00:00:00.0 UTC). Time values\n-   --  produced by Time_Of are internaly normalized to UTC regardless of their\n+   --  produced by Time_Of are internally normalized to UTC regardless of their\n    --  local time zone. This representation ensures correct handling of leap\n    --  seconds as well as performing arithmetic. In Ada 95, Split and Time_Of\n    --  will treat a time value as being in the local time zone, in Ada 2005,\n@@ -155,7 +155,7 @@ private\n    --  Due to Earth's slowdown, the astronomical time is not as precise as the\n    --  International Atomic Time. To compensate for this inaccuracy, a single\n    --  leap second is added after the last day of June or December. The count\n-   --  of seconds during those occurences becomes:\n+   --  of seconds during those occurrences becomes:\n \n    --    ... 58, 59, leap second 60, 0, 1, 2 ...\n \n@@ -183,16 +183,16 @@ private\n    --        aggregate generated by xleaps\n \n    --  The algorithms that build the actual leap second values and discover\n-   --  how many leap seconds have occured between two dates do not need any\n+   --  how many leap seconds have occurred between two dates do not need any\n    --  modification.\n \n    ------------------------------\n-   -- Non-leap centenial years --\n+   -- Non-leap centennial years --\n    ------------------------------\n \n-   --  Over the range of Ada time, centenial years 2100, 2200 and 2300 are\n+   --  Over the range of Ada time, centennial years 2100, 2200 and 2300 are\n    --  non-leap. As a consequence, seven non-leap years occur over the period\n-   --  of year - 4 to year + 4. Internaly, routines Split and Time_Of add or\n+   --  of year - 4 to year + 4. Internally, routines Split and Time_Of add or\n    --  subtract a \"fake\" February 29 to facilitate the arithmetic involved.\n \n    --  The underlying type of Time has been chosen to be a 64 bit signed"}, {"sha": "8d907ea73ea57d5503972f9874c0186ecca5fcd8", "filename": "gcc/ada/a-calfor.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calfor.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-calfor.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calfor.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -47,7 +47,7 @@ package body Ada.Calendar.Formatting is\n \n    procedure Check_Char (S : String; C : Character; Index : Integer);\n    --  Subsidiary to the two versions of Value. Determine whether the\n-   --  input strint S has character C at position Index. Raise\n+   --  input string S has character C at position Index. Raise\n    --  Constraint_Error if there is a mismatch.\n \n    procedure Check_Digit (S : String; Index : Integer);"}, {"sha": "3e38c1ad4659a24b496277ca2af19310ca42c268", "filename": "gcc/ada/a-chahan.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-chahan.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-chahan.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chahan.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -94,7 +94,7 @@ package Ada.Characters.Handling is\n    --  Ada 2005 AI 395: these functions are moved to Ada.Characters.Conversions\n    --  and are considered obsolete in Ada.Characters.Handling. However we do\n    --  not complain about this obsolescence, since in practice it is necessary\n-   --  to use these routines when creating code that is intended ro run in\n+   --  to use these routines when creating code that is intended to run in\n    --  either Ada 95 or Ada 2005 mode.\n \n    function Is_Character (Item : Wide_Character) return Boolean;\n@@ -107,7 +107,7 @@ package Ada.Characters.Handling is\n    --  Ada 2005 AI 395: these functions are moved to Ada.Characters.Conversions\n    --  and are considered obsolete in Ada.Characters.Handling. However we do\n    --  not complain about this obsolescence, since in practice it is necessary\n-   --  to use these routines when creating code that is intended ro run in\n+   --  to use these routines when creating code that is intended to run in\n    --  either Ada 95 or Ada 2005 mode.\n \n    function To_Character"}, {"sha": "b7b43024652c040a5ac5400f86d142b990936edf", "filename": "gcc/ada/a-chtgke.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-chtgke.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-chtgke.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgke.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -246,7 +246,7 @@ package body Ada.Containers.Hash_Tables.Generic_Keys is\n       end loop;\n \n       --  We have determined that Key is not already in the hash table, so\n-      --  the change is tenatively allowed. We now perform the standard\n+      --  the change is tentatively allowed. We now perform the standard\n       --  checks to determine whether the hash table is locked (because you\n       --  cannot change an element while it's in use by Query_Element or\n       --  Update_Element), or if the container is busy (because moving a"}, {"sha": "0cf2ef03eecc47520dfc66153a4a0296e426d7c6", "filename": "gcc/ada/a-cihama.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cihama.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -81,7 +81,7 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    procedure Reserve_Capacity (Container : in out Map; Capacity : Count_Type);\n    --  Adjusts the current capacity, by allocating a new buckets array. If the\n    --  requested capacity is less than the current capacity, then the capacity\n-   --  is contracted (to a value not less than the curent length). If the\n+   --  is contracted (to a value not less than the current length). If the\n    --  requested capacity is greater than the current capacity, then the\n    --  capacity is expanded (to a value not less than what is requested). In\n    --  either case, the nodes are rehashed from the old buckets array onto the\n@@ -191,7 +191,7 @@ package Ada.Containers.Indefinite_Hashed_Maps is\n    procedure Delete (Container : in out Map; Key : Key_Type);\n    --  Searches for Key in the map (which involves calling both Hash and\n    --  Equivalent_Keys). If the search fails, then the operation raises\n-   --  Constraint_Eror. Otherwise it removes the node from the map and then\n+   --  Constraint_Error. Otherwise it removes the node from the map and then\n    --  deallocates it. (This is the deletion analog of non-conditional\n    --  Insert. It is intended for use when you want to assert that the item is\n    --  already in the map.)"}, {"sha": "e4427511bca3fb9fe2b1963c309a28073fc69dee", "filename": "gcc/ada/a-ciorse.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ciorse.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -1176,7 +1176,7 @@ package body Ada.Containers.Indefinite_Ordered_Sets is\n       T : Tree_Type renames Container.Tree'Unrestricted_Access.all;\n       B : Natural renames T.Busy;\n \n-   --  Start of prccessing for Iterate\n+   --  Start of processing for Iterate\n \n    begin\n       B := B + 1;"}, {"sha": "e75a2ffde56146e040cbc3d84ecc34f1d683223b", "filename": "gcc/ada/a-clrefi.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-clrefi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-clrefi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-clrefi.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -82,7 +82,7 @@ package Ada.Command_Line.Response_File is\n    --  response file.\n    --\n    --  Each non empty line of the response file contains one or several\n-   --  arguments sparated by white space. Empty lines or lines containing only\n+   --  arguments separated by white space. Empty lines or lines containing only\n    --  white space are ignored. Arguments containing white space or a double\n    --  quote ('\"')must be quoted. A double quote inside a quote string is\n    --  indicated by two consecutive double quotes. Example: \"-Idir with quote"}, {"sha": "dd4ebb15ca34d6190f6be1772197c8654543538e", "filename": "gcc/ada/a-cohama.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cohama.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -81,7 +81,7 @@ package Ada.Containers.Hashed_Maps is\n    procedure Reserve_Capacity (Container : in out Map; Capacity : Count_Type);\n    --  Adjusts the current capacity, by allocating a new buckets array. If the\n    --  requested capacity is less than the current capacity, then the capacity\n-   --  is contracted (to a value not less than the curent length). If the\n+   --  is contracted (to a value not less than the current length). If the\n    --  requested capacity is greater than the current capacity, then the\n    --  capacity is expanded (to a value not less than what is requested). In\n    --  either case, the nodes are rehashed from the old buckets array onto the\n@@ -199,7 +199,7 @@ package Ada.Containers.Hashed_Maps is\n    procedure Delete (Container : in out Map; Key : Key_Type);\n    --  Searches for Key in the map (which involves calling both Hash and\n    --  Equivalent_Keys). If the search fails, then the operation raises\n-   --  Constraint_Eror. Otherwise it removes the node from the map and then\n+   --  Constraint_Error. Otherwise it removes the node from the map and then\n    --  deallocates it. (This is the deletion analog of non-conditional\n    --  Insert. It is intended for use when you want to assert that the item is\n    --  already in the map.)"}, {"sha": "3945860d94cc238f8b9492a08863924e25179e95", "filename": "gcc/ada/a-comlin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-comlin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-comlin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-comlin.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -110,7 +110,7 @@ private\n    Failure : constant Exit_Status := 1;\n \n    --  The following locations support the operation of the package\n-   --  Ada.Command_Line.Remove, whih provides facilities for logically\n+   --  Ada.Command_Line.Remove, which provides facilities for logically\n    --  removing arguments from the command line. If one of the remove\n    --  procedures is called in this unit, then Remove_Args/Remove_Count\n    --  are set to indicate which arguments are removed. If no such calls"}, {"sha": "2016d18c035e2f77efb0811476abe8a1dfd55329", "filename": "gcc/ada/a-coorse.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coorse.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -47,7 +47,7 @@ package body Ada.Containers.Ordered_Sets is\n    ------------------------------\n \n    --  These subprograms provide functional notation for access to fields\n-   --  of a node, and procedural notation for modifiying these fields.\n+   --  of a node, and procedural notation for modifying these fields.\n \n    function Color (Node : Node_Access) return Color_Type;\n    pragma Inline (Color);\n@@ -1103,7 +1103,7 @@ package body Ada.Containers.Ordered_Sets is\n       T : Tree_Type renames Container.Tree'Unrestricted_Access.all;\n       B : Natural renames T.Busy;\n \n-   --  Start of prccessing for Iterate\n+   --  Start of processing for Iterate\n \n    begin\n       B := B + 1;"}, {"sha": "022232c5218a29db87f256b88d8bb61b11099395", "filename": "gcc/ada/a-crbtgk.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-crbtgk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-crbtgk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-crbtgk.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -184,7 +184,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       --  is not a search and the only comparisons that occur are with\n       --  the hint and its neighbor.\n \n-      --  If Position is null, this is intepreted to mean that Key is\n+      --  If Position is null, this is interpreted to mean that Key is\n       --  large relative to the nodes in the tree. If the tree is empty,\n       --  or Key is greater than the last node in the tree, then we're\n       --  done; otherwise the hint was \"wrong\" and we must search.\n@@ -506,7 +506,7 @@ package body Ada.Containers.Red_Black_Trees.Generic_Keys is\n       --  equivalent node. That wouldn't break any container invariants,\n       --  but our rule above says that new nodes always get inserted\n       --  after equivalent nodes. So here we test whether Key is both\n-      --  less than the hint and and equal to or greater than the hint's\n+      --  less than the hint and equal to or greater than the hint's\n       --  previous neighbor, and if so insert it before the hint.\n \n       if Is_Less_Key_Node (Key, Hint) then"}, {"sha": "ea7f02c008da33fe63492dae47a73b4c17eb507a", "filename": "gcc/ada/a-direct.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-direct.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-direct.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-direct.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -827,7 +827,7 @@ package body Ada.Directories is\n          raise Status_Error;\n \n       else\n-         --  Reset Entry_Fatched and return the entry\n+         --  Reset Entry_Fetched and return the entry\n \n          Search.Value.Entry_Fetched := False;\n          Directory_Entry := Search.Value.Dir_Entry;"}, {"sha": "0994d201402282219e43c4143868d322c05fe128", "filename": "gcc/ada/a-except-2005.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except-2005.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except-2005.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -398,7 +398,7 @@ package body Ada.Exceptions is\n    --  is deferred before the reraise operation.\n \n    --  Save_Occurrence variations: As the management of the private data\n-   --  attached to occurrences is delicate, wether or not pointers to such\n+   --  attached to occurrences is delicate, whether or not pointers to such\n    --  data has to be copied in various situations is better made explicit.\n    --  The following procedures provide an internal interface to help making\n    --  this explicit."}, {"sha": "62135090d99d52c3d9c2f0e2c53129b4dec6e6c6", "filename": "gcc/ada/a-except-2005.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except-2005.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except-2005.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except-2005.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -239,7 +239,7 @@ private\n    procedure Raise_From_Controlled_Operation\n      (X : Ada.Exceptions.Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n-   --  Raise Program_Error, proviving information about X (an exception\n+   --  Raise Program_Error, providing information about X (an exception\n    --  raised during a controlled operation) in the exception message.\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n@@ -270,7 +270,7 @@ private\n    --  purposes (e.g. implementing watchpoints in software or in the debugger).\n \n    --  In the GNAT technology itself, this interface is used to implement\n-   --  immediate aynschronous transfer of control and immediate abort on\n+   --  immediate asynchronous transfer of control and immediate abort on\n    --  targets which do not provide for one thread interrupting another.\n \n    --  Note: this used to be in a separate unit called System.Poll, but that"}, {"sha": "60f59952770966f2f4cd8da35f0a1c7d04dd70fa", "filename": "gcc/ada/a-except.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -39,7 +39,7 @@\n --  builds may be done with bootstrap compilers that cannot handle these\n --  additions. The full version of Ada.Exceptions can be found in the files\n --  a-except-2005.ads/adb, and is used for all other builds where full Ada\n---  2005 functionality is required. in particular, it is used for building\n+--  2005 functionality is required. In particular, it is used for building\n --  run times on all targets.\n \n pragma Warnings (Off);\n@@ -353,7 +353,7 @@ package body Ada.Exceptions is\n    --  is deferred before the reraise operation.\n \n    --  Save_Occurrence variations: As the management of the private data\n-   --  attached to occurrences is delicate, wether or not pointers to such\n+   --  attached to occurrences is delicate, whether or not pointers to such\n    --  data has to be copied in various situations is better made explicit.\n    --  The following procedures provide an internal interface to help making\n    --  this explicit."}, {"sha": "f01d1769029d81e7902d071521d301d203bb38ff", "filename": "gcc/ada/a-except.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-except.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -43,7 +43,7 @@\n --  builds may be done with bootstrap compilers that cannot handle these\n --  additions. The full version of Ada.Exceptions can be found in the files\n --  a-except-2005.ads/adb, and is used for all other builds where full Ada\n---  2005 functionality is required. in particular, it is used for building\n+--  2005 functionality is required. In particular, it is used for building\n --  run times on all targets.\n \n pragma Polling (Off);\n@@ -209,7 +209,7 @@ private\n    procedure Raise_From_Controlled_Operation\n      (X : Ada.Exceptions.Exception_Occurrence);\n    pragma No_Return (Raise_From_Controlled_Operation);\n-   --  Raise Program_Error, proviving information about X (an exception\n+   --  Raise Program_Error, providing information about X (an exception\n    --  raised during a controlled operation) in the exception message.\n \n    procedure Reraise_Occurrence_Always (X : Exception_Occurrence);\n@@ -240,7 +240,7 @@ private\n    --  purposes (e.g. implementing watchpoints in software or in the debugger).\n \n    --  In the GNAT technology itself, this interface is used to implement\n-   --  immediate aynschronous transfer of control and immediate abort on\n+   --  immediate asynchronous transfer of control and immediate abort on\n    --  targets which do not provide for one thread interrupting another.\n \n    --  Note: this used to be in a separate unit called System.Poll, but that"}, {"sha": "94f4897f3ef5cac61141a322a12f27b17ceff707", "filename": "gcc/ada/a-exexda.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexda.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -186,7 +186,7 @@ package body Exception_Data is\n    function Basic_Exception_Traceback\n      (X : Exception_Occurrence) return String;\n    --  Returns an image of the complete call chain associated with an\n-   --  exception occurence in its most basic form, that is as a raw sequence\n+   --  exception occurrence in its most basic form, that is as a raw sequence\n    --  of hexadecimal binary addresses.\n \n    function Tailored_Exception_Traceback\n@@ -327,7 +327,7 @@ package body Exception_Data is\n       Ptr  : in out Natural)\n    is\n       Name : String (1 .. Exception_Name_Length (X));\n-      --  Bufer in which to fetch the exception name, in order to check\n+      --  Buffer in which to fetch the exception name, in order to check\n       --  whether this is an internal _ABORT_SIGNAL or a regular occurrence.\n \n       Name_Ptr : Natural := Name'First - 1;"}, {"sha": "ae6e0f7b66f97ad04348da18315188f6585a58d4", "filename": "gcc/ada/a-exexpr-gcc.adb", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexpr-gcc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexpr-gcc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr-gcc.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -47,7 +47,7 @@ package body Exception_Propagation is\n \n    --  These come from \"C++ ABI for Itanium: Exception handling\", which is\n    --  the reference for GCC. They are used only when we are relying on\n-   --  back-end tables for exception propagation, which in turn is currenly\n+   --  back-end tables for exception propagation, which in turn is currently\n    --  only the case for Zero_Cost_Exceptions in GNAT5.\n \n    --  Return codes from the GCC runtime functions used to propagate\n@@ -132,7 +132,7 @@ package body Exception_Propagation is\n       Id : Exception_Id;\n       --  GNAT Exception identifier.  This is filled by Propagate_Exception\n       --  and then used by the personality routine to determine if the context\n-      --  it examines contains a handler for the exception beeing propagated.\n+      --  it examines contains a handler for the exception being propagated.\n \n       N_Cleanups_To_Trigger : Integer;\n       --  Number of cleanup only frames encountered in SEARCH phase.  This is\n@@ -160,8 +160,8 @@ package body Exception_Propagation is\n    --  by the personality routine through the accessors declared below.  Ada\n    --  specific fields are thus always accessed through consistent layout, and\n    --  we expect the actual alignment to always be large enough to avoid traps\n-   --  from the C accesses to the common header. Besides, accessors aleviate\n-   --  the need for a C struct whole conterpart, both painful and errorprone\n+   --  from the C accesses to the common header. Besides, accessors alleviate\n+   --  the need for a C struct whole counterpart, both painful and error-prone\n    --  to maintain anyway.\n \n    type GNAT_GCC_Exception_Access is access all GNAT_GCC_Exception;\n@@ -670,7 +670,7 @@ package body Exception_Propagation is\n    -----------\n \n    --  The current model implemented for the stack of occurrences is a\n-   --  simplification of previous attempts, which all prooved to be flawed or\n+   --  simplification of previous attempts, which all proved to be flawed or\n    --  would have needed significant additional circuitry to be made to work\n    --  correctly.\n \n@@ -685,7 +685,7 @@ package body Exception_Propagation is\n    --  interface.\n \n    --  The basic point is that arranging for an occurrence to always appear at\n-   --  most once on the stack requires a way to determine if a given occurence\n+   --  most once on the stack requires a way to determine if a given occurrence\n    --  is already there, which is not as easy as it might seem.\n \n    --  An attempt was made to use the Private_Data pointer for this purpose.\n@@ -725,7 +725,7 @@ package body Exception_Propagation is\n    --  but making this to work while still avoiding memory leaks is far\n    --  from trivial.\n \n-   --  The current scheme has the advantage of beeing simple, and induces\n+   --  The current scheme has the advantage of being simple, and induces\n    --  extra costs only in reraise cases which is acceptable.\n \n end Exception_Propagation;"}, {"sha": "6ad6d4ead364f4993ff95c925ab2cee0c4ac4a28", "filename": "gcc/ada/a-exexpr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexpr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exexpr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exexpr.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -58,7 +58,7 @@ package body Exception_Propagation is\n    is\n       pragma Unreferenced (Excep, Current, Reraised);\n    begin\n-      --  In the GNAT-SJLJ case this \"stack\" only exists implicitely, by way of\n+      --  In the GNAT-SJLJ case this \"stack\" only exists implicitly, by way of\n       --  local occurrence declarations together with save/restore operations\n       --  generated by the front-end, and this routine has nothing to do.\n "}, {"sha": "e9fa3e0ddec1f7f81f4ee2b949f6cb541a905eac", "filename": "gcc/ada/a-exextr.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exextr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-exextr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-exextr.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -208,7 +208,7 @@ package body Exception_Traces is\n    --  the termination routine. Avoiding the second output is possible but so\n    --  far has been considered undesirable. It would mean changing the order\n    --  of outputs between the two runs with or without exception traces, while\n-   --  it seems preferrable to only have additional outputs in the former\n+   --  it seems preferable to only have additional outputs in the former\n    --  case.\n \n end Exception_Traces;"}, {"sha": "ee7c8ce28ad2f3d44d820968020bd6de4d53b8f2", "filename": "gcc/ada/a-filico.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-filico.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-filico.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-filico.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -58,7 +58,7 @@ package Ada.Finalization.List_Controller is\n    -- List_Controller --\n    ---------------------\n \n-   --  Management of a bidirectional linked heterogenous list of\n+   --  Management of a bidirectional linked heterogeneous list of\n    --  dynamically Allocated objects. To simplify the management of the\n    --  linked list, the First and Last elements are statically part of the\n    --  original List controller:"}, {"sha": "122eeb3f4039096a77fe6458d87e9c8dacb062f8", "filename": "gcc/ada/a-finali.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-finali.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-finali.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-finali.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -64,7 +64,7 @@ private\n    type Controlled is abstract new SFR.Root_Controlled with null record;\n \n    function \"=\" (A, B : Controlled) return Boolean;\n-   --  Need to be defined explictly because we don't want to compare the\n+   --  Need to be defined explicitly because we don't want to compare the\n    --  hidden pointers\n \n    type Limited_Controlled is"}, {"sha": "12287066f61e92c4636b055ee4154090fcf9ec81", "filename": "gcc/ada/a-intnam-aix.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-intnam-aix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-intnam-aix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-aix.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -189,7 +189,7 @@ package Ada.Interrupts.Names is\n      System.OS_Interface.SIGGRANT;    -- monitor mode granted\n \n    SIGRETRACT : constant Interrupt_ID :=\n-     System.OS_Interface.SIGRETRACT;  -- monitor mode should be relinguished\n+     System.OS_Interface.SIGRETRACT;  -- monitor mode should be relinquished\n \n    SIGSOUND : constant Interrupt_ID :=\n      System.OS_Interface.SIGSOUND;    -- sound control has completed"}, {"sha": "6842d68f9005c290d7ec3fbb85ce0635dcb31f08", "filename": "gcc/ada/a-intnam-solaris.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-intnam-solaris.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-intnam-solaris.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-intnam-solaris.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -41,7 +41,7 @@\n --  The following signals are reserved by the run time (FSU threads):\n \n --  SIGFPE, SIGILL, SIGSEGV, SIGBUS, SIGTRAP, SIGTERM, SIGABRT, SIGINT,\n---  SIGLWP, SIGALRM, SIGVTALRM, SIGAITING, SIGSTOP, SIGKILL\n+--  SIGLWP, SIGALRM, SIGVTALRM, SIGWAITING, SIGSTOP, SIGKILL\n \n --  The pragma Unreserve_All_Interrupts affects the following signal(s):\n "}, {"sha": "98a2c769d052d7dfe4ef23338220e287bec69b39", "filename": "gcc/ada/a-ngcefu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ngcefu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ngcefu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngcefu.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -247,7 +247,7 @@ package body Ada.Numerics.Generic_Complex_Elementary_Functions is\n    end Arccot;\n \n    --------------\n-   -- Arctcoth --\n+   -- Arccoth --\n    --------------\n \n    function Arccoth (X : Complex) return Complex is"}, {"sha": "849d44dec8a7e52bf9dda1cb279a7ba120374d57", "filename": "gcc/ada/a-ngelfu.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ngelfu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-ngelfu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ngelfu.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -73,7 +73,7 @@ package body Ada.Numerics.Generic_Elementary_Functions is\n      (Y    : Float_Type'Base;\n       X    : Float_Type'Base := 1.0)\n       return Float_Type'Base;\n-   --  Common code for arc tangent after cyele reduction\n+   --  Common code for arc tangent after cycle reduction\n \n    ----------\n    -- \"**\" --"}, {"sha": "a631f9abf75fee80594143b1f4b962428779b663", "filename": "gcc/ada/a-numaux-darwin.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-numaux-darwin.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-numaux-darwin.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numaux-darwin.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -32,7 +32,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  File a-numaux.adb <- a-numaux-d arwin.adb\n+--  File a-numaux.adb <- a-numaux-darwin.adb\n \n package body Ada.Numerics.Aux is\n \n@@ -45,7 +45,7 @@ package body Ada.Numerics.Aux is\n    --  result in the range 0 .. 3. The absolute value of X is at most Pi/4.\n \n    --  The following three functions implement Chebishev approximations\n-   --  of the trigoniometric functions in their reduced domain.\n+   --  of the trigonometric functions in their reduced domain.\n    --  These approximations have been computed using Maple.\n \n    function Sine_Approx (X : Double) return Double;"}, {"sha": "805fa5670ba78d0501e3020d38e8c975f6a3bc23", "filename": "gcc/ada/a-numeri.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-numeri.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-numeri.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-numeri.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -22,7 +22,7 @@ package Ada.Numerics is\n           3.14159_26535_89793_23846_26433_83279_50288_41971_69399_37511;\n \n    [\"03C0\"] : constant := Pi;\n-   --  This is the greek letter Pi (for Ada 2005 AI-388). Note that it is\n+   --  This is the Greek letter Pi (for Ada 2005 AI-388). Note that it is\n    --  conforming to have this constant present even in Ada 95 mode, as there\n    --  is no way for a normal mode Ada 95 program to reference this identifier.\n "}, {"sha": "6d3b7d2b2ac2c285fd23b6f2557ace66f31dff09", "filename": "gcc/ada/a-sequio.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-sequio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-sequio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-sequio.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -57,7 +57,7 @@ package Ada.Sequential_IO is\n    --  used in this package and System.File_IO.\n \n    for File_Mode use\n-     (In_File     => 0,  -- System.FIle_IO.File_Mode'Pos (In_File)\n+     (In_File     => 0,  -- System.File_IO.File_Mode'Pos (In_File)\n       Out_File    => 2,  -- System.File_IO.File_Mode'Pos (Out_File)\n       Append_File => 3); -- System.File_IO.File_Mode'Pos (Append_File)\n "}, {"sha": "13f51a4e81ec2972e41f418b28d33fcf3f3b7fea", "filename": "gcc/ada/a-strbou.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-strbou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-strbou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strbou.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -456,7 +456,7 @@ package Ada.Strings.Bounded is\n       --  is at least one Bounded_String argument from which the maximum\n       --  length can be obtained. For all such routines, the implementation\n       --  in this private part is simply a renaming of the corresponding\n-      --  routine in the super bouded package.\n+      --  routine in the superbounded package.\n \n       --  The five exceptions are the * and Replicate routines operating on\n       --  character values. For these cases, we have a routine in the body"}, {"sha": "7b2fbcdf31bb6efa30608949ce9e535c0b22bf77", "filename": "gcc/ada/a-strfix.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-strfix.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fa-strfix.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-strfix.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -36,7 +36,7 @@\n --  of Is_In, so that we are not dependent on inlining. Note that the search\n --  function implementations are to be found in the auxiliary package\n --  Ada.Strings.Search. Also the Move procedure is directly incorporated (ADAR\n---  used a subunit for this procedure). number of errors having to do with\n+--  used a subunit for this procedure). The number of errors having to do with\n --  bounds of function return results were also fixed, and use of & removed for\n --  efficiency reasons.\n "}, {"sha": "0af10a6b1d6ab9bf05308630ac4f9cabdd6514d3", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -2744,7 +2744,7 @@ package body Checks is\n \n       --  Check that a null-excluding component, formal or object is not\n       --  being assigned a null value. Otherwise generate a warning message\n-      --  and replace Expression (N) by a N_Contraint_Error node.\n+      --  and replace Expression (N) by a N_Constraint_Error node.\n \n       if K /= N_Function_Specification then\n          Expr := Expression (N);"}, {"sha": "046a98556aa525306494bbe6c4a977339b6957bc", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -4733,7 +4733,7 @@ package body Exp_Ch3 is\n                    or else Is_Tag (Defining_Identifier (First_Comp))\n \n                --  Ada 2005 (AI-251): The following condition covers secondary\n-               --  tags but also the adjacent component contanining the offset\n+               --  tags but also the adjacent component containing the offset\n                --  to the base of the object (component generated if the parent\n                --  has discriminants --- see Add_Interface_Tag_Components).\n                --  This is required to avoid the addition of the controller\n@@ -6431,7 +6431,7 @@ package body Exp_Ch3 is\n                   Warning_Needed := True;\n \n                else\n-                  --  Verify that at least one component has an initializtion\n+                  --  Verify that at least one component has an initialization\n                   --  expression. No need for a warning on a type if all its\n                   --  components have no initialization.\n "}, {"sha": "dbec81fb5050ca18ecdd836f9d529bbc4a732fd9", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -134,7 +134,7 @@ package body Exp_Ch4 is\n    --  Local recursive function used to expand equality for nested\n    --  composite types. Used by Expand_Record/Array_Equality, Bodies\n    --  is a list on which to attach bodies of local functions that are\n-   --  created in the process. This is the responsability of the caller\n+   --  created in the process. This is the responsibility of the caller\n    --  to insert those bodies at the right place. Nod provides the Sloc\n    --  value for generated code. Lhs and Rhs are the left and right sides\n    --  for the comparison, and Typ is the type of the arrays to compare.\n@@ -147,7 +147,7 @@ package body Exp_Ch4 is\n \n    procedure Expand_Concatenate_String (Cnode : Node_Id; Opnds : List_Id);\n    --  Routine to expand concatenation of 2-5 operands (in the list Operands)\n-   --  and replace node Cnode with the result of the contatenation. If there\n+   --  and replace node Cnode with the result of the concatenation. If there\n    --  are two operands, they can be string or character. If there are more\n    --  than two operands, then are always of type string (i.e. the caller has\n    --  already converted character operands to strings in this case).\n@@ -440,7 +440,7 @@ package body Exp_Ch4 is\n          --  implement the target interface. This case corresponds with the\n          --  following example:\n \n-         --   function Op (Obj : Iface_1'Class) return access Ifac_2e'Class is\n+         --   function Op (Obj : Iface_1'Class) return access Iface_2'Class is\n          --   begin\n          --      return new Iface_2'Class'(Obj);\n          --   end Op;\n@@ -581,7 +581,7 @@ package body Exp_Ch4 is\n          --  call to a build-in-place function, then access to the allocated\n          --  object must be passed to the function. Currently we limit such\n          --  functions to those with constrained limited result subtypes,\n-         --  but eventually we plan to expand the allowed forms of funtions\n+         --  but eventually we plan to expand the allowed forms of functions\n          --  that are treated as build-in-place.\n \n          if Ada_Version >= Ada_05\n@@ -762,7 +762,7 @@ package body Exp_Ch4 is\n \n                --  Generate an additional object containing the address of the\n                --  returned object. The type of this second object declaration\n-               --  is the correct type required for the common proceessing\n+               --  is the correct type required for the common processing\n                --  that is still performed by this subprogram. The displacement\n                --  of this pointer to reference the component associated with\n                --  the interface type will be done at the end of the common\n@@ -1025,7 +1025,7 @@ package body Exp_Ch4 is\n          --  call to a build-in-place function, then access to the allocated\n          --  object must be passed to the function. Currently we limit such\n          --  functions to those with constrained limited result subtypes,\n-         --  but eventually we plan to expand the allowed forms of funtions\n+         --  but eventually we plan to expand the allowed forms of functions\n          --  that are treated as build-in-place.\n \n          if Ada_Version >= Ada_05\n@@ -2143,7 +2143,7 @@ package body Exp_Ch4 is\n \n    --  Let n be the number of array operands to be concatenated, Base_Typ\n    --  their base type, Ind_Typ their index type, and Arr_Typ the original\n-   --  array type to which the concatenantion operator applies, then the\n+   --  array type to which the concatenation operator applies, then the\n    --  following subprogram is constructed:\n \n    --  [function Cnn (S1 : Base_Typ; ...; Sn : Base_Typ) return Base_Typ is\n@@ -2676,7 +2676,7 @@ package body Exp_Ch4 is\n \n       --  Note that this does *not* fix the array concatenation bug when the\n       --  low bound is Integer'first sibce that bug comes from the pointer\n-      --  dereferencing an unconstrained array. An there we need a constraint\n+      --  dereferencing an unconstrained array. And there we need a constraint\n       --  check to make sure the length of the concatenated array is ok. ???\n \n       Insert_Action (Cnode, Func_Body, Suppress => All_Checks);\n@@ -2794,7 +2794,7 @@ package body Exp_Ch4 is\n \n       procedure Rewrite_Coextension (N : Node_Id);\n       --  Static coextensions have the same lifetime as the entity they\n-      --  constrain. Such occurences can be rewritten as aliased objects\n+      --  constrain. Such occurrences can be rewritten as aliased objects\n       --  and their unrestricted access used instead of the coextension.\n \n       ---------------------------------------\n@@ -3081,7 +3081,7 @@ package body Exp_Ch4 is\n          Desig := Subtype_Mark (Expression (N));\n \n          --  If context is constrained, use constrained subtype directly,\n-         --  so that the constant is not labelled as having a nomimally\n+         --  so that the constant is not labelled as having a nominally\n          --  unconstrained subtype.\n \n          if Entity (Desig) = Base_Type (Dtyp) then\n@@ -3136,7 +3136,7 @@ package body Exp_Ch4 is\n \n       --  If the allocator is for a type which requires initialization, and\n       --  there is no initial value (i.e. operand is a subtype indication\n-      --  rather than a qualifed expression), then we must generate a call\n+      --  rather than a qualified expression), then we must generate a call\n       --  to the initialization routine. This is done using an expression\n       --  actions node:\n \n@@ -4136,7 +4136,7 @@ package body Exp_Ch4 is\n       end if;\n \n       --  For packed arrays that are not bit-packed (i.e. the case of an array\n-      --  with one or more index types with a non-coniguous enumeration type),\n+      --  with one or more index types with a non-contiguous enumeration type),\n       --  we can always use the normal packed element get circuit.\n \n       if not Is_Bit_Packed_Array (Etype (Prefix (N))) then\n@@ -4254,12 +4254,12 @@ package body Exp_Ch4 is\n               Right_Opnd => Right_Opnd (N))));\n \n       --  We want this to appear as coming from source if original does (see\n-      --  tranformations in Expand_N_In).\n+      --  transformations in Expand_N_In).\n \n       Set_Comes_From_Source (N, Cfs);\n       Set_Comes_From_Source (Right_Opnd (N), Cfs);\n \n-      --  Now analyze tranformed node\n+      --  Now analyze transformed node\n \n       Analyze_And_Resolve (N, Typ);\n    end Expand_N_Not_In;\n@@ -4750,7 +4750,7 @@ package body Exp_Ch4 is\n       --  inherited.\n \n       function Has_Unconstrained_UU_Component (Typ : Node_Id) return Boolean;\n-      --  Determines whether a type has a subcompoment of an unconstrained\n+      --  Determines whether a type has a subcomponent of an unconstrained\n       --  Unchecked_Union subtype. Typ is a record type.\n \n       -------------------------\n@@ -5041,7 +5041,7 @@ package body Exp_Ch4 is\n             begin\n                while Present (Comp) loop\n \n-                  --  One component is sufficent\n+                  --  One component is sufficient\n \n                   if Component_Is_Unconstrained_UU (Comp) then\n                      return True;\n@@ -5061,7 +5061,7 @@ package body Exp_Ch4 is\n             begin\n                while Present (Variant) loop\n \n-                  --  One component within a variant is sufficent\n+                  --  One component within a variant is sufficient\n \n                   if Variant_Is_Unconstrained_UU (Variant) then\n                      return True;\n@@ -5302,7 +5302,7 @@ package body Exp_Ch4 is\n               (TSS (Root_Type (Typl), TSS_Composite_Equality));\n \n          --  Otherwise expand the component by component equality. Note that\n-         --  we never use block-bit coparisons for records, because of the\n+         --  we never use block-bit comparisons for records, because of the\n          --  problems with gaps. The backend will often be able to recombine\n          --  the separate comparisons that we generate here.\n \n@@ -6538,7 +6538,7 @@ package body Exp_Ch4 is\n          return;\n       end if;\n \n-      --  Arithemtic overflow checks for signed integer/fixed point types\n+      --  Arithmetic overflow checks for signed integer/fixed point types\n \n       if Is_Signed_Integer_Type (Typ)\n         or else Is_Fixed_Point_Type (Typ)\n@@ -6755,7 +6755,7 @@ package body Exp_Ch4 is\n \n       if Do_Discriminant_Check (N) then\n \n-         --  Present the discrminant checking function to the backend,\n+         --  Present the discriminant checking function to the backend,\n          --  so that it can inline the call to the function.\n \n          Add_Inlined_Body\n@@ -7078,7 +7078,7 @@ package body Exp_Ch4 is\n       --       call itself.\n \n       --    5. Prefix of an address attribute (this is an error which\n-      --       is caught elsewhere, and the expansion would intefere\n+      --       is caught elsewhere, and the expansion would interfere\n       --       with generating the error message).\n \n       if not Is_Packed (Typ) then\n@@ -7545,7 +7545,7 @@ package body Exp_Ch4 is\n          --  Do not do any expansion in the access type case if the\n          --  parent is a renaming, since this is an error situation\n          --  which will be caught by Sem_Ch8, and the expansion can\n-         --  intefere with this error check.\n+         --  interfere with this error check.\n \n          if Is_Access_Type (Target_Type)\n            and then Is_Renamed_Object (N)\n@@ -8280,7 +8280,7 @@ package body Exp_Ch4 is\n    --  Start of processing for Has_Inferable_Discriminants\n \n    begin\n-      --  For identifiers and indexed components, it is sufficent to have a\n+      --  For identifiers and indexed components, it is sufficient to have a\n       --  constrained Unchecked_Union nominal subtype.\n \n       if Nkind_In (N, N_Identifier, N_Indexed_Component) then"}, {"sha": "ff0689ea311b09e77710f3ee429632f163d7c790", "filename": "gcc/ada/exp_ch4.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch4.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch4.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -84,8 +84,8 @@ package Exp_Ch4 is\n    --  Lhs, Rhs are the record expressions to be compared, these\n    --  expressions need not to be analyzed but have to be side-effect free.\n    --  Bodies is a list on which to attach bodies of local functions that\n-   --  are created in the process. This is the responsability of the caller\n-   --  to insert those bodies at the right place. Nod provdies the Sloc\n+   --  are created in the process. This is the responsibility of the caller\n+   --  to insert those bodies at the right place. Nod provides the Sloc\n    --  value for generated code.\n \n end Exp_Ch4;"}, {"sha": "e8619a152d1226fd72cefd57f8db8df5ff7fec4b", "filename": "gcc/ada/exp_ch5.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch5.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch5.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch5.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -115,7 +115,7 @@ package body Exp_Ch5 is\n \n    function Make_Tag_Ctrl_Assignment (N : Node_Id) return List_Id;\n    --  Generate the necessary code for controlled and tagged assignment,\n-   --  that is to say, finalization of the target before, adjustement of\n+   --  that is to say, finalization of the target before, adjustment of\n    --  the target after and save and restore of the tag and finalization\n    --  pointers which are not 'part of the value' and must not be changed\n    --  upon assignment. N is the original Assignment node.\n@@ -805,7 +805,7 @@ package body Exp_Ch5 is\n             Ensure_Defined (R_Type, N);\n \n             --  We normally compare addresses to find out which way round to\n-            --  do the loop, since this is realiable, and handles the cases of\n+            --  do the loop, since this is reliable, and handles the cases of\n             --  parameters, conversions etc. But we can't do that in the bit\n             --  packed case or the VM case, because addresses don't work there.\n \n@@ -869,7 +869,7 @@ package body Exp_Ch5 is\n               and then not No_Ctrl_Actions (N)\n             then\n \n-               --  Call TSS procedure for array assignment, passing the the\n+               --  Call TSS procedure for array assignment, passing the\n                --  explicit bounds of right and left hand sides.\n \n                declare\n@@ -1789,9 +1789,9 @@ package body Exp_Ch5 is\n                --  discriminant checks are locally suppressed (as in extension\n                --  aggregate expansions) because otherwise the discriminant\n                --  check will be performed within the _assign call. It is also\n-               --  suppressed for assignmments created by the expander that\n+               --  suppressed for assignments created by the expander that\n                --  correspond to initializations, where we do want to copy the\n-               --  tag (No_Ctrl_Actions flag set True). by the expander and we\n+               --  tag (No_Ctrl_Actions flag set True) by the expander and we\n                --  do not need to mess with tags ever (Expand_Ctrl_Actions flag\n                --  is set True in this case).\n \n@@ -1802,7 +1802,7 @@ package body Exp_Ch5 is\n                           and then not Discriminant_Checks_Suppressed (Empty))\n             then\n                --  Fetch the primitive op _assign and proper type to call it.\n-               --  Because of possible conflits between private and full view\n+               --  Because of possible conflicts between private and full view\n                --  the proper type is fetched directly from the operation\n                --  profile.\n \n@@ -1915,7 +1915,7 @@ package body Exp_Ch5 is\n                 Handled_Statement_Sequence =>\n                   Make_Handled_Sequence_Of_Statements (Loc, Statements => L)));\n \n-            --  If no restrictions on aborts, protect the whole assignement\n+            --  If no restrictions on aborts, protect the whole assignment\n             --  for controlled objects as per 9.8(11).\n \n             if Controlled_Type (Typ)\n@@ -2201,7 +2201,7 @@ package body Exp_Ch5 is\n \n          --  An optimization. If there are only two alternatives, and only\n          --  a single choice, then rewrite the whole case statement as an\n-         --  if statement, since this can result in susbequent optimizations.\n+         --  if statement, since this can result in subsequent optimizations.\n          --  This helps not only with case statements in the source of a\n          --  simple form, but also with generated code (discriminant check\n          --  functions in particular)\n@@ -2887,7 +2887,7 @@ package body Exp_Ch5 is\n                      --  implicit access formal to the access object, to ensure\n                      --  that the return object is initialized in that case.\n                      --  In this situation, the target of the assignment must\n-                     --  be rewritten to denote a derference of the access to\n+                     --  be rewritten to denote a dereference of the access to\n                      --  the return object passed in by the caller.\n \n                      if Present (Init_Assignment) then\n@@ -3262,7 +3262,7 @@ package body Exp_Ch5 is\n          return;\n       end if;\n \n-      --  Note: we do not have to worry about validity chekcing of the for loop\n+      --  Note: we do not have to worry about validity checking of the for loop\n       --  range bounds here, since they were frozen with constant declarations\n       --  and it is during that process that the validity checking is done.\n "}, {"sha": "23f74fa221e770c52e72c9080b6b5320eab3b7eb", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -2559,7 +2559,7 @@ package body Exp_Ch6 is\n       --  Similarly, expand calls to RCI subprograms on which pragma\n       --  All_Calls_Remote applies. The rewriting will be reanalyzed\n       --  later. Do this only when the call comes from source since we do\n-      --  not want such a rewritting to occur in expanded code.\n+      --  not want such a rewriting to occur in expanded code.\n \n       elsif Is_All_Remote_Call (N) then\n          Expand_All_Calls_Remote_Subprogram_Call (N);\n@@ -3344,7 +3344,7 @@ package body Exp_Ch6 is\n                --  Because of the presence of private types, the views of the\n                --  expression and the context may be different, so place an\n                --  unchecked conversion to the context type to avoid spurious\n-               --  errors, eg. when the expression is a numeric literal and\n+               --  errors, e.g. when the expression is a numeric literal and\n                --  the context is private. If the expression is an aggregate,\n                --  use a qualified expression, because an aggregate is not a\n                --  legal argument of a conversion.\n@@ -4823,7 +4823,7 @@ package body Exp_Ch6 is\n             Typ : constant Entity_Id := Scope (DTC_Entity (Subp));\n \n          begin\n-            --  Handle private overriden primitives\n+            --  Handle private overridden primitives\n \n             if not Is_CPP_Class (Typ) then\n                Check_Overriding_Operation (Subp);\n@@ -5553,7 +5553,7 @@ package body Exp_Ch6 is\n \n       --  If the object entity has a class-wide Etype, then we need to change\n       --  it to the result subtype of the function call, because otherwise the\n-      --  object will be class-wide without an explicit intialization and won't\n+      --  object will be class-wide without an explicit initialization and won't\n       --  be allocated properly by the back end. It seems unclean to make such\n       --  a revision to the type at this point, and we should try to improve\n       --  this treatment when build-in-place functions with class-wide results"}, {"sha": "79836a0e2bf054b0430c67ba4f0369b940386632", "filename": "gcc/ada/exp_ch6.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch6.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch6.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -41,7 +41,7 @@ package Exp_Ch6 is\n \n    procedure Freeze_Subprogram (N : Node_Id);\n    --  generate the appropriate expansions related to Subprogram freeze\n-   --  nodes (e. g. the filling of the corresponding Dispatch Table for\n+   --  nodes (e.g. the filling of the corresponding Dispatch Table for\n    --  Primitive Operations)\n \n    --  The following type defines the various forms of allocation used for the"}, {"sha": "dff4ba0bf2120cf951e8bf9464af4d91da9e3f22", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -123,7 +123,7 @@ package body Exp_Ch7 is\n    --------------------------------------------------\n \n    function Find_Node_To_Be_Wrapped (N : Node_Id) return Node_Id;\n-   --  N is a node wich may generate a transient scope. Loop over the\n+   --  N is a node which may generate a transient scope. Loop over the\n    --  parent pointers of N until it find the appropriate node to\n    --  wrap. It it returns Empty, it means that no transient scope is\n    --  needed in this context.\n@@ -138,7 +138,7 @@ package body Exp_Ch7 is\n       Is_Protected_Subprogram    : Boolean;\n       Is_Task_Allocation_Block   : Boolean;\n       Is_Asynchronous_Call_Block : Boolean) return Node_Id;\n-   --  Expand a the clean-up procedure for controlled and/or transient\n+   --  Expand the clean-up procedure for controlled and/or transient\n    --  block, and/or task master or task body, or blocks used to\n    --  implement task allocation or asynchronous entry calls, or\n    --  procedures used to implement protected procedures. Clean is the\n@@ -245,7 +245,7 @@ package body Exp_Ch7 is\n    -- Finalization Management --\n    -----------------------------\n \n-   --  This part describe how Initialization/Adjusment/Finalization procedures\n+   --  This part describe how Initialization/Adjustment/Finalization procedures\n    --  are generated and called. Two cases must be considered, types that are\n    --  Controlled (Is_Controlled flag set) and composite types that contain\n    --  controlled components (Has_Controlled_Component flag set). In the first\n@@ -262,7 +262,7 @@ package body Exp_Ch7 is\n    --  controlled components changes during execution. This controller\n    --  component is itself controlled and is attached to the upper-level\n    --  finalization chain. Its adjust primitive is in charge of calling adjust\n-   --  on the components and adusting the finalization pointer to match their\n+   --  on the components and adjusting the finalization pointer to match their\n    --  new location (see a-finali.adb).\n \n    --  It is not possible to use a similar technique for arrays that have\n@@ -1030,7 +1030,7 @@ package body Exp_Ch7 is\n    -------------------------------\n \n    --  This procedure is called each time a transient block has to be inserted\n-   --  that is to say for each call to a function with unconstrained ot tagged\n+   --  that is to say for each call to a function with unconstrained or tagged\n    --  result. It creates a new scope on the stack scope in order to enclose\n    --  all transient variables generated\n "}, {"sha": "a9b9c4e06ca5dc427fd8a90c45fbeeb74ac8f934", "filename": "gcc/ada/exp_ch7.ads", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch7.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch7.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -77,7 +77,7 @@ package Exp_Ch7 is\n    --  creating this final list if necessary.\n \n    function Has_New_Controlled_Component (E : Entity_Id) return Boolean;\n-   --  E is a type entity. Give the same resul as Has_Controlled_Component\n+   --  E is a type entity. Give the same result as Has_Controlled_Component\n    --  except for tagged extensions where the result is True only if the\n    --  latest extension contains a controlled component.\n \n@@ -87,8 +87,8 @@ package Exp_Ch7 is\n       With_Attach : Node_Id) return Node_Id;\n    --  Attach the referenced object to the referenced Final Chain 'Flist_Ref'\n    --  With_Attach is an expression of type Short_Short_Integer which can be\n-   --  either '0' to signify no attachment, '1' for attachement to a simply\n-   --  linked list or '2' for attachement to a doubly linked list.\n+   --  either '0' to signify no attachment, '1' for attachment to a simply\n+   --  linked list or '2' for attachment to a doubly linked list.\n \n    function Make_Init_Call\n      (Ref         : Node_Id;\n@@ -99,7 +99,7 @@ package Exp_Ch7 is\n    --  been previously analyzed) that references the object to be initialized.\n    --  Typ is the expected type of Ref, which is either a controlled type\n    --  (Is_Controlled) or a type with controlled components (Has_Controlled).\n-   --  With_Attach is an integer expression which is the attchment level,\n+   --  With_Attach is an integer expression which is the attachment level,\n    --  see System.Finalization_Implementation.Attach_To_Final_List for the\n    --  documentation of Nb_Link.\n    --\n@@ -232,7 +232,7 @@ package Exp_Ch7 is\n \n    procedure Wrap_Transient_Declaration (N : Node_Id);\n    --  N is an object declaration. Expand the finalization calls after the\n-   --  declaration and make the outer scope beeing the transient one.\n+   --  declaration and make the outer scope being the transient one.\n \n    procedure Wrap_Transient_Expression (N : Node_Id);\n    --  N is a sub-expression. Expand a transient block around an expression"}, {"sha": "6e0d309a1aba14ebcc62137461b7070c9c654f50", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -138,7 +138,7 @@ package body Exp_Ch9 is\n       Formals : List_Id;\n       Decls   : List_Id) return Entity_Id;\n    --  Generate an access type for each actual parameter in the list Actuals.\n-   --  Cleate an encapsulating record that contains all the actuals and return\n+   --  Create an encapsulating record that contains all the actuals and return\n    --  its type. Generate:\n    --    type Ann1 is access all <actual1-type>\n    --    ...\n@@ -311,7 +311,7 @@ package body Exp_Ch9 is\n       Formals  : out List_Id);\n    --  Given a dispatching call, extract the entity of the name of the call,\n    --  its object parameter, its actual parameters and the formal parameters\n-   --  of the overriden interface-level version.\n+   --  of the overridden interface-level version.\n \n    procedure Extract_Entry\n      (N       : Node_Id;\n@@ -763,7 +763,7 @@ package body Exp_Ch9 is\n                Pdef := Defining_Identifier (P);\n \n                --  The privals are declared before the current body is\n-               --  analyzed. for visibility reasons. Set their Sloc so\n+               --  analyzed, for visibility reasons. Set their Sloc so\n                --  that it is consistent with their renaming declaration,\n                --  to prevent anomalies in gdb.\n \n@@ -979,7 +979,7 @@ package body Exp_Ch9 is\n          --  but it does have an activation chain on which to store the tasks\n          --  temporarily. On successful return, the tasks on this chain are\n          --  moved to the chain passed in by the caller. We do not build an\n-         --  Activatation_Chain_Entity for an N_Extended_Return_Statement,\n+         --  Activation_Chain_Entity for an N_Extended_Return_Statement,\n          --  because we do not want to build a call to Activate_Tasks. Task\n          --  activation is the responsibility of the caller.\n \n@@ -1491,7 +1491,7 @@ package body Exp_Ch9 is\n       function Overriding_Possible\n         (Iface_Prim_Op : Entity_Id;\n          Proc_Nam      : Entity_Id) return Boolean;\n-      --  Determine whether a primitive operation can be overriden by the\n+      --  Determine whether a primitive operation can be overridden by the\n       --  wrapper. Iface_Prim_Op is the candidate primitive operation of an\n       --  abstract interface type, Proc_Nam is the generated entry wrapper.\n \n@@ -1666,7 +1666,7 @@ package body Exp_Ch9 is\n                      Iface_Prim_Op := Alias (Iface_Prim_Op);\n                   end loop;\n \n-                  --  The current primitive operation can be overriden by the\n+                  --  The current primitive operation can be overridden by the\n                   --  generated entry wrapper.\n \n                   if Overriding_Possible (Iface_Prim_Op, Proc_Nam) then\n@@ -1707,7 +1707,7 @@ package body Exp_Ch9 is\n                         Iface_Prim_Op := Alias (Iface_Prim_Op);\n                      end loop;\n \n-                     --  The current primitive operation can be overriden by\n+                     --  The current primitive operation can be overridden by\n                      --  the generated entry wrapper.\n \n                      if Overriding_Possible (Iface_Prim_Op, Proc_Nam) then\n@@ -1726,7 +1726,7 @@ package body Exp_Ch9 is\n          end loop Examine_Interfaces;\n       end if;\n \n-      --  Return if no interface primitive can be overriden\n+      --  Return if no interface primitive can be overridden\n \n       return Empty;\n \n@@ -4595,7 +4595,7 @@ package body Exp_Ch9 is\n \n    --  The first three declarations were already inserted ahead of the accept\n    --  statement by the Expand_Accept_Declarations procedure, which was called\n-   --  directly from the semantics during analysis of the accept. statement,\n+   --  directly from the semantics during analysis of the accept statement,\n    --  before analyzing its contained statements.\n \n    --  The declarations from the N_Accept_Statement, as noted in Sinfo, come\n@@ -7534,7 +7534,7 @@ package body Exp_Ch9 is\n             Current_Node := Sub;\n \n             --  Generate an overriding primitive operation specification for\n-            --  this subprogram if the protected type implements an inerface.\n+            --  this subprogram if the protected type implements an interface.\n \n             if Ada_Version >= Ada_05\n               and then\n@@ -10115,7 +10115,7 @@ package body Exp_Ch9 is\n           Expression =>\n             D_Disc));\n \n-      --  Do the assignement at this stage only because the evaluation of the\n+      --  Do the assignment at this stage only because the evaluation of the\n       --  expression must not occur before (see ACVC C97302A).\n \n       Append_To (Stmts,\n@@ -10315,7 +10315,7 @@ package body Exp_Ch9 is\n             Next (Stmt);\n          end loop;\n \n-         --  Do the assignement at this stage only because the evaluation\n+         --  Do the assignment at this stage only because the evaluation\n          --  of the expression must not occur before (see ACVC C97302A).\n \n          Insert_Before (Stmt,"}, {"sha": "df3cdeb9fbf2622306834ff6247f807d65bbbe1a", "filename": "gcc/ada/exp_ch9.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch9.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_ch9.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -219,7 +219,7 @@ package Exp_Ch9 is\n \n    procedure Establish_Task_Master (N : Node_Id);\n    --  Given a subprogram body, or a block statement, or a task body, this\n-   --  proccedure makes the necessary transformations required of a task\n+   --  procedure makes the necessary transformations required of a task\n    --  master (add Enter_Master call at start, and establish a cleanup\n    --  routine to make sure Complete_Master is called on exit).\n \n@@ -237,7 +237,7 @@ package Exp_Ch9 is\n    --  Expand the entry barrier into a function. This is called directly\n    --  from Analyze_Entry_Body so that the discriminals and privals of the\n    --  barrier can be attached to the function declaration list, and a new\n-   --  set prepared for the entry body procedure, bedore the entry body\n+   --  set prepared for the entry body procedure, before the entry body\n    --  statement sequence can be expanded. The resulting function is analyzed\n    --  now, within the context of the protected object, to resolve calls to\n    --  other protected functions.\n@@ -308,7 +308,7 @@ package Exp_Ch9 is\n    procedure Set_Discriminals (Dec : Node_Id);\n    --  Replace discriminals in a protected type for use by the\n    --  next protected operation on the type. Each operation needs a\n-   --  new set of discirminals, since it needs a unique renaming of\n+   --  new set of discriminals, since it needs a unique renaming of\n    --  the discriminant fields in the record used to implement the\n    --  protected type.\n "}, {"sha": "3a28087c2098051b9a228370893fa5e31b368fbd", "filename": "gcc/ada/exp_dbug.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dbug.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dbug.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -1242,7 +1242,7 @@ package body Exp_Dbug is\n                Add_Str_To_Name_Buffer (\"__\");\n             end if;\n \n-            --  Otherwise get name and note if it is a NPBE\n+            --  Otherwise get name and note if it is a BNPE\n \n             Get_Name_String_And_Append (Chars (E));\n "}, {"sha": "9a9d5377d838b70c0cb0e834b3a76956f8c666c3", "filename": "gcc/ada/exp_dbug.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dbug.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dbug.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dbug.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -66,7 +66,7 @@ package Exp_Dbug is\n    --  For global entities, the encoded name includes all components of the\n    --  fully expanded name (but omitting Standard at the start). For example,\n    --  if a library level child package P.Q has an embedded package R, and\n-   --  there is an entity in this embdded package whose name is S, the encoded\n+   --  there is an entity in this embedded package whose name is S, the encoded\n    --  name will include the components p.q.r.s.\n \n    --  For local entities, the encoded name only includes the components up to\n@@ -851,7 +851,7 @@ package Exp_Dbug is\n       --  The size of the objects typed as x should be obtained from the\n       --  structure of x (and x___XVE, if applicable) as for ordinary types\n       --  unless there is a variable named x___XVZ, which, if present, will\n-      --  hold the the size (in bits) of x.\n+      --  hold the size (in bits) of x.\n \n       --  The type x will either be a subtype of y (see also Subtypes of\n       --  Variant Records, below) or will contain no fields at all. The layout,\n@@ -1423,7 +1423,7 @@ package Exp_Dbug is\n    --  Character types are enumeration types at least one of whose enumeration\n    --  literals is a character literal. Enumeration literals are usually simply\n    --  represented using their identifier names. If the enumeration literal is\n-   --  a character literal, the name aencoded as described in the following\n+   --  a character literal, the name is encoded as described in the following\n    --  paragraph.\n \n    --  A name QUhh, where each 'h' is a lower-case hexadecimal digit, stands\n@@ -1450,7 +1450,7 @@ package Exp_Dbug is\n    --  Set Name_Buffer and Name_Len to the external name of one secondary\n    --  dispatch table of Typ. If the interface has been inherited from some\n    --  ancestor then Ancestor_Typ is such node (in this case the secondary DT\n-   --  is needed to handle overriden primitives); if there is no such ancestor\n+   --  is needed to handle overridden primitives); if there is no such ancestor\n    --  then Ancestor_Typ is equal to Typ.\n    --\n    --  Internal rule followed for the generation of the external name:"}, {"sha": "e059a34b09bbfd3651950d254fbf2e4a3b22c612", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -76,7 +76,7 @@ package body Exp_Disp is\n \n    function Is_Predefined_Dispatching_Alias (Prim : Entity_Id) return Boolean;\n    --  Returns true if Prim is not a predefined dispatching primitive but it is\n-   --  an alias of a predefined dispatching primitive (ie. through a renaming)\n+   --  an alias of a predefined dispatching primitive (i.e. through a renaming)\n \n    function Original_View_In_Visible_Part (Typ : Entity_Id) return Boolean;\n    --  Check if the type has a private view or if the public view appears\n@@ -719,7 +719,7 @@ package body Exp_Disp is\n       Rewrite (Call_Node, New_Call);\n \n       --  Suppress all checks during the analysis of the expanded code\n-      --  to avoid the generation of spureous warnings under ZFP run-time.\n+      --  to avoid the generation of spurious warnings under ZFP run-time.\n \n       Analyze_And_Resolve (Call_Node, Call_Typ, Suppress => All_Checks);\n    end Expand_Dispatching_Call;\n@@ -1135,7 +1135,7 @@ package body Exp_Disp is\n \n                   --  If the type of the actual parameter comes from a limited\n                   --  with-clause and the non-limited view is already available\n-                  --  we replace the anonymous access type by a duplicate decla\n+                  --  we replace the anonymous access type by a duplicate decla-\n                   --  ration whose designated type is the non-limited view\n \n                   if Ekind (Actual_DDT) = E_Incomplete_Type\n@@ -3703,7 +3703,7 @@ package body Exp_Disp is\n               Result          => Result);\n             Next_Elmt (AI_Tag_Elmt);\n \n-            --  Build the secondary table contaning pointers to primitives\n+            --  Build the secondary table containing pointers to primitives\n             --  (used to give support to Generic Dispatching Constructors).\n \n             Make_Secondary_DT\n@@ -3749,7 +3749,7 @@ package body Exp_Disp is\n            Expression          => New_Reference_To (Standard_True, Loc)));\n \n       --  In case of locally defined tagged type we declare the object\n-      --  contanining the dispatch table by means of a variable. Its\n+      --  containing the dispatch table by means of a variable. Its\n       --  initialization is done later by means of an assignment. This is\n       --  required to generate its External_Tag.\n \n@@ -5836,7 +5836,7 @@ package body Exp_Disp is\n    procedure Set_All_DT_Position (Typ : Entity_Id) is\n \n       procedure Validate_Position (Prim : Entity_Id);\n-      --  Check that the position assignated to Prim is completely safe\n+      --  Check that the position assigned to Prim is completely safe\n       --  (it has not been assigned to a previously defined primitive\n       --   operation of Typ)\n \n@@ -5948,7 +5948,7 @@ package body Exp_Disp is\n \n    begin\n       --  Set the DT_Position for each primitive operation. Perform some\n-      --  sanity checks to avoid to build completely inconsistant dispatch\n+      --  sanity checks to avoid to build completely inconsistent dispatch\n       --  tables.\n \n       --  First stage: Set the DTC entity of all the primitive operations\n@@ -5972,7 +5972,7 @@ package body Exp_Disp is\n \n          --  Clear any previous value of the DT_Position attribute. In this\n          --  way we ensure that the final position of all the primitives is\n-         --  stablished by the following stages of this algorithm.\n+         --  established by the following stages of this algorithm.\n \n          Set_DT_Position (Prim, No_Uint);\n \n@@ -6121,7 +6121,7 @@ package body Exp_Disp is\n                Set_Fixed_Prim (UI_To_Int (DT_Position (Prim)));\n \n             --  Overriding primitives must use the same entry as the\n-            --  overriden primitive.\n+            --  overridden primitive.\n \n             elsif not Present (Abstract_Interface_Alias (Prim))\n               and then Present (Alias (Prim))\n@@ -6246,7 +6246,7 @@ package body Exp_Disp is\n             DT_Length := UI_To_Int (DT_Position (Prim));\n          end if;\n \n-         --  Ensure that the asignated position to non-predefined\n+         --  Ensure that the assigned position to non-predefined\n          --  dispatching operations in the dispatch table is correct.\n \n          if not (Is_Predefined_Dispatching_Operation (Prim)"}, {"sha": "5b71249eac3e9bad33c9d28acb10e9769c9ab0e8", "filename": "gcc/ada/exp_dist.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dist.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dist.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -494,7 +494,7 @@ package body Exp_Dist is\n \n          when others           =>\n             Partition : Entity_Id;\n-            --  A variable containing the Partition_ID of the target parition\n+            --  A variable containing the Partition_ID of the target partition\n \n             RPC_Receiver : Node_Id;\n             --  An expression whose value is the address of the target RPC\n@@ -756,7 +756,7 @@ package body Exp_Dist is\n \n       package Helpers is\n \n-         --  Routines to build distribtion helper subprograms for user-defined\n+         --  Routines to build distribution helper subprograms for user-defined\n          --  types. For implementation of the Distributed systems annex (DSA)\n          --  over the PolyORB generic middleware components, it is necessary to\n          --  generate several supporting subprograms for each application data\n@@ -2005,7 +2005,7 @@ package body Exp_Dist is\n                --  We have an unconstrained Etyp: build the actual constrained\n                --  subtype for the value we just read from the stream.\n \n-               --  suubtype S is <actual subtype of Constant_Object>;\n+               --  subtype S is <actual subtype of Constant_Object>;\n \n                Append_To (Decls,\n                  Build_Actual_Subtype (Etyp,"}, {"sha": "d307fbc04e0a7e279f5392a5ecacbd0b58623fcc", "filename": "gcc/ada/exp_dist.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dist.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_dist.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_dist.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -53,7 +53,7 @@ package Exp_Dist is\n       Insertion_Node  : Node_Id;\n       Body_Decls      : List_Id);\n    --  Add primitive for the stub type, and the RPC receiver. The declarations\n-   --  are inserted after insertion_Node, while the bodies are appened at the\n+   --  are inserted after insertion_Node, while the bodies are appended at the\n    --  end of Decls.\n \n    procedure Remote_Types_Tagged_Full_View_Encountered"}, {"sha": "66c413e3f270bbed92db7365f70e18d938198004", "filename": "gcc/ada/exp_fixd.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_fixd.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_fixd.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.adb?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -629,7 +629,7 @@ package body Exp_Fixd is\n          --  happen?) and both were equal to the power of 2, then we would\n          --  be one bit off in this test, so for the left operand, we only\n          --  go up to the power of 2 - 1. This ensures that we do not get\n-         --  this anomolous case, and in practice the right operand is by\n+         --  this anomalous case, and in practice the right operand is by\n          --  far the more likely one to be the constant.\n \n          Left_Size := UI_To_Int (RM_Size (Left_Type));\n@@ -663,7 +663,7 @@ package body Exp_Fixd is\n          end if;\n \n          --  Now the result size must be at least twice the longer of\n-         --  the two sizes, to accomodate all possible results.\n+         --  the two sizes, to accommodate all possible results.\n \n          Rsize := 2 * Int'Max (Left_Size, Right_Size);\n "}, {"sha": "52f54019c9a2066771e95c0dc7a411eda8b0464e", "filename": "gcc/ada/exp_fixd.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_fixd.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fc789c82e053517281e28e141f8832d5c2f7f6e/gcc%2Fada%2Fexp_fixd.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_fixd.ads?ref=8fc789c82e053517281e28e141f8832d5c2f7f6e", "patch": "@@ -32,7 +32,7 @@ package Exp_Fixd is\n    --  General note on universal fixed. In the routines below, a fixed-point\n    --  type is always a specific fixed-point type or universal real, never\n    --  universal fixed. Universal fixed only appears as the result type of a\n-   --  division or multplication and in all such cases, the parent node, which\n+   --  division or multiplication and in all such cases, the parent node, which\n    --  must be either a conversion node or a 'Round attribute reference node,\n    --  has the specific type information. In both cases, the parent node is\n    --  removed from the tree, and the appropriate routine in this package is"}]}