{"sha": "65c98fdec722720ae9b2a6765232fe4535e06d4e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVjOThmZGVjNzIyNzIwYWU5YjJhNjc2NTIzMmZlNDUzNWUwNmQ0ZQ==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2016-02-02T01:29:17Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gcc.gnu.org", "date": "2016-02-02T01:29:17Z"}, "message": "[RS6000] lqarx and stqcx. registers\n\nlqarx RT and stqcx. RS are valid only with even numbered gprs.  The\npredicate to enforce this happens to allow a loophole, closed by this\npatch.\n\n\tPR target/69548\ngcc/\n\t* config/rs6000/predicates.md (quad_int_reg_operand): Don't\n\tallow subregs.\ngcc/testsuite/\n\t* gcc.target/powerpc/pr69548.c: New test.\n\nFrom-SVN: r233065", "tree": {"sha": "c980838ffe7ef262dd73d6f49da7e572e55443d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c980838ffe7ef262dd73d6f49da7e572e55443d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65c98fdec722720ae9b2a6765232fe4535e06d4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c98fdec722720ae9b2a6765232fe4535e06d4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65c98fdec722720ae9b2a6765232fe4535e06d4e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65c98fdec722720ae9b2a6765232fe4535e06d4e/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0b256e745b5ea5b89f9a70a86c2c7e2649a15958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b256e745b5ea5b89f9a70a86c2c7e2649a15958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b256e745b5ea5b89f9a70a86c2c7e2649a15958"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "b061339ae0643a37a512b0baf9414daea5924846", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=65c98fdec722720ae9b2a6765232fe4535e06d4e", "patch": "@@ -1,3 +1,9 @@\n+2016-02-02  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/69548\n+\t* config/rs6000/predicates.md (quad_int_reg_operand): Don't\n+\tallow subregs.\n+\n 2016-02-02  Alan Modra  <amodra@gmail.com>\n \n \tPR target/68662"}, {"sha": "072291ef7d015c093347320446ce1a5f6ee07e5f", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=65c98fdec722720ae9b2a6765232fe4535e06d4e", "patch": "@@ -375,20 +375,19 @@\n \n ;; Return 1 if op is a general purpose register that is an even register\n ;; which suitable for a load/store quad operation\n+;; Subregs are not allowed here because when they are combine can\n+;; create (subreg:PTI (reg:TI pseudo)) which will cause reload to\n+;; think the innermost reg needs reloading, in TImode instead of\n+;; PTImode.  So reload will choose a reg in TImode which has no\n+;; requirement that the reg be even.\n (define_predicate \"quad_int_reg_operand\"\n-  (match_operand 0 \"register_operand\")\n+  (match_code \"reg\")\n {\n   HOST_WIDE_INT r;\n \n   if (!TARGET_QUAD_MEMORY && !TARGET_QUAD_MEMORY_ATOMIC)\n     return 0;\n \n-  if (GET_CODE (op) == SUBREG)\n-    op = SUBREG_REG (op);\n-\n-  if (!REG_P (op))\n-    return 0;\n-\n   r = REGNO (op);\n   if (r >= FIRST_PSEUDO_REGISTER)\n     return 1;"}, {"sha": "c96277c9381336e5cdae3ef0c4a14759306bd847", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65c98fdec722720ae9b2a6765232fe4535e06d4e", "patch": "@@ -1,3 +1,8 @@\n+2016-02-02  Alan Modra  <amodra@gmail.com>\n+\n+\tPR target/69548\n+\t* gcc.target/powerpc/pr69548.c: New test.\n+\n 2016-02-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69592"}, {"sha": "439f588b874b8ac3418adda4a4780da8c0757d5a", "filename": "gcc/testsuite/gcc.target/powerpc/pr69548.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69548.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65c98fdec722720ae9b2a6765232fe4535e06d4e/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69548.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr69548.c?ref=65c98fdec722720ae9b2a6765232fe4535e06d4e", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do assemble { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power8\" } } */\n+/* { dg-options \"-mcpu=power8 -Os -mbig\" } */\n+\n+__int128\n+quad_exchange (__int128 *ptr, __int128 newval)\n+{\n+  return __atomic_exchange_n (ptr, newval, __ATOMIC_RELAXED);\n+}"}]}