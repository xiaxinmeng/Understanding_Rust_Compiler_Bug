{"sha": "78593d78f1800fcdf5d274e7eef51ed6ca379716", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg1OTNkNzhmMTgwMGZjZGY1ZDI3NGU3ZWVmNTFlZDZjYTM3OTcxNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-01-11T23:35:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-01-11T23:35:43Z"}, "message": "istream.cc (basic_istream<char>::ignore(streamsize), [...]): In case more than numeric_limits<streamsize>::max() chars are skipped...\n\n2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n\tbasic_istream<char>::ignore(streamsize, int_type),\n\tbasic_istream<wchar_t>::ignore(streamsize),\n\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): In case\n\tmore than numeric_limits<streamsize>::max() chars are skipped,\n\tset _M_gcount = max().\n\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n\tint_type)): Likewise; keep simple, don't forward.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r93208", "tree": {"sha": "61535da0dcdbb26accd934c6e3cd5923ac783db4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61535da0dcdbb26accd934c6e3cd5923ac783db4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/78593d78f1800fcdf5d274e7eef51ed6ca379716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78593d78f1800fcdf5d274e7eef51ed6ca379716", "html_url": "https://github.com/Rust-GCC/gccrs/commit/78593d78f1800fcdf5d274e7eef51ed6ca379716", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/78593d78f1800fcdf5d274e7eef51ed6ca379716/comments", "author": null, "committer": null, "parents": [{"sha": "bc7566caa4d145e59d8623a8413f90915f3747dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc7566caa4d145e59d8623a8413f90915f3747dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc7566caa4d145e59d8623a8413f90915f3747dc"}], "stats": {"total": 81, "additions": 66, "deletions": 15}, "files": [{"sha": "44c7eff9c8da1f260e5f92b5ef6e275b72ee6386", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=78593d78f1800fcdf5d274e7eef51ed6ca379716", "patch": "@@ -1,3 +1,15 @@\n+2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/istream.cc (basic_istream<char>::ignore(streamsize),\n+\tbasic_istream<char>::ignore(streamsize, int_type),\n+\tbasic_istream<wchar_t>::ignore(streamsize),\n+\tbasic_istream<wchar_t>::ignore(streamsize, int_type)): In case\n+\tmore than numeric_limits<streamsize>::max() chars are skipped,\n+\tset _M_gcount = max().\n+\t* include/bits/istream.tcc (ignore(streamsize), ignore(streamsize,\n+\tint_type)): Likewise; keep simple, don't forward.\n+\n 2005-01-11  Paolo Carlini  <pcarlini@suse.de>\n \n \t* src/istream.cc (basic_istream<char>::ignore(streamsize),"}, {"sha": "af7fb6441a4ffdfa49232df14cd656f390e439f1", "filename": "libstdc++-v3/include/bits/istream.tcc", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fistream.tcc?ref=78593d78f1800fcdf5d274e7eef51ed6ca379716", "patch": "@@ -671,9 +671,6 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     ignore(streamsize __n)\n     {\n-      if (__n == 1)\n-\treturn ignore();\n-\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n@@ -692,6 +689,7 @@ namespace std\n \t      // by definition, when more than 2G chars are actually ignored,\n \t      // _M_gcount (the return value of gcount, that is) cannot be\n \t      // really correct, being unavoidably too small.\n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -702,11 +700,17 @@ namespace std\n \t\t    }\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n             }\n@@ -723,9 +727,6 @@ namespace std\n     basic_istream<_CharT, _Traits>::\n     ignore(streamsize __n, int_type __delim)\n     {\n-      if (traits_type::eq_int_type(__delim, traits_type::eof()))\n-\treturn ignore(__n);\n-\n       _M_gcount = 0;\n       sentry __cerb(*this, true);\n       if (__cerb && __n > 0)\n@@ -738,6 +739,7 @@ namespace std\n               int_type __c = __sb->sgetc();\n \n \t      // See comment above.\n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -750,16 +752,23 @@ namespace std\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n               if (traits_type::eq_int_type(__c, __eof))\n                 __err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  ++_M_gcount;\n+\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n             }"}, {"sha": "2ecd948585af28df93a27800444ed9fa7aee5fed", "filename": "libstdc++-v3/src/istream.cc", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/78593d78f1800fcdf5d274e7eef51ed6ca379716/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fistream.cc?ref=78593d78f1800fcdf5d274e7eef51ed6ca379716", "patch": "@@ -125,6 +125,7 @@ namespace std\n \t      int_type __c = __sb->sgetc();\n \n \t      // See comment in istream.tcc.\n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -147,11 +148,17 @@ namespace std\n \t\t    }\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n@@ -183,6 +190,7 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -212,16 +220,23 @@ namespace std\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  ++_M_gcount;\n+\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }\n@@ -403,6 +418,7 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -425,11 +441,17 @@ namespace std\n \t\t    }\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t    }\n@@ -461,6 +483,7 @@ namespace std\n \t      __streambuf_type* __sb = this->rdbuf();\n \t      int_type __c = __sb->sgetc();\n \n+\t      bool __large_ignore = false;\n \t      while (true)\n \t\t{\n \t\t  while (_M_gcount < __n\n@@ -490,16 +513,23 @@ namespace std\n \t\t  if (__n == numeric_limits<streamsize>::max()\n \t\t      && !traits_type::eq_int_type(__c, __eof)\n \t\t      && !traits_type::eq_int_type(__c, __delim))\n-\t\t    _M_gcount = numeric_limits<streamsize>::min();\n+\t\t    {\n+\t\t      _M_gcount = numeric_limits<streamsize>::min();\n+\t\t      __large_ignore = true;\n+\t\t    }\n \t\t  else\n \t\t    break;\n \t\t}\n \n+\t      if (__large_ignore)\n+\t\t_M_gcount = numeric_limits<streamsize>::max();\n+\n \t      if (traits_type::eq_int_type(__c, __eof))\n \t\t__err |= ios_base::eofbit;\n \t      else if (traits_type::eq_int_type(__c, __delim))\n \t\t{\n-\t\t  ++_M_gcount;\n+\t\t  if (_M_gcount < numeric_limits<streamsize>::max())\n+\t\t    ++_M_gcount;\n \t\t  __sb->sbumpc();\n \t\t}\n \t    }"}]}