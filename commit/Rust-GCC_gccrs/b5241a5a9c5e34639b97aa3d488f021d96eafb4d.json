{"sha": "b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUyNDFhNWE5YzVlMzQ2MzliOTdhYTNkNDg4ZjAyMWQ5NmVhZmI0ZA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-08-28T19:03:22Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-08-28T19:03:22Z"}, "message": "Convert nonlocal_goto_handler_labels from an EXPR_LIST to an INSN_LIST\n\ngcc/\n2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n\n\t* function.h (struct rtl_data): Convert field\n\t\"x_nonlocal_goto_handler_labels\" from rtx_expr_list * to\n\trtx_insn_list *.\n\t* rtl.h (remove_node_from_insn_list): New prototype.\n\n\t* builtins.c (expand_builtin): When prepending to\n\tnonlocal_goto_handler_labels, use gen_rtx_INSN_LIST rather than\n\tgen_rtx_EXPR_LIST.\n\t* cfgbuild.c (make_edges): Convert local \"x\" from rtx_expr_list *\n\tto rtx_insn_list *, and use its \"insn\" method rather than\n\t\"element\" method.\n\t* cfgrtl.c (delete_insn): Use new function\n\tremove_node_from_insn_list rather than\n\tremove_node_from_expr_list.\n\t(cfg_layout_initialize): Convert local \"x\" from rtx_expr_list *\n\tto rtx_insn_list *, and use its \"insn\" method rather than\n\t\"element\" method.\n\t* dwarf2cfi.c (create_trace_edges): Likewise for local \"lab\".\n\t* reload1.c (set_initial_label_offsets): Likewise for local \"x\".\n\t* rtlanal.c (remove_node_from_insn_list): New function, adapted\n\tfrom remove_node_from_expr_list.\n\t* stmt.c (expand_label): When prepending to\n\tnonlocal_goto_handler_labels, use gen_rtx_INSN_LIST rather than\n\tgen_rtx_EXPR_LIST.\n\nFrom-SVN: r214687", "tree": {"sha": "0fe8976b1ef9952f3ce44fb0045368039460da52", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0fe8976b1ef9952f3ce44fb0045368039460da52"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f48bd60e3a778f262e0ac26b9678ab60012fb780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48bd60e3a778f262e0ac26b9678ab60012fb780", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48bd60e3a778f262e0ac26b9678ab60012fb780"}], "stats": {"total": 85, "additions": 71, "deletions": 14}, "files": [{"sha": "9081532fdf9b8086f3f3b198e45bbaac331230c9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -1,3 +1,30 @@\n+2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* function.h (struct rtl_data): Convert field\n+\t\"x_nonlocal_goto_handler_labels\" from rtx_expr_list * to\n+\trtx_insn_list *.\n+\t* rtl.h (remove_node_from_insn_list): New prototype.\n+\n+\t* builtins.c (expand_builtin): When prepending to\n+\tnonlocal_goto_handler_labels, use gen_rtx_INSN_LIST rather than\n+\tgen_rtx_EXPR_LIST.\n+\t* cfgbuild.c (make_edges): Convert local \"x\" from rtx_expr_list *\n+\tto rtx_insn_list *, and use its \"insn\" method rather than\n+\t\"element\" method.\n+\t* cfgrtl.c (delete_insn): Use new function\n+\tremove_node_from_insn_list rather than\n+\tremove_node_from_expr_list.\n+\t(cfg_layout_initialize): Convert local \"x\" from rtx_expr_list *\n+\tto rtx_insn_list *, and use its \"insn\" method rather than\n+\t\"element\" method.\n+\t* dwarf2cfi.c (create_trace_edges): Likewise for local \"lab\".\n+\t* reload1.c (set_initial_label_offsets): Likewise for local \"x\".\n+\t* rtlanal.c (remove_node_from_insn_list): New function, adapted\n+\tfrom remove_node_from_expr_list.\n+\t* stmt.c (expand_label): When prepending to\n+\tnonlocal_goto_handler_labels, use gen_rtx_INSN_LIST rather than\n+\tgen_rtx_EXPR_LIST.\n+\n 2014-08-28  David Malcolm  <dmalcolm@redhat.com>\n \n \t* function.h (struct rtl_data): Strengthen fields \"x_return_label\""}, {"sha": "975f696090f54fea1de481ea29c4b584f9ced88c", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -6185,7 +6185,7 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n \t  /* This is copied from the handling of non-local gotos.  */\n \t  expand_builtin_setjmp_setup (buf_addr, label_r);\n \t  nonlocal_goto_handler_labels\n-\t    = gen_rtx_EXPR_LIST (VOIDmode, label_r,\n+\t    = gen_rtx_INSN_LIST (VOIDmode, label_r,\n \t\t\t\t nonlocal_goto_handler_labels);\n \t  /* ??? Do not let expand_label treat us as such since we would\n \t     not want to be both on the list of non-local labels and on"}, {"sha": "d7fa97a3512133119947626c6e421f694e689544", "filename": "gcc/cfgbuild.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fcfgbuild.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fcfgbuild.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgbuild.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -337,10 +337,10 @@ make_edges (basic_block min, basic_block max, int update_p)\n \t\t     taken, then only calls to those functions or to other\n \t\t     nested functions that use them could possibly do\n \t\t     nonlocal gotos.  */\n-\t\t  for (rtx_expr_list *x = nonlocal_goto_handler_labels;\n+\t\t  for (rtx_insn_list *x = nonlocal_goto_handler_labels;\n \t\t       x;\n \t\t       x = x->next ())\n-\t\t    make_label_edge (edge_cache, bb, x->element (),\n+\t\t    make_label_edge (edge_cache, bb, x->insn (),\n \t\t\t\t     EDGE_ABNORMAL | EDGE_ABNORMAL_CALL);\n \t\t}\n "}, {"sha": "d9b41e0ca1cd8f7339fb8185dd69461d80540ae2", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -159,7 +159,7 @@ delete_insn (rtx uncast_insn)\n \t    }\n \t}\n \n-      remove_node_from_expr_list (insn, &nonlocal_goto_handler_labels);\n+      remove_node_from_insn_list (insn, &nonlocal_goto_handler_labels);\n     }\n \n   if (really_delete)\n@@ -4216,7 +4216,7 @@ cfg_layout_duplicate_bb (basic_block bb)\n void\n cfg_layout_initialize (unsigned int flags)\n {\n-  rtx_expr_list *x;\n+  rtx_insn_list *x;\n   basic_block bb;\n \n   /* Once bb partitioning is complete, cfg layout mode should not be\n@@ -4237,7 +4237,7 @@ cfg_layout_initialize (unsigned int flags)\n   /* Make sure that the targets of non local gotos are marked.  */\n   for (x = nonlocal_goto_handler_labels; x; x = x->next ())\n     {\n-      bb = BLOCK_FOR_INSN (x->element ());\n+      bb = BLOCK_FOR_INSN (x->insn ());\n       bb->flags |= BB_NON_LOCAL_GOTO_TARGET;\n     }\n "}, {"sha": "7c495e4876d14801f915e03cce94eda5c17d1b6f", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -2338,10 +2338,10 @@ create_trace_edges (rtx insn)\n \n       /* Process non-local goto edges.  */\n       if (can_nonlocal_goto (insn))\n-\tfor (rtx_expr_list *lab = nonlocal_goto_handler_labels;\n+\tfor (rtx_insn_list *lab = nonlocal_goto_handler_labels;\n \t     lab;\n \t     lab = lab->next ())\n-\t  maybe_record_trace_start_abnormal (lab->element (), insn);\n+\t  maybe_record_trace_start_abnormal (lab->insn (), insn);\n     }\n   else if (rtx_sequence *seq = dyn_cast <rtx_sequence *> (PATTERN (insn)))\n     {"}, {"sha": "3921d21f0aee0776123030f3fab37ff8eaba6042", "filename": "gcc/function.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -264,9 +264,9 @@ struct GTY(()) rtl_data {\n      Used for detecting stack clobbers.  */\n   tree stack_protect_guard;\n \n-  /* List (chain of EXPR_LIST) of labels heading the current handlers for\n+  /* List (chain of INSN_LIST) of labels heading the current handlers for\n      nonlocal gotos.  */\n-  rtx_expr_list *x_nonlocal_goto_handler_labels;\n+  rtx_insn_list *x_nonlocal_goto_handler_labels;\n \n   /* Label that will go on function epilogue.\n      Jumping to this label serves as a \"return\" instruction"}, {"sha": "0a01b1b503e0419d774435ef178f64ed23cc5471", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -3915,9 +3915,9 @@ set_initial_label_offsets (void)\n     if (x->element ())\n       set_label_offsets (x->element (), NULL, 1);\n \n-  for (rtx_expr_list *x = nonlocal_goto_handler_labels; x; x = x->next ())\n-    if (x->element ())\n-      set_label_offsets (x->element (), NULL, 1);\n+  for (rtx_insn_list *x = nonlocal_goto_handler_labels; x; x = x->next ())\n+    if (x->insn ())\n+      set_label_offsets (x->insn (), NULL, 1);\n \n   for_each_eh_label (set_initial_eh_label_offset);\n }"}, {"sha": "e6e23050cdcdbe170b49065f00485271fcdcc223", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -2828,6 +2828,7 @@ extern rtx regno_use_in (unsigned int, rtx);\n extern int auto_inc_p (const_rtx);\n extern int in_expr_list_p (const_rtx, const_rtx);\n extern void remove_node_from_expr_list (const_rtx, rtx_expr_list **);\n+extern void remove_node_from_insn_list (const rtx_insn *, rtx_insn_list **);\n extern int loc_mentioned_in_p (rtx *, const_rtx);\n extern rtx_insn *find_first_parameter_load (rtx, rtx);\n extern bool keep_with_call_p (const_rtx);"}, {"sha": "21de0adbdd7c27a610b1c16c2401dcb0d00a3b24", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -2243,6 +2243,35 @@ remove_node_from_expr_list (const_rtx node, rtx_expr_list **listp)\n       temp = temp->next ();\n     }\n }\n+\n+/* Search LISTP (an INSN_LIST) for an entry whose first operand is NODE and\n+   remove that entry from the list if it is found.\n+\n+   A simple equality test is used to determine if NODE matches.  */\n+\n+void\n+remove_node_from_insn_list (const rtx_insn *node, rtx_insn_list **listp)\n+{\n+  rtx_insn_list *temp = *listp;\n+  rtx prev = NULL;\n+\n+  while (temp)\n+    {\n+      if (node == temp->insn ())\n+\t{\n+\t  /* Splice the node out of the list.  */\n+\t  if (prev)\n+\t    XEXP (prev, 1) = temp->next ();\n+\t  else\n+\t    *listp = temp->next ();\n+\n+\t  return;\n+\t}\n+\n+      prev = temp;\n+      temp = temp->next ();\n+    }\n+}\n \f\n /* Nonzero if X contains any volatile instructions.  These are instructions\n    which may cause unpredictable machine state instructions, and thus no"}, {"sha": "1cbd63d53a21c17627983b4696ddbdec43dd8328", "filename": "gcc/stmt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5241a5a9c5e34639b97aa3d488f021d96eafb4d/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=b5241a5a9c5e34639b97aa3d488f021d96eafb4d", "patch": "@@ -187,7 +187,7 @@ expand_label (tree label)\n     {\n       expand_builtin_setjmp_receiver (NULL);\n       nonlocal_goto_handler_labels\n-\t= gen_rtx_EXPR_LIST (VOIDmode, label_r,\n+\t= gen_rtx_INSN_LIST (VOIDmode, label_r,\n \t\t\t     nonlocal_goto_handler_labels);\n     }\n "}]}