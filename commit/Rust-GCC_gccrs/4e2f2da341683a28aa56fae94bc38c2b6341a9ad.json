{"sha": "4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGUyZjJkYTM0MTY4M2EyOGFhNTZmYWU5NGJjMzhjMmI2MzQxYTlhZA==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-02T10:09:33Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-02T10:09:33Z"}, "message": "re PR tree-optimization/34114 (Missed optimization: cannot determine loop termination)\n\n\tPR tree-optimization/34114\n\t* fold-const.c (multiple_of_p): Improve MULT_EXPR, PLUS_EXPR,\n\tPLUS_EXPR case.  Handle SSA_NAME case.\n\nFrom-SVN: r238982", "tree": {"sha": "fd8b692140e067fa720442480eb581a6512dc153", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd8b692140e067fa720442480eb581a6512dc153"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4e2f2da341683a28aa56fae94bc38c2b6341a9ad/comments", "author": null, "committer": null, "parents": [{"sha": "e877144da9b2c08d93b2fac133aeff15977df53d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e877144da9b2c08d93b2fac133aeff15977df53d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e877144da9b2c08d93b2fac133aeff15977df53d"}], "stats": {"total": 73, "additions": 66, "deletions": 7}, "files": [{"sha": "5687ad5122404cb11e380b3b84bfdf9fff084873", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2f2da341683a28aa56fae94bc38c2b6341a9ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2f2da341683a28aa56fae94bc38c2b6341a9ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "patch": "@@ -1,3 +1,9 @@\n+2016-08-02  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/34114\n+\t* fold-const.c (multiple_of_p): Improve MULT_EXPR, PLUS_EXPR,\n+\tPLUS_EXPR case.  Handle SSA_NAME case.\n+\n 2016-08-02  Tamar Christina  <tamar.christina@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "c6c2bff50112642b4a0e8338fee26250d88ac918", "filename": "gcc/fold-const.c", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4e2f2da341683a28aa56fae94bc38c2b6341a9ad/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4e2f2da341683a28aa56fae94bc38c2b6341a9ad/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=4e2f2da341683a28aa56fae94bc38c2b6341a9ad", "patch": "@@ -12538,6 +12538,9 @@ fold_build_call_array_initializer_loc (location_t loc, tree type, tree fn,\n int\n multiple_of_p (tree type, const_tree top, const_tree bottom)\n {\n+  gimple *stmt;\n+  tree t1, op1, op2;\n+\n   if (operand_equal_p (top, bottom, 0))\n     return 1;\n \n@@ -12554,19 +12557,31 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n       /* FALLTHRU */\n \n     case MULT_EXPR:\n-      return (multiple_of_p (type, TREE_OPERAND (top, 0), bottom)\n-\t      || multiple_of_p (type, TREE_OPERAND (top, 1), bottom));\n+      return (multiple_of_p (type, TREE_OPERAND (top, 1), bottom)\n+\t      || multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n \n-    case PLUS_EXPR:\n     case MINUS_EXPR:\n-      return (multiple_of_p (type, TREE_OPERAND (top, 0), bottom)\n-\t      && multiple_of_p (type, TREE_OPERAND (top, 1), bottom));\n+      /* It is impossible to prove if op0 - op1 is multiple of bottom\n+\t precisely, so be conservative here checking if both op0 and op1\n+\t are multiple of bottom.  Note we check the second operand first\n+\t since it's usually simpler.  */\n+      return (multiple_of_p (type, TREE_OPERAND (top, 1), bottom)\n+\t      && multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n+\n+    case PLUS_EXPR:\n+      /* The same as MINUS_EXPR, but handle cases like op0 + 0xfffffffd\n+\t as op0 - 3 if the expression has unsigned type.  For example,\n+\t (X / 3) + 0xfffffffd is multiple of 3, but 0xfffffffd is not.  */\n+      op1 = TREE_OPERAND (top, 1);\n+      if (TYPE_UNSIGNED (type)\n+\t  && TREE_CODE (op1) == INTEGER_CST && tree_int_cst_sign_bit (op1))\n+\top1 = fold_build1 (NEGATE_EXPR, type, op1);\n+      return (multiple_of_p (type, op1, bottom)\n+\t      && multiple_of_p (type, TREE_OPERAND (top, 0), bottom));\n \n     case LSHIFT_EXPR:\n       if (TREE_CODE (TREE_OPERAND (top, 1)) == INTEGER_CST)\n \t{\n-\t  tree op1, t1;\n-\n \t  op1 = TREE_OPERAND (top, 1);\n \t  /* const_binop may not detect overflow correctly,\n \t     so check for it explicitly here.  */\n@@ -12606,6 +12621,44 @@ multiple_of_p (tree type, const_tree top, const_tree bottom)\n       return wi::multiple_of_p (wi::to_widest (top), wi::to_widest (bottom),\n \t\t\t\tSIGNED);\n \n+    case SSA_NAME:\n+      if (TREE_CODE (bottom) == INTEGER_CST\n+\t  && (stmt = SSA_NAME_DEF_STMT (top)) != NULL\n+\t  && gimple_code (stmt) == GIMPLE_ASSIGN)\n+\t{\n+\t  enum tree_code code = gimple_assign_rhs_code (stmt);\n+\n+\t  /* Check for special cases to see if top is defined as multiple\n+\t     of bottom:\n+\n+\t       top = (X & ~(bottom - 1) ; bottom is power of 2\n+\n+\t     or\n+\n+\t       Y = X % bottom\n+\t       top = X - Y.  */\n+\t  if (code == BIT_AND_EXPR\n+\t      && (op2 = gimple_assign_rhs2 (stmt)) != NULL_TREE\n+\t      && TREE_CODE (op2) == INTEGER_CST\n+\t      && integer_pow2p (bottom)\n+\t      && wi::multiple_of_p (wi::to_widest (op2),\n+\t\t\t\t    wi::to_widest (bottom), UNSIGNED))\n+\t    return 1;\n+\n+\t  op1 = gimple_assign_rhs1 (stmt);\n+\t  if (code == MINUS_EXPR\n+\t      && (op2 = gimple_assign_rhs2 (stmt)) != NULL_TREE\n+\t      && TREE_CODE (op2) == SSA_NAME\n+\t      && (stmt = SSA_NAME_DEF_STMT (op2)) != NULL\n+\t      && gimple_code (stmt) == GIMPLE_ASSIGN\n+\t      && (code = gimple_assign_rhs_code (stmt)) == TRUNC_MOD_EXPR\n+\t      && operand_equal_p (op1, gimple_assign_rhs1 (stmt), 0)\n+\t      && operand_equal_p (bottom, gimple_assign_rhs2 (stmt), 0))\n+\t    return 1;\n+\t}\n+\n+      /* .. fall through ...  */\n+\n     default:\n       return 0;\n     }"}]}