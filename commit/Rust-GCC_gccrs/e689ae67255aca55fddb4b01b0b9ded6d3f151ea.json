{"sha": "e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY4OWFlNjcyNTVhY2E1NWZkZGI0YjAxYjBiOWRlZDZkM2YxNTFlYQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-09-23T20:51:06Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-09-23T20:51:06Z"}, "message": "dwarf2out.c (output_aranges): Use DW_AT_location to find the symbol for a variable.\n\n\t* dwarf2out.c (output_aranges): Use DW_AT_location to find the\n\tsymbol for a variable.\n\nFrom-SVN: r29637", "tree": {"sha": "77ef710d35533a76a8a142f6b6b5bde312d104f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77ef710d35533a76a8a142f6b6b5bde312d104f8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e689ae67255aca55fddb4b01b0b9ded6d3f151ea/comments", "author": null, "committer": null, "parents": [{"sha": "c857e3b4706931f12b0aeeb8442b3893af4818a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c857e3b4706931f12b0aeeb8442b3893af4818a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c857e3b4706931f12b0aeeb8442b3893af4818a4"}], "stats": {"total": 39, "additions": 27, "deletions": 12}, "files": [{"sha": "f2f868d7759636b53eb1165f71d2585b2b0b2ee2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689ae67255aca55fddb4b01b0b9ded6d3f151ea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689ae67255aca55fddb4b01b0b9ded6d3f151ea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "patch": "@@ -1,5 +1,8 @@\n Thu Sep 23 13:40:02 1999  Jason Merrill  <jason@yorick.cygnus.com>\n \n+\t* dwarf2out.c (output_aranges): Use DW_AT_location to find the\n+\tsymbol for a variable.\n+\n \t* cpplib.h (CPP_PREPROCESSED): New macro.\n \t* cpplib.c (handle_directive): Don't complain about `# NUMBER' if\n \twe're seeing this input for a second time."}, {"sha": "832ea4760f9db54a7c8f59d178ae5508701c5f73", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e689ae67255aca55fddb4b01b0b9ded6d3f151ea/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e689ae67255aca55fddb4b01b0b9ded6d3f151ea/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e689ae67255aca55fddb4b01b0b9ded6d3f151ea", "patch": "@@ -5687,29 +5687,38 @@ output_aranges ()\n   fputc ('\\n', asm_out_file);\n   for (i = 0; i < arange_table_in_use; ++i)\n     {\n-      dw_die_ref a = arange_table[i];\n+      dw_die_ref die = arange_table[i];\n \n-      if (a->die_tag == DW_TAG_subprogram)\n-\tASM_OUTPUT_DWARF_ADDR (asm_out_file, get_AT_low_pc (a));\n+      if (die->die_tag == DW_TAG_subprogram)\n+\tASM_OUTPUT_DWARF_ADDR (asm_out_file, get_AT_low_pc (die));\n       else\n \t{\n-\t  char *name = get_AT_string (a, DW_AT_MIPS_linkage_name);\n-\t  if (! name)\n-\t    name = get_AT_string (a, DW_AT_name);\n+\t  /* A static variable; extract the symbol from DW_AT_location.\n+\t     Note that this code isn't currently hit, as we only emit\n+\t     aranges for functions (jason 9/23/99).  */\n \n-\t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, name);\n+\t  dw_attr_ref a = get_AT (die, DW_AT_location);\n+\t  dw_loc_descr_ref loc;\n+\t  if (! a || a->dw_attr_val.val_class != dw_val_class_loc)\n+\t    abort ();\n+\n+\t  loc = a->dw_attr_val.v.val_loc;\n+\t  if (loc->dw_loc_opc != DW_OP_addr)\n+\t    abort ();\n+\n+\t  ASM_OUTPUT_DWARF_ADDR (asm_out_file, loc->dw_loc_oprnd1.v.val_addr);\n \t}\n \n       if (flag_debug_asm)\n \tfprintf (asm_out_file, \"\\t%s Address\", ASM_COMMENT_START);\n \n       fputc ('\\n', asm_out_file);\n-      if (a->die_tag == DW_TAG_subprogram)\n-\tASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, get_AT_hi_pc (a),\n-\t\t\t\t     get_AT_low_pc (a));\n+      if (die->die_tag == DW_TAG_subprogram)\n+\tASM_OUTPUT_DWARF_ADDR_DELTA (asm_out_file, get_AT_hi_pc (die),\n+\t\t\t\t     get_AT_low_pc (die));\n       else\n \tASM_OUTPUT_DWARF_ADDR_DATA (asm_out_file,\n-\t\t\t\t    get_AT_unsigned (a, DW_AT_byte_size));\n+\t\t\t\t    get_AT_unsigned (die, DW_AT_byte_size));\n \n       if (flag_debug_asm)\n \tfprintf (asm_out_file, \"%s Length\", ASM_COMMENT_START);\n@@ -7693,6 +7702,7 @@ add_name_and_src_coords_attributes (die, decl)\n     {\n       add_name_attribute (die, dwarf2_name (decl, 0));\n       add_src_coords_attributes (die, decl);\n+\n       if ((TREE_CODE (decl) == FUNCTION_DECL || TREE_CODE (decl) == VAR_DECL)\n \t  && DECL_ASSEMBLER_NAME (decl) != DECL_NAME (decl))\n \tadd_AT_string (die, DW_AT_MIPS_linkage_name,\n@@ -8664,7 +8674,7 @@ gen_variable_die (decl, context_die)\n   else if (old_die && TREE_STATIC (decl)\n  \t   && get_AT_flag (old_die, DW_AT_declaration) == 1)\n     {\n-      /* ??? This is an instantiation of a C++ class level static.  */\n+      /* This is a definition of a C++ class level static.  */\n       add_AT_die_ref (var_die, DW_AT_specification, old_die);\n       if (DECL_NAME (decl))\n \t{\n@@ -10175,6 +10185,8 @@ dwarf2out_finish ()\n       output_pubnames ();\n     }\n \n+  /* We only put functions in the arange table, so don't write it out if\n+     we don't have any.  */\n   if (fde_table_in_use)\n     {\n       /* Output the address range information.  */"}]}