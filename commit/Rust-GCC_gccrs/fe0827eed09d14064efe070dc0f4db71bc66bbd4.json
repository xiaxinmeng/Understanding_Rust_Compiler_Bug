{"sha": "fe0827eed09d14064efe070dc0f4db71bc66bbd4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUwODI3ZWVkMDlkMTQwNjRlZmUwNzBkYzBmNGRiNzFiYzY2YmJkNA==", "commit": {"author": {"name": "Tom de Vries", "email": "tdevries@suse.de", "date": "2018-12-13T18:04:05Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2018-12-13T18:04:05Z"}, "message": "[libgomp, nvptx] Fix libgomp.c/target-5.c compilation\n\nLibgomp test-case libgomp.c/target-5.c is failing to compile when building for\nx86_64 with nvptx accelerator due to missing:\n- getpid\n- gethostname\n- isatty (pulled in by fwrite)\nin the nvptx newlib.\n\nThis patch fixes the build failure by:\n- adding a function gomp_print_string which limits the use of fwrite to a single\n  location (in affinity-fmt.c), and\n- creating an nvptx version of affinity-fmt.c, which:\n  - overrides the configure test results HAVE_GETPID and HAVE_GETHOSTNAME, and\n  - implements fwrite using write.\n\nBuild and reg-tested on x86_64 with nvptx accelerator.\n\n2018-12-13  Tom de Vries  <tdevries@suse.de>\n\n\t* affinity-fmt.c (gomp_print_string): New function, factored out of ...\n\t(omp_display_affinity, gomp_display_affinity_thread): ... here, and ...\n\t* fortran.c (omp_display_affinity_): ... here.\n\t* libgomp.h (gomp_print_string): Declare.\n\t* config/nvptx/affinity-fmt.c: New file.  Include affinity-fmt.c,\n\tundefining HAVE_GETPID and HAVE_GETHOSTNAME, and mapping fwrite to\n\twrite.\n\nFrom-SVN: r267100", "tree": {"sha": "1d57d9badd25c6a5f1a76878106124d6add57a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d57d9badd25c6a5f1a76878106124d6add57a25"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe0827eed09d14064efe070dc0f4db71bc66bbd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0827eed09d14064efe070dc0f4db71bc66bbd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe0827eed09d14064efe070dc0f4db71bc66bbd4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe0827eed09d14064efe070dc0f4db71bc66bbd4/comments", "author": {"login": "vries", "id": 4057235, "node_id": "MDQ6VXNlcjQwNTcyMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vries", "html_url": "https://github.com/vries", "followers_url": "https://api.github.com/users/vries/followers", "following_url": "https://api.github.com/users/vries/following{/other_user}", "gists_url": "https://api.github.com/users/vries/gists{/gist_id}", "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vries/subscriptions", "organizations_url": "https://api.github.com/users/vries/orgs", "repos_url": "https://api.github.com/users/vries/repos", "events_url": "https://api.github.com/users/vries/events{/privacy}", "received_events_url": "https://api.github.com/users/vries/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3147e59284d2a916eac1972f44bd9aff72178a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3147e59284d2a916eac1972f44bd9aff72178a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3147e59284d2a916eac1972f44bd9aff72178a4"}], "stats": {"total": 80, "additions": 74, "deletions": 6}, "files": [{"sha": "7b42e87f50a6f8f794cbcf8b0d7a2a696df00193", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=fe0827eed09d14064efe070dc0f4db71bc66bbd4", "patch": "@@ -1,3 +1,13 @@\n+2018-12-13  Tom de Vries  <tdevries@suse.de>\n+\n+\t* affinity-fmt.c (gomp_print_string): New function, factored out of ...\n+\t(omp_display_affinity, gomp_display_affinity_thread): ... here, and ...\n+\t* fortran.c (omp_display_affinity_): ... here.\n+\t* libgomp.h (gomp_print_string): Declare.\n+\t* config/nvptx/affinity-fmt.c: New file.  Include affinity-fmt.c,\n+\tundefining HAVE_GETPID and HAVE_GETHOSTNAME, and mapping fwrite to\n+\twrite.\n+\n 2018-12-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR libgomp/88460"}, {"sha": "1447597e7f7490c27d1b544eb6e6d05f4c7c0632", "filename": "libgomp/affinity-fmt.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Faffinity-fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Faffinity-fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Faffinity-fmt.c?ref=fe0827eed09d14064efe070dc0f4db71bc66bbd4", "patch": "@@ -37,6 +37,12 @@\n #include <sys/utsname.h>\n #endif\n \n+void\n+gomp_print_string (const char *str, size_t len)\n+{\n+  fwrite (str, 1, len, stderr);\n+}\n+\n void\n gomp_set_affinity_format (const char *format, size_t len)\n {\n@@ -456,13 +462,13 @@ omp_display_affinity (const char *format)\n   if (ret < sizeof buf)\n     {\n       buf[ret] = '\\n';\n-      fwrite (buf, 1, ret + 1, stderr);\n+      gomp_print_string (buf, ret + 1);\n       return;\n     }\n   b = gomp_malloc (ret + 1);\n   ialias_call (omp_capture_affinity) (b, ret + 1, format);\n   b[ret] = '\\n';\n-  fwrite (b, 1, ret + 1, stderr);\n+  gomp_print_string (b, ret + 1);\n   free (b);\n }\n \n@@ -477,13 +483,13 @@ gomp_display_affinity_thread (gomp_thread_handle handle,\n   if (ret < sizeof buf)\n     {\n       buf[ret] = '\\n';\n-      fwrite (buf, 1, ret + 1, stderr);\n+      gomp_print_string (buf, ret + 1);\n       return;\n     }\n   b = gomp_malloc (ret + 1);\n   gomp_display_affinity (b, ret + 1, gomp_affinity_format_var,\n   \t\t\t handle, ts, place);\n   b[ret] = '\\n';\n-  fwrite (b, 1, ret + 1, stderr);\n+  gomp_print_string (b, ret + 1);\n   free (b);\n }"}, {"sha": "5e4a3fb91cd4a451ac48f724aac6f6380d8b7111", "filename": "libgomp/config/nvptx/affinity-fmt.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Fconfig%2Fnvptx%2Faffinity-fmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Fconfig%2Fnvptx%2Faffinity-fmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fconfig%2Fnvptx%2Faffinity-fmt.c?ref=fe0827eed09d14064efe070dc0f4db71bc66bbd4", "patch": "@@ -0,0 +1,51 @@\n+/* Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+   This file is part of the GNU Offloading and Multi Processing Library\n+   (libgomp).\n+\n+   Libgomp is free software; you can redistribute it and/or modify it\n+   under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   Libgomp is distributed in the hope that it will be useful, but WITHOUT ANY\n+   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+   FOR A PARTICULAR PURPOSE.  See the GNU General Public License for\n+   more details.\n+\n+   Under Section 7 of GPL version 3, you are granted additional\n+   permissions described in the GCC Runtime Library Exception, version\n+   3.1, as published by the Free Software Foundation.\n+\n+   You should have received a copy of the GNU General Public License and\n+   a copy of the GCC Runtime Library Exception along with this program;\n+   see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include \"libgomp.h\"\n+#include <string.h>\n+#include <stdio.h>\n+#include <stdlib.h>\n+#ifdef HAVE_UNISTD_H\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_INTTYPES_H\n+# include <inttypes.h>  /* For PRIx64.  */\n+#endif\n+#ifdef HAVE_UNAME\n+#include <sys/utsname.h>\n+#endif\n+\n+/* The HAVE_GETPID and HAVE_GETHOSTNAME configure tests are passing for nvptx,\n+   while the nvptx newlib implementation does not support those functions.\n+   Override the configure test results here.  */\n+#undef HAVE_GETPID\n+#undef HAVE_GETHOSTNAME\n+\n+/* The nvptx newlib implementation does not support fwrite, but it does support\n+   write.  Map fwrite to write.  */\n+#undef fwrite\n+#define fwrite(ptr, size, nmemb, stream) write (1, (ptr), (nmemb) * (size))\n+\n+#include \"../../affinity-fmt.c\"\n+"}, {"sha": "328bf9c8450cdd02b658f95f9b33903f66ef0d0b", "filename": "libgomp/fortran.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Ffortran.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Ffortran.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ffortran.c?ref=fe0827eed09d14064efe070dc0f4db71bc66bbd4", "patch": "@@ -626,7 +626,7 @@ omp_display_affinity_ (const char *format, size_t format_len)\n   if (ret < sizeof buf)\n     {\n       buf[ret] = '\\n';\n-      fwrite (buf, 1, ret + 1, stderr);\n+      gomp_print_string (buf, ret + 1);\n     }\n   else\n     {\n@@ -635,7 +635,7 @@ omp_display_affinity_ (const char *format, size_t format_len)\n \t\t\t     format_len ? fmt : gomp_affinity_format_var,\n \t\t\t     gomp_thread_self (), &thr->ts, thr->place);\n       b[ret] = '\\n';\n-      fwrite (b, 1, ret + 1, stderr);\n+      gomp_print_string (b, ret + 1);\n       free (b);\n     }\n   if (fmt && fmt != fmt_buf)"}, {"sha": "8105e640e32d4d644f3e7685ef3fa9fb7f2abefb", "filename": "libgomp/libgomp.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Flibgomp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe0827eed09d14064efe070dc0f4db71bc66bbd4/libgomp%2Flibgomp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Flibgomp.h?ref=fe0827eed09d14064efe070dc0f4db71bc66bbd4", "patch": "@@ -751,6 +751,7 @@ extern void gomp_display_affinity_place (char *, size_t, size_t *, int);\n \n /* affinity-fmt.c */\n \n+extern void gomp_print_string (const char *str, size_t len);\n extern void gomp_set_affinity_format (const char *, size_t);\n extern void gomp_display_string (char *, size_t, size_t *, const char *,\n \t\t\t\t size_t);"}]}