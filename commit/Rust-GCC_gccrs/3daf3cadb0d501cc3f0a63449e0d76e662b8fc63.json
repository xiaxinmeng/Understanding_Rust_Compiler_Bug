{"sha": "3daf3cadb0d501cc3f0a63449e0d76e662b8fc63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2RhZjNjYWRiMGQ1MDFjYzNmMGE2MzQ0OWUwZDc2ZTY2MmI4ZmM2Mw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-20T19:13:33Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-11-20T19:13:33Z"}, "message": "Complete rewrite.\n\nFrom-SVN: r2762", "tree": {"sha": "759b9f01aec5e5cb0e9be02566ca795bb3e60ce1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/759b9f01aec5e5cb0e9be02566ca795bb3e60ce1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63/comments", "author": null, "committer": null, "parents": [{"sha": "22331794801d6eed0639ec80adf60cc9b98c63a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22331794801d6eed0639ec80adf60cc9b98c63a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22331794801d6eed0639ec80adf60cc9b98c63a3"}], "stats": {"total": 133, "additions": 129, "deletions": 4}, "files": [{"sha": "bad04485da7758d1d01f7b5e0ae488a5f8ab774e", "filename": "gcc/config/i386/386bsd.h", "status": "modified", "additions": 129, "deletions": 4, "changes": 133, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63/gcc%2Fconfig%2Fi386%2F386bsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3daf3cadb0d501cc3f0a63449e0d76e662b8fc63/gcc%2Fconfig%2Fi386%2F386bsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2F386bsd.h?ref=3daf3cadb0d501cc3f0a63449e0d76e662b8fc63", "patch": "@@ -1,8 +1,133 @@\n /* Configuration for an i386 running 386BSD as the target machine.  */\n-#include \"i386mach.h\"\n+\n+/* This is tested by i386gas.h.  */\n+#define YES_UNDERSCORES\n+\n+#include \"i386gstabs.h\"\n \n #undef CPP_PREDEFINES\n-#define CPP_PREDEFINES \"-Dunix -Di386 -D____386BSD____\"\n+#define CPP_PREDEFINES \"-Dunix -Di386 -D____386BSD____ -D__386BSD__ -DBSD_NET2\"\n+\n+/* Like the default, except no -lg.  */\n+#define LIB_SPEC \"%{!p:%{!pg:-lc}}%{p:-lc_p}%{pg:-lc_p}\"\n+\n+#undef SIZE_TYPE\n+#define SIZE_TYPE \"unsigned int\"\n+\n+#undef PTRDIFF_TYPE\n+#define PTRDIFF_TYPE \"int\"\n+\n+#undef WCHAR_TYPE\n+#define WCHAR_TYPE \"short unsigned int\"\n+\n+#define WCHAR_UNSIGNED 1\n+\n+#undef WCHAR_TYPE_SIZE\n+#define WCHAR_TYPE_SIZE 16\n+\n+/* 386BSD does have atexit.  */\n+\n+#define HAVE_ATEXIT\n+\n+/* Redefine this to use %eax instead of %edx.  */\n+#undef FUNCTION_PROFILER\n+#define FUNCTION_PROFILER(FILE, LABELNO)  \\\n+{\t\t\t\t\t\t\t\t\t\\\n+  if (flag_pic)\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tleal %sP%d@GOTOFF(%%ebx),%%eax\\n\",\t\t\\\n+\t       LPREFIX, (LABELNO));\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tcall *_mcount@GOT(%%ebx)\\n\");\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      fprintf (FILE, \"\\tmovl $%sP%d,%%eax\\n\", LPREFIX, (LABELNO));\t\\\n+      fprintf (FILE, \"\\tcall _mcount\\n\");\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+}\n+\n+/* There are conflicting reports about whether this system uses\n+   a different assembler syntax.  */\n+#if 0\n+#undef COMMENT_BEGIN\n+#define COMMENT_BEGIN \"#\"\n+\n+#undef ASM_APP_ON\n+#define ASM_APP_ON \"#APP\\n\"\n+\n+#undef ASM_APP_OFF\n+#define ASM_APP_OFF \"#NO_APP\\n\"\n+#endif\n+\f\n+/* Defines to be able to build libgcc.a with GCC.\n+   These are the same as in i386mach.h.  */\n+\n+/* It might seem that these are not important, since gcc 2 will never\n+   call libgcc for these functions.  But programs might be linked with\n+   code compiled by gcc 1, and then these will be used.  */\n+\n+#define perform_udivsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_divsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n+  return ax;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_umodsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  dx = 0;\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"divl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b), \"d\" (dx));\t\\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n+#define perform_modsi3(a,b)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  register int dx asm(\"dx\");\t\t\t\t\t\t\\\n+  register int ax asm(\"ax\");\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  ax = a;\t\t\t\t\t\t\t\t\\\n+  asm (\"cltd\\n\\tidivl %3\" : \"=a\" (ax), \"=d\" (dx) : \"a\" (ax), \"g\" (b));\t\\\n+  return dx;\t\t\t\t\t\t\t\t\\\n+}\n+\n \n-/* Specify extra dir to search for include files.  */\n-#undef SYSTEM_INCLUDE_DIR\n+#define perform_fixdfsi(a)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  auto unsigned short ostatus;\t\t\t\t\t\t\\\n+  auto unsigned short nstatus;\t\t\t\t\t\t\\\n+  auto int ret;\t\t\t\t\t\t\t\t\\\n+  auto double tmp;\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  &ostatus;\t\t\t/* guarantee these land in memory */\t\\\n+  &nstatus;\t\t\t\t\t\t\t\t\\\n+  &ret;\t\t\t\t\t\t\t\t\t\\\n+  &tmp;\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"fnstcw %0\" : \"=m\" (ostatus));\t\t\t\t\\\n+  nstatus = ostatus | 0x0c00;\t\t\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (nstatus));\t\t\\\n+  tmp = a;\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"fldl %0\" : /* no outputs */ : \"m\" (tmp));\t\t\\\n+  asm volatile (\"fistpl %0\" : \"=m\" (ret));\t\t\t\t\\\n+  asm volatile (\"fldcw %0\" : /* no outputs */ : \"m\" (ostatus));\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}"}]}