{"sha": "57d22af251655cc429d5dec2f6234f33a3c2d8c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdkMjJhZjI1MTY1NWNjNDI5ZDVkZWMyZjYyMzRmMzNhM2MyZDhjOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T12:50:35Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-05-22T12:50:35Z"}, "message": "[multiple changes]\n\n2015-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sprint.adb (Source_Dump): When generating debug files, deal\n\twith the case of a stand-alone package instantiation by dumping\n\ttogether the spec and the body in the common debug file.\n\n2015-05-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Minimum_Size): Size is zero for null range\n\tdiscrete subtype.\n\n2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* einfo.adb (Anonymous_Master): This attribute now applies\n\tto package and subprogram bodies.\n\t(Set_Anonymous_Master): This attribute now applies to package and\n\tsubprogram bodies.\n\t(Write_Field36_Name): Add output for package and subprogram bodies.\n\t* einfo.ads Update the documentation on attribute Anonymous_Master\n\talong with occurrences in entities.\n\t* exp_ch4.adb (Create_Anonymous_Master): Reimplemented to\n\thandle spec and body anonymous masters of the same unit.\n\t(Current_Anonymous_Master): Reimplemented. Handle a\n\tpackage instantiation that acts as a compilation unit.\n\t(Insert_And_Analyze): Reimplemented.\n\n2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch10.adb (Analyze_With_Clause): A limited_with_clause on a\n\tpredefined unit is treated as a regular with_clause.\n\nFrom-SVN: r223557", "tree": {"sha": "e30d8fa127f2a8d0f8e2223bd9662d6dc7888059", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e30d8fa127f2a8d0f8e2223bd9662d6dc7888059"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57d22af251655cc429d5dec2f6234f33a3c2d8c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d22af251655cc429d5dec2f6234f33a3c2d8c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57d22af251655cc429d5dec2f6234f33a3c2d8c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57d22af251655cc429d5dec2f6234f33a3c2d8c9/comments", "author": null, "committer": null, "parents": [{"sha": "770551bc9337bddcb721f89a1d231d7afaf141ef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/770551bc9337bddcb721f89a1d231d7afaf141ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/770551bc9337bddcb721f89a1d231d7afaf141ef"}], "stats": {"total": 277, "additions": 200, "deletions": 77}, "files": [{"sha": "9c8ddbfaf3a44dc97a4e38f51dcb8c424eb48b84", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -1,3 +1,34 @@\n+2015-05-22  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sprint.adb (Source_Dump): When generating debug files, deal\n+\twith the case of a stand-alone package instantiation by dumping\n+\ttogether the spec and the body in the common debug file.\n+\n+2015-05-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Minimum_Size): Size is zero for null range\n+\tdiscrete subtype.\n+\n+2015-05-22  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* einfo.adb (Anonymous_Master): This attribute now applies\n+\tto package and subprogram bodies.\n+\t(Set_Anonymous_Master): This attribute now applies to package and\n+\tsubprogram bodies.\n+\t(Write_Field36_Name): Add output for package and subprogram bodies.\n+\t* einfo.ads Update the documentation on attribute Anonymous_Master\n+\talong with occurrences in entities.\n+\t* exp_ch4.adb (Create_Anonymous_Master): Reimplemented to\n+\thandle spec and body anonymous masters of the same unit.\n+\t(Current_Anonymous_Master): Reimplemented. Handle a\n+\tpackage instantiation that acts as a compilation unit.\n+\t(Insert_And_Analyze): Reimplemented.\n+\n+2015-05-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch10.adb (Analyze_With_Clause): A limited_with_clause on a\n+\tpredefined unit is treated as a regular with_clause.\n+\n 2015-05-22  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch12.adb, prj.ads, makeutl.ads, sem_ch6.adb, prj-nmsc.adb,"}, {"sha": "9b7cced24cbb384f15f4f913f719526c6bff76ef", "filename": "gcc/ada/einfo.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Feinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Feinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.adb?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -757,7 +757,11 @@ package body Einfo is\n \n    function Anonymous_Master (Id : E) return E is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Package, E_Procedure));\n+      pragma Assert (Ekind_In (Id, E_Function,\n+                                   E_Package,\n+                                   E_Package_Body,\n+                                   E_Procedure,\n+                                   E_Subprogram_Body));\n       return Node36 (Id);\n    end Anonymous_Master;\n \n@@ -3586,7 +3590,11 @@ package body Einfo is\n \n    procedure Set_Anonymous_Master (Id : E; V : E) is\n    begin\n-      pragma Assert (Ekind_In (Id, E_Function, E_Package, E_Procedure));\n+      pragma Assert (Ekind_In (Id, E_Function,\n+                                   E_Package,\n+                                   E_Package_Body,\n+                                   E_Procedure,\n+                                   E_Subprogram_Body));\n       Set_Node36 (Id, V);\n    end Set_Anonymous_Master;\n \n@@ -10141,7 +10149,9 @@ package body Einfo is\n          when E_Function                                   |\n               E_Operator                                   |\n               E_Package                                    |\n-              E_Procedure                                  =>\n+              E_Package_Body                               |\n+              E_Procedure                                  |\n+              E_Subprogram_Body                            =>\n             Write_Str (\"Anonymous_Master\");\n \n          when others                                       =>"}, {"sha": "76a8ff7e098ad7b8a0ccc8666c56df2b2a744924", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -437,10 +437,10 @@ package Einfo is\n --       into an attribute definition clause for this purpose.\n \n --    Anonymous_Master (Node36)\n---       Defined in the entities of non-generic subprogram and package units.\n---       Contains the entity of a special heterogeneous finalization master\n---       that services most anonymous access-to-controlled allocations that\n---       occur within the unit.\n+--       Defined in the entities of non-generic packages, subprograms and their\n+--       corresponding bodies. Contains the entity of a special heterogeneous\n+--       finalization master that services most anonymous access-to-controlled\n+--       allocations that occur within the unit.\n \n --    Associated_Entity (Node37)\n --       Defined in all entities. This field is similar to Associated_Node, but\n@@ -6096,6 +6096,7 @@ package Einfo is\n    --    SPARK_Pragma                        (Node32)\n    --    SPARK_Aux_Pragma                    (Node33)\n    --    Contract                            (Node34)\n+   --    Anonymous_Master                    (Node36)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    Delay_Subprogram_Descriptors        (Flag50)\n    --    SPARK_Aux_Pragma_Inherited          (Flag266)\n@@ -6320,6 +6321,7 @@ package Einfo is\n    --    Extra_Formals                       (Node28)\n    --    SPARK_Pragma                        (Node32)\n    --    Contract                            (Node34)\n+   --    Anonymous_Master                    (Node36)\n    --    Contains_Ignored_Ghost_Code         (Flag279)\n    --    SPARK_Pragma_Inherited              (Flag265)\n    --    Scope_Depth                         (synth)"}, {"sha": "9f3be7eb2727d26777fb293c20c139832b3721f0", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 105, "deletions": 66, "changes": 171, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -416,82 +416,134 @@ package body Exp_Ch4 is\n \n    function Current_Anonymous_Master return Entity_Id is\n       function Create_Anonymous_Master\n-        (Unit_Id : Entity_Id;\n-         Decls   : List_Id) return Entity_Id;\n-      --  Create a new anonymous finalization master for a unit denoted by\n-      --  Unit_Id. The declaration of the master along with any specialized\n-      --  initialization is inserted at the top of declarative list Decls.\n-      --  Return the entity of the anonymous master.\n+        (Unit_Id   : Entity_Id;\n+         Unit_Decl : Node_Id) return Entity_Id;\n+      --  Create a new anonymous master for a compilation unit denoted by its\n+      --  entity Unit_Id and declaration Unit_Decl. The declaration of the new\n+      --  master along with any specialized initialization is inserted at the\n+      --  top of the unit's declarations (see body for special cases). Return\n+      --  the entity of the anonymous master.\n \n       -----------------------------\n       -- Create_Anonymous_Master --\n       -----------------------------\n \n       function Create_Anonymous_Master\n-        (Unit_Id : Entity_Id;\n-         Decls   : List_Id) return Entity_Id\n+        (Unit_Id   : Entity_Id;\n+         Unit_Decl : Node_Id) return Entity_Id\n       is\n-         First_Decl : Node_Id := Empty;\n-         --  The first declaration of list Decls. This variable is used when\n-         --  inserting various actions.\n+         Insert_Nod : Node_Id := Empty;\n+         --  The point of insertion into the declarative list of the unit. All\n+         --  nodes are inserted before Insert_Nod.\n \n-         procedure Insert_And_Analyze (Action : Node_Id);\n-         --  Insert arbitrary node Action in declarative list Decl and analyze\n-         --  it.\n+         procedure Insert_And_Analyze (Decls : List_Id; N : Node_Id);\n+         --  Insert arbitrary node N in declarative list Decls and analyze it\n \n          ------------------------\n          -- Insert_And_Analyze --\n          ------------------------\n \n-         procedure Insert_And_Analyze (Action : Node_Id) is\n+         procedure Insert_And_Analyze (Decls : List_Id; N : Node_Id) is\n          begin\n-            --  The list is already populated, the actions are inserted at the\n-            --  top of the list, preserving their order.\n+            --  The declarative list is already populated, the nodes are\n+            --  inserted at the top of the list, preserving their order.\n \n-            if Present (First_Decl) then\n-               Insert_Before_And_Analyze (First_Decl, Action);\n+            if Present (Insert_Nod) then\n+               Insert_Before (Insert_Nod, N);\n \n             --  Otherwise append to the declarations to preserve order\n \n             else\n-               Append_To (Decls, Action);\n-               Analyze (Action);\n+               Append_To (Decls, N);\n             end if;\n+\n+            Analyze (N);\n          end Insert_And_Analyze;\n \n          --  Local variables\n \n-         Loc   : constant Source_Ptr := Sloc (Unit_Id);\n-         FM_Id : Entity_Id;\n+         Loc       : constant Source_Ptr := Sloc (Unit_Id);\n+         Spec_Id   : constant Entity_Id  := Corresponding_Spec_Of (Unit_Decl);\n+         Decls     : List_Id;\n+         FM_Id     : Entity_Id;\n+         Pref      : Character;\n+         Unit_Spec : Node_Id;\n \n       --  Start of processing for Create_Anonymous_Master\n \n       begin\n-         if Present (Decls) then\n-            First_Decl := First (Decls);\n+         --  Find the declarative list of the unit\n+\n+         if Nkind (Unit_Decl) = N_Package_Declaration then\n+            Unit_Spec := Specification (Unit_Decl);\n+            Decls := Visible_Declarations (Unit_Spec);\n+\n+            if No (Decls) then\n+               Decls := New_List (Make_Null_Statement (Loc));\n+               Set_Visible_Declarations (Unit_Spec, Decls);\n+            end if;\n+\n+         --  Package or subprogram body\n+\n+         --  ??? A subprogram declaration that acts as a compilation unit may\n+         --  contain a formal parameter of an anonymous access-to-controlled\n+         --  type initialized by an allocator.\n+\n+         --    procedure Comp_Unit_Proc (Param : access Ctrl := new Ctrl);\n+\n+         --  There is no suitable place to create the anonymous master as the\n+         --  subprogram is not in a declarative list.\n+\n+         else\n+            Decls := Declarations (Unit_Decl);\n+\n+            if No (Decls) then\n+               Decls := New_List (Make_Null_Statement (Loc));\n+               Set_Declarations (Unit_Decl, Decls);\n+            end if;\n          end if;\n \n+         --  The anonymous master and all initialization actions are inserted\n+         --  before the first declaration (if any).\n+\n+         Insert_Nod := First (Decls);\n+\n          --  Since the anonymous master and all its initialization actions are\n          --  inserted at top level, use the scope of the unit when analyzing.\n \n-         Push_Scope (Unit_Id);\n+         Push_Scope (Spec_Id);\n \n-         --  Create the anonymous master\n+         --  Step 1: Anonymous master creation\n+\n+         --  Use a unique prefix in case the same unit requires two anonymous\n+         --  masters, one for the spec (S) and one for the body (B).\n+\n+         if Ekind_In (Unit_Id, E_Function, E_Package, E_Procedure) then\n+            Pref := 'S';\n+         else\n+            Pref := 'B';\n+         end if;\n \n          FM_Id :=\n            Make_Defining_Identifier (Loc,\n-             Chars => New_External_Name (Chars (Unit_Id), \"AM\"));\n+             New_External_Name\n+               (Related_Id => Chars (Unit_Id),\n+                Suffix     => \"AM\",\n+                Prefix     => Pref));\n+\n          Set_Anonymous_Master (Unit_Id, FM_Id);\n \n          --  Generate:\n          --    <FM_Id> : Finalization_Master;\n \n-         Insert_And_Analyze\n-           (Make_Object_Declaration (Loc,\n+         Insert_And_Analyze (Decls,\n+           Make_Object_Declaration (Loc,\n              Defining_Identifier => FM_Id,\n              Object_Definition   =>\n                New_Occurrence_Of (RTE (RE_Finalization_Master), Loc)));\n \n+         --  Step 2: Initialization actions\n+\n          --  Do not set the base pool and mode of operation on .NET/JVM since\n          --  those targets do not support pools and all VM masters defaulted to\n          --  heterogeneous.\n@@ -502,8 +554,8 @@ package body Exp_Ch4 is\n             --    Set_Base_Pool\n             --      (<FM_Id>, Global_Pool_Object'Unrestricted_Access);\n \n-            Insert_And_Analyze\n-              (Make_Procedure_Call_Statement (Loc,\n+            Insert_And_Analyze (Decls,\n+              Make_Procedure_Call_Statement (Loc,\n                 Name                   =>\n                   New_Occurrence_Of (RTE (RE_Set_Base_Pool), Loc),\n                 Parameter_Associations => New_List (\n@@ -516,8 +568,8 @@ package body Exp_Ch4 is\n             --  Generate:\n             --    Set_Is_Heterogeneous (<FM_Id>);\n \n-            Insert_And_Analyze\n-              (Make_Procedure_Call_Statement (Loc,\n+            Insert_And_Analyze (Decls,\n+              Make_Procedure_Call_Statement (Loc,\n                 Name                   =>\n                   New_Occurrence_Of (RTE (RE_Set_Is_Heterogeneous), Loc),\n                 Parameter_Associations => New_List (\n@@ -530,48 +582,35 @@ package body Exp_Ch4 is\n \n       --  Local declarations\n \n-      Unit_Decl : constant Node_Id   := Unit (Cunit (Current_Sem_Unit));\n-      Unit_Id   : constant Entity_Id := Corresponding_Spec_Of (Unit_Decl);\n-      Decls     : List_Id;\n-      FM_Id     : Entity_Id;\n-      Unit_Spec : Node_Id;\n+      Unit_Decl : Node_Id;\n+      Unit_Id   : Entity_Id;\n \n    --  Start of processing for Current_Anonymous_Master\n \n    begin\n-      FM_Id := Anonymous_Master (Unit_Id);\n-\n-      --  Create a new anonymous master when allocating an object of anonymous\n-      --  access-to-controlled type for the first time.\n-\n-      if No (FM_Id) then\n+      Unit_Decl := Unit (Cunit (Current_Sem_Unit));\n+      Unit_Id   := Defining_Entity (Unit_Decl);\n \n-         --  Find the declarative list of the current unit\n+      --  The compilation unit is a package instantiation. In this case the\n+      --  anonymous master is associated with the package spec as both the\n+      --  spec and body appear at the same level.\n \n-         if Nkind (Unit_Decl) = N_Package_Declaration then\n-            Unit_Spec := Specification (Unit_Decl);\n-            Decls := Visible_Declarations (Unit_Spec);\n-\n-            if No (Decls) then\n-               Decls := New_List;\n-               Set_Visible_Declarations (Unit_Spec, Decls);\n-            end if;\n+      if Nkind (Unit_Decl) = N_Package_Body\n+        and then Nkind (Original_Node (Unit_Decl)) = N_Package_Instantiation\n+      then\n+         Unit_Id   := Corresponding_Spec (Unit_Decl);\n+         Unit_Decl := Unit_Declaration_Node (Unit_Id);\n+      end if;\n \n-         --  Package or subprogram body\n+      if Present (Anonymous_Master (Unit_Id)) then\n+         return Anonymous_Master (Unit_Id);\n \n-         else\n-            Decls := Declarations (Unit_Decl);\n-\n-            if No (Decls) then\n-               Decls := New_List;\n-               Set_Declarations (Unit_Decl, Decls);\n-            end if;\n-         end if;\n+      --  Create a new anonymous master when allocating an object of anonymous\n+      --  access-to-controlled type for the first time.\n \n-         FM_Id := Create_Anonymous_Master (Unit_Id, Decls);\n+      else\n+         return Create_Anonymous_Master (Unit_Id, Unit_Decl);\n       end if;\n-\n-      return FM_Id;\n    end Current_Anonymous_Master;\n \n    --------------------------------"}, {"sha": "5824154b49cfaf3d2ea5a767596795f043118161", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -2551,8 +2551,21 @@ package body Sem_Ch10 is\n          --  Ada 2005 (AI-50217): Build visibility structures but do not\n          --  analyze the unit.\n \n+         --  If the designated unit is a predefined unit, which might be used\n+         --  implicitly through the rtsfind machinery, a limited with clause\n+         --  on such a unit is usually pointless, because run-time units are\n+         --  unlikely to appear in mutually dependent units, and because this\n+         --  disables the rtsfind mechanism. We transform such limited with\n+         --  clauses into regular with clauses.\n+\n          if Sloc (U) /= No_Location then\n-            Build_Limited_Views (N);\n+            if Is_Predefined_File_Name (Unit_File_Name (Get_Source_Unit (U)))\n+            then\n+               Set_Limited_Present (N, False);\n+               Analyze_With_Clause (N);\n+            else\n+               Build_Limited_Views (N);\n+            end if;\n          end if;\n \n          return;"}, {"sha": "8a513833cb5f6e24aad17854664dc6b8480839a9", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -11718,11 +11718,20 @@ package body Sem_Ch13 is\n          Lo := Uint_0;\n       end if;\n \n+      --  Null range case, size is always zero. We only do this in the discrete\n+      --  type case, since that's the odd case that came up. Probably we should\n+      --  also do this in the fixed-point case, but doing so causes peculiar\n+      --  gigi failures, and it is not worth worrying about this incredibly\n+      --  marginal case (explicit null-range fixed-point type declarations)???\n+\n+      if Lo > Hi and then Is_Discrete_Type (T) then\n+         S := 0;\n+\n       --  Signed case. Note that we consider types like range 1 .. -1 to be\n       --  signed for the purpose of computing the size, since the bounds have\n       --  to be accommodated in the base type.\n \n-      if Lo < 0 or else Hi < 0 then\n+      elsif Lo < 0 or else Hi < 0 then\n          S := 1;\n          B := Uint_1;\n "}, {"sha": "9e3dca627b34d0591fa912769e6204ba15d697b2", "filename": "gcc/ada/sprint.adb", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsprint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57d22af251655cc429d5dec2f6234f33a3c2d8c9/gcc%2Fada%2Fsprint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsprint.adb?ref=57d22af251655cc429d5dec2f6234f33a3c2d8c9", "patch": "@@ -624,11 +624,16 @@ package body Sprint is\n          for U in Main_Unit .. Last_Unit loop\n             Current_Source_File := Source_Index (U);\n \n-            --  Dump all units if -gnatdf set, otherwise we dump only\n-            --  the source files that are in the extended main source.\n+            --  Dump all units if -gnatdf set, otherwise dump only the source\n+            --  files that are in the extended main source. Note that, if we\n+            --  are generating debug files, generating that of the main unit\n+            --  has an effect on the outcome of In_Extended_Main_Source_Unit\n+            --  because slocs are rewritten, so we also test for equality of\n+            --  Cunit_Entity to work around this effect.\n \n             if Debug_Flag_F\n               or else In_Extended_Main_Source_Unit (Cunit_Entity (U))\n+              or else Cunit_Entity (U) = Cunit_Entity (Main_Unit)\n             then\n                --  If we are generating debug files, setup to write them\n \n@@ -638,6 +643,20 @@ package body Sprint is\n                   First_Debug_Sloc := Debug_Sloc;\n                   Write_Source_Line (1);\n                   Last_Line_Printed := 1;\n+\n+                  --  If this unit has the same entity as the main unit, for\n+                  --  example is the spec of a stand-alone instantiation of\n+                  --  a package and the main unit is the body, its debug file\n+                  --  will also be the same. Therefore, we need to print again\n+                  --  the main unit to have both units in the debug file.\n+\n+                  if U /= Main_Unit\n+                    and then Cunit_Entity (U) = Cunit_Entity (Main_Unit)\n+                  then\n+                     Sprint_Node (Cunit (Main_Unit));\n+                     Write_Eol;\n+                  end if;\n+\n                   Sprint_Node (Cunit (U));\n                   Write_Source_Lines (Last_Source_Line (Current_Source_File));\n                   Write_Eol;"}]}