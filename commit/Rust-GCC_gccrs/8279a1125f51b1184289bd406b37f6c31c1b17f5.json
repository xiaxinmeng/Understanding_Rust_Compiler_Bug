{"sha": "8279a1125f51b1184289bd406b37f6c31c1b17f5", "node_id": "C_kwDOANBUbNoAKDgyNzlhMTEyNWY1MWIxMTg0Mjg5YmQ0MDZiMzdmNmMzMWMxYjE3ZjU", "commit": {"author": {"name": "Ghjuvan Lacambre", "email": "lacambre@adacore.com", "date": "2021-02-09T08:31:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-10-01T06:13:37Z"}, "message": "[Ada] Stub CUDA_Device aspect\n\ngcc/ada/\n\n\t* aspects.ads: Add CUDA_Device aspect.\n\t* gnat_cuda.ads (Add_CUDA_Device_Entity): New subprogram.\n\t* gnat_cuda.adb:\n\t(Add_CUDA_Device_Entity): New subprogram.\n\t(CUDA_Device_Entities_Table): New hashmap for CUDA_Device\n\tentities.\n\t(Get_CUDA_Device_Entities): New internal subprogram.\n\t(Set_CUDA_Device_Entities): New internal subprogram.\n\t* par-prag.adb (Prag): Handle pragma id Pragma_CUDA_Device.\n\t* sem_prag.ads (Aspect_Specifying_Pragma): Mark CUDA_Device as\n\tbeing both aspect and pragma.\n\t* sem_prag.adb (Analyze_Pragma): Add CUDA_Device entities to\n\tlist of CUDA_Entities belonging to package N.\n\t(Sig_Flags): Signal CUDA_Device entities as referenced.\n\t* snames.ads-tmpl: Create CUDA_Device names and pragmas.", "tree": {"sha": "069bfd2fb07e9c2460218dffd33e14ab9de13d8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/069bfd2fb07e9c2460218dffd33e14ab9de13d8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8279a1125f51b1184289bd406b37f6c31c1b17f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8279a1125f51b1184289bd406b37f6c31c1b17f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8279a1125f51b1184289bd406b37f6c31c1b17f5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8279a1125f51b1184289bd406b37f6c31c1b17f5/comments", "author": {"login": "glacambre", "id": 11534587, "node_id": "MDQ6VXNlcjExNTM0NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/11534587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/glacambre", "html_url": "https://github.com/glacambre", "followers_url": "https://api.github.com/users/glacambre/followers", "following_url": "https://api.github.com/users/glacambre/following{/other_user}", "gists_url": "https://api.github.com/users/glacambre/gists{/gist_id}", "starred_url": "https://api.github.com/users/glacambre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/glacambre/subscriptions", "organizations_url": "https://api.github.com/users/glacambre/orgs", "repos_url": "https://api.github.com/users/glacambre/repos", "events_url": "https://api.github.com/users/glacambre/events{/privacy}", "received_events_url": "https://api.github.com/users/glacambre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28c49456b29e6311bd729aed5adac3af045ff739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28c49456b29e6311bd729aed5adac3af045ff739", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28c49456b29e6311bd729aed5adac3af045ff739"}], "stats": {"total": 115, "additions": 110, "deletions": 5}, "files": [{"sha": "11e0aebfeeb7d2ff905cc666a39ad945470a9cc4", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -187,6 +187,7 @@ package Aspects is\n       Aspect_Atomic_Components,\n       Aspect_Disable_Controlled,            -- GNAT\n       Aspect_Discard_Names,\n+      Aspect_CUDA_Device,                   -- GNAT\n       Aspect_CUDA_Global,                   -- GNAT\n       Aspect_Exclusive_Functions,\n       Aspect_Export,\n@@ -476,6 +477,7 @@ package Aspects is\n       Aspect_Contract_Cases               => False,\n       Aspect_Convention                   => True,\n       Aspect_CPU                          => False,\n+      Aspect_CUDA_Device                  => False,\n       Aspect_CUDA_Global                  => False,\n       Aspect_Default_Component_Value      => True,\n       Aspect_Default_Initial_Condition    => False,\n@@ -627,6 +629,7 @@ package Aspects is\n       Aspect_Contract_Cases               => Name_Contract_Cases,\n       Aspect_Convention                   => Name_Convention,\n       Aspect_CPU                          => Name_CPU,\n+      Aspect_CUDA_Device                  => Name_CUDA_Device,\n       Aspect_CUDA_Global                  => Name_CUDA_Global,\n       Aspect_Default_Component_Value      => Name_Default_Component_Value,\n       Aspect_Default_Initial_Condition    => Name_Default_Initial_Condition,\n@@ -872,6 +875,7 @@ package Aspects is\n       Aspect_Attach_Handler               => Always_Delay,\n       Aspect_Constant_Indexing            => Always_Delay,\n       Aspect_CPU                          => Always_Delay,\n+      Aspect_CUDA_Device                  => Always_Delay,\n       Aspect_CUDA_Global                  => Always_Delay,\n       Aspect_Default_Iterator             => Always_Delay,\n       Aspect_Default_Storage_Pool         => Always_Delay,"}, {"sha": "9d4caa698bc093720d78dd94fad90cc1cd3f23b9", "filename": "gcc/ada/gnat_cuda.adb", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fgnat_cuda.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fgnat_cuda.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.adb?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -54,6 +54,18 @@ package body GNAT_CUDA is\n    function Hash (F : Entity_Id) return Hash_Range;\n    --  Hash function for hash table\n \n+   package CUDA_Device_Entities_Table is new\n+     GNAT.HTable.Simple_HTable\n+       (Header_Num => Hash_Range,\n+        Element    => Elist_Id,\n+        No_Element => No_Elist,\n+        Key        => Entity_Id,\n+        Hash       => Hash,\n+        Equal      => \"=\");\n+   --  The keys of this table are package entities whose bodies contain at\n+   --  least one procedure marked with aspect CUDA_Device. The values are\n+   --  Elists of the marked entities.\n+\n    package CUDA_Kernels_Table is new\n      GNAT.HTable.Simple_HTable\n        (Header_Num => Hash_Range,\n@@ -85,17 +97,45 @@ package body GNAT_CUDA is\n    --    * A procedure that takes care of calling CUDA functions that register\n    --      CUDA_Global procedures with the runtime.\n \n+   function Get_CUDA_Device_Entities (Pack_Id : Entity_Id) return Elist_Id;\n+   --  Returns an Elist of all entities marked with pragma CUDA_Device that\n+   --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n+   --  does not contain such entities.\n+\n    function Get_CUDA_Kernels (Pack_Id : Entity_Id) return Elist_Id;\n    --  Returns an Elist of all procedures marked with pragma CUDA_Global that\n    --  are declared within package body Pack_Body. Returns No_Elist if Pack_Id\n    --  does not contain such procedures.\n \n+   procedure Set_CUDA_Device_Entities\n+     (Pack_Id : Entity_Id;\n+      E       : Elist_Id);\n+   --  Stores E as the list of CUDA_Device entities belonging to the package\n+   --  entity Pack_Id. Pack_Id must not have a list of device entities.\n+\n    procedure Set_CUDA_Kernels\n      (Pack_Id : Entity_Id;\n       Kernels : Elist_Id);\n    --  Stores Kernels as the list of kernels belonging to the package entity\n    --  Pack_Id. Pack_Id must not have a list of kernels.\n \n+   ----------------------------\n+   -- Add_CUDA_Device_Entity --\n+   ----------------------------\n+\n+   procedure Add_CUDA_Device_Entity\n+     (Pack_Id : Entity_Id;\n+      E       : Entity_Id)\n+   is\n+      Device_Entities : Elist_Id := Get_CUDA_Device_Entities (Pack_Id);\n+   begin\n+      if Device_Entities = No_Elist then\n+         Device_Entities := New_Elmt_List;\n+         Set_CUDA_Device_Entities (Pack_Id, Device_Entities);\n+      end if;\n+      Append_Elmt (E, Device_Entities);\n+   end Add_CUDA_Device_Entity;\n+\n    ---------------------\n    -- Add_CUDA_Kernel --\n    ---------------------\n@@ -139,6 +179,15 @@ package body GNAT_CUDA is\n       return Hash_Range (F mod 511);\n    end Hash;\n \n+   ------------------------------\n+   -- Get_CUDA_Device_Entities --\n+   ------------------------------\n+\n+   function Get_CUDA_Device_Entities (Pack_Id : Entity_Id) return Elist_Id is\n+   begin\n+      return CUDA_Device_Entities_Table.Get (Pack_Id);\n+   end Get_CUDA_Device_Entities;\n+\n    ----------------------\n    -- Get_CUDA_Kernels --\n    ----------------------\n@@ -605,9 +654,22 @@ package body GNAT_CUDA is\n       Analyze (New_Stmt);\n    end Build_And_Insert_CUDA_Initialization;\n \n-   --------------------\n-   -- Set_CUDA_Nodes --\n-   --------------------\n+   ------------------------------\n+   -- Set_CUDA_Device_Entities --\n+   ------------------------------\n+\n+   procedure Set_CUDA_Device_Entities\n+     (Pack_Id : Entity_Id;\n+      E       : Elist_Id)\n+   is\n+   begin\n+      pragma Assert (Get_CUDA_Device_Entities (Pack_Id) = No_Elist);\n+      CUDA_Device_Entities_Table.Set (Pack_Id, E);\n+   end Set_CUDA_Device_Entities;\n+\n+   ----------------------\n+   -- Set_CUDA_Kernels --\n+   ----------------------\n \n    procedure Set_CUDA_Kernels\n      (Pack_Id : Entity_Id;"}, {"sha": "fc84bda3e8ce6a7fa6f0f037e80702d34b208ab1", "filename": "gcc/ada/gnat_cuda.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fgnat_cuda.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fgnat_cuda.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_cuda.ads?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -77,6 +77,9 @@ with Types; use Types;\n \n package GNAT_CUDA is\n \n+   procedure Add_CUDA_Device_Entity (Pack_Id : Entity_Id; E : Entity_Id);\n+   --  And E to the list of CUDA_Device entities that belong to Pack_Id\n+\n    procedure Add_CUDA_Kernel (Pack_Id : Entity_Id; Kernel : Entity_Id);\n    --  Add Kernel to the list of CUDA_Global nodes that belong to Pack_Id.\n    --  Kernel is a procedure entity marked with CUDA_Global, Pack_Id is the"}, {"sha": "e1258e020f39dd510e474016821cc3da4693a078", "filename": "gcc/ada/par-prag.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fpar-prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fpar-prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-prag.adb?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -1338,6 +1338,7 @@ begin\n          | Pragma_CPP_Virtual\n          | Pragma_CPP_Vtable\n          | Pragma_CPU\n+         | Pragma_CUDA_Device\n          | Pragma_CUDA_Execute\n          | Pragma_CUDA_Global\n          | Pragma_C_Pass_By_Copy"}, {"sha": "c985e36d92904ee2eb9a65c609a1640317e573b8", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -14839,9 +14839,40 @@ package body Sem_Prag is\n                   & \"effect?j?\", N);\n             end if;\n \n-         --------------------\n+         -----------------\n+         -- CUDA_Device --\n+         -----------------\n+\n+         when Pragma_CUDA_Device => CUDA_Device : declare\n+            Arg_Node      : Node_Id;\n+            Device_Entity : Entity_Id;\n+         begin\n+            GNAT_Pragma;\n+            Check_Arg_Count (1);\n+            Arg_Node := Get_Pragma_Arg (Arg1);\n+\n+            Check_Arg_Is_Library_Level_Local_Name (Arg_Node);\n+            Device_Entity := Entity (Arg_Node);\n+\n+            if Ekind (Device_Entity) in E_Variable\n+                                      | E_Constant\n+                                      | E_Procedure\n+                                      | E_Function\n+            then\n+               Add_CUDA_Device_Entity (Scope (Device_Entity), Device_Entity);\n+               Error_Msg_N (\"??& not implemented yet\", N);\n+\n+            else\n+               Error_Msg_NE (\"& must be constant, variable or subprogram\",\n+                 N,\n+                 Device_Entity);\n+            end if;\n+\n+         end CUDA_Device;\n+\n+         ------------------\n          -- CUDA_Execute --\n-         --------------------\n+         ------------------\n \n          --    pragma CUDA_Execute (PROCEDURE_CALL_STATEMENT,\n          --                         EXPRESSION,\n@@ -31248,6 +31279,7 @@ package body Sem_Prag is\n       Pragma_C_Pass_By_Copy                 =>  0,\n       Pragma_Comment                        => -1,\n       Pragma_Common_Object                  =>  0,\n+      Pragma_CUDA_Device                    => -1,\n       Pragma_CUDA_Execute                   => -1,\n       Pragma_CUDA_Global                    => -1,\n       Pragma_Compile_Time_Error             => -1,"}, {"sha": "fed24fdff198759b6d0f4a54d44e5cda6d1113b7", "filename": "gcc/ada/sem_prag.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsem_prag.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsem_prag.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.ads?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -49,6 +49,7 @@ package Sem_Prag is\n       Pragma_Contract_Cases               => True,\n       Pragma_Convention                   => True,\n       Pragma_CPU                          => True,\n+      Pragma_CUDA_Device                  => True,\n       Pragma_CUDA_Global                  => True,\n       Pragma_Default_Initial_Condition    => True,\n       Pragma_Default_Storage_Pool         => True,"}, {"sha": "400adb03baea21842b8b27beac2c482c65e8ec64", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8279a1125f51b1184289bd406b37f6c31c1b17f5/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=8279a1125f51b1184289bd406b37f6c31c1b17f5", "patch": "@@ -526,6 +526,7 @@ package Snames is\n    Name_CPP_Constructor                : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Virtual                    : constant Name_Id := N + $; -- GNAT\n    Name_CPP_Vtable                     : constant Name_Id := N + $; -- GNAT\n+   Name_CUDA_Device                    : constant Name_Id := N + $; -- GNAT\n    Name_CUDA_Execute                   : constant Name_Id := N + $; -- GNAT\n    Name_CUDA_Global                    : constant Name_Id := N + $; -- GNAT\n \n@@ -1862,6 +1863,7 @@ package Snames is\n       Pragma_CPP_Constructor,\n       Pragma_CPP_Virtual,\n       Pragma_CPP_Vtable,\n+      Pragma_CUDA_Device,\n       Pragma_CUDA_Execute,\n       Pragma_CUDA_Global,\n       Pragma_Deadline_Floor,"}]}