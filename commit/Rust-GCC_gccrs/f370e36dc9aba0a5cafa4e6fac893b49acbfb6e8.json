{"sha": "f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3MGUzNmRjOWFiYTBhNWNhZmE0ZTZmYWM4OTNiNDlhY2JmYjZlOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-11-20T12:57:50Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-11-20T12:57:50Z"}, "message": "re PR c++/82781 (Vector extension operators return wrong result in constexpr)\n\n\tPR c++/82781\n\t* constexpr.c (cxx_eval_vector_conditional_expression): New function.\n\t(cxx_eval_constant_expression) <case VEC_COND_EXPR>: Use it instead\n\tof cxx_eval_conditional_expression.\n\n\t* g++.dg/ext/constexpr-pr82781.C: New test.\n\nFrom-SVN: r254952", "tree": {"sha": "e033191b795202233509a9f5a4c1100f881dfdc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e033191b795202233509a9f5a4c1100f881dfdc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1ebafce0bc9072f9aabd0692bbb1aeda672f6b60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ebafce0bc9072f9aabd0692bbb1aeda672f6b60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ebafce0bc9072f9aabd0692bbb1aeda672f6b60"}], "stats": {"total": 69, "additions": 67, "deletions": 2}, "files": [{"sha": "6f4d30e1dfbe2177d5d5fc65d95c94545b7aebfb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "patch": "@@ -1,3 +1,10 @@\n+2017-11-20   Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82781\n+\t* constexpr.c (cxx_eval_vector_conditional_expression): New function.\n+\t(cxx_eval_constant_expression) <case VEC_COND_EXPR>: Use it instead\n+\tof cxx_eval_conditional_expression.\n+\n 2017-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/66618"}, {"sha": "5eac64bd8a3e5967c48e2833a9d2522a58154cad", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "patch": "@@ -2086,6 +2086,45 @@ cxx_eval_conditional_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t       jump_target);\n }\n \n+/* Subroutine of cxx_eval_constant_expression.\n+   Attempt to evaluate vector condition expressions.  Unlike\n+   cxx_eval_conditional_expression, VEC_COND_EXPR acts like a normal\n+   ternary arithmetics operation, where all 3 arguments have to be\n+   evaluated as constants and then folding computes the result from\n+   them.  */\n+\n+static tree\n+cxx_eval_vector_conditional_expression (const constexpr_ctx *ctx, tree t,\n+\t\t\t\t\tbool *non_constant_p, bool *overflow_p)\n+{\n+  tree arg1 = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),\n+\t\t\t\t\t    /*lval*/false,\n+\t\t\t\t\t    non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (arg1);\n+  tree arg2 = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 1),\n+\t\t\t\t\t    /*lval*/false,\n+\t\t\t\t\t    non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (arg2);\n+  tree arg3 = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 2),\n+\t\t\t\t\t    /*lval*/false,\n+\t\t\t\t\t    non_constant_p, overflow_p);\n+  VERIFY_CONSTANT (arg3);\n+  location_t loc = EXPR_LOCATION (t);\n+  tree type = TREE_TYPE (t);\n+  tree r = fold_ternary_loc (loc, VEC_COND_EXPR, type, arg1, arg2, arg3);\n+  if (r == NULL_TREE)\n+    {\n+      if (arg1 == TREE_OPERAND (t, 0)\n+\t  && arg2 == TREE_OPERAND (t, 1)\n+\t  && arg3 == TREE_OPERAND (t, 2))\n+\tr = t;\n+      else\n+\tr = build3_loc (loc, VEC_COND_EXPR, type, arg1, arg2, arg3);\n+    }\n+  VERIFY_CONSTANT (r);\n+  return r;\n+}\n+\n /* Returns less than, equal to, or greater than zero if KEY is found to be\n    less than, to match, or to be greater than the constructor_elt's INDEX.  */\n \n@@ -4398,12 +4437,14 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t      jump_target);\n \t  break;\n \t}\n-      /* FALLTHRU */\n-    case VEC_COND_EXPR:\n       r = cxx_eval_conditional_expression (ctx, t, lval,\n \t\t\t\t\t   non_constant_p, overflow_p,\n \t\t\t\t\t   jump_target);\n       break;\n+    case VEC_COND_EXPR:\n+      r = cxx_eval_vector_conditional_expression (ctx, t, non_constant_p,\n+\t\t\t\t\t\t  overflow_p);\n+      break;\n \n     case CONSTRUCTOR:\n       if (TREE_CONSTANT (t))"}, {"sha": "6148d4b5384c687c0594fbed6523d1003bf720c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "patch": "@@ -1,3 +1,8 @@\n+2017-11-20   Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/82781\n+\t* g++.dg/ext/constexpr-pr82781.C: New test.\n+\n 2017-11-20  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/arm/pr69180.c: Use -: for no column in expected"}, {"sha": "eee0159351c899cb67122cbc14794ddc12642b4f", "filename": "gcc/testsuite/g++.dg/ext/constexpr-pr82781.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-pr82781.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-pr82781.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fconstexpr-pr82781.C?ref=f370e36dc9aba0a5cafa4e6fac893b49acbfb6e8", "patch": "@@ -0,0 +1,12 @@\n+// PR c++/82781\n+// { dg-do compile { target c++11 } }\n+\n+typedef int V __attribute__ ((vector_size (16)));\n+constexpr V b1 = { 0, 1, 10, 20 };\n+constexpr V b2 = { 0, 2, 10, 0 };\n+constexpr V b3 = b1 == b2;\n+\n+static_assert (b3[0] == -1, \"\");\n+static_assert (b3[1] == 0, \"\");\n+static_assert (b3[2] == -1, \"\");\n+static_assert (b3[3] == 0, \"\");"}]}