{"sha": "bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmMwZjdkYjdlYmI2NDlmYzRjMjkwY2I3MzI3ZmJhNWMxN2Q0ZWQyOA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-11T16:18:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-02-11T17:28:16Z"}, "message": "libstdc++: Fix versioned namespace build\n\nThe recent changes to define various std::exception_ptr functions inline\nincluded a change so that the definitions of those functions would be\nomitted for the ABI unstable gnu-versioned-namespace configuration. That\nchange was incorrect, because the existing functions that are gated by\nthe _GLIBCXX_EH_PTR_COMPAT macro are always needed even for the\nversioned namespace.\n\nThis change introduces a new macro to control whether operator== is\ndefined as deleted or not, distinct from the existing macro. The new\nmacro is not defined for versioned namespace builds, but the old macro\nstill is.\n\nlibstdc++-v3/ChangeLog:\n\n\t* libsupc++/eh_ptr.cc (_GLIBCXX_EH_PTR_RELOPS_COMPAT): Define\n\tnew macro.\n\t* libsupc++/exception_ptr.h (_GLIBCXX_EH_PTR_USED): Check new\n\tmacro instead of _GLIBCXX_EH_PTR_COMPAT.\n\t(operator==): Likewise.", "tree": {"sha": "52fd0cf6cb9d596450f194311464a54f461107e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/52fd0cf6cb9d596450f194311464a54f461107e6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce43c906049b828c0472d8499b52ac6233c869d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce43c906049b828c0472d8499b52ac6233c869d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce43c906049b828c0472d8499b52ac6233c869d0"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "5c4685606fedbacef30c4c5662e028ba52b2ea8f", "filename": "libstdc++-v3/libsupc++/eh_ptr.cc", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Feh_ptr.cc?ref=bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "patch": "@@ -25,11 +25,15 @@\n #include <bits/c++config.h>\n #include \"eh_atomics.h\"\n \n-#if ! _GLIBCXX_INLINE_VERSION\n // This macro causes exception_ptr to declare an older API (with corresponding\n-// definitions in this file) and to mark some inline functions as \"used\" so\n-// that definitions will be emitted in this translation unit.\n+// definitions in this file).\n #define _GLIBCXX_EH_PTR_COMPAT\n+\n+#if ! _GLIBCXX_INLINE_VERSION\n+// This macro causes some inline functions in exception_ptr to be marked\n+// as \"used\" so that definitions will be emitted in this translation unit.\n+// We need this because those functions were not inline in previous releases.\n+#define _GLIBCXX_EH_PTR_RELOPS_COMPAT\n #endif\n \n #include <exception>"}, {"sha": "9943668d9b3fbed3bf3acba99f66c9a172ec6593", "filename": "libstdc++-v3/libsupc++/exception_ptr.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fexception_ptr.h?ref=bc0f7db7ebb649fc4c290cb7327fba5c17d4ed28", "patch": "@@ -39,7 +39,7 @@\n #include <typeinfo>\n #include <new>\n \n-#ifdef _GLIBCXX_EH_PTR_COMPAT\n+#ifdef _GLIBCXX_EH_PTR_RELOPS_COMPAT\n # define _GLIBCXX_EH_PTR_USED __attribute__((__used__))\n #else\n # define _GLIBCXX_EH_PTR_USED\n@@ -153,7 +153,7 @@ namespace std\n #endif\n \n #if __cpp_impl_three_way_comparison >= 201907L \\\n-      && ! defined _GLIBCXX_EH_PTR_COMPAT\n+      && ! defined _GLIBCXX_EH_PTR_RELOPS_COMPAT\n       friend bool\n       operator==(const exception_ptr&, const exception_ptr&) noexcept = default;\n #else"}]}