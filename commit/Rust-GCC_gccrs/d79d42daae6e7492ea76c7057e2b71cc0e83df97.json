{"sha": "d79d42daae6e7492ea76c7057e2b71cc0e83df97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5ZDQyZGFhZTZlNzQ5MmVhNzZjNzA1N2UyYjcxY2MwZTgzZGY5Nw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-10-15T20:30:17Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-10-15T20:30:17Z"}, "message": "c90-printf-2.c, [...]: Determine the type for intmax_t in the compiler using __typeof__ and the type...\n\n\t* gcc.dg/c90-printf-2.c, gcc.dg/c90-scanf-2.c: Determine the type\n\tfor intmax_t in the compiler using __typeof__ and the type rules\n\tfor conditional expressions.\n\nFrom-SVN: r36873", "tree": {"sha": "4514fdc3fd33ea06e30d7cbc8ccb8b269e3c5554", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4514fdc3fd33ea06e30d7cbc8ccb8b269e3c5554"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d79d42daae6e7492ea76c7057e2b71cc0e83df97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79d42daae6e7492ea76c7057e2b71cc0e83df97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d79d42daae6e7492ea76c7057e2b71cc0e83df97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d79d42daae6e7492ea76c7057e2b71cc0e83df97/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fd2f510181091030051e8954a33775d59b8fca5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1fd2f510181091030051e8954a33775d59b8fca5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1fd2f510181091030051e8954a33775d59b8fca5"}], "stats": {"total": 56, "additions": 40, "deletions": 16}, "files": [{"sha": "2e6782f9f81a11f91a3ac81f72baf5038a87edc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d79d42daae6e7492ea76c7057e2b71cc0e83df97", "patch": "@@ -1,3 +1,9 @@\n+2000-10-15  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* gcc.dg/c90-printf-2.c, gcc.dg/c90-scanf-2.c: Determine the type\n+\tfor intmax_t in the compiler using __typeof__ and the type rules\n+\tfor conditional expressions.\n+\n 2000-10-13  Jakub Jelinek  <jakub@redhat.com>\n \n \t* gcc.dg/20001012-1.c: New test."}, {"sha": "1f8c544b34ba53359612cf90471386ab81ac24b5", "filename": "gcc/testsuite/gcc.dg/c90-printf-2.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-printf-2.c?ref=d79d42daae6e7492ea76c7057e2b71cc0e83df97", "patch": "@@ -13,14 +13,23 @@ __extension__ typedef long long int llong;\n /* This next definition is a kludge.  When GCC has a <stdint.h> it\n    should be used.\n */\n-#include <limits.h>\n-#if INT_MAX == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#elif LONG_MAX == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#else\n-__extension__ typedef long long intmax_t;\n-#endif\n+/* (T *) if E is zero, (void *) otherwise.  */\n+#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n+\n+/* (T *) if E is nonzero, (void *) otherwise.  */\n+#define type_if(T, E) type_if_not(T, !(E))\n+\n+/* Combine pointer types, all but one (void *).  */\n+#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n+#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n+\n+#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n+#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n+#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n+\n+#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n+\n+typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n \n extern int printf (const char *, ...);\n "}, {"sha": "786acdde3790c2a762c5c839dde4a455d62078b9", "filename": "gcc/testsuite/gcc.dg/c90-scanf-2.c", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d79d42daae6e7492ea76c7057e2b71cc0e83df97/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc90-scanf-2.c?ref=d79d42daae6e7492ea76c7057e2b71cc0e83df97", "patch": "@@ -13,14 +13,23 @@ __extension__ typedef long long int llong;\n /* This next definition is a kludge.  When GCC has a <stdint.h> it\n    should be used.\n */\n-#include <limits.h>\n-#if INT_MAX == __LONG_LONG_MAX__\n-typedef int intmax_t;\n-#elif LONG_MAX == __LONG_LONG_MAX__\n-typedef long intmax_t;\n-#else\n-__extension__ typedef long long intmax_t;\n-#endif\n+/* (T *) if E is zero, (void *) otherwise.  */\n+#define type_if_not(T, E) __typeof__(0 ? (T *)0 : (void *)(E))\n+\n+/* (T *) if E is nonzero, (void *) otherwise.  */\n+#define type_if(T, E) type_if_not(T, !(E))\n+\n+/* Combine pointer types, all but one (void *).  */\n+#define type_comb2(T1, T2) __typeof__(0 ? (T1)0 : (T2)0)\n+#define type_comb3(T1, T2, T3) type_comb2(T1, type_comb2(T2, T3))\n+\n+#define maybe_int_ptr type_if(int, sizeof(int) == sizeof(llong))\n+#define maybe_long_ptr type_if(long, sizeof(long) == sizeof(llong) && sizeof(long) > sizeof(int))\n+#define maybe_long_long_ptr type_if(llong, sizeof(llong) > sizeof(long))\n+\n+#define intmax_type_ptr type_comb3(maybe_int_ptr, maybe_long_ptr, maybe_long_long_ptr)\n+\n+typedef __typeof__(*((intmax_type_ptr)0)) intmax_t;\n \n extern int scanf (const char *, ...);\n "}]}