{"sha": "31d06664e65339af78d370e8eb1cc22b6bb16b17", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzFkMDY2NjRlNjUzMzlhZjc4ZDM3MGU4ZWIxY2MyMmI2YmIxNmIxNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-07-21T14:38:12Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-07-21T14:38:12Z"}, "message": "* tree.c (cp_tree_equal): Fix CONSTRUCTOR handling.\n\nFrom-SVN: r162378", "tree": {"sha": "42b2c1b857a8e718389085c5f1550afe34b7ca81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42b2c1b857a8e718389085c5f1550afe34b7ca81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/31d06664e65339af78d370e8eb1cc22b6bb16b17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d06664e65339af78d370e8eb1cc22b6bb16b17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31d06664e65339af78d370e8eb1cc22b6bb16b17", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31d06664e65339af78d370e8eb1cc22b6bb16b17/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "557165ae948664887ee1576206ec7308250c463f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/557165ae948664887ee1576206ec7308250c463f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/557165ae948664887ee1576206ec7308250c463f"}], "stats": {"total": 20, "additions": 16, "deletions": 4}, "files": [{"sha": "b7b08bbb5266754851a60e058fc077e0a642de2e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d06664e65339af78d370e8eb1cc22b6bb16b17/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d06664e65339af78d370e8eb1cc22b6bb16b17/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=31d06664e65339af78d370e8eb1cc22b6bb16b17", "patch": "@@ -1,5 +1,7 @@\n 2010-07-21  Jason Merrill  <jason@redhat.com>\n \n+\t* tree.c (cp_tree_equal): Fix CONSTRUCTOR handling.\n+\n \t* parser.c (cp_parser_init_declarator): Pass LOOKUP_NORMAL\n \tto cp_finish_decl.\n "}, {"sha": "450b9e89433ecd4b879360ac727899fee430ac1d", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/31d06664e65339af78d370e8eb1cc22b6bb16b17/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/31d06664e65339af78d370e8eb1cc22b6bb16b17/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=31d06664e65339af78d370e8eb1cc22b6bb16b17", "patch": "@@ -2023,11 +2023,21 @@ cp_tree_equal (tree t1, tree t2)\n       /* We need to do this when determining whether or not two\n \t non-type pointer to member function template arguments\n \t are the same.  */\n-      if (!(same_type_p (TREE_TYPE (t1), TREE_TYPE (t2))\n-\t    /* The first operand is RTL.  */\n-\t    && TREE_OPERAND (t1, 0) == TREE_OPERAND (t2, 0)))\n+      if (!same_type_p (TREE_TYPE (t1), TREE_TYPE (t2))\n+\t  || CONSTRUCTOR_NELTS (t1) != CONSTRUCTOR_NELTS (t2))\n \treturn false;\n-      return cp_tree_equal (TREE_OPERAND (t1, 1), TREE_OPERAND (t2, 1));\n+      {\n+\ttree field, value;\n+\tunsigned int i;\n+\tFOR_EACH_CONSTRUCTOR_ELT (CONSTRUCTOR_ELTS (t1), i, field, value)\n+\t  {\n+\t    constructor_elt *elt2 = CONSTRUCTOR_ELT (t2, i);\n+\t    if (!cp_tree_equal (field, elt2->index)\n+\t\t|| !cp_tree_equal (value, elt2->value))\n+\t      return false;\n+\t  }\n+      }\n+      return true;\n \n     case TREE_LIST:\n       if (!cp_tree_equal (TREE_PURPOSE (t1), TREE_PURPOSE (t2)))"}]}