{"sha": "63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjNkN2M5ZGQ2NmYyNmRjY2Y3OTRjYTA0ZmRmYmNmZWRjM2EwOWE1OA==", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2020-03-02T08:43:10Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2021-09-10T06:59:30Z"}, "message": "AVX512FP16: Add testcase for vaddsh/vsubsh/vmulsh/vdivsh.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/avx512fp16-vaddsh-1a.c: New test.\n\t* gcc.target/i386/avx512fp16-vaddsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vdivsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vdivsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmulsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vmulsh-1b.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsubsh-1a.c: Ditto.\n\t* gcc.target/i386/avx512fp16-vsubsh-1b.c: Ditto.\n\t* gcc.target/i386/pr54855-11.c: Ditto.", "tree": {"sha": "61d42feebb97bb23df69bba8120ca2b32996c1ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d42feebb97bb23df69bba8120ca2b32996c1ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71838266e7857381ec1ea9d0cf0066e7992a73c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71838266e7857381ec1ea9d0cf0066e7992a73c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71838266e7857381ec1ea9d0cf0066e7992a73c5"}], "stats": {"total": 456, "additions": 456, "deletions": 0}, "files": [{"sha": "97aac3fd131461677797d61584edbc8350bea78d", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vaddsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1a.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res;\n+volatile __m128h x1, x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_add_sh (x1, x2);\n+  res = _mm_mask_add_sh (res, m8, x1, x2);\n+  res = _mm_maskz_add_sh (m8, x1, x2);\n+\n+  res = _mm_add_round_sh (x1, x2, 8);\n+  res = _mm_mask_add_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_add_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "724112c8fc01d34cb424461d56a5b4bff2cf47cb", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vaddsh-1b.c", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vaddsh-1b.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,104 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_add_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] + v3.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_add_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_add_sh(src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_add_sh\");\n+\n+  //DEST.fp16[0] := SRC1.fp16[0] + SRC2.fp16[0]\n+  emulate_add_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_add_sh(res.xmmh[0], 0x1,\n+\t\t\t       \tsrc1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_add_sh\");\n+\n+  //dest.fp16[0] remains unchanged\n+  init_dest(&res, &exp);\n+  emulate_add_sh(&exp, src1, src2,  0x2, 0);\n+  res.xmmh[0] = _mm_mask_add_sh(res.xmmh[0], 0x2,\n+\t\t\t       \tsrc1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_add_sh\");\n+\n+  //dest.fp16[0] = 0\n+  emulate_add_sh(&exp, src1, src2,  0x2, 1);\n+  res.xmmh[0] = _mm_maskz_add_sh(0x2, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_add_sh\");\n+\n+  //DEST.fp16[0] := SRC1.fp16[0] + SRC2.fp16[0]\n+  emulate_add_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_add_sh(0x3, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_add_sh\");\n+\n+  //DEST.fp16[0] := SRC1.fp16[0] + SRC2.fp16[0]\n+  emulate_add_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_add_round_sh(src1.xmmh[0], \n+\t\t\t\t src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_add_round_sh\");\n+\n+  //DEST.fp16[0] := SRC1.fp16[0] + SRC2.fp16[0]\n+  emulate_add_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_add_round_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_add_round_sh\");\n+\n+  //dest.fp16[0] remains unchanged\n+  init_dest(&res, &exp);\n+  emulate_add_sh(&exp, src1, src2,  0x2, 0);\n+  res.xmmh[0] = _mm_mask_add_round_sh(res.xmmh[0], 0x2, src1.xmmh[0], \n+\t\t\t\t      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_add_round_sh\");\n+\n+  //dest.fp16[0] = 0\n+  emulate_add_sh(&exp, src1, src2,  0x2, 1);\n+  res.xmmh[0] = _mm_maskz_add_round_sh(0x2, src1.xmmh[0], \n+\t\t\t\t       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_add_round_sh\");\n+\n+  //DEST.fp16[0] := SRC1.fp16[0] + SRC2.fp16[0]\n+  emulate_add_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_add_round_sh(0x3, src1.xmmh[0],\n+\t\t\t\t       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_add_round_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "39f26f5d77aa8a576742ee23823cc8d9a32033dc", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vdivsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1a.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vdivsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res;\n+volatile __m128h x1, x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_div_sh (x1, x2);\n+  res = _mm_mask_div_sh (res, m8, x1, x2);\n+  res = _mm_maskz_div_sh (m8, x1, x2);\n+\n+  res = _mm_div_round_sh (x1, x2, 8);\n+  res = _mm_mask_div_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_div_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "467f5d201559cc0dda2b9ff52d69bcd838b185e5", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vdivsh-1b.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vdivsh-1b.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_div_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] / v3.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+\n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  \n+  emulate_div_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_div_sh(src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_div_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_div_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_div_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t       \tsrc2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_div_sh\");\n+\n+  emulate_div_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_div_sh(0x3, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_div_sh\");\n+\n+  emulate_div_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_div_round_sh(src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_div_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_div_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_div_round_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_div_sh\");\n+  \n+  emulate_div_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_div_round_sh(0x3, src1.xmmh[0],\n+\t\t\t\t       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_div_sh\");    \n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "85707b5f16987cd0808e794baa5810beeaffe559", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmulsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1a.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmulsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res;\n+volatile __m128h x1, x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_mul_sh (x1, x2);\n+  res = _mm_mask_mul_sh (res, m8, x1, x2);\n+  res = _mm_maskz_mul_sh (m8, x1, x2);\n+\n+  res = _mm_mul_round_sh (x1, x2, 8);\n+  res = _mm_mask_mul_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_mul_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "36b6930a516f5bcb30cae522b50d263deb5f3e4a", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vmulsh-1b.c", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vmulsh-1b.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,77 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_mul_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] * v3.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+  \n+  emulate_mul_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mul_sh(src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mul_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_mul_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_mul_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t       \tsrc2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_mul_sh\");\n+\n+  emulate_mul_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_mul_sh(0x3, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_mul_sh\");\n+\n+  emulate_mul_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mul_round_sh(src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mul_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_mul_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_mul_round_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_mul_sh\");\n+\n+  emulate_mul_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_mul_round_sh(0x3, src1.xmmh[0],\n+\t\t\t\t       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_mul_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+\n+"}, {"sha": "8ea1eea615b26e19a9634d07fdb995c81122382c", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsubsh-1a.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1a.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512fp16 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+\\{rn-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vsubsh\\[ \\\\t\\]+\\{rz-sae\\}\\[^\\{\\n\\]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\{%k\\[0-9\\]\\}\\{z\\}\\[^\\n\\r]*(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m128h res;\n+volatile __m128h x1, x2;\n+volatile __mmask16 m16;\n+volatile __mmask8 m8;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  res = _mm_sub_sh (x1, x2);\n+  res = _mm_mask_sub_sh (res, m8, x1, x2);\n+  res = _mm_maskz_sub_sh (m8, x1, x2);\n+\n+  res = _mm_sub_round_sh (x1, x2, 8);\n+  res = _mm_mask_sub_round_sh (res, m8, x1, x2, 8);\n+  res = _mm_maskz_sub_round_sh (m8, x1, x2, 11);\n+}"}, {"sha": "df3680ebee1b325b8a2f0d08dbdd348158a4b520", "filename": "gcc/testsuite/gcc.target/i386/avx512fp16-vsubsh-1b.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1b.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1b.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512fp16-vsubsh-1b.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run { target avx512fp16 } } */\n+/* { dg-options \"-O2 -mavx512fp16 -mavx512dq\" } */\n+\n+\n+#define AVX512FP16\n+#include \"avx512fp16-helper.h\"\n+\n+#define N_ELEMS 8\n+\n+void NOINLINE\n+emulate_sub_sh(V512 * dest, V512 op1, V512 op2,\n+                __mmask8 k, int zero_mask)\n+{\n+    V512 v1, v2, v3, v4, v5, v6, v7, v8;\n+    int i;\n+\n+    unpack_ph_2twops(op1, &v1, &v2);\n+    unpack_ph_2twops(op2, &v3, &v4);\n+    unpack_ph_2twops(*dest, &v7, &v8);\n+\n+    if ((k&1) || !k)\n+      v5.f32[0] = v1.f32[0] - v3.f32[0];\n+    else if (zero_mask)\n+      v5.f32[0] = 0;\n+    else\n+      v5.f32[0] = v7.f32[0];\n+   \n+    for (i = 1; i < 8; i++)\n+      v5.f32[i] = v1.f32[i];\n+\n+    *dest = pack_twops_2ph(v5, v6);\n+}\n+\n+void\n+test_512 (void)\n+{\n+  V512 res;\n+  V512 exp;\n+\n+  init_src();\n+\n+  emulate_sub_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_sub_sh(src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_sub_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_sub_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_sub_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t       \tsrc2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_sub_sh\");\n+\n+  emulate_sub_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_sub_sh(0x3, src1.xmmh[0], src2.xmmh[0]);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_sub_sh\");\n+\n+  emulate_sub_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_sub_round_sh(src1.xmmh[0], src2.xmmh[0],\n+\t\t\t\t _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_sub_sh\");\n+\n+  init_dest(&res, &exp);\n+  emulate_sub_sh(&exp, src1, src2,  0x1, 0);\n+  res.xmmh[0] = _mm_mask_sub_round_sh(res.xmmh[0], 0x1, src1.xmmh[0],\n+\t\t\t\t      src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_mask_sub_sh\");\n+  \n+  emulate_sub_sh(&exp, src1, src2,  0x3, 1);\n+  res.xmmh[0] = _mm_maskz_sub_round_sh(0x3, src1.xmmh[0],\n+\t\t\t\t       src2.xmmh[0], _ROUND_NINT);\n+  check_results(&res, &exp, N_ELEMS, \"_mm_maskz_sub_sh\");\n+\n+  if (n_errs != 0) {\n+      abort ();\n+  }\n+}\n+"}, {"sha": "0d7d7396f3cd0d33b94452697a69b65690e4a17d", "filename": "gcc/testsuite/gcc.target/i386/pr54855-11.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr54855-11.c?ref=63d7c9dd66f26dccf794ca04fdfbcfedc3a09a58", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -mavx512fp16\" } */\n+/* { dg-final { scan-assembler-times \"vaddsh\\[ \\\\t\\]\" 1 } } */\n+/* { dg-final { scan-assembler-not \"vpextrw\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vmovd\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vpunpckldq\\[ \\\\t\\]\" } } */\n+/* { dg-final { scan-assembler-not \"vpunpcklqdq\\[ \\\\t\\]\" } } */\n+\n+#include <immintrin.h>\n+\n+__m128h\n+foo (__m128h x, __m128h y)\n+{\n+  return _mm_add_sh (x, y);\n+}"}]}