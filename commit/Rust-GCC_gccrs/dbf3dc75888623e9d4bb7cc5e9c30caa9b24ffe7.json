{"sha": "dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJmM2RjNzU4ODg2MjNlOWQ0YmI3Y2M1ZTljMzBjYWE5YjI0ZmZlNw==", "commit": {"author": {"name": "Bu Le", "email": "bule1@huawei.com", "date": "2020-03-12T22:39:12Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-03-13T09:18:40Z"}, "message": "aarch64: Add --params to control the number of recip steps [PR94154]\n\n-mlow-precision-div hard-coded the number of iterations to 2 for double\nand 1 for float.  This patch adds a --param to control the number.\n\n2020-03-13  Bu Le  <bule1@huawei.com>\n\ngcc/\n\tPR target/94154\n\t* config/aarch64/aarch64.opt (-param=aarch64-float-recp-precision=)\n\t(-param=aarch64-double-recp-precision=): New options.\n\t* doc/invoke.texi: Document them.\n\t* config/aarch64/aarch64.c (aarch64_emit_approx_div): Use them\n\tinstead of hard-coding the choice of 1 for float and 2 for double.", "tree": {"sha": "fa9b5262372b71530d61a6d4db02c46be6776f96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa9b5262372b71530d61a6d4db02c46be6776f96"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/comments", "author": null, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e6ab5cefa81165e90fb62abf50e515f85a17e9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e6ab5cefa81165e90fb62abf50e515f85a17e9a"}], "stats": {"total": 37, "additions": 34, "deletions": 3}, "files": [{"sha": "ac8940a25f7fe5e259f5ffff98c0f71c6fb2c42d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "patch": "@@ -1,3 +1,12 @@\n+2020-03-13  Bu Le  <bule1@huawei.com>\n+\n+\tPR target/94154\n+\t* config/aarch64/aarch64.opt (-param=aarch64-float-recp-precision=)\n+\t(-param=aarch64-double-recp-precision=): New options.\n+\t* doc/invoke.texi: Document them.\n+\t* config/aarch64/aarch64.c (aarch64_emit_approx_div): Use them\n+\tinstead of hard-coding the choice of 1 for float and 2 for double.\n+\n 2019-03-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR rtl-optimization/94119"}, {"sha": "2c81f86dd2ae9d377a4bd3372ee83e133401f256", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "patch": "@@ -12911,10 +12911,12 @@ aarch64_emit_approx_div (rtx quo, rtx num, rtx den)\n   /* Iterate over the series twice for SF and thrice for DF.  */\n   int iterations = (GET_MODE_INNER (mode) == DFmode) ? 3 : 2;\n \n-  /* Optionally iterate over the series once less for faster performance,\n-     while sacrificing the accuracy.  */\n+  /* Optionally iterate over the series less for faster performance,\n+     while sacrificing the accuracy.  The default is 2 for DF and 1 for SF.  */\n   if (flag_mlow_precision_div)\n-    iterations--;\n+    iterations = (GET_MODE_INNER (mode) == DFmode\n+\t\t  ? aarch64_double_recp_precision\n+\t\t  : aarch64_float_recp_precision);\n \n   /* Iterate over the series to calculate the approximate reciprocal.  */\n   rtx xtmp = gen_reg_rtx (mode);"}, {"sha": "37181b5baca049eadb4a4bf2e66e68866d08c967", "filename": "gcc/config/aarch64/aarch64.opt", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fconfig%2Faarch64%2Faarch64.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.opt?ref=dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "patch": "@@ -262,3 +262,12 @@ Generate local calls to out-of-line atomic operations.\n -param=aarch64-sve-compare-costs=\n Target Joined UInteger Var(aarch64_sve_compare_costs) Init(1) IntegerRange(0, 1) Param\n When vectorizing for SVE, consider using unpacked vectors for smaller elements and use the cost model to pick the cheapest approach.  Also use the cost model to choose between SVE and Advanced SIMD vectorization.\n+\n+-param=aarch64-float-recp-precision=\n+Target Joined UInteger Var(aarch64_float_recp_precision) Init(1) IntegerRange(1, 5) Param\n+The number of Newton iterations for calculating the reciprocal for float type.  The precision of division is proportional to this param when division approximation is enabled.  The default value is 1.\n+\n+-param=aarch64-double-recp-precision=\n+Target Joined UInteger Var(aarch64_double_recp_precision) Init(2) IntegerRange(1, 5) Param\n+The number of Newton iterations for calculating the reciprocal for double type.  The precision of division is proportional to this param when division approximation is enabled.  The default value is 2.\n+"}, {"sha": "96a95162696b922ea7bccb2997b1703d1f5576bf", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=dbf3dc75888623e9d4bb7cc5e9c30caa9b24ffe7", "patch": "@@ -13179,6 +13179,17 @@ Also use the cost model to choose between SVE and Advanced SIMD vectorization.\n Using unpacked vectors includes storing smaller elements in larger\n containers and accessing elements with extending loads and truncating\n stores.\n+\n+@item aarch64-float-recp-precision\n+The number of Newton iterations for calculating the reciprocal for float type.\n+The precision of division is proportional to this param when division\n+approximation is enabled.  The default value is 1.\n+\n+@item aarch64-double-recp-precision\n+The number of Newton iterations for calculating the reciprocal for double type.\n+The precision of division is propotional to this param when division\n+approximation is enabled.  The default value is 2.\n+\n @end table\n \n @end table"}]}