{"sha": "b4c40d3c2c3711a0037162236fe293df52201e29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRjNDBkM2MyYzM3MTFhMDAzNzE2MjIzNmZlMjkzZGY1MjIwMWUyOQ==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2000-05-19T17:42:45Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2000-05-19T17:42:45Z"}, "message": "c-torture.exp: Also test with -O3 -fssa.\n\n2000-05-19  Andreas Jaeger  <aj@suse.de>\n\n\t* lib/c-torture.exp: Also test with -O3 -fssa.\n\nFrom-SVN: r34026", "tree": {"sha": "4df20b881c59b32fb4c361671dee54343c6a62b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4df20b881c59b32fb4c361671dee54343c6a62b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4c40d3c2c3711a0037162236fe293df52201e29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c40d3c2c3711a0037162236fe293df52201e29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4c40d3c2c3711a0037162236fe293df52201e29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4c40d3c2c3711a0037162236fe293df52201e29/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a58f64f5c2bbd1ebd8a22251f91c7835b2010f4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a58f64f5c2bbd1ebd8a22251f91c7835b2010f4b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a58f64f5c2bbd1ebd8a22251f91c7835b2010f4b"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "7f285878633f15bb28995ea8edd9e1bf125e96b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c40d3c2c3711a0037162236fe293df52201e29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c40d3c2c3711a0037162236fe293df52201e29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b4c40d3c2c3711a0037162236fe293df52201e29", "patch": "@@ -1,3 +1,7 @@\n+2000-05-19  Andreas Jaeger  <aj@suse.de>\n+\n+\t* lib/c-torture.exp: Also test with -O3 -fssa.\n+\n 2000-05-18  Michael Meissner  <meissner@redhat.com>\n \n \t* gcc.c-torture/compile/920501-1.c: Remove CYGNUS LOCAL markers."}, {"sha": "05f8965253a31b0d43b32e149dc22eaf13db43b3", "filename": "gcc/testsuite/lib/c-torture.exp", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4c40d3c2c3711a0037162236fe293df52201e29/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4c40d3c2c3711a0037162236fe293df52201e29/gcc%2Ftestsuite%2Flib%2Fc-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fc-torture.exp?ref=b4c40d3c2c3711a0037162236fe293df52201e29", "patch": "@@ -1,15 +1,15 @@\n-# Copyright (C) 1992-1998, 1999 Free Software Foundation, Inc.\n+# Copyright (C) 1992-1998, 1999, 2000 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n # the Free Software Foundation; either version 2 of the License, or\n # (at your option) any later version.\n-# \n+#\n # This program is distributed in the hope that it will be useful,\n # but WITHOUT ANY WARRANTY; without even the implied warranty of\n # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n # GNU General Public License for more details.\n-# \n+#\n # You should have received a copy of the GNU General Public License\n # along with this program; if not, write to the Free Software\n # Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n@@ -40,6 +40,7 @@ if ![info exists TORTURE_OPTIONS] {\n \t{ -O3 -fomit-frame-pointer -funroll-loops } \\\n \t{ -O3 -fomit-frame-pointer -funroll-all-loops -finline-functions } \\\n \t{ -O3 -g } \\\n+\t{ -O3 -fssa } \\\n \t{ -Os } ]\n }\n \n@@ -98,7 +99,7 @@ proc c-torture-compile { src option } {\n # to more than 14 chars.\n #\n proc c-torture-execute { src args } {\n-    global tmpdir tool srcdir output \n+    global tmpdir tool srcdir output\n \n     if { [llength $args] > 0 } {\n \tset additional_flags [lindex $args 0];\n@@ -114,7 +115,7 @@ proc c-torture-execute { src args } {\n \t    return\n \t}\n     }\n-   \n+\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n@@ -149,13 +150,13 @@ proc c-torture-execute { src args } {\n \tif [info exists torture_compile_xfail] {\n \t    setup_xfail $torture_compile_xfail\n \t}\n-\t\n+\n \t# torture_execute_before_{compile,execute} can be set by the .x script\n \t# (if present)\n \tif [info exists torture_eval_before_compile] {\n             set ignore_me [eval $torture_eval_before_compile]\n \t}\n-\t\n+\n \tremote_file build delete $execname;\n \tverbose \"Testing $testcase, $option\" 1\n \n@@ -188,7 +189,7 @@ proc c-torture-execute { src args } {\n \tif [info exists torture_eval_before_execute] {\n             set ignore_me [eval $torture_eval_before_execute]\n \t}\n-\t\n+\n \n \t# Sometimes we end up creating identical executables for two\n \t# consecutive sets of different of compiler options.\n@@ -277,7 +278,7 @@ proc c-torture { args } {\n \t    return\n \t}\n     }\n-   \n+\n     # Look for a loop within the source code - if we don't find one,\n     # don't pass -funroll[-all]-loops.\n     global torture_with_loops torture_without_loops\n@@ -298,7 +299,7 @@ proc c-torture { args } {\n \tif [info exists torture_eval_before_compile] {\n             set ignore_me [eval $torture_eval_before_compile]\n \t}\n-\t\n+\n \tc-torture-compile $src \"$option $options\"\n     }\n }"}]}