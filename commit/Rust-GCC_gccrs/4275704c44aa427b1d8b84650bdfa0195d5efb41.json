{"sha": "4275704c44aa427b1d8b84650bdfa0195d5efb41", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI3NTcwNGM0NGFhNDI3YjFkOGI4NDY1MGJkZmEwMTk1ZDVlZmI0MQ==", "commit": {"author": {"name": "Geert Bosch", "email": "bosch@adacore.com", "date": "2005-03-15T16:18:21Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-03-15T16:18:21Z"}, "message": "s-fatgen.adb (Valid): Extend special exceptions to account for long long float padding to also cover...\n\n2005-03-08  Geert Bosch  <bosch@adacore.com>\n\n\t* s-fatgen.adb (Valid): Extend special exceptions to account for long\n\tlong float padding to also cover AMD64 and IA64.\n\nFrom-SVN: r96508", "tree": {"sha": "ef20db6b2f67d18aef22e7989383a6bb9f23f5db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef20db6b2f67d18aef22e7989383a6bb9f23f5db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4275704c44aa427b1d8b84650bdfa0195d5efb41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4275704c44aa427b1d8b84650bdfa0195d5efb41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4275704c44aa427b1d8b84650bdfa0195d5efb41", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4275704c44aa427b1d8b84650bdfa0195d5efb41/comments", "author": null, "committer": null, "parents": [{"sha": "5eb10f25aca8dda496f6b77e3b54e99113f10268", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb10f25aca8dda496f6b77e3b54e99113f10268", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb10f25aca8dda496f6b77e3b54e99113f10268"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "e713183d7fac408f9adf4278f27f334660e3c387", "filename": "gcc/ada/s-fatgen.adb", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4275704c44aa427b1d8b84650bdfa0195d5efb41/gcc%2Fada%2Fs-fatgen.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4275704c44aa427b1d8b84650bdfa0195d5efb41/gcc%2Fada%2Fs-fatgen.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fatgen.adb?ref=4275704c44aa427b1d8b84650bdfa0195d5efb41", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004 Free Software Foundation, Inc.          --\n+--          Copyright (C) 1992-2005 Free Software Foundation, Inc.          --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -771,9 +771,19 @@ package body System.Fat_Gen is\n       type Float_Word is mod 2**Positive'Min (System.Word_Size, 32);\n       type Rep_Index is range 0 .. 7;\n \n-      Rep_Last : constant Rep_Index := (T'Size - 1) / Float_Word'Size;\n+      Rep_Words : constant Positive :=\n+         (T'Size + Float_Word'Size - 1) / Float_Word'Size;\n+      Rep_Last  : constant Rep_Index := Rep_Index'Min\n+        (Rep_Index (Rep_Words - 1), (T'Mantissa + 16) / Float_Word'Size);\n+      --  Determine the number of Float_Words needed for representing\n+      --  the entire floating-poinit value. Do not take into account\n+      --  excessive padding, as occurs on IA-64 where 80 bits floats get\n+      --  padded to 128 bits. In general, the exponent field cannot\n+      --  be larger than 15 bits, even for 128-bit floating-poin t types,\n+      --  so the final format size won't be larger than T'Mantissa + 16.\n \n-      type Float_Rep is array (Rep_Index range 0 .. Rep_Last) of Float_Word;\n+      type Float_Rep is\n+         array (Rep_Index range 0 .. Rep_Index (Rep_Words - 1)) of Float_Word;\n \n       pragma Suppress_Initialization (Float_Rep);\n       --  This pragma supresses the generation of an initialization procedure\n@@ -791,12 +801,12 @@ package body System.Fat_Gen is\n       Exponent_Factor : constant Float_Word :=\n                           2**(Float_Word'Size - 1) /\n                             Float_Word (IEEE_Emax - IEEE_Emin + 3) *\n-                              Boolean'Pos (T'Size /= 96) +\n-                                Boolean'Pos (T'Size = 96);\n+                              Boolean'Pos (Most_Significant_Word /= 2) +\n+                                Boolean'Pos (Most_Significant_Word = 2);\n       --  Factor that the extracted exponent needs to be divided by\n       --  to be in range 0 .. IEEE_Emax - IEEE_Emin + 2.\n-      --  Special kludge: Exponent_Factor is 0 for x86 double extended\n-      --  as GCC adds 16 unused bits to the type.\n+      --  Special kludge: Exponent_Factor is 1 for x86/IA64 double extended\n+      --  as GCC adds unused bits to the type.\n \n       Exponent_Mask : constant Float_Word :=\n                         Float_Word (IEEE_Emax - IEEE_Emin + 2) *"}]}