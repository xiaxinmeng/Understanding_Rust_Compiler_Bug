{"sha": "97e59627567757759b047479c75be2f238ea45c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdlNTk2Mjc1Njc3NTc3NTliMDQ3NDc5Yzc1YmUyZjIzOGVhNDVjMw==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2019-06-10T11:07:24Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2019-06-10T11:07:24Z"}, "message": "Reduce SCCs in IPA postorder.\n\n2019-06-10  Martin Liska  <mliska@suse.cz>\n\n\t* ipa-cp.c (ignore_edge_p): New function.\n\t(build_toporder_info): Use it.\n\t* ipa-inline.c (ignore_edge_p): New function/\n\t(inline_small_functions): Use it.\n\t* ipa-pure-const.c (ignore_edge_for_nothrow):\n\tVerify opt_for_fn for caller and callee.\n\t(ignore_edge_for_pure_const): Likewise.\n\t* ipa-reference.c (ignore_edge_p): Extend to check\n\tfor opt_for_fn.\n\t* ipa-utils.c (searchc): Refactor.\n\t* ipa-utils.h: Fix coding style.\n\nFrom-SVN: r272115", "tree": {"sha": "6ab525ca7d4657f2ef09734d2df43aa84ed4caf4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6ab525ca7d4657f2ef09734d2df43aa84ed4caf4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97e59627567757759b047479c75be2f238ea45c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e59627567757759b047479c75be2f238ea45c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97e59627567757759b047479c75be2f238ea45c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97e59627567757759b047479c75be2f238ea45c3/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54e2d83caf591eb1ca3e6e8df44d67a4ac44d8fe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e2d83caf591eb1ca3e6e8df44d67a4ac44d8fe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e2d83caf591eb1ca3e6e8df44d67a4ac44d8fe"}], "stats": {"total": 91, "additions": 71, "deletions": 20}, "files": [{"sha": "e93db0a1b7bb8bbdf2bdf8cec7e2289295e6c3f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -1,3 +1,17 @@\n+2019-06-10  Martin Liska  <mliska@suse.cz>\n+\n+\t* ipa-cp.c (ignore_edge_p): New function.\n+\t(build_toporder_info): Use it.\n+\t* ipa-inline.c (ignore_edge_p): New function/\n+\t(inline_small_functions): Use it.\n+\t* ipa-pure-const.c (ignore_edge_for_nothrow):\n+\tVerify opt_for_fn for caller and callee.\n+\t(ignore_edge_for_pure_const): Likewise.\n+\t* ipa-reference.c (ignore_edge_p): Extend to check\n+\tfor opt_for_fn.\n+\t* ipa-utils.c (searchc): Refactor.\n+\t* ipa-utils.h: Fix coding style.\n+\n 2019-06-10  Claudiu Zissulescu  <claziss@synopsys.com>\n \n \t* config/arc/arc.c (arc_rtx_costs): Update costs."}, {"sha": "a0f6f23829b6300d546b8f4e9d398134b8833220", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -806,6 +806,21 @@ class ipa_topo_info\n   {}\n };\n \n+/* Skip edges from and to nodes without ipa_cp enabled.\n+   Ignore not available symbols.  */\n+\n+static bool\n+ignore_edge_p (cgraph_edge *e)\n+{\n+  enum availability avail;\n+  cgraph_node *ultimate_target\n+    = e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n+\n+  return (avail <= AVAIL_INTERPOSABLE\n+\t  || !opt_for_fn (e->caller->decl, flag_ipa_cp)\n+\t  || !opt_for_fn (ultimate_target->decl, flag_ipa_cp));\n+}\n+\n /* Allocate the arrays in TOPO and topologically sort the nodes into order.  */\n \n static void\n@@ -815,7 +830,8 @@ build_toporder_info (struct ipa_topo_info *topo)\n   topo->stack = XCNEWVEC (struct cgraph_node *, symtab->cgraph_count);\n \n   gcc_checking_assert (topo->stack_top == 0);\n-  topo->nnodes = ipa_reduced_postorder (topo->order, true, NULL);\n+  topo->nnodes = ipa_reduced_postorder (topo->order, true,\n+\t\t\t\t\tignore_edge_p);\n }\n \n /* Free information about strongly connected components and the arrays in"}, {"sha": "3475258b92251a6691e6c4ecae44ecd808aacf70", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -1752,6 +1752,16 @@ sum_callers (struct cgraph_node *node, void *data)\n   return false;\n }\n \n+/* We only propagate across edges with non-interposable callee.  */\n+\n+inline bool\n+ignore_edge_p (struct cgraph_edge *e)\n+{\n+  enum availability avail;\n+  e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n+  return (avail <= AVAIL_INTERPOSABLE);\n+}\n+\n /* We use greedy algorithm for inlining of small functions:\n    All inline candidates are put into prioritized heap ordered in\n    increasing badness.\n@@ -1779,7 +1789,7 @@ inline_small_functions (void)\n      metrics.  */\n \n   max_count = profile_count::uninitialized ();\n-  ipa_reduced_postorder (order, true, NULL);\n+  ipa_reduced_postorder (order, true, ignore_edge_p);\n   free (order);\n \n   FOR_EACH_DEFINED_FUNCTION (node)"}, {"sha": "f5e53967df117ad76b3998ee463a29e37aa338ce", "filename": "gcc/ipa-pure-const.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-pure-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-pure-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-pure-const.c?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -1361,12 +1361,14 @@ ignore_edge_for_nothrow (struct cgraph_edge *e)\n     return true;\n \n   enum availability avail;\n-  cgraph_node *n = e->callee->function_or_virtual_thunk_symbol (&avail,\n-\t\t\t\t\t\t\t        e->caller);\n-  if (avail <= AVAIL_INTERPOSABLE || TREE_NOTHROW (n->decl))\n+  cgraph_node *ultimate_target\n+    = e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n+  if (avail <= AVAIL_INTERPOSABLE || TREE_NOTHROW (ultimate_target->decl))\n     return true;\n-  return opt_for_fn (e->callee->decl, flag_non_call_exceptions)\n-\t && !e->callee->binds_to_current_def_p (e->caller);\n+  return ((opt_for_fn (e->callee->decl, flag_non_call_exceptions)\n+\t   && !e->callee->binds_to_current_def_p (e->caller))\n+\t  || !opt_for_fn (e->caller->decl, flag_ipa_pure_const)\n+\t  || !opt_for_fn (ultimate_target->decl, flag_ipa_pure_const));\n }\n \n /* Return true if NODE is self recursive function.\n@@ -1396,16 +1398,21 @@ cdtor_p (cgraph_node *n, void *)\n   return false;\n }\n \n-/* We only propagate across edges with non-interposable callee.  */\n+/* Skip edges from and to nodes without ipa_pure_const enabled.\n+   Ignore not available symbols.  */\n \n static bool\n ignore_edge_for_pure_const (struct cgraph_edge *e)\n {\n   enum availability avail;\n-  e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n-  return (avail <= AVAIL_INTERPOSABLE);\n-}\n+  cgraph_node *ultimate_target\n+    = e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n \n+  return (avail <= AVAIL_INTERPOSABLE\n+\t  || !opt_for_fn (e->caller->decl, flag_ipa_pure_const)\n+\t  || !opt_for_fn (ultimate_target->decl,\n+\t\t\t  flag_ipa_pure_const));\n+}\n \n /* Produce transitive closure over the callgraph and compute pure/const\n    attributes.  */"}, {"sha": "7b2614ffa28a3778dfc939c75f1816c384663dae", "filename": "gcc/ipa-reference.c", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-reference.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-reference.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-reference.c?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -676,16 +676,23 @@ get_read_write_all_from_node (struct cgraph_node *node,\n       }\n }\n \n-/* Skip edges from and to nodes without ipa_reference enables.  This leave\n-   them out of strongy connected coponents and makes them easyto skip in the\n+/* Skip edges from and to nodes without ipa_reference enabled.\n+   Ignore not available symbols.  This leave\n+   them out of strongly connected components and makes them easy to skip in the\n    propagation loop bellow.  */\n \n static bool\n ignore_edge_p (cgraph_edge *e)\n {\n-  return (!opt_for_fn (e->caller->decl, flag_ipa_reference)\n-          || !opt_for_fn (e->callee->function_symbol ()->decl,\n-\t\t\t  flag_ipa_reference));\n+  enum availability avail;\n+  cgraph_node *ultimate_target\n+    = e->callee->function_or_virtual_thunk_symbol (&avail, e->caller);\n+\n+  return (avail < AVAIL_INTERPOSABLE\n+\t  || (avail == AVAIL_INTERPOSABLE\n+\t      && !(flags_from_decl_or_type (e->callee->decl) & ECF_LEAF))\n+\t  || !opt_for_fn (e->caller->decl, flag_ipa_reference)\n+          || !opt_for_fn (ultimate_target->decl, flag_ipa_reference));\n }\n \n /* Produce the global information by preforming a transitive closure"}, {"sha": "25c2e2cf78916c212ab16e0e4d17bdccabccb8bd", "filename": "gcc/ipa-utils.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-utils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-utils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.c?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -103,8 +103,7 @@ searchc (struct searchc_env* env, struct cgraph_node *v,\n         continue;\n \n       if (w->aux\n-\t  && (avail > AVAIL_INTERPOSABLE\n-\t      || avail == AVAIL_INTERPOSABLE))\n+\t  && (avail >= AVAIL_INTERPOSABLE))\n \t{\n \t  w_info = (struct ipa_dfs_info *) w->aux;\n \t  if (w_info->new_node)"}, {"sha": "5903da5840dc5fa1ba85fa0c6ed9fb9e34f19406", "filename": "gcc/ipa-utils.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-utils.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97e59627567757759b047479c75be2f238ea45c3/gcc%2Fipa-utils.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-utils.h?ref=97e59627567757759b047479c75be2f238ea45c3", "patch": "@@ -244,5 +244,3 @@ odr_type_p (const_tree t)\n }\n \n #endif  /* GCC_IPA_UTILS_H  */\n-\n-"}]}