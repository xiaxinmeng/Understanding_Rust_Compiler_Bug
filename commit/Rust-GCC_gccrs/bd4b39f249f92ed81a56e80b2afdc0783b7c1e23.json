{"sha": "bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQ0YjM5ZjI0OWY5MmVkODFhNTZlODBiMmFmZGMwNzgzYjdjMWUyMw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2015-10-06T17:20:49Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2015-10-06T17:20:49Z"}, "message": "re PR target/67808 (LRA ICEs on simple double to long double conversion test case)\n\n[gcc]\n2015-10-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Peter Bergner  <bergner@vnet.ibm.com>\n\n\tPR target/67808\n\t* config/rs6000/rs6000.md (extenddftf2): In the expander, only\n\tallow registers, but provide insns for the combiner to create for\n\tloads from memory. Separate VSX code from non-VSX code. For\n\tnon-VSX code, combine extenddftf2_fprs into extenddftf2 and rename\n\texternaldftf2_internal to externaldftf2_fprs. Reorder constraints\n\tso that registers come before memory operations. Drop support from\n\tconverting DFmode to TFmode, if the DFmode value is in a GPR\n\tregister.\n\t(extenddftf2_fprs): Likewise.\n\t(extenddftf2_internal): Likewise.\n\t(extenddftf2_vsx): Likewise.\n\t(extendsftf2): In the expander, only allow registers, but provide\n\tinsns for the combiner to create for stores and loads.\n\n[gcc/testsuite]\n2015-10-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\t    Peter Bergner <bergner@vnet.ibm.com>\n\n\tPR target/67808\n\t* gcc.target/powerpc/pr67808.c: New test.\n\n\nCo-Authored-By: Peter Bergner <bergner@vnet.ibm.com>\n\nFrom-SVN: r228538", "tree": {"sha": "6febf7b553108f83d6475297e948f1b7d4aa3403", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6febf7b553108f83d6475297e948f1b7d4aa3403"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/comments", "author": null, "committer": null, "parents": [{"sha": "184a8d6f7dcfa01a7c341af86e24abe4a9c0c8aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/184a8d6f7dcfa01a7c341af86e24abe4a9c0c8aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/184a8d6f7dcfa01a7c341af86e24abe4a9c0c8aa"}], "stats": {"total": 139, "additions": 106, "deletions": 33}, "files": [{"sha": "429148f1e1f96445322f282604a1240520be094d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "patch": "@@ -1,3 +1,21 @@\n+2015-10-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Peter Bergner  <bergner@vnet.ibm.com>\n+\n+\tPR target/67808\n+\t* config/rs6000/rs6000.md (extenddftf2): In the expander, only\n+\tallow registers, but provide insns for the combiner to create for\n+\tloads from memory. Separate VSX code from non-VSX code. For\n+\tnon-VSX code, combine extenddftf2_fprs into extenddftf2 and rename\n+\texternaldftf2_internal to externaldftf2_fprs. Reorder constraints\n+\tso that registers come before memory operations. Drop support from\n+\tconverting DFmode to TFmode, if the DFmode value is in a GPR\n+\tregister.\n+\t(extenddftf2_fprs): Likewise.\n+\t(extenddftf2_internal): Likewise.\n+\t(extenddftf2_vsx): Likewise.\n+\t(extendsftf2): In the expander, only allow registers, but provide\n+\tinsns for the combiner to create for stores and loads.\n+\n 2015-10-06  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* varasm.c (default_elf_asm_named_section): Remove ATTRIBUTE_UNUSED"}, {"sha": "78e20f076320107b463e99380c75fef05171ff0b", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "patch": "@@ -6471,61 +6471,64 @@\n   [(set_attr \"length\" \"20,20,16\")])\n \n (define_expand \"extenddftf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t(float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))]\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n+\t(float_extend:TF (match_operand:DF 1 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT && (TARGET_FPRS || TARGET_E500_DOUBLE)\n    && TARGET_LONG_DOUBLE_128\"\n {\n   if (TARGET_IEEEQUAD)\n     rs6000_expand_float128_convert (operands[0], operands[1], false);\n   else if (TARGET_E500_DOUBLE)\n     emit_insn (gen_spe_extenddftf2 (operands[0], operands[1]));\n+  else if (TARGET_VSX)\n+    emit_insn (gen_extenddftf2_vsx (operands[0], operands[1]));\n   else\n-    emit_insn (gen_extenddftf2_fprs (operands[0], operands[1]));\n+    {\n+      rtx zero = gen_reg_rtx (DFmode);\n+      rs6000_emit_move (zero, CONST0_RTX (DFmode), DFmode);\n+      emit_insn (gen_extenddftf2_fprs (operands[0], operands[1], zero));\n+    }\n   DONE;\n })\n \n-(define_expand \"extenddftf2_fprs\"\n-  [(parallel [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n-\t\t   (float_extend:TF (match_operand:DF 1 \"input_operand\" \"\")))\n-\t      (use (match_dup 2))])]\n-  \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+;; Allow memory operands for the source to be created by the combiner.\n+(define_insn_and_split \"extenddftf2_fprs\"\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=d,d,&d\")\n+\t(float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"d,m,d\")))\n+   (use (match_operand:DF 2 \"nonimmediate_operand\" \"m,m,d\"))]\n+  \"!TARGET_VSX && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT\n+   && TARGET_LONG_DOUBLE_128 && !TARGET_IEEEQUAD\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 3) (match_dup 1))\n+   (set (match_dup 4) (match_dup 2))]\n {\n-  /* VSX can create 0.0 directly, otherwise let rs6000_emit_move create\n-     the proper constant.  */\n-  if (TARGET_VSX)\n-    operands[2] = CONST0_RTX (DFmode);\n-  else\n-    {\n-      operands[2] = gen_reg_rtx (DFmode);\n-      rs6000_emit_move (operands[2], CONST0_RTX (DFmode), DFmode);\n-    }\n+  const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n+  const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n+\n+  operands[3] = simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word);\n+  operands[4] = simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word);\n })\n \n-(define_insn_and_split \"*extenddftf2_internal\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"=m,Y,ws,d,&d\")\n-       (float_extend:TF (match_operand:DF 1 \"input_operand\" \"d,r,md,md,md\")))\n-   (use (match_operand:DF 2 \"zero_reg_mem_operand\" \"d,r,j,m,d\"))]\n-  \"!TARGET_IEEEQUAD\n-   && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_DOUBLE_FLOAT \n-   && TARGET_LONG_DOUBLE_128\"\n+(define_insn_and_split \"extenddftf2_vsx\"\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=d,d\")\n+\t(float_extend:TF (match_operand:DF 1 \"nonimmediate_operand\" \"ws,m\")))]\n+  \"TARGET_LONG_DOUBLE_128 && TARGET_VSX && !TARGET_IEEEQUAD\"\n   \"#\"\n   \"&& reload_completed\"\n-  [(pc)]\n+  [(set (match_dup 2) (match_dup 1))\n+   (set (match_dup 3) (match_dup 4))]\n {\n   const int lo_word = LONG_DOUBLE_LARGE_FIRST ? GET_MODE_SIZE (DFmode) : 0;\n   const int hi_word = LONG_DOUBLE_LARGE_FIRST ? 0 : GET_MODE_SIZE (DFmode);\n-  emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word),\n-\t\t  operands[1]);\n-  emit_move_insn (simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word),\n-\t\t  operands[2]);\n-  DONE;\n+\n+  operands[2] = simplify_gen_subreg (DFmode, operands[0], TFmode, hi_word);\n+  operands[3] = simplify_gen_subreg (DFmode, operands[0], TFmode, lo_word);\n+  operands[4] = CONST0_RTX (DFmode);\n })\n \n (define_expand \"extendsftf2\"\n-  [(set (match_operand:TF 0 \"nonimmediate_operand\" \"\")\n+  [(set (match_operand:TF 0 \"gpc_reg_operand\" \"\")\n \t(float_extend:TF (match_operand:SF 1 \"gpc_reg_operand\" \"\")))]\n   \"TARGET_HARD_FLOAT\n    && (TARGET_FPRS || TARGET_E500_DOUBLE)"}, {"sha": "1e1896398d42d3b5807fd1d0b76a97e742cadba2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "patch": "@@ -1,3 +1,9 @@\n+2015-10-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\t    Peter Bergner <bergner@vnet.ibm.com>\n+\n+\tPR target/67808\n+\t* gcc.target/powerpc/pr67808.c: New test.\n+\n 2015-10-06  Nick Clifton  <nickc@redhat.com>\n \n \t* gcc.target/msp430: New directory."}, {"sha": "266fd97d66337e3bf6f8902c6631606227b0717f", "filename": "gcc/testsuite/gcc.target/powerpc/pr67808.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr67808.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd4b39f249f92ed81a56e80b2afdc0783b7c1e23/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr67808.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr67808.c?ref=bd4b39f249f92ed81a56e80b2afdc0783b7c1e23", "patch": "@@ -0,0 +1,46 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-options \"-O1 -mvsx -mlra -mcpu=power7\" } */\n+\n+/* PR 67808: LRA ICEs on simple double to long double conversion test case */\n+\n+void\n+dfoo (long double *ldb1, double *db1)\n+{\n+  *ldb1 = *db1;\n+}\n+\n+long double\n+dfoo2 (double *db1)\n+{\n+  return *db1;\n+}\n+\n+long double\n+dfoo3 (double x)\n+{\n+  return x;\n+}\n+\n+void\n+ffoo (long double *ldb1, float *db1)\n+{\n+  *ldb1 = *db1;\n+}\n+\n+long double\n+ffoo2 (float *db1)\n+{\n+  return *db1;\n+}\n+\n+long double\n+ffoo3 (float x)\n+{\n+  return x;\n+}\n+\n+/* { dg-final { scan-assembler \"xxlxor\" } } */"}]}