{"sha": "53cd1f8025b2e4abec7f041d9817318898cbd0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZDFmODAyNWIyZTRhYmVjN2YwNDFkOTgxNzMxODg5OGNiZDBhMQ==", "commit": {"author": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-11T22:54:34Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2012-07-11T22:54:34Z"}, "message": "java-tree.h (force_evaluation_order): Remove prototype.\n\n\t* java-tree.h (force_evaluation_order): Remove prototype.\n\t* expr.c (force_evaluation_order): Remove unused function.\n\nFrom-SVN: r189428", "tree": {"sha": "82fdeb56f4fa5c6b2e1f457d646d8bedcbb6a4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82fdeb56f4fa5c6b2e1f457d646d8bedcbb6a4b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cd1f8025b2e4abec7f041d9817318898cbd0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cd1f8025b2e4abec7f041d9817318898cbd0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cd1f8025b2e4abec7f041d9817318898cbd0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cd1f8025b2e4abec7f041d9817318898cbd0a1/comments", "author": null, "committer": null, "parents": [{"sha": "b3c90d54a24b6d6efa602e59064fdbf4b3fc1f34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c90d54a24b6d6efa602e59064fdbf4b3fc1f34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c90d54a24b6d6efa602e59064fdbf4b3fc1f34"}], "stats": {"total": 82, "additions": 5, "deletions": 77}, "files": [{"sha": "7943051ddca234bb6ec61c51558daec1f2572b81", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=53cd1f8025b2e4abec7f041d9817318898cbd0a1", "patch": "@@ -1,3 +1,8 @@\n+2012-07-11  Steven Bosscher  <steven@gcc.gnu.org>\n+\n+\t* java-tree.h (force_evaluation_order): Remove prototype.\n+\t* expr.c (force_evaluation_order): Remove unused function.\n+\n 2012-07-11  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* decl.c: Do not include libfuncs.h."}, {"sha": "0429c02ca34c202f3b4d13a664555eb8ec43c8be", "filename": "gcc/java/expr.c", "status": "modified", "additions": 0, "deletions": 76, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fexpr.c?ref=53cd1f8025b2e4abec7f041d9817318898cbd0a1", "patch": "@@ -3689,82 +3689,6 @@ maybe_adjust_start_pc (struct JCF *jcf, int code_offset,\n   return start_pc;\n }\n \n-/* Force the (direct) sub-operands of NODE to be evaluated in left-to-right\n-   order, as specified by Java Language Specification.\n-\n-   The problem is that while expand_expr will evaluate its sub-operands in\n-   left-to-right order, for variables it will just return an rtx (i.e.\n-   an lvalue) for the variable (rather than an rvalue).  So it is possible\n-   that a later sub-operand will change the register, and when the\n-   actual operation is done, it will use the new value, when it should\n-   have used the original value.\n-\n-   We fix this by using save_expr.  This forces the sub-operand to be\n-   copied into a fresh virtual register,\n-\n-   For method invocation, we modify the arguments so that a\n-   left-to-right order evaluation is performed. Saved expressions\n-   will, in CALL_EXPR order, be reused when the call will be expanded.\n-\n-   We also promote outgoing args if needed.  */\n-\n-tree\n-force_evaluation_order (tree node)\n-{\n-  if (flag_syntax_only)\n-    return node;\n-  if (TREE_CODE (node) == CALL_EXPR\n-      || (TREE_CODE (node) == COMPOUND_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (node, 0)) == CALL_EXPR\n-\t  && TREE_CODE (TREE_OPERAND (node, 1)) == SAVE_EXPR)) \n-    {\n-      tree call, cmp;\n-      int i, nargs;\n-\n-      /* Account for wrapped around ctors.  */\n-      if (TREE_CODE (node) == COMPOUND_EXPR)\n-        call = TREE_OPERAND (node, 0);\n-      else\n-\tcall = node;\n-\n-      nargs = call_expr_nargs (call);\n-\n-      /* This reverses the evaluation order. This is a desired effect. */\n-      for (i = 0, cmp = NULL_TREE; i < nargs; i++)\n-\t{\n-\t  tree arg = CALL_EXPR_ARG (call, i);\n-\t  /* Promote types smaller than integer.  This is required by\n-\t     some ABIs.  */\n-\t  tree type = TREE_TYPE (arg);\n-\t  tree saved;\n-\t  if (targetm.calls.promote_prototypes (type)\n-\t      && INTEGRAL_TYPE_P (type)\n-\t      && INT_CST_LT_UNSIGNED (TYPE_SIZE (type),\n-\t\t\t\t      TYPE_SIZE (integer_type_node)))\n-\t    arg = fold_convert (integer_type_node, arg);\n-\n-\t  saved = save_expr (force_evaluation_order (arg));\n-\t  cmp = (cmp == NULL_TREE ? saved :\n-\t\t build2 (COMPOUND_EXPR, void_type_node, cmp, saved));\n-\n-\t  CALL_EXPR_ARG (call, i) = saved;\n-\t}\n-      \n-      if (cmp && TREE_CODE (cmp) == COMPOUND_EXPR)\n-\tTREE_SIDE_EFFECTS (cmp) = 1;\n-\n-      if (cmp)\n-\t{\n-\t  cmp = build2 (COMPOUND_EXPR, TREE_TYPE (node), cmp, node);\n-\t  if (TREE_TYPE (cmp) != void_type_node)\n-\t    cmp = save_expr (cmp);\n-\t  TREE_SIDE_EFFECTS (cmp) = 1;\n-\t  node = cmp;\n-\t}\n-    }\n-  return node;\n-}\n-\n /* Build a node to represent empty statements and blocks. */\n \n tree"}, {"sha": "6169b6ac5e46d09c5ebbe7317604f0ef43999baa", "filename": "gcc/java/java-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2Fjava-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd1f8025b2e4abec7f041d9817318898cbd0a1/gcc%2Fjava%2Fjava-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjava-tree.h?ref=53cd1f8025b2e4abec7f041d9817318898cbd0a1", "patch": "@@ -1094,7 +1094,6 @@ extern int merge_type_state (tree);\n extern int push_type_0 (tree);\n extern void push_type (tree);\n extern void add_interface (tree, tree);\n-extern tree force_evaluation_order (tree);\n extern tree java_create_object (tree);\n extern int verify_constant_pool (struct JCF *);\n extern void start_java_method (tree);"}]}