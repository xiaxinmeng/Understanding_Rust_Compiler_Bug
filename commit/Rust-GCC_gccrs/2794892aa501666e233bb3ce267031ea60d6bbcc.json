{"sha": "2794892aa501666e233bb3ce267031ea60d6bbcc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjc5NDg5MmFhNTAxNjY2ZTIzM2JiM2NlMjY3MDMxZWE2MGQ2YmJjYw==", "commit": {"author": {"name": "Julia Koval", "email": "julia.koval@intel.com", "date": "2017-11-28T17:51:12Z"}, "committer": {"name": "Kirill Yukhin", "email": "kyukhin@gcc.gnu.org", "date": "2017-11-28T17:51:12Z"}, "message": "Enable VBMI2 support [4/7]\n\ngcc/\n\tconfig/i386/avx512vbmi2intrin.h (_mm512_shldi_epi16,\n\t_mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16, _mm512_shldi_epi32,\n\t_mm512_mask_shldi_epi32, _mm512_maskz_shldi_epi32, _mm512_shldi_epi64,\n\t_mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): New intrinsics.\n\tconfig/i386/avx512vbmi2vlintrin.h (_mm256_shldi_epi16,\n\t_mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,\n\t_mm256_mask_shldi_epi32, _mm256_maskz_shldi_epi32, _mm256_shldi_epi32,\n\t_mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64, _mm256_shldi_epi64,\n\t_mm_mask_shldi_epi16, _mm_maskz_shldi_epi16, _mm_shldi_epi16,\n\t_mm_mask_shldi_epi32, _mm_maskz_shldi_epi32, _mm_shldi_epi32,\n\t_mm_mask_shldi_epi64, _mm_maskz_shldi_epi64, _mm_shldi_epi64): Ditto.\n\tconfig/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_INT,\n\tV32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT, V16SI_FTYPE_V16SI_V16SI_INT,\n\tV16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT,\n\tV8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT, V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT,\n\tV16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT,\n\tV4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT,\n\tV8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT,\n\tV4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT,\n\tV2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT): New types.\n\tconfig/i386/i386-builtin.def (__builtin_ia32_vpshld_v32hi,\n\t__builtin_ia32_vpshld_v32hi_mask, __builtin_ia32_vpshld_v16hi,\n\t__builtin_ia32_vpshld_v16hi_mask, __builtin_ia32_vpshld_v8hi,\n\t__builtin_ia32_vpshld_v8hi_mask, __builtin_ia32_vpshld_v16si,\n\t__builtin_ia32_vpshld_v16si_mask, __builtin_ia32_vpshld_v8si,\n\t__builtin_ia32_vpshld_v8si_mask, __builtin_ia32_vpshld_v4si,\n\t__builtin_ia32_vpshld_v4si_mask, __builtin_ia32_vpshld_v8di,\n\t__builtin_ia32_vpshld_v8di_mask, __builtin_ia32_vpshld_v4di,\n\t__builtin_ia32_vpshld_v4di_mask, __builtin_ia32_vpshld_v2di,\n\t__builtin_ia32_vpshld_v2di_mask): New builtins.\n\tconfig/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n\tconfig/i386/sse.md (vpshld_<mode><mask_name>): New pattern.\n\ngcc/testsuite/\n\tgcc.target/i386/avx-1.c: Handle new intrinics.\n\tgcc.target/i386/sse-13.c: Ditto.\n\tgcc.target/i386/sse-23.c: Ditto.\n\tgcc.target/i386/avx512f-vpshld-1.c: New test.\n\tgcc.target/i386/avx512f-vpshldd-2.c: Ditto.\n\tgcc.target/i386/avx512f-vpshldq-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpshld-1.c: Ditto.\n\tgcc.target/i386/avx512vl-vpshldd-2.c: Ditto.\n\tgcc.target/i386/avx512vl-vpshldq-2.c: Ditto.\n\nFrom-SVN: r255208", "tree": {"sha": "227b92b79be75fcfe7f71c4d589e4f5c739b7ce7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/227b92b79be75fcfe7f71c4d589e4f5c739b7ce7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2794892aa501666e233bb3ce267031ea60d6bbcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2794892aa501666e233bb3ce267031ea60d6bbcc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2794892aa501666e233bb3ce267031ea60d6bbcc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2794892aa501666e233bb3ce267031ea60d6bbcc/comments", "author": {"login": "vaalfreja", "id": 5216345, "node_id": "MDQ6VXNlcjUyMTYzNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5216345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vaalfreja", "html_url": "https://github.com/vaalfreja", "followers_url": "https://api.github.com/users/vaalfreja/followers", "following_url": "https://api.github.com/users/vaalfreja/following{/other_user}", "gists_url": "https://api.github.com/users/vaalfreja/gists{/gist_id}", "starred_url": "https://api.github.com/users/vaalfreja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vaalfreja/subscriptions", "organizations_url": "https://api.github.com/users/vaalfreja/orgs", "repos_url": "https://api.github.com/users/vaalfreja/repos", "events_url": "https://api.github.com/users/vaalfreja/events{/privacy}", "received_events_url": "https://api.github.com/users/vaalfreja/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "a964d4b12be9d8ed027b5faa3f3c439eff08ef16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a964d4b12be9d8ed027b5faa3f3c439eff08ef16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a964d4b12be9d8ed027b5faa3f3c439eff08ef16"}], "stats": {"total": 723, "additions": 722, "deletions": 1}, "files": [{"sha": "fb6bd019c037155717a8b113270640b55091bc90", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -1,3 +1,38 @@\n+2017-11-28  Julia Koval  <julia.koval@intel.com>\n+\n+\tconfig/i386/avx512vbmi2intrin.h (_mm512_shldi_epi16,\n+\t_mm512_mask_shldi_epi16, _mm512_maskz_shldi_epi16, _mm512_shldi_epi32,\n+\t_mm512_mask_shldi_epi32, _mm512_maskz_shldi_epi32, _mm512_shldi_epi64,\n+\t_mm512_mask_shldi_epi64, _mm512_maskz_shldi_epi64): New intrinsics.\n+\tconfig/i386/avx512vbmi2vlintrin.h (_mm256_shldi_epi16,\n+\t_mm256_mask_shldi_epi16, _mm256_maskz_shldi_epi16,\n+\t_mm256_mask_shldi_epi32, _mm256_maskz_shldi_epi32, _mm256_shldi_epi32,\n+\t_mm256_mask_shldi_epi64, _mm256_maskz_shldi_epi64, _mm256_shldi_epi64,\n+\t_mm_mask_shldi_epi16, _mm_maskz_shldi_epi16, _mm_shldi_epi16,\n+\t_mm_mask_shldi_epi32, _mm_maskz_shldi_epi32, _mm_shldi_epi32,\n+\t_mm_mask_shldi_epi64, _mm_maskz_shldi_epi64, _mm_shldi_epi64): Ditto.\n+\tconfig/i386/i386-builtin-types.def (V32HI_FTYPE_V32HI_V32HI_INT,\n+\tV32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT, V16SI_FTYPE_V16SI_V16SI_INT,\n+\tV16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT,\n+\tV8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT, V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT,\n+\tV16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT,\n+\tV4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT,\n+\tV8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT,\n+\tV4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT,\n+\tV2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT): New types.\n+\tconfig/i386/i386-builtin.def (__builtin_ia32_vpshld_v32hi,\n+\t__builtin_ia32_vpshld_v32hi_mask, __builtin_ia32_vpshld_v16hi,\n+\t__builtin_ia32_vpshld_v16hi_mask, __builtin_ia32_vpshld_v8hi,\n+\t__builtin_ia32_vpshld_v8hi_mask, __builtin_ia32_vpshld_v16si,\n+\t__builtin_ia32_vpshld_v16si_mask, __builtin_ia32_vpshld_v8si,\n+\t__builtin_ia32_vpshld_v8si_mask, __builtin_ia32_vpshld_v4si,\n+\t__builtin_ia32_vpshld_v4si_mask, __builtin_ia32_vpshld_v8di,\n+\t__builtin_ia32_vpshld_v8di_mask, __builtin_ia32_vpshld_v4di,\n+\t__builtin_ia32_vpshld_v4di_mask, __builtin_ia32_vpshld_v2di,\n+\t__builtin_ia32_vpshld_v2di_mask): New builtins.\n+\tconfig/i386/i386.c (ix86_expand_args_builtin): Handle new types.\n+\tconfig/i386/sse.md (vpshld_<mode><mask_name>): New pattern.\n+\n 2017-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80776"}, {"sha": "7f6e878ab4276e5d5a9af75e90eee00ed4c1bd2a", "filename": "gcc/config/i386/avx512vbmi2intrin.h", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2intrin.h?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -149,6 +149,114 @@ _mm512_maskz_expandloadu_epi16 (__mmask32 __A, const void * __B)\n   return (__m512i) __builtin_ia32_expandloadhi512_maskz ((const __v32hi *) __B,\n \t\t\t(__v32hi) _mm512_setzero_si512 (), (__mmask32) __A);\n }\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shldi_epi16 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshld_v32hi ((__v32hi)__A, (__v32hi) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shldi_epi16 (__m512i __A, __mmask32 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__C,\n+\t\t\t(__v32hi) __D, __E, (__v32hi) __A, (__mmask32)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shldi_epi16 (__mmask32 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v32hi_mask ((__v32hi)__B,\n+\t(__v32hi) __C, __D, (__v32hi) _mm512_setzero_si512 (), (__mmask32)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shldi_epi32 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshld_v16si ((__v16si)__A, (__v16si) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shldi_epi32 (__m512i __A, __mmask16 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v16si_mask ((__v16si)__C,\n+\t\t\t(__v16si) __D, __E, (__v16si) __A, (__mmask16)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shldi_epi32 (__mmask16 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v16si_mask ((__v16si)__B,\n+\t(__v16si) __C, __D, (__v16si) _mm512_setzero_si512 (), (__mmask16)__A);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_shldi_epi64 (__m512i __A, __m512i __B, int __C)\n+{\n+  return (__m512i) __builtin_ia32_vpshld_v8di ((__v8di)__A, (__v8di) __B, __C);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_mask_shldi_epi64 (__m512i __A, __mmask8 __B, __m512i __C, __m512i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v8di_mask ((__v8di)__C, (__v8di) __D,\n+\t\t\t\t\t__E, (__v8di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m512i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm512_maskz_shldi_epi64 (__mmask8 __A, __m512i __B, __m512i __C, int __D)\n+{\n+  return (__m512i)__builtin_ia32_vpshld_v8di_mask ((__v8di)__B, (__v8di) __C,\n+\t\t\t__D, (__v8di) _mm512_setzero_si512 (), (__mmask8)__A);\n+}\n+#else\n+#define _mm512_shldi_epi16(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshld_v32hi ((__v32hi)(__m512i)(A), \\\n+\t\t\t\t\t\t(__v32hi)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shldi_epi16(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(C), \\\n+\t(__v32hi)(__m512i)(D), (int)(E), (__v32hi)(__m512i)(A),(__mmask32)(B))\n+#define _mm512_maskz_shldi_epi16(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshld_v32hi_mask ((__v32hi)(__m512i)(B),   \\\n+\t(__v32hi)(__m512i)(C),(int)(D), \t\t\t\t\\\n+\t(__v32hi)(__m512i)_mm512_setzero_si512 (), (__mmask32)(A))\n+#define _mm512_shldi_epi32(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshld_v16si ((__v16si)(__m512i)(A), \t\\\n+\t\t\t\t(__v16si)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shldi_epi32(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshld_v16si_mask ((__v16si)(__m512i)(C), \\\n+\t(__v16si)(__m512i)(D), (int)(E), (__v16si)(__m512i)(A),(__mmask16)(B))\n+#define _mm512_maskz_shldi_epi32(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshld_v16si_mask ((__v16si)(__m512i)(B), \\\n+\t(__v16si)(__m512i)(C),(int)(D), \\\n+\t(__v16si)(__m512i)_mm512_setzero_si512 (), (__mmask16)(A))\n+#define _mm512_shldi_epi64(A, B, C) \\\n+  ((__m512i) __builtin_ia32_vpshld_v8di ((__v8di)(__m512i)(A), \\\n+\t(__v8di)(__m512i)(B),(int)(C))\n+#define _mm512_mask_shldi_epi64(A, B, C, D, E) \\\n+  ((__m512i) __builtin_ia32_vpshld_v8di_mask ((__v8di)(__m512i)(C), \\\n+\t(__v8di)(__m512i)(D), (int)(E), (__v8di)(__m512i)(A),(__mmask8)(B))\n+#define _mm512_maskz_shldi_epi64(A, B, C, D) \\\n+  ((__m512i) __builtin_ia32_vpshld_v8di_mask ((__v8di)(__m512i)(B), \\\n+\t(__v8di)(__m512i)(C),(int)(D), \\\n+\t(__v8di)(__m512i)_mm512_setzero_si512 (), (__mmask8)(A))\n+#endif\n+\n #ifdef __DISABLE_AVX512VBMI2BW__\n #undef __DISABLE_AVX512VBMI2BW__\n "}, {"sha": "f1d2aee6ffe668772a60e6dc6cfb06eab157428a", "filename": "gcc/config/i386/avx512vbmi2vlintrin.h", "status": "modified", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512vbmi2vlintrin.h?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -204,6 +204,215 @@ _mm256_maskz_expandloadu_epi16 (__mmask16 __A, const void * __B)\n   return (__m256i) __builtin_ia32_expandloadhi256_maskz ((const __v16hi *) __B,\n \t\t\t(__v16hi) _mm256_setzero_si256 (), (__mmask16) __A);\n }\n+\n+#ifdef __OPTIMIZE__\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shldi_epi16 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshld_v16hi ((__v16hi)__A, (__v16hi) __B,\n+\t\t\t\t\t\t\t\t\t__C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shldi_epi16 (__m256i __A, __mmask16 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v16hi_mask ((__v16hi)__C,\n+\t\t\t(__v16hi) __D, __E, (__v16hi) __A, (__mmask16)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shldi_epi16 (__mmask16 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v16hi_mask ((__v16hi)__B,\n+\t(__v16hi) __C, __D, (__v16hi) _mm256_setzero_si256 (), (__mmask16)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shldi_epi32 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v8si_mask ((__v8si)__C, (__v8si) __D,\n+\t\t\t\t\t__E, (__v8si) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shldi_epi32 (__mmask8 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v8si_mask ((__v8si)__B, (__v8si) __C,\n+\t\t\t__D, (__v8si) _mm256_setzero_si256 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shldi_epi32 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshld_v8si ((__v8si)__A, (__v8si) __B, __C);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_mask_shldi_epi64 (__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v4di_mask ((__v4di)__C, (__v4di) __D,\n+\t\t\t\t\t__E, (__v4di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_maskz_shldi_epi64 (__mmask8 __A, __m256i __B, __m256i __C, int __D)\n+{\n+  return (__m256i)__builtin_ia32_vpshld_v4di_mask ((__v4di)__B, (__v4di) __C,\n+\t\t\t__D, (__v4di) _mm256_setzero_si256 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m256i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm256_shldi_epi64 (__m256i __A, __m256i __B, int __C)\n+{\n+  return (__m256i) __builtin_ia32_vpshld_v4di ((__v4di)__A, (__v4di) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shldi_epi16 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v8hi_mask ((__v8hi)__C, (__v8hi) __D,\n+\t\t\t\t\t__E, (__v8hi) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shldi_epi16 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v8hi_mask ((__v8hi)__B, (__v8hi) __C,\n+\t\t\t__D, (__v8hi) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shldi_epi16 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshld_v8hi ((__v8hi)__A, (__v8hi) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shldi_epi32 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v4si_mask ((__v4si)__C, (__v4si) __D,\n+\t\t\t\t\t__E, (__v4si) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shldi_epi32 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v4si_mask ((__v4si)__B, (__v4si) __C,\n+\t\t\t__D, (__v4si) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shldi_epi32 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshld_v4si ((__v4si)__A, (__v4si) __B, __C);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_mask_shldi_epi64 (__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,\n+\t\t\t\t\t\t\t\tint __E)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v2di_mask ((__v2di)__C, (__v2di) __D,\n+\t\t\t\t\t__E, (__v2di) __A, (__mmask8)__B);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_maskz_shldi_epi64 (__mmask8 __A, __m128i __B, __m128i __C, int __D)\n+{\n+  return (__m128i)__builtin_ia32_vpshld_v2di_mask ((__v2di)__B, (__v2di) __C,\n+\t\t\t__D, (__v2di) _mm_setzero_si128 (), (__mmask8)__A);\n+}\n+\n+extern __inline __m128i\n+__attribute__((__gnu_inline__, __always_inline__, __artificial__))\n+_mm_shldi_epi64 (__m128i __A, __m128i __B, int __C)\n+{\n+  return (__m128i) __builtin_ia32_vpshld_v2di ((__v2di)__A, (__v2di) __B, __C);\n+}\n+#else\n+#define _mm256_shldi_epi16(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshld_v16hi ((__v16hi)(__m256i)(A), \\\n+\t\t\t\t\t\t(__v16hi)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shldi_epi16(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshld_v16hi_mask ((__v16hi)(__m256i)(C), \\\n+\t(__v16hi)(__m256i)(D), (int)(E), (__v16hi)(__m256i)(A),(__mmask16)(B))\n+#define _mm256_maskz_shldi_epi16(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshld_v16hi_mask ((__v16hi)(__m256i)(B), \\\n+\t(__v16hi)(__m256i)(C),(int)(D), \\\n+\t(__v16hi)(__m256i)_mm256_setzero_si256 (), (__mmask16)(A))\n+#define _mm256_shldi_epi32(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshld_v8si ((__v8si)(__m256i)(A), \\\n+\t(__v8si)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shldi_epi32(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshld_v8si_mask ((__v8si)(__m256i)(C), \\\n+\t(__v8si)(__m256i)(D), (int)(E), (__v8si)(__m256i)(A),(__mmask8)(B))\n+#define _mm256_maskz_shldi_epi32(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshld_v8si_mask ((__v8si)(__m256i)(B), \\\n+\t(__v8si)(__m256i)(C),(int)(D), \\\n+\t(__v8si)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+#define _mm256_shldi_epi64(A, B, C) \\\n+  ((__m256i) __builtin_ia32_vpshld_v4di ((__v4di)(__m256i)(A), \\\n+\t(__v4di)(__m256i)(B),(int)(C))\n+#define _mm256_mask_shldi_epi64(A, B, C, D, E) \\\n+  ((__m256i) __builtin_ia32_vpshld_v4di_mask ((__v4di)(__m256i)(C), \\\n+\t(__v4di)(__m256i)(D), (int)(E), (__v4di)(__m256i)(A),(__mmask8)(B))\n+#define _mm256_maskz_shldi_epi64(A, B, C, D) \\\n+  ((__m256i) __builtin_ia32_vpshld_v4di_mask ((__v4di)(__m256i)(B), \\\n+\t(__v4di)(__m256i)(C),(int)(D), \\\n+\t(__v4di)(__m256i)_mm256_setzero_si256 (), (__mmask8)(A))\n+#define _mm_shldi_epi16(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshld_v8hi ((__v8hi)(__m128i)(A), \\\n+\t(__v8hi)(__m128i)(B),(int)(C))\n+#define _mm_mask_shldi_epi16(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshld_v8hi_mask ((__v8hi)(__m128i)(C), \\\n+\t(__v8hi)(__m128i)(D), (int)(E), (__v8hi)(__m128i)(A),(__mmask8)(B))\n+#define _mm_maskz_shldi_epi16(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshld_v8hi_mask ((__v8hi)(__m128i)(B), \\\n+\t(__v8hi)(__m128i)(C),(int)(D), \\\n+\t(__v8hi)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+#define _mm_shldi_epi32(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshld_v4si ((__v4si)(__m128i)(A), \\\n+\t(__v4si)(__m128i)(B),(int)(C))\n+#define _mm_mask_shldi_epi32(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(C), \\\n+\t(__v4si)(__m128i)(D), (int)(E), (__v4si)(__m128i)(A),(__mmask16)(B))\n+#define _mm_maskz_shldi_epi32(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshld_v4si_mask ((__v4si)(__m128i)(B), \\\n+\t(__v4si)(__m128i)(C),(int)(D), \\\n+\t(__v4si)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+#define _mm_shldi_epi64(A, B, C) \\\n+  ((__m128i) __builtin_ia32_vpshld_v2di ((__v2di)(__m128i)(A), \\\n+\t(__v2di)(__m128i)(B),(int)(C))\n+#define _mm_mask_shldi_epi64(A, B, C, D, E) \\\n+  ((__m128i) __builtin_ia32_vpshld_v2di_mask ((__v2di)(__m128i)(C), \\\n+\t(__v2di)(__m128i)(D), (int)(E), (__v2di)(__m128i)(A),(__mmask8)(B))\n+#define _mm_maskz_shldi_epi64(A, B, C, D) \\\n+  ((__m128i) __builtin_ia32_vpshld_v2di_mask ((__v2di)(__m128i)(B), \\\n+\t(__v2di)(__m128i)(C),(int)(D), \\\n+\t(__v2di)(__m128i)_mm_setzero_si128 (), (__mmask8)(A))\n+#endif\n+\n #ifdef __DISABLE_AVX512VBMI2VL__\n #undef __DISABLE_AVX512VBMI2VL__\n #pragma GCC pop_options"}, {"sha": "c7e4f642fe90bfb1bd88b5920dcc5dca45814ea5", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -1233,3 +1233,14 @@ DEF_FUNCTION_TYPE (V32QI, PCV32QI, V32QI, USI)\n DEF_FUNCTION_TYPE (V16QI, PCV16QI, V16QI, UHI)\n DEF_FUNCTION_TYPE (V16HI, PCV16HI, V16HI, UHI)\n DEF_FUNCTION_TYPE (V8HI, PCV8HI, V8HI, UQI)\n+DEF_FUNCTION_TYPE (V32HI, V32HI, V32HI, INT)\n+DEF_FUNCTION_TYPE (V32HI, V32HI, V32HI, INT, V32HI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, INT)\n+DEF_FUNCTION_TYPE (V16SI, V16SI, V16SI, INT, V16SI, INT)\n+DEF_FUNCTION_TYPE (V8DI, V8DI, V8DI, INT, V8DI, INT)\n+DEF_FUNCTION_TYPE (V16HI, V16HI, V16HI, INT, V16HI, INT)\n+DEF_FUNCTION_TYPE (V8SI, V8SI, V8SI, INT, V8SI, INT)\n+DEF_FUNCTION_TYPE (V4DI, V4DI, V4DI, INT, V4DI, INT)\n+DEF_FUNCTION_TYPE (V8HI, V8HI, V8HI, INT, V8HI, INT)\n+DEF_FUNCTION_TYPE (V4SI, V4SI, V4SI, INT, V4SI, INT)\n+DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, INT, V2DI, INT)"}, {"sha": "f6e63323dfdaf1a98ba597cdf38015db1f94d039", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -2628,6 +2628,24 @@ BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv1\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv16hi_maskz, \"__builtin_ia32_expandhi256_maskz\", IX86_BUILTIN_PEXPANDW256Z, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_UHI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_mask, \"__builtin_ia32_expandhi128_mask\", IX86_BUILTIN_PEXPANDW128, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n BDESC (OPTION_MASK_ISA_AVX512VBMI2 | OPTION_MASK_ISA_AVX512VL, CODE_FOR_expandv8hi_maskz, \"__builtin_ia32_expandhi128_maskz\", IX86_BUILTIN_PEXPANDW128Z, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_UQI)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi, \"__builtin_ia32_vpshld_v32hi\", IX86_BUILTIN_VPSHLDV32HI, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v32hi_mask, \"__builtin_ia32_vpshld_v32hi_mask\", IX86_BUILTIN_VPSHLDV32HI_MASK, UNKNOWN, (int) V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16hi, \"__builtin_ia32_vpshld_v16hi\", IX86_BUILTIN_VPSHLDV16HI, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16hi_mask, \"__builtin_ia32_vpshld_v16hi_mask\", IX86_BUILTIN_VPSHLDV16HI_MASK, UNKNOWN, (int) V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8hi, \"__builtin_ia32_vpshld_v8hi\", IX86_BUILTIN_VPSHLDV8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8hi_mask, \"__builtin_ia32_vpshld_v8hi_mask\", IX86_BUILTIN_VPSHLDV8HI_MASK, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16si, \"__builtin_ia32_vpshld_v16si\", IX86_BUILTIN_VPSHLDV16SI, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v16si_mask, \"__builtin_ia32_vpshld_v16si_mask\", IX86_BUILTIN_VPSHLDV16SI_MASK, UNKNOWN, (int) V16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8si, \"__builtin_ia32_vpshld_v8si\", IX86_BUILTIN_VPSHLDV8SI, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8si_mask, \"__builtin_ia32_vpshld_v8si_mask\", IX86_BUILTIN_VPSHLDV8SI_MASK, UNKNOWN, (int) V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4si, \"__builtin_ia32_vpshld_v4si\", IX86_BUILTIN_VPSHLDV4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4si_mask, \"__builtin_ia32_vpshld_v4si_mask\", IX86_BUILTIN_VPSHLDV4SI_MASK, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8di, \"__builtin_ia32_vpshld_v8di\", IX86_BUILTIN_VPSHLDV8DI, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v8di_mask, \"__builtin_ia32_vpshld_v8di_mask\", IX86_BUILTIN_VPSHLDV8DI_MASK, UNKNOWN, (int) V8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4di, \"__builtin_ia32_vpshld_v4di\", IX86_BUILTIN_VPSHLDV4DI, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v4di_mask, \"__builtin_ia32_vpshld_v4di_mask\", IX86_BUILTIN_VPSHLDV4DI_MASK, UNKNOWN, (int) V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di, \"__builtin_ia32_vpshld_v2di\", IX86_BUILTIN_VPSHLDV2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT)\n+BDESC (OPTION_MASK_ISA_AVX512VBMI2, CODE_FOR_vpshld_v2di_mask, \"__builtin_ia32_vpshld_v2di_mask\", IX86_BUILTIN_VPSHLDV2DI_MASK, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT)\n \n BDESC_END (ARGS2, SPECIAL_ARGS2)\n "}, {"sha": "379dc826b781c63aba84d9449f75de99ffbdca63", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -33856,6 +33856,9 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case UHI_FTYPE_V16SI_V16SI_INT:\n     case UHI_FTYPE_V16SF_V16SF_INT:\n     case V64QI_FTYPE_V64QI_V64QI_INT:\n+    case V32HI_FTYPE_V32HI_V32HI_INT:\n+    case V16SI_FTYPE_V16SI_V16SI_INT:\n+    case V8DI_FTYPE_V8DI_V8DI_INT:\n       nargs = 3;\n       nargs_constant = 1;\n       break;\n@@ -34086,6 +34089,15 @@ ix86_expand_args_builtin (const struct builtin_description *d,\n     case V64QI_FTYPE_V64QI_V64QI_INT_V64QI_UDI:\n     case V32QI_FTYPE_V32QI_V32QI_INT_V32QI_USI:\n     case V16QI_FTYPE_V16QI_V16QI_INT_V16QI_UHI:\n+    case V32HI_FTYPE_V32HI_V32HI_INT_V32HI_INT:\n+    case V16SI_FTYPE_V16SI_V16SI_INT_V16SI_INT:\n+    case V8DI_FTYPE_V8DI_V8DI_INT_V8DI_INT:\n+    case V16HI_FTYPE_V16HI_V16HI_INT_V16HI_INT:\n+    case V8SI_FTYPE_V8SI_V8SI_INT_V8SI_INT:\n+    case V4DI_FTYPE_V4DI_V4DI_INT_V4DI_INT:\n+    case V8HI_FTYPE_V8HI_V8HI_INT_V8HI_INT:\n+    case V4SI_FTYPE_V4SI_V4SI_INT_V4SI_INT:\n+    case V2DI_FTYPE_V2DI_V2DI_INT_V2DI_INT:\n       nargs = 5;\n       mask_pos = 1;\n       nargs_constant = 2;"}, {"sha": "9fe61959da143103000d7cd37e65c25aacca917b", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -160,6 +160,9 @@\n   UNSPEC_GF2P8AFFINEINV\n   UNSPEC_GF2P8AFFINE\n   UNSPEC_GF2P8MUL\n+\n+  ;; For AVX512VBMI2 support\n+  UNSPEC_VPSHLD\n ])\n \n (define_c_enum \"unspecv\" [\n@@ -20088,3 +20091,14 @@\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"orig,maybe_evex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n+\n+(define_insn \"vpshld_<mode><mask_name>\"\n+  [(set (match_operand:VI248_VLBW 0 \"register_operand\" \"=v\")\n+\t(unspec:VI248_VLBW\n+\t  [(match_operand:VI248_VLBW 1 \"register_operand\" \"v\")\n+\t(match_operand:VI248_VLBW 2 \"nonimmediate_operand\" \"vm\")\n+\t(match_operand:SI 3 \"const_0_to_255_operand\" \"n\")\n+] UNSPEC_VPSHLD))]\n+  \"TARGET_AVX512VBMI2\"\n+  \"vpshld<ssemodesuffix>\\t{%3, %2, %1, %0<mask_operand4>|%0<mask_operand4>, %1, %2, %3 }\"\n+   [(set_attr (\"prefix\") (\"evex\"))])"}, {"sha": "1e71a344989ef413bf4c035c29d789128f82f702", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -1,3 +1,15 @@\n+2017-11-28  Julia Koval  <julia.koval@intel.com>\n+\n+\tgcc.target/i386/avx-1.c: Handle new intrinics.\n+\tgcc.target/i386/sse-13.c: Ditto.\n+\tgcc.target/i386/sse-23.c: Ditto.\n+\tgcc.target/i386/avx512f-vpshld-1.c: New test.\n+\tgcc.target/i386/avx512f-vpshldd-2.c: Ditto.\n+\tgcc.target/i386/avx512f-vpshldq-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpshld-1.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpshldd-2.c: Ditto.\n+\tgcc.target/i386/avx512vl-vpshldq-2.c: Ditto.\n+\n 2017-11-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/80776"}, {"sha": "b802b48ebbd8b11a216a54d31ea34fcaaae8054a", "filename": "gcc/testsuite/gcc.target/i386/avx-1.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-1.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -617,6 +617,26 @@\n #define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n+/* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)\n+#define __builtin_ia32_vpshld_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8di(A, B, C) __builtin_ia32_vpshld_v8di(A, B, 1)\n+#define __builtin_ia32_vpshld_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16hi(A, B, C) __builtin_ia32_vpshld_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8si(A, B, C) __builtin_ia32_vpshld_v8si(A, B, 1)\n+#define __builtin_ia32_vpshld_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4di(A, B, C) __builtin_ia32_vpshld_v4di(A, B, 1)\n+#define __builtin_ia32_vpshld_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8hi(A, B, C) __builtin_ia32_vpshld_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4si(A, B, C) __builtin_ia32_vpshld_v4si(A, B, 1)\n+#define __builtin_ia32_vpshld_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n+#define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n+\n #include <wmmintrin.h>\n #include <immintrin.h>\n #include <mm3dnow.h>"}, {"sha": "f465ce2d077e14dfb8b73dbdefc44e47d98cb003", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshld-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshld-1.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512f -mavx512vbmi2 -mavx512bw -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\n\\r]*%zmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r]*%zmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%zmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m512i x,y;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm512_shldi_epi16 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi16 (m, x, y, 3);\n+  x = _mm512_mask_shldi_epi16 (x, m, y, x, 3);\n+\n+  x = _mm512_shldi_epi32 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi32 (m, x, y, 3);\n+  x = _mm512_mask_shldi_epi32 (x, m, y, x, 3);\n+\n+  x = _mm512_shldi_epi64 (x, y, 3);\n+  x = _mm512_maskz_shldi_epi64 (m, x, y, 3);\n+  x = _mm512_mask_shldi_epi64 (x, m, y, x, 3);\n+}"}, {"sha": "5ddf49376ca6c5bc1b1c824db3dd894925653423", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshldd-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldd-2.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 32)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (int *r, int *dst, int *s1, int *s2, int imm)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s1[i] << (imm & 31)) | (s2[i] >> (32 - (imm & 31)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_d) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  int res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a, DEFAULT_VALUE);\n+\n+  res1.x = INTRINSIC (_shldi_epi32) (src1.x, src2.x, DEFAULT_VALUE);\n+  res2.x = INTRINSIC (_mask_shldi_epi32) (res2.x, mask, src1.x, src2.x, DEFAULT_VALUE);\n+  res3.x = INTRINSIC (_maskz_shldi_epi32) (mask, src1.x, src2.x, DEFAULT_VALUE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_d) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_d) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "0377aaa19e805d566de8d38e7a8a1789e28378e6", "filename": "gcc/testsuite/gcc.target/i386/avx512f-vpshldq-2.c", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512f-vpshldq-2.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,62 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512f -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512f } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512F\n+\n+#define AVX512VBMI2\n+#include \"avx512f-helper.h\"\n+\n+#define SIZE (AVX512F_LEN / 64)\n+\n+#include \"avx512f-mask-type.h\"\n+\n+static void\n+CALC (long long *r, long long *dst, long long *s1, long long *s2, long long imm)\n+{\n+  int i;\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      r[i] = (s1[i] << (imm & 63)) | (s2[i] >> (64 - (imm & 63)));\n+    }\n+}\n+\n+void\n+TEST (void)\n+{\n+  int i;\n+  UNION_TYPE (AVX512F_LEN, i_q) res1, res2, res3, src1, src2;\n+  MASK_TYPE mask = MASK_VALUE;\n+  long long res_ref[SIZE];\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      src1.a[i] = 1 + i;\n+      src2.a[i] = 2 + 2*i;\n+    }\n+\n+  for (i = 0; i < SIZE; i++)\n+    {\n+      res1.a[i] = DEFAULT_VALUE;\n+      res2.a[i] = DEFAULT_VALUE;\n+      res3.a[i] = DEFAULT_VALUE;\n+    }\n+\n+  CALC (res_ref, res1.a, src1.a, src2.a, DEFAULT_VALUE);\n+\n+  res1.x = INTRINSIC (_shldi_epi64) (src1.x, src2.x, DEFAULT_VALUE);\n+  res2.x = INTRINSIC (_mask_shldi_epi64) (res2.x, mask, src1.x, src2.x, DEFAULT_VALUE);\n+  res3.x = INTRINSIC (_maskz_shldi_epi64) (mask, src1.x, src2.x, DEFAULT_VALUE);\n+\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res1, res_ref))\n+    abort ();\n+\n+  MASK_MERGE (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res2, res_ref))\n+    abort ();\n+\n+  MASK_ZERO (i_q) (res_ref, mask, SIZE);\n+  if (UNION_CHECK (AVX512F_LEN, i_q) (res3, res_ref))\n+    abort ();\n+}"}, {"sha": "fd34f2ca9d5d4f9b0d8a68669a9071cd7b371c5a", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshld-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshld-1.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mavx512vl -mavx512vbmi2 -O2\" } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\n\\r]*%ymm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r]*%ymm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%ymm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldw\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldd\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\n\\r]*%xmm\\[0-9\\]+(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vpshldq\\[ \\\\t\\]+\\[^\\{\\n\\]*\\\\\\$3\\[^\\n\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r]*%xmm\\[0-9\\]+\\[^\\\\n\\\\r\\]*%xmm\\[0-9\\]+\\{%k\\[1-7\\]\\}\\{z\\}(?:\\n|\\[ \\\\t\\]+#)\" 1 } } */\n+\n+#include <immintrin.h>\n+\n+volatile __m256i x,y;\n+volatile __m128i z1,z2;\n+volatile __mmask32 m;\n+\n+void extern\n+avx512f_test (void)\n+{\n+  x = _mm256_shldi_epi16 (x, y, 3);\n+  x = _mm256_maskz_shldi_epi16 (m, x, y, 3);\n+  x = _mm256_mask_shldi_epi16 (x, m, y, x, 3);\n+\n+  x = _mm256_shldi_epi32 (x, y, 3);\n+  x = _mm256_maskz_shldi_epi32 (m, x, y, 3);\n+  x = _mm256_mask_shldi_epi32 (x, m, y, x, 3);\n+\n+  x = _mm256_shldi_epi64 (x, y, 3);\n+  x = _mm256_maskz_shldi_epi64 (m, x, y, 3);\n+  x = _mm256_mask_shldi_epi64 (x, m, y, x, 3);\n+\n+  z1 = _mm_shldi_epi16 (z1, z2, 3);\n+  z1 = _mm_maskz_shldi_epi16 (m, z1, z2, 3);\n+  z1 = _mm_mask_shldi_epi16 (z1, m, z2, z1, 3);\n+\n+  z1 = _mm_shldi_epi32 (z1, z2, 3);\n+  z1 = _mm_maskz_shldi_epi32 (m, z1, z2, 3);\n+  z1 = _mm_mask_shldi_epi32 (z1, m, z2, z1, 3);\n+\n+  z1 = _mm_shldi_epi64 (z1, z2, 3);\n+  z1 = _mm_maskz_shldi_epi64 (m, z1, z2, 3);\n+  z1 = _mm_mask_shldi_epi64 (z1, m, z2, z1, 3);\n+}"}, {"sha": "d47e4e61707480873e6249f24dc9ece06952d869", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshldd-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldd-2.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshldd-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshldd-2.c\""}, {"sha": "7a5575e41a1b32833d775057a87e0ae079be2d34", "filename": "gcc/testsuite/gcc.target/i386/avx512vl-vpshldq-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldq-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldq-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx512vl-vpshldq-2.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -mavx512vl -mavx512vbmi2 -mavx512bw\" } */\n+/* { dg-require-effective-target avx512vl } */\n+/* { dg-require-effective-target avx512vbmi2 } */\n+\n+#define AVX512VL\n+#define AVX512F_LEN 256\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshldq-2.c\"\n+\n+#undef AVX512F_LEN\n+#undef AVX512F_LEN_HALF\n+\n+#define AVX512F_LEN 128\n+#define AVX512F_LEN_HALF 128\n+#include \"avx512f-vpshldq-2.c\""}, {"sha": "4f8b1af046001a51a514aaa7698797b5388d065f", "filename": "gcc/testsuite/gcc.target/i386/sse-13.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-13.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -634,5 +634,24 @@\n #define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n+/* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)\n+#define __builtin_ia32_vpshld_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8di(A, B, C) __builtin_ia32_vpshld_v8di(A, B, 1)\n+#define __builtin_ia32_vpshld_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16hi(A, B, C) __builtin_ia32_vpshld_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8si(A, B, C) __builtin_ia32_vpshld_v8si(A, B, 1)\n+#define __builtin_ia32_vpshld_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4di(A, B, C) __builtin_ia32_vpshld_v4di(A, B, 1)\n+#define __builtin_ia32_vpshld_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8hi(A, B, C) __builtin_ia32_vpshld_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4si(A, B, C) __builtin_ia32_vpshld_v4si(A, B, 1)\n+#define __builtin_ia32_vpshld_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n+#define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n \n #include <x86intrin.h>"}, {"sha": "89dc9fc5f4a41875a263872c763f7a1b545b5642", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2794892aa501666e233bb3ce267031ea60d6bbcc/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=2794892aa501666e233bb3ce267031ea60d6bbcc", "patch": "@@ -633,6 +633,27 @@\n #define __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v32qi_mask(A, B, 1, D, E) \n #define __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, C, D, E) __builtin_ia32_vgf2p8affineqb_v64qi_mask(A, B, 1, D, E) \n \n-#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni\")\n+\n+/* avx512vbmi2intrin.h */\n+#define __builtin_ia32_vpshld_v32hi(A, B, C) __builtin_ia32_vpshld_v32hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v32hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v32hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16si(A, B, C) __builtin_ia32_vpshld_v16si(A, B, 1)\n+#define __builtin_ia32_vpshld_v16si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8di(A, B, C) __builtin_ia32_vpshld_v8di(A, B, 1)\n+#define __builtin_ia32_vpshld_v8di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v16hi(A, B, C) __builtin_ia32_vpshld_v16hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v16hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v16hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8si(A, B, C) __builtin_ia32_vpshld_v8si(A, B, 1)\n+#define __builtin_ia32_vpshld_v8si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4di(A, B, C) __builtin_ia32_vpshld_v4di(A, B, 1)\n+#define __builtin_ia32_vpshld_v4di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4di_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v8hi(A, B, C) __builtin_ia32_vpshld_v8hi(A, B, 1)\n+#define __builtin_ia32_vpshld_v8hi_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v8hi_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v4si(A, B, C) __builtin_ia32_vpshld_v4si(A, B, 1)\n+#define __builtin_ia32_vpshld_v4si_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v4si_mask(A, B, 1, D, E)\n+#define __builtin_ia32_vpshld_v2di(A, B, C) __builtin_ia32_vpshld_v2di(A, B, 1)\n+#define __builtin_ia32_vpshld_v2di_mask(A, B, C, D, E)  __builtin_ia32_vpshld_v2di_mask(A, B, 1, D, E)\n+\n+#pragma GCC target (\"sse4a,3dnow,avx,avx2,fma4,xop,aes,pclmul,popcnt,abm,lzcnt,bmi,bmi2,tbm,lwp,fsgsbase,rdrnd,f16c,fma,rtm,rdseed,prfchw,adx,fxsr,xsaveopt,avx512f,avx512er,avx512cd,avx512pf,sha,prefetchwt1,xsavec,xsaves,clflushopt,avx512bw,avx512dq,avx512vl,avx512vbmi,avx512ifma,avx5124fmaps,avx5124vnniw,avx512vpopcntdq,clwb,mwaitx,clzero,pku,sgx,rdpid,gfni,avx512vbmi2\")\n \n #include <x86intrin.h>"}]}