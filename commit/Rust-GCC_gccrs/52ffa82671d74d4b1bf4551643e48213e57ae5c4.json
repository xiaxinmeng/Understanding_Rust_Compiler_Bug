{"sha": "52ffa82671d74d4b1bf4551643e48213e57ae5c4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJmZmE4MjY3MWQ3NGQ0YjFiZjQ1NTE2NDNlNDgyMTNlNTdhZTVjNA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-06-13T08:45:46Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-06-13T08:45:46Z"}, "message": "decl.c (grokdeclarator): Use id_loc in five additional places in the last part of the function.\n\n/cp\n2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Use id_loc in five additional places\n\tin the last part of the function.\n\n/testsuite\n2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/variably-modified-type-1.C: New.\n\t* g++.dg/cpp0x/alias-decl-1.C: Test the location too.\n\t* g++.dg/other/pr84792-1.C: Likewise.\n\t* g++.dg/other/pr84792-2.C: Likewise.\n\t* g++.dg/parse/error24.C: Likewise.\n\t* g++.dg/parse/error32.C: Likewise.\n\t* g++.dg/parse/error33.C: Likewise.\n\t* g++.dg/parse/saved1.C: Likewise.\n\t* g++.dg/template/operator6.C: Likewise.\n\t* g++.dg/template/pr61745.C: Likewise.\n\t* g++.dg/template/typedef41.C: Likewise.\n\t* g++.old-deja/g++.jason/crash10.C: Likewise.\n\n/cp\n2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* decl.c (grokdeclarator): Move further up the declaration of\n\tid_loc, use it immediately, update its value after the loop\n\tover declarator, use it again in the final part of function;\n\timprove locations of error messages about multiple data types\n\tand conflicting specifiers.\n\n/testsuite\n2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/diagnostic/conflicting-specifiers-1.C: New.\n\t* g++.dg/diagnostic/two-or-more-data-types-1.C: Likewise.\n\t* g++.dg/parse/error10.C: Adjust location.\n\t* g++.dg/parse/pragma2.C: Likewise.\n\nFrom-SVN: r272236", "tree": {"sha": "ad71e6a1ffd5174dc126f70cc0b2c6345bfdba54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad71e6a1ffd5174dc126f70cc0b2c6345bfdba54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52ffa82671d74d4b1bf4551643e48213e57ae5c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ffa82671d74d4b1bf4551643e48213e57ae5c4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52ffa82671d74d4b1bf4551643e48213e57ae5c4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52ffa82671d74d4b1bf4551643e48213e57ae5c4/comments", "author": null, "committer": null, "parents": [{"sha": "a8b98e2fc074dfb6c9419efbe70ce4021a04f356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a8b98e2fc074dfb6c9419efbe70ce4021a04f356", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a8b98e2fc074dfb6c9419efbe70ce4021a04f356"}], "stats": {"total": 154, "additions": 105, "deletions": 49}, "files": [{"sha": "c6823b57aa7b0cab3e6b6e55f942d94c4c36c99a", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -1,3 +1,16 @@\n+2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Use id_loc in five additional places\n+\tin the last part of the function.\n+\n+2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* decl.c (grokdeclarator): Move further up the declaration of\n+\tid_loc, use it immediately, update its value after the loop\n+\tover declarator, use it again in the final part of function;\n+\timprove locations of error messages about multiple data types\n+\tand conflicting specifiers.\n+\n 2019-06-13  Richard Biener  <rguenther@suse.de>\n \n \tPR c++/90801"}, {"sha": "0a3ef452536fa836c3b37e227304ebccd878ee41", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -10456,6 +10456,10 @@ grokdeclarator (const cp_declarator *declarator,\n   if (typespec_loc == UNKNOWN_LOCATION)\n     typespec_loc = input_location;\n \n+  location_t id_loc = declarator ? declarator->id_loc : input_location;\n+  if (id_loc == UNKNOWN_LOCATION)\n+    id_loc = input_location;\n+\n   /* Look inside a declarator for the name being declared\n      and get it as a string, for an error message.  */\n   for (id_declarator = declarator;\n@@ -10620,17 +10624,15 @@ grokdeclarator (const cp_declarator *declarator,\n      D1 ( parameter-declaration-clause) ...  */\n   if (funcdef_flag && innermost_code != cdk_function)\n     {\n-      error_at (declarator->id_loc,\n-\t\t\"function definition does not declare parameters\");\n+      error_at (id_loc, \"function definition does not declare parameters\");\n       return error_mark_node;\n     }\n \n   if (flags == TYPENAME_FLAG\n       && innermost_code != cdk_function\n       && ! (ctype && !declspecs->any_specifiers_p))\n     {\n-      error_at (declarator->id_loc,\n-\t\t\"declaration of %qD as non-function\", dname);\n+      error_at (id_loc, \"declaration of %qD as non-function\", dname);\n       return error_mark_node;\n     }\n \n@@ -10639,23 +10641,20 @@ grokdeclarator (const cp_declarator *declarator,\n       if (UDLIT_OPER_P (dname)\n \t  && innermost_code != cdk_function)\n \t{\n-\t  error_at (declarator->id_loc,\n-\t\t    \"declaration of %qD as non-function\", dname);\n+\t  error_at (id_loc, \"declaration of %qD as non-function\", dname);\n \t  return error_mark_node;\n \t}\n \n       if (IDENTIFIER_ANY_OP_P (dname))\n \t{\n \t  if (typedef_p)\n \t    {\n-\t      error_at (declarator->id_loc,\n-\t\t\t\"declaration of %qD as %<typedef%>\", dname);\n+\t      error_at (id_loc, \"declaration of %qD as %<typedef%>\", dname);\n \t      return error_mark_node;\n \t    }\n \t  else if (decl_context == PARM || decl_context == CATCHPARM)\n \t    {\n-\t      error_at (declarator->id_loc,\n-\t\t\t\"declaration of %qD as parameter\", dname);\n+\t      error_at (id_loc, \"declaration of %qD as parameter\", dname);\n \t      return error_mark_node;\n \t    }\n \t}\n@@ -10705,13 +10704,16 @@ grokdeclarator (const cp_declarator *declarator,\n      issue an error message.  */\n   if (declspecs->multiple_types_p)\n     {\n-      error (\"two or more data types in declaration of %qs\", name);\n+      error_at (typespec_loc,\n+\t\t\"two or more data types in declaration of %qs\", name);\n       return error_mark_node;\n     }\n \n   if (declspecs->conflicting_specifiers_p)\n     {\n-      error (\"conflicting specifiers in declaration of %qs\", name);\n+      error_at (min_location (declspecs->locations[ds_typedef],\n+\t\t\t      declspecs->locations[ds_storage_class]),\n+\t\t\"conflicting specifiers in declaration of %qs\", name);\n       return error_mark_node;\n     }\n \n@@ -11861,6 +11863,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n     }\n \n+  id_loc = declarator ? declarator->id_loc : input_location;\n+\n   /* A `constexpr' specifier used in an object declaration declares\n      the object as `const'.  */\n   if (constexpr_p && innermost_code != cdk_function)\n@@ -11884,8 +11888,6 @@ grokdeclarator (const cp_declarator *declarator,\n       unqualified_id = dname;\n     }\n \n-  location_t loc = declarator ? declarator->id_loc : input_location;\n-\n   /* If TYPE is a FUNCTION_TYPE, but the function name was explicitly\n      qualified with a class-name, turn it into a METHOD_TYPE, unless\n      we know that the function is static.  We take advantage of this\n@@ -11912,7 +11914,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      friendp = 0;\n \t    }\n \t  else\n-\t    permerror (loc, \"extra qualification %<%T::%> on member %qs\",\n+\t    permerror (id_loc, \"extra qualification %<%T::%> on member %qs\",\n \t\t       ctype, name);\n \t}\n       else if (/* If the qualifying type is already complete, then we\n@@ -11941,7 +11943,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  if (current_class_type\n \t      && (!friendp || funcdef_flag || initialized))\n \t    {\n-\t      error_at (loc, funcdef_flag || initialized\n+\t      error_at (id_loc, funcdef_flag || initialized\n \t\t\t? G_(\"cannot define member function %<%T::%s%> \"\n \t\t\t     \"within %qT\")\n \t\t\t: G_(\"cannot declare member function %<%T::%s%> \"\n@@ -11952,7 +11954,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n       else if (typedef_p && current_class_type)\n \t{\n-\t  error_at (loc, \"cannot declare member %<%T::%s%> within %qT\",\n+\t  error_at (id_loc, \"cannot declare member %<%T::%s%> within %qT\",\n \t\t    ctype, name, current_class_type);\n \t  return error_mark_node;\n \t}\n@@ -12000,9 +12002,11 @@ grokdeclarator (const cp_declarator *declarator,\n       && variably_modified_type_p (type, NULL_TREE))\n     {\n       if (decl_context == FIELD)\n-\terror (\"data member may not have variably modified type %qT\", type);\n+\terror_at (id_loc,\n+\t\t  \"data member may not have variably modified type %qT\", type);\n       else\n-\terror (\"parameter may not have variably modified type %qT\", type);\n+\terror_at (id_loc,\n+\t\t  \"parameter may not have variably modified type %qT\", type);\n       type = error_mark_node;\n     }\n \n@@ -12106,14 +12110,14 @@ grokdeclarator (const cp_declarator *declarator,\n \n       if (id_declarator && declarator->u.id.qualifying_scope)\n \t{\n-\t  error (\"typedef name may not be a nested-name-specifier\");\n+\t  error_at (id_loc, \"typedef name may not be a nested-name-specifier\");\n \t  type = error_mark_node;\n \t}\n \n       if (decl_context == FIELD)\n-\tdecl = build_lang_decl_loc (loc, TYPE_DECL, unqualified_id, type);\n+\tdecl = build_lang_decl_loc (id_loc, TYPE_DECL, unqualified_id, type);\n       else\n-\tdecl = build_decl (loc, TYPE_DECL, unqualified_id, type);\n+\tdecl = build_decl (id_loc, TYPE_DECL, unqualified_id, type);\n \n       if (decl_context != FIELD)\n \t{\n@@ -12130,7 +12134,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t}\n       else if (current_class_type\n \t       && constructor_name_p (unqualified_id, current_class_type))\n-\tpermerror (input_location, \"ISO C++ forbids nested type %qD with same name \"\n+\tpermerror (id_loc, \"ISO C++ forbids nested type %qD with same name \"\n \t\t   \"as enclosing class\",\n \t\t   unqualified_id);\n \n@@ -12288,7 +12292,7 @@ grokdeclarator (const cp_declarator *declarator,\n       /* Only functions may be declared using an operator-function-id.  */\n       if (dname && IDENTIFIER_ANY_OP_P (dname))\n \t{\n-\t  error (\"declaration of %qD as non-function\", dname);\n+\t  error_at (id_loc, \"declaration of %qD as non-function\", dname);\n \t  return error_mark_node;\n \t}\n \n@@ -12398,8 +12402,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t\tif (in_system_header_at (input_location))\n \t\t  /* Do not warn on flexible array members in system\n \t\t     headers because glibc uses them.  */;\n-\t\telse if (name && declarator)\n-\t\t  pedwarn (declarator->id_loc, OPT_Wpedantic,\n+\t\telse if (name)\n+\t\t  pedwarn (id_loc, OPT_Wpedantic,\n \t\t\t   \"ISO C++ forbids flexible array member %qs\", name);\n \t\telse\n \t\t  pedwarn (input_location, OPT_Wpedantic,\n@@ -12551,7 +12555,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t       initialized == SD_DELETED, sfk,\n \t\t\t       funcdef_flag, late_return_type_p,\n \t\t\t       template_count, in_namespace,\n-\t\t\t       attrlist, declarator->id_loc);\n+\t\t\t       attrlist, id_loc);\n             decl = set_virt_specifiers (decl, virt_specifiers);\n \t    if (decl == NULL_TREE)\n \t      return error_mark_node;\n@@ -12584,8 +12588,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\tif (unqualified_id)\n \t\t  {\n-\t\t    error_at (declarator->id_loc,\n-\t\t\t      \"field %qD has incomplete type %qT\",\n+\t\t    error_at (id_loc, \"field %qD has incomplete type %qT\",\n \t\t\t      unqualified_id, type);\n \t\t    cxx_incomplete_type_inform (strip_array_types (type));\n \t\t  }\n@@ -12600,8 +12603,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t  {\n \t    if (friendp)\n \t      {\n-\t\tif (unqualified_id && declarator)\n-\t\t  error_at (declarator->id_loc,\n+\t\tif (unqualified_id)\n+\t\t  error_at (id_loc,\n \t\t\t    \"%qE is neither function nor member function; \"\n \t\t\t    \"cannot be declared friend\", unqualified_id);\n \t\telse\n@@ -12645,7 +12648,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t      {\n \t\t/* C++ allows static class members.  All other work\n \t\t   for this is done by grokfield.  */\n-\t\tdecl = build_lang_decl_loc (loc, VAR_DECL,\n+\t\tdecl = build_lang_decl_loc (id_loc, VAR_DECL,\n \t\t\t\t\t    unqualified_id, type);\n \t\tset_linkage_for_static_data_member (decl);\n \t\tif (concept_p)\n@@ -12693,7 +12696,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t      unqualified_id);\n \t\t    constexpr_p = false;\n \t\t  }\n-\t\tdecl = build_decl (loc, FIELD_DECL, unqualified_id, type);\n+\t\tdecl = build_decl (id_loc, FIELD_DECL, unqualified_id, type);\n \t\tDECL_NONADDRESSABLE_P (decl) = bitfield;\n \t\tif (bitfield && !unqualified_id)\n \t\t  {\n@@ -12811,7 +12814,7 @@ grokdeclarator (const cp_declarator *declarator,\n                            funcdef_flag,\n \t\t\t   late_return_type_p,\n \t\t\t   template_count, in_namespace, attrlist,\n-\t\t\t   declarator->id_loc);\n+\t\t\t   id_loc);\n \tif (decl == NULL_TREE)\n \t  return error_mark_node;\n \n@@ -12858,7 +12861,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t\t\t    concept_p,\n \t\t\t    template_count,\n \t\t\t    ctype ? ctype : in_namespace,\n-\t\t\t    loc);\n+\t\t\t    id_loc);\n \tif (decl == NULL_TREE)\n \t  return error_mark_node;\n \n@@ -12904,7 +12907,7 @@ grokdeclarator (const cp_declarator *declarator,\n \tif (innermost_code == cdk_decomp)\n \t  {\n \t    gcc_assert (declarator && declarator->kind == cdk_decomp);\n-\t    DECL_SOURCE_LOCATION (decl) = declarator->id_loc;\n+\t    DECL_SOURCE_LOCATION (decl) = id_loc;\n \t    DECL_ARTIFICIAL (decl) = 1;\n \t    fit_decomposition_lang_decl (decl, NULL_TREE);\n \t  }"}, {"sha": "865408b76dd35bafd93af8dd3cc5da2a24076204", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -1,3 +1,25 @@\n+2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/variably-modified-type-1.C: New.\n+\t* g++.dg/cpp0x/alias-decl-1.C: Test the location too.\n+\t* g++.dg/other/pr84792-1.C: Likewise.\n+\t* g++.dg/other/pr84792-2.C: Likewise.\n+\t* g++.dg/parse/error24.C: Likewise.\n+\t* g++.dg/parse/error32.C: Likewise.\n+\t* g++.dg/parse/error33.C: Likewise.\n+\t* g++.dg/parse/saved1.C: Likewise.\n+\t* g++.dg/template/operator6.C: Likewise.\n+\t* g++.dg/template/pr61745.C: Likewise.\n+\t* g++.dg/template/typedef41.C: Likewise.\n+\t* g++.old-deja/g++.jason/crash10.C: Likewise.\n+\n+2019-06-13  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/diagnostic/conflicting-specifiers-1.C: New.\n+\t* g++.dg/diagnostic/two-or-more-data-types-1.C: Likewise.\n+\t* g++.dg/parse/error10.C: Adjust location.\n+\t* g++.dg/parse/pragma2.C: Likewise.\n+\n 2019-06-13  Feng Xue  <fxue@os.amperecomputing.com>\n \n \tPR tree-optimization/89713"}, {"sha": "43284d76978b15de709036085cc315ff978db240", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -11,5 +11,6 @@ template <class U> using Ptr = U*;\n template<class U> struct Ptr<U*> {}; // { dg-error \"specialization\" }\n \n struct A {\n-    using A = int;//{ dg-error \"nested|has|same name as|class|in which|declared\" }\n+    using A = int;  // { dg-error \"11:ISO C\\\\+\\\\+ forbids nested type .A.\" }\n+// { dg-error \"same name as\" \"\" { target c++11 } .-1 }  \n };"}, {"sha": "1a8ac02b77efe85ab9c4a4a11e21e06626cef5eb", "filename": "gcc/testsuite/g++.dg/diagnostic/conflicting-specifiers-1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fconflicting-specifiers-1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -0,0 +1 @@\n+static typedef int i __attribute__((unused));  // { dg-error \"1:conflicting specifiers\" }"}, {"sha": "4323a369e1894bf03b273f27e6c920ebdd801c6a", "filename": "gcc/testsuite/g++.dg/diagnostic/two-or-more-data-types-1.C", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftwo-or-more-data-types-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftwo-or-more-data-types-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Ftwo-or-more-data-types-1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -0,0 +1 @@\n+char int i __attribute__((unused));  // { dg-error \"1:two or more data types\" }"}, {"sha": "4402d12973345398e3036fb9f45173541c2fdd8f", "filename": "gcc/testsuite/g++.dg/diagnostic/variably-modified-type-1.C", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvariably-modified-type-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvariably-modified-type-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fdiagnostic%2Fvariably-modified-type-1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -0,0 +1,12 @@\n+// { dg-options \"\" }\n+\n+void foo ()\n+{\n+  int n;\n+  typedef int X[n];\n+  struct Z\n+  {\n+    X x __attribute__((unused)); // { dg-error \"7:data member may not have variably modified type\" }\n+    void bar (X x __attribute__((unused))); // { dg-error \"17:parameter may not have variably modified type\" }\n+  };\n+}"}, {"sha": "9949efd0959b328aa21741afe919993ea67d769d", "filename": "gcc/testsuite/g++.dg/other/pr84792-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -3,4 +3,4 @@ struct A {};\n typedef struct\n {\n   virtual void foo() {}\n-} A::B;  // { dg-error \"typedef\" }\n+} A::B;  // { dg-error \"3:typedef\" }"}, {"sha": "082baae747f6ba3bc864486ab0103254d0fac09a", "filename": "gcc/testsuite/g++.dg/other/pr84792-2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr84792-2.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -3,4 +3,4 @@ struct A {};\n typedef struct\n {\n   void foo() {}\n-} A::B;  // { dg-error \"typedef\" }\n+} A::B;  // { dg-error \"3:typedef\" }"}, {"sha": "4750e5cbb5a3e22fc47034711ef475a976f1563a", "filename": "gcc/testsuite/g++.dg/parse/error10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror10.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -14,4 +14,4 @@ template <typename T> void foo()\n   enum typename A<T>::E    e4;\n }\n \n-// { dg-error \"28:two or more data types in declaration of 'e4'\" \"2 or more\" { target *-*-* } 14 }\n+// { dg-error \"3:two or more data types in declaration of 'e4'\" \"2 or more\" { target *-*-* } 14 }"}, {"sha": "190812e9f0a12ee9b8d8ecb938a4db8450e5c5d8", "filename": "gcc/testsuite/g++.dg/parse/error24.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror24.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -2,7 +2,7 @@\n // PR c++/19395\n \n struct A {\n-  typedef int ::X; // { dg-error \"17:typedef name may not be a nested-name-specifier\" }\n+  typedef int ::X; // { dg-error \"15:typedef name may not be a nested-name-specifier\" }\n };\n \n "}, {"sha": "1993c068b47045a0c4ad81f04889a0ed7aa6d909", "filename": "gcc/testsuite/g++.dg/parse/error32.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror32.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror32.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror32.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -3,7 +3,7 @@\n \n struct A {};\n \n-typedef void (A::T)(); /* { dg-error \"typedef name may not be a nested-name-specifier\" } */\n+typedef void (A::T)(); /* { dg-error \"15:typedef name may not be a nested-name-specifier\" } */\n \n void foo()\n {"}, {"sha": "0d25386a879cabc883d38d280d47b0b0de284155", "filename": "gcc/testsuite/g++.dg/parse/error33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror33.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -6,7 +6,7 @@ struct A\n   void foo();\n };\n \n-typedef void (A::T)(); /* { dg-error \"typedef name may not be a nested\" } */\n+typedef void (A::T)(); /* { dg-error \"15:typedef name may not be a nested\" } */\n \n void bar(T); /* { dg-message \"note: declared here\" } */\n "}, {"sha": "c7d4f10751cdf35320dd673be5216876d70885e2", "filename": "gcc/testsuite/g++.dg/parse/pragma2.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fpragma2.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -4,5 +4,6 @@\n // does not.\n int f(int x,\n #pragma interface  // { dg-error \"not allowed here\" }\n+// { dg-bogus \"two or more\" \"\" { xfail *-*-* } .-1 }      \n       // The parser gets confused and issues an error on the next line.\n-      int y); // { dg-bogus \"\" \"\" { xfail *-*-* } } \n+      int y);"}, {"sha": "979a05676d2069911eb8c47c994ddf2fc4fb4ab8", "filename": "gcc/testsuite/g++.dg/parse/saved1.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fsaved1.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -1,6 +1,7 @@\n // Test that the parser doesn't go into an infinite loop from ignoring the\n // PRE_PARSED_FUNCTION_DECL token.\n \n-class C { static void* operator new(size_t); }; // { dg-error \"\" }\n+class C { static void* operator new(size_t); }; // { dg-error \"24:declaration of .operator new. as non-function\" }\n+// { dg-error \"expected|ISO C\\\\+\\\\+ forbids\" \"\" { target *-*-* } .-1 }\n void* C::operator new(size_t) { return 0; } // { dg-error \"\" }\n class D { D(int i): integer(i){}}; // { dg-error \"\" }"}, {"sha": "189dcc26e150e3d0563e5b67ee43e49a7584d84c", "filename": "gcc/testsuite/g++.dg/template/operator6.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foperator6.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -1,4 +1,4 @@\n // PR c++/27315\n // { dg-do compile }\n \n-template void operator+; // { dg-error \"non-function\" }\n+template void operator+; // { dg-error \"15:declaration of .operator\\\\+. as non-function\" }"}, {"sha": "a44bfa8afe14fab02b3ef59e6bc0d668fa6340a6", "filename": "gcc/testsuite/g++.dg/template/pr61745.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr61745.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -20,5 +20,6 @@ public:\n   Zp  operator-() const { return Zp(p-val); }\n   // In C++2A, we have an unqualified-id (operator-) followed by\n   // '<', and name lookup found a function.\n-  friend Zp<INT,P> operator- <>(const Zp<INT,P>& a, const Zp<INT,P>& b); // { dg-error \"declaration|expected\" \"\" { target c++17_down } }\n+  friend Zp<INT,P> operator- <>(const Zp<INT,P>& a, const Zp<INT,P>& b); // { dg-error \"20:declaration of .operator\\\\-. as non-function\" \"\" { target c++17_down } }\n+  // { dg-error \"expected\" \"\" { target c++17_down } .-1 }\n };"}, {"sha": "e6619d7dccda216fe880e523f497cbeab8fa62d8", "filename": "gcc/testsuite/g++.dg/template/typedef41.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef41.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef41.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Ftypedef41.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -2,7 +2,7 @@\n \n template<int> struct A\n {\n-  typedef int ::X;\t\t// { dg-error \"\" }\n+  typedef int ::X;\t\t// { dg-error \"15:typedef name\" }\n };\n \n A<0> a;"}, {"sha": "2d1f71db1923341f14ee29f3f6bfea603f6358e6", "filename": "gcc/testsuite/g++.old-deja/g++.jason/crash10.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52ffa82671d74d4b1bf4551643e48213e57ae5c4/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.jason%2Fcrash10.C?ref=52ffa82671d74d4b1bf4551643e48213e57ae5c4", "patch": "@@ -5,4 +5,4 @@ struct A {\n   enum foo { bar };\n };\n \n-typedef A::foo A::foo;\t\t// { dg-error \"\" } causes compiler segfault\n+typedef A::foo A::foo;\t\t// { dg-error \"16:typedef name\" } causes compiler segfault"}]}