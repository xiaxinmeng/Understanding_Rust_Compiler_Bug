{"sha": "7c11b0fef088480510a74f0f43015776c40be047", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2MxMWIwZmVmMDg4NDgwNTEwYTc0ZjBmNDMwMTU3NzZjNDBiZTA0Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2015-12-22T19:42:24Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2015-12-22T19:42:24Z"}, "message": "re PR ipa/67811 ([TM] ICE with try-block in transaction)\n\nPR ipa/67811\n\n\t* gimple.h (struct gtransaction): Add label_norm, label_uninst;\n\treplace label with label_over.\n\t(gimple_build_transaction): Remove label parameter.\n\t(gimple_transaction_label_norm): New.\n\t(gimple_transaction_label_uninst): New.\n\t(gimple_transaction_label_over): Rename from gimple_transaction_label.\n\t(gimple_transaction_label_norm_ptr): New.\n\t(gimple_transaction_label_uninst_ptr): New.\n\t(gimple_transaction_label_over_ptr): Rename from\n\tgimple_transaction_label_ptr.\n\t(gimple_transaction_set_label_norm): New.\n\t(gimple_transaction_set_label_uninst): New.\n\t(gimple_transaction_set_label_over): Rename from\n\tgimple_transaction_set_label.\n\t* gimple-pretty-print.c (dump_gimple_transaction): Update.\n\t* gimple-streamer-in.c (input_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n\t* gimple-streamer-out.c (output_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n\t* gimple-walk.c (walk_gimple_op) [GIMPLE_TRANSACTION]: Same.\n\t* tree-cfg.c (make_edges_bb) [GIMPLE_TRANSACTION]: Same.\n\t(cleanup_dead_labels) [GIMPLE_TRANSACTION]: Same.\n\t(verify_gimple_transaction): Same.\n\t(gimple_redirect_edge_and_branch) [GIMPLE_TRANSACTION]: Same.\n\t* tree-inline.c (remap_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n\t* gimple.c (gimple_build_transaction): Remove label parameter;\n\tinitialize all three label memebers.\n\t* gimplify.c (gimplify_transaction): Update call\n\tto gimple_build_transaction.\n\t* trans-mem.c (make_tm_uninst): New.\n\t(lower_transaction): Create uninstrumented code path here...\n\t(ipa_tm_scan_calls_transaction): ... not here.\n\t(ipa_uninstrument_transaction): Remove.\n\ntestsuite/\n\t* g++.dg/tm/noexcept-1.C: Update expected must_not_throw count.\n\t* g++.dg/tm/noexcept-4.C: Likewise.\n\t* g++.dg/tm/noexcept-5.C: Likewise.\n\t* g++.dg/tm/pr67811.C: New.\n\nFrom-SVN: r231907", "tree": {"sha": "a8d42a55a283fef873d7bbbede9d1387b48f417a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a8d42a55a283fef873d7bbbede9d1387b48f417a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7c11b0fef088480510a74f0f43015776c40be047", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c11b0fef088480510a74f0f43015776c40be047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c11b0fef088480510a74f0f43015776c40be047", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c11b0fef088480510a74f0f43015776c40be047/comments", "author": null, "committer": null, "parents": [{"sha": "ebe9921f0ce92a25657dee9e7913b944db8f0271", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebe9921f0ce92a25657dee9e7913b944db8f0271", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebe9921f0ce92a25657dee9e7913b944db8f0271"}], "stats": {"total": 410, "additions": 288, "deletions": 122}, "files": [{"sha": "a9e73f45e6af290756e597cdcdcd93964476263f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1,3 +1,38 @@\n+2015-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\tPR ipa/67811\n+\t* gimple.h (struct gtransaction): Add label_norm, label_uninst;\n+\treplace label with label_over.\n+\t(gimple_build_transaction): Remove label parameter.\n+\t(gimple_transaction_label_norm): New.\n+\t(gimple_transaction_label_uninst): New.\n+\t(gimple_transaction_label_over): Rename from gimple_transaction_label.\n+\t(gimple_transaction_label_norm_ptr): New.\n+\t(gimple_transaction_label_uninst_ptr): New.\n+\t(gimple_transaction_label_over_ptr): Rename from\n+\tgimple_transaction_label_ptr.\n+\t(gimple_transaction_set_label_norm): New.\n+\t(gimple_transaction_set_label_uninst): New.\n+\t(gimple_transaction_set_label_over): Rename from\n+\tgimple_transaction_set_label.\n+\t* gimple-pretty-print.c (dump_gimple_transaction): Update.\n+\t* gimple-streamer-in.c (input_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n+\t* gimple-streamer-out.c (output_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n+\t* gimple-walk.c (walk_gimple_op) [GIMPLE_TRANSACTION]: Same.\n+\t* tree-cfg.c (make_edges_bb) [GIMPLE_TRANSACTION]: Same.\n+\t(cleanup_dead_labels) [GIMPLE_TRANSACTION]: Same.\n+\t(verify_gimple_transaction): Same.\n+\t(gimple_redirect_edge_and_branch) [GIMPLE_TRANSACTION]: Same.\n+\t* tree-inline.c (remap_gimple_stmt) [GIMPLE_TRANSACTION]: Same.\n+\t* gimple.c (gimple_build_transaction): Remove label parameter;\n+\tinitialize all three label memebers.\n+\t* gimplify.c (gimplify_transaction): Update call\n+\tto gimple_build_transaction.\n+\t* trans-mem.c (make_tm_uninst): New.\n+\t(lower_transaction): Create uninstrumented code path here...\n+\t(ipa_tm_scan_calls_transaction): ... not here.\n+\t(ipa_uninstrument_transaction): Remove.\n+\n 2015-12-22  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/68772"}, {"sha": "41e4c5e8dabf425f043153749bc00cdc09bad50b", "filename": "gcc/gimple-pretty-print.c", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-pretty-print.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1607,8 +1607,11 @@ dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n   if (flags & TDF_RAW)\n     {\n       dump_gimple_fmt (buffer, spc, flags,\n-\t\t       \"%G [SUBCODE=%x,LABEL=%T] <%+BODY <%S> >\",\n-\t\t       gs, subcode, gimple_transaction_label (gs),\n+\t\t       \"%G [SUBCODE=%x,NORM=%T,UNINST=%T,OVER=%T] \"\n+\t\t       \"<%+BODY <%S> >\",\n+\t\t       gs, subcode, gimple_transaction_label_norm (gs),\n+\t\t       gimple_transaction_label_uninst (gs),\n+\t\t       gimple_transaction_label_over (gs),\n \t\t       gimple_transaction_body (gs));\n     }\n   else\n@@ -1621,13 +1624,35 @@ dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n \tpp_string (buffer, \"__transaction_atomic\");\n       subcode &= ~GTMA_DECLARATION_MASK;\n \n-      if (subcode || gimple_transaction_label (gs))\n+      if (gimple_transaction_body (gs))\n+\t{\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_left_brace (buffer);\n+\t  pp_newline (buffer);\n+\t  dump_gimple_seq (buffer, gimple_transaction_body (gs),\n+\t\t\t   spc + 4, flags);\n+\t  newline_and_indent (buffer, spc + 2);\n+\t  pp_right_brace (buffer);\n+\t}\n+      else\n \t{\n \t  pp_string (buffer, \"  //\");\n-\t  if (gimple_transaction_label (gs))\n+\t  if (gimple_transaction_label_norm (gs))\n+\t    {\n+\t      pp_string (buffer, \" NORM=\");\n+\t      dump_generic_node (buffer, gimple_transaction_label_norm (gs),\n+\t\t\t\t spc, flags, false);\n+\t    }\n+\t  if (gimple_transaction_label_uninst (gs))\n \t    {\n-\t      pp_string (buffer, \" LABEL=\");\n-\t      dump_generic_node (buffer, gimple_transaction_label (gs),\n+\t      pp_string (buffer, \" UNINST=\");\n+\t      dump_generic_node (buffer, gimple_transaction_label_uninst (gs),\n+\t\t\t\t spc, flags, false);\n+\t    }\n+\t  if (gimple_transaction_label_over (gs))\n+\t    {\n+\t      pp_string (buffer, \" OVER=\");\n+\t      dump_generic_node (buffer, gimple_transaction_label_over (gs),\n \t\t\t\t spc, flags, false);\n \t    }\n \t  if (subcode)\n@@ -1668,17 +1693,6 @@ dump_gimple_transaction (pretty_printer *buffer, gtransaction *gs,\n \t      pp_right_bracket (buffer);\n \t    }\n \t}\n-\n-      if (!gimple_seq_empty_p (gimple_transaction_body (gs)))\n-\t{\n-\t  newline_and_indent (buffer, spc + 2);\n-\t  pp_left_brace (buffer);\n-\t  pp_newline (buffer);\n-\t  dump_gimple_seq (buffer, gimple_transaction_body (gs),\n-\t\t\t   spc + 4, flags);\n-\t  newline_and_indent (buffer, spc + 2);\n-\t  pp_right_brace (buffer);\n-\t}\n     }\n }\n "}, {"sha": "6310717c7c64d5a893c8413d81a46e374ed497ad", "filename": "gcc/gimple-streamer-in.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-streamer-in.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-streamer-in.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-in.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -198,8 +198,12 @@ input_gimple_stmt (struct lto_input_block *ib, struct data_in *data_in,\n       break;\n \n     case GIMPLE_TRANSACTION:\n-      gimple_transaction_set_label (as_a <gtransaction *> (stmt),\n-\t\t\t\t    stream_read_tree (ib, data_in));\n+      gimple_transaction_set_label_norm (as_a <gtransaction *> (stmt),\n+\t\t\t\t         stream_read_tree (ib, data_in));\n+      gimple_transaction_set_label_uninst (as_a <gtransaction *> (stmt),\n+\t\t\t\t           stream_read_tree (ib, data_in));\n+      gimple_transaction_set_label_over (as_a <gtransaction *> (stmt),\n+\t\t\t\t         stream_read_tree (ib, data_in));\n       break;\n \n     default:"}, {"sha": "cbcb4db4a6247607f559450ef08f42b43c37dd3c", "filename": "gcc/gimple-streamer-out.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-streamer-out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-streamer-out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-streamer-out.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -180,9 +180,11 @@ output_gimple_stmt (struct output_block *ob, gimple *stmt)\n \n     case GIMPLE_TRANSACTION:\n       {\n-\tgtransaction *trans_stmt = as_a <gtransaction *> (stmt);\n-\tgcc_assert (gimple_transaction_body (trans_stmt) == NULL);\n-\tstream_write_tree (ob, gimple_transaction_label (trans_stmt), true);\n+\tgtransaction *txn = as_a <gtransaction *> (stmt);\n+\tgcc_assert (gimple_transaction_body (txn) == NULL);\n+\tstream_write_tree (ob, gimple_transaction_label_norm (txn), true);\n+\tstream_write_tree (ob, gimple_transaction_label_uninst (txn), true);\n+\tstream_write_tree (ob, gimple_transaction_label_over (txn), true);\n       }\n       break;\n "}, {"sha": "b8bae505b66a1a229d76f442e8a3dcf3d12b7885", "filename": "gcc/gimple-walk.c", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-walk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple-walk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-walk.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -474,11 +474,22 @@ walk_gimple_op (gimple *stmt, walk_tree_fn callback_op,\n       break;\n \n     case GIMPLE_TRANSACTION:\n-      ret = walk_tree (gimple_transaction_label_ptr (\n-\t\t\t as_a <gtransaction *> (stmt)),\n-\t\t       callback_op, wi, pset);\n-      if (ret)\n-\treturn ret;\n+      {\n+\tgtransaction *txn = as_a <gtransaction *> (stmt);\n+\n+\tret = walk_tree (gimple_transaction_label_norm_ptr (txn),\n+\t\t\t callback_op, wi, pset);\n+\tif (ret)\n+\t  return ret;\n+\tret = walk_tree (gimple_transaction_label_uninst_ptr (txn),\n+\t\t\t callback_op, wi, pset);\n+\tif (ret)\n+\t  return ret;\n+\tret = walk_tree (gimple_transaction_label_over_ptr (txn),\n+\t\t\t callback_op, wi, pset);\n+\tif (ret)\n+\t  return ret;\n+      }\n       break;\n \n     case GIMPLE_OMP_RETURN:"}, {"sha": "49663dfe7b12180581be620a329d2877657a0379", "filename": "gcc/gimple.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1131,12 +1131,14 @@ gimple_build_omp_atomic_store (tree val)\n /* Build a GIMPLE_TRANSACTION statement.  */\n \n gtransaction *\n-gimple_build_transaction (gimple_seq body, tree label)\n+gimple_build_transaction (gimple_seq body)\n {\n   gtransaction *p\n     = as_a <gtransaction *> (gimple_alloc (GIMPLE_TRANSACTION, 0));\n   gimple_transaction_set_body (p, body);\n-  gimple_transaction_set_label (p, label);\n+  gimple_transaction_set_label_norm (p, 0);\n+  gimple_transaction_set_label_uninst (p, 0);\n+  gimple_transaction_set_label_over (p, 0);\n   return p;\n }\n "}, {"sha": "adfe071a0eb065a4a9199e966e154f3f97b7fcbf", "filename": "gcc/gimple.h", "status": "modified", "additions": 48, "deletions": 11, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -836,8 +836,10 @@ struct GTY((tag(\"GSS_TRANSACTION\")))\n   /* [ WORD 10 ] */\n   gimple_seq body;\n \n-  /* [ WORD 11 ] */\n-  tree label;\n+  /* [ WORD 11-13 ] */\n+  tree label_norm;\n+  tree label_uninst;\n+  tree label_over;\n };\n \n #define DEFGSSTRUCT(SYM, STRUCT, HAS_TREE_OP)\tSYM,\n@@ -1463,7 +1465,7 @@ gomp_target *gimple_build_omp_target (gimple_seq, int, tree);\n gomp_teams *gimple_build_omp_teams (gimple_seq, tree);\n gomp_atomic_load *gimple_build_omp_atomic_load (tree, tree);\n gomp_atomic_store *gimple_build_omp_atomic_store (tree);\n-gtransaction *gimple_build_transaction (gimple_seq, tree);\n+gtransaction *gimple_build_transaction (gimple_seq);\n extern void gimple_seq_add_stmt (gimple_seq *, gimple *);\n extern void gimple_seq_add_stmt_without_update (gimple_seq *, gimple *);\n void gimple_seq_add_seq (gimple_seq *, gimple_seq);\n@@ -5847,21 +5849,45 @@ gimple_transaction_body_ptr (gtransaction *transaction_stmt)\n static inline gimple_seq\n gimple_transaction_body (gtransaction *transaction_stmt)\n {\n-  return *gimple_transaction_body_ptr (transaction_stmt);\n+  return transaction_stmt->body;\n }\n \n /* Return the label associated with a GIMPLE_TRANSACTION.  */\n \n static inline tree\n-gimple_transaction_label (const gtransaction *transaction_stmt)\n+gimple_transaction_label_norm (const gtransaction *transaction_stmt)\n {\n-  return transaction_stmt->label;\n+  return transaction_stmt->label_norm;\n }\n \n static inline tree *\n-gimple_transaction_label_ptr (gtransaction *transaction_stmt)\n+gimple_transaction_label_norm_ptr (gtransaction *transaction_stmt)\n {\n-  return &transaction_stmt->label;\n+  return &transaction_stmt->label_norm;\n+}\n+\n+static inline tree\n+gimple_transaction_label_uninst (const gtransaction *transaction_stmt)\n+{\n+  return transaction_stmt->label_uninst;\n+}\n+\n+static inline tree *\n+gimple_transaction_label_uninst_ptr (gtransaction *transaction_stmt)\n+{\n+  return &transaction_stmt->label_uninst;\n+}\n+\n+static inline tree\n+gimple_transaction_label_over (const gtransaction *transaction_stmt)\n+{\n+  return transaction_stmt->label_over;\n+}\n+\n+static inline tree *\n+gimple_transaction_label_over_ptr (gtransaction *transaction_stmt)\n+{\n+  return &transaction_stmt->label_over;\n }\n \n /* Return the subcode associated with a GIMPLE_TRANSACTION.  */\n@@ -5885,9 +5911,21 @@ gimple_transaction_set_body (gtransaction *transaction_stmt,\n /* Set the label associated with a GIMPLE_TRANSACTION.  */\n \n static inline void\n-gimple_transaction_set_label (gtransaction *transaction_stmt, tree label)\n+gimple_transaction_set_label_norm (gtransaction *transaction_stmt, tree label)\n+{\n+  transaction_stmt->label_norm = label;\n+}\n+\n+static inline void\n+gimple_transaction_set_label_uninst (gtransaction *transaction_stmt, tree label)\n+{\n+  transaction_stmt->label_uninst = label;\n+}\n+\n+static inline void\n+gimple_transaction_set_label_over (gtransaction *transaction_stmt, tree label)\n {\n-  transaction_stmt->label = label;\n+  transaction_stmt->label_over = label;\n }\n \n /* Set the subcode associated with a GIMPLE_TRANSACTION.  */\n@@ -5899,7 +5937,6 @@ gimple_transaction_set_subcode (gtransaction *transaction_stmt,\n   transaction_stmt->subcode = subcode;\n }\n \n-\n /* Return a pointer to the return value for GIMPLE_RETURN GS.  */\n \n static inline tree *"}, {"sha": "62b0e64350631d113eb41285cfb3b04a2efa1539", "filename": "gcc/gimplify.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -9739,7 +9739,7 @@ gimplify_transaction (tree *expr_p, gimple_seq *pre_p)\n   body_stmt = gimplify_and_return_first (TRANSACTION_EXPR_BODY (expr), &body);\n   pop_gimplify_context (body_stmt);\n \n-  trans_stmt = gimple_build_transaction (body, NULL);\n+  trans_stmt = gimple_build_transaction (body);\n   if (TRANSACTION_EXPR_OUTER (expr))\n     subcode = GTMA_IS_OUTER;\n   else if (TRANSACTION_EXPR_RELAXED (expr))"}, {"sha": "3c2e2aca9e5f4541ad3c40b5422f12d4d484f395", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1,3 +1,10 @@\n+2015-12-22  Richard Henderson  <rth@redhat.com>\n+\n+\t* g++.dg/tm/noexcept-1.C: Update expected must_not_throw count.\n+\t* g++.dg/tm/noexcept-4.C: Likewise.\n+\t* g++.dg/tm/noexcept-5.C: Likewise.\n+\t* g++.dg/tm/pr67811.C: New.\n+\n 2015-12-22  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/68772"}, {"sha": "dcbd3d8ee9c6736ec67244e4f4d1677d88772776", "filename": "gcc/testsuite/g++.dg/tm/noexcept-1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-1.C?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -32,5 +32,5 @@ int f3()\n   return global;\n }\n \n-/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 6 \"tmlower\" } } */\n+/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 12 \"tmlower\" } } */\n /* { dg-final { scan-tree-dump-times \"ITM_RU\" 6 \"tmmark\" } } */"}, {"sha": "82db6ab477f5fea41086f8cd51098d9e18f72212", "filename": "gcc/testsuite/g++.dg/tm/noexcept-4.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-4.C?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -29,5 +29,5 @@ int f3()\n          + __transaction_atomic noexcept (global + 6);\n }\n \n-/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 6 \"tmlower\" } } */\n+/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 12 \"tmlower\" } } */\n /* { dg-final { scan-tree-dump-times \"ITM_RU\" 6 \"tmmark\" } } */"}, {"sha": "7744bfb2558508c85f58d1b84618708b0a1646e4", "filename": "gcc/testsuite/g++.dg/tm/noexcept-5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fnoexcept-5.C?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -15,5 +15,5 @@ void f2(int x)\n         }\n     }\n }\n-/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 1 \"tmlower\" } } */\n+/* { dg-final { scan-tree-dump-times \"eh_must_not_throw\" 2 \"tmlower\" } } */\n /* { dg-final { scan-tree-dump-times \"ITM_RU\" 1 \"tmmark\" } } */"}, {"sha": "90ab64c72e0f7ad425b9734ef829729a711d44b8", "filename": "gcc/testsuite/g++.dg/tm/pr67811.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr67811.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr67811.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftm%2Fpr67811.C?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -0,0 +1,11 @@\n+// { dg-do compile }\n+// { dg-options \"-fgnu-tm\" }\n+\n+void f()\n+{\n+  __transaction_relaxed {\n+    try { throw 42; }\n+    catch (...) { }\n+  }\n+}\n+"}, {"sha": "fa092f1f0d977762f02c45293fee3a1e89555453", "filename": "gcc/trans-mem.c", "status": "modified", "additions": 58, "deletions": 57, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftrans-mem.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftrans-mem.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftrans-mem.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1608,6 +1608,27 @@ examine_call_tm (unsigned *state, gimple_stmt_iterator *gsi)\n   *state |= GTMA_HAVE_LOAD | GTMA_HAVE_STORE;\n }\n \n+/* Iterate through the statements in the sequence, moving labels\n+   (and thus edges) of transactions from \"label_norm\" to \"label_uninst\".  */\n+\n+static tree\n+make_tm_uninst (gimple_stmt_iterator *gsi, bool *handled_ops_p,\n+                struct walk_stmt_info *)\n+{\n+  gimple *stmt = gsi_stmt (*gsi);\n+\n+  if (gtransaction *txn = dyn_cast <gtransaction *> (stmt))\n+    {\n+      *handled_ops_p = true;\n+      txn->label_uninst = txn->label_norm;\n+      txn->label_norm = NULL;\n+    }\n+  else\n+    *handled_ops_p = !gimple_has_substatements (stmt);\n+\n+  return NULL_TREE;\n+}\n+\n /* Lower a GIMPLE_TRANSACTION statement.  */\n \n static void\n@@ -1670,20 +1691,49 @@ lower_transaction (gimple_stmt_iterator *gsi, struct walk_stmt_info *wi)\n \n   g = gimple_build_try (gimple_transaction_body (stmt),\n \t\t\tgimple_seq_alloc_with_stmt (g), GIMPLE_TRY_FINALLY);\n-  gsi_insert_after (gsi, g, GSI_CONTINUE_LINKING);\n \n-  gimple_transaction_set_body (stmt, NULL);\n+  /* For a (potentially) outer transaction, create two paths.  */\n+  gimple_seq uninst = NULL;\n+  if (outer_state == NULL)\n+    {\n+      uninst = copy_gimple_seq_and_replace_locals (g);\n+      /* In the uninstrumented copy, reset inner transactions to have only\n+\t an uninstrumented code path.  */\n+      memset (&this_wi, 0, sizeof (this_wi));\n+      walk_gimple_seq (uninst, make_tm_uninst, NULL, &this_wi);\n+    }\n+\n+  tree label1 = create_artificial_label (UNKNOWN_LOCATION);\n+  gsi_insert_after (gsi, gimple_build_label (label1), GSI_CONTINUE_LINKING);\n+  gsi_insert_after (gsi, g, GSI_CONTINUE_LINKING);\n+  gimple_transaction_set_label_norm (stmt, label1);\n \n   /* If the transaction calls abort or if this is an outer transaction,\n      add an \"over\" label afterwards.  */\n-  if ((this_state & (GTMA_HAVE_ABORT))\n+  tree label3 = NULL;\n+  if ((this_state & GTMA_HAVE_ABORT)\n+      || outer_state == NULL\n       || (gimple_transaction_subcode (stmt) & GTMA_IS_OUTER))\n     {\n-      tree label = create_artificial_label (UNKNOWN_LOCATION);\n-      gimple_transaction_set_label (stmt, label);\n-      gsi_insert_after (gsi, gimple_build_label (label), GSI_CONTINUE_LINKING);\n+      label3 = create_artificial_label (UNKNOWN_LOCATION);\n+      gimple_transaction_set_label_over (stmt, label3);\n     }\n \n+  if (uninst != NULL)\n+    {\n+      gsi_insert_after (gsi, gimple_build_goto (label3), GSI_CONTINUE_LINKING);\n+\n+      tree label2 = create_artificial_label (UNKNOWN_LOCATION);\n+      gsi_insert_after (gsi, gimple_build_label (label2), GSI_CONTINUE_LINKING);\n+      gsi_insert_seq_after (gsi, uninst, GSI_CONTINUE_LINKING);\n+      gimple_transaction_set_label_uninst (stmt, label2);\n+    }\n+\n+  if (label3 != NULL)\n+    gsi_insert_after (gsi, gimple_build_label (label3), GSI_CONTINUE_LINKING);\n+\n+  gimple_transaction_set_body (stmt, NULL);\n+\n   /* Record the set of operations found for use later.  */\n   this_state |= gimple_transaction_subcode (stmt) & GTMA_DECLARATION_MASK;\n   gimple_transaction_set_subcode (stmt, this_state);\n@@ -4113,35 +4163,6 @@ maybe_push_queue (struct cgraph_node *node,\n     }\n }\n \n-/* Duplicate the basic blocks in QUEUE for use in the uninstrumented\n-   code path.  QUEUE are the basic blocks inside the transaction\n-   represented in REGION.\n-\n-   Later in split_code_paths() we will add the conditional to choose\n-   between the two alternatives.  */\n-\n-static void\n-ipa_uninstrument_transaction (struct tm_region *region,\n-\t\t\t      vec<basic_block> queue)\n-{\n-  gimple *transaction = region->transaction_stmt;\n-  basic_block transaction_bb = gimple_bb (transaction);\n-  int n = queue.length ();\n-  basic_block *new_bbs = XNEWVEC (basic_block, n);\n-\n-  copy_bbs (queue.address (), n, new_bbs, NULL, 0, NULL, NULL, transaction_bb,\n-\t    true);\n-  edge e = make_edge (transaction_bb, new_bbs[0], EDGE_TM_UNINSTRUMENTED);\n-  add_phi_args_after_copy (new_bbs, n, e);\n-\n-  // Now we will have a GIMPLE_ATOMIC with 3 possible edges out of it.\n-  //   a) EDGE_FALLTHRU into the transaction\n-  //   b) EDGE_TM_ABORT out of the transaction\n-  //   c) EDGE_TM_UNINSTRUMENTED into the uninstrumented blocks.\n-\n-  free (new_bbs);\n-}\n-\n /* A subroutine of ipa_tm_scan_calls_transaction and ipa_tm_scan_calls_clone.\n    Queue all callees within block BB.  */\n \n@@ -4189,43 +4210,23 @@ static void\n ipa_tm_scan_calls_transaction (struct tm_ipa_cg_data *d,\n \t\t\t       cgraph_node_queue *callees_p)\n {\n-  struct tm_region *r;\n-\n   d->transaction_blocks_normal = BITMAP_ALLOC (&tm_obstack);\n   d->all_tm_regions = all_tm_regions;\n \n-  for (r = all_tm_regions; r; r = r->next)\n+  for (tm_region *r = all_tm_regions; r; r = r->next)\n     {\n       vec<basic_block> bbs;\n       basic_block bb;\n       unsigned i;\n \n       bbs = get_tm_region_blocks (r->entry_block, r->exit_blocks, NULL,\n-\t\t\t\t  d->transaction_blocks_normal, false);\n-\n-      // Generate the uninstrumented code path for this transaction.\n-      ipa_uninstrument_transaction (r, bbs);\n+\t\t\t\t  d->transaction_blocks_normal, false, false);\n \n       FOR_EACH_VEC_ELT (bbs, i, bb)\n \tipa_tm_scan_calls_block (callees_p, bb, false);\n \n       bbs.release ();\n     }\n-\n-  // ??? copy_bbs should maintain cgraph edges for the blocks as it is\n-  // copying them, rather than forcing us to do this externally.\n-  cgraph_edge::rebuild_edges ();\n-\n-  // ??? In ipa_uninstrument_transaction we don't try to update dominators\n-  // because copy_bbs doesn't return a VEC like iterate_fix_dominators expects.\n-  // Instead, just release dominators here so update_ssa recomputes them.\n-  free_dominance_info (CDI_DOMINATORS);\n-\n-  // When building the uninstrumented code path, copy_bbs will have invoked\n-  // create_new_def_for starting an \"ssa update context\".  There is only one\n-  // instance of this context, so resolve ssa updates before moving on to\n-  // the next function.\n-  update_ssa (TODO_update_ssa);\n }\n \n /* Scan all calls in NODE as if this is the transactional clone,"}, {"sha": "436ea146c1bc22e2eb30fe6eeea962c0529552bc", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 55, "deletions": 15, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -828,11 +828,21 @@ make_edges_bb (basic_block bb, struct omp_region **pcur_region, int *pomp_index)\n \n     case GIMPLE_TRANSACTION:\n       {\n-\ttree abort_label\n-\t  = gimple_transaction_label (as_a <gtransaction *> (last));\n-\tif (abort_label)\n-\t  make_edge (bb, label_to_block (abort_label), EDGE_TM_ABORT);\n-\tfallthru = true;\n+        gtransaction *txn = as_a <gtransaction *> (last);\n+\ttree label1 = gimple_transaction_label_norm (txn);\n+\ttree label2 = gimple_transaction_label_uninst (txn);\n+\n+\tif (label1)\n+\t  make_edge (bb, label_to_block (label1), EDGE_FALLTHRU);\n+\tif (label2)\n+\t  make_edge (bb, label_to_block (label2),\n+\t\t     EDGE_TM_UNINSTRUMENTED | (label1 ? 0 : EDGE_FALLTHRU));\n+\n+\ttree label3 = gimple_transaction_label_over (txn);\n+\tif (gimple_transaction_subcode (txn) & GTMA_HAVE_ABORT)\n+\t  make_edge (bb, label_to_block (label3), EDGE_TM_ABORT);\n+\n+\tfallthru = false;\n       }\n       break;\n \n@@ -1517,13 +1527,30 @@ cleanup_dead_labels (void)\n \n \tcase GIMPLE_TRANSACTION:\n \t  {\n-\t    gtransaction *trans_stmt = as_a <gtransaction *> (stmt);\n-\t    tree label = gimple_transaction_label (trans_stmt);\n+\t    gtransaction *txn = as_a <gtransaction *> (stmt);\n+\n+\t    label = gimple_transaction_label_norm (txn);\n+\t    if (label)\n+\t      {\n+\t\tnew_label = main_block_label (label);\n+\t\tif (new_label != label)\n+\t\t  gimple_transaction_set_label_norm (txn, new_label);\n+\t      }\n+\n+\t    label = gimple_transaction_label_uninst (txn);\n+\t    if (label)\n+\t      {\n+\t\tnew_label = main_block_label (label);\n+\t\tif (new_label != label)\n+\t\t  gimple_transaction_set_label_uninst (txn, new_label);\n+\t      }\n+\n+\t    label = gimple_transaction_label_over (txn);\n \t    if (label)\n \t      {\n-\t\ttree new_label = main_block_label (label);\n+\t\tnew_label = main_block_label (label);\n \t\tif (new_label != label)\n-\t\t  gimple_transaction_set_label (trans_stmt, new_label);\n+\t\t  gimple_transaction_set_label_over (txn, new_label);\n \t      }\n \t  }\n \t  break;\n@@ -4732,9 +4759,18 @@ verify_gimple_in_seq_2 (gimple_seq stmts)\n static bool\n verify_gimple_transaction (gtransaction *stmt)\n {\n-  tree lab = gimple_transaction_label (stmt);\n+  tree lab;\n+\n+  lab = gimple_transaction_label_norm (stmt);\n   if (lab != NULL && TREE_CODE (lab) != LABEL_DECL)\n     return true;\n+  lab = gimple_transaction_label_uninst (stmt);\n+  if (lab != NULL && TREE_CODE (lab) != LABEL_DECL)\n+    return true;\n+  lab = gimple_transaction_label_over (stmt);\n+  if (lab != NULL && TREE_CODE (lab) != LABEL_DECL)\n+    return true;\n+\n   return verify_gimple_in_seq_2 (gimple_transaction_body (stmt));\n }\n \n@@ -5642,11 +5678,15 @@ gimple_redirect_edge_and_branch (edge e, basic_block dest)\n       break;\n \n     case GIMPLE_TRANSACTION:\n-      /* The ABORT edge has a stored label associated with it, otherwise\n-\t the edges are simply redirectable.  */\n-      if (e->flags == 0)\n-\tgimple_transaction_set_label (as_a <gtransaction *> (stmt),\n-\t\t\t\t      gimple_block_label (dest));\n+      if (e->flags & EDGE_TM_ABORT)\n+\tgimple_transaction_set_label_over (as_a <gtransaction *> (stmt),\n+\t\t\t\t           gimple_block_label (dest));\n+      else if (e->flags & EDGE_TM_UNINSTRUMENTED)\n+\tgimple_transaction_set_label_uninst (as_a <gtransaction *> (stmt),\n+\t\t\t\t             gimple_block_label (dest));\n+      else\n+\tgimple_transaction_set_label_norm (as_a <gtransaction *> (stmt),\n+\t\t\t\t           gimple_block_label (dest));\n       break;\n \n     default:"}, {"sha": "88a6753cc633100a2089cae177a92aac8fa1af6c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7c11b0fef088480510a74f0f43015776c40be047/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=7c11b0fef088480510a74f0f43015776c40be047", "patch": "@@ -1518,13 +1518,15 @@ remap_gimple_stmt (gimple *stmt, copy_body_data *id)\n \t    gtransaction *new_trans_stmt;\n \t    s1 = remap_gimple_seq (gimple_transaction_body (old_trans_stmt),\n \t\t\t\t   id);\n-\t    copy = new_trans_stmt\n-\t      = gimple_build_transaction (\n-\t\t  s1,\n-\t\t  gimple_transaction_label (old_trans_stmt));\n-\t    gimple_transaction_set_subcode (\n-              new_trans_stmt,\n+\t    copy = new_trans_stmt = gimple_build_transaction (s1);\n+\t    gimple_transaction_set_subcode (new_trans_stmt,\n \t      gimple_transaction_subcode (old_trans_stmt));\n+\t    gimple_transaction_set_label_norm (new_trans_stmt,\n+\t      gimple_transaction_label_norm (old_trans_stmt));\n+\t    gimple_transaction_set_label_uninst (new_trans_stmt,\n+\t      gimple_transaction_label_uninst (old_trans_stmt));\n+\t    gimple_transaction_set_label_over (new_trans_stmt,\n+\t      gimple_transaction_label_over (old_trans_stmt));\n \t  }\n \t  break;\n "}]}