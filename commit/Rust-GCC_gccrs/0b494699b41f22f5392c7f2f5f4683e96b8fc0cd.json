{"sha": "0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGI0OTQ2OTliNDFmMjJmNTM5MmM3ZjJmNWY0NjgzZTk2YjhmYzBjZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@airs.com", "date": "2005-10-03T08:43:45Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2005-10-03T08:43:45Z"}, "message": "gimplify.c (find_single_pointer_decl_1): New static function.\n\n\t* gimplify.c (find_single_pointer_decl_1): New static function.\n\t(find_single_pointer_decl): New static function.\n\t(internal_get_tmp_var): For a formal variable, set restrict base\n\tinformation if appropriate.\n\t* alias.c (find_base_decl): If a VAR_DECL has a restrict base,\n\treturn it.\n\t* tree.h (DECL_BASED_ON_RESTRICT_P): Define.\n\t(DECL_GET_RESTRICT_BASE): Define.\n\t(SET_DECL_RESTRICT_BASE): Define.\n\t(decl_restrict_base_lookup): Declare.\n\t(decl_restrict_base_insert): Declare.\n\t(struct tree_decl_with_vis): Add based_on_restrict_p field.\n\t* tree.c (restrict_base_for_decl): New static variable.\n\t(init_ttree): Initialize restrict_base_for_decl.\n\t(copy_node_stat): Copy restrict base information.\n\t(decl_restrict_base_lookup): New function.\n\t(decl_restrict_base_insert): New function.\n\t(print_restrict_base_statistics): New static function.\n\t(dump_tree_statistics): Call print_restrict_base_statistics.\n\nFrom-SVN: r104890", "tree": {"sha": "12db18961c42def11ca08dfd5229612afd843c31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12db18961c42def11ca08dfd5229612afd843c31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "644cb69f803dc904c271885272e70f032ce56a97", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/644cb69f803dc904c271885272e70f032ce56a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/644cb69f803dc904c271885272e70f032ce56a97"}], "stats": {"total": 167, "additions": 162, "deletions": 5}, "files": [{"sha": "6a56633242dfcafa9ace6f22c532ced5e419c469", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "patch": "@@ -1,3 +1,25 @@\n+2005-10-03  Ian Lance Taylor  <ian@airs.com>\n+\n+\t* gimplify.c (find_single_pointer_decl_1): New static function.\n+\t(find_single_pointer_decl): New static function.\n+\t(internal_get_tmp_var): For a formal variable, set restrict base\n+\tinformation if appropriate.\n+\t* alias.c (find_base_decl): If a VAR_DECL has a restrict base,\n+\treturn it.\n+\t* tree.h (DECL_BASED_ON_RESTRICT_P): Define.\n+\t(DECL_GET_RESTRICT_BASE): Define.\n+\t(SET_DECL_RESTRICT_BASE): Define.\n+\t(decl_restrict_base_lookup): Declare.\n+\t(decl_restrict_base_insert): Declare.\n+\t(struct tree_decl_with_vis): Add based_on_restrict_p field.\n+\t* tree.c (restrict_base_for_decl): New static variable.\n+\t(init_ttree): Initialize restrict_base_for_decl.\n+\t(copy_node_stat): Copy restrict base information.\n+\t(decl_restrict_base_lookup): New function.\n+\t(decl_restrict_base_insert): New function.\n+\t(print_restrict_base_statistics): New static function.\n+\t(dump_tree_statistics): Call print_restrict_base_statistics.\n+\n 2005-10-02  Diego Novillo  <dnovillo@redhat.com>\n \n \tPR 24142"}, {"sha": "4806019909272c11a253082d3948d01ac95ac00f", "filename": "gcc/alias.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "patch": "@@ -395,9 +395,14 @@ find_base_decl (tree t)\n   if (t == 0 || t == error_mark_node || ! POINTER_TYPE_P (TREE_TYPE (t)))\n     return 0;\n \n-  /* If this is a declaration, return it.  */\n+  /* If this is a declaration, return it.  If T is based on a restrict\n+     qualified decl, return that decl.  */\n   if (DECL_P (t))\n-    return t;\n+    {\n+      if (TREE_CODE (t) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (t))\n+\tt = DECL_GET_RESTRICT_BASE (t);\n+      return t;\n+    }\n \n   /* Handle general expressions.  It would be nice to deal with\n      COMPONENT_REFs here.  If we could tell that `a' and `b' were the"}, {"sha": "70479181fea35747434a63ea53ace812863cb3a4", "filename": "gcc/gimplify.c", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "patch": "@@ -298,6 +298,48 @@ create_artificial_label (void)\n   return lab;\n }\n \n+/* Subroutine for find_single_pointer_decl.  */\n+\n+static tree\n+find_single_pointer_decl_1 (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n+\t\t\t    void *data)\n+{\n+  tree *pdecl = (tree *) data;\n+\n+  if (DECL_P (*tp) && POINTER_TYPE_P (TREE_TYPE (*tp)))\n+    {\n+      if (*pdecl)\n+\t{\n+\t  /* We already found a pointer decl; return anything other\n+\t     than NULL_TREE to unwind from walk_tree signalling that\n+\t     we have a duplicate.  */\n+\t  return *tp;\n+\t}\n+      *pdecl = *tp;\n+    }\n+\n+  return NULL_TREE;\n+}\n+\n+/* Find the single DECL of pointer type in the tree T and return it.\n+   If there are zero or more than one such DECLs, return NULL.  */\n+\n+static tree\n+find_single_pointer_decl (tree t)\n+{\n+  tree decl = NULL_TREE;\n+\n+  if (walk_tree (&t, find_single_pointer_decl_1, &decl, NULL))\n+    {\n+      /* find_single_pointer_decl_1 returns a non-zero value, causing\n+\t walk_tree to return a non-zero value, to indicate that it\n+\t found more than one pointer DECL.  */\n+      return NULL_TREE;\n+    }\n+\n+  return decl;\n+}\n+\n /* Create a new temporary name with PREFIX.  Returns an identifier.  */\n \n static GTY(()) unsigned int tmp_var_id_num;\n@@ -470,6 +512,24 @@ internal_get_tmp_var (tree val, tree *pre_p, tree *post_p, bool is_formal)\n \n   t = lookup_tmp_var (val, is_formal);\n \n+  if (is_formal)\n+    {\n+      tree u = find_single_pointer_decl (val);\n+\n+      if (u && TREE_CODE (u) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (u))\n+\tu = DECL_GET_RESTRICT_BASE (u);\n+      if (u && TYPE_RESTRICT (TREE_TYPE (u)))\n+\t{\n+\t  if (DECL_BASED_ON_RESTRICT_P (t))\n+\t    gcc_assert (u == DECL_GET_RESTRICT_BASE (t));\n+\t  else\n+\t    {\n+\t      DECL_BASED_ON_RESTRICT_P (t) = 1;\n+\t      SET_DECL_RESTRICT_BASE (t, u);\n+\t    }\n+\t}\n+    }\n+\n   if (TREE_CODE (TREE_TYPE (t)) == COMPLEX_TYPE)\n     DECL_COMPLEX_GIMPLE_REG_P (t) = 1;\n "}, {"sha": "f7f65030ddd707d0319c4651ceee2b1e5f57c86a", "filename": "gcc/tree.c", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "patch": "@@ -144,6 +144,9 @@ static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n static GTY ((if_marked (\"tree_int_map_marked_p\"), param_is (struct tree_int_map)))\n   htab_t init_priority_for_decl;\n \n+static GTY ((if_marked (\"tree_map_marked_p\"), param_is (struct tree_map)))\n+  htab_t restrict_base_for_decl;\n+\n struct tree_int_map GTY(())\n {\n   tree from;\n@@ -187,6 +190,8 @@ init_ttree (void)\n \t\t\t\t\t tree_map_eq, 0);\n   init_priority_for_decl = htab_create_ggc (512, tree_int_map_hash,\n \t\t\t\t\t    tree_int_map_eq, 0);\n+  restrict_base_for_decl = htab_create_ggc (256, tree_map_hash,\n+\t\t\t\t\t    tree_map_eq, 0);\n \n   int_cst_hash_table = htab_create_ggc (1024, int_cst_hash_hash,\n \t\t\t\t\tint_cst_hash_eq, NULL);\n@@ -568,7 +573,11 @@ copy_node_stat (tree node MEM_STAT_DECL)\n \t  SET_DECL_INIT_PRIORITY (t, DECL_INIT_PRIORITY (node));\n \t  DECL_HAS_INIT_PRIORITY_P (t) = 1;\n \t}\n-      \n+      if (TREE_CODE (node) == VAR_DECL && DECL_BASED_ON_RESTRICT_P (node))\n+\t{\n+\t  SET_DECL_RESTRICT_BASE (t, DECL_GET_RESTRICT_BASE (node));\n+\t  DECL_BASED_ON_RESTRICT_P (t) = 1;\n+\t}\n     }\n   else if (TREE_CODE_CLASS (code) == tcc_type)\n     {\n@@ -3777,6 +3786,36 @@ decl_init_priority_insert (tree from, unsigned short to)\n   *(struct tree_int_map **) loc = h;\n }  \n \n+/* Look up a restrict qualified base decl for FROM.  */\n+\n+tree\n+decl_restrict_base_lookup (tree from)\n+{\n+  struct tree_map *h;\n+  struct tree_map in;\n+\n+  in.from = from;\n+  h = htab_find_with_hash (restrict_base_for_decl, &in,\n+\t\t\t   htab_hash_pointer (from));\n+  return h ? h->to : NULL_TREE;\n+}\n+\n+/* Record the restrict qualified base TO for FROM.  */\n+\n+void\n+decl_restrict_base_insert (tree from, tree to)\n+{\n+  struct tree_map *h;\n+  void **loc;\n+\n+  h = ggc_alloc (sizeof (struct tree_map));\n+  h->hash = htab_hash_pointer (from);\n+  h->from = from;\n+  h->to = to;\n+  loc = htab_find_slot_with_hash (restrict_base_for_decl, h, h->hash, INSERT);\n+  *(struct tree_map **) loc = h;\n+}\n+\n /* Print out the statistics for the DECL_DEBUG_EXPR hash table.  */\n \n static void\n@@ -3798,6 +3837,21 @@ print_value_expr_statistics (void)\n \t   (long) htab_elements (value_expr_for_decl),\n \t   htab_collisions (value_expr_for_decl));\n }\n+\n+/* Print out statistics for the RESTRICT_BASE_FOR_DECL hash table, but\n+   don't print anything if the table is empty.  */\n+\n+static void\n+print_restrict_base_statistics (void)\n+{\n+  if (htab_elements (restrict_base_for_decl) != 0)\n+    fprintf (stderr,\n+\t     \"RESTRICT_BASE    hash: size %ld, %ld elements, %f collisions\\n\",\n+\t     (long) htab_size (restrict_base_for_decl),\n+\t     (long) htab_elements (restrict_base_for_decl),\n+\t     htab_collisions (restrict_base_for_decl));\n+}\n+\n /* Lookup a debug expression for FROM, and return it if we find one.  */\n \n tree \n@@ -5725,6 +5779,7 @@ dump_tree_statistics (void)\n   print_type_hash_statistics ();\n   print_debug_expr_statistics ();\n   print_value_expr_statistics ();\n+  print_restrict_base_statistics ();\n   lang_hooks.print_statistics ();\n }\n \f"}, {"sha": "08f33fe0d95faf854aa14da656caaf331c92a69c", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b494699b41f22f5392c7f2f5f4683e96b8fc0cd/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=0b494699b41f22f5392c7f2f5f4683e96b8fc0cd", "patch": "@@ -2425,6 +2425,20 @@ struct tree_parm_decl GTY(())\n    an address constant.  */\n #define DECL_NON_ADDR_CONST_P(NODE) (DECL_WITH_VIS_CHECK (NODE)->decl_with_vis.non_addr_const_p)\n \n+/* DECL_BASED_ON_RESTRICT_P records whether a VAR_DECL is a temporary\n+   based on a variable with a restrict qualified type.  If it is,\n+   DECL_RESTRICT_BASE returns the restrict qualified variable on which\n+   it is based.  */\n+\n+#define DECL_BASED_ON_RESTRICT_P(NODE) \\\n+  (VAR_DECL_CHECK (NODE)->decl_with_vis.based_on_restrict_p)\n+#define DECL_GET_RESTRICT_BASE(NODE) \\\n+  (decl_restrict_base_lookup (VAR_DECL_CHECK (NODE)))\n+#define SET_DECL_RESTRICT_BASE(NODE, VAL) \\\n+  (decl_restrict_base_insert (VAR_DECL_CHECK (NODE), (VAL)))\n+\n+extern tree decl_restrict_base_lookup (tree);\n+extern void decl_restrict_base_insert (tree, tree);\n \n /* Used in a DECL to indicate that, even if it TREE_PUBLIC, it need\n    not be put out unless it is needed in this translation unit.\n@@ -2500,7 +2514,8 @@ struct tree_decl_with_vis GTY(())\n  unsigned common_flag:1; \n  unsigned in_text_section : 1;\n  unsigned gimple_formal_temp : 1;\n- unsigned non_addr_const_p : 1; \n+ unsigned non_addr_const_p : 1;\n+ unsigned based_on_restrict_p : 1;\n  /* Used by C++.  Might become a generic decl flag.  */\n  unsigned shadowed_for_var_p : 1;\n  \n@@ -2517,7 +2532,7 @@ struct tree_decl_with_vis GTY(())\n \n  /* Belongs to VAR_DECL exclusively.  */\n  ENUM_BITFIELD(tls_model) tls_model : 3;\n- /* 13 unused bits. */\n+ /* 11 unused bits. */\n };\n \n /* In a VAR_DECL that's static,"}]}