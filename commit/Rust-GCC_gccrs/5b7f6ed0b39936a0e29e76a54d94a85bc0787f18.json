{"sha": "5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWI3ZjZlZDBiMzk5MzZhMGUyOWU3NmE1NGQ5NGE4NWJjMDc4N2YxOA==", "commit": {"author": {"name": "Marc Glisse", "email": "marc.glisse@inria.fr", "date": "2016-11-20T13:42:24Z"}, "committer": {"name": "Marc Glisse", "email": "glisse@gcc.gnu.org", "date": "2016-11-20T13:42:24Z"}, "message": "Simplify X / X, 0 / X and X % X\n\n2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n\ngcc/\n\t* match.pd (0 / X, X / X, X % X): New simplifications.\n\ngcc/testsuite/\n\t* gcc.dg/tree-ssa/divide-5.c: New file.\n\nFrom-SVN: r242636", "tree": {"sha": "9508e5426f49c0d9a37fd9c0c3659aa3cc6dbbd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9508e5426f49c0d9a37fd9c0c3659aa3cc6dbbd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/comments", "author": {"login": "mglisse", "id": 10097863, "node_id": "MDQ6VXNlcjEwMDk3ODYz", "avatar_url": "https://avatars.githubusercontent.com/u/10097863?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mglisse", "html_url": "https://github.com/mglisse", "followers_url": "https://api.github.com/users/mglisse/followers", "following_url": "https://api.github.com/users/mglisse/following{/other_user}", "gists_url": "https://api.github.com/users/mglisse/gists{/gist_id}", "starred_url": "https://api.github.com/users/mglisse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mglisse/subscriptions", "organizations_url": "https://api.github.com/users/mglisse/orgs", "repos_url": "https://api.github.com/users/mglisse/repos", "events_url": "https://api.github.com/users/mglisse/events{/privacy}", "received_events_url": "https://api.github.com/users/mglisse/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62a7df9f59c014c272f4216aac02a301a0778fdf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62a7df9f59c014c272f4216aac02a301a0778fdf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62a7df9f59c014c272f4216aac02a301a0778fdf"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "c64b3492b758241a72425f2167d0e161c5d5f224", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "patch": "@@ -1,3 +1,7 @@\n+2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* match.pd (0 / X, X / X, X % X): New simplifications.\n+\n 2016-11-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_can_inline_p): Use || instead of &"}, {"sha": "f97a99888ca9cb3b0b8cef88b58cd7f90ca8ce0f", "filename": "gcc/match.pd", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "patch": "@@ -140,19 +140,33 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n            || !COMPLEX_FLOAT_TYPE_P (type)))\n    (negate @0)))\n \n-/* Make sure to preserve divisions by zero.  This is the reason why\n-   we don't simplify x / x to 1 or 0 / x to 0.  */\n+/* X * 1, X / 1 -> X.  */\n (for op (mult trunc_div ceil_div floor_div round_div exact_div)\n   (simplify\n     (op @0 integer_onep)\n     (non_lvalue @0)))\n \n+/* Preserve explicit divisions by 0: the C++ front-end wants to detect\n+   undefined behavior in constexpr evaluation, and assuming that the division\n+   traps enables better optimizations than these anyway.  */\n (for div (trunc_div ceil_div floor_div round_div exact_div)\n+ /* 0 / X is always zero.  */\n+ (simplify\n+  (div integer_zerop@0 @1)\n+  /* But not for 0 / 0 so that we can get the proper warnings and errors.  */\n+  (if (!integer_zerop (@1))\n+   @0))\n   /* X / -1 is -X.  */\n  (simplify\n    (div @0 integer_minus_onep@1)\n    (if (!TYPE_UNSIGNED (type))\n     (negate @0)))\n+ /* X / X is one.  */\n+ (simplify\n+  (div @0 @0)\n+  /* But not for 0 / 0 so that we can get the proper warnings and errors.  */\n+  (if (!integer_zerop (@0))\n+   { build_one_cst (type); }))\n  /* X / abs (X) is X < 0 ? -1 : 1.  */ \n  (simplify\n    (div:C @0 (abs @0))\n@@ -276,8 +290,6 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n       (if (inverse)\n        (mult @0 { inverse; } ))))))))\n \n-/* Same applies to modulo operations, but fold is inconsistent here\n-   and simplifies 0 % x to 0, only preserving literal 0 % 0.  */\n (for mod (ceil_mod floor_mod round_mod trunc_mod)\n  /* 0 % X is always zero.  */\n  (simplify\n@@ -294,6 +306,12 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n   (mod @0 integer_minus_onep@1)\n   (if (!TYPE_UNSIGNED (type))\n    { build_zero_cst (type); }))\n+ /* X % X is zero.  */\n+ (simplify\n+  (mod @0 @0)\n+  /* But not for 0 % 0 so that we can get the proper warnings and errors.  */\n+  (if (!integer_zerop (@0))\n+   { build_zero_cst (type); }))\n  /* (X % Y) % Y is just X % Y.  */\n  (simplify\n   (mod (mod@2 @0 @1) @1)"}, {"sha": "e64536642dc69cf24894b888883125cd7d16c367", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "patch": "@@ -1,3 +1,7 @@\n+2016-11-20  Marc Glisse  <marc.glisse@inria.fr>\n+\n+\t* gcc.dg/tree-ssa/divide-5.c: New file.\n+\n 2016-11-19  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* gcc.c-torture/execute/comp-goto-1.c (insn_t): Change offset to"}, {"sha": "48cd638e7db44b7c885f294d51f3dc543a9ff477", "filename": "gcc/testsuite/gcc.dg/tree-ssa/divide-5.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5b7f6ed0b39936a0e29e76a54d94a85bc0787f18/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fdivide-5.c?ref=5b7f6ed0b39936a0e29e76a54d94a85bc0787f18", "patch": "@@ -0,0 +1,10 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fdump-tree-optimized\" } */\n+\n+int f(int x){\n+  int y = x;\n+  int z = 0;\n+  return x / y - x % y + z / y;\n+}\n+\n+/* { dg-final { scan-tree-dump \"return 1;\" \"optimized\"} } */"}]}