{"sha": "e65d7eac576c15943aac86658f5e3524056385d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY1ZDdlYWM1NzZjMTU5NDNhYWM4NjY1OGY1ZTM1MjQwNTYzODVkMQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2000-05-25T11:49:34Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2000-05-25T11:49:34Z"}, "message": "cxxabi.h (__pbase_type_info): Define, based on __pointer_type_info.\n\n\t* inc/cxxabi.h (__pbase_type_info): Define, based on\n\t__pointer_type_info.\n\t(__pointer_type_info): Derive from __pbase_type_info. Adjust.\n\t(__pointer_to_member_type_info): Likewise.\n\t* tinfo2.cc (__pbase_type_info::~__pbase_type_info): Implement.\n\t(__pointer_to_member_type_info::__is_pointer_p): Remove.\n\t(__pointer_type_info::__do_catch): Rename to ...\n\t(__pbase_type_info::__do_catch): ... here. Adjust.\n\t(__pbase_type_info::__pointer_catch): Implement.\n\t(__pointer_type_info::__pointer_catch): Adjust.\n\t(__pointer_to_member_type_info::__pointer_catch): Adjust.\n\nFrom-SVN: r34165", "tree": {"sha": "0e99f39c3560e4cd745afef7470f47703e673157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e99f39c3560e4cd745afef7470f47703e673157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e65d7eac576c15943aac86658f5e3524056385d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65d7eac576c15943aac86658f5e3524056385d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e65d7eac576c15943aac86658f5e3524056385d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e65d7eac576c15943aac86658f5e3524056385d1/comments", "author": null, "committer": null, "parents": [{"sha": "bebc2c610a138303843eb6de56ce9e842885686a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bebc2c610a138303843eb6de56ce9e842885686a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bebc2c610a138303843eb6de56ce9e842885686a"}], "stats": {"total": 171, "additions": 105, "deletions": 66}, "files": [{"sha": "db9cb15afe7ad935ee75a4685934eb5530cdff87", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e65d7eac576c15943aac86658f5e3524056385d1", "patch": "@@ -1,3 +1,17 @@\n+2000-05-25  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* inc/cxxabi.h (__pbase_type_info): Define, based on\n+\t__pointer_type_info.\n+\t(__pointer_type_info): Derive from __pbase_type_info. Adjust.\n+\t(__pointer_to_member_type_info): Likewise.\n+\t* tinfo2.cc (__pbase_type_info::~__pbase_type_info): Implement.\n+\t(__pointer_to_member_type_info::__is_pointer_p): Remove.\n+\t(__pointer_type_info::__do_catch): Rename to ...\n+\t(__pbase_type_info::__do_catch): ... here. Adjust.\n+\t(__pbase_type_info::__pointer_catch): Implement.\n+\t(__pointer_type_info::__pointer_catch): Adjust.\n+\t(__pointer_to_member_type_info::__pointer_catch): Adjust.\n+\n 2000-05-25  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* tinfo.h (__user_type_info::contained_virtual_p): New"}, {"sha": "ad918c4be7f973ac73a712a7d29c462347085e95", "filename": "gcc/cp/inc/cxxabi.h", "status": "modified", "additions": 68, "deletions": 48, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2Finc%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2Finc%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finc%2Fcxxabi.h?ref=e65d7eac576c15943aac86658f5e3524056385d1", "patch": "@@ -73,48 +73,6 @@ class __fundamental_type_info\n     { }\n };\n \n-/* type information for pointer to data or function, but not pointer to member */\n-class __pointer_type_info\n-  : public std::type_info\n-{\n-/* abi defined member variables */\n-public:\n-  int quals;                    /* qualification of the target object */\n-  const std::type_info *type;   /* type of pointed to object */\n-\n-/* abi defined member functions */\n-public:\n-  virtual ~__pointer_type_info ();\n-public:\n-  explicit __pointer_type_info (const char *__n,\n-                                int __quals,\n-                                const std::type_info *__type)\n-    : std::type_info (__n), quals (__quals), type (__type)\n-    { }\n-\n-/* implementation defined types */\n-public:\n-  enum quals_masks {\n-    const_mask = 0x1,\n-    volatile_mask = 0x2,\n-    restrict_mask = 0x4,\n-    incomplete_mask = 0x8,\n-    incomplete_class_mask = 0x10\n-  };\n-\n-/* implementation defined member functions */\n-protected:\n-  virtual bool __is_pointer_p () const;\n-protected:\n-  virtual bool __do_catch (const std::type_info *__thr_type,\n-                           void **__thr_obj,\n-                           unsigned __outer) const;\n-protected:\n-  virtual bool __pointer_catch (const __pointer_type_info *__thr_type,\n-                                void **__thr_obj,\n-                                unsigned __outer) const;\n-};\n-\n /* type information for array objects */\n class __array_type_info\n   : public std::type_info\n@@ -158,9 +116,73 @@ class __enum_type_info\n     { }\n };\n \n-/* type information for a pointer to member variable (not function) */\n+/* common type information for simple pointers and pointers to member */\n+class __pbase_type_info\n+  : public std::type_info\n+{\n+/* abi defined member variables */\n+public:\n+  int quals;                    /* qualification of the target object */\n+  const std::type_info *type;   /* type of pointed to object */\n+\n+/* abi defined member functions */\n+public:\n+  virtual ~__pbase_type_info ();\n+public:\n+  explicit __pbase_type_info (const char *__n,\n+                                int __quals,\n+                                const std::type_info *__type)\n+    : std::type_info (__n), quals (__quals), type (__type)\n+    { }\n+\n+/* implementation defined types */\n+public:\n+  enum quals_masks {\n+    const_mask = 0x1,\n+    volatile_mask = 0x2,\n+    restrict_mask = 0x4,\n+    incomplete_mask = 0x8,\n+    incomplete_class_mask = 0x10\n+  };\n+\n+/* implementation defined member functions */\n+protected:\n+  virtual bool __do_catch (const std::type_info *__thr_type,\n+                           void **__thr_obj,\n+                           unsigned __outer) const;\n+protected:\n+  inline virtual bool __pointer_catch (const __pbase_type_info *__thr_type,\n+                                       void **__thr_obj,\n+                                       unsigned __outer) const;\n+};\n+\n+/* type information for simple pointers */\n+class __pointer_type_info\n+  : public __pbase_type_info\n+{\n+/* abi defined member functions */\n+public:\n+  virtual ~__pointer_type_info ();\n+public:\n+  explicit __pointer_type_info (const char *__n,\n+                                int __quals,\n+                                const std::type_info *__type)\n+    : __pbase_type_info (__n, __quals, __type)\n+    { }\n+\n+/* implementation defined member functions */\n+protected:\n+  virtual bool __is_pointer_p () const;\n+\n+protected:\n+  virtual bool __pointer_catch (const __pbase_type_info *__thr_type,\n+                                void **__thr_obj,\n+                                unsigned __outer) const;\n+};\n+\n+/* type information for a pointer to member variable */\n class __pointer_to_member_type_info\n-  : public __pointer_type_info\n+  : public __pbase_type_info\n {\n /* abi defined member variables */\n public:\n@@ -174,14 +196,12 @@ class __pointer_to_member_type_info\n                                           int __quals,\n                                           const std::type_info *__type,\n                                           const __class_type_info *__klass)\n-    : __pointer_type_info (__n, __quals, __type), klass (__klass)\n+    : __pbase_type_info (__n, __quals, __type), klass (__klass)\n     { }\n \n /* implementation defined member functions */\n protected:\n-  virtual bool __is_pointer_p () const;\n-protected:\n-  virtual bool __pointer_catch (const __pointer_type_info *__thr_type,\n+  virtual bool __pointer_catch (const __pbase_type_info *__thr_type,\n                                 void **__thr_obj,\n                                 unsigned __outer) const;\n };"}, {"sha": "442967b2ea44e509cfc82922c3839f0f1e1c7152", "filename": "gcc/cp/tinfo2.cc", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e65d7eac576c15943aac86658f5e3524056385d1/gcc%2Fcp%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftinfo2.cc?ref=e65d7eac576c15943aac86658f5e3524056385d1", "patch": "@@ -108,10 +108,6 @@ __fundamental_type_info::\n ~__fundamental_type_info ()\n {}\n \n-__pointer_type_info::\n-~__pointer_type_info ()\n-{}\n-\n __array_type_info::\n ~__array_type_info ()\n {}\n@@ -124,6 +120,14 @@ __enum_type_info::\n ~__enum_type_info ()\n {}\n \n+__pbase_type_info::\n+~__pbase_type_info ()\n+{}\n+\n+__pointer_type_info::\n+~__pointer_type_info ()\n+{}\n+\n __pointer_to_member_type_info::\n ~__pointer_to_member_type_info ()\n {}\n@@ -140,14 +144,7 @@ __is_function_p () const\n   return true;\n }\n \n-bool __pointer_to_member_type_info::\n-__is_pointer_p () const\n-{\n-  return false;\n-}\n-\n-\n-bool __pointer_type_info::\n+bool __pbase_type_info::\n __do_catch (const type_info *thr_type,\n             void **thr_obj,\n             unsigned outer) const\n@@ -163,8 +160,8 @@ __do_catch (const type_info *thr_type,\n     // But for that to be valid, our outer pointers must be const qualified.\n     return false;\n   \n-  const __pointer_type_info *thrown_type =\n-    static_cast <const __pointer_type_info *> (thr_type);\n+  const __pbase_type_info *thrown_type =\n+    static_cast <const __pbase_type_info *> (thr_type);\n   \n   if (thrown_type->quals & ~quals)\n     // We're less qualified.\n@@ -176,8 +173,16 @@ __do_catch (const type_info *thr_type,\n   return __pointer_catch (thrown_type, thr_obj, outer);\n }\n \n+inline bool __pbase_type_info::\n+__pointer_catch (const __pbase_type_info *thrown_type,\n+                 void **thr_obj,\n+                 unsigned outer) const\n+{\n+  return type->__do_catch (thrown_type->type, thr_obj, outer + 2);\n+}\n+\n bool __pointer_type_info::\n-__pointer_catch (const __pointer_type_info *thrown_type,\n+__pointer_catch (const __pbase_type_info *thrown_type,\n                  void **thr_obj,\n                  unsigned outer) const\n {\n@@ -187,11 +192,11 @@ __pointer_catch (const __pointer_type_info *thrown_type,\n       return !thrown_type->type->__is_function_p ();\n     }\n   \n-  return type->__do_catch (thrown_type->type, thr_obj, outer + 2);\n+  return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);\n }\n \n bool __pointer_to_member_type_info::\n-__pointer_catch (const __pointer_type_info *thr_type,\n+__pointer_catch (const __pbase_type_info *thr_type,\n                  void **thr_obj,\n                  unsigned outer) const\n {\n@@ -203,7 +208,7 @@ __pointer_catch (const __pointer_type_info *thr_type,\n   if (*klass != *thrown_type->klass)\n     return false;     // not pointers to member of same class\n   \n-  return type->__do_catch (thrown_type->type, thr_obj, outer + 2);\n+  return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);\n }\n \n } // namespace std"}]}