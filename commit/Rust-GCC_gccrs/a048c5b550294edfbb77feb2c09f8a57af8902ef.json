{"sha": "a048c5b550294edfbb77feb2c09f8a57af8902ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTA0OGM1YjU1MDI5NGVkZmJiNzdmZWIyYzA5ZjhhNTdhZjg5MDJlZg==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2000-12-03T08:28:35Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2000-12-03T08:28:35Z"}, "message": "Makefile.in: Rebuilt.\n\n\t* Makefile.in: Rebuilt.\n\t* Makefile.am (awt_java_source_files): Added new file.\n\t* java/awt/FlowLayout.java: New file.\n\nFrom-SVN: r37968", "tree": {"sha": "686e99c7856a291f481ff7bb79c1cf52af1b8aa9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/686e99c7856a291f481ff7bb79c1cf52af1b8aa9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a048c5b550294edfbb77feb2c09f8a57af8902ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a048c5b550294edfbb77feb2c09f8a57af8902ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a048c5b550294edfbb77feb2c09f8a57af8902ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a048c5b550294edfbb77feb2c09f8a57af8902ef/comments", "author": null, "committer": null, "parents": [{"sha": "8538fd010ebd83c170a2d629a49eca3c37a3dafd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8538fd010ebd83c170a2d629a49eca3c37a3dafd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8538fd010ebd83c170a2d629a49eca3c37a3dafd"}], "stats": {"total": 280, "additions": 266, "deletions": 14}, "files": [{"sha": "e13b8ad219d42209207d5fe9cd0658b40ba6bf0d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a048c5b550294edfbb77feb2c09f8a57af8902ef", "patch": "@@ -1,5 +1,9 @@\n 2000-12-03  Tom Tromey  <tromey@redhat.com>\n \n+\t* Makefile.in: Rebuilt.\n+\t* Makefile.am (awt_java_source_files): Added new file.\n+\t* java/awt/FlowLayout.java: New file.\n+\n \t* Makefile.in: Rebuilt.\n \t* Makefile.am (awt_java_source_files): Added new file.\n \t* java/awt/GridLayout.java: New file."}, {"sha": "6c2681f8b996f061c17a02bdcfde4c3b1b1c8b41", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a048c5b550294edfbb77feb2c09f8a57af8902ef", "patch": "@@ -585,6 +585,7 @@ java/awt/Event.java \\\n java/awt/EventDispatchThread.java \\\n java/awt/EventQueue.java \\\n java/awt/FileDialog.java \\\n+java/awt/FlowLayout.java \\\n java/awt/Font.java \\\n java/awt/FontMetrics.java \\\n java/awt/Frame.java \\"}, {"sha": "46d894276fb9c69dae35bd0c6247cf912c5db8b2", "filename": "libjava/Makefile.in", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a048c5b550294edfbb77feb2c09f8a57af8902ef", "patch": "@@ -356,6 +356,7 @@ java/awt/Event.java \\\n java/awt/EventDispatchThread.java \\\n java/awt/EventQueue.java \\\n java/awt/FileDialog.java \\\n+java/awt/FlowLayout.java \\\n java/awt/Font.java \\\n java/awt/FontMetrics.java \\\n java/awt/Frame.java \\\n@@ -713,7 +714,6 @@ java/util/EventListener.java \\\n java/util/EventObject.java \\\n java/util/GregorianCalendar.java \\\n java/util/HashMap.java \\\n-java/util/HashSet.java \\\n java/util/Hashtable.java \\\n java/util/Iterator.java\t\\\n java/util/LinkedList.java \\\n@@ -741,8 +741,6 @@ java/util/TimeZone.java\t\\\n java/util/Timer.java \\\n java/util/TimerTask.java \\\n java/util/TooManyListenersException.java \\\n-java/util/TreeMap.java \\\n-java/util/TreeSet.java \\\n java/util/Vector.java\n \n \n@@ -1327,10 +1325,10 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/awt/Dialog.P .deps/java/awt/Dimension.P \\\n .deps/java/awt/Event.P .deps/java/awt/EventDispatchThread.P \\\n .deps/java/awt/EventQueue.P .deps/java/awt/FileDialog.P \\\n-.deps/java/awt/Font.P .deps/java/awt/FontMetrics.P \\\n-.deps/java/awt/Frame.P .deps/java/awt/Graphics.P \\\n-.deps/java/awt/Graphics2D.P .deps/java/awt/GraphicsConfiguration.P \\\n-.deps/java/awt/GridLayout.P \\\n+.deps/java/awt/FlowLayout.P .deps/java/awt/Font.P \\\n+.deps/java/awt/FontMetrics.P .deps/java/awt/Frame.P \\\n+.deps/java/awt/Graphics.P .deps/java/awt/Graphics2D.P \\\n+.deps/java/awt/GraphicsConfiguration.P .deps/java/awt/GridLayout.P \\\n .deps/java/awt/IllegalComponentStateException.P .deps/java/awt/Image.P \\\n .deps/java/awt/Insets.P .deps/java/awt/ItemSelectable.P \\\n .deps/java/awt/Label.P .deps/java/awt/LayoutManager.P \\\n@@ -1687,11 +1685,11 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/EmptyStackException.P .deps/java/util/Enumeration.P \\\n .deps/java/util/EventListener.P .deps/java/util/EventObject.P \\\n .deps/java/util/GregorianCalendar.P .deps/java/util/HashMap.P \\\n-.deps/java/util/HashSet.P .deps/java/util/Hashtable.P \\\n-.deps/java/util/Iterator.P .deps/java/util/LinkedList.P \\\n-.deps/java/util/List.P .deps/java/util/ListIterator.P \\\n-.deps/java/util/ListResourceBundle.P .deps/java/util/Locale.P \\\n-.deps/java/util/Map.P .deps/java/util/MissingResourceException.P \\\n+.deps/java/util/Hashtable.P .deps/java/util/Iterator.P \\\n+.deps/java/util/LinkedList.P .deps/java/util/List.P \\\n+.deps/java/util/ListIterator.P .deps/java/util/ListResourceBundle.P \\\n+.deps/java/util/Locale.P .deps/java/util/Map.P \\\n+.deps/java/util/MissingResourceException.P \\\n .deps/java/util/NoSuchElementException.P .deps/java/util/Observable.P \\\n .deps/java/util/Observer.P .deps/java/util/Properties.P \\\n .deps/java/util/PropertyPermission.P \\\n@@ -1701,8 +1699,7 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/java/util/SortedSet.P .deps/java/util/Stack.P \\\n .deps/java/util/StringTokenizer.P .deps/java/util/TimeZone.P \\\n .deps/java/util/Timer.P .deps/java/util/TimerTask.P \\\n-.deps/java/util/TooManyListenersException.P .deps/java/util/TreeMap.P \\\n-.deps/java/util/TreeSet.P .deps/java/util/Vector.P \\\n+.deps/java/util/TooManyListenersException.P .deps/java/util/Vector.P \\\n .deps/java/util/jar/Attributes.P .deps/java/util/jar/JarEntry.P \\\n .deps/java/util/jar/JarException.P .deps/java/util/jar/JarFile.P \\\n .deps/java/util/jar/JarInputStream.P \\"}, {"sha": "c74d80229b754705bbe5cb7ff23c1b32d1469270", "filename": "libjava/java/awt/FlowLayout.java", "status": "added", "additions": 250, "deletions": 0, "changes": 250, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2Fjava%2Fawt%2FFlowLayout.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a048c5b550294edfbb77feb2c09f8a57af8902ef/libjava%2Fjava%2Fawt%2FFlowLayout.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FFlowLayout.java?ref=a048c5b550294edfbb77feb2c09f8a57af8902ef", "patch": "@@ -0,0 +1,250 @@\n+// GridLayout.java - Grid-based layout engine\n+\n+/* Copyright (C) 2000  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package java.awt;\n+\n+import java.io.Serializable;\n+\n+/** This class implements a flow-based layout.  Components are laid\n+ * out in order from left to right.  When a component cannot be placed\n+ * without horizontal clipping, a new row is started.  This class\n+ * supports horizontal and vertical gaps.  These are used for spacing\n+ * between components.\n+ */\n+public class FlowLayout implements LayoutManager, Serializable\n+{\n+  /** Constant that specifies left alignment.  */\n+  public static final int LEFT = 0;\n+  /** Constant that specifies center alignment.  */\n+  public static final int CENTER = 1;\n+  /** Constant that specifies right alignment.  */\n+  public static final int RIGHT = 2;\n+\n+  /** Add a new component to the layout.  This particular implementation\n+   * does nothing.\n+   */\n+  public void addLayoutComponent (String name, Component comp)\n+  {\n+    // Nothing.\n+  }\n+\n+  /** Return the alignment.  */\n+  public int getAlignment ()\n+  {\n+    return align;\n+  }\n+\n+  /** Return the horizontal gap.  */\n+  public int getHgap ()\n+  {\n+    return hgap;\n+  }\n+\n+  /** Return the vertical gap.  */\n+  public int getVgap ()\n+  {\n+    return vgap;\n+  }\n+\n+  /** Create a new FlowLayout with center alignment.\n+   * Both gaps are set to 0.\n+   */\n+  public FlowLayout ()\n+  {\n+    this (CENTER, 0, 0);\n+  }\n+\n+  /** Create a new FlowLayout with the alignment.\n+   * columns.  Both gaps are set to 0.\n+   * @param align Alignment\n+   */\n+  public FlowLayout (int align)\n+  {\n+    this (align, 0, 0);\n+  }\n+\n+  /** Create a new FlowLayout with the specified alignment and gaps.\n+   * @param align Alignment\n+   * @param hgap The horizontal gap\n+   * @param vgap The vertical gap\n+   * @exception IllegalArgumentException If either gap is negative\n+   */\n+  public FlowLayout (int align, int hgap, int vgap)\n+  {\n+    if (hgap < 0)\n+      throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n+    if (vgap < 0)\n+      throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n+    if (align != LEFT && align != RIGHT && align != CENTER)\n+      throw new IllegalArgumentException (\"invalid align: \" + align);\n+    this.align = align;\n+    this.hgap = hgap;\n+    this.vgap = vgap;\n+  }\n+\n+  /** Lay out the container's components based on current settings.\n+   * @param parent The parent container\n+   */\n+  public void layoutContainer (Container parent)\n+  {\n+    int num = parent.getComponentCount ();\n+    // This is more efficient than calling getComponents().\n+    Component[] comps = parent.component;\n+\n+    Dimension d = parent.getSize ();\n+    Insets ins = parent.getInsets ();\n+\n+    int y = ins.top + vgap;\n+    int i = 0;\n+    while (i < num)\n+      {\n+\t// Find the components which go in the current row.\n+\tint new_w = ins.left + hgap + ins.right;\n+\tint new_h = 0;\n+\tint j;\n+\tfor (j = i; j < num; ++j)\n+\t  {\n+\t    // FIXME: this is very inefficient.\n+\t    Dimension c = comps[i].getPreferredSize ();\n+\t    int next_w = new_w + hgap + c.width;\n+\t    if (next_w > d.width)\n+\t      {\n+\t\t// We must start a new row.\n+\t\tbreak;\n+\t      }\n+\t    new_w = next_w;\n+\t    new_h = Math.max (new_h, c.height);\n+\t  }\n+\t// We always need at least one item.\n+\tif (j == i)\n+\t  ++j;\n+\n+\t// Set the location of each component for this row.\n+\tint x;\n+\tif (align == LEFT)\n+\t  x = ins.left + hgap;\n+\telse if (align == CENTER)\n+\t  x = (d.width - new_w) / 2;\n+\telse\n+\t  x = d.width - new_w;\n+\tfor (int k = i; i < j; ++k)\n+\t  {\n+\t    // FIXME: this is very inefficient.\n+\t    Dimension c = comps[i].getPreferredSize ();\n+\t    comps[i].setLocation (x, y);\n+\t    x += c.width + vgap;\n+\t  }\n+\n+\t// Advance to next row.\n+\ti = j;\n+\ty += new_h + vgap;\n+      }\n+  }\n+\n+  /** Get the minimum layout size of the container.\n+   * @param cont The parent container\n+   */\n+  public Dimension minimumLayoutSize (Container cont)\n+  {\n+    return getSize (cont, true);\n+  }\n+\n+  /** Get the preferred layout size of the container.\n+   * @param cont The parent container\n+   */\n+  public Dimension preferredLayoutSize (Container cont)\n+  {\n+    return getSize (cont, false);\n+  }\n+\n+  /** Remove the indicated component from this layout manager.\n+   * This particular implementation does nothing.\n+   * @param comp The component to remove\n+   */\n+  public void removeLayoutComponent (Component comp)\n+  {\n+    // Nothing.\n+  }\n+\n+  /** Set the alignment.\n+   * @param align The alignment\n+   */\n+  public void setAlignment (int align)\n+  {\n+    if (align != LEFT && align != RIGHT && align != CENTER)\n+      throw new IllegalArgumentException (\"invalid align: \" + align);\n+    this.align = align;\n+  }\n+\n+  /** Set the horizontal gap\n+   * @param hgap The horizontal gap\n+   */\n+  public void setHgap (int hgap)\n+  {\n+    if (hgap < 0)\n+      throw new IllegalArgumentException (\"horizontal gap must be nonnegative\");\n+    this.hgap = hgap;\n+  }\n+\n+  /** Set the vertical gap.\n+   * @param vgap The vertical gap\n+   */\n+  public void setVgap (int vgap)\n+  {\n+    if (vgap < 0)\n+      throw new IllegalArgumentException (\"vertical gap must be nonnegative\");\n+    this.vgap = vgap;\n+  }\n+\n+  /** Return String description of this object.  */\n+  public String toString ()\n+  {\n+    return (\"[\" + getClass ().getName () + \",hgap=\" + hgap + \",vgap=\" + vgap\n+\t    + \",align=\" + align + \"]\");\n+  }\n+\n+  // This method is used to compute the various sizes.\n+  private Dimension getSize (Container parent, boolean is_min)\n+  {\n+    int w, h, num = parent.getComponentCount ();\n+    // This is more efficient than calling getComponents().\n+    Component[] comps = parent.component;\n+\n+    w = 0;\n+    h = 0;\n+    for (int i = 0; i < num; ++i)\n+      {\n+\t// FIXME: can we just directly read the fields in Component?\n+\t// Or will that not work with subclassing?\n+\tDimension d;\n+\n+\tif (is_min)\n+\t  d = comps[i].getMinimumSize ();\n+\telse\n+\t  d = comps[i].getPreferredSize ();\n+\n+\tw += d.width;\n+\th = Math.max (d.height, h);\n+      }\n+\n+    Insets ins = parent.getInsets ();\n+\n+    w += (num + 1) * hgap + ins.left + ins.right;\n+    h += 2 * vgap + ins.top + ins.bottom;\n+\n+    return new Dimension (w, h);\n+  }\n+\n+  // Alignment.\n+  private int align;\n+  // The gaps.\n+  private int hgap;\n+  private int vgap;\n+}"}]}