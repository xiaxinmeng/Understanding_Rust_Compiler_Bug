{"sha": "f1bcb061d172ca7e3bdcc46476b20776382a2974", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjFiY2IwNjFkMTcyY2E3ZTNiZGNjNDY0NzZiMjA3NzYzODJhMjk3NA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-05-17T13:42:21Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-05-17T13:42:21Z"}, "message": "tree-ssa-dse.c (dse_classify_store): Fix iterator increment for pruning loop and prune defs feeding only already...\n\n2018-05-17  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-dse.c (dse_classify_store): Fix iterator increment\n\tfor pruning loop and prune defs feeding only already visited PHIs.\n\nFrom-SVN: r260322", "tree": {"sha": "2c194e4957f273738f38510a0f14822f61e6800a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c194e4957f273738f38510a0f14822f61e6800a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f1bcb061d172ca7e3bdcc46476b20776382a2974", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bcb061d172ca7e3bdcc46476b20776382a2974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1bcb061d172ca7e3bdcc46476b20776382a2974", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1bcb061d172ca7e3bdcc46476b20776382a2974/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3f90a68f0fda2f571ba2a3463096b82dbea51217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f90a68f0fda2f571ba2a3463096b82dbea51217", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f90a68f0fda2f571ba2a3463096b82dbea51217"}], "stats": {"total": 18, "additions": 15, "deletions": 3}, "files": [{"sha": "3c59e0909723d1fb4e1619a21125039b42af934a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bcb061d172ca7e3bdcc46476b20776382a2974/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bcb061d172ca7e3bdcc46476b20776382a2974/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f1bcb061d172ca7e3bdcc46476b20776382a2974", "patch": "@@ -1,3 +1,8 @@\n+2018-05-17  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-dse.c (dse_classify_store): Fix iterator increment\n+\tfor pruning loop and prune defs feeding only already visited PHIs.\n+\n 2018-05-17  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.c (vn_reference_lookup_3): Improve memset handling."}, {"sha": "1af50a0267422990a4b752200fa67753bb20e249", "filename": "gcc/tree-ssa-dse.c", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f1bcb061d172ca7e3bdcc46476b20776382a2974/gcc%2Ftree-ssa-dse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f1bcb061d172ca7e3bdcc46476b20776382a2974/gcc%2Ftree-ssa-dse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.c?ref=f1bcb061d172ca7e3bdcc46476b20776382a2974", "patch": "@@ -662,7 +662,7 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t}\n \n       /* Process defs and remove those we need not process further.  */\n-      for (unsigned i = 0; i < defs.length (); ++i)\n+      for (unsigned i = 0; i < defs.length ();)\n \t{\n \t  gimple *def = defs[i];\n \t  gimple *use_stmt;\n@@ -680,11 +680,18 @@ dse_classify_store (ao_ref *ref, gimple *stmt,\n \t  /* In addition to kills we can remove defs whose only use\n \t     is another def in defs.  That can only ever be PHIs of which\n \t     we track a single for simplicity reasons (we fail for multiple\n-\t     PHIs anyways).  */\n+\t     PHIs anyways).  We can also ignore defs that feed only into\n+\t     already visited PHIs.  */\n \t  else if (gimple_code (def) != GIMPLE_PHI\n \t\t   && single_imm_use (gimple_vdef (def), &use_p, &use_stmt)\n-\t\t   && use_stmt == phi_def)\n+\t\t   && (use_stmt == phi_def\n+\t\t       || (gimple_code (use_stmt) == GIMPLE_PHI\n+\t\t\t   && bitmap_bit_p (visited,\n+\t\t\t\t\t    SSA_NAME_VERSION\n+\t\t\t\t\t      (PHI_RESULT (use_stmt))))))\n \t    defs.unordered_remove (i);\n+\t  else\n+\t    ++i;\n \t}\n \n       /* If all defs kill the ref we are done.  */"}]}