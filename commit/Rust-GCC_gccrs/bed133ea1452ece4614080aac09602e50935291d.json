{"sha": "bed133ea1452ece4614080aac09602e50935291d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkMTMzZWExNDUyZWNlNDYxNDA4MGFhYzA5NjAyZTUwOTM1MjkxZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2005-05-03T20:18:32Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-05-03T20:18:32Z"}, "message": "tree-flow.h (tree_ann_common_d): Move aux to ...\n\n\t* tree-flow.h (tree_ann_common_d): Move aux to ...\n\t(stmt_ann_d): ... here.\n\t* tree-ssa-loop-im.c (LIM_DATA, determine_invariantness_stmt,\n\tmove_computations_stmt, schedule_sm): Update references to\n\taux.\n\t* tree-vectorizer.h (set_stmt_info, vinfo_for_stmt): Likewise.\n\nFrom-SVN: r99179", "tree": {"sha": "653fec089dc4987002e502a125655d1834fc9cec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/653fec089dc4987002e502a125655d1834fc9cec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed133ea1452ece4614080aac09602e50935291d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed133ea1452ece4614080aac09602e50935291d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed133ea1452ece4614080aac09602e50935291d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed133ea1452ece4614080aac09602e50935291d/comments", "author": null, "committer": null, "parents": [{"sha": "9d4440a547cafd1fb3fab572ed14122a79009c00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d4440a547cafd1fb3fab572ed14122a79009c00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d4440a547cafd1fb3fab572ed14122a79009c00"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "5467696df173e1fde8ac1329b8a1c33af07f3951", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed133ea1452ece4614080aac09602e50935291d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed133ea1452ece4614080aac09602e50935291d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bed133ea1452ece4614080aac09602e50935291d", "patch": "@@ -1,3 +1,12 @@\n+2005-05-03  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* tree-flow.h (tree_ann_common_d): Move aux to ...\n+\t(stmt_ann_d): ... here.\n+\t* tree-ssa-loop-im.c (LIM_DATA, determine_invariantness_stmt,\n+\tmove_computations_stmt, schedule_sm): Update references to\n+\taux.\n+\t* tree-vectorizer.h (set_stmt_info, vinfo_for_stmt): Likewise.\n+\n 2005-05-03  Richard Henderson  <rth@redhat.com>\n \n \t* config/rs6000/rs6000.c: Remove conflict markers."}, {"sha": "d71238cd388c9647fc4a5f74b7f4067ddf7d58e9", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=bed133ea1452ece4614080aac09602e50935291d", "patch": "@@ -121,10 +121,6 @@ struct tree_ann_common_d GTY(())\n   /* Annotation type.  */\n   enum tree_ann_type type;\n \n- /* Auxiliary info specific to a pass.  At all times, this\n-    should either point to valid data or be NULL.  */\n-  PTR GTY ((skip (\"\"))) aux;\n-\n   /* The value handle for this expression.  Used by GVN-PRE.  */\n   tree GTY((skip)) value_handle;\n };\n@@ -325,6 +321,10 @@ struct stmt_ann_d GTY(())\n      pass which needs statement UIDs.  */\n   unsigned int uid;\n \n+ /* Auxiliary info specific to a pass.  At all times, this\n+    should either point to valid data or be NULL.  */\n+  PTR GTY ((skip (\"\"))) aux;\n+\n   /* Linked list of histograms for value-based profiling.  This is really a\n      struct histogram_value*.  We use void* to avoid having to export that\n      everywhere, and to avoid having to put it in GC memory.  */"}, {"sha": "88a621af4efd6dfd233f2d4b98b4bae979ce33a8", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=bed133ea1452ece4614080aac09602e50935291d", "patch": "@@ -101,7 +101,7 @@ struct lim_aux_data\n \n #define LIM_DATA(STMT) (TREE_CODE (STMT) == PHI_NODE \\\n \t\t\t? NULL \\\n-\t\t\t: (struct lim_aux_data *) (stmt_ann (STMT)->common.aux))\n+\t\t\t: (struct lim_aux_data *) (stmt_ann (STMT)->aux))\n \n /* Description of a memory reference for store motion.  */\n \n@@ -625,7 +625,7 @@ determine_invariantness_stmt (struct dom_walk_data *dw_data ATTRIBUTE_UNUSED,\n \t  stmt = stmt1;\n \t}\n \n-      stmt_ann (stmt)->common.aux = xcalloc (1, sizeof (struct lim_aux_data));\n+      stmt_ann (stmt)->aux = xcalloc (1, sizeof (struct lim_aux_data));\n       LIM_DATA (stmt)->always_executed_in = outermost;\n \n       if (maybe_never && pos == MOVE_PRESERVE_EXECUTION)\n@@ -716,7 +716,7 @@ move_computations_stmt (struct dom_walk_data *dw_data ATTRIBUTE_UNUSED,\n       cost = LIM_DATA (stmt)->cost;\n       level = LIM_DATA (stmt)->tgt_loop;\n       free_lim_aux_data (LIM_DATA (stmt));\n-      stmt_ann (stmt)->common.aux = NULL;\n+      stmt_ann (stmt)->aux = NULL;\n \n       if (!level)\n \t{\n@@ -1171,7 +1171,7 @@ schedule_sm (struct loop *loop, edge *exits, unsigned n_exits, tree ref,\n \n   /* Emit the load & stores.  */\n   load = build (MODIFY_EXPR, void_type_node, tmp_var, ref);\n-  get_stmt_ann (load)->common.aux = xcalloc (1, sizeof (struct lim_aux_data));\n+  get_stmt_ann (load)->aux = xcalloc (1, sizeof (struct lim_aux_data));\n   LIM_DATA (load)->max_loop = loop;\n   LIM_DATA (load)->tgt_loop = loop;\n "}, {"sha": "30a7830b675a8dc0278ae55a12a3be7581cbc17a", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed133ea1452ece4614080aac09602e50935291d/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=bed133ea1452ece4614080aac09602e50935291d", "patch": "@@ -241,14 +241,14 @@ static inline void\n set_stmt_info (stmt_ann_t ann, stmt_vec_info stmt_info)\n {\n   if (ann)\n-    ann->common.aux = (char *) stmt_info;\n+    ann->aux = (char *) stmt_info;\n }\n \n static inline stmt_vec_info\n vinfo_for_stmt (tree stmt)\n {\n   stmt_ann_t ann = stmt_ann (stmt);\n-  return ann ? (stmt_vec_info) ann->common.aux : NULL;\n+  return ann ? (stmt_vec_info) ann->aux : NULL;\n }\n \n /*-----------------------------------------------------------------*/"}]}