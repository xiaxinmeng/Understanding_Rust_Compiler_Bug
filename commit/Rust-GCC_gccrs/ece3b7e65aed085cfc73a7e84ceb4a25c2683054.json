{"sha": "ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWNlM2I3ZTY1YWVkMDg1Y2ZjNzNhN2U4NGNlYjRhMjVjMjY4MzA1NA==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2017-03-21T06:36:22Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2017-03-21T06:36:22Z"}, "message": "re PR c++/35878 ([LWG 2302] Useless NULL pointer check when constructing object)\n\ngcc/\n\nPR c++/35878\n* cp/init.c (std_placement_new_fn_p): New.\n(build_new_1): Call it.\n\ntestsuite/\n\nPR c++/35878\n* g++.dg/init/pr35878_1.C: New.\n* g++.dg/init/pr35878_2.C: Likewise.\n* g++.dg/init/pr35878_3.C: Likewise.\n\nFrom-SVN: r246301", "tree": {"sha": "d79677552e18d212e5b23a180aad1873e8e7c956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d79677552e18d212e5b23a180aad1873e8e7c956"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9e0383cc7d0c9eaf2d2d4ec8443e09fbc45298", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b9e0383cc7d0c9eaf2d2d4ec8443e09fbc45298", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b9e0383cc7d0c9eaf2d2d4ec8443e09fbc45298"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "8264502e0500d1fbf20e408c432dd19256a625bb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "patch": "@@ -1,3 +1,9 @@\n+2017-03-21  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR c++/35878\n+\t* cp/init.c (std_placement_new_fn_p): New.\n+\t(build_new_1): Call it.\n+\n 2017-03-20  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/80096 - ICE with C++17 non-type auto."}, {"sha": "4ec26afa23547d2be64cc416f300f13f96f53fea", "filename": "gcc/cp/init.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "patch": "@@ -2707,6 +2707,21 @@ malloc_alignment ()\n   return MAX (max_align_t_align(), MALLOC_ABI_ALIGNMENT);\n }\n \n+/* Determine whether an allocation function is a namespace-scope\n+   non-replaceable placement new function. See DR 1748.\n+   TODO: Enable in all standard modes.  */\n+static bool std_placement_new_fn_p (tree alloc_fn)\n+{\n+  if ((cxx_dialect > cxx14) && DECL_NAMESPACE_SCOPE_P (alloc_fn))\n+    {\n+      tree first_arg = TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (alloc_fn)));\n+      if ((TREE_VALUE (first_arg) == ptr_type_node)\n+\t  && TREE_CHAIN (first_arg) == void_list_node)\n+\treturn true;\n+    }\n+  return false;\n+}\n+\n /* Generate code for a new-expression, including calling the \"operator\n    new\" function, initializing the object, and, if an exception occurs\n    during construction, cleaning up.  The arguments are as for\n@@ -3185,7 +3200,8 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n      So check for a null exception spec on the op new we just called.  */\n \n   nothrow = TYPE_NOTHROW_P (TREE_TYPE (alloc_fn));\n-  check_new = (flag_check_new || nothrow);\n+  check_new = flag_check_new\n+    || (nothrow && !std_placement_new_fn_p (alloc_fn));\n \n   if (cookie_size)\n     {"}, {"sha": "b45c0097a933d6827b9cf9c331aa787e1cdce7b3", "filename": "gcc/testsuite/g++.dg/init/pr35878_1.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_1.C?ref=ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-O2 --std=gnu++11\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+#include <new>\n+#include <utility>\n+\n+struct s1{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+void f1 (s1 * v, s1&& s)\n+{\n+\tnew (v) s1(std::move(s));\n+}\n+\n+void f2 (s1 * v, s1&& s)\n+{\n+\t*v = std::move(s);\n+}"}, {"sha": "066449419b9e3eaddf44bde7ed1b59c28aa55e1c", "filename": "gcc/testsuite/g++.dg/init/pr35878_2.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_2.C?ref=ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-O2 --std=gnu++17 -fcheck-new\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+#include <new>\n+#include <utility>\n+\n+struct s1{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+void f1 (s1 * v, s1&& s)\n+{\n+\tnew (v) s1(std::move(s));\n+}\n+\n+void f2 (s1 * v, s1&& s)\n+{\n+\t*v = std::move(s);\n+}"}, {"sha": "8a5614f12ffc0afb31ca744351503382b2c3001e", "filename": "gcc/testsuite/g++.dg/init/pr35878_3.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ece3b7e65aed085cfc73a7e84ceb4a25c2683054/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fpr35878_3.C?ref=ece3b7e65aed085cfc73a7e84ceb4a25c2683054", "patch": "@@ -0,0 +1,21 @@\n+// { dg-options \"-O2 --std=gnu++17\" }\n+// { dg-do compile }\n+// { dg-final { scan-assembler-not \"test.*%rdi, %rdi\" { target i?86-*-* x86_64-*-* } } }\n+#include <new>\n+#include <utility>\n+\n+struct s1{\n+  int a;\n+  int b;\n+  int c;\n+};\n+\n+void f1 (s1 * v, s1&& s)\n+{\n+\tnew (v) s1(std::move(s));\n+}\n+\n+void f2 (s1 * v, s1&& s)\n+{\n+\t*v = std::move(s);\n+}"}]}