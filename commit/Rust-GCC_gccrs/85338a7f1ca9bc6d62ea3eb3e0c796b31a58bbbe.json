{"sha": "85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "node_id": "C_kwDOANBUbNoAKDg1MzM4YTdmMWNhOWJjNmQ2MmVhM2ViM2UwYzc5NmIzMWE1OGJiYmU", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-10-07T16:42:50Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2021-10-11T17:46:40Z"}, "message": "Remove lambda iterators in various HIR classes\n\nThis patch removes the lambda iterators used in various HIR objects.\nThese iterators make interacting with the IR for static analysis more\ndifficult. Instead, get_X () helpers are added for accessing elements,\nand uses of the iterators replaced with for loops.\n\nThe following objects are adjusted in this patch:\n- HIR::ArrayElemsValues\n- HIR::TupleExpr\n- HIR::StructExprField\n- HIR::StructStruct\n- HIR::TupleStruct\n\nFixes: #703, #704, #705, #706, #707", "tree": {"sha": "2aa14109077705bcfefb2fc8736ce6d1fd865929", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2aa14109077705bcfefb2fc8736ce6d1fd865929"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99c28309d3553346d4f0337dbae49f4a8e48da01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c28309d3553346d4f0337dbae49f4a8e48da01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c28309d3553346d4f0337dbae49f4a8e48da01"}], "stats": {"total": 255, "additions": 107, "deletions": 148}, "files": [{"sha": "7c4046680e9c6a7643696a47842d2ac00cecd78c", "filename": "gcc/rust/backend/rust-compile-expr.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fbackend%2Frust-compile-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-expr.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -412,11 +412,11 @@ class CompileExpr : public HIRCompileBase\n \n   void visit (HIR::ArrayElemsValues &elems) override\n   {\n-    elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n-      Bexpression *translated_expr = CompileExpr::Compile (e, ctx);\n-      constructor.push_back (translated_expr);\n-      return true;\n-    });\n+    for (auto &elem : elems.get_values ())\n+      {\n+\tBexpression *translated_expr = CompileExpr::Compile (elem.get (), ctx);\n+\tconstructor.push_back (translated_expr);\n+      }\n   }\n \n   void visit (HIR::ArrayElemsCopied &elems) override\n@@ -646,11 +646,11 @@ class CompileExpr : public HIRCompileBase\n     // this assumes all fields are in order from type resolution and if a base\n     // struct was specified those fields are filed via accesors\n     std::vector<Bexpression *> vals;\n-    struct_expr.iterate ([&] (HIR::StructExprField *field) mutable -> bool {\n-      Bexpression *expr = CompileStructExprField::Compile (field, ctx);\n-      vals.push_back (expr);\n-      return true;\n-    });\n+    for (auto &field : struct_expr.get_fields ())\n+      {\n+\tBexpression *expr = CompileStructExprField::Compile (field.get (), ctx);\n+\tvals.push_back (expr);\n+      }\n \n     translated\n       = ctx->get_backend ()->constructor_expression (type, vals,"}, {"sha": "3fb6c879f7dd7a2c6b85185d1e7d8b3c8ccd8492", "filename": "gcc/rust/hir/tree/rust-hir-expr.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-expr.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -796,14 +796,7 @@ class ArrayElemsValues : public ArrayElems\n \n   size_t get_num_elements () const { return values.size (); }\n \n-  void iterate (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto it = values.begin (); it != values.end (); it++)\n-      {\n-\tif (!cb ((*it).get ()))\n-\t  return;\n-      }\n-  }\n+  std::vector<std::unique_ptr<Expr> > &get_values () { return values; }\n \n protected:\n   ArrayElemsValues *clone_array_elems_impl () const override\n@@ -1070,15 +1063,6 @@ class TupleExpr : public ExprWithoutBlock\n \n   bool is_unit () const { return tuple_elems.size () == 0; }\n \n-  void iterate (std::function<bool (Expr *)> cb)\n-  {\n-    for (auto &tuple_elem : tuple_elems)\n-      {\n-\tif (!cb (tuple_elem.get ()))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -1491,15 +1475,6 @@ class StructExprStructFields : public StructExprStruct\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  void iterate (std::function<bool (StructExprField *)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field.get ()))\n-\t  return;\n-      }\n-  }\n-\n   std::vector<std::unique_ptr<StructExprField> > &get_fields ()\n   {\n     return fields;\n@@ -1510,11 +1485,6 @@ class StructExprStructFields : public StructExprStruct\n     return fields;\n   };\n \n-  std::vector<std::unique_ptr<StructExprField> > get_fields_as_owner ()\n-  {\n-    return std::move (fields);\n-  };\n-\n   void set_fields_as_owner (\n     std::vector<std::unique_ptr<StructExprField> > new_fields)\n   {"}, {"sha": "54e32f7465490c2e6f27a44596988de326428452", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -1492,14 +1492,7 @@ class StructStruct : public Struct\n \n   void accept_vis (HIRVisitor &vis) override;\n \n-  void iterate (std::function<bool (StructField &)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field))\n-\t  return;\n-      }\n-  }\n+  std::vector<StructField> &get_fields () { return fields; }\n \n protected:\n   /* Use covariance to implement clone function as returning this object\n@@ -1610,15 +1603,6 @@ class TupleStruct : public Struct\n   std::vector<TupleField> &get_fields () { return fields; }\n   const std::vector<TupleField> &get_fields () const { return fields; }\n \n-  void iterate (std::function<bool (TupleField &)> cb)\n-  {\n-    for (auto &field : fields)\n-      {\n-\tif (!cb (field))\n-\t  return;\n-      }\n-  }\n-\n protected:\n   /* Use covariance to implement clone function as returning this object\n    * rather than base */"}, {"sha": "cd72ef0243df9fbc148d6fda37a2147e0dfdbe5b", "filename": "gcc/rust/lint/rust-lint-marklive.h", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Flint%2Frust-lint-marklive.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-marklive.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -81,18 +81,18 @@ class MarkLive : public MarkLiveBase\n \n   void visit (HIR::ArrayElemsValues &expr) override\n   {\n-    expr.iterate ([&] (HIR::Expr *expr) mutable -> bool {\n-      expr->accept_vis (*this);\n-      return true;\n-    });\n+    for (auto &elem : expr.get_values ())\n+      {\n+\telem->accept_vis (*this);\n+      }\n   }\n \n   void visit (HIR::TupleExpr &expr) override\n   {\n-    expr.iterate ([&] (HIR::Expr *expr) mutable -> bool {\n-      expr->accept_vis (*this);\n-      return true;\n-    });\n+    for (auto &elem : expr.get_tuple_elems ())\n+      {\n+\telem->accept_vis (*this);\n+      }\n   }\n \n   void visit (HIR::BlockExpr &expr) override\n@@ -236,10 +236,10 @@ class MarkLive : public MarkLiveBase\n \n   void visit (HIR::StructExprStructFields &stct) override\n   {\n-    stct.iterate ([&] (HIR::StructExprField *field) -> bool {\n-      field->accept_vis (*this);\n-      return true;\n-    });\n+    for (auto &field : stct.get_fields ())\n+      {\n+\tfield->accept_vis (*this);\n+      }\n \n     stct.get_struct_name ().accept_vis (*this);\n     if (stct.has_struct_base ())"}, {"sha": "152858a9e132cc4a607caf37e2b823496c16d7c5", "filename": "gcc/rust/lint/rust-lint-scan-deadcode.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Flint%2Frust-lint-scan-deadcode.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -88,16 +88,16 @@ class ScanDeadcode : public MarkLiveBase\n     else\n       {\n \t// only warn the unused fields when in unwarned struct.\n-\tstct.iterate ([&] (HIR::StructField &field) -> bool {\n-\t  HirId field_hir_id = field.get_mappings ().get_hirid ();\n-\t  if (should_warn (field_hir_id))\n-\t    {\n-\t      rust_warning_at (field.get_locus (), 0,\n-\t\t\t       \"field is never read: %<%s%>\",\n-\t\t\t       field.get_field_name ().c_str ());\n-\t    }\n-\t  return true;\n-\t});\n+\tfor (auto &field : stct.get_fields ())\n+\t  {\n+\t    HirId field_hir_id = field.get_mappings ().get_hirid ();\n+\t    if (should_warn (field_hir_id))\n+\t      {\n+\t\trust_warning_at (field.get_locus (), 0,\n+\t\t\t\t \"field is never read: %<%s%>\",\n+\t\t\t\t field.get_field_name ().c_str ());\n+\t      }\n+\t  }\n       }\n   }\n "}, {"sha": "d9eeb4e3759292c7a80d107f0f0117ff7d89fd07", "filename": "gcc/rust/typecheck/rust-hir-type-check-expr.h", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-expr.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -880,10 +880,11 @@ class TypeCheckExpr : public TypeCheckBase\n   void visit (HIR::ArrayElemsValues &elems) override\n   {\n     std::vector<TyTy::BaseType *> types;\n-    elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n-      types.push_back (TypeCheckExpr::Resolve (e, false));\n-      return true;\n-    });\n+\n+    for (auto &elem : elems.get_values ())\n+      {\n+\ttypes.push_back (TypeCheckExpr::Resolve (elem.get (), false));\n+      }\n \n     infered_array_elems\n       = TyTy::TyVar::get_implicit_infer_var (root_array_expr_locus).get_tyty ();"}, {"sha": "3f8d17e53072242b21e87a1a1563dfd08278120a", "filename": "gcc/rust/typecheck/rust-hir-type-check-stmt.h", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-stmt.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -144,17 +144,18 @@ class TypeCheckStmt : public TypeCheckBase\n     std::vector<TyTy::StructFieldType *> fields;\n \n     size_t idx = 0;\n-    struct_decl.iterate ([&] (HIR::TupleField &field) mutable -> bool {\n-      TyTy::BaseType *field_type\n-\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n-      TyTy::StructFieldType *ty_field\n-\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     std::to_string (idx), field_type);\n-      fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n-      idx++;\n-      return true;\n-    });\n+    for (auto &field : struct_decl.get_fields ())\n+      {\n+\tTyTy::BaseType *field_type\n+\t  = TypeCheckType::Resolve (field.get_field_type ().get ());\n+\tTyTy::StructFieldType *ty_field\n+\t  = new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t       std::to_string (idx), field_type);\n+\tfields.push_back (ty_field);\n+\tcontext->insert_type (field.get_mappings (),\n+\t\t\t      ty_field->get_field_type ());\n+\tidx++;\n+      }\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -196,16 +197,17 @@ class TypeCheckStmt : public TypeCheckBase\n       }\n \n     std::vector<TyTy::StructFieldType *> fields;\n-    struct_decl.iterate ([&] (HIR::StructField &field) mutable -> bool {\n-      TyTy::BaseType *field_type\n-\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n-      TyTy::StructFieldType *ty_field\n-\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     field.get_field_name (), field_type);\n-      fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n-      return true;\n-    });\n+    for (auto &field : struct_decl.get_fields ())\n+      {\n+\tTyTy::BaseType *field_type\n+\t  = TypeCheckType::Resolve (field.get_field_type ().get ());\n+\tTyTy::StructFieldType *ty_field\n+\t  = new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t       field.get_field_name (), field_type);\n+\tfields.push_back (ty_field);\n+\tcontext->insert_type (field.get_mappings (),\n+\t\t\t      ty_field->get_field_type ());\n+      }\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),"}, {"sha": "131149fabebf3b0441f7b10f65b91e58a34e64c2", "filename": "gcc/rust/typecheck/rust-hir-type-check-toplevel.h", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-toplevel.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -79,17 +79,18 @@ class TypeCheckTopLevel : public TypeCheckBase\n     std::vector<TyTy::StructFieldType *> fields;\n \n     size_t idx = 0;\n-    struct_decl.iterate ([&] (HIR::TupleField &field) mutable -> bool {\n-      TyTy::BaseType *field_type\n-\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n-      TyTy::StructFieldType *ty_field\n-\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     std::to_string (idx), field_type);\n-      fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n-      idx++;\n-      return true;\n-    });\n+    for (auto &field : struct_decl.get_fields ())\n+      {\n+\tTyTy::BaseType *field_type\n+\t  = TypeCheckType::Resolve (field.get_field_type ().get ());\n+\tTyTy::StructFieldType *ty_field\n+\t  = new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t       std::to_string (idx), field_type);\n+\tfields.push_back (ty_field);\n+\tcontext->insert_type (field.get_mappings (),\n+\t\t\t      ty_field->get_field_type ());\n+\tidx++;\n+      }\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),\n@@ -136,16 +137,18 @@ class TypeCheckTopLevel : public TypeCheckBase\n       }\n \n     std::vector<TyTy::StructFieldType *> fields;\n-    struct_decl.iterate ([&] (HIR::StructField &field) mutable -> bool {\n-      TyTy::BaseType *field_type\n-\t= TypeCheckType::Resolve (field.get_field_type ().get ());\n-      TyTy::StructFieldType *ty_field\n-\t= new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n-\t\t\t\t     field.get_field_name (), field_type);\n-      fields.push_back (ty_field);\n-      context->insert_type (field.get_mappings (), ty_field->get_field_type ());\n-      return true;\n-    });\n+\n+    for (auto &field : struct_decl.get_fields ())\n+      {\n+\tTyTy::BaseType *field_type\n+\t  = TypeCheckType::Resolve (field.get_field_type ().get ());\n+\tTyTy::StructFieldType *ty_field\n+\t  = new TyTy::StructFieldType (field.get_mappings ().get_hirid (),\n+\t\t\t\t       field.get_field_name (), field_type);\n+\tfields.push_back (ty_field);\n+\tcontext->insert_type (field.get_mappings (),\n+\t\t\t      ty_field->get_field_type ());\n+      }\n \n     TyTy::BaseType *type\n       = new TyTy::ADTType (struct_decl.get_mappings ().get_hirid (),"}, {"sha": "a30f4c43a365c7fbbed7d88d8c40a551563b4498", "filename": "gcc/rust/typecheck/rust-hir-type-check.cc", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check.cc?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -153,20 +153,21 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n \n   std::vector<TyTy::StructFieldType *> infered_fields;\n   bool ok = true;\n-  struct_expr.iterate ([&] (HIR::StructExprField *field) mutable -> bool {\n-    resolved_field_value_expr = nullptr;\n-    field->accept_vis (*this);\n-    if (resolved_field_value_expr == nullptr)\n-      {\n-\trust_fatal_error (field->get_locus (),\n-\t\t\t  \"failed to resolve type for field\");\n-\tok = false;\n-\treturn false;\n-      }\n \n-    context->insert_type (field->get_mappings (), resolved_field_value_expr);\n-    return true;\n-  });\n+  for (auto &field : struct_expr.get_fields ())\n+    {\n+      resolved_field_value_expr = nullptr;\n+      field->accept_vis (*this);\n+      if (resolved_field_value_expr == nullptr)\n+\t{\n+\t  rust_fatal_error (field->get_locus (),\n+\t\t\t    \"failed to resolve type for field\");\n+\t  ok = false;\n+\t  break;\n+\t}\n+\n+      context->insert_type (field->get_mappings (), resolved_field_value_expr);\n+    }\n \n   // something failed setting up the fields\n   if (!ok)\n@@ -266,10 +267,8 @@ TypeCheckStructExpr::visit (HIR::StructExprStructFields &struct_expr)\n       // correctly. The GIMPLE backend uses a simple algorithm that assumes each\n       // assigned field in the constructor is in the same order as the field in\n       // the type\n-      std::vector<std::unique_ptr<HIR::StructExprField> > expr_fields\n-\t= struct_expr.get_fields_as_owner ();\n-      for (auto &f : expr_fields)\n-\tf.release ();\n+      for (auto &field : struct_expr.get_fields ())\n+\tfield.release ();\n \n       std::vector<std::unique_ptr<HIR::StructExprField> > ordered_fields;\n       for (size_t i = 0; i < adtFieldIndexToField.size (); i++)"}, {"sha": "6856d0538b8e32931264d3929096e4fd2a5e7bdc", "filename": "gcc/rust/typecheck/rust-tycheck-dump.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-tycheck-dump.h?ref=85338a7f1ca9bc6d62ea3eb3e0c796b31a58bbbe", "patch": "@@ -162,11 +162,11 @@ class TypeResolverDump : public TypeCheckBase\n \n   void visit (HIR::ArrayElemsValues &elems) override\n   {\n-    elems.iterate ([&] (HIR::Expr *e) mutable -> bool {\n-      e->accept_vis (*this);\n-      dump += \",\";\n-      return true;\n-    });\n+    for (auto &elem : elems.get_values ())\n+      {\n+\telem->accept_vis (*this);\n+\tdump += \",\";\n+      }\n   }\n \n   void visit (HIR::GroupedExpr &expr) override"}]}