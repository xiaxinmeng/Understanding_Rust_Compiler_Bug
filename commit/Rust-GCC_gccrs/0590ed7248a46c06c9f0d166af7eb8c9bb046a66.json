{"sha": "0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "node_id": "C_kwDOANBUbNoAKDA1OTBlZDcyNDhhNDZjMDZjOWYwZDE2NmFmN2ViOGM5YmIwNDZhNjY", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2021-12-03T17:01:14Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-01-06T17:11:34Z"}, "message": "[Ada] New restriction No_Tagged_Type_Registration\n\ngcc/ada/\n\n\t* libgnat/s-rident.ads (No_Tagged_Type_Registration): New\n\trestriction identifier.\n\t* restrict.ads (Implementation_Restriction): Add restriction.\n\t* exp_ch7.adb (Process_Declarations): Suppress\n\ttagged-type-related finalization actions if the restriction is\n\tactive.  Call RTE_Available last.\n\t* exp_disp.adb (Make_DT): Likewise.\n\t* exp_util.adb (Requires_Cleanup_Actions): Return False for a\n\ttagged type declaration if No_Tagged_Type_Registration is\n\tactive.\n\t* sem_attr.adb (Check_Stream_Attribute): Check restriction\n\tNo_Tagged_Type_Registration.\n\t* libgnat/a-except.ads (Null_Occurrence): Minor: Initialize, to\n\tavoid stopping at a warning in gdb.\n\t* doc/gnat_rm/standard_and_implementation_defined_restrictions.rst:\n\tDocument new restriction.\n\t* gnat_rm.texi: Regenerate.", "tree": {"sha": "72f4ed5ca2eab8b298f3822b2635f0cb42627346", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72f4ed5ca2eab8b298f3822b2635f0cb42627346"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "337417795afd624c479c49529a935ee096700457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/337417795afd624c479c49529a935ee096700457", "html_url": "https://github.com/Rust-GCC/gccrs/commit/337417795afd624c479c49529a935ee096700457"}], "stats": {"total": 828, "additions": 441, "deletions": 387}, "files": [{"sha": "69efc00d4934f74a6ce69efae1a628cadf817efe", "filename": "gcc/ada/doc/gnat_rm/standard_and_implementation_defined_restrictions.rst", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fstandard_and_implementation_defined_restrictions.rst?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -656,6 +656,18 @@ To take maximum advantage of this space-saving optimization, any\n unit declaring a tagged type should be compiled with the restriction,\n though this is not required.\n \n+No_Tagged_Type_Registration\n+---------------------------\n+.. index:: No_Tagged_Type_Registration\n+\n+[GNAT] If this restriction is active, then class-wide streaming\n+attributes are not supported. In addition, the subprograms in\n+Ada.Tags are not supported.\n+If this restriction is active, the generated code is simplified by\n+omitting the otherwise-required global registration of tagged types when they\n+are declared. This restriction may be necessary in order to also apply\n+the No_Elaboration_Code restriction.\n+\n No_Task_Allocators\n ------------------\n .. index:: No_Task_Allocators\n@@ -1049,4 +1061,3 @@ follows::\n or equivalently::\n \n   gnatprove -P project.gpr --mode=check_all\n-"}, {"sha": "16a6a8d738753e59c96089688cc63bb62399b5f6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -2222,7 +2222,10 @@ package body Exp_Ch7 is\n                      Last_Top_Level_Ctrl_Construct := Decl;\n                   end if;\n \n-               else\n+               --  Unregister tagged type, unless No_Tagged_Type_Registration\n+               --  is active.\n+\n+               elsif not Restriction_Active (No_Tagged_Type_Registration) then\n                   Process_Tagged_Type_Declaration (Decl);\n                end if;\n \n@@ -2286,9 +2289,10 @@ package body Exp_Ch7 is\n                  and then Is_Library_Level_Entity (Typ)\n                  and then Convention (Typ) = Convention_Ada\n                  and then Present (Access_Disp_Table (Typ))\n-                 and then RTE_Available (RE_Register_Tag)\n                  and then not Is_Abstract_Type (Typ)\n                  and then not No_Run_Time_Mode\n+                 and then not Restriction_Active (No_Tagged_Type_Registration)\n+                 and then RTE_Available (RE_Register_Tag)\n                then\n                   Processing_Actions;\n                end if;"}, {"sha": "2ea8d5852157bd74b876bb47d7c79d9d018937e3", "filename": "gcc/ada/exp_disp.adb", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_disp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_disp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_disp.adb?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -4988,9 +4988,12 @@ package body Exp_Disp is\n       Set_Is_Statically_Allocated (Exname);\n       Set_Is_True_Constant (Exname);\n \n-      --  Declare the object used by Ada.Tags.Register_Tag\n+      --  Declare the object used by Ada.Tags.Register_Tag, unless\n+      --  No_Tagged_Type_Registration is active.\n \n-      if RTE_Available (RE_Register_Tag) then\n+      if not Restriction_Active (No_Tagged_Type_Registration)\n+        and then RTE_Available (RE_Register_Tag)\n+      then\n          Append_To (Result,\n            Make_Object_Declaration (Loc,\n              Defining_Identifier => HT_Link,\n@@ -5260,7 +5263,9 @@ package body Exp_Disp is\n \n       --  HT_Link\n \n-      if RTE_Available (RE_Register_Tag) then\n+      if not Restriction_Active (No_Tagged_Type_Registration)\n+        and then RTE_Available (RE_Register_Tag)\n+      then\n          Append_To (TSD_Aggr_List,\n            Unchecked_Convert_To (RTE (RE_Tag_Ptr),\n              Make_Attribute_Reference (Loc,\n@@ -6329,13 +6334,14 @@ package body Exp_Disp is\n       --  up the RE_Check_TSD entity and call it in No_Run_Time mode.\n \n       --  We cannot perform this check if the generation of its expanded name\n-      --  was discarded.\n+      --  was discarded or if No_Tagged_Type_Registration is active.\n \n       if not No_Run_Time_Mode\n         and then not Discard_Names\n         and then Ada_Version >= Ada_2005\n-        and then RTE_Available (RE_Check_TSD)\n         and then not Duplicated_Tag_Checks_Suppressed (Typ)\n+        and then not Restriction_Active (No_Tagged_Type_Registration)\n+        and then RTE_Available (RE_Check_TSD)\n       then\n          Append_To (Elab_Code,\n            Make_Procedure_Call_Statement (Loc,\n@@ -6358,9 +6364,11 @@ package body Exp_Disp is\n       --    3) if Typ is not defined at the library level (this is required\n       --       to avoid adding concurrency control to the hash table used\n       --       by the run-time to register the tags).\n+      --    4) No_Tagged_Type_Registration is active.\n \n       if not No_Run_Time_Mode\n         and then Is_Library_Level_Entity (Typ)\n+        and then not Restriction_Active (No_Tagged_Type_Registration)\n         and then RTE_Available (RE_Register_Tag)\n       then\n          Append_To (Elab_Code,"}, {"sha": "a4c6554e91bfa0b5aad3c0951ac475ff8a0adb8d", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -12698,9 +12698,10 @@ package body Exp_Util is\n               and then Is_Library_Level_Entity (Typ)\n               and then Convention (Typ) = Convention_Ada\n               and then Present (Access_Disp_Table (Typ))\n-              and then RTE_Available (RE_Unregister_Tag)\n               and then not Is_Abstract_Type (Typ)\n               and then not No_Run_Time_Mode\n+              and then not Restriction_Active (No_Tagged_Type_Registration)\n+              and then RTE_Available (RE_Unregister_Tag)\n             then\n                return True;\n             end if;"}, {"sha": "32d1a89d878a4ed86e7f82d382127d035e1b948b", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 392, "deletions": 375, "changes": 767, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66"}, {"sha": "0258d0e6eb3a43e1f510cacca1e9172c23853f2d", "filename": "gcc/ada/libgnat/a-except.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Flibgnat%2Fa-except.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Flibgnat%2Fa-except.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-except.ads?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -286,8 +286,10 @@ private\n    pragma Stream_Convert (Exception_Occurrence, String_To_EO, EO_To_String);\n    --  Functions for implementing Exception_Occurrence stream attributes\n \n-   pragma Warnings (Off, \"aggregate not fully initialized\");\n-   Null_Occurrence : constant Exception_Occurrence := (others => <>);\n-   pragma Warnings (On, \"aggregate not fully initialized\");\n+   Null_Occurrence : constant Exception_Occurrence :=\n+     (Machine_Occurrence => System.Null_Address,\n+      Msg => (others => '*'),\n+      Tracebacks => (others => System.Traceback_Entries.Null_TB_Entry),\n+      others => <>);\n \n end Ada.Exceptions;"}, {"sha": "a3444bc7494351a79fd8c1462ea1b31923b985b8", "filename": "gcc/ada/libgnat/s-rident.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Flibgnat%2Fs-rident.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Flibgnat%2Fs-rident.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-rident.ads?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -145,6 +145,7 @@ package System.Rident is\n       No_Standard_Storage_Pools,                 -- GNAT\n       No_Stream_Optimizations,                   -- GNAT\n       No_Streams,                                -- GNAT\n+      No_Tagged_Type_Registration,               -- GNAT\n       No_Task_Allocators,                        -- (RM D.7(7))\n       No_Task_Attributes_Package,                -- GNAT\n       No_Task_At_Interrupt_Priority,             -- GNAT"}, {"sha": "902f68b917270eba8c4a0b64bb5147a3b5f1ae63", "filename": "gcc/ada/restrict.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Frestrict.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Frestrict.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Frestrict.ads?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -143,6 +143,7 @@ package Restrict is\n       No_Standard_Storage_Pools          => True,\n       No_Stream_Optimizations            => True,\n       No_Streams                         => True,\n+      No_Tagged_Type_Registration        => True,\n       No_Task_Attributes_Package         => True,\n       No_Task_Termination                => True,\n       No_Tasking                         => True,"}, {"sha": "434488536d6941ebd355c72e1a63764ec1060aac", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0590ed7248a46c06c9f0d166af7eb8c9bb046a66/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=0590ed7248a46c06c9f0d166af7eb8c9bb046a66", "patch": "@@ -2622,6 +2622,15 @@ package body Sem_Attr is\n             Check_Restriction (No_Exception_Registration, P);\n          end if;\n \n+         --  If the No_Tagged_Type_Registration restriction is active, then\n+         --  class-wide streaming attributes are not allowed.\n+\n+         if Restriction_Check_Required (No_Tagged_Type_Registration)\n+           and then Is_Class_Wide_Type (P_Type)\n+         then\n+            Check_Restriction (No_Tagged_Type_Registration, P);\n+         end if;\n+\n          --  Here we must check that the first argument is an access type\n          --  that is compatible with Ada.Streams.Root_Stream_Type'Class.\n "}]}