{"sha": "51a233b97cc9c51e63f03f2f5554e905f3f6c054", "node_id": "C_kwDOANBUbNoAKDUxYTIzM2I5N2NjOWM1MWU2M2YwM2YyZjU1NTRlOTA1ZjNmNmMwNTQ", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-06T15:16:49Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-12T07:01:13Z"}, "message": "LoongArch: Add ftint{,rm,rp}.{w,l}.{s,d} instructions\n\nThis allows to optimize the following builtins if -fno-math-errno:\n\n- __builtin_lrint{,f}\n- __builtin_lfloor{,f}\n- __builtin_lceil{,f}\n\nInspired by\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/605287.html.\n\nANYFI is added so the compiler won't try ftint.l.s if -mfpu=32.  If we\nsimply used GPR here an ICE would be triggered with __builtin_lrintf\nand -mfpu=32.\n\nftint{rm,rp} instructions may raise inexact exception, so they can't be\nused if -fno-trapping-math -fno-fp-int-builtin-inexact.\n\nNote that the .w.{s,d} variants are not tested because we don't support\nILP32 for now.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FTINT): New unspec.\n\t(UNSPEC_FTINTRM): Likewise.\n\t(UNSPEC_FTINTRP): Likewise.\n\t(LRINT): New define_int_iterator.\n\t(lrint_pattern): New define_int_attr.\n\t(lrint_submenmonic): Likewise.\n\t(lrint_allow_inexact): Likewise.\n\t(ANYFI): New define_mode_iterator.\n\t(lrint<ANYF><ANYFI>): New instruction template.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/ftint.c: New test.\n\t* gcc.target/loongarch/ftint-no-inexact.c: New test.", "tree": {"sha": "3f3ecbb25183cace4e422ef04da1adfcbada9fd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f3ecbb25183cace4e422ef04da1adfcbada9fd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/51a233b97cc9c51e63f03f2f5554e905f3f6c054", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCY29EuQAKCRCsqtIOGecQ\n4/pCAP0SeQK602NyjuWE1zHoEmU+ZHzOLrNU4kNubpyOV/pORwD9Gl5Ln/6MN5xS\nwm3majm1HcnOj2Lvg5hdJggDQr4jSwE=\n=F5Qh\n-----END PGP SIGNATURE-----", "payload": "tree 3f3ecbb25183cace4e422ef04da1adfcbada9fd6\nparent e468dd40150ad20fe87d315c2638c572ca44dc3b\nauthor Xi Ruoyao <xry111@xry111.site> 1667747809 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1668236473 +0800\n\nLoongArch: Add ftint{,rm,rp}.{w,l}.{s,d} instructions\n\nThis allows to optimize the following builtins if -fno-math-errno:\n\n- __builtin_lrint{,f}\n- __builtin_lfloor{,f}\n- __builtin_lceil{,f}\n\nInspired by\nhttps://gcc.gnu.org/pipermail/gcc-patches/2022-November/605287.html.\n\nANYFI is added so the compiler won't try ftint.l.s if -mfpu=32.  If we\nsimply used GPR here an ICE would be triggered with __builtin_lrintf\nand -mfpu=32.\n\nftint{rm,rp} instructions may raise inexact exception, so they can't be\nused if -fno-trapping-math -fno-fp-int-builtin-inexact.\n\nNote that the .w.{s,d} variants are not tested because we don't support\nILP32 for now.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FTINT): New unspec.\n\t(UNSPEC_FTINTRM): Likewise.\n\t(UNSPEC_FTINTRP): Likewise.\n\t(LRINT): New define_int_iterator.\n\t(lrint_pattern): New define_int_attr.\n\t(lrint_submenmonic): Likewise.\n\t(lrint_allow_inexact): Likewise.\n\t(ANYFI): New define_mode_iterator.\n\t(lrint<ANYF><ANYFI>): New instruction template.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/ftint.c: New test.\n\t* gcc.target/loongarch/ftint-no-inexact.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a233b97cc9c51e63f03f2f5554e905f3f6c054", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51a233b97cc9c51e63f03f2f5554e905f3f6c054", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51a233b97cc9c51e63f03f2f5554e905f3f6c054/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e468dd40150ad20fe87d315c2638c572ca44dc3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e468dd40150ad20fe87d315c2638c572ca44dc3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e468dd40150ad20fe87d315c2638c572ca44dc3b"}], "stats": {"total": 122, "additions": 122, "deletions": 0}, "files": [{"sha": "eb127c346a3db2e8d50d9028451afd9256524c26", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=51a233b97cc9c51e63f03f2f5554e905f3f6c054", "patch": "@@ -38,6 +38,9 @@\n   UNSPEC_FMAX\n   UNSPEC_FMIN\n   UNSPEC_FCOPYSIGN\n+  UNSPEC_FTINT\n+  UNSPEC_FTINTRM\n+  UNSPEC_FTINTRP\n \n   ;; Override return address for exception handling.\n   UNSPEC_EH_RETURN\n@@ -374,6 +377,11 @@\n (define_mode_iterator ANYF [(SF \"TARGET_HARD_FLOAT\")\n \t\t\t    (DF \"TARGET_DOUBLE_FLOAT\")])\n \n+;; Iterator for fixed-point modes which can be hold by a hardware\n+;; floating-point register.\n+(define_mode_iterator ANYFI [(SI \"TARGET_HARD_FLOAT\")\n+\t\t\t     (DI \"TARGET_DOUBLE_FLOAT\")])\n+\n ;; A mode for which moves involving FPRs may need to be split.\n (define_mode_iterator SPLITF\n   [(DF \"!TARGET_64BIT && TARGET_DOUBLE_FLOAT\")\n@@ -515,6 +523,19 @@\n (define_code_attr sel [(eq \"masknez\") (ne \"maskeqz\")])\n (define_code_attr selinv [(eq \"maskeqz\") (ne \"masknez\")])\n \n+;; Iterator and attributes for floating-point to fixed-point conversion\n+;; instructions.\n+(define_int_iterator LRINT [UNSPEC_FTINT UNSPEC_FTINTRM UNSPEC_FTINTRP])\n+(define_int_attr lrint_pattern [(UNSPEC_FTINT \"lrint\")\n+\t\t\t\t(UNSPEC_FTINTRM \"lfloor\")\n+\t\t\t\t(UNSPEC_FTINTRP \"lceil\")])\n+(define_int_attr lrint_submenmonic [(UNSPEC_FTINT \"\")\n+\t\t\t\t    (UNSPEC_FTINTRM \"rm\")\n+\t\t\t\t    (UNSPEC_FTINTRP \"rp\")])\n+(define_int_attr lrint_allow_inexact [(UNSPEC_FTINT \"1\")\n+\t\t\t\t      (UNSPEC_FTINTRM \"0\")\n+\t\t\t\t      (UNSPEC_FTINTRP \"0\")])\n+\n ;;\n ;;  ....................\n ;;\n@@ -2022,6 +2043,19 @@\n   [(set_attr \"type\" \"fcvt\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n+;; Convert floating-point numbers to integers\n+(define_insn \"<lrint_pattern><ANYF:mode><ANYFI:mode>2\"\n+  [(set (match_operand:ANYFI 0 \"register_operand\" \"=f\")\n+\t(unspec:ANYFI [(match_operand:ANYF 1 \"register_operand\" \"f\")]\n+\t\t      LRINT))]\n+  \"TARGET_HARD_FLOAT &&\n+   (<lrint_allow_inexact>\n+    || flag_fp_int_builtin_inexact\n+    || !flag_trapping_math)\"\n+  \"ftint<lrint_submenmonic>.<ANYFI:ifmt>.<ANYF:fmt> %0,%1\"\n+  [(set_attr \"type\" \"fcvt\")\n+   (set_attr \"mode\" \"<ANYF:MODE>\")])\n+\n ;; Load the low word of operand 0 with operand 1.\n (define_insn \"load_low<mode>\"\n   [(set (match_operand:SPLITF 0 \"register_operand\" \"=f,f\")"}, {"sha": "88b83a9c056896a8f6bbc59708d35ef00d28d481", "filename": "gcc/testsuite/gcc.target/loongarch/ftint-no-inexact.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint-no-inexact.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint-no-inexact.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint-no-inexact.c?ref=51a233b97cc9c51e63f03f2f5554e905f3f6c054", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -mdouble-float -fno-math-errno -fno-fp-int-builtin-inexact\" } */\n+/* { dg-final { scan-assembler \"ftint\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"ftint\\\\.l\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"ftintrm\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler-not \"ftintrm\\\\.l\\\\.d\" } } */\n+/* { dg-final { scan-assembler-not \"ftintrp\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler-not \"ftintrp\\\\.l\\\\.d\" } } */\n+\n+long\n+my_lrint (double a)\n+{\n+  return __builtin_lrint (a);\n+}\n+\n+long\n+my_lrintf (float a)\n+{\n+  return __builtin_lrintf (a);\n+}\n+\n+long\n+my_lfloor (double a)\n+{\n+  return __builtin_lfloor (a);\n+}\n+\n+long\n+my_lfloorf (float a)\n+{\n+  return __builtin_lfloorf (a);\n+}\n+\n+long\n+my_lceil (double a)\n+{\n+  return __builtin_lceil (a);\n+}\n+\n+long\n+my_lceilf (float a)\n+{\n+  return __builtin_lceilf (a);\n+}"}, {"sha": "7a326a454d88bd3712e4c0c7522b126a0f836e99", "filename": "gcc/testsuite/gcc.target/loongarch/ftint.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/51a233b97cc9c51e63f03f2f5554e905f3f6c054/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fftint.c?ref=51a233b97cc9c51e63f03f2f5554e905f3f6c054", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mabi=lp64d -mdouble-float -fno-math-errno -ffp-int-builtin-inexact\" } */\n+/* { dg-final { scan-assembler \"ftint\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"ftint\\\\.l\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"ftintrm\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"ftintrm\\\\.l\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"ftintrp\\\\.l\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"ftintrp\\\\.l\\\\.d\" } } */\n+\n+long\n+my_lrint (double a)\n+{\n+  return __builtin_lrint (a);\n+}\n+\n+long\n+my_lrintf (float a)\n+{\n+  return __builtin_lrintf (a);\n+}\n+\n+long\n+my_lfloor (double a)\n+{\n+  return __builtin_lfloor (a);\n+}\n+\n+long\n+my_lfloorf (float a)\n+{\n+  return __builtin_lfloorf (a);\n+}\n+\n+long\n+my_lceil (double a)\n+{\n+  return __builtin_lceil (a);\n+}\n+\n+long\n+my_lceilf (float a)\n+{\n+  return __builtin_lceilf (a);\n+}"}]}