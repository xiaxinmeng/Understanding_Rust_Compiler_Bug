{"sha": "1d9fa70c34069d3b341e07ada11dde6cd029207b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ5ZmE3MGMzNDA2OWQzYjM0MWUwN2FkYTExZGRlNmNkMDI5MjA3Yg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T16:05:23Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2010-12-22T16:05:23Z"}, "message": "More tweaking of recursive name types when converting to GENERIC.\n\nFrom-SVN: r168172", "tree": {"sha": "a16ffe268e870891a4bab8b6bae94345b9be5b03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a16ffe268e870891a4bab8b6bae94345b9be5b03"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d9fa70c34069d3b341e07ada11dde6cd029207b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9fa70c34069d3b341e07ada11dde6cd029207b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d9fa70c34069d3b341e07ada11dde6cd029207b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d9fa70c34069d3b341e07ada11dde6cd029207b/comments", "author": null, "committer": null, "parents": [{"sha": "f39c772f2ee579fc42707bffd0480c01f8bc2bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f39c772f2ee579fc42707bffd0480c01f8bc2bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f39c772f2ee579fc42707bffd0480c01f8bc2bd7"}], "stats": {"total": 63, "additions": 37, "deletions": 26}, "files": [{"sha": "c0914cac78e520f0c358b600832d9b32b5137362", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9fa70c34069d3b341e07ada11dde6cd029207b/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9fa70c34069d3b341e07ada11dde6cd029207b/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=1d9fa70c34069d3b341e07ada11dde6cd029207b", "patch": "@@ -6511,22 +6511,22 @@ Named_type::message_name() const\n Type*\n Named_type::named_base()\n {\n-  if (this->seen_)\n+  if (this->seen_ > 0)\n     return this;\n-  this->seen_ = true;\n+  ++this->seen_;\n   Type* ret = this->type_->base();\n-  this->seen_ = false;\n+  --this->seen_;\n   return ret;\n }\n \n const Type*\n Named_type::named_base() const\n {\n-  if (this->seen_)\n+  if (this->seen_ > 0)\n     return this;\n-  this->seen_ = true;\n+  ++this->seen_;\n   const Type* ret = this->type_->base();\n-  this->seen_ = false;\n+  --this->seen_;\n   return ret;\n }\n \n@@ -6536,11 +6536,11 @@ Named_type::named_base() const\n bool\n Named_type::is_named_error_type() const\n {\n-  if (this->seen_)\n+  if (this->seen_ > 0)\n     return false;\n-  this->seen_ = true;\n+  ++this->seen_;\n   bool ret = this->type_->is_error_type();\n-  this->seen_ = false;\n+  --this->seen_;\n   return ret;\n }\n \n@@ -6690,11 +6690,11 @@ Named_type::interface_method_table(Gogo* gogo, const Interface_type* interface,\n bool\n Named_type::named_type_has_hidden_fields(std::string* reason) const\n {\n-  if (this->seen_)\n+  if (this->seen_ > 0)\n     return false;\n-  this->seen_ = true;\n+  ++this->seen_;\n   bool ret = this->type_->has_hidden_fields(this, reason);\n-  this->seen_ = false;\n+  --this->seen_;\n   return ret;\n }\n \n@@ -6896,18 +6896,24 @@ Named_type::do_get_tree(Gogo* gogo)\n     case TYPE_FUNCTION:\n       // GENERIC can't handle a pointer to a function type whose\n       // return type is a pointer to the function type itself.  It\n-      // does into infinite loops when walking the types.\n-      if (this->seen_)\n+      // goes into an infinite loop when walking the types.\n+      if (this->seen_ > 0)\n \t{\n \t  Function_type* fntype = this->type_->function_type();\n \t  if (fntype->results() != NULL\n \t      && fntype->results()->size() == 1\n \t      && fntype->results()->front().type()->forwarded() == this)\n \t    return ptr_type_node;\n+\n+\t  // We can legitimately see ourselves here twice when a named\n+\t  // type is defined using a struct which refers to the named\n+\t  // type.  If we see ourselves too often we are in a loop.\n+\t  if (this->seen_ > 3)\n+\t    return ptr_type_node;\n \t}\n-      this->seen_ = true;\n+      ++this->seen_;\n       t = Type::get_named_type_tree(gogo, this->type_);\n-      this->seen_ = false;\n+      --this->seen_;\n       if (t == error_mark_node)\n \treturn error_mark_node;\n       t = build_variant_type_copy(t);\n@@ -6917,11 +6923,17 @@ Named_type::do_get_tree(Gogo* gogo)\n       // Don't recur infinitely if a pointer type refers to itself.\n       // Ideally we would build a circular data structure here, but\n       // GENERIC can't handle them.\n-      if (this->seen_)\n-\treturn ptr_type_node;\n-      this->seen_ = true;\n+      if (this->seen_ > 0)\n+\t{\n+\t  if (this->type_->points_to()->forwarded() == this)\n+\t    return ptr_type_node;\n+\n+\t  if (this->seen_ > 3)\n+\t    return ptr_type_node;\n+\t}\n+      ++this->seen_;\n       t = Type::get_named_type_tree(gogo, this->type_);\n-      this->seen_ = false;\n+      --this->seen_;\n       if (t == error_mark_node)\n \treturn error_mark_node;\n       t = build_variant_type_copy(t);\n@@ -6980,11 +6992,10 @@ Named_type::do_get_tree(Gogo* gogo)\n \t// definition of T2 may refer to T1, then we must simply\n \t// return the type for T2 here.  It's not precisely correct,\n \t// but it's as close as we can get with GENERIC.\n-\tbool was_seen = this->seen_;\n-\tthis->seen_ = true;\n+\t++this->seen_;\n \tt = Type::get_named_type_tree(gogo, this->type_);\n-\tthis->seen_ = was_seen;\n-\tif (was_seen)\n+\t--this->seen_;\n+\tif (this->seen_ > 0)\n \t  return t;\n \tif (t == error_mark_node)\n \t  return error_mark_node;"}, {"sha": "dbcf0ff43ac5b1a22f0be5c469962087bc897ba3", "filename": "gcc/go/gofrontend/types.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d9fa70c34069d3b341e07ada11dde6cd029207b/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d9fa70c34069d3b341e07ada11dde6cd029207b/gcc%2Fgo%2Fgofrontend%2Ftypes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.h?ref=1d9fa70c34069d3b341e07ada11dde6cd029207b", "patch": "@@ -2387,7 +2387,7 @@ class Named_type : public Type\n       local_methods_(NULL), all_methods_(NULL),\n       interface_method_tables_(NULL), pointer_interface_method_tables_(NULL),\n       location_(location), named_tree_(NULL), is_visible_(true),\n-      is_error_(false), seen_(false)\n+      is_error_(false), seen_(0)\n   { }\n \n   // Return the associated Named_object.  This holds the actual name.\n@@ -2626,7 +2626,7 @@ class Named_type : public Type\n   // used to prevent infinite recursion when a type refers to itself.\n   // This is mutable because it is always reset to false when the\n   // function exits.\n-  mutable bool seen_;\n+  mutable int seen_;\n };\n \n // A forward declaration.  This handles a type which has been declared"}]}