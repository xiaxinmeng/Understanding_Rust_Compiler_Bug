{"sha": "e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTZjMTQ4OTg4Y2ZlNTg1YWJmNGViMmQzZjE4MzlmOTdhODNjYzFhOQ==", "commit": {"author": {"name": "Daniel Kraft", "email": "d@domob.eu", "date": "2010-08-15T15:28:10Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2010-08-15T15:28:10Z"}, "message": "re PR fortran/45197 ([F2008] Allow IMPURE elemental procedures)\n\n2010-08-15  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/45197\n\t* decl.c (gfc_match_prefix): Match IMPURE prefix and mark ELEMENTAL\n\troutines not IMPURE also as PURE.\n\t* intrinsic.c (enum klass): New class `CLASS_PURE' and renamed\n\t`NO_CLASS' in `CLASS_IMPURE'.\n\t(add_sym): Set symbol-attributes `pure' and `elemental' correctly.\n\t(add_sym_0s): Renamed `NO_CLASS' in `CLASS_IMPURE'.\n\t(add_functions): Ditto.\n\t(add_subroutines): Ditto and mark `MOVE_ALLOC' as CLASS_PURE.\n\t* resolve.c (gfc_pure): Do not treat ELEMENTAL as automatically PURE.\n\t(resolve_formal_arglist): Check that arguments to ELEMENTAL procedures\n\tare not ALLOCATABLE and have their INTENT specified.\n\n2010-08-15  Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/45197\n\t* gfortran.dg/elemental_args_check_3.f90: New test.\n\t* gfortran.dg/impure_1.f08: New test.\n\t* gfortran.dg/impure_2.f08: New test.\n\t* gfortran.dg/impure_3.f90: New test.\n\t* gfortran.dg/typebound_proc_6.f03: Changed expected error message.\n\nFrom-SVN: r163261", "tree": {"sha": "e3e1c7f09d4ce2dcff79e7b4801680172b017c43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3e1c7f09d4ce2dcff79e7b4801680172b017c43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/comments", "author": {"login": "domob1812", "id": 4943644, "node_id": "MDQ6VXNlcjQ5NDM2NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domob1812", "html_url": "https://github.com/domob1812", "followers_url": "https://api.github.com/users/domob1812/followers", "following_url": "https://api.github.com/users/domob1812/following{/other_user}", "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}", "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions", "organizations_url": "https://api.github.com/users/domob1812/orgs", "repos_url": "https://api.github.com/users/domob1812/repos", "events_url": "https://api.github.com/users/domob1812/events{/privacy}", "received_events_url": "https://api.github.com/users/domob1812/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "69f11a1360a23fd4aa0567ab1c4b62dcc5be8127", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69f11a1360a23fd4aa0567ab1c4b62dcc5be8127", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69f11a1360a23fd4aa0567ab1c4b62dcc5be8127"}], "stats": {"total": 603, "additions": 410, "deletions": 193}, "files": [{"sha": "41d0bd30613cdd120dceeecec145bacb6daea670", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -1,3 +1,18 @@\n+2010-08-15  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/45197\n+\t* decl.c (gfc_match_prefix): Match IMPURE prefix and mark ELEMENTAL\n+\troutines not IMPURE also as PURE.\n+\t* intrinsic.c (enum klass): New class `CLASS_PURE' and renamed\n+\t`NO_CLASS' in `CLASS_IMPURE'.\n+\t(add_sym): Set symbol-attributes `pure' and `elemental' correctly.\n+\t(add_sym_0s): Renamed `NO_CLASS' in `CLASS_IMPURE'.\n+\t(add_functions): Ditto.\n+\t(add_subroutines): Ditto and mark `MOVE_ALLOC' as CLASS_PURE.\n+\t* resolve.c (gfc_pure): Do not treat ELEMENTAL as automatically PURE.\n+\t(resolve_formal_arglist): Check that arguments to ELEMENTAL procedures\n+\tare not ALLOCATABLE and have their INTENT specified.\n+\n 2010-08-13  Daniel Kraft  <d@domob.eu>\n \n \t* gfortran.h (array_type): New type `AS_IMPLIED_SHAPE'."}, {"sha": "be41af869c7826846313aa36a383ffaa7ab54d0a", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 58, "deletions": 22, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -4052,45 +4052,81 @@ match\n gfc_match_prefix (gfc_typespec *ts)\n {\n   bool seen_type;\n+  bool seen_impure;\n+  bool found_prefix;\n \n   gfc_clear_attr (&current_attr);\n-  seen_type = 0;\n+  seen_type = false;\n+  seen_impure = false;\n \n   gcc_assert (!gfc_matching_prefix);\n   gfc_matching_prefix = true;\n \n-loop:\n-  if (!seen_type && ts != NULL\n-      && gfc_match_decl_type_spec (ts, 0) == MATCH_YES\n-      && gfc_match_space () == MATCH_YES)\n+  do\n     {\n+      found_prefix = false;\n \n-      seen_type = 1;\n-      goto loop;\n-    }\n+      if (!seen_type && ts != NULL\n+\t  && gfc_match_decl_type_spec (ts, 0) == MATCH_YES\n+\t  && gfc_match_space () == MATCH_YES)\n+\t{\n \n-  if (gfc_match (\"elemental% \") == MATCH_YES)\n-    {\n-      if (gfc_add_elemental (&current_attr, NULL) == FAILURE)\n-\tgoto error;\n+\t  seen_type = true;\n+\t  found_prefix = true;\n+\t}\n+\n+      if (gfc_match (\"elemental% \") == MATCH_YES)\n+\t{\n+\t  if (gfc_add_elemental (&current_attr, NULL) == FAILURE)\n+\t    goto error;\n \n-      goto loop;\n+\t  found_prefix = true;\n+\t}\n+\n+      if (gfc_match (\"pure% \") == MATCH_YES)\n+\t{\n+\t  if (gfc_add_pure (&current_attr, NULL) == FAILURE)\n+\t    goto error;\n+\n+\t  found_prefix = true;\n+\t}\n+\n+      if (gfc_match (\"recursive% \") == MATCH_YES)\n+\t{\n+\t  if (gfc_add_recursive (&current_attr, NULL) == FAILURE)\n+\t    goto error;\n+\n+\t  found_prefix = true;\n+\t}\n+\n+      /* IMPURE is a somewhat special case, as it needs not set an actual\n+\t attribute but rather only prevents ELEMENTAL routines from being\n+\t automatically PURE.  */\n+      if (gfc_match (\"impure% \") == MATCH_YES)\n+\t{\n+\t  if (gfc_notify_std (GFC_STD_F2008,\n+\t\t\t      \"Fortran 2008: IMPURE procedure at %C\")\n+\t\t== FAILURE)\n+\t    goto error;\n+\n+\t  seen_impure = true;\n+\t  found_prefix = true;\n+\t}\n     }\n+  while (found_prefix);\n \n-  if (gfc_match (\"pure% \") == MATCH_YES)\n+  /* IMPURE and PURE must not both appear, of course.  */\n+  if (seen_impure && current_attr.pure)\n     {\n-      if (gfc_add_pure (&current_attr, NULL) == FAILURE)\n-\tgoto error;\n-\n-      goto loop;\n+      gfc_error (\"PURE and IMPURE must not appear both at %C\");\n+      goto error;\n     }\n \n-  if (gfc_match (\"recursive% \") == MATCH_YES)\n+  /* If IMPURE it not seen but the procedure is ELEMENTAL, mark it as PURE.  */\n+  if (!seen_impure && current_attr.elemental && !current_attr.pure)\n     {\n-      if (gfc_add_recursive (&current_attr, NULL) == FAILURE)\n+      if (gfc_add_pure (&current_attr, NULL) == FAILURE)\n \tgoto error;\n-\n-      goto loop;\n     }\n \n   /* At this point, the next item is not a prefix.  */"}, {"sha": "cdfcca7bcf895250851cdf835ff5c8cde8d6f32a", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 177, "deletions": 168, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -50,7 +50,8 @@ static enum\n sizing;\n \n enum klass\n-{ NO_CLASS = 0, CLASS_ELEMENTAL, CLASS_INQUIRY, CLASS_TRANSFORMATIONAL };\n+{ CLASS_IMPURE = 0, CLASS_PURE, CLASS_ELEMENTAL,\n+  CLASS_INQUIRY, CLASS_TRANSFORMATIONAL };\n \n #define ACTUAL_NO\t0\n #define ACTUAL_YES\t1\n@@ -273,6 +274,10 @@ add_sym (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt type\n       strcat (buf, name);\n       next_sym->lib_name = gfc_get_string (buf);\n \n+      /* There are no IMPURE ELEMENTAL intrinsics, thus the ELEMENTAL class\n+\t also implies PURE.  Additionally, there's the PURE class itself.  */\n+      next_sym->pure = (cl == CLASS_ELEMENTAL || cl == CLASS_PURE);\n+\n       next_sym->elemental = (cl == CLASS_ELEMENTAL);\n       next_sym->inquiry = (cl == CLASS_INQUIRY);\n       next_sym->transformational = (cl == CLASS_TRANSFORMATIONAL);\n@@ -362,7 +367,8 @@ add_sym_0 (const char *name, gfc_isym_id id, enum klass cl, int actual_ok, bt ty\n    0 arguments.  */\n \n static void\n-add_sym_0s (const char *name, gfc_isym_id id, int standard, void (*resolve) (gfc_code *))\n+add_sym_0s (const char *name, gfc_isym_id id, int standard,\n+\t    void (*resolve) (gfc_code *))\n {\n   gfc_check_f cf;\n   gfc_simplify_f sf;\n@@ -372,8 +378,8 @@ add_sym_0s (const char *name, gfc_isym_id id, int standard, void (*resolve) (gfc\n   sf.f1 = NULL;\n   rf.s1 = resolve;\n \n-  add_sym (name, id, NO_CLASS, ACTUAL_NO, BT_UNKNOWN, 0, standard, cf, sf, rf,\n-\t   (void *) 0);\n+  add_sym (name, id, CLASS_IMPURE, ACTUAL_NO, BT_UNKNOWN, 0, standard, cf, sf,\n+\t   rf, (void *) 0);\n }\n \n \n@@ -1119,8 +1125,8 @@ add_functions (void)\n \n   /* The checking function for ACCESS is called gfc_check_access_func\n      because the name gfc_check_access is already used in module.c.  */\n-  add_sym_2 (\"access\", GFC_ISYM_ACCESS, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_access_func, NULL, gfc_resolve_access,\n+  add_sym_2 (\"access\", GFC_ISYM_ACCESS, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_access_func, NULL, gfc_resolve_access,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"access\", GFC_ISYM_ACCESS, GFC_STD_GNU);\n@@ -1373,14 +1379,14 @@ add_functions (void)\n \n   make_generic (\"char\", GFC_ISYM_CHAR, GFC_STD_F77);\n \n-  add_sym_1 (\"chdir\", GFC_ISYM_CHDIR, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_1 (\"chdir\", GFC_ISYM_CHDIR, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_chdir, NULL, gfc_resolve_chdir,\n \t     nm, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chdir\", GFC_ISYM_CHDIR, GFC_STD_GNU);\n \n-  add_sym_2 (\"chmod\", GFC_ISYM_CHMOD, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_chmod, NULL, gfc_resolve_chmod,\n+  add_sym_2 (\"chmod\", GFC_ISYM_CHMOD, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_chmod, NULL, gfc_resolve_chmod,\n \t     nm, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"chmod\", GFC_ISYM_CHMOD, GFC_STD_GNU);\n@@ -1468,9 +1474,9 @@ add_functions (void)\n \n   make_generic (\"cshift\", GFC_ISYM_CSHIFT, GFC_STD_F95);\n \n-  add_sym_1 (\"ctime\", GFC_ISYM_CTIME, NO_CLASS, ACTUAL_NO, BT_CHARACTER, 0, GFC_STD_GNU,\n-\t      gfc_check_ctime, NULL, gfc_resolve_ctime,\n-\t      tm, BT_INTEGER, di, REQUIRED);\n+  add_sym_1 (\"ctime\", GFC_ISYM_CTIME, CLASS_IMPURE, ACTUAL_NO, BT_CHARACTER,\n+\t     0, GFC_STD_GNU, gfc_check_ctime, NULL, gfc_resolve_ctime,\n+\t     tm, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ctime\", GFC_ISYM_CTIME, GFC_STD_GNU);\n \n@@ -1560,14 +1566,14 @@ add_functions (void)\n   make_generic (\"erfc_scaled\", GFC_ISYM_ERFC_SCALED, GFC_STD_F2008);\n \n   /* G77 compatibility */\n-  add_sym_1 (\"dtime\", GFC_ISYM_DTIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n-\t     gfc_check_dtime_etime, NULL, NULL,\n+  add_sym_1 (\"dtime\", GFC_ISYM_DTIME, CLASS_IMPURE, ACTUAL_NO, BT_REAL,\n+\t     4, GFC_STD_GNU, gfc_check_dtime_etime, NULL, NULL,\n \t     x, BT_REAL, 4, REQUIRED);\n \n   make_generic (\"dtime\", GFC_ISYM_DTIME, GFC_STD_GNU);\n \n-  add_sym_1 (\"etime\", GFC_ISYM_ETIME, NO_CLASS, ACTUAL_NO, BT_REAL, 4,  GFC_STD_GNU,\n-\t     gfc_check_dtime_etime, NULL, NULL,\n+  add_sym_1 (\"etime\", GFC_ISYM_ETIME, CLASS_IMPURE, ACTUAL_NO, BT_REAL,\n+\t     4, GFC_STD_GNU, gfc_check_dtime_etime, NULL, NULL,\n \t     x, BT_REAL, 4, REQUIRED);\n \n   make_generic (\"etime\", GFC_ISYM_ETIME, GFC_STD_GNU);\n@@ -1604,8 +1610,8 @@ add_functions (void)\n \t     a, BT_UNKNOWN, 0, REQUIRED,\n \t     mo, BT_UNKNOWN, 0, REQUIRED);\n \n-  add_sym_0 (\"fdate\",  GFC_ISYM_FDATE, NO_CLASS, ACTUAL_NO, BT_CHARACTER, dc, GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_fdate);\n+  add_sym_0 (\"fdate\",  GFC_ISYM_FDATE, CLASS_IMPURE, ACTUAL_NO, BT_CHARACTER,\n+\t     dc, GFC_STD_GNU, NULL, NULL, gfc_resolve_fdate);\n \n   make_generic (\"fdate\", GFC_ISYM_FDATE, GFC_STD_GNU);\n \n@@ -1616,8 +1622,8 @@ add_functions (void)\n   make_generic (\"floor\", GFC_ISYM_FLOOR, GFC_STD_F95);\n \n   /* G77 compatible fnum */\n-  add_sym_1 (\"fnum\", GFC_ISYM_FNUM, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fnum, NULL, gfc_resolve_fnum,\n+  add_sym_1 (\"fnum\", GFC_ISYM_FNUM, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_fnum, NULL, gfc_resolve_fnum,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fnum\", GFC_ISYM_FNUM, GFC_STD_GNU);\n@@ -1628,38 +1634,38 @@ add_functions (void)\n \n   make_generic (\"fraction\", GFC_ISYM_FRACTION, GFC_STD_F95);\n \n-  add_sym_2 (\"fstat\", GFC_ISYM_FSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"fstat\", GFC_ISYM_FSTAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_fstat, NULL, gfc_resolve_fstat,\n \t     ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"fstat\", GFC_ISYM_FSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"ftell\", GFC_ISYM_FTELL, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii, GFC_STD_GNU,\n-\t     gfc_check_ftell, NULL, gfc_resolve_ftell,\n+  add_sym_1 (\"ftell\", GFC_ISYM_FTELL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     ii, GFC_STD_GNU, gfc_check_ftell, NULL, gfc_resolve_ftell,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ftell\", GFC_ISYM_FTELL, GFC_STD_GNU);\n \n-  add_sym_2 (\"fgetc\", GFC_ISYM_FGETC, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n+  add_sym_2 (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_fgetputc, NULL, gfc_resolve_fgetc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fgetc\", GFC_ISYM_FGETC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fget\", GFC_ISYM_FGET, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fgetput, NULL, gfc_resolve_fget,\n+  add_sym_1 (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_fgetput, NULL, gfc_resolve_fget,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fget\", GFC_ISYM_FGET, GFC_STD_GNU);\n \n-  add_sym_2 (\"fputc\", GFC_ISYM_FPUTC, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fgetputc, NULL, gfc_resolve_fputc,\n+  add_sym_2 (\"fputc\", GFC_ISYM_FPUTC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_fgetputc, NULL, gfc_resolve_fputc,\n \t     ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fputc\", GFC_ISYM_FPUTC, GFC_STD_GNU);\n \n-  add_sym_1 (\"fput\", GFC_ISYM_FPUT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_fgetput, NULL, gfc_resolve_fput,\n+  add_sym_1 (\"fput\", GFC_ISYM_FPUT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_fgetput, NULL, gfc_resolve_fput,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"fput\", GFC_ISYM_FPUT, GFC_STD_GNU);\n@@ -1675,29 +1681,29 @@ add_functions (void)\n   make_generic (\"gamma\", GFC_ISYM_TGAMMA, GFC_STD_F2008);\n \n   /* Unix IDs (g77 compatibility)  */\n-  add_sym_1 (\"getcwd\", GFC_ISYM_GETCWD, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,  GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_getcwd,\n+  add_sym_1 (\"getcwd\", GFC_ISYM_GETCWD, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di,  GFC_STD_GNU, NULL, NULL, gfc_resolve_getcwd,\n \t     c, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"getcwd\", GFC_ISYM_GETCWD, GFC_STD_GNU);\n \n-  add_sym_0 (\"getgid\", GFC_ISYM_GETGID, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_getgid);\n+  add_sym_0 (\"getgid\", GFC_ISYM_GETGID, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_getgid);\n \n   make_generic (\"getgid\", GFC_ISYM_GETGID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getpid\", GFC_ISYM_GETPID, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n-\t     NULL, NULL, gfc_resolve_getpid);\n+  add_sym_0 (\"getpid\", GFC_ISYM_GETPID, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_getpid);\n \n   make_generic (\"getpid\", GFC_ISYM_GETPID, GFC_STD_GNU);\n \n-  add_sym_0 (\"getuid\", GFC_ISYM_GETUID, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n-\t     NULL, NULL, gfc_resolve_getuid);\n+  add_sym_0 (\"getuid\", GFC_ISYM_GETUID, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_getuid);\n \n   make_generic (\"getuid\", GFC_ISYM_GETUID, GFC_STD_GNU);\n \n-  add_sym_1 (\"hostnm\", GFC_ISYM_HOSTNM, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n+  add_sym_1 (\"hostnm\", GFC_ISYM_HOSTNM, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_hostnm, NULL, gfc_resolve_hostnm,\n \t     a, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"hostnm\", GFC_ISYM_HOSTNM, GFC_STD_GNU);\n@@ -1728,14 +1734,14 @@ add_functions (void)\n \n   make_generic (\"iand\", GFC_ISYM_IAND, GFC_STD_F95);\n \n-  add_sym_2 (\"and\", GFC_ISYM_AND, NO_CLASS, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n-\t     gfc_check_and, gfc_simplify_and, gfc_resolve_and,\n+  add_sym_2 (\"and\", GFC_ISYM_AND, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n+\t     dl, GFC_STD_GNU, gfc_check_and, gfc_simplify_and, gfc_resolve_and,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"and\", GFC_ISYM_AND, GFC_STD_GNU);\n \n-  add_sym_0 (\"iargc\", GFC_ISYM_IARGC, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, NULL);\n+  add_sym_0 (\"iargc\", GFC_ISYM_IARGC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, NULL);\n \n   make_generic (\"iargc\", GFC_ISYM_IARGC, GFC_STD_GNU);\n \n@@ -1771,14 +1777,14 @@ add_functions (void)\n \n   make_generic (\"ieor\", GFC_ISYM_IEOR, GFC_STD_F95);\n \n-  add_sym_2 (\"xor\", GFC_ISYM_XOR, NO_CLASS, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n-\t     gfc_check_and, gfc_simplify_xor, gfc_resolve_xor,\n+  add_sym_2 (\"xor\", GFC_ISYM_XOR, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n+\t     dl, GFC_STD_GNU, gfc_check_and, gfc_simplify_xor, gfc_resolve_xor,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"xor\", GFC_ISYM_XOR, GFC_STD_GNU);\n \n-  add_sym_0 (\"ierrno\", GFC_ISYM_IERRNO, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     NULL, NULL, gfc_resolve_ierrno);\n+  add_sym_0 (\"ierrno\", GFC_ISYM_IERRNO, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_ierrno);\n \n   make_generic (\"ierrno\", GFC_ISYM_IERRNO, GFC_STD_GNU);\n \n@@ -1836,21 +1842,21 @@ add_functions (void)\n \n   make_generic (\"ior\", GFC_ISYM_IOR, GFC_STD_F95);\n \n-  add_sym_2 (\"or\", GFC_ISYM_OR, NO_CLASS, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n-\t     gfc_check_and, gfc_simplify_or, gfc_resolve_or,\n+  add_sym_2 (\"or\", GFC_ISYM_OR, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n+\t     dl, GFC_STD_GNU, gfc_check_and, gfc_simplify_or, gfc_resolve_or,\n \t     i, BT_UNKNOWN, 0, REQUIRED, j, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"or\", GFC_ISYM_OR, GFC_STD_GNU);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"irand\", GFC_ISYM_IRAND, NO_CLASS, ACTUAL_NO, BT_INTEGER, 4, GFC_STD_GNU,\n-\t     gfc_check_irand, NULL, NULL,\n+  add_sym_1 (\"irand\", GFC_ISYM_IRAND, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     4, GFC_STD_GNU, gfc_check_irand, NULL, NULL,\n \t     i, BT_INTEGER, 4, OPTIONAL);\n \n   make_generic (\"irand\", GFC_ISYM_IRAND, GFC_STD_GNU);\n \n-  add_sym_1 (\"isatty\", GFC_ISYM_ISATTY, NO_CLASS, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_GNU,\n-\t     gfc_check_isatty, NULL, gfc_resolve_isatty,\n+  add_sym_1 (\"isatty\", GFC_ISYM_ISATTY, CLASS_IMPURE, ACTUAL_NO, BT_LOGICAL,\n+\t     dl, GFC_STD_GNU, gfc_check_isatty, NULL, gfc_resolve_isatty,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"isatty\", GFC_ISYM_ISATTY, GFC_STD_GNU);\n@@ -1901,8 +1907,8 @@ add_functions (void)\n \n   make_generic (\"ishftc\", GFC_ISYM_ISHFTC, GFC_STD_F95);\n \n-  add_sym_2 (\"kill\", GFC_ISYM_KILL, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_kill, NULL, gfc_resolve_kill,\n+  add_sym_2 (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_kill, NULL, gfc_resolve_kill,\n \t     a, BT_INTEGER, di, REQUIRED, b, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"kill\", GFC_ISYM_KILL, GFC_STD_GNU);\n@@ -1994,7 +2000,7 @@ add_functions (void)\n \n   make_generic (\"llt\", GFC_ISYM_LLT, GFC_STD_F77);\n \n-  add_sym_2 (\"link\", GFC_ISYM_LINK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"link\", GFC_ISYM_LINK, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_link, NULL, gfc_resolve_link,\n \t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n@@ -2044,13 +2050,13 @@ add_functions (void)\n \n   make_generic (\"logical\", GFC_ISYM_LOGICAL, GFC_STD_F95);\n \n-  add_sym_2 (\"lstat\", GFC_ISYM_LSTAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"lstat\", GFC_ISYM_LSTAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_lstat,\n \t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"lstat\", GFC_ISYM_LSTAT, GFC_STD_GNU);\n \n-  add_sym_1 (\"malloc\", GFC_ISYM_MALLOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii,\n+  add_sym_1 (\"malloc\", GFC_ISYM_MALLOC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, ii,\n \t     GFC_STD_GNU, gfc_check_malloc, NULL, gfc_resolve_malloc,\n \t     sz, BT_INTEGER, di, REQUIRED);\n \n@@ -2111,13 +2117,13 @@ add_functions (void)\n \n   make_generic (\"maxval\", GFC_ISYM_MAXVAL, GFC_STD_F95);\n \n-  add_sym_0 (\"mclock\", GFC_ISYM_MCLOCK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_0 (\"mclock\", GFC_ISYM_MCLOCK, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, NULL, NULL, gfc_resolve_mclock);\n \n   make_generic (\"mclock\", GFC_ISYM_MCLOCK, GFC_STD_GNU);\n \n-  add_sym_0 (\"mclock8\", GFC_ISYM_MCLOCK8, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n-\t     GFC_STD_GNU, NULL, NULL, gfc_resolve_mclock8);\n+  add_sym_0 (\"mclock8\", GFC_ISYM_MCLOCK8, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_mclock8);\n \n   make_generic (\"mclock8\", GFC_ISYM_MCLOCK8, GFC_STD_GNU);\n \n@@ -2267,8 +2273,8 @@ add_functions (void)\n   make_generic (\"radix\", GFC_ISYM_RADIX, GFC_STD_F95);\n \n   /* The following function is for G77 compatibility.  */\n-  add_sym_1 (\"rand\", GFC_ISYM_RAND, NO_CLASS, ACTUAL_NO, BT_REAL, 4, GFC_STD_GNU,\n-\t     gfc_check_rand, NULL, NULL,\n+  add_sym_1 (\"rand\", GFC_ISYM_RAND, CLASS_IMPURE, ACTUAL_NO, BT_REAL,\n+\t     4, GFC_STD_GNU, gfc_check_rand, NULL, NULL,\n \t     i, BT_INTEGER, 4, OPTIONAL);\n \n   /* Compatibility with HP FORTRAN 77/iX Reference.  Note, rand() and ran()\n@@ -2306,7 +2312,7 @@ add_functions (void)\n \n   make_generic (\"real\", GFC_ISYM_REAL, GFC_STD_F77);\n \n-  add_sym_2 (\"rename\", GFC_ISYM_RENAME, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"rename\", GFC_ISYM_RENAME, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_rename, NULL, gfc_resolve_rename,\n \t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n@@ -2352,14 +2358,14 @@ add_functions (void)\n   make_generic (\"scan\", GFC_ISYM_SCAN, GFC_STD_F95);\n \n   /* Added for G77 compatibility garbage.  */\n-  add_sym_0 (\"second\", GFC_ISYM_SECOND, NO_CLASS, ACTUAL_NO, BT_REAL, 4, GFC_STD_GNU,\n-\t     NULL, NULL, NULL);\n+  add_sym_0 (\"second\", GFC_ISYM_SECOND, CLASS_IMPURE, ACTUAL_NO, BT_REAL,\n+\t     4, GFC_STD_GNU, NULL, NULL, NULL);\n \n   make_generic (\"second\", GFC_ISYM_SECOND, GFC_STD_GNU);\n \n   /* Added for G77 compatibility.  */\n-  add_sym_1 (\"secnds\", GFC_ISYM_SECNDS, NO_CLASS, ACTUAL_NO, BT_REAL, dr, GFC_STD_GNU,\n-\t     gfc_check_secnds, NULL, gfc_resolve_secnds,\n+  add_sym_1 (\"secnds\", GFC_ISYM_SECNDS, CLASS_IMPURE, ACTUAL_NO, BT_REAL,\n+\t     dr, GFC_STD_GNU, gfc_check_secnds, NULL, gfc_resolve_secnds,\n \t     x, BT_REAL, dr, REQUIRED);\n \n   make_generic (\"secnds\", GFC_ISYM_SECNDS, GFC_STD_GNU);\n@@ -2412,8 +2418,8 @@ add_functions (void)\n \n   make_generic (\"sign\", GFC_ISYM_SIGN, GFC_STD_F77);\n \n-  add_sym_2 (\"signal\", GFC_ISYM_SIGNAL, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_signal, NULL, gfc_resolve_signal,\n+  add_sym_2 (\"signal\", GFC_ISYM_SIGNAL, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_signal, NULL, gfc_resolve_signal,\n \t     num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED);\n \n   make_generic (\"signal\", GFC_ISYM_SIGNAL, GFC_STD_GNU);\n@@ -2456,7 +2462,7 @@ add_functions (void)\n \n   make_generic (\"size\", GFC_ISYM_SIZE, GFC_STD_F95);\n \n-  add_sym_1 (\"sizeof\", GFC_ISYM_SIZEOF, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii,\n+  add_sym_1 (\"sizeof\", GFC_ISYM_SIZEOF, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, ii,\n \t     GFC_STD_GNU, gfc_check_sizeof, NULL, NULL,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \n@@ -2499,7 +2505,7 @@ add_functions (void)\n \n   make_generic (\"sqrt\", GFC_ISYM_SQRT, GFC_STD_F77);\n \n-  add_sym_2 (\"stat\", GFC_ISYM_STAT, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"stat\", GFC_ISYM_STAT, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_stat, NULL, gfc_resolve_stat,\n \t     nm, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n@@ -2518,13 +2524,13 @@ add_functions (void)\n \n   make_generic (\"sum\", GFC_ISYM_SUM, GFC_STD_F95);\n \n-  add_sym_2 (\"symlnk\", GFC_ISYM_SYMLNK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_2 (\"symlnk\", GFC_ISYM_SYMLNK, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_symlnk, NULL, gfc_resolve_symlnk,\n \t     p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"symlnk\", GFC_ISYM_SYMLNK, GFC_STD_GNU);\n \n-  add_sym_1 (\"system\", GFC_ISYM_SYSTEM, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_1 (\"system\", GFC_ISYM_SYSTEM, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, NULL, NULL, NULL,\n \t     com, BT_CHARACTER, dc, REQUIRED);\n \n@@ -2554,13 +2560,13 @@ add_functions (void)\n \t     gfc_check_this_image, gfc_simplify_this_image, gfc_resolve_this_image,\n \t     ca, BT_REAL, dr, OPTIONAL, dm, BT_INTEGER, ii, OPTIONAL);\n \n-  add_sym_0 (\"time\", GFC_ISYM_TIME, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n-\t     NULL, NULL, gfc_resolve_time);\n+  add_sym_0 (\"time\", GFC_ISYM_TIME, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_time);\n \n   make_generic (\"time\", GFC_ISYM_TIME, GFC_STD_GNU);\n \n-  add_sym_0 (\"time8\", GFC_ISYM_TIME8, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU, \n-\t     NULL, NULL, gfc_resolve_time8);\n+  add_sym_0 (\"time8\", GFC_ISYM_TIME8, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, NULL, NULL, gfc_resolve_time8);\n \n   make_generic (\"time8\", GFC_ISYM_TIME8, GFC_STD_GNU);\n \n@@ -2596,8 +2602,8 @@ add_functions (void)\n \n   make_generic (\"trim\", GFC_ISYM_TRIM, GFC_STD_F95);\n \n-  add_sym_1 (\"ttynam\", GFC_ISYM_TTYNAM, NO_CLASS, ACTUAL_NO, BT_CHARACTER, 0, GFC_STD_GNU,\n-\t     gfc_check_ttynam, NULL, gfc_resolve_ttynam,\n+  add_sym_1 (\"ttynam\", GFC_ISYM_TTYNAM, CLASS_IMPURE, ACTUAL_NO, BT_CHARACTER,\n+\t     0, GFC_STD_GNU, gfc_check_ttynam, NULL, gfc_resolve_ttynam,\n \t     ut, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"ttynam\", GFC_ISYM_TTYNAM, GFC_STD_GNU);\n@@ -2611,23 +2617,23 @@ add_functions (void)\n   make_generic (\"ubound\", GFC_ISYM_UBOUND, GFC_STD_F95);\n \n   add_sym_3 (\"ucobound\", GFC_ISYM_UCOBOUND, CLASS_INQUIRY, ACTUAL_NO,\n-            BT_INTEGER, di, GFC_STD_F2008,\n-            gfc_check_ucobound, gfc_simplify_ucobound, gfc_resolve_ucobound,\n-            ca, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n-            kind, BT_INTEGER, di, OPTIONAL);\n+\t    BT_INTEGER, di, GFC_STD_F2008,\n+\t    gfc_check_ucobound, gfc_simplify_ucobound, gfc_resolve_ucobound,\n+\t    ca, BT_REAL, dr, REQUIRED, dm, BT_INTEGER, ii, OPTIONAL,\n+\t    kind, BT_INTEGER, di, OPTIONAL);\n \n   make_generic (\"ucobound\", GFC_ISYM_UCOBOUND, GFC_STD_F2008);\n \n   /* g77 compatibility for UMASK.  */\n-  add_sym_1 (\"umask\", GFC_ISYM_UMASK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di,\n+  add_sym_1 (\"umask\", GFC_ISYM_UMASK, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, di,\n \t     GFC_STD_GNU, gfc_check_umask, NULL, gfc_resolve_umask,\n \t     msk, BT_INTEGER, di, REQUIRED);\n \n   make_generic (\"umask\", GFC_ISYM_UMASK, GFC_STD_GNU);\n \n   /* g77 compatibility for UNLINK.  */\n-  add_sym_1 (\"unlink\", GFC_ISYM_UNLINK, NO_CLASS, ACTUAL_NO, BT_INTEGER, di, GFC_STD_GNU,\n-\t     gfc_check_unlink, NULL, gfc_resolve_unlink,\n+  add_sym_1 (\"unlink\", GFC_ISYM_UNLINK, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER,\n+\t     di, GFC_STD_GNU, gfc_check_unlink, NULL, gfc_resolve_unlink,\n \t     \"path\", BT_CHARACTER, dc, REQUIRED);\n \n   make_generic (\"unlink\", GFC_ISYM_UNLINK, GFC_STD_GNU);\n@@ -2647,7 +2653,7 @@ add_functions (void)\n \n   make_generic (\"verify\", GFC_ISYM_VERIFY, GFC_STD_F95);\n     \n-  add_sym_1 (\"loc\", GFC_ISYM_LOC, NO_CLASS, ACTUAL_NO, BT_INTEGER, ii,\n+  add_sym_1 (\"loc\", GFC_ISYM_LOC, CLASS_IMPURE, ACTUAL_NO, BT_INTEGER, ii,\n \t     GFC_STD_GNU, gfc_check_loc, NULL, gfc_resolve_loc,\n \t     x, BT_UNKNOWN, 0, REQUIRED);\n \t\t\n@@ -2685,96 +2691,97 @@ add_subroutines (void)\n \n   make_noreturn();\n \n-  add_sym_1s_intent (\"cpu_time\", GFC_ISYM_CPU_TIME, NO_CLASS, BT_UNKNOWN, 0,\n+  add_sym_1s_intent (\"cpu_time\", GFC_ISYM_CPU_TIME, CLASS_IMPURE, BT_UNKNOWN, 0,\n \t\t     GFC_STD_F95, gfc_check_cpu_time, NULL,\n \t\t     gfc_resolve_cpu_time,\n \t\t     tm, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"ctime\", GFC_ISYM_CTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ctime\", GFC_ISYM_CTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ctime_sub, NULL, gfc_resolve_ctime_sub,\n \t      tm, BT_INTEGER, di, REQUIRED, res, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"idate\", GFC_ISYM_IDATE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"idate\", GFC_ISYM_IDATE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_idate,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"itime\", GFC_ISYM_ITIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"itime\", GFC_ISYM_ITIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_itime_idate, NULL, gfc_resolve_itime,\n \t      vl, BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_2s (\"ltime\", GFC_ISYM_LTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ltime\", GFC_ISYM_LTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ltime_gmtime, NULL, gfc_resolve_ltime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_2s (\"gmtime\", GFC_ISYM_GMTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n+  add_sym_2s (\"gmtime\", GFC_ISYM_GMTIME, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_ltime_gmtime, NULL, gfc_resolve_gmtime,\n \t      tm, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_1s (\"second\", GFC_ISYM_SECOND, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n+  add_sym_1s (\"second\", GFC_ISYM_SECOND, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_second_sub, NULL, gfc_resolve_second_sub,\n \t      tm, BT_REAL, dr, REQUIRED);\n \n-  add_sym_2s (\"chdir\", GFC_ISYM_CHDIR, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"chdir\", GFC_ISYM_CHDIR, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chdir_sub, NULL, gfc_resolve_chdir_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"chmod\", GFC_ISYM_CHMOD, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"chmod\", GFC_ISYM_CHMOD, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_chmod_sub, NULL, gfc_resolve_chmod_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, md, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_4s (\"date_and_time\", GFC_ISYM_DATE_AND_TIME, NO_CLASS, BT_UNKNOWN, 0,\n-\t      GFC_STD_F95, gfc_check_date_and_time, NULL, NULL,\n+  add_sym_4s (\"date_and_time\", GFC_ISYM_DATE_AND_TIME, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_F95, gfc_check_date_and_time, NULL, NULL,\n \t      dt, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n \t      tm, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n \t      zn, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n \t      vl, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_2s (\"etime\", GFC_ISYM_ETIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"etime\", GFC_ISYM_ETIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_etime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_2s (\"dtime\", GFC_ISYM_DTIME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"dtime\", GFC_ISYM_DTIME, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_dtime_etime_sub, NULL, gfc_resolve_dtime_sub,\n \t      vl, BT_REAL, 4, REQUIRED, tm, BT_REAL, 4, REQUIRED);\n \n-  add_sym_1s (\"fdate\", GFC_ISYM_FDATE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"fdate\", GFC_ISYM_FDATE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fdate_sub, NULL, gfc_resolve_fdate_sub,\n \t      dt, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"gerror\", GFC_ISYM_GERROR, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_gerror, NULL, gfc_resolve_gerror, res, BT_CHARACTER,\n-\t      dc, REQUIRED);\n+  add_sym_1s (\"gerror\", GFC_ISYM_GERROR, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_gerror, NULL, gfc_resolve_gerror,\n+\t      res, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"getcwd\", GFC_ISYM_GETCWD, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n+  add_sym_2s (\"getcwd\", GFC_ISYM_GETCWD, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_getcwd_sub, NULL, gfc_resolve_getcwd_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"getenv\", GFC_ISYM_GETENV, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      NULL, NULL, NULL,\n-\t      name, BT_CHARACTER, dc, REQUIRED, val, BT_CHARACTER, dc,\n-\t      REQUIRED);\n+  add_sym_2s (\"getenv\", GFC_ISYM_GETENV, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, NULL, NULL, NULL,\n+\t      name, BT_CHARACTER, dc, REQUIRED,\n+\t      val, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"getarg\", GFC_ISYM_GETARG, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_getarg, NULL, gfc_resolve_getarg,\n+  add_sym_2s (\"getarg\", GFC_ISYM_GETARG, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_getarg, NULL, gfc_resolve_getarg,\n \t      pos, BT_INTEGER, di, REQUIRED, val, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_1s (\"getlog\", GFC_ISYM_GETLOG, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_getlog, NULL, gfc_resolve_getlog, c, BT_CHARACTER,\n-\t      dc, REQUIRED);\n+  add_sym_1s (\"getlog\", GFC_ISYM_GETLOG, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_getlog, NULL, gfc_resolve_getlog,\n+\t      c, BT_CHARACTER, dc, REQUIRED);\n \n   /* F2003 commandline routines.  */\n \n-  add_sym_3s_intent (\"get_command\", GFC_ISYM_GET_COMMAND, NO_CLASS, BT_UNKNOWN,\n-\t\t     0, GFC_STD_F2003, NULL, NULL, gfc_resolve_get_command,\n+  add_sym_3s_intent (\"get_command\", GFC_ISYM_GET_COMMAND, CLASS_IMPURE,\n+\t\t     BT_UNKNOWN, 0, GFC_STD_F2003,\n+\t\t     NULL, NULL, gfc_resolve_get_command,\n \t\t     com, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n \t\t     length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t\t     st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_4s (\"get_command_argument\", GFC_ISYM_GET_COMMAND_ARGUMENT, NO_CLASS,\n-\t      BT_UNKNOWN, 0, GFC_STD_F2003, NULL, NULL,\n+  add_sym_4s (\"get_command_argument\", GFC_ISYM_GET_COMMAND_ARGUMENT,\n+\t      CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_F2003, NULL, NULL,\n \t      gfc_resolve_get_command_argument,\n \t      num, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      val, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n@@ -2784,16 +2791,17 @@ add_subroutines (void)\n   /* F2003 subroutine to get environment variables.  */\n \n   add_sym_5s (\"get_environment_variable\", GFC_ISYM_GET_ENVIRONMENT_VARIABLE,\n-\t      NO_CLASS, BT_UNKNOWN, 0, GFC_STD_F2003,\n+\t      CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_F2003,\n \t      NULL, NULL, gfc_resolve_get_environment_variable,\n \t      name, BT_CHARACTER, dc, REQUIRED, INTENT_IN,\n \t      val, BT_CHARACTER, dc, OPTIONAL, INTENT_OUT,\n \t      length, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t      trim_name, BT_LOGICAL, dl, OPTIONAL, INTENT_IN);\n \n-  add_sym_2s_intent (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, NO_CLASS, BT_UNKNOWN, 0,\n-\t\t     GFC_STD_F2003, gfc_check_move_alloc, NULL, NULL,\n+  add_sym_2s_intent (\"move_alloc\", GFC_ISYM_MOVE_ALLOC, CLASS_PURE,\n+\t\t     BT_UNKNOWN, 0, GFC_STD_F2003,\n+\t\t     gfc_check_move_alloc, NULL, NULL,\n \t\t     f, BT_UNKNOWN, 0, REQUIRED, INTENT_INOUT,\n \t\t     t, BT_UNKNOWN, 0, REQUIRED, INTENT_OUT);\n \n@@ -2806,143 +2814,144 @@ add_subroutines (void)\n \t      t, BT_INTEGER, di, REQUIRED, INTENT_INOUT,\n \t      tp, BT_INTEGER, di, REQUIRED, INTENT_IN);\n \n-  add_sym_1s_intent (\"random_number\", GFC_ISYM_RANDOM_NUMBER, NO_CLASS,\n+  add_sym_1s_intent (\"random_number\", GFC_ISYM_RANDOM_NUMBER, CLASS_IMPURE,\n \t\t     BT_UNKNOWN, 0, GFC_STD_F95, gfc_check_random_number, NULL,\n \t\t     gfc_resolve_random_number,\n \t\t     h, BT_REAL, dr, REQUIRED, INTENT_OUT);\n \n-  add_sym_3s_intent (\"random_seed\", GFC_ISYM_RANDOM_SEED, NO_CLASS,\n+  add_sym_3s_intent (\"random_seed\", GFC_ISYM_RANDOM_SEED, CLASS_IMPURE,\n \t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n \t\t     gfc_check_random_seed, NULL, gfc_resolve_random_seed,\n \t\t     sz, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t\t     pt, BT_INTEGER, di, OPTIONAL, INTENT_IN,\n \t\t     gt, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n   /* More G77 compatibility garbage.  */\n-  add_sym_3s (\"alarm\", GFC_ISYM_ALARM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"alarm\", GFC_ISYM_ALARM, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_alarm_sub, NULL, gfc_resolve_alarm_sub,\n \t      sec, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"srand\", GFC_ISYM_SRAND, NO_CLASS, BT_UNKNOWN, di, GFC_STD_GNU,\n-\t      gfc_check_srand, NULL, gfc_resolve_srand,\n+  add_sym_1s (\"srand\", GFC_ISYM_SRAND, CLASS_IMPURE, BT_UNKNOWN,\n+\t      di, GFC_STD_GNU, gfc_check_srand, NULL, gfc_resolve_srand,\n \t      \"seed\", BT_INTEGER, 4, REQUIRED);\n \n-  add_sym_1s (\"exit\", GFC_ISYM_EXIT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"exit\", GFC_ISYM_EXIT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_exit, NULL, gfc_resolve_exit,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n   make_noreturn();\n \n-  add_sym_3s (\"fgetc\", GFC_ISYM_FGETC, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fgetc\", GFC_ISYM_FGETC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fgetc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fget\", GFC_ISYM_FGET, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fget\", GFC_ISYM_FGET, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fget_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"flush\", GFC_ISYM_FLUSH, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"flush\", GFC_ISYM_FLUSH, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_flush, NULL, gfc_resolve_flush,\n \t      ut, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"fputc\", GFC_ISYM_FPUTC, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fputc\", GFC_ISYM_FPUTC, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetputc_sub, NULL, gfc_resolve_fputc_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, c, BT_CHARACTER, dc, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"fput\", GFC_ISYM_FPUT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"fput\", GFC_ISYM_FPUT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fgetput_sub, NULL, gfc_resolve_fput_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"free\", GFC_ISYM_FREE, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"free\", GFC_ISYM_FREE, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_free, NULL, gfc_resolve_free,\n \t      ptr, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-              gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n-              ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+  add_sym_4s (\"fseek\", GFC_ISYM_FSEEK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n+\t      gfc_check_fseek_sub, NULL, gfc_resolve_fseek_sub,\n+\t      ut, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      of, BT_INTEGER, di, REQUIRED, INTENT_IN,\n-              whence, BT_INTEGER, di, REQUIRED, INTENT_IN,\n+\t      whence, BT_INTEGER, di, REQUIRED, INTENT_IN,\n \t      st, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_2s (\"ftell\", GFC_ISYM_FTELL, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"ftell\", GFC_ISYM_FTELL, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_ftell_sub, NULL, gfc_resolve_ftell_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, of, BT_INTEGER, ii, REQUIRED);\n \n-  add_sym_2s (\"hostnm\", GFC_ISYM_HOSTNM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n+  add_sym_2s (\"hostnm\", GFC_ISYM_HOSTNM, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_hostnm_sub, NULL, gfc_resolve_hostnm_sub,\n \t      c, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"kill\", GFC_ISYM_KILL, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU, gfc_check_kill_sub,\n+  add_sym_3s (\"kill\", GFC_ISYM_KILL, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_kill_sub,\n \t      NULL, gfc_resolve_kill_sub, c, BT_INTEGER, di, REQUIRED,\n \t      val, BT_INTEGER, di, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"link\", GFC_ISYM_LINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"link\", GFC_ISYM_LINK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_link_sub, NULL, gfc_resolve_link_sub,\n \t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"perror\", GFC_ISYM_PERROR, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_perror, NULL, gfc_resolve_perror,\n+  add_sym_1s (\"perror\", GFC_ISYM_PERROR, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, gfc_check_perror, NULL, gfc_resolve_perror,\n \t      \"string\", BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_3s (\"rename\", GFC_ISYM_RENAME, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n+  add_sym_3s (\"rename\", GFC_ISYM_RENAME, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_rename_sub, NULL, gfc_resolve_rename_sub,\n \t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_1s (\"sleep\", GFC_ISYM_SLEEP, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_1s (\"sleep\", GFC_ISYM_SLEEP, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_sleep_sub, NULL, gfc_resolve_sleep_sub,\n \t      sec, BT_INTEGER, di, REQUIRED);\n \n-  add_sym_3s (\"fstat\", GFC_ISYM_FSTAT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"fstat\", GFC_ISYM_FSTAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_fstat_sub, NULL, gfc_resolve_fstat_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"lstat\", GFC_ISYM_LSTAT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"lstat\", GFC_ISYM_LSTAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_lstat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"stat\", GFC_ISYM_STAT, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_3s (\"stat\", GFC_ISYM_STAT, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_stat_sub, NULL, gfc_resolve_stat_sub,\n \t      name, BT_CHARACTER, dc, REQUIRED, vl, BT_INTEGER, di, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"signal\", GFC_ISYM_SIGNAL, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n+  add_sym_3s (\"signal\", GFC_ISYM_SIGNAL, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_signal_sub, NULL, gfc_resolve_signal_sub,\n \t      num, BT_INTEGER, di, REQUIRED, han, BT_UNKNOWN, 0, REQUIRED,\n \t      st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s (\"symlnk\", GFC_ISYM_SYMLINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n+  add_sym_3s (\"symlnk\", GFC_ISYM_SYMLINK, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_symlnk_sub, NULL, gfc_resolve_symlnk_sub,\n \t      p1, BT_CHARACTER, dc, REQUIRED, p2, BT_CHARACTER,\n \t      dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"system\", GFC_ISYM_SYSTEM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      NULL, NULL, gfc_resolve_system_sub,\n+  add_sym_2s (\"system\", GFC_ISYM_SYSTEM, CLASS_IMPURE, BT_UNKNOWN,\n+\t      0, GFC_STD_GNU, NULL, NULL, gfc_resolve_system_sub,\n \t      com, BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_3s_intent (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, NO_CLASS,\n+  add_sym_3s_intent (\"system_clock\", GFC_ISYM_SYSTEM_CLOCK, CLASS_IMPURE,\n \t\t     BT_UNKNOWN, 0, GFC_STD_F95,\n \t\t     gfc_check_system_clock, NULL, gfc_resolve_system_clock,\n \t\t     c, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t\t     cr, BT_INTEGER, di, OPTIONAL, INTENT_OUT,\n \t\t     cm, BT_INTEGER, di, OPTIONAL, INTENT_OUT);\n \n-  add_sym_2s (\"ttynam\", GFC_ISYM_TTYNAM, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,\n+  add_sym_2s (\"ttynam\", GFC_ISYM_TTYNAM, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_ttynam_sub, NULL, gfc_resolve_ttynam_sub,\n \t      ut, BT_INTEGER, di, REQUIRED, name, BT_CHARACTER, dc, REQUIRED);\n \n-  add_sym_2s (\"umask\", GFC_ISYM_UMASK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n+  add_sym_2s (\"umask\", GFC_ISYM_UMASK, CLASS_IMPURE, BT_UNKNOWN, 0, GFC_STD_GNU,\n \t      gfc_check_umask_sub, NULL, gfc_resolve_umask_sub,\n \t      msk, BT_INTEGER, di, REQUIRED, old, BT_INTEGER, di, OPTIONAL);\n \n-  add_sym_2s (\"unlink\", GFC_ISYM_UNLINK, NO_CLASS, BT_UNKNOWN, 0, GFC_STD_GNU,\n-\t      gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n+  add_sym_2s (\"unlink\", GFC_ISYM_UNLINK, CLASS_IMPURE, BT_UNKNOWN, 0,\n+\t      GFC_STD_GNU, gfc_check_unlink_sub, NULL, gfc_resolve_unlink_sub,\n \t      \"path\", BT_CHARACTER, dc, REQUIRED, st, BT_INTEGER, di, OPTIONAL);\n }\n "}, {"sha": "d274c6a159b07301569e1b1af93622dbeb94239c", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -278,6 +278,14 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t      continue;\n \t    }\n \n+\t  if (sym->attr.allocatable)\n+\t    {\n+\t      gfc_error (\"Argument '%s' of elemental procedure at %L cannot \"\n+\t\t\t \"have the ALLOCATABLE attribute\", sym->name,\n+\t\t\t &sym->declared_at);\n+\t      continue;\n+\t    }\n+\n \t  if (sym->attr.pointer)\n \t    {\n \t      gfc_error (\"Argument '%s' of elemental procedure at %L cannot \"\n@@ -293,6 +301,14 @@ resolve_formal_arglist (gfc_symbol *proc)\n \t\t\t &sym->declared_at);\n \t      continue;\n \t    }\n+\n+\t  if (sym->attr.intent == INTENT_UNKNOWN)\n+\t    {\n+\t      gfc_error (\"Argument '%s' of elemental procedure '%s' at %L must \"\n+\t\t\t \"have its INTENT specified\", sym->name, proc->name,\n+\t\t\t &sym->declared_at);\n+\t      continue;\n+\t    }\n \t}\n \n       /* Each dummy shall be specified to be scalar.  */\n@@ -12474,15 +12490,15 @@ gfc_pure (gfc_symbol *sym)\n \t  if (sym == NULL)\n \t    return 0;\n \t  attr = sym->attr;\n-\t  if (attr.flavor == FL_PROCEDURE && (attr.pure || attr.elemental))\n+\t  if (attr.flavor == FL_PROCEDURE && attr.pure)\n \t    return 1;\n \t}\n       return 0;\n     }\n \n   attr = sym->attr;\n \n-  return attr.flavor == FL_PROCEDURE && (attr.pure || attr.elemental);\n+  return attr.flavor == FL_PROCEDURE && attr.pure;\n }\n \n "}, {"sha": "138258fab41c0ff541dc159008a2b592c68e7ac1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -1,3 +1,12 @@\n+2010-08-15  Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/45197\n+\t* gfortran.dg/elemental_args_check_3.f90: New test.\n+\t* gfortran.dg/impure_1.f08: New test.\n+\t* gfortran.dg/impure_2.f08: New test.\n+\t* gfortran.dg/impure_3.f90: New test.\n+\t* gfortran.dg/typebound_proc_6.f03: Changed expected error message.\n+\n 2010-08-15  Ira Rosen  <irar@il.ibm.com>\n \n \t* gcc.dg/vect/costmodel/ppc/costmodel-bb-slp-9a.c: New test."}, {"sha": "77111f1c519775f47ede3f5b98e70c29cb4a3a4c", "filename": "gcc/testsuite/gfortran.dg/elemental_args_check_3.f90", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_args_check_3.f90?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -0,0 +1,23 @@\n+! { dg-do compile }\n+\n+! Check for constraints restricting arguments of ELEMENTAL procedures.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+PROGRAM main\n+  IMPLICIT NONE\n+\n+CONTAINS\n+\n+  IMPURE ELEMENTAL SUBROUTINE foobar &\n+    (a, & ! { dg-error \"must be scalar\" }\n+     b, & ! { dg-error \"POINTER attribute\" }\n+     c, & ! { dg-error \"ALLOCATABLE attribute\" }\n+     d) ! { dg-error \"INTENT specified\" }\n+    INTEGER, INTENT(IN) :: a(:)\n+    INTEGER, POINTER, INTENT(IN) :: b\n+    INTEGER, ALLOCATABLE, INTENT(IN) :: c\n+    INTEGER :: d\n+  END SUBROUTINE foobar\n+\n+END PROGRAM main"}, {"sha": "9d09eaa4c79b39e1fb64f045e46af15e65f8e5d0", "filename": "gcc/testsuite/gfortran.dg/impure_1.f08", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_1.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_1.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_1.f08?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -0,0 +1,71 @@\n+! { dg-do run }\n+! { dg-options \"-std=f2008 -fall-intrinsics\" }\n+\n+! PR fortran/45197\n+! Check that IMPURE and IMPURE ELEMENTAL in particular works.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+MODULE m\n+  IMPLICIT NONE\n+\n+  INTEGER, PARAMETER :: n = 5\n+\n+  INTEGER :: i\n+  INTEGER :: arr(n)\n+\n+CONTAINS\n+\n+  ! This ought to work (without any effect).\n+  IMPURE SUBROUTINE foobar ()\n+  END SUBROUTINE foobar\n+\n+  IMPURE ELEMENTAL SUBROUTINE impureSub (a)\n+    INTEGER, INTENT(IN) :: a\n+\n+    arr(i) = a\n+    i = i + 1\n+\n+    PRINT *, a\n+  END SUBROUTINE impureSub\n+\n+END MODULE m\n+\n+PROGRAM main\n+  USE :: m\n+  IMPLICIT NONE\n+\n+  INTEGER :: a(n), b(n), s\n+\n+  a = (/ (i, i = 1, n) /)\n+\n+  ! Traverse in forward order.\n+  s = 0\n+  b = accumulate (a, s)\n+  IF (ANY (b /= (/ 1, 3, 6, 10, 15 /))) CALL abort ()\n+\n+  ! And now backward.\n+  s = 0\n+  b = accumulate (a(n:1:-1), s)\n+  IF (ANY (b /= (/ 5, 9, 12, 14, 15 /))) CALL abort ()\n+\n+  ! Use subroutine.\n+  i = 1\n+  arr = 0\n+  CALL impureSub (a)\n+  IF (ANY (arr /= a)) CALL abort ()\n+\n+CONTAINS\n+\n+  IMPURE ELEMENTAL FUNCTION accumulate (a, s)\n+    INTEGER, INTENT(IN) :: a\n+    INTEGER, INTENT(INOUT) :: s\n+    INTEGER :: accumulate\n+    \n+    s = s + a\n+    accumulate = s\n+  END FUNCTION accumulate\n+\n+END PROGRAM main\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "4bc2ca1fba69b27b219b5b560407d7ecb297c33f", "filename": "gcc/testsuite/gfortran.dg/impure_2.f08", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_2.f08", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_2.f08", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_2.f08?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f2008\" }\n+\n+! PR fortran/45197\n+! Check for errors with IMPURE.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+MODULE m\n+  IMPLICIT NONE\n+\n+CONTAINS\n+\n+  IMPURE PURE SUBROUTINE foobar () ! { dg-error \"must not appear both\" }\n+\n+  PURE ELEMENTAL IMPURE FUNCTION xyz () ! { dg-error \"must not appear both\" }\n+\n+  IMPURE ELEMENTAL SUBROUTINE mysub ()\n+  END SUBROUTINE mysub\n+\n+  PURE SUBROUTINE purified ()\n+    CALL mysub () ! { dg-error \"is not PURE\" }\n+  END SUBROUTINE purified\n+\n+END MODULE m\n+\n+! { dg-final { cleanup-modules \"m\" } }"}, {"sha": "1c0d44428f4504b475ac259aa06e161871621cb2", "filename": "gcc/testsuite/gfortran.dg/impure_3.f90", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fimpure_3.f90?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -0,0 +1,11 @@\n+! { dg-do compile }\n+! { dg-options \"-std=f95\" }\n+\n+! PR fortran/45197\n+! Check that IMPURE gets rejected without F2008.\n+\n+! Contributed by Daniel Kraft, d@domob.eu.\n+\n+IMPURE SUBROUTINE foobar () ! { dg-error \"Fortran 2008\" }\n+\n+IMPURE ELEMENTAL FUNCTION xyz () ! { dg-error \"Fortran 2008\" }"}, {"sha": "266cc02314af655b05350c0df67b549027043491", "filename": "gcc/testsuite/gfortran.dg/typebound_proc_6.f03", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e6c148988cfe585abf4eb2d3f1839f97a83cc1a9/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Ftypebound_proc_6.f03?ref=e6c148988cfe585abf4eb2d3f1839f97a83cc1a9", "patch": "@@ -59,7 +59,7 @@ MODULE testmod\n     PROCEDURE, NOPASS :: pure2 => proc_sub ! { dg-error \"must also be PURE\" }\n     PROCEDURE, NOPASS :: nonpure => proc_pure ! Ok, overridden not pure.\n     PROCEDURE, NOPASS :: elemental1 => proc_elemental ! Ok, both elemental.\n-    PROCEDURE, NOPASS :: elemental2 => proc_nonelem ! { dg-error \"must also be ELEMENTAL\" }\n+    PROCEDURE, NOPASS :: elemental2 => proc_nonelem ! { dg-error \"must also be\" }\n     PROCEDURE, NOPASS :: nonelem1 => proc_nonelem ! Ok, non elemental.\n     PROCEDURE, NOPASS :: nonelem2 => proc_elemental ! { dg-error \"must not be ELEMENTAL\" }\n "}]}