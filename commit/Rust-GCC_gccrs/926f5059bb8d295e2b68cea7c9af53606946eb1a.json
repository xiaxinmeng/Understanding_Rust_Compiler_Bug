{"sha": "926f5059bb8d295e2b68cea7c9af53606946eb1a", "node_id": "C_kwDOANBUbNoAKDkyNmY1MDU5YmI4ZDI5NWUyYjY4Y2VhN2M5YWY1MzYwNjk0NmViMWE", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-06T09:12:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-12-06T10:21:53Z"}, "message": "tree-optimization/104475 - improve access diagnostics\n\nWhen we end up isolating a nullptr path it happens we diagnose\naccesses to offsetted nullptr objects.  The current diagnostics\nhave no good indication that this happens so the following records\nthe fact that our heuristic detected a nullptr based access in\nthe access_ref structure and sets up diagnostics to inform\nof that detail.  The diagnostic itself could probably be\nimproved here but its API is twisted and the necessary object\nisn't passed around.\n\nInstead of just\n\n...bits/atomic_base.h:655:34: warning: 'unsigned int __atomic_fetch_and_4(volatile void*, unsigned int, int)' writing 4 bytes into a region of size 0 overflows the destination [-Wstringop-overflow=]\n\nwe now add\n\nIn member function 'void QFutureInterfaceBase::setThrottled(bool)':\ncc1plus: note: destination object is likely at address zero\n\n\tPR tree-optimization/104475\n\t* pointer-query.h (access_ref::ref_nullptr_p): New flag.\n\t* pointer-query.cc (access_ref::access_ref): Initialize\n\tref_nullptr_p.\n\t(compute_objsize_r): Set ref_nullptr_p if we treat it that way.\n\t(access_ref::inform_access): If ref was treated as nullptr\n\tbased, indicate that.", "tree": {"sha": "e43bf043f89463f1f5e0bfcbebb43215d2b66044", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e43bf043f89463f1f5e0bfcbebb43215d2b66044"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/926f5059bb8d295e2b68cea7c9af53606946eb1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926f5059bb8d295e2b68cea7c9af53606946eb1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/926f5059bb8d295e2b68cea7c9af53606946eb1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/926f5059bb8d295e2b68cea7c9af53606946eb1a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ee2e522523b35ac810bd31c9769b9906f87953", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0ee2e522523b35ac810bd31c9769b9906f87953", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0ee2e522523b35ac810bd31c9769b9906f87953"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "ea6ca684d93a89f8a657424711c983448fe159ae", "filename": "gcc/pointer-query.cc", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926f5059bb8d295e2b68cea7c9af53606946eb1a/gcc%2Fpointer-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926f5059bb8d295e2b68cea7c9af53606946eb1a/gcc%2Fpointer-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.cc?ref=926f5059bb8d295e2b68cea7c9af53606946eb1a", "patch": "@@ -600,8 +600,8 @@ gimple_parm_array_size (tree ptr, wide_int rng[2],\n /* Initialize the object.  */\n \n access_ref::access_ref ()\n-  : ref (), eval ([](tree x){ return x; }), deref (), trail1special (true),\n-    base0 (true), parmarray ()\n+  : ref (), eval ([](tree x){ return x; }), deref (), ref_nullptr_p (false),\n+    trail1special (true), base0 (true), parmarray ()\n {\n   /* Set to valid.  */\n   offrng[0] = offrng[1] = 0;\n@@ -1193,7 +1193,16 @@ access_ref::inform_access (access_mode mode, int ostype /* = 1 */) const\n     loc = EXPR_LOCATION (ref);\n   else if (TREE_CODE (ref) != IDENTIFIER_NODE\n \t   && TREE_CODE (ref) != SSA_NAME)\n-    return;\n+    {\n+      if (TREE_CODE (ref) == INTEGER_CST && ref_nullptr_p)\n+\t{\n+\t  if (mode == access_read_write || mode == access_write_only)\n+\t    inform (loc, \"destination object is likely at address zero\");\n+\t  else\n+\t    inform (loc, \"source object is likely at address zero\");\n+\t}\n+      return;\n+    }\n \n   if (mode == access_read_write || mode == access_write_only)\n     {\n@@ -2280,7 +2289,10 @@ compute_objsize_r (tree ptr, gimple *stmt, bool addr, int ostype,\n \t  if (targetm.addr_space.zero_address_valid (as))\n \t    pref->set_max_size_range ();\n \t  else\n-\t    pref->sizrng[0] = pref->sizrng[1] = 0;\n+\t    {\n+\t      pref->sizrng[0] = pref->sizrng[1] = 0;\n+\t      pref->ref_nullptr_p = true;\n+\t    }\n \t}\n       else\n \tpref->sizrng[0] = pref->sizrng[1] = 0;"}, {"sha": "19a6f15aab259231badca23a6ddb5b4711e5feb0", "filename": "gcc/pointer-query.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/926f5059bb8d295e2b68cea7c9af53606946eb1a/gcc%2Fpointer-query.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/926f5059bb8d295e2b68cea7c9af53606946eb1a/gcc%2Fpointer-query.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpointer-query.h?ref=926f5059bb8d295e2b68cea7c9af53606946eb1a", "patch": "@@ -88,7 +88,7 @@ struct access_ref\n      argument to the minimum.  */\n   offset_int size_remaining (offset_int * = nullptr) const;\n \n-/* Return true if the offset and object size are in range for SIZE.  */\n+  /* Return true if the offset and object size are in range for SIZE.  */\n   bool offset_in_range (const offset_int &) const;\n \n   /* Return true if *THIS is an access to a declared object.  */\n@@ -141,6 +141,9 @@ struct access_ref\n   /* Positive when REF is dereferenced, negative when its address is\n      taken.  */\n   int deref;\n+  /* The following indicates if heuristics interpreted 'ref' is interpreted\n+     as (offsetted) nullptr.  */\n+  bool ref_nullptr_p;\n   /* Set if trailing one-element arrays should be treated as flexible\n      array members.  */\n   bool trail1special;"}]}