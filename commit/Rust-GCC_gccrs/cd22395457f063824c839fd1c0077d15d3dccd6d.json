{"sha": "cd22395457f063824c839fd1c0077d15d3dccd6d", "node_id": "C_kwDOANBUbNoAKGNkMjIzOTU0NTdmMDYzODI0YzgzOWZkMWMwMDc3ZDE1ZDNkY2NkNmQ", "commit": {"author": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-06-06T05:39:19Z"}, "committer": {"name": "liuhongt", "email": "hongtao.liu@intel.com", "date": "2022-06-07T09:32:21Z"}, "message": "Fix insn does not satisfy its constraints: sse2_lshrv1ti3\n\n21114(define_insn_and_split \"ssse3_palignrdi\"\n21115  [(set (match_operand:DI 0 \"register_operand\" \"=y,x,Yv\")\n21116        (unspec:DI [(match_operand:DI 1 \"register_operand\" \"0,0,Yv\")\n21117                    (match_operand:DI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n21118                    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n21119                   UNSPEC_PALIGNR))]\n21120  \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\"\n\nAlternative 2 requires Yw instead of Yv since it's splitted to vpsrldq\nwhich requires AVX512VL & AVX512BW for evex version.\n\ngcc/ChangeLog:\n\n\tPR target/105854\n\t* config/i386/sse.md (ssse3_palignrdi): Change alternative 2\n\tfrom Yv to Yw.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/i386/pr105854.c: New test.", "tree": {"sha": "814dd38d0586a3902d8c2f37ba5d984b9563220d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814dd38d0586a3902d8c2f37ba5d984b9563220d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cd22395457f063824c839fd1c0077d15d3dccd6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd22395457f063824c839fd1c0077d15d3dccd6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd22395457f063824c839fd1c0077d15d3dccd6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd22395457f063824c839fd1c0077d15d3dccd6d/comments", "author": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "committer": {"login": "algebra84", "id": 22926165, "node_id": "MDQ6VXNlcjIyOTI2MTY1", "avatar_url": "https://avatars.githubusercontent.com/u/22926165?v=4", "gravatar_id": "", "url": "https://api.github.com/users/algebra84", "html_url": "https://github.com/algebra84", "followers_url": "https://api.github.com/users/algebra84/followers", "following_url": "https://api.github.com/users/algebra84/following{/other_user}", "gists_url": "https://api.github.com/users/algebra84/gists{/gist_id}", "starred_url": "https://api.github.com/users/algebra84/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/algebra84/subscriptions", "organizations_url": "https://api.github.com/users/algebra84/orgs", "repos_url": "https://api.github.com/users/algebra84/repos", "events_url": "https://api.github.com/users/algebra84/events{/privacy}", "received_events_url": "https://api.github.com/users/algebra84/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00e1e3aa5ae62a991d105d309061d12f6a8764f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c00e1e3aa5ae62a991d105d309061d12f6a8764f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c00e1e3aa5ae62a991d105d309061d12f6a8764f"}], "stats": {"total": 38, "additions": 35, "deletions": 3}, "files": [{"sha": "46f299482f4b2a11ceb4bca453a60dc1cd29f4bc", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd22395457f063824c839fd1c0077d15d3dccd6d/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd22395457f063824c839fd1c0077d15d3dccd6d/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=cd22395457f063824c839fd1c0077d15d3dccd6d", "patch": "@@ -21123,9 +21123,9 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn_and_split \"ssse3_palignrdi\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=y,x,Yv\")\n-\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0,0,Yv\")\n-\t\t    (match_operand:DI 2 \"register_mmxmem_operand\" \"ym,x,Yv\")\n+  [(set (match_operand:DI 0 \"register_operand\" \"=y,x,Yw\")\n+\t(unspec:DI [(match_operand:DI 1 \"register_operand\" \"0,0,Yw\")\n+\t\t    (match_operand:DI 2 \"register_mmxmem_operand\" \"ym,x,Yw\")\n \t\t    (match_operand:SI 3 \"const_0_to_255_mul_8_operand\")]\n \t\t   UNSPEC_PALIGNR))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSSE3\""}, {"sha": "28abef67915e9f6f31d93ee2e0d69c5e4554192b", "filename": "gcc/testsuite/gcc.target/i386/pr105854.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cd22395457f063824c839fd1c0077d15d3dccd6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105854.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cd22395457f063824c839fd1c0077d15d3dccd6d/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105854.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr105854.c?ref=cd22395457f063824c839fd1c0077d15d3dccd6d", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fcaller-saves -mavx512vl -mno-avx512bw\" } */\n+\n+typedef int __attribute__((__vector_size__ (8))) T;\n+typedef signed char __attribute__((__vector_size__ (64))) U;\n+typedef int __attribute__((__vector_size__ (16))) V;\n+typedef long long __attribute__((__vector_size__ (8))) W;\n+typedef int __attribute__((__vector_size__ (64))) X;\n+typedef _Decimal128 __attribute__((__vector_size__ (64))) D;\n+\n+D d;\n+T t;\n+U u;\n+V v;\n+W w;\n+\n+void\n+foo (void)\n+{\n+  T t0 = t;\n+  T t1 = (T) __builtin_ia32_palignr (w, (W) { }, 0);\n+  U u1 = __builtin_shufflevector (u, u, 7, 6, 2, 3, 6, 4, 5, 2, 3, 8, 3, 2, 0,\n+\t\t\t\t  4, 0, 6, 2, 2, 5, 3, 1, 0, 7, 5, 3, 3, 7, 6,\n+\t\t\t\t  2, 0, 4, 5, 4, 1, 7, 7, 0, 6, 1, 9, 3, 0, 3,\n+\t\t\t\t  5, 5, 0, 0, 2, 1, 5, 4, 8, 7,\n+\t\t\t\t  2, 1, 1, 6, 4, 9, 9, 1, 5, 0, 2);\n+  V v1 = v;\n+  d += 0.;\n+  U u0 = u + u + u1 + (U) d;\n+  V v0 = ((X)u0)[0] + v + v;\n+  t = (T) (long) (__int128) v0 + t + t + t1;\n+}"}]}