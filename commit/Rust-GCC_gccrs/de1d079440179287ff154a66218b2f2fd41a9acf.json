{"sha": "de1d079440179287ff154a66218b2f2fd41a9acf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGUxZDA3OTQ0MDE3OTI4N2ZmMTU0YTY2MjE4YjJmMmZkNDFhOWFjZg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2016-10-14T19:04:56Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2016-10-14T19:04:56Z"}, "message": "Make std::bind use std::invoke\n\n\t* include/std/functional (_Mu<A, false, true>, _Mu<A, true, false>):\n\tSimplify forwarding from tuple of references.\n\t(_Maybe_wrap_member_pointer): Remove.\n\t(_Bind::__call, _Bind::__call_c, _Bind::__call_v, _Bind::__call_c_v):\n\tUse std::__invoke.\n\t(_Bind::_Mu_type, _Bind::_Res_type_impl, _Bind::_Res_type)\n\t(_Bind::__dependent, _Bind::_Res_type_cv): New helpers to simplify\n\treturn type deduction.\n\t(_Bind::operator(), _Bind::operator() const): Use new helpers.\n\t(_Bind::operator() volatile, _Bind::operator() const volatile):\n\tLikewise. Add deprecated attribute for C++17 mode.\n\t(_Bind_result::__call): Use std::__invoke.\n\t(_Bind_result::operator() volatile)\n\t(_Bind_result::operator() const volatile): Add deprecated attribute.\n\t(_Bind_helper::__maybe_type, _Bindres_helper::__maybe_type): Remove.\n\t(_Bind_helper, _Bindres_helper): Don't use _Maybe_wrap_member_pointer.\n\t(bind, bind<R>): Don't use __maybe_type.\n\t* src/c++11/compatibility-thread-c++0x.cc\n\t(_Maybe_wrap_member_pointer): Define here for compatibility symbols.\n\t* testsuite/20_util/bind/68912.cc: Don't test volatile-qualification\n\tin C++17 mode.\n\t* testsuite/20_util/bind/cv_quals.cc: Likewise.\n\t* testsuite/20_util/bind/cv_quals_2.cc: Likewise.\n\nFrom-SVN: r241178", "tree": {"sha": "7409d6610897d518f0e50d3ca93a99dd2df1707d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7409d6610897d518f0e50d3ca93a99dd2df1707d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de1d079440179287ff154a66218b2f2fd41a9acf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1d079440179287ff154a66218b2f2fd41a9acf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de1d079440179287ff154a66218b2f2fd41a9acf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de1d079440179287ff154a66218b2f2fd41a9acf/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "064ed55a66a788b1939fb93bd64ea3705e8384c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/064ed55a66a788b1939fb93bd64ea3705e8384c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/064ed55a66a788b1939fb93bd64ea3705e8384c7"}], "stats": {"total": 217, "additions": 119, "deletions": 98}, "files": [{"sha": "2ce59323b07b8d0f43563c9bbcafffad40b0b8f0", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -1,5 +1,29 @@\n 2016-10-14  Jonathan Wakely  <jwakely@redhat.com>\n \n+\t* include/std/functional (_Mu<A, false, true>, _Mu<A, true, false>):\n+\tSimplify forwarding from tuple of references.\n+\t(_Maybe_wrap_member_pointer): Remove.\n+\t(_Bind::__call, _Bind::__call_c, _Bind::__call_v, _Bind::__call_c_v):\n+\tUse std::__invoke.\n+\t(_Bind::_Mu_type, _Bind::_Res_type_impl, _Bind::_Res_type)\n+\t(_Bind::__dependent, _Bind::_Res_type_cv): New helpers to simplify\n+\treturn type deduction.\n+\t(_Bind::operator(), _Bind::operator() const): Use new helpers.\n+\t(_Bind::operator() volatile, _Bind::operator() const volatile):\n+\tLikewise. Add deprecated attribute for C++17 mode.\n+\t(_Bind_result::__call): Use std::__invoke.\n+\t(_Bind_result::operator() volatile)\n+\t(_Bind_result::operator() const volatile): Add deprecated attribute.\n+\t(_Bind_helper::__maybe_type, _Bindres_helper::__maybe_type): Remove.\n+\t(_Bind_helper, _Bindres_helper): Don't use _Maybe_wrap_member_pointer.\n+\t(bind, bind<R>): Don't use __maybe_type.\n+\t* src/c++11/compatibility-thread-c++0x.cc\n+\t(_Maybe_wrap_member_pointer): Define here for compatibility symbols.\n+\t* testsuite/20_util/bind/68912.cc: Don't test volatile-qualification\n+\tin C++17 mode.\n+\t* testsuite/20_util/bind/cv_quals.cc: Likewise.\n+\t* testsuite/20_util/bind/cv_quals_2.cc: Likewise.\n+\n \t* include/std/scoped_allocator (scoped_allocator_adaptor): Forward\n \tpiecewise construction arguments as tuples of references, to avoid\n \tcopies (related to LWG 2511)."}, {"sha": "ad67a1d6dc01bb3c06012d656b46061787d3a0b9", "filename": "libstdc++-v3/include/std/functional", "status": "modified", "additions": 70, "deletions": 98, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ffunctional?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -742,7 +742,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t       const _Index_tuple<_Indexes...>&) const volatile\n \t-> decltype(__arg(declval<_Args>()...))\n \t{\n-\t  return __arg(std::forward<_Args>(std::get<_Indexes>(__tuple))...);\n+\t  return __arg(std::get<_Indexes>(std::move(__tuple))...);\n \t}\n     };\n \n@@ -759,10 +759,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t_Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&&\n \toperator()(const volatile _Arg&, _Tuple& __tuple) const volatile\n \t{\n-\t  using __type\n-\t    = __tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>;\n-\t  return std::forward<__type>(\n-\t      ::std::get<(is_placeholder<_Arg>::value - 1)>(__tuple));\n+\t  return\n+\t    ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));\n \t}\n     };\n \n@@ -781,50 +779,6 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t{ return std::forward<_CVArg>(__arg); }\n     };\n \n-  /**\n-   *  Maps member pointers into instances of _Mem_fn but leaves all\n-   *  other function objects untouched. Used by std::bind(). The\n-   *  primary template handles the non-member-pointer case.\n-   */\n-  template<typename _Tp>\n-    struct _Maybe_wrap_member_pointer\n-    {\n-      typedef _Tp type;\n-\n-      static constexpr const _Tp&\n-      __do_wrap(const _Tp& __x)\n-      { return __x; }\n-\n-      static constexpr _Tp&&\n-      __do_wrap(_Tp&& __x)\n-      { return static_cast<_Tp&&>(__x); }\n-    };\n-\n-  /**\n-   *  Maps member pointers into instances of _Mem_fn but leaves all\n-   *  other function objects untouched. Used by std::bind(). This\n-   *  partial specialization handles the member pointer case.\n-   */\n-  template<typename _Tp, typename _Class>\n-    struct _Maybe_wrap_member_pointer<_Tp _Class::*>\n-    {\n-      typedef _Mem_fn<_Tp _Class::*> type;\n-\n-      static constexpr type\n-      __do_wrap(_Tp _Class::* __pm)\n-      { return type(__pm); }\n-    };\n-\n-  // Specialization needed to prevent \"forming reference to void\" errors when\n-  // bind<void>() is called, because argument deduction instantiates\n-  // _Maybe_wrap_member_pointer<void> outside the immediate context where\n-  // SFINAE applies.\n-  template<>\n-    struct _Maybe_wrap_member_pointer<void>\n-    {\n-      typedef void type;\n-    };\n-\n   // std::get<I> for volatile-qualified tuples\n   template<std::size_t _Ind, typename... _Tp>\n     inline auto\n@@ -858,17 +812,19 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t_Result\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n-\t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n+\t  return std::__invoke(_M_f,\n+\t      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...\n+\t      );\n \t}\n \n       // Call as const\n       template<typename _Result, typename... _Args, std::size_t... _Indexes>\n \t_Result\n \t__call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n-\t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n+\t  return std::__invoke(_M_f,\n+\t      _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...\n+\t      );\n \t}\n \n       // Call as volatile\n@@ -877,8 +833,9 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__call_v(tuple<_Args...>&& __args,\n \t\t _Index_tuple<_Indexes...>) volatile\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n-\t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n+\t  return std::__invoke(_M_f,\n+\t      _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...\n+\t      );\n \t}\n \n       // Call as const volatile\n@@ -887,10 +844,33 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__call_c_v(tuple<_Args...>&& __args,\n \t\t   _Index_tuple<_Indexes...>) const volatile\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n-\t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n+\t  return std::__invoke(_M_f,\n+\t      _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...\n+\t      );\n \t}\n \n+      template<typename _BoundArg, typename _CallArgs>\n+\tusing _Mu_type = decltype(\n+\t    _Mu<typename remove_cv<_BoundArg>::type>()(\n+\t      std::declval<_BoundArg&>(), std::declval<_CallArgs&>()) );\n+\n+      template<typename _Fn, typename _CallArgs, typename... _BArgs>\n+\tusing _Res_type_impl\n+\t  = typename result_of< _Fn&(_Mu_type<_BArgs, _CallArgs>...) >::type;\n+\n+      template<typename _CallArgs>\n+\tusing _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;\n+\n+      template<typename _CallArgs>\n+\tusing __dependent = typename\n+\t  enable_if<bool(tuple_size<_CallArgs>::value+1), _Functor>::type;\n+\n+      template<typename _CallArgs, template<class> class __cv_quals>\n+\tusing _Res_type_cv = _Res_type_impl<\n+\t  typename __cv_quals<__dependent<_CallArgs>>::type,\n+\t  _CallArgs,\n+\t  typename __cv_quals<_Bound_args>::type...>;\n+\n      public:\n       template<typename... _Args>\n \texplicit _Bind(const _Functor& __f, _Args&&... __args)\n@@ -909,10 +889,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n       { }\n \n       // Call unqualified\n-      template<typename... _Args, typename _Result\n-\t= decltype( std::declval<_Functor&>()(\n-\t      _Mu<_Bound_args>()( std::declval<_Bound_args&>(),\n-\t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n+      template<typename... _Args,\n+\t       typename _Result = _Res_type<tuple<_Args...>>>\n \t_Result\n \toperator()(_Args&&... __args)\n \t{\n@@ -922,11 +900,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t}\n \n       // Call as const\n-      template<typename... _Args, typename _Result\n-\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-\t\t       typename add_const<_Functor>::type&>::type>()(\n-\t      _Mu<_Bound_args>()( std::declval<const _Bound_args&>(),\n-\t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n+      template<typename... _Args,\n+\t       typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>\n \t_Result\n \toperator()(_Args&&... __args) const\n \t{\n@@ -935,12 +910,16 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t      _Bound_indexes());\n \t}\n \n+#if __cplusplus > 201402L\n+# define _GLIBCXX_DEPR_BIND \\\n+      [[deprecated(\"std::bind does not support volatile in C++17\")]]\n+#else\n+# define _GLIBCXX_DEPR_BIND\n+#endif\n       // Call as volatile\n-      template<typename... _Args, typename _Result\n-\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-                       typename add_volatile<_Functor>::type&>::type>()(\n-\t      _Mu<_Bound_args>()( std::declval<volatile _Bound_args&>(),\n-\t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n+      template<typename... _Args,\n+\t       typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>\n+\t_GLIBCXX_DEPR_BIND\n \t_Result\n \toperator()(_Args&&... __args) volatile\n \t{\n@@ -950,11 +929,9 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t}\n \n       // Call as const volatile\n-      template<typename... _Args, typename _Result\n-\t= decltype( std::declval<typename enable_if<(sizeof...(_Args) >= 0),\n-                       typename add_cv<_Functor>::type&>::type>()(\n-\t      _Mu<_Bound_args>()( std::declval<const volatile _Bound_args&>(),\n-\t\t\t\t  std::declval<tuple<_Args...>&>() )... ) )>\n+      template<typename... _Args,\n+\t       typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>\n+\t_GLIBCXX_DEPR_BIND\n \t_Result\n \toperator()(_Args&&... __args) const volatile\n \t{\n@@ -991,7 +968,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__disable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n+\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1000,7 +977,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__enable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)\n \t{\n-\t  _M_f(_Mu<_Bound_args>()\n+\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n \t       (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1009,7 +986,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__disable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n+\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n \t\t      (std::get<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1018,7 +995,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__enable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const\n \t{\n-\t  _M_f(_Mu<_Bound_args>()\n+\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n \t       (std::get<_Indexes>(_M_bound_args),  __args)...);\n \t}\n \n@@ -1027,7 +1004,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__disable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n+\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1036,7 +1013,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__enable_if_void<_Res>\n \t__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile\n \t{\n-\t  _M_f(_Mu<_Bound_args>()\n+\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n \t       (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1046,7 +1023,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__call(tuple<_Args...>&& __args,\n \t       _Index_tuple<_Indexes...>) const volatile\n \t{\n-\t  return _M_f(_Mu<_Bound_args>()\n+\t  return std::__invoke(_M_f, _Mu<_Bound_args>()\n \t\t      (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1056,7 +1033,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t__call(tuple<_Args...>&& __args,\n \t       _Index_tuple<_Indexes...>) const volatile\n \t{\n-\t  _M_f(_Mu<_Bound_args>()\n+\t  std::__invoke(_M_f, _Mu<_Bound_args>()\n \t       (__volget<_Indexes>(_M_bound_args), __args)...);\n \t}\n \n@@ -1101,6 +1078,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n       // Call as volatile\n       template<typename... _Args>\n+\t_GLIBCXX_DEPR_BIND\n \tresult_type\n \toperator()(_Args&&... __args) volatile\n \t{\n@@ -1111,6 +1089,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \n       // Call as const volatile\n       template<typename... _Args>\n+\t_GLIBCXX_DEPR_BIND\n \tresult_type\n \toperator()(_Args&&... __args) const volatile\n \t{\n@@ -1119,6 +1098,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n \t      _Bound_indexes());\n \t}\n     };\n+#undef _GLIBCXX_DEPR_BIND\n \n   /**\n    *  @brief Class template _Bind is always a bind expression.\n@@ -1222,9 +1202,7 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     struct _Bind_helper\n     : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>\n     {\n-      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n-\t__maybe_type;\n-      typedef typename __maybe_type::type __func_type;\n+      typedef typename decay<_Func>::type __func_type;\n       typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;\n     };\n \n@@ -1245,19 +1223,15 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     bind(_Func&& __f, _BoundArgs&&... __args)\n     {\n       typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;\n-      typedef typename __helper_type::__maybe_type __maybe_type;\n-      typedef typename __helper_type::type __result_type;\n-      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),\n-\t\t\t   std::forward<_BoundArgs>(__args)...);\n+      return typename __helper_type::type(std::forward<_Func>(__f),\n+\t\t\t\t\t  std::forward<_BoundArgs>(__args)...);\n     }\n \n   template<typename _Result, typename _Func, typename... _BoundArgs>\n     struct _Bindres_helper\n     : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>\n     {\n-      typedef _Maybe_wrap_member_pointer<typename decay<_Func>::type>\n-\t__maybe_type;\n-      typedef typename __maybe_type::type __functor_type;\n+      typedef typename decay<_Func>::type __functor_type;\n       typedef _Bind_result<_Result,\n \t\t\t   __functor_type(typename decay<_BoundArgs>::type...)>\n \ttype;\n@@ -1273,10 +1247,8 @@ _GLIBCXX_MEM_FN_TRAITS(&&, false_type, true_type)\n     bind(_Func&& __f, _BoundArgs&&... __args)\n     {\n       typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;\n-      typedef typename __helper_type::__maybe_type __maybe_type;\n-      typedef typename __helper_type::type __result_type;\n-      return __result_type(__maybe_type::__do_wrap(std::forward<_Func>(__f)),\n-\t\t\t   std::forward<_BoundArgs>(__args)...);\n+      return typename __helper_type::type(std::forward<_Func>(__f),\n+\t\t\t\t\t  std::forward<_BoundArgs>(__args)...);\n     }\n \n   /**"}, {"sha": "066b08b77de8fc686a3a90de1ec838797813e14b", "filename": "libstdc++-v3/src/c++11/compatibility-thread-c++0x.cc", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcompatibility-thread-c%2B%2B0x.cc?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -116,6 +116,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // Replaced with inline definition in gcc-4.8.0\n   __future_base::_Async_state_common::~_Async_state_common() { _M_join(); }\n \n+  template<typename _Tp>\n+    struct _Maybe_wrap_member_pointer;\n+\n+  template<typename _Tp, typename _Class>\n+    struct _Maybe_wrap_member_pointer<_Tp _Class::*>\n+    {\n+      typedef _Mem_fn<_Tp _Class::*> type;\n+\n+      static constexpr type\n+      __do_wrap(_Tp _Class::* __pm)\n+      { return type(__pm); }\n+    };\n+\n   template<typename _Signature>\n     struct _Bind_simple;\n "}, {"sha": "a32b44be0ade31c629b898032de98d297c277a81", "filename": "libstdc++-v3/testsuite/20_util/bind/68912.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2F68912.cc?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -45,8 +45,10 @@ void test01()\n   A res = bound(1.0);\n   const auto bound_c = bound;\n   B res_c = bound_c(1.0);\n+#if __cplusplus <= 201402L\n   volatile auto bound_v = bound;\n   C res_v = bound_v(1.0);\n   volatile const auto bound_cv = bound;\n   D res_cv = bound_cv(1.0);\n+#endif\n }"}, {"sha": "5165f87b49acc76221dbf71b5cd08e8379367f35", "filename": "libstdc++-v3/testsuite/20_util/bind/cv_quals.cc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals.cc?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -48,11 +48,13 @@ void test01()\n   const auto b1 = std::bind(X());\n   VERIFY( b1() == 1 );\n \n+#if __cplusplus <= 201402L\n   volatile auto b2 = std::bind(X());\n   VERIFY( b2() == 2 );\n \n   const volatile auto b3 = std::bind(X());\n   VERIFY( b3() == 3 );\n+#endif\n }\n \n void test02()\n@@ -63,11 +65,13 @@ void test02()\n   const auto b1 = std::bind<int>(X());\n   VERIFY( b1() == 1 );\n \n+#if __cplusplus <= 201402L\n   volatile auto b2 = std::bind<int>(X());\n   VERIFY( b2() == 2 );\n \n   const volatile auto b3 = std::bind<int>(X());\n   VERIFY( b3() == 3 );\n+#endif\n }\n \n void test03()\n@@ -78,11 +82,13 @@ void test03()\n   const auto b1 = std::bind(X(), _1, 0, _2);\n   VERIFY( b1(0, 0) == 1 );\n \n+#if __cplusplus <= 201402L\n   volatile auto b2 = std::bind(X(), _1, _2, 0);\n   VERIFY( b2(0, 0) == 2 );\n \n   const volatile auto b3 = std::bind(X(), _1, 0, _2);\n   VERIFY( b3(0, 0) == 3 );\n+#endif\n }\n \n void test04()\n@@ -93,11 +99,13 @@ void test04()\n   const auto b1 = std::bind<int>(X(), _1, 0, _2);\n   VERIFY( b1(0, 0) == 1 );\n \n+#if __cplusplus <= 201402L\n   volatile auto b2 = std::bind<int>(X(), _1, _2, 0);\n   VERIFY( b2(0, 0) == 2 );\n \n   const volatile auto b3 = std::bind<int>(X(), _1, 0, _2);\n   VERIFY( b3(0, 0) == 3 );\n+#endif\n }\n \n "}, {"sha": "cd9b2042f55fc79835fb30f9f4b5f166db977520", "filename": "libstdc++-v3/testsuite/20_util/bind/cv_quals_2.cc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de1d079440179287ff154a66218b2f2fd41a9acf/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fbind%2Fcv_quals_2.cc?ref=de1d079440179287ff154a66218b2f2fd41a9acf", "patch": "@@ -33,11 +33,13 @@ void test01()\n   const auto b0 = std::bind(X());\n   VERIFY( b0() == 0 );\n \n+#if __cplusplus <= 201402L\n   volatile auto b1 = std::bind(X());\n   VERIFY( b1() == 1 );\n \n   const volatile auto b2 = std::bind(X());\n   VERIFY( b2() == 2 );\n+#endif\n }\n \n int main()"}]}