{"sha": "5985c7a6f98e57ae61caca014aa668966f29f135", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTk4NWM3YTZmOThlNTdhZTYxY2FjYTAxNGFhNjY4OTY2ZjI5ZjEzNQ==", "commit": {"author": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-11-14T20:05:34Z"}, "committer": {"name": "Fariborz Jahanian", "email": "fjahanian@gcc.gnu.org", "date": "2003-11-14T20:05:34Z"}, "message": "Fix bug saving vararg registers on stack in -mpowerpc64 mode.\n\nApproved by: David Edelsohn.\n\nFrom-SVN: r73616", "tree": {"sha": "b3715676311e7295d9559424ffeda2afa4d54a77", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b3715676311e7295d9559424ffeda2afa4d54a77"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5985c7a6f98e57ae61caca014aa668966f29f135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5985c7a6f98e57ae61caca014aa668966f29f135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5985c7a6f98e57ae61caca014aa668966f29f135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5985c7a6f98e57ae61caca014aa668966f29f135/comments", "author": null, "committer": null, "parents": [{"sha": "e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6d98cb0a1ac15cb463b0711a2177ef7de1f5941"}], "stats": {"total": 36, "additions": 34, "deletions": 2}, "files": [{"sha": "0b2c3bdde4798ce1f72ea5b80b5b56ac30716912", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5985c7a6f98e57ae61caca014aa668966f29f135/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5985c7a6f98e57ae61caca014aa668966f29f135/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5985c7a6f98e57ae61caca014aa668966f29f135", "patch": "@@ -395,6 +395,7 @@ static rtx rs6000_spe_function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree);\n static rtx rs6000_mixed_function_arg (CUMULATIVE_ARGS *,\n \t\t\t\t      enum machine_mode, tree, int);\n+static void rs6000_move_block_from_reg(int regno, rtx x, int nregs);\n static void setup_incoming_varargs (CUMULATIVE_ARGS *,\n \t\t\t\t    enum machine_mode, tree,\n \t\t\t\t    int *, int);\n@@ -4374,6 +4375,37 @@ function_arg_pass_by_reference (CUMULATIVE_ARGS *cum ATTRIBUTE_UNUSED,\n     }\n   return type && int_size_in_bytes (type) < 0;\n }\n+\n+static void\n+rs6000_move_block_from_reg(int regno, rtx x, int nregs)\n+{\n+  int i;\n+  enum machine_mode reg_mode = TARGET_32BIT ? SImode : DImode;\n+\n+  if (nregs == 0)\n+    return;\n+\n+    for (i = 0; i < nregs; i++)\n+    {\n+      rtx tem = adjust_address_nv (x, reg_mode, i*GET_MODE_SIZE(reg_mode));\n+      if (reload_completed)\n+      {\n+\tif (! strict_memory_address_p (reg_mode, XEXP (tem, 0)))\n+\t  tem = NULL_RTX;\n+\telse\n+\t  tem = simplify_gen_subreg (reg_mode, x, BLKmode, \n+\t\t\t\t     i * GET_MODE_SIZE(reg_mode));\n+      }\n+      else\n+\ttem = replace_equiv_address (tem, XEXP (tem, 0));\n+\n+      if (tem == NULL_RTX)\n+        abort ();\n+\n+      emit_move_insn (tem, gen_rtx_REG (reg_mode, regno + i));\n+    }\n+}\n+\n \f\n /* Perform any needed actions needed for a function that is receiving a\n    variable number of arguments. \n@@ -4431,8 +4463,8 @@ setup_incoming_varargs (CUMULATIVE_ARGS *cum, enum machine_mode mode,\n       set_mem_alias_set (mem, set);\n       set_mem_align (mem, BITS_PER_WORD);\n \n-      move_block_from_reg (GP_ARG_MIN_REG + first_reg_offset, mem,\n-\t\t\t   GP_ARG_NUM_REG - first_reg_offset);\n+      rs6000_move_block_from_reg (GP_ARG_MIN_REG + first_reg_offset, mem, \n+\t\t\t          GP_ARG_NUM_REG - first_reg_offset);\n     }\n \n   /* Save FP registers if needed.  */"}]}