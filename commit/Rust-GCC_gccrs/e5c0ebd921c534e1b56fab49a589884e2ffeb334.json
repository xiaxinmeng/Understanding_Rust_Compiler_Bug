{"sha": "e5c0ebd921c534e1b56fab49a589884e2ffeb334", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTVjMGViZDkyMWM1MzRlMWI1NmZhYjQ5YTU4OTg4NGUyZmZlYjMzNA==", "commit": {"author": {"name": "Ralf Wildenhues", "email": "Ralf.Wildenhues@gmx.de", "date": "2006-12-16T17:16:04Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-12-16T17:16:04Z"}, "message": "howto.html: Fix typos.\n\n2006-12-16  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n\t\n\t* docs/html/27_io/howto.html: Fix typos.\n\t* docs/html/24_iterators/howto.html: Likewise.\n\t* docs/html/18_support/howto.html: Likewise.\n\t* docs/html/21_strings/howto.html: Likewise.\n\t* docs/html/ext/howto.html: Likewise.\n\t* docs/html/ext/ballocator_doc.html: Likewise.\n\t* docs/html/17_intro/porting-howto.xml: Likewise.\n\t* docs/html/17_intro/howto.html: Likewise.\n\t* docs/html/22_locale/howto.html: Likewise.\n\t* docs/html/faq/index.html: Likewise.\n\t* docs/doxygen/tables.html: Likewise.\n\nFrom-SVN: r119964", "tree": {"sha": "4f11e4dd5e735c7e172b833006ec9352f5a9d2b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f11e4dd5e735c7e172b833006ec9352f5a9d2b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5c0ebd921c534e1b56fab49a589884e2ffeb334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c0ebd921c534e1b56fab49a589884e2ffeb334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5c0ebd921c534e1b56fab49a589884e2ffeb334", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5c0ebd921c534e1b56fab49a589884e2ffeb334/comments", "author": null, "committer": null, "parents": [{"sha": "b3b433c507af133b95bfdbbd33338139e3d15345", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3b433c507af133b95bfdbbd33338139e3d15345", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3b433c507af133b95bfdbbd33338139e3d15345"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "c89db7477e9b76c68365554cf25fc99789dd6a13", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -1,3 +1,17 @@\n+2006-12-16  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n+\n+\t* docs/html/27_io/howto.html: Fix typos.\n+\t* docs/html/24_iterators/howto.html: Likewise.\n+\t* docs/html/18_support/howto.html: Likewise.\n+\t* docs/html/21_strings/howto.html: Likewise.\n+\t* docs/html/ext/howto.html: Likewise.\n+\t* docs/html/ext/ballocator_doc.html: Likewise.\n+\t* docs/html/17_intro/porting-howto.xml: Likewise.\n+\t* docs/html/17_intro/howto.html: Likewise.\n+\t* docs/html/22_locale/howto.html: Likewise.\n+\t* docs/html/faq/index.html: Likewise.\n+\t* docs/doxygen/tables.html: Likewise.\n+\n 2006-12-13  Ian Lance Taylor  <iant@google.com>\n \n \tPR c++/19564"}, {"sha": "74ac3e2165d1100f1d021bbdd2969b9c135dcb92", "filename": "libstdc++-v3/docs/doxygen/tables.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fdoxygen%2Ftables.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -18,7 +18,7 @@ <h1>Tables</h1>\n </p>\n \n <p>We will not try to duplicate all of the surrounding text (footnotes,\n-   explanations, etc) from the standard, because that would also entail a\n+   explanations, etc.) from the standard, because that would also entail a\n    duplication of effort.  Some of the surrounding text has been paraphrased\n    here for clarity.  If you are uncertain about the meaning or interpretation\n    of these notes, consult a good textbook, and/or purchase your own copy of\n@@ -589,7 +589,7 @@ <h1>Tables</h1>\n <tr>\n <td>a.clear()</td>\n <td>void</td>\n-<td>erases everthing; post: size() == 0</td>\n+<td>erases everything; post: size() == 0</td>\n <td>linear</td> <!-- DR 224 -->\n </tr>\n "}, {"sha": "631e58fe0b944b12dfc3f64341a6beb302eab07a", "filename": "libstdc++-v3/docs/html/17_intro/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -189,7 +189,7 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n    <p>We do so here, for the C++ library only.  Behavior of the compiler,\n       linker, runtime loader, and other elements of &quot;the\n       implementation&quot; are documented elsewhere.  Everything listed in\n-      Annex B, Implemenation Qualities, are also part of the compiler, not\n+      Annex B, Implementation Qualities, are also part of the compiler, not\n       the library.\n    </p>\n    <p>For each entry, we give the section number of the standard, when\n@@ -256,7 +256,7 @@ <h2><a name=\"5\">Behavior specific to libstdc++-v3</a></h2>\n       for what does exist.\n    </p>\n    <p><strong>[22.*]</strong> Anything and everything we have on locale\n-      implemenation will be described\n+      implementation will be described\n       <a href=\"../22_locale/howto.html\">over here</a>.\n    </p>\n    <p><strong>[26.2.8]/9</strong> I have no idea what"}, {"sha": "cea9111318d1fc4faec76fd087c0c070915ffb6b", "filename": "libstdc++-v3/docs/html/17_intro/porting-howto.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F17_intro%2Fporting-howto.xml?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -363,7 +363,7 @@ o clean up the section-numbering\n \t  <paramdef>int <parameter>size</parameter></paramdef>\n \t</funcprototype>\n       </funcsynopsis>\n-      but the the signature of this constructor has changed often, and\n+      but the signature of this constructor has changed often, and\n       it might change again. For the current state of this, check\n       <ulink url=\"../ext/howto.html\">the howto for extensions</ulink>.\n     </para>"}, {"sha": "7b1dcb8076123126648eb4083786fcf7feb68739", "filename": "libstdc++-v3/docs/html/18_support/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F18_support%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -125,7 +125,7 @@ <h2><a name=\"2\">Implementation properties</a></h2>\n    <h3><code>&lt;limits&gt;</code></h3>\n    <p>This header mainly defines traits classes to give access to various\n    implementation defined-aspects of the fundamental types.  The\n-   traits classes -- fourteen in total -- are all specilizations of the \n+   traits classes -- fourteen in total -- are all specializations of the \n    template class <code>numeric_limits</code>, documented\n    <a href=\"http://gcc.gnu.org/onlinedocs/libstdc++/latest-doxygen/structstd_1_1numeric__limits.html\">here</a>\n    and defined as follows:"}, {"sha": "a35666739b2dfbba6b8d8dd964bc6f6a6c05c1f3", "filename": "libstdc++-v3/docs/html/21_strings/howto.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F21_strings%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -133,7 +133,7 @@ <h2><a name=\"1\">MFC's CString</a></h2>\n          <li>Microsoft ships the source to CString (in the files\n              MFC\\SRC\\Str{core,ex}.cpp), so you could fix the allocation\n              bug and rebuild your MFC libraries.\n-             <em><strong>Note:</strong> It looks like the the CString shipped\n+             <em><strong>Note:</strong> It looks like the CString shipped\n              with VC++6.0 has fixed this, although it may in fact have been\n              one of the VC++ SPs that did it.</em>\n          </li>\n@@ -252,7 +252,7 @@ <h2><a name=\"3\">Breaking a C++ string into tokens</a></h2>\n       <code>ls.size()</code> will return how many tokens there were.\n    </p>\n    <p>As always, there is a price paid here, in that stringtok is not\n-      as fast as strtok.  The other benefits usually outweight that, however.\n+      as fast as strtok.  The other benefits usually outweigh that, however.\n       <a href=\"stringtok_std_h.txt\">Another version of stringtok is given\n       here</a>, suggested by Chris King and tweaked by Petr Prikryl,\n       and this one uses the"}, {"sha": "3d19bb69a62e22b2d77a2d05a6301fc9f7c3cfd1", "filename": "libstdc++-v3/docs/html/22_locale/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F22_locale%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -137,7 +137,7 @@ <h2><a name=\"7\">Correct Transformations</a></h2>\n       Fine, you asked for it...)\n    </p>\n    <p>The task of changing the case of a letter or classifying a character\n-      as numeric, graphical, etc, all depends on the cultural context of the\n+      as numeric, graphical, etc., all depends on the cultural context of the\n       program at runtime.  So, first you must take the portability question\n       into account.  Once you have localized the program to a particular\n       natural language, only then can you perform the specific task."}, {"sha": "43d199d7454de2c3926598ad95c9f764d514d875", "filename": "libstdc++-v3/docs/html/24_iterators/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F24_iterators%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -67,7 +67,7 @@ <h2><a name=\"1\">They ain't pointers!</a></h2>\n       things as it would be doing if you had hand-coded it yourself (for\n       the 273rd time).\n    </p>\n-   <p>How much overhead <em>is</em> there when using an interator class?\n+   <p>How much overhead <em>is</em> there when using an iterator class?\n       Very little.  Most of the layering classes contain nothing but\n       typedefs, and typedefs are &quot;meta-information&quot; that simply\n       tell the compiler some nicknames; they don't create code.  That"}, {"sha": "14720537b9586fce98ee99ac52d152bf06e66e23", "filename": "libstdc++-v3/docs/html/27_io/howto.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2F27_io%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -102,13 +102,13 @@ <h2><a name=\"1\">Copying a file</a></h2>\n       blank lines and only &quot;Thequickbrownfox...&quot;.  With\n       libraries that do not define that operator, IN (or one of IN's\n       member pointers) sometimes gets converted to a void*, and the output\n-      file then contains a perfect text representation of a hexidecimal\n+      file then contains a perfect text representation of a hexadecimal\n       address (quite a big surprise).  Others don't compile at all.\n    </p>\n    <p>Also note that none of this is specific to o<b>*f*</b>streams. \n       The operators shown above are all defined in the parent \n       basic_ostream class and are therefore available with all possible\n-      descendents.\n+      descendants.\n    </p>\n    <p>Return <a href=\"#top\">to top of page</a> or\n       <a href=\"../faq/index.html\">to the FAQ</a>.\n@@ -569,7 +569,7 @@ <h3>The future</h3>\n       be built and included in libstdc++.\n    </p>\n    <h3>Alternatives</h3>\n-   <p>Don't forget that other cstdio implemenations are possible.  You could\n+   <p>Don't forget that other cstdio implementations are possible.  You could\n       easily write one to perform your own forms of locking, to solve your\n       &quot;interesting&quot; problems.\n    </p>\n@@ -643,7 +643,7 @@ <h2><a name=\"10\">Which header?</a></h2>\n       interfaces, then you only need to use the appropriate interface header.\n    </p>\n    <p><strong>&lt;iomanip&gt;</strong> provides &quot;extractors and inserters\n-      that alter information maintained by class ios_base and its dervied\n+      that alter information maintained by class ios_base and its derived\n       classes,&quot; such as std::setprecision and std::setw.  If you need\n       to write expressions like <code>os &lt;&lt; setw(3);</code> or\n       <code>is &gt;&gt; setbase(8);</code>, you must include &lt;iomanip&gt;."}, {"sha": "fa09584cf7806931d2ab0bb62092237918186324", "filename": "libstdc++-v3/docs/html/ext/ballocator_doc.html", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fballocator_doc.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fballocator_doc.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fballocator_doc.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -40,7 +40,7 @@ <h1 style=\"text-align: center;\">Bitmap Allocator</h1>\n <hr style=\"width: 100%; height: 2px;\"><br>\n The macro __GTHREADS decides whether to use Mutex Protection around\n every allocation/deallocation. The state of the macro is picked up\n-automatically from the gthr abstration layer.<br>\n+automatically from the gthr abstraction layer.<br>\n <br>\n <hr style=\"width: 100%; height: 2px;\">\n <h3 style=\"text-align: center;\">What is the Free List Store?</h3>\n@@ -125,11 +125,11 @@ <h3 style=\"text-align: center;\">How does the allocate function Work?</h3>\n Suppose n == 1, then the allocator does the following:<br>\n <br>\n <ol>\n-  <li>Checks to see whether the a free block exists somewhere in a\n+  <li>Checks to see whether a free block exists somewhere in a\n region of memory close to the last satisfied request. If so, then that\n block is marked as allocated in the bit map and given to the user. If\n not, then (2) is executed.</li>\n-  <li>Is there a free block anywhere after the current block right upto\n+  <li>Is there a free block anywhere after the current block right up to\n the end of the memory that we have? If so, that block is found, and the\n same procedure is applied as above, and returned to the user. If not,\n then (3) is executed.</li>\n@@ -275,7 +275,7 @@ <h3 style=\"text-align: center;\">Data Layout for a Super Block:</h3>\n Another issue would be whether to keep the all bitmaps in a separate\n area in memory, or to keep them near the actual blocks that will be\n given out or allocated for the client. After some testing, I've decided\n-to keep these bitmaps close to the actual blocks. this will help in 2\n+to keep these bitmaps close to the actual blocks. This will help in 2\n ways. <br>\n <br>\n <ol>\n@@ -310,7 +310,7 @@ <h3 style=\"text-align: center;\">Data Layout for a Super Block:</h3>\n minimize them would be a good thing to do at the cost of a little bit\n of memory.<br>\n <br>\n-Another thing to be noted is the the pool size will double every time\n+Another thing to be noted is the pool size will double every time\n the internal pool gets exhausted, and all the free blocks have been\n given away. The initial size of the pool would be sizeof(size_t) x 8\n which is the number of bits in an integer, which can fit exactly\n@@ -348,7 +348,7 @@ <h3 style=\"text-align: center;\">Data Layout for a Super Block:</h3>\n single objects to be given, there will be '32 x (2^3)' bits present.\n Each\n 32 bits managing the allocated / free status for 32 blocks. Since each\n-size_t contains 32-bits, one size_t can manage upto 32\n+size_t contains 32-bits, one size_t can manage up to 32\n blocks' status. Each bit-map is made up of a number of size_t,\n whose exact number for a super-block of a given size I have just\n mentioned.<br>\n@@ -364,19 +364,19 @@ <h3 style=\"text-align: center;\">Data Layout for a Super Block:</h3>\n 32 bits at a time to check whether there is at lease one free block in\n those 32 blocks by testing for equality with (0). Now, the allocate\n function will given a memory block find the corresponding bit in the\n-bitmap, and will reset it (ie. make it re-set (0)). And when the\n+bitmap, and will reset it (i.e., make it re-set (0)). And when the\n deallocate function is called, it will again set that bit after\n locating it to indicate that that particular block corresponding to\n this bit in the bit-map is not being used by anyone, and may be used to\n satisfy future requests.<br>\n <br>\n-eg: Consider a bit-map of 64-bits as represented below:<br>\n+e.g.: Consider a bit-map of 64-bits as represented below:<br>\n 1111111111111111111111111111111111111111111111111111111111111111<br>\n <br>\n Now, when the first request for allocation of a single object comes\n along, the first block in address order is returned. And since the\n bit-maps in the reverse order to that of the address order, the last\n-bit(LSB if the bit-map is considered as a binary word of 64-bits) is\n+bit (LSB if the bit-map is considered as a binary word of 64-bits) is\n re-set to 0.<br>\n <br>\n The bit-map now looks like this:<br>\n@@ -400,7 +400,7 @@ <h3 style=\"text-align: center;\">Data Layout for a Super Block:</h3>\n k =&gt; The constant overhead per node. eg. for list, it is 8 bytes,\n and for map it is 12 bytes.<br>\n c =&gt; The size of the base type on which the map/list is\n-instantiated. Thus, suppose the the type1 is int and type2 is double,\n+instantiated. Thus, suppose the type1 is int and type2 is double,\n they are related by the relation sizeof(double) == 2*sizeof(int). Thus,\n all types must have this double size relation for this formula to work\n properly.<br>"}, {"sha": "888591ab27d528ca84383940b0b1405563584c05", "filename": "libstdc++-v3/docs/html/ext/howto.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Fext%2Fhowto.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -387,7 +387,7 @@ <h2><a name=\"5\">LWG Issues</a></h2>\n         <em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em>\n     </dt>\n     <dd>If nothing is extracted into the string, <code>op&gt;&gt;</code> now\n-        sets <code>failbit</code> (which can cause an exception, etc, etc).\n+        sets <code>failbit</code> (which can cause an exception, etc., etc.).\n     </dd>\n \n     <dt><a href=\"lwg-defects.html#214\">214</a>:"}, {"sha": "3c907beff9c0b0e3dbdab5db9a52eace06687039", "filename": "libstdc++-v3/docs/html/faq/index.html", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5c0ebd921c534e1b56fab49a589884e2ffeb334/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdocs%2Fhtml%2Ffaq%2Findex.html?ref=e5c0ebd921c534e1b56fab49a589884e2ffeb334", "patch": "@@ -250,7 +250,7 @@ <h2><a name=\"1_7\">1.7 What happened to libg++?  I need that!</a></h2>\n          in the implementation, however handy they are.  (The extensions\n          provided in the SGI STL aren't maintained by us and don't get\n          a lot of our attention, because they don't require a lot of our\n-         time.)  It is entirely plausable that the &quot;useful stuff&quot;\n+         time.)  It is entirely plausible that the &quot;useful stuff&quot;\n          from libg++ might be extracted into an updated utilities library,\n          but nobody has started such a project yet.\n       </p>\n@@ -504,7 +504,7 @@ <h2><a name=\"3_5\">3.5 <code>_XOPEN_SOURCE</code> / <code>_GNU_SOURCE</code>\n       <p>These macros are typically used in C library headers, guarding new\n          versions of functions from their older versions.  The C++ standard\n          library includes the C standard library, but it requires the C90\n-         version, which for backwards-compatability reasons is often not the\n+         version, which for backwards-compatibility reasons is often not the\n          default for many vendors.\n       </p>\n       <p>More to the point, the C++ standard requires behavior which is only\n@@ -592,7 +592,7 @@ <h2><a name=\"3_10\">3.10 MIPS atomic operations</a></h2>\n \n <hr />\n <h1><a name=\"4_0\">4.0 Known Bugs and Non-Bugs</a></h1>\n-   <em>Note that this section can get rapdily outdated -- such is the\n+   <em>Note that this section can get rapidly outdated -- such is the\n        nature of an open-source project.  For the latest information, join\n        the mailing list or look through recent archives.   The RELEASE-\n        NOTES and BUGS files are generally kept up-to-date.</em>\n@@ -1006,10 +1006,10 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n       </p>\n \n       <p><strong>Function objects - Complete -</strong>\n-         Function return types (i.e, result_of), the functions template\n+         Function return types (i.e., result_of), the functions template\n \t mem_fn (a generalization of mem_fun and mem_fun_red), function\n-\t object binders (e.g, bind, a generalization of bind1st and bind2nd),\n-\t and polymorhpic function wrappers (e.g, class template function).\n+\t object binders (e.g., bind, a generalization of bind1st and bind2nd),\n+\t and polymorphic function wrappers (e.g, class template function).\n       </p>\n \n       <p><strong>Type traits - Complete -</strong>\n@@ -1019,7 +1019,7 @@ <h2><a name=\"5_5\">5.5 Does libstdc++ support TR1?</a></h2>\n       </p>\n \n       <p><strong>A random number engine - Complete -</strong>\n-         This library contains randow number generators with several different\n+         This library contains random number generators with several different\n \t choices of distribution.\n       </p>\n "}]}