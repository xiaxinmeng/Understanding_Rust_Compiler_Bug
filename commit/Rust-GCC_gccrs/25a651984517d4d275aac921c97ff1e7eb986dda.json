{"sha": "25a651984517d4d275aac921c97ff1e7eb986dda", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjVhNjUxOTg0NTE3ZDRkMjc1YWFjOTIxYzk3ZmYxZTdlYjk4NmRkYQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-05-25T11:36:06Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-05-25T11:36:06Z"}, "message": "arm-protos.h (arm_encode_call_attribute): Delete.\n\ngcc/\n\t* config/arm/arm-protos.h (arm_encode_call_attribute): Delete.\n\t(arm_is_longcall_p): Rename to...\n\t(arm_is_long_call_p): ...this.  Take a single tree argument and\n\treturn a bool.\n\t* config/arm/arm.h (CALL_SHORT, CALL_LONG, CALL_NORMAL): Delete.\n\t(CUMULATIVE_ARGS): Remove call_cookie.\n\t(SHORT_CALL_FLAG_CHAR, LONG_CALL_FLAG_CHAR, ENCODED_SHORT_CALL_ATTR_P)\n\t(ENCODED_LONG_CALL_ATTR_P): Delete.\n\t(ARM_NAME_ENCODING_LENGTHS): Remove SHORT_CALL_FLAG_CHAR and\n\tLONG_CALL_FLAG_CHAR cases.\n\t(ARM_DECLARE_FUNCTION_SIZE): Delete.\n\t* config/arm/elf.h (ASM_DECLARE_FUNCTION_SIZE): Don't use\n\tARM_DECLARE_FUNCTION_SIZE.\n\t* config/arm/arm.c (arm_init_cumulative_args): Don't set call_cookie.\n\t(arm_function_arg): Return const0_rtx for VOIDmode arguments.\n\t(arm_encode_call_attribute, current_file_function_operand): Delete.\n\t(arm_function_in_section_p): New function.\n\t(arm_is_longcall_p): Rename to...\n\t(arm_is_long_call_p): ...this.  Take the target function as a single\n\targument and return a bool.  Do not rely on call cookies.  Check\n\twhether the target symbol is in the same section as the current\n\tfunction, not just the same compilation unit.\n\t(arm_function_ok_for_sibcall): Use arm_is_long_call_p.\n\t(arm_encode_section_info): Don't encode a call type.\n\t* config/arm/arm.md (call, call_value): Update calls to\n\tarm_is_long(_)call_p.  Simplify logic.\n\t(*call_symbol, *call_value_symbol, *call_insn, *call_value_insn):\n\tUpdate calls to arm_is_long(_)call_p.\n\ngcc/testsuite/\n\t* gcc.target/arm/long-calls-1.c: New test.\n\t* gcc.target/arm/long-calls-2.c: Likewise.\n\t* gcc.target/arm/long-calls-3.c: Likewise.\n\t* gcc.target/arm/long-calls-4.c: Likewise.\n\nFrom-SVN: r125060", "tree": {"sha": "32f0047c9c52a73554ca9691e5f1d307f3ff645f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32f0047c9c52a73554ca9691e5f1d307f3ff645f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/25a651984517d4d275aac921c97ff1e7eb986dda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a651984517d4d275aac921c97ff1e7eb986dda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a651984517d4d275aac921c97ff1e7eb986dda", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a651984517d4d275aac921c97ff1e7eb986dda/comments", "author": null, "committer": null, "parents": [{"sha": "aaee3e893d94e72bc81464c88d8e739a0f220969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aaee3e893d94e72bc81464c88d8e739a0f220969", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aaee3e893d94e72bc81464c88d8e739a0f220969"}], "stats": {"total": 757, "additions": 581, "deletions": 176}, "files": [{"sha": "bebad9ae1d47e6491a40a039141457aae0b918f5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -1,3 +1,34 @@\n+2007-05-25  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/arm/arm-protos.h (arm_encode_call_attribute): Delete.\n+\t(arm_is_longcall_p): Rename to...\n+\t(arm_is_long_call_p): ...this.  Take a single tree argument and\n+\treturn a bool.\n+\t* config/arm/arm.h (CALL_SHORT, CALL_LONG, CALL_NORMAL): Delete.\n+\t(CUMULATIVE_ARGS): Remove call_cookie.\n+\t(SHORT_CALL_FLAG_CHAR, LONG_CALL_FLAG_CHAR, ENCODED_SHORT_CALL_ATTR_P)\n+\t(ENCODED_LONG_CALL_ATTR_P): Delete.\n+\t(ARM_NAME_ENCODING_LENGTHS): Remove SHORT_CALL_FLAG_CHAR and\n+\tLONG_CALL_FLAG_CHAR cases.\n+\t(ARM_DECLARE_FUNCTION_SIZE): Delete.\n+\t* config/arm/elf.h (ASM_DECLARE_FUNCTION_SIZE): Don't use\n+\tARM_DECLARE_FUNCTION_SIZE.\n+\t* config/arm/arm.c (arm_init_cumulative_args): Don't set call_cookie.\n+\t(arm_function_arg): Return const0_rtx for VOIDmode arguments.\n+\t(arm_encode_call_attribute, current_file_function_operand): Delete.\n+\t(arm_function_in_section_p): New function.\n+\t(arm_is_longcall_p): Rename to...\n+\t(arm_is_long_call_p): ...this.  Take the target function as a single\n+\targument and return a bool.  Do not rely on call cookies.  Check\n+\twhether the target symbol is in the same section as the current\n+\tfunction, not just the same compilation unit.\n+\t(arm_function_ok_for_sibcall): Use arm_is_long_call_p.\n+\t(arm_encode_section_info): Don't encode a call type.\n+\t* config/arm/arm.md (call, call_value): Update calls to\n+\tarm_is_long(_)call_p.  Simplify logic.\n+\t(*call_symbol, *call_value_symbol, *call_insn, *call_value_insn):\n+\tUpdate calls to arm_is_long(_)call_p.\n+\n 2007-05-25  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/31982"}, {"sha": "d9ec19a80540cca86c8b26273dd3828d36e9db6f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -45,7 +45,6 @@ extern void arm_output_fn_unwind (FILE *, bool);\n \n #ifdef TREE_CODE\n extern int arm_return_in_memory (tree);\n-extern void arm_encode_call_attribute (tree, int);\n #endif\n #ifdef RTX_CODE\n extern bool arm_vector_mode_supported_p (enum machine_mode);\n@@ -121,7 +120,7 @@ extern void arm_print_operand (FILE *, rtx, int);\n extern void arm_print_operand_address (FILE *, rtx);\n extern void arm_final_prescan_insn (rtx);\n extern int arm_debugger_arg_offset (int, rtx);\n-extern int arm_is_longcall_p (rtx, int, int);\n+extern bool arm_is_long_call_p (tree);\n extern int    arm_emit_vector_const (FILE *, rtx);\n extern const char * arm_output_load_gr (rtx *);\n extern const char *vfp_output_fstmd (rtx *);"}, {"sha": "dd7555197d729c0762b5ff2ef68d71d9833948c9", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 50, "deletions": 118, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -104,7 +104,6 @@ static void push_minipool_fix (rtx, HOST_WIDE_INT, rtx *, enum machine_mode,\n \t\t\t       rtx);\n static void arm_reorg (void);\n static bool note_invalid_constants (rtx, HOST_WIDE_INT, int);\n-static int current_file_function_operand (rtx);\n static unsigned long arm_compute_save_reg0_reg12_mask (void);\n static unsigned long arm_compute_save_reg_mask (void);\n static unsigned long arm_isr_value (tree);\n@@ -2782,21 +2781,6 @@ arm_init_cumulative_args (CUMULATIVE_ARGS *pcum, tree fntype,\n   pcum->iwmmxt_nregs = 0;\n   pcum->can_split = true;\n \n-  pcum->call_cookie = CALL_NORMAL;\n-\n-  if (TARGET_LONG_CALLS)\n-    pcum->call_cookie = CALL_LONG;\n-\n-  /* Check for long call/short call attributes.  The attributes\n-     override any command line option.  */\n-  if (fntype)\n-    {\n-      if (lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (fntype)))\n-\tpcum->call_cookie = CALL_SHORT;\n-      else if (lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (fntype)))\n-\tpcum->call_cookie = CALL_LONG;\n-    }\n-\n   /* Varargs vectors are treated the same as long long.\n      named_count avoids having to change the way arm handles 'named' */\n   pcum->named_count = 0;\n@@ -2867,8 +2851,8 @@ arm_function_arg (CUMULATIVE_ARGS *pcum, enum machine_mode mode,\n     pcum->nregs++;\n \n   if (mode == VOIDmode)\n-    /* Compute operand 2 of the call insn.  */\n-    return GEN_INT (pcum->call_cookie);\n+    /* Pick an arbitrary value for operand 2 of the call insn.  */\n+    return const0_rtx;\n \n   /* Only allow splitting an arg between regs and memory if all preceding\n      args were allocated to regs.  For args passed by reference we only count\n@@ -3121,27 +3105,6 @@ arm_comp_type_attributes (tree type1, tree type2)\n   return 1;\n }\n \n-/*  Encode long_call or short_call attribute by prefixing\n-    symbol name in DECL with a special character FLAG.  */\n-void\n-arm_encode_call_attribute (tree decl, int flag)\n-{\n-  const char * str = XSTR (XEXP (DECL_RTL (decl), 0), 0);\n-  int          len = strlen (str);\n-  char *       newstr;\n-\n-  /* Do not allow weak functions to be treated as short call.  */\n-  if (DECL_WEAK (decl) && flag == SHORT_CALL_FLAG_CHAR)\n-    return;\n-\n-  newstr = alloca (len + 2);\n-  newstr[0] = flag;\n-  strcpy (newstr + 1, str);\n-\n-  newstr = (char *) ggc_alloc_string (newstr, len + 1);\n-  XSTR (XEXP (DECL_RTL (decl), 0), 0) = newstr;\n-}\n-\n /*  Assigns default attributes to newly defined type.  This is used to\n     set short_call/long_call attributes for function types of\n     functions defined inside corresponding #pragma scopes.  */\n@@ -3168,92 +3131,79 @@ arm_set_default_type_attributes (tree type)\n     }\n }\n \f\n-/* Return 1 if the operand is a SYMBOL_REF for a function known to be\n-   defined within the current compilation unit.  If this cannot be\n-   determined, then 0 is returned.  */\n-static int\n-current_file_function_operand (rtx sym_ref)\n+/* Return true if DECL is known to be linked into section SECTION.  */\n+\n+static bool\n+arm_function_in_section_p (tree decl, section *section)\n {\n-  /* This is a bit of a fib.  A function will have a short call flag\n-     applied to its name if it has the short call attribute, or it has\n-     already been defined within the current compilation unit.  */\n-  if (ENCODED_SHORT_CALL_ATTR_P (XSTR (sym_ref, 0)))\n-    return 1;\n+  /* We can only be certain about functions defined in the same\n+     compilation unit.  */\n+  if (!TREE_STATIC (decl))\n+    return false;\n \n-  /* The current function is always defined within the current compilation\n-     unit.  If it s a weak definition however, then this may not be the real\n-     definition of the function, and so we have to say no.  */\n-  if (sym_ref == XEXP (DECL_RTL (current_function_decl), 0)\n-      && !DECL_WEAK (current_function_decl))\n-    return 1;\n+  /* Make sure that SYMBOL always binds to the definition in this\n+     compilation unit.  */\n+  if (!targetm.binds_local_p (decl))\n+    return false;\n \n-  /* We cannot make the determination - default to returning 0.  */\n-  return 0;\n+  /* If DECL_SECTION_NAME is set, assume it is trustworthy.  */\n+  if (!DECL_SECTION_NAME (decl))\n+    {\n+      /* Only cater for unit-at-a-time mode, where we know that the user\n+\t cannot later specify a section for DECL.  */\n+      if (!flag_unit_at_a_time)\n+\treturn false;\n+\n+      /* Make sure that we will not create a unique section for DECL.  */\n+      if (flag_function_sections || DECL_ONE_ONLY (decl))\n+\treturn false;\n+    }\n+\n+  return function_section (decl) == section;\n }\n \n /* Return nonzero if a 32-bit \"long_call\" should be generated for\n-   this call.  We generate a long_call if the function:\n+   a call from the current function to DECL.  We generate a long_call\n+   if the function:\n \n         a.  has an __attribute__((long call))\n      or b.  is within the scope of a #pragma long_calls\n      or c.  the -mlong-calls command line switch has been specified\n-         .  and either:\n-                1. -ffunction-sections is in effect\n-\t     or 2. the current function has __attribute__ ((section))\n-\t     or 3. the target function has __attribute__ ((section))\n \n    However we do not generate a long call if the function:\n \n         d.  has an __attribute__ ((short_call))\n      or e.  is inside the scope of a #pragma no_long_calls\n-     or f.  is defined within the current compilation unit.\n-\n-   This function will be called by C fragments contained in the machine\n-   description file.  SYM_REF and CALL_COOKIE correspond to the matched\n-   rtl operands.  CALL_SYMBOL is used to distinguish between\n-   two different callers of the function.  It is set to 1 in the\n-   \"call_symbol\" and \"call_symbol_value\" patterns and to 0 in the \"call\"\n-   and \"call_value\" patterns.  This is because of the difference in the\n-   SYM_REFs passed by these patterns.  */\n-int\n-arm_is_longcall_p (rtx sym_ref, int call_cookie, int call_symbol)\n-{\n-  if (!call_symbol)\n-    {\n-      if (GET_CODE (sym_ref) != MEM)\n-\treturn 0;\n+     or f.  is defined in the same section as the current function.  */\n \n-      sym_ref = XEXP (sym_ref, 0);\n-    }\n+bool\n+arm_is_long_call_p (tree decl)\n+{\n+  tree attrs;\n \n-  if (GET_CODE (sym_ref) != SYMBOL_REF)\n-    return 0;\n+  if (!decl)\n+    return TARGET_LONG_CALLS;\n \n-  if (call_cookie & CALL_SHORT)\n-    return 0;\n+  attrs = TYPE_ATTRIBUTES (TREE_TYPE (decl));\n+  if (lookup_attribute (\"short_call\", attrs))\n+    return false;\n \n-  if (TARGET_LONG_CALLS)\n-    {\n-      if (flag_function_sections\n-\t  || DECL_SECTION_NAME (current_function_decl))\n-\t/* c.3 is handled by the definition of the\n-\t   ARM_DECLARE_FUNCTION_SIZE macro.  */\n-\treturn 1;\n-    }\n+  /* For \"f\", be conservative, and only cater for cases in which the\n+     whole of the current function is placed in the same section.  */\n+  if (!flag_reorder_blocks_and_partition\n+      && arm_function_in_section_p (decl, current_function_section ()))\n+    return false;\n \n-  if (current_file_function_operand (sym_ref))\n-    return 0;\n+  if (lookup_attribute (\"long_call\", attrs))\n+    return true;\n \n-  return (call_cookie & CALL_LONG)\n-    || ENCODED_LONG_CALL_ATTR_P (XSTR (sym_ref, 0))\n-    || TARGET_LONG_CALLS;\n+  return TARGET_LONG_CALLS;\n }\n \n /* Return nonzero if it is ok to make a tail-call to DECL.  */\n static bool\n arm_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n {\n-  int call_type = TARGET_LONG_CALLS ? CALL_LONG : CALL_NORMAL;\n   unsigned long func_type;\n \n   if (cfun->machine->sibcall_blocked)\n@@ -3264,16 +3214,9 @@ arm_function_ok_for_sibcall (tree decl, tree exp ATTRIBUTE_UNUSED)\n   if (decl == NULL || TARGET_THUMB)\n     return false;\n \n-  /* Get the calling method.  */\n-  if (lookup_attribute (\"short_call\", TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n-    call_type = CALL_SHORT;\n-  else if (lookup_attribute (\"long_call\", TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n-    call_type = CALL_LONG;\n-\n   /* Cannot tail-call to long calls, since these are out of range of\n-     a branch instruction.  However, if not compiling PIC, we know\n-     we can reach the symbol if it is in this compilation unit.  */\n-  if (call_type == CALL_LONG && (flag_pic || !TREE_ASM_WRITTEN (decl)))\n+     a branch instruction.  */\n+  if (arm_is_long_call_p (decl))\n     return false;\n \n   /* If we are interworking and the function is not declared static\n@@ -15603,17 +15546,6 @@ arm_encode_section_info (tree decl, rtx rtl, int first)\n     SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n #endif\n \n-  /* If we are referencing a function that is weak then encode a long call\n-     flag in the function name, otherwise if the function is static or\n-     or known to be defined in this file then encode a short call flag.  */\n-  if (first && DECL_P (decl))\n-    {\n-      if (TREE_CODE (decl) == FUNCTION_DECL && DECL_WEAK (decl))\n-        arm_encode_call_attribute (decl, LONG_CALL_FLAG_CHAR);\n-      else if (! TREE_PUBLIC (decl))\n-        arm_encode_call_attribute (decl, SHORT_CALL_FLAG_CHAR);\n-    }\n-\n   default_encode_section_info (decl, rtl, first);\n }\n #endif /* !ARM_PE */"}, {"sha": "e73b57678517f266cd16b1999ca50619560a902d", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -1368,11 +1368,6 @@ do {\t\t\t\t\t\t\t\t\t      \\\n    than a word, or if they contain elements offset from zero in the struct.  */\n #define DEFAULT_PCC_STRUCT_RETURN 0\n \n-/* Flags for the call/call_value rtl operations set up by function_arg.  */\n-#define CALL_NORMAL\t\t0x00000000\t/* No special processing.  */\n-#define CALL_LONG\t\t0x00000001\t/* Always call indirect.  */\n-#define CALL_SHORT\t\t0x00000002\t/* Never call indirect.  */\n-\n /* These bits describe the different types of function supported\n    by the ARM backend.  They are exclusive.  i.e. a function cannot be both a\n    normal function and an interworked function, for example.  Knowing the\n@@ -1471,8 +1466,6 @@ typedef struct\n   int iwmmxt_nregs;\n   int named_count;\n   int nargs;\n-  /* One of CALL_NORMAL, CALL_LONG or CALL_SHORT.  */\n-  int call_cookie;\n   int can_split;\n } CUMULATIVE_ARGS;\n \n@@ -1853,18 +1846,6 @@ typedef struct\n    && (TARGET_32BIT ? ARM_LEGITIMATE_CONSTANT_P (X)\t\\\n \t\t    : THUMB_LEGITIMATE_CONSTANT_P (X)))\n \n-/* Special characters prefixed to function names\n-   in order to encode attribute like information.\n-   Note, '@' and '*' have already been taken.  */\n-#define SHORT_CALL_FLAG_CHAR\t'^'\n-#define LONG_CALL_FLAG_CHAR\t'#'\n-\n-#define ENCODED_SHORT_CALL_ATTR_P(SYMBOL_NAME)\t\\\n-  (*(SYMBOL_NAME) == SHORT_CALL_FLAG_CHAR)\n-\n-#define ENCODED_LONG_CALL_ATTR_P(SYMBOL_NAME)\t\\\n-  (*(SYMBOL_NAME) == LONG_CALL_FLAG_CHAR)\n-\n #ifndef SUBTARGET_NAME_ENCODING_LENGTHS\n #define SUBTARGET_NAME_ENCODING_LENGTHS\n #endif\n@@ -1874,8 +1855,6 @@ typedef struct\n    be stripped from the start of a function's name, if that\n    name starts with the indicated character.  */\n #define ARM_NAME_ENCODING_LENGTHS\t\t\\\n-  case SHORT_CALL_FLAG_CHAR: return 1;\t\t\\\n-  case LONG_CALL_FLAG_CHAR:  return 1;\t\t\\\n   case '*':  return 1;\t\t\t\t\\\n   SUBTARGET_NAME_ENCODING_LENGTHS\n \n@@ -1942,15 +1921,6 @@ typedef struct\n #define TARGET_ARM_DYNAMIC_VAGUE_LINKAGE_P true\n #endif\n \n-/* Set the short-call flag for any function compiled in the current\n-   compilation unit.  We skip this for functions with the section\n-   attribute when long-calls are in effect as this tells the compiler\n-   that the section might be placed a long way from the caller.\n-   See arm_is_longcall_p() for more information.  */\n-#define ARM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL)\t\\\n-  if (!TARGET_LONG_CALLS || ! DECL_SECTION_NAME (DECL)) \\\n-    arm_encode_call_attribute (DECL, SHORT_CALL_FLAG_CHAR)\n-\n #define ARM_OUTPUT_FN_UNWIND(F, PROLOGUE) arm_output_fn_unwind (F, PROLOGUE)\n \n #ifdef TARGET_UNWIND_INFO"}, {"sha": "2ae732aeb6d7aaa5e761f4c4a49e54bf95dcf60e", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -8151,22 +8151,13 @@\n     if (operands[2] == NULL_RTX)\n       operands[2] = const0_rtx;\n       \n-    /* This is to decide if we should generate indirect calls by loading the\n+    /* Decide if we should generate indirect calls by loading the\n        32-bit address of the callee into a register before performing the\n-       branch and link.  operand[2] encodes the long_call/short_call\n-       attribute of the function being called.  This attribute is set whenever\n-       __attribute__((long_call/short_call)) or #pragma long_call/no_long_call\n-       is used, and the short_call attribute can also be set if function is\n-       declared as static or if it has already been defined in the current\n-       compilation unit.  See arm.c and arm.h for info about this.  The third\n-       parameter to arm_is_longcall_p is used to tell it which pattern\n-       invoked it.  */\n-    callee  = XEXP (operands[0], 0);\n-    \n-    if ((GET_CODE (callee) == SYMBOL_REF\n-\t && arm_is_longcall_p (operands[0], INTVAL (operands[2]), 0))\n-\t|| (GET_CODE (callee) != SYMBOL_REF\n-\t    && GET_CODE (callee) != REG))\n+       branch and link.  */\n+    callee = XEXP (operands[0], 0);\n+    if (GET_CODE (callee) == SYMBOL_REF\n+\t? arm_is_long_call_p (SYMBOL_REF_DECL (callee))\n+\t: !REG_P (callee))\n       XEXP (operands[0], 0) = force_reg (Pmode, callee);\n   }\"\n )\n@@ -8248,17 +8239,19 @@\n   \"TARGET_EITHER\"\n   \"\n   {\n-    rtx callee = XEXP (operands[1], 0);\n+    rtx callee;\n     \n     /* In an untyped call, we can get NULL for operand 2.  */\n     if (operands[3] == 0)\n       operands[3] = const0_rtx;\n       \n-    /* See the comment in define_expand \\\"call\\\".  */\n-    if ((GET_CODE (callee) == SYMBOL_REF\n-\t && arm_is_longcall_p (operands[1], INTVAL (operands[3]), 0))\n-\t|| (GET_CODE (callee) != SYMBOL_REF\n-\t    && GET_CODE (callee) != REG))\n+    /* Decide if we should generate indirect calls by loading the\n+       32-bit address of the callee into a register before performing the\n+       branch and link.  */\n+    callee = XEXP (operands[1], 0);\n+    if (GET_CODE (callee) == SYMBOL_REF\n+\t? arm_is_long_call_p (SYMBOL_REF_DECL (callee))\n+\t: !REG_P (callee))\n       XEXP (operands[1], 0) = force_reg (Pmode, callee);\n   }\"\n )\n@@ -8345,7 +8338,7 @@\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_ARM\n    && (GET_CODE (operands[0]) == SYMBOL_REF)\n-   && !arm_is_longcall_p (operands[0], INTVAL (operands[2]), 1)\"\n+   && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[0]))\"\n   \"*\n   {\n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a0(PLT)\\\" : \\\"bl%?\\\\t%a0\\\";\n@@ -8361,7 +8354,7 @@\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_ARM\n    && (GET_CODE (operands[1]) == SYMBOL_REF)\n-   && !arm_is_longcall_p (operands[1], INTVAL (operands[3]), 1)\"\n+   && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[1]))\"\n   \"*\n   {\n     return NEED_PLT_RELOC ? \\\"bl%?\\\\t%a1(PLT)\\\" : \\\"bl%?\\\\t%a1\\\";\n@@ -8376,7 +8369,7 @@\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_THUMB\n    && GET_CODE (operands[0]) == SYMBOL_REF\n-   && !arm_is_longcall_p (operands[0], INTVAL (operands[2]), 1)\"\n+   && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[0]))\"\n   \"bl\\\\t%a0\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"call\")]\n@@ -8390,7 +8383,7 @@\n    (clobber (reg:SI LR_REGNUM))]\n   \"TARGET_THUMB\n    && GET_CODE (operands[1]) == SYMBOL_REF\n-   && !arm_is_longcall_p (operands[1], INTVAL (operands[3]), 1)\"\n+   && !arm_is_long_call_p (SYMBOL_REF_DECL (operands[1]))\"\n   \"bl\\\\t%a1\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"call\")]"}, {"sha": "bce5ad6670d4effdf51379d381356015f57fe505", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -87,7 +87,6 @@\n   do\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       ARM_OUTPUT_FN_UNWIND (FILE, FALSE);\t\t\t\\\n-      ARM_DECLARE_FUNCTION_SIZE (FILE, FNAME, DECL);\t\t\\\n       if (!flag_inhibit_size_directive)\t\t\t\t\\\n \tASM_OUTPUT_MEASURED_SIZE (FILE, FNAME);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\\"}, {"sha": "499acb28bf431715955626c1c9c81f0b30303a86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -1,3 +1,10 @@\n+2007-05-25  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* gcc.target/arm/long-calls-1.c: New test.\n+\t* gcc.target/arm/long-calls-2.c: Likewise.\n+\t* gcc.target/arm/long-calls-3.c: Likewise.\n+\t* gcc.target/arm/long-calls-4.c: Likewise.\n+\n 2007-05-25  Richard Guenther  <rguenther@suse.de>\n \tAndrew Pinski  <andrew_pinski@playstation.sony.com>\n "}, {"sha": "7c2e7fe1c71a19e47b0bf93c19ddc0782677ec25", "filename": "gcc/testsuite/gcc.target/arm/long-calls-1.c", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-1.c?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -0,0 +1,126 @@\n+/* Check that long calls to different sections are not optimized to \"bl\".  */\n+/* { dg-do compile { target { arm32 && nonpic } } } */\n+/* { dg-options \"-O2\" } */\n+\n+#define section(S) __attribute__((section(S)))\n+#define weak __attribute__((weak))\n+#define noinline __attribute__((noinline))\n+#define long_call __attribute__((long_call))\n+#define short_call __attribute__((short_call))\n+\n+#define REMOTE_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS ID (void);\t\t\t\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\n+\n+#define EXTERN_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define STATIC_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  static const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define DO_TESTS_SECTION(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  TEST (ID##1, TARGET_ATTRS, )\t\t\t\t\t\t\\\n+  TEST (ID##2, TARGET_ATTRS section (\".test.a\"), section (\".test.b\"))\t\\\n+  TEST (ID##3, TARGET_ATTRS section (\".test.c\"), section (\".test.c\"))\n+\n+#define DO_TESTS_CALL_ATTR(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  DO_TESTS_SECTION (ID##n, TEST, TARGET_ATTRS)\t\t\t\t\\\n+  DO_TESTS_SECTION (ID##l, TEST, TARGET_ATTRS long_call)\t\t\\\n+  DO_TESTS_SECTION (ID##s, TEST, TARGET_ATTRS short_call)\n+\n+DO_TESTS_CALL_ATTR (remote_, REMOTE_CALL,)\n+DO_TESTS_CALL_ATTR (strong_, EXTERN_CALL,)\n+DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n+DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n+\n+\n+/* Calls to remote_* should honor the call type sttribute,\n+   with \"short\" being the default.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\n\" } } */\n+\n+\n+/* Calls to strong_*2 calls should honor the call type attribute,\n+   with \"short\" being the default.  Calls to other strong_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\n\" } } */\n+\n+\n+/* Calls to weak_* should honor the call type sttribute,\n+   with \"short\" being the default.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\n\" } } */\n+\n+\n+/* Calls to static_*2 calls should honor the call type attribute,\n+   with \"short\" being the default.  Calls to other static_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s3\\n\" } } */"}, {"sha": "c63f8abec3b59e74a069541b04d1f60d72f06427", "filename": "gcc/testsuite/gcc.target/arm/long-calls-2.c", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-2.c?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -0,0 +1,121 @@\n+/* Check that long calls to different sections are not optimized to \"bl\".  */\n+/* { dg-do compile { target { arm32 && nonpic } } } */\n+/* { dg-options \"-O2 -mlong-calls\" } */\n+\n+#define section(S) __attribute__((section(S)))\n+#define weak __attribute__((weak))\n+#define noinline __attribute__((noinline))\n+#define long_call __attribute__((long_call))\n+#define short_call __attribute__((short_call))\n+\n+#define REMOTE_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS ID (void);\t\t\t\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\n+\n+#define EXTERN_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define STATIC_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  static const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define DO_TESTS_SECTION(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  TEST (ID##1, TARGET_ATTRS, )\t\t\t\t\t\t\\\n+  TEST (ID##2, TARGET_ATTRS section (\".test.a\"), section (\".test.b\"))\t\\\n+  TEST (ID##3, TARGET_ATTRS section (\".test.c\"), section (\".test.c\"))\n+\n+#define DO_TESTS_CALL_ATTR(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  DO_TESTS_SECTION (ID##n, TEST, TARGET_ATTRS)\t\t\t\t\\\n+  DO_TESTS_SECTION (ID##l, TEST, TARGET_ATTRS long_call)\t\t\\\n+  DO_TESTS_SECTION (ID##s, TEST, TARGET_ATTRS short_call)\n+\n+DO_TESTS_CALL_ATTR (remote_, REMOTE_CALL,)\n+DO_TESTS_CALL_ATTR (strong_, EXTERN_CALL,)\n+DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n+DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n+\n+\n+/* Calls to remote_* should honor the call type sttribute,\n+   with \"long\" being the default.  */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\n\" } } */\n+\n+\n+/* Calls to strong_*2 calls should honor the call type attribute,\n+   with \"long\" being the default.  Calls to other strong_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\n\" } } */\n+\n+\n+/* Calls to weak_* should honor the call type sttribute,\n+   with \"long\" being the default.  */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\n\" } } */\n+\n+\n+/* Calls to static_*2 calls should honor the call type attribute,\n+   with \"long\" being the default.  Calls to other static_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_n2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l1\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l3\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s1\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s2\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s3\\n\" } } */"}, {"sha": "92817156370c6836e9ae8932832001f40568e1d2", "filename": "gcc/testsuite/gcc.target/arm/long-calls-3.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-3.c?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -0,0 +1,117 @@\n+/* Check that long calls to different sections are not optimized to \"bl\".  */\n+/* { dg-do compile { target { arm32 && fpic } } } */\n+/* { dg-options \"-O2 -fpic\" } */\n+\n+#define section(S) __attribute__((section(S)))\n+#define weak __attribute__((weak))\n+#define noinline __attribute__((noinline))\n+#define long_call __attribute__((long_call))\n+#define short_call __attribute__((short_call))\n+\n+#define REMOTE_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS ID (void);\t\t\t\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\n+\n+#define EXTERN_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define STATIC_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  static const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define DO_TESTS_SECTION(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  TEST (ID##1, TARGET_ATTRS, )\t\t\t\t\t\t\\\n+  TEST (ID##2, TARGET_ATTRS section (\".test.a\"), section (\".test.b\"))\t\\\n+  TEST (ID##3, TARGET_ATTRS section (\".test.c\"), section (\".test.c\"))\n+\n+#define DO_TESTS_CALL_ATTR(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  DO_TESTS_SECTION (ID##n, TEST, TARGET_ATTRS)\t\t\t\t\\\n+  DO_TESTS_SECTION (ID##l, TEST, TARGET_ATTRS long_call)\t\t\\\n+  DO_TESTS_SECTION (ID##s, TEST, TARGET_ATTRS short_call)\n+\n+DO_TESTS_CALL_ATTR (remote_, REMOTE_CALL,)\n+DO_TESTS_CALL_ATTR (strong_, EXTERN_CALL,)\n+DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n+DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n+\n+\n+/* Calls to remote_*, strong_* and weak_* should honor the call type\n+   sttribute, with \"short\" being the default.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tstrong_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* Calls to static_*2 calls should honor the call type attribute,\n+   with \"short\" being the default.  Calls to other static_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */"}, {"sha": "facf85c73b64d3c0b00eaf5f9eb4f31ef30425ec", "filename": "gcc/testsuite/gcc.target/arm/long-calls-4.c", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/25a651984517d4d275aac921c97ff1e7eb986dda/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Flong-calls-4.c?ref=25a651984517d4d275aac921c97ff1e7eb986dda", "patch": "@@ -0,0 +1,110 @@\n+/* Check that long calls to different sections are not optimized to \"bl\".  */\n+/* { dg-do compile { target { arm32 && fpic } } } */\n+/* { dg-options \"-O2 -fpic -mlong-calls\" } */\n+\n+#define section(S) __attribute__((section(S)))\n+#define weak __attribute__((weak))\n+#define noinline __attribute__((noinline))\n+#define long_call __attribute__((long_call))\n+#define short_call __attribute__((short_call))\n+\n+#define REMOTE_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS ID (void);\t\t\t\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\n+\n+#define EXTERN_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define STATIC_CALL(ID, TARGET_ATTRS, CALL_ATTRS)\t\t\t\\\n+  static const char *TARGET_ATTRS noinline ID (void) { return #ID; }\t\\\n+  const char *CALL_ATTRS call_##ID (void) { return ID () + 1; }\t\t\\\n+  const char *CALL_ATTRS sibcall_##ID (void) { return ID (); }\n+\n+#define DO_TESTS_SECTION(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  TEST (ID##1, TARGET_ATTRS, )\t\t\t\t\t\t\\\n+  TEST (ID##2, TARGET_ATTRS section (\".test.a\"), section (\".test.b\"))\t\\\n+  TEST (ID##3, TARGET_ATTRS section (\".test.c\"), section (\".test.c\"))\n+\n+#define DO_TESTS_CALL_ATTR(ID, TEST, TARGET_ATTRS)\t\t\t\\\n+  DO_TESTS_SECTION (ID##n, TEST, TARGET_ATTRS)\t\t\t\t\\\n+  DO_TESTS_SECTION (ID##l, TEST, TARGET_ATTRS long_call)\t\t\\\n+  DO_TESTS_SECTION (ID##s, TEST, TARGET_ATTRS short_call)\n+\n+DO_TESTS_CALL_ATTR (remote_, REMOTE_CALL,)\n+DO_TESTS_CALL_ATTR (strong_, EXTERN_CALL,)\n+DO_TESTS_CALL_ATTR (weak_, EXTERN_CALL, weak)\n+DO_TESTS_CALL_ATTR (static_, STATIC_CALL,)\n+\n+\n+/* Calls to remote_*, strong_* and weak_* should honor the call type\n+   sttribute, with \"long\" being the default.  */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl\\tremote_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tremote_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstrong_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstrong_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_n3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tweak_l3\\\\(PLT\\\\)\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s1\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s2\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tweak_s3\\\\(PLT\\\\)\\n\" } } */\n+\n+\n+/* Calls to static_*2 calls should honor the call type attribute,\n+   with \"long\" being the default.  Calls to other static_* functions\n+   should be short.  */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_n2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_n3(\\\\(PLT\\\\))\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler-not \"\\tbl?\\tstatic_l2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_l3(\\\\(PLT\\\\))\\n\" } } */\n+\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s1(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s2(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tbl\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tb\\tstatic_s3(\\\\(PLT\\\\))\\n\" } } */"}]}