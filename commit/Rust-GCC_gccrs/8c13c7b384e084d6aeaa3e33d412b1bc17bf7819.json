{"sha": "8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMxM2M3YjM4NGUwODRkNmFlYWEzZTMzZDQxMmIxYmMxN2JmNzgxOQ==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@axis.com", "date": "2000-09-25T08:42:10Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2000-09-25T08:42:10Z"}, "message": "definitions in config/a*:\n\nChanges add TABs on either or both sides, covering start of line,\nup to any operand for all .*ASM.*_OP definitions.\n\nFrom-SVN: r36605", "tree": {"sha": "d5095d9b9c6a729f568c16c50f1fbfe141b07ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5095d9b9c6a729f568c16c50f1fbfe141b07ce5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/comments", "author": {"login": "hpataxisdotcom", "id": 80339731, "node_id": "MDQ6VXNlcjgwMzM5NzMx", "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hpataxisdotcom", "html_url": "https://github.com/hpataxisdotcom", "followers_url": "https://api.github.com/users/hpataxisdotcom/followers", "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}", "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}", "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions", "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs", "repos_url": "https://api.github.com/users/hpataxisdotcom/repos", "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}", "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e662a129258e40eec6547a40f0a9d72eab3e032f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e662a129258e40eec6547a40f0a9d72eab3e032f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e662a129258e40eec6547a40f0a9d72eab3e032f"}], "stats": {"total": 152, "additions": 92, "deletions": 60}, "files": [{"sha": "34a2d7f2ebeef9fa05443adddeeb227db8601c70", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -35,6 +35,38 @@\n \tFINI_SECTION_ASM_OP, TYPE_ASM_OP, SIZE_ASM_OP STRING_ASM_OP): Here.\n \t* config/svr3.h (INIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP,\n \tCONST_SECTION_ASM_OP, ASM_BYTE_OP): Here.\n+\t* config/a29k/udi.h (INT_ASM_OP): Here.\n+\t* config/alpha/alpha-interix.h (CONST_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, INT_ASM_OP,\n+\tSET_ASM_OP): Here.\n+\t* config/alpha/alpha.h (TEXT_SECTION_ASM_OP,\n+\tREADONLY_DATA_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tUNALIGNED_SHORT_ASM_OP, UNALIGNED_INT_ASM_OP,\n+\tUNALIGNED_DOUBLE_INT_ASM_OP, ASM_STABS_OP, ASM_STABN_OP,\n+\tASM_STABD_OP): Here.\n+\t* config/alpha/elf.h (IDENT_ASM_OP, SKIP_ASM_OP, ALIGN_ASM_OP,\n+\tCOMMON_ASM_OP, INT_ASM_OP, ASCII_DATA_ASM_OP,\n+\tCONST_SECTION_ASM_OP, CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP,\n+\tBSS_SECTION_ASM_OP, SBSS_SECTION_ASM_OP, SDATA_SECTION_ASM_OP,\n+\tINIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP, TYPE_ASM_OP,\n+\tSIZE_ASM_OP, STRING_ASM_OP): Here.\n+\t* config/alpha/vms.h (LINK_SECTION_ASM_OP,\n+\tREADONLY_SECTION_ASM_OP, LITERALS_SECTION_ASM_OP,\n+\tCTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP, COMMON_ASM_OP): Here.\n+\t* config/arc/arc.h (ASM_BYTE_OP, SET_ASM_OP): Here.\n+\t* config/arm/aof.h (CTORS_SECTION_ASM_OP, DTORS_SECTION_ASM_OP):\n+\tHere.\n+\t* config/arm/aout.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tBSS_SECTION_ASM_OP, SET_ASM_OP): Here.\n+\t* config/arm/coff.h (INT_ASM_OP): Here.\n+\t* config/arm/conix-elf.h (UNALIGNED_WORD_ASM_OP): Here.\n+\t* config/arm/elf.h (TYPE_ASM_OP, SIZE_ASM_OP, INT_ASM_OP): Here.\n+\t* config/arm/linux-elf.h (IDENT_ASM_OP, CONST_SECTION_ASM_OP,\n+\tINIT_SECTION_ASM_OP, FINI_SECTION_ASM_OP): Here.\n+\t* config/arm/unknown-elf.h (UNALIGNED_WORD_ASM_OP): Here.\n+\t* config/avr/avr.h (TEXT_SECTION_ASM_OP, DATA_SECTION_ASM_OP,\n+\tASM_BYTE_OP, TYPE_ASM_OP, SIZE_ASM_OP, WEAK_ASM_OP,\n+\tSTRING_ASM_OP): Here.  Update documentation copy in comments.\n \n 2000-09-25  Richard Henderson  <rth@cygnus.com>\n "}, {"sha": "dc4e9e1643367568e74dd83b09923cd7164cf8b6", "filename": "gcc/config/a29k/udi.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Fa29k%2Fudi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Fa29k%2Fudi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fudi.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for AMD Am29000 CPU\n    running over UDI using COFF.\n-   Copyright (C) 1994, 1996 Free Software Foundation, Inc.\n+   Copyright (C) 1994, 1996, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -71,7 +71,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP \".word\"\n+#define INT_ASM_OP \"\\t.word\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "5df34dcaf8d15f44424f248352340058e3f39807", "filename": "gcc/config/alpha/alpha-interix.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Falpha-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-interix.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for DEC Alpha\n    running Windows/NT.\n-   Copyright (C) 1995, 1996, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1999, 2000 Free Software Foundation, Inc.\n \n    Donn Terry, Softway Systems, Inc.\n    From code\n@@ -80,7 +80,7 @@ Boston, MA 02111-1307, USA.  */\n \n #define USE_CONST_SECTION\t1\n \n-#define CONST_SECTION_ASM_OP\t\".rdata\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.rdata\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n \n@@ -97,8 +97,8 @@ Boston, MA 02111-1307, USA.  */\n    errors unless the .ctors and .dtors sections are marked as writable\n    via the SHF_WRITE attribute.)  */\n \n-#define CTORS_SECTION_ASM_OP\t\".ctors\"\n-#define DTORS_SECTION_ASM_OP\t\".dtors\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.ctors\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.dtors\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -156,7 +156,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n }\n \n-#define INT_ASM_OP\t\t\".long\"\n+#define INT_ASM_OP\t\t\"\\t.long\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */\n@@ -182,7 +182,7 @@ dtors_section ()\t\t\t\t\t\t\t\\\n    ld -r (specifically -rU). */\n #define CTOR_LISTS_DEFINED_EXTERNALLY 1\n \n-#define SET_ASM_OP\t\".set\"\n+#define SET_ASM_OP\t\"\\t.set\\t\"\n /* Output a definition (implements alias) */\n #define ASM_OUTPUT_DEF(FILE,LABEL1,LABEL2)\t\t\t\t\\\n do\t\t\t\t\t\t\t\t\t\\"}, {"sha": "9234ddb908a524ddfb0ae80174472f17de3efc0f", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -71,7 +71,7 @@ do {\t\t\t\t\t\t\t\t\\\n    .ident string is patterned after the ones produced by native svr4\n    C compilers.  */\n \n-#define IDENT_ASM_OP \".ident\"\n+#define IDENT_ASM_OP \"\\t.ident\\t\"\n \n #ifdef IDENTIFY_WITH_IDENT\n #define ASM_IDENTIFY_GCC(FILE) /* nothing */\n@@ -97,7 +97,7 @@ do {\t\t\t\t \t\t\t\t\\\n /* This is how to allocate empty space in some section.  The .zero\n    pseudo-op is used for this on most svr4 assemblers.  */\n \n-#define SKIP_ASM_OP\t\".zero\"\n+#define SKIP_ASM_OP\t\"\\t.zero\\t\"\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE,SIZE) \\\n@@ -111,7 +111,7 @@ do {\t\t\t\t \t\t\t\t\\\n    make sure that the location counter for the .rodata section gets pro-\n    perly re-aligned prior to the actual beginning of the jump table.  */\n \n-#define ALIGN_ASM_OP \".align\"\n+#define ALIGN_ASM_OP \"\\t.align\\t\"\n \n #ifndef ASM_OUTPUT_BEFORE_CASE_LABEL\n #define ASM_OUTPUT_BEFORE_CASE_LABEL(FILE,PREFIX,NUM,TABLE) \\\n@@ -137,7 +137,7 @@ do {\t\t\t\t \t\t\t\t\\\n    the linker seems to want the alignment of data objects\n    to depend on their types.  We do exactly that here.  */\n \n-#define COMMON_ASM_OP\t\".comm\"\n+#define COMMON_ASM_OP\t\"\\t.comm\\t\"\n \n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\\n@@ -178,7 +178,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n /* This is the pseudo-op used to generate a 64-bit word of data with a\n    specific value in some section.  */\n \n-#define INT_ASM_OP\t\t\".quad\"\n+#define INT_ASM_OP\t\t\"\\t.quad\\t\"\n \n /* Biggest alignment supported by the object file format of this\n    machine.  Use this macro to limit the alignment which can be\n@@ -197,7 +197,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    AUTOMATICALLY APPENDED.  This is the same for most svr4 assemblers.  */\n \n #undef ASCII_DATA_ASM_OP\n-#define ASCII_DATA_ASM_OP\t\".ascii\"\n+#define ASCII_DATA_ASM_OP\t\"\\t.ascii\\t\"\n \n /* Support const sections and the ctors and dtors sections for g++.\n    Note that there appears to be two different ways to support const\n@@ -209,7 +209,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define USE_CONST_SECTION\t1\n \n-#define CONST_SECTION_ASM_OP\t\".section\\t.rodata\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n /* Define the pseudo-ops used to switch to the .ctors and .dtors sections.\n \n@@ -226,22 +226,22 @@ do {\t\t\t\t\t\t\t\t\t\\\n    errors unless the .ctors and .dtors sections are marked as writable\n    via the SHF_WRITE attribute.)  */\n \n-#define CTORS_SECTION_ASM_OP\t\".section\\t.ctors,\\\"aw\\\"\"\n-#define DTORS_SECTION_ASM_OP\t\".section\\t.dtors,\\\"aw\\\"\"\n+#define CTORS_SECTION_ASM_OP\t\"\\t.section\\t.ctors,\\\"aw\\\"\"\n+#define DTORS_SECTION_ASM_OP\t\"\\t.section\\t.dtors,\\\"aw\\\"\"\n \n /* Handle the small data sections.  */\n-#define BSS_SECTION_ASM_OP\t\".section\\t.bss\"\n-#define SBSS_SECTION_ASM_OP\t\".section\\t.sbss,\\\"aw\\\"\"\n-#define SDATA_SECTION_ASM_OP\t\".section\\t.sdata,\\\"aw\\\"\"\n+#define BSS_SECTION_ASM_OP\t\"\\t.section\\t.bss\"\n+#define SBSS_SECTION_ASM_OP\t\"\\t.section\\t.sbss,\\\"aw\\\"\"\n+#define SDATA_SECTION_ASM_OP\t\"\\t.section\\t.sdata,\\\"aw\\\"\"\n \n /* On svr4, we *do* have support for the .init and .fini sections, and we\n    can put stuff in there to be executed before and after `main'.  We let\n    crtstuff.c and other files know this by defining the following symbols.\n    The definitions say how to change sections to the .init and .fini\n    sections.  This is the same for all known svr4 assemblers.  */\n \n-#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n /* A default list of other sections which we might be \"in\" at any given\n    time.  For targets that use additional sections (e.g. .tdesc) you\n@@ -391,8 +391,8 @@ void FN ()\t\t\t\t\t\\\n    different pseudo-op names for these, they may be overridden in the\n    file which includes this one.  */\n \n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n \n /* This is how we tell the assembler that a symbol is weak.  */\n \n@@ -516,7 +516,7 @@ void FN ()\t\t\t\t\t\\\n    should define this to zero.  */\n \n #define STRING_LIMIT\t((unsigned) 256)\n-#define STRING_ASM_OP\t\".string\"\n+#define STRING_ASM_OP\t\"\\t.string\\t\"\n \n /* GAS is the only Alpha/ELF assembler.  */\n #undef TARGET_GAS"}, {"sha": "25572c8af2cb79bfc75848d5b6eb614651a4d0b2", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,5 +1,5 @@\n /* Output variables, constants and external declarations, for GNU compiler.\n-   Copyright (C) 1996, 1997, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 2000 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -241,11 +241,11 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n       }\t\t\t\t\t\t\t\t\t\\\n   }\n \n-#define LINK_SECTION_ASM_OP \".link\"\n-#define READONLY_SECTION_ASM_OP \".rdata\"\n-#define LITERALS_SECTION_ASM_OP \".literals\"\n-#define CTORS_SECTION_ASM_OP \".ctors\"\n-#define DTORS_SECTION_ASM_OP \".dtors\"\n+#define LINK_SECTION_ASM_OP \"\\t.link\"\n+#define READONLY_SECTION_ASM_OP \"\\t.rdata\"\n+#define LITERALS_SECTION_ASM_OP \"\\t.literals\"\n+#define CTORS_SECTION_ASM_OP \"\\t.ctors\"\n+#define DTORS_SECTION_ASM_OP \"\\t.dtors\"\n \n #undef EXTRA_SECTIONS\n #define EXTRA_SECTIONS\tin_link, in_rdata, in_literals, in_ctors, in_dtors\n@@ -327,7 +327,7 @@ extern void dtors_section\tPARAMS ((void));\n /* This says how to output assembler code to declare an                \n    uninitialized external linkage data object.  */ \n \n-#define COMMON_ASM_OP \".comm\"\n+#define COMMON_ASM_OP \"\\t.comm\\t\"\n \n #undef ASM_OUTPUT_ALIGNED_COMMON\n #define ASM_OUTPUT_ALIGNED_COMMON(FILE, NAME, SIZE, ALIGN)\t\t\\"}, {"sha": "f406fd435a04ced194bcfad55f3e07351d48dfcf", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1334,7 +1334,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n }\n \n /* This is how to output an assembler line for a numeric constant byte.  */\n-#define ASM_BYTE_OP\t\".byte\"\n+#define ASM_BYTE_OP\t\"\\t.byte\\t\"\n #define ASM_OUTPUT_BYTE(FILE, VALUE)  \\\n   fprintf (FILE, \"\\t%s\\t0x%x\\n\", ASM_BYTE_OP, (VALUE))\n \n@@ -1416,7 +1416,7 @@ do {\t\t\t\t\t\t\\\n /* ??? This is needed because dwarfout.c provides a default definition too\n    late for defaults.h (which contains the default definition of ASM_OUTPUT_DEF\n    that we use).  */\n-#define SET_ASM_OP \".set\"\n+#define SET_ASM_OP \"\\t.set\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "23d997c3e36a30b6c213d0de38a7a465b06b9927", "filename": "gcc/config/arm/aof.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Faof.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Faof.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faof.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler, for Advanced RISC Machines\n    ARM compilation, AOF Assembler.\n-   Copyright (C) 1995, 1996, 1997 Free Software Foundation, Inc.\n+   Copyright (C) 1995, 1996, 1997, 2000 Free Software Foundation, Inc.\n    Contributed by Richard Earnshaw (rearnsha@armltd.co.uk)\n \n This file is part of GNU CC.\n@@ -366,8 +366,8 @@ do {\t\t\t\t\t\\\n \n /* How initialization functions are handled */\n \n-#define CTORS_SECTION_ASM_OP \"AREA\\t|C$$gnu_ctorsvec|, DATA, READONLY\"\n-#define DTORS_SECTION_ASM_OP \"AREA\\t|C$$gnu_dtorsvec|, DATA, READONLY\"\n+#define CTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_ctorsvec|, DATA, READONLY\"\n+#define DTORS_SECTION_ASM_OP \"\\tAREA\\t|C$$gnu_dtorsvec|, DATA, READONLY\"\n \n #define ASM_OUTPUT_CONSTRUCTOR(STREAM,NAME)\t\\\n do {\t\t\t\t\t\t\\"}, {"sha": "34971ee7af6bba2454344fcfc87e18abf973646e", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    For ARM with COFF object format.\n-   Copyright (C) 1995 - 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995 - 2000 Free Software Foundation, Inc.\n    Contributed by Doug Evans (devans@cygnus.com).\n    \n This file is part of GNU CC.\n@@ -164,7 +164,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \f\n /* Support the ctors/dtors sections for g++.  */\n \n-#define INT_ASM_OP \".word\"\n+#define INT_ASM_OP \"\\t.word\\t\"\n \n /* A C statement (sans semicolon) to output an element in the table of\n    global constructors.  */"}, {"sha": "86c57491796263ea868ec94a959bcbd92007d054", "filename": "gcc/config/arm/conix-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Fconix-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Fconix-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fconix-elf.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -109,7 +109,7 @@ func_ptr __DTOR_END__[1] = { (func_ptr) 0 };\n \n /* Don't know how to order these.  UNALIGNED_WORD_ASM_OP is in\n    dwarf2.out.  */ \n-#define UNALIGNED_WORD_ASM_OP \".4byte\"\n+#define UNALIGNED_WORD_ASM_OP \"\\t.4byte\\t\"\n \n #define ASM_OUTPUT_DWARF2_ADDR_CONST(FILE,ADDR)                  \\\n      fprintf ((FILE), \"\\t%s\\t%s\", UNALIGNED_WORD_ASM_OP, ADDR)"}, {"sha": "fe18ae9343e32ece69ef9fcef762147a70973fa1", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine for GNU compiler.\n    For ARM with ELF obj format.\n-   Copyright (C) 1995 - 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1995 - 2000 Free Software Foundation, Inc.\n    Contributed by Philip Blundell <philb@gnu.org> and\n    Catherine Moore <clm@cygnus.com>\n    \n@@ -70,8 +70,8 @@ Boston, MA 02111-1307, USA.  */\n    are used to set the corresponding fields of the linker symbol table\n    entries in an ELF object file under SVR4.  These macros also output\n    the starting labels for the relevant functions/objects.  */\n-#define TYPE_ASM_OP     \".type\"\n-#define SIZE_ASM_OP     \".size\"\n+#define TYPE_ASM_OP     \"\\t.type\\t\"\n+#define SIZE_ASM_OP     \"\\t.size\\t\"\n \n /* Write the extra assembler code needed to declare a function properly.\n    Some svr4 assemblers need to also have something extra said about the\n@@ -332,7 +332,7 @@ dtors_section ()\t\t\t\t\t\t\\\n \f\n /* Support the ctors/dtors sections for g++.  */\n #ifndef INT_ASM_OP\n-#define INT_ASM_OP \t\".word\"\n+#define INT_ASM_OP \t\"\\t.word\\t\"\n #endif\n \n /* A C statement (sans semicolon) to output an element in the table of"}, {"sha": "55e66eebca1727b54007c51e36a7bc0b31f94e88", "filename": "gcc/config/arm/linux-elf.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Flinux-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Flinux-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flinux-elf.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for ARM running Linux-based GNU systems using ELF\n-   Copyright (C) 1993, 1994, 1997, 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n    Contributed by Philip Blundell <philb@gnu.org>\n \n This file is part of GNU CC.\n@@ -116,7 +116,7 @@ Boston, MA 02111-1307, USA.  */\n \n /* Attach a special .ident directive to the end of the file to identify\n    the version of GCC which compiled this code.  */\n-#define IDENT_ASM_OP \t\".ident\"\n+#define IDENT_ASM_OP \t\"\\t.ident\\t\"\n \n /* Output #ident as a .ident.  */\n #define ASM_OUTPUT_IDENT(FILE, NAME) \\\n@@ -159,7 +159,7 @@ do {\t\t\t\t \t\t\t\t\\\n    definition in the target-specific file which includes this file.  */\n #define SUBTARGET_EXTRA_SECTION_FUNCTIONS\tCONST_SECTION_FUNCTION\n \n-#define CONST_SECTION_ASM_OP\t\".section\\t.rodata\"\n+#define CONST_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n #define CONST_SECTION_FUNCTION\t\t\t\t\t\t\\\n void\t\t\t\t\t\t\t\t\t\\\n@@ -262,8 +262,8 @@ const_section ()\t\t\t\t\t\t\t\\\n    crtstuff.c and other files know this by defining the following symbols.\n    The definitions say how to change sections to the .init and .fini\n    sections.  This is the same for all known svr4 assemblers.  */\n-#define INIT_SECTION_ASM_OP\t\".section\\t.init\"\n-#define FINI_SECTION_ASM_OP\t\".section\\t.fini\"\n+#define INIT_SECTION_ASM_OP\t\"\\t.section\\t.init\"\n+#define FINI_SECTION_ASM_OP\t\"\\t.section\\t.fini\"\n \n \n /* This is how we tell the assembler that a symbol is weak.  */"}, {"sha": "039ad5240e5cf70d0b73729618bb2d50362fff73", "filename": "gcc/config/arm/unknown-elf.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Funknown-elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Farm%2Funknown-elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funknown-elf.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -113,7 +113,7 @@ rdata_section ()\t\t\t\t\t\t\\\n \n /* Don't know how to order these.  UNALIGNED_WORD_ASM_OP is in\n    dwarf2.out. */ \n-#define UNALIGNED_WORD_ASM_OP \".4byte\"\n+#define UNALIGNED_WORD_ASM_OP \"\\t.4byte\\t\"\n \n #define ASM_OUTPUT_DWARF2_ADDR_CONST(FILE,ADDR)                  \\\n  fprintf ((FILE), \"\\t%s\\t%s\", UNALIGNED_WORD_ASM_OP, ADDR)"}, {"sha": "e4d393d4a34e752b07a5a0762d5fb72d5b876195", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c13c7b384e084d6aeaa3e33d412b1bc17bf7819/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=8c13c7b384e084d6aeaa3e33d412b1bc17bf7819", "patch": "@@ -1974,15 +1974,15 @@ do {\t\t\t\t\t\t\t\t\t    \\\n    scheduling priorities of insns.  */\n \n \n-#define TEXT_SECTION_ASM_OP \".text\"\n+#define TEXT_SECTION_ASM_OP \"\\t.text\"\n /* A C expression whose value is a string containing the assembler\n    operation that should precede instructions and read-only data.\n-   Normally `\".text\"' is right.  */\n+   Normally `\"\\t.text\"' is right.  */\n \n-#define DATA_SECTION_ASM_OP \".data\"\n+#define DATA_SECTION_ASM_OP \"\\t.data\"\n /* A C expression whose value is a string containing the assembler\n    operation to identify the following data as writable initialized\n-   data.  Normally `\".data\"' is right.  */\n+   data.  Normally `\"\\t.data\"' is right.  */\n \n #define EXTRA_SECTIONS in_progmem\n /* A list of names for sections other than the standard two, which are\n@@ -2198,10 +2198,10 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n /* A C statement to output to the stdio stream STREAM an assembler\n    instruction to assemble a single byte containing the number VALUE.  */\n \n-#define ASM_BYTE_OP \".byte \"\n+#define ASM_BYTE_OP \"\\t.byte \"\n /* A C string constant giving the pseudo-op to use for a sequence of\n    single-byte constants.  If this macro is not defined, the default\n-   is `\"byte\"'.  */\n+   is `\"\\t.byte\\t\"'.  */\n \n #define ASM_OUTPUT_ASCII(FILE, P, SIZE)\t gas_output_ascii (FILE,P,SIZE)\n /* `ASM_OUTPUT_ASCII (STREAM, PTR, LEN)'\n@@ -2284,9 +2284,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef TYPE_ASM_OP\n #undef SIZE_ASM_OP\n #undef WEAK_ASM_OP\n-#define TYPE_ASM_OP\t\".type\"\n-#define SIZE_ASM_OP\t\".size\"\n-#define WEAK_ASM_OP\t\".weak\"\n+#define TYPE_ASM_OP\t\"\\t.type\\t\"\n+#define SIZE_ASM_OP\t\"\\t.size\\t\"\n+#define WEAK_ASM_OP\t\"\\t.weak\\t\"\n /* Define the strings used for the special svr4 .type and .size directives.\n    These strings generally do not vary from one system running svr4 to\n    another, but if a given system (e.g. m88k running svr) needs to use\n@@ -2424,7 +2424,7 @@ do {\t\t\t\t\t\t\t\t\t \\\n    since some versions of gas, such as 2.2 did not accept it.  */\n \n #define STRING_LIMIT\t((unsigned) 64)\n-#define STRING_ASM_OP\t\".string\"\n+#define STRING_ASM_OP\t\"\\t.string\\t\"\n /* Some svr4 assemblers have a limit on the number of characters which\n    can appear in the operand of a .string directive.  If your assembler\n    has such a limitation, you should define STRING_LIMIT to reflect that"}]}