{"sha": "c762163eba799f5cf9a48a017640c60a65dc107c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2MjE2M2ViYTc5OWY1Y2Y5YTQ4YTAxNzY0MGM2MGE2NWRjMTA3Yw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@redhat.com", "date": "2000-11-07T06:28:34Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-11-07T06:28:34Z"}, "message": "flow.c (verify_local_live_at_start): Back out last change.\n\n\t* flow.c (verify_local_live_at_start): Back out last change.\n\t* combine.c (distribute_notes): When parts of a hard reg are\n\tneither set nor referenced in PLACE, search backwards for a\n\tplace to put a REG_UNUSED note; if none found, ask for flow\n\tinfo refresh.\n\nFrom-SVN: r37284", "tree": {"sha": "d3c82a5e573ea88ecd8bc4ed6a39bf16e84f8a4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c82a5e573ea88ecd8bc4ed6a39bf16e84f8a4e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c762163eba799f5cf9a48a017640c60a65dc107c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c762163eba799f5cf9a48a017640c60a65dc107c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c762163eba799f5cf9a48a017640c60a65dc107c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c762163eba799f5cf9a48a017640c60a65dc107c/comments", "author": null, "committer": null, "parents": [{"sha": "aa17a5f382c64274d536116aa0a862aff41e9ec5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa17a5f382c64274d536116aa0a862aff41e9ec5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa17a5f382c64274d536116aa0a862aff41e9ec5"}], "stats": {"total": 58, "additions": 41, "deletions": 17}, "files": [{"sha": "ec6df704f7133cd126580353489a3e777ab58004", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c762163eba799f5cf9a48a017640c60a65dc107c", "patch": "@@ -1,3 +1,11 @@\n+Tue Nov  7 06:24:02 2000  J\"orn Rennecke <amylaar@redhat.com>\n+\n+\t* flow.c (verify_local_live_at_start): Back out last change.\n+\t* combine.c (distribute_notes): When parts of a hard reg are\n+\tneither set nor referenced in PLACE, search backwards for a\n+\tplace to put a REG_UNUSED note; if none found, ask for flow\n+\tinfo refresh.\n+\n Mon Nov  6 20:08:13 2000  J\"orn Rennecke <amylaar@redhat.com>\n \n \t* reload1.c (eliminate_regs_in_insn): Allow a set to be a PARALLEL"}, {"sha": "33de90c4988fd8f1cc9119b6b9b81115fa11cc0a", "filename": "gcc/combine.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=c762163eba799f5cf9a48a017640c60a65dc107c", "patch": "@@ -12499,6 +12499,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t\t   i += HARD_REGNO_NREGS (i, reg_raw_mode[i]))\n \t\t\t{\n \t\t\t  rtx piece = gen_rtx_REG (reg_raw_mode[i], i);\n+\t\t\t  basic_block bb = BASIC_BLOCK (this_basic_block);\n \n \t\t\t  if (! dead_or_set_p (place, piece)\n \t\t\t      && ! reg_bitfield_target_p (piece,\n@@ -12510,6 +12511,34 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \t\t\t      distribute_notes (new_note, place, place,\n \t\t\t\t\t\tNULL_RTX, NULL_RTX, NULL_RTX);\n \t\t\t    }\n+\t\t\t  else if (! refers_to_regno_p (i, i + 1,\n+\t\t\t\t\t\t\tPATTERN (place), 0)\n+\t\t\t\t   && ! find_regno_fusage (place, USE, i))\n+\t\t\t    for (tem = PREV_INSN (place); ;\n+\t\t\t\t tem = PREV_INSN (tem))\n+\t\t\t      {\n+\t\t\t\tif (! INSN_P (tem))\n+\t\t\t\t  {\n+\t\t\t\t    if (tem == bb->head)\n+\t\t\t\t      {\n+\t\t\t\t\tSET_BIT (refresh_blocks,\n+\t\t\t\t\t\t this_basic_block);\n+\t\t\t\t\tneed_refresh = 1;\n+\t\t\t\t\tbreak;\n+\t\t\t\t      }\n+\t\t\t\t    continue;\n+\t\t\t\t  }\n+\t\t\t\tif (dead_or_set_p (tem, piece)\n+\t\t\t\t    || reg_bitfield_target_p (piece,\n+\t\t\t\t\t\t\t      PATTERN (tem)))\n+\t\t\t\t  {\n+\t\t\t\t    REG_NOTES (tem)\n+\t\t\t\t      = gen_rtx_EXPR_LIST (REG_DEAD, piece,\n+\t\t\t\t\t\t\t   REG_NOTES (tem));\n+\t\t\t\t    break;\n+\t\t\t\t  }\n+\t\t\t      }\n+\n \t\t\t}\n \n \t\t      place = 0;"}, {"sha": "d286f91e2b3465695012a9bb1e6dceda3ffa8579", "filename": "gcc/flow.c", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c762163eba799f5cf9a48a017640c60a65dc107c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=c762163eba799f5cf9a48a017640c60a65dc107c", "patch": "@@ -2888,24 +2888,11 @@ verify_local_live_at_start (new_live_at_start, bb)\n \n       EXECUTE_IF_SET_IN_REG_SET (new_live_at_start, 0, i,\n \t{\n-          /* No pseudo registers should die.  */\n+          /* No registers should die.  */\n \t  if (REGNO_REG_SET_P (bb->global_live_at_start, i))\n-\t    {\n-\t      /* But hard regs can reasonably die, e.g. when we combine\n-\t\t (insn 6 30 7 (set (reg/v:DI 83)\n-\t\t\t\t   (reg:DI 5 r5)) (nil)\n-\t\t     (expr_list:REG_DEAD (reg:DI 5 r5) (nil)))\n-\t\t ... and ...\n-\t\t (insn 17 15 18 (set (reg:SI 5 r5)\n-\t\t\t\t(subreg:SI (reg/v:DI 83) 1)) (insn_list 6 (nil))\n-\t\t     (expr_list:REG_DEAD (reg/v:DI 83) (nil))) .  */\n-\n-\t      if (i >= FIRST_PSEUDO_REGISTER)\n-\t\tabort ();\n-\t    }\n-\t  else\n-\t    /* Verify that the now-live register is wider than word_mode.  */\n-\t    verify_wide_reg (i, bb->head, bb->end);\n+\t    abort ();\n+          /* Verify that the now-live register is wider than word_mode.  */\n+\t  verify_wide_reg (i, bb->head, bb->end);\n \t});\n     }\n }"}]}