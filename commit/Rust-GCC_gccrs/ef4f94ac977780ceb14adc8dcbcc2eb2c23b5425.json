{"sha": "ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWY0Zjk0YWM5Nzc3ODBjZWIxNGFkYzhkY2JjYzJlYjJjMjNiNTQyNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-04-03T22:39:51Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-04-03T22:39:51Z"}, "message": "re PR rtl-optimization/4330 (Optimizer generates illegal assembly code)\n\n        PR opt/4330\n        * langhooks.h (lang_hooks.decls.warn_unused_global): New.\n        * toplev.c (check_global_declarations): Use it.\n        * langhooks-def.h (lhd_warn_unused_global_decl): Declare.\n        (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n        (LANG_HOOKS_DECLS): Add it.\n        * langhooks.c (lhd_warn_unused_global_decl): New.\n        * c-decl.c (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n        * c-objc-common.c (c_warn_unused_global_decl): New.\n        * c-tree.h (c_warn_unused_global_decl): Declare.\n        * objc/objc-lang.c (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n\n        * cp-lang.c (cxx_warn_unused_global_decl): New.\n        (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n\n\t* g++.dg/warn/Wunused-2.C: New.\n\t* gcc.dg/unused-4.c: New.\n\nFrom-SVN: r51818", "tree": {"sha": "fd1d1d700f54be42454fcc88e95011014edff3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd1d1d700f54be42454fcc88e95011014edff3f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/comments", "author": null, "committer": null, "parents": [{"sha": "599bba86dffe8bd03676f4bf50bca436d3112b90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/599bba86dffe8bd03676f4bf50bca436d3112b90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/599bba86dffe8bd03676f4bf50bca436d3112b90"}], "stats": {"total": 207, "additions": 151, "deletions": 56}, "files": [{"sha": "758e3a44c9cf00092e6f9a316bcdcb654a592a9c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -1,3 +1,17 @@\n+2002-04-03  Richard Henderson  <rth@redhat.com>\n+\n+\tPR opt/4330\n+\t* langhooks.h (lang_hooks.decls.warn_unused_global): New.\n+\t* toplev.c (check_global_declarations): Use it.\n+\t* langhooks-def.h (lhd_warn_unused_global_decl): Declare.\n+\t(LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n+\t(LANG_HOOKS_DECLS): Add it.\n+\t* langhooks.c (lhd_warn_unused_global_decl): New.\n+\t* c-decl.c (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n+\t* c-objc-common.c (c_warn_unused_global_decl): New.\n+\t* c-tree.h (c_warn_unused_global_decl): Declare.\n+\t* objc/objc-lang.c (LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n+\n 2002-04-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* langhooks-def.h (lhd_set_decl_assembler_name,"}, {"sha": "f11dce4a892b19ae64ef6c4275285fe83c375cf6", "filename": "gcc/c-lang.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -66,6 +66,8 @@ static void c_post_options PARAMS ((void));\n #define LANG_HOOKS_UNSAFE_FOR_REEVAL c_common_unsafe_for_reeval\n #undef LANG_HOOKS_STATICP\n #define LANG_HOOKS_STATICP c_staticp\n+#undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n+#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL c_warn_unused_global_decl\n #undef LANG_HOOKS_PRINT_IDENTIFIER\n #define LANG_HOOKS_PRINT_IDENTIFIER c_print_identifier\n #undef LANG_HOOKS_SET_YYDEBUG"}, {"sha": "36b5db4340b9620f14611caaa8cb1c063c6e59a4", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -209,6 +209,20 @@ c_cannot_inline_tree_fn (fnp)\n   return 0;\n }\n \n+/* Called from check_global_declarations.  */\n+\n+bool\n+c_warn_unused_global_decl (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n+    return false;\n+  if (DECL_IN_SYSTEM_HEADER (decl))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Initialization common to C and Objective-C front ends.  */\n const char *\n c_objc_common_init (filename)"}, {"sha": "eef57425d9d58b715afc82c90fc2876537546687", "filename": "gcc/c-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -237,6 +237,7 @@ extern const char *c_objc_common_init\t\tPARAMS ((const char *));\n extern int c_missing_noreturn_ok_p\t\tPARAMS ((tree));\n extern void c_objc_common_finish_file\t\tPARAMS ((void));\n extern int defer_fn\t\t\t\tPARAMS ((tree));\n+extern bool c_warn_unused_global_decl\t\tPARAMS ((tree));\n \n #define c_build_type_variant(TYPE, CONST_P, VOLATILE_P)\t\t  \\\n   c_build_qualified_type ((TYPE),\t\t\t\t  \\"}, {"sha": "50dfde814f16160faf04348a21edd705b72fc5c2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -1,3 +1,8 @@\n+2002-04-03  Richard Henderson  <rth@redhat.com>\n+\n+\t* cp-lang.c (cxx_warn_unused_global_decl): New.\n+\t(LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL): New.\n+\n 2002-04-03  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* cp-lang.c (LANG_HOOKS_SET_DECL_ASSEMBLER_NAME): Redefine."}, {"sha": "3c086ca81a867f0b38622bea69c1f7852dbb4520", "filename": "gcc/cp/cp-lang.c", "status": "modified", "additions": 62, "deletions": 41, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fcp%2Fcp-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fcp%2Fcp-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-lang.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -30,6 +30,7 @@ Boston, MA 02111-1307, USA.  */\n \n static HOST_WIDE_INT cxx_get_alias_set PARAMS ((tree));\n static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n+static bool cxx_warn_unused_global_decl PARAMS ((tree));\n \n #undef LANG_HOOKS_NAME\n #define LANG_HOOKS_NAME \"GNU C++\"\n@@ -87,6 +88,8 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n #define LANG_HOOKS_PRINT_ERROR_FUNCTION\tcxx_print_error_function\n #undef LANG_HOOKS_SET_YYDEBUG\n #define LANG_HOOKS_SET_YYDEBUG cxx_set_yydebug\n+#undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n+#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL cxx_warn_unused_global_decl\n \n #undef LANG_HOOKS_TREE_INLINING_WALK_SUBTREES\n #define LANG_HOOKS_TREE_INLINING_WALK_SUBTREES \\\n@@ -133,6 +136,47 @@ static bool ok_to_generate_alias_set_for_type PARAMS ((tree));\n /* Each front end provides its own hooks, for toplev.c.  */\n const struct lang_hooks lang_hooks = LANG_HOOKS_INITIALIZER;\n \n+/* Tree code classes. */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n+\n+const char tree_code_type[] = {\n+#include \"tree.def\"\n+  'x',\n+#include \"c-common.def\"\n+  'x',\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Table indexed by tree code giving number of expression\n+   operands beyond the fixed part of the node structure.\n+   Not used for types or decls.  */\n+\n+#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n+\n+const unsigned char tree_code_length[] = {\n+#include \"tree.def\"\n+  0,\n+#include \"c-common.def\"\n+  0,\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n+/* Names of tree components.\n+   Used for printing out the tree and error messages.  */\n+#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n+\n+const char *const tree_code_name[] = {\n+#include \"tree.def\"\n+  \"@@dummy\",\n+#include \"c-common.def\"\n+  \"@@dummy\",\n+#include \"cp-tree.def\"\n+};\n+#undef DEFTREECODE\n+\n /* Check if a C++ type is safe for aliasing.\n    Return TRUE if T safe for aliasing FALSE otherwise.  */\n \n@@ -185,47 +229,6 @@ ok_to_generate_alias_set_for_type (t)\n     return true;\n }\n \n-/* Tree code classes. */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) TYPE,\n-\n-const char tree_code_type[] = {\n-#include \"tree.def\"\n-  'x',\n-#include \"c-common.def\"\n-  'x',\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Table indexed by tree code giving number of expression\n-   operands beyond the fixed part of the node structure.\n-   Not used for types or decls.  */\n-\n-#define DEFTREECODE(SYM, NAME, TYPE, LENGTH) LENGTH,\n-\n-const unsigned char tree_code_length[] = {\n-#include \"tree.def\"\n-  0,\n-#include \"c-common.def\"\n-  0,\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n-/* Names of tree components.\n-   Used for printing out the tree and error messages.  */\n-#define DEFTREECODE(SYM, NAME, TYPE, LEN) NAME,\n-\n-const char *const tree_code_name[] = {\n-#include \"tree.def\"\n-  \"@@dummy\",\n-#include \"c-common.def\"\n-  \"@@dummy\",\n-#include \"cp-tree.def\"\n-};\n-#undef DEFTREECODE\n-\n /* Special routine to get the alias set for C++.  */\n \n static HOST_WIDE_INT\n@@ -238,3 +241,21 @@ cxx_get_alias_set (t)\n \n   return c_common_get_alias_set (t);\n }\n+\n+/* Called from check_global_declarations.  */\n+\n+static bool\n+cxx_warn_unused_global_decl (decl)\n+     tree decl;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_DECLARED_INLINE_P (decl))\n+    return false;\n+  if (DECL_IN_SYSTEM_HEADER (decl))\n+    return false;\n+\n+  /* Const variables take the place of #defines in C++.  */\n+  if (TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl))\n+    return false;\n+\n+  return true;\n+}"}, {"sha": "d073ddf56cab0ef2e30928a9db1fe1656dcdb10e", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -56,6 +56,7 @@ extern rtx lhd_expand_expr PARAMS ((tree, rtx, enum machine_mode, int));\n extern void lhd_print_error_function PARAMS ((struct diagnostic_context *,\n \t\t\t\t\t      const char *));\n extern void lhd_set_decl_assembler_name PARAMS ((tree));\n+extern bool lhd_warn_unused_global_decl PARAMS ((tree));\n \n /* Declarations of default tree inlining hooks.  */\n tree lhd_tree_inlining_walk_subtrees\t\tPARAMS ((tree *, int *,\n@@ -176,6 +177,7 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n #define LANG_HOOKS_SET_BLOCK\tset_block\n #define LANG_HOOKS_PUSHDECL\tpushdecl\n #define LANG_HOOKS_GETDECLS\tgetdecls\n+#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL lhd_warn_unused_global_decl\n \n #define LANG_HOOKS_DECLS { \\\n   LANG_HOOKS_PUSHLEVEL, \\\n@@ -184,7 +186,8 @@ int lhd_tree_dump_type_quals\t\t\tPARAMS ((tree));\n   LANG_HOOKS_INSERT_BLOCK, \\\n   LANG_HOOKS_SET_BLOCK, \\\n   LANG_HOOKS_PUSHDECL, \\\n-  LANG_HOOKS_GETDECLS \\\n+  LANG_HOOKS_GETDECLS, \\\n+  LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL \\\n }\n \n /* The whole thing.  The structure is defined in langhooks.h.  */"}, {"sha": "128e6de9188f562c327b00e680b4a3e0f04c503d", "filename": "gcc/langhooks.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -113,6 +113,25 @@ lhd_staticp (exp)\n   return 0;\n }\n \n+/* Called from check_global_declarations.  */\n+\n+bool\n+lhd_warn_unused_global_decl (decl)\n+     tree decl;\n+{\n+  /* This is what used to exist in check_global_declarations.  Probably\n+     not many of these actually apply to non-C languages.  */\n+\n+  if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n+    return false;\n+  if (TREE_CODE (decl) == VAR_DECL && TREE_READONLY (decl))\n+    return false;\n+  if (DECL_IN_SYSTEM_HEADER (decl))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Called when -dy is given on the command line.  */\n \n void"}, {"sha": "83e2e5abdb9f1c694c5ed6f1cb6aac730d985b10", "filename": "gcc/langhooks.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -133,6 +133,10 @@ struct lang_hooks_for_decls\n \n   /* Returns the chain of decls so far in the current scope level.  */\n   tree (*getdecls) PARAMS ((void));\n+\n+  /* Returns true when we should warn for an unused global DECL.\n+     We will already have checked that it has static binding.  */\n+  bool (*warn_unused_global) PARAMS ((tree));\n };\n \n /* Language-specific hooks.  See langhooks-def.h for defaults.  */"}, {"sha": "b1194324f79c2bd8f7b01ba0ead8725594058500", "filename": "gcc/objc/objc-lang.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fobjc%2Fobjc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Fobjc%2Fobjc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-lang.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -68,6 +68,9 @@ static void objc_post_options                   PARAMS ((void));\n #define LANG_HOOKS_DECL_PRINTABLE_NAME objc_printable_name\n #undef LANG_HOOKS_SET_YYDEBUG\n #define LANG_HOOKS_SET_YYDEBUG c_set_yydebug\n+#undef LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL\n+#define LANG_HOOKS_WARN_UNUSED_GLOBAL_DECL c_warn_unused_global_decl\n+\n /* Inlining hooks same as the C front end.  */\n #undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\"}, {"sha": "9cdd11e84a6fc166f54c7149924b6e072c65f08e", "filename": "gcc/testsuite/g++.dg/warn/Wunused-2.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWunused-2.C?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do compile }\n+// { dg-options \"-Wunused -O3\" }\n+\n+static const int i = 0;\n+static void f() { }\t\t/* { dg-warning \"defined but not used\" } */\n+static inline void g() { }"}, {"sha": "53236008007ad9338d1dbc5b34a329966a440844", "filename": "gcc/testsuite/gcc.dg/unused-4.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funused-4.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused -O3\" } */\n+\n+static const int i = 0;\t\t/* { dg-warning \"defined but not used\" } */\n+static void f() { }\t\t/* { dg-warning \"defined but not used\" } */\n+static inline void g() { }"}, {"sha": "b62aae35e1f3ebbfe69e79b1ac92fccc4fd69aeb", "filename": "gcc/toplev.c", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ef4f94ac977780ceb14adc8dcbcc2eb2c23b5425", "patch": "@@ -1945,22 +1945,19 @@ check_global_declarations (vec, len)\n \t  assemble_external (decl);\n \t}\n \n-      /* Warn about static fns or vars defined but not used,\n-\t but not about inline functions or static consts\n-\t since defining those in header files is normal practice.  */\n-      if (((warn_unused_function\n-\t    && TREE_CODE (decl) == FUNCTION_DECL && ! DECL_INLINE (decl))\n-\t   || (warn_unused_variable\n-\t       && TREE_CODE (decl) == VAR_DECL && ! TREE_READONLY (decl)))\n-\t  && ! DECL_IN_SYSTEM_HEADER (decl)\n+      /* Warn about static fns or vars defined but not used.  */\n+      if (((warn_unused_function && TREE_CODE (decl) == FUNCTION_DECL)\n+\t   || (warn_unused_variable && TREE_CODE (decl) == VAR_DECL))\n+\t  && ! TREE_USED (decl)\n+\t  /* The TREE_USED bit for file-scope decls is kept in the identifier,\n+\t     to handle multiple external decls in different scopes.  */\n+\t  && ! TREE_USED (DECL_NAME (decl))\n \t  && ! DECL_EXTERNAL (decl)\n \t  && ! TREE_PUBLIC (decl)\n-\t  && ! TREE_USED (decl)\n-\t  && (TREE_CODE (decl) == FUNCTION_DECL || ! DECL_REGISTER (decl))\n-\t  /* The TREE_USED bit for file-scope decls\n-\t     is kept in the identifier, to handle multiple\n-\t     external decls in different scopes.  */\n-\t  && ! TREE_USED (DECL_NAME (decl)))\n+\t  /* Global register variables must be declared to reserve them.  */\n+\t  && ! (TREE_CODE (decl) == VAR_DECL && DECL_REGISTER (decl))\n+\t  /* Otherwise, ask the language.  */\n+\t  && (*lang_hooks.decls.warn_unused_global) (decl))\n \twarning_with_decl (decl, \"`%s' defined but not used\");\n \n       timevar_push (TV_SYMOUT);"}]}