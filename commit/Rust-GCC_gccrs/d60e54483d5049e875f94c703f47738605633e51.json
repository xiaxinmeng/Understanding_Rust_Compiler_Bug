{"sha": "d60e54483d5049e875f94c703f47738605633e51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYwZTU0NDgzZDUwNDllODc1Zjk0YzcwM2Y0NzczODYwNTYzM2U1MQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2001-04-30T15:09:51Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2001-04-30T15:09:51Z"}, "message": "regmove.c (record_stack_memrefs): Catch all references to the stack pointer.\n\n\t* regmove.c (record_stack_memrefs): Catch all references to the\n\tstack pointer.\n\n\t* optimize.c (update_cloned_parm): New function.\n\t(maybe_clone_body): Use it.  Update the `this' parameter too.\n\n\t* gcc.dg/20000724-1.c: Add a clobber of `esp'.\n\nFrom-SVN: r41687", "tree": {"sha": "68c63569a6f9b3ecbd97a32561f3d1cb8f8b7e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68c63569a6f9b3ecbd97a32561f3d1cb8f8b7e19"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d60e54483d5049e875f94c703f47738605633e51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60e54483d5049e875f94c703f47738605633e51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d60e54483d5049e875f94c703f47738605633e51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d60e54483d5049e875f94c703f47738605633e51/comments", "author": null, "committer": null, "parents": [{"sha": "fea633fdfb15a45c811db7fcbfc8aa7b43713f40", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea633fdfb15a45c811db7fcbfc8aa7b43713f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea633fdfb15a45c811db7fcbfc8aa7b43713f40"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "78c48762d136ac8aae6c96a2e3ed10304c5e898e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -1,3 +1,8 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* regmove.c (record_stack_memrefs): Catch all references to the\n+\tstack pointer.\n+\n 2001-04-29  Toomas Rosin <toomas at ns dot tklabor dot ee>\n \n \t* Makefile.in(stmp-fixinc): quote shell assignment values"}, {"sha": "b3e4d39e8dc929a3e2ac29fb18613046d73d2f58", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -1,3 +1,8 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* optimize.c (update_cloned_parm): New function.\n+\t(maybe_clone_body): Use it.  Update the `this' parameter too.\n+\n 2001-04-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* decl2.c (unsupported_options): Add new-abi."}, {"sha": "5b0298779b73d64a5a339df58994f8d9cc2682e2", "filename": "gcc/cp/optimize.c", "status": "modified", "additions": 26, "deletions": 7, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fcp%2Foptimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fcp%2Foptimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Foptimize.c?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -99,6 +99,7 @@ static tree remap_decl PARAMS ((tree, inline_data *));\n static void remap_block PARAMS ((tree, tree, inline_data *));\n static void copy_scope_stmt PARAMS ((tree *, int *, inline_data *));\n static tree calls_setjmp_r PARAMS ((tree *, int *, void *));\n+static void update_cloned_parm PARAMS ((tree, tree));\n \n /* The approximate number of instructions per statement.  This number\n    need not be particularly accurate; it is used only to make\n@@ -1009,6 +1010,25 @@ calls_setjmp_p (fn)\n \t\t\t\t       NULL) != NULL_TREE;\n }\n \n+/* CLONED_PARM is a copy of CLONE, generated for a cloned constructor\n+   or destructor.  Update it to ensure that the source-position for\n+   the cloned parameter matches that for the original, and that the\n+   debugging generation code will be able to find the original PARM.  */\n+\n+static void\n+update_cloned_parm (parm, cloned_parm)\n+     tree parm;\n+     tree cloned_parm;\n+{\n+  DECL_ABSTRACT_ORIGIN (cloned_parm) = parm;\n+  \n+  /* The name may have changed from the declaration. */\n+  DECL_NAME (cloned_parm) = DECL_NAME (parm);\n+  DECL_SOURCE_FILE (cloned_parm) = DECL_SOURCE_FILE (parm);\n+  DECL_SOURCE_LINE (cloned_parm) = DECL_SOURCE_LINE (parm);\n+  \n+}\n+\n /* FN is a function that has a complete body.  Clone the body as\n    necessary.  Returns non-zero if there's no longer any need to\n    process the main body.  */\n@@ -1057,6 +1077,10 @@ maybe_clone_body (fn)\n       /* Adjust the parameter names and locations. */\n       parm = DECL_ARGUMENTS (fn);\n       clone_parm = DECL_ARGUMENTS (clone);\n+      /* Update the `this' parameter, which is always first.\n+\t Sometimes, we end update the `this' parameter twice because\n+\t we process it again in the loop below.  That is harmless.  */\n+      update_cloned_parm (parm, clone_parm);\n       if (DECL_HAS_IN_CHARGE_PARM_P (fn))\n \tparm = TREE_CHAIN (parm);\n       if (DECL_HAS_VTT_PARM_P (fn))\n@@ -1066,13 +1090,8 @@ maybe_clone_body (fn)\n       for (; parm;\n \t   parm = TREE_CHAIN (parm), clone_parm = TREE_CHAIN (clone_parm))\n \t{\n-\t  DECL_ABSTRACT_ORIGIN (clone_parm) = parm;\n-\n-\t  /* The name may have changed from the declaration. */\n-\t  DECL_NAME (clone_parm) = DECL_NAME (parm);\n-\t  DECL_SOURCE_FILE (clone_parm) = DECL_SOURCE_FILE (parm);\n-\t  DECL_SOURCE_LINE (clone_parm) = DECL_SOURCE_LINE (parm);\n- \n+\t  /* Update this paramter.  */\n+\t  update_cloned_parm (parm, clone_parm);\n \t  /* We should only give unused information for one clone. */\n \t  if (!first)\n \t    TREE_USED (clone_parm) = 1;"}, {"sha": "89c60185d8b0838d11f584485e7609401f783a1e", "filename": "gcc/extend.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -1,4 +1,4 @@\n-@c Copyright (C) 1988,89,92,93,94,96,98,99,2000,01 Free Software Foundation, Inc.\n+@c Copyright (C) 1988,1989,1992,1993,1994,1996,1998,1999,2000,2001 Free Software Foundation, Inc.\n @c This is part of the GCC manual.\n @c For copying conditions, see the file gcc.texi.\n \n@@ -3059,7 +3059,7 @@ memory, you should write the @code{volatile} keyword to prevent future\n versions of GNU CC from moving the instruction around within a core\n region.\n \n-An @code{asm} instruction without any operands or clobbers (and ``old\n+An @code{asm} instruction without any operands or clobbers (an ``old\n style'' @code{asm}) will not be deleted or moved significantly,\n regardless, unless it is unreachable, the same way as if you had\n written a @code{volatile} keyword."}, {"sha": "bb227006ebd34f37475f98640e606ff06976f2ac", "filename": "gcc/regmove.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -2303,11 +2303,16 @@ record_stack_memrefs (xp, data)\n \t}\n       return 1;\n     case REG:\n-      /* ??? We want be able to handle non-memory stack pointer references\n-         later.  For now just discard all insns refering to stack pointer\n-         outside mem expressions.  We would probably want to teach\n-\t validate_replace to simplify expressions first.  */\n-      if (x == stack_pointer_rtx)\n+      /* ??? We want be able to handle non-memory stack pointer\n+\t references later.  For now just discard all insns refering to\n+\t stack pointer outside mem expressions.  We would probably\n+\t want to teach validate_replace to simplify expressions first.\n+\n+\t We can't just compare with STACK_POINTER_RTX because the\n+\t reference to the stack pointer might be in some other mode.\n+\t In particular, an explict clobber in an asm statement will\n+\t result in a QImode clober.  */\n+      if (REGNO (x) == STACK_POINTER_REGNUM)\n \treturn 1;\n       break;\n     default:"}, {"sha": "45fe556efe2745d3d87c9381cf593163915d15ba", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -1,3 +1,7 @@\n+2001-04-30  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* gcc.dg/20000724-1.c: Add a clobber of `esp'.\n+\n 2001-04-29  Joseph S. Myers  <jsm28@cam.ac.uk>\n \n \t* g++.old-deja/g++.other/crash14.C: Remove -fnew-abi."}, {"sha": "fecf9e795900ca1b83cdced8d7805fb2d753c3bc", "filename": "gcc/testsuite/gcc.dg/20000724-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d60e54483d5049e875f94c703f47738605633e51/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d60e54483d5049e875f94c703f47738605633e51/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2F20000724-1.c?ref=d60e54483d5049e875f94c703f47738605633e51", "patch": "@@ -51,7 +51,7 @@ NT\t\"ret\"\n \n extern inline void do_asm(struct s * x)\n {\n-  asm volatile(\"call ___checkme\" : : \"c\" (x) : \"memory\");\n+  asm volatile(\"call ___checkme\" : : \"c\" (x) : \"esp\", \"memory\");\n }\n \n int foo(void)"}]}