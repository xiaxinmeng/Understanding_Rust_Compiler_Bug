{"sha": "7d9c107ab1eab331e7011513b11e26b78850d614", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Q5YzEwN2FiMWVhYjMzMWU3MDExNTEzYjExZTI2Yjc4ODUwZDYxNA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-17T18:43:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-03-18T13:56:49Z"}, "message": "analyzer: introduce noop_region_model_context\n\ntentative_region_model_context and test_region_model_context are both\nforced to implement numerous pure virtual vfuncs of the abstract\nregion_model_context.\n\nThis patch adds a noop_region_model_context which provides empty\nimplementations of all of region_model_context's pure virtual functions,\nand subclasses the above classes from that, rather than from\nregion_model_context directly.\n\ngcc/analyzer/ChangeLog:\n\t* region-model.h (class noop_region_model_context): New subclass\n\tof region_model_context.\n\t(class tentative_region_model_context): Inherit from\n\tnoop_region_model_context rather than from region_model_context;\n\tdrop redundant vfunc implementations.\n\t(class test_region_model_context): Likewise.", "tree": {"sha": "ec08870a947171b41c74f6b160abd2fc38fae36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec08870a947171b41c74f6b160abd2fc38fae36a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d9c107ab1eab331e7011513b11e26b78850d614", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9c107ab1eab331e7011513b11e26b78850d614", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d9c107ab1eab331e7011513b11e26b78850d614", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d9c107ab1eab331e7011513b11e26b78850d614/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0db2cd177020920e187ef47791d52cf689133a25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0db2cd177020920e187ef47791d52cf689133a25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0db2cd177020920e187ef47791d52cf689133a25"}], "stats": {"total": 93, "additions": 32, "deletions": 61}, "files": [{"sha": "110a845edc808fc4dd526e6a620aa6b4c874d1a0", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9c107ab1eab331e7011513b11e26b78850d614/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9c107ab1eab331e7011513b11e26b78850d614/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=7d9c107ab1eab331e7011513b11e26b78850d614", "patch": "@@ -1,3 +1,12 @@\n+2020-03-18  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* region-model.h (class noop_region_model_context): New subclass\n+\tof region_model_context.\n+\t(class tentative_region_model_context): Inherit from\n+\tnoop_region_model_context rather than from region_model_context;\n+\tdrop redundant vfunc implementations.\n+\t(class test_region_model_context): Likewise.\n+\n 2020-03-18  David Malcolm  <dmalcolm@redhat.com>\n \n \t* engine.cc (exploded_node::exploded_node): Move implementation"}, {"sha": "035b611b8130e712535f5a9bfbdc2856f9a38a13", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 23, "deletions": 61, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d9c107ab1eab331e7011513b11e26b78850d614/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d9c107ab1eab331e7011513b11e26b78850d614/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=7d9c107ab1eab331e7011513b11e26b78850d614", "patch": "@@ -1972,42 +1972,50 @@ class region_model_context\n \t\t\t\t\tconst dump_location_t &loc) = 0;\n };\n \n-/* A subclass of region_model_context for determining if operations fail\n-   e.g. \"can we generate a region for the lvalue of EXPR?\".  */\n+/* A \"do nothing\" subclass of region_model_context.  */\n \n-class tentative_region_model_context : public region_model_context\n+class noop_region_model_context : public region_model_context\n {\n public:\n-  tentative_region_model_context () : m_num_unexpected_codes (0) {}\n-\n-  void warn (pending_diagnostic *) FINAL OVERRIDE {}\n-  void remap_svalue_ids (const svalue_id_map &) FINAL OVERRIDE {}\n-  int on_svalue_purge (svalue_id, const svalue_id_map &) FINAL OVERRIDE\n+  void warn (pending_diagnostic *) OVERRIDE {}\n+  void remap_svalue_ids (const svalue_id_map &) OVERRIDE {}\n+  int on_svalue_purge (svalue_id, const svalue_id_map &) OVERRIDE\n   {\n     return 0;\n   }\n-  logger *get_logger () FINAL OVERRIDE { return NULL; }\n+  logger *get_logger () OVERRIDE { return NULL; }\n   void on_inherited_svalue (svalue_id parent_sid ATTRIBUTE_UNUSED,\n \t\t\t    svalue_id child_sid  ATTRIBUTE_UNUSED)\n-    FINAL OVERRIDE\n+    OVERRIDE\n   {\n   }\n   void on_cast (svalue_id src_sid ATTRIBUTE_UNUSED,\n-\t\tsvalue_id dst_sid ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+\t\tsvalue_id dst_sid ATTRIBUTE_UNUSED) OVERRIDE\n   {\n   }\n   void on_condition (tree lhs ATTRIBUTE_UNUSED,\n \t\t     enum tree_code op ATTRIBUTE_UNUSED,\n-\t\t     tree rhs ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+\t\t     tree rhs ATTRIBUTE_UNUSED) OVERRIDE\n   {\n   }\n-  void on_unknown_change (svalue_id sid ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+  void on_unknown_change (svalue_id sid ATTRIBUTE_UNUSED) OVERRIDE\n   {\n   }\n   void on_phi (const gphi *phi ATTRIBUTE_UNUSED,\n-\t       tree rhs ATTRIBUTE_UNUSED) FINAL OVERRIDE\n+\t       tree rhs ATTRIBUTE_UNUSED) OVERRIDE\n   {\n   }\n+  void on_unexpected_tree_code (tree, const dump_location_t &) OVERRIDE {}\n+};\n+\n+/* A subclass of region_model_context for determining if operations fail\n+   e.g. \"can we generate a region for the lvalue of EXPR?\".  */\n+\n+class tentative_region_model_context : public noop_region_model_context\n+{\n+public:\n+  tentative_region_model_context () : m_num_unexpected_codes (0) {}\n+\n   void on_unexpected_tree_code (tree, const dump_location_t &)\n     FINAL OVERRIDE\n   {\n@@ -2143,62 +2151,16 @@ using namespace ::selftest;\n /* An implementation of region_model_context for use in selftests, which\n    stores any pending_diagnostic instances passed to it.  */\n \n-class test_region_model_context : public region_model_context\n+class test_region_model_context : public noop_region_model_context\n {\n public:\n   void warn (pending_diagnostic *d) FINAL OVERRIDE\n   {\n     m_diagnostics.safe_push (d);\n   }\n \n-  void remap_svalue_ids (const svalue_id_map &) FINAL OVERRIDE\n-  {\n-    /* Empty.  */\n-  }\n-\n-#if 0\n-  bool can_purge_p (svalue_id) FINAL OVERRIDE\n-  {\n-    return true;\n-  }\n-#endif\n-\n-  int on_svalue_purge (svalue_id, const svalue_id_map &) FINAL OVERRIDE\n-  {\n-    /* Empty.  */\n-    return 0;\n-  }\n-\n-  logger *get_logger () FINAL OVERRIDE { return NULL; }\n-\n-  void on_inherited_svalue (svalue_id parent_sid ATTRIBUTE_UNUSED,\n-\t\t\t    svalue_id child_sid  ATTRIBUTE_UNUSED)\n-    FINAL OVERRIDE\n-  {\n-  }\n-\n-  void on_cast (svalue_id src_sid ATTRIBUTE_UNUSED,\n-\t\tsvalue_id dst_sid ATTRIBUTE_UNUSED) FINAL OVERRIDE\n-  {\n-  }\n-\n   unsigned get_num_diagnostics () const { return m_diagnostics.length (); }\n \n-  void on_condition (tree lhs ATTRIBUTE_UNUSED,\n-\t\t     enum tree_code op ATTRIBUTE_UNUSED,\n-\t\t     tree rhs ATTRIBUTE_UNUSED) FINAL OVERRIDE\n-  {\n-  }\n-\n-  void on_unknown_change (svalue_id sid ATTRIBUTE_UNUSED) FINAL OVERRIDE\n-  {\n-  }\n-\n-  void on_phi (const gphi *phi ATTRIBUTE_UNUSED,\n-\t       tree rhs ATTRIBUTE_UNUSED) FINAL OVERRIDE\n-  {\n-  }\n-\n   void on_unexpected_tree_code (tree t, const dump_location_t &)\n     FINAL OVERRIDE\n   {"}]}