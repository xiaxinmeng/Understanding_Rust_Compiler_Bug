{"sha": "7526923d77eead9e18e827ba22a3933933f7df12", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzUyNjkyM2Q3N2VlYWQ5ZTE4ZTgyN2JhMjJhMzkzMzkzM2Y3ZGYxMg==", "commit": {"author": {"name": "Pat Bernardi", "email": "bernardi@adacore.com", "date": "2020-11-04T08:12:13Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-11-04T08:15:42Z"}, "message": "i386: Cleanup i386/i386elf.h and align it's return convention with the SVR4 ABI\n\nWhile i386elf.h was originally derived from sysv4.h it has not been kept\nup to date with the development of the compiler. Two changes are made:\n\n* The return convention now follows the i386 and x86_64 SVR4 ABIs again.\n\n* The more efficient default version of ASM_OUTPUT_ASCII in elfos.h is used.\n\n2020-11-04  Pat Bernardi  <bernardi@adacore.com>\n\ngcc/ChangeLog\n\n\t* config/i386/i386elf.h (SUBTARGET_RETURN_IN_MEMORY): Remove.\n\t(ASM_OUTPUT_ASCII): Likewise.\n\t(DEFAULT_PCC_STRUCT_RETURN): Define.\n\t* config/i386/i386.c (ix86_return_in_memory): Remove\n\tSUBTARGET_RETURN_IN_MEMORY.", "tree": {"sha": "073899aacc6b709ec55ec6e1f4a9a530585beec1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/073899aacc6b709ec55ec6e1f4a9a530585beec1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7526923d77eead9e18e827ba22a3933933f7df12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7526923d77eead9e18e827ba22a3933933f7df12", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7526923d77eead9e18e827ba22a3933933f7df12", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7526923d77eead9e18e827ba22a3933933f7df12/comments", "author": {"login": "burratoo", "id": 23646118, "node_id": "MDQ6VXNlcjIzNjQ2MTE4", "avatar_url": "https://avatars.githubusercontent.com/u/23646118?v=4", "gravatar_id": "", "url": "https://api.github.com/users/burratoo", "html_url": "https://github.com/burratoo", "followers_url": "https://api.github.com/users/burratoo/followers", "following_url": "https://api.github.com/users/burratoo/following{/other_user}", "gists_url": "https://api.github.com/users/burratoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/burratoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/burratoo/subscriptions", "organizations_url": "https://api.github.com/users/burratoo/orgs", "repos_url": "https://api.github.com/users/burratoo/repos", "events_url": "https://api.github.com/users/burratoo/events{/privacy}", "received_events_url": "https://api.github.com/users/burratoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/878cffbd9e6e1b138a6e0d362e7b29bc0a259940", "html_url": "https://github.com/Rust-GCC/gccrs/commit/878cffbd9e6e1b138a6e0d362e7b29bc0a259940"}], "stats": {"total": 66, "additions": 6, "deletions": 60}, "files": [{"sha": "6fc6228a26e01894792c660da17d5cd98ca9d12a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7526923d77eead9e18e827ba22a3933933f7df12/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7526923d77eead9e18e827ba22a3933933f7df12/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=7526923d77eead9e18e827ba22a3933933f7df12", "patch": "@@ -4092,9 +4092,6 @@ ix86_libcall_value (machine_mode mode)\n static bool\n ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n {\n-#ifdef SUBTARGET_RETURN_IN_MEMORY\n-  return SUBTARGET_RETURN_IN_MEMORY (type, fntype);\n-#else\n   const machine_mode mode = type_natural_mode (type, NULL, true);\n   HOST_WIDE_INT size;\n \n@@ -4175,7 +4172,6 @@ ix86_return_in_memory (const_tree type, const_tree fntype ATTRIBUTE_UNUSED)\n \n       return false;\n     }\n-#endif\n }\n \n \f"}, {"sha": "05cee89f7950914c32573d7d53604109fab42c3e", "filename": "gcc/config/i386/i386elf.h", "status": "modified", "additions": 6, "deletions": 56, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7526923d77eead9e18e827ba22a3933933f7df12/gcc%2Fconfig%2Fi386%2Fi386elf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7526923d77eead9e18e827ba22a3933933f7df12/gcc%2Fconfig%2Fi386%2Fi386elf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386elf.h?ref=7526923d77eead9e18e827ba22a3933933f7df12", "patch": "@@ -19,12 +19,12 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-/* The ELF ABI for the i386 says that records and unions are returned\n-   in memory.  */\n-\n-#define SUBTARGET_RETURN_IN_MEMORY(TYPE, FNTYPE) \\\n-\t(TYPE_MODE (TYPE) == BLKmode \\\n-\t || (VECTOR_MODE_P (TYPE_MODE (TYPE)) && int_size_in_bytes (TYPE) == 8))\n+/* Define DEFAULT_PCC_STRUCT_RETURN to 1 because the i386 SVR4 ABI returns\n+   records and unions in memory. ix86_option_override_internal will overide\n+   this flag when compiling 64-bit code as we never do pcc_struct_return\n+   scheme on x86-64.  */\n+#undef DEFAULT_PCC_STRUCT_RETURN\n+#define DEFAULT_PCC_STRUCT_RETURN 1\n \n #undef CPP_SPEC\n #define CPP_SPEC \"\"\n@@ -40,56 +40,6 @@ along with GCC; see the file COPYING3.  If not see\n #define DBX_REGISTER_NUMBER(n) \\\n   (TARGET_64BIT ? dbx64_register_map[n] : svr4_dbx_register_map[n])\n \n-/* The routine used to output sequences of byte values.  We use a special\n-   version of this for most svr4 targets because doing so makes the\n-   generated assembly code more compact (and thus faster to assemble)\n-   as well as more readable.  Note that if we find subparts of the\n-   character sequence which end with NUL (and which are shorter than\n-   ELF_STRING_LIMIT) we output those using ASM_OUTPUT_LIMITED_STRING.  */\n-\n-#undef ASM_OUTPUT_ASCII\n-#define ASM_OUTPUT_ASCII(FILE, STR, LENGTH)\t\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      const unsigned char *_ascii_bytes =\t\t\t\t\\\n-        (const unsigned char *) (STR);\t\t\t\t\t\\\n-      const unsigned char *limit = _ascii_bytes + (LENGTH);\t\t\\\n-      unsigned bytes_in_chunk = 0;\t\t\t\t\t\\\n-      for (; _ascii_bytes < limit; _ascii_bytes++)\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  const unsigned char *p;\t\t\t\t\t\\\n-\t  if (bytes_in_chunk >= 64)\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      fputc ('\\n', (FILE));\t\t\t\t\t\\\n-\t      bytes_in_chunk = 0;\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  for (p = _ascii_bytes; p < limit && *p != '\\0'; p++)\t\t\\\n-\t    continue;\t\t\t\t\t\t\t\\\n-\t  if (p < limit && (p - _ascii_bytes) <= (long) ELF_STRING_LIMIT) \\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      if (bytes_in_chunk > 0)\t\t\t\t\t\\\n-\t\t{\t\t\t\t\t\t\t\\\n-\t\t  fputc ('\\n', (FILE));\t\t\t\t\t\\\n-\t\t  bytes_in_chunk = 0;\t\t\t\t\t\\\n-\t\t}\t\t\t\t\t\t\t\\\n-\t      ASM_OUTPUT_LIMITED_STRING ((FILE), (const char *) _ascii_bytes); \\\n-\t      _ascii_bytes = p;\t\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t  else\t\t\t\t\t\t\t\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      if (bytes_in_chunk == 0)\t\t\t\t\t\\\n-\t\tfputs (ASM_BYTE, (FILE));\t\t\t\t\\\n-\t      else\t\t\t\t\t\t\t\\\n-\t\tfputc (',', (FILE));\t\t\t\t\t\\\n-\t      fprintf ((FILE), \"0x%02x\", *_ascii_bytes);\t\t\t\\\n-\t      bytes_in_chunk += 5;\t\t\t\t\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      if (bytes_in_chunk > 0)\t\t\t\t\t\t\\\n-\tfputc ('\\n', (FILE));\t\t\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #define LOCAL_LABEL_PREFIX\t\".\"\n \n /* Switch into a generic section.  */"}]}