{"sha": "6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmNhODRhODA0YTczNzhlNzliYmIxZDVhNmQ2NDZlYWQ3ZTZjZmE0Ng==", "commit": {"author": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-19T18:47:29Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2005-02-19T18:47:29Z"}, "message": "[multiple changes]\n\n2005-02-19  Michael Koch  <konqueror@gmx.de>\n\n\t* Makefile.am: Added new files in gnu/java/beans and\n\tjava/beans/XMLDecoder.java.\n\t* Makefile.in: Regenerated.\n\n2005-02-19  Robert Schuster  <thebohemian@gmx.net>\n\n\t* gnu/java/beans/decoder/GrowableArrayContext.java: Fixed\n\tassignment behavior by using java.lang.reflect.Array.set()\n\tdirectly.\n\n2005-02-19  Dalibor Topic  <robilad@kaffe.org>\n\n\t* gnu/java/beans/EmptyBeanInfo.java,\n\tgnu/java/beans/info/ComponentBeanInfo.java:\n\tRemoved unused files.\n\n2005-02-19  Robert Schuster <thebohemian@gmx.net>\n\n\t* gnu/java/beans/DummyAppletStub.java: Add dummy implementation\n\tof AppletStub for java.beans.Beans.instantiate.\n\t* gnu/java/beans/DummyAppletContext.java: Add dummy implementation\n\tof AppletContext.\n\t* java/beans/Beans: Added 1.4 functionality, fixed user documentation\n\tto be conformant with Javadoc guidelines.\n\t(instantiate): Added two more overloaded variants, reworked user\n\tdocumentation, fixed exception behavior, fixed behavior when\n\tdeserializing null.\n\n2005-02-19  Mark Wielaard  <mark@klomp.org>\n\n\t* gnu/java/beans/decoder/DummyHandler.java: Add return statements for\n\tfailing methods.\n\t* gnu/java/beans/decoder/DummyContext.java: Likewise.\n\n2005-02-19  Robert Schuster  <theBohemian@gmx.net>\n\n\t* gnu/java/beans/decoder/AbstractContext.java,\n\tgnu/java/beans/decoder/AbstractCreatableContext.java,\n\tgnu/java/beans/decoder/AbstractElementHandler.java,\n\tgnu/java/beans/decoder/AbstractObjectContext.java,\n\tgnu/java/beans/decoder/ArrayContext.java,\n\tgnu/java/beans/decoder/ArrayHandler.java,\n\tgnu/java/beans/decoder/AssemblyException.java,\n\tgnu/java/beans/decoder/BooleanHandler.java,\n\tgnu/java/beans/decoder/ByteHandler.java,\n\tgnu/java/beans/decoder/CharHandler.java,\n\tgnu/java/beans/decoder/ClassHandler.java,\n\tgnu/java/beans/decoder/ConstructorContext.java,\n\tgnu/java/beans/decoder/Context.java,\n\tgnu/java/beans/decoder/DecoderContext.java,\n\tgnu/java/beans/decoder/DefaultExceptionListener.java,\n\tgnu/java/beans/decoder/DoubleHandler.java,\n\tgnu/java/beans/decoder/DummyContext.java,\n\tgnu/java/beans/decoder/DummyHandler.java,\n\tgnu/java/beans/decoder/ElementHandler.java,\n\tgnu/java/beans/decoder/FloatHandler.java,\n\tgnu/java/beans/decoder/GrowableArrayContext.java,\n\tgnu/java/beans/decoder/IndexContext.java,\n\tgnu/java/beans/decoder/IntHandler.java,\n\tgnu/java/beans/decoder/JavaHandler.java,\n\tgnu/java/beans/decoder/LongHandler.java,\n\tgnu/java/beans/decoder/MethodContext.java,\n\tgnu/java/beans/decoder/MethodFinder.java,\n\tgnu/java/beans/decoder/NullHandler.java,\n\tgnu/java/beans/decoder/ObjectContext.java,\n\tgnu/java/beans/decoder/ObjectHandler.java,\n\tgnu/java/beans/decoder/PersistenceParser.java,\n\tgnu/java/beans/decoder/PropertyContext.java,\n\tgnu/java/beans/decoder/ShortHandler.java,\n\tgnu/java/beans/decoder/SimpleHandler.java,\n\tgnu/java/beans/decoder/StaticMethodContext.java,\n\tgnu/java/beans/decoder/StringHandler.java,\n\tgnu/java/beans/decoder/VoidHandler.java: New class\n\timplementing java.beans.XMLDecoder decoding functionality.\n\t* java/beans/XMLDecoder.java: New class.\n\nFrom-SVN: r95287", "tree": {"sha": "55ebacd491a20d362082021ef37660e30d015575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55ebacd491a20d362082021ef37660e30d015575"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/comments", "author": null, "committer": null, "parents": [{"sha": "2cdc207340d10fdbf643ae6b83cb289af1ba32d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2cdc207340d10fdbf643ae6b83cb289af1ba32d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2cdc207340d10fdbf643ae6b83cb289af1ba32d6"}], "stats": {"total": 5893, "additions": 5611, "deletions": 282}, "files": [{"sha": "dbd10f5d7b7b2f0225d0e9628d3d63c1f63bcfab", "filename": "libjava/ChangeLog", "status": "modified", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1,3 +1,81 @@\n+2005-02-19  Michael Koch  <konqueror@gmx.de>\n+\n+\t* Makefile.am: Added new files in gnu/java/beans and\n+\tjava/beans/XMLDecoder.java.\n+\t* Makefile.in: Regenerated.\n+\n+2005-02-19  Robert Schuster  <thebohemian@gmx.net>\n+\n+\t* gnu/java/beans/decoder/GrowableArrayContext.java: Fixed\n+\tassignment behavior by using java.lang.reflect.Array.set()\n+\tdirectly.\n+\n+2005-02-19  Dalibor Topic  <robilad@kaffe.org>\n+\n+\t* gnu/java/beans/EmptyBeanInfo.java,\n+\tgnu/java/beans/info/ComponentBeanInfo.java:\n+\tRemoved unused files.\n+\n+2005-02-19  Robert Schuster <thebohemian@gmx.net>\n+\n+\t* gnu/java/beans/DummyAppletStub.java: Add dummy implementation\n+\tof AppletStub for java.beans.Beans.instantiate.\n+\t* gnu/java/beans/DummyAppletContext.java: Add dummy implementation\n+\tof AppletContext.\n+\t* java/beans/Beans: Added 1.4 functionality, fixed user documentation\n+\tto be conformant with Javadoc guidelines.\n+\t(instantiate): Added two more overloaded variants, reworked user\n+\tdocumentation, fixed exception behavior, fixed behavior when\n+\tdeserializing null.\n+\n+2005-02-19  Mark Wielaard  <mark@klomp.org>\n+\n+\t* gnu/java/beans/decoder/DummyHandler.java: Add return statements for\n+\tfailing methods.\n+\t* gnu/java/beans/decoder/DummyContext.java: Likewise.\n+\n+2005-02-19  Robert Schuster  <theBohemian@gmx.net>\n+\n+\t* gnu/java/beans/decoder/AbstractContext.java,\n+\tgnu/java/beans/decoder/AbstractCreatableContext.java,\n+\tgnu/java/beans/decoder/AbstractElementHandler.java,\n+\tgnu/java/beans/decoder/AbstractObjectContext.java,\n+\tgnu/java/beans/decoder/ArrayContext.java,\n+\tgnu/java/beans/decoder/ArrayHandler.java,\n+\tgnu/java/beans/decoder/AssemblyException.java,\n+\tgnu/java/beans/decoder/BooleanHandler.java,\n+\tgnu/java/beans/decoder/ByteHandler.java,\n+\tgnu/java/beans/decoder/CharHandler.java,\n+\tgnu/java/beans/decoder/ClassHandler.java,\n+\tgnu/java/beans/decoder/ConstructorContext.java,\n+\tgnu/java/beans/decoder/Context.java,\n+\tgnu/java/beans/decoder/DecoderContext.java,\n+\tgnu/java/beans/decoder/DefaultExceptionListener.java,\n+\tgnu/java/beans/decoder/DoubleHandler.java,\n+\tgnu/java/beans/decoder/DummyContext.java,\n+\tgnu/java/beans/decoder/DummyHandler.java,\n+\tgnu/java/beans/decoder/ElementHandler.java,\n+\tgnu/java/beans/decoder/FloatHandler.java,\n+\tgnu/java/beans/decoder/GrowableArrayContext.java,\n+\tgnu/java/beans/decoder/IndexContext.java,\n+\tgnu/java/beans/decoder/IntHandler.java,\n+\tgnu/java/beans/decoder/JavaHandler.java,\n+\tgnu/java/beans/decoder/LongHandler.java,\n+\tgnu/java/beans/decoder/MethodContext.java,\n+\tgnu/java/beans/decoder/MethodFinder.java,\n+\tgnu/java/beans/decoder/NullHandler.java,\n+\tgnu/java/beans/decoder/ObjectContext.java,\n+\tgnu/java/beans/decoder/ObjectHandler.java,\n+\tgnu/java/beans/decoder/PersistenceParser.java,\n+\tgnu/java/beans/decoder/PropertyContext.java,\n+\tgnu/java/beans/decoder/ShortHandler.java,\n+\tgnu/java/beans/decoder/SimpleHandler.java,\n+\tgnu/java/beans/decoder/StaticMethodContext.java,\n+\tgnu/java/beans/decoder/StringHandler.java,\n+\tgnu/java/beans/decoder/VoidHandler.java: New class\n+\timplementing java.beans.XMLDecoder decoding functionality.\n+\t* java/beans/XMLDecoder.java: New class.\n+\n 2005-02-19  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/JTextField.java"}, {"sha": "bd8c4d1acc7993d0ad939b73e15dda1efd9ccbe3", "filename": "libjava/Makefile.am", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1077,6 +1077,43 @@ gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/awt/peer/ClasspathFontPeer.java \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+gnu/java/beans/decoder/AbstractContext.java \\\n+gnu/java/beans/decoder/AbstractCreatableObjectContext.java \\\n+gnu/java/beans/decoder/AbstractElementHandler.java \\\n+gnu/java/beans/decoder/AbstractObjectContext.java \\\n+gnu/java/beans/decoder/ArrayContext.java \\\n+gnu/java/beans/decoder/ArrayHandler.java \\\n+gnu/java/beans/decoder/AssemblyException.java \\\n+gnu/java/beans/decoder/BooleanHandler.java \\\n+gnu/java/beans/decoder/ByteHandler.java \\\n+gnu/java/beans/decoder/CharHandler.java \\\n+gnu/java/beans/decoder/ClassHandler.java \\\n+gnu/java/beans/decoder/ConstructorContext.java \\\n+gnu/java/beans/decoder/Context.java \\\n+gnu/java/beans/decoder/DecoderContext.java \\\n+gnu/java/beans/decoder/DefaultExceptionListener.java \\\n+gnu/java/beans/decoder/DoubleHandler.java \\\n+gnu/java/beans/decoder/DummyContext.java \\\n+gnu/java/beans/decoder/DummyHandler.java \\\n+gnu/java/beans/decoder/ElementHandler.java \\\n+gnu/java/beans/decoder/FloatHandler.java \\\n+gnu/java/beans/decoder/GrowableArrayContext.java \\\n+gnu/java/beans/decoder/IndexContext.java \\\n+gnu/java/beans/decoder/IntHandler.java \\\n+gnu/java/beans/decoder/JavaHandler.java \\\n+gnu/java/beans/decoder/LongHandler.java \\\n+gnu/java/beans/decoder/MethodContext.java \\\n+gnu/java/beans/decoder/MethodFinder.java \\\n+gnu/java/beans/decoder/NullHandler.java \\\n+gnu/java/beans/decoder/ObjectContext.java \\\n+gnu/java/beans/decoder/ObjectHandler.java \\\n+gnu/java/beans/decoder/PersistenceParser.java \\\n+gnu/java/beans/decoder/PropertyContext.java \\\n+gnu/java/beans/decoder/ShortHandler.java \\\n+gnu/java/beans/decoder/SimpleHandler.java \\\n+gnu/java/beans/decoder/StaticMethodContext.java \\\n+gnu/java/beans/decoder/StringHandler.java \\\n+gnu/java/beans/decoder/VoidHandler.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n@@ -1087,9 +1124,9 @@ gnu/java/beans/editors/NativeIntEditor.java \\\n gnu/java/beans/editors/NativeLongEditor.java \\\n gnu/java/beans/editors/NativeShortEditor.java \\\n gnu/java/beans/editors/StringEditor.java \\\n-gnu/java/beans/info/ComponentBeanInfo.java \\\n gnu/java/beans/BeanInfoEmbryo.java \\\n-gnu/java/beans/EmptyBeanInfo.java \\\n+gnu/java/beans/DummyAppletContext.java \\\n+gnu/java/beans/DummyAppletStub.java \\\n gnu/java/beans/ExplicitBeanInfo.java \\\n gnu/java/beans/IntrospectionIncubator.java \\\n java/applet/Applet.java \\\n@@ -1469,6 +1506,7 @@ java/beans/VetoableChangeListenerProxy.java \\\n java/beans/VetoableChangeSupport.java \\\n java/beans/Visibility.java \\\n java/beans/AppletInitializer.java \\\n+java/beans/XMLDecoder.java \\\n javax/swing/border/AbstractBorder.java \\\n javax/swing/border/BevelBorder.java \\\n javax/swing/border/Border.java \\"}, {"sha": "38d21a7642bc61c56358dbe8926e159417d7e77f", "filename": "libjava/Makefile.in", "status": "modified", "additions": 367, "deletions": 28, "changes": 395, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1312,6 +1312,43 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/java/awt/peer/GLightweightPeer.java \\\n \tgnu/java/awt/peer/ClasspathFontPeer.java \\\n \tgnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+\tgnu/java/beans/decoder/AbstractContext.java \\\n+\tgnu/java/beans/decoder/AbstractCreatableObjectContext.java \\\n+\tgnu/java/beans/decoder/AbstractElementHandler.java \\\n+\tgnu/java/beans/decoder/AbstractObjectContext.java \\\n+\tgnu/java/beans/decoder/ArrayContext.java \\\n+\tgnu/java/beans/decoder/ArrayHandler.java \\\n+\tgnu/java/beans/decoder/AssemblyException.java \\\n+\tgnu/java/beans/decoder/BooleanHandler.java \\\n+\tgnu/java/beans/decoder/ByteHandler.java \\\n+\tgnu/java/beans/decoder/CharHandler.java \\\n+\tgnu/java/beans/decoder/ClassHandler.java \\\n+\tgnu/java/beans/decoder/ConstructorContext.java \\\n+\tgnu/java/beans/decoder/Context.java \\\n+\tgnu/java/beans/decoder/DecoderContext.java \\\n+\tgnu/java/beans/decoder/DefaultExceptionListener.java \\\n+\tgnu/java/beans/decoder/DoubleHandler.java \\\n+\tgnu/java/beans/decoder/DummyContext.java \\\n+\tgnu/java/beans/decoder/DummyHandler.java \\\n+\tgnu/java/beans/decoder/ElementHandler.java \\\n+\tgnu/java/beans/decoder/FloatHandler.java \\\n+\tgnu/java/beans/decoder/GrowableArrayContext.java \\\n+\tgnu/java/beans/decoder/IndexContext.java \\\n+\tgnu/java/beans/decoder/IntHandler.java \\\n+\tgnu/java/beans/decoder/JavaHandler.java \\\n+\tgnu/java/beans/decoder/LongHandler.java \\\n+\tgnu/java/beans/decoder/MethodContext.java \\\n+\tgnu/java/beans/decoder/MethodFinder.java \\\n+\tgnu/java/beans/decoder/NullHandler.java \\\n+\tgnu/java/beans/decoder/ObjectContext.java \\\n+\tgnu/java/beans/decoder/ObjectHandler.java \\\n+\tgnu/java/beans/decoder/PersistenceParser.java \\\n+\tgnu/java/beans/decoder/PropertyContext.java \\\n+\tgnu/java/beans/decoder/ShortHandler.java \\\n+\tgnu/java/beans/decoder/SimpleHandler.java \\\n+\tgnu/java/beans/decoder/StaticMethodContext.java \\\n+\tgnu/java/beans/decoder/StringHandler.java \\\n+\tgnu/java/beans/decoder/VoidHandler.java \\\n \tgnu/java/beans/editors/ColorEditor.java \\\n \tgnu/java/beans/editors/FontEditor.java \\\n \tgnu/java/beans/editors/NativeBooleanEditor.java \\\n@@ -1322,9 +1359,9 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tgnu/java/beans/editors/NativeLongEditor.java \\\n \tgnu/java/beans/editors/NativeShortEditor.java \\\n \tgnu/java/beans/editors/StringEditor.java \\\n-\tgnu/java/beans/info/ComponentBeanInfo.java \\\n \tgnu/java/beans/BeanInfoEmbryo.java \\\n-\tgnu/java/beans/EmptyBeanInfo.java \\\n+\tgnu/java/beans/DummyAppletContext.java \\\n+\tgnu/java/beans/DummyAppletStub.java \\\n \tgnu/java/beans/ExplicitBeanInfo.java \\\n \tgnu/java/beans/IntrospectionIncubator.java \\\n \tjava/applet/Applet.java java/applet/AppletStub.java \\\n@@ -1622,6 +1659,7 @@ am__libgcj0_convenience_la_SOURCES_DIST = prims.cc jni.cc exception.cc \\\n \tjava/beans/VetoableChangeListenerProxy.java \\\n \tjava/beans/VetoableChangeSupport.java \\\n \tjava/beans/Visibility.java java/beans/AppletInitializer.java \\\n+\tjava/beans/XMLDecoder.java \\\n \tjavax/swing/border/AbstractBorder.java \\\n \tjavax/swing/border/BevelBorder.java \\\n \tjavax/swing/border/Border.java \\\n@@ -2877,6 +2915,43 @@ am__objects_11 = gnu/awt/LightweightRedirector.lo \\\n \tgnu/java/awt/peer/GLightweightPeer.lo \\\n \tgnu/java/awt/peer/ClasspathFontPeer.lo \\\n \tgnu/java/awt/peer/ClasspathTextLayoutPeer.lo \\\n+\tgnu/java/beans/decoder/AbstractContext.lo \\\n+\tgnu/java/beans/decoder/AbstractCreatableObjectContext.lo \\\n+\tgnu/java/beans/decoder/AbstractElementHandler.lo \\\n+\tgnu/java/beans/decoder/AbstractObjectContext.lo \\\n+\tgnu/java/beans/decoder/ArrayContext.lo \\\n+\tgnu/java/beans/decoder/ArrayHandler.lo \\\n+\tgnu/java/beans/decoder/AssemblyException.lo \\\n+\tgnu/java/beans/decoder/BooleanHandler.lo \\\n+\tgnu/java/beans/decoder/ByteHandler.lo \\\n+\tgnu/java/beans/decoder/CharHandler.lo \\\n+\tgnu/java/beans/decoder/ClassHandler.lo \\\n+\tgnu/java/beans/decoder/ConstructorContext.lo \\\n+\tgnu/java/beans/decoder/Context.lo \\\n+\tgnu/java/beans/decoder/DecoderContext.lo \\\n+\tgnu/java/beans/decoder/DefaultExceptionListener.lo \\\n+\tgnu/java/beans/decoder/DoubleHandler.lo \\\n+\tgnu/java/beans/decoder/DummyContext.lo \\\n+\tgnu/java/beans/decoder/DummyHandler.lo \\\n+\tgnu/java/beans/decoder/ElementHandler.lo \\\n+\tgnu/java/beans/decoder/FloatHandler.lo \\\n+\tgnu/java/beans/decoder/GrowableArrayContext.lo \\\n+\tgnu/java/beans/decoder/IndexContext.lo \\\n+\tgnu/java/beans/decoder/IntHandler.lo \\\n+\tgnu/java/beans/decoder/JavaHandler.lo \\\n+\tgnu/java/beans/decoder/LongHandler.lo \\\n+\tgnu/java/beans/decoder/MethodContext.lo \\\n+\tgnu/java/beans/decoder/MethodFinder.lo \\\n+\tgnu/java/beans/decoder/NullHandler.lo \\\n+\tgnu/java/beans/decoder/ObjectContext.lo \\\n+\tgnu/java/beans/decoder/ObjectHandler.lo \\\n+\tgnu/java/beans/decoder/PersistenceParser.lo \\\n+\tgnu/java/beans/decoder/PropertyContext.lo \\\n+\tgnu/java/beans/decoder/ShortHandler.lo \\\n+\tgnu/java/beans/decoder/SimpleHandler.lo \\\n+\tgnu/java/beans/decoder/StaticMethodContext.lo \\\n+\tgnu/java/beans/decoder/StringHandler.lo \\\n+\tgnu/java/beans/decoder/VoidHandler.lo \\\n \tgnu/java/beans/editors/ColorEditor.lo \\\n \tgnu/java/beans/editors/FontEditor.lo \\\n \tgnu/java/beans/editors/NativeBooleanEditor.lo \\\n@@ -2887,9 +2962,9 @@ am__objects_11 = gnu/awt/LightweightRedirector.lo \\\n \tgnu/java/beans/editors/NativeLongEditor.lo \\\n \tgnu/java/beans/editors/NativeShortEditor.lo \\\n \tgnu/java/beans/editors/StringEditor.lo \\\n-\tgnu/java/beans/info/ComponentBeanInfo.lo \\\n \tgnu/java/beans/BeanInfoEmbryo.lo \\\n-\tgnu/java/beans/EmptyBeanInfo.lo \\\n+\tgnu/java/beans/DummyAppletContext.lo \\\n+\tgnu/java/beans/DummyAppletStub.lo \\\n \tgnu/java/beans/ExplicitBeanInfo.lo \\\n \tgnu/java/beans/IntrospectionIncubator.lo java/applet/Applet.lo \\\n \tjava/applet/AppletStub.lo java/applet/AppletContext.lo \\\n@@ -3161,7 +3236,7 @@ am__objects_11 = gnu/awt/LightweightRedirector.lo \\\n \tjava/beans/VetoableChangeListener.lo \\\n \tjava/beans/VetoableChangeListenerProxy.lo \\\n \tjava/beans/VetoableChangeSupport.lo java/beans/Visibility.lo \\\n-\tjava/beans/AppletInitializer.lo \\\n+\tjava/beans/AppletInitializer.lo java/beans/XMLDecoder.lo \\\n \tjavax/swing/border/AbstractBorder.lo \\\n \tjavax/swing/border/BevelBorder.lo javax/swing/border/Border.lo \\\n \tjavax/swing/border/CompoundBorder.lo \\\n@@ -5402,6 +5477,43 @@ gnu/java/awt/peer/EmbeddedWindowPeer.java \\\n gnu/java/awt/peer/GLightweightPeer.java \\\n gnu/java/awt/peer/ClasspathFontPeer.java \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.java \\\n+gnu/java/beans/decoder/AbstractContext.java \\\n+gnu/java/beans/decoder/AbstractCreatableObjectContext.java \\\n+gnu/java/beans/decoder/AbstractElementHandler.java \\\n+gnu/java/beans/decoder/AbstractObjectContext.java \\\n+gnu/java/beans/decoder/ArrayContext.java \\\n+gnu/java/beans/decoder/ArrayHandler.java \\\n+gnu/java/beans/decoder/AssemblyException.java \\\n+gnu/java/beans/decoder/BooleanHandler.java \\\n+gnu/java/beans/decoder/ByteHandler.java \\\n+gnu/java/beans/decoder/CharHandler.java \\\n+gnu/java/beans/decoder/ClassHandler.java \\\n+gnu/java/beans/decoder/ConstructorContext.java \\\n+gnu/java/beans/decoder/Context.java \\\n+gnu/java/beans/decoder/DecoderContext.java \\\n+gnu/java/beans/decoder/DefaultExceptionListener.java \\\n+gnu/java/beans/decoder/DoubleHandler.java \\\n+gnu/java/beans/decoder/DummyContext.java \\\n+gnu/java/beans/decoder/DummyHandler.java \\\n+gnu/java/beans/decoder/ElementHandler.java \\\n+gnu/java/beans/decoder/FloatHandler.java \\\n+gnu/java/beans/decoder/GrowableArrayContext.java \\\n+gnu/java/beans/decoder/IndexContext.java \\\n+gnu/java/beans/decoder/IntHandler.java \\\n+gnu/java/beans/decoder/JavaHandler.java \\\n+gnu/java/beans/decoder/LongHandler.java \\\n+gnu/java/beans/decoder/MethodContext.java \\\n+gnu/java/beans/decoder/MethodFinder.java \\\n+gnu/java/beans/decoder/NullHandler.java \\\n+gnu/java/beans/decoder/ObjectContext.java \\\n+gnu/java/beans/decoder/ObjectHandler.java \\\n+gnu/java/beans/decoder/PersistenceParser.java \\\n+gnu/java/beans/decoder/PropertyContext.java \\\n+gnu/java/beans/decoder/ShortHandler.java \\\n+gnu/java/beans/decoder/SimpleHandler.java \\\n+gnu/java/beans/decoder/StaticMethodContext.java \\\n+gnu/java/beans/decoder/StringHandler.java \\\n+gnu/java/beans/decoder/VoidHandler.java \\\n gnu/java/beans/editors/ColorEditor.java\t\\\n gnu/java/beans/editors/FontEditor.java \\\n gnu/java/beans/editors/NativeBooleanEditor.java\t\\\n@@ -5412,9 +5524,9 @@ gnu/java/beans/editors/NativeIntEditor.java \\\n gnu/java/beans/editors/NativeLongEditor.java \\\n gnu/java/beans/editors/NativeShortEditor.java \\\n gnu/java/beans/editors/StringEditor.java \\\n-gnu/java/beans/info/ComponentBeanInfo.java \\\n gnu/java/beans/BeanInfoEmbryo.java \\\n-gnu/java/beans/EmptyBeanInfo.java \\\n+gnu/java/beans/DummyAppletContext.java \\\n+gnu/java/beans/DummyAppletStub.java \\\n gnu/java/beans/ExplicitBeanInfo.java \\\n gnu/java/beans/IntrospectionIncubator.java \\\n java/applet/Applet.java \\\n@@ -5794,6 +5906,7 @@ java/beans/VetoableChangeListenerProxy.java \\\n java/beans/VetoableChangeSupport.java \\\n java/beans/Visibility.java \\\n java/beans/AppletInitializer.java \\\n+java/beans/XMLDecoder.java \\\n javax/swing/border/AbstractBorder.java \\\n javax/swing/border/BevelBorder.java \\\n javax/swing/border/Border.java \\\n@@ -11950,6 +12063,123 @@ gnu/java/awt/peer/ClasspathFontPeer.lo:  \\\n gnu/java/awt/peer/ClasspathTextLayoutPeer.lo:  \\\n \tgnu/java/awt/peer/$(am__dirstamp) \\\n \tgnu/java/awt/peer/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/java/beans/decoder\n+\t@: > gnu/java/beans/decoder/$(am__dirstamp)\n+gnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp):\n+\t@$(mkdir_p) gnu/java/beans/decoder/$(DEPDIR)\n+\t@: > gnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/AbstractContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/AbstractCreatableObjectContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/AbstractElementHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/AbstractObjectContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ArrayContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ArrayHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/AssemblyException.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/BooleanHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ByteHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/CharHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ClassHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ConstructorContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/Context.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/DecoderContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/DefaultExceptionListener.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/DoubleHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/DummyContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/DummyHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ElementHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/FloatHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/GrowableArrayContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/IndexContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/IntHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/JavaHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/LongHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/MethodContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/MethodFinder.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/NullHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ObjectContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ObjectHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/PersistenceParser.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/PropertyContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/ShortHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/SimpleHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/StaticMethodContext.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/StringHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/decoder/VoidHandler.lo:  \\\n+\tgnu/java/beans/decoder/$(am__dirstamp) \\\n+\tgnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n gnu/java/beans/editors/$(am__dirstamp):\n \t@$(mkdir_p) gnu/java/beans/editors\n \t@: > gnu/java/beans/editors/$(am__dirstamp)\n@@ -11986,15 +12216,6 @@ gnu/java/beans/editors/NativeShortEditor.lo:  \\\n gnu/java/beans/editors/StringEditor.lo:  \\\n \tgnu/java/beans/editors/$(am__dirstamp) \\\n \tgnu/java/beans/editors/$(DEPDIR)/$(am__dirstamp)\n-gnu/java/beans/info/$(am__dirstamp):\n-\t@$(mkdir_p) gnu/java/beans/info\n-\t@: > gnu/java/beans/info/$(am__dirstamp)\n-gnu/java/beans/info/$(DEPDIR)/$(am__dirstamp):\n-\t@$(mkdir_p) gnu/java/beans/info/$(DEPDIR)\n-\t@: > gnu/java/beans/info/$(DEPDIR)/$(am__dirstamp)\n-gnu/java/beans/info/ComponentBeanInfo.lo:  \\\n-\tgnu/java/beans/info/$(am__dirstamp) \\\n-\tgnu/java/beans/info/$(DEPDIR)/$(am__dirstamp)\n gnu/java/beans/$(am__dirstamp):\n \t@$(mkdir_p) gnu/java/beans\n \t@: > gnu/java/beans/$(am__dirstamp)\n@@ -12003,7 +12224,9 @@ gnu/java/beans/$(DEPDIR)/$(am__dirstamp):\n \t@: > gnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n gnu/java/beans/BeanInfoEmbryo.lo: gnu/java/beans/$(am__dirstamp) \\\n \tgnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n-gnu/java/beans/EmptyBeanInfo.lo: gnu/java/beans/$(am__dirstamp) \\\n+gnu/java/beans/DummyAppletContext.lo: gnu/java/beans/$(am__dirstamp) \\\n+\tgnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n+gnu/java/beans/DummyAppletStub.lo: gnu/java/beans/$(am__dirstamp) \\\n \tgnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n gnu/java/beans/ExplicitBeanInfo.lo: gnu/java/beans/$(am__dirstamp) \\\n \tgnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n@@ -12926,6 +13149,8 @@ java/beans/Visibility.lo: java/beans/$(am__dirstamp) \\\n \tjava/beans/$(DEPDIR)/$(am__dirstamp)\n java/beans/AppletInitializer.lo: java/beans/$(am__dirstamp) \\\n \tjava/beans/$(DEPDIR)/$(am__dirstamp)\n+java/beans/XMLDecoder.lo: java/beans/$(am__dirstamp) \\\n+\tjava/beans/$(DEPDIR)/$(am__dirstamp)\n javax/swing/border/$(am__dirstamp):\n \t@$(mkdir_p) javax/swing/border\n \t@: > javax/swing/border/$(am__dirstamp)\n@@ -16393,12 +16618,88 @@ mostlyclean-compile:\n \t-rm -f gnu/java/awt/peer/gtk/lib_gnu_java_awt_peer_gtk_la-GtkWindowPeer.lo\n \t-rm -f gnu/java/beans/BeanInfoEmbryo.$(OBJEXT)\n \t-rm -f gnu/java/beans/BeanInfoEmbryo.lo\n-\t-rm -f gnu/java/beans/EmptyBeanInfo.$(OBJEXT)\n-\t-rm -f gnu/java/beans/EmptyBeanInfo.lo\n+\t-rm -f gnu/java/beans/DummyAppletContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/DummyAppletContext.lo\n+\t-rm -f gnu/java/beans/DummyAppletStub.$(OBJEXT)\n+\t-rm -f gnu/java/beans/DummyAppletStub.lo\n \t-rm -f gnu/java/beans/ExplicitBeanInfo.$(OBJEXT)\n \t-rm -f gnu/java/beans/ExplicitBeanInfo.lo\n \t-rm -f gnu/java/beans/IntrospectionIncubator.$(OBJEXT)\n \t-rm -f gnu/java/beans/IntrospectionIncubator.lo\n+\t-rm -f gnu/java/beans/decoder/AbstractContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/AbstractContext.lo\n+\t-rm -f gnu/java/beans/decoder/AbstractCreatableObjectContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/AbstractCreatableObjectContext.lo\n+\t-rm -f gnu/java/beans/decoder/AbstractElementHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/AbstractElementHandler.lo\n+\t-rm -f gnu/java/beans/decoder/AbstractObjectContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/AbstractObjectContext.lo\n+\t-rm -f gnu/java/beans/decoder/ArrayContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ArrayContext.lo\n+\t-rm -f gnu/java/beans/decoder/ArrayHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ArrayHandler.lo\n+\t-rm -f gnu/java/beans/decoder/AssemblyException.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/AssemblyException.lo\n+\t-rm -f gnu/java/beans/decoder/BooleanHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/BooleanHandler.lo\n+\t-rm -f gnu/java/beans/decoder/ByteHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ByteHandler.lo\n+\t-rm -f gnu/java/beans/decoder/CharHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/CharHandler.lo\n+\t-rm -f gnu/java/beans/decoder/ClassHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ClassHandler.lo\n+\t-rm -f gnu/java/beans/decoder/ConstructorContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ConstructorContext.lo\n+\t-rm -f gnu/java/beans/decoder/Context.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/Context.lo\n+\t-rm -f gnu/java/beans/decoder/DecoderContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/DecoderContext.lo\n+\t-rm -f gnu/java/beans/decoder/DefaultExceptionListener.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/DefaultExceptionListener.lo\n+\t-rm -f gnu/java/beans/decoder/DoubleHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/DoubleHandler.lo\n+\t-rm -f gnu/java/beans/decoder/DummyContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/DummyContext.lo\n+\t-rm -f gnu/java/beans/decoder/DummyHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/DummyHandler.lo\n+\t-rm -f gnu/java/beans/decoder/ElementHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ElementHandler.lo\n+\t-rm -f gnu/java/beans/decoder/FloatHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/FloatHandler.lo\n+\t-rm -f gnu/java/beans/decoder/GrowableArrayContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/GrowableArrayContext.lo\n+\t-rm -f gnu/java/beans/decoder/IndexContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/IndexContext.lo\n+\t-rm -f gnu/java/beans/decoder/IntHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/IntHandler.lo\n+\t-rm -f gnu/java/beans/decoder/JavaHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/JavaHandler.lo\n+\t-rm -f gnu/java/beans/decoder/LongHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/LongHandler.lo\n+\t-rm -f gnu/java/beans/decoder/MethodContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/MethodContext.lo\n+\t-rm -f gnu/java/beans/decoder/MethodFinder.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/MethodFinder.lo\n+\t-rm -f gnu/java/beans/decoder/NullHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/NullHandler.lo\n+\t-rm -f gnu/java/beans/decoder/ObjectContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ObjectContext.lo\n+\t-rm -f gnu/java/beans/decoder/ObjectHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ObjectHandler.lo\n+\t-rm -f gnu/java/beans/decoder/PersistenceParser.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/PersistenceParser.lo\n+\t-rm -f gnu/java/beans/decoder/PropertyContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/PropertyContext.lo\n+\t-rm -f gnu/java/beans/decoder/ShortHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/ShortHandler.lo\n+\t-rm -f gnu/java/beans/decoder/SimpleHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/SimpleHandler.lo\n+\t-rm -f gnu/java/beans/decoder/StaticMethodContext.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/StaticMethodContext.lo\n+\t-rm -f gnu/java/beans/decoder/StringHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/StringHandler.lo\n+\t-rm -f gnu/java/beans/decoder/VoidHandler.$(OBJEXT)\n+\t-rm -f gnu/java/beans/decoder/VoidHandler.lo\n \t-rm -f gnu/java/beans/editors/ColorEditor.$(OBJEXT)\n \t-rm -f gnu/java/beans/editors/ColorEditor.lo\n \t-rm -f gnu/java/beans/editors/FontEditor.$(OBJEXT)\n@@ -16419,8 +16720,6 @@ mostlyclean-compile:\n \t-rm -f gnu/java/beans/editors/NativeShortEditor.lo\n \t-rm -f gnu/java/beans/editors/StringEditor.$(OBJEXT)\n \t-rm -f gnu/java/beans/editors/StringEditor.lo\n-\t-rm -f gnu/java/beans/info/ComponentBeanInfo.$(OBJEXT)\n-\t-rm -f gnu/java/beans/info/ComponentBeanInfo.lo\n \t-rm -f gnu/java/io/ASN1ParsingException.$(OBJEXT)\n \t-rm -f gnu/java/io/ASN1ParsingException.lo\n \t-rm -f gnu/java/io/Base64InputStream.$(OBJEXT)\n@@ -18261,6 +18560,8 @@ mostlyclean-compile:\n \t-rm -f java/beans/VetoableChangeSupport.lo\n \t-rm -f java/beans/Visibility.$(OBJEXT)\n \t-rm -f java/beans/Visibility.lo\n+\t-rm -f java/beans/XMLDecoder.$(OBJEXT)\n+\t-rm -f java/beans/XMLDecoder.lo\n \t-rm -f java/beans/beancontext/BeanContext.$(OBJEXT)\n \t-rm -f java/beans/beancontext/BeanContext.lo\n \t-rm -f java/beans/beancontext/BeanContextChild.$(OBJEXT)\n@@ -21809,9 +22110,47 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/awt/peer/gtk/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-GtkToolkit.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/awt/peer/gtk/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-GtkWindowPeer.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/BeanInfoEmbryo.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/EmptyBeanInfo.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/DummyAppletContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/DummyAppletStub.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/ExplicitBeanInfo.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/$(DEPDIR)/IntrospectionIncubator.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/AbstractContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/AbstractCreatableObjectContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/AbstractElementHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/AbstractObjectContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ArrayContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ArrayHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/AssemblyException.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/BooleanHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ByteHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/CharHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ClassHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ConstructorContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/Context.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/DecoderContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/DefaultExceptionListener.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/DoubleHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/DummyContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/DummyHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ElementHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/FloatHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/GrowableArrayContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/IndexContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/IntHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/JavaHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/LongHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/MethodContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/MethodFinder.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/NullHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ObjectContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ObjectHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/PersistenceParser.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/PropertyContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/ShortHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/SimpleHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/StaticMethodContext.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/StringHandler.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/decoder/$(DEPDIR)/VoidHandler.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/ColorEditor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/FontEditor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/NativeBooleanEditor.Plo@am__quote@\n@@ -21822,7 +22161,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/NativeLongEditor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/NativeShortEditor.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/editors/$(DEPDIR)/StringEditor.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@gnu/java/beans/info/$(DEPDIR)/ComponentBeanInfo.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/io/$(DEPDIR)/ASN1ParsingException.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/io/$(DEPDIR)/Base64InputStream.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@gnu/java/io/$(DEPDIR)/ClassLoaderObjectInputStream.Plo@am__quote@\n@@ -22743,6 +23081,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/$(DEPDIR)/VetoableChangeListenerProxy.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/$(DEPDIR)/VetoableChangeSupport.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/$(DEPDIR)/Visibility.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@java/beans/$(DEPDIR)/XMLDecoder.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/beancontext/$(DEPDIR)/BeanContext.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/beancontext/$(DEPDIR)/BeanContextChild.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@java/beans/beancontext/$(DEPDIR)/BeanContextChildComponentProxy.Plo@am__quote@\n@@ -25265,8 +25604,8 @@ clean-libtool:\n \t-rm -rf gnu/java/awt/peer/.libs gnu/java/awt/peer/_libs\n \t-rm -rf gnu/java/awt/peer/gtk/.libs gnu/java/awt/peer/gtk/_libs\n \t-rm -rf gnu/java/beans/.libs gnu/java/beans/_libs\n+\t-rm -rf gnu/java/beans/decoder/.libs gnu/java/beans/decoder/_libs\n \t-rm -rf gnu/java/beans/editors/.libs gnu/java/beans/editors/_libs\n-\t-rm -rf gnu/java/beans/info/.libs gnu/java/beans/info/_libs\n \t-rm -rf gnu/java/io/.libs gnu/java/io/_libs\n \t-rm -rf gnu/java/lang/.libs gnu/java/lang/_libs\n \t-rm -rf gnu/java/lang/reflect/.libs gnu/java/lang/reflect/_libs\n@@ -25793,10 +26132,10 @@ distclean-generic:\n \t-rm -f gnu/java/awt/peer/gtk/$(am__dirstamp)\n \t-rm -f gnu/java/beans/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/java/beans/$(am__dirstamp)\n+\t-rm -f gnu/java/beans/decoder/$(DEPDIR)/$(am__dirstamp)\n+\t-rm -f gnu/java/beans/decoder/$(am__dirstamp)\n \t-rm -f gnu/java/beans/editors/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/java/beans/editors/$(am__dirstamp)\n-\t-rm -f gnu/java/beans/info/$(DEPDIR)/$(am__dirstamp)\n-\t-rm -f gnu/java/beans/info/$(am__dirstamp)\n \t-rm -f gnu/java/io/$(DEPDIR)/$(am__dirstamp)\n \t-rm -f gnu/java/io/$(am__dirstamp)\n \t-rm -f gnu/java/lang/$(DEPDIR)/$(am__dirstamp)\n@@ -26099,7 +26438,7 @@ clean-am: clean-binPROGRAMS clean-generic clean-libtool clean-local \\\n \n distclean: distclean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) gnu/xml/aelfred2/$(DEPDIR) gnu/xml/dom/$(DEPDIR) gnu/xml/dom/ls/$(DEPDIR) gnu/xml/pipeline/$(DEPDIR) gnu/xml/transform/$(DEPDIR) gnu/xml/util/$(DEPDIR) gnu/xml/xpath/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) javax/xml/$(DEPDIR) javax/xml/datatype/$(DEPDIR) javax/xml/namespace/$(DEPDIR) javax/xml/parsers/$(DEPDIR) javax/xml/transform/$(DEPDIR) javax/xml/transform/dom/$(DEPDIR) javax/xml/transform/sax/$(DEPDIR) javax/xml/transform/stream/$(DEPDIR) javax/xml/validation/$(DEPDIR) javax/xml/xpath/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/decoder/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) gnu/xml/aelfred2/$(DEPDIR) gnu/xml/dom/$(DEPDIR) gnu/xml/dom/ls/$(DEPDIR) gnu/xml/pipeline/$(DEPDIR) gnu/xml/transform/$(DEPDIR) gnu/xml/util/$(DEPDIR) gnu/xml/xpath/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) javax/xml/$(DEPDIR) javax/xml/datatype/$(DEPDIR) javax/xml/namespace/$(DEPDIR) javax/xml/parsers/$(DEPDIR) javax/xml/transform/$(DEPDIR) javax/xml/transform/dom/$(DEPDIR) javax/xml/transform/sax/$(DEPDIR) javax/xml/transform/stream/$(DEPDIR) javax/xml/validation/$(DEPDIR) javax/xml/xpath/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n distclean-am: clean-am distclean-compile distclean-generic \\\n \tdistclean-libtool distclean-local distclean-tags\n@@ -26129,7 +26468,7 @@ installcheck-am:\n maintainer-clean: maintainer-clean-recursive\n \t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n \t-rm -rf $(top_srcdir)/autom4te.cache\n-\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/beans/info/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) gnu/xml/aelfred2/$(DEPDIR) gnu/xml/dom/$(DEPDIR) gnu/xml/dom/ls/$(DEPDIR) gnu/xml/pipeline/$(DEPDIR) gnu/xml/transform/$(DEPDIR) gnu/xml/util/$(DEPDIR) gnu/xml/xpath/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) javax/xml/$(DEPDIR) javax/xml/datatype/$(DEPDIR) javax/xml/namespace/$(DEPDIR) javax/xml/parsers/$(DEPDIR) javax/xml/transform/$(DEPDIR) javax/xml/transform/dom/$(DEPDIR) javax/xml/transform/sax/$(DEPDIR) javax/xml/transform/stream/$(DEPDIR) javax/xml/validation/$(DEPDIR) javax/xml/xpath/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n+\t-rm -rf ./$(DEPDIR) gnu/awt/$(DEPDIR) gnu/awt/j2d/$(DEPDIR) gnu/awt/xlib/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/awt/$(DEPDIR) gnu/java/awt/color/$(DEPDIR) gnu/java/awt/image/$(DEPDIR) gnu/java/awt/peer/$(DEPDIR) gnu/java/awt/peer/gtk/$(DEPDIR) gnu/java/beans/$(DEPDIR) gnu/java/beans/decoder/$(DEPDIR) gnu/java/beans/editors/$(DEPDIR) gnu/java/io/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/reflect/$(DEPDIR) gnu/java/locale/$(DEPDIR) gnu/java/math/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/net/protocol/file/$(DEPDIR) gnu/java/net/protocol/ftp/$(DEPDIR) gnu/java/net/protocol/gcjlib/$(DEPDIR) gnu/java/net/protocol/http/$(DEPDIR) gnu/java/net/protocol/http/event/$(DEPDIR) gnu/java/net/protocol/jar/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) gnu/java/nio/charset/$(DEPDIR) gnu/java/rmi/$(DEPDIR) gnu/java/rmi/dgc/$(DEPDIR) gnu/java/rmi/registry/$(DEPDIR) gnu/java/rmi/rmic/$(DEPDIR) gnu/java/rmi/server/$(DEPDIR) gnu/java/security/$(DEPDIR) gnu/java/security/action/$(DEPDIR) gnu/java/security/ber/$(DEPDIR) gnu/java/security/der/$(DEPDIR) gnu/java/security/pkcs/$(DEPDIR) gnu/java/security/provider/$(DEPDIR) gnu/java/security/util/$(DEPDIR) gnu/java/security/x509/$(DEPDIR) gnu/java/security/x509/ext/$(DEPDIR) gnu/java/text/$(DEPDIR) gnu/java/util/$(DEPDIR) gnu/java/util/prefs/$(DEPDIR) gnu/regexp/$(DEPDIR) gnu/xml/aelfred2/$(DEPDIR) gnu/xml/dom/$(DEPDIR) gnu/xml/dom/ls/$(DEPDIR) gnu/xml/pipeline/$(DEPDIR) gnu/xml/transform/$(DEPDIR) gnu/xml/util/$(DEPDIR) gnu/xml/xpath/$(DEPDIR) java/applet/$(DEPDIR) java/awt/$(DEPDIR) java/awt/color/$(DEPDIR) java/awt/datatransfer/$(DEPDIR) java/awt/dnd/$(DEPDIR) java/awt/dnd/peer/$(DEPDIR) java/awt/event/$(DEPDIR) java/awt/font/$(DEPDIR) java/awt/geom/$(DEPDIR) java/awt/im/$(DEPDIR) java/awt/im/spi/$(DEPDIR) java/awt/image/$(DEPDIR) java/awt/image/renderable/$(DEPDIR) java/awt/peer/$(DEPDIR) java/awt/print/$(DEPDIR) java/beans/$(DEPDIR) java/beans/beancontext/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/math/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/nio/channels/spi/$(DEPDIR) java/nio/charset/$(DEPDIR) java/nio/charset/spi/$(DEPDIR) java/rmi/$(DEPDIR) java/rmi/activation/$(DEPDIR) java/rmi/dgc/$(DEPDIR) java/rmi/registry/$(DEPDIR) java/rmi/server/$(DEPDIR) java/security/$(DEPDIR) java/security/acl/$(DEPDIR) java/security/cert/$(DEPDIR) java/security/interfaces/$(DEPDIR) java/security/spec/$(DEPDIR) java/sql/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/jar/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/prefs/$(DEPDIR) java/util/regex/$(DEPDIR) java/util/zip/$(DEPDIR) javax/accessibility/$(DEPDIR) javax/crypto/$(DEPDIR) javax/crypto/interfaces/$(DEPDIR) javax/crypto/spec/$(DEPDIR) javax/imageio/$(DEPDIR) javax/imageio/event/$(DEPDIR) javax/imageio/metadata/$(DEPDIR) javax/imageio/spi/$(DEPDIR) javax/imageio/stream/$(DEPDIR) javax/naming/$(DEPDIR) javax/naming/directory/$(DEPDIR) javax/naming/event/$(DEPDIR) javax/naming/ldap/$(DEPDIR) javax/naming/spi/$(DEPDIR) javax/net/$(DEPDIR) javax/net/ssl/$(DEPDIR) javax/print/$(DEPDIR) javax/print/attribute/$(DEPDIR) javax/print/attribute/standard/$(DEPDIR) javax/print/event/$(DEPDIR) javax/security/auth/$(DEPDIR) javax/security/auth/callback/$(DEPDIR) javax/security/auth/login/$(DEPDIR) javax/security/auth/spi/$(DEPDIR) javax/security/auth/x500/$(DEPDIR) javax/security/cert/$(DEPDIR) javax/security/sasl/$(DEPDIR) javax/sql/$(DEPDIR) javax/swing/$(DEPDIR) javax/swing/border/$(DEPDIR) javax/swing/colorchooser/$(DEPDIR) javax/swing/event/$(DEPDIR) javax/swing/filechooser/$(DEPDIR) javax/swing/plaf/$(DEPDIR) javax/swing/plaf/basic/$(DEPDIR) javax/swing/plaf/metal/$(DEPDIR) javax/swing/table/$(DEPDIR) javax/swing/text/$(DEPDIR) javax/swing/text/html/$(DEPDIR) javax/swing/text/html/parser/$(DEPDIR) javax/swing/tree/$(DEPDIR) javax/swing/undo/$(DEPDIR) javax/transaction/$(DEPDIR) javax/transaction/xa/$(DEPDIR) javax/xml/$(DEPDIR) javax/xml/datatype/$(DEPDIR) javax/xml/namespace/$(DEPDIR) javax/xml/parsers/$(DEPDIR) javax/xml/transform/$(DEPDIR) javax/xml/transform/dom/$(DEPDIR) javax/xml/transform/sax/$(DEPDIR) javax/xml/transform/stream/$(DEPDIR) javax/xml/validation/$(DEPDIR) javax/xml/xpath/$(DEPDIR) jni/classpath/$(DEPDIR) jni/gtk-peer/$(DEPDIR) org/ietf/jgss/$(DEPDIR) sysdep/$(DEPDIR)\n \t-rm -f Makefile\n maintainer-clean-am: distclean-am maintainer-clean-generic\n "}, {"sha": "e10a9074f7729845ed1fecb91802c49070208a86", "filename": "libjava/gnu/java/beans/DummyAppletContext.java", "status": "added", "additions": 200, "deletions": 0, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,200 @@\n+/* gnu.java.beans.DummyAppletContext\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.beans;\n+\n+import java.applet.Applet;\n+import java.applet.AppletContext;\n+import java.applet.AudioClip;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.Iterator;\n+\n+/** A placeholder <code>AppletContext</code> implementation that does nothing.\n+ *\n+ * <p>This is the default implementation for GNU Classpath and is used for <code>Applet</code>\n+ * beans being created with {@link java.beans.Beans.instantiate}.</p>\n+ *\n+ * <p>It has no functionality in order to allow it to be used without any dependencies\n+ * (e.g. sound, network access, ...).</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class DummyAppletContext implements AppletContext\n+{\n+  private static final Enumeration EMPTY_ENUMERATION = Collections.enumeration(Collections.EMPTY_SET);\n+  private static final AudioClip DUMMY_CLIP = new DummyAudioClip();\n+\n+  DummyAppletContext()\n+  {\n+  }\n+\n+  /** Implementation is VM neutral and returns a dummy {@link AudioClip} instance\n+   * for every URL that returns a non-<code>null</code> object on\n+   * <code>URL.openConnection()</code>.\n+   *\n+   * @see java.applet.AppletContext#getAudioClip(java.net.URL)\n+   *\n+   * FIXME: When Java Sound API (javax.sound) is included in Classpath or URL is able to handle\n+   * sampled sound this should be adjusted.\n+   */\n+  public AudioClip getAudioClip(URL url)\n+  {\n+    try\n+      {\n+\treturn (url.openConnection() != null ? DUMMY_CLIP : null);\n+      }\n+    catch (IOException ioe)\n+      {\n+\treturn null;\n+      }\n+  }\n+\n+  /** Loads the <code>Image</code> instance by delegating to\n+   * {@link java.awt.Toolkit.createImage(URL) }.\n+   *\n+   * @see java.applet.AppletContext#getImage(java.net.URL)\n+   * @see java.awt.Toolkit#createImage(java.net.URL)\n+   */\n+  public Image getImage(URL url)\n+  {\n+    return Toolkit.getDefaultToolkit().createImage(url);\n+  }\n+\n+  /** Returns <code>null</code> for every argument.\n+   *\n+   * @see java.applet.AppletContext#getApplet(java.lang.String)\n+   */\n+  public Applet getApplet(String name)\n+  {\n+    return null;\n+  }\n+\n+  /** Returns always an empty <code>Enumeration</code>.\n+   *\n+   * @see java.applet.AppletContext#getApplets()\n+   */\n+  public Enumeration getApplets()\n+  {\n+    return EMPTY_ENUMERATION;\n+  }\n+\n+  /** Does nothing.\n+   *\n+   * @see java.applet.AppletContext#showDocument(java.net.URL)\n+   */\n+  public void showDocument(URL url)\n+  {\n+  }\n+\n+  /** Does nothing.\n+   *\n+   * @see java.applet.AppletContext#showDocument(java.net.URL, java.lang.String)\n+   */\n+  public void showDocument(URL url, String target)\n+  {\n+  }\n+\n+  /** Does nothing.\n+   *\n+   * @see java.applet.AppletContext#showStatus(java.lang.String)\n+   */\n+  public void showStatus(String message)\n+  {\n+  }\n+\n+  /** Does nothing.\n+   *\n+   * @see java.applet.AppletContext#setStream(java.lang.String, java.io.InputStream)\n+   */\n+  public void setStream(String key, InputStream stream)\n+    throws IOException\n+  {\n+    throw new IOException(\"Dummy implementation imposes zero InputStream associations.\");\n+  }\n+\n+  /** Returns <code>null</code> for every argument.\n+   *\n+   * @see java.applet.AppletContext#getStream(java.lang.String)\n+   */\n+  public InputStream getStream(String key)\n+  {\n+    return null;\n+  }\n+\n+  /** Returns always an empty iterator.\n+   *\n+   * @see java.applet.AppletContext#getStreamKeys()\n+   */\n+  public Iterator getStreamKeys()\n+  {\n+    return Collections.EMPTY_SET.iterator();\n+  }\n+\n+  /** Dummy <code>AudioClip</code> implementation that does nothing but\n+   * preventing <code>NullPointerException</code>S being thrown in programs\n+   * that expect a valid <code>AudioClip</code> instance to be returned by\n+   * their Applet.\n+   *\n+   * @author Robert Schuster\n+   */\n+  static class DummyAudioClip implements AudioClip\n+  {\n+    public void play()\n+    {\n+    }\n+\n+    public void stop()\n+    {\n+    }\n+\n+    public void loop()\n+    {\n+    }\n+\n+    public String toString()\n+    {\n+      return \"DummyAudioClip never plays anything - implement javax.sound and make us happy :)\";\n+    }\n+  }\n+}"}, {"sha": "ff99e98d9c198b11c07d3ce934abe3c256c0354c", "filename": "libjava/gnu/java/beans/DummyAppletStub.java", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletStub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletStub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2FDummyAppletStub.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,115 @@\n+/* gnu.java.beans.DummyAppletStub\n+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.beans;\n+\n+import java.applet.AppletContext;\n+import java.applet.AppletStub;\n+import java.net.URL;\n+\n+/** Placeholder implementation of <code>AppletStub</code> providing no functionality.\n+ * <p>This class is used for <code>Applet</code> being created with\n+ * {@link java.beans.Bean.instantiate}.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+public class DummyAppletStub implements AppletStub\n+{\n+  private URL documentBase;\n+  private URL codeBase;\n+  private DummyAppletContext context;\n+\n+  public DummyAppletStub(URL newCodeBase, URL newDocumentBase)\n+  {\n+    codeBase = newCodeBase;\n+    documentBase = newDocumentBase;\n+\n+    context = new DummyAppletContext();\n+  }\n+\n+  /** Returns always <code>true</code>.\n+   *\n+   * @see java.applet.AppletStub#isActive()\n+   */\n+  public boolean isActive()\n+  {\n+    return true;\n+  }\n+\n+  /**\n+   * @see java.applet.AppletStub#getDocumentBase()\n+   */\n+  public URL getDocumentBase()\n+  {\n+    return documentBase;\n+  }\n+\n+  /**\n+   * @see java.applet.AppletStub#getCodeBase()\n+   */\n+  public URL getCodeBase()\n+  {\n+    return codeBase;\n+  }\n+\n+  /** Implementation returns <code>null</code> for every parameter name.\n+   *\n+   * @see java.applet.AppletStub#getParameter(java.lang.String)\n+   */\n+  public String getParameter(String name)\n+  {\n+    return null;\n+  }\n+\n+  /** Returns a non-functional context instance.\n+   *\n+   * @see java.applet.AppletStub#getAppletContext()\n+   */\n+  public AppletContext getAppletContext()\n+  {\n+    return context;\n+  }\n+\n+  /** Does nothing.\n+   *\n+   * @see java.applet.AppletStub#appletResize(int, int)\n+   */\n+  public void appletResize(int width, int height)\n+  {\n+  }\n+}"}, {"sha": "ae945c295ac68da630fa31ed26c0bf79a2eeab11", "filename": "libjava/gnu/java/beans/decoder/AbstractContext.java", "status": "renamed", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1,5 +1,5 @@\n-/* gnu.java.beans.EmptyBeanInfo\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* gnu.java.beans.decoder.AbstractContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,36 +35,36 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+package gnu.java.beans.decoder;\n \n-package gnu.java.beans;\n \n-import java.beans.*;\n+/** AbstractContext implements some basic functionality of the Context\n+ * interface and is therefore the base of all Context implementations.\n+ *\n+ * @author Robert Schuster\n+ */\n+abstract class AbstractContext implements Context\n+{\n+  private boolean isStatement;\n+  private String id;\n \n-/**\n- ** EmptyBeanInfo is a BeanInfo that discloses no\n- ** information about the Bean and does not allow\n- ** Introspection.  The Introspector uses instances of this\n- ** class to create empty BeanInfos, but it could also be\n- ** used as a base class for BeanInfos that do not allow\n- ** Introspection and provide only a little bit of\n- ** information.<P>\n- **\n- ** @author John Keiser\n- ** @version 1.1.0, 30 Jul 1998\n- ** @see gnu.java.beans.ExplicitBeanInfo\n- ** @see java.beans.BeanInfo\n- **/\n+  public String getId()\n+  {\n+    return id;\n+  }\n \n-public class EmptyBeanInfo extends ExplicitBeanInfo {\n-\t/** Create a new EmptyBeanInfo. **/\n-\tpublic EmptyBeanInfo(Class beanClass) {\n-\t\tsuper(new BeanDescriptor(beanClass,null),\n-\t\t      new BeanInfo[0],\n-\t\t      new PropertyDescriptor[0],\n-\t\t      -1,\n-\t\t      new EventSetDescriptor[0],\n-\t\t      -1,\n-\t\t      new MethodDescriptor[0],\n-\t\t      null);\n-\t}\n+  public void setId(String newId)\n+  {\n+    id = newId;\n+  }\n+\n+  public boolean isStatement()\n+  {\n+    return isStatement;\n+  }\n+\n+  public void setStatement(boolean b)\n+  {\n+    isStatement = b;\n+  }\n }", "previous_filename": "libjava/gnu/java/beans/EmptyBeanInfo.java"}, {"sha": "e2943e2133e0960b262c56fa5718ba9c80db3493", "filename": "libjava/gnu/java/beans/decoder/AbstractCreatableObjectContext.java", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractCreatableObjectContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractCreatableObjectContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractCreatableObjectContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,113 @@\n+/* gnu.java.beans.decoder.AbstractCreatableContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+package gnu.java.beans.decoder;\n+\n+\n+/** AbstractCreatableObjectContext is the base class for all Context implementations\n+ * which create a result object in their lifetime. It provides means for preventing\n+ * to create the object twice.\n+ *\n+ * @author Robert Schuster\n+ *\n+ */\n+abstract class AbstractCreatableObjectContext extends AbstractObjectContext\n+{\n+  AbstractCreatableObjectContext()\n+  {\n+  }\n+\n+  /** Adds a parameter object to this Context if the result object has not been\n+   * created yet. Otherwise an AssemblyException is thrown that indicates a wrong\n+   * behavior of the decoder.\n+   */\n+  public final void addParameterObject(Object o) throws AssemblyException\n+  {\n+    if (object == null)\n+      addParameterObjectImpl(o);\n+    else\n+      throw new AssemblyException(new IllegalStateException(\"No more parameter objects are allowed when the object as already been created.\"));\n+  }\n+\n+  /** Adds a parameter object to this Context. Implement this without caring\n+   * for illegal states because this has been done already.\n+   *\n+   * @param obj The parameter object to be added. \n+   */\n+  protected abstract void addParameterObjectImpl(Object obj);\n+\n+  /** Creates the result object if it does not exist already.\n+   */\n+  public final void notifyStatement(Context outerContext)\n+    throws AssemblyException\n+  {\n+    if (object != null)\n+      return;\n+\n+    object = createObject(outerContext);\n+  }\n+\n+  /** Creates the result object. This method is called only once. Implement this\n+   * without checking for double invocations as this is already being prevented.\n+   *\n+   * @param outerContext The Context that exists around this one. \n+   * @return The result object.\n+   * @throws AssemblerException if the object creation fails somehow.\n+   */\n+  protected abstract Object createObject(Context outerContext)\n+    throws AssemblyException;\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public final Object endContext(Context outerContext)\n+    throws AssemblyException\n+  {\n+    notifyStatement(outerContext);\n+    return object;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#subContextFailed()\n+   */\n+  public boolean subContextFailed()\n+  {\n+    /* Returns true when the AbstractCreatableObjectContext has not created the result object yet\n+     * (A failed subcontext automatically lets this context fail too.)\n+     */\n+    return object == null;\n+  }\n+}"}, {"sha": "a097a759bb1a2d7f7858c1407a07ce1d79a4a44e", "filename": "libjava/gnu/java/beans/decoder/AbstractElementHandler.java", "status": "added", "additions": 316, "deletions": 0, "changes": 316, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractElementHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractElementHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractElementHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,316 @@\n+/* gnu.java.beans.decoder.AbstractElementHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+/** ElementHandler manages a Context instance and interacts with\n+ * its parent and child handlers.\n+ *\n+ * @author Robert Schuster\n+ */\n+abstract class AbstractElementHandler implements ElementHandler\n+{\n+  /** The Context instance of this handler. The instance is available after the startElement()\n+   * method was called. Otherwise the handler is marked as failed.\n+   */\n+  private Context context;\n+\n+  /** The parent handler. */\n+  private ElementHandler parent;\n+\n+  /** Stores whether this handler is marked as failed. */\n+  private boolean hasFailed;\n+\n+  /** Stores the character data which is contained in the body of the XML tag. */\n+  private StringBuffer buffer = new StringBuffer();\n+\n+  /** Stores whether this ElementHandler can have subelements. The information for this is taken from\n+   * javabeans.dtd which can be found here:\n+   * <a href=\"http://java.sun.com/products/jfc/tsc/articles/persistence3/\">Java Persistence Article</a>\n+   */\n+  private boolean allowsSubelements;\n+\n+  /** Creates a new ElementHandler with the given ElementHandler instance\n+   * as parent.\n+   *\n+   * @param parentHandler The parent handler.\n+   */\n+  protected AbstractElementHandler(ElementHandler parentHandler,\n+                                   boolean allowsSubs)\n+  {\n+    parent = parentHandler;\n+    allowsSubelements = allowsSubs;\n+  }\n+\n+  /** Evaluates the attributes and creates a Context instance.\n+   * If the creation of the Context instance fails the ElementHandler\n+   * is marked as failed which may affect the parent handler other.\n+   *\n+   * @param attributes Attributes of the XML tag.\n+   */\n+  public final void start(Attributes attributes,\n+                          ExceptionListener exceptionListener)\n+  {\n+    try\n+      {\n+\t// lets the subclass create the appropriate Context instance\n+\tcontext = startElement(attributes, exceptionListener);\n+      }\n+    catch (AssemblyException pe)\n+      {\n+\tThrowable t = pe.getCause();\n+\n+\tif (t instanceof Exception)\n+\t  exceptionListener.exceptionThrown((Exception) t);\n+\telse\n+\t  throw new InternalError(\"Unexpected Throwable type in AssemblerException. Please file a bug report.\");\n+\n+\tnotifyContextFailed();\n+\n+\treturn;\n+      }\n+  }\n+\n+  /** Analyses the content of the Attributes instance and creates a Context\n+   * object accordingly.\n+   * An AssemblerException is thrown when the Context instance could not\n+   * be created.\n+   *\n+   * @param attributes Attributes of the XML tag.\n+   * @return A Context instance.\n+   * @throws AssemblerException when Context instance could not be created.\n+   */\n+  protected abstract Context startElement(Attributes attributes, ExceptionListener exceptionListener)\n+    throws AssemblyException;\n+\n+  /** Post-processes the Context.\n+   */\n+  public final void end(ExceptionListener exceptionListener)\n+  {\n+    // skips processing if the handler is marked as failed (because the Context\n+    // is then invalid or may not exist at all)\n+    if (!hasFailed)\n+      {\n+\ttry\n+\t  {\n+\t    // note: the order of operations is very important here\n+\t    // sends the stored character data to the Context\n+\t    endElement(buffer.toString());\n+\n+\t    // reports to the parent handler if this handler's Context is a\n+\t    // statement (returning no value BACK to the parent's Context)\n+\t    if (context.isStatement())\n+\t      {\n+\t\t// This may create a valid result in the parent's Context\n+\t\t// or let it fail\n+\t\tparent.notifyStatement(exceptionListener);\n+\n+\t\t// skips any further processing if the parent handler is now marked\n+\t\t// as failed\n+\t\tif (parent.hasFailed())\n+\t\t  return;\n+\t      }\n+\n+\t    // processes the Context and stores the result\n+\t    putObject(context.getId(), context.endContext(parent.getContext()));\n+\n+\t    // transfers the Context's results to the parent's Context\n+\t    // if it is an expression (rather than a statement) \n+\t    if (! context.isStatement())\n+\t      parent.getContext().addParameterObject(context.getResult());\n+\t  }\n+\tcatch (AssemblyException pe)\n+\t  {\n+\t    // notifies that an exception was thrown in this handler's Context \n+\t    Throwable t = pe.getCause();\n+\n+\t    if (t instanceof Exception)\n+\t      exceptionListener.exceptionThrown((Exception) t);\n+\t    else\n+\t      throw (InternalError) new InternalError(\"Severe problem while decoding XML data.\")\n+\t            .initCause(t);\n+\n+\t    // marks the handler as failed\n+\t    notifyContextFailed();\n+\t  }\n+      }\n+  }\n+\n+  /** Notifies the handler's Context that its child Context will not return\n+   * a value back. Some Context variants need this information to know when\n+   * a method or a constructor call can be made.\n+   *\n+   * This method is called by a child handler.\n+   */\n+  public void notifyStatement(ExceptionListener exceptionListener)\n+  {\n+    try\n+      {\n+      \t\n+      \t// propagates to parent handler first to generate objects\n+      \t// needed by this Context instance\n+      \tif(context.isStatement())\n+      \t{\n+      \t\tparent.notifyStatement(exceptionListener);\n+      \t}\n+      \t\n+\t// Some Context instances do stuff which can fail now. If that\n+\t// happens this handler is marked as failed.\n+\tcontext.notifyStatement(parent.getContext());\n+      }\n+    catch (AssemblyException ae)\n+      {\n+\t// notifies that an exception was thrown in this handler's Context \n+\tThrowable t = ae.getCause();\n+\n+\tif (t instanceof Exception)\n+\t  exceptionListener.exceptionThrown((Exception) t);\n+\telse\n+\t  throw (InternalError) new InternalError(\"Severe problem while decoding XML data.\")\n+\t        .initCause(t);\n+\n+\t// marks the handler as failed\n+\tnotifyContextFailed();\n+      }\n+  }\n+\n+  /** Marks this and any depending parent handlers as failed. Which means that on their end\n+   * no result is calculated.\n+   *\n+   * When a handler has failed no more handlers are accepted within it.\n+   */\n+  public final void notifyContextFailed()\n+  {\n+    hasFailed = true;\n+\n+    // marks the parent handler as failed if its Context\n+    // is affected by the failure of this handler's Context\n+    if (parent.getContext().subContextFailed())\n+      parent.notifyContextFailed();\n+  }\n+\n+  /** Returns whether this handler has failed.\n+   *\n+   * This is used to skip child elements.\n+   *\n+   * @return Whether this handler has failed.\n+   */\n+  public final boolean hasFailed()\n+  {\n+    return hasFailed;\n+  }\n+\n+  /** Processes the character data when the element ends.\n+   *\n+   * The default implementation does nothing for convenience.\n+   *\n+   * @param characters\n+   * @throws AssemblerException\n+   */\n+  protected void endElement(String characters) throws AssemblyException\n+  {\n+    // XXX: throw an exception when unexpected character data is available?\n+  }\n+\n+  /** Adds characters from the body of the XML tag to the buffer.\n+   *\n+   * @param ch\n+   * @param start\n+   * @param length\n+   * @throws SAXException\n+   */\n+  public final void characters(char[] ch, int start, int length)\n+  {\n+    // simply appends character data\n+    buffer.append(ch, start, length);\n+  }\n+\n+  /** Stores an object globally under a unique id. If the id is\n+   * null the object is not stored.\n+   *\n+   * @param objectId\n+   * @param o\n+   */\n+  public void putObject(String objectId, Object o)\n+  {\n+    if (objectId != null)\n+      parent.putObject(objectId, o);\n+  }\n+\n+  /** Returns a previously stored object. If the id is null the\n+   * result is null, too.\n+   *\n+   * @param objectId\n+   * @return Returns a previously stored object or null.\n+   */\n+  public Object getObject(String objectId) throws AssemblyException\n+  {\n+    return objectId == null ? null : parent.getObject(objectId);\n+  }\n+\n+  /** Returns the Class instance as if called Class.forName() but\n+   * uses a ClassLoader given by the user.\n+   *\n+   * @param className\n+   * @return\n+   * @throws ClassNotFoundException\n+   */\n+  public Class instantiateClass(String className)\n+    throws ClassNotFoundException\n+  {\n+    return parent.instantiateClass(className);\n+  }\n+\n+  public final boolean isSubelementAllowed(String subElementName)\n+  {\n+    return allowsSubelements && ! subElementName.equals(\"java\");\n+  }\n+\n+  public final Context getContext()\n+  {\n+    return context;\n+  }\n+\n+  public final ElementHandler getParent()\n+  {\n+    return parent;\n+  }\n+}"}, {"sha": "3e322790256355b477cbb5ee3f17cb4f2f2e3bc6", "filename": "libjava/gnu/java/beans/decoder/AbstractObjectContext.java", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractObjectContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractObjectContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAbstractObjectContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,127 @@\n+/* gnu.java.beans.decoder.AbstractObjectContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/** AbstractObjectContext is the base for all Context implementations which\n+ * create or provide a result object during their lifetime.\n+ *\n+ * <p>This class provides the implementation for an indexed get and set method.\n+ * But this does not mean that the result object supports these operation.</p>\n+ *\n+ * @author Robert Schuster\n+ *\n+ */\n+abstract class AbstractObjectContext extends AbstractContext\n+{\n+    protected Object object;\n+\n+    AbstractObjectContext()\n+    {}\n+\n+    /** Sets the result object of the Context.\n+     *\n+     * @param obj The result object to be set.\n+     */\n+    protected final void setObject(Object obj)\n+    {\n+        object = obj;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#set(int, java.lang.Object)\n+     */\n+    public final void set(int index, Object o) throws AssemblyException\n+    {\n+        try\n+        {\n+            Method method =\n+                object.getClass().getMethod(\n+                    \"set\",\n+                    new Class[] { Integer.TYPE, Object.class });\n+\n+            method.invoke(object, new Object[] { new Integer(index), o });\n+        }\n+        catch (NoSuchMethodException nsme)\n+        {\n+            throw new AssemblyException(nsme);\n+        }\n+        catch (InvocationTargetException ite)\n+        {\n+            throw new AssemblyException(ite.getCause());\n+        }\n+        catch (IllegalAccessException iae)\n+        {\n+            throw new AssemblyException(iae);\n+        }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#get(int)\n+     */\n+    public final Object get(int index) throws AssemblyException\n+    {\n+        try\n+        {\n+            Method method =\n+                object.getClass().getMethod(\n+                    \"get\",\n+                    new Class[] { Integer.TYPE });\n+\n+            return method.invoke(object, new Object[] { new Integer(index)});\n+        }\n+        catch (NoSuchMethodException nsme)\n+        {\n+            throw new AssemblyException(nsme);\n+        }\n+        catch (InvocationTargetException ite)\n+        {\n+            throw new AssemblyException(ite.getCause());\n+        }\n+        catch (IllegalAccessException iae)\n+        {\n+            throw new AssemblyException(iae);\n+        }\n+    }\n+\n+    public final Object getResult()\n+    {\n+        return object;\n+    }\n+}"}, {"sha": "73b8731a8eb65b614cd940a39d4fc45eecc81686", "filename": "libjava/gnu/java/beans/decoder/ArrayContext.java", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,122 @@\n+/* gnu.java.beans.decoder.ArrayContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.Array;\n+\n+/** A Context implementation for a fixed size array. The array\n+ * elements have to be set using IndexContext instances.\n+ *\n+ * @author Robert Schuster\n+ */\n+class ArrayContext extends AbstractContext\n+{\n+  private Object array;\n+\n+  ArrayContext(String id, Class klass, int length)\n+  {\n+    setId(id);\n+    array = Array.newInstance(klass, length);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObject(Object o) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalStateException(\"Adding objects without an index to a fixed array is not possible.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#reportStatement()\n+   */\n+  public void notifyStatement(Context outerContext)\n+  {\n+    // method call intentionally ignored because there is not any useful effect \n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public Object endContext(Context outerContext) throws AssemblyException\n+  {\n+    return array;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#subContextFailed()\n+   */\n+  public boolean subContextFailed()\n+  {\n+    // returns false to indicate that assembling the array does not fail only because\n+    // a subelement failed.\n+    return false;\n+  }\n+\n+  public void set(int index, Object o) throws AssemblyException\n+  {\n+    try\n+      {\n+\tArray.set(array, index, o);\n+      }\n+    catch (ArrayIndexOutOfBoundsException aioobe)\n+      {\n+\tthrow new AssemblyException(aioobe);\n+      }\n+  }\n+\n+  public Object get(int index) throws AssemblyException\n+  {\n+    try\n+      {\n+\treturn Array.get(array, index);\n+      }\n+    catch (ArrayIndexOutOfBoundsException aioobe)\n+      {\n+\tthrow new AssemblyException(aioobe);\n+      }\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#getResult()\n+   */\n+  public Object getResult()\n+  {\n+    return array;\n+  }\n+}"}, {"sha": "ac8f48673ac09c7c343faaedd81736bbb6e46fb2", "filename": "libjava/gnu/java/beans/decoder/ArrayHandler.java", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FArrayHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,118 @@\n+/* gnu.java.beans.decoder.ArrayHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+import java.util.HashMap;\n+\n+import org.xml.sax.Attributes;\n+\n+/** ArrayHandler processes the &lt;array&gt; tag. Depending on the existance of the 'length' attribute a Context for\n+ * a fixed-size or growable array is created.\n+ *\n+ * @author Robert Schuster\n+ */\n+class ArrayHandler extends AbstractElementHandler\n+{\n+  /** Contains a mapping between a textual description of a primitive type (like \"byte\") and\n+   * its corresponding wrapper class. This allows it to easily construct Array objects for\n+   * primitive data types.\n+   */\n+  private static HashMap typeMap = new HashMap();\n+\n+  static\n+    {\n+      typeMap.put(\"byte\", Byte.TYPE);\n+      typeMap.put(\"short\", Short.TYPE);\n+      typeMap.put(\"int\", Integer.TYPE);\n+      typeMap.put(\"long\", Long.TYPE);\n+\n+      typeMap.put(\"float\", Float.TYPE);\n+      typeMap.put(\"double\", Double.TYPE);\n+\n+      typeMap.put(\"boolean\", Boolean.TYPE);\n+\n+      typeMap.put(\"char\", Character.TYPE);\n+    }\n+\n+  /**\n+   * @param PersistenceParser\n+   */\n+  ArrayHandler(ElementHandler parent)\n+  {\n+    super(parent, true);\n+  }\n+\n+  protected Context startElement(Attributes attributes, ExceptionListener exceptionListener)\n+    throws AssemblyException, AssemblyException\n+  {\n+    String id = attributes.getValue(\"id\");\n+    String className = attributes.getValue(\"class\");\n+\n+    if (className != null)\n+      {\n+\ttry\n+\t  {\n+\t    Class klass;\n+\n+\t    if (typeMap.containsKey(className))\n+\t      klass = (Class) typeMap.get(className);\n+\t    else\n+\t      klass = instantiateClass(className);\n+\n+\t    String length = attributes.getValue(\"length\");\n+\t    if (length != null)\n+\t      // creates Array with predefined length\n+\t      return new ArrayContext(id, klass, Integer.parseInt(length));\n+\t    else\n+\t      // creates Array without length restriction\n+\t      return new GrowableArrayContext(id, klass);\n+\t  }\n+\tcatch (ClassNotFoundException cnfe)\n+\t  {\n+\t    throw new AssemblyException(cnfe);\n+\t  }\n+\tcatch (NumberFormatException nfe)\n+\t  {\n+\t    throw new AssemblyException(nfe);\n+\t  }\n+      }\n+\n+    throw new AssemblyException(new IllegalArgumentException(\"Missing 'class' attribute in <array> tag.\"));\n+  }\n+}"}, {"sha": "0b5075b15c588f03c55d564438b88207d02bc16b", "filename": "libjava/gnu/java/beans/decoder/AssemblyException.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAssemblyException.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAssemblyException.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FAssemblyException.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,57 @@\n+/* gnu.java.beans.decoder.AssemblyException\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** The AssemblyException is used to wrap the cause of problems when assembling objects.\n+ * In all cases only the wrapped exception is given to the PersistenceParser's\n+ * ExceptionListener instance (never the AssemblyException itself).\n+ * \n+ * <p>Note: Often multiple steps are needed to construct a fully usuable object instance.\n+ * Such a construction can be called assembly and thats why this exception was\n+ * named AssemblyException.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class AssemblyException extends Exception\n+{\n+  AssemblyException(Throwable cause)\n+  {\n+    super(cause);\n+  }\n+}"}, {"sha": "2cb1e0405b4aab7bb996739b4a9f5df8375cf312", "filename": "libjava/gnu/java/beans/decoder/BooleanHandler.java", "status": "renamed", "additions": 27, "deletions": 35, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FBooleanHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FBooleanHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FBooleanHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1,5 +1,5 @@\n-/* gnu.java.beans.info.ComponentBeanInfo\n-   Copyright (C) 1998 Free Software Foundation, Inc.\n+/* gnu.java.beans.decoder.BooleanHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,41 +35,33 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n+package gnu.java.beans.decoder;\n \n-package gnu.java.beans.info;\n \n-import java.beans.IntrospectionException;\n-import java.beans.PropertyDescriptor;\n-import java.beans.SimpleBeanInfo;\n+/** Creates a Boolean instance from the character data in a &lt;boolean&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class BooleanHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  BooleanHandler(ElementHandler parent)\n+  {\n+    super(parent);\n \n-/** BeanInfo class for java.awt.Component.\n- ** This provides a few properties, but that's\n- ** it.\n- ** @author John Keiser\n- ** @version 1.1.0, Aug 1 1998\n- **/\n-public class ComponentBeanInfo extends SimpleBeanInfo {\n-\tstatic PropertyDescriptor[] properties;\n-\tstatic {\n-\t\ttry {\n-\t\tproperties = new PropertyDescriptor[6];\n-\t\tproperties[0] = new PropertyDescriptor(\"name\",java.awt.Component.class);\n-\t\tproperties[1] = new PropertyDescriptor(\"background\",java.awt.Component.class);\n-\t\tproperties[2] = new PropertyDescriptor(\"foreground\",java.awt.Component.class);\n-\t\tproperties[3] = new PropertyDescriptor(\"font\",java.awt.Component.class);\n-\t\tproperties[4] = new PropertyDescriptor(\"enabled\",java.awt.Component.class);\n-\t\tproperties[5] = new PropertyDescriptor(\"visible\",java.awt.Component.class);\n-\t\t} catch(IntrospectionException E) {\n-\t\t\tproperties = null;\n-\t\t\tthrow new UnknownError(\"Could not introspect some java.awt.Component properties.\");\n-\t\t}\n-\t}\n-\tpublic ComponentBeanInfo() {\n-\t\tsuper();\n-\t}\n+    // TODO Auto-generated constructor stub\n+  }\n \n-\tpublic PropertyDescriptor[] getPropertyDescriptors() {\n-\t\treturn properties;\n-\t}\n-}\n+  protected Object parse(String number) throws AssemblyException\n+  {\n+    if (number.equals(\"true\"))\n+      return new Boolean(true);\n+\n+    if (number.equals(\"false\"))\n+      return new Boolean(false);\n \n+    throw new AssemblyException(new IllegalArgumentException(\"Element contained no valid boolean value.\"));\n+  }\n+}", "previous_filename": "libjava/gnu/java/beans/info/ComponentBeanInfo.java"}, {"sha": "f21b280a81a26e199e8feb13fe8d218009569353", "filename": "libjava/gnu/java/beans/decoder/ByteHandler.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FByteHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FByteHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FByteHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,59 @@\n+/* gnu.java.beans.decoder.ByteHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Byte instance from the character data in a &lt;byte&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class ByteHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  ByteHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Byte.valueOf(number);\n+  }\n+}"}, {"sha": "269c250c0afde3d57395b9423aff4b8f329059e9", "filename": "libjava/gnu/java/beans/decoder/CharHandler.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FCharHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FCharHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FCharHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,62 @@\n+/* gnu.java.beans.decoder.CharHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Character instance from the character data in a &lt;char&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class CharHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  CharHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws AssemblyException\n+  {\n+    if (number.length() > 1)\n+      throw new AssemblyException(new IllegalArgumentException(\"Element contained no valid character.\"));\n+\n+    return new Character(number.charAt(0));\n+  }\n+}"}, {"sha": "1c8aebd60d5b91869387c6d1251abf723c5cf502", "filename": "libjava/gnu/java/beans/decoder/ClassHandler.java", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FClassHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FClassHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FClassHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,66 @@\n+/* gnu.java.beans.decoder.ClassHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Class instance from the character data in a &lt;class&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class ClassHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  ClassHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String characters) throws AssemblyException\n+  {\n+    try\n+      {\n+\treturn instantiateClass(characters);\n+      }\n+    catch (ClassNotFoundException cnfe)\n+      {\n+\tthrow new AssemblyException(cnfe);\n+      }\n+  }\n+}"}, {"sha": "e2e6ef0ff9b5fed900071347cf9227168a4ce7f7", "filename": "libjava/gnu/java/beans/decoder/ConstructorContext.java", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FConstructorContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FConstructorContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FConstructorContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,102 @@\n+/* gnu.java.beans.decoder.ConstructorContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+\n+/** A ConstructorContext is a {@link Context} implementation which collects the parameters for a constructor\n+ * call and instantiates the result object using that constructor. After that sub-contexts can invoke\n+ * methods on the result object.\n+ *\n+ * <p>The constructor is invoked when a sub-context is a statement or the Context ends.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class ConstructorContext extends AbstractCreatableObjectContext\n+{\n+  private ArrayList arguments = new ArrayList();\n+  private Class klass;\n+\n+  ConstructorContext(String id, Class newClass)\n+  {\n+    setId(id);\n+    // sets superclass field \n+    klass = newClass;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  protected void addParameterObjectImpl(Object o)\n+  {\n+    arguments.add(o);\n+  }\n+\n+  protected Object createObject(Context outerContext)\n+    throws AssemblyException\n+  {\n+    Object[] args = arguments.toArray();\n+\n+    try\n+      {\n+\tConstructor constructor = MethodFinder.getConstructor(klass, args);\n+\n+\t// instantiates object (klass field gets re-set by superclass)\n+\treturn constructor.newInstance(args);\n+      }\n+    catch (NoSuchMethodException nsme)\n+      {\n+\tthrow new AssemblyException(nsme);\n+      }\n+    catch (InvocationTargetException ite)\n+      {\n+\tthrow new AssemblyException(ite.getCause());\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new AssemblyException(iae);\n+      }\n+    catch (InstantiationException ie)\n+      {\n+\tthrow new AssemblyException(ie);\n+      }\n+  }\n+  \n+}"}, {"sha": "55746c8561ebabc75014d8b35efd550c408501d3", "filename": "libjava/gnu/java/beans/decoder/Context.java", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,137 @@\n+/* gnu.java.beans.decoder.Context\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+/** A Context is the environment for an object which is being assembler. If there\n+ * are no errors each handler creates one Context.\n+ * <p>Depending on the result of isStatement() a Context can be statement or an\n+ * expression. An expression returns a value to the Context of its parent handler,\n+ * a statement does not. Whenever a Context is a statement the parent handler's\n+ * Context is informed about that through the {@link notifyStatement}-method.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+interface Context\n+{\n+  /** Adds a parameter object to the context. This method is used when\n+   * sub-Contexts return their result.\n+   *\n+   * Some Contexts do not accept more than a certain amount of objects\n+   * and throw an AssemblerException if the amount is exceeded.\n+   *\n+   * @param o The object added to this context.\n+   */\n+  void addParameterObject(Object o) throws AssemblyException;\n+\n+  /** Notifies that the next element is a statement. This can mean\n+   * that an argument list is complete to be called.\n+   *\n+   */\n+  void notifyStatement(Context outerContext) throws AssemblyException;\n+\n+  /** Notifies that the context ends and the returns the appropriate result\n+   * object.\n+   *\n+   * @param outerContext\n+   * @return\n+   */\n+  Object endContext(Context outerContext) throws AssemblyException;\n+\n+  /** Notifies that the assembly of a subcontext failed and returns\n+   * whether this Context is affected in a way that it fails too.\n+   *\n+   * @return Whether the failure of a subcontext lets this context fail, too.\n+   */\n+  boolean subContextFailed();\n+\n+  /** Calls an appropriate indexed set method if it is available or\n+   * throws an AssemblerException if that is not allowed on this Context.\n+   *\n+   * The behaviour of this method is equal to List.set(int, Object).\n+   *\n+   * @param index Index position to be set.\n+   * @param o Object to be set at the given index position.\n+   * @throws AssemblerException Indexed set is not allowed or otherwise failed.\n+   */\n+  void set(int index, Object o) throws AssemblyException;\n+\n+  /** Calls an appropriate indexed get method if it is available or\n+   * throws an AssemblerException if that is not allowed on this Context.\n+   *\n+   * The behaviour of this method is equal to List.get(int).\n+   *\n+   * @param index Index position of the object return.\n+   * @throws AssemblerException Indexed get is not allowed or otherwise failed.\n+   */\n+  Object get(int index) throws AssemblyException;\n+\n+  /** Returns the result which was calculated by calling endContext() or reportStatement().\n+   * Its the handler's responsibility to care that any of these two methods was called.\n+   *\n+   * This is used by sub-Contexts to access this Context's result.\n+   *\n+   * @return\n+   */\n+  Object getResult();\n+\n+  /** Gives this Context a unique id. For convenience the id may be null which means\n+   * that no id exists at all.\n+   *\n+   * @param id\n+   */\n+  void setId(String id);\n+\n+  /** Returns this Context's unique id or null if does not have such an id.\n+   *\n+   * @return This Context's id or null.\n+   */\n+  String getId();\n+\n+  /** Returns whether this Context is a statement (not returning result back\n+   * to parent handler's Context) or not (= expression).\n+   *\n+   * @return\n+   */\n+  boolean isStatement();\n+\n+  /** Sets whether this Context is a statement or not.\n+   *\n+   * @param b\n+   */\n+  void setStatement(boolean b);\n+}"}, {"sha": "42700e6edb2f7e3a2e9fd3d3bbf6423ce8ef0a5c", "filename": "libjava/gnu/java/beans/decoder/DecoderContext.java", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDecoderContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDecoderContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDecoderContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,124 @@\n+/* gnu.java.beans.decoder.DecoderContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.XMLDecoder;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+\n+/** DecoderContext is a Context implementation which allows access to\n+ * the XMLDecoder instance itself. This is used for the &lt;java&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+public class DecoderContext extends AbstractContext\n+{\n+  private XMLDecoder decoder;\n+\n+  public DecoderContext(XMLDecoder xmlDecoder)\n+  {\n+    decoder = xmlDecoder;\n+  }\n+\n+  private ArrayList objects = new ArrayList();\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObject(Object o) throws AssemblyException\n+  {\n+    objects.add(o);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#reportStatement()\n+   */\n+  public void notifyStatement(Context outerContext) throws AssemblyException\n+  {\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public Object endContext(Context outerContext) throws AssemblyException\n+  {\n+    return decoder;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#subContextFailed()\n+   */\n+  public boolean subContextFailed()\n+  {\n+    return false;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#set(int, java.lang.Object)\n+   */\n+  public void set(int index, Object o) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalArgumentException(\"Set method is not allowed in decoder context.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#get(int)\n+   */\n+  public Object get(int index) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalArgumentException(\"Get method is not allowed in decoder context.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#getResult()\n+   */\n+  public Object getResult()\n+  {\n+    return decoder;\n+  }\n+\n+  /** Returns an Iterator that retrieves the assembled objects.\n+   * \n+   * @return An Iterator retrieving assembled objects.\n+   */\n+  public Iterator iterator()\n+  {\n+    return objects.iterator();\n+  }\n+  \n+}"}, {"sha": "bb20095f02a57ec99afa5f585cabc8e963af7ad7", "filename": "libjava/gnu/java/beans/decoder/DefaultExceptionListener.java", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDefaultExceptionListener.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDefaultExceptionListener.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDefaultExceptionListener.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,57 @@\n+/* gnu.java.beans.DefaultExceptionListener\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+/** The DefaultExceptionListener is the default implementation of the ExceptionListener\n+ * interface. An instance of this class is used whenever the user provided no\n+ * ExceptionListener instance on its own.\n+ *\n+ * <p>The implementation just writes the exception's message to <code>System.err</code>.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+public class DefaultExceptionListener implements ExceptionListener\n+{\n+  public void exceptionThrown(Exception e)\n+  {\n+    System.err.println(\"non-critical exception: \" + e + \" - message: \"\n+                       + e.getMessage());\n+  }\n+}"}, {"sha": "ae0f18fa10f24ce283d7a595f92594fa5a2a582d", "filename": "libjava/gnu/java/beans/decoder/DoubleHandler.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDoubleHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDoubleHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDoubleHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,59 @@\n+/* gnu.java.beans.decoder.DoubleHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Double instance from the character data in a &lt;double&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class DoubleHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  DoubleHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Double.valueOf(number);\n+  }\n+}"}, {"sha": "55851dd6ee6de91a1496f535f8e9ba2e434462ec", "filename": "libjava/gnu/java/beans/decoder/DummyContext.java", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,116 @@\n+/* gnu.java.beans.decoder.DummyContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+/** The DummyContext is used as the Context implementation for the DummyHandler. It\n+ * just prevents having a null-reference.\n+ *\n+ * <p>When the implementation is correct none of this class' methods\n+ * (except <code>notifyStatement()</code>) is called.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+public class DummyContext extends AbstractContext\n+{\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+     */\n+    public void addParameterObject(Object o) throws AssemblyException\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#reportStatement()\n+     */\n+    public void notifyStatement(Context outerContext) throws AssemblyException\n+    {\n+    \t// intentionally ignored\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+     */\n+    public Object endContext(Context outerContext) throws AssemblyException\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#subContextFailed()\n+     */\n+    public boolean subContextFailed()\n+    {\n+        fail();\n+\treturn false;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#set(int, java.lang.Object)\n+     */\n+    public void set(int index, Object o) throws AssemblyException\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#get(int)\n+     */\n+    public Object get(int index) throws AssemblyException\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#getResult()\n+     */\n+    public Object getResult()\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    private void fail()\n+    {\n+        throw new InternalError(\"Invoking the DummyContext is not expected\"\n+\t\t\t\t+ \" - Please file a bug report at\"\n+\t\t\t\t+ \" http://www/gnu.org/software/classpath/.\");\n+    }\n+}"}, {"sha": "81fb2f8e3d0fa3f2e8277e699cd2ba07c0ebb23d", "filename": "libjava/gnu/java/beans/decoder/DummyHandler.java", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FDummyHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,156 @@\n+/* gnu.java.beans.decoder.DummyHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+/** An ElementHandler implementation that is used as an artificial root\n+ * element. This avoids having to check for a null element.\n+ *\n+ * @author Robert Schuster\n+ */\n+class DummyHandler implements ElementHandler\n+{\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#start(org.xml.sax.Attributes, java.beans.ExceptionListener)\n+     */\n+    public void start(\n+        Attributes attributes,\n+        ExceptionListener exceptionListener)\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#end(java.beans.ExceptionListener)\n+     */\n+    public void end(ExceptionListener exceptionListener)\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#characters(char[], int, int)\n+     */\n+    public void characters(char[] ch, int start, int length)\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#isSubelementAllowed(java.lang.String)\n+     */\n+    public boolean isSubelementAllowed(String subElementName)\n+    {\n+        return true;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#instantiateClass(java.lang.String)\n+     */\n+    public Class instantiateClass(String className)\n+        throws ClassNotFoundException\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#reportStatement(java.beans.ExceptionListener)\n+     */\n+    public void notifyStatement(ExceptionListener exceptionListener)\n+    {\n+        // ignore\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#hasFailed()\n+     */\n+    public boolean hasFailed()\n+    {\n+        return false;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#getContext()\n+     */\n+    public Context getContext()\n+    {\n+        return new DummyContext();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#contextFailed()\n+     */\n+    public void notifyContextFailed()\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#putObject(java.lang.String, java.lang.Object)\n+     */\n+    public void putObject(String objectId, Object o)\n+    {\n+        fail();\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.ElementHandler#getObject(java.lang.String)\n+     */\n+    public Object getObject(String objectId)\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    public ElementHandler getParent()\n+    {\n+        fail();\n+\treturn null;\n+    }\n+\n+    private void fail()\n+    {\n+        throw new InternalError(\"Invoking the DummyHandler is not expected\"\n+\t\t\t        + \" - Please file a bug report at \"\n+\t\t\t\t+ \" http://www.gnu.org/software/classpath/.\");\n+    }\n+}"}, {"sha": "b3d720c5969b85e8d8dc0aa743df7781e9f699d6", "filename": "libjava/gnu/java/beans/decoder/ElementHandler.java", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FElementHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FElementHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FElementHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,130 @@\n+/* gnu.java.beans.decoder.ElementHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+/** ElementHandler manages a Context instance and interacts with\n+ * its parent and child handlers.\n+ *\n+ * @author Robert Schuster\n+ */\n+interface ElementHandler\n+{\n+  /** Evaluates the attributes and creates a Context instance.\n+   * If the creation of the Context instance fails the ElementHandler\n+   * is marked as failed which may affect the parent handler other.\n+   *\n+   * @param attributes Attributes of the XML tag.\n+   */\n+  void start(Attributes attributes, ExceptionListener exceptionListener);\n+\n+  /** Post-processes the Context.\n+   */\n+  void end(ExceptionListener exceptionListener);\n+\n+  /** Adds characters from the body of the XML tag to the buffer.\n+   *\n+   * @param ch\n+   * @param start\n+   * @param length\n+   * @throws SAXException\n+   */\n+  void characters(char[] ch, int start, int length);\n+\n+  /** Returns whether a subelement of the given name is allowed. The rules\n+   * for evaluating this are derived from the javabeans.dtd which can be found\n+   * here: <a href=\"http://java.sun.com/products/jfc/tsc/articles/persistence3\">Java Persistence Article</a>.\n+   * \n+   * @param subElementName \n+   * @return\n+   */\n+  boolean isSubelementAllowed(String subElementName);\n+\n+  /** Provides the same functionality as Class.forName() but allows the decoder\n+   * to use a different class loader.\n+   * \n+   * @param className\n+   * @return\n+   * @throws ClassNotFoundException\n+   */ \n+  Class instantiateClass(String className) throws ClassNotFoundException;\n+\n+  /** Notifies the handler's Context that its child Context will not return\n+   * a value back. Some Context variants need this information to know when\n+   * a method or a constructor call can be made.\n+   *\n+   * This method is called by a child handler.\n+   */\n+  void notifyStatement(ExceptionListener exceptionListener);\n+\n+  /** Returns whether this handler has failed.\n+   *\n+   * This is used to skip child elements.\n+   *\n+   * @return Whether this handler has failed.\n+   */\n+  boolean hasFailed();\n+\n+  /** Returns the Context instance this handler is working on.\n+   * \n+   * @return The handler's Context instance.\n+   */\n+  Context getContext();\n+\n+  /** Notifies the handler that its Context failed and starts a recursive\n+   * invocation of the parent handler if it is affected by that failure.\n+   * \n+   * Although the method is a public API member it is only used internally.\n+   */\n+  void notifyContextFailed();\n+\n+  /** Stores the object under the given id. The object is not stored if the\n+   * id is null.\n+   * \n+   * @param objectId\n+   * @param o\n+   */\n+  void putObject(String objectId, Object o);\n+\n+  Object getObject(String objectId) throws AssemblyException;\n+\n+  ElementHandler getParent();\n+}"}, {"sha": "d930aead24c8b8ebbdac7f0e8d08f75e583dd94a", "filename": "libjava/gnu/java/beans/decoder/FloatHandler.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FFloatHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FFloatHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FFloatHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,59 @@\n+/* gnu.java.beans.decoder.FloatHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Float instance from the character data in a &lt;float&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class FloatHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  FloatHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Float.valueOf(number);\n+  }\n+}"}, {"sha": "9719890283cb8bf31d72ba5d3c423cc43bd9ff7d", "filename": "libjava/gnu/java/beans/decoder/GrowableArrayContext.java", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FGrowableArrayContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FGrowableArrayContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FGrowableArrayContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,138 @@\n+/* gnu.java.beans.decoder.GrowableArrayContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.Array;\n+\n+/** A Context implementation for a growable array. The array\n+ * elements have to be set using expressions.\n+ *\n+ * @author Robert Schuster\n+ */\n+class GrowableArrayContext extends AbstractContext\n+{\n+    private static final int INITIAL_SIZE = 16;\n+    \n+    private Class klass;\n+    private Object array;\n+    private int length;\n+    \n+    GrowableArrayContext(String id, Class newClass)\n+    {\n+        setId(id);\n+        klass = newClass;\n+        array = Array.newInstance(klass, INITIAL_SIZE);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+     */\n+    public void addParameterObject(Object o) throws AssemblyException\n+    {\n+      if (length == Array.getLength(array))\n+        {\n+          Object tmp = Array.newInstance(klass, length * 2);\n+          System.arraycopy(array, 0, tmp, 0, length);\n+          array = tmp;\n+        }\n+        \n+      try {\n+        Array.set(array, length++, o);\n+      } catch(IllegalArgumentException iae) {\n+        throw new AssemblyException(iae);\n+      }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#reportStatement()\n+     */\n+    public void notifyStatement(Context outerContext) throws AssemblyException\n+    {\n+        throw new AssemblyException(\n+            new IllegalArgumentException(\"Statements inside a growable array are not allowed.\"));\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+     */\n+    public Object endContext(Context outerContext) throws AssemblyException\n+    {\n+        if (length != Array.getLength(array))\n+          {\n+            Object tmp = Array.newInstance(klass, length);\n+            System.arraycopy(array, 0, tmp, 0, length);\n+            array = tmp;\n+          }\n+        \n+        return array;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#subContextFailed()\n+     */\n+    public boolean subContextFailed()\n+    {\n+        // returns false to indicate that assembling the array does not fail only because\n+        // a subelement failed\n+        return false;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#set(int, java.lang.Object)\n+     */\n+    public void set(int index, Object o) throws AssemblyException\n+    {\n+      try {\n+        Array.set(array, index, o);\n+      } catch(IllegalArgumentException iae) {\n+        throw new AssemblyException(iae);   \n+      }\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#get(int)\n+     */\n+    public Object get(int index) throws AssemblyException\n+    {\n+      return Array.get(array, index);\n+    }\n+\n+    public Object getResult()\n+    {\n+        return array;\n+    }\n+}"}, {"sha": "be67ee58254fe09c2257ba6c7c35037fc2ae6032", "filename": "libjava/gnu/java/beans/decoder/IndexContext.java", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIndexContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIndexContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIndexContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,130 @@\n+/* gnu.java.beans.decoder.IndexContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+/** IndexContext is Context implementation that senses whether it is an indexed get or set\n+ * operation and invokes this operation.\n+ *\n+ * <p>An IndexContent is a get operation when no argument is provided and a set operation if one\n+ * argument is provided.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class IndexContext extends AbstractContext\n+{\n+  private Object result;\n+  private Object argument;\n+  private int index;\n+  private boolean isSetter;\n+\n+  IndexContext(String id, int newIndex)\n+  {\n+    setId(id);\n+    index = newIndex;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObject(Object o) throws AssemblyException\n+  {\n+    if (! isSetter)\n+      {\n+\targument = o;\n+\tisSetter = true;\n+      }\n+    else\n+      throw new AssemblyException(new IllegalStateException(\"More than one argument for indiced access is not possible.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#reportStatement()\n+   */\n+  public void notifyStatement(Context outerContext) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalStateException(\"Statements inside indiced access are not allowed.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public Object endContext(Context outerContext) throws AssemblyException\n+  {\n+    if (isSetter)\n+      {\n+\t// setter\n+\touterContext.set(index, argument);\n+\n+\treturn null;\n+      }\n+    else\n+      // getter\n+      return result = outerContext.get(index);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#subContextFailed()\n+   */\n+  public boolean subContextFailed()\n+  {\n+    // returns true to indicate that indiced access assembly fails when one of its\n+    // argument could not be assembled\n+    return true;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#set(int, java.lang.Object)\n+   */\n+  public void set(int index, Object o) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalStateException(\"Setter is not allowed inside indiced access.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#get(int)\n+   */\n+  public Object get(int index) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalStateException(\"getter is not allowed insided indiced access.\"));\n+  }\n+\n+  public Object getResult()\n+  {\n+    return result;\n+  }\n+}"}, {"sha": "e04f95958d358f43165978f82f6966f025cb2943", "filename": "libjava/gnu/java/beans/decoder/IntHandler.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIntHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIntHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FIntHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,59 @@\n+/* gnu.java.beans.decoder.IntHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Integer instance from the character data in a &lt;int&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class IntHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  IntHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Integer.valueOf(number);\n+  }\n+}"}, {"sha": "e0a78624ad5db1b5237d45f22eace21a12f256f8", "filename": "libjava/gnu/java/beans/decoder/JavaHandler.java", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FJavaHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FJavaHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FJavaHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,93 @@\n+/* gnu.java.beans.decoder.JavaHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+import java.util.HashMap;\n+\n+import org.xml.sax.Attributes;\n+\n+/** Wraps a DecoderContext instance.\n+ *\n+ * @author Robert Schuster\n+ */\n+public class JavaHandler extends AbstractElementHandler\n+{\n+  private Context context;\n+  private HashMap objectMap = new HashMap();\n+  private ClassLoader classLoader;\n+\n+  /**\n+   * @param PersistenceParser\n+   */\n+  JavaHandler(DummyHandler parent, Context decoderContext,\n+              ClassLoader cl)\n+  {\n+    super(parent, true);\n+\n+    classLoader = cl;\n+\n+    context = decoderContext;\n+\n+  }\n+\n+  protected Context startElement(Attributes attributes, ExceptionListener exceptionListener)\n+    throws AssemblyException\n+  {\n+    // may expect version and class attribute but it not used in JDK \n+    // so we do either\n+    return context;\n+  }\n+\n+  public Object getObject(String objectId)\n+  {\n+    return objectMap.get(objectId);\n+  }\n+\n+  public void putObject(String objectId, Object o)\n+  {\n+    if (objectId != null)\n+      objectMap.put(objectId, o);\n+  }\n+\n+  public Class instantiateClass(String className)\n+    throws ClassNotFoundException\n+  {\n+    return Class.forName(className, false, classLoader);\n+  }\n+}"}, {"sha": "e61726ce042fb884717d92b7f1fdad4a1b389c56", "filename": "libjava/gnu/java/beans/decoder/LongHandler.java", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FLongHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FLongHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FLongHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,59 @@\n+/* gnu.java.beans.decoder.LongHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Creates a Long instance from the character data in a &lt;long&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class LongHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  LongHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Long.valueOf(number);\n+  }\n+}"}, {"sha": "2f951e4876a2bf37845da383fe42faa56ea67147", "filename": "libjava/gnu/java/beans/decoder/MethodContext.java", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,107 @@\n+/* gnu.java.beans.decoder.MethodContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+\n+/** MethodContext collects arguments for a method call and creates the result object\n+ * using it. The method is called using the result object of the parent Context.\n+ *\n+ * <p>When the result object is available methods can be called on it using sub-Contexts.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class MethodContext extends AbstractCreatableObjectContext\n+{\n+    private ArrayList arguments = new ArrayList();\n+    private String methodName;\n+\n+    MethodContext(String id, String newMethodName)\n+    {\n+        setId(id);\n+        setStatement(true);\n+        methodName = newMethodName;\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+     */\n+    public void addParameterObjectImpl(Object o)\n+    {\n+        arguments.add(o);\n+    }\n+\n+    /* (non-Javadoc)\n+     * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+     */\n+    protected Object createObject(Context outerContext)\n+        throws AssemblyException\n+    {\n+        Object outerObject = outerContext.getResult();\n+\n+        if (outerObject == null)\n+            throw new AssemblyException(\n+                new NullPointerException(\n+                    \"No object to invoke method \" + methodName));\n+\n+        Object[] args = arguments.toArray();\n+\n+        try\n+        {\n+            Method method =\n+                MethodFinder.getMethod(\n+                    outerObject.getClass(),\n+                    methodName,\n+                    args);\n+            return method.invoke(outerObject, args);\n+        }\n+        catch (NoSuchMethodException nsme)\n+        {\n+            throw new AssemblyException(nsme);\n+        }\n+        catch (InvocationTargetException ite)\n+        {\n+            throw new AssemblyException(ite.getCause());\n+        }\n+        catch (IllegalAccessException iae)\n+        {\n+            throw new AssemblyException(iae);\n+        }\n+    }\n+}"}, {"sha": "ad3d222c6e65027ab133b6d5a729eae588bae763", "filename": "libjava/gnu/java/beans/decoder/MethodFinder.java", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodFinder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodFinder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FMethodFinder.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,177 @@\n+/* gnu.java.beans.decoder.MethodFinder\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.util.HashMap;\n+\n+class MethodFinder\n+{\n+\t/** Provides a mapping between a wrapper class and its corresponding primitive's type. */\n+\tprivate static HashMap typeMapping = new HashMap();\n+\n+\tstatic {\n+\t\ttypeMapping.put(Byte.class, Byte.TYPE);\n+\t\ttypeMapping.put(Short.class, Short.TYPE);\n+\t\ttypeMapping.put(Integer.class, Integer.TYPE);\n+\t\ttypeMapping.put(Long.class, Long.TYPE);\n+\t\ttypeMapping.put(Float.class, Float.TYPE);\n+\t\ttypeMapping.put(Double.class, Double.TYPE);\n+\n+\t\ttypeMapping.put(Character.class, Character.TYPE);\n+\t\ttypeMapping.put(Boolean.class, Boolean.TYPE);\n+\t}\n+\n+\tprivate MethodFinder()\n+\t{\n+\t}\n+\n+\t/** Searches a Method which can accept the given arguments.\n+\t *\n+\t * @param klass\n+\t * @param name\n+\t * @param arguments\n+\t * @return\n+\t * @throws NoSuchMethodException\n+\t */\n+\tstatic Method getMethod(Class klass, String name, Object[] arguments)\n+\t\tthrows NoSuchMethodException\n+\t{\n+\t\t// prepares array containing the types of the arguments\n+\t\tClass[] argumentTypes = getArgumentTypes(arguments);\n+\n+\t\tMethod[] methods = klass.getMethods();\n+\n+\t\t// iterates over all public methods\n+\t\tfor (int i = 0; i < methods.length; i++)\n+\t\t{\n+\t\t\tif (methods[i].getName().equals(name))\n+\t\t\t{\n+\t\t\t\tif (matchingArgumentTypes(methods[i].getParameterTypes(),\n+\t\t\t\t\targumentTypes))\n+\t\t\t\t\treturn methods[i];\n+\t\t\t}\n+\t\t}\n+\n+\t\tthrow new NoSuchMethodException(\n+\t\t\t\"Could not find a matching method named \"\n+\t\t\t\t+ name\n+\t\t\t\t+ \"() in class \"\n+\t\t\t\t+ klass);\n+\t}\n+\n+\tstatic Constructor getConstructor(Class klass, Object[] arguments)\n+\t\tthrows NoSuchMethodException\n+\t{\n+\t\tClass[] argumentTypes = getArgumentTypes(arguments);\n+\t\tConstructor[] constructors = klass.getConstructors();\n+\n+\t\t// iterates over all public methods\n+\t\tfor (int i = 0; i < constructors.length; i++)\n+\t\t{\n+\t\t\tif (matchingArgumentTypes(constructors[i].getParameterTypes(),\n+\t\t\t\targumentTypes))\n+\t\t\t\treturn constructors[i];\n+\t\t}\n+\n+\t\tthrow new NoSuchMethodException(\n+\t\t\t\"Could not find a matching constructor in class \" + klass);\n+\t}\n+\n+\t/** Transforms an array of argument objects into an array of argument types.\n+\t * For each argument being null the argument is null, too. An argument type\n+\t * being null means: Accepts everything (although this can be ambigous).\n+\t * \n+\t * @param arguments\n+\t * @return\n+\t */\n+\tprivate static Class[] getArgumentTypes(Object[] arguments)\n+\t{\n+\t\tif (arguments == null)\n+\t\t\treturn new Class[0];\n+\n+\t\t// prepares array containing the types of the arguments\n+\t\tClass[] argumentTypes = new Class[arguments.length];\n+\t\tfor (int i = 0; i < arguments.length; i++)\n+\t\t\targumentTypes[i] =\n+\t\t\t\t(arguments[i] == null) ? null : arguments[i].getClass();\n+\t\treturn argumentTypes;\n+\t}\n+\n+\t/** Tests whether the argument types supplied to the method argument types\n+\t * are assignable. In addition to the assignment specifications this method\n+\t * handles the primitive's wrapper classes as if they were of their\n+\t * primitive type (e.g Boolean.class equals Boolean.TYPE).\n+\t * When a supplied argument type is null it is assumed that no argument\n+\t * object was supplied for it and the test for this particular parameter will\n+\t * pass.\n+\t *\n+\t * @param methodArgTypes\n+\t * @param suppliedArgTypes\n+\t * @return\n+\t */\n+\tprivate static boolean matchingArgumentTypes(\n+\t\tClass[] methodArgTypes,\n+\t\tClass[] suppliedArgTypes)\n+\t{\n+\t\tif (methodArgTypes.length != suppliedArgTypes.length)\n+\t\t\treturn false;\n+\n+\t\tfor (int i = 0; i < methodArgTypes.length; i++)\n+\t\t{\n+\t\t\tif (suppliedArgTypes[i] == null)\n+\t\t\t{\n+\t\t\t\t// by definition a non-existant argument type (null) can be converted to everything\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\telse if (typeMapping.containsKey(suppliedArgTypes[i]))\n+\t\t\t{\n+\t\t\t\tClass primitiveType =\n+\t\t\t\t\t(Class) typeMapping.get(suppliedArgTypes[i]);\n+\t\t\t\tif (!(methodArgTypes[i].isAssignableFrom(suppliedArgTypes[i])\n+\t\t\t\t\t|| methodArgTypes[i].isAssignableFrom(primitiveType)))\n+\t\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\telse if (!methodArgTypes[i].isAssignableFrom(suppliedArgTypes[i]))\n+\t\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn true;\n+\t}\n+}"}, {"sha": "60a87c3808501a66cd4d1b51a360951a6e40ea32", "filename": "libjava/gnu/java/beans/decoder/NullHandler.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FNullHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FNullHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FNullHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,62 @@\n+/* gnu.java.beans.decoder.NullHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+\n+/** Just provides the 'null' object.\n+ *\n+ * @author Robert Schuster\n+ */\n+class NullHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  NullHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String characters) throws AssemblyException\n+  {\n+    if (! characters.equals(\"\"))\n+      throw new AssemblyException(new IllegalArgumentException(\"No characters inside <void> tag allowed.\"));\n+\n+    return null;\n+  }\n+}"}, {"sha": "81b270af76cf81d1b4b4922b01f1a6171f428af1", "filename": "libjava/gnu/java/beans/decoder/ObjectContext.java", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,100 @@\n+/* gnu.java.beans.decoder.ObjectHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+/** ObjectContext is a {@link Context} implementation that wraps a simple Object instance.\n+ * The instance can be provided when the Context is created (due to an 'idref'\n+ * attribute) or later (eg. &lt;int&gt; tag)\n+ *\n+ * <p>The ObjectContext does not accept any parameter object and ignores notifications\n+ * about sub-contexts being statements.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+final class ObjectContext extends AbstractObjectContext\n+{\n+  ObjectContext(Object newObject)\n+  {\n+    setObject(newObject);\n+  }\n+\n+  ObjectContext(String id, Object newObject)\n+  {\n+    setId(id);\n+    setObject(newObject);\n+  }\n+\n+  ObjectContext()\n+  {\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObject(Object o) throws AssemblyException\n+  {\n+    throw new AssemblyException(new IllegalArgumentException(\"Adding objects to an ObjectContext is not allowed.\"));\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#reportStatement()\n+   */\n+  public void notifyStatement(Context outerContext) throws AssemblyException\n+  {\n+    // can ignore that\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public Object endContext(Context outerContext) throws AssemblyException\n+  {\n+    // just returns the object which is encapsuled (may be null)\n+    return getResult();\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#subContextFailed()\n+   */\n+  public boolean subContextFailed()\n+  {\n+    // this context will not fail when a subcontext fails because the result is\n+    // already available when the context is created.\n+    return false;\n+  }\n+}"}, {"sha": "801dc747bc41005dc45829ce2517410ddced8c38", "filename": "libjava/gnu/java/beans/decoder/ObjectHandler.java", "status": "added", "additions": 169, "deletions": 0, "changes": 169, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FObjectHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,169 @@\n+/* gnu.java.beans.decoder.ObjectHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+/** An ObjectHandler parses the &lt;object&gt; tag and thereby creates various\n+ * Context implementations.\n+ *\n+ * @author Robert Schuster\n+ *\n+ */\n+public class ObjectHandler extends AbstractElementHandler\n+{\n+  /**\n+   * XXX: Can all results be stored with an object id?\n+   *\n+   *\n+   * @param PersistenceParser\n+   */\n+  ObjectHandler(ElementHandler parent)\n+  {\n+    super(parent, true);\n+  }\n+\n+  protected Context startElement(Attributes attributes, ExceptionListener exceptionListener)\n+    throws AssemblyException\n+  {\n+    String className = attributes.getValue(\"class\");\n+    String methodName = attributes.getValue(\"method\");\n+    String fieldName = attributes.getValue(\"field\");\n+    String index = attributes.getValue(\"index\");\n+    String propertyName = attributes.getValue(\"property\");\n+    String id = attributes.getValue(\"id\");\n+    String idRef = attributes.getValue(\"idref\");\n+\n+    /* first check if we just want to access an existing object (idref present)\n+     *\n+     * note: <object idref=\"foo\" method=\"bar\"/> is not valid to call method \"bar\"\n+     * on the object with id \"foo\". Instead this should return the object \"foo\"\n+     * itself. The right way to this is:\n+     * <object idref=\"foo\">\n+     *         <object method=\"bar\"/>\n+     * </object>\n+     *\n+     * This means that if idref is present class, method, field, index and\n+     * property are obsolete.\n+     */\n+    if (idRef != null)\n+      // reactivates an existing object and giving it another name if id exists\n+      return new ObjectContext(id, getObject(idRef));\n+\n+    // decides whether we are in a static (className present) or dynamic context\n+    if (className != null)\n+      {\n+\ttry\n+\t  {\n+\t    Class klass = instantiateClass(className);\n+\n+\t    // class name exists which means that we are in a static context.\n+\t    // so we may want to ...\n+\t    // access a static field if the fieldName exists\n+\t    if (fieldName != null)\n+\t      {\n+\t\ttry\n+\t\t  {\n+\t\t    return new ObjectContext(id,\n+\t\t                             klass.getField(fieldName).get(null));\n+\t\t  }\n+\t\tcatch (NoSuchFieldException nsfe)\n+\t\t  {\n+\t\t    throw new AssemblyException(nsfe);\n+\t\t  }\n+\t\tcatch (IllegalAccessException iae)\n+\t\t  {\n+\t\t    throw new AssemblyException(iae);\n+\t\t  }\n+\t      }\n+\n+\t    // (falling through is important!)\n+\t    // run a constructor if methodName is \"new\" or null\n+\t    if (methodName == null || methodName.equals(\"new\"))\n+\t      return new ConstructorContext(id, klass);\n+\n+\t    // (falling through is important!)\n+\t    // run a static method on the given class (if methodName exists, which is implied already) \n+\t    return new StaticMethodContext(id, klass, methodName);\n+\t    // XXX: should fail if unexpected attributes are present?\n+\t  }\n+\tcatch (ClassNotFoundException cnfe)\n+\t  {\n+\t    throw new AssemblyException(cnfe);\n+\t  }\n+      }\n+    else\n+      {\n+\t// className does not exist which means we are in the context of\n+\t// some object and want to ...\n+\t// access the get(int index) method if index != null\n+\tif (index != null)\n+\t  {\n+\t    try\n+\t      {\n+\t\t// Note: http://java.sun.com/products/jfc/tsc/articles/persistence3/ says\n+\t\t// that <void index=\"4\"/> will make up a get()-call. But this is wrong because\n+\t\t// <void/> tags never return values (to the surrounding context)\n+\t\treturn new IndexContext(id, Integer.parseInt(index));\n+\t      }\n+\t    catch (NumberFormatException nfe)\n+\t      {\n+\t\tthrow new AssemblyException(nfe);\n+\t      }\n+\t  }\n+\n+\t// access a method if methodName exists\n+\tif (methodName != null)\n+\t  return new MethodContext(id, methodName);\n+\n+\t// (falling through is important!)\n+\t// access a property if a propertyName exists\n+\tif (propertyName != null && propertyName.length() > 0)\n+\t  // this is reported as an ordinary method access where the propertyName is\n+\t  // converted into a 'getter'-method name: convert first character of property name\n+\t  // to upper case and prepend 'get'\n+\t  // Note: This will be a getter-method because the <object> tag implies that a return\n+\t  // value is expected.\n+\t  return new PropertyContext(id, propertyName);\n+      }\n+\n+    throw new AssemblyException(new IllegalArgumentException(\"Wrong or missing attributes for <object> tag.\"));\n+  }\n+}"}, {"sha": "33154780a9e720be19660fc9f20a179f1b92a095", "filename": "libjava/gnu/java/beans/decoder/PersistenceParser.java", "status": "added", "additions": 484, "deletions": 0, "changes": 484, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPersistenceParser.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,484 @@\n+/* gnu.java.beans.PersistenceParser\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+import java.beans.XMLDecoder;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/** The PersistenceParser parses an XML data stream and delegates actions to ElementHandler\n+ * instances. The parser catches and recovers from all exception which reside from wrong usage\n+ * of attributes and tags.\n+ *\n+ * @author Robert Schuster\n+ */\n+public class PersistenceParser extends DefaultHandler implements Context\n+{\n+\t/** The ExceptionListener instance which is informed of non-critical parsing exceptions.\n+\t */\n+\tprivate ExceptionListener exceptionListener;\n+\n+\t/** When an element was not usable all elements inside it should be skipped.\n+\t * This is done by skipping startElement() and endElement() invocations whenever\n+\t * this value is above 0.\n+\t */\n+\tprivate int skipElement;\n+\n+\t/** Stores the Creator instances which can instantiate the appropriate handler implementation\n+\t * for a given element.\n+\t */\n+\tprivate HashMap handlerCreators = new HashMap();\n+\n+\t/** Denotes the current ElementHandler. To avoid checking for null-values it is pre-assigned\n+\t * with a DummyHandler instance which must not be used but acts as a root element.\n+\t */\n+\tprivate ElementHandler currentHandler;\n+\n+\t/** The real root element that stores all objects created during parsing.\n+\t */\n+\tprivate JavaHandler javaHandler;\n+\n+\t/** Stores the decoded objects. */\n+\tprivate List objects = new LinkedList();\n+\n+\t/** The XMLDecoder instance that started this PersistenceParser */\n+\tprivate XMLDecoder decoder;\n+\n+\t/** Creates a PersistenceParser which reads XML data from the given InputStream, reports\n+\t * exceptions to ExceptionListener instance, stores resulting object in the DecoderContext\n+\t * and uses the given ClassLoader to resolve classes.\n+\t *\n+\t * @param inputStream\n+\t * @param exceptionListener\n+\t * @param decoderContext\n+\t * @param cl\n+\t */\n+\tpublic PersistenceParser(\n+\t\tInputStream inputStream,\n+\t\tExceptionListener exceptionListener,\n+\t\tClassLoader cl,\n+\t\tXMLDecoder decoder)\n+\t{\n+\n+\t\tthis.exceptionListener = exceptionListener;\n+\t\tthis.decoder = decoder;\n+\n+\t\tDummyHandler dummyHandler = new DummyHandler();\n+\t\tcurrentHandler = dummyHandler;\n+\t\tjavaHandler = new JavaHandler(dummyHandler, this, cl);\n+\n+\t\tSAXParserFactory factory = SAXParserFactory.newInstance();\n+\n+\t\tSAXParser parser;\n+\t\ttry\n+\t\t{\n+\t\t\tparser = factory.newSAXParser();\n+\t\t}\n+\t\tcatch (ParserConfigurationException pce)\n+\t\t{\n+\t\t\t// should not happen when a parser is available because we did\n+\t\t\t// not request any requirements on the XML parser\n+\t\t\tthrow (InternalError) new InternalError(\n+\t\t\t\t\"No SAX Parser available.\").initCause(\n+\t\t\t\tpce);\n+\t\t}\n+\t\tcatch (SAXException saxe)\n+\t\t{\n+\t\t\t// should not happen when a parser is available because we did\n+\t\t\t// not request any requirements on the XML parser\n+\t\t\tthrow (InternalError) new InternalError(\n+\t\t\t\t\"No SAX Parser available.\").initCause(\n+\t\t\t\tsaxe);\n+\t\t}\n+\n+\t\t// prepares a map of Creator instances which can instantiate a handler which is\n+\t\t// appropriate for the tag that is used as a key for the Creator\n+\t\thandlerCreators.put(\"java\", new JavaHandlerCreator());\n+\n+\t\t// calls methods (properties), constructors, access fields\n+\t\thandlerCreators.put(\"object\", new ObjectHandlerCreator());\n+\t\thandlerCreators.put(\"void\", new VoidHandlerCreator());\n+\n+\t\thandlerCreators.put(\"array\", new ArrayHandlerCreator());\n+\n+\t\t// these handler directly create an Object (or null)\n+\t\thandlerCreators.put(\"class\", new ClassHandlerCreator());\n+\t\thandlerCreators.put(\"null\", new NullHandlerCreator());\n+\n+\t\thandlerCreators.put(\"char\", new CharHandlerCreator());\n+\t\thandlerCreators.put(\"string\", new StringHandlerCreator());\n+\t\thandlerCreators.put(\"boolean\", new BooleanHandlerCreator());\n+\t\thandlerCreators.put(\"byte\", new ByteHandlerCreator());\n+\t\thandlerCreators.put(\"short\", new ShortHandlerCreator());\n+\t\thandlerCreators.put(\"int\", new IntHandlerCreator());\n+\t\thandlerCreators.put(\"long\", new LongHandlerCreator());\n+\t\thandlerCreators.put(\"float\", new FloatHandlerCreator());\n+\t\thandlerCreators.put(\"double\", new DoubleHandlerCreator());\n+\n+\t\t// parses the data and sends all exceptions to the ExceptionListener\n+\t\ttry\n+\t\t{\n+\t\t\tparser.parse(inputStream, this);\n+\t\t}\n+\t\tcatch (SAXException saxe)\n+\t\t{\n+\t\t\texceptionListener.exceptionThrown(\n+\t\t\t\tnew IllegalArgumentException(\"XML data not well-formed.\"));\n+\t\t}\n+\t\tcatch (IOException ioe)\n+\t\t{\n+\t\t\texceptionListener.exceptionThrown(ioe);\n+\t\t}\n+\t}\n+\n+\tpublic void startElement(\n+\t\tString uri,\n+\t\tString localName,\n+\t\tString qName,\n+\t\tAttributes attributes)\n+\t\tthrows SAXException\n+\t{\n+\t\t/* The element is skipped if\n+\t\t * a) the current handler has already failed or a previous error occured\n+\t\t * which makes all children obsolete\n+\t\t */\n+\t\tif (currentHandler.hasFailed() || skipElement > 0)\n+\t\t{\n+\t\t\texceptionListener.exceptionThrown(\n+\t\t\t\tnew IllegalArgumentException(\n+\t\t\t\t\t\"Element unusable due to previous error: \" + qName));\n+\n+\t\t\tskipElement++;\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t/* b) Subelements are not allowed within the current ElementHandler.\n+\t\t */\n+\t\tif (!currentHandler.isSubelementAllowed(qName))\n+\t\t{\n+\t\t\texceptionListener.exceptionThrown(\n+\t\t\t\tnew IllegalArgumentException(\n+\t\t\t\t\t\"Element is not allowed here: \" + qName));\n+\n+\t\t\tskipElement++;\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t/* c) The tag name is not a key in the map of Creator instances. This means that\n+\t\t* either the XML data is of a newer version or simply contains a miss-spelled element.\n+\t\t*/\n+\t\tif (!handlerCreators.containsKey(qName))\n+\t\t{\n+\t\t\texceptionListener.exceptionThrown(\n+\t\t\t\tnew IllegalArgumentException(\n+\t\t\t\t\t\"Element unusable because tag is unknown: \" + qName));\n+\n+\t\t\tskipElement++;\n+\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// creates a new handler for the new element\n+\t\tAbstractElementHandler handler =\n+\t\t\t((Creator) handlerCreators.get(qName)).createHandler(\n+\t\t\t\tcurrentHandler);\n+\n+\t\t// makes it the current handler to receive character data\n+\t\tcurrentHandler = handler;\n+\n+\t\t// starts the handler\n+\t\tcurrentHandler.start(attributes, exceptionListener);\n+\t}\n+\n+\tpublic void endElement(String uri, String localName, String qName)\n+\t\tthrows SAXException\n+\t{\n+\t\t// skips processing the current handler if we are parsing an element\n+\t\t// which was marked invalid (in startElement() ) \n+\t\tif (skipElement > 0)\n+\t\t{\n+\t\t\tskipElement--;\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// invokes the handler's finishing method\n+\t\tcurrentHandler.end(exceptionListener);\n+\n+\t\t// removes the current handler and reactivates its parent\n+\t\tcurrentHandler = currentHandler.getParent();\n+\t}\n+\n+\t/** Transfers character data to the current handler\n+\t */\n+\tpublic void characters(char[] ch, int start, int length)\n+\t\tthrows SAXException\n+\t{\n+\t\t// prevents sending character data of invalid elements\n+\t\tif (skipElement > 0)\n+\t\t\treturn;\n+\n+\t\tcurrentHandler.characters(ch, start, length);\n+\t}\n+\n+\t/** Creator interface provided a mechanism to instantiate ElementHandler instances\n+\t * for the appropriate tag.\n+\t *\n+\t * @author Robert Schuster\n+\t */\n+\tinterface Creator\n+\t{\n+\t\t/** Creates an ElementHandler instance using the given ElementHandler as its parent.\n+\t\t *\n+\t\t * @param parent The parent ElementHandler of the result.\n+\t\t * @return A new ElementHandler instance.\n+\t\t */\n+\t\tAbstractElementHandler createHandler(ElementHandler parent);\n+\t}\n+\n+\tclass BooleanHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new BooleanHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass ByteHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new ByteHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass ShortHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new ShortHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass IntHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new IntHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass LongHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new LongHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass FloatHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new FloatHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass DoubleHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new DoubleHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass CharHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new CharHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass StringHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new StringHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass JavaHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn javaHandler;\n+\t\t}\n+\t}\n+\n+\tclass ObjectHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new ObjectHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass VoidHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new VoidHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass ClassHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new ClassHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass NullHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new NullHandler(parent);\n+\t\t}\n+\t}\n+\n+\tclass ArrayHandlerCreator implements Creator\n+\t{\n+\t\tpublic AbstractElementHandler createHandler(ElementHandler parent)\n+\t\t{\n+\t\t\treturn new ArrayHandler(parent);\n+\t\t}\n+\t}\n+\n+\t/** Adds a decoded object to the Context. */\n+\tpublic void addParameterObject(Object o) throws AssemblyException\n+\t{\n+\t\tobjects.add(o);\n+\t}\n+\n+\tpublic void notifyStatement(Context outerContext) throws AssemblyException\n+\t{\n+\t\t// can be ignored because theis Context does not react to statement and expressions\n+\t\t// differently\n+\t}\n+\n+\tpublic Object endContext(Context outerContext) throws AssemblyException\n+\t{\n+\t\treturn null;\n+\t}\n+\n+\tpublic boolean subContextFailed()\n+\t{\n+\t\t// failing of subcontexts is no problem for the mother of all contexts\n+\t\treturn false;\n+\t}\n+\n+\tpublic void set(int index, Object o) throws AssemblyException\n+\t{\n+\t\t// not supported\n+\t\tthrow new AssemblyException(\n+\t\t\tnew IllegalArgumentException(\"Set method is not allowed in decoder context.\"));\n+\t}\n+\n+\tpublic Object get(int index) throws AssemblyException\n+\t{\n+\t\t// not supported\n+\t\tthrow new AssemblyException(\n+\t\t\tnew IllegalArgumentException(\"Get method is not allowed in decoder context.\"));\n+\t}\n+\n+\tpublic Object getResult()\n+\t{\n+\t\t// returns the XMLDecoder instance which is requested by child contexts this way.\n+\t\t// That is needed to invoke methods on the decoder.\n+\t\treturn decoder;\n+\t}\n+\n+\tpublic void setId(String id)\n+\t{\n+\t\texceptionListener.exceptionThrown(new IllegalArgumentException(\"id attribute is not allowed for <java> tag.\"));\n+\t}\n+\n+\tpublic String getId()\n+\t{\n+\t\t// appears to have no id\n+\t\treturn null;\n+\t}\n+\n+\tpublic boolean isStatement()\n+\t{\n+\t\t// this context is a statement by definition because it never returns anything to a parent because\n+\t\t// there is no such parent (DummyContext does not count!)\n+\t\treturn true;\n+\t}\n+\n+\tpublic void setStatement(boolean b)\n+\t{\n+\t\t// ignores that because this Context is always a statement\n+\t}\n+\n+\t/** Returns an Iterator instance which returns the decoded objects.\n+\t * \n+\t * This method is used by the XMLDecoder directly. \n+\t */ \n+\tpublic Iterator iterator()\n+\t{\n+\t\treturn objects.iterator();\n+\t}\n+\n+}"}, {"sha": "54785764edf3173b62fb99fb771373e267eee1aa", "filename": "libjava/gnu/java/beans/decoder/PropertyContext.java", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPropertyContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPropertyContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FPropertyContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,137 @@\n+/* gnu.java.beans.decoder.PropertyContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/** PropertyContext is a Context implementation that is very similar to MethodContext\n+ * and IndexContext. The sole purpose of PropertyContext to find out whether it should\n+ * 'set' or 'get' a certain property. This decision is made using the number of\n+ * arguments.\n+ * <p>When the method call has to be made and there is no argument we 'get' the property.\n+ * With one argument it is 'set'.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+class PropertyContext extends AbstractObjectContext\n+{\n+  private Object argument;\n+  private String propertyName;\n+  private String prefix = \"get\";\n+  private boolean methodCalled;\n+\n+  PropertyContext(String id, String newPropertyName)\n+  {\n+    setId(id);\n+    propertyName = newPropertyName;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObject(Object o) throws AssemblyException\n+  {\n+    if (methodCalled)\n+      throw new AssemblyException(new IllegalArgumentException(\"Cannot add parameter object when method was already called.\"));\n+\n+    if (argument != null)\n+      throw new AssemblyException(new IllegalArgumentException(\"Property attribut allows zero or one argument only.\"));\n+\n+    argument = o;\n+\tsetStatement(true);\n+    prefix = \"set\";\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  public void notifyStatement(Context outerContext) throws AssemblyException\n+  {\n+    if (methodCalled)\n+      return;\n+    methodCalled = true;\n+\n+    Object outerObject = outerContext.getResult();\n+\n+    if (outerObject == null)\n+      throw new AssemblyException(new NullPointerException(\"No object to access property \"\n+\t  + propertyName));\n+    \n+\n+    // converts property name into a method name\n+    String methodName = prefix + propertyName.substring(0, 1).toUpperCase()\n+                        + propertyName.substring(1);\n+\n+    // prepares the argument\n+    Object[] args = (argument != null) ? new Object[] { argument } : null;\n+\n+    try\n+      {\n+\tMethod method = MethodFinder.getMethod(outerObject.getClass(),\n+\t                                       methodName, args);\n+\n+\t// stores the result whether it is available or not\n+\tsetObject(method.invoke(outerObject, args));\n+      }\n+    catch (NoSuchMethodException nsme)\n+      {\n+\tthrow new AssemblyException(nsme);\n+      }\n+    catch (InvocationTargetException ite)\n+      {\n+\tthrow new AssemblyException(ite.getCause());\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new AssemblyException(iae);\n+      }\n+  }\n+\n+  public Object endContext(Context outerContext) throws AssemblyException\n+  {\n+    notifyStatement(outerContext);\n+\n+    return getResult();\n+  }\n+\n+  public boolean subContextFailed()\n+  {\n+    return ! methodCalled;\n+  }\n+}"}, {"sha": "8ac74a1528a2e333b3bcd033d834b0c3fb484886", "filename": "libjava/gnu/java/beans/decoder/ShortHandler.java", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FShortHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FShortHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FShortHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,58 @@\n+/* gnu.java.beans.decoder.ShortHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+/** Creates a Short instance from the character data in a &lt;short&gt; tag.\n+ *\n+ * @author Robert Schuster\n+ */\n+class ShortHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  ShortHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String number) throws NumberFormatException\n+  {\n+    return Short.valueOf(number);\n+  }\n+}"}, {"sha": "14b5b9a3514c5649773886408297b95db8e6833a", "filename": "libjava/gnu/java/beans/decoder/SimpleHandler.java", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FSimpleHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FSimpleHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FSimpleHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,111 @@\n+/* gnu.java.beans.decoder.SimpleHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+/** XML element handler that is specialized on tags that contains a simple string in their\n+ * body which has to be parsed in a specific way.\n+ * <p>All of these tags have in common that they do not accept attributes. A warning is\n+ * send to the parser's ExceptionListener when one or more attributes exist.</p>\n+ *\n+ * @author Robert Schuster\n+ */\n+abstract class SimpleHandler extends AbstractElementHandler\n+{\n+  private ObjectContext context;\n+\n+  /**\n+   * @param PersistenceParser\n+   */\n+  SimpleHandler(ElementHandler parent)\n+  {\n+    super(parent, false);\n+\n+    // SimpleHandler do not accept any subelements\n+  }\n+\n+  protected final Context startElement(Attributes attributes, ExceptionListener exceptionListener)\n+    throws AssemblyException\n+  {\n+  \t\n+    // note: simple elements should not have any attributes. We inform\n+    // the user of this syntactical but uncritical problem by sending\n+    // an IllegalArgumentException for each unneccessary attribute\n+    int size = attributes.getLength();\n+    for (int i = 0; i < size; i++) {\n+            String attributeName = attributes.getQName(i);\n+            Exception e =\n+                    new IllegalArgumentException(\n+                            \"Unneccessary attribute '\"\n+                                    + attributeName\n+                                    + \"' discarded.\");\n+            exceptionListener.exceptionThrown(e);\n+    }\n+    \n+    return context = new ObjectContext();\n+  }\n+\n+  public void endElement(String characters)\n+    throws AssemblyException, AssemblyException\n+  {\n+    // reports the number when the character data can be parsed\n+    try\n+      {\n+\tcontext.setObject(parse(characters));\n+      }\n+    catch (NumberFormatException nfe)\n+      {\n+\tthrow new AssemblyException(nfe);\n+      }\n+  }\n+\n+  /** Returns an object that is created from the given characters. If the string is\n+   * converted into a number a NumberFormatException is cathed and reported\n+   * appropriately.\n+   *\n+   * @param characters A string of characters that has to be processed in some way.\n+   * @return An Object instance generated from the given data.\n+   * @throws AssemblerException When the string was invalid.\n+   * @throws NumberFormatException When the string could not be parsed into a number.\n+   */\n+  protected abstract Object parse(String characters)\n+    throws AssemblyException, NumberFormatException;\n+}"}, {"sha": "407a5d1ea0fb81e9d846230ac6c5bb276be31696", "filename": "libjava/gnu/java/beans/decoder/StaticMethodContext.java", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStaticMethodContext.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStaticMethodContext.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStaticMethodContext.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,95 @@\n+/* gnu.java.beans.decoder.StaticMethodContext\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+\n+/**\n+ * @author Robert Schuster\n+ */\n+class StaticMethodContext extends AbstractCreatableObjectContext\n+{\n+  private ArrayList arguments = new ArrayList();\n+  private Class klass;\n+  private String methodName;\n+\n+  StaticMethodContext(String id, Class newClass, String newMethodName)\n+  {\n+    setId(id);\n+    klass = newClass;\n+    methodName = newMethodName;\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#addObject(java.lang.Object)\n+   */\n+  public void addParameterObjectImpl(Object o)\n+  {\n+    arguments.add(o);\n+  }\n+\n+  /* (non-Javadoc)\n+   * @see gnu.java.beans.decoder.Context#endContext(gnu.java.beans.decoder.Context)\n+   */\n+  protected Object createObject(Context outerContext)\n+    throws AssemblyException\n+  {\n+    Object[] args = arguments.toArray();\n+\n+    try\n+      {\n+\tMethod method = MethodFinder.getMethod(klass, methodName, args);\n+\treturn method.invoke(null, args);\n+      }\n+    catch (NoSuchMethodException nsme)\n+      {\n+\tthrow new AssemblyException(nsme);\n+      }\n+    catch (InvocationTargetException ite)\n+      {\n+\t// rethrows the reason for the InvocationTargetsException (ie. the exception in the called code)\n+\tthrow new AssemblyException(ite.getCause());\n+      }\n+    catch (IllegalAccessException iae)\n+      {\n+\tthrow new AssemblyException(iae);\n+      }\n+  }\n+}"}, {"sha": "3154593cf5a74e363221a841e69fec321739af58", "filename": "libjava/gnu/java/beans/decoder/StringHandler.java", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStringHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStringHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FStringHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,54 @@\n+/* gnu.java.beans.decoder.StringHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+class StringHandler extends SimpleHandler\n+{\n+  /**\n+   * @param PersistenceParser\n+   */\n+  StringHandler(ElementHandler parent)\n+  {\n+    super(parent);\n+  }\n+\n+  protected Object parse(String characters)\n+  {\n+    return characters;\n+  }\n+}"}, {"sha": "cc291d67942c1683d6f707488cc2f8388f3ede03", "filename": "libjava/gnu/java/beans/decoder/VoidHandler.java", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FVoidHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FVoidHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fbeans%2Fdecoder%2FVoidHandler.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,140 @@\n+/* gnu.java.beans.decoder.VoidHandler\n+   Copyright (C) 2004 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+ \n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+package gnu.java.beans.decoder;\n+\n+import java.beans.ExceptionListener;\n+\n+import org.xml.sax.Attributes;\n+\n+public class VoidHandler extends AbstractElementHandler\n+{\n+    /**\n+     * @param PersistenceParser\n+     */\n+    VoidHandler(ElementHandler parent)\n+    {\n+        super(parent, true);\n+    }\n+\n+    protected Context startElement(\n+        Attributes attributes,\n+        ExceptionListener exceptionListener)\n+        throws AssemblyException\n+    {\n+        Context ctx = startElementImpl(attributes);\n+        ctx.setStatement(true);\n+\n+        return ctx;\n+    }\n+\n+    private Context startElementImpl(Attributes attributes)\n+        throws AssemblyException\n+    {\n+        String id = attributes.getValue(\"id\");\n+        String className = attributes.getValue(\"class\");\n+        String methodName = attributes.getValue(\"method\");\n+        String propertyName = attributes.getValue(\"property\");\n+        String index = attributes.getValue(\"index\");\n+\n+        if (className != null)\n+        {\n+            try\n+            {\n+                Class klass = instantiateClass(className);\n+\n+                // class name exists which means that we are in a static context.\n+                // so we may want to ...\n+                // run a constructor if methodName is \"new\" or null\n+                if (methodName == null || methodName.equals(\"new\"))\n+                    // if the id is null the result cannot be by the decoder accessed but the\n+                    // constructor may have side effects (e.g. registering itself in a global registry)\n+                    return new ConstructorContext(id, klass);\n+\n+                // (falling through is important!)\n+                // run a static method on the given class (if methodName exists, which is implied already) \n+                return new StaticMethodContext(id, klass, methodName);\n+            }\n+            catch (ClassNotFoundException cnfe)\n+            {\n+                throw new AssemblyException(cnfe);\n+            }\n+        }\n+        else\n+        {\n+            // className does not exist which means we are in the context of\n+            // some object and want to ...\n+            // access an element by index\n+            if (index != null)\n+            {\n+                // note: whether this resolves into get(i) or set(i, o) depends on the\n+                // number of arguments and is decided by the ObjectAssembler\n+                try\n+                {\n+                    return new IndexContext(id, Integer.parseInt(index));\n+                }\n+                catch (NumberFormatException nfe)\n+                {\n+                    throw new AssemblyException(nfe);\n+                }\n+            }\n+\n+            // access a method if methodName exists\n+            if (methodName != null)\n+                return new MethodContext(id, methodName);\n+\n+            // (falling through is important!)\n+            // access a property if a propertyName exists\n+            if (propertyName != null && propertyName.length() > 0)\n+                // this is reported as an ordinary method invocation where the propertyName is\n+                // converted into a 'setter'-method name: convert first character of property name\n+                // to upper case and prepend 'set'\n+                // Note: This will be a setter-method because the <void> tag implies that no return\n+                // value is expected (but a side effect)\n+                return new PropertyContext(id, propertyName);\n+        }\n+\n+        // if code reaches this point the tag has wrong attributes. The following test\n+        // does not make it better but can provide are more specific error message for\n+        // a common mistake: <void> tags are not allowed to have an idref attribute\n+        throw new AssemblyException(\n+            new IllegalArgumentException(\n+                (attributes.getValue(\"idref\") == null)\n+                    ? \"Missing attributes for <void> tag\"\n+                    : \"<void> does not support 'idref' attribute.\"));\n+    }\n+}"}, {"sha": "30f6642bbc36ebc5f31ac416f30c0a7e81112b05", "filename": "libjava/java/beans/Beans.java", "status": "modified", "additions": 294, "deletions": 187, "changes": 481, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fjava%2Fbeans%2FBeans.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fjava%2Fbeans%2FBeans.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FBeans.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -1,5 +1,5 @@\n /* java.beans.Beans\n-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2004, 2005 Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -35,23 +35,26 @@\n obligated to do so.  If you do not wish to do so, delete this\n exception statement from your version. */\n \n-\n package java.beans;\n \n+import gnu.java.beans.DummyAppletStub;\n import gnu.java.io.ClassLoaderObjectInputStream;\n \n import java.applet.Applet;\n+import java.beans.beancontext.BeanContext;\n import java.io.IOException;\n-import java.io.InputStream;\n import java.io.ObjectInputStream;\n+import java.net.URL;\n \n /**\n  * <code>Beans</code> provides some helper methods that allow the basic\n  * operations of Bean-ness.\n  *\n  * @author John Keiser\n+ * @author Robert Schuster\n+ * \n  * @since 1.1\n- * @version 1.1.0, 29 Jul 1998\n+ * @status updated to 1.4\n  *\n  */\n public class Beans\n@@ -66,196 +69,300 @@\n    */\n   public Beans()\n   {\n-    // Do nothing here.\n+    // Does intentionally nothing here.\n   }\n \n-  /**\n-   * Allows you to instantiate a Bean.  This method takes\n-   * a ClassLoader from which to read the Bean and the\n-   * name of the Bean.<P>\n-   *\n-   * The Bean name should be a dotted name, like a class.\n-   * It can represent several things.  Beans will search\n-   * for the Bean using the name like this:<P>\n-   * <OL>\n-   * <LI>Searches for a serialized instance of the Bean\n-   * using getResource(), mangling the Bean name by\n-   * replacing the dots with slashes and appending .ser\n-   * (for example, gnu.beans.BlahDeBlah would cause\n-   * Beans to search for gnu/beans/BlahDeBlah.ser using\n-   * getResource()).</LI>\n-   * <LI>Searches for the Bean class using the beanName,\n-   * and then instantiates it with the no-arg constructor.\n-   * At that point, if it is an Applet, it provides it\n-   * with AppletContext and AppletStub, and then calls\n-   * init().</LI>\n-   * </OL>\n-   *\n-   * @param cl the ClassLoader to use, or <CODE>null</CODE>\n-   *        to use the default ClassLoader.\n-   * @param beanName the name of the Bean.\n-   *\n-   * @return the Bean.\n-   *\n-   * @XXX\n-   */\n-  public static Object instantiate (ClassLoader cl, String beanName)\n-    throws IOException, ClassNotFoundException\n-  {\n-    Object bean;\n-    InputStream serStream;\n-    \n-    if (cl == null)\n-      {\n-        serStream = ClassLoader.getSystemResourceAsStream\n-          (beanName.replace ('.','/')+\".ser\");\n-      }\n-    else\n-      {\n-        serStream = cl.getResourceAsStream (beanName.replace ('.', '/')\n-                                            + \".ser\");\n-      }\n-    \n-    if (serStream != null)\n-      {\n-        if(cl == null)\n-          {\n-            ObjectInputStream ois = new ObjectInputStream(serStream);\n-            bean = ois.readObject();\n-          }\n-        else\n-          {\n-            ClassLoaderObjectInputStream ois =\n-              new ClassLoaderObjectInputStream (serStream, cl);\n+   /** Creates a bean.\n+    * <p>This is a convenience method that calls <code>instantiate(cl, beanName, null, null)</code>.</p>\n+    * \n+    * @see instantiate(ClassLoader, String, BeanContext, AppletInitializer)\n+    * @param cl ClassLoader to be used or <code>null</code> for the system classloader.\n+    * @param beanName Name of a serialized bean or class name.\n+    * @return A newly created bean.\n+    * @throws IOException If access of an IO resource failed.\n+    * @throws ClassNotFoundException If the class name is not known or does not lead to a proper bean class. \n+    */\n+    public static Object instantiate(ClassLoader cl, String beanName)\n+        throws IOException, ClassNotFoundException\n+    {\n+        return instantiate(cl, beanName, null, null);\n+    }\n+\n+   /** Creates a bean.\n+    * \n+    * <p>This is a convenience method that calls <code>instantiate(cl, beanName, beanContext, null)</code>.</p>\n+    * \n+    * @see instantiate(ClassLoader, String, BeanContext, AppletInitializer)\n+    * @param cl ClassLoader to be used or <code>null</code> for the system classloader.\n+    * @param beanName Name of a serialized bean or class name.\n+    * @param beanContext Context to which the newly created Bean should be added.\n+    * @return A newly created bean.\n+    * @throws IOException If access of an IO resource failed.\n+    * @throws ClassNotFoundException If the class name is not known or does not lead to a proper bean class. \n+    */\n+    public static Object instantiate(\n+        ClassLoader cl,\n+        String beanName,\n+        BeanContext beanContext)\n+        throws IOException, ClassNotFoundException\n+    {\n+        return instantiate(cl, beanName, beanContext, null);\n+    }\n+\n+   /** Instantiates a bean according to Beans 1.0.\n+    * \n+    * <p>In Beans 1.0 the instantiation scheme is as follows:</p>\n+    * <p>The name should be dot-separated (e.g \"place.for.beans.myBean\") and indicate either a\n+    * serialized object or a class name. In the first case all dots in the name are replaced with\n+    * slashes ('/') and \".ser\" is appended (\"place.for.beans.myBean\" becomes \"place/for/beans/myBean.ser\").\n+    * The bean is then loaded as an application or system resource depending on whether a\n+    * <code>ClassLoader</code> was provided.</p>\n+    * \n+    * <p>If no such resource exists or if it contains no bean the name is interpreted as a class name of\n+    * which an instance is then created.</p>\n+    * \n+    * <p>If a <code>BeanContext</code> instance is available the created bean is added to it.</p>\n+    * \n+    * <p>If the created Bean is an <code>Applet</code> or subclass and an <code>AppletInitializer</code>\n+    * instance is available the applet is initialized and afterwards activated using the initializer. Additionally\n+    * every instantiated <code>Applet</code> bean is initialized using the {@link Applet.init} method.\n+    * Furthermore every applet gets a default <code>AppletStub</code>. The <code>Applet</code>'s\n+    * document base is the location of the \".ser\" file if it was deserialized or the location of its class\n+    * file if it was instantiated.</p>\n+    * \n+    * <p>A <code>ClassNotFoundException</code> is not only thrown when a class name was unknown\n+    * but even when the class has public no-argument constructor\n+    * (<code>IllegalAccessException</code> is wrapped) or an exception is thrown while\n+    * invoking such a constructor (causing exception is wrapped).</p>\n+    * \n+    * @param cl ClassLoader to be used or <code>null</code> for the system classloader.\n+    * @param beanName Name of a serialized bean or class name.\n+    * @param beanContext Context to which the newly created Bean should be added.\n+    * @param initializer The AppletInitializer which is used for initializing <code>Applet</code> beans.\n+    * @return A newly created bean.\n+    * @throws IOException If access of an IO resource failed.\n+    * @throws ClassNotFoundException If the class name is not known or does not lead to a proper bean class. \n+    */\n+   public static Object instantiate(\n+        ClassLoader cl,\n+        String beanName,\n+        BeanContext beanContext,\n+        AppletInitializer initializer)\n+        throws IOException, ClassNotFoundException\n+   {\n+        Object bean = null;\n+        URL beanLocation = null;\n+        URL classLocation = null;\n+\n+        // Converts bean name into a resource name (eg. \"a.b.c\" -> \"a/b/c\").  \n+        String resourceName = beanName.replace('.', '/');\n+\n+        /* Tries to get an input stream of the Bean, reading it as a system resource\n+         * if no ClassLoader is present or as an application resource if a classloader\n+         * is given. \n+         */\n+        beanLocation =\n+            (cl == null)\n+                ? ClassLoader.getSystemResource(resourceName + \".ser\")\n+                : cl.getResource(resourceName + \".ser\");\n+\n+        // Reads the serialized Bean from the returned URL.\n+        if (beanLocation != null)\n+        {\n+            // Deserializes the bean instance.\n+            ObjectInputStream ois =\n+                (cl == null)\n+                    ? new ObjectInputStream(beanLocation.openStream())\n+                    : new ClassLoaderObjectInputStream(\n+                        beanLocation.openStream(),\n+                        cl);\n+\n             bean = ois.readObject();\n-          }\n-      }\n-    else if(cl == null)\n-      {\n-        Class beanClass = Class.forName(beanName);\n-        try\n-          {\n-            bean = beanClass.newInstance();\n-          }\n-        catch(IllegalAccessException E)\n-          {\n-            bean = null;\n-          }\n-        catch(InstantiationException E)\n-          {\n-            bean = null;\n-          }\n-      }\n-    else\n-      {\n-        Class beanClass = cl.loadClass(beanName);\n-        try\n-          {\n-            bean = beanClass.newInstance();\n-          }\n-        catch(IllegalAccessException E)\n-          {\n-            bean = null;\n-          }\n-        catch(InstantiationException E)\n-          {\n-            bean = null;\n-          }\n-      }\n-\n-    if(bean instanceof Applet)\n-      {\n-        Applet a = (Applet)bean;\n-        //a.setAppletContext(???);\n-        //a.setStub(???);\n-        if(serStream == null)\n-          {\n-            a.init();\n-          }\n-      }\n-\n-    return bean;\n-  }\n \n-  /**\n-   * Get the Bean as a different class type.\n-   * This should be used instead of casting to get a new\n-   * type view of a Bean, because in the future there may\n-   * be new types of Bean, even Beans spanning multiple\n-   * Objects.\n-   *\n-   * @param bean the Bean to cast.\n-   * @param newClass the Class to cast it to.\n-   *\n-   * @return the Bean as a new view, or if the operation\n-   *         could not be performed, the Bean itself.\n-   */\n-  public static Object getInstanceOf(Object bean, Class newClass)\n-  {\n-    return bean;\n-  }\n+            /* Implementation note: The result of ObjectInputStream.readObject()\n+            * may have been null at this point (its a valid value to deserialize)\n+            * and we explicitly want to try instantiation in such a case\n+            * (this is important for compatibility).\n+            */\n+        }\n \n-  /**\n-   * Determine whether the Bean can be cast to a different\n-   * class type.\n-   * This should be used instead of instanceof to determine\n-   * a Bean's castability, because in the future there may\n-   * be new types of Bean, even Beans spanning multiple\n-   * Objects.\n-   *\n-   * @param bean the Bean to cast.\n-   * @param newBeanClass the Class to cast it to.\n-   *\n-   * @return whether the Bean can be cast to the class type\n-   *         in question.\n-   */\n-  public static boolean isInstanceOf(Object bean, Class newBeanClass)\n-  {\n-    return newBeanClass.isInstance(bean);\n-  }\n+        // Instantiates the Bean using reflective instantiation if it has not been created yet.\n+        if (bean == null)\n+        {\n+            // Makes sure that the deserialization was NOT done.\n+            beanLocation = null;\n \n-  /**\n-   * Find out whether the GUI is available to use.\n-   * Defaults to true.\n-   *\n-   * @return whether the GUI is available to use.\n-   */\n-  public static boolean isGuiAvailable()\n-  {\n-    return guiAvailable;\n-  }\n+            Class beanClass;\n+            if (cl == null)\n+            {\n+                beanClass = Class.forName(beanName);\n+                classLocation =\n+                    ClassLoader.getSystemResource(resourceName + \".class\");\n+            }\n+            else\n+            {\n+                beanClass = cl.loadClass(beanName);\n+                classLocation = cl.getResource(resourceName + \".class\");\n+            }\n \n-  /**\n-   * Find out whether it is design time.  Design time means\n-   * we are in a RAD tool.\n-   * Defaults to false.\n-   *\n-   * @return whether it is design time.\n-   */\n-  public static boolean isDesignTime()\n-  {\n-    return designTime;\n-  }\n+            // Instantiates and optionally registers the new bean.\n+            try\n+            {\n+                bean = beanClass.newInstance();\n+            }\n+            catch(Exception e) {\n+\t\t/* Wraps all kinds of Exceptions in a ClassNotFoundException (this behavior\n+\t\t * matches with official >= 1.5, this was different for <=1.4)\n+\t\t */\n+\t\tthrow new ClassNotFoundException(null, e);\n+            }\n+        }\n \n-  /**\n-   * Set whether the GUI is available to use.\n-   * @param guiAvailable whether the GUI is available to use.\n-   */\n-  public static void setGuiAvailable(boolean guiAvailable)\n-    throws SecurityException\n-  {\n-    Beans.guiAvailable = guiAvailable;\n-  }\n+        /* Applet beans are treated in the following way:\n+         * - all AppletS get a default AppletStub\n+         * - all AppletS are initialized using the AppletInitializer instance (if it is available)\n+         * - as every other Bean Applets are added to a BeanContext if one is available\n+         * - each instantiated Applet is initialized using Applet.init() (this is not done for deserialized ones)\n+         * - finally AppletS get activated using the AppletInitializerS activate-Method\n+         * \n+         * The order of operations is important for compatibility.    \n+         */\n+        Applet applet = null;\n+        if (bean instanceof Applet)\n+        {\n+            // Makes a second instanceof call unneccessary (instanceof is expensive).\n+            applet = (Applet) bean;\n+\n+            /* The AppletStub's code and document base is set as follows:\n+             * The code base is always the URL from where the class data originated\n+             * (without the package name).\n+             * If the Applet was deserialized the document base is the location of\n+             * the serialized instance (usually the \".ser\" file) otherwise its the URL\n+             * from where the class data originated (usually the absolute directory\n+             * location of the \".class\" file).\n+             */\n+            applet.setStub(\n+                new DummyAppletStub(\n+                    applet\n+                        .getClass()\n+                        .getProtectionDomain()\n+                        .getCodeSource()\n+                        .getLocation(),\n+                    (beanLocation == null) ? classLocation : beanLocation));\n+\n+            // Runs the Applet's initialization using an AppletInitializer.\n+            if (initializer != null)\n+            {\n+                initializer.initialize(applet, beanContext);\n+            }\n+        }\n+\n+        // Adds the new bean to its BeanContext.\n+        if (beanContext != null)\n+        {\n+            beanContext.add(bean);\n+        }\n+\n+        if (applet != null)\n+        {\n+\n+            // Initializes an instantiated (not deserialized) Applet using its own method.\n+            if (beanLocation == null)\n+            {\n+                applet.init();\n+            }\n+\n+            // Runs the Applet's activation using an AppletInitializer.\n+            if (initializer != null)\n+            {\n+                initializer.activate(applet);\n+            }\n+        }\n+\n+        return bean;\n+   }\n+\n+   /**\n+    * Returns the Bean as a different class type.\n+    * This should be used instead of casting to get a new\n+    * type view of a Bean, because in the future there may\n+    * be new types of Bean, even Beans spanning multiple\n+    * Objects.\n+    *\n+    * @param bean the Bean to cast.\n+    * @param newClass the Class to cast it to.\n+    *\n+    * @return the Bean as a new view, or if the operation\n+    *         could not be performed, the Bean itself.\n+    */\n+   public static Object getInstanceOf(Object bean, Class newClass)\n+   {\n+        return bean;\n+   }\n+\n+   /**\n+    * Determines whether the Bean can be cast to a different\n+    * class type.\n+    * This should be used instead of instanceof to determine\n+    * a Bean's castability, because in the future there may\n+    * be new types of Bean, even Beans spanning multiple\n+    * Objects.\n+    *\n+    * @param bean the Bean to cast.\n+    * @param newClass the Class to cast it to.\n+    *\n+    * @return whether the Bean can be cast to the class type\n+    *         in question.\n+    */\n+   public static boolean isInstanceOf(Object bean, Class newBeanClass)\n+   {\n+       return newBeanClass.isInstance(bean);\n+   }\n+\n+   /**\n+    * Returns whether the GUI is available to use.\n+    * <p>Defaults to true.</p>\n+    *\n+    * @return whether the GUI is available to use.\n+    */\n+   public static boolean isGuiAvailable()\n+   {\n+       return guiAvailable;\n+   }\n+\n+   /**\n+    * Returns whether it is design time.  Design time means\n+    * we are in a RAD tool.\n+    * <p>Defaults to false.</p>\n+    *\n+    * @return whether it is design time.\n+    */\n+   public static boolean isDesignTime()\n+   {\n+       return designTime;\n+   }\n+\n+   /**\n+    * Sets whether the GUI is available to use.\n+    * \n+    * @param guiAvailable whether the GUI is available to use.\n+    */\n+   public static void setGuiAvailable(boolean guiAvailable)\n+       throws SecurityException\n+   {\n+        Beans.guiAvailable = guiAvailable;\n+   }\n+\n+   /**\n+    * Sets whether it is design time.  Design time means we\n+    * are in a RAD tool.\n+    *\n+    * @param designTime whether it is design time.\n+    */\n+   public static void setDesignTime(boolean designTime)\n+       throws SecurityException\n+   {\n+       Beans.designTime = designTime;\n+   }\n \n-  /**\n-   * Set whether it is design time.  Design time means we\n-   * are in a RAD tool.\n-   *\n-   * @param designTime whether it is design time.\n-   */\n-  public static void setDesignTime(boolean designTime)\n-    throws SecurityException\n-  {\n-    Beans.designTime = designTime;\n-  }\n }"}, {"sha": "877033522483b5284f30d7c7e22ec01187982e57", "filename": "libjava/java/beans/XMLDecoder.java", "status": "added", "additions": 307, "deletions": 0, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fjava%2Fbeans%2FXMLDecoder.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46/libjava%2Fjava%2Fbeans%2FXMLDecoder.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fbeans%2FXMLDecoder.java?ref=6ca84a804a7378e79bbb1d5a6d646ead7e6cfa46", "patch": "@@ -0,0 +1,307 @@\n+/* java.beans.XMLDecoder --\n+   Copyright (C) 2004, 2005  Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package java.beans;\n+\n+import gnu.java.beans.decoder.DefaultExceptionListener;\n+import gnu.java.beans.decoder.PersistenceParser;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+/**\n+ * The XMLDecoder reads XML data that is structured according to\n+ * <a href=\"http://java.sun.com/products/jfc/tsc/articles/persistence3/javabeans.dtd\">this</a> DTD\n+ * and creates objects according to the content. Usually such data is generated using the\n+ * {@link XMLEncoder} class.\n+ * <p>\n+ * An example XML document might look like this:\n+ * <code>\n+ * &lt;java&gt;\n+ * \t&lt;string&gt;Hello World&lt;/string&gt;\n+ * \t&lt;int&gt;200&lt;/int&gt;\n+ * &lt;/java&gt;\n+ * </code>\n+ * <p>To read the <code>String</code> and the <code>Integer</code> instance the following can be used (assume\n+ * the XML data can be obtained from the InputStream):</p>\n+ * <code>\n+ * XMLDecoder decoder = new XMLDecoder(inputStreamContainingXMLData);\n+ * String message = (String) decoder.readObject();\n+ * Integer number = (Integer) decoder.readObject();\n+ * </code>\n+ * <p>Besides this basic functionality the <code>XMLDecoder</code> has some more features that might come\n+ * handy in certain situations:</p>\n+ * <p>An owner object can be set using the <code>setOwner</code> method which can then be accessed when\n+ * decoding. This feature is only useful if the XML data is aware of the owner object. Such data may\n+ * look like this (assume that the owner object is a JFrame instance):</p>\n+ * <code> \n+ * &lt;java&gt;\n+ * \t&lt;void method=\"getOwner\"&gt;\n+ * \t\t&lt;void method=\"setVisible\"&gt;\n+ * \t\t\t&lt;boolean&gt;true&lt;boolean&gt;\n+ * \t\t&lt;/void&gt;\n+ *  &lt;/void&gt;\n+ * &lt;/java&gt;\n+ * </code>\n+ * This accesses the <code>JFrame</code> and makes it visible using the <code>setVisible</code> method.\n+ * <p>Please note that changing the owner <b>after</b> the having read the first object has no effect,\n+ * because all object have been decoded then.</p>\n+ * <p>If the <code>XMLDecoder</code> is created with no {@link ExceptionListener} instance a default one\n+ * is used that prints an error message to <code>System.err</code> whenever a recoverable exception\n+ * is thrown. Recovarable exceptions occur when the XML data cannot be interpreted correctly (e.g\n+ * unknown classes or methods, invocation on null, ...). In general be very careful when the\n+ * <code>XMLDecoder</code> provoked such exceptions because the resulting object(s) may be in an\n+ * undesirable state.</p>\n+ * <p>Note that changing the ExceptionListener instance after <code>readObject</code> has been called\n+ * once has no effect because the decoding is completed then.</p>\n+ * <p>At last one can provide a specific <code>ClassLoader</code> which is then used when <code>Class</code>\n+ * objects are accessed. See {@link java.lang.Class#forName(String, boolean, ClassLoader)} for details\n+ * on this.</p>\n+ * <p>Note: If the <code>InputStream</code> instance given to any of the constructors is <code>null</code>\n+ * the resulting <code>XMLDecoder</code> will be silently (without any exception) useless. Each call\n+ * to <code>readObject</code> will return <code>null</code> and never throws an\n+ * <code>ArrayIndexOutOfBoundsException</code>.</p>\n+ *  \n+ * @author Robert Schuster\n+ * @since 1.4\n+ * @status updated to 1.5\n+ */\n+public class XMLDecoder\n+{\n+\tprivate Object owner;\n+\n+\tprivate ExceptionListener exceptionListener;\n+\n+\tprivate InputStream inputStream;\n+\n+\tprivate boolean isStreamClosed;\n+\n+\tprivate ClassLoader classLoader;\n+\n+\tprivate Iterator iterator;\n+\n+\t/** Creates a XMLDecoder instance that parses the XML data of the given input stream.\n+\t * Using this constructor no special ClassLoader, a default ExceptionListener\n+\t * and no owner object is used.\n+\t * \n+\t * @param in InputStream to read XML data from.\n+\t */\n+\tpublic XMLDecoder(InputStream in)\n+\t{\n+\t\tthis(in, null);\n+\t}\n+\n+\t/** Creates a XMLDecoder instance that parses the XML data of the given input stream.\n+\t * Using this constructor no special ClassLoader and a default ExceptionListener\n+\t * is used.\n+\t * \n+\t * @param in InputStream to read XML data from.\n+\t * @param owner Owner object which can be accessed and modified while parsing.\n+\t */\n+\tpublic XMLDecoder(InputStream in, Object owner)\n+\t{\n+\t\tthis(in, owner, null);\n+\t}\n+\n+\t/** Creates a XMLDecoder instance that parses the XML data of the given input stream.\n+\t * If the ExceptionListener argument is null a default implementation is used.\n+\t * \n+\t * @param in InputStream to read XML data from.\n+\t * @param owner Owner object which can be accessed and modified while parsing.\n+\t * @param exceptionListener ExceptionListener instance to which exception notifications are send.\n+\t */\n+\tpublic XMLDecoder(\n+\t\tInputStream in,\n+\t\tObject owner,\n+\t\tExceptionListener exceptionListener)\n+\t{\n+\t\tthis(\n+\t\t\tin,\n+\t\t\towner,\n+\t\t\texceptionListener,\n+\t\t\tThread.currentThread().getContextClassLoader());\n+\t}\n+\n+\t/** Creates a XMLDecoder instance that parses the XML data of the given input stream.\n+\t * If the ExceptionListener argument is null a default implementation is used.\n+\t * \n+\t * @param in InputStream to read XML data from.\n+\t * @param owner Owner object which can be accessed and modified while parsing.\n+\t * @param exceptionListener ExceptionListener instance to which exception notifications are send.\n+\t * @param cl ClassLoader instance that is used for calls to <code>Class.forName(String, boolean, ClassLoader)</code>\n+\t * @since 1.5\n+\t */\n+\tpublic XMLDecoder(\n+\t\tInputStream in,\n+\t\tObject owner,\n+\t\tExceptionListener listener,\n+\t\tClassLoader cl)\n+\t{\n+\t\t// initially here was a check for the validity of the InputStream argument but some\n+\t\t// great engineers decided that this API should silently discard this and behave rather\n+\t\t// odd: readObject will always return null ...\n+\t\tinputStream = in;\n+\n+\t\tsetExceptionListener(listener);\n+\n+\t\t// validity of this object is checked in Class.forName() and therefore may be null\n+\t\tclassLoader = cl;\n+\n+\t\tthis.owner = owner;\n+\t}\n+\n+\t/** Closes the stream associated with this decoder. This should be done after having read all \n+\t * decoded objects.\n+\t * <p>See the description of the {@link #readObject()} for the effect caused by <code>close</code>.</p> \n+\t */\n+\tpublic void close()\n+\t{\n+\t\tif (isStreamClosed)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tinputStream.close();\n+\t\t\tisStreamClosed = true;\n+\t\t}\n+\t\tcatch (IOException e)\n+\t\t{\n+\t\t\t// bad style forced by original API design ... \n+\t\t}\n+\t}\n+\n+\t/** Returns the ExceptionListener instance associated with this decoder.\n+\t * <p>See the description of {@link XMLDecoder} class for more information on the ExceptionListener.</p>\n+\t * \n+\t * @return Current ExceptionListener of the decoder.\n+\t */\n+\tpublic ExceptionListener getExceptionListener()\n+\t{\n+\t\treturn exceptionListener;\n+\t}\n+\n+\t/** Returns the owner object of the decoder. This method is usually called\n+\t * from within the parsed XML data.\n+\t * <p>See the description of {@link XMLDecoder} class for more information on the owner object.</p>\n+\t * \n+\t * @return The owner object of this decoder.\n+\t */\n+\tpublic Object getOwner()\n+\t{\n+\t\treturn owner;\n+\t}\n+\n+\t/** Returns the next available decoded object.\n+\t * <p>Note that the actual decoding takes place when the method is called for the first time.</p>\n+\t * <p>If the <code>close</code> method was already called a <code>NoSuchElementException</code>\n+\t * is thrown.</p>\n+\t * <p>If the InputStream instance used in the constructors was <code>null</code> this method\n+\t * will always return <code>null</code> itself.</p>\n+\t * \n+\t * @return The next object in a sequence decoded from XML data.\n+\t * @throws ArrayIndexOutOfBoundsException When no more objects are available.\n+\t */\n+\tpublic Object readObject() throws ArrayIndexOutOfBoundsException\n+\t{\n+\t\t// note: the RI does it this way ...\n+\t\tif(inputStream == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\t// note: the original API documentation says nothing on what to do\n+\t\t// when the stream was closed before readObject is called but it actually\n+\t\t// throws a NoSuchElementException - this behaviour is imitated here\n+\t\tif (isStreamClosed)\n+\t\t{\n+\t\t\tthrow new NoSuchElementException(\"Cannot read any objects - XMLDecoder was already closed.\");\n+\t\t}\n+\n+\t\t// creates the PersistenceParser (doing the parsing and decoding) and returns its\n+\t\t// Iterator on first invocation\n+\t\tif (iterator == null)\n+\t\t{\n+\t\t\titerator =\n+\t\t\t\tnew PersistenceParser(\n+\t\t\t\t\tinputStream,\n+\t\t\t\t\texceptionListener,\n+\t\t\t\t\tclassLoader,\n+\t\t\t\t\tthis)\n+\t\t\t\t\t.iterator();\n+\t\t}\n+\n+\t\t// note: done according to the official documentation\n+\t\tif (!iterator.hasNext())\n+\t\t{\n+\t\t\tthrow new ArrayIndexOutOfBoundsException(\"No more objects available from this XMLDecoder.\");\n+\t\t}\n+\n+\t\t// returns just the next object if there was no problem\n+\t\treturn iterator.next();\n+\t}\n+\n+\t/** Sets the ExceptionListener instance to which notifications of exceptions are send\n+\t * while parsing the XML data.\n+\t * <p>See the description of {@link XMLDecoder} class for more information on the ExceptionListener.</p>\n+\t *\n+\t * @param listener\n+\t */\n+\tpublic void setExceptionListener(ExceptionListener listener)\n+\t{\n+\t\t// uses a default implementation when null \n+\t\tif (listener == null)\n+\t\t{\n+\t\t\tlistener = new DefaultExceptionListener();\n+\t\t}\n+\t\texceptionListener = listener;\n+\t}\n+\n+\t/** Sets the owner object which can be accessed from the parsed XML data.\n+\t * <p>See the description of {@link XMLDecoder} class for more information on the owner object.</p>\n+\t * \n+\t * @param newOwner\n+\t */\n+\tpublic void setOwner(Object newOwner)\n+\t{\n+\t\towner = newOwner;\n+\t}\n+\n+}"}]}