{"sha": "77a205be4eac302ab5abda34f181fd11cc64cda8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzdhMjA1YmU0ZWFjMzAyYWI1YWJkYTM0ZjE4MWZkMTFjYzY0Y2RhOA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-04-29T10:23:15Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-04-29T10:23:15Z"}, "message": "[AArch64] Convert NEON frint implementations to use builtins.\n\ngcc/\n\t* config/aarch64/arm_neon.h (vrndq<a,m,n,p>_f<32, 64>): Rename to...\n\t(vrnd<a,m,n,p>q_f<32, 64>): ...This, implement using builtin.\n\t(vrnd<a,m,n,p>_f32): Implement using builtins.\n\t(vrnd<i,x><q>_f<32, 64>): New.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/vect-vrnd.c: New.\n\nFrom-SVN: r198396", "tree": {"sha": "941c0b682c33dfa420669ad358849374d1614e3a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/941c0b682c33dfa420669ad358849374d1614e3a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/77a205be4eac302ab5abda34f181fd11cc64cda8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a205be4eac302ab5abda34f181fd11cc64cda8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77a205be4eac302ab5abda34f181fd11cc64cda8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77a205be4eac302ab5abda34f181fd11cc64cda8/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0659ce6ffb54bcdc6232b6d4ba6b580cbef427c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0659ce6ffb54bcdc6232b6d4ba6b580cbef427c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0659ce6ffb54bcdc6232b6d4ba6b580cbef427c9"}], "stats": {"total": 432, "additions": 267, "deletions": 165}, "files": [{"sha": "a46324a2671b9b7abf73da55c847e154dfabe50d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=77a205be4eac302ab5abda34f181fd11cc64cda8", "patch": "@@ -1,3 +1,10 @@\n+2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vrndq<a,m,n,p>_f<32, 64>): Rename to...\n+\t(vrnd<a,m,n,p>q_f<32, 64>): ...This, implement using builtin.\n+\t(vrnd<a,m,n,p>_f32): Implement using builtins.\n+\t(vrnd<i,x><q>_f<32, 64>): New.\n+\n 2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "c868a4623b9371804461a14dcc465b10a29060e8", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 139, "deletions": 165, "changes": 304, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=77a205be4eac302ab5abda34f181fd11cc64cda8", "patch": "@@ -14941,171 +14941,6 @@ vrev64q_u32 (uint32x4_t a)\n   return result;\n }\n \n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrnd_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frintz %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrnda_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frinta %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrndm_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frintm %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrndn_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frintn %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n-vrndp_f32 (float32x2_t a)\n-{\n-  float32x2_t result;\n-  __asm__ (\"frintp %0.2s,%1.2s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrndq_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frintz %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrndq_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frintz %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrndqa_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frinta %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrndqa_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frinta %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrndqm_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frintm %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrndqm_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frintm %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrndqn_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frintn %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrndqn_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frintn %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n-vrndqp_f32 (float32x4_t a)\n-{\n-  float32x4_t result;\n-  __asm__ (\"frintp %0.4s,%1.4s\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n-vrndqp_f64 (float64x2_t a)\n-{\n-  float64x2_t result;\n-  __asm__ (\"frintp %0.2d,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n #define vrshrn_high_n_s16(a, b, c)                                      \\\n   __extension__                                                         \\\n     ({                                                                  \\\n@@ -23069,6 +22904,145 @@ vrecpxd_f64 (float64_t __a)\n   return __builtin_aarch64_frecpxdf (__a);\n }\n \n+/* vrnd  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrnd_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_btruncv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_btruncv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_btruncv2df (__a);\n+}\n+\n+/* vrnda  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrnda_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_roundv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndaq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_roundv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndaq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_roundv2df (__a);\n+}\n+\n+/* vrndi  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndi_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_nearbyintv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndiq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_nearbyintv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndiq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_nearbyintv2df (__a);\n+}\n+\n+/* vrndm  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndm_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_floorv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndmq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_floorv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndmq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_floorv2df (__a);\n+}\n+\n+/* vrndn  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndn_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_frintnv2sf (__a);\n+}\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndnq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_frintnv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndnq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_frintnv2df (__a);\n+}\n+\n+/* vrndp  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndp_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_ceilv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndpq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_ceilv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndpq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_ceilv2df (__a);\n+}\n+\n+/* vrndx  */\n+\n+__extension__ static __inline float32x2_t __attribute__ ((__always_inline__))\n+vrndx_f32 (float32x2_t __a)\n+{\n+  return __builtin_aarch64_rintv2sf (__a);\n+}\n+\n+__extension__ static __inline float32x4_t __attribute__ ((__always_inline__))\n+vrndxq_f32 (float32x4_t __a)\n+{\n+  return __builtin_aarch64_rintv4sf (__a);\n+}\n+\n+__extension__ static __inline float64x2_t __attribute__ ((__always_inline__))\n+vrndxq_f64 (float64x2_t __a)\n+{\n+  return __builtin_aarch64_rintv2df (__a);\n+}\n+\n /* vrshl */\n \n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))"}, {"sha": "898bfdf15b48511eb6bbab91cc87f9d6bbbdbfbd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=77a205be4eac302ab5abda34f181fd11cc64cda8", "patch": "@@ -1,3 +1,7 @@\n+2013-04-29  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/vect-vrnd.c: New.\n+\n 2013-04-29  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/57081"}, {"sha": "aa3fd9b401a866453b8d63548ce577fbd7a5925c", "filename": "gcc/testsuite/gcc.target/aarch64/vect-vrnd.c", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vrnd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/77a205be4eac302ab5abda34f181fd11cc64cda8/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vrnd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect-vrnd.c?ref=77a205be4eac302ab5abda34f181fd11cc64cda8", "patch": "@@ -0,0 +1,117 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O3 --save-temps\" } */\n+\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+extern float fabsf (float);\n+extern double fabs (double);\n+\n+extern double trunc (double);\n+extern double round (double);\n+extern double nearbyint (double);\n+extern double floor (double);\n+extern double ceil (double);\n+extern double rint (double);\n+\n+extern float truncf (float);\n+extern float roundf (float);\n+extern float nearbyintf (float);\n+extern float floorf (float);\n+extern float ceilf (float);\n+extern float rintf (float);\n+\n+#define NUM_TESTS 8\n+#define DELTA 0.000001\n+\n+float input_f32[] = {0.1f, -0.1f, 0.4f, 10.3f,\n+\t\t     200.0f, -800.0f, -13.0f, -0.5f};\n+double input_f64[] = {0.1, -0.1, 0.4, 10.3,\n+\t\t      200.0, -800.0, -13.0, -0.5};\n+\n+#define TEST(SUFFIX, Q, WIDTH, LANES, C_FN, F)\t\t     \t\t\\\n+int\t\t\t\t\t\t\t\t\t\\\n+test_vrnd##SUFFIX##_float##WIDTH##x##LANES##_t (void)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  int ret = 1;\t\t\t\t\t\t\t\t\\\n+  int i = 0;\t\t\t\t\t\t\t\t\\\n+  int nlanes = LANES;\t\t\t\t\t\t\t\\\n+  float##WIDTH##_t expected_out[NUM_TESTS];\t\t\t\t\\\n+  float##WIDTH##_t actual_out[NUM_TESTS];\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      expected_out[i] = C_FN##F (input_f##WIDTH[i]);\t\t\t\\\n+      /* Don't vectorize this.  */\t\t\t\t\t\\\n+      asm volatile (\"\" : : : \"memory\");\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  /* Prevent the compiler from noticing these two loops do the same\t\\\n+     thing and optimizing away the comparison.  */\t\t\t\\\n+  asm volatile (\"\" : : : \"memory\");\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i+=nlanes)\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      float##WIDTH##x##LANES##_t out =\t\t\t\t\t\\\n+\tvrnd##SUFFIX##Q##_f##WIDTH\t\t\t\t\t\\\n+\t\t(vld1##Q##_f##WIDTH (input_f##WIDTH + i));\t\t\\\n+      vst1##Q##_f##WIDTH (actual_out + i, out);\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  for (i = 0; i < NUM_TESTS; i++)\t\t\t\t\t\\\n+    ret &= fabs##F (expected_out[i] - actual_out[i]) < DELTA;\t\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  return ret;\t\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\t\\\n+\n+\n+#define BUILD_VARIANTS(SUFFIX, C_FN)\t\\\n+TEST (SUFFIX,  , 32, 2, C_FN, f)\t\\\n+TEST (SUFFIX, q, 32, 4, C_FN, f)\t\\\n+TEST (SUFFIX, q, 64, 2, C_FN,  )\t\\\n+\n+BUILD_VARIANTS ( , trunc)\n+/* { dg-final { scan-assembler \"frintz\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frintz\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frintz\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+BUILD_VARIANTS (a, round)\n+/* { dg-final { scan-assembler \"frinta\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frinta\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frinta\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+BUILD_VARIANTS (i, nearbyint)\n+/* { dg-final { scan-assembler \"frinti\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frinti\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frinti\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+BUILD_VARIANTS (m, floor)\n+/* { dg-final { scan-assembler \"frintm\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frintm\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frintm\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+BUILD_VARIANTS (p, ceil)\n+/* { dg-final { scan-assembler \"frintp\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frintp\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frintp\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+BUILD_VARIANTS (x, rint)\n+/* { dg-final { scan-assembler \"frintx\\\\tv\\[0-9\\]+\\.2s, v\\[0-9\\]+\\.2s\" } } */\n+/* { dg-final { scan-assembler \"frintx\\\\tv\\[0-9\\]+\\.4s, v\\[0-9\\]+\\.4s\" } } */\n+/* { dg-final { scan-assembler \"frintx\\\\tv\\[0-9\\]+\\.2d, v\\[0-9\\]+\\.2d\" } } */\n+\n+#undef TEST\n+#define TEST(SUFFIX, Q, WIDTH, LANES, C_FN, F)\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  if (!test_vrnd##SUFFIX##_float##WIDTH##x##LANES##_t ())\t\\\n+    abort ();\t\t\t\t\t\t\t\\\n+}\n+\n+int\n+main (int argc, char **argv)\n+{\n+  BUILD_VARIANTS ( , trunc)\n+  BUILD_VARIANTS (a, round)\n+  BUILD_VARIANTS (i, nearbyint)\n+  BUILD_VARIANTS (m, floor)\n+  BUILD_VARIANTS (p, ceil)\n+  BUILD_VARIANTS (x, rint)\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-saved-temps } } */"}]}