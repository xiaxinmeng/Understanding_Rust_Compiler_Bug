{"sha": "56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzMTQ3ODNjMzNiNThhMDNmN2VlZTlkNDhiNGEyNjI4ZWU2ZTFmMA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2015-01-16T00:43:24Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2015-01-16T00:43:24Z"}, "message": "re PR target/59710 (Nios2: Missing gprel optimization)\n\n2015-01-15  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR target/59710\n\n\tgcc/\n\t* doc/invoke.texi (Option Summary): Document new Nios II\n\t-mgpopt= syntax.\n\t(Nios II Options): Likewise.\n\t* config/nios2/nios2.opt: Add -mgpopt= option support.\n\tModify existing -mgpopt and -mno-gpopt options to be aliases.\n\t* config/nios2/nios2-opts.h (enum nios2_gpopt_type): New.\n\t* config/nios2/nios2.c (nios2_option_override): Adjust\n\t-mgpopt defaulting.\n\t(nios2_in_small_data_p): Return true for explicit small data\n\tsections even with -G0.\n\t(nios2_symbol_ref_in_small_data_p): Adjust to handle new -mgpopt=\n\toption choices.\n\n\tgcc/testsuite/\n\t* gcc.target/nios2/gpopt-all.c: New test case.\n\t* gcc.target/nios2/gpopt-local.c: New test case.\n\t* gcc.target/nios2/gpopt-global.c: New test case.\n\t* gcc.target/nios2/gpopt-data.c: New test case.\n\t* gcc.target/nios2/gpopt-none.c: New test case.\n\nFrom-SVN: r219700", "tree": {"sha": "b1d96161869c324829935c3225c92cdf829068c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1d96161869c324829935c3225c92cdf829068c9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "23470a893c490e9bb8ed134d1c08102c8c1248c9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23470a893c490e9bb8ed134d1c08102c8c1248c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23470a893c490e9bb8ed134d1c08102c8c1248c9"}], "stats": {"total": 390, "additions": 366, "deletions": 24}, "files": [{"sha": "62735a7a77e6d3f1a898b4427067b4f38ac7257e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -1,3 +1,19 @@\n+2015-01-15  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR target/59710\n+\t* doc/invoke.texi (Option Summary): Document new Nios II\n+\t-mgpopt= syntax.\n+\t(Nios II Options): Likewise.\n+\t* config/nios2/nios2.opt: Add -mgpopt= option support.\n+\tModify existing -mgpopt and -mno-gpopt options to be aliases.\n+\t* config/nios2/nios2-opts.h (enum nios2_gpopt_type): New.\n+\t* config/nios2/nios2.c (nios2_option_override): Adjust\n+\t-mgpopt defaulting.\n+\t(nios2_in_small_data_p): Return true for explicit small data\n+\tsections even with -G0.\n+\t(nios2_symbol_ref_in_small_data_p): Adjust to handle new -mgpopt=\n+\toption choices.\n+\n 2015-01-15  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/64612"}, {"sha": "91abdf6c7d951a913d4aaf6f94aa64aedcdb1a2c", "filename": "gcc/config/nios2/nios2-opts.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2-opts.h?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -20,6 +20,18 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef NIOS2_OPTS_H\n #define NIOS2_OPTS_H\n \n+/* Enumerate the possible -mgpopt choices.  */\n+enum nios2_gpopt_type\n+{\n+  gpopt_unspecified = -1,\n+  gpopt_none,\n+  gpopt_local,\n+  gpopt_global,\n+  gpopt_data,\n+  gpopt_all\n+};\n+\n+\n /* Enumeration of all FPU insn codes.  */\n #define N2FPU_ALL_CODES\t\t\t\t\t\t\t\\\n   N2FPU_CODE(fadds) N2FPU_CODE(fsubs) N2FPU_CODE(fmuls) N2FPU_CODE(fdivs) \\"}, {"sha": "502314942ccd18d3b42d9371db4e2037ce0f8cd5", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 64, "deletions": 16, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -1038,9 +1038,14 @@ nios2_option_override (void)\n     = (global_options_set.x_g_switch_value\n        ? g_switch_value : NIOS2_DEFAULT_GVALUE);\n \n-  /* Default to -mgpopt unless -fpic or -fPIC.  */\n-  if (TARGET_GPOPT == -1 && flag_pic)\n-    TARGET_GPOPT = 0;\n+  if (nios2_gpopt_option == gpopt_unspecified)\n+    {\n+      /* Default to -mgpopt unless -fpic or -fPIC.  */\n+      if (flag_pic)\n+\tnios2_gpopt_option = gpopt_none;\n+      else\n+\tnios2_gpopt_option = gpopt_local;\n+    }\n \n   /* If we don't have mul, we don't have mulx either!  */\n   if (!TARGET_HAS_MUL && TARGET_HAS_MULX)\n@@ -1657,8 +1662,7 @@ nios2_in_small_data_p (const_tree exp)\n       if (DECL_SECTION_NAME (exp))\n \t{\n \t  const char *section = DECL_SECTION_NAME (exp);\n-\t  if (nios2_section_threshold > 0\n-\t      && nios2_small_section_name_p (section))\n+\t  if (nios2_small_section_name_p (section))\n \t    return true;\n \t}\n       else\n@@ -1681,19 +1685,63 @@ nios2_in_small_data_p (const_tree exp)\n bool\n nios2_symbol_ref_in_small_data_p (rtx sym)\n {\n+  tree decl;\n+\n   gcc_assert (GET_CODE (sym) == SYMBOL_REF);\n-  return\n-    (TARGET_GPOPT\n-     /* GP-relative access cannot be used for externally defined symbols,\n-\tbecause the compilation unit that defines the symbol may place it\n-\tin a section that cannot be reached from GP.  */\n-     && !SYMBOL_REF_EXTERNAL_P (sym)\n-     /* True if a symbol is both small and not weak.  */\n-     && SYMBOL_REF_SMALL_P (sym)\n-     && !(SYMBOL_REF_DECL (sym) && DECL_WEAK (SYMBOL_REF_DECL (sym)))\n-     /* TLS variables are not accessed through the GP.  */\n-     && SYMBOL_REF_TLS_MODEL (sym) == 0);\n+  decl = SYMBOL_REF_DECL (sym);\n \n+  /* TLS variables are not accessed through the GP.  */\n+  if (SYMBOL_REF_TLS_MODEL (sym) != 0)\n+    return false;\n+\n+  /* If the user has explicitly placed the symbol in a small data section\n+     via an attribute, generate gp-relative addressing even if the symbol\n+     is external, weak, or larger than we'd automatically put in the\n+     small data section.  OTOH, if the symbol is located in some\n+     non-small-data section, we can't use gp-relative accesses on it\n+     unless the user has requested gpopt_data or gpopt_all.  */\n+\n+  switch (nios2_gpopt_option)\n+    {\n+    case gpopt_none:\n+      /* Don't generate a gp-relative addressing mode if that's been\n+\t disabled.  */\n+      return false;\n+\n+    case gpopt_local:\n+      /* Use GP-relative addressing for small data symbols that are\n+\t not external or weak, plus any symbols that have explicitly\n+\t been placed in a small data section.  */\n+      if (decl && DECL_SECTION_NAME (decl))\n+\treturn nios2_small_section_name_p (DECL_SECTION_NAME (decl));\n+      return (SYMBOL_REF_SMALL_P (sym)\n+\t      && !SYMBOL_REF_EXTERNAL_P (sym)\n+\t      && !(decl && DECL_WEAK (decl)));\n+\n+    case gpopt_global:\n+      /* Use GP-relative addressing for small data symbols, even if\n+\t they are external or weak.  Note that SYMBOL_REF_SMALL_P\n+         is also true of symbols that have explicitly been placed\n+         in a small data section.  */\n+      return SYMBOL_REF_SMALL_P (sym);\n+\n+    case gpopt_data:\n+      /* Use GP-relative addressing for all data symbols regardless\n+\t of the object size, but not for code symbols.  This option\n+\t is equivalent to the user asserting that the entire data\n+\t section is accessible from the GP.  */\n+      return !SYMBOL_REF_FUNCTION_P (sym);\n+\n+    case gpopt_all:\n+      /* Use GP-relative addressing for everything, including code.\n+\t Effectively, the user has asserted that the entire program\n+\t fits within the 64K range of the GP offset.  */\n+      return true;\n+\n+    default:\n+      /* We shouldn't get here.  */\n+      return false;\n+    }\n }\n \n /* Implement TARGET_SECTION_TYPE_FLAGS.  */"}, {"sha": "071606387df9094d5c0536a49bcbf77defb9c51e", "filename": "gcc/config/nios2/nios2.opt", "status": "modified", "additions": 29, "deletions": 2, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fconfig%2Fnios2%2Fnios2.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.opt?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -58,9 +58,36 @@ mcache-volatile\n Target Report RejectNegative Undocumented InverseMask(BYPASS_CACHE_VOLATILE)\n Volatile memory accesses do not use I/O load/store instructions\n \n+mgpopt=\n+Target RejectNegative Joined Enum(nios2_gpopt_type) Var(nios2_gpopt_option) Init(gpopt_unspecified)\n+Enable/disable GP-relative addressing.\n+\n+Enum\n+Name(nios2_gpopt_type) Type(enum nios2_gpopt_type)\n+Valid options for GP-relative addressing (for -mgpopt):\n+\n+EnumValue\n+Enum(nios2_gpopt_type) String(none) Value(gpopt_none)\n+\n+EnumValue\n+Enum(nios2_gpopt_type) String(local) Value(gpopt_local)\n+\n+EnumValue\n+Enum(nios2_gpopt_type) String(global) Value(gpopt_global)\n+\n+EnumValue\n+Enum(nios2_gpopt_type) String(data) Value(gpopt_data)\n+\n+EnumValue\n+Enum(nios2_gpopt_type) String(all) Value(gpopt_all)\n+\n mgpopt\n-Target Report Var(TARGET_GPOPT) Init(-1)\n-Use GP-relative addressing to access small data\n+Target Report RejectNegative Var(nios2_gpopt_option, gpopt_local)\n+Equivalent to -mgpopt=local.\n+\n+mno-gpopt\n+Target Report RejectNegative Var(nios2_gpopt_option, gpopt_none)\n+Equivalent to -mgpopt=none.\n \n meb\n Target Report RejectNegative Mask(BIG_ENDIAN)"}, {"sha": "12368e8e04a3bcc1b0804e0439de728568f62929", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 46, "deletions": 6, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -869,7 +869,8 @@ Objective-C and Objective-C++ Dialects}.\n -mex9 -mctor-dtor -mrelax}\n \n @emph{Nios II Options}\n-@gccoptlist{-G @var{num} -mgpopt -mno-gpopt -mel -meb @gol\n+@gccoptlist{-G @var{num} -mgpopt=@var{option} -mgpopt -mno-gpopt @gol\n+-mel -meb @gol\n -mno-bypass-cache -mbypass-cache @gol\n -mno-cache-volatile -mcache-volatile @gol\n -mno-fast-sw-div -mfast-sw-div @gol\n@@ -19214,15 +19215,54 @@ Put global and static objects less than or equal to @var{num} bytes\n into the small data or BSS sections instead of the normal data or BSS\n sections.  The default value of @var{num} is 8.\n \n+@item -mgpopt=@var{option}\n @item -mgpopt\n @itemx -mno-gpopt\n @opindex mgpopt\n @opindex mno-gpopt\n-Generate (do not generate) GP-relative accesses for objects in the\n-small data or BSS sections.  The default is @option{-mgpopt} except\n-when @option{-fpic} or @option{-fPIC} is specified to generate\n-position-independent code.  Note that the Nios II ABI does not permit\n-GP-relative accesses from shared libraries.\n+Generate (do not generate) GP-relative accesses.  The following \n+@var{option} names are recognized:\n+\n+@table @samp\n+\n+@item none\n+Do not generate GP-relative accesses.\n+\n+@item local\n+Generate GP-relative accesses for small data objects that are not \n+external or weak.  Also use GP-relative addressing for objects that\n+have been explicitly placed in a small data section via a @code{section}\n+attribute.\n+\n+@item global\n+As for @samp{local}, but also generate GP-relative accesses for\n+small data objects that are external or weak.  If you use this option,\n+you must ensure that all parts of your program (including libraries) are\n+compiled with the same @option{-G} setting.\n+\n+@item data\n+Generate GP-relative accesses for all data objects in the program.  If you\n+use this option, the entire data and BSS segments\n+of your program must fit in 64K of memory and you must use an appropriate\n+linker script to allocate them within the addressible range of the\n+global pointer.\n+\n+@item all\n+Generate GP-relative addresses for function pointers as well as data\n+pointers.  If you use this option, the entire text, data, and BSS segments\n+of your program must fit in 64K of memory and you must use an appropriate\n+linker script to allocate them within the addressible range of the\n+global pointer.\n+\n+@end table\n+\n+@option{-mgpopt} is equivalent to @option{-mgpopt=local}, and\n+@option{-mno-gpopt} is equivalent to @option{-mgpopt=none}.\n+\n+The default is @option{-mgpopt} except when @option{-fpic} or\n+@option{-fPIC} is specified to generate position-independent code.\n+Note that the Nios II ABI does not permit GP-relative accesses from\n+shared libraries.\n \n You may need to specify @option{-mno-gpopt} explicitly when building\n programs that include large amounts of small data, including large"}, {"sha": "1ea322b0ccee088a83894e31123f88e04c1daec3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -1,3 +1,12 @@\n+2015-01-15  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR target/59710\n+\t* gcc.target/nios2/gpopt-all.c: New test case.\n+\t* gcc.target/nios2/gpopt-local.c: New test case.\n+\t* gcc.target/nios2/gpopt-global.c: New test case.\n+\t* gcc.target/nios2/gpopt-data.c: New test case.\n+\t* gcc.target/nios2/gpopt-none.c: New test case.\n+\n 2015-01-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/ubsan/vptr-1.C: New test."}, {"sha": "1ea4909415398469723d4e4e7094d30a061afa68", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-all.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-all.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-all.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-all.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=all\" } */\n+\n+extern int a __attribute__ ((section (\".sdata\")));\n+static volatile int b __attribute__ ((section (\".sdata\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler \"%gprel\\\\(a\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(b\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(foo\\\\)\" } } */"}, {"sha": "dba930f03a097b266e81a5da89e61da702237fac", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-data.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-data.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-data.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-data.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=data\" } */\n+\n+extern int a __attribute__ ((section (\".sdata\")));\n+static volatile int b __attribute__ ((section (\".sdata\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler \"%gprel\\\\(a\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(b\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(foo\\\\)\" } } */"}, {"sha": "1bb608efa7f00b66df5b446bf2cfbb16adf48e8a", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-global.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-global.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-global.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-global.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=global\" } */\n+\n+extern int a __attribute__ ((section (\".sdata\")));\n+static volatile int b __attribute__ ((section (\".sdata\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler \"%gprel\\\\(a\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(foo\\\\)\" } } */"}, {"sha": "cf1174634aaf291a53b208632ac67f3bd6e938c6", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-local.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-local.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-local.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-local.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=local\" } */\n+\n+extern int a __attribute__ ((section (\".sdata\")));\n+static volatile int b __attribute__ ((section (\".sdata\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler \"%gprel\\\\(a\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(foo\\\\)\" } } */"}, {"sha": "c432f54041a87b4f400e98d8d22ce8ec168a86a4", "filename": "gcc/testsuite/gcc.target/nios2/gpopt-none.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-none.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/56314783c33b58a03f7eee9d48b4a2628ee6e1f0/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-none.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnios2%2Fgpopt-none.c?ref=56314783c33b58a03f7eee9d48b4a2628ee6e1f0", "patch": "@@ -0,0 +1,38 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -mgpopt=none\" } */\n+\n+extern int a __attribute__ ((section (\".sdata\")));\n+static volatile int b __attribute__ ((section (\".sdata\"))) = 1;\n+extern int c __attribute__ ((section (\".data\")));\n+static volatile int d __attribute__ ((section (\".data\"))) = 2;\n+\n+extern int e;\n+static volatile int f = 3;\n+\n+volatile int g __attribute__ ((weak)) = 4;\n+\n+extern int h[100];\n+static int i[100];\n+static int j[100] __attribute__ ((section (\".sdata\")));\n+\n+typedef int (*ftype) (int);\n+extern int foo (int);\n+\n+extern int bar (int, int*, int*, int*, ftype);\n+\n+int baz (void)\n+{\n+  return bar (a + b + c + d + e + f + g, h, i, j, foo);\n+}\n+\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(a\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(b\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(c\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(d\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(e\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(f\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(g\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(h\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(i\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(j\\\\)\" } } */\n+/* { dg-final { scan-assembler-not \"%gprel\\\\(foo\\\\)\" } } */"}]}