{"sha": "b55284f4a1235fccd8254f539ddc6b869580462b", "node_id": "C_kwDOANBUbNoAKGI1NTI4NGY0YTEyMzVmY2NkODI1NGY1MzlkZGM2Yjg2OTU4MDQ2MmI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-04T13:03:33Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-05T07:28:45Z"}, "message": "tree-optimization/106182 - LC SSA after CFG cleanup\n\nThe testcase shows that when cleaning up the CFG we can end up\nwith broken LC SSA (for virtual operands with the testcase).  The\ncase here involves deleting a loop after which it is not enough\nto scan the blocks with changed loop depth for SSA uses that need\nto be rewritten.  So make fix_loop_sturcture return the sum of\nthe number of new loops and the number of deleted loops.\n\n\tPR tree-optimization/106182\n\t* loop-init.cc (fix_loop_structure): Return the number\n\tof newly discovered plus the number of deleted loops.\n\t* tree-cfgcleanup.cc (repair_loop_structures): Adjust\n\tvariable name.\n\n\t* gcc.dg/torture/pr106182.c: New testcase.", "tree": {"sha": "f80dc4f8aa2b8f414886d80472aefcac3fe2ba27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f80dc4f8aa2b8f414886d80472aefcac3fe2ba27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b55284f4a1235fccd8254f539ddc6b869580462b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55284f4a1235fccd8254f539ddc6b869580462b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b55284f4a1235fccd8254f539ddc6b869580462b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b55284f4a1235fccd8254f539ddc6b869580462b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8467574d8daac47e0cf5b694f6c012aad8d630a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8467574d8daac47e0cf5b694f6c012aad8d630a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8467574d8daac47e0cf5b694f6c012aad8d630a6"}], "stats": {"total": 34, "additions": 26, "deletions": 8}, "files": [{"sha": "b9e07973dd6a905670eda7a9a45ace30ff0fcaf2", "filename": "gcc/loop-init.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Floop-init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Floop-init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-init.cc?ref=b55284f4a1235fccd8254f539ddc6b869580462b", "patch": "@@ -194,7 +194,7 @@ loop_optimizer_finalize (struct function *fn, bool clean_loop_closed_phi)\n    If CHANGED_BBS is not NULL, basic blocks whose loop depth has changed are\n    marked in it.\n \n-   Returns the number of new discovered loops.  */\n+   Returns the number of new discovered plus the number of removed loops.  */\n \n unsigned\n fix_loop_structure (bitmap changed_bbs)\n@@ -277,7 +277,7 @@ fix_loop_structure (bitmap changed_bbs)\n     }\n \n   /* Finally free deleted loops.  */\n-  bool any_deleted = false;\n+  unsigned n_deleted = 0;\n   class loop *loop;\n   FOR_EACH_VEC_ELT (*get_loops (cfun), i, loop)\n     if (loop && loop->header == NULL)\n@@ -311,12 +311,12 @@ fix_loop_structure (bitmap changed_bbs)\n \t  }\n \t(*get_loops (cfun))[i] = NULL;\n \tflow_loop_free (loop);\n-\tany_deleted = true;\n+\tn_deleted++;\n       }\n \n   /* If we deleted loops then the cached scalar evolutions refering to\n      those loops become invalid.  */\n-  if (any_deleted && scev_initialized_p ())\n+  if (n_deleted > 0 && scev_initialized_p ())\n     scev_reset_htab ();\n \n   loops_state_clear (LOOPS_NEED_FIXUP);\n@@ -328,7 +328,7 @@ fix_loop_structure (bitmap changed_bbs)\n \n   timevar_pop (TV_LOOP_INIT);\n \n-  return number_of_loops (cfun) - old_nloops;\n+  return number_of_loops (cfun) - old_nloops + n_deleted;\n }\n \f\n /* The RTL loop superpass.  The actual passes are subpasses.  See passes.cc for"}, {"sha": "6b5c2493fd6ef1f62134513f9359e2371ffe319d", "filename": "gcc/testsuite/gcc.dg/torture/pr106182.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106182.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106182.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr106182.c?ref=b55284f4a1235fccd8254f539ddc6b869580462b", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-funswitch-loops\" } */\n+\n+short var_32;\n+int test_var_0;\n+unsigned char test_var_6;\n+char test_var_13;\n+void test(int var_2)\n+{\n+  for (;;)\n+    for (short i_7; i_7 < test_var_13; i_7 += 1)\n+      for (; test_var_0;) {\n+        for (; var_2;)\n+          var_32 = 0;\n+        for (char i_19; i_19 < test_var_6 + 135; i_19 += 200)\n+          ;\n+      }\n+}"}, {"sha": "3b24e021b6b4aa06731d1659e021613209bb0ca4", "filename": "gcc/tree-cfgcleanup.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Ftree-cfgcleanup.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b55284f4a1235fccd8254f539ddc6b869580462b/gcc%2Ftree-cfgcleanup.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.cc?ref=b55284f4a1235fccd8254f539ddc6b869580462b", "patch": "@@ -1170,21 +1170,21 @@ static void\n repair_loop_structures (void)\n {\n   bitmap changed_bbs;\n-  unsigned n_new_loops;\n+  unsigned n_new_or_deleted_loops;\n \n   calculate_dominance_info (CDI_DOMINATORS);\n \n   timevar_push (TV_REPAIR_LOOPS);\n   changed_bbs = BITMAP_ALLOC (NULL);\n-  n_new_loops = fix_loop_structure (changed_bbs);\n+  n_new_or_deleted_loops = fix_loop_structure (changed_bbs);\n \n   /* This usually does nothing.  But sometimes parts of cfg that originally\n      were inside a loop get out of it due to edge removal (since they\n      become unreachable by back edges from latch).  Also a former\n      irreducible loop can become reducible - in this case force a full\n      rewrite into loop-closed SSA form.  */\n   if (loops_state_satisfies_p (LOOP_CLOSED_SSA))\n-    rewrite_into_loop_closed_ssa (n_new_loops ? NULL : changed_bbs,\n+    rewrite_into_loop_closed_ssa (n_new_or_deleted_loops ? NULL : changed_bbs,\n \t\t\t\t  TODO_update_ssa);\n \n   BITMAP_FREE (changed_bbs);"}]}