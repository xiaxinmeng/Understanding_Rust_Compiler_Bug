{"sha": "e05e2395bdab25b76b243f486994ca9d032962f1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA1ZTIzOTViZGFiMjViNzZiMjQzZjQ4Njk5NGNhOWQwMzI5NjJmMQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-10-27T17:34:59Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-10-27T17:34:59Z"}, "message": "alias.c (init_alias_analysis): Allocate reg_known_value and reg_known_equiv_p on the heap.\n\n\t* alias.c (init_alias_analysis): Allocate reg_known_value and\n \treg_known_equiv_p on the heap.  Likewise for new_reg_base_value\n\tand reg_seen.\n\t(end_alias_analysis): Free reg_known_value and reg_known_equiv_p.\n\t* cse.c (cse_main): Call end_alias_analysis.\n\t* haifa-sched.c (schedule_insns): Likewise.\n\t* local-alloc. (update_equiv_regs): Likewise.\n\t* reload1.c (reload_cse_regs): Likewise.\n\nFrom-SVN: r30217", "tree": {"sha": "7e473bb947bcec6b461f84269de876371eb9d053", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7e473bb947bcec6b461f84269de876371eb9d053"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e05e2395bdab25b76b243f486994ca9d032962f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05e2395bdab25b76b243f486994ca9d032962f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e05e2395bdab25b76b243f486994ca9d032962f1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e05e2395bdab25b76b243f486994ca9d032962f1/comments", "author": null, "committer": null, "parents": [{"sha": "46cc13b3e0c0e00b1797f4591256cd13585384bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46cc13b3e0c0e00b1797f4591256cd13585384bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46cc13b3e0c0e00b1797f4591256cd13585384bd"}], "stats": {"total": 46, "additions": 36, "deletions": 10}, "files": [{"sha": "fbadea8755a207bd993da83a3ce05cc08a977fb0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -1,3 +1,14 @@\n+Wed Oct 27 02:05:58 1999  Mark P. Mitchell  <mark@codesourcery.com>\n+\n+\t* alias.c (init_alias_analysis): Allocate reg_known_value and\n+ \treg_known_equiv_p on the heap.  Likewise for new_reg_base_value\n+\tand reg_seen.\n+\t(end_alias_analysis): Free reg_known_value and reg_known_equiv_p.\n+\t* cse.c (cse_main): Call end_alias_analysis.\n+\t* haifa-sched.c (schedule_insns): Likewise.\n+\t* local-alloc. (update_equiv_regs): Likewise.\n+\t* reload1.c (reload_cse_regs): Likewise.\n+\t\n Wed Oct 27 01:49:17 1999  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* sparc/sparc.c (sparc_override_options): Clear MASK_FPU_SET."}, {"sha": "cdc001993d59270d5649797cb2c32078d9fc0399", "filename": "gcc/alias.c", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -1538,15 +1538,12 @@ init_alias_analysis ()\n \n   reg_known_value_size = maxreg;\n \n-  reg_known_value\n-    = (rtx *) oballoc ((maxreg - FIRST_PSEUDO_REGISTER) * sizeof (rtx))\n+  reg_known_value \n+    = (rtx *) xcalloc ((maxreg - FIRST_PSEUDO_REGISTER), sizeof (rtx))\n+    - FIRST_PSEUDO_REGISTER;\n+  reg_known_equiv_p \n+    = (char*) xcalloc ((maxreg - FIRST_PSEUDO_REGISTER), sizeof (char))\n     - FIRST_PSEUDO_REGISTER;\n-  reg_known_equiv_p =\n-    oballoc (maxreg - FIRST_PSEUDO_REGISTER) - FIRST_PSEUDO_REGISTER;\n-  bzero ((char *) (reg_known_value + FIRST_PSEUDO_REGISTER),\n-\t (maxreg-FIRST_PSEUDO_REGISTER) * sizeof (rtx));\n-  bzero (reg_known_equiv_p + FIRST_PSEUDO_REGISTER,\n-\t (maxreg - FIRST_PSEUDO_REGISTER) * sizeof (char));\n \n   /* Overallocate reg_base_value to allow some growth during loop\n      optimization.  Loop unrolling can create a large number of\n@@ -1556,8 +1553,8 @@ init_alias_analysis ()\n   if (ggc_p)\n     ggc_add_rtx_root (reg_base_value, reg_base_value_size);\n \n-  new_reg_base_value = (rtx *)alloca (reg_base_value_size * sizeof (rtx));\n-  reg_seen = (char *)alloca (reg_base_value_size);\n+  new_reg_base_value = (rtx *) xmalloc (reg_base_value_size * sizeof (rtx));\n+  reg_seen = (char *) xmalloc (reg_base_value_size);\n   if (! reload_completed && flag_unroll_loops)\n     {\n       /* ??? Why are we realloc'ing if we're just going to zero it?  */\n@@ -1730,15 +1727,21 @@ init_alias_analysis ()\n     }\n   while (changed && pass < MAX_ALIAS_LOOP_PASSES);\n \n+  /* Clean up.  */\n+  free (new_reg_base_value);\n   new_reg_base_value = 0;\n+  free (reg_seen);\n   reg_seen = 0;\n }\n \n void\n end_alias_analysis ()\n {\n+  free (reg_known_value + FIRST_PSEUDO_REGISTER);\n   reg_known_value = 0;\n   reg_known_value_size = 0;\n+  free (reg_known_equiv_p + FIRST_PSEUDO_REGISTER);\n+  reg_known_equiv_p = 0;\n   if (reg_base_value)\n     {\n       if (ggc_p)"}, {"sha": "d22a200a1b8048619bafe41e487a1c7e6a70f98b", "filename": "gcc/cse.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -8801,6 +8801,9 @@ cse_main (f, nregs, after_loop, file)\n   if (max_elements_made < n_elements_made)\n     max_elements_made = n_elements_made;\n \n+  /* Clean up.  */\n+  end_alias_analysis ();\n+\n   return cse_jumps_altered || recorded_label_ref;\n }\n "}, {"sha": "5c1641d4be774f999ead69c320f7d45121ae5a48", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -7123,6 +7123,9 @@ schedule_insns (dump_file)\n       fprintf (dump, \"\\n\\n\");\n     }\n \n+  /* Clean up.  */\n+  end_alias_analysis ();\n+\n   if (true_dependency_cache)\n     {\n       free (true_dependency_cache);"}, {"sha": "bcc8cbbff0e9983d68f1ed7a33a2763efc8ce9a2", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -996,6 +996,9 @@ update_equiv_regs ()\n \t    }\n \t}\n     }\n+\n+  /* Clean up.  */\n+  end_alias_analysis ();\n }\n \n /* Mark REG as having no known equivalence."}, {"sha": "0a3371f539573e536e245f39b4a35528b7c34850", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e05e2395bdab25b76b243f486994ca9d032962f1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=e05e2395bdab25b76b243f486994ca9d032962f1", "patch": "@@ -8926,6 +8926,9 @@ reload_cse_regs_1 (first)\n \t}\n     }\n \n+  /* Clean up.  */\n+  end_alias_analysis ();\n+\n   /* Free all the temporary structures we created, and go back to the\n      regular obstacks.  */\n   obstack_free (&reload_obstack, firstobj);"}]}