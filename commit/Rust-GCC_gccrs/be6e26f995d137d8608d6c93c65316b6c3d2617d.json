{"sha": "be6e26f995d137d8608d6c93c65316b6c3d2617d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmU2ZTI2Zjk5NWQxMzdkODYwOGQ2YzkzYzY1MzE2YjZjM2QyNjE3ZA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-09-23T11:11:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-09-23T11:11:48Z"}, "message": "tree-ssa-structalias.c (intra_create_variable_infos): Build representatives for all restrict qualified pointer destinations.\n\n2015-09-23  Richard Biener  <rguenther@suse.de>\n\n\t* tree-ssa-structalias.c (intra_create_variable_infos): Build\n\trepresentatives for all restrict qualified pointer destinations.\n\n\t* g++.dg/tree-ssa/restrict2.C: Un-XFAIL testcase.\n\nFrom-SVN: r228040", "tree": {"sha": "43cbc9398722b1229c8f0f9e2b6b54e095281d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43cbc9398722b1229c8f0f9e2b6b54e095281d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be6e26f995d137d8608d6c93c65316b6c3d2617d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6e26f995d137d8608d6c93c65316b6c3d2617d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be6e26f995d137d8608d6c93c65316b6c3d2617d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be6e26f995d137d8608d6c93c65316b6c3d2617d/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/40f1d2ab2662c2ed41707a2126ea0c5c9e028653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/40f1d2ab2662c2ed41707a2126ea0c5c9e028653"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "c46bd6d26a73caa86f3cf75871164c138ce0e6ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be6e26f995d137d8608d6c93c65316b6c3d2617d", "patch": "@@ -1,3 +1,8 @@\n+2015-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-structalias.c (intra_create_variable_infos): Build\n+\trepresentatives for all restrict qualified pointer destinations.\n+\n 2015-09-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* config/i386/i386.md (define_code_attr mshift): New."}, {"sha": "36e30b6056ee9e0f161091164d2529da6f98b326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be6e26f995d137d8608d6c93c65316b6c3d2617d", "patch": "@@ -1,3 +1,7 @@\n+2015-09-23  Richard Biener  <rguenther@suse.de>\n+\n+\t* g++.dg/tree-ssa/restrict2.C: Un-XFAIL testcase.\n+\n 2015-09-22  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* c-c++-common/Wmisleading-indentation.c: Augment test."}, {"sha": "4f97360dc720fd16be14b03e65ed5b6a34fb4ad6", "filename": "gcc/testsuite/g++.dg/tree-ssa/restrict2.C", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-ssa%2Frestrict2.C?ref=be6e26f995d137d8608d6c93c65316b6c3d2617d", "patch": "@@ -45,8 +45,7 @@ f5 (S *__restrict x, S *__restrict y)\n {\n   x->p[0] = 5;\n   y->p[0] = 0;\n-// We might handle this some day\n-// { dg-final { scan-tree-dump-times \"return 5\" 1 \"optimized\" { xfail *-*-* } } }\n+// { dg-final { scan-tree-dump-times \"return 5\" 1 \"optimized\" } }\n   return x->p[0];\n }\n "}, {"sha": "8d81bd4f730525a1ffe7a195916d0c80d784db8a", "filename": "gcc/tree-ssa-structalias.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftree-ssa-structalias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be6e26f995d137d8608d6c93c65316b6c3d2617d/gcc%2Ftree-ssa-structalias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-structalias.c?ref=be6e26f995d137d8608d6c93c65316b6c3d2617d", "patch": "@@ -5857,12 +5857,12 @@ intra_create_variable_infos (struct function *fn)\n     {\n       varinfo_t p = get_vi_for_tree (t);\n \n-      /* For restrict qualified pointers to objects passed by\n-         reference build a real representative for the pointed-to object.\n-\t Treat restrict qualified references the same.  */\n-      if (TYPE_RESTRICT (TREE_TYPE (t))\n-\t  && ((DECL_BY_REFERENCE (t) && POINTER_TYPE_P (TREE_TYPE (t)))\n-\t      || TREE_CODE (TREE_TYPE (t)) == REFERENCE_TYPE)\n+      /* For restrict qualified pointers build a representative for\n+\t the pointed-to object.  Note that this ends up handling\n+\t out-of-bound references conservatively by aggregating them\n+\t in the first/last subfield of the object.  */\n+      if (POINTER_TYPE_P (TREE_TYPE (t))\n+\t  && TYPE_RESTRICT (TREE_TYPE (t))\n \t  && !type_contains_placeholder_p (TREE_TYPE (TREE_TYPE (t))))\n \t{\n \t  struct constraint_expr lhsc, rhsc;"}]}