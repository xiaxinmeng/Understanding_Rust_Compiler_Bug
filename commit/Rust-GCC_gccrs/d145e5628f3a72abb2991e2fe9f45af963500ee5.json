{"sha": "d145e5628f3a72abb2991e2fe9f45af963500ee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE0NWU1NjI4ZjNhNzJhYmIyOTkxZTJmZTlmNDVhZjk2MzUwMGVlNQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2019-10-10T15:23:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-10-10T15:23:28Z"}, "message": "[Ada] Fix handling of -gnatceg on incomplete unit\n\n2019-10-10  Arnaud Charlet  <charlet@adacore.com>\n\ngcc/ada/\n\n\t* gnat1drv.adb (Gnat1drv): Skip code generation when handling an\n\tincomplete unit with -gnatceg.\n\nFrom-SVN: r276817", "tree": {"sha": "7299f1dfc37560adebf8ee9f58987f86b22c57ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7299f1dfc37560adebf8ee9f58987f86b22c57ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d145e5628f3a72abb2991e2fe9f45af963500ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d145e5628f3a72abb2991e2fe9f45af963500ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d145e5628f3a72abb2991e2fe9f45af963500ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d145e5628f3a72abb2991e2fe9f45af963500ee5/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f68289d82e55ad4239beea8a8fbb32981f814de0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f68289d82e55ad4239beea8a8fbb32981f814de0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f68289d82e55ad4239beea8a8fbb32981f814de0"}], "stats": {"total": 62, "additions": 19, "deletions": 43}, "files": [{"sha": "f4484cb309a1dfdffd30bb4395382baa34b2a234", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 3, "deletions": 41, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d145e5628f3a72abb2991e2fe9f45af963500ee5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d145e5628f3a72abb2991e2fe9f45af963500ee5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d145e5628f3a72abb2991e2fe9f45af963500ee5", "patch": "@@ -1,42 +1,4 @@\n-2019-10-10  Gary Dismukes  <dismukes@adacore.com>\n+2019-10-10  Arnaud Charlet  <charlet@adacore.com>\n \n-\t* exp_ch7.adb (Check_Unnesting_Elaboration_Code): Various\n-\tcleanups.\n-\t(Set_Elab_Proc): New procedure to create the defining identifier\n-\tfor a procedure created to encapsulate top-level blocks\n-\toccurring as a part of library package elaboration.\n-\t(First_Local_Scope): Function replaced by\n-\tReset_Scopes_To_Elab_Proc.\n-\t(Reset_Scopes_To_Elab_Proc): New recursive procedure based on\n-\tFirst_Local_Scope, which it replaces, that is called to traverse\n-\tthe statements of a library package body to locate top-level\n-\tblocks and determine whether they contain nested subprograms\n-\tthat might address library-level objects of the package. Such\n-\tblocks (and loops) and certain top-level subprograms within the\n-\tstatements will have their Scope reset here to match an\n-\tencapsulating procedure created by\n-\tCheck_Unnesting_Elaboration_Code that will contain the\n-\tstatements.\n-\t(Check_Unnesting_In_Decls_Or_Stmts): Code for handling blocks\n-\tfactored out into Unnest_Block. Add handling for package\n-\tdeclarations and bodies, making recursive calls for\n-\tvisible/private declarations, body declarations, statements, and\n-\texception handlers. Also remove test for Is_Compilation_Unit:\n-\tcaller tests for Is_Library_Level_Entity instead.  Also, this\n-\tproc's name was changed from Check_Unnesting_In_Declarations.\n-\t(Check_Unnesting_In_Handlers): New procedure to traverse a\n-\tsequence of exception handlers, calling\n-\tCheck_Unnesting_In_Decls_Or_Stmts on the statements of each\n-\thandler.\n-\t(Expand_N_Package_Body): Call Check_Unnesting_* routines only\n-\twhen Unnest_Subprogram_Mode is set and the current scope is a\n-\tlibrary-level entity (which includes packages and instantiations\n-\tnested directly within a library unit).\n-\t(Expand_N_Package_Declaration): Call Check_Unnesting_* routines\n-\tonly when Unnest_Subprogram_Mode is set and the current scope is\n-\ta library-level entity (which includes packages and\n-\tinstantiations nested directly within a library unit).\n-\t(Unnest_Block): New procedure factored out of\n-\tCheck_Unnesting_In_Decls_Or_Stmts, for creating a new procedure\n-\tto replace a block statement and resetting the Scope fields of\n-\tthe block's top-level entities.\n\\ No newline at end of file\n+\t* gnat1drv.adb (Gnat1drv): Skip code generation when handling an\n+\tincomplete unit with -gnatceg.\n\\ No newline at end of file"}, {"sha": "7d507aaf4febf7a8bd55dad3b262281db04be5c1", "filename": "gcc/ada/gnat1drv.adb", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d145e5628f3a72abb2991e2fe9f45af963500ee5/gcc%2Fada%2Fgnat1drv.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d145e5628f3a72abb2991e2fe9f45af963500ee5/gcc%2Fada%2Fgnat1drv.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat1drv.adb?ref=d145e5628f3a72abb2991e2fe9f45af963500ee5", "patch": "@@ -1412,11 +1412,25 @@ begin\n \n       --  It is not an error to analyze in CodePeer mode a spec which requires\n       --  a body, in order to generate SCIL for this spec.\n-      --  Ditto for Generate_C_Code mode and generate a C header for a spec.\n \n-      elsif CodePeer_Mode or Generate_C_Code then\n+      elsif CodePeer_Mode then\n          Back_End_Mode := Generate_Object;\n \n+      --  Differentiate use of -gnatceg to generate a C header from an Ada spec\n+      --  to the CCG case (standard.h found) where C code generation should\n+      --  only be performed on full units.\n+\n+      elsif Generate_C_Code then\n+         Name_Len := 10;\n+         Name_Buffer (1 .. Name_Len) := \"standard.h\";\n+\n+         if Find_File (Name_Find, Osint.Source, Full_Name => True) = No_File\n+         then\n+            Back_End_Mode := Generate_Object;\n+         else\n+            Back_End_Mode := Skip;\n+         end if;\n+\n       --  It is not an error to analyze in GNATprove mode a spec which requires\n       --  a body, when the body is not available. During frame condition\n       --  generation, the corresponding ALI file is generated. During"}]}