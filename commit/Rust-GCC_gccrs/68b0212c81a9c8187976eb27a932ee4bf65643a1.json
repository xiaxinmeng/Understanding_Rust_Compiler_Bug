{"sha": "68b0212c81a9c8187976eb27a932ee4bf65643a1", "node_id": "C_kwDOANBUbNoAKDY4YjAyMTJjODFhOWM4MTg3OTc2ZWIyN2E5MzJlZTRiZjY1NjQzYTE", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2023-01-05T15:17:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-05T15:17:27Z"}, "message": "Merge #1711\n\n1711: unsafe: check use of `target_feature` attribute r=CohenArthur a=snprajwal\n\nThe `target_feature` attribute is for conditional compilation and may or may not compile on all platforms. Using it requires an unsafe function or block.\r\n\r\nAddresses #1411 \n\nCo-authored-by: Prajwal S N <prajwalnadig21@gmail.com>", "tree": {"sha": "7bb06e381f48aa4d3f2fd36b4c1840d76bb04ef3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7bb06e381f48aa4d3f2fd36b4c1840d76bb04ef3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68b0212c81a9c8187976eb27a932ee4bf65643a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjtuoHCRBK7hj4Ov3rIwAAHwsIALExOWgLlwDvq7sJJDUfrJhj\ni8+OpqahaFdNazBCqHN+dHYYOjT2CLsuyljHT1rQ/ZxVHR4GNjtTTM7CC54RidLF\nPmcIrQEj3H/W4TF/JgkiHAwAe85V+X98Lzu4KGKBxH70S7s0/c6wqdcEHZsEsvaT\nDiOag5qYxhKSmMSVlJTkqrywRzPD2NFU9jSvsG1q346BpRirhsczm96rRb9leD0S\ndB5fQkPL0iYXqRMR5LWvEx1H3P/bOE2TbutnGXuiMzJHtZwcX+Ctp6OAutLOJw9n\nFxnNJl+4U7vRJc6ByrotWAM561CBjvsShhUiernKFjrJAH/tvfhGcAcyGBWer1Q=\n=Aeew\n-----END PGP SIGNATURE-----\n", "payload": "tree 7bb06e381f48aa4d3f2fd36b4c1840d76bb04ef3\nparent fc72441e83fb9a0fafbcfe23060964f2cf3eee9f\nparent aa7698dca97505737ff092c6b9758d08f03daf2a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1672931847 +0000\ncommitter GitHub <noreply@github.com> 1672931847 +0000\n\nMerge #1711\n\n1711: unsafe: check use of `target_feature` attribute r=CohenArthur a=snprajwal\n\nThe `target_feature` attribute is for conditional compilation and may or may not compile on all platforms. Using it requires an unsafe function or block.\r\n\r\nAddresses #1411 \n\nCo-authored-by: Prajwal S N <prajwalnadig21@gmail.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b0212c81a9c8187976eb27a932ee4bf65643a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68b0212c81a9c8187976eb27a932ee4bf65643a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68b0212c81a9c8187976eb27a932ee4bf65643a1/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc72441e83fb9a0fafbcfe23060964f2cf3eee9f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc72441e83fb9a0fafbcfe23060964f2cf3eee9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc72441e83fb9a0fafbcfe23060964f2cf3eee9f"}, {"sha": "aa7698dca97505737ff092c6b9758d08f03daf2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa7698dca97505737ff092c6b9758d08f03daf2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa7698dca97505737ff092c6b9758d08f03daf2a"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "f68243020b1053be669740c40f59be8bd40b5527", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.cc", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.cc?ref=68b0212c81a9c8187976eb27a932ee4bf65643a1", "patch": "@@ -179,6 +179,31 @@ UnsafeChecker::check_function_call (HirId node_id, Location locus)\n \t\t       locus);\n }\n \n+static void\n+check_target_attr (HIR::Function *fn, Location locus)\n+{\n+  if (std::any_of (fn->get_outer_attrs ().begin (),\n+\t\t   fn->get_outer_attrs ().end (),\n+\t\t   [] (const AST::Attribute &attr) {\n+\t\t     return attr.get_path ().as_string () == \"target_feature\";\n+\t\t   }))\n+    rust_error_at (locus,\n+\t\t   \"call to function with %<#[target_feature]%> requires \"\n+\t\t   \"unsafe function or block\");\n+}\n+\n+void\n+UnsafeChecker::check_function_attr (HirId node_id, Location locus)\n+{\n+  if (unsafe_context.is_in_context ())\n+    return;\n+\n+  auto maybe_fn = mappings.lookup_hir_item (node_id);\n+\n+  if (maybe_fn && maybe_fn->get_item_kind () == Item::ItemKind::Function)\n+    check_target_attr (static_cast<Function *> (maybe_fn), locus);\n+}\n+\n void\n UnsafeChecker::visit (Lifetime &)\n {}\n@@ -398,11 +423,13 @@ UnsafeChecker::visit (CallExpr &expr)\n \n   rust_assert (mappings.lookup_node_to_hir (ref_node_id, &definition_id));\n \n-  // At this point we have the function's HIR Id. There are two checks we\n+  // At this point we have the function's HIR Id. There are three checks we\n   // must perform:\n   //     1. The function is an unsafe one\n   //     2. The function is an extern one\n+  //     3. The function is marked with a target_feature attribute\n   check_function_call (definition_id, expr.get_locus ());\n+  check_function_attr (definition_id, expr.get_locus ());\n \n   if (expr.has_params ())\n     for (auto &arg : expr.get_arguments ())"}, {"sha": "540e5c33f6d51aaf57cf28c899c369b7fcd97e9b", "filename": "gcc/rust/checks/errors/rust-unsafe-checker.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fchecks%2Ferrors%2Frust-unsafe-checker.h?ref=68b0212c81a9c8187976eb27a932ee4bf65643a1", "patch": "@@ -46,6 +46,11 @@ class UnsafeChecker : public HIRFullVisitor\n    */\n   void check_function_call (HirId node_id, Location locus);\n \n+  /**\n+   * Check if any unsafe attributes are present on a function\n+   */\n+  void check_function_attr (HirId node_id, Location locus);\n+\n   StackedContexts<HirId> unsafe_context;\n \n   Resolver::TypeCheckContext &context;"}, {"sha": "9de86db7cc10a77e4c7487ce8a4b77ad38104060", "filename": "gcc/rust/util/rust-attributes.cc", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Futil%2Frust-attributes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Frust%2Futil%2Frust-attributes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Futil%2Frust-attributes.cc?ref=68b0212c81a9c8187976eb27a932ee4bf65643a1", "patch": "@@ -41,6 +41,9 @@ static const BuiltinAttrDefinition __definitions[]\n      {\"repr\", CODE_GENERATION},\n      {\"path\", EXPANSION},\n      {\"macro_use\", NAME_RESOLUTION},\n+     // FIXME: This is not implemented yet, see\n+     // https://github.com/Rust-GCC/gccrs/issues/1475\n+     {\"target_feature\", CODE_GENERATION},\n      // From now on, these are reserved by the compiler and gated through\n      // #![feature(rustc_attrs)]\n      {\"rustc_inherit_overflow_checks\", CODE_GENERATION}};"}, {"sha": "c87902fcd5f169e2d23881cd72a8030671a830dd", "filename": "gcc/testsuite/rust/compile/unsafe11.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68b0212c81a9c8187976eb27a932ee4bf65643a1/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fcompile%2Funsafe11.rs?ref=68b0212c81a9c8187976eb27a932ee4bf65643a1", "patch": "@@ -0,0 +1,8 @@\n+#[target_feature(sse)]\n+fn foo() {\n+    let a: usize = 0;\n+}\n+\n+fn main() {\n+    foo() // { dg-error \"requires unsafe function or block\" }\n+}"}]}