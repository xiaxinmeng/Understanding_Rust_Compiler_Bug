{"sha": "3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JmNWU3NjU3Yjc1MmNjMjM1Mjc3OGU4YzIwYWM5Y2RkZGNhNGY5Mw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-26T20:17:34Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-05-26T20:17:34Z"}, "message": "libstdc++: Fix common_iterator::operator-> [PR95322]\n\nThis patch fixes the definition of common_iterator::operator-> when the\nunderlying iterator's operator* returns a non-reference.\n\nThe first problem is that the class __detail::_Common_iter_proxy is used\nunqualified.  Fixing that revealed another problem: the class's template\nfriend declaration of common_iterator doesn't match up with the\ndefinition of common_iterator, because the friend declaration isn't\nconstrained.\n\nIf we try to make the friend declaration match up by adding constraints,\nwe run into frontend bug PR93467.  So we currently can't correctly\nexpress this friend relation between __detail::_Common_iter_proxy and\ncommon_iterator.\n\nAs a workaround to this frontend bug, this patch moves the definition of\n_Common_iter_proxy into the class template of common_iterator so that we\ncould instead express the friend relation via the injected-class-name.\n\n(This bug was found when attempting to use views::common to work around\nthe compile failure with the testcase in PR95322.)\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/95322\n\t* include/bits/stl_iterator.h (__detail::_Common_iter_proxy):\n\tRemove and instead define it ...\n\t(common_iterator::_Proxy): ... here.\n\t(common_iterator::operator->): Use it.\n\t* testsuite/24_iterators/common_iterator/2.cc: New test.\n\t* testsuite/std/ranges/adaptors/95322.cc: New test.", "tree": {"sha": "a4b141125fed6f34d913ced90fcd4c147e1545a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a4b141125fed6f34d913ced90fcd4c147e1545a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/comments", "author": null, "committer": null, "parents": [{"sha": "8d8a25b0a7c3400c724e04e1d775d9f377216c04", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8a25b0a7c3400c724e04e1d775d9f377216c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8a25b0a7c3400c724e04e1d775d9f377216c04"}], "stats": {"total": 147, "additions": 129, "deletions": 18}, "files": [{"sha": "19b1d53f7818e98f24b7930c61360810119943c4", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "patch": "@@ -1568,23 +1568,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace __detail\n   {\n-    template<input_or_output_iterator _It>\n-      class _Common_iter_proxy\n-      {\n-\titer_value_t<_It> _M_keep;\n-\n-\t_Common_iter_proxy(iter_reference_t<_It>&& __x)\n-\t: _M_keep(std::move(__x)) { }\n-\n-\ttemplate<typename _Iter, typename _Sent>\n-\t  friend class common_iterator;\n-\n-      public:\n-\tconst iter_value_t<_It>*\n-\toperator->() const\n-\t{ return std::__addressof(_M_keep); }\n-      };\n-\n     template<typename _It>\n       concept __common_iter_has_arrow = indirectly_readable<const _It>\n \t&& (requires(const _It& __it) { __it.operator->(); }\n@@ -1613,6 +1596,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _S_noexcept()\n       { return _S_noexcept1<_It, _It2>() && _S_noexcept1<_Sent, _Sent2>(); }\n \n+    class _Proxy\n+    {\n+      iter_value_t<_It> _M_keep;\n+\n+      _Proxy(iter_reference_t<_It>&& __x)\n+      : _M_keep(std::move(__x)) { }\n+\n+      friend class common_iterator;\n+\n+    public:\n+      const iter_value_t<_It>*\n+      operator->() const\n+      { return std::__addressof(_M_keep); }\n+    };\n+\n   public:\n     constexpr\n     common_iterator()\n@@ -1769,7 +1767,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return std::__addressof(__tmp);\n \t}\n       else\n-\treturn _Common_iter_proxy(*_M_it);\n+\treturn _Proxy{*_M_it};\n     }\n \n     common_iterator&"}, {"sha": "270e8eaa91c84a3042be40b2d98270c9def63a4e", "filename": "libstdc++-v3/testsuite/24_iterators/common_iterator/2.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fcommon_iterator%2F2.cc?ref=3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <iterator>\n+#include <testsuite_hooks.h>\n+\n+struct value { int n; };\n+\n+struct sentinel { int limit; };\n+\n+struct iterator\n+{\n+  using iterator_category = std::input_iterator_tag;\n+  using value_type = value;\n+  using difference_type = std::ptrdiff_t;\n+  using reference = value;\n+\n+  value operator*() const { return value{counter}; }\n+\n+  iterator& operator++() { ++counter; return *this; }\n+\n+  iterator operator++(int) { auto i = *this; ++counter; return i; }\n+\n+  bool operator==(sentinel s) const { return counter == s.limit; }\n+\n+  int counter = 0;\n+};\n+\n+void\n+test01()\n+{\n+  iterator i;\n+  sentinel s{2};\n+  std::common_iterator<iterator, sentinel> begin = i, end = s;\n+  VERIFY( begin->n == 0 );\n+  ++begin;\n+  VERIFY( begin->n == 1 );\n+  ++begin;\n+  VERIFY( begin == end );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "44619d6719aeff71c724e2bf642e51ba159f05f8", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/95322.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bf5e7657b752cc2352778e8c20ac9cdddca4f93/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2F95322.cc?ref=3bf5e7657b752cc2352778e8c20ac9cdddca4f93", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+#include <ranges>\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+namespace ranges = std::ranges;\n+namespace views = std::views;\n+\n+void\n+test01()\n+{\n+  std::list container{1, 2, 3, 4, 5};\n+  auto v = (container\n+\t    | views::take(3)\n+\t    | views::transform(std::negate{})\n+\t    | views::common);\n+  auto i = ranges::cbegin(v);\n+  VERIFY( *i == -1 );\n+  ++i;\n+  VERIFY( *i == -2 );\n+  ++i;\n+  VERIFY( *i == -3 );\n+  ++i;\n+  VERIFY( i == ranges::end(v) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}