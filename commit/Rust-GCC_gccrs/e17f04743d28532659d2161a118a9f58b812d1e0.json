{"sha": "e17f04743d28532659d2161a118a9f58b812d1e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE3ZjA0NzQzZDI4NTMyNjU5ZDIxNjFhMTE4YTlmNThiODEyZDFlMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-05-22T00:52:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-05-22T00:52:58Z"}, "message": "lose START_CATCH_STMT\n\nFrom-SVN: r42414", "tree": {"sha": "2b84c9653198ce0b1082af692eabaefb45df009c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2b84c9653198ce0b1082af692eabaefb45df009c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e17f04743d28532659d2161a118a9f58b812d1e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e17f04743d28532659d2161a118a9f58b812d1e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e17f04743d28532659d2161a118a9f58b812d1e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e17f04743d28532659d2161a118a9f58b812d1e0/comments", "author": null, "committer": null, "parents": [{"sha": "3f41ffd8c39bedd88fbf0f7fcc42559397d69103", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f41ffd8c39bedd88fbf0f7fcc42559397d69103", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f41ffd8c39bedd88fbf0f7fcc42559397d69103"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b7001976a6a6a205691d7fd415aa79d76930db4a", "filename": "gcc/c-tree.texi", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e17f04743d28532659d2161a118a9f58b812d1e0/gcc%2Fc-tree.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e17f04743d28532659d2161a118a9f58b812d1e0/gcc%2Fc-tree.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.texi?ref=e17f04743d28532659d2161a118a9f58b812d1e0", "patch": "@@ -1361,8 +1361,6 @@ This predicate holds if the function an overloaded\n @findex SCOPE_BEGIN_P\n @findex SCOPE_END_P\n @findex SCOPE_NULLIFIED_P\n-@tindex START_CATCH_STMT\n-@findex START_CATCH_TYPE\n @tindex SUBOBJECT\n @findex SUBOBJECT_CLEANUP\n @tindex SWITCH_STMT\n@@ -1586,6 +1584,15 @@ goto'' extension has been used, the @code{GOTO_DESTINATION} will be an\n arbitrary expression indicating the destination.  This expression will\n always have pointer type.\n \n+@item HANDLER\n+\n+Used to represent a C++ @code{catch} block.  The @code{HANDLER_TYPE}\n+is the type of exception that will be caught by this handler; it is\n+equal (by pointer equality) to @code{CATCH_ALL_TYPE} if this handler\n+is for all types.  @code{HANDLER_PARMS} is the @code{DECL_STMT} for\n+the catch parameter, and @code{HANDLER_BODY} is the\n+@code{COMPOUND_STMT} for the block itself.\n+\n @item IF_STMT\n \n Used to represent an @code{if} statement.  The @code{IF_COND} is the\n@@ -1651,13 +1658,6 @@ which they were encountered.  If @code{SCOPE_NULLIFIED_P} or\n @code{SCOPE_NO_CLEANUPS_P} holds of the scope, back-ends should behave\n as if the @code{SCOPE_STMT} were not present at all.\n \n-@item START_CATCH_STMT\n-\n-These statements represent the location to which control is transferred\n-when an exception is thrown.  The @code{START_CATCH_TYPE} is the type of\n-exception that will be caught by this handler; it is equal (by pointer\n-equality) to @code{CATCH_ALL_TYPE} if this handler is for all types.\n-\n @item SUBOBJECT\n \n In a constructor, these nodes are used to mark the point at which a"}]}