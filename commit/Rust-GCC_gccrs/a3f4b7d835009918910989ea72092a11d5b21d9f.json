{"sha": "a3f4b7d835009918910989ea72092a11d5b21d9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTNmNGI3ZDgzNTAwOTkxODkxMDk4OWVhNzIwOTJhMTFkNWIyMWQ5Zg==", "commit": {"author": {"name": "Steven Bosscher", "email": "stevenb@suse.de", "date": "2005-07-31T21:45:44Z"}, "committer": {"name": "Steven Bosscher", "email": "steven@gcc.gnu.org", "date": "2005-07-31T21:45:44Z"}, "message": "re PR target/23095 (ICE in regstack compensate_edge)\n\n\tPR target/23095\n\t* common.opt (flag_gcse_after_reload): Don't initialize to 2.\n\t(flag_rerun_cse_after_loop): Initialize this to 2 instead.\n\t* postreload-gcse.c (hash_scan_set): Do not consider stack regs.\n\ntestsuite/\n\tPR target/23095\n\t* gfortran.dg/pr23095.f: New test.\n\n\tPR c++/22003\n\t* g++.dg/other/pr22003.C: New test.\n\nFrom-SVN: r102610", "tree": {"sha": "0bf30b7ec7d1ef7b0cf50fc733b32d6558e390e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0bf30b7ec7d1ef7b0cf50fc733b32d6558e390e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3f4b7d835009918910989ea72092a11d5b21d9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f4b7d835009918910989ea72092a11d5b21d9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3f4b7d835009918910989ea72092a11d5b21d9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3f4b7d835009918910989ea72092a11d5b21d9f/comments", "author": null, "committer": null, "parents": [{"sha": "16275f18ffb2ebbffad5474aa14d4e170acdd1f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16275f18ffb2ebbffad5474aa14d4e170acdd1f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16275f18ffb2ebbffad5474aa14d4e170acdd1f5"}], "stats": {"total": 75, "additions": 73, "deletions": 2}, "files": [{"sha": "f20a5281bf9a986aba898d4de04e32afba49e784", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -1,3 +1,10 @@\n+2005-07-31  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR target/23095\n+\t* common.opt (flag_gcse_after_reload): Don't initialize to 2.\n+\t(flag_rerun_cse_after_loop): Initialize this to 2 instead.\n+\t* postreload-gcse.c (hash_scan_set): Do not consider stack regs.\n+\n 2005-07-31  Jan Hubicka  <jh@suse.cz>\n \n \t* pretty-print.h (pp_widest_integer): New macro."}, {"sha": "28d9a0633291079ac74a97bec041f04fbfce472d", "filename": "gcc/common.opt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -435,7 +435,7 @@ Perform redundant load after store elimination in global common subexpression\n elimination\n \n fgcse-after-reload\n-Common Report Var(flag_gcse_after_reload) Init(2)\n+Common Report Var(flag_gcse_after_reload)\n Perform global common subexpression elimination after register allocation\n has finished\n \n@@ -694,7 +694,7 @@ Common Report Var(flag_reorder_functions)\n Reorder functions to improve code placement\n \n frerun-cse-after-loop\n-Common Report Var(flag_rerun_cse_after_loop)\n+Common Report Var(flag_rerun_cse_after_loop) Init(2)\n Add a common subexpression elimination pass after loop optimizations\n \n frerun-loop-opt"}, {"sha": "ea9c0ef7436060ecb5e8f2179d62eda886ca0429", "filename": "gcc/postreload-gcse.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Fpostreload-gcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Fpostreload-gcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload-gcse.c?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -745,6 +745,12 @@ hash_scan_set (rtx insn)\n \t  can_copy_p (GET_MODE (dest))\n \t  /* Is SET_SRC something we want to gcse?  */\n \t  && general_operand (src, GET_MODE (src))\n+#ifdef STACK_REGS\n+\t  /* Never consider insns touching the register stack.  It may\n+\t     create situations that reg-stack cannot handle (e.g. a stack\n+\t     register live across an abnormal edge).  */\n+\t  && (REGNO (dest) < FIRST_STACK_REG || REGNO (dest) > LAST_STACK_REG)\n+#endif\n \t  /* An expression is not available if its operands are\n \t     subsequently modified, including this insn.  */\n \t  && oprs_unchanged_p (src, insn, true))\n@@ -759,6 +765,10 @@ hash_scan_set (rtx insn)\n \t  can_copy_p (GET_MODE (src))\n \t  /* Is SET_DEST something we want to gcse?  */\n \t  && general_operand (dest, GET_MODE (dest))\n+#ifdef STACK_REGS\n+\t  /* As above for STACK_REGS.  */\n+\t  && (REGNO (src) < FIRST_STACK_REG || REGNO (src) > LAST_STACK_REG)\n+#endif\n \t  && ! (flag_float_store && FLOAT_MODE_P (GET_MODE (dest)))\n \t  /* Check if the memory expression is killed after insn.  */\n \t  && ! load_killed_in_block_p (INSN_CUID (insn) + 1, dest, true)"}, {"sha": "968118f4c0d2fb8d701ff2d304d47ce9f073bdc0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -1,3 +1,11 @@\n+2005-07-31  Steven Bosscher  <stevenb@suse.de>\n+\n+\tPR target/23095\n+\t* gfortran.dg/pr23095.f: New test.\n+\n+\tPR c++/22003\n+\t* g++.dg/other/pr22003.C: New test.\n+\n 2005-07-31  Richard Sandiford  <richard@codesourcery.com>\n \n \tPR target/20621"}, {"sha": "24f5ee650f84616751ab0121963049d0778f386d", "filename": "gcc/testsuite/g++.dg/other/pr22003.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fother%2Fpr22003.C?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -0,0 +1,24 @@\n+/* PR rtl-optimization/22003 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-exceptions -freorder-blocks-and-partition\" } */\n+\n+struct c1\n+{\n+      virtual ~c1();\n+};\n+class c4;\n+\n+struct c2\n+{\n+      virtual c4* func();\n+};\n+\n+struct c3 : c1, c2\n+{\n+      c4* func();\n+};\n+\n+c4* c3::func()\n+{\n+}\n+"}, {"sha": "fe0d33d8918a5f54df4ddc63be23fda51c15c3b8", "filename": "gcc/testsuite/gfortran.dg/pr23095.f", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3f4b7d835009918910989ea72092a11d5b21d9f/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr23095.f?ref=a3f4b7d835009918910989ea72092a11d5b21d9f", "patch": "@@ -0,0 +1,22 @@\n+      ! { dg-do compile { target i?86-*-* x86_64-*-* } }\n+      ! { dg-options \"-w -m32 -O2 -ffloat-store -fgcse-after-reload\" }\n+      !\n+      ! GCSE after reload made a stack register live across an abnormal\n+      ! edges for one of the computed jumps.  This bombed in reg-stack.\n+      function foo(n) \n+      real*8 foo \n+      integer ix, n, next \n+      real*8 xmax, absx \n+      foo  = 0.0d0 \n+      assign 20 to next \n+      do ix = 1,n \n+         go to next,(10, 30) \n+   10    assign 40 to next \n+         go to 40 \n+   20    if (absx .gt. 8.232d-11) go to 40 \n+   30    if (absx .le. xmax) go to 40 \n+         xmax = absx \n+   40    go to next,(10, 30) \n+      end do \n+      return \n+      end "}]}