{"sha": "06f0c25f2509d20b1245697670108fc3f990cdac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDZmMGMyNWYyNTA5ZDIwYjEyNDU2OTc2NzAxMDhmYzNmOTkwY2RhYw==", "commit": {"author": {"name": "Andrey Belevantsev", "email": "abel@ispras.ru", "date": "2010-11-08T08:11:38Z"}, "committer": {"name": "Andrey Belevantsev", "email": "abel@gcc.gnu.org", "date": "2010-11-08T08:11:38Z"}, "message": "re PR rtl-optimization/45352 (ICE: in reset_sched_cycles_in_current_ebb, at sel-sched.c:7058)\n\n        PR rtl-optimization/45352\n        * sel-sched.c (find_best_expr): Do not set pneed_stall when\n        the variable_issue hook is not implemented.\n        (fill_insns): Remove dead variable stall_iterations.\n        (init_seqno_1): Force EBB start for resetting sched cycles on any\n        successor blocks of the rescheduled region.\n        (sel_sched_region_1): Use bitmap_bit_p instead of bitmap_clear_bit.\n        (reset_sched_cycles_in_current_ebb): Add debug printing.\n        New variable issued_insns.  Advance state when we have issued\n        issue_rate insns.\n\n        gcc.dg/pr45352.c, gcc.dg/pr45352-1.c, gcc.dg/pr45352-2.c: New tests.\n        gcc.target/i386/pr45352.c, gcc.target/i386/pr45352-1.c,\n        gcc.target/i386/pr45352-2.c: New tests.\n\nFrom-SVN: r166429", "tree": {"sha": "0a12178a13a287eee67fcd25f83924627edae848", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0a12178a13a287eee67fcd25f83924627edae848"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/06f0c25f2509d20b1245697670108fc3f990cdac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f0c25f2509d20b1245697670108fc3f990cdac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06f0c25f2509d20b1245697670108fc3f990cdac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06f0c25f2509d20b1245697670108fc3f990cdac/comments", "author": {"login": "abonzo", "id": 20396542, "node_id": "MDQ6VXNlcjIwMzk2NTQy", "avatar_url": "https://avatars.githubusercontent.com/u/20396542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abonzo", "html_url": "https://github.com/abonzo", "followers_url": "https://api.github.com/users/abonzo/followers", "following_url": "https://api.github.com/users/abonzo/following{/other_user}", "gists_url": "https://api.github.com/users/abonzo/gists{/gist_id}", "starred_url": "https://api.github.com/users/abonzo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abonzo/subscriptions", "organizations_url": "https://api.github.com/users/abonzo/orgs", "repos_url": "https://api.github.com/users/abonzo/repos", "events_url": "https://api.github.com/users/abonzo/events{/privacy}", "received_events_url": "https://api.github.com/users/abonzo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b1d2d6b16e278aab10f457b61e2389cc4602b651", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1d2d6b16e278aab10f457b61e2389cc4602b651", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1d2d6b16e278aab10f457b61e2389cc4602b651"}], "stats": {"total": 262, "additions": 251, "deletions": 11}, "files": [{"sha": "cd870ec1f6dd8d4eeaa5499ba8c6800b7e2a93a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -1,3 +1,16 @@\n+2010-11-08  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\t PR rtl-optimization/45352\n+\t* sel-sched.c (find_best_expr): Do not set pneed_stall when\n+\tthe variable_issue hook is not implemented.\n+\t(fill_insns): Remove dead variable stall_iterations.\n+\t(init_seqno_1): Force EBB start for resetting sched cycles on any\n+\tsuccessor blocks of the rescheduled region.\n+\t(sel_sched_region_1): Use bitmap_bit_p instead of bitmap_clear_bit.\n+\t(reset_sched_cycles_in_current_ebb): Add debug printing.\n+\tNew variable issued_insns.  Advance state when we have issued\n+\tissue_rate insns.\n+\n 2010-11-08  Basile Starynkevitch  <basile@starynkevitch.net>\n \n \t* gengtype (main): Get here's position using POS_HERE macro for"}, {"sha": "8550fcc2bf4f11904d254ec8ba857ca27d152ee2", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -4403,7 +4403,8 @@ find_best_expr (av_set_t *av_vliw_ptr, blist_t bnds, fence_t fence,\n     {\n       can_issue_more = invoke_aftermath_hooks (fence, EXPR_INSN_RTX (best),\n                                                can_issue_more);\n-      if (can_issue_more == 0)\n+      if (targetm.sched.variable_issue\n+\t  && can_issue_more == 0)\n         *pneed_stall = 1;\n     }\n \n@@ -5511,7 +5512,7 @@ fill_insns (fence_t fence, int seqno, ilist_t **scheduled_insns_tailpp)\n       blist_t *bnds_tailp1, *bndsp;\n       expr_t expr_vliw;\n       int need_stall;\n-      int was_stall = 0, scheduled_insns = 0, stall_iterations = 0;\n+      int was_stall = 0, scheduled_insns = 0;\n       int max_insns = pipelining_p ? issue_rate : 2 * issue_rate;\n       int max_stall = pipelining_p ? 1 : 3;\n       bool last_insn_was_debug = false;\n@@ -5530,16 +5531,15 @@ fill_insns (fence_t fence, int seqno, ilist_t **scheduled_insns_tailpp)\n       do\n         {\n           expr_vliw = find_best_expr (&av_vliw, bnds, fence, &need_stall);\n-          if (!expr_vliw && need_stall)\n+          if (! expr_vliw && need_stall)\n             {\n               /* All expressions required a stall.  Do not recompute av sets\n                  as we'll get the same answer (modulo the insns between\n                  the fence and its boundary, which will not be available for\n-                 pipelining).  */\n-              gcc_assert (! expr_vliw && stall_iterations < 2);\n-              was_stall++;\n-\t      /* If we are going to stall for too long, break to recompute av\n+                 pipelining).\n+\t\t If we are going to stall for too long, break to recompute av\n \t\t sets and bring more insns for pipelining.  */\n+              was_stall++;\n \t      if (need_stall <= 3)\n \t\tstall_for_cycles (fence, need_stall);\n \t      else\n@@ -6712,6 +6712,8 @@ init_seqno_1 (basic_block bb, sbitmap visited_bbs, bitmap blocks_to_reschedule)\n \n \t  init_seqno_1 (succ, visited_bbs, blocks_to_reschedule);\n \t}\n+      else if (blocks_to_reschedule)\n+        bitmap_set_bit (forced_ebb_heads, succ->index);\n     }\n \n   for (insn = BB_END (bb); insn != note; insn = PREV_INSN (insn))\n@@ -6966,6 +6968,7 @@ reset_sched_cycles_in_current_ebb (void)\n   int last_clock = 0;\n   int haifa_last_clock = -1;\n   int haifa_clock = 0;\n+  int issued_insns = 0;\n   insn_t insn;\n \n   if (targetm.sched.init)\n@@ -7020,14 +7023,17 @@ reset_sched_cycles_in_current_ebb (void)\n           haifa_cost = cost;\n           after_stall = 1;\n         }\n-\n+      if (haifa_cost == 0\n+\t  && issued_insns == issue_rate)\n+\thaifa_cost = 1;\n       if (haifa_cost > 0)\n \t{\n \t  int i = 0;\n \n \t  while (haifa_cost--)\n \t    {\n \t      advance_state (curr_state);\n+\t      issued_insns = 0;\n               i++;\n \n \t      if (sched_verbose >= 2)\n@@ -7047,6 +7053,8 @@ reset_sched_cycles_in_current_ebb (void)\n \t    }\n \n \t  haifa_clock += i;\n+          if (sched_verbose >= 2)\n+            sel_print (\"haifa clock: %d\\n\", haifa_clock);\n \t}\n       else\n \tgcc_assert (haifa_cost == 0);\n@@ -7060,21 +7068,27 @@ reset_sched_cycles_in_current_ebb (void)\n \t\t\t\t\t    &sort_p))\n \t  {\n \t    advance_state (curr_state);\n+\t    issued_insns = 0;\n \t    haifa_clock++;\n \t    if (sched_verbose >= 2)\n               {\n                 sel_print (\"advance_state (dfa_new_cycle)\\n\");\n                 debug_state (curr_state);\n+\t\tsel_print (\"haifa clock: %d\\n\", haifa_clock + 1);\n               }\n           }\n \n       if (real_insn)\n \t{\n \t  cost = state_transition (curr_state, insn);\n+\t  issued_insns++;\n \n           if (sched_verbose >= 2)\n-            debug_state (curr_state);\n-\n+\t    {\n+\t      sel_print (\"scheduled insn %d, clock %d\\n\", INSN_UID (insn),\n+\t\t\t haifa_clock + 1);\n+              debug_state (curr_state);\n+\t    }\n \t  gcc_assert (cost < 0);\n \t}\n \n@@ -7518,7 +7532,7 @@ sel_sched_region_1 (void)\n                   continue;\n                 }\n \n-              if (bitmap_clear_bit (blocks_to_reschedule, bb->index))\n+              if (bitmap_bit_p (blocks_to_reschedule, bb->index))\n                 {\n                   flist_tail_init (new_fences);\n "}, {"sha": "28d05af805658286cee432f9bfecdaa2649ffe2f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -1,3 +1,10 @@\n+2010-11-08  Andrey Belevantsev  <abel@ispras.ru>\n+\n+\tPR rtl-optimization/45352\n+\tgcc.dg/pr45352.c, gcc.dg/pr45352-1.c, gcc.dg/pr45352-2.c: New tests.\n+\tgcc.target/i386/pr45352.c, gcc.target/i386/pr45352-1.c,\n+\tgcc.target/i386/pr45352-2.c: New tests. \n+\n 2010-11-06  Iain Sandoe  <iains@gcc.gnu.org>\n \n \tPR libobjc/36610"}, {"sha": "3b092cd13ed55032a063840abab6f736cab5e1fe", "filename": "gcc/testsuite/gcc.dg/pr45352-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-1.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O3 -fschedule-insns -fschedule-insns2 -fselective-scheduling2 -fsel-sched-pipelining -funroll-loops -fprefetch-loop-arrays\" } */\n+\n+void main1 (float *pa, float *pc)\n+{\n+  int i;\n+  float b[256];\n+  float c[256];\n+  for (i = 0; i < 256; i++)\n+    b[i] = c[i] = pc[i];\n+  for (i = 0; i < 256; i++)\n+    pa[i] = b[i] * c[i];\n+}"}, {"sha": "eed3847177c03f52be76b9f19f64c65a2bac6f5a", "filename": "gcc/testsuite/gcc.dg/pr45352-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352-2.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-O1 -freorder-blocks -fschedule-insns2 -funswitch-loops -fselective-scheduling2 -fsel-sched-pipelining -funroll-all-loops\" } */\n+void\n+foo1 (int *s)\n+{\n+  s[0] = s[1];\n+  while (s[6] - s[8])\n+    {\n+      s[6] -= s[8];\n+      if (s[8] || s[0])\n+\t{\n+\t  s[3] += s[0];\n+\t  s[4] += s[1];\n+\t}\n+      s[7]++;\n+    }\n+}"}, {"sha": "75f9a2137063a83ebfd3a5ce63d241636296b074", "filename": "gcc/testsuite/gcc.dg/pr45352.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr45352.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do compile { target powerpc*-*-* ia64-*-* x86_64-*-* } } */\n+/* { dg-options \"-Os -fselective-scheduling2 -fsel-sched-pipelining -fprofile-generate\" } */\n+\n+static inline void\n+bmp_iter_next (int *bi, int *bit_no)\n+{\n+  *bi >>= 1;\n+  *bit_no += 1;\n+}\n+\n+int bmp_iter_set (int *bi, int *bit_no);\n+void bitmap_initialize_stat (int, ...);\n+void bitmap_clear (void);\n+\n+void\n+df_md_alloc (int bi, int bb_index, void *bb_info)\n+{\n+  for (; bmp_iter_set (&bi, &bb_index); bmp_iter_next (&bi, &bb_index))\n+\n+    if (bb_info)\n+      bitmap_clear ();\n+    else\n+      bitmap_initialize_stat (0);\n+}"}, {"sha": "5cd1bd842d802c31ff87954b72ce82fe74a9bf40", "filename": "gcc/testsuite/gcc.target/i386/pr45352-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-1.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mtune=amdfam10 -O3 -fpeel-loops -fselective-scheduling2 -fsel-sched-pipelining -fPIC\" } */\n+\n+static int FIR_Tab_16[16][16];\n+\n+void\n+V_Pass_Avrg_16_C_ref (int *Dst, int *Src, int W, int BpS, int Rnd)\n+{\n+  while (W-- > 0)\n+    {\n+      int i, k;\n+      int Sums[16] = { };\n+      for (i = 0; i < 16; ++i)\n+\tfor (k = 0; k < 16; ++k)\n+\t  Sums[k] += FIR_Tab_16[i][k] * Src[i];\n+      for (i = 0; i < 16; ++i)\n+\tDst[i] = Sums[i] + Src[i];\n+    }\n+}"}, {"sha": "58713af869fbb85a8ec561023353c3649f4469f5", "filename": "gcc/testsuite/gcc.target/i386/pr45352-2.c", "status": "added", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352-2.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,108 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mtune=amdfam10 -fexpensive-optimizations -fgcse -foptimize-register-move -freorder-blocks -fschedule-insns2 -funswitch-loops -fgcse-las -fselective-scheduling2 -fsel-sched-pipelining -funroll-all-loops\" } */\n+\n+typedef char uint8_t;\n+typedef uint32_t;\n+typedef vo_frame_t;\n+struct vo_frame_s\n+{\n+    uint8_t base[3];\n+  int pitches[3];};\n+typedef struct\n+{\n+void\n+    (*proc_macro_block)\n+    (void);\n+}\n+xine_xvmc_t;\n+typedef struct\n+{\n+  uint8_t ref[2][3];\n+int pmv;\n+}\n+motion_t;\n+typedef struct\n+{\n+  uint32_t bitstream_buf;\n+  int bitstream_bits;\n+    uint8_t * bitstream_ptr;\n+    uint8_t dest[3];\n+  int pitches[3];\n+  int offset;\n+    motion_t b_motion;\n+    motion_t f_motion;\n+  int v_offset;\n+  int coded_picture_width;\n+  int picture_structure;\n+struct vo_frame_s *current_frame;}\n+picture_t;\n+typedef struct\n+{\n+int xvmc_last_slice_code;}\n+mpeg2dec_accel_t;\n+static bitstream_init (picture_t * picture, void *start)\n+{\n+  picture->bitstream_ptr = start;\n+}\n+static slice_xvmc_init (picture_t * picture, int code)\n+{\n+  int offset;\n+  struct vo_frame_s *forward_reference_frame;\n+  offset = picture->picture_structure == 2;\n+  picture->pitches[0] = picture->current_frame->pitches[0];\n+  picture->pitches[1] = picture->current_frame->pitches[1];\n+  if (picture)\n+    picture->f_motion.ref\n+      [0]\n+      [0]\n+      = forward_reference_frame->base + (offset ? picture->pitches[0] : 0);\n+  picture->f_motion.ref[0][1] = (offset);\n+  if (picture->picture_structure)\n+      picture->pitches[0] <<= picture->pitches[1] <<= 1;\n+  offset = 0;\n+  while (1)\n+    {\n+      if (picture->bitstream_buf >= 0x08000000)\n+\t  break;\n+      switch (picture->bitstream_buf >> 12)\n+\t{\n+\tcase 8:\n+\t  offset += 33;\n+\t\tpicture->bitstream_buf\n+\t\t  |=\n+\t\t  picture->bitstream_ptr[1] << picture->bitstream_bits;\n+\t}\n+    }\n+  picture->offset = (offset);\n+  while (picture->offset - picture->coded_picture_width >= 0)\n+    {\n+      picture->offset -= picture->coded_picture_width;\n+      if (picture->current_frame)\n+\t{\n+\t  picture->dest[0] += picture->pitches[0];\n+\t  picture->dest[1] += picture->pitches[1];\n+\t}\n+      picture->v_offset += 16;\n+    }\n+}\n+\n+void\n+mpeg2_xvmc_slice\n+  (mpeg2dec_accel_t * accel, picture_t * picture, int code, uint8_t buffer,int mba_inc)\n+{\n+  xine_xvmc_t * xvmc = bitstream_init (picture, buffer);\n+  slice_xvmc_init (picture, code);\n+    while (1)\n+      {\n+\tif (picture)\n+\t    break;\n+\tswitch (picture->bitstream_buf)\n+\t  {\n+\t  case 8:\n+\t    mba_inc += accel->xvmc_last_slice_code = code;\n+\t\t  xvmc->proc_macro_block   ();\n+\t    while (mba_inc)\n+\t      ;\n+\t  }\n+      }\n+}"}, {"sha": "ef710ce6b912538fa739deac5eefd897f3c17353", "filename": "gcc/testsuite/gcc.target/i386/pr45352.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/06f0c25f2509d20b1245697670108fc3f990cdac/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr45352.c?ref=06f0c25f2509d20b1245697670108fc3f990cdac", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3 -march=amdfam10 -fselective-scheduling2 -fsel-sched-pipelining -funroll-all-loops\" } */\n+\n+struct S\n+{\n+  struct\n+  {\n+    int i;\n+  } **p;\n+  int x;\n+  int y;\n+};\n+\n+extern int baz (void);\n+extern int bar (void *, int, int);\n+\n+void\n+foo (struct S *s)\n+{\n+  int i;\n+  for (i = 0; i < s->x; i++)\n+    bar (s->p[i], baz (), s->y);\n+  for (i = 0; i < s->x; i++)\n+    s->p[i]->i++;\n+}"}]}