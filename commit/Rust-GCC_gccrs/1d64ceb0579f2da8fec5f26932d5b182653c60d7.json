{"sha": "1d64ceb0579f2da8fec5f26932d5b182653c60d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2NGNlYjA1NzlmMmRhOGZlYzVmMjY5MzJkNWIxODI2NTNjNjBkNw==", "commit": {"author": {"name": "Senthil Kumar Selvaraj", "email": "senthil_kumar.selvaraj@atmel.com", "date": "2016-10-21T11:48:19Z"}, "committer": {"name": "Senthil Kumar Selvaraj", "email": "saaadhu@gcc.gnu.org", "date": "2016-10-21T11:48:19Z"}, "message": "Fix PR 71627 - unable to find a register to spill\n\nTweak find_valid_class_1 to consider a reg class if atleast one regno in\nthat class is ok.\n\nPreviously, even if no regno was in_hard_reg_set_p, the code goes ahead and\nconsiders rclass as valid. bad was set only if a regno was in the reg\nclass *and* HARD_REGNO_MODE_OK was false - if both were false, bad wasn't\nset and the reload got a wrong rclass. If that happened to be the best\none, this eventually lead to find_reg running out of registers to\nspill, because the chosen rclass wouldn't have enough regs.\n\nAlso, it expected every regno in rclass to be valid for mode \ni.e., if any regno fails HARD_REGNO_MODE_OK, it rejected the rclass. The\ncomments in the original commit for find_valid_class_1 say atleast one\nregno is ok. This was updated to say \"class which contains only\nregisters\" when in_hard_reg_set_p was introduced in place of just\nTEST_HARD_REG_BIT.\n\nThis commit fixes both of the above problems by not breaking out of the loop\non first unavailable regno. Instead, it computes the rclass size consisting\nof all regnos in that class valid for the current mode. \n\nIf that computed size is zero, the rclass would be skipped, as it won't \nbeat best_size. Otherwise, the computed size is used to choose the best \nrclass, instead of the static size from reg_class_size.\n\ngcc/\n\n2016-10-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n\n\tPR target/71627\n\t* reload.c (find_valid_class_1): Allow regclass if atleast one\n\tregno in regclass is ok. Compute and use rclass size based on\n\tactually available regnos for mode in rclass.\n\ngcc/testsuite/\n\n2016-10-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n\n\tPR target/71627\n\t* gcc.target/avr/pr71627.c: New test\n\nFrom-SVN: r241400", "tree": {"sha": "8cf31e690cce6c5f15e3af85acbc39198503c008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8cf31e690cce6c5f15e3af85acbc39198503c008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d64ceb0579f2da8fec5f26932d5b182653c60d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d64ceb0579f2da8fec5f26932d5b182653c60d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d64ceb0579f2da8fec5f26932d5b182653c60d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d64ceb0579f2da8fec5f26932d5b182653c60d7/comments", "author": null, "committer": {"login": "saaadhu", "id": 532256, "node_id": "MDQ6VXNlcjUzMjI1Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/532256?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saaadhu", "html_url": "https://github.com/saaadhu", "followers_url": "https://api.github.com/users/saaadhu/followers", "following_url": "https://api.github.com/users/saaadhu/following{/other_user}", "gists_url": "https://api.github.com/users/saaadhu/gists{/gist_id}", "starred_url": "https://api.github.com/users/saaadhu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saaadhu/subscriptions", "organizations_url": "https://api.github.com/users/saaadhu/orgs", "repos_url": "https://api.github.com/users/saaadhu/repos", "events_url": "https://api.github.com/users/saaadhu/events{/privacy}", "received_events_url": "https://api.github.com/users/saaadhu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "942c0db856c6c7e5a59ead26cf248721e068841f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/942c0db856c6c7e5a59ead26cf248721e068841f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/942c0db856c6c7e5a59ead26cf248721e068841f"}], "stats": {"total": 48, "additions": 36, "deletions": 12}, "files": [{"sha": "8f7a1b0cb258fde588d6852e31932c4be3754415", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d64ceb0579f2da8fec5f26932d5b182653c60d7", "patch": "@@ -1,3 +1,10 @@\n+2016-10-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/71627\n+\t* reload.c (find_valid_class_1): Allow regclass if atleast one\n+\tregno in regclass is ok. Compute and use rclass size based on\n+\tactually available regnos for mode in rclass.\n+\n 2016-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* config/sparc/sparc-modes.def (CCV): New."}, {"sha": "651755298ab828764c540f5032bb466762bb9083", "filename": "gcc/reload.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=1d64ceb0579f2da8fec5f26932d5b182653c60d7", "patch": "@@ -715,25 +715,23 @@ find_valid_class_1 (machine_mode outer ATTRIBUTE_UNUSED,\n \n   for (rclass = 1; rclass < N_REG_CLASSES; rclass++)\n     {\n-      int bad = 0;\n-      for (regno = 0; regno < FIRST_PSEUDO_REGISTER && !bad; regno++)\n-\t{\n-\t  if (in_hard_reg_set_p (reg_class_contents[rclass], mode, regno)\n-\t      && !HARD_REGNO_MODE_OK (regno, mode))\n-\t    bad = 1;\n-\t}\n-      \n-      if (bad)\n-\tcontinue;\n+      unsigned int computed_rclass_size = 0;\n+\n+      for (regno = 0; regno < FIRST_PSEUDO_REGISTER; regno++)\n+        {\n+          if (in_hard_reg_set_p (reg_class_contents[rclass], mode, regno)\n+              && (HARD_REGNO_MODE_OK (regno, mode)))\n+            computed_rclass_size++;\n+        }\n \n       cost = register_move_cost (outer, (enum reg_class) rclass, dest_class);\n \n-      if ((reg_class_size[rclass] > best_size\n+      if ((computed_rclass_size > best_size\n \t   && (best_cost < 0 || best_cost >= cost))\n \t  || best_cost > cost)\n \t{\n \t  best_class = (enum reg_class) rclass;\n-\t  best_size = reg_class_size[rclass];\n+\t  best_size = computed_rclass_size;\n \t  best_cost = register_move_cost (outer, (enum reg_class) rclass,\n \t\t\t\t\t  dest_class);\n \t}"}, {"sha": "771daa35ba318a570aa5db62c3c181428d737e67", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d64ceb0579f2da8fec5f26932d5b182653c60d7", "patch": "@@ -1,3 +1,8 @@\n+2016-10-21  Senthil Kumar Selvaraj  <senthil_kumar.selvaraj@atmel.com>\n+\n+\tPR target/71627\n+\t* gcc.target/avr/pr71627.c: New test\n+\n 2016-10-21  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/overflow-1.c: New test."}, {"sha": "eaef3d20863e4a0e37b609bf45497625d84fa82d", "filename": "gcc/testsuite/gcc.target/avr/pr71627.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71627.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d64ceb0579f2da8fec5f26932d5b182653c60d7/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71627.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Favr%2Fpr71627.c?ref=1d64ceb0579f2da8fec5f26932d5b182653c60d7", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+\n+extern volatile __memx const long  a, b, c, d, e, f;\n+extern volatile long result;\n+\n+extern void vfunc (const char*, ...);\n+\n+void foo (void)\n+{\n+\tresult = a + b + c + d + e + f;\n+\tvfunc (\"text\", a, b, c, d, e, f, result);\n+}"}]}