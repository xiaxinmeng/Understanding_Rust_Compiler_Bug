{"sha": "f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ5ZmFkMDBkOWVlNTZjOTg4OTA0ZDJmYjNlOTdiNzFlZTA5MThkMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2000-07-17T21:35:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-17T21:35:46Z"}, "message": "typeck.c (mark_addressable): Never set TREE_USED.\n\n        * typeck.c (mark_addressable): Never set TREE_USED.\n        * call.c (build_call): Don't abort on calls to library functions\n        that have been declared normally.\n\n        * typeck.c (build_binary_op): Fix grammar in warning.\n\n        * exception.cc (__eh_free): Fix prototype.\n\n        * decl2.c (finish_decl_parsing): Handle TEMPLATE_ID_EXPR.\n\n        * decl.c (pushdecl): Handle seeing an OVERLOAD in\n        IDENTIFIER_NAMESPACE_VALUE.\n\nFrom-SVN: r35104", "tree": {"sha": "5cfaec5acedc93cb3444bfca32da7eca809fae6d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cfaec5acedc93cb3444bfca32da7eca809fae6d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c12c6a5618dd43a6d3023776d1aa7117ebfc14d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12c6a5618dd43a6d3023776d1aa7117ebfc14d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12c6a5618dd43a6d3023776d1aa7117ebfc14d8"}], "stats": {"total": 50, "additions": 29, "deletions": 21}, "files": [{"sha": "6a592a46f90d1987cf75fe9444ea40344831d82e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -1,3 +1,18 @@\n+2000-07-17  Jason Merrill  <jason@redhat.com>\n+\n+\t* typeck.c (mark_addressable): Never set TREE_USED.\n+\t* call.c (build_call): Don't abort on calls to library functions\n+\tthat have been declared normally.\n+\n+\t* typeck.c (build_binary_op): Fix grammar in warning.\n+\n+\t* exception.cc (__eh_free): Fix prototype.\n+\n+\t* decl2.c (finish_decl_parsing): Handle TEMPLATE_ID_EXPR.\n+\n+\t* decl.c (pushdecl): Handle seeing an OVERLOAD in \n+\tIDENTIFIER_NAMESPACE_VALUE.\n+\n 2000-07-14  Zack Weinberg  <zack@wolery.cumb.org>\n \n \t* .cvsignore: parse.h and parse.c have no cp- prefix."}, {"sha": "4a68f57d9d9eb127ec762b4f34e17c42ef9a6371", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -397,8 +397,11 @@ build_call (function, parms)\n \n   if (decl && ! TREE_USED (decl))\n     {\n-      /* We invoke build_call directly for several library functions.  */\n-      if (DECL_ARTIFICIAL (decl))\n+      /* We invoke build_call directly for several library functions.\n+\t These may have been declared normally if we're building libgcc,\n+\t so we can't just check DECL_ARTIFICIAL.  */\n+      if (DECL_ARTIFICIAL (decl)\n+\t  || !strncmp (IDENTIFIER_POINTER (DECL_NAME (decl)), \"__\", 2))\n \tmark_used (decl);\n       else\n \tmy_friendly_abort (990125);"}, {"sha": "f8c5ff297082616ae2cf41baced630d625116753", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -4019,15 +4019,12 @@ pushdecl (x)\n \t{\n \t  tree decl;\n \n-\t  if (IDENTIFIER_NAMESPACE_VALUE (name) != NULL_TREE\n-\t      && IDENTIFIER_NAMESPACE_VALUE (name) != error_mark_node\n-\t      && (DECL_EXTERNAL (IDENTIFIER_NAMESPACE_VALUE (name))\n-\t\t  || TREE_PUBLIC (IDENTIFIER_NAMESPACE_VALUE (name))))\n-\t    decl = IDENTIFIER_NAMESPACE_VALUE (name);\n-\t  else\n-\t    decl = NULL_TREE;\n+\t  decl = IDENTIFIER_NAMESPACE_VALUE (name);\n+\t  if (decl && TREE_CODE (decl) == OVERLOAD)\n+\t    decl = OVL_FUNCTION (decl);\n \n-\t  if (decl\n+\t  if (decl && decl != error_mark_node\n+\t      && (DECL_EXTERNAL (decl) || TREE_PUBLIC (decl))\n \t      /* If different sort of thing, we already gave an error.  */\n \t      && TREE_CODE (decl) == TREE_CODE (x)\n \t      && !same_type_p (TREE_TYPE (x), TREE_TYPE (decl)))"}, {"sha": "64a09c0be44f188468d3103a2c86d35150ef7c98", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -4310,6 +4310,8 @@ finish_decl_parsing (decl)\n       /* For attribute handling.  */\n       TREE_VALUE (decl) = finish_decl_parsing (TREE_VALUE (decl));\n       return decl;\n+    case TEMPLATE_ID_EXPR:\n+      return decl;\n     default:\n       my_friendly_abort (5);\n       return NULL_TREE;"}, {"sha": "886915c823bb5554ea93f59761ed7d5884193679", "filename": "gcc/cp/exception.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fexception.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Fexception.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexception.cc?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -120,7 +120,7 @@ extern \"C\" cp_eh_info **__get_eh_info (); \t// actually void **\n \n /* Exception allocate and free, defined in libgcc2. */\n extern \"C\" void *__eh_alloc(size_t);\n-extern \"C\" void __eh_free();\n+extern \"C\" void __eh_free(void *);\n \n /* Is P the type_info node for a pointer of some kind?  */\n "}, {"sha": "c85e3d16f96cb1114eb1b2257a14a4022d5f7b05", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f49fad00d9ee56c988904d2fb3e97b71ee0918d3/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=f49fad00d9ee56c988904d2fb3e97b71ee0918d3", "patch": "@@ -3963,7 +3963,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t\t\t\t\t\tsigned_type (result_type)))))\n \t    /* OK */;\n \t  else\n-\t    warning (\"comparison between a signed and an unsigned integer expressions\");\n+\t    warning (\"comparison between signed and unsigned integer expressions\");\n \n \t  /* Warn if two unsigned values are being compared in a size\n \t     larger than their original size, and one (and only one) is the\n@@ -4969,21 +4969,12 @@ mark_addressable (exp)\n \t  cp_warning (\"address requested for `%D', which is declared `register'\",\n \t\t      x);\n \tTREE_ADDRESSABLE (x) = 1;\n-\tTREE_USED (x) = 1;\n \tif (cfun && expanding_p)\n \t  put_var_into_stack (x);\n \treturn 1;\n \n       case FUNCTION_DECL:\n-\t/* We have to test both conditions here.  The first may be\n-\t   non-zero in the case of processing a default function.  The\n-\t   second may be non-zero in the case of a template function.  */\n-\tif (DECL_LANG_SPECIFIC (x)\n-\t    && DECL_TEMPLATE_INFO (x) \n-\t    && !DECL_TEMPLATE_SPECIALIZATION (x))\n-\t  mark_used (x);\n \tTREE_ADDRESSABLE (x) = 1;\n-\tTREE_USED (x) = 1;\n \tTREE_ADDRESSABLE (DECL_ASSEMBLER_NAME (x)) = 1;\n \treturn 1;\n "}]}