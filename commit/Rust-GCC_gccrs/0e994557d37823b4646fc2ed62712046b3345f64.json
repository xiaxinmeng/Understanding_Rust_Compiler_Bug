{"sha": "0e994557d37823b4646fc2ed62712046b3345f64", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGU5OTQ1NTdkMzc4MjNiNDY0NmZjMmVkNjI3MTIwNDZiMzM0NWY2NA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2005-05-24T22:53:43Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2005-05-24T22:53:43Z"}, "message": "[multiple changes]\n\n2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/25_algorithms/equal.cc: Move to...\n\t* testsuite/25_algorithms/equal: ... here.\n\t* testsuite/25_algorithms/lower_bound.cc: Move to...\n\t* testsuite/25_algorithms/lower_bound: ... here.\n\n2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n\n        Port from libstdcxx_so_7-branch:\n\t2005-20-05  Chris Jefferson  <chris@bubblescope.net>\n\n\t* testsuite/25_algorithms/heap.cc: Move to...\n\t* testsuite/25_algorithms/heap/heap.cc: ...here.\n\t* testsuite/25_algorithms/partition.cc: Move to...\n\t* testsuite/25_algorithms/partition/partition.cc: ...here.\n\n\t2005-03-29  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* testsuite/25_algorithms/includes/1.cc: Add tests.\n\t* testsuite/25_algorithms/search/1.cc: Likewise.\n\t* testsuite/25_algorithms/unique_copy/1.cc: Likewise.\n\t* testsuite/25_algorithms/swap_ranges/1.cc: New.\n\t* testsuite/25_algorithms/swap_ranges/check_type.cc: New.\n\t* testsuite/25_algorithms/rotate.cc: Move to...\n\t* testsuite/25_algorithms/rotate/rotate.cc: ... here.\n\t* testsuite/25_algorithms/rotate/1.cc: New.\n\t* testsuite/25_algorithms/rotate/check_type.cc: New.\n\t* testsuite/25_algorithms/search_n/iterator.cc: Fix typo.\n\n\t2005-03-14  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* include/bits/stl_algo.h (replace_copy, replace_copy_if):\n\tDon't assume that __new_value and *__first are convertible to\n\teach other.\n\n\t* testsuite/25_algorithms/find/1.cc: New.\n\t* testsuite/25_algorithms/find/check_type.cc: New.\n\t* testsuite/25_algorithms/find_if/1.cc: New.\n\t* testsuite/25_algorithms/find_if/check_type.cc: New.\n\t* testsuite/25_algorithms/replace/1.cc: New.\n\t* testsuite/25_algorithms/replace/check_type.cc: New.\n\t* testsuite/25_algorithms/replace_if/1.cc: New.\n\t* testsuite/25_algorithms/replace_if/check_type.cc: New.\n\t* testsuite/25_algorithms/replace_copy/1.cc: New.\n\t* testsuite/25_algorithms/replace_copy/check_type.cc: New.\n\t* testsuite/25_algorithms/replace_copy_if/1.cc: New.\n\t* testsuite/25_algorithms/replace_copy_if/check_type.cc: New.\n\t* testsuite/25_algorithms/remove/1.cc: New.\n\t* testsuite/25_algorithms/remove/check_type.cc: New.\n\t* testsuite/25_algorithms/remove_if/1.cc: New.\n\t* testsuite/25_algorithms/remove_if/check_type.cc: New.\n\t* testsuite/25_algorithms/count/1.cc: New.\n\t* testsuite/25_algorithms/count/check_type.cc: New.\n\t* testsuite/25_algorithms/count_if/1.cc: New.\n\t* testsuite/25_algorithms/count_if/check_type.cc: New.\n\n\t2005-02-27  Christopher Jefferson  <chris@bubblescope.net>\n        \t    Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/ext/is_heap/check_type.cc: New.\n\n\t2005-02-27  Paolo Carlini  <pcarlini@suse.de>\n\n\t* testsuite/ext/is_heap/1.cc: New.\n\n\t2005-02-01  Christopher Jefferson  <chris@bubblescope.net>\n\n\t* testsuite/ext/median.cc: New.\n\t* testsuite/25_algorithms/adjacent_find/1.cc: New.\n\t* testsuite/25_algorithms/adjacent_find/check_type.cc: New.\n\t* testsuite/25_algorithms/search/1.cc: New.\n\t* testsuite/25_algorithms/search/check_type.cc: New.\n\t* testsuite/25_algorithms/unique_copy/1.cc: New.\n\t* testsuite/25_algorithms/unique_copy/check_type.cc: New.\n\t* testsuite/25_algorithms/partial_sort/1.cc: New.\n\t* testsuite/25_algorithms/partial_sort/check_type.cc: New.\n\t* testsuite/25_algorithms/partial_sort_copy/1.cc: New.\n\t* testsuite/25_algorithms/partial_sort_copy/check_type.cc: New.\n\t* testsuite/25_algorithms/lower_bound/1.cc: New.\n\t* testsuite/25_algorithms/lower_bound/check_type.cc: New.\n\t* testsuite/25_algorithms/upper_bound/1.cc: New.\n\t* testsuite/25_algorithms/upper_bound/check_type.cc: New.\n\t* testsuite/25_algorithms/merge/1.cc: New.\n\t* testsuite/25_algorithms/merge/check_type.cc: New.\n\t* testsuite/25_algorithms/inplace_merge/1.cc: New.\n\t* testsuite/25_algorithms/inplace_merge/check_type.cc: New.\n\t* testsuite/25_algorithms/stable_sort/1.cc: New.\n\t* testsuite/25_algorithms/stable_sort/check_type.cc: New.\n\t* testsuite/25_algorithms/nth_element/1.cc: New.\n\t* testsuite/25_algorithms/nth_element/check_type.cc: New.\n\t* testsuite/25_algorithms/equal_range/1.cc: New.\n\t* testsuite/25_algorithms/equal_range/check_type.cc: New.\n\t* testsuite/25_algorithms/binary_search/1.cc: New.\n\t* testsuite/25_algorithms/binary_search/check_type.cc: New.\n\t* testsuite/25_algorithms/includes/1.cc: New.\n\t* testsuite/25_algorithms/includes/check_type.cc: New.\n\t* testsuite/25_algorithms/set_union/1.cc: New.\n\t* testsuite/25_algorithms/set_union/check_type.cc: New.\n\t* testsuite/25_algorithms/set_intersection/1.cc: New.\n\t* testsuite/25_algorithms/set_intersection/check_type.cc: New.\n\t* testsuite/25_algorithms/set_difference/1.cc: New.\n\t* testsuite/25_algorithms/set_difference/check_type.cc: New.\n\t* testsuite/25_algorithms/set_symmetric_difference/1.cc: New.\n\t* testsuite/25_algorithms/set_symmetric_difference/check_type.cc: New.\n\t* testsuite/25_algorithms/min_element/1.cc: New.\n\t* testsuite/25_algorithms/min_element/check_type.cc: New.\n\t* testsuite/25_algorithms/max_element/1.cc: New.\n\t* testsuite/25_algorithms/max_element/check_type.cc: New.\n\t* testsuite/25_algorithms/prev_permutation/1.cc: New.\n\t* testsuite/25_algorithms/prev_permutation/check_type.cc: New.\n\t* testsuite/25_algorithms/next_permutation/1.cc: New.\n\t* testsuite/25_algorithms/next_permutation/check_type.cc: New.\n\t* testsuite/25_algorithms/find_first_of/1.cc: New.\n\t* testsuite/25_algorithms/find_first_of/check_type.cc: New.\n\t* testsuite/25_algorithms/find_end/1.cc: New.\n\t* testsuite/25_algorithms/find_end/check_type.cc: New.\n\t* testsuite/25_algorithms/equal/check_type.cc: Insert iterator type.\n\t* testsuite/25_algorithms/lexicographical_compare/check_type.cc:\n\tLikewise.\n\n\t2005-01-10  Christopher Jefferson <chris@bubblescope.net>\n\n\t* testsuite/25_algorithms/lexicographical_compare/check_type.cc: New.\n\t* testsuite/25_algorithms/lexicographical_compare/1.cc: Likewise.\n\t* testsuite/25_algorithms/mismatch/check_type.cc: Likewise.\n\t* testsuite/25_algorithms/mismatch/1.cc: Likewise.\n\t* testsuite/25_algorithms/equal/check_type.cc: New.\n\t* testsuite/25_algorithms/equal/1.cc: New.\n\nFrom-SVN: r100127", "tree": {"sha": "6d9923668cd2aa984ee4820112915784284e282d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d9923668cd2aa984ee4820112915784284e282d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e994557d37823b4646fc2ed62712046b3345f64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e994557d37823b4646fc2ed62712046b3345f64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e994557d37823b4646fc2ed62712046b3345f64", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e994557d37823b4646fc2ed62712046b3345f64/comments", "author": null, "committer": null, "parents": [{"sha": "58393038d74a065fe2dd2980cf2e3e344f4f261b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58393038d74a065fe2dd2980cf2e3e344f4f261b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58393038d74a065fe2dd2980cf2e3e344f4f261b"}], "stats": {"total": 5222, "additions": 5219, "deletions": 3}, "files": [{"sha": "d84060a01d4472a89bc587f0ece7d82ceae6744f", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -1,3 +1,133 @@\n+2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/25_algorithms/equal.cc: Move to...\n+\t* testsuite/25_algorithms/equal: ... here.\n+\t* testsuite/25_algorithms/lower_bound.cc: Move to...\n+\t* testsuite/25_algorithms/lower_bound: ... here.\n+\n+2005-05-24  Paolo Carlini  <pcarlini@suse.de>\n+\n+        Port from libstdcxx_so_7-branch:\n+\t2005-20-05  Chris Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/25_algorithms/heap.cc: Move to...\n+\t* testsuite/25_algorithms/heap/heap.cc: ...here.\n+\t* testsuite/25_algorithms/partition.cc: Move to...\n+\t* testsuite/25_algorithms/partition/partition.cc: ...here.\n+\n+\t2005-03-29  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/25_algorithms/includes/1.cc: Add tests.\n+\t* testsuite/25_algorithms/search/1.cc: Likewise.\n+\t* testsuite/25_algorithms/unique_copy/1.cc: Likewise.\n+\t* testsuite/25_algorithms/swap_ranges/1.cc: New.\n+\t* testsuite/25_algorithms/swap_ranges/check_type.cc: New.\n+\t* testsuite/25_algorithms/rotate.cc: Move to...\n+\t* testsuite/25_algorithms/rotate/rotate.cc: ... here.\n+\t* testsuite/25_algorithms/rotate/1.cc: New.\n+\t* testsuite/25_algorithms/rotate/check_type.cc: New.\n+\t* testsuite/25_algorithms/search_n/iterator.cc: Fix typo.\n+\n+\t2005-03-14  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* include/bits/stl_algo.h (replace_copy, replace_copy_if):\n+\tDon't assume that __new_value and *__first are convertible to\n+\teach other.\t\n+\n+\t* testsuite/25_algorithms/find/1.cc: New.\n+\t* testsuite/25_algorithms/find/check_type.cc: New.\n+\t* testsuite/25_algorithms/find_if/1.cc: New.\n+\t* testsuite/25_algorithms/find_if/check_type.cc: New.\n+\t* testsuite/25_algorithms/replace/1.cc: New.\n+\t* testsuite/25_algorithms/replace/check_type.cc: New.\n+\t* testsuite/25_algorithms/replace_if/1.cc: New.\n+\t* testsuite/25_algorithms/replace_if/check_type.cc: New.\n+\t* testsuite/25_algorithms/replace_copy/1.cc: New.\n+\t* testsuite/25_algorithms/replace_copy/check_type.cc: New.\n+\t* testsuite/25_algorithms/replace_copy_if/1.cc: New.\n+\t* testsuite/25_algorithms/replace_copy_if/check_type.cc: New.\n+\t* testsuite/25_algorithms/remove/1.cc: New.\n+\t* testsuite/25_algorithms/remove/check_type.cc: New.\n+\t* testsuite/25_algorithms/remove_if/1.cc: New.\n+\t* testsuite/25_algorithms/remove_if/check_type.cc: New.\n+\t* testsuite/25_algorithms/count/1.cc: New.\n+\t* testsuite/25_algorithms/count/check_type.cc: New.\n+\t* testsuite/25_algorithms/count_if/1.cc: New.\n+\t* testsuite/25_algorithms/count_if/check_type.cc: New.\n+\n+\t2005-02-27  Christopher Jefferson  <chris@bubblescope.net>\n+        \t    Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/ext/is_heap/check_type.cc: New.\n+\t\n+\t2005-02-27  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* testsuite/ext/is_heap/1.cc: New.\n+\n+\t2005-02-01  Christopher Jefferson  <chris@bubblescope.net>\n+\n+\t* testsuite/ext/median.cc: New.\n+\t* testsuite/25_algorithms/adjacent_find/1.cc: New.\n+\t* testsuite/25_algorithms/adjacent_find/check_type.cc: New.\n+\t* testsuite/25_algorithms/search/1.cc: New.\n+\t* testsuite/25_algorithms/search/check_type.cc: New.\n+\t* testsuite/25_algorithms/unique_copy/1.cc: New.\n+\t* testsuite/25_algorithms/unique_copy/check_type.cc: New.\n+\t* testsuite/25_algorithms/partial_sort/1.cc: New.\n+\t* testsuite/25_algorithms/partial_sort/check_type.cc: New.\n+\t* testsuite/25_algorithms/partial_sort_copy/1.cc: New.\n+\t* testsuite/25_algorithms/partial_sort_copy/check_type.cc: New.\n+\t* testsuite/25_algorithms/lower_bound/1.cc: New.\n+\t* testsuite/25_algorithms/lower_bound/check_type.cc: New.\n+\t* testsuite/25_algorithms/upper_bound/1.cc: New.\n+\t* testsuite/25_algorithms/upper_bound/check_type.cc: New.\n+\t* testsuite/25_algorithms/merge/1.cc: New.\n+\t* testsuite/25_algorithms/merge/check_type.cc: New.\n+\t* testsuite/25_algorithms/inplace_merge/1.cc: New.\n+\t* testsuite/25_algorithms/inplace_merge/check_type.cc: New.\n+\t* testsuite/25_algorithms/stable_sort/1.cc: New.\n+\t* testsuite/25_algorithms/stable_sort/check_type.cc: New.\n+\t* testsuite/25_algorithms/nth_element/1.cc: New.\n+\t* testsuite/25_algorithms/nth_element/check_type.cc: New.\n+\t* testsuite/25_algorithms/equal_range/1.cc: New.\n+\t* testsuite/25_algorithms/equal_range/check_type.cc: New.\n+\t* testsuite/25_algorithms/binary_search/1.cc: New.\n+\t* testsuite/25_algorithms/binary_search/check_type.cc: New.\n+\t* testsuite/25_algorithms/includes/1.cc: New.\n+\t* testsuite/25_algorithms/includes/check_type.cc: New.\n+\t* testsuite/25_algorithms/set_union/1.cc: New.\n+\t* testsuite/25_algorithms/set_union/check_type.cc: New.\n+\t* testsuite/25_algorithms/set_intersection/1.cc: New.\n+\t* testsuite/25_algorithms/set_intersection/check_type.cc: New.\n+\t* testsuite/25_algorithms/set_difference/1.cc: New.\n+\t* testsuite/25_algorithms/set_difference/check_type.cc: New.\n+\t* testsuite/25_algorithms/set_symmetric_difference/1.cc: New.\n+\t* testsuite/25_algorithms/set_symmetric_difference/check_type.cc: New.\t\n+\t* testsuite/25_algorithms/min_element/1.cc: New.\n+\t* testsuite/25_algorithms/min_element/check_type.cc: New.\n+\t* testsuite/25_algorithms/max_element/1.cc: New.\n+\t* testsuite/25_algorithms/max_element/check_type.cc: New.\n+\t* testsuite/25_algorithms/prev_permutation/1.cc: New.\n+\t* testsuite/25_algorithms/prev_permutation/check_type.cc: New.\n+\t* testsuite/25_algorithms/next_permutation/1.cc: New.\n+\t* testsuite/25_algorithms/next_permutation/check_type.cc: New.\n+\t* testsuite/25_algorithms/find_first_of/1.cc: New.\n+\t* testsuite/25_algorithms/find_first_of/check_type.cc: New.\n+\t* testsuite/25_algorithms/find_end/1.cc: New.\n+\t* testsuite/25_algorithms/find_end/check_type.cc: New.\n+\t* testsuite/25_algorithms/equal/check_type.cc: Insert iterator type.\n+\t* testsuite/25_algorithms/lexicographical_compare/check_type.cc:\n+\tLikewise.\n+\n+\t2005-01-10  Christopher Jefferson <chris@bubblescope.net>\n+\n+\t* testsuite/25_algorithms/lexicographical_compare/check_type.cc: New.\n+\t* testsuite/25_algorithms/lexicographical_compare/1.cc: Likewise.\n+\t* testsuite/25_algorithms/mismatch/check_type.cc: Likewise.\n+\t* testsuite/25_algorithms/mismatch/1.cc: Likewise.\n+\t* testsuite/25_algorithms/equal/check_type.cc: New.\n+\t* testsuite/25_algorithms/equal/1.cc: New.\n+\n 2005-05-24  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* include/bits/allocator.h: Change ___glibcxx_base_allocator to"}, {"sha": "ee73321f6e2e5b27e42a233f437ea20008d9ce1f", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -916,7 +916,10 @@ namespace std\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for ( ; __first != __last; ++__first, ++__result)\n-\t*__result = *__first == __old_value ? __new_value : *__first;\n+\tif (*__first == __old_value)\n+\t  *__result = __new_value;\n+\telse\n+\t  *__result = *__first;\n       return __result;\n     }\n \n@@ -950,7 +953,10 @@ namespace std\n       __glibcxx_requires_valid_range(__first, __last);\n \n       for ( ; __first != __last; ++__first, ++__result)\n-\t*__result = __pred(*__first) ? __new_value : *__first;\n+\tif (__pred(*__first))\n+\t  *__result = __new_value;\n+\telse\n+\t  *__result = *__first;\n       return __result;\n     }\n "}, {"sha": "fcce4b56596d0ae8b5f9a2deaacc4a0110576622", "filename": "libstdc++-v3/testsuite/25_algorithms/adjacent_find/1.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,67 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.5 [lib.alg.adjacent_find]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::adjacent_find;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array[] = {0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1};\n+\n+void \n+test01()\n+{\n+  Container con(array, array);\n+  VERIFY(adjacent_find(con.begin(), con.end()).ptr == array);\n+}  \n+\n+void \n+test02()\n+{\n+  Container con(array, array + 1);\n+  VERIFY(adjacent_find(con.begin(), con.end()).ptr == array + 1);\n+}\n+\n+void \n+test03()\n+{\n+  Container con(array, array + 2);\n+  VERIFY(adjacent_find(con.begin(), con.end()).ptr == array);\n+}\n+\n+void \n+test04()\n+{\n+  Container con(array + 1, array + 10);\n+  VERIFY(adjacent_find(con.begin(), con.end()).ptr == array + 10);\n+}\n+\n+int \n+main()\n+{\n+  test01();\n+  test02();\n+  test03();\n+  test04();\n+}"}, {"sha": "65f725df17938824abf2fe81a0937d301a0dc2bc", "filename": "libstdc++-v3/testsuite/25_algorithms/adjacent_find/check_type.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fadjacent_find%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.5 [lib.alg.adjacent_find]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool operator==(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool predicate(const X&, const X&) {return true;}\n+\n+forward_iterator_wrapper<S> \n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::adjacent_find(s, s); }\n+\n+forward_iterator_wrapper<X> \n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::adjacent_find(x, x, predicate); }"}, {"sha": "5ee44419b8b3e90038de57648f3c25fcc88f86b0", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/1.cc", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,54 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.4 [lib.binary.search]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::binary_search;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int array[] = {0};\n+  Container con(array, array);\n+  VERIFY(!binary_search(con.begin(), con.end(), 1));\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {0, 2, 4, 6, 8};\n+  Container con(array, array + 5);\n+  for(int i = 0; i < 10; i += 2)\n+    VERIFY(binary_search(con.begin(), con.end(), i));\n+  for(int i = -1; i < 11; i += 2)\n+    VERIFY(!binary_search(con.begin(), con.end(), i));\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "853a6d2ee39da4a2d4f92cdccb6ba1f059acdf96", "filename": "libstdc++-v3/testsuite/25_algorithms/binary_search/check_type.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fbinary_search%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.4 [lib.binary.search]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool predicate(const X&, const X&) {return true;}\n+\n+bool\n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::binary_search(s, s, *s); }\n+\n+bool\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::binary_search(x, x, *x, predicate); }"}, {"sha": "dec293cfc3ce697152b9b14e12dc49f421c69881", "filename": "libstdc++-v3/testsuite/25_algorithms/count/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.6 count\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  VERIFY(std::count(con.begin(), con.end(), 1) == 0);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  VERIFY(std::count(con.begin(), con.end(), 1) == 0);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  VERIFY(std::count(con.begin(), con.end(), 1) == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "389c8a084599319dc798ccada35d56ddb4f4e144", "filename": "libstdc++-v3/testsuite/25_algorithms/count/check_type.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+struct Y { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+operator==(const X&, const Y&)\n+{ return true; }\n+\n+typedef std::iterator_traits<input_iterator_wrapper<X> >::difference_type\n+\tdiff_type;\n+\n+diff_type\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::count(begin, end, Y()); }"}, {"sha": "d5e626f4754d2ca29dbbebfb1549e0c4c93f0100", "filename": "libstdc++-v3/testsuite/25_algorithms/count_if/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.6 count_if\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  VERIFY(std::count_if(con.begin(), con.end(), \n+\t\t       predicate) == 0);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  VERIFY(std::count_if(con.begin(), con.end(), \n+\t\t       predicate) == 0);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  VERIFY(std::count_if(con.begin(), con.end(),\n+\t\t       predicate) == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "8530985b93564f9e16c9601fcd1172ebb258740e", "filename": "libstdc++-v3/testsuite/25_algorithms/count_if/check_type.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fcount_if%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+typedef std::iterator_traits<input_iterator_wrapper<X> >::difference_type\n+\tdiff_type;\n+\n+diff_type\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::count_if(begin, end, pred_function); }\n+\n+diff_type\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::count_if(begin, end, pred_obj()); }"}, {"sha": "9a17c0276ae086515c789a63658c7478db17a562", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/1.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array1[] = {0, 1};\n+int array2[] = {1, 0};\n+int array3[] = {1, 0};\n+\n+void test1()\n+{\n+  Container con1(array1, array1);\n+  Container con2(array2, array2);\n+  VERIFY( std::equal(con1.begin(), con1.end(), con2.begin()) );\n+}\n+\n+void test2()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( !std::equal(con2.begin(), con2.end(), con1.begin()) );\n+}\n+\n+void test3()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( !std::equal(con2.begin(), con2.end(), con1.begin()) );\n+}\n+\n+void test4()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( !std::equal(con1.begin(), con1.end(), con2.begin()) );\n+}\n+\n+void test5()\n+{\n+  Container con3(array3, array3 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::equal(con3.begin(), con3.end(), con2.begin()) );\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}"}, {"sha": "434d722e9a6b9192f1541b011e06a4e300504f9d", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/check_type.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.8 [lib.alg.equal]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+\n+struct Lhs1 { };\n+\n+struct Rhs1 { };\n+\n+bool operator==(const Lhs1&, const Rhs1&) {return true;}\n+\n+struct Lhs2 { };\n+\n+struct Rhs2 { };\n+\n+bool \n+predicate(const Lhs2&, const Rhs2&) {return true;}\n+\n+bool \n+test1(input_iterator_wrapper<Lhs1>& lhs1,\n+      input_iterator_wrapper<Rhs1>& rhs1)\n+{ return std::equal(lhs1, lhs1, rhs1); }\n+\n+bool \n+test2(input_iterator_wrapper<Lhs2>& lhs2,\n+      input_iterator_wrapper<Rhs2>& rhs2)\n+{ return std::equal(lhs2, lhs2, rhs2, predicate); }"}, {"sha": "abb0446be210927c564339c4a0723e504ba2139f", "filename": "libstdc++-v3/testsuite/25_algorithms/equal/equal.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fequal.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fequal.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal%2Fequal.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/equal.cc"}, {"sha": "9a843e7e421fdb7d20ca3fc2c5b97962353342c7", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/1.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.3 [lib.equal.range]\n+\n+#include <algorithm>\n+#include <utility>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::equal_range;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2};\n+\n+void \n+test1()\n+{\n+  for(int i = 0; i < 6; ++i)\n+    for(int j = 6; j < 12; ++j)\n+      {\n+\tContainer con(array + i, array + j);\n+        VERIFY(equal_range(con.begin(), con.end(), 1).first.ptr ==\n+\t       array + std::max(i, 4));\n+        VERIFY(equal_range(con.begin(), con.end(), 1).second.ptr ==\n+               array + std::min(j, 8));\n+      }\n+}\n+\n+void\n+test2()\n+{\n+  int array[]={0, 0, 2, 2, 2};\n+  Container con(array, array + 5);\n+  VERIFY(equal_range(con.begin(), con.end(), 1).first.ptr ==\n+\t array + 2);\n+  VERIFY(equal_range(con.begin(), con.end(), 1).second.ptr ==\n+\t array + 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "6a299c7081b3f0c5328384c8390fa8bc8d286602", "filename": "libstdc++-v3/testsuite/25_algorithms/equal_range/check_type.cc", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fequal_range%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,43 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.3 [lib.equal.range]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <utility>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool predicate(const X&, const X&) {return true;}\n+\n+std::pair<forward_iterator_wrapper<S>, forward_iterator_wrapper<S> > \n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::equal_range(s, s, *s); }\n+\n+std::pair<forward_iterator_wrapper<X>, forward_iterator_wrapper<X> >\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::equal_range(x, x, *x, predicate); }"}, {"sha": "19eb177c770dda676fab634d72b9dea37af2a888", "filename": "libstdc++-v3/testsuite/25_algorithms/find/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  VERIFY(std::find(con.begin(), con.end(), 1).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  VERIFY(std::find(con.begin(), con.end(), 1).ptr == array + 1);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  VERIFY(std::find(con.begin(), con.end(), 1).ptr == array + 3);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "40bfee8ddca13f1d41d115a19934386eb01f3e95", "filename": "libstdc++-v3/testsuite/25_algorithms/find/check_type.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+struct Lhs { };\n+struct Rhs { };\n+\n+bool\n+operator==(const Lhs&, const Rhs&)\n+{ return true; }\n+\n+input_iterator_wrapper<Lhs>\n+test1(input_iterator_wrapper<Lhs>& begin,\n+      input_iterator_wrapper<Lhs>& end, Rhs& val)\n+{ return std::find(begin, end, val); }"}, {"sha": "9120e188f77848e1038ccec477e7dc68eb1e5ee9", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/1.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,57 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.3 [lib.alg.find.end]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+\n+using std::find_end;\n+\n+void\n+test1()\n+{\n+  int array[] = {0};\n+  Container con1(array, array);\n+  Container con2(array, array + 1);\n+  VERIFY(find_end(con1.begin(), con1.end(), con1.begin(), con1.end()).ptr == array);\n+  VERIFY(find_end(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array);\n+  VERIFY(find_end(con2.begin(), con2.end(), con1.begin(), con1.end()).ptr == array + 1);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {2, 2, 1, 2, 2, 1};\n+  int array2[] = {2, 2};\n+  Container con1(array1, array1 + 6);\n+  Container con2(array2, array2 + 2);\n+  VERIFY(find_end(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array1 + 3);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "1d998a7fa3a5e16fa857e8c792720bb801fc127d", "filename": "libstdc++-v3/testsuite/25_algorithms/find_end/check_type.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_end%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,53 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.3 [lib.alg.find.end]\n+\n+// { dg-do compile }\n+\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct Lhs1 { };\n+\n+struct Rhs1 { };\n+\n+bool operator==(const Lhs1&, const Rhs1&) {return true;}\n+\n+struct X1 { };\n+\n+struct X2 { };\n+\n+bool predicate(const X1&, const X2&) {return true;}\n+\n+forward_iterator_wrapper<Lhs1>\n+test1(forward_iterator_wrapper<Lhs1>& lhs1, \n+      forward_iterator_wrapper<Rhs1>& rhs1)\n+{\n+  return std::find_end(lhs1, lhs1, rhs1, rhs1);\n+}\n+\n+forward_iterator_wrapper<X1>\n+test2(forward_iterator_wrapper<X1>& x1,\n+      forward_iterator_wrapper<X2>& x2)\n+{\n+  return std::find_end(x1, x1, x2, x2, predicate);\n+}"}, {"sha": "db441bd1a308139858f4971b320036f8b3359025", "filename": "libstdc++-v3/testsuite/25_algorithms/find_first_of/1.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.4 [lib.alg.find.first.of]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+\n+using std::find_first_of;\n+\n+void \n+test1()\n+{\n+  int array[] = {0};\n+  Container con1(array, array);\n+  Container con2(array, array + 1);\n+  VERIFY(find_first_of(con1.begin(), con1.end(), con1.begin(), con1.end()).ptr == array);\n+  VERIFY(find_first_of(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array);\n+  VERIFY(find_first_of(con2.begin(), con2.end(), con1.begin(), con1.end()).ptr == array + 1);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {1 ,2, 3, 4, 5, 6};\n+  int array2[] = {3, 4, 9};\n+  Container con1(array1, array1 + 6);\n+  Container con2(array2, array2 + 3);\n+  VERIFY(find_first_of(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array1 + 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "9a075c9112076a7d05b1acea692e6779c8d20625", "filename": "libstdc++-v3/testsuite/25_algorithms/find_first_of/check_type.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_first_of%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.4 [lib.alg.find.first.of]\n+\n+// { dg-do compile }\n+\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct Lhs1 { };\n+\n+struct Rhs1 { };\n+\n+bool operator==(const Lhs1&, const Rhs1&) {return true;}\n+\n+struct X1 { };\n+\n+struct X2 { };\n+\n+bool predicate(const X1&, const X2&) {return true;}\n+\n+forward_iterator_wrapper<Lhs1>\n+test1(forward_iterator_wrapper<Lhs1>& lhs1, \n+      forward_iterator_wrapper<Rhs1>& rhs1)\n+{ return std::find_first_of(lhs1, lhs1, rhs1, rhs1); }\n+\n+forward_iterator_wrapper<X1>\n+test2(forward_iterator_wrapper<X1>& x1,\n+      forward_iterator_wrapper<X2>& x2)\n+{ return std::find_first_of(x1, x1, x2, x2, predicate); }"}, {"sha": "c1d9255ea42bf12a728e047579f093063604a397", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find_if\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i) \n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  VERIFY(std::find_if(con.begin(), con.end(), \n+\t\t      predicate).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  VERIFY(std::find_if(con.begin(), con.end(), \n+\t\t      predicate).ptr == array + 1);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  VERIFY(std::find_if(con.begin(), con.end(),\n+\t\t      predicate).ptr == array + 3);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "8d56be96a9bda0019a9a63cf3f53300d7fe4bc85", "filename": "libstdc++-v3/testsuite/25_algorithms/find_if/check_type.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Ffind_if%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.2 find_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+bool\n+pred_function(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool \n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+input_iterator_wrapper<X>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::find_if(begin, end, pred_function); }\n+\n+input_iterator_wrapper<X>\n+test2(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end)\n+{ return std::find_if(begin, end, pred_obj()); }"}, {"sha": "6d564f2f9eea621eb1146b22579b92844c26e4d8", "filename": "libstdc++-v3/testsuite/25_algorithms/heap/heap.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fheap%2Fheap.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/heap.cc"}, {"sha": "88d1d2b9cf4205798c8b526a5ef673a4e1c93448", "filename": "libstdc++-v3/testsuite/25_algorithms/includes/1.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.1 [lib.includes]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using std::includes;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {0};\n+  Container con1(array, array);\n+  Container con2(array, array);\n+  VERIFY(includes(con1.begin(), con1.end(), con2.begin(), con2.end()));\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {0, 1};\n+  Container con1(array, array);\n+  Container con2(array, array + 2);\n+  VERIFY(!includes(con1.begin(), con1.end(), con2.begin(), con2.end()));\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {0, 1};\n+  Container con1(array, array + 2);\n+  Container con2(array, array);\n+  VERIFY(includes(con1.begin(), con1.end(), con2.begin(), con2.end()));\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array1[] = {1, 2, 3, 4, 6, 8, 9};\n+  int array2[] = {2, 4, 6, 8};\n+  Container con1(array1, array1 + 7);\n+  Container con2(array2, array2 + 4);\n+  VERIFY(includes(con1.begin(), con1.end(), con2.begin(), con2.end()));\n+}\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array1[] = {1, 2, 3, 5};\n+  int array2[] = {2, 4, 6, 8};\n+  Container con1(array1, array1 + 4);\n+  Container con2(array2, array2 + 4);\n+  VERIFY(!includes(con1.begin(), con1.end(), con2.begin(), con2.end()));\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}"}, {"sha": "4b1198e787f9aa947fe6a0161f61b87fa52c25e8", "filename": "libstdc++-v3/testsuite/25_algorithms/includes/check_type.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fincludes%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.1 [lib.includes]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) \n+{ return true; }\n+\n+struct X { };\n+\n+bool\n+predicate(const X&, const X&)\n+{ return true; }\n+\n+bool\n+test1(input_iterator_wrapper<S>& s)\n+{ return std::includes(s, s, s, s); }\n+\n+bool\n+test2(input_iterator_wrapper<X>& x)\n+{ return std::includes(x, x, x, x, predicate); }"}, {"sha": "f53c47e3e7465047f6b1b88428bfd760f0bab976", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,84 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using std::inplace_merge;\n+\n+typedef test_container<int, bidirectional_iterator_wrapper> container;\n+\n+\n+void \n+test1()\n+{\n+  int array[]={1};\n+  container con1(array, array);\n+  inplace_merge(con1.begin(), con1.end(), con1.end());\n+  container con2(array, array + 1);\n+  inplace_merge(con2.begin(), con2.end(), con2.end());\n+  inplace_merge(con2.begin(), con2.begin(), con2.end());\n+}\n+\n+void \n+test2()\n+{\n+  int array[]={0,2,4,1,3,5};\n+  container con(array, array + 6);\n+  inplace_merge(con.begin(), con.it(3), con.end());\n+  VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2 &&\n+\t array[3] == 3 && array[4] == 4 && array[5] == 5);\n+}\n+\n+struct S\n+{\n+  int a;\n+  int b;\n+  S(int _a, int _b) : a(_a), b(_b) { }\n+  S() { }\n+  bool \n+  operator<(const S& _s) const \n+  { return _s.a < a; }\n+};\n+\n+void \n+test3()\n+{\n+  S s[4];\n+  s[0].a = 0;\n+  s[1].a = 1;\n+  s[2].a = 0;\n+  s[3].a = 1;\n+  s[0].b = 0;\n+  s[1].b = 0;\n+  s[2].b = 1;\n+  s[3].b = 1;\n+  inplace_merge(s, s + 2, s + 4);\n+  VERIFY(s[0].b == 0 && s[1].b == 1 && s[2].b == 0 && s[3].b == 1);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+}"}, {"sha": "f8cacfa7696f04f427de7e9ee4e874169f3a7d55", "filename": "libstdc++-v3/testsuite/25_algorithms/inplace_merge/check_type.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Finplace_merge%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::bidirectional_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+void \n+test1(bidirectional_iterator_wrapper<S>& s)\n+{\n+  std::inplace_merge(s, s, s);\n+}\n+\n+void \n+test2(bidirectional_iterator_wrapper<X>& x)\n+{\n+  std::inplace_merge(x, x, x, predicate);\n+}"}, {"sha": "8d38dadb8e68184a350f7a341ca3c9a299c18733", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/1.cc", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,86 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.8 [lib.alg.lex.comparison]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array1[] = {0, 1};\n+int array2[] = {1, 0};\n+int array3[] = {1, 0, 1};\n+\n+void \n+test1()\n+{\n+  Container con1(array1, array1);\n+  Container con2(array2, array2);\n+  VERIFY( !std::lexicographical_compare(con1.begin(), con1.end(), \n+\t\t\t\t\tcon2.begin(), con2.end()) );\n+}\n+\n+void \n+test2()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::lexicographical_compare(con1.begin(), con1.end(), \n+\t\t\t\t       con2.begin(), con2.end()) );\n+}\n+\n+void \n+test3()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( !std::lexicographical_compare(con2.begin(), con2.end(), \n+\t\t\t\t        con1.begin(), con1.end()) );\n+}\n+\n+void \n+test4()\n+{\n+  Container con3(array3, array3 + 3);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::lexicographical_compare(con2.begin(), con2.end(), \n+\t\t\t\t       con3.begin(), con3.end()) );\n+}\n+\n+void \n+test5()\n+{\n+  Container con3(array3, array3 + 3);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( !std::lexicographical_compare(con3.begin(), con3.end(),\n+\t\t\t\t\tcon2.begin(), con2.end()) );\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}"}, {"sha": "20b594cc06a4de9a0c6c7b66ae1f360b3cc18f56", "filename": "libstdc++-v3/testsuite/25_algorithms/lexicographical_compare/check_type.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flexicographical_compare%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.8 [lib.alg.lex.comparison]\n+\n+// { dg-do compile }\n+\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+struct Lhs1 { };\n+\n+struct Rhs1 { };\n+\n+bool \n+operator<(const Lhs1&, const Rhs1&) {return true;}\n+\n+bool \n+operator<(const Rhs1&, const Lhs1&) {return false;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+bool \n+test1(input_iterator_wrapper<Lhs1>& lhs1,\n+      input_iterator_wrapper<Rhs1>& rhs1)\n+{ return std::lexicographical_compare(lhs1, lhs1, rhs1, rhs1); }\n+\n+bool \n+test2(input_iterator_wrapper<X>& x)\n+{ return std::lexicographical_compare(x, x, x, x, predicate); }"}, {"sha": "baa00c1cd6c1f7d43ebc6f33e9be79a3e2110a2b", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.1 [lib.lower.bound]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::lower_bound;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 0, 1, 1, 1, 1};\n+\n+void \n+test1()\n+{\n+  for(int i = 0; i < 5; ++i)\n+    for(int j = 4; j < 7; ++j)\n+      {\n+\tContainer con(array + i, array + j);\n+\tVERIFY(lower_bound(con.begin(), con.end(), 1).ptr == array + 4);\n+      }\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+}"}, {"sha": "1ba48d33f815894285df2fff739850b515f98ed4", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.1 [lib.lower.bound]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+forward_iterator_wrapper<S> \n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::lower_bound(s, s, *s); }\n+\n+forward_iterator_wrapper<X> \n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::lower_bound(x, x, *x, predicate); }"}, {"sha": "6afb28fffbc1be529a23acdf761f4263a801fc74", "filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound/lower_bound.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Flower_bound.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Flower_bound.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Flower_bound%2Flower_bound.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/lower_bound.cc"}, {"sha": "02d870baadb12510589acebd1705d9d8141c0e93", "filename": "libstdc++-v3/testsuite/25_algorithms/max_element/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.7 [lib.alg.min.max]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::max_element;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  int array[] = {0};\n+  Container con(array, array);\n+  VERIFY(max_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY(max_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {3, 0};\n+  Container con(array, array + 2);\n+  VERIFY(max_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test4()\n+{\n+  int array[] = {0, 3, 6, 2, 6, 4, 0};\n+  Container con(array, array + 7);\n+  VERIFY(max_element(con.begin(), con.end()).ptr == array + 2);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "f6bae763cc4b9e0606899345dbcc3c0d8c08c2cc", "filename": "libstdc++-v3/testsuite/25_algorithms/max_element/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmax_element%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.7 [lib.alg.min.max]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+forward_iterator_wrapper<S>\n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::max_element(s, s); }\n+\n+forward_iterator_wrapper<X>\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::max_element(x, x, predicate); }"}, {"sha": "c0ccd78a97bebfb6fe64c0de9c267913831610c9", "filename": "libstdc++-v3/testsuite/25_algorithms/merge/1.cc", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,101 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::merge;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+void \n+test1()\n+{\n+  int array1[1], array2[1];\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(merge(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t       con3.begin()).ptr == array2);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[]={0,1,4};\n+  int array2[]={2,3};\n+  int array3[5];\n+  Icontainer con1(array1, array1 + 3);\n+  Icontainer con2(array2, array2 + 2);\n+  Ocontainer con3(array3, array3 + 5);\n+  VERIFY(merge(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t       con3.begin()).ptr == array3 + 5);\n+  VERIFY(array3[0] == 0 && array3[1] == 1 && array3[2] == 2 &&\n+\t array3[3] == 3 && array3[4] == 4);\n+\n+}\n+\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+void \n+test3()\n+{\n+  S array1[] = { -1 , -3};\n+  S array2[] = { 1, 2, 3};\n+  S array3[5];\n+  merge(array1, array1 + 2, array2, array2 + 3, array3);\n+  VERIFY(array3[0].j == 0 && array3[1].j == 1 && array3[2].j == 1 &&\n+         array3[3].j == 0 && array3[4].j == 1);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "27681d82dc950a9b5a928e2806af401e4095e633", "filename": "libstdc++-v3/testsuite/25_algorithms/merge/check_type.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmerge%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.4 [lib.alg.merge]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+output_iterator_wrapper<S> \n+test1(input_iterator_wrapper<S>& in,\n+      output_iterator_wrapper<S>& out)\n+{ return std::merge(in, in, in, in, out); }\n+\n+output_iterator_wrapper<X> \n+test2(input_iterator_wrapper<X>& in,\n+      output_iterator_wrapper<X>& out)\n+{ return std::merge(in, in, in, in, out, predicate); }"}, {"sha": "ba9a4a26e7796af474dbe070c020231490857347", "filename": "libstdc++-v3/testsuite/25_algorithms/min_element/1.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.7 [lib.alg.min.max]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::min_element;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  int array[] = {0};\n+  Container con(array, array);\n+  VERIFY(min_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY(min_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {0, 3};\n+  Container con(array, array + 2);\n+  VERIFY(min_element(con.begin(), con.end()).ptr == array);\n+}\n+\n+void\n+test4()\n+{\n+  int array[] = {6, 3, 0, 2, 6, 4, 0};\n+  Container con(array, array + 7);\n+  VERIFY(min_element(con.begin(), con.end()).ptr == array + 2);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "e4ff8d341b50d5028b48a752f17e8b01b9c942bf", "filename": "libstdc++-v3/testsuite/25_algorithms/min_element/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmin_element%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.7 [lib.alg.min.max]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+forward_iterator_wrapper<S>\n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::min_element(s,s); }\n+\n+forward_iterator_wrapper<X>\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::min_element(x,x,predicate); }"}, {"sha": "a75405999a3229476ec0244bd216c0f61e5a9547", "filename": "libstdc++-v3/testsuite/25_algorithms/mismatch/1.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.7 [lib.mismatch]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Container;\n+int array1[] = {0, 1};\n+int array2[] = {1, 0};\n+int array3[] = {1, 0, 1};\n+\n+void test1a()\n+{\n+  Container con1(array1, array1);\n+  Container con2(array2, array2);\n+  VERIFY( std::mismatch(con1.begin(), con1.end(), con2.begin()).first.ptr\n+\t  == array1 );\n+}\n+\n+void test1b()\n+{\n+  Container con1(array1, array1);\n+  Container con2(array2, array2);\n+  VERIFY( std::mismatch(con1.begin(), con1.end(), con2.begin()).second.ptr\n+\t  == array2 );\n+}\n+\n+void test2a()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::mismatch(con1.begin(), con1.end(), con2.begin()).first.ptr\n+\t  == array1 );\n+}\n+\n+void test2b()\n+{\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::mismatch(con1.begin(), con1.end(), con2.begin()).second.ptr\n+\t  == array2 );\n+}\n+\n+void test3a()\n+{\n+  Container con3(array3, array3 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::mismatch(con3.begin(), con3.end(), con2.begin()).first.ptr\n+\t  == array3 + 2 );\n+}\n+\n+void test3b()\n+{\n+  Container con3(array3, array3 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY( std::mismatch(con3.begin(), con3.end(), con2.begin()).second.ptr\n+\t  == array2 + 2 );\n+}\n+\n+int main()\n+{\n+  test1a();\n+  test1b();\n+  test2a();\n+  test2b();\n+  test3a();\n+  test3b();\n+}"}, {"sha": "45f4629676879d064ba26e9612f23a5268296446", "filename": "libstdc++-v3/testsuite/25_algorithms/mismatch/check_type.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fmismatch%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,51 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.7 [lib.mismatch]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <utility>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+\n+struct Lhs1 { };\n+\n+struct Rhs1 { };\n+\n+bool operator==(const Lhs1&, const Rhs1&) {return true;}\n+\n+struct Lhs2 { };\n+\n+struct Rhs2 { };\n+\n+bool predicate(const Lhs2&, const Rhs2&) {return true;}\n+\n+std::pair<input_iterator_wrapper<Lhs1>, input_iterator_wrapper<Rhs1> >\n+test1(input_iterator_wrapper<Lhs1>& lhs1, input_iterator_wrapper<Rhs1>& rhs1)\n+{\n+  return std::mismatch(lhs1, lhs1, rhs1);\n+}\n+\n+std::pair<input_iterator_wrapper<Lhs2>, input_iterator_wrapper<Rhs2> >\n+test2(input_iterator_wrapper<Lhs2>& lhs2, input_iterator_wrapper<Rhs2>& rhs2)\n+{\n+  return std::mismatch(lhs2, lhs2, rhs2, predicate);\n+}"}, {"sha": "4c0496c9d362560eb5449818014c5727a40090ac", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,84 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using std::next_permutation;\n+\n+typedef test_container<int, bidirectional_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  int array[] = {0};\n+  Container con(array, array);\n+  VERIFY(!next_permutation(con.begin(), con.end()));\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY(!next_permutation(con.begin(), con.end()));\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {0, 3};\n+  Container con(array, array + 2);\n+  VERIFY(next_permutation(con.begin(), con.end()));\n+  VERIFY(array[0] == 3 && array[1] == 0);\n+  VERIFY(!next_permutation(con.begin(), con.end()));\n+  VERIFY(array[0] == 0 && array[1] == 3);\n+}\n+\n+void\n+test4()\n+{\n+  int array[6] = {0, 1, 2, 3, 4, 5};\n+  Container con(array, array + 6);\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      int temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      VERIFY(next_permutation(array, array + 6));\n+      VERIFY(std::lexicographical_compare(temp_array, temp_array + 6, \n+\t\t\t\t\t  array, array + 6));\n+    }\n+  VERIFY(!next_permutation(array,array + 6));\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY(array[i] == i);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "15aff15e08b7976dd90d83975921863978a31f00", "filename": "libstdc++-v3/testsuite/25_algorithms/next_permutation/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnext_permutation%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::bidirectional_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+bool\n+test1(bidirectional_iterator_wrapper<S>& s)\n+{ return std::next_permutation(s,s); }\n+\n+bool\n+test2(bidirectional_iterator_wrapper<X>& x)\n+{ return std::next_permutation(x,x,predicate); }"}, {"sha": "469e64bedf59d0bc2725c7d31e4d659328d8129e", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/1.cc", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,79 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.2 [lib.alg.nth.element]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using std::nth_element;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int array[]={0};\n+  Container con(array, array);\n+  partial_sort(con.begin(), con.begin(), con.end());\n+}\n+\n+void \n+test2()\n+{\n+  int array[]={2,1,0};\n+  Container con(array, array + 2);\n+  partial_sort(con.begin(), con.begin(), con.end());\n+  partial_sort(con.begin(), con.end(), con.end());\n+}\n+\n+void \n+test3()\n+{\n+  int array[] = {6, 5, 4, 3, 2, 1, 0};\n+  Container con(array, array + 7);\n+  nth_element(con.begin(), con.it(3), con.end());\n+  for(int i = 0; i < 3; ++i)\n+    VERIFY(array[i] < array[3]);\n+  for(int i = 4; i < 7; ++i)\n+    VERIFY(array[3] < array[i]);\n+}\n+\n+void \n+test4()\n+{\n+  int array[] = {0, 6, 1, 5, 2, 4, 3};\n+  Container con(array,array + 7);\n+  nth_element(con.begin(), con.it(3), con.end());\n+  for(int i = 0; i < 3; ++i)\n+    VERIFY(array[i] < array[3]);\n+  for(int i = 4; i < 7; ++i)\n+    VERIFY(array[3] < array[i]);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "3fd1ebadb2ad7873e016a710d7b689a1ffb2d752", "filename": "libstdc++-v3/testsuite/25_algorithms/nth_element/check_type.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fnth_element%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.2 [lib.alg.nth.element]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+void\n+test1(random_access_iterator_wrapper<S>& s)\n+{ std::nth_element(s, s, s); }\n+\n+void\n+test2(random_access_iterator_wrapper<X>& x)\n+{ std::nth_element(x, x, x, predicate); }\n+"}, {"sha": "35c64ca06652b2861af59292d9a0ba744655cdc3", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.3 [lib.partial.sort]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using std::partial_sort;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int array[]={2,1,0};\n+  Container con1(array, array + 2);\n+  Container con2(array, array);\n+  partial_sort(con2.begin(), con2.begin(), con2.end());\n+  partial_sort(con1.begin(), con1.begin(), con1.end());\n+  partial_sort(con1.begin(), con1.end(), con1.end());\n+}\n+\n+void \n+test2()\n+{\n+  int array[] = {6, 5, 4, 3, 2, 1, 0};\n+  Container con(array, array + 7);\n+  partial_sort(con.begin(), con.it(3), con.end());\n+  VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2);\n+}\n+\n+void \n+test3()\n+{\n+  int array[] = {0, 6, 1, 5, 2, 4, 3};\n+  Container con(array,array + 7);\n+  partial_sort(con.begin(), con.it(3), con.end());\n+  VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "1a6a2e0fec81283694070a5d678b94ee5538e69c", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort/check_type.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.3 [lib.partial.sort]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+void\n+test1(random_access_iterator_wrapper<S>& s)\n+{\n+  std::partial_sort(s, s, s);\n+}\n+\n+void\n+test2(random_access_iterator_wrapper<X>& x)\n+{\n+  std::partial_sort(x, x, x, predicate);\n+}\n+"}, {"sha": "0b7263d3e3029e3c46a9fba86b7a562293a2f5b1", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/1.cc", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,89 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.4 [lib.partial.sort.copy]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using __gnu_test::input_iterator_wrapper;\n+using std::partial_sort_copy;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Rcontainer;\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+\n+void \n+test1()\n+{\n+  int array[]={2,1,0};\n+  Rcontainer rcon1(array, array);\n+  Rcontainer rcon2(array, array + 2);\n+  Icontainer icon1(array, array);\n+  Icontainer icon2(array, array + 2);\n+  partial_sort_copy(icon1.begin(), icon1.end(), rcon1.begin(), rcon1.end());\n+  partial_sort_copy(icon1.begin(), icon1.end(), rcon2.begin(), rcon2.end());\n+  partial_sort_copy(icon2.begin(), icon2.end(), rcon1.begin(), rcon1.end());\n+  partial_sort_copy(icon2.begin(), icon2.end(), rcon2.begin(), rcon2.end()); \n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {4, 3, 2, 1, 0};\n+  int array2[5];\n+  Icontainer icon(array1, array1 + 5);\n+  Rcontainer rcon(array2, array2 + 5);\n+  partial_sort_copy(icon.begin(), icon.end(), rcon.begin(), rcon.end());\n+  VERIFY(array2[0] == 0 && array2[1] == 1 && array2[2] == 2 &&\n+\t array2[3] == 3 && array2[4] == 4);\n+}\n+\n+void \n+test3()\n+{\n+  int array1[] = {4, 0, 1, 3, 2};\n+  int array2[5];\n+  Icontainer icon(array1, array1 + 5);\n+  Rcontainer rcon(array2, array2 + 2);\n+  partial_sort_copy(icon.begin(), icon.end(), rcon.begin(), rcon.end());\n+  VERIFY(array2[0] == 0 && array2[1] == 1);\n+}\n+\n+void \n+test4()\n+{\n+  int array1[] = {4, 1, 3, 2, 0};\n+  int array2[20];\n+  Icontainer icon(array1, array1 + 5);\n+  Rcontainer rcon(array2, array2 + 20);\n+  partial_sort_copy(icon.begin(), icon.end(), rcon.begin(), rcon.end());\n+  VERIFY(array2[0] == 0 && array2[1] == 1 && array2[2] == 2 &&\n+\t array2[3] == 3 && array2[4] == 4);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "140f15bcc4d179f192e8b4f16acdefeda4928862", "filename": "libstdc++-v3/testsuite/25_algorithms/partial_sort_copy/check_type.cc", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartial_sort_copy%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,68 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.4 [lib.partial.sort.copy]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct S1 { };\n+struct S2 \n+{ \n+  S2(const S1&) {}\n+  S2() {}\n+};\n+\n+bool \n+operator<(const S1&, const S1&) \n+{return true;}\n+\n+bool \n+operator<(const S2&, const S2&) \n+{return true;}\n+\n+struct X1 { };\n+struct X2 \n+{\n+  X2(const X1&) {}\n+  X2() {}\n+};\n+\n+struct predicate\n+{\n+  bool \n+  operator()(const X1&, const X1&) \n+  {return true;}\n+  \n+  bool \n+  operator()(const X2&, const X2&) \n+  {return true;}\n+};\n+\n+random_access_iterator_wrapper<S2>\n+test1(input_iterator_wrapper<S1>& s1, random_access_iterator_wrapper<S2>& s2)\n+{ return std::partial_sort_copy(s1, s1, s2, s2); }\n+\n+random_access_iterator_wrapper<X2>\n+test2(input_iterator_wrapper<X1>& x1, random_access_iterator_wrapper<X2>& x2)\n+{ return std::partial_sort_copy(x1, x1, x2, x2, predicate()); }"}, {"sha": "b05c203bd32632e59d450a9e0b043c5e4c71966c", "filename": "libstdc++-v3/testsuite/25_algorithms/partition/partition.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fpartition.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fpartition.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fpartition%2Fpartition.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/partition.cc"}, {"sha": "530e032d7fc0dc3d6b9484f65d92f1f95094dd5e", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/1.cc", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,84 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using std::prev_permutation;\n+\n+typedef test_container<int, bidirectional_iterator_wrapper> Container;\n+\n+void\n+test1()\n+{\n+  // Note: The standard is unclear on what should happen in this case.\n+  // This seems the only really sensible behaviour, and what is done.\n+  int array[] = {0};\n+  Container con(array, array);\n+  VERIFY(!prev_permutation(con.begin(), con.end()));\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {0};\n+  Container con(array, array + 1);\n+  VERIFY(!prev_permutation(con.begin(), con.end()));\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {3, 0};\n+  Container con(array, array + 2);\n+  VERIFY(prev_permutation(con.begin(), con.end()));\n+  VERIFY(array[0] == 0 && array[1] == 3);\n+  VERIFY(!prev_permutation(con.begin(), con.end()));\n+  VERIFY(array[0] == 3 && array[1] == 0);\n+}\n+\n+void\n+test4()\n+{\n+  int array[6] = {5, 4, 3, 2, 1, 0};\n+  Container con(array, array + 6);\n+  for(int i = 0 ; i < 719; ++i)\n+    {\n+      int temp_array[6];\n+      std::copy(array, array + 6, temp_array);\n+      VERIFY(prev_permutation(array, array + 6));\n+      VERIFY(std::lexicographical_compare(array, array + 6,\n+\t\t\t\t\t  temp_array, temp_array + 6));\n+    }\n+  VERIFY(!prev_permutation(array,array + 6));\n+  for(int i = 0; i < 6; ++i)\n+    VERIFY(array[i] == 5 - i);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "f0fafc60cfff9a57c640b23ef8a50693e875cb80", "filename": "libstdc++-v3/testsuite/25_algorithms/prev_permutation/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fprev_permutation%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.9 [lib.alg.permutation.generators]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::bidirectional_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+bool\n+test1(bidirectional_iterator_wrapper<S>& s)\n+{ return std::prev_permutation(s,s); }\n+\n+bool\n+test2(bidirectional_iterator_wrapper<X>& x)\n+{ return std::prev_permutation(x,x,predicate); }"}, {"sha": "95ac53c1ba5cb095320e32ef7499cb91e842efcf", "filename": "libstdc++-v3/testsuite/25_algorithms/remove/1.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,63 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 remove\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container; \n+\n+void\n+test1()\n+{\n+  int array[1];\n+  Container con(array, array);\n+  VERIFY(std::remove(con.begin(), con.end(), 1).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {1};\n+  Container con(array, array + 1);\n+  VERIFY(std::remove(con.begin(), con.end(), 0).ptr == array + 1);\n+  VERIFY(std::remove(con.begin(), con.end(), 1).ptr == array);\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {0, 1, 0, 1, 0, 0, 1, 1};\n+  Container con(array, array + 8);\n+  VERIFY(std::remove(con.begin(), con.end(), 1).ptr == array + 4);\n+  VERIFY(array[0] == 0 && array[1] == 0 && array[2] == 0 && \n+\t array[3] == 0);\n+}\n+\n+int\n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "46a44de1cb9b5fa9688b5b48d45013df1ff36d85", "filename": "libstdc++-v3/testsuite/25_algorithms/remove/check_type.cc", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,39 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.7 Remove\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Y { };\n+\n+bool\n+operator==(const X&, const Y&)\n+{ return true; }\n+\n+forward_iterator_wrapper<X>\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, const Y& val)\n+{ return std::remove(begin, end, val); }"}, {"sha": "b72e02491aa05b1f18926ed64e2fd18b0b6a1a2f", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/1.cc", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,66 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 remove\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container; \n+\n+bool equal1(int val) { return val == 1; }\n+bool equal0(int val) { return val == 0; }\n+\n+void\n+test1()\n+{\n+  int array[1];\n+  Container con(array, array);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal1).ptr == array);\n+}\n+\n+void\n+test2()\n+{\n+  int array[] = {1};\n+  Container con(array, array + 1);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal0).ptr == array + 1);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal1).ptr == array);\n+}\n+\n+void\n+test3()\n+{\n+  int array[] = {0, 1, 0, 1, 0, 0, 1, 1};\n+  Container con(array, array + 8);\n+  VERIFY(std::remove_if(con.begin(), con.end(), equal1).ptr == array + 4);\n+  VERIFY(array[0] == 0 && array[1] == 0 && array[2] == 0 &&\n+         array[3] == 0);\n+}\n+\n+int\n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "dbcde808bfb662f425cfcb0373093fef3b00ab9b", "filename": "libstdc++-v3/testsuite/25_algorithms/remove_if/check_type.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fremove_if%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,50 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.7 Remove_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X { };\n+\n+bool\n+pred_fn(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool\n+  operator()(const X&) const\n+  { return true; }\n+};\n+\n+forward_iterator_wrapper<X>\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end)\n+{ return std::remove_if(begin, end, pred_fn); }\n+\n+forward_iterator_wrapper<X>\n+test2(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end)\n+{ return std::remove_if(begin, end, pred_obj()); }\n+"}, {"sha": "4878855dccd994ebc05c9523e9fa08306614f838", "filename": "libstdc++-v3/testsuite/25_algorithms/replace/1.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container; \n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  std::replace(con.begin(), con.end(), 1, 1);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  std::replace(con.begin(), con.end(), 0, 1);\n+  VERIFY(array[0] == 1);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  std::replace(con.begin(), con.end(), 1, 2);\n+  VERIFY(array[0] == 2 && array[1] == 0 && array[2] == 0 &&\n+         array[3] == 2 && array[4] == 0 && array[5] == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "083342192abde87dd07fc4b31df62158c8d39d38", "filename": "libstdc++-v3/testsuite/25_algorithms/replace/check_type.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,38 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 Replace\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X { };\n+\n+bool\n+operator==(const X&, const X&)\n+{ return true; }\n+\n+void\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, const X& old_val,\n+      const X& new_val)\n+{ return std::replace(begin, end, old_val, new_val); }"}, {"sha": "ebaea0cb66654ddc442e0e4cd34f6fe77c4d0699", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy/1.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,72 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_copy\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer; \n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+void\n+test1()\n+{\n+  int out[1];\n+  Icontainer in_con(array, array);\n+  Ocontainer out_con(out, out);\n+  VERIFY(std::replace_copy(in_con.begin(), in_con.end(), \n+\t                   out_con.begin(), 1, 1).ptr == out);\n+}\n+\n+void\n+test2()\n+{\n+  int out[1];\n+  Icontainer in_con(array, array + 1);\n+  Ocontainer out_con(out, out + 1);\n+  VERIFY(std::replace_copy(in_con.begin(), in_con.end(), \n+\t\t\t   out_con.begin(), 0, 1).ptr == out + 1);\n+  VERIFY(out[0] == 1);\n+}\n+\n+void\n+test3()\n+{\n+  int out[6];\n+  Icontainer in_con(array, array + 6);\n+  Ocontainer out_con(out, out + 6);\n+  VERIFY(std::replace_copy(in_con.begin(), in_con.end(),\n+\t\t\t   out_con.begin(), 1, 2).ptr == out + 6);\n+  VERIFY(out[0] == 0 && out[1] == 0 && out[2] == 0 &&\n+         out[3] == 2 && out[4] == 0 && out[5] == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "1a19a16e4ac023a0b16333add44b0e120a03595e", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy/check_type.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_copy\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Y { };\n+\n+struct Z\n+{\n+  Z&\n+  operator=(const X&)\n+  { }\n+\n+  Z&\n+  operator=(const Y&)\n+  { }\n+};\n+\n+bool\n+operator==(const X&, const Y&)\n+{ return true; }\n+\n+output_iterator_wrapper<Z>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output,\n+      const Y& old_val, const Y& new_val)\n+{ \n+  return std::replace_copy(begin, end, output, old_val, \n+\t\t\t   new_val); \n+}"}, {"sha": "2c9c32d67dd43665e8acd25ba279ac814dd2b91c", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/1.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_copy_if\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer; \n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+int array[] = {0, 0, 0, 1, 0, 1};\n+\n+bool\n+pred(int i)\n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  int out[1];\n+  Icontainer in_con(array, array);\n+  Ocontainer out_con(out, out);\n+  VERIFY(std::replace_copy_if(in_con.begin(), in_con.end(), \n+\t                      out_con.begin(), pred, 1).ptr == out);\n+}\n+\n+void\n+test2()\n+{\n+  int out[1];\n+  Icontainer in_con(array, array + 1);\n+  Ocontainer out_con(out, out + 1);\n+  VERIFY(std::replace_copy_if(in_con.begin(), in_con.end(), \n+\t\t\t      out_con.begin(), pred, 2).ptr == out + 1);\n+  VERIFY(out[0] == 0);\n+}\n+\n+void\n+test3()\n+{\n+  int out[6];\n+  Icontainer in_con(array, array + 6);\n+  Ocontainer out_con(out, out + 6);\n+  VERIFY(std::replace_copy_if(in_con.begin(), in_con.end(),\n+\t\t\t      out_con.begin(), pred, 2).ptr == out + 6);\n+  VERIFY(out[0] == 0 && out[1] == 0 && out[2] == 0 &&\n+         out[3] == 2 && out[4] == 0 && out[5] == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "55b904022425509a6ed45e8f4ff77d5389e34307", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_copy_if/check_type.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_copy_if%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_copy_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct X { };\n+\n+struct Y { };\n+\n+struct Z\n+{\n+  Z&\n+  operator=(const X&)\n+  { }\n+\n+  Z&\n+  operator=(const Y&)\n+  { }\n+};\n+\n+bool\n+predicate(const X&)\n+{ return true; }\n+\n+output_iterator_wrapper<Z>\n+test1(input_iterator_wrapper<X>& begin,\n+      input_iterator_wrapper<X>& end,\n+      output_iterator_wrapper<Z>& output,\n+      const Y& new_val)\n+{ \n+  return std::replace_copy_if(begin, end, output, predicate, \n+\t\t\t      new_val); \n+}"}, {"sha": "98cf1f3dde1aeef54703c7ebc2abee5b90b9cd00", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/1.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_if\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container; \n+int array[] = {1, 0, 0, 1, 0, 1};\n+\n+bool\n+predicate(const int& i)\n+{ return i == 1; }\n+\n+void\n+test1()\n+{\n+  Container con(array, array);\n+  std::replace_if(con.begin(), con.end(), predicate, 1);\n+}\n+\n+void\n+test2()\n+{\n+  Container con(array, array + 1);\n+  std::replace_if(con.begin(), con.end(), predicate, 2);\n+  VERIFY(array[0] == 2);\n+}\n+\n+void\n+test3()\n+{\n+  Container con(array, array + 6);\n+  std::replace_if(con.begin(), con.end(), predicate, 3);\n+  VERIFY(array[0] == 2 && array[1] == 0 && array[2] == 0 &&\n+         array[3] == 3 && array[4] == 0 && array[5] == 3);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "b8adaec9fcc2023f9064dc5848db3fee7c514a85", "filename": "libstdc++-v3/testsuite/25_algorithms/replace_if/check_type.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Freplace_if%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,52 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 replace_if\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X { };\n+\n+bool\n+pred_fn(const X&)\n+{ return true; }\n+\n+struct pred_obj\n+{\n+  bool\n+  operator()(const X&)\n+  { return true; }\n+};\n+\n+\n+void\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, const X& new_val)\n+{ return std::replace_if(begin, end, pred_fn, new_val); }\n+\n+void\n+test2(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, const X& new_val)\n+{ return std::replace_if(begin, end, pred_obj(), new_val); }\n+\n+"}, {"sha": "be41d57bc998294b16a60b2d7052572bd96069d6", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/1.cc", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,126 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.10 rotate\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::bidirectional_iterator_wrapper;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Fcontainer; \n+typedef test_container<int, bidirectional_iterator_wrapper> Bcontainer; \n+typedef test_container<int, random_access_iterator_wrapper> Rcontainer; \n+\n+\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[]={1};\n+  Fcontainer fcon(array, array);\n+  Bcontainer bcon(array, array);\n+  Rcontainer rcon(array, array);\n+  std::rotate(fcon.begin(), fcon.begin(), fcon.end());\n+  std::rotate(bcon.begin(), bcon.begin(), bcon.end());\n+  std::rotate(rcon.begin(), rcon.begin(), rcon.end());\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {1};\n+  Fcontainer fcon(array, array + 1);\n+  Bcontainer bcon(array, array + 1);\n+  Rcontainer rcon(array, array + 1);\n+  std::rotate(fcon.begin(), fcon.begin(), fcon.end());\n+  std::rotate(bcon.begin(), bcon.begin(), bcon.end());\n+  std::rotate(rcon.begin(), rcon.begin(), rcon.end());\n+  std::rotate(fcon.begin(), fcon.end(), fcon.end());\n+  std::rotate(bcon.begin(), bcon.end(), bcon.end());\n+  std::rotate(rcon.begin(), rcon.end(), rcon.end());\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {1, 2, 3, 4, 5};\n+  Fcontainer fcon(array, array + 5);\n+  Bcontainer bcon(array, array + 5);\n+  Rcontainer rcon(array, array + 5);\n+  std::rotate(fcon.begin(), fcon.it(2), fcon.end());\n+  VERIFY(array[0] == 3 && array[1] == 4 && array[2] == 5 && \n+\t array[3] == 1 && array[4] == 2);\n+  std::rotate(bcon.begin(), bcon.it(2), bcon.end());\n+  VERIFY(array[0] == 5 && array[1] == 1 && array[2] == 2 && \n+\t array[3] == 3 && array[4] == 4);\n+  std::rotate(rcon.begin(), rcon.it(2), rcon.end());\n+  VERIFY(array[0] == 2 && array[1] == 3 && array[2] == 4 && \n+\t array[3] == 5 && array[4] == 1);\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {1, 2, 3, 4};\n+  Fcontainer fcon(array, array + 4);\n+  Bcontainer bcon(array, array + 4);  \n+  Rcontainer rcon(array, array + 4);\n+\n+  std::rotate(fcon.begin(), fcon.it(3), fcon.end());\n+  VERIFY(array[0] == 4 && array[1] == 1 && array[2] == 2 && \n+\t array[3] == 3);\n+\n+  std::rotate(bcon.begin(), bcon.it(3), bcon.end());\n+  VERIFY(array[0] == 3 && array[1] == 4 && array[2] == 1 && \n+\t array[3] == 2);\n+\n+  std::rotate(rcon.begin(), rcon.it(3), rcon.end());\n+  VERIFY(array[0] == 2 && array[1] == 3 && array[2] == 4 && \n+\t array[3] == 1);\n+  \n+}\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array[] = {1, 2, 3, 4};\n+  Rcontainer con(array, array + 4);\n+  std::rotate(con.begin(), con.it(2), con.end());\n+  VERIFY(array[0] == 3 && array[1] == 4 && array[2] == 1 && \n+\t array[3] == 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}"}, {"sha": "31b7123954c491f0514fd5ac253d94a84d316106", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/check_type.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,48 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.10 Rotate\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+struct X { };\n+\n+bool operator<(X,X) { return true;}\n+\n+void\n+test1(__gnu_test::forward_iterator_wrapper<X>& begin,\n+      __gnu_test::forward_iterator_wrapper<X>& middle,\n+      __gnu_test::forward_iterator_wrapper<X>& end)\n+{ return std::rotate(begin,middle,end); }\n+\n+void\n+test1(__gnu_test::bidirectional_iterator_wrapper<X>& begin,\n+      __gnu_test::bidirectional_iterator_wrapper<X>& middle,\n+      __gnu_test::bidirectional_iterator_wrapper<X>& end)\n+{ return std::rotate(begin,middle,end); }\n+\n+void\n+test1(__gnu_test::random_access_iterator_wrapper<X>& begin,\n+      __gnu_test::random_access_iterator_wrapper<X>& middle,\n+      __gnu_test::random_access_iterator_wrapper<X>& end)\n+{ return std::rotate(begin,middle,end); }\n+\n+"}, {"sha": "00768a230c8b62a80a8be1c5e89ba7e52b207f0d", "filename": "libstdc++-v3/testsuite/25_algorithms/rotate/rotate.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Frotate%2Frotate.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "previous_filename": "libstdc++-v3/testsuite/25_algorithms/rotate.cc"}, {"sha": "5a0ed51cb68fb98c5b323bc54905b41823d3d163", "filename": "libstdc++-v3/testsuite/25_algorithms/search/1.cc", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,113 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.5 [lib.alg.search]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::search;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array1[] = {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1};\n+int array2[] = {0, 0, 0};\n+\n+void \n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Container con1(array1, array1);\n+  Container con2(array1, array1 + 1);\n+  VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr == array1);\n+  VERIFY(search(con2.begin(), con2.end(), con1.begin(), con1.end()).ptr == array1);\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Container con1(array1, array1 + 3);\n+  Container con2(array2, array2 + 3);\n+  VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr \n+         == array1);\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Container con1(array1 + 3, array1 + 10);\n+  Container con2(array2, array2 + 3);\n+  VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr \n+         == array1 + 10);\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Container con1(array1, array1 + 10);\n+  Container con2(array2, array2 + 1);\n+  VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr\n+\t == array1);\n+}\n+\n+void\n+test5()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Container con1(array1 + 6, array1 + 10);\n+  Container con2(array2, array2 + 1);\n+  VERIFY(search(con1.begin(), con1.end(), con2.begin(), con2.end()).ptr\n+\t == array1 + 10);\n+}\n+\n+void\n+test6()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array3[]={2, 2, 1, 2, 3, 5};\n+  int array4[]={1, 2, 3, 4};\n+  Container con1(array3, array3 + 3);\n+  Container con2(array3, array3 + 4);\n+  Container con3(array3, array3 + 5);\n+  Container con4(array3, array3 + 6);\n+  Container endcon(array4, array4 + 4);\n+  VERIFY(search(con1.begin(), con1.end(), endcon.begin(), endcon.end()).ptr\n+\t == array3 + 3);\n+  VERIFY(search(con2.begin(), con2.end(), endcon.begin(), endcon.end()).ptr\n+\t == array3 + 4);\n+  VERIFY(search(con3.begin(), con3.end(), endcon.begin(), endcon.end()).ptr\n+\t == array3 + 5);\n+  VERIFY(search(con4.begin(), con4.end(), endcon.begin(), endcon.end()).ptr\n+\t == array3 + 6);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+  test6();\n+}"}, {"sha": "9e3a587f2b74dd46bb40385573395d902f9f7922", "filename": "libstdc++-v3/testsuite/25_algorithms/search/check_type.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.1.9 [lib.alg.search]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S1 { };\n+struct S2 { };\n+\n+bool \n+operator==(const S1&, const S2&) {return true;}\n+\n+struct X1 { };\n+struct X2 { };\n+\n+bool \n+predicate(const X1&, const X2&) {return true;}\n+\n+forward_iterator_wrapper<S1>\n+test1(forward_iterator_wrapper<S1>& s1, forward_iterator_wrapper<S2>& s2)\n+{ return std::search(s1, s1, s2, s2); }\n+\n+forward_iterator_wrapper<X1>\n+test2(forward_iterator_wrapper<X1>& x1, forward_iterator_wrapper<X2>& x2)\n+{ return std::search(x1, x1, x2, x2, predicate); }"}, {"sha": "fea009d2775244bb14a979030b3c938bcd7f4d6b", "filename": "libstdc++-v3/testsuite/25_algorithms/search_n/iterator.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fsearch_n%2Fiterator.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -76,7 +76,7 @@ int main() {\n \t  {\n \t    test_container<int, forward_iterator_wrapper>\n \t      forwardcon(array2, array2 + i);\n-\t    test_container<int, bidirectional_iterator_wrapper>\n+\t    test_container<int, random_access_iterator_wrapper>\n \t      randomcon(array2, array2 + i);\n \t    test_container<int, bidirectional_iterator_wrapper>\n \t      bidircon(array2, array2 + i);"}, {"sha": "9d0fbe62639ef9760b95776f552440ab3e3894dd", "filename": "libstdc++-v3/testsuite/25_algorithms/set_difference/1.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.3 [lib.set.difference]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::set_difference;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+void \n+test1()\n+{\n+  int array1[1], array2[1];\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_difference(con1.begin(), con1.end(), con2.begin(), con2.end(), \n+\t con3.begin()).ptr == array2);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1 + 1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_difference(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array2);\n+}\n+\n+void \n+test3()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1 + 1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2 + 1);\n+  VERIFY(set_difference(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array2 + 1);\n+}\n+\n+void \n+test4()\n+{\n+  int array1[]={0,1,1,2,4};\n+  int array2[]={1,2,3};\n+  int array3[6];\n+  Icontainer con1(array1, array1 + 5);\n+  Icontainer con2(array2, array2 + 3);\n+  Ocontainer con3(array3, array3 + 3);\n+  VERIFY(set_difference(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array3 + 3);\n+  VERIFY(array3[0] == 0 && array3[1] == 1 && array3[2] == 4);\n+}\n+\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+typedef test_container<S, input_iterator_wrapper> SIcontainer;\n+typedef test_container<S, output_iterator_wrapper> SOcontainer;\n+\n+void \n+test5()\n+{\n+  S array1[] = { -1, -1, -1, -2, -2, -3, -4};\n+  S array2[] = { 1, 1, 1, 1, 2, 4, 4};\n+  S array3[9];\n+  SIcontainer con1(array1, array1 + 7);\n+  SIcontainer con2(array2, array2 + 7);\n+  SOcontainer con3(array3, array3 + 2);\n+  VERIFY(set_difference(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+ \t\t   con3.begin()).ptr == array3 + 2);\n+  for(int i = 0; i < 2; ++i)\n+    VERIFY(array3[i].j == 0);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}\n+"}, {"sha": "43d54ad5ae366b103ca3f20d269e66363802cc4f", "filename": "libstdc++-v3/testsuite/25_algorithms/set_difference/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_difference%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.4 [lib.set.difference]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+output_iterator_wrapper<S>\n+test1(input_iterator_wrapper<S>& in, output_iterator_wrapper<S>& out)\n+{ return std::set_difference(in, in, in, in, out); }\n+\n+output_iterator_wrapper<X> \n+test2(input_iterator_wrapper<X>& in, output_iterator_wrapper<X>& out)\n+{ return std::set_difference(in, in, in, in, out, predicate); }"}, {"sha": "d0a648e9a53042e3bcb4ceb0f32ee10bdf89ed37", "filename": "libstdc++-v3/testsuite/25_algorithms/set_intersection/1.cc", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,132 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.3 [lib.set.intersection]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::set_intersection;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+void \n+test1()\n+{\n+  int array1[1], array2[1];\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_intersection(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t           con3.begin()).ptr == array2);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1 + 1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_intersection(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array2);\n+}\n+\n+void \n+test3()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1 + 1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_intersection(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array2);\n+}\n+\n+void \n+test4()\n+{\n+  int array1[]={0,1,1,2,4};\n+  int array2[]={1,2,3};\n+  int array3[6];\n+  Icontainer con1(array1, array1 + 5);\n+  Icontainer con2(array2, array2 + 3);\n+  Ocontainer con3(array3, array3 + 2);\n+  VERIFY(set_intersection(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t\t  con3.begin()).ptr == array3 + 2);\n+  VERIFY(array3[0] == 1 && array3[1] == 2);\n+}\n+\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+typedef test_container<S, input_iterator_wrapper> SIcontainer;\n+typedef test_container<S, output_iterator_wrapper> SOcontainer;\n+\n+void \n+test5()\n+{\n+  S array1[] = { -1, -1, -1, -2, -2, -4};\n+  S array2[] = { 1, 1, 1, 1, 2, 3, 4, 4};\n+  S array3[5];\n+  SIcontainer con1(array1, array1 + 6);\n+  SIcontainer con2(array2, array2 + 8);\n+  SOcontainer con3(array3, array3 + 5);\n+  VERIFY(set_intersection(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+ \t\t   con3.begin()).ptr == array3 + 5);\n+  for(int i = 0; i < 5; ++i)\n+    VERIFY(array3[i].j == 0);\n+}\n+\n+int main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}\n+"}, {"sha": "a1ef6f9486ee2890e1d817cd61bf85bc8fcd4c7a", "filename": "libstdc++-v3/testsuite/25_algorithms/set_intersection/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_intersection%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.3 [lib.set.intersection]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+output_iterator_wrapper<S>\n+test1(input_iterator_wrapper<S>& in, output_iterator_wrapper<S>& out)\n+{ return std::set_intersection(in, in, in, in, out); }\n+\n+output_iterator_wrapper<X> \n+test2(input_iterator_wrapper<X>& in, output_iterator_wrapper<X>& out)\n+{ return std::set_intersection(in, in, in, in, out, predicate); }"}, {"sha": "932eb4f41cfc90cf894ce3d4b4f3ebac3cf89c77", "filename": "libstdc++-v3/testsuite/25_algorithms/set_symmetric_difference/1.cc", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,134 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.5 [lib.set.symmetric.difference]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::set_symmetric_difference;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+void\n+test1()\n+{\n+  int array1[1], array2[1];\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_symmetric_difference(con1.begin(), con1.end(), con2.begin(), \n+\t\t\t\t  con2.end(), con3.begin()).ptr == array2);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1 + 1);\n+  Ocontainer con3(array2, array2 + 1);\n+  VERIFY(set_symmetric_difference(con1.begin(), con1.end(), con2.begin(), \n+\t\t\t\t  con2.end(), con3.begin()).ptr == array2 + 1);\n+}\n+\n+void \n+test3()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1 + 1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2 + 1);\n+  VERIFY(set_symmetric_difference(con1.begin(), con1.end(), con2.begin(), \n+\t\t\t\t  con2.end(), con3.begin()).ptr == array2 + 1);\n+}\n+\n+void \n+test4()\n+{\n+  int array1[]={0,1,1,2,4};\n+  int array2[]={1,2,2,3};\n+  int array3[5];\n+  Icontainer con1(array1, array1 + 5);\n+  Icontainer con2(array2, array2 + 4);\n+  Ocontainer con3(array3, array3 + 5);\n+  VERIFY(set_symmetric_difference(con1.begin(), con1.end(), con2.begin(), \n+\t\t\t\t  con2.end(), con3.begin()).ptr == array3 + 5);\n+  VERIFY(array3[0] == 0 && array3[1] == 1 && array3[2] == 2 &&\n+\t array3[3] == 3 && array3[4] == 4);\n+}\n+\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+typedef test_container<S, input_iterator_wrapper> SIcontainer;\n+typedef test_container<S, output_iterator_wrapper> SOcontainer;\n+\n+void \n+test5()\n+{\n+  S array1[] = { -1, -1, -2, -2, -4, -5};\n+  S array2[] = { 1, 1, 1, 2, 3, 4};\n+  S array3[4];\n+  SIcontainer con1(array1, array1 + 6);\n+  SIcontainer con2(array2, array2 + 6);\n+  SOcontainer con3(array3, array3 + 4);\n+  VERIFY(set_symmetric_difference(con1.begin(), con1.end(), con2.begin(), \n+\t\t\t\t  con2.end(), con3.begin()).ptr == array3 + 4);\n+  VERIFY(array3[0].j == 1 && array3[1].j == 0 && array3[2].j == 1 &&\n+\t array3[3].j == 0);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}\n+"}, {"sha": "c9c63a7f2d0bf2e22abb6284e3c1bd800a379304", "filename": "libstdc++-v3/testsuite/25_algorithms/set_symmetric_difference/check_type.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_symmetric_difference%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,45 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.5 [lib.set.symmetric.difference]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+output_iterator_wrapper<S>\n+test1(input_iterator_wrapper<S>& in, output_iterator_wrapper<S>& out)\n+{ return std::set_symmetric_difference(in, in, in, in, out); }\n+\n+output_iterator_wrapper<X> \n+test2(input_iterator_wrapper<X>& in, output_iterator_wrapper<X>& out)\n+{ return std::set_symmetric_difference(in, in, in, in, out, predicate); \n+}"}, {"sha": "03bfcaca8b2678e9ea54f8efab2489bd727e4920", "filename": "libstdc++-v3/testsuite/25_algorithms/set_union/1.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,137 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.2 [lib.set.union]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::set_union;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+void \n+test1()\n+{\n+  int array1[1], array2[1];\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2);\n+  VERIFY(set_union(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t           con3.begin()).ptr == array2);\n+}\n+\n+void \n+test2()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1);\n+  Icontainer con2(array1, array1 + 1);\n+  Ocontainer con3(array2, array2 + 1);\n+  VERIFY(set_union(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t\t   con3.begin()).ptr == array2 + 1);\n+  VERIFY(array2[0] == 1);\n+}\n+\n+void \n+test3()\n+{\n+  int array1[] = {1};\n+  int array2[] = {0};\n+  Icontainer con1(array1, array1 + 1);\n+  Icontainer con2(array1, array1);\n+  Ocontainer con3(array2, array2 + 1);\n+  VERIFY(set_union(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+                   con3.begin()).ptr == array2 + 1);\n+  VERIFY(array2[0] == 1);\n+}\n+\n+void \n+test4()\n+{\n+  int array1[]={0,1,1,2,4};\n+  int array2[]={1,2,3};\n+  int array3[6];\n+  Icontainer con1(array1, array1 + 5);\n+  Icontainer con2(array2, array2 + 3);\n+  Ocontainer con3(array3, array3 + 6);\n+  VERIFY(set_union(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+\t       con3.begin()).ptr == array3 + 6);\n+  VERIFY(array3[0] == 0 && array3[1] == 1 && array3[2] == 1 &&\n+\t array3[3] == 2 && array3[4] == 3 && array3[5] == 4);\n+}\n+\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+typedef test_container<S, input_iterator_wrapper> SIcontainer;\n+typedef test_container<S, output_iterator_wrapper> SOcontainer;\n+\n+void \n+test5()\n+{\n+  S array1[] = { -1, -1, -1, -2, -2, -4};\n+  S array2[] = { 1, 1, 1, 1, 2, 3, 4, 4};\n+  S array3[9];\n+  SIcontainer con1(array1, array1 + 6);\n+  SIcontainer con2(array2, array2 + 8);\n+  SOcontainer con3(array3, array3 + 9);\n+  VERIFY(set_union(con1.begin(), con1.end(), con2.begin(), con2.end(),\n+ \t\t   con3.begin()).ptr == array3 + 9);\n+  VERIFY(array3[0].j == 0 && array3[1].j == 0 && array3[2].j == 0 &&\n+         array3[3].j == 1 && array3[4].j == 0 && array3[5].j == 0 &&\n+\t array3[6].j == 1 && array3[7].j == 0 && array3[8].j == 1);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+  test5();\n+}\n+"}, {"sha": "286de97fec4970c655633c978f06317bcca6f87b", "filename": "libstdc++-v3/testsuite/25_algorithms/set_union/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fset_union%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.5.2 [lib.set.union]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+output_iterator_wrapper<S>\n+test1(input_iterator_wrapper<S>& in, output_iterator_wrapper<S>& out)\n+{ return std::set_union(in, in, in, in, out); }\n+\n+output_iterator_wrapper<X> \n+test2(input_iterator_wrapper<X>& in, output_iterator_wrapper<X>& out)\n+{ return std::set_union(in, in, in, in, out, predicate); }"}, {"sha": "659c2782a39ba39d5aa81d603ed0d83c98c6ce6d", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/1.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.2 [lib.stable.sort]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+using std::stable_sort;\n+\n+typedef test_container<int, random_access_iterator_wrapper> Container;\n+\n+void \n+test1()\n+{\n+  int array[]={0};\n+  Container con(array, array);\n+  stable_sort(con.begin(), con.end());\n+}\n+\n+void \n+test2()\n+{\n+  int array[] = {6, 5, 4, 3, 2, 1, 0};\n+  Container con(array, array + 7);\n+  stable_sort(con.begin(), con.end());\n+  VERIFY(array[0] == 0 && array[1] == 1 && array[2] == 2 &&\n+\t array[3] == 3 && array[4] == 4 && array[5] == 5 &&\n+\t array[6] == 6);\n+}\n+struct S\n+{\n+  int i;\n+  int j;\n+  S() {}\n+  S(int in)\n+  {\n+    if(in > 0)\n+    {\n+      i = in;\n+      j = 1;\n+    }\n+    else\n+    {\n+      i = -in;\n+      j = 0;\n+    }\n+  }\n+};\n+\n+bool \n+operator<(const S& s1, const S& s2)\n+{ return s1.i < s2.i; }\n+\n+void \n+test3()\n+{\n+\n+  S array[] = {-1, -2, 1, 2, -3 ,-5 ,3 , -4, 5, 4};\n+  test_container<S, random_access_iterator_wrapper> con(array,array + 10);\n+  stable_sort(con.begin(), con.end());\n+  for(int i = 0; i < 10; ++i)\n+    VERIFY(array[i].j == i % 2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+}"}, {"sha": "8e7c51d18d734029de93ce2d6afd99eff8ea2d37", "filename": "libstdc++-v3/testsuite/25_algorithms/stable_sort/check_type.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fstable_sort%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,49 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.1.1 [lib.stable.sort]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+void\n+test1(random_access_iterator_wrapper<S>& s)\n+{\n+  std::stable_sort(s, s);\n+}\n+\n+void\n+test2(random_access_iterator_wrapper<X>& x)\n+{\n+  std::stable_sort(x, x, predicate);\n+}\n+"}, {"sha": "e4a23e28afd987c76fd57a89d65b030c364121a5", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/1.cc", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,60 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.2 swap_ranges\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container; \n+\n+\n+void\n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array1[]={1, 2};\n+  int array2[]={3, 4};\n+  Container con1(array1, array1 + 2);\n+  Container con2(array2, array2 + 2);\n+  VERIFY(std::swap_ranges(con1.begin(), con1.end(), con2.begin()).ptr ==\n+\t array2 + 2);\n+  VERIFY(array1[0] == 3 && array1[1] == 4 && array2[0] == 1 && array2[1] == 2);\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  int array1[] = {1};\n+  int array2[] = {1};\n+  Container con1(array1, array1);\n+  Container con2(array2, array2);\n+  VERIFY(swap_ranges(con1.begin(), con1.end(), con2.begin()).ptr == array2);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+}"}, {"sha": "a19d92c651826239a2ac935d24b1b44d0583d463", "filename": "libstdc++-v3/testsuite/25_algorithms/swap_ranges/check_type.cc", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fswap_ranges%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,35 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.2.4 Swap Ranges\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct X {\n+};\n+\n+void\n+test1(forward_iterator_wrapper<X>& begin,\n+      forward_iterator_wrapper<X>& end, \n+      forward_iterator_wrapper<X>& begin2)\n+{ std::swap_ranges(begin, end, begin2); }"}, {"sha": "4f96c3a64c0e8da8ad7bcf2f61e279852c9356a0", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/1.cc", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,85 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.5.8 [lib.alg.unique]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::forward_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+using std::unique;\n+\n+typedef test_container<int, input_iterator_wrapper> Icontainer;\n+typedef test_container<int, forward_iterator_wrapper> Fcontainer;\n+typedef test_container<int, output_iterator_wrapper> Ocontainer;\n+\n+int array1[] = {0, 0, 0, 1, 1, 1};\n+int array2[2];\n+\n+void \n+test1()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Icontainer con1(array1, array1);\n+  Ocontainer con2(array2, array2);\n+  VERIFY(unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2);\n+}\n+\n+void\n+test2()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Icontainer con1(array1, array1 + 6);\n+  Ocontainer con2(array2, array2 + 2);\n+  VERIFY(unique_copy(con1.begin(), con1.end(), con2.begin()).ptr \n+         == array2 + 2);\n+  VERIFY(array2[0] == 0 && array2[1] == 1);\n+}\n+\n+void\n+test3()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Icontainer con1(array1, array1);\n+  Fcontainer con2(array2, array2);\n+  VERIFY(unique_copy(con1.begin(), con1.end(), con2.begin()).ptr == array2);\n+}\n+\n+void\n+test4()\n+{\n+  bool test __attribute__((unused)) = true;\n+  Icontainer con1(array1, array1 + 6);\n+  Fcontainer con2(array2, array2 + 2);\n+  VERIFY(unique_copy(con1.begin(), con1.end(), con2.begin()).ptr\n+         == array2 + 2);\n+  VERIFY(array2[0] == 0 && array2[1] == 1);\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  test2();\n+  test3();\n+  test4();\n+}"}, {"sha": "1c6731e9df9f15bd59ceb743bad75ab3ac62f087", "filename": "libstdc++-v3/testsuite/25_algorithms/unique_copy/check_type.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Funique_copy%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,55 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.5.8 [lib.alg.unique_copy]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::input_iterator_wrapper;\n+using __gnu_test::output_iterator_wrapper;\n+\n+struct S1 { };\n+\n+struct S2\n+{\n+  S2(const S1& s1) {}\n+};\n+\n+bool \n+operator==(const S1&, const S1&) {return true;}\n+\n+struct X1 { };\n+\n+struct X2\n+{\n+  X2(const X1& x1) {}\n+};\n+\n+bool \n+predicate(const X1&, const X1&) {return true;}\n+\n+output_iterator_wrapper<S2> \n+test1(input_iterator_wrapper<S1>& s1, output_iterator_wrapper<S2>& s2)\n+{ return std::unique_copy(s1, s1, s2); }\n+\n+output_iterator_wrapper<X2>\n+test2(input_iterator_wrapper<X1>& x1, output_iterator_wrapper<X2>& x2)\n+{ return std::unique_copy(x1, x1, x2, predicate); }"}, {"sha": "8b518ef0098664b7251757865b5c6942deb2f1a3", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/1.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.2 [lib.upper.bound]\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::forward_iterator_wrapper;\n+using std::upper_bound;\n+\n+typedef test_container<int, forward_iterator_wrapper> Container;\n+int array[] = {0, 0, 0, 0, 1, 1, 1, 1};\n+\n+void \n+test1()\n+{\n+  for(int i = 0; i < 5; ++i)\n+    for(int j = 4; j < 7; ++j)\n+      {\n+\tContainer con(array + i, array + j);\n+\tVERIFY(upper_bound(con.begin(), con.end(), 0).ptr == array + 4);\n+      }\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+}"}, {"sha": "f0c0774add00bdae84272e7027c6ca33f0f23d68", "filename": "libstdc++-v3/testsuite/25_algorithms/upper_bound/check_type.cc", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F25_algorithms%2Fupper_bound%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,44 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 25.3.3.2 [lib.upper.bound]\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::forward_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+forward_iterator_wrapper<S>\n+test1(forward_iterator_wrapper<S>& s)\n+{ return std::upper_bound(s, s, *s); }\n+\n+forward_iterator_wrapper<X>\n+test2(forward_iterator_wrapper<X>& x)\n+{ return std::upper_bound(x, x, *x, predicate); }"}, {"sha": "3974f03c464091f5d622046ca5a9add51bfb8f32", "filename": "libstdc++-v3/testsuite/ext/is_heap/1.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2F1.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2F1.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2F1.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_container;\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+typedef test_container<int, random_access_iterator_wrapper> container;\n+\n+void \n+test1()\n+{\n+  int array[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n+  for(int i = 0; i < 10; ++i)\n+    {\n+      container con(array, array + i);\n+      std::make_heap(con.begin(), con.end());\n+      VERIFY(std::__is_heap(con.begin(), con.end()));\n+      VERIFY(std::__is_heap(con.begin(), i));\n+    }\n+}\n+\n+int \n+main()\n+{\n+  test1();\n+  return 0;\n+}"}, {"sha": "6c791bd80ac40308259b9dd327111c35cd7e2344", "filename": "libstdc++-v3/testsuite/ext/is_heap/check_type.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2Fcheck_type.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2Fcheck_type.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fis_heap%2Fcheck_type.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,47 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// { dg-do compile }\n+\n+#include <algorithm>\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::random_access_iterator_wrapper;\n+\n+struct S { };\n+\n+bool \n+operator<(const S&, const S&) {return true;}\n+\n+struct X { };\n+\n+bool \n+predicate(const X&, const X&) {return true;}\n+\n+bool\n+test1(random_access_iterator_wrapper<S>& start,\n+      random_access_iterator_wrapper<S>& end)\n+{ return std::__is_heap(start, end) && std::__is_heap(start, 1); }\n+\n+bool\n+test2(random_access_iterator_wrapper<X>& start,\n+      random_access_iterator_wrapper<X>& end)\n+{ \n+  return std::__is_heap(start, end, predicate) &&\n+         std::__is_heap(start, predicate, 1);\n+}"}, {"sha": "97e44ea5bb9e3cbec888567c6dbd498b8a3de241", "filename": "libstdc++-v3/testsuite/ext/median.cc", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmedian.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e994557d37823b4646fc2ed62712046b3345f64/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmedian.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmedian.cc?ref=0e994557d37823b4646fc2ed62712046b3345f64", "patch": "@@ -0,0 +1,42 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// median - SGI extension\n+\n+#include <algorithm>\n+#include <testsuite_hooks.h>\n+\n+bool pred(const int& l, const int& r)\n+{\n+  return l<r;\n+}\n+\n+using std::__median;\n+\n+int main(void)\n+{\n+  const int i=1;\n+  const int j=2;\n+  const int k=3;\n+  VERIFY(__median(i, j, k) == j && __median(i, j, k, pred) == j);\n+  VERIFY(__median(i, k, j) == j && __median(i, k, j, pred) == j);\n+  VERIFY(__median(j, i, k) == j && __median(j, i, k, pred) == j);\n+  VERIFY(__median(j, k, i) == j && __median(j, k, i, pred) == j);\n+  VERIFY(__median(k, i, j) == j && __median(k, i, j, pred) == j);\n+  VERIFY(__median(k, j, i) == j && __median(k, j, i, pred) == j);\n+}"}]}