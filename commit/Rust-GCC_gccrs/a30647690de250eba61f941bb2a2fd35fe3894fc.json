{"sha": "a30647690de250eba61f941bb2a2fd35fe3894fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTMwNjQ3NjkwZGUyNTBlYmE2MWY5NDFiYjJhMmZkMzVmZTM4OTRmYw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@adacore.com", "date": "2021-03-14T17:32:59Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-06-18T08:36:47Z"}, "message": "[Ada] Code cleanups in exp_ch6.adb\n\ngcc/ada/\n\n\t* exp_ch6.adb (Expand_Call_Helper): Code cleanups.", "tree": {"sha": "d5856da579d3e5b4bfec5c72aa45fabb538e4c46", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d5856da579d3e5b4bfec5c72aa45fabb538e4c46"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a30647690de250eba61f941bb2a2fd35fe3894fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30647690de250eba61f941bb2a2fd35fe3894fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a30647690de250eba61f941bb2a2fd35fe3894fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a30647690de250eba61f941bb2a2fd35fe3894fc/comments", "author": {"login": "ArnaudCharlet", "id": 30291825, "node_id": "MDQ6VXNlcjMwMjkxODI1", "avatar_url": "https://avatars.githubusercontent.com/u/30291825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ArnaudCharlet", "html_url": "https://github.com/ArnaudCharlet", "followers_url": "https://api.github.com/users/ArnaudCharlet/followers", "following_url": "https://api.github.com/users/ArnaudCharlet/following{/other_user}", "gists_url": "https://api.github.com/users/ArnaudCharlet/gists{/gist_id}", "starred_url": "https://api.github.com/users/ArnaudCharlet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ArnaudCharlet/subscriptions", "organizations_url": "https://api.github.com/users/ArnaudCharlet/orgs", "repos_url": "https://api.github.com/users/ArnaudCharlet/repos", "events_url": "https://api.github.com/users/ArnaudCharlet/events{/privacy}", "received_events_url": "https://api.github.com/users/ArnaudCharlet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4463d6eebc0a160c93a30feb1a5e8025f9a344d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4463d6eebc0a160c93a30feb1a5e8025f9a344d8"}], "stats": {"total": 105, "additions": 51, "deletions": 54}, "files": [{"sha": "14c5d186eca21ce8e14539af4c7ef44c08c401d7", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 51, "deletions": 54, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a30647690de250eba61f941bb2a2fd35fe3894fc/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a30647690de250eba61f941bb2a2fd35fe3894fc/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=a30647690de250eba61f941bb2a2fd35fe3894fc", "patch": "@@ -4248,6 +4248,16 @@ package body Exp_Ch6 is\n       if Nkind (Call_Node) in N_Subprogram_Call\n         and then Present (Controlling_Argument (Call_Node))\n       then\n+         if Tagged_Type_Expansion then\n+            Expand_Dispatching_Call (Call_Node);\n+\n+            --  Expand_Dispatching_Call takes care of all the needed processing\n+\n+            return;\n+         end if;\n+\n+         --  VM targets\n+\n          declare\n             Call_Typ   : constant Entity_Id := Etype (Call_Node);\n             Typ        : constant Entity_Id := Find_Dispatching_Type (Subp);\n@@ -4257,69 +4267,56 @@ package body Exp_Ch6 is\n             Prev_Call  : Node_Id;\n \n          begin\n+            Apply_Tag_Checks (Call_Node);\n+\n             if not Is_Limited_Type (Typ) then\n                Eq_Prim_Op := Find_Prim_Op (Typ, Name_Op_Eq);\n             end if;\n \n-            if Tagged_Type_Expansion then\n-               Expand_Dispatching_Call (Call_Node);\n-\n-               --  The following return is worrisome. Is it really OK to skip\n-               --  all remaining processing in this procedure ???\n-\n-               return;\n-\n-            --  VM targets\n-\n-            else\n-               Apply_Tag_Checks (Call_Node);\n-\n-               --  If this is a dispatching \"=\", we must first compare the\n-               --  tags so we generate: x.tag = y.tag and then x = y\n-\n-               if Subp = Eq_Prim_Op then\n+            --  If this is a dispatching \"=\", we must first compare the\n+            --  tags so we generate: x.tag = y.tag and then x = y\n \n-                  --  Mark the node as analyzed to avoid reanalyzing this\n-                  --  dispatching call (which would cause a never-ending loop)\n-\n-                  Prev_Call := Relocate_Node (Call_Node);\n-                  Set_Analyzed (Prev_Call);\n+            if Subp = Eq_Prim_Op then\n \n-                  Param := First_Actual (Call_Node);\n-                  New_Call :=\n-                    Make_And_Then (Loc,\n-                      Left_Opnd =>\n-                           Make_Op_Eq (Loc,\n-                             Left_Opnd =>\n-                               Make_Selected_Component (Loc,\n-                                 Prefix        => New_Value (Param),\n-                                 Selector_Name =>\n-                                   New_Occurrence_Of\n-                                     (First_Tag_Component (Typ), Loc)),\n+               --  Mark the node as analyzed to avoid reanalyzing this\n+               --  dispatching call (which would cause a never-ending loop)\n+\n+               Prev_Call := Relocate_Node (Call_Node);\n+               Set_Analyzed (Prev_Call);\n+\n+               Param := First_Actual (Call_Node);\n+               New_Call :=\n+                 Make_And_Then (Loc,\n+                   Left_Opnd =>\n+                        Make_Op_Eq (Loc,\n+                          Left_Opnd =>\n+                            Make_Selected_Component (Loc,\n+                              Prefix        => New_Value (Param),\n+                              Selector_Name =>\n+                                New_Occurrence_Of\n+                                  (First_Tag_Component (Typ), Loc)),\n+\n+                          Right_Opnd =>\n+                            Make_Selected_Component (Loc,\n+                              Prefix        =>\n+                                Unchecked_Convert_To (Typ,\n+                                  New_Value (Next_Actual (Param))),\n+                              Selector_Name =>\n+                                New_Occurrence_Of\n+                                  (First_Tag_Component (Typ), Loc))),\n+                   Right_Opnd => Prev_Call);\n \n-                             Right_Opnd =>\n-                               Make_Selected_Component (Loc,\n-                                 Prefix        =>\n-                                   Unchecked_Convert_To (Typ,\n-                                     New_Value (Next_Actual (Param))),\n-                                 Selector_Name =>\n-                                   New_Occurrence_Of\n-                                     (First_Tag_Component (Typ), Loc))),\n-                      Right_Opnd => Prev_Call);\n-\n-                  Rewrite (Call_Node, New_Call);\n-\n-                  Analyze_And_Resolve\n-                    (Call_Node, Call_Typ, Suppress => All_Checks);\n-               end if;\n+               Rewrite (Call_Node, New_Call);\n+               Analyze_And_Resolve\n+                 (Call_Node, Call_Typ, Suppress => All_Checks);\n+            end if;\n \n-               --  Expansion of a dispatching call results in an indirect call,\n-               --  which in turn causes current values to be killed (see\n-               --  Resolve_Call), so on VM targets we do the call here to\n-               --  ensure consistent warnings between VM and non-VM targets.\n+            --  Expansion of a dispatching call results in an indirect call,\n+            --  which in turn causes current values to be killed (see\n+            --  Resolve_Call), so on VM targets we do the call here to\n+            --  ensure consistent warnings between VM and non-VM targets.\n \n-               Kill_Current_Values;\n-            end if;\n+            Kill_Current_Values;\n \n             --  If this is a dispatching \"=\" then we must update the reference\n             --  to the call node because we generated:"}]}