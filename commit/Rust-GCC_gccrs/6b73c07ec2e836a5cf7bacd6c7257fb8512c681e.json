{"sha": "6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "node_id": "C_kwDOANBUbNoAKDZiNzNjMDdlYzJlODM2YTVjZjdiYWNkNmM3MjU3ZmI4NTEyYzY4MWU", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-18T17:42:02Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2022-01-20T15:26:01Z"}, "message": "Only add equivalencies that are still valid.\n\nWhen equivalencies sets are merged, each member of the set should be queried\nto ensure its still valid rather than a bulk union.\n\n\t* value-relation.cc (relation_oracle::valid_equivs): Query and add\n\tif valid members of a set.\n\t(equiv_oracle::register_equiv): Call valid_equivs rather than\n\tbitmap direct operations.\n\t(path_oracle::register_equiv): Ditto.\n\t* value-relation.h (relation_oracle::valid_equivs): New prototype.", "tree": {"sha": "a7225e8ce5868c713a0bfad087ef8fe026030acd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7225e8ce5868c713a0bfad087ef8fe026030acd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e/comments", "author": null, "committer": null, "parents": [{"sha": "09845ad7569bac27c3a1dc7b410d9df764d2ca06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09845ad7569bac27c3a1dc7b410d9df764d2ca06", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09845ad7569bac27c3a1dc7b410d9df764d2ca06"}], "stats": {"total": 43, "additions": 31, "deletions": 12}, "files": [{"sha": "0134e0328ba4bc3ee2715b0668fc8b97207664b6", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 29, "deletions": 12, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "patch": "@@ -188,6 +188,23 @@ relation_transitive (relation_kind r1, relation_kind r2)\n   return rr_transitive_table[r1 - VREL_FIRST][r2 - VREL_FIRST];\n }\n \n+// Given an equivalence set EQUIV, set all the bits in B that are still valid\n+// members of EQUIV in basic block BB.\n+\n+void\n+relation_oracle::valid_equivs (bitmap b, const_bitmap equivs, basic_block bb)\n+{\n+  unsigned i;\n+  bitmap_iterator bi;\n+  EXECUTE_IF_SET_IN_BITMAP (equivs, 0, i, bi)\n+    {\n+      tree ssa = ssa_name (i);\n+      const_bitmap ssa_equiv = equiv_set (ssa, bb);\n+      if (ssa_equiv == equivs)\n+\tbitmap_set_bit (b, i);\n+    }\n+}\n+\n // -------------------------------------------------------------------------\n \n // The very first element in the m_equiv chain is actually just a summary\n@@ -364,7 +381,7 @@ equiv_oracle::register_equiv (basic_block bb, unsigned v, equiv_chain *equiv)\n   // Otherwise create an equivalence for this block which is a copy\n   // of equiv, the add V to the set.\n   bitmap b = BITMAP_ALLOC (&m_bitmaps);\n-  bitmap_copy (b, equiv->m_names);\n+  valid_equivs (b, equiv->m_names, bb);\n   bitmap_set_bit (b, v);\n   return b;\n }\n@@ -378,32 +395,32 @@ bitmap\n equiv_oracle::register_equiv (basic_block bb, equiv_chain *equiv_1,\n \t\t\t      equiv_chain *equiv_2)\n {\n-  // If equiv_1 is alreayd in BB, use it as the combined set.\n+  // If equiv_1 is already in BB, use it as the combined set.\n   if (equiv_1->m_bb == bb)\n     {\n-      bitmap_ior_into  (equiv_1->m_names, equiv_2->m_names);\n+      valid_equivs (equiv_1->m_names, equiv_2->m_names, bb);\n       // Its hard to delete from a single linked list, so\n       // just clear the second one.\n       if (equiv_2->m_bb == bb)\n \tbitmap_clear (equiv_2->m_names);\n       else\n-\t// Ensure equiv_2s names are in the summary for BB.\n-\tbitmap_ior_into (m_equiv[bb->index]->m_names, equiv_2->m_names);\n+\t// Ensure the new names are in the summary for BB.\n+\tbitmap_ior_into (m_equiv[bb->index]->m_names, equiv_1->m_names);\n       return NULL;\n     }\n   // If equiv_2 is in BB, use it for the combined set.\n   if (equiv_2->m_bb == bb)\n     {\n-      bitmap_ior_into (equiv_2->m_names, equiv_1->m_names);\n-      // Add equiv_1 names into the summary.\n-      bitmap_ior_into (m_equiv[bb->index]->m_names, equiv_1->m_names);\n+      valid_equivs (equiv_2->m_names, equiv_1->m_names, bb);\n+      // Ensure the new names are in the summary.\n+      bitmap_ior_into (m_equiv[bb->index]->m_names, equiv_2->m_names);\n       return NULL;\n     }\n \n   // At this point, neither equivalence is from this block.\n   bitmap b = BITMAP_ALLOC (&m_bitmaps);\n-  bitmap_copy (b, equiv_1->m_names);\n-  bitmap_ior_into (b, equiv_2->m_names);\n+  valid_equivs (b, equiv_1->m_names, bb);\n+  valid_equivs (b, equiv_2->m_names, bb);\n   return b;\n }\n \n@@ -1289,8 +1306,8 @@ path_oracle::register_equiv (basic_block bb, tree ssa1, tree ssa2)\n \n   // Don't mess around, simply create a new record and insert it first.\n   bitmap b = BITMAP_ALLOC (&m_bitmaps);\n-  bitmap_copy (b, equiv_1);\n-  bitmap_ior_into (b, equiv_2);\n+  valid_equivs (b, equiv_1, bb);\n+  valid_equivs (b, equiv_2, bb);\n \n   equiv_chain *ptr = (equiv_chain *) obstack_alloc (&m_chain_obstack,\n \t\t\t\t\t\t    sizeof (equiv_chain));"}, {"sha": "d840234f355abf5723f3a45572e66f32480b6472", "filename": "gcc/value-relation.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b73c07ec2e836a5cf7bacd6c7257fb8512c681e/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=6b73c07ec2e836a5cf7bacd6c7257fb8512c681e", "patch": "@@ -96,6 +96,8 @@ class relation_oracle\n   virtual void dump (FILE *, basic_block) const = 0;\n   virtual void dump (FILE *) const = 0;\n   void debug () const;\n+protected:\n+  void valid_equivs (bitmap b, const_bitmap equivs, basic_block bb);\n };\n \n // This class represents an equivalency set, and contains a link to the next"}]}