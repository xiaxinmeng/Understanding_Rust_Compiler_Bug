{"sha": "70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzBiYTkwYjIyNjEwZmEyZjNhMjk1ZjFjNzgwYWFlYjZjZDkyOWI1OA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2012-05-17T18:54:37Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2012-05-17T18:54:37Z"}, "message": "re PR c++/39681 (Compile error is not descriptive)\n\n/cp\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/39681\n\t* parser.c (cp_parser_new_type_id): Early return error_mark_node\n\tif the cp_parser_type_specifier_seq call has type_specifier_seq.type\n\terror_mark_node; tidy.\n\t(cp_parser_new_expression): Always initialize nelts to NULL_TREE to\n\tavoid uninitialized warnings.\n\t(cp_parser_init_declarator, cp_parser_late_parse_one_default_arg):\n\tCall cp_parser_skip_to_end_of_statement if cp_parser_initializer\n\treturns error_mark_node.\n\n/testsuite\n2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/39681\n\t* g++.dg/parse/error48.C: New.\n\t* g++.dg/cpp0x/error8.C: Likewise.\n\t* g++.dg/ext/utf-cxx98.C: Adjust dg-error directive.\n\t* g++.dg/ext/utf-dflt2.C: Likewise.\n\t* g++.dg/ext/utf-gnuxx98.C: Likewise.\n\t* g++.dg/ext/utf-dflt.C: Likewise.\n\t* c-c++-common/raw-string-3.c: Likewise.\n\t* c-c++-common/raw-string-4.c: Likewise.\n\nFrom-SVN: r187634", "tree": {"sha": "0cfd7123ad39b42911197e5148760b5eba1aac91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0cfd7123ad39b42911197e5148760b5eba1aac91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/comments", "author": null, "committer": null, "parents": [{"sha": "8e6acdb8cd69c66bde4d7eedaf583708de7f540e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e6acdb8cd69c66bde4d7eedaf583708de7f540e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e6acdb8cd69c66bde4d7eedaf583708de7f540e"}], "stats": {"total": 102, "additions": 69, "deletions": 33}, "files": [{"sha": "2d69a3feb2196cacf5c1c67a6bc42707471c414f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -1,3 +1,15 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/39681\n+\t* parser.c (cp_parser_new_type_id): Early return error_mark_node\n+\tif the cp_parser_type_specifier_seq call has type_specifier_seq.type\n+\terror_mark_node; tidy.\n+\t(cp_parser_new_expression): Always initialize nelts to NULL_TREE to\n+\tavoid uninitialized warnings.\n+\t(cp_parser_init_declarator, cp_parser_late_parse_one_default_arg):\n+\tCall cp_parser_skip_to_end_of_statement if cp_parser_initializer\n+\treturns error_mark_node.\n+\n 2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53371"}, {"sha": "e51ab7453f3cefa53c635063dd72517fd4597871", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -6613,7 +6613,7 @@ cp_parser_new_expression (cp_parser* parser)\n   VEC(tree,gc) *placement;\n   tree type;\n   VEC(tree,gc) *initializer;\n-  tree nelts;\n+  tree nelts = NULL_TREE;\n   tree ret;\n \n   /* Look for the optional `::' operator.  */\n@@ -6666,7 +6666,6 @@ cp_parser_new_expression (cp_parser* parser)\n \t\t  \"try removing the parentheses around the type-id\");\n \t  cp_parser_direct_new_declarator (parser);\n \t}\n-      nelts = NULL_TREE;\n     }\n   /* Otherwise, there must be a new-type-id.  */\n   else\n@@ -6736,7 +6735,6 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n   cp_declarator *declarator;\n   cp_declarator *outer_declarator;\n   const char *saved_message;\n-  tree type;\n \n   /* The type-specifier sequence must not contain type definitions.\n      (It cannot contain declarations of new types either, but if they\n@@ -6751,6 +6749,10 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n \t\t\t\t&type_specifier_seq);\n   /* Restore the old message.  */\n   parser->type_definition_forbidden_message = saved_message;\n+\n+  if (type_specifier_seq.type == error_mark_node)\n+    return error_mark_node;\n+\n   /* Parse the new-declarator.  */\n   new_declarator = cp_parser_new_declarator_opt (parser);\n \n@@ -6787,8 +6789,7 @@ cp_parser_new_type_id (cp_parser* parser, tree *nelts)\n \tnew_declarator = NULL;\n     }\n \n-  type = groktypename (&type_specifier_seq, new_declarator, false);\n-  return type;\n+  return groktypename (&type_specifier_seq, new_declarator, false);\n }\n \n /* Parse an (optional) new-declarator.\n@@ -15735,6 +15736,8 @@ cp_parser_init_declarator (cp_parser* parser,\n \t\t\t\t\t       &is_non_constant_init);\n \t  if (!member_p && processing_template_decl)\n \t    finish_lambda_scope ();\n+\t  if (initializer == error_mark_node)\n+\t    cp_parser_skip_to_end_of_statement (parser);\n \t}\n     }\n \n@@ -21749,6 +21752,9 @@ cp_parser_late_parse_one_default_arg (cp_parser *parser, tree decl,\n \n   finish_lambda_scope ();\n \n+  if (parsed_arg == error_mark_node)\n+    cp_parser_skip_to_end_of_statement (parser);\n+\n   if (!processing_template_decl)\n     {\n       /* In a non-template class, check conversions now.  In a template,"}, {"sha": "4ee1fe611d9330e24d03fb4c58c64fed2b32a651", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -1,3 +1,15 @@\n+2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/39681\n+\t* g++.dg/parse/error48.C: New.\n+\t* g++.dg/cpp0x/error8.C: Likewise.\n+\t* g++.dg/ext/utf-cxx98.C: Adjust dg-error directive.\n+\t* g++.dg/ext/utf-dflt2.C: Likewise.\n+\t* g++.dg/ext/utf-gnuxx98.C: Likewise.\n+\t* g++.dg/ext/utf-dflt.C: Likewise.\n+\t* c-c++-common/raw-string-3.c: Likewise.\n+\t* c-c++-common/raw-string-4.c: Likewise.\n+\n 2012-05-17  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/53371"}, {"sha": "70d4145da0c0a4cdd2004e13accde452d0a0ab13", "filename": "gcc/testsuite/c-c++-common/raw-string-3.c", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-3.c?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -5,26 +5,26 @@\n // { dg-options \"-std=c++98\" { target c++ } }\n \n const void\t*s0\t= R\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 7 }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 7 }\n const void\t*s1\t= uR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 9 }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 9 }\n const void\t*s2\t= UR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 11 }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 11 }\n const void\t*s3\t= u8R\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 13 }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 13 }\n const void\t*s4\t= LR\"(a)\";\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 15 }\n-\n-const int\ti0\t= R'a';\t\t// { dg-error \"expected ',' or ';'\" }\n-\t\t// { dg-error \"was not declared\" \"\" { target c++ } 18 }\n-const int\ti1\t= uR'a';\t// { dg-error \"expected ',' or ';'\" }\n-\t\t// { dg-error \"was not declared\" \"\" { target c++ } 20 }\n-const int\ti2\t= UR'a';\t// { dg-error \"expected ',' or ';'\" }\n-\t\t// { dg-error \"was not declared\" \"\" { target c++ } 22 }\n-const int\ti3\t= u8R'a';\t// { dg-error \"expected ',' or ';'\" }\n-\t\t// { dg-error \"was not declared\" \"\" { target c++ } 24 }\n-const int\ti4\t= LR'a';\t// { dg-error \"expected ',' or ';'\" }\n-\t\t// { dg-error \"was not declared\" \"\" { target c++ } 26 }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 15 }\n+\n+const int\ti0\t= R'a';\t\t// { dg-error \"was not declared\" \"\" { target c++ } }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 18 }\n+const int\ti1\t= uR'a';\t// { dg-error \"was not declared\" \"\" { target c++ } }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 20 }\n+const int\ti2\t= UR'a';\t// { dg-error \"was not declared\" \"\" { target c++ } }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 22 }\n+const int\ti3\t= u8R'a';\t// { dg-error \"was not declared\" \"\" { target c++ } }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 24 }\n+const int\ti4\t= LR'a';\t// { dg-error \"was not declared\" \"\" { target c++ } }\n+                // { dg-error \"expected ',' or ';'\" \"\" { target c } 26 }\n \n #define R\t\"a\"\n #define uR\t\"b\""}, {"sha": "95825d7c9cf3d618d46cc907b1419e1b9e53c3be", "filename": "gcc/testsuite/c-c++-common/raw-string-4.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fraw-string-4.c?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -4,15 +4,15 @@\n // { dg-options \"-std=c++0x\" { target c++ } }\n \n const int\ti0\t= R'a';\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 6 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target c } 6 }\n const int\ti1\t= uR'a';\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 8 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target c } 8 }\n const int\ti2\t= UR'a';\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target c } 10 }\n const int\ti3\t= u8R'a';\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target c } 12 }\n const int\ti4\t= LR'a';\t// { dg-error \"was not declared|undeclared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 14 }\n+\t\t// { dg-error \"expected ',' or ';'\" \"\" { target c } 14 }\n \n #define R\t1 +\n #define uR\t2 +"}, {"sha": "cc4f87791a956f6350ea3dfa36d5ccdda90e42f1", "filename": "gcc/testsuite/g++.dg/cpp0x/error8.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Ferror8.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -0,0 +1,7 @@\n+// PR c++/39681\n+// { dg-do compile { target c++11 } }\n+\n+struct A\n+{\n+  int* p = new foo; // { dg-error \"16:expected type-specifier\" }\n+};"}, {"sha": "365118e3964589c7122dc2ccd889dbdc3c41ce8f", "filename": "gcc/testsuite/g++.dg/ext/utf-cxx98.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-cxx98.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -8,9 +8,7 @@ const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 } */\n const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 } */\n \n #define u\t1 +\n #define U\t2 +"}, {"sha": "c2b127d5ddad084d1657be28dabdb92a4ec088f5", "filename": "gcc/testsuite/g++.dg/ext/utf-dflt.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -8,9 +8,7 @@ const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 } */\n const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 } */\n \n #define u\t1 +\n #define U\t2 +"}, {"sha": "ab18ef52fdffaadf7e90d5d1e9709c201bc4c2f7", "filename": "gcc/testsuite/g++.dg/ext/utf-dflt2.C", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-dflt2.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -3,7 +3,6 @@\n // { dg-options \"-std=c++98\" }\n \n const void\t*s0 = u8\"a\";\t\t// { dg-error \"was not declared\" }\n-\t\t// { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 5 }\n \n #define u8\t\"a\"\n "}, {"sha": "b3be121e2dcbb5d3a58f4548e3726e516cddd47d", "filename": "gcc/testsuite/g++.dg/ext/utf-gnuxx98.C", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Futf-gnuxx98.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -8,9 +8,7 @@ const static char16_t\tc0\t= 'a';\t/* { dg-error \"not name a type\" } */\n const static char32_t\tc1\t= 'a';\t/* { dg-error \"not name a type\" } */\n \n const unsigned short\tc2\t= u'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 10 } */\n const unsigned long\tc3\t= U'a';\t/* { dg-error \"not declared\" } */\n-\t/* { dg-error \"expected ',' or ';'\" \"\" { target *-*-* } 12 } */\n \n #define u\t1 +\n #define U\t2 +"}, {"sha": "d5ec0c87ef67e98e4efa58c4fd70f16eced4ca8e", "filename": "gcc/testsuite/g++.dg/parse/error49.C", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror49.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/70ba90b22610fa2f3a295f1c780aaeb6cd929b58/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror49.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Ferror49.C?ref=70ba90b22610fa2f3a295f1c780aaeb6cd929b58", "patch": "@@ -0,0 +1,6 @@\n+// PR c++/39681\n+\n+int main()\n+{\n+  int* p = new foo; // { dg-error \"16:expected type-specifier\" }\n+}"}]}