{"sha": "d93417c86a355886015684eb5c43a45b09423d7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDkzNDE3Yzg2YTM1NTg4NjAxNTY4NGViNWM0M2E0NWIwOTQyM2Q3YQ==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2012-03-08T11:14:05Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2012-03-08T11:14:05Z"}, "message": "re PR target/52496 (avr-specific built-ins missing memory barrier)\n\n\tPR target/52496\n\t* config/avr/avr.c (avr_mem_clobber): New static function.\n\t(avr_expand_delay_cycles): Add memory clobber operand to\n\tdelay_cycles_1, delay_cycles_2, delay_cycles_3, delay_cycles_4.\n\t* config/avr/avr.md (unspec): Add UNSPEC_MEMORY_BARRIER.\n\t(enable_interrupt, disable_interrupt): New expander.\n\t(nopv, sleep, wdr): New expanders.\n\t(delay_cycles_1): Add memory clobber.\n\t(delay_cycles_2): Add memory clobber.\n\t(delay_cycles_3): Add memory clobber.\n\t(delay_cycles_4): Add memory clobber.\n\t(cli_sei): New insn from former \"enable_interrupt\",\n\t\"disable_interrupt\" with memory clobber.\n\t(*wdt): New insn from former \"wdt\" with memory clobber.\n\t(*nopv): Similar, but for \"nopv\".\n\t(*sleep): Similar, but for \"sleep\".\n\nFrom-SVN: r185100", "tree": {"sha": "07960c4f7d30e858b4b8ea747176e674755b2a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07960c4f7d30e858b4b8ea747176e674755b2a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d93417c86a355886015684eb5c43a45b09423d7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93417c86a355886015684eb5c43a45b09423d7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d93417c86a355886015684eb5c43a45b09423d7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d93417c86a355886015684eb5c43a45b09423d7a/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8dd52a990a5aefa3a865333a077873c3e5d14be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8dd52a990a5aefa3a865333a077873c3e5d14be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8dd52a990a5aefa3a865333a077873c3e5d14be"}], "stats": {"total": 177, "additions": 136, "deletions": 41}, "files": [{"sha": "7594d2dd74cfcb02e217c450604bb61ff7c87bcb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d93417c86a355886015684eb5c43a45b09423d7a", "patch": "@@ -1,3 +1,22 @@\n+2012-03-08  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/52496\n+\t* config/avr/avr.c (avr_mem_clobber): New static function.\n+\t(avr_expand_delay_cycles): Add memory clobber operand to\n+\tdelay_cycles_1, delay_cycles_2, delay_cycles_3, delay_cycles_4.\n+\t* config/avr/avr.md (unspec): Add UNSPEC_MEMORY_BARRIER.\n+\t(enable_interrupt, disable_interrupt): New expander.\n+\t(nopv, sleep, wdr): New expanders.\n+\t(delay_cycles_1): Add memory clobber.\n+\t(delay_cycles_2): Add memory clobber.\n+\t(delay_cycles_3): Add memory clobber.\n+\t(delay_cycles_4): Add memory clobber.\n+\t(cli_sei): New insn from former \"enable_interrupt\",\n+\t\"disable_interrupt\" with memory clobber.\n+\t(*wdt): New insn from former \"wdt\" with memory clobber.\n+\t(*nopv): Similar, but for \"nopv\".\n+\t(*sleep): Similar, but for \"sleep\".\n+\n 2012-03-07  Oleg Endo  <olegendo@gcc.gnu.org>\n \t    Kaz Kojima  <kkojima@gcc.gnu.org>\n "}, {"sha": "e52c5d85f6b1d28c18162c2610a368d8be145a47", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=d93417c86a355886015684eb5c43a45b09423d7a", "patch": "@@ -9973,6 +9973,14 @@ avr_out_movmem (rtx insn ATTRIBUTE_UNUSED, rtx *op, int *plen)\n \f\n /* Helper for __builtin_avr_delay_cycles */\n \n+static rtx\n+avr_mem_clobber (void)\n+{\n+  rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+  MEM_VOLATILE_P (mem) = 1;\n+  return mem;\n+}\n+\n static void\n avr_expand_delay_cycles (rtx operands0)\n {\n@@ -9984,7 +9992,8 @@ avr_expand_delay_cycles (rtx operands0)\n     {\n       loop_count = ((cycles - 9) / 6) + 1;\n       cycles_used = ((loop_count - 1) * 6) + 9;\n-      emit_insn (gen_delay_cycles_4 (gen_int_mode (loop_count, SImode)));\n+      emit_insn (gen_delay_cycles_4 (gen_int_mode (loop_count, SImode),\n+                                     avr_mem_clobber()));\n       cycles -= cycles_used;\n     }\n   \n@@ -9994,7 +10003,8 @@ avr_expand_delay_cycles (rtx operands0)\n       if (loop_count > 0xFFFFFF)\n         loop_count = 0xFFFFFF;\n       cycles_used = ((loop_count - 1) * 5) + 7;\n-      emit_insn (gen_delay_cycles_3 (gen_int_mode (loop_count, SImode)));\n+      emit_insn (gen_delay_cycles_3 (gen_int_mode (loop_count, SImode),\n+                                     avr_mem_clobber()));\n       cycles -= cycles_used;\n     }\n   \n@@ -10004,7 +10014,8 @@ avr_expand_delay_cycles (rtx operands0)\n       if (loop_count > 0xFFFF)\n         loop_count = 0xFFFF;\n       cycles_used = ((loop_count - 1) * 4) + 5;\n-      emit_insn (gen_delay_cycles_2 (gen_int_mode (loop_count, HImode)));\n+      emit_insn (gen_delay_cycles_2 (gen_int_mode (loop_count, HImode),\n+                                     avr_mem_clobber()));\n       cycles -= cycles_used;\n     }\n   \n@@ -10014,7 +10025,8 @@ avr_expand_delay_cycles (rtx operands0)\n       if (loop_count > 255) \n         loop_count = 255;\n       cycles_used = loop_count * 3;\n-      emit_insn (gen_delay_cycles_1 (gen_int_mode (loop_count, QImode)));\n+      emit_insn (gen_delay_cycles_1 (gen_int_mode (loop_count, QImode),\n+                                     avr_mem_clobber()));\n       cycles -= cycles_used;\n       }\n   "}, {"sha": "33a871e04d9092e3b4b9f985512139038a1ff584", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 101, "deletions": 37, "changes": 138, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d93417c86a355886015684eb5c43a45b09423d7a/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=d93417c86a355886015684eb5c43a45b09423d7a", "patch": "@@ -69,6 +69,7 @@\n    UNSPEC_COPYSIGN\n    UNSPEC_IDENTITY\n    UNSPEC_INSERT_BITS\n+   UNSPEC_MEMORY_BARRIER\n    ])\n \n (define_c_enum \"unspecv\"\n@@ -5237,18 +5238,36 @@\n    (set_attr \"length\" \"1\")])\n \n ;; Enable Interrupts\n-(define_insn \"enable_interrupt\"\n-  [(unspec_volatile [(const_int 1)] UNSPECV_ENABLE_IRQS)]\n+(define_expand \"enable_interrupt\"\n+  [(clobber (const_int 0))]\n   \"\"\n-  \"sei\"\n-  [(set_attr \"length\" \"1\")\n-   (set_attr \"cc\" \"none\")])\n+  {\n+    rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+    MEM_VOLATILE_P (mem) = 1;\n+    emit_insn (gen_cli_sei (const1_rtx, mem));\n+    DONE;\n+  })\n \n ;; Disable Interrupts\n-(define_insn \"disable_interrupt\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_ENABLE_IRQS)]\n+(define_expand \"disable_interrupt\"\n+  [(clobber (const_int 0))]\n   \"\"\n-  \"cli\"\n+  {\n+    rtx mem = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+    MEM_VOLATILE_P (mem) = 1;\n+    emit_insn (gen_cli_sei (const0_rtx, mem));\n+    DONE;\n+  })\n+\n+(define_insn \"cli_sei\"\n+  [(unspec_volatile [(match_operand:QI 0 \"const_int_operand\" \"L,P\")]\n+                    UNSPECV_ENABLE_IRQS)\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))]\n+  \"\"\n+  \"@\n+\tcli\n+\tsei\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"cc\" \"none\")])\n \n@@ -5355,10 +5374,12 @@\n   [(unspec_volatile [(match_operand:QI 0 \"const_int_operand\" \"n\")\n                      (const_int 1)]\n                     UNSPECV_DELAY_CYCLES)\n-   (clobber (match_scratch:QI 1 \"=&d\"))]\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))\n+   (clobber (match_scratch:QI 2 \"=&d\"))]\n   \"\"\n-  \"ldi %1,lo8(%0)\n-\t1: dec %1\n+  \"ldi %2,lo8(%0)\n+\t1: dec %2\n \tbrne 1b\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -5367,11 +5388,13 @@\n   [(unspec_volatile [(match_operand:HI 0 \"const_int_operand\" \"n\")\n                      (const_int 2)]\n                     UNSPECV_DELAY_CYCLES)\n-   (clobber (match_scratch:HI 1 \"=&w\"))]\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))\n+   (clobber (match_scratch:HI 2 \"=&w\"))]\n   \"\"\n-  \"ldi %A1,lo8(%0)\n-\tldi %B1,hi8(%0)\n-\t1: sbiw %A1,1\n+  \"ldi %A2,lo8(%0)\n+\tldi %B2,hi8(%0)\n+\t1: sbiw %A2,1\n \tbrne 1b\"\n   [(set_attr \"length\" \"4\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -5380,16 +5403,18 @@\n   [(unspec_volatile [(match_operand:SI 0 \"const_int_operand\" \"n\")\n                      (const_int 3)]\n                     UNSPECV_DELAY_CYCLES)\n-   (clobber (match_scratch:QI 1 \"=&d\"))\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))\n    (clobber (match_scratch:QI 2 \"=&d\"))\n-   (clobber (match_scratch:QI 3 \"=&d\"))]\n+   (clobber (match_scratch:QI 3 \"=&d\"))\n+   (clobber (match_scratch:QI 4 \"=&d\"))]\n   \"\"\n-  \"ldi %1,lo8(%0)\n-\tldi %2,hi8(%0)\n-\tldi %3,hlo8(%0)\n-\t1: subi %1,1\n-\tsbci %2,0\n+  \"ldi %2,lo8(%0)\n+\tldi %3,hi8(%0)\n+\tldi %4,hlo8(%0)\n+\t1: subi %2,1\n \tsbci %3,0\n+\tsbci %4,0\n \tbrne 1b\"\n   [(set_attr \"length\" \"7\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -5398,19 +5423,21 @@\n   [(unspec_volatile [(match_operand:SI 0 \"const_int_operand\" \"n\")\n                      (const_int 4)]\n                     UNSPECV_DELAY_CYCLES)\n-   (clobber (match_scratch:QI 1 \"=&d\"))\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))\n    (clobber (match_scratch:QI 2 \"=&d\"))\n    (clobber (match_scratch:QI 3 \"=&d\"))\n-   (clobber (match_scratch:QI 4 \"=&d\"))]\n-  \"\"\n-  \"ldi %1,lo8(%0)\n-\tldi %2,hi8(%0)\n-\tldi %3,hlo8(%0)\n-\tldi %4,hhi8(%0)\n-\t1: subi %1,1\n-\tsbci %2,0\n+   (clobber (match_scratch:QI 4 \"=&d\"))\n+   (clobber (match_scratch:QI 5 \"=&d\"))]\n+  \"\"\n+  \"ldi %2,lo8(%0)\n+\tldi %3,hi8(%0)\n+\tldi %4,hlo8(%0)\n+\tldi %5,hhi8(%0)\n+\t1: subi %2,1\n \tsbci %3,0\n \tsbci %4,0\n+\tsbci %5,0\n \tbrne 1b\"\n   [(set_attr \"length\" \"9\")\n    (set_attr \"cc\" \"clobber\")])\n@@ -5796,9 +5823,22 @@\n ;; CPU instructions\n \n ;; NOP taking 1 or 2 Ticks \n-(define_insn \"nopv\"\n+(define_expand \"nopv\"\n+  [(parallel [(unspec_volatile [(match_operand:SI 0 \"const_int_operand\" \"\")] \n+                               UNSPECV_NOP)\n+              (set (match_dup 1)\n+                   (unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))])]\n+  \"\"\n+  {\n+    operands[1] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+    MEM_VOLATILE_P (operands[1]) = 1;\n+  })\n+\n+(define_insn \"*nopv\"\n   [(unspec_volatile [(match_operand:SI 0 \"const_int_operand\" \"P,K\")] \n-                    UNSPECV_NOP)]\n+                    UNSPECV_NOP)\n+   (set (match_operand:BLK 1 \"\" \"\")\n+\t(unspec:BLK [(match_dup 1)] UNSPEC_MEMORY_BARRIER))]\n   \"\"\n   \"@\n \tnop\n@@ -5807,16 +5847,40 @@\n    (set_attr \"cc\" \"none\")])\n \n ;; SLEEP\n-(define_insn \"sleep\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_SLEEP)]\n+(define_expand \"sleep\"\n+  [(parallel [(unspec_volatile [(const_int 0)] UNSPECV_SLEEP)\n+              (set (match_dup 0)\n+                   (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))])]\n+  \"\"\n+  {\n+    operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+    MEM_VOLATILE_P (operands[0]) = 1;\n+  })\n+\n+(define_insn \"*sleep\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_SLEEP)\n+   (set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))]\n   \"\"\n   \"sleep\"\n   [(set_attr \"length\" \"1\")\n    (set_attr \"cc\" \"none\")])\n  \n ;; WDR\n-(define_insn \"wdr\"\n-  [(unspec_volatile [(const_int 0)] UNSPECV_WDR)]\n+(define_expand \"wdr\"\n+  [(parallel [(unspec_volatile [(const_int 0)] UNSPECV_WDR)\n+              (set (match_dup 0)\n+                   (unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))])]\n+  \"\"\n+  {\n+    operands[0] = gen_rtx_MEM (BLKmode, gen_rtx_SCRATCH (Pmode));\n+    MEM_VOLATILE_P (operands[0]) = 1;\n+  })\n+\n+(define_insn \"*wdr\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_WDR)\n+   (set (match_operand:BLK 0 \"\" \"\")\n+\t(unspec:BLK [(match_dup 0)] UNSPEC_MEMORY_BARRIER))]\n   \"\"\n   \"wdr\"\n   [(set_attr \"length\" \"1\")"}]}