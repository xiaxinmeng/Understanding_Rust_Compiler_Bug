{"sha": "66dea8899df6475d5cb289491dbbff307c16c1a7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjZkZWE4ODk5ZGY2NDc1ZDVjYjI4OTQ5MWRiYmZmMzA3YzE2YzFhNw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T10:46:08Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-10T10:46:08Z"}, "message": "dojump: Optimize a == a or a != a [PR98169]\n\nIf the backend doesn't have floating point EQ or NE comparison, dojump.c\nsplits it into ORDERED && UNEQ or UNORDERED || LTGT.  If both comparison\noperands are the same, we know the result of the second comparison though,\na == b is equivalent to a ord b and a != b is equivalent to a unord b,\nand thus can just use ORDERED or UNORDERED.\n\nOn the testcase, this changes f1:\n-\tucomiss\t%xmm0, %xmm0\n-\tmovl\t$1, %eax\n-\tjp\t.L3\n-\tjne\t.L3\n-\tret\n-\t.p2align 4,,10\n-\t.p2align 3\n-.L3:\n \txorl\t%eax, %eax\n+\tucomiss\t%xmm0, %xmm0\n+\tsetnp\t%al\nand f3:\n-\tucomisd\t%xmm0, %xmm0\n-\tmovl\t$1, %eax\n-\tjp\t.L8\n-\tjne\t.L8\n-\tret\n-\t.p2align 4,,10\n-\t.p2align 3\n-.L8:\n \txorl\t%eax, %eax\n+\tucomisd\t%xmm0, %xmm0\n+\tsetnp\t%al\nwhile keeping the same code for f2 and f4.\n\n2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/98169\n\t* dojump.c (do_compare_rtx_and_jump): Don't split self-EQ/NE\n\tcomparisons, just use ORDERED or UNORDERED.\n\n\t* gcc.target/i386/pr98169.c: New test.", "tree": {"sha": "4bea67d1dcec9e6977298d72c1d0abbaa6f80dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4bea67d1dcec9e6977298d72c1d0abbaa6f80dd6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/66dea8899df6475d5cb289491dbbff307c16c1a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dea8899df6475d5cb289491dbbff307c16c1a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66dea8899df6475d5cb289491dbbff307c16c1a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66dea8899df6475d5cb289491dbbff307c16c1a7/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a17ae7d85e420db5fe0c7ab2f59a470e2c7a78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2a17ae7d85e420db5fe0c7ab2f59a470e2c7a78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2a17ae7d85e420db5fe0c7ab2f59a470e2c7a78"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "4c7fafe296540ec97feb5c69f8896ee70ca90da4", "filename": "gcc/dojump.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66dea8899df6475d5cb289491dbbff307c16c1a7/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66dea8899df6475d5cb289491dbbff307c16c1a7/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=66dea8899df6475d5cb289491dbbff307c16c1a7", "patch": "@@ -1114,14 +1114,20 @@ do_compare_rtx_and_jump (rtx op0, rtx op1, enum rtx_code code, int unsignedp,\n \t           /* ... or if there is no libcall for it.  */\n \t           || code_to_optab (code) == unknown_optab))\n         {\n-\t  enum rtx_code first_code;\n+\t  enum rtx_code first_code, orig_code = code;\n \t  bool and_them = split_comparison (code, mode, &first_code, &code);\n \n \t  /* If there are no NaNs, the first comparison should always fall\n \t     through.  */\n \t  if (!HONOR_NANS (mode))\n \t    gcc_assert (first_code == (and_them ? ORDERED : UNORDERED));\n \n+\t  else if ((orig_code == EQ || orig_code == NE)\n+\t\t   && rtx_equal_p (op0, op1))\n+\t    /* Self-comparisons x == x or x != x can be optimized into\n+\t       just x ord x or x nord x.  */\n+\t    code = orig_code == EQ ? ORDERED : UNORDERED;\n+\n \t  else\n \t    {\n \t      profile_probability cprob"}, {"sha": "b1927312a835a58f339207a5f39c9ff35c8242c8", "filename": "gcc/testsuite/gcc.target/i386/pr98169.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/66dea8899df6475d5cb289491dbbff307c16c1a7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98169.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/66dea8899df6475d5cb289491dbbff307c16c1a7/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98169.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98169.c?ref=66dea8899df6475d5cb289491dbbff307c16c1a7", "patch": "@@ -0,0 +1,29 @@\n+/* PR tree-optimization/98169 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-finite-math-only\" } */\n+/* { dg-final { scan-assembler-times \"\\tsetn\\?p\\t\" 4 } } */\n+/* { dg-final { scan-assembler-not \"\\tjn\\?\\[ep]\\t\" } } */\n+\n+int\n+f1 (float a)\n+{\n+  return a == a;\n+}\n+\n+int\n+f2 (float a)\n+{\n+  return !__builtin_isnanf (a);\n+}\n+\n+int\n+f3 (double a)\n+{\n+  return a == a;\n+}\n+\n+int\n+f4 (double a)\n+{\n+  return !__builtin_isnan (a);\n+}"}]}