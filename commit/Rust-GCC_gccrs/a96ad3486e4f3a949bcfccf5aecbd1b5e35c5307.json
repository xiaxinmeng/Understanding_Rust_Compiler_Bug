{"sha": "a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTk2YWQzNDg2ZTRmM2E5NDliY2ZjY2Y1YWVjYmQxYjVlMzVjNTMwNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-12T10:12:32Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-08-12T10:12:32Z"}, "message": "i386.c (LONG_TYPE_SIZE): Remove.\n\n\t* config/i386/i386.c (LONG_TYPE_SIZE): Remove.\n\t(EMPTY_FIELD_BOUNDARY): Remove.\n\t* config/i386/i386-interix.h (PCC_BITFIELD_TYPE_MATTERS): Remove.\n\nFrom-SVN: r163188", "tree": {"sha": "ca5558c365a0d72fc47cfb894e011fcaa6a1a608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca5558c365a0d72fc47cfb894e011fcaa6a1a608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/comments", "author": null, "committer": null, "parents": [{"sha": "49b48605c822542b0ce623db4d5188ed3ae79401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49b48605c822542b0ce623db4d5188ed3ae79401", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49b48605c822542b0ce623db4d5188ed3ae79401"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "a20fb37df3d6e796178afc036321480fb0c7419f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "patch": "@@ -1,3 +1,9 @@\n+2010-08-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (LONG_TYPE_SIZE): Remove.\n+\t(EMPTY_FIELD_BOUNDARY): Remove.\n+\t* config/i386/i386-interix.h (PCC_BITFIELD_TYPE_MATTERS): Remove.\n+\n 2010-08-12  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/45259\n@@ -752,7 +758,7 @@\n \talias_sets_conflict_p.\n \t(walk_mems_1): Moved from alias.c.\n \t(insns_may_alias_p): New function, originally insn_alias_sets_conflict_p\n-\tin alias.c. \n+\tin alias.c.\n         (add_inter_loop_mem_dep): Use insns_may_alias_p now.\n         * cse.c (cse_insn): New argument in calling nonoverlapping_memrefs_p.\n         * alias.c (walk_mems_2): Moved to ddg.c.\n@@ -767,7 +773,7 @@\n \t*alias.h (nonoverlapping_memrefs_p): New flag as third argument.\n \t(insn_alias_sets_conflict_p): Removed\n \t*rtl.h (may_alias_p): New function prototype.\n-        \n+\n 2010-08-09  Nathan Froyd  <froydnj@codesourcery.com>\n \n \t* tree.c (nreverse): Assert that we don't have a BLOCK."}, {"sha": "c92e42e92926931c9cdfd739d7d69d617b103e88", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "patch": "@@ -287,8 +287,6 @@ while (0)\n \n #define HOST_PTR_AS_INT unsigned long\n \n-#define PCC_BITFIELD_TYPE_MATTERS 1\n-\n /* The following two flags are usually \"off\" for i386, because some non-gnu\n    tools (for the i386) don't handle them.  However, we don't have that\n    problem, so....  */"}, {"sha": "9ef0a1b28ebb410e41c564d0055014321384a4dd", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a96ad3486e4f3a949bcfccf5aecbd1b5e35c5307", "patch": "@@ -661,10 +661,9 @@ enum target_cpu_default\n \n #define SHORT_TYPE_SIZE 16\n #define INT_TYPE_SIZE 32\n+#define LONG_LONG_TYPE_SIZE 64\n #define FLOAT_TYPE_SIZE 32\n-#define LONG_TYPE_SIZE BITS_PER_WORD\n #define DOUBLE_TYPE_SIZE 64\n-#define LONG_LONG_TYPE_SIZE 64\n #define LONG_DOUBLE_TYPE_SIZE 80\n \n #define WIDEST_HARDWARE_FP_SIZE LONG_DOUBLE_TYPE_SIZE\n@@ -740,10 +739,6 @@ enum target_cpu_default\n /* C++ stores the virtual bit in the lowest bit of function pointers.  */\n #define TARGET_PTRMEMFUNC_VBIT_LOCATION ptrmemfunc_vbit_in_pfn\n \n-/* Alignment of field after `int : 0' in a structure.  */\n-\n-#define EMPTY_FIELD_BOUNDARY BITS_PER_WORD\n-\n /* Minimum size in bits of the largest boundary to which any\n    and all fundamental data types supported by the hardware\n    might need to be aligned. No data type wants to be aligned"}]}