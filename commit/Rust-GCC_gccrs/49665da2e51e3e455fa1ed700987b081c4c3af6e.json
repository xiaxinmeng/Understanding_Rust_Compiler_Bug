{"sha": "49665da2e51e3e455fa1ed700987b081c4c3af6e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDk2NjVkYTJlNTFlM2U0NTVmYTFlZDcwMDk4N2IwODFjNGMzYWY2ZQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-05-08T13:55:36Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-07-06T11:35:17Z"}, "message": "[Ada] Correct time zone in GNAT.Calendar.Time_IO.Value\n\ngcc/ada/\n\n\t* libgnat/g-catiio.adb (Parse_ISO_8601): New name for\n\tParse_ISO_8861_UTC.  8601 is the correct ISO standard number.\n\tAlso, \"UTC\" was confusing. All Time values are represented in\n\tUTC, but the ISO 8601 date strings include a time zone.\n\n\tIf a time zone was specified, call\n\tAda.Calendar.Formatting.Time_Of instead of\n\tGNAT.Calendar.Time_Of, because the latter adjusts to the current\n\ttime zone, whereas we want to use (just) the time zone specified\n\tin the ISO string.  This allows us to pass Time_Zone instead to\n\tTime_Of, instead of adjusting by Local_Disp by hand.\n\n\tIf no time zone was specified, call GNAT.Calendar.Time_Of as\n\tbefore.\n\n\tUse expanded names to clarify which Time_Of is being called.\n\tRemove redundant comment, and move nonredundant part of the\n\tcommment to the spec.\n\t(Value): Minor: use \"not in\" instead of \"or else\".\n\t* libgnat/g-catiio.ads: Comment moved here. Correct the ISO\n\tstandard number.\n\t* libgnat/g-calend.adb: Add ??? comments.\n\t* libgnat/a-calend.ads, libgnat/a-calend.adb: Update obsolete\n\tcomments regarding the representation of type Time. Move the\n\tinformation about the epoch (year 2150) to the spec, and avoid\n\tuttering \"2150\" more than once.\n\t* libgnat/a-catizo.ads (Time_Offset): Add comment.", "tree": {"sha": "c7146b1a6fcbeeebd74a530789f6c626534c529a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7146b1a6fcbeeebd74a530789f6c626534c529a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/49665da2e51e3e455fa1ed700987b081c4c3af6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49665da2e51e3e455fa1ed700987b081c4c3af6e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49665da2e51e3e455fa1ed700987b081c4c3af6e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49665da2e51e3e455fa1ed700987b081c4c3af6e/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3bf5e2ef3d08a1fac9db2b5f0a1f107b25d67c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3bf5e2ef3d08a1fac9db2b5f0a1f107b25d67c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3bf5e2ef3d08a1fac9db2b5f0a1f107b25d67c5"}], "stats": {"total": 126, "additions": 62, "deletions": 64}, "files": [{"sha": "f4574126cfba34d40e7c6e1458d3f47240148daf", "filename": "gcc/ada/libgnat/a-calend.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calend.adb?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -167,9 +167,9 @@ is\n    Secs_In_Non_Leap_Year : constant := 365 * Secs_In_Day;\n    Nanos_In_Four_Years   : constant := Secs_In_Four_Years * Nano;\n \n-   --  Lower and upper bound of Ada time. The zero (0) value of type Time is\n-   --  positioned at year 2150. Note that the lower and upper bound account\n-   --  for the non-leap centennial years.\n+   --  Lower and upper bound of Ada time. Note that the lower and upper bound\n+   --  account for the non-leap centennial years. See \"Implementation of Time\"\n+   --  in the spec for what the zero value represents.\n \n    Ada_Low  : constant Time_Rep := -(61 * 366 + 188 * 365) * Nanos_In_Day;\n    Ada_High : constant Time_Rep :=  (60 * 366 + 190 * 365) * Nanos_In_Day;"}, {"sha": "e7eb3ef855fee8fdb0ba79e8e98276dc108d21e5", "filename": "gcc/ada/libgnat/a-calend.ads", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-calend.ads?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -157,16 +157,20 @@ private\n    -- Implementation of Time --\n    ----------------------------\n \n-   --  Time is represented as a signed 64 bit integer count of nanoseconds\n-   --  since the start of Ada time (1901-01-01 00:00:00.0 UTC). Time values\n-   --  produced by Time_Of are internally normalized to UTC regardless of their\n-   --  local time zone. This representation ensures correct handling of leap\n-   --  seconds as well as performing arithmetic. In Ada 95, Split and Time_Of\n-   --  will treat a time value as being in the local time zone, in Ada 2005,\n-   --  Split and Time_Of will treat a time value as being in the designated\n-   --  time zone by the formal parameter or in UTC by default. The size of the\n-   --  type is large enough to cover the Ada 2005 range of time (1901-01-01\n-   --  00:00:00.0 UTC - 2399-12-31-23:59:59.999999999 UTC).\n+   --  Time is represented as a signed 64 bit signed integer count of\n+   --  nanoseconds since the \"epoch\" 2150-01-01 00:00:00 UTC. Thus a value of 0\n+   --  represents the epoch.  As of this writing, the epoch is in the future,\n+   --  so Time values returned by Clock will be negative.\n+   --\n+   --  Time values produced by Time_Of are internally normalized to UTC\n+   --  regardless of their local time zone. This representation ensures correct\n+   --  handling of leap seconds as well as performing arithmetic. In Ada 95,\n+   --  Split and Time_Of will treat a time value as being in the local time\n+   --  zone, in Ada 2005, Split and Time_Of will treat a time value as being in\n+   --  the designated time zone by the formal parameter or in UTC by\n+   --  default. The size of the type is large enough to cover the Ada\n+   --  range of time (1901-01-01T00:00:00.0 UTC - 2399-12-31T23:59:59.999999999\n+   --  UTC).\n \n    ------------------\n    -- Leap Seconds --\n@@ -234,8 +238,8 @@ private\n \n    function Epoch_Offset return Time_Rep;\n    pragma Inline (Epoch_Offset);\n-   --  Return the difference between 2150-1-1 UTC and 1970-1-1 UTC expressed in\n-   --  nanoseconds. Note that year 2100 is non-leap.\n+   --  Return the difference between our epoch and 1970-1-1 UTC (the Unix\n+   --  epoch) expressed in nanoseconds. Note that year 2100 is non-leap.\n \n    Days_In_Month : constant array (Month_Number) of Day_Number :=\n                      (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);"}, {"sha": "8ef139c719d30f6ea27d9c721c81052031c7daeb", "filename": "gcc/ada/libgnat/a-catizo.ads", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-catizo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fa-catizo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-catizo.ads?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -21,6 +21,7 @@ package Ada.Calendar.Time_Zones is\n    --  Time zone manipulation\n \n    type Time_Offset is range -(28 * 60) .. 28 * 60;\n+   --  Offset in minutes\n \n    Unknown_Zone_Error : exception;\n "}, {"sha": "55fb181745cd139abe25440daf99cbf7f0a9edee", "filename": "gcc/ada/libgnat/g-calend.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-calend.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-calend.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-calend.adb?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -226,7 +226,8 @@ package body GNAT.Calendar is\n \n    begin\n       --  Even though the input time zone is UTC (0), the flag Use_TZ will\n-      --  ensure that Split picks up the local time zone.\n+      --  ensure that Split picks up the local time zone. ???But Use_TZ is\n+      --  False below, and anyway, Use_TZ has no effect if Time_Zone is 0.\n \n       Ada_Calendar_Split\n         (Date        => Date,\n@@ -315,7 +316,8 @@ package body GNAT.Calendar is\n \n    begin\n       --  Even though the input time zone is UTC (0), the flag Use_TZ will\n-      --  ensure that Split picks up the local time zone.\n+      --  ensure that Split picks up the local time zone. ???But there is no\n+      --  call to Split here.\n \n       return\n         Ada_Calendar_Time_Of"}, {"sha": "8011d34d0218e978a6e00632fa7d313879ff094e", "filename": "gcc/ada/libgnat/g-catiio.adb", "status": "modified", "additions": 34, "deletions": 46, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.adb?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Calendar;            use Ada.Calendar;\n+with Ada.Calendar.Time_Zones;\n with Ada.Characters.Handling;\n with Ada.Strings.Unbounded;   use Ada.Strings.Unbounded;\n with Ada.Text_IO;\n@@ -93,19 +94,14 @@ package body GNAT.Calendar.Time_IO is\n       Length  : Natural := 0) return String;\n    --  As above with N provided in Integer format\n \n-   procedure Parse_ISO_8861_UTC\n+   procedure Parse_ISO_8601\n       (Date    : String;\n        Time    : out Ada.Calendar.Time;\n        Success : out Boolean);\n    --  Subsidiary of function Value. It parses the string Date, interpreted as\n-   --  an ISO 8861 time representation, and returns corresponding Time value.\n-   --  Success is set to False when the string is not a supported ISO 8861\n-   --  date. The following regular expression defines the supported format:\n-   --\n-   --    (yyyymmdd | yyyy'-'mm'-'dd)'T'(hhmmss | hh':'mm':'ss)\n-   --      [ ('Z' | ('.' | ',') s{s} | ('+'|'-')hh':'mm) ]\n-   --\n-   --  Trailing characters (in particular spaces) are not allowed.\n+   --  an ISO 8601 time representation, and returns corresponding Time value.\n+   --  Success is set to False when the string is not a supported ISO 8601\n+   --  date.\n    --\n    --  Examples:\n    --\n@@ -565,11 +561,11 @@ package body GNAT.Calendar.Time_IO is\n       return Abbrev_Upper_Month_Names'First;\n    end Month_Name_To_Number;\n \n-   ------------------------\n-   -- Parse_ISO_8861_UTC --\n-   ------------------------\n+   --------------------\n+   -- Parse_ISO_8601 --\n+   --------------------\n \n-   procedure Parse_ISO_8861_UTC\n+   procedure Parse_ISO_8601\n       (Date    : String;\n        Time    : out Ada.Calendar.Time;\n        Success : out Boolean)\n@@ -813,6 +809,8 @@ package body GNAT.Calendar.Time_IO is\n \n       --  Local variables\n \n+      use Time_Zones;\n+\n       Date_Separator : constant Character := '-';\n       Hour_Separator : constant Character := ':';\n \n@@ -827,7 +825,7 @@ package body GNAT.Calendar.Time_IO is\n       Local_Hour   : Hour_Number     := 0;\n       Local_Minute : Minute_Number   := 0;\n       Local_Sign   : Character       := ' ';\n-      Local_Disp   : Duration;\n+      Time_Zone    : Time_Offset; -- initialized when Local_Sign is set\n \n       Sep_Required : Boolean := False;\n       --  True if a separator is seen (and therefore required after it!)\n@@ -860,17 +858,18 @@ package body GNAT.Calendar.Time_IO is\n \n          if Index <= Date'Last then\n \n-            --  Suffix 'Z' just confirms that this is an UTC time. No further\n-            --  action needed.\n+            --  Suffix 'Z' signifies that this is UTC time (time zone 0)\n \n             if Symbol = 'Z' then\n+               Local_Sign := '+';\n+               Time_Zone := 0;\n                Advance;\n \n             --  A decimal fraction shall have at least one digit, and has as\n             --  many digits as supported by the underlying implementation.\n             --  The valid decimal separators are those specified in ISO 31-0,\n             --  i.e. the comma [,] or full stop [.]. Of these, the comma is\n-            --  the preferred separator of ISO-8861.\n+            --  the preferred separator of ISO-8601.\n \n             elsif Symbol = ',' or else Symbol = '.' then\n                Advance; --  past decimal separator\n@@ -898,7 +897,11 @@ package body GNAT.Calendar.Time_IO is\n \n                --  Compute local displacement\n \n-               Local_Disp := Local_Hour * 3600.0 + Local_Minute * 60.0;\n+               Time_Zone := Time_Offset (Local_Hour * 60 + Local_Minute);\n+\n+               if Local_Sign = '-' then\n+                  Time_Zone := -Time_Zone;\n+               end if;\n             else\n                raise Wrong_Syntax;\n             end if;\n@@ -922,24 +925,17 @@ package body GNAT.Calendar.Time_IO is\n          raise Wrong_Syntax;\n       end if;\n \n-      --  Compute time without local displacement\n+      --  If no time zone was specified, we call GNAT.Calendar.Time_Of, which\n+      --  uses local time. Otherwise, we use Ada.Calendar.Formatting.Time_Of\n+      --  and specify the time zone.\n \n       if Local_Sign = ' ' then\n-         Time := Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec);\n-\n-      --  Compute time with positive local displacement\n-\n-      elsif Local_Sign = '+' then\n-         Time :=\n-           Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec) -\n-             Local_Disp;\n-\n-      --  Compute time with negative local displacement\n-\n-      elsif Local_Sign = '-' then\n-         Time :=\n-           Time_Of (Year, Month, Day, Hour, Minute, Second, Subsec) +\n-             Local_Disp;\n+         Time := GNAT.Calendar.Time_Of\n+           (Year, Month, Day, Hour, Minute, Second, Subsec);\n+      else\n+         Time := Ada.Calendar.Formatting.Time_Of\n+           (Year, Month, Day, Hour, Minute, Second, Subsec,\n+            Time_Zone => Time_Zone);\n       end if;\n \n       --  Notify that the input string was successfully parsed\n@@ -953,7 +949,7 @@ package body GNAT.Calendar.Time_IO is\n          Time :=\n            Time_Of (Year_Number'First, Month_Number'First, Day_Number'First);\n          Success := False;\n-   end Parse_ISO_8861_UTC;\n+   end Parse_ISO_8601;\n \n    -----------\n    -- Value --\n@@ -1174,26 +1170,18 @@ package body GNAT.Calendar.Time_IO is\n    --  Start of processing for Value\n \n    begin\n-      --  Let's try parsing Date as a supported ISO-8861 format. If we do not\n+      --  Let's try parsing Date as a supported ISO-8601 format. If we do not\n       --  succeed, then retry using all the other GNAT supported formats.\n \n-      Parse_ISO_8861_UTC (Date, Time, Success);\n+      Parse_ISO_8601 (Date, Time, Success);\n \n       if Success then\n          return Time;\n       end if;\n \n       --  Length checks\n \n-      if D_Length /= 8\n-        and then D_Length /= 10\n-        and then D_Length /= 11\n-        and then D_Length /= 12\n-        and then D_Length /= 17\n-        and then D_Length /= 19\n-        and then D_Length /= 20\n-        and then D_Length /= 21\n-      then\n+      if D_Length not in 8 | 10 | 11 | 12 | 17 | 19 | 20 | 21 then\n          raise Constraint_Error;\n       end if;\n "}, {"sha": "1b76eacbee9f42f3001f191db4d247c080e5207c", "filename": "gcc/ada/libgnat/g-catiio.ads", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-catiio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/49665da2e51e3e455fa1ed700987b081c4c3af6e/gcc%2Fada%2Flibgnat%2Fg-catiio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fg-catiio.ads?ref=49665da2e51e3e455fa1ed700987b081c4c3af6e", "patch": "@@ -141,11 +141,14 @@ package GNAT.Calendar.Time_IO is\n    --     mmm dd, yyyy         - month spelled out\n    --     dd mmm yyyy          - month spelled out\n    --\n-   --  The following ISO-8861 format expressed as a regular expression is also\n+   --  The following ISO-8601 format expressed as a regular expression is also\n    --  supported:\n    --\n    --    (yyyymmdd | yyyy'-'mm'-'dd)'T'(hhmmss | hh':'mm':'ss)\n    --      [ ('Z' | ('.' | ',') s{s} | ('+'|'-')hh':'mm) ]\n+   --  Trailing characters (including spaces) are not allowed.\n+   --  In the ISO case, the current time zone is not used; the time zone\n+   --  is as specified in the string, defaulting to UTC.\n    --\n    --  Examples:\n    --"}]}