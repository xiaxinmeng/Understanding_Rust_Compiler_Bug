{"sha": "9f0d4adabe2035886a1aa8d2ca990a90de000613", "node_id": "C_kwDOANBUbNoAKDlmMGQ0YWRhYmUyMDM1ODg2YTFhYThkMmNhOTkwYTkwZGUwMDA2MTM", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-13T11:09:38Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-10-13T11:11:12Z"}, "message": "ifcvt: Fix bitpos calculation in bitfield lowering [PR107229]\n\nThe bitposition calculation for the bitfield lowering in loop if conversion was\nnot taking DECL_FIELD_OFFSET into account, which meant that it would result in\nwrong bitpositions for bitfields that did not end up having representations\nstarting at the beginning of the struct.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/107229\n\t* tree-if-conv.cc (get_bitfield_rep): Fix bitposition calculation.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/vect/pr107229-1.c: New test.\n\t* gcc.dg/vect/pr107229-2.c: New test.\n\t* gcc.dg/vect/pr107229-3.c: New test.", "tree": {"sha": "2e28f8d11d71b2ca013a32d5fab62a7a3166dfc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2e28f8d11d71b2ca013a32d5fab62a7a3166dfc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f0d4adabe2035886a1aa8d2ca990a90de000613", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0d4adabe2035886a1aa8d2ca990a90de000613", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f0d4adabe2035886a1aa8d2ca990a90de000613", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f0d4adabe2035886a1aa8d2ca990a90de000613/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f653a2c85a450714bac905ea4f153234bc6cd5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f653a2c85a450714bac905ea4f153234bc6cd5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f653a2c85a450714bac905ea4f153234bc6cd5f"}], "stats": {"total": 85, "additions": 81, "deletions": 4}, "files": [{"sha": "67b432383d057a630746aa00af50c25fcb527d8e", "filename": "gcc/testsuite/gcc.dg/vect/pr107229-1.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-1.c?ref=9f0d4adabe2035886a1aa8d2ca990a90de000613", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* PR tree-optimization/107229.  */\n+\n+int a, c;\n+struct {\n+  long d;\n+  int : 8;\n+  int : 27;\n+  int e : 21;\n+} f;\n+void g(int b) { a = a & 1; }\n+int main() {\n+  while (c)\n+    g(f.e);\n+  return 0;\n+}"}, {"sha": "88bffb63d5e8b2d7bcdeae223f4ec6ea4f611bc9", "filename": "gcc/testsuite/gcc.dg/vect/pr107229-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-2.c?ref=9f0d4adabe2035886a1aa8d2ca990a90de000613", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* PR tree-optimization/107229.  */\n+\n+int a, c;\n+struct {\n+  long f;\n+  long g;\n+  long d;\n+  int : 8;\n+  int : 27;\n+  int e : 21;\n+} f;\n+void g(int b) { a = a & 1; }\n+int main() {\n+  while (c)\n+    g(f.e);\n+  return 0;\n+}"}, {"sha": "4abd8c14531b40e9dbe9802a8f9a0eabba673c9f", "filename": "gcc/testsuite/gcc.dg/vect/pr107229-3.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr107229-3.c?ref=9f0d4adabe2035886a1aa8d2ca990a90de000613", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* PR tree-optimization/107229.  */\n+\n+int a, c;\n+struct {\n+  long f;\n+  long g;\n+  long d;\n+  int : 8;\n+  int : 32;\n+  int : 2;\n+  int e : 21;\n+} f;\n+void g(int b) { a = a & 1; }\n+int main() {\n+  while (c)\n+    g(f.e);\n+  return 0;\n+}"}, {"sha": "01637c5da08d5a2a00a495522fc9a6436a804398", "filename": "gcc/tree-if-conv.cc", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftree-if-conv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f0d4adabe2035886a1aa8d2ca990a90de000613/gcc%2Ftree-if-conv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.cc?ref=9f0d4adabe2035886a1aa8d2ca990a90de000613", "patch": "@@ -3298,10 +3298,34 @@ get_bitfield_rep (gassign *stmt, bool write, tree *bitpos,\n     *struct_expr = TREE_OPERAND (comp_ref, 0);\n \n   if (bitpos)\n-    *bitpos\n-      = fold_build2 (MINUS_EXPR, bitsizetype,\n-\t\t     DECL_FIELD_BIT_OFFSET (field_decl),\n-\t\t     DECL_FIELD_BIT_OFFSET (rep_decl));\n+    {\n+      /* To calculate the bitposition of the BITFIELD_REF we have to determine\n+\t where our bitfield starts in relation to the container REP_DECL. The\n+\t DECL_FIELD_OFFSET of the original bitfield's member FIELD_DECL tells\n+\t us how many bytes from the start of the structure there are until the\n+\t start of the group of bitfield members the FIELD_DECL belongs to,\n+\t whereas DECL_FIELD_BIT_OFFSET will tell us how many bits from that\n+\t position our actual bitfield member starts.  For the container\n+\t REP_DECL adding DECL_FIELD_OFFSET and DECL_FIELD_BIT_OFFSET will tell\n+\t us the distance between the start of the structure and the start of\n+\t the container, though the first is in bytes and the later other in\n+\t bits.  With this in mind we calculate the bit position of our new\n+\t BITFIELD_REF by subtracting the number of bits between the start of\n+\t the structure and the container from the number of bits from the start\n+\t of the structure and the actual bitfield member. */\n+      tree bf_pos = fold_build2 (MULT_EXPR, bitsizetype,\n+\t\t\t\t DECL_FIELD_OFFSET (field_decl),\n+\t\t\t\t build_int_cst (bitsizetype, BITS_PER_UNIT));\n+      bf_pos = fold_build2 (PLUS_EXPR, bitsizetype, bf_pos,\n+\t\t\t    DECL_FIELD_BIT_OFFSET (field_decl));\n+      tree rep_pos = fold_build2 (MULT_EXPR, bitsizetype,\n+\t\t\t\t  DECL_FIELD_OFFSET (rep_decl),\n+\t\t\t\t  build_int_cst (bitsizetype, BITS_PER_UNIT));\n+      rep_pos = fold_build2 (PLUS_EXPR, bitsizetype, rep_pos,\n+\t\t\t     DECL_FIELD_BIT_OFFSET (rep_decl));\n+\n+      *bitpos = fold_build2 (MINUS_EXPR, bitsizetype, bf_pos, rep_pos);\n+    }\n \n   return rep_decl;\n "}]}