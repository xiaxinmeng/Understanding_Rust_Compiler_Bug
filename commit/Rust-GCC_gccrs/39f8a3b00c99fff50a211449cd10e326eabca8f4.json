{"sha": "39f8a3b00c99fff50a211449cd10e326eabca8f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmOGEzYjAwYzk5ZmZmNTBhMjExNDQ5Y2QxMGUzMjZlYWJjYThmNA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-05-31T13:01:10Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-05-31T13:01:10Z"}, "message": "re PR tree-optimization/34244 (VRP/SCEV miscompiles Firefox)\n\n2008-05-31  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/34244\n\t* fold-const.c (tree_expr_nonnegative_warnv_p): Do not ask VRP.\n\t(tree_expr_nonzero_warnv_p): Likewise.\n\t* tree-vrp.c (vrp_expr_computes_nonnegative): Call\n\tssa_name_nonnegative_p.\n\t(vrp_expr_computes_nonzero): Call ssa_name_nonzero_p.\n\t(extract_range_from_unary_expr): Use vrp_expr_computes_nonzero,\n\tnot tree_expr_nonzero_warnv_p.\n\n\tPR tree-optimization/36262\n\tRevert\n\t2007-11-29  Zdenek Dvorak  <ook@ucw.cz>\n\n        PR tree-optimization/34244\n        * tree-vrp.c (adjust_range_with_scev): Clear scev cache.\n        (record_numbers_of_iterations): New function.\n        (execute_vrp): Cache the numbers of iterations of loops.\n        * tree-scalar-evolution.c (scev_reset_except_niters):\n        New function.\n        (scev_reset): Use scev_reset_except_niters.\n        * tree-scalar-evolution.h (scev_reset_except_niters): Declare.\n\nFrom-SVN: r136237", "tree": {"sha": "4a655a0ae6f945ac1614484f03ea84124a685c78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a655a0ae6f945ac1614484f03ea84124a685c78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f8a3b00c99fff50a211449cd10e326eabca8f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f8a3b00c99fff50a211449cd10e326eabca8f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f8a3b00c99fff50a211449cd10e326eabca8f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f8a3b00c99fff50a211449cd10e326eabca8f4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2643f14e4453151004d8026128dd929dc4d7eb8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2643f14e4453151004d8026128dd929dc4d7eb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2643f14e4453151004d8026128dd929dc4d7eb8e"}], "stats": {"total": 88, "additions": 31, "deletions": 57}, "files": [{"sha": "41a7306da3a5ef8e5d2032d45df84ab36483f122", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=39f8a3b00c99fff50a211449cd10e326eabca8f4", "patch": "@@ -1,3 +1,27 @@\n+2008-05-31  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/34244\n+\t* fold-const.c (tree_expr_nonnegative_warnv_p): Do not ask VRP.\n+\t(tree_expr_nonzero_warnv_p): Likewise.\n+\t* tree-vrp.c (vrp_expr_computes_nonnegative): Call\n+\tssa_name_nonnegative_p.\n+\t(vrp_expr_computes_nonzero): Call ssa_name_nonzero_p.\n+\t(extract_range_from_unary_expr): Use vrp_expr_computes_nonzero,\n+\tnot tree_expr_nonzero_warnv_p.\n+\n+\tPR tree-optimization/36262\n+\tRevert\n+\t2007-11-29  Zdenek Dvorak  <ook@ucw.cz>\n+\n+        PR tree-optimization/34244\n+        * tree-vrp.c (adjust_range_with_scev): Clear scev cache.\n+        (record_numbers_of_iterations): New function.\n+        (execute_vrp): Cache the numbers of iterations of loops.\n+        * tree-scalar-evolution.c (scev_reset_except_niters):\n+        New function.\n+        (scev_reset): Use scev_reset_except_niters.\n+        * tree-scalar-evolution.h (scev_reset_except_niters): Declare.\n+\n 2008-05-31  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* config/bfin/bfin.h (TARGET_CPU_CPP_BUILTINS): Define"}, {"sha": "609217b755fd3a7d5f60e9e2d412f55a3bbf5a07", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=39f8a3b00c99fff50a211449cd10e326eabca8f4", "patch": "@@ -14074,11 +14074,6 @@ tree_single_nonnegative_warnv_p (tree t, bool *strict_overflow_p)\n \n   switch (TREE_CODE (t))\n     {\n-    case SSA_NAME:\n-      /* Query VRP to see if it has recorded any information about\n-\t the range of this object.  */\n-      return ssa_name_nonnegative_p (t);\n-\n     case INTEGER_CST:\n       return tree_int_cst_sgn (t) >= 0;\n \n@@ -14563,11 +14558,6 @@ tree_single_nonzero_warnv_p (tree t, bool *strict_overflow_p)\n   bool sub_strict_overflow_p;\n   switch (TREE_CODE (t))\n     {\n-    case SSA_NAME:\n-      /* Query VRP to see if it has recorded any information about\n-\t the range of this object.  */\n-      return ssa_name_nonzero_p (t);\n-\n     case INTEGER_CST:\n       return !integer_zerop (t);\n "}, {"sha": "2cc008020e22fd4fc95bc79fb3d00b16073c7613", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=39f8a3b00c99fff50a211449cd10e326eabca8f4", "patch": "@@ -2645,16 +2645,6 @@ scev_initialize (void)\n     }\n }\n \n-/* Clean the scalar evolution analysis cache, but preserve the cached\n-   numbers of iterations for the loops.  */\n-\n-void\n-scev_reset_except_niters (void)\n-{\n-  if (scalar_evolution_info)\n-    htab_empty (scalar_evolution_info);\n-}\n-\n /* Cleans up the information cached by the scalar evolutions analysis.  */\n \n void\n@@ -2666,8 +2656,7 @@ scev_reset (void)\n   if (!scalar_evolution_info || !current_loops)\n     return;\n \n-  scev_reset_except_niters ();\n-\n+  htab_empty (scalar_evolution_info);\n   FOR_EACH_LOOP (li, loop, 0)\n     {\n       loop->nb_iterations = NULL_TREE;"}, {"sha": "472b194d307bf4fd609ded5176cab3d941b4d9eb", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=39f8a3b00c99fff50a211449cd10e326eabca8f4", "patch": "@@ -27,7 +27,6 @@ extern tree get_loop_exit_condition (const struct loop *);\n \n extern void scev_initialize (void);\n extern void scev_reset (void);\n-extern void scev_reset_except_niters (void);\n extern void scev_finalize (void);\n extern tree analyze_scalar_evolution (struct loop *, tree);\n extern tree instantiate_scev (struct loop *, struct loop *, tree);"}, {"sha": "fe39a24f0966d2468bff502d117d1e41284decbf", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f8a3b00c99fff50a211449cd10e326eabca8f4/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=39f8a3b00c99fff50a211449cd10e326eabca8f4", "patch": "@@ -772,7 +772,9 @@ usable_range_p (value_range_t *vr, bool *strict_overflow_p)\n static bool\n vrp_expr_computes_nonnegative (tree expr, bool *strict_overflow_p)\n {\n-  return tree_expr_nonnegative_warnv_p (expr, strict_overflow_p);\n+  return (tree_expr_nonnegative_warnv_p (expr, strict_overflow_p)\n+\t  || (TREE_CODE (expr) == SSA_NAME\n+\t      && ssa_name_nonnegative_p (expr)));\n }\n \n /* Like tree_expr_nonzero_warnv_p, but this function uses value ranges\n@@ -781,7 +783,9 @@ vrp_expr_computes_nonnegative (tree expr, bool *strict_overflow_p)\n static bool\n vrp_expr_computes_nonzero (tree expr, bool *strict_overflow_p)\n {\n-  if (tree_expr_nonzero_warnv_p (expr, strict_overflow_p))\n+  if (tree_expr_nonzero_warnv_p (expr, strict_overflow_p)\n+      || (TREE_CODE (expr) == SSA_NAME\n+\t  && ssa_name_nonzero_p (expr)))\n     return true;\n \n   /* If we have an expression of the form &X->a, then the expression\n@@ -2799,13 +2803,6 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n   if (vr->type == VR_ANTI_RANGE)\n     return;\n \n-  /* Ensure that there are not values in the scev cache based on assumptions\n-     on ranges of ssa names that were changed\n-     (in set_value_range/set_value_range_to_varying).  Preserve cached numbers\n-     of iterations, that were computed before the start of VRP (we do not\n-     recompute these each time to save the compile time).  */\n-  scev_reset_except_niters ();\n-\n   chrec = instantiate_parameters (loop, analyze_scalar_evolution (loop, var));\n \n   /* Like in PR19590, scev can return a constant function.  */\n@@ -6636,20 +6633,6 @@ vrp_finalize (void)\n   vr_phi_edge_counts = NULL;\n }\n \n-/* Calculates number of iterations for all loops, to ensure that they are\n-   cached.  */\n-\n-static void\n-record_numbers_of_iterations (void)\n-{\n-  loop_iterator li;\n-  struct loop *loop;\n-\n-  FOR_EACH_LOOP (li, loop, 0)\n-    {\n-      number_of_latch_executions (loop);\n-    }\n-}\n \n /* Main entry point to VRP (Value Range Propagation).  This pass is\n    loosely based on J. R. C. Patterson, ``Accurate Static Branch\n@@ -6708,17 +6691,6 @@ execute_vrp (void)\n \n   insert_range_assertions ();\n \n-  /* Compute the # of iterations for each loop before we start the VRP\n-     analysis.  The value ranges determined by VRP are used in expression\n-     simplification, that is also used by the # of iterations analysis.\n-     However, in the middle of the VRP analysis, the value ranges do not take\n-     all the possible paths in CFG into account, so they do not have to be\n-     correct, and the # of iterations analysis can obtain wrong results.\n-     This is a problem, since the results of the # of iterations analysis\n-     are cached, so these mistakes would not be corrected when the value\n-     ranges are corrected.  */\n-  record_numbers_of_iterations ();\n-\n   to_remove_edges = VEC_alloc (edge, heap, 10);\n   to_update_switch_stmts = VEC_alloc (switch_update, heap, 5);\n "}]}