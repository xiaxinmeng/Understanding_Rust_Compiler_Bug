{"sha": "09baee1ab152afb0466c00ce87f0d681f2a50e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDliYWVlMWFiMTUyYWZiMDQ2NmMwMGNlODdmMGQ2ODFmMmE1MGUyMQ==", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@gmail.com", "date": "2018-05-18T22:53:55Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2018-05-18T22:53:55Z"}, "message": "RISC-V: Add RV32E support.\n\n\tKito Cheng <kito.cheng@gmail.com>\n\tMonk Chiang  <sh.chiang04@gmail.com>\n\n\tgcc/\n\t* common/config/riscv/riscv-common.c (riscv_parse_arch_string):\n\tAdd support to parse rv32e*.  Clear MASK_RVE for rv32i and rv64i.\n\t* config.gcc (riscv*-*-*): Add support for rv32e* and ilp32e.\n\t* config/riscv/riscv-c.c (riscv_cpu_cpp_builtins): Define\n\t__riscv_32e when TARGET_RVE.  Handle ABI_ILP32E as soft-float ABI.\n\t* config/riscv/riscv-opts.h (riscv_abi_type): Add ABI_ILP32E.\n\t* config/riscv/riscv.c (riscv_compute_frame_info): When TARGET_RVE,\n\tcompute save_libcall_adjustment properly.\n\t(riscv_option_override): Call error if TARGET_RVE and not ABI_ILP32E.\n\t(riscv_conditional_register_usage): Handle TARGET_RVE and ABI_ILP32E.\n\t* config/riscv/riscv.h (UNITS_PER_FP_ARG): Handle ABI_ILP32E.\n\t(STACK_BOUNDARY, ABI_STACK_BOUNDARY): Handle TARGET_RVE.\n\t(GP_REG_LAST, MAX_ARGS_IN_REGISTERS): Likewise.\n\t(ABI_SPEC): Handle mabi=ilp32e.\n\t* config/riscv/riscv.opt (abi_type): Add ABI_ILP32E.\n\t(RVE): Add RVE mask.\n\t* doc/invoke.texi (RISC-V options) <-mabi>: Add ilp32e info.\n\t<-march>: Add rv32e as an example.\n\n\tgcc/testsuite/\n\t* gcc.dg/stack-usage-1.c: Add support for rv32e.\n\n\tlibgcc/\n\t* config/riscv/save-restore.S: Add support for rv32e.\n\nCo-Authored-By: Jim Wilson <jimw@sifive.com>\nCo-Authored-By: Monk Chiang <sh.chiang04@gmail.com>\n\nFrom-SVN: r260384", "tree": {"sha": "099bc749227aa5e740a633ed64614b065584c3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/099bc749227aa5e740a633ed64614b065584c3a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09baee1ab152afb0466c00ce87f0d681f2a50e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09baee1ab152afb0466c00ce87f0d681f2a50e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09baee1ab152afb0466c00ce87f0d681f2a50e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09baee1ab152afb0466c00ce87f0d681f2a50e21/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dc2ebc998a679294a672ecb4f585d66c9f10f56e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2ebc998a679294a672ecb4f585d66c9f10f56e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2ebc998a679294a672ecb4f585d66c9f10f56e"}], "stats": {"total": 183, "additions": 166, "deletions": 17}, "files": [{"sha": "145c3aa468ae45fbcd54dcebd04046e917463034", "filename": "gcc/ChangeLog", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -1,3 +1,26 @@\n+2018-05-18  Kito Cheng  <kito.cheng@gmail.com>\n+\t    Monk Chiang  <sh.chiang04@gmail.com>\n+\t    Jim Wilson <jimw@sifive.com>\n+\n+\t* common/config/riscv/riscv-common.c (riscv_parse_arch_string):\n+\tAdd support to parse rv32e*.  Clear MASK_RVE for rv32i and rv64i.\n+\t* config.gcc (riscv*-*-*): Add support for rv32e* and ilp32e.\n+\t* config/riscv/riscv-c.c (riscv_cpu_cpp_builtins): Define\n+\t__riscv_32e when TARGET_RVE.  Handle ABI_ILP32E as soft-float ABI.\n+\t* config/riscv/riscv-opts.h (riscv_abi_type): Add ABI_ILP32E.\n+\t* config/riscv/riscv.c (riscv_compute_frame_info): When TARGET_RVE,\n+\tcompute save_libcall_adjustment properly.\n+\t(riscv_option_override): Call error if TARGET_RVE and not ABI_ILP32E.\n+\t(riscv_conditional_register_usage): Handle TARGET_RVE and ABI_ILP32E.\n+\t* config/riscv/riscv.h (UNITS_PER_FP_ARG): Handle ABI_ILP32E.\n+\t(STACK_BOUNDARY, ABI_STACK_BOUNDARY): Handle TARGET_RVE.\n+\t(GP_REG_LAST, MAX_ARGS_IN_REGISTERS): Likewise.\n+\t(ABI_SPEC): Handle mabi=ilp32e.\n+\t* config/riscv/riscv.opt (abi_type): Add ABI_ILP32E.\n+\t(RVE): Add RVE mask.\n+\t* doc/invoke.texi (RISC-V options) <-mabi>: Add ilp32e info.\n+\t<-march>: Add rv32e as an example.\n+\n 2018-05-18  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/82899"}, {"sha": "8a78aebc320349aef5331b9d89bbea175430de52", "filename": "gcc/common/config/riscv/riscv-common.c", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Friscv%2Friscv-common.c?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -27,7 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"flags.h\"\n #include \"diagnostic-core.h\"\n \n-/* Parse a RISC-V ISA string into an option mask.  */\n+/* Parse a RISC-V ISA string into an option mask.  Must clear or set all arch\n+   dependent mask bits, in case more than one -march string is passed.  */\n \n static void\n riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n@@ -48,6 +49,8 @@ riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n     {\n       p++;\n \n+      *flags &= ~MASK_RVE;\n+\n       *flags |= MASK_MUL;\n       *flags |= MASK_ATOMIC;\n       *flags |= MASK_HARD_FLOAT;\n@@ -57,6 +60,8 @@ riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n     {\n       p++;\n \n+      *flags &= ~MASK_RVE;\n+\n       *flags &= ~MASK_MUL;\n       if (*p == 'm')\n \t*flags |= MASK_MUL, p++;\n@@ -77,6 +82,28 @@ riscv_parse_arch_string (const char *isa, int *flags, location_t loc)\n \t    }\n \t}\n     }\n+  else if (*p == 'e')\n+    {\n+      p++;\n+\n+      *flags |= MASK_RVE;\n+\n+      if (*flags & MASK_64BIT)\n+\t{\n+\t  error (\"RV64E is not a valid base ISA\");\n+\t  return;\n+\t}\n+\n+      *flags &= ~MASK_MUL;\n+      if (*p == 'm')\n+\t*flags |= MASK_MUL, p++;\n+\n+      *flags &= ~MASK_ATOMIC;\n+      if (*p == 'a')\n+\t*flags |= MASK_ATOMIC, p++;\n+\n+      *flags &= ~(MASK_HARD_FLOAT | MASK_DOUBLE_FLOAT);\n+    }\n   else\n     {\n       error_at (loc, \"-march=%s: invalid ISA string\", isa);"}, {"sha": "96ae6a88a0db4c55341c094b73e2b23574d647a2", "filename": "gcc/config.gcc", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -4077,19 +4077,20 @@ case \"${target}\" in\n \n \t\t# Infer arch from --with-arch, --target, and --with-abi.\n \t\tcase \"${with_arch}\" in\n-\t\trv32i* | rv32g* | rv64i* | rv64g*)\n+\t\trv32e* | rv32i* | rv32g* | rv64i* | rv64g*)\n \t\t\t# OK.\n \t\t\t;;\n \t\t\"\")\n \t\t\t# Infer XLEN, but otherwise assume GC.\n \t\t\tcase \"${with_abi}\" in\n+\t\t\tilp32e) with_arch=\"rv32e\" ;;\n \t\t\tilp32 | ilp32f | ilp32d) with_arch=\"rv32gc\" ;;\n \t\t\tlp64 | lp64f | lp64d) with_arch=\"rv64gc\" ;;\n \t\t\t*) with_arch=\"rv${xlen}gc\" ;;\n \t\t\tesac\n \t\t\t;;\n \t\t*)\n-\t\t\techo \"--with-arch=${with_arch} is not supported.  The argument must begin with rv32i, rv32g, rv64i, or rv64g.\" 1>&2\n+\t\t\techo \"--with-arch=${with_arch} is not supported.  The argument must begin with rv32e, rv32i, rv32g, rv64i, or rv64g.\" 1>&2\n \t\t\texit 1\n \t\t\t;;\n \t\tesac\n@@ -4098,11 +4099,12 @@ case \"${target}\" in\n \t\t# pick a default based on the ISA, preferring soft-float\n \t\t# unless the D extension is present.\n \t\tcase \"${with_abi}\" in\n-\t\tilp32 | ilp32f | ilp32d | lp64 | lp64f | lp64d)\n+\t\tilp32 | ilp32e | ilp32f | ilp32d | lp64 | lp64f | lp64d)\n \t\t\t;;\n \t\t\"\")\n \t\t\tcase \"${with_arch}\" in\n \t\t\trv32*d* | rv32g*) with_abi=ilp32d ;;\n+\t\t\trv32e*) with_abi=ilp32e ;;\n \t\t\trv32*) with_abi=ilp32 ;;\n \t\t\trv64*d* | rv64g*) with_abi=lp64d ;;\n \t\t\trv64*) with_abi=lp64 ;;\n@@ -4116,7 +4118,7 @@ case \"${target}\" in\n \n \t\t# Make sure ABI and ISA are compatible.\n \t\tcase \"${with_abi},${with_arch}\" in\n-\t\tilp32,rv32* \\\n+\t\tilp32,rv32* | ilp32e,rv32e* \\\n \t\t| ilp32f,rv32*f* | ilp32f,rv32g* \\\n \t\t| ilp32d,rv32*d* | ilp32d,rv32g* \\\n \t\t| lp64,rv64* \\"}, {"sha": "513f974d9aa2465062ed2f8cf8965bbaecd41bc0", "filename": "gcc/config/riscv/riscv-c.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-c.c?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -39,6 +39,9 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n   if (TARGET_RVC)\n     builtin_define (\"__riscv_compressed\");\n   \n+  if (TARGET_RVE)\n+    builtin_define (\"__riscv_32e\");\n+\n   if (TARGET_ATOMIC)\n     builtin_define (\"__riscv_atomic\");\n   \n@@ -62,6 +65,7 @@ riscv_cpu_cpp_builtins (cpp_reader *pfile)\n   switch (riscv_abi)\n     {\n     case ABI_ILP32:\n+    case ABI_ILP32E:\n     case ABI_LP64:\n       builtin_define (\"__riscv_float_abi_soft\");\n       break;"}, {"sha": "b7ed72ebb75ee93c7699ef0ecd3019c383e93f84", "filename": "gcc/config/riscv/riscv-opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-opts.h?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -23,6 +23,7 @@ along with GCC; see the file COPYING3.  If not see\n \n enum riscv_abi_type {\n   ABI_ILP32,\n+  ABI_ILP32E,\n   ABI_ILP32F,\n   ABI_ILP32D,\n   ABI_LP64,"}, {"sha": "9a9d9e1befe8f927716df8202a152323779a851d", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -3334,7 +3334,14 @@ riscv_compute_frame_info (void)\n \n       /* Only use save/restore routines if they don't alter the stack size.  */\n       if (RISCV_STACK_ALIGN (num_save_restore * UNITS_PER_WORD) == x_save_size)\n-\tframe->save_libcall_adjustment = x_save_size;\n+\t{\n+\t  /* Libcall saves/restores 3 registers at once, so we need to\n+\t     allocate 12 bytes for callee-saved register.  */\n+\t  if (TARGET_RVE)\n+\t    x_save_size = 3 * UNITS_PER_WORD;\n+\n+\t  frame->save_libcall_adjustment = x_save_size;\n+\t}\n \n       offset += x_save_size;\n     }\n@@ -4147,6 +4154,9 @@ riscv_option_override (void)\n     error (\"requested ABI requires -march to subsume the %qc extension\",\n \t   UNITS_PER_FP_ARG > 8 ? 'Q' : (UNITS_PER_FP_ARG > 4 ? 'D' : 'F'));\n \n+  if (TARGET_RVE && riscv_abi != ABI_ILP32E)\n+    error (\"rv32e requires ilp32e ABI\");\n+\n   /* We do not yet support ILP32 on RV64.  */\n   if (BITS_PER_WORD != POINTER_SIZE)\n     error (\"ABI requires -march=rv%d\", POINTER_SIZE);\n@@ -4171,6 +4181,19 @@ riscv_option_override (void)\n static void\n riscv_conditional_register_usage (void)\n {\n+  /* We have only x0~x15 on RV32E.  */\n+  if (TARGET_RVE)\n+    {\n+      for (int r = 16; r <= 31; r++)\n+\tfixed_regs[r] = 1;\n+    }\n+\n+  if (riscv_abi == ABI_ILP32E)\n+    {\n+      for (int r = 16; r <= 31; r++)\n+\tcall_used_regs[r] = 1;\n+    }\n+\n   if (!TARGET_HARD_FLOAT)\n     {\n       for (int regno = FP_REG_FIRST; regno <= FP_REG_LAST; regno++)"}, {"sha": "a9111a483ab8c0c0ed28d151a9a73ff5dee0615d", "filename": "gcc/config/riscv/riscv.h", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.h?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -102,9 +102,11 @@ along with GCC; see the file COPYING3.  If not see\n #define UNITS_PER_FP_REG (TARGET_DOUBLE_FLOAT ? 8 : 4)\n \n /* The largest type that can be passed in floating-point registers.  */\n-#define UNITS_PER_FP_ARG\t\t\t\t\t\\\n-  (riscv_abi == ABI_ILP32 || riscv_abi == ABI_LP64 ? 0 :\t\\\n-   riscv_abi == ABI_ILP32F || riscv_abi == ABI_LP64F ? 4 : 8)\t\\\n+#define UNITS_PER_FP_ARG\t\t\t\t\t\t\\\n+  ((riscv_abi == ABI_ILP32 || riscv_abi == ABI_ILP32E\t\t\t\\\n+    || riscv_abi == ABI_LP64)\t\t\t\t\t\t\\\n+   ? 0 \t\t\t\t\t\t\t\t\t\\\n+   : ((riscv_abi == ABI_ILP32F || riscv_abi == ABI_LP64F) ? 4 : 8))\n \n /* Set the sizes of the core types.  */\n #define SHORT_TYPE_SIZE 16\n@@ -124,10 +126,10 @@ along with GCC; see the file COPYING3.  If not see\n #define FUNCTION_BOUNDARY (TARGET_RVC ? 16 : 32)\n \n /* The smallest supported stack boundary the calling convention supports.  */\n-#define STACK_BOUNDARY (2 * BITS_PER_WORD)\n+#define STACK_BOUNDARY (TARGET_RVE ? BITS_PER_WORD : 2 * BITS_PER_WORD)\n \n /* The ABI stack alignment.  */\n-#define ABI_STACK_BOUNDARY 128\n+#define ABI_STACK_BOUNDARY (TARGET_RVE ? BITS_PER_WORD : 128)\n \n /* There is no point aligning anything to a rounder boundary than this.  */\n #define BIGGEST_ALIGNMENT 128\n@@ -260,7 +262,7 @@ along with GCC; see the file COPYING3.  If not see\n /* Internal macros to classify an ISA register's type.  */\n \n #define GP_REG_FIRST 0\n-#define GP_REG_LAST  31\n+#define GP_REG_LAST  (TARGET_RVE ? 15 : 31)\n #define GP_REG_NUM   (GP_REG_LAST - GP_REG_FIRST + 1)\n \n #define FP_REG_FIRST 32\n@@ -490,7 +492,7 @@ enum reg_class\n #define GP_RETURN GP_ARG_FIRST\n #define FP_RETURN (UNITS_PER_FP_ARG == 0 ? GP_RETURN : FP_ARG_FIRST)\n \n-#define MAX_ARGS_IN_REGISTERS 8\n+#define MAX_ARGS_IN_REGISTERS (TARGET_RVE ? 6 : 8)\n \n /* Symbolic macros for the first/last argument registers.  */\n \n@@ -870,6 +872,7 @@ extern unsigned riscv_stack_boundary;\n \n #define ABI_SPEC \\\n   \"%{mabi=ilp32:ilp32}\" \\\n+  \"%{mabi=ilp32e:ilp32e}\" \\\n   \"%{mabi=ilp32f:ilp32f}\" \\\n   \"%{mabi=ilp32d:ilp32d}\" \\\n   \"%{mabi=lp64:lp64}\" \\"}, {"sha": "13693221d261d418b2cd9b905aaa1dcd28b79e93", "filename": "gcc/config/riscv/riscv.opt", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fconfig%2Friscv%2Friscv.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.opt?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -44,6 +44,9 @@ Supported ABIs (for use with the -mabi= option):\n EnumValue\n Enum(abi_type) String(ilp32) Value(ABI_ILP32)\n \n+EnumValue\n+Enum(abi_type) String(ilp32e) Value(ABI_ILP32E)\n+\n EnumValue\n Enum(abi_type) String(ilp32f) Value(ABI_ILP32F)\n \n@@ -122,3 +125,5 @@ Mask(HARD_FLOAT)\n Mask(DOUBLE_FLOAT)\n \n Mask(RVC)\n+\n+Mask(RVE)"}, {"sha": "beba295bef505ae98e7d2d6bc59bb7ffc659c878", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -23025,7 +23025,9 @@ conventions are: @samp{ilp32}, @samp{ilp32f}, @samp{ilp32d}, @samp{lp64},\n @samp{lp64f}, and @samp{lp64d}.  Some calling conventions are impossible to\n implement on some ISAs: for example, @samp{-march=rv32if -mabi=ilp32d} is\n invalid because the ABI requires 64-bit values be passed in F registers, but F\n-registers are only 32 bits wide.\n+registers are only 32 bits wide.  There is also the @samp{ilp32e} ABI that can\n+only be used with the @samp{rv32e} architecture.  This ABI is not well\n+specified at present, and is subject to change.\n \n @item -mfdiv\n @itemx -mno-fdiv\n@@ -23044,7 +23046,8 @@ these instructions.\n @item -march=@var{ISA-string}\n @opindex march\n Generate code for given RISC-V ISA (e.g.@ @samp{rv64im}).  ISA strings must be\n-lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, and @samp{rv32imaf}.\n+lower-case.  Examples include @samp{rv64i}, @samp{rv32g}, @samp{rv32e}, and\n+@samp{rv32imaf}.\n \n @item -mtune=@var{processor-string}\n @opindex mtune"}, {"sha": "e757d806501be702183548f305391603fd8915b7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -1,3 +1,7 @@\n+2018-05-18  Kito Cheng  <kito.cheng@gmail.com>\n+\n+\t* gcc.dg/stack-usage-1.c: Add support for rv32e.\n+\n 2018-05-18  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR c++/82899"}, {"sha": "038bd4ec05cc6a4c074c392bf57ff91564180243", "filename": "gcc/testsuite/gcc.dg/stack-usage-1.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstack-usage-1.c?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -64,7 +64,11 @@\n #    define SIZE 240\n #  endif\n #elif defined (__riscv)\n-#  define SIZE 240\n+#  if defined (__riscv_32e)\n+#    define SIZE 252\n+#  else\n+#    define SIZE 240\n+#  endif\n #elif defined (__AVR__)\n #if defined (__AVR_3_BYTE_PC__ )\n #  define SIZE 251 /* 256 - 2 bytes for Y - 3 bytes for return address */"}, {"sha": "e8886cfda7735096e4d49feadb4041a84f5541b5", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -1,3 +1,9 @@\n+2018-05-18  Kito Cheng <kito.cheng@gmail.com>\n+\t    Monk Chiang  <sh.chiang04@gmail.com>\n+\t    Jim Wilson <jimw@sifive.com>\n+\n+\t* config/riscv/save-restore.S: Add support for rv32e.\n+\n 2018-05-18  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/libunwind.S: Update comment relating to armv5."}, {"sha": "a76c978090227383605878d45927ba154318a051", "filename": "libgcc/config/riscv/save-restore.S", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09baee1ab152afb0466c00ce87f0d681f2a50e21/libgcc%2Fconfig%2Friscv%2Fsave-restore.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09baee1ab152afb0466c00ce87f0d681f2a50e21/libgcc%2Fconfig%2Friscv%2Fsave-restore.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Friscv%2Fsave-restore.S?ref=09baee1ab152afb0466c00ce87f0d681f2a50e21", "patch": "@@ -294,6 +294,48 @@ FUNC_END (__riscv_restore_0)\n \n #else\n \n+#ifdef __riscv_32e\n+FUNC_BEGIN(__riscv_save_2)\n+FUNC_BEGIN(__riscv_save_1)\n+FUNC_BEGIN(__riscv_save_0)\n+  .cfi_startproc\n+  # __riscv_save_* routine use t0/x5 as return address\n+  .cfi_return_column 5\n+  addi sp, sp, -12\n+  .cfi_def_cfa_offset 12\n+  sw s1, 0(sp)\n+  .cfi_offset 9, -12\n+  sw s0, 4(sp)\n+  .cfi_offset 8, -8\n+  sw ra, 8(sp)\n+  .cfi_offset 1, 0\n+  jr t0\n+  .cfi_endproc\n+FUNC_END(__riscv_save_2)\n+FUNC_END(__riscv_save_1)\n+FUNC_END(__riscv_save_0)\n+\n+FUNC_BEGIN(__riscv_restore_2)\n+FUNC_BEGIN(__riscv_restore_1)\n+FUNC_BEGIN(__riscv_restore_0)\n+  .cfi_startproc\n+  .cfi_def_cfa_offset 14\n+  lw s1, 0(sp)\n+  .cfi_restore 9\n+  lw s0, 4(sp)\n+  .cfi_restore 8\n+  lw ra, 8(sp)\n+  .cfi_restore 1\n+  addi sp, sp, 12\n+  .cfi_def_cfa_offset 0\n+  ret\n+  .cfi_endproc\n+FUNC_END(__riscv_restore_2)\n+FUNC_END(__riscv_restore_1)\n+FUNC_END(__riscv_restore_0)\n+\n+#else\n+\n FUNC_BEGIN (__riscv_save_12)\n   .cfi_startproc\n   # __riscv_save_* routine use t0/x5 as return address\n@@ -486,4 +528,6 @@ FUNC_END (__riscv_restore_2)\n FUNC_END (__riscv_restore_1)\n FUNC_END (__riscv_restore_0)\n \n-#endif\n+#endif /* __riscv_32e */\n+\n+#endif /* __riscv_xlen == 64 */"}]}