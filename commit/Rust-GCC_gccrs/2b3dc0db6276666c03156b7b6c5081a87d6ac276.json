{"sha": "2b3dc0db6276666c03156b7b6c5081a87d6ac276", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIzZGMwZGI2Mjc2NjY2YzAzMTU2YjdiNmM1MDgxYTg3ZDZhYzI3Ng==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2014-03-06T21:45:31Z"}, "committer": {"name": "Janus Weil", "email": "janus@gcc.gnu.org", "date": "2014-03-06T21:45:31Z"}, "message": "re PR fortran/51976 ([F2003] Support deferred-length character components of derived types (allocatable string length))\n\n2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n\t    Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/51976\n\t* gfortran.h (symbol_attribute): Add deferred_parameter attribute.\n\t* primary.c (build_actual_constructor): It is not an error if\n\ta missing component has the deferred_parameter attribute;\n\tequally, if one is given a value, it is an error.\n\t* resolve.c (resolve_fl_derived0): Remove error for deferred\n\tcharacter length components.  Add the hidden string length\n\tfield to the structure. Give it the deferred_parameter\n\tattribute.\n\t* trans-array.c (duplicate_allocatable): Add a strlen field\n\twhich is used as the element size if it is non-null.\n\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Pass a\n\tNULL to the new argument in duplicate_allocatable.\n\t(structure_alloc_comps): Set the hidden string length as\n\tappropriate. Use it in calls to duplicate_allocatable.\n\t(gfc_alloc_allocatable_for_assignment): When a deferred length\n\tbackend declaration is variable, use that; otherwise use the\n\tstring length from the expression evaluation.\n\t* trans-expr.c (gfc_conv_component_ref): If this is a deferred\n\tcharacter length component, the string length should have the\n\tvalue of the hidden string length field.\n\t(gfc_trans_subcomponent_assign): Set the hidden string length\n\tfield for deferred character length components.  Allocate the\n\tnecessary memory for the string.\n\t(alloc_scalar_allocatable_for_assignment): Same change as in\n\tgfc_alloc_allocatable_for_assignment above.\n\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n\t* trans-intrinsic (size_of_string_in_bytes): Make non-static.\n\t* trans-types.c (gfc_get_derived_type): Set the tree type for\n\ta deferred character length component.\n\t* trans.c (gfc_deferred_strlen): New function.\n\t* trans.h (size_of_string_in_bytes,gfc_deferred_strlen): New prototypes.\n\n\n2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n\t    Janus Weil  <janus@gcc.gnu.org>\n\n\tPR fortran/51976\n\t* gfortran.dg/deferred_type_component_1.f90 : New test.\n\t* gfortran.dg/deferred_type_component_2.f90 : New test.\n\nCo-Authored-By: Janus Weil <janus@gcc.gnu.org>\n\nFrom-SVN: r208386", "tree": {"sha": "e830b99b5e9f97c58d66ed160cf4d9e10a6563dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e830b99b5e9f97c58d66ed160cf4d9e10a6563dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b3dc0db6276666c03156b7b6c5081a87d6ac276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3dc0db6276666c03156b7b6c5081a87d6ac276", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b3dc0db6276666c03156b7b6c5081a87d6ac276", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b3dc0db6276666c03156b7b6c5081a87d6ac276/comments", "author": null, "committer": {"login": "janusw", "id": 484108, "node_id": "MDQ6VXNlcjQ4NDEwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/484108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janusw", "html_url": "https://github.com/janusw", "followers_url": "https://api.github.com/users/janusw/followers", "following_url": "https://api.github.com/users/janusw/following{/other_user}", "gists_url": "https://api.github.com/users/janusw/gists{/gist_id}", "starred_url": "https://api.github.com/users/janusw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janusw/subscriptions", "organizations_url": "https://api.github.com/users/janusw/orgs", "repos_url": "https://api.github.com/users/janusw/repos", "events_url": "https://api.github.com/users/janusw/events{/privacy}", "received_events_url": "https://api.github.com/users/janusw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4973b0f955150da76d0e46f64ebe430baa279a51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4973b0f955150da76d0e46f64ebe430baa279a51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4973b0f955150da76d0e46f64ebe430baa279a51"}], "stats": {"total": 357, "additions": 329, "deletions": 28}, "files": [{"sha": "f68353a983f97d058221a2eea9e767a42337bcbb", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -1,3 +1,39 @@\n+2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/51976\n+\t* gfortran.h (symbol_attribute): Add deferred_parameter attribute.\n+\t* primary.c (build_actual_constructor): It is not an error if\n+\ta missing component has the deferred_parameter attribute;\n+\tequally, if one is given a value, it is an error.\n+\t* resolve.c (resolve_fl_derived0): Remove error for deferred\n+\tcharacter length components.  Add the hidden string length\n+\tfield to the structure. Give it the deferred_parameter\n+\tattribute.\n+\t* trans-array.c (duplicate_allocatable): Add a strlen field\n+\twhich is used as the element size if it is non-null.\n+\t(gfc_duplicate_allocatable, gfc_copy_allocatable_data): Pass a\n+\tNULL to the new argument in duplicate_allocatable.\n+\t(structure_alloc_comps): Set the hidden string length as\n+\tappropriate. Use it in calls to duplicate_allocatable.\n+\t(gfc_alloc_allocatable_for_assignment): When a deferred length\n+\tbackend declaration is variable, use that; otherwise use the\n+\tstring length from the expression evaluation.\n+\t* trans-expr.c (gfc_conv_component_ref): If this is a deferred\n+\tcharacter length component, the string length should have the\n+\tvalue of the hidden string length field.\n+\t(gfc_trans_subcomponent_assign): Set the hidden string length\n+\tfield for deferred character length components.  Allocate the\n+\tnecessary memory for the string.\n+\t(alloc_scalar_allocatable_for_assignment): Same change as in\n+\tgfc_alloc_allocatable_for_assignment above.\n+\t* trans-stmt.c (gfc_trans_allocate): Likewise.\n+\t* trans-intrinsic (size_of_string_in_bytes): Make non-static.\n+\t* trans-types.c (gfc_get_derived_type): Set the tree type for\n+\ta deferred character length component.\n+\t* trans.c (gfc_deferred_strlen): New function.\n+\t* trans.h (size_of_string_in_bytes,gfc_deferred_strlen): New prototypes.\n+\n 2014-03-01  Mikael Morin  <mikael@gcc.gnu.org>\n \n \tPR fortran/60341"}, {"sha": "cd2a91323a396acfda01bbb4fe57ef4987036619", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -811,6 +811,9 @@ typedef struct\n   /* Attributes set by compiler extensions (!GCC$ ATTRIBUTES).  */\n   unsigned ext_attr:EXT_ATTR_NUM;\n \n+  /* Is a parameter associated with a deferred type component.  */\n+  unsigned deferred_parameter:1;\n+\n   /* The namespace where the attribute has been set.  */\n   struct gfc_namespace *volatile_ns, *asynchronous_ns;\n }"}, {"sha": "e2eb46748fe5a5784fd4617a4046a6066c6b5275", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -2355,7 +2355,7 @@ build_actual_constructor (gfc_structure_ctor_component **comp_head,\n \t}\n \n       /* If it was not found, try the default initializer if there's any;\n-\t otherwise, it's an error.  */\n+\t otherwise, it's an error unless this is a deferred parameter.  */\n       if (!comp_iter)\n \t{\n \t  if (comp->initializer)\n@@ -2365,7 +2365,7 @@ build_actual_constructor (gfc_structure_ctor_component **comp_head,\n \t\treturn false;\n \t      value = gfc_copy_expr (comp->initializer);\n \t    }\n-\t  else\n+\t  else if (!comp->attr.deferred_parameter)\n \t    {\n \t      gfc_error (\"No initializer for component '%s' given in the\"\n \t\t\t \" structure constructor at %C!\", comp->name);\n@@ -2447,7 +2447,7 @@ gfc_convert_to_structure_constructor (gfc_expr *e, gfc_symbol *sym, gfc_expr **c\n \t{\n \t  /* Components without name are not allowed after the first named\n \t     component initializer!  */\n-\t  if (!comp)\n+\t  if (!comp || comp->attr.deferred_parameter)\n \t    {\n \t      if (last_name)\n \t\tgfc_error (\"Component initializer without name after component\""}, {"sha": "bcdfcadd3d1b5f12d284e6632c06dc66383c510f", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -12105,14 +12105,6 @@ resolve_fl_derived0 (gfc_symbol *sym)\n       if (c->attr.artificial)\n \tcontinue;\n \n-      /* See PRs 51550, 47545, 48654, 49050, 51075 - and 45170.  */\n-      if (c->ts.type == BT_CHARACTER && c->ts.deferred && !c->attr.function)\n-\t{\n-\t  gfc_error (\"Deferred-length character component '%s' at %L is not \"\n-\t\t     \"yet supported\", c->name, &c->loc);\n-\t  return false;\n-\t}\n-\n       /* F2008, C442.  */\n       if ((!sym->attr.is_class || c != sym->components)\n \t  && c->attr.codimension\n@@ -12364,6 +12356,25 @@ resolve_fl_derived0 (gfc_symbol *sym)\n \t  return false;\n \t}\n \n+      /* Add the hidden deferred length field.  */\n+      if (c->ts.type == BT_CHARACTER && c->ts.deferred && !c->attr.function\n+\t  && !sym->attr.is_class)\n+\t{\n+\t  char name[GFC_MAX_SYMBOL_LEN+9];\n+\t  gfc_component *strlen;\n+\t  sprintf (name, \"_%s_length\", c->name);\n+\t  strlen = gfc_find_component (sym, name, true, true);\n+\t  if (strlen == NULL)\n+\t    {\n+\t      if (!gfc_add_component (sym, name, &strlen))\n+\t\treturn false;\n+\t      strlen->ts.type = BT_INTEGER;\n+\t      strlen->ts.kind = gfc_charlen_int_kind;\n+\t      strlen->attr.access = ACCESS_PRIVATE;\n+\t      strlen->attr.deferred_parameter = 1;\n+\t    }\n+\t}\n+\n       if (c->ts.type == BT_DERIVED\n \t  && sym->component_access != ACCESS_PRIVATE\n \t  && gfc_check_symbol_access (sym)"}, {"sha": "153ef67e49e00ee608d1197dbcc18c0d8c6805a3", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 61, "deletions": 12, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -7365,7 +7365,7 @@ get_full_array_size (stmtblock_t *block, tree decl, int rank)\n \n static tree\n duplicate_allocatable (tree dest, tree src, tree type, int rank,\n-\t\t       bool no_malloc)\n+\t\t       bool no_malloc, tree str_sz)\n {\n   tree tmp;\n   tree size;\n@@ -7386,7 +7386,11 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n       null_data = gfc_finish_block (&block);\n \n       gfc_init_block (&block);\n-      size = TYPE_SIZE_UNIT (TREE_TYPE (type));\n+      if (str_sz != NULL_TREE)\n+\tsize = str_sz;\n+      else\n+\tsize = TYPE_SIZE_UNIT (TREE_TYPE (type));\n+\n       if (!no_malloc)\n \t{\n \t  tmp = gfc_call_malloc (&block, type, size);\n@@ -7410,8 +7414,11 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n       else\n \tnelems = gfc_index_one_node;\n \n-      tmp = fold_convert (gfc_array_index_type,\n-\t\t\t  TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n+      if (str_sz != NULL_TREE)\n+\ttmp = fold_convert (gfc_array_index_type, str_sz);\n+      else\n+\ttmp = fold_convert (gfc_array_index_type,\n+\t\t\t    TYPE_SIZE_UNIT (gfc_get_element_type (type)));\n       size = fold_build2_loc (input_location, MULT_EXPR, gfc_array_index_type,\n \t\t\t      nelems, tmp);\n       if (!no_malloc)\n@@ -7452,7 +7459,7 @@ duplicate_allocatable (tree dest, tree src, tree type, int rank,\n tree\n gfc_duplicate_allocatable (tree dest, tree src, tree type, int rank)\n {\n-  return duplicate_allocatable (dest, src, type, rank, false);\n+  return duplicate_allocatable (dest, src, type, rank, false, NULL_TREE);\n }\n \n \n@@ -7461,7 +7468,7 @@ gfc_duplicate_allocatable (tree dest, tree src, tree type, int rank)\n tree\n gfc_copy_allocatable_data (tree dest, tree src, tree type, int rank)\n {\n-  return duplicate_allocatable (dest, src, type, rank, true);\n+  return duplicate_allocatable (dest, src, type, rank, true, NULL_TREE);\n }\n \n \n@@ -7718,6 +7725,16 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t\t\t\t     void_type_node, comp,\n \t\t\t\t     build_int_cst (TREE_TYPE (comp), 0));\n \t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t      if (gfc_deferred_strlen (c, &comp))\n+\t\t{\n+\t\t  comp = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t\t  TREE_TYPE (comp),\n+\t\t\t\t\t  decl, comp, NULL_TREE);\n+\t\t  tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t\t TREE_TYPE (comp), comp,\n+\t\t\t\t\t build_int_cst (TREE_TYPE (comp), 0));\n+\t\t  gfc_add_expr_to_block (&fnblock, tmp);\n+\t\t}\n \t    }\n \t  else if (c->ts.type == BT_CLASS && CLASS_DATA (c)->attr.allocatable)\n \t    {\n@@ -7855,8 +7872,26 @@ structure_alloc_comps (gfc_symbol * der_type, tree decl,\n \t      continue;\n \t    }\n \n-\t  if (c->attr.allocatable && !c->attr.proc_pointer\n-\t      && !cmp_has_alloc_comps)\n+\t  if (gfc_deferred_strlen (c, &tmp))\n+\t    {\n+\t      tree len, size;\n+\t      len = tmp;\n+\t      tmp = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t     TREE_TYPE (len),\n+\t\t\t\t     decl, len, NULL_TREE);\n+\t      len = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\t     TREE_TYPE (len),\n+\t\t\t\t     dest, len, NULL_TREE);\n+\t      tmp = fold_build2_loc (input_location, MODIFY_EXPR,\n+\t\t\t\t     TREE_TYPE (len), len, tmp);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t      size = size_of_string_in_bytes (c->ts.kind, len);\n+\t      tmp = duplicate_allocatable (dcmp, comp, ctype, rank,\n+\t\t\t\t\t   false, size);\n+\t      gfc_add_expr_to_block (&fnblock, tmp);\n+\t    }\n+\t  else if (c->attr.allocatable && !c->attr.proc_pointer\n+\t\t   && !cmp_has_alloc_comps)\n \t    {\n \t      rank = c->as ? c->as->rank : 0;\n \t      if (c->attr.codimension)\n@@ -8342,10 +8377,24 @@ gfc_alloc_allocatable_for_assignment (gfc_loopinfo *loop,\n   /* Get the new lhs size in bytes.  */\n   if (expr1->ts.type == BT_CHARACTER && expr1->ts.deferred)\n     {\n-      tmp = expr2->ts.u.cl->backend_decl;\n-      gcc_assert (expr1->ts.u.cl->backend_decl);\n-      tmp = fold_convert (TREE_TYPE (expr1->ts.u.cl->backend_decl), tmp);\n-      gfc_add_modify (&fblock, expr1->ts.u.cl->backend_decl, tmp);\n+      if (expr2->ts.deferred)\n+\t{\n+\t  if (TREE_CODE (expr2->ts.u.cl->backend_decl) == VAR_DECL)\n+\t    tmp = expr2->ts.u.cl->backend_decl;\n+\t  else\n+\t    tmp = rss->info->string_length;\n+\t}\n+      else\n+\t{\n+\t  tmp = expr2->ts.u.cl->backend_decl;\n+\t  tmp = fold_convert (TREE_TYPE (expr1->ts.u.cl->backend_decl), tmp);\n+\t}\n+\n+      if (expr1->ts.u.cl->backend_decl\n+\t  && TREE_CODE (expr1->ts.u.cl->backend_decl) == VAR_DECL)\n+\tgfc_add_modify (&fblock, expr1->ts.u.cl->backend_decl, tmp);\n+      else\n+\tgfc_add_modify (&fblock, lss->info->string_length, tmp);\n     }\n   else if (expr1->ts.type == BT_CHARACTER && expr1->ts.u.cl->backend_decl)\n     {"}, {"sha": "269fcc5c86c59e17119ea581baf50e5c62099851", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 47, "deletions": 3, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -1689,6 +1689,14 @@ gfc_conv_component_ref (gfc_se * se, gfc_ref * ref)\n       se->string_length = tmp;\n     }\n \n+  if (gfc_deferred_strlen (c, &field))\n+    {\n+      tmp = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t     TREE_TYPE (field),\n+\t\t\t     decl, field, NULL_TREE);\n+      se->string_length = tmp;\n+    }\n+\n   if (((c->attr.pointer || c->attr.allocatable)\n        && (!c->attr.dimension && !c->attr.codimension)\n        && c->ts.type != BT_CHARACTER)\n@@ -6043,9 +6051,42 @@ gfc_trans_subcomponent_assign (tree dest, gfc_component * cm, gfc_expr * expr)\n \t  gfc_add_expr_to_block (&block, tmp);\n \t}\n     }\n-  else\n+  else if (gfc_deferred_strlen (cm, &tmp))\n+    {\n+      tree strlen;\n+      strlen = tmp;\n+      gcc_assert (strlen);\n+      strlen = fold_build3_loc (input_location, COMPONENT_REF,\n+\t\t\t\tTREE_TYPE (strlen),\n+\t\t\t\tTREE_OPERAND (dest, 0),\n+\t\t\t\tstrlen, NULL_TREE);\n+\n+      if (expr->expr_type == EXPR_NULL)\n+\t{\n+\t  tmp = build_int_cst (TREE_TYPE (cm->backend_decl), 0);\n+\t  gfc_add_modify (&block, dest, tmp);\n+\t  tmp = build_int_cst (TREE_TYPE (strlen), 0);\n+\t  gfc_add_modify (&block, strlen, tmp);\n+\t}\n+      else\n+\t{\n+\t  tree size;\n+\t  gfc_init_se (&se, NULL);\n+\t  gfc_conv_expr (&se, expr);\n+\t  size = size_of_string_in_bytes (cm->ts.kind, se.string_length);\n+\t  tmp = build_call_expr_loc (input_location,\n+\t\t\t\t     builtin_decl_explicit (BUILT_IN_MALLOC),\n+\t\t\t\t     1, size);\n+\t  gfc_add_modify (&block, dest,\n+\t\t\t  fold_convert (TREE_TYPE (dest), tmp));\n+\t  gfc_add_modify (&block, strlen, se.string_length);\n+\t  tmp = gfc_build_memcpy_call (dest, se.expr, size);\n+\t  gfc_add_expr_to_block (&block, tmp);\n+\t}\n+    }\n+  else if (!cm->attr.deferred_parameter)\n     {\n-      /* Scalar component.  */\n+      /* Scalar component (excluding deferred parameters).  */\n       gfc_init_se (&se, NULL);\n       gfc_init_se (&lse, NULL);\n \n@@ -7747,7 +7788,10 @@ alloc_scalar_allocatable_for_assignment (stmtblock_t *block,\n \n       /* Update the lhs character length.  */\n       size = string_length;\n-      gfc_add_modify (block, expr1->ts.u.cl->backend_decl, size);\n+      if (TREE_CODE (expr1->ts.u.cl->backend_decl) == VAR_DECL)\n+\tgfc_add_modify (block, expr1->ts.u.cl->backend_decl, size);\n+      else\n+\tgfc_add_modify (block, lse.string_length, size);\n     }\n }\n "}, {"sha": "75bd20ae04a11cbc17c5a58f7fdb146c31920b80", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -5166,7 +5166,7 @@ gfc_conv_intrinsic_size (gfc_se * se, gfc_expr * expr)\n    excluding the terminating null characters.  The result has\n    gfc_array_index_type type.  */\n \n-static tree\n+tree\n size_of_string_in_bytes (int kind, tree string_length)\n {\n   tree bytesize;"}, {"sha": "c7ff7a8cb8eb3dfc38c6cc6a33fe2b440fa097b6", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -5028,6 +5028,11 @@ gfc_trans_allocate (gfc_code * code)\n \t      if (tmp && TREE_CODE (tmp) == VAR_DECL)\n \t\tgfc_add_modify (&se.pre, tmp, fold_convert (TREE_TYPE (tmp),\n \t\t\t\tmemsz));\n+\t      else if (al->expr->ts.type == BT_CHARACTER\n+\t\t       && al->expr->ts.deferred && se.string_length)\n+\t\tgfc_add_modify (&se.pre, se.string_length,\n+\t\t\t\tfold_convert (TREE_TYPE (se.string_length),\n+\t\t\t\tmemsz));\n \n \t      /* Convert to size in bytes, using the character KIND.  */\n \t      if (unlimited_char)"}, {"sha": "be268cfbdec9521a593b71a7d340ca0d1b4aa26a", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -2486,12 +2486,15 @@ gfc_get_derived_type (gfc_symbol * derived)\n         field_type = c->ts.u.derived->backend_decl;\n       else\n \t{\n-\t  if (c->ts.type == BT_CHARACTER)\n+\t  if (c->ts.type == BT_CHARACTER && !c->ts.deferred)\n \t    {\n \t      /* Evaluate the string length.  */\n \t      gfc_conv_const_charlen (c->ts.u.cl);\n \t      gcc_assert (c->ts.u.cl->backend_decl);\n \t    }\n+\t  else if (c->ts.type == BT_CHARACTER)\n+\t    c->ts.u.cl->backend_decl\n+\t\t\t= build_int_cst (gfc_charlen_type_node, 0);\n \n \t  field_type = gfc_typenode_for_spec (&c->ts);\n \t}"}, {"sha": "073e34f0eb577928d4c6579fc32e3a8b55545288", "filename": "gcc/fortran/trans.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.c?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -2044,3 +2044,21 @@ gfc_likely (tree cond)\n   cond = fold_convert (boolean_type_node, cond);\n   return cond;\n }\n+\n+\n+/* Get the string length for a deferred character length component.  */\n+\n+bool\n+gfc_deferred_strlen (gfc_component *c, tree *decl)\n+{\n+  char name[GFC_MAX_SYMBOL_LEN+9];\n+  gfc_component *strlen;\n+  if (!(c->ts.type == BT_CHARACTER && c->ts.deferred))\n+    return false;\n+  sprintf (name, \"_%s_length\", c->name);\n+  for (strlen = c; strlen; strlen = strlen->next)\n+    if (strcmp (strlen->name, name) == 0)\n+      break;\n+  *decl = strlen ? strlen->backend_decl : NULL_TREE;\n+  return strlen != NULL;\n+}"}, {"sha": "5fb0cbf2289d921bea8dc79278afdb6341e28062", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -422,6 +422,8 @@ tree gfc_evaluate_now (tree, stmtblock_t *);\n /* Find the appropriate variant of a math intrinsic.  */\n tree gfc_builtin_decl_for_float_kind (enum built_in_function, int);\n \n+tree size_of_string_in_bytes (int, tree);\n+\n /* Intrinsic procedure handling.  */\n tree gfc_conv_intrinsic_subroutine (gfc_code *);\n void gfc_conv_intrinsic_function (gfc_se *, gfc_expr *);\n@@ -581,6 +583,9 @@ bool get_array_ctor_strlen (stmtblock_t *, gfc_constructor_base, tree *);\n tree gfc_likely (tree);\n tree gfc_unlikely (tree);\n \n+/* Return the string length of a deferred character length component.  */\n+bool gfc_deferred_strlen (gfc_component *, tree *);\n+\n /* Generate a runtime error call.  */\n tree gfc_trans_runtime_error (bool, locus*, const char*, ...);\n "}, {"sha": "fe4a19b86dcb1f866183b4e0fdd93b83124934ab", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -1,3 +1,10 @@\n+2014-03-06  Paul Thomas  <pault@gcc.gnu.org>\n+\t    Janus Weil  <janus@gcc.gnu.org>\n+\n+\tPR fortran/51976\n+\t* gfortran.dg/deferred_type_component_1.f90 : New test.\n+\t* gfortran.dg/deferred_type_component_2.f90 : New test.\n+\n 2014-03-06  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/60197"}, {"sha": "a7826d9bdea3e42bbb5b200e804c40bf6e863754", "filename": "gcc/testsuite/gfortran.dg/deferred_type_component_1.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_1.f90?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+!\n+! PR 51976: [F2003] Support deferred-length character components of derived types (allocatable string length)\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+\n+  type t\n+    character(len=:), allocatable :: str_comp\n+    character(len=:), allocatable :: str_comp1\n+  end type t\n+  type(t) :: x\n+  type(t), allocatable, dimension(:) :: array\n+\n+  ! Check scalars\n+  allocate (x%str_comp, source = \"abc\")\n+  call check (x%str_comp, \"abc\")\n+  deallocate (x%str_comp)\n+  allocate (x%str_comp, source = \"abcdefghijklmnop\")\n+  call check (x%str_comp, \"abcdefghijklmnop\")\n+  x%str_comp = \"xyz\"\n+  call check (x%str_comp, \"xyz\")\n+  x%str_comp = \"abcdefghijklmnop\"\n+  x%str_comp1 = \"lmnopqrst\"\n+  call foo (x%str_comp1, \"lmnopqrst\")\n+  call bar (x, \"abcdefghijklmnop\", \"lmnopqrst\")\n+\n+  ! Check arrays and structure constructors\n+  allocate (array(2), source = [t(\"abcedefg\",\"hi\"), t(\"jkl\",\"mnop\")])\n+  call check (array(1)%str_comp, \"abcedefg\")\n+  call check (array(1)%str_comp1, \"hi\")\n+  call check (array(2)%str_comp, \"jkl\")\n+  call check (array(2)%str_comp1, \"mnop\")\n+  deallocate (array)\n+  allocate (array(3), source = [x, x, x])\n+  array(2)%str_comp = \"blooey\"\n+  call bar (array(1), \"abcdefghijklmnop\", \"lmnopqrst\")\n+  call bar (array(2), \"blooey\", \"lmnopqrst\")\n+  call bar (array(3), \"abcdefghijklmnop\", \"lmnopqrst\")\n+\n+contains\n+\n+  subroutine foo (chr1, chr2)\n+    character (*) :: chr1, chr2\n+    call check (chr1, chr2)\n+  end subroutine\n+\n+  subroutine bar (a, chr1, chr2)\n+    character (*) :: chr1, chr2\n+    type(t) :: a\n+    call check (a%str_comp, chr1)\n+    call check (a%str_comp1, chr2)\n+  end subroutine\n+\n+  subroutine check (chr1, chr2)\n+    character (*) :: chr1, chr2\n+    if (len(chr1) .ne. len (chr2)) call abort\n+    if (chr1 .ne. chr2) call abort\n+  end subroutine\n+\n+end"}, {"sha": "63e7fa393011a2bc358c2401f5b9caafe376856d", "filename": "gcc/testsuite/gfortran.dg/deferred_type_component_2.f90", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b3dc0db6276666c03156b7b6c5081a87d6ac276/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdeferred_type_component_2.f90?ref=2b3dc0db6276666c03156b7b6c5081a87d6ac276", "patch": "@@ -0,0 +1,60 @@\n+! { dg-do run }\n+!\n+! PR 51976: [F2003] Support deferred-length character components of derived types (allocatable string length)\n+!\n+! Contributed by Tobias Burnus  <burnus@gcc.gnu.org>\n+\n+  type t\n+    character(len=:,kind=4), allocatable :: str_comp\n+    character(len=:,kind=4), allocatable :: str_comp1\n+  end type t\n+  type(t) :: x\n+  type(t), allocatable, dimension(:) :: array\n+\n+  ! Check scalars\n+  allocate (x%str_comp, source = 4_\"abc\")\n+  call check (x%str_comp, 4_\"abc\")\n+  deallocate (x%str_comp)\n+  allocate (x%str_comp, source = 4_\"abcdefghijklmnop\")\n+  call check (x%str_comp, 4_\"abcdefghijklmnop\")\n+  x%str_comp = 4_\"xyz\"\n+  call check (x%str_comp, 4_\"xyz\")\n+  x%str_comp = 4_\"abcdefghijklmnop\"\n+  x%str_comp1 = 4_\"lmnopqrst\"\n+  call foo (x%str_comp1, 4_\"lmnopqrst\")\n+  call bar (x, 4_\"abcdefghijklmnop\", 4_\"lmnopqrst\")\n+\n+  ! Check arrays and structure constructors\n+  allocate (array(2), source = [t(4_\"abcedefg\",4_\"hi\"), t(4_\"jkl\",4_\"mnop\")])\n+  call check (array(1)%str_comp, 4_\"abcedefg\")\n+  call check (array(1)%str_comp1, 4_\"hi\")\n+  call check (array(2)%str_comp, 4_\"jkl\")\n+  call check (array(2)%str_comp1, 4_\"mnop\")\n+  deallocate (array)\n+  allocate (array(3), source = [x, x, x])\n+  array(2)%str_comp = 4_\"blooey\"\n+  call bar (array(1), 4_\"abcdefghijklmnop\", 4_\"lmnopqrst\")\n+  call bar (array(2), 4_\"blooey\", 4_\"lmnopqrst\")\n+  call bar (array(3), 4_\"abcdefghijklmnop\", 4_\"lmnopqrst\")\n+\n+contains\n+\n+  subroutine foo (chr1, chr2)\n+    character (len=*,kind=4) :: chr1, chr2\n+    call check (chr1, chr2)\n+  end subroutine\n+\n+  subroutine bar (a, chr1, chr2)\n+    character (len=*,kind=4) :: chr1, chr2\n+    type(t) :: a\n+    call check (a%str_comp, chr1)\n+    call check (a%str_comp1, chr2)\n+  end subroutine\n+\n+  subroutine check (chr1, chr2)\n+    character (len=*,kind=4) :: chr1, chr2\n+    if (len(chr1) .ne. len (chr2)) call abort\n+    if (chr1 .ne. chr2) call abort\n+  end subroutine\n+\n+end"}]}