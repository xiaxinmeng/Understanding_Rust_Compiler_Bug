{"sha": "f170186446d03638cd82e37aa2a1bcf4dc1adba2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjE3MDE4NjQ0NmQwMzYzOGNkODJlMzdhYTJhMWJjZjRkYzFhZGJhMg==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-09-16T21:05:49Z"}, "committer": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2021-06-09T16:11:01Z"}, "message": "rs6000, Add test 128-bit shifts for just the int128 type.\n\nThis patch also renames and moves the VSX_TI iterator from vsx.md to\nVEC_TI in vector.md.  The uses of VEC_TI are also updated.\n\n2021-04-29  Carl Love  <cel@us.ibm.com>\n\ngcc/ChangeLog\n\n\t* config/rs6000/altivec.md (altivec_vslq, altivec_vsrq):\n\tRename to altivec_vslq_<mode>, altivec_vsrq_<mode>, mode VEC_TI.\n\t* config/rs6000/vector.md (VEC_TI): Was named VSX_TI in vsx.md.\n\t(vashlv1ti3): Change to vashl<mode>3, mode VEC_TI.\n\t(vlshrv1ti3): Change to vlshr<mode>3, mode VEC_TI.\n\t* config/rs6000/vsx.md (VSX_TI): Remove define_mode_iterator. Update\n\tuses of VSX_TI to VEC_TI.\n\ngcc/testsuite/ChangeLog\n\n\t* gcc.target/powerpc/int_128bit-runnable.c: Add shift_right, shift_left\n\ttests.", "tree": {"sha": "549c7694f5602db697c13f05765c058faf1e1f79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/549c7694f5602db697c13f05765c058faf1e1f79"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f170186446d03638cd82e37aa2a1bcf4dc1adba2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f170186446d03638cd82e37aa2a1bcf4dc1adba2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f170186446d03638cd82e37aa2a1bcf4dc1adba2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f170186446d03638cd82e37aa2a1bcf4dc1adba2/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "976ffcf87da321a3eead9715032e599b226fcbf7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/976ffcf87da321a3eead9715032e599b226fcbf7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/976ffcf87da321a3eead9715032e599b226fcbf7"}], "stats": {"total": 92, "additions": 52, "deletions": 40}, "files": [{"sha": "a27e466a58e3882eb0093e375e8663d01f7bf1fc", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f170186446d03638cd82e37aa2a1bcf4dc1adba2", "patch": "@@ -2226,10 +2226,10 @@\n   \"vsl<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"altivec_vslq\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(ashift:V1TI (match_operand:V1TI 1 \"vsx_register_operand\" \"v\")\n-\t\t     (match_operand:V1TI 2 \"vsx_register_operand\" \"v\")))]\n+(define_insn \"altivec_vslq_<mode>\"\n+  [(set (match_operand:VEC_TI 0 \"vsx_register_operand\" \"=v\")\n+\t(ashift:VEC_TI (match_operand:VEC_TI 1 \"vsx_register_operand\" \"v\")\n+\t\t     (match_operand:VEC_TI 2 \"vsx_register_operand\" \"v\")))]\n   \"TARGET_POWER10\"\n   /* Shift amount in needs to be in bits[57:63] of 128-bit operand. */\n   \"vslq %0,%1,%2\"\n@@ -2243,10 +2243,10 @@\n   \"vsr<VI_char> %0,%1,%2\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n-(define_insn \"altivec_vsrq\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(lshiftrt:V1TI (match_operand:V1TI 1 \"vsx_register_operand\" \"v\")\n-\t\t       (match_operand:V1TI 2 \"vsx_register_operand\" \"v\")))]\n+(define_insn \"altivec_vsrq_<mode>\"\n+  [(set (match_operand:VEC_TI 0 \"vsx_register_operand\" \"=v\")\n+\t(lshiftrt:VEC_TI (match_operand:VEC_TI 1 \"vsx_register_operand\" \"v\")\n+\t\t\t   (match_operand:VEC_TI 2 \"vsx_register_operand\" \"v\")))]\n   \"TARGET_POWER10\"\n   /* Shift amount in needs to be in bits[57:63] of 128-bit operand. */\n   \"vsrq %0,%1,%2\""}, {"sha": "7e36c788b97e0f59ca45c9cbe51f9a5b56a1f90f", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=f170186446d03638cd82e37aa2a1bcf4dc1adba2", "patch": "@@ -26,6 +26,9 @@\n ;; Vector int modes\n (define_mode_iterator VEC_I [V16QI V8HI V4SI V2DI])\n \n+;; 128-bit int modes\n+(define_mode_iterator VEC_TI [V1TI TI])\n+\n ;; Vector int modes for parity\n (define_mode_iterator VEC_IP [V8HI\n \t\t\t      V4SI\n@@ -1620,17 +1623,17 @@\n   \"\")\n \n ;; No immediate version of this 128-bit instruction\n-(define_expand \"vashlv1ti3\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(ashift:V1TI (match_operand:V1TI 1 \"vsx_register_operand\" \"v\")\n-\t\t     (match_operand:V1TI 2 \"vsx_register_operand\" \"v\")))]\n+(define_expand \"vashl<mode>3\"\n+  [(set (match_operand:VEC_TI 0 \"vsx_register_operand\" \"=v\")\n+\t(ashift:VEC_TI (match_operand:VEC_TI 1 \"vsx_register_operand\")\n+\t\t\t (match_operand:VEC_TI 2 \"vsx_register_operand\")))]\n   \"TARGET_POWER10\"\n {\n   /* Shift amount in needs to be put in bits[57:63] of 128-bit operand2. */\n-  rtx tmp = gen_reg_rtx (V1TImode);\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n \n   emit_insn (gen_xxswapd_v1ti (tmp, operands[2]));\n-  emit_insn (gen_altivec_vslq (operands[0], operands[1], tmp));\n+  emit_insn(gen_altivec_vslq_<mode> (operands[0], operands[1], tmp));\n   DONE;\n })\n \n@@ -1643,17 +1646,17 @@\n   \"\")\n \n ;; No immediate version of this 128-bit instruction\n-(define_expand \"vlshrv1ti3\"\n-  [(set (match_operand:V1TI 0 \"vsx_register_operand\" \"=v\")\n-\t(lshiftrt:V1TI (match_operand:V1TI 1 \"vsx_register_operand\" \"v\")\n-\t\t       (match_operand:V1TI 2 \"vsx_register_operand\" \"v\")))]\n+(define_expand \"vlshr<mode>3\"\n+  [(set (match_operand:VEC_TI 0 \"vsx_register_operand\" \"=v\")\n+\t(lshiftrt:VEC_TI (match_operand:VEC_TI 1 \"vsx_register_operand\")\n+\t\t\t   (match_operand:VEC_TI 2 \"vsx_register_operand\")))]\n   \"TARGET_POWER10\"\n {\n   /* Shift amount in needs to be put into bits[57:63] of 128-bit operand2. */\n-  rtx tmp = gen_reg_rtx (V1TImode);\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n \n   emit_insn (gen_xxswapd_v1ti (tmp, operands[2]));\n-  emit_insn (gen_altivec_vsrq (operands[0], operands[1], tmp));\n+  emit_insn(gen_altivec_vsrq_<mode> (operands[0], operands[1], tmp));\n   DONE;\n })\n "}, {"sha": "ce8f82b9bad4839f06216ffad156ba0511b2c9d9", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f170186446d03638cd82e37aa2a1bcf4dc1adba2", "patch": "@@ -37,9 +37,6 @@\n \t\t\t\t  TI\n \t\t\t\t  V1TI])\n \n-;; Iterator for 128-bit integer types that go in a single vector register.\n-(define_mode_iterator VSX_TI [TI V1TI])\n-\n ;; Iterator for the 2 32-bit vector types\n (define_mode_iterator VSX_W [V4SF V4SI])\n \n@@ -952,9 +949,9 @@\n ;; special V1TI container class, which it is not appropriate to use vec_select\n ;; for the type.\n (define_insn \"*vsx_le_permute_<mode>\"\n-  [(set (match_operand:VSX_TI 0 \"nonimmediate_operand\" \"=wa,wa,Z,&r,&r,Q\")\n-\t(rotate:VSX_TI\n-\t (match_operand:VSX_TI 1 \"input_operand\" \"wa,Z,wa,r,Q,r\")\n+  [(set (match_operand:VEC_TI 0 \"nonimmediate_operand\" \"=wa,wa,Z,&r,&r,Q\")\n+\t(rotate:VEC_TI\n+\t (match_operand:VEC_TI 1 \"input_operand\" \"wa,Z,wa,r,Q,r\")\n \t (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\"\n   \"@\n@@ -968,10 +965,10 @@\n    (set_attr \"type\" \"vecperm,vecload,vecstore,*,load,store\")])\n \n (define_insn_and_split \"*vsx_le_undo_permute_<mode>\"\n-  [(set (match_operand:VSX_TI 0 \"vsx_register_operand\" \"=wa,wa\")\n-\t(rotate:VSX_TI\n-\t (rotate:VSX_TI\n-\t  (match_operand:VSX_TI 1 \"vsx_register_operand\" \"0,wa\")\n+  [(set (match_operand:VEC_TI 0 \"vsx_register_operand\" \"=wa,wa\")\n+\t(rotate:VEC_TI\n+\t (rotate:VEC_TI\n+\t  (match_operand:VEC_TI 1 \"vsx_register_operand\" \"0,wa\")\n \t  (const_int 64))\n \t (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX\"\n@@ -1043,23 +1040,23 @@\n ;; Peepholes to catch loads and stores for TImode if TImode landed in\n ;; GPR registers on a little endian system.\n (define_peephole2\n-  [(set (match_operand:VSX_TI 0 \"int_reg_operand\")\n-\t(rotate:VSX_TI (match_operand:VSX_TI 1 \"memory_operand\")\n+  [(set (match_operand:VEC_TI 0 \"int_reg_operand\")\n+\t(rotate:VEC_TI (match_operand:VEC_TI 1 \"memory_operand\")\n \t\t       (const_int 64)))\n-   (set (match_operand:VSX_TI 2 \"int_reg_operand\")\n-\t(rotate:VSX_TI (match_dup 0)\n+   (set (match_operand:VEC_TI 2 \"int_reg_operand\")\n+\t(rotate:VEC_TI (match_dup 0)\n \t\t       (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n    && (rtx_equal_p (operands[0], operands[2])\n        || peep2_reg_dead_p (2, operands[0]))\"\n    [(set (match_dup 2) (match_dup 1))])\n \n (define_peephole2\n-  [(set (match_operand:VSX_TI 0 \"int_reg_operand\")\n-\t(rotate:VSX_TI (match_operand:VSX_TI 1 \"int_reg_operand\")\n+  [(set (match_operand:VEC_TI 0 \"int_reg_operand\")\n+\t(rotate:VEC_TI (match_operand:VEC_TI 1 \"int_reg_operand\")\n \t\t       (const_int 64)))\n-   (set (match_operand:VSX_TI 2 \"memory_operand\")\n-\t(rotate:VSX_TI (match_dup 0)\n+   (set (match_operand:VEC_TI 2 \"memory_operand\")\n+\t(rotate:VEC_TI (match_dup 0)\n \t\t       (const_int 64)))]\n   \"!BYTES_BIG_ENDIAN && TARGET_VSX && !TARGET_P9_VECTOR\n    && peep2_reg_dead_p (2, operands[0])\""}, {"sha": "9f7dbc6cc755e8c6f0857a2abdbfec3c58bd4fee", "filename": "gcc/testsuite/gcc.target/powerpc/int_128bit-runnable.c", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f170186446d03638cd82e37aa2a1bcf4dc1adba2/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fint_128bit-runnable.c?ref=f170186446d03638cd82e37aa2a1bcf4dc1adba2", "patch": "@@ -52,6 +52,18 @@ void print_i128(__int128_t val)\n \n void abort (void);\n \n+__attribute__((noinline))\n+__int128_t shift_right (__int128_t a, __uint128_t b)\n+{\n+  return a >> b;\n+}\n+\n+__attribute__((noinline))\n+__int128_t shift_left (__int128_t a, __uint128_t b)\n+{\n+  return a << b;\n+}\n+\n int main ()\n {\n   int i, result_int;\n@@ -102,7 +114,7 @@ int main ()\n #endif\n   }\n \n-  arg1 = 3;\n+  arg1 = vec_result[0];\n   uarg2 = 4;\n   expected_result = arg1*16;\n \n@@ -186,7 +198,7 @@ int main ()\n #endif\n   }\n \n-  arg1 = 48;\n+  arg1 = vec_uresult[0];\n   uarg2 = 4;\n   expected_result = arg1/16;\n "}]}