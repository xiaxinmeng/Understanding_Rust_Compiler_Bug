{"sha": "378a0f1840e6944d05ed1e374e514abe9564e91a", "node_id": "C_kwDOANBUbNoAKDM3OGEwZjE4NDBlNjk0NGQwNWVkMWUzNzRlNTE0YWJlOTU2NGU5MWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-15T20:20:47Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-15T20:20:47Z"}, "message": "libstdc++: Implement constexpr std::to_chars for C++23 (P2291R3)\n\nSome of the helper functions use static constexpr local variables, which\nis not permitted in a core constant expression. Removing the 'static'\nseems to have negligible performance effect for __to_chars and\n__to_chars_16. For __from_chars_alnum_to_val removing the 'static'\ncauses a significant performance impact for base 36 conversions. Use a\nconsteval lambda instead.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/charconv.h (__to_chars_10_impl): Add constexpr\n\tfor C++23. Remove 'static' from array.\n\t* include/std/charconv (__cpp_lib_constexpr_charconv): Define.\n\t(__to_chars, __to_chars_16): Remove 'static' from array, add\n\tconstexpr.\n\t(__to_chars_10, __to_chars_8, __to_chars_2, __to_chars_i)\n\t(to_chars, __raise_and_add, __from_chars_pow2_base)\n\t(__from_chars_alnum, from_chars): Add constexpr.\n\t(__from_chars_alnum_to_val): Avoid local static during constant\n\tevaluation. Add constexpr.\n\t* include/std/version (__cpp_lib_constexpr_charconv): Define.\n\t* testsuite/20_util/from_chars/constexpr.cc: New test.\n\t* testsuite/20_util/to_chars/constexpr.cc: New test.\n\t* testsuite/20_util/to_chars/version.cc: New test.", "tree": {"sha": "ae315fe2b41d8646d66af91f86ccb4bd58054983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae315fe2b41d8646d66af91f86ccb4bd58054983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/378a0f1840e6944d05ed1e374e514abe9564e91a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378a0f1840e6944d05ed1e374e514abe9564e91a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/378a0f1840e6944d05ed1e374e514abe9564e91a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/378a0f1840e6944d05ed1e374e514abe9564e91a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e24b430f1ea60205162fd9b327ac6a4dfc57f37c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e24b430f1ea60205162fd9b327ac6a4dfc57f37c"}], "stats": {"total": 291, "additions": 275, "deletions": 16}, "files": [{"sha": "d04aab776242f00f0a05ecacbbe864f4ee7db1b8", "filename": "libstdc++-v3/include/bits/charconv.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcharconv.h?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -68,13 +68,13 @@ namespace __detail\n   // The caller is required to provide a buffer of exactly the right size\n   // (which can be determined by the __to_chars_len function).\n   template<typename _Tp>\n-    void\n+    _GLIBCXX23_CONSTEXPR void\n     __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n       static_assert(is_unsigned<_Tp>::value, \"implementation bug\");\n \n-      static constexpr char __digits[201] =\n+      constexpr char __digits[201] =\n \t\"0001020304050607080910111213141516171819\"\n \t\"2021222324252627282930313233343536373839\"\n \t\"4041424344454647484950515253545556575859\""}, {"sha": "4b6cc83a567c06d0a835303c6e73b0e40ce114d7", "filename": "libstdc++-v3/include/std/charconv", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcharconv?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -50,6 +50,10 @@\n # define __cpp_lib_to_chars 201611L\n #endif\n \n+#if __cplusplus > 202002L\n+# define __cpp_lib_constexpr_charconv 202202L\n+#endif\n+\n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n@@ -119,7 +123,7 @@ namespace __detail\n \n   // Generic implementation for arbitrary bases.\n   template<typename _Tp>\n-    to_chars_result\n+    constexpr to_chars_result\n     __to_chars(char* __first, char* __last, _Tp __val, int __base) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -138,7 +142,7 @@ namespace __detail\n \n       unsigned __pos = __len - 1;\n \n-      static constexpr char __digits[] = {\n+      constexpr char __digits[] = {\n \t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n \t'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n \t'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n@@ -160,7 +164,7 @@ namespace __detail\n     }\n \n   template<typename _Tp>\n-    __integer_to_chars_result_type<_Tp>\n+    constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_16(char* __first, char* __last, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -177,7 +181,7 @@ namespace __detail\n \t  return __res;\n \t}\n \n-      static constexpr char __digits[] = {\n+      constexpr char __digits[] = {\n \t'0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n \t'a', 'b', 'c', 'd', 'e', 'f'\n       };\n@@ -207,7 +211,7 @@ namespace __detail\n     }\n \n   template<typename _Tp>\n-    inline __integer_to_chars_result_type<_Tp>\n+    constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_10(char* __first, char* __last, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -231,7 +235,7 @@ namespace __detail\n     }\n \n   template<typename _Tp>\n-    __integer_to_chars_result_type<_Tp>\n+    constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_8(char* __first, char* __last, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -285,7 +289,7 @@ namespace __detail\n     }\n \n   template<typename _Tp>\n-    __integer_to_chars_result_type<_Tp>\n+    constexpr __integer_to_chars_result_type<_Tp>\n     __to_chars_2(char* __first, char* __last, _Tp __val) noexcept\n     {\n       static_assert(is_integral<_Tp>::value, \"implementation bug\");\n@@ -322,7 +326,7 @@ namespace __detail\n } // namespace __detail\n \n   template<typename _Tp>\n-    __detail::__integer_to_chars_result_type<_Tp>\n+    constexpr __detail::__integer_to_chars_result_type<_Tp>\n     __to_chars_i(char* __first, char* __last, _Tp __value, int __base = 10)\n     {\n       __glibcxx_assert(2 <= __base && __base <= 36);\n@@ -361,7 +365,7 @@ namespace __detail\n     }\n \n #define _GLIBCXX_TO_CHARS(T) \\\n-  inline to_chars_result \\\n+  _GLIBCXX23_CONSTEXPR inline to_chars_result \\\n   to_chars(char* __first, char* __last, T __value, int __base = 10) \\\n   { return std::__to_chars_i<T>(__first, __last, __value, __base); }\n _GLIBCXX_TO_CHARS(char)\n@@ -400,7 +404,7 @@ _GLIBCXX_TO_CHARS(unsigned __GLIBCXX_TYPE_INT_N_3)\n namespace __detail\n {\n   template<typename _Tp>\n-    bool\n+    constexpr bool\n     __raise_and_add(_Tp& __val, int __base, unsigned char __c)\n     {\n       if (__builtin_mul_overflow(__val, __base, &__val)\n@@ -429,18 +433,27 @@ namespace __detail\n     return __table;\n   }\n \n+#if __cpp_lib_constexpr_charconv\n+  template<bool _DecOnly>\n+    inline constexpr auto __table = __from_chars_alnum_to_val_table();\n+#endif\n+\n   // If _DecOnly is true: if the character is a decimal digit, then\n   // return its corresponding base-10 value, otherwise return a value >= 127.\n   // If _DecOnly is false: if the character is an alphanumeric digit, then\n   // return its corresponding base-36 value, otherwise return a value >= 127.\n   template<bool _DecOnly = false>\n-    unsigned char\n+    _GLIBCXX23_CONSTEXPR unsigned char\n     __from_chars_alnum_to_val(unsigned char __c)\n     {\n       if _GLIBCXX17_CONSTEXPR (_DecOnly)\n \treturn static_cast<unsigned char>(__c - '0');\n       else\n \t{\n+#if __cpp_lib_constexpr_charconv\n+\t  if (std::__is_constant_evaluated())\n+\t    return __table<_DecOnly>.__data[__c];\n+#endif\n \t  // This initializer is deliberately made dependent in order to work\n \t  // around modules bug PR105322.\n \t  static constexpr auto __table = (_DecOnly, __from_chars_alnum_to_val_table());\n@@ -451,7 +464,7 @@ namespace __detail\n   /// std::from_chars implementation for integers in a power-of-two base.\n   /// If _DecOnly is true, then we may assume __base is at most 8.\n   template<bool _DecOnly, typename _Tp>\n-    bool\n+    _GLIBCXX23_CONSTEXPR bool\n     __from_chars_pow2_base(const char*& __first, const char* __last, _Tp& __val,\n \t\t\t   int __base)\n     {\n@@ -508,7 +521,7 @@ namespace __detail\n   /// std::from_chars implementation for integers in any base.\n   /// If _DecOnly is true, then we may assume __base is at most 10.\n   template<bool _DecOnly, typename _Tp>\n-    bool\n+    constexpr bool\n     __from_chars_alnum(const char*& __first, const char* __last, _Tp& __val,\n \t\t       int __base)\n     {\n@@ -548,7 +561,7 @@ namespace __detail\n \n   /// std::from_chars for integral types.\n   template<typename _Tp>\n-    __detail::__integer_from_chars_result_type<_Tp>\n+    _GLIBCXX23_CONSTEXPR __detail::__integer_from_chars_result_type<_Tp>\n     from_chars(const char* __first, const char* __last, _Tp& __value,\n \t       int __base = 10)\n     {"}, {"sha": "bec9e7aa7927162db502182099294a92be99ab14", "filename": "libstdc++-v3/include/std/version", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fversion?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -302,6 +302,7 @@\n #if __cplusplus > 202002L\n // c++23\n #define __cpp_lib_byteswap 202110L\n+#define __cpp_lib_constexpr_charconv 202202L\n #define __cpp_lib_constexpr_typeinfo 202106L\n #if __cpp_concepts >= 202002L\n # define __cpp_lib_expected 202202L"}, {"sha": "6e146947c1ffd3a4d96390d0d1913c1e89a37a0b", "filename": "libstdc++-v3/testsuite/20_util/from_chars/constexpr.cc", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Ffrom_chars%2Fconstexpr.cc?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -0,0 +1,57 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <charconv>\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test()\n+{\n+  const char str[] = \"-01234afz###\";\n+  const char* end = str + sizeof(str);\n+\n+  std::from_chars_result res;\n+  int ival = 99;\n+  unsigned uval = 99;\n+\n+  res = std::from_chars(str, str+1, ival, 10);\n+  VERIFY( res.ptr == str );\n+  VERIFY( res.ec == std::errc::invalid_argument );\n+  VERIFY( ival == 99 );\n+  res = std::from_chars(str, str+4, ival, 10);\n+  VERIFY( res.ptr == str+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( ival == -12 );\n+  res = std::from_chars(str, end, ival, 10);\n+  VERIFY( res.ptr == str+6 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( ival == -1234 );\n+\n+  res = std::from_chars(str, end, uval, 10);\n+  VERIFY( res.ptr == str );\n+  VERIFY( res.ec == std::errc::invalid_argument );\n+  VERIFY( uval == 99 );\n+  res = std::from_chars(str+1, end, uval, 10);\n+  VERIFY( res.ptr == str+6 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( uval == 1234 );\n+\n+  res = std::from_chars(str, end, ival, 3);\n+  VERIFY( res.ptr == str+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( ival == -5 );\n+\n+  res = std::from_chars(str, end, ival, 16);\n+  VERIFY( res.ptr == str+8 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( ival == -1193135 );\n+\n+  res = std::from_chars(str+1, end, uval, 36);\n+  VERIFY( res.ptr == str+1+8 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( uval == 2302953695 );\n+\n+  return true;\n+}\n+\n+static_assert( test() );"}, {"sha": "30c591659eeb72d3215bf9e1f92eb99f56be7af6", "filename": "libstdc++-v3/testsuite/20_util/to_chars/constexpr.cc", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fconstexpr.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fconstexpr.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fconstexpr.cc?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -0,0 +1,172 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do compile { target c++23 } }\n+\n+#include <charconv>\n+\n+#ifndef __cpp_lib_constexpr_charconv\n+# error \"Feature-test macro for constexpr charconv missing in <charconv>\"\n+#elif __cpp_lib_constexpr_charconv != 202202L\n+# error \"Feature-test macro for constexpr charconv has wrong value in <charconv>\"\n+#endif\n+\n+#include <testsuite_hooks.h>\n+\n+constexpr bool\n+test_base10()\n+{\n+  std::to_chars_result res;\n+  char buf[10] = \"XXXXXXXXX\";\n+  res = std::to_chars(buf, buf+3, 1234);\n+  VERIFY( res.ptr == buf+3 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+4, -1234);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+4, 1234);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '1' );\n+  VERIFY( buf[1] == '2' );\n+  VERIFY( buf[2] == '3' );\n+  VERIFY( buf[3] == '4' );\n+  VERIFY( buf[4] == 'X' );\n+  res = std::to_chars(buf, buf+10, -567, 10);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '-' );\n+  VERIFY( buf[1] == '5' );\n+  VERIFY( buf[2] == '6' );\n+  VERIFY( buf[3] == '7' );\n+  VERIFY( buf[4] == 'X' );\n+  return true;\n+}\n+\n+static_assert( test_base10() );\n+\n+constexpr bool\n+test_base16()\n+{\n+  std::to_chars_result res;\n+  char buf[10] = \"XXXXXXXXX\";\n+  res = std::to_chars(buf, buf+3, 0x1234, 16);\n+  VERIFY( res.ptr == buf+3 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+4, -0x1234, 16);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+4, 0x1234, 16);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '1' );\n+  VERIFY( buf[1] == '2' );\n+  VERIFY( buf[2] == '3' );\n+  VERIFY( buf[3] == '4' );\n+  VERIFY( buf[4] == 'X' );\n+  res = std::to_chars(buf, buf+10, -0x567, 16);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '-' );\n+  VERIFY( buf[1] == '5' );\n+  VERIFY( buf[2] == '6' );\n+  VERIFY( buf[3] == '7' );\n+  VERIFY( buf[5] == 'X' );\n+  return true;\n+}\n+\n+static_assert( test_base16() );\n+\n+constexpr bool\n+test_base8()\n+{\n+  std::to_chars_result res;\n+  char buf[10] = \"XXXXXXXXX\";\n+  res = std::to_chars(buf, buf+2, 01234, 8);\n+  VERIFY( res.ptr == buf+2 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+3, -01234, 8);\n+  VERIFY( res.ptr == buf+3 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+4, 01234, 8);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '1' );\n+  VERIFY( buf[1] == '2' );\n+  VERIFY( buf[2] == '3' );\n+  VERIFY( buf[3] == '4' );\n+  VERIFY( buf[4] == 'X' );\n+  res = std::to_chars(buf, buf+10, -0567, 8);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '-' );\n+  VERIFY( buf[1] == '5' );\n+  VERIFY( buf[2] == '6' );\n+  VERIFY( buf[3] == '7' );\n+  VERIFY( buf[4] == 'X' );\n+  return true;\n+}\n+\n+static_assert( test_base8() );\n+\n+constexpr bool\n+test_base2()\n+{\n+  std::to_chars_result res;\n+  char buf[10] = \"XXXXXXXXX\";\n+  res = std::to_chars(buf, buf+4, 0b10001, 2);\n+  VERIFY( res.ptr == buf+4 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+5, -0b10001, 2);\n+  VERIFY( res.ptr == buf+5 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+5, 0b10001, 2);\n+  VERIFY( res.ptr == buf+5 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '1' );\n+  VERIFY( buf[1] == '0' );\n+  VERIFY( buf[2] == '0' );\n+  VERIFY( buf[3] == '0' );\n+  VERIFY( buf[4] == '1' );\n+  VERIFY( buf[5] == 'X' );\n+  res = std::to_chars(buf, buf+10, -0b11011, 2);\n+  VERIFY( res.ptr == buf+6 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '-' );\n+  VERIFY( buf[1] == '1' );\n+  VERIFY( buf[2] == '1' );\n+  VERIFY( buf[3] == '0' );\n+  VERIFY( buf[4] == '1' );\n+  VERIFY( buf[5] == '1' );\n+  VERIFY( buf[6] == 'X' );\n+  return true;\n+}\n+\n+static_assert( test_base2() );\n+\n+constexpr bool\n+test_base36()\n+{\n+  std::to_chars_result res;\n+  char buf[10] = \"XXXXXXXXX\";\n+  res = std::to_chars(buf, buf+1, 1234, 36);\n+  VERIFY( res.ptr == buf+1 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+2, -1234, 36);\n+  VERIFY( res.ptr == buf+2 );\n+  VERIFY( res.ec == std::errc::value_too_large );\n+  res = std::to_chars(buf, buf+3, 1234, 36);\n+  VERIFY( res.ptr == buf+2 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == 'y' );\n+  VERIFY( buf[1] == 'a' );\n+  VERIFY( buf[3] == 'X' );\n+  res = std::to_chars(buf, buf+10, -567, 36);\n+  VERIFY( res.ptr == buf+3 );\n+  VERIFY( res.ec == std::errc{} );\n+  VERIFY( buf[0] == '-' );\n+  VERIFY( buf[1] == 'f' );\n+  VERIFY( buf[2] == 'r' );\n+  VERIFY( buf[4] == 'X' );\n+  return true;\n+}\n+\n+static_assert( test_base36() );"}, {"sha": "af06e1bf054e3a9930f2259b418a869accd96cfb", "filename": "libstdc++-v3/testsuite/20_util/to_chars/version.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fversion.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/378a0f1840e6944d05ed1e374e514abe9564e91a/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fversion.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fto_chars%2Fversion.cc?ref=378a0f1840e6944d05ed1e374e514abe9564e91a", "patch": "@@ -0,0 +1,16 @@\n+// { dg-options \"-std=gnu++23\" }\n+// { dg-do preprocess { target c++23 } }\n+\n+#include <version>\n+\n+#ifndef __cpp_lib_to_chars\n+# error \"Feature-test macro for to_chars missing in <version>\"\n+#elif __cpp_lib_to_chars != 201611L\n+# error \"Feature-test macro for to_chars has wrong value in <version>\"\n+#endif\n+\n+#ifndef __cpp_lib_constexpr_charconv\n+# error \"Feature-test macro for constexpr charconv missing in <version>\"\n+#elif __cpp_lib_constexpr_charconv != 202202L\n+# error \"Feature-test macro for constexpr charconv has wrong value in <version>\"\n+#endif"}]}