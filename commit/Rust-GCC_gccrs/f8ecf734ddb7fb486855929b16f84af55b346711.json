{"sha": "f8ecf734ddb7fb486855929b16f84af55b346711", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhlY2Y3MzRkZGI3ZmI0ODY4NTU5MjliMTZmODRhZjU1YjM0NjcxMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-20T15:13:58Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-20T15:13:58Z"}, "message": "tree-ssa-forwprop.c (remove_prop_source_from_use): Robustify against already removed statements.\n\n2011-07-20  Richard Guenther  <rguenther@suse.de>\n\n\t* tree-ssa-forwprop.c (remove_prop_source_from_use): Robustify\n\tagainst already removed statements.\n\t(forward_propagate_into_comparison): Remove dead defining stmts.\n\t(forward_propagate_into_gimple_cond): Likewise.\n\t(forward_propagate_into_cond): Simplify.\n\t(ssa_forward_propagate_and_combine): Handle changed cfg from\n\tforward_propagate_into_comparison.\n\t* tree-ssa-phiopt.c (conditional_replacement): Use proper\n\tlocations for newly built statements.\n\nFrom-SVN: r176517", "tree": {"sha": "df2efba10f223dffa23f77c1e089f1043a930599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/df2efba10f223dffa23f77c1e089f1043a930599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8ecf734ddb7fb486855929b16f84af55b346711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ecf734ddb7fb486855929b16f84af55b346711", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8ecf734ddb7fb486855929b16f84af55b346711", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8ecf734ddb7fb486855929b16f84af55b346711/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "73451ae7855681759cde520c001171d9d1bede96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73451ae7855681759cde520c001171d9d1bede96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73451ae7855681759cde520c001171d9d1bede96"}], "stats": {"total": 85, "additions": 52, "deletions": 33}, "files": [{"sha": "2df70f0aba5761e0d21d1549c83f357022a809f2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8ecf734ddb7fb486855929b16f84af55b346711", "patch": "@@ -1,3 +1,15 @@\n+2011-07-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree-ssa-forwprop.c (remove_prop_source_from_use): Robustify\n+\tagainst already removed statements.\n+\t(forward_propagate_into_comparison): Remove dead defining stmts.\n+\t(forward_propagate_into_gimple_cond): Likewise.\n+\t(forward_propagate_into_cond): Simplify.\n+\t(ssa_forward_propagate_and_combine): Handle changed cfg from\n+\tforward_propagate_into_comparison.\n+\t* tree-ssa-phiopt.c (conditional_replacement): Use proper\n+\tlocations for newly built statements.\n+\n 2011-07-20  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* config/avr/avr.c (avr_rtx_costs): Set cost of SYMBOL_REF to 0."}, {"sha": "5d04fc32ce4f75ddfcf820338152410d215c2b3f", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=f8ecf734ddb7fb486855929b16f84af55b346711", "patch": "@@ -313,8 +313,10 @@ remove_prop_source_from_use (tree name)\n       return cfg_changed;\n \n     stmt = SSA_NAME_DEF_STMT (name);\n-    gsi = gsi_for_stmt (stmt);\n     bb = gimple_bb (stmt);\n+    if (!bb)\n+      return cfg_changed;\n+    gsi = gsi_for_stmt (stmt);\n     release_defs (stmt);\n     gsi_remove (&gsi, true);\n     cfg_changed |= gimple_purge_dead_eh_edges (bb);\n@@ -437,29 +439,36 @@ forward_propagate_into_comparison_1 (location_t loc,\n \n /* Propagate from the ssa name definition statements of the assignment\n    from a comparison at *GSI into the conditional if that simplifies it.\n-   Returns true if the stmt was modified, false if not.  */\n+   Returns 1 if the stmt was modified and 2 if the CFG needs cleanup,\n+   otherwise returns 0.  */\n \n-static bool\n+static int \n forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n {\n   gimple stmt = gsi_stmt (*gsi);\n   tree tmp;\n+  bool cfg_changed = false;\n+  tree rhs1 = gimple_assign_rhs1 (stmt);\n+  tree rhs2 = gimple_assign_rhs2 (stmt);\n \n   /* Combine the comparison with defining statements.  */\n   tmp = forward_propagate_into_comparison_1 (gimple_location (stmt),\n \t\t\t\t\t     gimple_assign_rhs_code (stmt),\n \t\t\t\t\t     TREE_TYPE\n \t\t\t\t\t       (gimple_assign_lhs (stmt)),\n-\t\t\t\t\t     gimple_assign_rhs1 (stmt),\n-\t\t\t\t\t     gimple_assign_rhs2 (stmt));\n+\t\t\t\t\t     rhs1, rhs2);\n   if (tmp)\n     {\n       gimple_assign_set_rhs_from_tree (gsi, tmp);\n       update_stmt (stmt);\n-      return true;\n+      if (TREE_CODE (rhs1) == SSA_NAME)\n+\tcfg_changed |= remove_prop_source_from_use (rhs1);\n+      if (TREE_CODE (rhs2) == SSA_NAME)\n+\tcfg_changed |= remove_prop_source_from_use (rhs2);\n+      return cfg_changed ? 2 : 1;\n     }\n \n-  return false;\n+  return 0;\n }\n \n /* Propagate from the ssa name definition statements of COND_EXPR\n@@ -472,29 +481,26 @@ forward_propagate_into_comparison (gimple_stmt_iterator *gsi)\n static int\n forward_propagate_into_gimple_cond (gimple stmt)\n {\n-  int did_something = 0;\n   location_t loc = gimple_location (stmt);\n   tree tmp;\n   enum tree_code code = gimple_cond_code (stmt);\n+  bool cfg_changed = false;\n+  tree rhs1 = gimple_cond_lhs (stmt);\n+  tree rhs2 = gimple_cond_rhs (stmt);\n \n   /* We can do tree combining on SSA_NAME and comparison expressions.  */\n   if (TREE_CODE_CLASS (gimple_cond_code (stmt)) != tcc_comparison)\n     return 0;\n \n   tmp = forward_propagate_into_comparison_1 (loc, code,\n \t\t\t\t\t     boolean_type_node,\n-\t\t\t\t\t     gimple_cond_lhs (stmt),\n-\t\t\t\t\t     gimple_cond_rhs (stmt));\n+\t\t\t\t\t     rhs1, rhs2);\n   if (tmp)\n     {\n       if (dump_file && tmp)\n \t{\n-\t  tree cond = build2 (gimple_cond_code (stmt),\n-\t\t\t      boolean_type_node,\n-\t\t\t      gimple_cond_lhs (stmt),\n-\t\t\t      gimple_cond_rhs (stmt));\n \t  fprintf (dump_file, \"  Replaced '\");\n-\t  print_generic_expr (dump_file, cond, 0);\n+\t  print_gimple_expr (dump_file, stmt, 0, 0);\n \t  fprintf (dump_file, \"' with '\");\n \t  print_generic_expr (dump_file, tmp, 0);\n \t  fprintf (dump_file, \"'\\n\");\n@@ -503,14 +509,14 @@ forward_propagate_into_gimple_cond (gimple stmt)\n       gimple_cond_set_condition_from_tree (stmt, unshare_expr (tmp));\n       update_stmt (stmt);\n \n-      /* Remove defining statements.  */\n-      if (is_gimple_min_invariant (tmp))\n-\tdid_something = 2;\n-      else if (did_something == 0)\n-\tdid_something = 1;\n+      if (TREE_CODE (rhs1) == SSA_NAME)\n+\tcfg_changed |= remove_prop_source_from_use (rhs1);\n+      if (TREE_CODE (rhs2) == SSA_NAME)\n+\tcfg_changed |= remove_prop_source_from_use (rhs2);\n+      return (cfg_changed || is_gimple_min_invariant (tmp)) ? 2 : 1;\n     }\n \n-  return did_something;\n+  return 0;\n }\n \n \n@@ -526,7 +532,6 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n {\n   gimple stmt = gsi_stmt (*gsi_p);\n   location_t loc = gimple_location (stmt);\n-  int did_something = 0;\n   tree tmp = NULL_TREE;\n   tree cond = gimple_assign_rhs1 (stmt);\n \n@@ -541,7 +546,7 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       tree name = cond, rhs0;\n       gimple def_stmt = get_prop_source_stmt (name, true, NULL);\n       if (!def_stmt || !can_propagate_from (def_stmt))\n-\treturn did_something;\n+\treturn 0;\n \n       rhs0 = gimple_assign_rhs1 (def_stmt);\n       tmp = combine_cond_expr_cond (loc, NE_EXPR, boolean_type_node, rhs0,\n@@ -564,14 +569,10 @@ forward_propagate_into_cond (gimple_stmt_iterator *gsi_p)\n       stmt = gsi_stmt (*gsi_p);\n       update_stmt (stmt);\n \n-      /* Remove defining statements.  */\n-      if (is_gimple_min_invariant (tmp))\n-\tdid_something = 2;\n-      else if (did_something == 0)\n-\tdid_something = 1;\n+      return is_gimple_min_invariant (tmp) ? 2 : 1;\n     }\n \n-  return did_something;\n+  return 0;\n }\n \n /* We've just substituted an ADDR_EXPR into stmt.  Update all the\n@@ -2441,11 +2442,15 @@ ssa_forward_propagate_and_combine (void)\n \t\telse if (TREE_CODE_CLASS (code) == tcc_comparison)\n \t\t  {\n \t\t    bool no_warning = gimple_no_warning_p (stmt);\n+\t\t    int did_something;\n \t\t    fold_defer_overflow_warnings ();\n-\t\t    changed = forward_propagate_into_comparison (&gsi);\n+\t\t    did_something = forward_propagate_into_comparison (&gsi);\n+\t\t    if (did_something == 2)\n+\t\t      cfg_changed = true;\n \t\t    fold_undefer_overflow_warnings\n \t\t\t(!no_warning && changed,\n \t\t\t stmt, WARN_STRICT_OVERFLOW_CONDITIONAL);\n+\t\t    changed = did_something != 0;\n \t\t  }\n \t\telse if (code == BIT_AND_EXPR\n \t\t\t || code == BIT_IOR_EXPR"}, {"sha": "ed8f9795e788fa65c70659de6229886162e070fe", "filename": "gcc/tree-ssa-phiopt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2Ftree-ssa-phiopt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8ecf734ddb7fb486855929b16f84af55b346711/gcc%2Ftree-ssa-phiopt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-phiopt.c?ref=f8ecf734ddb7fb486855929b16f84af55b346711", "patch": "@@ -544,8 +544,9 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n   /* To handle special cases like floating point comparison, it is easier and\n      less error-prone to build a tree and gimplify it on the fly though it is\n      less efficient.  */\n-  cond = fold_build2 (gimple_cond_code (stmt), boolean_type_node,\n-\t\t      gimple_cond_lhs (stmt), gimple_cond_rhs (stmt));\n+  cond = fold_build2_loc (gimple_location (stmt),\n+\t\t\t  gimple_cond_code (stmt), boolean_type_node,\n+\t\t\t  gimple_cond_lhs (stmt), gimple_cond_rhs (stmt));\n \n   /* We need to know which is the true edge and which is the false\n      edge so that we know when to invert the condition below.  */\n@@ -554,7 +555,8 @@ conditional_replacement (basic_block cond_bb, basic_block middle_bb,\n       || (e0 == false_edge && integer_onep (arg0))\n       || (e1 == true_edge && integer_zerop (arg1))\n       || (e1 == false_edge && integer_onep (arg1)))\n-    cond = fold_build1 (TRUTH_NOT_EXPR, TREE_TYPE (cond), cond);\n+    cond = fold_build1_loc (gimple_location (stmt),\n+\t\t\t    TRUTH_NOT_EXPR, TREE_TYPE (cond), cond);\n \n   /* Insert our new statements at the end of conditional block before the\n      COND_STMT.  */"}]}