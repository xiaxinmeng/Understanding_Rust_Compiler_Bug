{"sha": "e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU5MDFjYWQzZjQyYjY5Y2JlNzMxMmRiN2M5YWZkM2Q1OTA4YmNlZg==", "commit": {"author": {"name": "Ollie Wild", "email": "aaw@google.com", "date": "2007-09-23T20:05:40Z"}, "committer": {"name": "Ollie Wild", "email": "aaw@gcc.gnu.org", "date": "2007-09-23T20:05:40Z"}, "message": "fold-const.c (fold_binary): Fold BIT_AND_EXPR's with a pointer operand.\n\n\tgcc/\n\tfold-const.c (fold_binary): Fold BIT_AND_EXPR's with a pointer operand.\n\t(get_pointer_modulus_and_residue): New function.\n\n\tgcc/testsuite/\n\tgcc.dg/fold-bitand-1.c: New test.\n\tgcc.dg/fold-bitand-2.c: New test.\n\tgcc.dg/fold-bitand-3.c: New test.\n\tgcc.dg/fold-bitand-4.c: New test.\n\nFrom-SVN: r128701", "tree": {"sha": "2d3fd9b7aeae8ab84d172e1ceed387e1e4e97364", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d3fd9b7aeae8ab84d172e1ceed387e1e4e97364"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/comments", "author": {"login": "olliewild", "id": 11523068, "node_id": "MDQ6VXNlcjExNTIzMDY4", "avatar_url": "https://avatars.githubusercontent.com/u/11523068?v=4", "gravatar_id": "", "url": "https://api.github.com/users/olliewild", "html_url": "https://github.com/olliewild", "followers_url": "https://api.github.com/users/olliewild/followers", "following_url": "https://api.github.com/users/olliewild/following{/other_user}", "gists_url": "https://api.github.com/users/olliewild/gists{/gist_id}", "starred_url": "https://api.github.com/users/olliewild/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/olliewild/subscriptions", "organizations_url": "https://api.github.com/users/olliewild/orgs", "repos_url": "https://api.github.com/users/olliewild/repos", "events_url": "https://api.github.com/users/olliewild/events{/privacy}", "received_events_url": "https://api.github.com/users/olliewild/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50b73fcde42694209997f01f9985dc5928a86fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b73fcde42694209997f01f9985dc5928a86fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b73fcde42694209997f01f9985dc5928a86fca"}], "stats": {"total": 265, "additions": 265, "deletions": 0}, "files": [{"sha": "b510bddf42914894d273facda161f93f8f94ef94", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -1,3 +1,8 @@\n+2007-09-23  Ollie Wild  <aaw@google.com>\n+\n+\tfold-const.c (fold_binary): Fold BIT_AND_EXPR's with a pointer operand.\n+\t(get_pointer_modulus_and_residue): New function.\n+\n 2007-09-23  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* config/mips/mips.c (build_mips16_call_stub): On 64-bit targets,"}, {"sha": "12413d833d00cd0f3ecf996345011cfd547de2eb", "filename": "gcc/fold-const.c", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -9384,6 +9384,97 @@ fold_mult_zconjz (tree type, tree expr)\n }\n \n \n+/* Subroutine of fold_binary.  If P is the value of EXPR, computes\n+   power-of-two M and (arbitrary) N such that M divides (P-N).  This condition\n+   guarantees that P and N have the same least significant log2(M) bits.\n+   N is not otherwise constrained.  In particular, N is not normalized to\n+   0 <= N < M as is common.  In general, the precise value of P is unknown.\n+   M is chosen as large as possible such that constant N can be determined.\n+\n+   Returns M and sets *RESIDUE to N.  */\n+\n+static unsigned HOST_WIDE_INT\n+get_pointer_modulus_and_residue (tree expr, unsigned HOST_WIDE_INT *residue)\n+{\n+  enum tree_code code;\n+\n+  *residue = 0;\n+\n+  code = TREE_CODE (expr);\n+  if (code == ADDR_EXPR)\n+    {\n+      expr = TREE_OPERAND (expr, 0);\n+      if (handled_component_p (expr))\n+\t{\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  tree offset;\n+\t  enum machine_mode mode;\n+\t  int unsignedp, volatilep;\n+\n+\t  expr = get_inner_reference (expr, &bitsize, &bitpos, &offset,\n+\t\t\t\t      &mode, &unsignedp, &volatilep, false);\n+\t  *residue = bitpos / BITS_PER_UNIT;\n+\t  if (offset)\n+\t    {\n+\t      if (TREE_CODE (offset) == INTEGER_CST)\n+\t\t*residue += TREE_INT_CST_LOW (offset);\n+\t      else\n+\t\t/* We don't handle more complicated offset expressions.  */\n+\t\treturn 1;\n+\t    }\n+\t}\n+\n+      if (DECL_P (expr))\n+\treturn DECL_ALIGN_UNIT (expr);\n+    }\n+  else if (code == POINTER_PLUS_EXPR)\n+    {\n+      tree op0, op1;\n+      unsigned HOST_WIDE_INT modulus;\n+      enum tree_code inner_code;\n+      \n+      op0 = TREE_OPERAND (expr, 0);\n+      STRIP_NOPS (op0);\n+      modulus = get_pointer_modulus_and_residue (op0, residue);\n+\n+      op1 = TREE_OPERAND (expr, 1);\n+      STRIP_NOPS (op1);\n+      inner_code = TREE_CODE (op1);\n+      if (inner_code == INTEGER_CST)\n+\t{\n+\t  *residue += TREE_INT_CST_LOW (op1);\n+\t  return modulus;\n+\t}\n+      else if (inner_code == MULT_EXPR)\n+\t{\n+\t  op1 = TREE_OPERAND (op1, 1);\n+\t  if (TREE_CODE (op1) == INTEGER_CST)\n+\t    {\n+\t      unsigned HOST_WIDE_INT align;\n+\t      \n+\t      /* Compute the greatest power-of-2 divisor of op1.  */\n+\t      align = TREE_INT_CST_LOW (op1);\n+\t      align &= -align;\n+\n+\t      /* If align is non-zero and less than *modulus, replace\n+\t\t *modulus with align., If align is 0, then either op1 is 0\n+\t\t or the greatest power-of-2 divisor of op1 doesn't fit in an\n+\t\t unsigned HOST_WIDE_INT.  In either case, no additional\n+\t\t constraint is imposed.  */\n+\t      if (align)\n+\t\tmodulus = MIN (modulus, align);\n+\n+\t      return modulus;\n+\t    }\n+\t}\n+    }\n+\n+    /* If we get here, we were unable to determine anything useful about the\n+       expression.  */\n+    return 1;\n+}\n+\n+\n /* Fold a binary expression of code CODE and type TYPE with operands\n    OP0 and OP1.  Return the folded expression if folding is\n    successful.  Otherwise, return NULL_TREE.  */\n@@ -10915,6 +11006,23 @@ fold_binary (enum tree_code code, tree type, tree op0, tree op1)\n \t\t\t\t      TREE_OPERAND (arg1, 0)));\n \t}\n \n+      /* If arg0 is derived from the address of an object or function, we may\n+\t be able to fold this expression using the object or function's\n+\t alignment.  */\n+      if (POINTER_TYPE_P (TREE_TYPE (arg0)) && host_integerp (arg1, 1))\n+\t{\n+\t  unsigned HOST_WIDE_INT modulus, residue;\n+\t  unsigned HOST_WIDE_INT low = TREE_INT_CST_LOW (arg1);\n+\n+\t  modulus = get_pointer_modulus_and_residue (arg0, &residue);\n+\n+\t  /* This works because modulus is a power of 2.  If this weren't the\n+\t     case, we'd have to replace it by its greatest power-of-2\n+\t     divisor: modulus & -modulus.  */\n+\t  if (low < modulus)\n+\t    return build_int_cst (type, residue & low);\n+\t}\n+\n       goto associate;\n \n     case RDIV_EXPR:"}, {"sha": "76fa88681c160fac4fae2db3607a1977fc9ad9b2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -1,3 +1,10 @@\n+2007-09-23  Ollie Wild  <aaw@google.com>\n+\n+\tgcc.dg/fold-bitand-1.c: New test.\n+\tgcc.dg/fold-bitand-2.c: New test.\n+\tgcc.dg/fold-bitand-3.c: New test.\n+\tgcc.dg/fold-bitand-4.c: New test.\n+\n 2007-09-23  Richard Sandiford  <rsandifo@nildram.co.uk>\n \n \t* gcc.target/mips/gcc-have-sync-compare-and-swap-1.c: Don't expect"}, {"sha": "413ed67d2391c8f481b8b6253b6a8f4e4fed1740", "filename": "gcc/testsuite/gcc.dg/fold-bitand-1.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-1.c?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+char c1 __attribute__ ((aligned (1)));\n+char c2 __attribute__ ((aligned (2)));\n+char c4 __attribute__ ((aligned (4)));\n+char c8 __attribute__ ((aligned (8)));\n+\n+unsigned f1(void)\n+{\n+  return 3 & (__SIZE_TYPE__)&c1;\n+}\n+\n+unsigned f2(void)\n+{\n+  return 3 & (__SIZE_TYPE__)&c2;\n+}\n+\n+unsigned f3(void)\n+{\n+  return 3 & (__SIZE_TYPE__)&c4;\n+}\n+\n+unsigned f4(void)\n+{\n+  return 3 & (__SIZE_TYPE__)&c8;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\&c1 \\& 3\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\&c2 \\& 3\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\&c4 \\& 3\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\&c8 \\& 3\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 2 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "de2e67449b1fe25ce22978659f4c71af738652cc", "filename": "gcc/testsuite/gcc.dg/fold-bitand-2.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-2.c?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -0,0 +1,42 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+struct {\n+  char c1;\n+  char c2;\n+  char c3;\n+  char c4;\n+} s __attribute__ ((aligned (4)));\n+\n+unsigned f1 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&s.c1;\n+}\n+\n+unsigned f2 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&s.c2;\n+}\n+\n+unsigned f3 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&s.c3;\n+}\n+\n+unsigned f4 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&s.c4;\n+}\n+\n+unsigned f5 (void)\n+{\n+  return 4 & (__SIZE_TYPE__)&s.c1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\& 3\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\& 4\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 2\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 3\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "43d765bbf2e7f6ae247f68b745ca86bf0d4dc372", "filename": "gcc/testsuite/gcc.dg/fold-bitand-3.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-3.c?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+char c[4] __attribute__ ((aligned (4)));\n+\n+struct S {\n+  char c1;\n+  char c2;\n+  char c3;\n+  char c4;\n+};\n+\n+int f1 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&c[1];\n+}\n+\n+int f2 (void)\n+{\n+  return 3 & (__SIZE_TYPE__)&((struct S *)&c)->c2;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"\\& 3\" 0 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 1\" 2 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}, {"sha": "7d824260ff0749d69bb6d80026da43515cbfda48", "filename": "gcc/testsuite/gcc.dg/fold-bitand-4.c", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5901cad3f42b69cbe7312db7c9afd3d5908bcef/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ffold-bitand-4.c?ref=e5901cad3f42b69cbe7312db7c9afd3d5908bcef", "patch": "@@ -0,0 +1,44 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fdump-tree-original\" } */\n+\n+typedef char char4[4] __attribute__ ((aligned (4)));\n+char4 c4[4] __attribute__ ((aligned (16)));\n+\n+typedef char char16[16] __attribute__ ((aligned (16)));\n+char16 c16[4] __attribute__ ((aligned (4)));\n+\n+int f1 (void)\n+{\n+  /* 12 */\n+  return 15 & (__SIZE_TYPE__)&c4[3];\n+}\n+\n+int f2 (int i)\n+{\n+  /* Indeterminate */\n+  return 15 & (__SIZE_TYPE__)&c4[i];\n+}\n+\n+int f3 (int i)\n+{\n+  /* 0 */\n+  return 3 & (__SIZE_TYPE__)&c4[i];\n+}\n+\n+int f4 (int i)\n+{\n+  /* Indeterminate */\n+  return 7 & (__SIZE_TYPE__)&c16[i];\n+}\n+\n+int f5 (int i)\n+{\n+  /* 0 */\n+  return 3 & (__SIZE_TYPE__)&c16[i];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"return 12\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\& 15\" 1 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"return 0\" 2 \"original\" } } */\n+/* { dg-final { scan-tree-dump-times \"\\& 7\" 1 \"original\" } } */\n+/* { dg-final { cleanup-tree-dump \"original\" } } */"}]}