{"sha": "5633b37c1bba472243075b894adb9a83053f4d35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYzM2IzN2MxYmJhNDcyMjQzMDc1Yjg5NGFkYjlhODMwNTNmNGQzNQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2002-10-30T00:05:36Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2002-10-30T00:05:36Z"}, "message": "re PR c++/8287 (GCC3.2: Destructor called for non-constructed local object)\n\n\tPR c++/8287\n\t* decl.c (finish_destructor_body): Create the label to jump to\n\twhen returning from a destructor here.\n\t(finish_function_body): Rather than here.\n\n\tPR c++/8287\n\t* g++.dg/init/dtor2.C: New test.\n\nFrom-SVN: r58643", "tree": {"sha": "6f208f2cba1ad94d262e56bc5066244dc0d06596", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6f208f2cba1ad94d262e56bc5066244dc0d06596"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5633b37c1bba472243075b894adb9a83053f4d35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5633b37c1bba472243075b894adb9a83053f4d35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5633b37c1bba472243075b894adb9a83053f4d35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5633b37c1bba472243075b894adb9a83053f4d35/comments", "author": null, "committer": null, "parents": [{"sha": "7deae97af8e8690f1f2af9a1466f5dd6c0f0afa3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7deae97af8e8690f1f2af9a1466f5dd6c0f0afa3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7deae97af8e8690f1f2af9a1466f5dd6c0f0afa3"}], "stats": {"total": 48, "additions": 40, "deletions": 8}, "files": [{"sha": "dba4a0d0237b4cabbd45a8e9269cf03c816551ba", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5633b37c1bba472243075b894adb9a83053f4d35", "patch": "@@ -1,3 +1,10 @@\n+2002-10-29  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/8287\n+\t* decl.c (finish_destructor_body): Create the label to jump to\n+\twhen returning from a destructor here.\n+\t(finish_function_body): Rather than here.\n+\n 2002-10-25  Zack Weinberg  <zack@codesourcery.com>\n \n \tPR c++/7266"}, {"sha": "f42c8d3fdabc89545e34a8201b3bc94689adcefd", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5633b37c1bba472243075b894adb9a83053f4d35", "patch": "@@ -14275,6 +14275,10 @@ finish_destructor_body ()\n {\n   tree exprstmt;\n \n+  /* Any return from a destructor will end up here; that way all base\n+     and member cleanups will be run when the function returns.  */\n+  add_stmt (build_stmt (LABEL_STMT, dtor_label));\n+\n   /* In a virtual destructor, we must call delete.  */\n   if (DECL_VIRTUAL_P (current_function_decl))\n     {\n@@ -14347,14 +14351,7 @@ void\n finish_function_body (compstmt)\n      tree compstmt;\n {\n-  if (processing_template_decl)\n-    /* Do nothing now.  */;\n-  else if (DECL_DESTRUCTOR_P (current_function_decl))\n-    /* Any return from a destructor will end up here.  Put it before the\n-       cleanups so that an explicit return doesn't duplicate them.  */\n-    add_stmt (build_stmt (LABEL_STMT, dtor_label));\n-\n-  /* Close the block; in a destructor, run the member cleanups.  */\n+  /* Close the block.  */\n   finish_compound_stmt (0, compstmt);\n \n   if (processing_template_decl)"}, {"sha": "56c7cac914dc7a6911667d73d1559eb883e3e675", "filename": "gcc/testsuite/g++.dg/init/dtor2.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdtor2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5633b37c1bba472243075b894adb9a83053f4d35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdtor2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fdtor2.C?ref=5633b37c1bba472243075b894adb9a83053f4d35", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+\n+extern \"C\" void abort ();\n+\n+struct A\n+{\n+  ~A();\n+};\n+\n+A::~A () {\n+  abort ();\n+}\n+\n+struct B\n+{\n+  ~B();\n+};\n+\n+B::~B () {\n+  if(true) return;\n+  A a;\n+}\n+\n+int main()\n+{\n+  B b;\n+  return 0;\n+}"}]}