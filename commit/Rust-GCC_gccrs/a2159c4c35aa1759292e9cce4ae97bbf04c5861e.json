{"sha": "a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxNTljNGMzNWFhMTc1OTI5MmU5Y2NlNGFlOTdiYmYwNGM1ODYxZQ==", "commit": {"author": {"name": "Devang Patel", "email": "dpatel@apple.com", "date": "2004-09-24T17:11:56Z"}, "committer": {"name": "Devang Patel", "email": "dpatel@gcc.gnu.org", "date": "2004-09-24T17:11:56Z"}, "message": "tree-if-conv.c (tree_if_convert_cond_expr0): Create temp.\n\n       * tree-if-conv.c (tree_if_convert_cond_expr0: Create temp. variable\n       only when necesssary.\n       (combine_blocks): Combine loop header and exit block.\n\nFrom-SVN: r88062", "tree": {"sha": "c73aa776c9780b202e04b053a71f9124e3e948f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c73aa776c9780b202e04b053a71f9124e3e948f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2159c4c35aa1759292e9cce4ae97bbf04c5861e/comments", "author": null, "committer": null, "parents": [{"sha": "c0c07d7b821d9010b77358135290aeaa24c48c6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0c07d7b821d9010b77358135290aeaa24c48c6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0c07d7b821d9010b77358135290aeaa24c48c6c"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "af1d69f58ed1d8b45438b539969eb8ecd060c2ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2159c4c35aa1759292e9cce4ae97bbf04c5861e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2159c4c35aa1759292e9cce4ae97bbf04c5861e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Devang Patel  <dpatel@apple.com>\n+\n+\t* tree-if-conv.c (tree_if_convert_cond_expr0: Create temp. variable\n+\tonly when necesssary.\n+\t(combine_blocks): Combine loop header and exit block.\n+\t\n 2004-09-24  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* hooks.c (hook_tree_tree_bool_null): New."}, {"sha": "3ee16739cf8fcadbf16282f8f6d0bbce76f5a7a0", "filename": "gcc/tree-if-conv.c", "status": "modified", "additions": 25, "deletions": 10, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2159c4c35aa1759292e9cce4ae97bbf04c5861e/gcc%2Ftree-if-conv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2159c4c35aa1759292e9cce4ae97bbf04c5861e/gcc%2Ftree-if-conv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-if-conv.c?ref=a2159c4c35aa1759292e9cce4ae97bbf04c5861e", "patch": "@@ -281,7 +281,7 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n   else_clause = TREE_OPERAND (stmt, 2);\n \n   /* Create temp. for condition.  */\n-  if (!is_gimple_reg (c))\n+  if (!is_gimple_condexpr (c))\n     {\n       tree new_stmt;\n       new_stmt = ifc_temp_var (TREE_TYPE (c), unshare_expr (c));\n@@ -292,14 +292,22 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n   /* Add new condition into destination's predicate list.  */\n   if (then_clause)\n     /* if 'c' is true then then_clause is reached.  */\n-    new_cond = add_to_dst_predicate_list (loop, then_clause, cond, c, bsi);\n+    new_cond = add_to_dst_predicate_list (loop, then_clause, cond, \n+\t\t\t\t\t  unshare_expr (c), bsi);\n \n   if (else_clause)\n     {\n+      tree c2;\n+      if (!is_gimple_reg(c) && is_gimple_condexpr (c))\n+\t{\n+\t  tree new_stmt;\n+\t  new_stmt = ifc_temp_var (TREE_TYPE (c), unshare_expr (c));\n+\t  bsi_insert_before (bsi, new_stmt, BSI_SAME_STMT);\n+\t  c = TREE_OPERAND (new_stmt, 0);\n+\t}\n+\n       /* if 'c' is false then else_clause is reached.  */\n-      tree c2 = build1 (TRUTH_NOT_EXPR,\n-\t\t\tboolean_type_node,\n-\t\t\tunshare_expr (c));\n+      c2 = invert_truthvalue (unshare_expr (c));\n       add_to_dst_predicate_list (loop, else_clause, cond, c2, bsi);\n     }\n \n@@ -311,11 +319,6 @@ tree_if_convert_cond_expr (struct loop *loop, tree stmt, tree cond,\n       bsi_remove (bsi);\n       cond = NULL_TREE;\n     }\n-  else if (new_cond != NULL_TREE)\n-    {\n-      TREE_OPERAND (stmt, 0) = new_cond;\n-      modify_stmt (stmt);\n-    }\n   return;\n }\n \n@@ -917,6 +920,18 @@ combine_blocks (struct loop *loop)\n       remove_bb_from_loops (bb);\n       expunge_block (bb);\n     }\n+\n+  /* Now if possible, merge loop header and block with exit edge.\n+     This reduces number of basic blocks to 2. Auto vectorizer addresses\n+     loops with two nodes only.  FIXME: Use cleanup_tree_cfg().  */\n+  if (exit_bb != loop->latch && empty_block_p (loop->latch))\n+    {\n+      if (can_merge_blocks_p (loop->header, exit_bb))\n+\t{\n+\t  remove_bb_from_loops (exit_bb);\n+\t  merge_blocks (loop->header, exit_bb);\n+\t}\n+    }\n }\n \n /* Make new  temp variable of type TYPE. Add MODIFY_EXPR to assign EXP"}]}