{"sha": "e70359b3de997b4c582345ab7da8cccb253cc6d9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTcwMzU5YjNkZTk5N2I0YzU4MjM0NWFiN2RhOGNjY2IyNTNjYzZkOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-20T19:34:53Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-20T19:34:53Z"}, "message": "PR libstdc++/70966 make pmr::new_delete_resource() immortal\n\nConstruct the program-wide resource objects using placement new. This\nmeans they have dynamic storage duration and won't be destroyed during\ntermination.\n\n\tPR libstdc++/70966\n\t* include/experimental/memory_resource (__resource_adaptor_imp): Add\n\tstatic assertions to enforce requirements on pointer types.\n\t(__resource_adaptor_imp::get_allocator()): Add noexcept.\n\t(new_delete_resource, null_memory_resource): Return address of an\n\tobject with dynamic storage duration.\n\t(__null_memory_resource): Remove.\n\t* testsuite/experimental/memory_resource/70966.cc: New.\n\nFrom-SVN: r261818", "tree": {"sha": "48fbab8f2d64a4655d84cfcf5ba470a5926751bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48fbab8f2d64a4655d84cfcf5ba470a5926751bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e70359b3de997b4c582345ab7da8cccb253cc6d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70359b3de997b4c582345ab7da8cccb253cc6d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e70359b3de997b4c582345ab7da8cccb253cc6d9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e70359b3de997b4c582345ab7da8cccb253cc6d9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1456656842bef093d73e1f324eb49b94db87203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1456656842bef093d73e1f324eb49b94db87203", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1456656842bef093d73e1f324eb49b94db87203"}], "stats": {"total": 117, "additions": 98, "deletions": 19}, "files": [{"sha": "83bf2b92e0be6d82ee89d7bd057217c158f6b474", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e70359b3de997b4c582345ab7da8cccb253cc6d9", "patch": "@@ -1,5 +1,14 @@\n 2018-06-20  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/70966\n+\t* include/experimental/memory_resource (__resource_adaptor_imp): Add\n+\tstatic assertions to enforce requirements on pointer types.\n+\t(__resource_adaptor_imp::get_allocator()): Add noexcept.\n+\t(new_delete_resource, null_memory_resource): Return address of an\n+\tobject with dynamic storage duration.\n+\t(__null_memory_resource): Remove.\n+\t* testsuite/experimental/memory_resource/70966.cc: New.\n+\n \t* testsuite/20_util/duration/arithmetic/dr3050.cc: Add new test\n \tmissed from recent commit.\n "}, {"sha": "670a2210804a2033187640d664324bc068b6c0d5", "filename": "libstdc++-v3/include/experimental/memory_resource", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fmemory_resource?ref=e70359b3de997b4c582345ab7da8cccb253cc6d9", "patch": "@@ -33,7 +33,6 @@\n #include <new>\n #include <atomic>\n #include <cstddef>\n-#include <bits/alloc_traits.h>\n #include <experimental/bits/lfts_config.h>\n \n namespace std {\n@@ -258,6 +257,22 @@ namespace pmr {\n   template <typename _Alloc>\n     class __resource_adaptor_imp : public memory_resource\n     {\n+      static_assert(is_same<char,\n+\t  typename allocator_traits<_Alloc>::value_type>::value,\n+\t  \"Allocator's value_type is char\");\n+      static_assert(is_same<char*,\n+\t  typename allocator_traits<_Alloc>::pointer>::value,\n+\t  \"Allocator's pointer type is value_type*\");\n+      static_assert(is_same<const char*,\n+\t  typename allocator_traits<_Alloc>::const_pointer>::value,\n+\t  \"Allocator's const_pointer type is value_type const*\");\n+      static_assert(is_same<void*,\n+\t  typename allocator_traits<_Alloc>::void_pointer>::value,\n+\t  \"Allocator's void_pointer type is void*\");\n+      static_assert(is_same<const void*,\n+\t  typename allocator_traits<_Alloc>::const_void_pointer>::value,\n+\t  \"Allocator's const_void_pointer type is void const*\");\n+\n     public:\n       using allocator_type = _Alloc;\n \n@@ -276,7 +291,7 @@ namespace pmr {\n       __resource_adaptor_imp&\n       operator=(const __resource_adaptor_imp&) = default;\n \n-      allocator_type get_allocator() const { return _M_alloc; }\n+      allocator_type get_allocator() const noexcept { return _M_alloc; }\n \n     protected:\n       virtual void*\n@@ -311,13 +326,13 @@ namespace pmr {\n     private:\n       // Calculate Aligned Size\n       // Returns a size that is larger than or equal to __size and divisible\n-      // by __alignment, where __alignment is required to be the power of 2.\n+      // by __alignment, where __alignment is required to be a power of 2.\n       static size_t\n       _S_aligned_size(size_t __size, size_t __alignment)\n       { return ((__size - 1)|(__alignment - 1)) + 1; }\n \n       // Determine whether alignment meets one of those preconditions:\n-      // 1. Equals to Zero\n+      // 1. Equal to Zero\n       // 2. Is power of two\n       static bool\n       _S_supported (size_t __x)\n@@ -337,34 +352,33 @@ namespace pmr {\n   inline memory_resource*\n   new_delete_resource() noexcept\n   {\n-    static resource_adaptor<std::allocator<char>> __r;\n-    return static_cast<memory_resource*>(&__r);\n+    using type = resource_adaptor<std::allocator<char>>;\n+    alignas(type) static unsigned char __buf[sizeof(type)];\n+    static type* __r = new(__buf) type;\n+    return __r;\n   }\n \n-  template <typename _Alloc>\n-    class __null_memory_resource : private memory_resource\n+  inline memory_resource*\n+  null_memory_resource() noexcept\n+  {\n+    class type final : public memory_resource\n     {\n-    protected:\n       void*\n-      do_allocate(size_t, size_t)\n+      do_allocate(size_t, size_t) override\n       { std::__throw_bad_alloc(); }\n \n       void\n-      do_deallocate(void*, size_t, size_t) noexcept\n+      do_deallocate(void*, size_t, size_t) noexcept override\n       { }\n \n       bool\n-      do_is_equal(const memory_resource& __other) const noexcept\n+      do_is_equal(const memory_resource& __other) const noexcept override\n       { return this == &__other; }\n-\n-      friend memory_resource* null_memory_resource() noexcept;\n     };\n \n-  inline memory_resource*\n-  null_memory_resource() noexcept\n-  {\n-    static __null_memory_resource<void> __r;\n-    return static_cast<memory_resource*>(&__r);\n+    alignas(type) static unsigned char __buf[sizeof(type)];\n+    static type* __r = new(__buf) type;\n+    return __r;\n   }\n \n   // The default memory resource"}, {"sha": "c0173ffa7a980c5bb234736bcbde2b3aaf912bf3", "filename": "libstdc++-v3/testsuite/experimental/memory_resource/70966.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F70966.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e70359b3de997b4c582345ab7da8cccb253cc6d9/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F70966.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fmemory_resource%2F70966.cc?ref=e70359b3de997b4c582345ab7da8cccb253cc6d9", "patch": "@@ -0,0 +1,56 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++14 } }\n+\n+#include <experimental/memory_resource>\n+\n+namespace pmr = std::experimental::pmr;\n+\n+struct X\n+{\n+  pmr::memory_resource* res = nullptr;\n+  void* ptr = nullptr;\n+  static constexpr std::size_t n = 64;\n+\n+  constexpr X() { }\n+\n+  explicit\n+  X(pmr::memory_resource* r) : res(r), ptr(r->allocate(n)) { }\n+\n+  ~X() { if (ptr) res->deallocate(ptr, n); }\n+};\n+\n+void\n+swap(X& lhs, X& rhs) {\n+    std::swap(lhs.res, rhs.res);\n+    std::swap(lhs.ptr, rhs.ptr);\n+}\n+\n+void\n+test01()\n+{\n+  static X x1;\n+  X x2(pmr::new_delete_resource());\n+  swap(x1, x2);\n+  // Now x1 will deallocate the memory during destruction of static objects.\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}]}