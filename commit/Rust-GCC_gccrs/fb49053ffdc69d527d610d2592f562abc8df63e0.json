{"sha": "fb49053ffdc69d527d610d2592f562abc8df63e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmI0OTA1M2ZmZGM2OWQ1MjdkNjEwZDI1OTJmNTYyYWJjOGRmNjNlMA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2002-05-19T05:23:27Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2002-05-19T05:23:27Z"}, "message": "system.h (ENCODE_SECTION_INFO): Poison it.\n\n\t* system.h (ENCODE_SECTION_INFO): Poison it.\n\t* target-def.h (TARGET_ENCODE_SECTION_INFO): New.\n\t* target.h (encode_section_info): New.\n\t* varasm.c (make_decl_rtl, output_constant_def): Use it.\n\t* hooks.c (hook_tree_int_void): New.\n\t* hooks.h: Declare it.\n\n\t* config/darwin.h, config/alpha/alpha-protos.h, config/alpha/alpha.c,\n\tconfig/alpha/alpha.h, config/arm/pe.h, config/avr/avr-protos.h,\n\tconfig/avr/avr.c, config/avr/avr.h, config/c4x/c4x-protos.h,\n\tconfig/c4x/c4x.c, config/c4x/c4x.h, config/cris/cris-protos.h,\n\tconfig/cris/cris.c, config/cris/cris.h, config/i386/cygwin.h,\n\tconfig/i386/win32.h, config/ia64/ia64-protos.h, config/ia64/ia64.c,\n\tconfig/ia64/ia64.h, config/m32r/m32r-protos.h, config/m32r/m32r.c,\n\tconfig/m32r/m32r.h, config/m68hc11/m68hc11-protos.h,\n\tconfig/m68hc11/m68hc11.c, config/m68hc11/m68hc11.h,\n\tconfig/mcore/mcore-protos.h, config/mcore/mcore.c,\n\tconfig/mcore/mcore.h, config/mmix/mmix-protos.h, config/mmix/mmix.c,\n\tconfig/mmix/mmix.h, config/rs6000/rs6000-protos.h,\n\tconfig/rs6000/sysv4.h, config/stormy16/stormy16-protos.h,\n\tconfig/stormy16/stormy16.c, config/stormy16/stormy16.h:\n\tReplace ENCODE_SECTION_INFO with TARGET_ENCODE_SECTION_INFO\n\treferencing existing function.  Make function static.\n\n\t* config/a29k/a29k.c, config/a29k/a29k.h, config/arc/arc.c,\n\tconfig/arc/arc.h, config/arm/arm.c, config/arm/arm.h,\n\tconfig/h8300/h8300.c, config/h8300/h8300.h, config/i370/i370.c,\n\tconfig/i370/i370.h, config/i386/i386-interix.h, config/i386/i386.c,\n\tconfig/i386/i386.h, config/i386/interix.c, config/m88k/m88k.c,\n\tconfig/m88k/m88k.h, config/mips/mips.c, config/mips/mips.h,\n\tconfig/ns32k/ns32k.c, config/ns32k/ns32k.h, config/pa/pa.c,\n\tconfig/pa/pa.h, config/romp/romp.c, config/romp/romp.h,\n\tconfig/rs6000/linux64.h, config/rs6000/xcoff.h, config/s390/s390.c,\n\tconfig/s390/s390.h, config/sh/sh.c, config/sh/sh.h,\n\tconfig/sparc/sparc.c, config/sparc/sparc.h, config/v850/v850.c,\n\tconfig/v850/v850.h, config/vax/vax.c, config/vax/vms.h,\n\tconfig/xtensa/xtensa.c, config/xtensa/xtensa.h:\n\tMove ENCODE_SECTION_INFO to out-of-line function and add\n\tTARGET_ENCODE_SECTION_INFO.\n\n\t* config/darwin.h (ASM_DECLARE_FUNCTION_NAME): Use hook, not macro.\n\t(ASM_DECLARE_OBJECT_NAME, ASM_OUTPUT_ALIGNED_DECL_LOCAL): Likewise.\n\n\t* config/arm/pe.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Rename\n\tfrom SUBTARGET_*\n\t(switch_to_section): Replace in_rdata case with in_readonly_data.\n\n\t* config/h8300/h8300.c (h8300_encode_label): Make static.\n\t* config/h8300/h8300-protos.h: Update.\n\n\t* config/rs6000/rs6000.c (rs6000_elf_encode_section_info): Rename\n\tfrom rs6000_encode_section_info; make static.\n\t(rs6000_xcoff_encode_section_info): New.\n\n\t* config/v850/v850.c (v850_encode_data_area): Make static.\n\t* config/v850/v850-protos.h: Update.\n\n\t* config/vax/vax.c: Include flags.h.\n\t(vms_select_section): Fix typo.\n\n\t* doc/tm.texi (TARGET_ENCODE_SECTION_INFO): Update from previous\n\tENCODE_SECTION_INFO docs.\n\nFrom-SVN: r53606", "tree": {"sha": "6cc771edadeb72a4893ed77408fb968ecad91282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cc771edadeb72a4893ed77408fb968ecad91282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fb49053ffdc69d527d610d2592f562abc8df63e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb49053ffdc69d527d610d2592f562abc8df63e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fb49053ffdc69d527d610d2592f562abc8df63e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fb49053ffdc69d527d610d2592f562abc8df63e0/comments", "author": null, "committer": null, "parents": [{"sha": "23b4deba7bcabbbcb607095eda02a705a510830b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/23b4deba7bcabbbcb607095eda02a705a510830b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/23b4deba7bcabbbcb607095eda02a705a510830b"}], "stats": {"total": 1976, "additions": 795, "deletions": 1181}, "files": [{"sha": "b0bd4754380e9baa4b6c75fa3ef65aad5da62676", "filename": "gcc/ChangeLog", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1,3 +1,68 @@\n+2002-05-18  Richard Henderson  <rth@redhat.com>\n+\n+\t* system.h (ENCODE_SECTION_INFO): Poison it.\n+\t* target-def.h (TARGET_ENCODE_SECTION_INFO): New.\n+\t* target.h (encode_section_info): New.\n+\t* varasm.c (make_decl_rtl, output_constant_def): Use it.\n+\t* hooks.c (hook_tree_int_void): New.\n+\t* hooks.h: Declare it.\n+\n+\t* config/darwin.h, config/alpha/alpha-protos.h, config/alpha/alpha.c,\n+\tconfig/alpha/alpha.h, config/arm/pe.h, config/avr/avr-protos.h,\n+\tconfig/avr/avr.c, config/avr/avr.h, config/c4x/c4x-protos.h,\n+\tconfig/c4x/c4x.c, config/c4x/c4x.h, config/cris/cris-protos.h,\n+\tconfig/cris/cris.c, config/cris/cris.h, config/i386/cygwin.h,\n+\tconfig/i386/win32.h, config/ia64/ia64-protos.h, config/ia64/ia64.c,\n+\tconfig/ia64/ia64.h, config/m32r/m32r-protos.h, config/m32r/m32r.c,\n+\tconfig/m32r/m32r.h, config/m68hc11/m68hc11-protos.h,\n+\tconfig/m68hc11/m68hc11.c, config/m68hc11/m68hc11.h,\n+\tconfig/mcore/mcore-protos.h, config/mcore/mcore.c,\n+\tconfig/mcore/mcore.h, config/mmix/mmix-protos.h, config/mmix/mmix.c,\n+\tconfig/mmix/mmix.h, config/rs6000/rs6000-protos.h,\n+\tconfig/rs6000/sysv4.h, config/stormy16/stormy16-protos.h,\n+\tconfig/stormy16/stormy16.c, config/stormy16/stormy16.h:\n+\tReplace ENCODE_SECTION_INFO with TARGET_ENCODE_SECTION_INFO\n+\treferencing existing function.  Make function static.\n+\n+\t* config/a29k/a29k.c, config/a29k/a29k.h, config/arc/arc.c,\n+\tconfig/arc/arc.h, config/arm/arm.c, config/arm/arm.h, \n+\tconfig/h8300/h8300.c, config/h8300/h8300.h, config/i370/i370.c,\n+\tconfig/i370/i370.h, config/i386/i386-interix.h, config/i386/i386.c,\n+\tconfig/i386/i386.h, config/i386/interix.c, config/m88k/m88k.c,\n+\tconfig/m88k/m88k.h, config/mips/mips.c, config/mips/mips.h, \n+\tconfig/ns32k/ns32k.c, config/ns32k/ns32k.h, config/pa/pa.c,\n+\tconfig/pa/pa.h, config/romp/romp.c, config/romp/romp.h,\n+\tconfig/rs6000/linux64.h, config/rs6000/xcoff.h, config/s390/s390.c,\n+\tconfig/s390/s390.h, config/sh/sh.c, config/sh/sh.h,\n+\tconfig/sparc/sparc.c, config/sparc/sparc.h, config/v850/v850.c, \n+\tconfig/v850/v850.h, config/vax/vax.c, config/vax/vms.h,\n+\tconfig/xtensa/xtensa.c, config/xtensa/xtensa.h:\n+\tMove ENCODE_SECTION_INFO to out-of-line function and add\n+\tTARGET_ENCODE_SECTION_INFO.\n+\n+\t* config/darwin.h (ASM_DECLARE_FUNCTION_NAME): Use hook, not macro.\n+\t(ASM_DECLARE_OBJECT_NAME, ASM_OUTPUT_ALIGNED_DECL_LOCAL): Likewise.\n+\n+\t* config/arm/pe.h (EXTRA_SECTIONS, EXTRA_SECTION_FUNCTIONS): Rename\n+\tfrom SUBTARGET_*\n+\t(switch_to_section): Replace in_rdata case with in_readonly_data.\n+\n+\t* config/h8300/h8300.c (h8300_encode_label): Make static.\n+\t* config/h8300/h8300-protos.h: Update.\n+\n+\t* config/rs6000/rs6000.c (rs6000_elf_encode_section_info): Rename\n+\tfrom rs6000_encode_section_info; make static.\n+\t(rs6000_xcoff_encode_section_info): New.\n+\n+\t* config/v850/v850.c (v850_encode_data_area): Make static.\n+\t* config/v850/v850-protos.h: Update.\n+\n+\t* config/vax/vax.c: Include flags.h.\n+\t(vms_select_section): Fix typo.\n+\n+\t* doc/tm.texi (TARGET_ENCODE_SECTION_INFO): Update from previous\n+\tENCODE_SECTION_INFO docs.\n+\n 2002-05-18  Richard Henderson  <rth@redhat.com>\n \n \t* config/darwin.h (DARWIN_REGISTER_TARGET_PRAGMAS): Rename from"}, {"sha": "2f61dfe61277c0361be65d272658492bdfaefe60", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -50,6 +50,7 @@ static void output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void a29k_asm_named_section PARAMS ((const char *, unsigned int));\n static int a29k_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static void a29k_encode_section_info PARAMS ((tree, int));\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n \n@@ -108,6 +109,8 @@ int a29k_compare_fp_p;\n #define TARGET_ASM_FUNCTION_EPILOGUE output_function_epilogue\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST a29k_adjust_cost\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO a29k_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1611,3 +1614,18 @@ a29k_adjust_cost (insn, link, dep_insn, cost)\n \n   return cost;\n }\n+\n+/* If we are referencing a function that is static or is known to be\n+   in this file, make the SYMBOL_REF special.  We can use this to\n+   indicate that we can branch to this function without emitting a\n+   no-op after the call.  */\n+\n+static void\n+a29k_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && (TREE_ASM_WRITTEN (decl) || ! TREE_PUBLIC (decl)))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "1665368e9204f107d18eadef4a040d9d43b10132", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1333,16 +1333,6 @@ extern const char *a29k_function_name;\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to indicate\n-   that we can branch to this function without emitting a no-op after the\n-   call.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)  \\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-      && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))) \\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n-\n /* How to refer to registers in assembler output.\n    This sequence is indexed by compiler's hard-register-number (see above).  */\n "}, {"sha": "2eb195a503d19d6fc51f5ca6a2c85f1753de2596", "filename": "gcc/config/alpha/alpha-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -165,7 +165,6 @@ extern void alpha_start_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_end_function PARAMS ((FILE *, const char *, tree));\n extern void alpha_output_mi_thunk_osf PARAMS ((FILE *, tree,\n \t\t\t\t\t       HOST_WIDE_INT, tree));\n-extern void alpha_encode_section_info PARAMS ((tree, int));\n #endif /* TREE CODE */\n \n #ifdef RTX_CODE"}, {"sha": "837ec6d908833b0e2e55593fa773fdabbbbd1a8a", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -117,6 +117,8 @@ static bool decl_in_text_section\n   PARAMS ((tree));\n static bool alpha_in_small_data_p\n   PARAMS ((tree));\n+static void alpha_encode_section_info\n+  PARAMS ((tree, int));\n static int some_small_symbolic_operand_1\n   PARAMS ((rtx *, void *));\n static int split_small_symbolic_operand_1\n@@ -208,6 +210,8 @@ static void vms_asm_out_destructor PARAMS ((rtx, int));\n \n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P alpha_in_small_data_p\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO alpha_encode_section_info\n \n #if TARGET_ABI_UNICOSMK\n static void unicosmk_asm_named_section PARAMS ((const char *, unsigned int));\n@@ -950,7 +954,7 @@ local_symbol_p (op)\n      unrecognizable insns.  */\n \n   return (CONSTANT_POOL_ADDRESS_P (op)\n-\t  /* If @, then ENCODE_SECTION_INFO sez it's local.  */\n+\t  /* If @, then alpha_encode_section_info sez it's local.  */\n \t  || str[0] == '@'\n \t  /* If *$, then ASM_GENERATE_INTERNAL_LABEL sez it's local.  */\n \t  || (str[0] == '*' && str[1] == '$'));\n@@ -1604,7 +1608,7 @@ alpha_in_small_data_p (exp)\n    to the name.  If in addition the variable is to go in .sdata/.sbss,\n    then add \"@s\" instead.  */\n \n-void\n+static void\n alpha_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;"}, {"sha": "260e641805aa5bac5dd3e028a7a40675b1cfba2d", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1724,13 +1724,6 @@ do {\t\t\t\t\t\t\t\t\t     \\\n \n #define DATA_SECTION_ASM_OP \"\\t.data\"\n \n-/* Define this macro if references to a symbol must be treated differently\n-   depending on something about the variable or function named by the symbol\n-   (such as what section it is in).  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)  \\\n-  alpha_encode_section_info (DECL, FIRST)\n-\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\\\n do {\t\t\t\t\t\t\\\n   (VAR) = (SYMBOL_NAME);\t\t\t\\"}, {"sha": "9ea6df7a02746d01ca406cf8e6c864284b6313b8", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -92,6 +92,7 @@ static tree arc_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, boo\n static bool arc_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void arc_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void arc_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n@@ -107,6 +108,8 @@ static void arc_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #define TARGET_ASM_FUNCTION_EPILOGUE arc_output_function_epilogue\n #undef TARGET_ATTRIBUTE_TABLE\n #define TARGET_ATTRIBUTE_TABLE arc_attribute_table\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO arc_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2347,3 +2350,17 @@ arc_va_arg (valist, type)\n \n   return addr_rtx;\n }\n+\n+/* On the ARC, function addresses are not the same as normal addresses.\n+   Branch to absolute address insns take an address that is right-shifted\n+   by 2.  We encode the fact that we have a function here, and then emit a\n+   special assembler op when outputting the address.  */\n+\n+static void\n+arc_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL)\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "ae0176fcdf40f40a26047863c18606bdfd18ceb4", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1121,35 +1121,6 @@ extern const char *arc_text_section, *arc_data_section, *arc_rodata_section;\n    This macro is irrelevant if there is no separate readonly data section.  */\n /*#define JUMP_TABLES_IN_TEXT_SECTION*/\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the\n-   rtl for DECL or other node is created.\n-   The value of the rtl will be a `mem' whose address is a\n-   `symbol_ref'.\n-\n-   The usual thing for this macro to do is to store a flag in the\n-   `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified\n-   name string in the `symbol_ref' (if one bit is not enough\n-   information).  */\n-\n-/* On the ARC, function addresses are not the same as normal addresses.\n-   Branch to absolute address insns take an address that is right-shifted\n-   by 2.  We encode the fact that we have a function here, and then emit a\n-   special assembler op when outputting the address.  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n-do {\t\t\t\t\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\\\n-} while (0)\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans\n-   the characters that encode section info.  Define this macro if\n-   ENCODE_SECTION_INFO alters the symbol's name string.  */\n-/*#define STRIP_NAME_ENCODING(VAR, SYM_NAME)*/\n-\n /* For DWARF.  Marginally different than default so output is \"prettier\"\n    (and consistent with above).  */\n #define PUSHSECTION_ASM_OP \"\\t.section \"\n@@ -1324,12 +1295,7 @@ arc_print_operand (FILE, X, CODE)\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n arc_print_operand_address (FILE, ADDR)\n "}, {"sha": "cbcd1a14dca25df7119aa8a4c168a177df6695d0", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -120,6 +120,9 @@ static int\t arm_adjust_cost\t\tPARAMS ((rtx, rtx, rtx, int));\n #ifdef OBJECT_FORMAT_ELF\n static void\t arm_elf_asm_named_section\tPARAMS ((const char *, unsigned int));\n #endif\n+#ifndef ARM_PE\n+static void\t arm_encode_section_info\tPARAMS ((tree, int));\n+#endif\n \n #undef Hint\n #undef Mmode\n@@ -170,6 +173,13 @@ static void\t arm_elf_asm_named_section\tPARAMS ((const char *, unsigned int));\n #undef  TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST arm_adjust_cost\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#ifdef ARM_PE\n+#define TARGET_ENCODE_SECTION_INFO  arm_pe_encode_section_info\n+#else\n+#define TARGET_ENCODE_SECTION_INFO  arm_encode_section_info\n+#endif\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -11042,3 +11052,40 @@ arm_elf_asm_named_section (name, flags)\n \t     name, flagchars, type);\n }\n #endif\n+\n+#ifndef ARM_PE\n+/* Symbols in the text segment can be accessed without indirecting via the\n+   constant pool; it may take an extra binary operation, but this is still\n+   faster than indirecting via memory.  Don't do this when not optimizing,\n+   since we won't be calculating al of the offsets necessary to do this\n+   simplification.  */\n+\n+static void\n+arm_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  /* This doesn't work with AOF syntax, since the string table may be in\n+     a different AREA.  */\n+#ifndef AOF_ASSEMBLER\n+  if (optimize > 0 && TREE_CONSTANT (decl)\n+      && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n+    }\n+#endif\n+\n+  /* If we are referencing a function that is weak then encode a long call\n+     flag in the function name, otherwise if the function is static or\n+     or known to be defined in this file then encode a short call flag.  */\n+  if (first && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+    {\n+      if (TREE_CODE (decl) == FUNCTION_DECL && DECL_WEAK (decl))\n+        arm_encode_call_attribute (decl, LONG_CALL_FLAG_CHAR);\n+      else if (! TREE_PUBLIC (decl))\n+        arm_encode_call_attribute (decl, SHORT_CALL_FLAG_CHAR);\n+    }\n+}\n+#endif /* !ARM_PE */"}, {"sha": "c3946d64c565cfb673ca7ae9b454a630d7d1f162", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1860,47 +1860,6 @@ typedef struct\n #define ASM_OUTPUT_LABELREF(FILE, NAME)\t\t\\\n   asm_fprintf (FILE, \"%U%s\", arm_strip_name_encoding (NAME))\n \n-/* If we are referencing a function that is weak then encode a long call\n-   flag in the function name, otherwise if the function is static or\n-   or known to be defined in this file then encode a short call flag.\n-   This macro is used inside the ENCODE_SECTION macro.  */\n-#define ARM_ENCODE_CALL_TYPE(decl)\t\t\t\t\t\\\n-  if (TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (decl) == FUNCTION_DECL && DECL_WEAK (decl))\t\\\n-        arm_encode_call_attribute (decl, LONG_CALL_FLAG_CHAR);\t\t\\\n-      else if (! TREE_PUBLIC (decl))        \t\t\t\t\\\n-        arm_encode_call_attribute (decl, SHORT_CALL_FLAG_CHAR);\t\t\\\n-    }\n-\n-/* Symbols in the text segment can be accessed without indirecting via the\n-   constant pool; it may take an extra binary operation, but this is still\n-   faster than indirecting via memory.  Don't do this when not optimizing,\n-   since we won't be calculating al of the offsets necessary to do this\n-   simplification.  */\n-/* This doesn't work with AOF syntax, since the string table may be in\n-   a different AREA.  */\n-#ifndef AOF_ASSEMBLER\n-#define ENCODE_SECTION_INFO(decl, first)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (optimize > 0 && TREE_CONSTANT (decl)\t\t\t\t\\\n-      && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\t\t\\\n-                 ? TREE_CST_RTL (decl) : DECL_RTL (decl));\t\t\\\n-      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  if (first)\t\t\t\t\t\t\t\t\\\n-    ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n-}\n-#else\n-#define ENCODE_SECTION_INFO(decl, first)\t\t\t\t\\\n-{\t\t\t\t\t\t\t\t\t\\\n-  if (first)\t\t\t\t\t\t\t\t\\\n-    ARM_ENCODE_CALL_TYPE (decl)\t\t\t\t\t\t\\\n-}\n-#endif\n-\n #define ARM_DECLARE_FUNCTION_SIZE(STREAM, NAME, DECL)\t\\\n   arm_encode_call_attribute (DECL, SHORT_CALL_FLAG_CHAR)\n "}, {"sha": "de745586dc2bfe2da3070a34d225e6148c00cdd3", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -204,14 +204,12 @@ arm_mark_dllimport (decl)\n   XEXP (DECL_RTL (decl), 0) = newrtl;\n }\n \n-/* Cover function to implement ENCODE_SECTION_INFO.  */\n-\n void\n arm_pe_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;\n {\n-  /* This bit is copied from arm.h.  */\n+  /* This bit is copied from arm_encode_section_info.  */\n   if (optimize > 0 && TREE_CONSTANT (decl)\n       && (!flag_writable_strings || TREE_CODE (decl) != STRING_CST))\n     {"}, {"sha": "38727dad8ed928b49b3437101334ec9b8be33f02", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -94,17 +94,6 @@ Boston, MA 02111-1307, USA.  */\n   1,1,1\t\t\t\\\n }\n \f\n-/* In addition to the stuff done in arm.h, we must mark dll symbols specially.\n-   Definitions of dllexport'd objects install some info in the .drectve\n-   section.  References to dllimport'd objects are fetched indirectly via\n-   __imp_.  If both are declared, dllexport overrides.\n-   This is also needed to implement one-only vtables: they go into their own\n-   section and we need to set DECL_SECTION_NAME so we do that here.\n-   Note that we can be called twice on the same decl.  */\n-#undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  arm_pe_encode_section_info (DECL, FIRST)\n-\n /* Define this macro if in some cases global symbols from one translation\n    unit may not be bound to undefined symbols in another translation unit\n    without user intervention.  For instance, under Microsoft Windows\n@@ -200,13 +189,13 @@ Boston, MA 02111-1307, USA.  */\n /* A list of other sections which the compiler might be \"in\" at any\n    given time.  */\n \n-#undef  SUBTARGET_EXTRA_SECTIONS\n-#define SUBTARGET_EXTRA_SECTIONS in_drectve,\n+#undef  EXTRA_SECTIONS\n+#define EXTRA_SECTIONS in_drectve\n \n /* A list of extra section function definitions.  */\n \n-#undef  SUBTARGET_EXTRA_SECTION_FUNCTIONS\n-#define SUBTARGET_EXTRA_SECTION_FUNCTIONS \\\n+#undef  EXTRA_SECTION_FUNCTIONS\n+#define EXTRA_SECTION_FUNCTIONS \\\n   DRECTVE_SECTION_FUNCTION\t\\\n   SWITCH_TO_SECTION_FUNCTION\n \n@@ -239,7 +228,7 @@ switch_to_section (section, decl)\t\t\t\t\\\n       case in_text: text_section (); break;\t\t\t\\\n       case in_data: data_section (); break;\t\t\t\\\n       case in_named: named_section (decl, NULL, 0); break;\t\\\n-      case in_rdata: rdata_section (); break;\t\t\t\\\n+      case in_readonly_data: readonly_data_section (); break;\t\\\n       case in_ctors: ctors_section (); break;\t\t\t\\\n       case in_dtors: dtors_section (); break;\t\t\t\\\n       case in_drectve: drectve_section (); break;\t\t\\"}, {"sha": "f6dd8802e98074f5691daa57deee01587560045f", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -43,7 +43,6 @@ extern void   gas_output_ascii          PARAMS ((FILE *file, const char *str,\n #ifdef TREE_CODE\n extern void   asm_output_external          PARAMS ((FILE *file, tree decl,\n \t\t\t\t\t\t   char *name));\n-extern void   encode_section_info          PARAMS ((tree decl, int));\n extern int    avr_progmem_p                PARAMS ((tree decl));\n \n "}, {"sha": "262ed6323c47425ed9d426b0d55e03cda01815b7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -65,6 +65,7 @@ static bool   avr_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void   avr_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void   avr_unique_section PARAMS ((tree, int));\n+extern void   avr_encode_section_info PARAMS ((tree, int));\n \n /* Allocate registers from r25 to r8 for parameters for function calls */\n #define FIRST_CUM_REG 26\n@@ -200,6 +201,8 @@ int avr_case_values_threshold = 30000;\n #define TARGET_ATTRIBUTE_TABLE avr_attribute_table\n #undef TARGET_ASM_UNIQUE_SECTION\n #define TARGET_ASM_UNIQUE_SECTION avr_unique_section\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO avr_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -4749,10 +4752,10 @@ avr_progmem_p (decl)\n   return 0;\n }\n \n-/* Encode section information about tree DECL */\n+/* Encode section information about tree DECL.  */\n   \n-void\n-encode_section_info (decl, first)\n+static void\n+avr_encode_section_info (decl, first)\n      tree decl;\n      int first;\n {"}, {"sha": "c227241ff7413a6d00b46a1f8e098bb134eac13b", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 3, "deletions": 82, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1322,64 +1322,7 @@ extern int avr_reg_order[];\n #endif\n /* A C compound statement with a conditional `goto LABEL;' executed\n    if X (an RTX) is a legitimate memory address on the target machine\n-   for a memory operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as\n-   subroutines for this one.  Otherwise it may be too complicated to\n-   understand.\n-\n-   This macro must exist in two variants: a strict variant and a\n-   non-strict one.  The strict variant is used in the reload pass.  It\n-   must be defined so that any pseudo-register that has not been\n-   allocated a hard register is considered a memory reference.  In\n-   contexts where some kind of register is required, a pseudo-register\n-   with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be\n-   defined to accept all pseudo-registers in every context where some\n-   kind of register is required.\n-\n-   Compiler source files that want to use the strict variant of this\n-   macro define the macro `REG_OK_STRICT'.  You should use an `#ifdef\n-   REG_OK_STRICT' conditional to define the strict variant in that\n-   case and the non-strict variant otherwise.\n-\n-   Subroutines to check for acceptable registers for various purposes\n-   (one for base registers, one for index registers, and so on) are\n-   typically among the subroutines used to define\n-   `GO_IF_LEGITIMATE_ADDRESS'.  Then only these subroutine macros\n-   need have two variants; the higher levels of macros may be the\n-   same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref'\n-   and an integer are stored inside a `const' RTX to mark them as\n-   constant.  Therefore, there is no need to recognize such sums\n-   specifically as legitimate addresses.  Normally you would simply\n-   recognize any `const' as legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant\n-   sums that are not marked with  `const'.  It assumes that a naked\n-   `plus' indicates indexing.  If so, then you *must* reject such\n-   naked constant sums as illegitimate addresses, so that none of\n-   them will be given to `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate depends\n-   on the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  When you see a\n-   `const', you will have to look inside it to find the `symbol_ref'\n-   in order to determine the section.  *Note Assembler Format::.\n-\n-   The best way to modify the name string is by adding text to the\n-   beginning, with suitable punctuation to prevent any ambiguity.\n-   Allocate the new name in `saveable_obstack'.  You will have to\n-   modify `ASM_OUTPUT_LABELREF' to remove and decode the added text\n-   and output the name accordingly, and define `STRIP_NAME_ENCODING'\n-   to access the original name string.\n-\n-   You can check the information stored here into the `symbol_ref' in\n-   the definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n-   `PRINT_OPERAND_ADDRESS'. */\n+   for a memory operand of mode MODE.  */\n \n /* `REG_OK_FOR_BASE_P (X)'\n    A C expression that is nonzero if X (assumed to be a `reg' RTX) is\n@@ -1799,27 +1742,11 @@ progmem_section (void)\t\t\t\t\t\t\t      \\\n    This macro is irrelevant if there is no separate readonly data\n    section.  */\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST)  encode_section_info(DECL, FIRST)\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or function\n-   named by the symbol (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the\n-   rtl for DECL has been created and stored in `DECL_RTL (DECL)'.\n-   The value of the rtl will be a `mem' whose address is a\n-   `symbol_ref'.\n-\n-   The usual thing for this macro to do is to record a flag in the\n-   `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified\n-   name string in the `symbol_ref' (if one bit is not enough\n-   information).  */\n-\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME) \\\n   (VAR) = (SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*' || (SYMBOL_NAME)[0] == '@');\n /* `STRIP_NAME_ENCODING (VAR, SYM_NAME)'\n    Decode SYM_NAME and store the real name part in VAR, sans the\n-   characters that encode section info.  Define this macro if\n-   `ENCODE_SECTION_INFO' alters the symbol's name string.  */\n+   characters that encode section info.  */\n \n #define ASM_FILE_START(STREAM) asm_file_start (STREAM)\n /* A C expression which outputs to the stdio stream STREAM some\n@@ -2307,13 +2234,7 @@ sprintf (STRING, \"*.%s%d\", PREFIX, NUM)\n #define PRINT_OPERAND_ADDRESS(STREAM, X) print_operand_address(STREAM, X)\n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is X.  X is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the\n-   section that the address refers to.  On these machines, define the\n-   macro `ENCODE_SECTION_INFO' to store the information into the\n-   `symbol_ref', and then check for it here.  *Note Assembler\n-   Format::.  */\n+   reference whose address is X.  X is an RTL expression.  */\n \n #define USER_LABEL_PREFIX \"\"\n /* `LOCAL_LABEL_PREFIX'"}, {"sha": "d8468d1709090963f25773f33780009d7ee0de8d", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -53,8 +53,6 @@ extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t enum machine_mode, tree,\n \t\t\t\t\t\t int));\n \n-extern void c4x_encode_section_info PARAMS ((tree, int));\n-\n #endif /* TREE_CODE */\n \n "}, {"sha": "126b132f5b5405a2d81a51d3f1ebbd0c9175b9ad", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -193,6 +193,7 @@ const struct attribute_spec c4x_attribute_table[];\n static void c4x_insert_attributes PARAMS ((tree, tree *));\n static void c4x_asm_named_section PARAMS ((const char *, unsigned int));\n static int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static void c4x_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -217,6 +218,9 @@ static int c4x_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST c4x_adjust_cost\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO c4x_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called to register all of our global variables with the garbage\n@@ -1478,7 +1482,8 @@ c4x_emit_libcall_mulhi (libcall, code, mode, operands)\n \n /* Set the SYMBOL_REF_FLAG for a function decl.  However, wo do not\n    yet use this info.  */\n-void\n+\n+static void\n c4x_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;"}, {"sha": "e7423f81595508a6e91c8f93b7e2f0976d4cc32c", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1516,25 +1516,6 @@ CUMULATIVE_ARGS;\n \n #define LEGITIMATE_DISPLACEMENT_P(X) IS_DISP8_CONST (INTVAL (X))\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the\n-   rtl for DECL or other node is created.\n-   The value of the rtl will be a `mem' whose address is a\n-   `symbol_ref'.\n-\n-   The usual thing for this macro to do is to a flag in the\n-   `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified\n-   name string in the `symbol_ref' (if one bit is not enough\n-   information).\n-\n-   On the C4x we use this to indicate if a symbol is in text or\n-   data space.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST) c4x_encode_section_info (DECL, FIRST);\n-\n /* Descripting Relative Cost of Operations.  */\n \n /* Provide the costs of a rtl expression.  This is in the body of a"}, {"sha": "4db5a2a54b4a1fc1232e9df8145b2f45b0557f36", "filename": "gcc/config/cris/cris-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -49,7 +49,6 @@ extern void cris_target_asm_named_section\n \n # ifdef TREE_CODE\n extern rtx cris_expand_builtin_va_arg PARAMS ((tree, tree));\n-extern void cris_encode_section_info PARAMS ((tree, int));\n # endif\n #endif /* RTX_CODE */\n "}, {"sha": "e9a323257d803189a8c3b64bda5d7c5ae1975413", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -97,6 +97,7 @@ static void cris_target_asm_function_prologue\n static void cris_target_asm_function_epilogue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n \n+static void cris_encode_section_info PARAMS ((tree, int));\n static void cris_operand_lossage PARAMS ((const char *, rtx));\n \n /* The function cris_target_asm_function_epilogue puts the last insn to\n@@ -148,6 +149,9 @@ int cris_cpu_version = CRIS_DEFAULT_CPU_VERSION;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE cris_target_asm_function_epilogue\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO cris_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Predicate functions.  */\n@@ -3033,12 +3037,11 @@ cris_output_addr_const (file, x)\n     }\n }\n \n-/* The ENCODE_SECTION_INFO worker.  Code-in whether we can get away\n-   without a GOT entry (needed for externally visible objects but not for\n-   functions) into SYMBOL_REF_FLAG and add the PLT suffix for global\n-   functions.  */\n+/* Code-in whether we can get away without a GOT entry (needed for\n+   externally visible objects but not for functions) into\n+   SYMBOL_REF_FLAG and add the PLT suffix for global functions.  */\n \n-void\n+static void\n cris_encode_section_info (exp, first)\n      tree exp;\n      int first ATTRIBUTE_UNUSED;"}, {"sha": "ad8481c70e61ba8baa6c56c78be99f5bf33f8acf", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1442,10 +1442,6 @@ struct cum_args {int regs;};\n /* The jump table is immediately connected to the preceding insn.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* We need to code in PIC-specific flags into SYMBOL_REF_FLAG.  */\n-\n-#define ENCODE_SECTION_INFO(EXP, FIRST) cris_encode_section_info (EXP, FIRST)\n-\n /* We pull a little trick to register the _fini function with atexit,\n    after (presumably) registering the eh frame info, since we don't handle\n    _fini (a.k.a. ___fini_start) in crt0 or have a crti for \"pure\" ELF.  If"}, {"sha": "12ae39ad3b5f496867ed5e33d1064660300b6ea5", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 2, "deletions": 64, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2632,12 +2632,7 @@ d30v_split_double (value, p_high, p_low)\n \f\n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the section\n-   that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  *Note Assembler Format::.  */\n+   is an RTL expression.  */\n \n void\n d30v_print_operand_address (stream, x)\n@@ -3101,64 +3096,7 @@ d30v_initialize_trampoline (addr, fnaddr, static_chain)\n \f\n /* A C compound statement with a conditional `goto LABEL;' executed if X (an\n    RTX) is a legitimate memory address on the target machine for a memory\n-   operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as subroutines for\n-   this one.  Otherwise it may be too complicated to understand.\n-\n-   This macro must exist in two variants: a strict variant and a non-strict\n-   one.  The strict variant is used in the reload pass.  It must be defined so\n-   that any pseudo-register that has not been allocated a hard register is\n-   considered a memory reference.  In contexts where some kind of register is\n-   required, a pseudo-register with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be defined to\n-   accept all pseudo-registers in every context where some kind of register is\n-   required.\n-\n-   Compiler source files that want to use the strict variant of this macro\n-   define the macro `REG_OK_STRICT'.  You should use an `#ifdef REG_OK_STRICT'\n-   conditional to define the strict variant in that case and the non-strict\n-   variant otherwise.\n-\n-   Subroutines to check for acceptable registers for various purposes (one for\n-   base registers, one for index registers, and so on) are typically among the\n-   subroutines used to define `GO_IF_LEGITIMATE_ADDRESS'.  Then only these\n-   subroutine macros need have two variants; the higher levels of macros may be\n-   the same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref' and an\n-   integer are stored inside a `const' RTX to mark them as constant.\n-   Therefore, there is no need to recognize such sums specifically as\n-   legitimate addresses.  Normally you would simply recognize any `const' as\n-   legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant sums that\n-   are not marked with `const'.  It assumes that a naked `plus' indicates\n-   indexing.  If so, then you *must* reject such naked constant sums as\n-   illegitimate addresses, so that none of them will be given to\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate depends on the\n-   section that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  When you see a `const', you will have to look\n-   inside it to find the `symbol_ref' in order to determine the section.  *Note\n-   Assembler Format::.\n-\n-   The best way to modify the name string is by adding text to the beginning,\n-   with suitable punctuation to prevent any ambiguity.  Allocate the new name\n-   in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n-   remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n-\n-   You can check the information stored here into the `symbol_ref' in the\n-   definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   Return 0 if the address is not legitimate, 1 if the address would fit\n-   in a short instruction, or 2 if the address would fit in a long\n-   instruction.  */\n+   operand of mode MODE.  */\n \n #define XREGNO_OK_FOR_BASE_P(REGNO, STRICT_P)\t\t\t\t\\\n ((STRICT_P)\t\t\t\t\t\t\t\t\\"}, {"sha": "c0a949fc608a35f5f21c27962b1dbbfa38dafb74", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 2, "deletions": 65, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2270,60 +2270,7 @@ typedef struct machine_function\n \n /* A C compound statement with a conditional `goto LABEL;' executed if X (an\n    RTX) is a legitimate memory address on the target machine for a memory\n-   operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as subroutines for\n-   this one.  Otherwise it may be too complicated to understand.\n-\n-   This macro must exist in two variants: a strict variant and a non-strict\n-   one.  The strict variant is used in the reload pass.  It must be defined so\n-   that any pseudo-register that has not been allocated a hard register is\n-   considered a memory reference.  In contexts where some kind of register is\n-   required, a pseudo-register with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be defined to\n-   accept all pseudo-registers in every context where some kind of register is\n-   required.\n-\n-   Compiler source files that want to use the strict variant of this macro\n-   define the macro `REG_OK_STRICT'.  You should use an `#ifdef REG_OK_STRICT'\n-   conditional to define the strict variant in that case and the non-strict\n-   variant otherwise.\n-\n-   Subroutines to check for acceptable registers for various purposes (one for\n-   base registers, one for index registers, and so on) are typically among the\n-   subroutines used to define `GO_IF_LEGITIMATE_ADDRESS'.  Then only these\n-   subroutine macros need have two variants; the higher levels of macros may be\n-   the same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref' and an\n-   integer are stored inside a `const' RTX to mark them as constant.\n-   Therefore, there is no need to recognize such sums specifically as\n-   legitimate addresses.  Normally you would simply recognize any `const' as\n-   legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant sums that\n-   are not marked with `const'.  It assumes that a naked `plus' indicates\n-   indexing.  If so, then you *must* reject such naked constant sums as\n-   illegitimate addresses, so that none of them will be given to\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate depends on the\n-   section that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  When you see a `const', you will have to look\n-   inside it to find the `symbol_ref' in order to determine the section.  *Note\n-   Assembler Format::.\n-\n-   The best way to modify the name string is by adding text to the beginning,\n-   with suitable punctuation to prevent any ambiguity.  Allocate the new name\n-   in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n-   remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n-\n-   You can check the information stored here into the `symbol_ref' in the\n-   definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n-   `PRINT_OPERAND_ADDRESS'.  */\n+   operand of mode MODE.  */\n \n #ifdef\tREG_OK_STRICT\n #define REG_OK_STRICT_P 1\n@@ -2753,11 +2700,6 @@ extern const char *d30v_branch_cost_string;\n \n    This macro is irrelevant if there is no separate readonly data section.  */\n /* #define JUMP_TABLES_IN_TEXT_SECTION */\n-\n-/* Decode SYM_NAME and store the real name part in VAR, sans the characters\n-   that encode section info.  Define this macro if `ENCODE_SECTION_INFO' alters\n-   the symbol's name string.  */\n-/* #define STRIP_NAME_ENCODING(VAR, SYM_NAME) */\n \f\n /* Position Independent Code.  */\n \n@@ -3544,12 +3486,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the section\n-   that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  *Note Assembler Format::.  */\n+   is an RTL expression.  */\n \n #define PRINT_OPERAND_ADDRESS(STREAM, X) d30v_print_operand_address (STREAM, X)\n "}, {"sha": "14ab0ff98b74c2d8e263c68b8db795febdf15c13", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -208,7 +208,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n   } while (0)\n \n@@ -224,7 +224,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((TREE_STATIC (DECL)                                             \\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))               \\\n         || DECL_INITIAL (DECL))                                         \\\n-      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n     ASM_OUTPUT_LABEL (FILE, xname);                                     \\\n     /* Avoid generating stubs for functions we've just defined by\t\\\n        outputting any required stub name label now.  */\t\t\t\\\n@@ -279,7 +279,7 @@ do { text_section ();\t\t\t\t\t\t\t\\\n     if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n-      ENCODE_SECTION_INFO (DECL, false);\t\t\t\t\\\n+      (* targetm.encode_section_info) (DECL, false);\t\t\t\\\n     if ((DECL) && ((TREE_STATIC (DECL)\t\t\t\t\t\\\n \t && (!DECL_COMMON (DECL) || !TREE_PUBLIC (DECL)))\t\t\\\n         || DECL_INITIAL (DECL)))\t\t\t\t\t\\\n@@ -552,8 +552,7 @@ enum machopic_addr_class {\n #define MACHOPIC_JUST_INDIRECT (flag_pic == 1)\n #define MACHOPIC_PURE          (flag_pic == 2)\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  darwin_encode_section_info (DECL, FIRST)\n+#define TARGET_ENCODE_SECTION_INFO  darwin_encode_section_info\n \n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)  \\\n   ((VAR) = ((SYMBOL_NAME[0] == '!') ? (SYMBOL_NAME) + 4 : (SYMBOL_NAME)))"}, {"sha": "2f0cf99561b06970d30b12a1821710998f0467f1", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -977,61 +977,7 @@ do\t\t\t\t\t\t\t\t\t\t\\\n \n /* A C compound statement with a conditional `goto LABEL;' executed if X (an\n    RTX) is a legitimate memory address on the target machine for a memory\n-   operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as subroutines for\n-   this one.  Otherwise it may be too complicated to understand.\n-\n-   This macro must exist in two variants: a strict variant and a non-strict\n-   one.  The strict variant is used in the reload pass.  It must be defined so\n-   that any pseudo-register that has not been allocated a hard register is\n-   considered a memory reference.  In contexts where some kind of register is\n-   required, a pseudo-register with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be defined to\n-   accept all pseudo-registers in every context where some kind of register is\n-   required.\n-\n-   Compiler source files that want to use the strict variant of this macro\n-   define the macro `REG_OK_STRICT'.  You should use an `#ifdef REG_OK_STRICT'\n-   conditional to define the strict variant in that case and the non-strict\n-   variant otherwise.\n-\n-   Subroutines to check for acceptable registers for various purposes (one for\n-   base registers, one for index registers, and so on) are typically among the\n-   subroutines used to define `GO_IF_LEGITIMATE_ADDRESS'.  Then only these\n-   subroutine macros need have two variants; the higher levels of macros may be\n-   the same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref' and an\n-   integer are stored inside a `const' RTX to mark them as constant.\n-   Therefore, there is no need to recognize such sums specifically as\n-   legitimate addresses.  Normally you would simply recognize any `const' as\n-   legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant sums that\n-   are not marked with `const'.  It assumes that a naked `plus' indicates\n-   indexing.  If so, then you *must* reject such naked constant sums as\n-   illegitimate addresses, so that none of them will be given to\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate depends on the\n-   section that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  When you see a `const', you will have to look\n-   inside it to find the `symbol_ref' in order to determine the section.\n-\n-   The best way to modify the name string is by adding text to the beginning,\n-   with suitable punctuation to prevent any ambiguity.  Allocate the new name\n-   in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n-   remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n-\n-   You can check the information stored here into the `symbol_ref' in the\n-   definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   Used in explow.c, recog.c, reload.c.  */\n+   operand of mode MODE.  */\n \n /* On the FR30 we only have one real addressing mode - an address in a\n    register.  There are three special cases however:\n@@ -1293,12 +1239,8 @@ do\t\t\t\t\t\t\t\t\t\t\\\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.\n+   is an RTL expression.  */\n \n-   On some machines, the syntax for a symbolic address depends on the section\n-   that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  *Note Assembler Format::.  */\n #define PRINT_OPERAND_ADDRESS(STREAM, X) fr30_print_operand_address (STREAM, X)\n \n /* If defined, C string expressions to be used for the `%R', `%L', `%U', and"}, {"sha": "9a70284d806a2b167f5b31d20ed64ad34564e4fd", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -68,7 +68,6 @@ extern struct rtx_def *function_arg PARAMS ((CUMULATIVE_ARGS *,\n extern int h8300_funcvec_function_p PARAMS ((tree));\n extern int h8300_eightbit_data_p PARAMS ((tree));\n extern int h8300_tiny_data_p PARAMS ((tree));\n-extern void h8300_encode_label PARAMS ((tree));\n #endif /* TREE_CODE */\n \n extern void h8300_init_once PARAMS ((void));"}, {"sha": "64d4e85f237081ce19aa3f15a650612a5f57be7b", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -64,6 +64,8 @@ static void h8300_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #ifndef OBJECT_FORMAT_ELF\n static void h8300_asm_named_section PARAMS ((const char *, unsigned int));\n #endif\n+static void h8300_encode_label PARAMS ((tree));\n+static void h8300_encode_section_info PARAMS ((tree, int));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -111,6 +113,8 @@ const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n #define TARGET_ASM_FUNCTION_PROLOGUE h8300_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE h8300_output_function_epilogue\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO h8300_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3436,7 +3440,7 @@ h8300_handle_tiny_data_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n-void\n+static void\n h8300_encode_label (decl)\n      tree decl;\n {\n@@ -3451,6 +3455,28 @@ h8300_encode_label (decl)\n     ggc_alloc_string (newstr, len + 1);\n }\n \n+/* If we are referencing a function that is supposed to be called\n+   through the function vector, the SYMBOL_REF_FLAG in the rtl\n+   so the call patterns can generate the correct code.  */\n+\n+static void\n+h8300_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && h8300_funcvec_function_p (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+  else if (TREE_CODE (decl) == VAR_DECL\n+\t   && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n+    {\n+      if (h8300_eightbit_data_p (decl))\n+\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      else if (first && h8300_tiny_data_p (decl))\n+\th8300_encode_label (decl);\n+    }\n+}\n+\n const char *\n output_simode_bld (bild, operands)\n      int bild;"}, {"sha": "1baa95901c0262bc6f7edb4e112df106da47b794", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1096,24 +1096,8 @@ struct cum_arg\n \n #define TINY_DATA_NAME_P(NAME) (*(NAME) == '&')\n \n-/* If we are referencing a function that is supposed to be called\n-   through the function vector, the SYMBOL_REF_FLAG in the rtl\n-   so the call patterns can generate the correct code.  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\\\n-      && h8300_funcvec_function_p (DECL))\t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-  else if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n-\t   && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\\\n-\t   && h8300_eightbit_data_p (DECL))\t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-  else if ((FIRST) && TREE_CODE (DECL) == VAR_DECL\t\t\\\n-\t   && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL))\t\\\n-\t   && h8300_tiny_data_p (DECL))\t\t\t\t\\\n-    h8300_encode_label (DECL);\n-\n /* Store the user-specified part of SYMBOL_NAME in VAR.\n-   This is sort of inverse to ENCODE_SECTION_INFO.  */\n+   This is sort of inverse to targetm.encode_section_info.  */\n #define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME)\t\t\\\n   (VAR) = (SYMBOL_NAME) + ((SYMBOL_NAME)[0] == '*'\t\\\n \t\t\t   || (SYMBOL_NAME)[0] == '@'\t\\"}, {"sha": "e19f72e79b7fffeb080b2623d6df40b11a8104c7", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -107,6 +107,7 @@ static void i370_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #ifdef LONGEXTERNAL\n static int mvs_hash_alias PARAMS ((const char *));\n #endif\n+static void i370_encode_section_info PARAMS ((tree, int));\n \n /* ===================================================== */\n /* defines and functions specific to the HLASM assembler */\n@@ -306,6 +307,8 @@ static const unsigned char ebcasc[256] =\n #define TARGET_ASM_FUNCTION_PROLOGUE i370_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE i370_output_function_epilogue\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO i370_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1554,3 +1557,15 @@ i370_output_function_epilogue (file, l)\n   for (i = function_base_page; i < mvs_page_num; i++)\n     fprintf (file, \"\\tDC\\tA(PG%d)\\n\", i);\n }\n+\n+/* Mark external references.  */\n+\n+static void\n+i370_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}\n+"}, {"sha": "be1e79d81d94c5f03666d8de897039f275d82988", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -281,12 +281,6 @@ extern int mvs_function_name_length;\n   (((MODE1) == SFmode || (MODE1) == DFmode)\t\t\t\t\\\n    == ((MODE2) == SFmode || (MODE2) == DFmode))\n \n-/* Mark external references.  */\n-\n-#define ENCODE_SECTION_INFO(decl, first)  \t\t\t\t\\\n-  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n-\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n "}, {"sha": "7098066adc1dc9c2f9715458babfc67bd1c4bff1", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -257,9 +257,8 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n extern void i386_pe_encode_section_info PARAMS ((TREE, int));\n \n-#undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  i386_pe_encode_section_info (DECL, FIRST)\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n \n /* Utility used only in this file.  */\n #define I386_PE_STRIP_ENCODING(SYM_NAME) \\\n@@ -269,7 +268,7 @@ extern void i386_pe_encode_section_info PARAMS ((TREE, int));\n \n /* This macro gets just the user-specified name\n    out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by ENCODE_SECTION_INFO.  */\n+   trailing @[NUM] encoded by targetm.encode_section_info.  */\n #undef  STRIP_NAME_ENCODING\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "fb0a9a9d87cabb089dd6aa6b8c243aee52939c33", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -305,32 +305,15 @@ while (0)\n \n    stddef renaming does NOT apply to Alpha.  */\n \n-union tree_node;\n-const char *gen_stdcall_suffix PARAMS ((union tree_node *));\n-\n-#undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-do \t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n-\t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n-\t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if ((FIRST) && TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\\\n-      if (lookup_attribute (\"stdcall\",\t\t\t\t\t\\\n-\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (DECL))))\t\\\n-        XEXP (DECL_RTL (DECL), 0) = \t\t\t\t\t\\\n-          gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (DECL)); \t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n+const char *gen_stdcall_suffix PARAMS ((tree));\n+void i386_interix_encode_section_info PARAMS ((tree, int));\n+\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO i386_interix_encode_section_info\n \n /* This macro gets just the user-specified name\n    out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by ENCODE_SECTION_INFO.  */\n+   trailing @[NUM] encoded by targetm.encode_section_info.  */\n #undef  STRIP_NAME_ENCODING\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "ff77510ab303bf73fc25a8e974262ad9aa202d55", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -691,6 +691,8 @@ struct ix86_address\n \n static int ix86_decompose_address PARAMS ((rtx, struct ix86_address *));\n \n+static void i386_encode_section_info PARAMS ((tree, int)) ATTRIBUTE_UNUSED;\n+\n struct builtin_description;\n static rtx ix86_expand_sse_comi PARAMS ((const struct builtin_description *,\n \t\t\t\t\t tree, rtx));\n@@ -2945,7 +2947,7 @@ local_symbolic_operand (op, mode)\n      the compiler that assumes it can just stick the results of \n      ASM_GENERATE_INTERNAL_LABEL in a symbol_ref and have done.  */\n   /* ??? This is a hack.  Should update the body of the compiler to\n-     always create a DECL an invoke ENCODE_SECTION_INFO.  */\n+     always create a DECL an invoke targetm.encode_section_info.  */\n   if (strncmp (XSTR (op, 0), internal_label_prefix,\n \t       internal_label_prefix_len) == 0)\n     return 1;\n@@ -5084,6 +5086,37 @@ legitimize_pic_address (orig, reg)\n     }\n   return new;\n }\n+\n+/* If using PIC, mark a SYMBOL_REF for a non-global symbol so that we\n+   may access it directly in the GOT.  */\n+\n+static void\n+i386_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+\n+      if (GET_CODE (rtl) == MEM)\n+\t{\n+\t  if (TARGET_DEBUG_ADDR\n+\t      && TREE_CODE_CLASS (TREE_CODE (decl)) == 'd')\n+\t    {\n+\t      fprintf (stderr, \"Encode %s, public = %d\\n\",\n+\t\t       IDENTIFIER_POINTER (DECL_NAME (decl)),\n+\t\t       TREE_PUBLIC (decl));\n+\t    }\n+\n+\t  SYMBOL_REF_FLAG (XEXP (rtl, 0))\n+\t    = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t       || ! TREE_PUBLIC (decl)\n+\t       || MODULE_LOCAL_P (decl));\n+\t}\n+    }\n+}\n \f\n /* Try machine-dependent ways of modifying an illegitimate address\n    to be legitimate.  If we find one, return the new, valid address."}, {"sha": "277290105e75d823fbabdeb1a91b631aee1be109", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2417,37 +2417,7 @@ enum ix86_builtins\n   IX86_BUILTIN_MAX\n };\n \f\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On i386, if using PIC, mark a SYMBOL_REF for a non-global symbol\n-   so that we may access it directly in the GOT.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n-do {\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\\\n-\t\t\t\t\t\t\t\t\\\n-\tif (GET_CODE (rtl) == MEM)\t\t\t\t\\\n-\t  {\t\t\t\t\t\t\t\\\n-\t    if (TARGET_DEBUG_ADDR\t\t\t\t\\\n-\t\t&& TREE_CODE_CLASS (TREE_CODE (DECL)) == 'd')\t\\\n-\t      {\t\t\t\t\t\t\t\\\n-\t\tfprintf (stderr, \"Encode %s, public = %d\\n\",\t\\\n-\t\t\t IDENTIFIER_POINTER (DECL_NAME (DECL)),\t\\\n-\t\t\t TREE_PUBLIC (DECL));\t\t\t\\\n-\t      }\t\t\t\t\t\t\t\\\n-\t    \t\t\t\t\t\t\t\\\n-\t    SYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\\\n-\t      = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n-\t\t || ! TREE_PUBLIC (DECL)\t\t\t\\\n-\t\t || MODULE_LOCAL_P (DECL));\t\t\t\\\n-\t  }\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-} while (0)\n+#define TARGET_ENCODE_SECTION_INFO  i386_encode_section_info\n \n /* The `FINALIZE_PIC' macro serves as a hook to emit these special\n    codes once the function is being compiled into assembly code, but"}, {"sha": "dc9c3d6e4220470488ba54c7e3911dd98ca6c80b", "filename": "gcc/config/i386/interix.c", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Finterix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Finterix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Finterix.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -33,7 +33,7 @@ Boston, MA 02111-1307, USA.  */\n \n const char *\n gen_stdcall_suffix (decl)\n-  tree decl;\n+     tree decl;\n {\n   int total = 0;\n   /* ??? This probably should use XSTR (XEXP (DECL_RTL (decl), 0), 0) instead\n@@ -65,6 +65,26 @@ gen_stdcall_suffix (decl)\n   return IDENTIFIER_POINTER (get_identifier (newsym));\n }\n \n+void\n+i386_interix_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  if (flag_pic)\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0))\n+\t= (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t   || ! TREE_PUBLIC (decl));\n+    }\n+  if (first && TREE_CODE (decl) == FUNCTION_DECL)\n+    if (lookup_attribute (\"stdcall\",\n+\t\t\t  TYPE_ATTRIBUTES (TREE_TYPE (decl))))\n+      XEXP (DECL_RTL (decl), 0) =\n+\tgen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (decl));\n+}\n+\n #if 0\t\n /* Turn this back on when the linker is updated to handle grouped\n    .data$ sections correctly. See corresponding note in i386/interix.h. "}, {"sha": "03ed49577758e06654b352a8791ab5e9c6b916cf", "filename": "gcc/config/i386/win32.h", "status": "modified", "additions": 3, "deletions": 32, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fwin32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fwin32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwin32.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -102,41 +102,12 @@ Boston, MA 02111-1307, USA.  */\n \n #define NEED_ATEXIT 1\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On i386, if using PIC, mark a SYMBOL_REF for a non-global symbol\n-   so that we may access it directly in the GOT.\n-\n-   On i386 running Windows NT, modify the assembler name with a suffix \n-   consisting of an atsign (@) followed by string of digits that represents\n-   the number of bytes of arguments passed to the function, if it has the \n-   attribute STDCALL.  */\n-\n-#undef ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n-\t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n-\t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-    if ((FIRST) && TREE_CODE (DECL) == FUNCTION_DECL) \t\t\t\\\n-      if (lookup_attribute (\"stdcall\",\t\t\t\t\t\\\n-\t\t\t    TYPE_ATTRIBUTES (TREE_TYPE (DECL))))\t\\\n-        XEXP (DECL_RTL (DECL), 0) = \t\t\t\t\t\\\n-          gen_rtx (SYMBOL_REF, Pmode, gen_stdcall_suffix (DECL)); \t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  i386_pe_encode_section_info\n \n /* This macro gets just the user-specified name\n    out of the string in a SYMBOL_REF.  Discard\n-   trailing @[NUM] encoded by ENCODE_SECTION_INFO. \n+   trailing @[NUM] encoded by targetm.encode_section_info. \n    Do we need the stripping of leading '*'?  */\n #undef  STRIP_NAME_ENCODING\n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\t\t\t\\"}, {"sha": "d88e7dbce738f49656d0c28daae03cdafd01e78e", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -367,8 +367,6 @@ gen_stdcall_suffix (decl)\n   return IDENTIFIER_POINTER (get_identifier (newsym));\n }\n \n-/* Cover function to implement ENCODE_SECTION_INFO.  */\n-\n void\n i386_pe_encode_section_info (decl, first)\n      tree decl;"}, {"sha": "d28de455ec00c021067fa0c1809dc215fc045899", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -119,8 +119,6 @@ extern int ia64_function_arg_pass_by_reference PARAMS((CUMULATIVE_ARGS *,\n \t\t\t\t\t\t       tree, int));\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n-\n-extern void ia64_encode_section_info PARAMS((tree, int));\n #endif /* TREE_CODE */\n \n extern int ia64_register_move_cost PARAMS((enum machine_mode, enum reg_class,"}, {"sha": "f62f92a27350ea5c779a25b8056b04f92da2f978", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -126,6 +126,7 @@ static void emit_insn_group_barriers PARAMS ((FILE *, rtx));\n static void emit_all_insn_group_barriers PARAMS ((FILE *, rtx));\n static void emit_predicate_relation_info PARAMS ((void));\n static bool ia64_in_small_data_p PARAMS ((tree));\n+static void ia64_encode_section_info PARAMS ((tree, int));\n static void process_epilogue PARAMS ((void));\n static int process_set PARAMS ((FILE *, rtx));\n \n@@ -208,6 +209,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_IN_SMALL_DATA_P\n #define TARGET_IN_SMALL_DATA_P  ia64_in_small_data_p\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO ia64_encode_section_info\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST ia64_adjust_cost\n@@ -6899,7 +6902,7 @@ ia64_in_small_data_p (exp)\n   return false;\n }\n \n-void\n+static void\n ia64_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;\n@@ -6971,10 +6974,10 @@ ia64_encode_section_info (decl, first)\n       XSTR (symbol, 0) = ggc_alloc_string (newstr, len);\n     }\n \n-  /* This decl is marked as being in small data/bss but it shouldn't be;\n-     one likely explanation for this is that the decl has been moved into\n-     a different section from the one it was in when ENCODE_SECTION_INFO\n-     was first called.  Remove the '@'.  */\n+  /* This decl is marked as being in small data/bss but it shouldn't\n+     be; one likely explanation for this is that the decl has been\n+     moved into a different section from the one it was in when\n+     targetm.encode_section_info was first called.  Remove the '@'.  */\n   else if (symbol_str[0] == SDATA_NAME_FLAG_CHAR)\n     XSTR (symbol, 0) = ggc_strdup (symbol_str + 1);\n }"}, {"sha": "eaa1a7d1c5970e064a046c930953d33789b5053c", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1774,12 +1774,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define BSS_SECTION_ASM_OP \"\\t.bss\"\n \n-/* Define this macro if references to a symbol must be treated differently\n-   depending on something about the variable or function named by the symbol\n-   (such as what section it is in).  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST) ia64_encode_section_info (DECL, FIRST)\n-\n #define SDATA_NAME_FLAG_CHAR '@'\n \n #define IA64_DEFAULT_GVALUE 8"}, {"sha": "4687e754d0988acd203159261edf0169ecabce01", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -33,7 +33,6 @@ extern void   m32r_finalize_pic\t\t\tPARAMS ((void));\n extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n-extern void   m32r_encode_section_info\t\tPARAMS ((tree, int));\n extern enum m32r_function_type m32r_compute_function_type PARAMS ((tree));\n \n #ifdef HAVE_MACHINE_MODES"}, {"sha": "6140d0ff10a32475f231b046bf18fc28d6f97c99", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -75,6 +75,7 @@ static int    m32r_variable_issue  PARAMS ((FILE *, int, rtx, int));\n static int    m32r_issue_rate\t   PARAMS ((void));\n \n static void m32r_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n+static void m32r_encode_section_info PARAMS ((tree, int));\n \n \f\n /* Initialize the GCC target structure.  */\n@@ -104,6 +105,9 @@ static void m32r_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n #undef TARGET_SCHED_REORDER\n #define TARGET_SCHED_REORDER m32r_sched_reorder\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO m32r_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n@@ -368,7 +372,7 @@ m32r_select_section (decl, reloc, align)\n      large: prefixed with LARGE_FLAG_CHAR\n */\n \n-void\n+static void\n m32r_encode_section_info (decl, first)\n      tree decl;\n      int first;"}, {"sha": "2d2b637e236fbb96ac2dc355883914fbbdb30ab8", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1612,11 +1612,8 @@ sbss_section ()\t\t\t\t\t\t\t\t\\\n  || MEDIUM_NAME_P (SYMBOL_NAME) \\\n  || LARGE_NAME_P (SYMBOL_NAME))\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST) m32r_encode_section_info (DECL, FIRST)\n-\n /* Decode SYM_NAME and store the real name part in VAR, sans\n-   the characters that encode section info.  Define this macro if\n-   ENCODE_SECTION_INFO alters the symbol's name string.  */\n+   the characters that encode section info.  */\n /* Note that we have to handle symbols like \"%*start\".  */\n #define STRIP_NAME_ENCODING(VAR, SYMBOL_NAME) \\\n do {\t\t\t\t\t\t\t\\\n@@ -1800,12 +1797,7 @@ extern char m32r_punct_chars[256];\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) \\\n   m32r_print_operand_address (FILE, ADDR)\n "}, {"sha": "2feca9192aacc0fc7eba294fc034d0be4b3fcc2e", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -41,7 +41,6 @@ extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,\n                                                  tree,\n                                                  int));\n-extern void m68hc11_encode_section_info PARAMS((tree, int));\n #endif\n \n #ifdef RTX_CODE"}, {"sha": "ab2b768d872d02b819468e0a059ddc4e870f97bb", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -64,6 +64,7 @@ static int go_if_legitimate_address_internal PARAMS((rtx, enum machine_mode,\n                                                      int));\n static int register_indirect_p PARAMS((rtx, enum machine_mode, int));\n static rtx m68hc11_expand_compare PARAMS((enum rtx_code, rtx, rtx));\n+static int m68hc11_autoinc_compatible_p PARAMS ((rtx, rtx));\n static int must_parenthesize PARAMS ((rtx));\n static int m68hc11_shift_cost PARAMS ((enum machine_mode, rtx, int));\n static int m68hc11_auto_inc_p PARAMS ((rtx));\n@@ -77,6 +78,7 @@ static void asm_print_register PARAMS ((FILE *, int));\n static void m68hc11_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void m68hc11_asm_out_constructor PARAMS ((rtx, int));\n static void m68hc11_asm_out_destructor PARAMS ((rtx, int));\n+static void m68hc11_encode_section_info PARAMS((tree, int));\n \n rtx m68hc11_soft_tmp_reg;\n \n@@ -219,6 +221,9 @@ static int nb_soft_regs;\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE m68hc11_output_function_epilogue\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  m68hc11_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n int\n@@ -1225,16 +1230,14 @@ m68hc11_handle_fntype_attribute (node, name, args, flags, no_add_attrs)\n   return NULL_TREE;\n }\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or function\n-   named by the symbol (such as what section it is in).\n+/* We want to recognize trap handlers so that we handle calls to traps\n+   in a special manner (by issuing the trap).  This information is stored\n+   in SYMBOL_REF_FLAG.  */\n \n-   For the 68HC11, we want to recognize trap handlers so that we\n-   handle calls to traps in a special manner (by issuing the trap).\n-   This information is stored in SYMBOL_REF_FLAG.  */\n-void\n-m68hc11_encode_section_info (decl)\n+static void\n+m68hc11_encode_section_info (decl, first)\n      tree decl;\n+     int first ATTRIBUTE_UNUSED;\n {\n   tree func_attr;\n   int trap_handler;"}, {"sha": "47a5cd83b7ab46edbef0baf4df98fdfc1a5d5fd9", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1138,17 +1138,6 @@ typedef struct m68hc11_args\n   m68hc11_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n \n \f\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or function\n-   named by the symbol (such as what section it is in).\n-\n-   For the 68HC11, we want to recognize trap handlers so that we\n-   handle calls to traps in a special manner (by issuing the trap).\n-   This information is stored in SYMBOL_REF_FLAG.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  m68hc11_encode_section_info (DECL, FIRST)\n-\n /* `INIT_TARGET_OPTABS'\n      Define this macro as a C statement that declares additional library\n      routines renames existing ones. `init_optabs' calls this macro"}, {"sha": "de849695c367de4ff770470c213e76e9301aea15", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1929,12 +1929,7 @@ __transfer_from_trampoline ()\t\t\t\t\t\\\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n "}, {"sha": "5fefab007905839b62e086a675173ed2146eff76", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -73,6 +73,7 @@ static void m88k_svr3_asm_out_destructor PARAMS ((rtx, int));\n #endif\n static void m88k_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n static int m88k_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+static void m88k_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_BYTE_OP\n@@ -98,6 +99,9 @@ static int m88k_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST m88k_adjust_cost\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  m88k_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Determine what instructions are needed to manufacture the integer VALUE\n@@ -3378,3 +3382,29 @@ m88k_adjust_cost (insn, link, dep, cost)\n \n   return cost;\n }\n+\n+/* For the m88k, determine if the item should go in the global pool.  */\n+\n+static void\n+m88k_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (m88k_gp_threshold > 0)\n+    {\n+      if (TREE_CODE (decl) == VAR_DECL)\n+\t{\n+\t  if (!TREE_READONLY (decl) || TREE_SIDE_EFFECTS (decl))\n+\t    {\n+\t      int size = int_size_in_bytes (TREE_TYPE (decl));\n+\n+\t      if (size > 0 && size <= m88k_gp_threshold)\n+\t\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+\t    }\n+\t}\n+      else if (TREE_CODE (decl) == STRING_CST\n+\t       && flag_writable_strings\n+\t       && TREE_STRING_LENGTH (decl) <= m88k_gp_threshold)\n+\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 1;\n+    }\n+}"}, {"sha": "30c7070d36f2118d374734b44ccbad30ca7e8d5e", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2350,36 +2350,6 @@ sdata_section ()\t\t\t\t\t\t\t\\\n    the text section.  When we use a table of addresses, we explicitly\n    change to the readonly data section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n-\n-/* Define this macro if references to a symbol must be treated differently\n-   depending on something about the variable or function named by the\n-   symbol (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the rtl for\n-   DECL has been created and stored in `DECL_RTL (DECL)'.  The value of the\n-   rtl will be a `mem' whose address is a `symbol_ref'.\n-\n-   For the m88k, determine if the item should go in the global pool.  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (m88k_gp_threshold > 0)\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\t\\\n-      if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\t\\\n-\t{\t\t\t\t\t\t\t\t\\\n-\t  if (!TREE_READONLY (DECL) || TREE_SIDE_EFFECTS (DECL))\t\\\n-\t    {\t\t\t\t\t\t\t\t\\\n-\t      int size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\t      if (size > 0 && size <= m88k_gp_threshold)\t\t\\\n-\t\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\\\n-\t    }\t\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-      else if (TREE_CODE (DECL) == STRING_CST\t\t\t\t\\\n-\t       && flag_writable_strings\t\t\t\t\t\\\n-\t       && TREE_STRING_LENGTH (DECL) <= m88k_gp_threshold)\t\\\n-\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 1;\t\t\\\n-    }\t\t\t\t\t\t\t\t\t\\\n-  } while (0)\n \f\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified."}, {"sha": "f985de4c0a2f9b7379b4a6fde4e91620d7125002", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -35,8 +35,6 @@ extern int          mcore_dllimport_name_p       \tPARAMS ((const char *));\n extern int          mcore_naked_function_p       \tPARAMS ((void));\n \n #ifdef TREE_CODE\n-extern void         mcore_encode_section_info    \tPARAMS ((tree, int));\n-\n #ifdef HAVE_MACHINE_MODES\n extern int          mcore_function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));\n extern void         mcore_setup_incoming_varargs\tPARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int *));"}, {"sha": "61fc5bddbffbfa00bfe432865496ecacb715237c", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -138,6 +138,7 @@ static void\t  mcore_asm_named_section      PARAMS ((const char *,\n \t\t\t\t\t\t\tunsigned int));\n #endif\n static void       mcore_unique_section\t       PARAMS ((tree, int));\n+static void mcore_encode_section_info\t\tPARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n@@ -156,6 +157,8 @@ static void       mcore_unique_section\t       PARAMS ((tree, int));\n #define TARGET_ATTRIBUTE_TABLE mcore_attribute_table\n #undef TARGET_ASM_UNIQUE_SECTION\n #define TARGET_ASM_UNIQUE_SECTION mcore_unique_section\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO mcore_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -3417,8 +3420,10 @@ mcore_dllimport_p (decl)\n   return lookup_attribute (\"dllimport\", DECL_ATTRIBUTES (decl)) != 0;\n }\n \n-/* Cover function to implement ENCODE_SECTION_INFO.  */\n-void\n+/* We must mark dll symbols specially.  Definitions of dllexport'd objects\n+   install some info in the .drective (PE) or .exports (ELF) sections.   */\n+\n+static void\n mcore_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;"}, {"sha": "da9d20c57a5229cd17495dec0c9f280af65ade2e", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1137,8 +1137,8 @@ switch_to_section (section, decl)\t\t\t\t\\\n #define MCORE_STRIP_NAME_ENCODING(SYM_NAME) \\\n   ((SYM_NAME) + ((SYM_NAME)[0] == '@' ? 3 : 0))\n \n-/* Strip any text from SYM_NAME added by ENCODE_SECTION_INFO and store\n-   the result in VAR.  */\n+/* Strip any text from SYM_NAME added by targetm.encode_section_info\n+   and store the result in VAR.  */\n #undef  STRIP_NAME_ENCODING\n #define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n   (VAR) = MCORE_STRIP_NAME_ENCODING (SYM_NAME)\n@@ -1292,12 +1292,6 @@ extern long mcore_current_compilation_timestamp;\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* We must mark dll symbols specially.  Definitions of dllexport'd objects\n-   install some info in the .drective (PE) or .exports (ELF) sections.   */\n-#undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  mcore_encode_section_info (DECL, FIRST)\n-\n /* Print operand X (an rtx) in assembler syntax to file FILE.\n    CODE is a letter or dot (`z' in `%z0') or 0 if no letter was specified.\n    For `%' followed by punctuation, CODE is the punctuation and X is null.  */"}, {"sha": "123028c759e6347aa2278cb09e8ea3699548079d", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 123, "deletions": 13, "changes": 136, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -152,7 +152,7 @@ static void mips_unique_section\t\t\tPARAMS ((tree, int))\n \tATTRIBUTE_UNUSED;\n static void mips_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n-\n+static void mips_encode_section_info\t\tPARAMS ((tree, int));\n \n struct machine_function {\n   /* Pseudo-reg holding the address of the current function when\n@@ -579,10 +579,12 @@ enum reg_class mips_char_to_class[256] =\n \n #undef TARGET_SCHED_ADJUST_COST\n #define TARGET_SCHED_ADJUST_COST mips_adjust_cost\n-\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE mips_issue_rate\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO mips_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Return truth value of whether OP can be used as an operands\n@@ -5897,12 +5899,7 @@ print_operand (file, op, letter)\n \f\n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n void\n print_operand_address (file, addr)\n@@ -7945,13 +7942,16 @@ mips_select_rtx_section (mode, x, align)\n    any relocatable expression.\n \n    Some of the logic used here needs to be replicated in\n-   ENCODE_SECTION_INFO in mips.h so that references to these symbols\n-   are done correctly.  Specifically, at least all symbols assigned\n-   here to rom (.text and/or .rodata) must not be referenced via\n-   ENCODE_SECTION_INFO with %gprel, as the rom might be too far away.\n+   mips_encode_section_info so that references to these symbols are\n+   done correctly.  Specifically, at least all symbols assigned here\n+   to rom (.text and/or .rodata) must not be referenced via\n+   mips_encode_section_info with %gprel, as the rom might be too far\n+   away.\n \n    If you need to make a change here, you probably should check\n-   ENCODE_SECTION_INFO to see if it needs a similar change.  */\n+   mips_encode_section_info to see if it needs a similar change.\n+\n+   ??? This would be fixed by implementing targetm.is_small_data_p.  */\n \n static void\n mips_select_section (decl, reloc, align)\n@@ -8012,6 +8012,116 @@ mips_select_section (decl, reloc, align)\n \tdata_section ();\n     }\n }\n+\n+/* When optimizing for the $gp pointer, SYMBOL_REF_FLAG is set for all\n+   small objects.\n+\n+   When generating embedded PIC code, SYMBOL_REF_FLAG is set for\n+   symbols which are not in the .text section.\n+\n+   When generating mips16 code, SYMBOL_REF_FLAG is set for string\n+   constants which are put in the .text section.  We also record the\n+   total length of all such strings; this total is used to decide\n+   whether we need to split the constant table, and need not be\n+   precisely correct.\n+\n+   When not mips16 code nor embedded PIC, if a symbol is in a\n+   gp addresable section, SYMBOL_REF_FLAG is set prevent gcc from\n+   splitting the reference so that gas can generate a gp relative\n+   reference.\n+\n+   When TARGET_EMBEDDED_DATA is set, we assume that all const\n+   variables will be stored in ROM, which is too far from %gp to use\n+   %gprel addressing.  Note that (1) we include \"extern const\"\n+   variables in this, which mips_select_section doesn't, and (2) we\n+   can't always tell if they're really const (they might be const C++\n+   objects with non-const constructors), so we err on the side of\n+   caution and won't use %gprel anyway (otherwise we'd have to defer\n+   this decision to the linker/loader).  The handling of extern consts\n+   is why the DECL_INITIAL macros differ from mips_select_section.  */\n+\n+static void\n+mips_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  if (TARGET_MIPS16)\n+    {\n+      if (first && TREE_CODE (decl) == STRING_CST\n+\t  && ! flag_writable_strings\n+\t  /* If this string is from a function, and the function will\n+\t     go in a gnu linkonce section, then we can't directly\n+\t     access the string.  This gets an assembler error\n+\t     \"unsupported PC relative reference to different section\".\n+\t     If we modify SELECT_SECTION to put it in function_section\n+\t     instead of text_section, it still fails because\n+\t     DECL_SECTION_NAME isn't set until assemble_start_function.\n+\t     If we fix that, it still fails because strings are shared\n+\t     among multiple functions, and we have cross section\n+\t     references again.  We force it to work by putting string\n+\t     addresses in the constant pool and indirecting.  */\n+\t  && (! current_function_decl\n+\t      || ! DECL_ONE_ONLY (current_function_decl)))\n+\t{\n+\t  SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 1;\n+\t  mips_string_length += TREE_STRING_LENGTH (decl);\n+\t}\n+    }\n+\n+  if (TARGET_EMBEDDED_DATA\n+      && (TREE_CODE (decl) == VAR_DECL\n+\t  && TREE_READONLY (decl) && !TREE_SIDE_EFFECTS (decl))\n+      && (!DECL_INITIAL (decl)\n+\t  || TREE_CONSTANT (DECL_INITIAL (decl))))\n+    {\n+      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 0;\n+    }\n+\n+  else if (TARGET_EMBEDDED_PIC)\n+    {\n+      if (TREE_CODE (decl) == VAR_DECL)\n+\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+      else if (TREE_CODE (decl) == FUNCTION_DECL)\n+\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 0;\n+      else if (TREE_CODE (decl) == STRING_CST\n+\t       && ! flag_writable_strings)\n+\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 0;\n+      else\n+\tSYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (decl), 0)) = 1;\n+    }\n+\n+  else if (TREE_CODE (decl) == VAR_DECL\n+\t   && DECL_SECTION_NAME (decl) != NULL_TREE\n+\t   && (0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t\t    \".sdata\")\n+\t       || 0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (decl)),\n+\t\t\t       \".sbss\")))\n+    {\n+      SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+    }\n+\n+  /* We can not perform GP optimizations on variables which are in\n+       specific sections, except for .sdata and .sbss which are\n+       handled above.  */\n+  else if (TARGET_GP_OPT && TREE_CODE (decl) == VAR_DECL\n+\t   && DECL_SECTION_NAME (decl) == NULL_TREE\n+\t   && ! (TARGET_MIPS16 && TREE_PUBLIC (decl)\n+\t\t && (DECL_COMMON (decl)\n+\t\t     || DECL_ONE_ONLY (decl)\n+\t\t     || DECL_WEAK (decl))))\n+    {\n+      int size = int_size_in_bytes (TREE_TYPE (decl));\n+\n+      if (size > 0 && size <= mips_section_threshold)\n+\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+    }\n+\n+  else if (HALF_PIC_P ())\n+    {\n+      if (first)\n+\tHALF_PIC_ENCODE (decl);\n+    }\n+}\n \f\n /* Return register to use for a function return value with VALTYPE for\n    function FUNC.  MODE is used instead of VALTYPE for LIBCALLs.  */"}, {"sha": "e18cf2f8d3383353262131212aa118b625ecaa12", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 2, "deletions": 190, "changes": 192, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -3054,53 +3054,7 @@ typedef struct mips_args {\n \n /* A C compound statement with a conditional `goto LABEL;' executed\n    if X (an RTX) is a legitimate memory address on the target\n-   machine for a memory operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as\n-   subroutines for this one.  Otherwise it may be too complicated\n-   to understand.\n-\n-   This macro must exist in two variants: a strict variant and a\n-   non-strict one.  The strict variant is used in the reload pass.\n-   It must be defined so that any pseudo-register that has not been\n-   allocated a hard register is considered a memory reference.  In\n-   contexts where some kind of register is required, a\n-   pseudo-register with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be\n-   defined to accept all pseudo-registers in every context where\n-   some kind of register is required.\n-\n-   Compiler source files that want to use the strict variant of\n-   this macro define the macro `REG_OK_STRICT'.  You should use an\n-   `#ifdef REG_OK_STRICT' conditional to define the strict variant\n-   in that case and the non-strict variant otherwise.\n-\n-   Typically among the subroutines used to define\n-   `GO_IF_LEGITIMATE_ADDRESS' are subroutines to check for\n-   acceptable registers for various purposes (one for base\n-   registers, one for index registers, and so on).  Then only these\n-   subroutine macros need have two variants; the higher levels of\n-   macros may be the same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref'\n-   and an integer are stored inside a `const' RTX to mark them as\n-   constant.  Therefore, there is no need to recognize such sums\n-   specifically as legitimate addresses.  Normally you would simply\n-   recognize any `const' as legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle\n-   constant sums that are not marked with  `const'.  It assumes\n-   that a naked `plus' indicates indexing.  If so, then you *must*\n-   reject such naked constant sums as illegitimate addresses, so\n-   that none of them will be given to `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate\n-   depends on the section that the address refers to.  On these\n-   machines, define the macro `ENCODE_SECTION_INFO' to store the\n-   information into the `symbol_ref', and then check for it here.\n-   When you see a `const', you will have to look inside it to find\n-   the `symbol_ref' in order to determine the section.  */\n+   machine for a memory operand of mode MODE.  */\n \n #if 1\n #define GO_PRINTF(x)\tfprintf(stderr, (x))\n@@ -3306,143 +3260,6 @@ typedef struct mips_args {\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL) {}\n \n-\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the\n-   rtl for DECL has been created and stored in `DECL_RTL (DECL)'.\n-   The value of the rtl will be a `mem' whose address is a\n-   `symbol_ref'.\n-\n-   The usual thing for this macro to do is to a flag in the\n-   `symbol_ref' (such as `SYMBOL_REF_FLAG') or to store a modified\n-   name string in the `symbol_ref' (if one bit is not enough\n-   information).\n-\n-   The best way to modify the name string is by adding text to the\n-   beginning, with suitable punctuation to prevent any ambiguity.\n-   Allocate the new name in `saveable_obstack'.  You will have to\n-   modify `ASM_OUTPUT_LABELREF' to remove and decode the added text\n-   and output the name accordingly.\n-\n-   You can also check the information stored in the `symbol_ref' in\n-   the definition of `GO_IF_LEGITIMATE_ADDRESS' or\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   When optimizing for the $gp pointer, SYMBOL_REF_FLAG is set for all\n-   small objects.\n-\n-   When generating embedded PIC code, SYMBOL_REF_FLAG is set for\n-   symbols which are not in the .text section.\n-\n-   When generating mips16 code, SYMBOL_REF_FLAG is set for string\n-   constants which are put in the .text section.  We also record the\n-   total length of all such strings; this total is used to decide\n-   whether we need to split the constant table, and need not be\n-   precisely correct.\n-\n-   When not mips16 code nor embedded PIC, if a symbol is in a\n-   gp addresable section, SYMBOL_REF_FLAG is set prevent gcc from\n-   splitting the reference so that gas can generate a gp relative\n-   reference.\n-\n-   When TARGET_EMBEDDED_DATA is set, we assume that all const\n-   variables will be stored in ROM, which is too far from %gp to use\n-   %gprel addressing.  Note that (1) we include \"extern const\"\n-   variables in this, which mips_select_section doesn't, and (2) we\n-   can't always tell if they're really const (they might be const C++\n-   objects with non-const constructors), so we err on the side of\n-   caution and won't use %gprel anyway (otherwise we'd have to defer\n-   this decision to the linker/loader).  The handling of extern consts\n-   is why the DECL_INITIAL macros differ from mips_select_section.\n-\n-   If you are changing this macro, you should look at\n-   mips_select_section and see if it needs a similar change.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_MIPS16)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif ((FIRST) && TREE_CODE (DECL) == STRING_CST\t\t\t\\\n-\t    && ! flag_writable_strings\t\t\t\t\t\\\n-\t    /* If this string is from a function, and the function will\t\\\n-\t       go in a gnu linkonce section, then we can't directly\t\\\n-\t       access the string.  This gets an assembler error\t\t\\\n-\t       \"unsupported PC relative reference to different section\".\\\n-\t       If we modify SELECT_SECTION to put it in function_section\\\n-\t       instead of text_section, it still fails because\t\t\\\n-\t       DECL_SECTION_NAME isn't set until assemble_start_function.\\\n-\t       If we fix that, it still fails because strings are shared\\\n-\t       among multiple functions, and we have cross section\t\\\n-\t       references again.  We force it to work by putting string\t\\\n-\t       addresses in the constant pool and indirecting.  */\t\\\n-\t    && (! current_function_decl\t\t\t\t\t\\\n-\t\t|| ! DECL_ONE_ONLY (current_function_decl)))\t\t\\\n-\t  {\t\t\t\t\t\t\t\t\\\n-\t    SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 1;\t\\\n-\t    mips_string_length += TREE_STRING_LENGTH (DECL);\t\t\\\n-\t  }\t\t\t\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_EMBEDDED_DATA\t\t\t\t\t\t\\\n-\t&& (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n-\t    && TREE_READONLY (DECL) && !TREE_SIDE_EFFECTS (DECL))\t\\\n-\t    && (!DECL_INITIAL (DECL)\t\t\t\t\t\\\n-\t\t|| TREE_CONSTANT (DECL_INITIAL (DECL))))\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 0;\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    else if (TARGET_EMBEDDED_PIC)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        if (TREE_CODE (DECL) == VAR_DECL)\t\t\t\t\\\n-\t  SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-        else if (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\t\\\n-\t  SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 0;\t\t\\\n-\telse if (TREE_CODE (DECL) == STRING_CST\t\t\t\t\\\n-\t\t && ! flag_writable_strings)\t\t\t\t\\\n-\t  SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 0;\t\t\\\n-        else\t\t\t\t\t\t\t\t\\\n-\t  SYMBOL_REF_FLAG (XEXP (TREE_CST_RTL (DECL), 0)) = 1;\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    else if (TREE_CODE (DECL) == VAR_DECL\t\t\t\t\\\n-             && DECL_SECTION_NAME (DECL) != NULL_TREE                   \\\n-             && (0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (DECL)), \\\n-                              \".sdata\")                                 \\\n-                || 0 == strcmp (TREE_STRING_POINTER (DECL_SECTION_NAME (DECL)),\\\n-                              \".sbss\")))                                \\\n-      {\t\t\t\t\t\t\t\t\t\\\n-        SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    /* We can not perform GP optimizations on variables which are in\t\\\n-       specific sections, except for .sdata and .sbss which are\t\t\\\n-       handled above.  */\t\t\t\t\t\t\\\n-    else if (TARGET_GP_OPT && TREE_CODE (DECL) == VAR_DECL\t\t\\\n-\t     && DECL_SECTION_NAME (DECL) == NULL_TREE\t\t\t\\\n-\t     && ! (TARGET_MIPS16 && TREE_PUBLIC (DECL)\t\t\t\\\n-\t\t   && (DECL_COMMON (DECL)\t\t\t\t\\\n-\t\t       || DECL_ONE_ONLY (DECL)\t\t\t\t\\\n-\t\t       || DECL_WEAK (DECL))))\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tint size = int_size_in_bytes (TREE_TYPE (DECL));\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-\tif (size > 0 && size <= mips_section_threshold)\t\t\t\\\n-\t  SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\t\\\n-    else if (HALF_PIC_P ())\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tif (FIRST)\t\t\t\t\t\t\t\\\n-          HALF_PIC_ENCODE (DECL);\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* This handles the magic '..CURRENT_FUNCTION' symbol, which means\n    'the start of the function that this code is output in'.  */\n \n@@ -4383,12 +4200,7 @@ while (0)\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro `ENCODE_SECTION_INFO' to store the information\n-   into the `symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n #define PRINT_OPERAND_ADDRESS(FILE, ADDR) print_operand_address (FILE, ADDR)\n "}, {"sha": "baa0849480af4ead685ca0abe4d6d59fd384eb4a", "filename": "gcc/config/mmix/mmix-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -74,7 +74,6 @@ extern int mmix_constant_alignment PARAMS ((tree, int));\n extern int mmix_local_alignment PARAMS ((tree, int));\n extern void mmix_setup_incoming_varargs\n   PARAMS ((CUMULATIVE_ARGS *, enum machine_mode, tree, int *, int));\n-extern void mmix_encode_section_info PARAMS ((tree, int));\n extern void mmix_asm_output_pool_prologue\n   PARAMS ((FILE *, const char *, tree, int));\n extern void mmix_asm_output_aligned_common"}, {"sha": "d798fa91031f582dcdf92d9e2469321b3489b8eb", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -98,6 +98,7 @@ static HOST_WIDEST_INT mmix_intval PARAMS ((rtx));\n static void mmix_output_octa PARAMS ((FILE *, HOST_WIDEST_INT, int));\n static bool mmix_assemble_integer PARAMS ((rtx, unsigned int, int));\n static void mmix_init_machine_status PARAMS ((struct function *));\n+static void mmix_encode_section_info PARAMS ((tree, int));\n \n extern void mmix_target_asm_function_prologue\n   PARAMS ((FILE *, HOST_WIDE_INT));\n@@ -127,6 +128,9 @@ extern void mmix_target_asm_function_epilogue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE mmix_target_asm_function_epilogue\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  mmix_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n /* Functions that are expansions for target macros.\n@@ -1713,9 +1717,7 @@ mmix_data_section_asm_op ()\n   return \"\\t.data ! mmixal:= 8H LOC 9B\";\n }\n \n-/* ENCODE_SECTION_INFO.  */\n-\n-void\n+static void\n mmix_encode_section_info (decl, first)\n      tree decl;\n      int first;"}, {"sha": "9eb968b74bff3b40259ba4ab0a03ff31b1e55c96", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -907,9 +907,6 @@ typedef struct { int regs; int lib; int now_varargs; } CUMULATIVE_ARGS;\n \n #define READONLY_DATA_SECTION_ASM_OP\t\"\\t.section\\t.rodata\"\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n- mmix_encode_section_info (DECL, FIRST)\n-\n #define STRIP_NAME_ENCODING(VAR, SYM_NAME) \\\n  (VAR) = mmix_strip_name_encoding (SYM_NAME)\n "}, {"sha": "5c5252cbf025aab7326335ef17dcb4be27de77ed", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -69,6 +69,7 @@ static tree ns32k_handle_fntype_attribute PARAMS ((tree *, tree, tree, int, bool\n const struct attribute_spec ns32k_attribute_table[];\n static void ns32k_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n+static void ns32k_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -86,6 +87,8 @@ static void ns32k_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n #define TARGET_ASM_FUNCTION_PROLOGUE ns32k_output_function_prologue\n #undef TARGET_ASM_FUNCTION_EPILOGUE\n #define TARGET_ASM_FUNCTION_EPILOGUE ns32k_output_function_epilogue\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO ns32k_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -1552,3 +1555,21 @@ output_move_dconst (n, s)\n   strcat (r, s);\n   return r;\n }\n+\n+/* If using PIC, mark a SYMBOL_REF for a non-global symbol or a code\n+   symbol. These symbols are referenced via pc and not via sb. */\n+\n+static void\n+ns32k_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0))\n+\t= (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t   || ! TREE_PUBLIC (decl));\n+    }\n+}"}, {"sha": "f8a3cba80db0546800ec659b85e10a48afe82f45", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1046,29 +1046,6 @@ __transfer_from_trampoline ()\t\t\\\n  || GET_CODE (X) == LABEL_REF\t\t\t\t\t\t\\\n  || (GET_CODE (X) == CONST && symbolic_reference_mentioned_p (X)))\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On the ns32k, if using PIC, mark a SYMBOL_REF for a non-global\n-   symbol or a code symbol. These symbols are referenced via pc\n-   and not via sb. */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-do\t\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    extern int flag_pic;\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (rtl, 0))\t\t\t\t\t\\\n-\t  = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\t\\\n-\t     || ! TREE_PUBLIC (DECL));\t\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* Go to LABEL if ADDR (a legitimate address expression)\n    has an effect that depends on the machine mode it is used for.\n    On the ns32k, only predecrement and postincrement address depend thus"}, {"sha": "e5b7478154ea43fc37333583b688c02bc4366e08", "filename": "gcc/config/pa/elf.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Felf.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -85,9 +85,9 @@ do {  \\\n    \"imported\", even library calls. They look a bit different, so\n    here's this macro.\n \n-   Also note not all libcall names are passed to ENCODE_SECTION_INFO\n-   (__main for example).  To make sure all libcall names have section\n-   info recorded in them, we do it here.  */\n+   Also note not all libcall names are passed to\n+   targetm.encode_section_info (__main for example).  To make sure all\n+   libcall names have section info recorded in them, we do it here.  */\n \n #undef ASM_OUTPUT_EXTERNAL_LIBCALL\n #define ASM_OUTPUT_EXTERNAL_LIBCALL(FILE, RTL) \\"}, {"sha": "d12c1be910a02d77791548e33e6869178a55f702", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -116,6 +116,7 @@ static int pa_adjust_priority PARAMS ((rtx, int));\n static int pa_issue_rate PARAMS ((void));\n static void pa_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT))\n      ATTRIBUTE_UNUSED;\n+static void pa_encode_section_info PARAMS ((tree, int));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -185,6 +186,9 @@ int n_deferred_plabels = 0;\n #undef TARGET_SCHED_ISSUE_RATE\n #define TARGET_SCHED_ISSUE_RATE pa_issue_rate\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO pa_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n void\n@@ -1828,8 +1832,9 @@ reloc_needed (exp)\n   return reloc;\n }\n \n-/* Does operand (which is a symbolic_operand) live in text space? If\n-   so SYMBOL_REF_FLAG, which is set by ENCODE_SECTION_INFO, will be true.  */\n+/* Does operand (which is a symbolic_operand) live in text space?\n+   If so, SYMBOL_REF_FLAG, which is set by pa_encode_section_info,\n+   will be true.  */\n \n int\n read_only_operand (operand, mode)\n@@ -6436,6 +6441,25 @@ hppa_encode_label (sym)\n   XSTR (sym, 0) = ggc_alloc_string (newstr, len);\n }\n \n+static void\n+pa_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  if (first && TEXT_SPACE_P (decl))\n+    {\n+      rtx rtl;\n+      if (TREE_CODE (decl) == FUNCTION_DECL\n+\t  || TREE_CODE (decl) == VAR_DECL)\n+\trtl = DECL_RTL (decl);\n+      else\n+\trtl = TREE_CST_RTL (decl);\n+      SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;\n+      if (TREE_CODE (decl) == FUNCTION_DECL)\n+\thppa_encode_label (XEXP (DECL_RTL (decl), 0));\n+    }\n+}\n+\n int\n function_label_operand (op, mode)\n      rtx op;"}, {"sha": "55e4311b1a316c2c154613fe6e0609b7629e5f15", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1522,24 +1522,8 @@ do { \t\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_NAME_P(NAME)  (*(NAME) == '@')\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n-do\t\t\t\t\t\t\t\\\n-  { if (FIRST && TEXT_SPACE_P (DECL))\t\t\t\\\n-      {\trtx _rtl;\t\t\t\t\t\\\n-\tif (TREE_CODE (DECL) == FUNCTION_DECL\t\t\\\n-\t    || TREE_CODE (DECL) == VAR_DECL)\t\t\\\n-\t  _rtl = DECL_RTL (DECL);\t\t\t\\\n-\telse\t\t\t\t\t\t\\\n-\t  _rtl = TREE_CST_RTL (DECL);\t\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (_rtl, 0)) = 1;\t\t\\\n-\tif (TREE_CODE (DECL) == FUNCTION_DECL)\t\t\\\n-\t  hppa_encode_label (XEXP (DECL_RTL (DECL), 0));\\\n-      }\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\\\n-while (0)\n-\n /* Store the user-specified part of SYMBOL_NAME in VAR.\n-   This is sort of inverse to ENCODE_SECTION_INFO.  */\n+   This is sort of inverse to targetm.encode_section_info.  */\n \n #define STRIP_NAME_ENCODING(VAR,SYMBOL_NAME)\t\\\n   (VAR) = ((SYMBOL_NAME)\t\t\t\\"}, {"sha": "7c17ff6b8103ca5aa3dc104f39a3f05ea71bc7e7", "filename": "gcc/config/pa/som.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fsom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fpa%2Fsom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fsom.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -322,7 +322,7 @@ readonly_data ()\t\t\t\t\t\t\t\\\n    \"imported\", even library calls. They look a bit different, so\n    here's this macro.\n \n-   Also note not all libcall names are passed to ENCODE_SECTION_INFO\n+   Also note not all libcall names are passed to pa_encode_section_info\n    (__main for example).  To make sure all libcall names have section\n    info recorded in them, we do it here.  We must also ensure that\n    we don't import a libcall that has been previously exported since"}, {"sha": "f60fcde56883d50ee686037a59b926ec18c3bb12", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -55,6 +55,7 @@ static void romp_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void romp_output_function_epilogue PARAMS ((FILE *, HOST_WIDE_INT));\n static void romp_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n+static void romp_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_FUNCTION_PROLOGUE\n@@ -63,6 +64,8 @@ static void romp_select_rtx_section PARAMS ((enum machine_mode, rtx,\n #define TARGET_ASM_FUNCTION_EPILOGUE romp_output_function_epilogue\n #undef TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION romp_select_rtx_section\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO romp_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2083,3 +2086,16 @@ romp_select_rtx_section (mode, x, align)\n {\n   data section ();\n }\n+\n+/* For no good reason, we do the same as the other RT compilers and load\n+   the addresses of data areas for a function from our data area.  That means\n+   that we need to mark such SYMBOL_REFs.  We do so here.  */\n+\n+static void\n+romp_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TREE_CODE (TREE_TYPE (decl)) == FUNCTION_TYPE)\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "2b1674175b58a67b2231561f048f0597df41bc72", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -904,13 +904,6 @@ struct rt_cargs {int gregs, fregs; };\n     || GET_CODE (X) == CONST_DOUBLE)\t\t\\\n    && ! (GET_CODE (X) == SYMBOL_REF && SYMBOL_REF_FLAG (X)))\n \n-/* For no good reason, we do the same as the other RT compilers and load\n-   the addresses of data areas for a function from our data area.  That means\n-   that we need to mark such SYMBOL_REFs.  We do so here.  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n-  if (TREE_CODE (TREE_TYPE (DECL)) == FUNCTION_TYPE)\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n-\n /* The macros REG_OK_FOR..._P assume that the arg is a REG rtx\n    and check its validity for a certain class.\n    We have two alternate definitions for each of them."}, {"sha": "012aecbb6f923239437f3c7d3b43d33d445eb502", "filename": "gcc/config/rs6000/linux64.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Flinux64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Flinux64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Flinux64.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -212,17 +212,8 @@ Boston, MA 02111-1307, USA.  */\n #undef  PREFERRED_DEBUGGING_TYPE\n #define PREFERRED_DEBUGGING_TYPE DWARF2_DEBUG\n \n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to indicate\n-   that we can branch to this function without emitting a no-op after the\n-   call.  Do not set this flag if the function is weakly defined.  */\n-\n-#undef  ENCODE_SECTION_INFO\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\t\\\n-      && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))\t\\\n-      && ! DECL_WEAK (DECL))\t\t\t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n+#undef  TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  rs6000_xcoff_encode_section_info\n \n /* This is how to output a reference to a user-level label named NAME.\n    `assemble_name' uses this.  */"}, {"sha": "8d9d12eb81a0cd8569412c9d4ce7db55175952eb", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -145,7 +145,6 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t    int *, int));\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n-extern void rs6000_encode_section_info PARAMS ((tree, int));\n #ifdef ARGS_SIZE_RTX\n /* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));"}, {"sha": "e6e8ef93a543f6f9a402b0c26c308d6b83b73960", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -168,6 +168,7 @@ static void rs6000_elf_select_section PARAMS ((tree, int,\n static void rs6000_elf_unique_section PARAMS ((tree, int));\n static void rs6000_elf_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t   unsigned HOST_WIDE_INT));\n+static void rs6000_elf_encode_section_info PARAMS ((tree, int));\n #endif\n #ifdef OBJECT_FORMAT_COFF\n static void xcoff_asm_named_section PARAMS ((const char *, unsigned int));\n@@ -177,6 +178,8 @@ static void rs6000_xcoff_unique_section PARAMS ((tree, int));\n static void rs6000_xcoff_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t\t     unsigned HOST_WIDE_INT));\n #endif\n+static void rs6000_xcoff_encode_section_info PARAMS ((tree, int))\n+     ATTRIBUTE_UNUSED;\n static int rs6000_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int rs6000_adjust_priority PARAMS ((rtx, int));\n static int rs6000_issue_rate PARAMS ((void));\n@@ -11091,8 +11094,8 @@ rs6000_elf_unique_section (decl, reloc)\n    the function descriptor name.  This saves a lot of overriding code\n    to read the prefixes.  */\n \n-void\n-rs6000_encode_section_info (decl, first)\n+static void\n+rs6000_elf_encode_section_info (decl, first)\n      tree decl;\n      int first;\n {\n@@ -11684,6 +11687,12 @@ rs6000_xcoff_unique_section (decl, reloc)\n     }\n }\n \n+/* Select section for constant in constant pool.\n+\n+   On RS/6000, all constants are in the private read-only data area.\n+   However, if this is being placed in the TOC it must be output as a\n+   toc entry.  */\n+\n static void\n rs6000_xcoff_select_rtx_section (mode, x, align)\n      enum machine_mode mode;\n@@ -11696,3 +11705,16 @@ rs6000_xcoff_select_rtx_section (mode, x, align)\n     read_only_private_data_section ();\n }\n #endif /* OBJECT_FORMAT_COFF */\n+\n+/* Note that this is also used for ELF64.  */\n+\n+static void\n+rs6000_xcoff_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL\n+      && (TREE_ASM_WRITTEN (decl) || ! TREE_PUBLIC (decl))\n+      && ! DECL_WEAK (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "0c601d05a4495b1a054c5e1d963d94974858b35c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -776,17 +776,8 @@ extern int fixuplabelno;\n /* Historically we have also supported stabs debugging.  */\n #define\tDBX_DEBUGGING_INFO\n \n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to indicate\n-   that we can branch to this function without emitting a no-op after the\n-   call.  For real AIX calling sequences, we also replace the\n-   function name with the real name (1 or 2 leading .'s), rather than\n-   the function descriptor name.  This saves a lot of overriding code\n-   to read the prefixes.  */\n-\n-#undef\tENCODE_SECTION_INFO\n-#define\tENCODE_SECTION_INFO(DECL, FIRST) \\\n-  rs6000_encode_section_info (DECL, FIRST)\n+#undef\tTARGET_ENCODE_SECTION_INFO\n+#define\tTARGET_ENCODE_SECTION_INFO  rs6000_elf_encode_section_info\n \n /* The ELF version doesn't encode [DS] or whatever at the end of symbols.  */\n "}, {"sha": "211e1fc4c6fb2e9ecbc70508ab6870c165d9ef7b", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -161,24 +161,8 @@ toc_section ()\t\t\t\t\t\t\\\n \t       || (GET_MODE_CLASS (GET_MODE (X)) == MODE_FLOAT\t\t\\\n \t\t   && ! TARGET_NO_FP_IN_TOC)))))\n \n-/* Select section for constant in constant pool.\n-\n-   On RS/6000, all constants are in the private read-only data area.\n-   However, if this is being placed in the TOC it must be output as a\n-   toc entry.  */\n-\n #define TARGET_ASM_SELECT_RTX_SECTION  rs6000_xcoff_select_rtx_section\n-\n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to indicate\n-   that we can branch to this function without emitting a no-op after the\n-   call.  Do not set this flag if the function is weakly defined.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-      && !TREE_PUBLIC (DECL)\t\t\t\t\\\n-      && !DECL_WEAK (DECL))\t\t\t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n+#define TARGET_ENCODE_SECTION_INFO rs6000_xcoff_encode_section_info\n \n /* FP save and restore routines.  */\n #define\tSAVE_FP_PREFIX \"._savef\""}, {"sha": "54bb588d06b441c6a58434c7a0598968f2f75fbb", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -52,6 +52,7 @@ static int s390_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n static int s390_adjust_priority PARAMS ((rtx, int));\n static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx, \n \t\t\t\t\t     unsigned HOST_WIDE_INT));\n+static void s390_encode_section_info PARAMS ((tree, int));\n \n #undef  TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.word\\t\"\n@@ -81,6 +82,9 @@ static void s390_select_rtx_section PARAMS ((enum machine_mode, rtx,\n #undef  TARGET_SCHED_ADJUST_PRIORITY\n #define TARGET_SCHED_ADJUST_PRIORITY s390_adjust_priority\n \n+#undef\tTARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO s390_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n extern int reload_completed;\n@@ -3933,3 +3937,25 @@ s390_select_rtx_section (mode, x, align)\n   else\n     function_section (current_function_decl);\n }\n+\n+/* If using PIC, mark a SYMBOL_REF for a non-global symbol so that we\n+   may access it directly in the GOT.  */\n+\n+static void\n+s390_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (flag_pic)\n+    {\n+      rtx rtl = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t\t ? TREE_CST_RTL (decl) : DECL_RTL (decl));\n+\n+      if (GET_CODE (rtl) == MEM)\n+\t{\n+\t  SYMBOL_REF_FLAG (XEXP (rtl, 0))\n+\t    = (TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t       || ! TREE_PUBLIC (decl));\n+\t}\n+    }\n+}"}, {"sha": "0c6eb5ef86c0eee9d562cadecedc10ad9502ecb3", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -391,32 +391,6 @@ do\t\t\t\t\t\t\t\t\\\n #define CLASS_CANNOT_CHANGE_MODE_P(FROM,TO) \\\n   (GET_MODE_SIZE (FROM) != GET_MODE_SIZE (TO))\n \n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or\n-   function named by the symbol (such as what section it is in).\n-\n-   On s390, if using PIC, mark a SYMBOL_REF for a non-global symbol\n-   so that we may access it directly in the GOT.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)                        \\\n-do                                                              \\\n-  {                                                             \\\n-    if (flag_pic)                                               \\\n-      {                                                         \\\n-        rtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'    \\\n-                   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));    \\\n-                                                                \\\n-        if (GET_CODE (rtl) == MEM)                              \\\n-          {                                                     \\\n-            SYMBOL_REF_FLAG (XEXP (rtl, 0))                     \\\n-              = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'      \\\n-                 || ! TREE_PUBLIC (DECL));                      \\\n-          }                                                     \\\n-      }                                                         \\\n-  }                                                             \\\n-while (0)\n-  \n-\n /* This is an array of structures.  Each structure initializes one pair\n    of eliminable registers.  The \"from\" register number is given first,\n    followed by \"to\".  Eliminations of the same \"from\" register are listed"}, {"sha": "b84f6220a9e0645efe5d1ca95f0967b5a07f7fcc", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -201,8 +201,9 @@ static int sh_use_dfa_interface PARAMS ((void));\n static int sh_issue_rate PARAMS ((void));\n \n static bool sh_cannot_modify_jumps_p PARAMS ((void));\n-\n static bool sh_ms_bitfield_layout_p PARAMS ((tree));\n+\n+static void sh_encode_section_info PARAMS ((tree, int));\n \f\n /* Initialize the GCC target structure.  */\n #undef TARGET_ATTRIBUTE_TABLE\n@@ -6787,3 +6788,35 @@ sh_ms_bitfield_layout_p (record_type)\n {\n   return TARGET_SH5;\n }\n+\n+/* If using PIC, mark a SYMBOL_REF for a non-global symbol so that we\n+   may access it using GOTOFF instead of GOT.  */\n+\n+static void\n+sh_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  rtx rtl, symbol;\n+\n+  if (DECL_P (decl))\n+    rtl = DECL_RTL (decl);\n+  else\n+    rtl = TREE_CST_RTL (decl);\n+  if (GET_CODE (rtl) != MEM)\n+    return;\n+  symbol = XEXP (rtl, 0);\n+  if (GET_CODE (symbol) != SYMBOL_REF)\n+    return;\n+\n+  if (flag_pic)\n+    {\n+      SYMBOL_REF_FLAG (symbol) =\n+\t(TREE_CODE_CLASS (TREE_CODE (decl)) != 'd'\n+\t || MODULE_LOCAL_P (decl)\n+\t || ! TREE_PUBLIC (decl));\n+    }\n+\n+  if (TARGET_SH5 && first && TREE_CODE (decl) != FUNCTION_DECL)\n+    XEXP (rtl, 0) = gen_datalabel_ref (symbol);\n+}"}, {"sha": "084287424de396a3146332006a61c5c236d3d41b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2666,42 +2666,6 @@ while (0)\n \n \f\n /* Position Independent Code.  */\n-/* Define this macro if references to a symbol must be treated\n-   differently depending on something about the variable or function\n-   named by the symbol (such as what section it is in).\n-\n-   On SH, if using PIC, mark a SYMBOL_REF for a non-global symbol\n-   so that we may access it using GOTOFF instead of GOT.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n-do\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\\\n-    if (!(FIRST))\t\t\t\t\t\t\\\n-      break;\t\t\t\t\t\t\t\\\n-    if (flag_pic)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n-\t\t   ? TREE_CST_RTL (DECL) : DECL_RTL (DECL));\t\\\n-\t\t\t\t\t\t\t\t\\\n-\tSYMBOL_REF_FLAG (XEXP (rtl, 0)) =\t\t\t\\\n-\t  (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\t\\\n-\t   || MODULE_LOCAL_P (DECL)\t\t\t\t\\\n-\t   || ! TREE_PUBLIC (DECL));\t\t\t\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-    if (TARGET_SH5)\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\\\n-\trtx rtl = (TREE_CODE_CLASS (TREE_CODE (DECL)) != 'd'\t\\\n-\t\t   ? TREE_CST_RTL (DECL)\t\t\t\\\n-\t\t   : TREE_CODE (DECL) != VAR_DECL\t\t\\\n-\t\t   ? NULL_RTX\t\t\t\t\t\\\n- \t\t   : DECL_RTL (DECL));\t\t\t\t\\\n-\t\t\t\t\t\t\t\t\\\n-        if (rtl && GET_CODE (rtl) == MEM\t\t\t\\\n- \t    && GET_CODE (XEXP (rtl, 0)) == SYMBOL_REF)\t\t\\\n-\t  XEXP (rtl, 0) = gen_datalabel_ref (XEXP (rtl, 0));\t\\\n-      }\t\t\t\t\t\t\t\t\\\n-  }\t\t\t\t\t\t\t\t\\\n-while (0)\n \n /* The prefix used to mark SYMBOL_REFs that refer to data symbols.  */\n #define SH_DATALABEL_ENCODING \"#\""}, {"sha": "fd1cd65d424e952107c9b10e4763d922f9e6bd9a", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -175,6 +175,8 @@ static void emit_soft_tfmode_binop PARAMS ((enum rtx_code, rtx *));\n static void emit_soft_tfmode_unop PARAMS ((enum rtx_code, rtx *));\n static void emit_soft_tfmode_cvt PARAMS ((enum rtx_code, rtx *));\n static void emit_hard_tfmode_operation PARAMS ((enum rtx_code, rtx *));\n+\n+static void sparc_encode_section_info PARAMS ((tree, int));\n \f\n /* Option handling.  */\n \n@@ -235,6 +237,9 @@ enum processor_type sparc_cpu;\n #undef TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD\n #define TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD sparc_use_sched_lookahead\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO sparc_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Validate and override various options, and do some machine dependent\n@@ -8456,3 +8461,16 @@ sparc_rtx_costs (x, code, outer_code)\n       abort();\n     };\n }\n+\n+/* If we are referencing a function make the SYMBOL_REF special.  In\n+   the Embedded Medium/Anywhere code model, %g4 points to the data\n+   segment so we must not add it to function addresses.  */\n+\n+static void\n+sparc_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TARGET_CM_EMBMEDANY && TREE_CODE (decl) == FUNCTION_DECL)\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "8af36e3551c4821869291a231dfb0c94e7de39a7", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2405,16 +2405,6 @@ do {                                                                    \\\n    On the SPARC this is never true.  */\n \n #define GO_IF_MODE_DEPENDENT_ADDRESS(ADDR,LABEL)\n-\n-/* If we are referencing a function make the SYMBOL_REF special.\n-   In the Embedded Medium/Anywhere code model, %g4 points to the data segment\n-   so we must not add it to function addresses.  */\n-\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TARGET_CM_EMBMEDANY && TREE_CODE (DECL) == FUNCTION_DECL)\t\\\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\t\\\n-  } while (0)\n \f\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */"}, {"sha": "a181a36e255902c721f7f91dcac67cebbd3112fa", "filename": "gcc/config/stormy16/stormy16-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -38,7 +38,6 @@ extern CUMULATIVE_ARGS xstormy16_function_arg_advance\n extern void    xstormy16_setup_incoming_varargs \n   PARAMS ((CUMULATIVE_ARGS, int, tree, int *));\n extern tree    xstormy16_build_va_list PARAMS ((void));\n-extern void    xstormy16_encode_section_info PARAMS ((tree, int));\n #endif\n \n #if defined (TREE_CODE) && defined (RTX_CODE)"}, {"sha": "35977e7f2ac1e6e2261581e21f8d2f455d5424a8", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -49,6 +49,7 @@ Boston, MA 02111-1307, USA.  */\n static rtx emit_addhi3_postreload PARAMS ((rtx, rtx, rtx));\n static void xstormy16_asm_out_constructor PARAMS ((rtx, int));\n static void xstormy16_asm_out_destructor PARAMS ((rtx, int));\n+static void xstormy16_encode_section_info PARAMS ((tree, int));\n \n /* Define the information needed to generate branch and scc insns.  This is\n    stored from the compare operation.  */\n@@ -1394,7 +1395,7 @@ xstormy16_asm_output_mi_thunk (file, thunk_fndecl, delta, function)\n \n /* Mark functions with SYMBOL_REF_FLAG.  */\n \n-void\n+static void\n xstormy16_encode_section_info (decl, first)\n      tree decl;\n      int first ATTRIBUTE_UNUSED;\n@@ -2021,5 +2022,7 @@ xstormy16_handle_interrupt_attribute (node, name, args, flags, no_add_attrs)\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.hword\\t\"\n #undef TARGET_ASM_ALIGNED_SI_OP\n #define TARGET_ASM_ALIGNED_SI_OP \"\\t.word\\t\"\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO xstormy16_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;"}, {"sha": "7ae92ee5413cf4fc54cffd04f97b6fb0c7e16929", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 3, "deletions": 77, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -2058,59 +2058,7 @@ typedef int CUMULATIVE_ARGS;\n \n /* A C compound statement with a conditional `goto LABEL;' executed if X (an\n    RTX) is a legitimate memory address on the target machine for a memory\n-   operand of mode MODE.\n-\n-   It usually pays to define several simpler macros to serve as subroutines for\n-   this one.  Otherwise it may be too complicated to understand.\n-\n-   This macro must exist in two variants: a strict variant and a non-strict\n-   one.  The strict variant is used in the reload pass.  It must be defined so\n-   that any pseudo-register that has not been allocated a hard register is\n-   considered a memory reference.  In contexts where some kind of register is\n-   required, a pseudo-register with no hard register must be rejected.\n-\n-   The non-strict variant is used in other passes.  It must be defined to\n-   accept all pseudo-registers in every context where some kind of register is\n-   required.\n-\n-   Compiler source files that want to use the strict variant of this macro\n-   define the macro `REG_OK_STRICT'.  You should use an `#ifdef REG_OK_STRICT'\n-   conditional to define the strict variant in that case and the non-strict\n-   variant otherwise.\n-\n-   Subroutines to check for acceptable registers for various purposes (one for\n-   base registers, one for index registers, and so on) are typically among the\n-   subroutines used to define `GO_IF_LEGITIMATE_ADDRESS'.  Then only these\n-   subroutine macros need have two variants; the higher levels of macros may be\n-   the same whether strict or not.\n-\n-   Normally, constant addresses which are the sum of a `symbol_ref' and an\n-   integer are stored inside a `const' RTX to mark them as constant.\n-   Therefore, there is no need to recognize such sums specifically as\n-   legitimate addresses.  Normally you would simply recognize any `const' as\n-   legitimate.\n-\n-   Usually `PRINT_OPERAND_ADDRESS' is not prepared to handle constant sums that\n-   are not marked with `const'.  It assumes that a naked `plus' indicates\n-   indexing.  If so, then you *must* reject such naked constant sums as\n-   illegitimate addresses, so that none of them will be given to\n-   `PRINT_OPERAND_ADDRESS'.\n-\n-   On some machines, whether a symbolic address is legitimate depends on the\n-   section that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.  When you see a `const', you will have to look\n-   inside it to find the `symbol_ref' in order to determine the section.\n-\n-   The best way to modify the name string is by adding text to the beginning,\n-   with suitable punctuation to prevent any ambiguity.  Allocate the new name\n-   in `saveable_obstack'.  You will have to modify `ASM_OUTPUT_LABELREF' to\n-   remove and decode the added text and output the name accordingly, and define\n-   `STRIP_NAME_ENCODING' to access the original name string.\n-\n-   You can check the information stored here into the `symbol_ref' in the\n-   definitions of the macros `GO_IF_LEGITIMATE_ADDRESS' and\n-   `PRINT_OPERAND_ADDRESS'.  */\n+   operand of mode MODE.  */\n #ifdef REG_OK_STRICT\n #define GO_IF_LEGITIMATE_ADDRESS(MODE, X, LABEL)\t\\\n do {\t\t\t\t\t\t\t\\\n@@ -2542,23 +2490,8 @@ do {\t\t\t\t\t\t\t\\\n    This macro is irrelevant if there is no separate readonly data section.  */\n #define JUMP_TABLES_IN_TEXT_SECTION 1\n \n-/* Define this macro if references to a symbol must be treated differently\n-   depending on something about the variable or function named by the symbol\n-   (such as what section it is in).\n-\n-   The macro definition, if any, is executed immediately after the rtl for DECL\n-   has been created and stored in `DECL_RTL (DECL)'.  The value of the rtl will\n-   be a `mem' whose address is a `symbol_ref'.\n-\n-   The usual thing for this macro to do is to record a flag in the `symbol_ref'\n-   (such as `SYMBOL_REF_FLAG') or to store a modified name string in the\n-   `symbol_ref' (if one bit is not enough information).  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST) \\\n-  xstormy16_encode_section_info(DECL, FIRST)\n-\n /* Decode SYM_NAME and store the real name part in VAR, sans the characters\n-   that encode section info.  Define this macro if `ENCODE_SECTION_INFO' alters\n-   the symbol's name string.  */\n+   that encode section info.  */\n /* #define STRIP_NAME_ENCODING(VAR, SYM_NAME) */\n \f\n /* Position Independent Code.  */\n@@ -3318,14 +3251,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* A C compound statement to output to stdio stream STREAM the assembler syntax\n    for an instruction operand that is a memory reference whose address is X.  X\n-   is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on the section\n-   that the address refers to.  On these machines, define the macro\n-   `ENCODE_SECTION_INFO' to store the information into the `symbol_ref', and\n-   then check for it here.\n-\n-   This declaration must be present.  */\n+   is an RTL expression.  */\n #define PRINT_OPERAND_ADDRESS(STREAM, X) xstormy16_print_operand_address (STREAM, X)\n \n /* A C statement, to be executed after all slot-filler instructions have been"}, {"sha": "05b740adfd03d4169bc76d3c3b402d45abcea91e", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -72,7 +72,6 @@ extern rtx    v850_va_arg                   PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n \n #ifdef TREE_CODE\n-extern void   v850_encode_data_area         PARAMS ((tree));\n extern int    v850_interrupt_function_p     PARAMS ((tree));\n extern void   v850_output_aligned_bss       PARAMS ((FILE *, tree, const char *, int, int));\n extern void   v850_output_common            PARAMS ((FILE *, tree, const char *, int, int));"}, {"sha": "df4d003176555c14f8563679e9b86a4b89ccae0d", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -59,6 +59,8 @@ static tree v850_handle_interrupt_attribute PARAMS ((tree *, tree, tree, int, bo\n static tree v850_handle_data_area_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static void v850_insert_attributes   PARAMS ((tree, tree *));\n static void v850_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n+static void v850_encode_data_area    PARAMS ((tree));\n+static void v850_encode_section_info PARAMS ((tree, int));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -100,6 +102,9 @@ static int v850_interrupt_p = FALSE;\n #undef  TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION  v850_select_section\n \n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO v850_encode_section_info\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n@@ -2142,7 +2147,7 @@ v850_interrupt_function_p (func)\n }\n \n \f\n-void\n+static void\n v850_encode_data_area (decl)\n      tree decl;\n {\n@@ -2203,6 +2208,16 @@ v850_encode_data_area (decl)\n   XSTR (XEXP (DECL_RTL (decl), 0), 0) = ggc_alloc_string (newstr, len + 2);\n }\n \n+static void\n+v850_encode_section_info (decl, first)\n+     tree decl;\n+     int first;\n+{\n+  if (first && TREE_CODE (decl) == VAR_DECL\n+      && (TREE_STATIC (decl) || DECL_EXTERNAL (decl)))\n+    v850_encode_data_area (decl);\n+}\n+\n /* Return true if the given RTX is a register which can be restored\n    by a function epilogue.  */\n int"}, {"sha": "54a1bec63243759b8c3874da2163fe80b3d154d1", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1414,15 +1414,6 @@ extern union tree_node * GHS_current_section_names [(int) COUNT_OF_GHS_SECTION_K\n \n #define EP_REGNUM 30\t/* ep register number */\n \n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\\\n-  do\t\t\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\t\t\\\n-      if ((FIRST) && TREE_CODE (DECL) == VAR_DECL\t\t\\\n-          && (TREE_STATIC (DECL) || DECL_EXTERNAL (DECL)))\t\\\n-\tv850_encode_data_area (DECL);\t\t\t\t\\\n-    }\t\t\t\t\t\t\t\t\\\n-  while (0)\n-\n #define ZDA_NAME_FLAG_CHAR '@'\n #define TDA_NAME_FLAG_CHAR '%'\n #define SDA_NAME_FLAG_CHAR '&'"}, {"sha": "721e9fe2da33eb4ceb6b42f01c6d225a67babf69", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -33,6 +33,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"recog.h\"\n #include \"expr.h\"\n+#include \"flags.h\"\n #include \"tm_p.h\"\n #include \"target.h\"\n #include \"target-def.h\"\n@@ -43,6 +44,7 @@ static void vax_output_function_prologue PARAMS ((FILE *, HOST_WIDE_INT));\n static void vms_asm_out_constructor PARAMS ((rtx, int));\n static void vms_asm_out_destructor PARAMS ((rtx, int));\n static void vms_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n+static void vms_encode_section_info PARAMS ((tree, int));\n #endif\n \f\n /* Initialize the GCC target structure.  */\n@@ -55,6 +57,8 @@ static void vms_select_section PARAMS ((tree, int, unsigned HOST_WIDE_INT));\n #if VMS_TARGET\n #undef TARGET_ASM_SELECT_SECTION\n #define TARGET_ASM_SELECT_SECTION vms_select_section\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO vms_encode_section_info\n #endif\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n@@ -879,7 +883,7 @@ vms_asm_out_destructor (symbol, priority)\n }\n \n static void\n-vax_select_section (exp, reloc, align)\n+vms_select_section (exp, reloc, align)\n      tree exp;\n      int reloc ATTRIBUTE_UNUSED;\n      unsigned HOST_WIDE_INT align ATTRIBUTE_UNUSED;\n@@ -907,6 +911,18 @@ vax_select_section (exp, reloc, align)\n \ttext_section ();\n     }\n }\n+\n+/* Make sure that external variables are correctly addressed.  Under VMS\n+   there is some brain damage in the linker that requires us to do this.  */\n+\n+static void\n+vms_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}\n #endif /* VMS_TARGET */\n \f\n /* Additional support code for VMS host.  */"}, {"sha": "15716a687bc5a0226db7416ca15c843b0186252b", "filename": "gcc/config/vax/vms.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fvax%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fvax%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvms.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -84,15 +84,6 @@ Boston, MA 02111-1307, USA.  */\n /* This macro definition sets up a default value for `main' to return.  */\n #define DEFAULT_MAIN_RETURN  c_expand_return (integer_one_node)\n \f\n-/* This makes use of a hook in varasm.c to mark all external variables\n-   for us.  We use this to make sure that external variables are correctly\n-   addressed.  Under VMS there is some brain damage in the linker that requires\n-   us to do this.  */\n-\n-#define ENCODE_SECTION_INFO(decl, FIRST)  \t\t\t\\\n-  if (DECL_EXTERNAL (decl) && TREE_PUBLIC (decl)) \t\t\\\n-    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1; \n-\n /* This is how to output a command to make the user-level label named NAME\n    defined for reference from other files.  */\n "}, {"sha": "1fc5302b83cc5504cf6f344a24b1883c876671e3", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -198,6 +198,7 @@ static void xtensa_free_machine_status PARAMS ((struct function *p));\n static void printx PARAMS ((FILE *, signed int));\n static void xtensa_select_rtx_section PARAMS ((enum machine_mode, rtx,\n \t\t\t\t\t       unsigned HOST_WIDE_INT));\n+static void xtensa_encode_section_info PARAMS ((tree, int));\n \n static rtx frame_size_const;\n static int current_function_arg_words;\n@@ -231,6 +232,8 @@ static const int reg_nonleaf_alloc_order[FIRST_PSEUDO_REGISTER] =\n \n #undef TARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION  xtensa_select_rtx_section\n+#undef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO  xtensa_encode_section_info\n \n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n@@ -2003,12 +2006,7 @@ print_operand (file, op, letter)\n \n /* A C compound statement to output to stdio stream STREAM the\n    assembler syntax for an instruction operand that is a memory\n-   reference whose address is ADDR.  ADDR is an RTL expression.\n-\n-   On some machines, the syntax for a symbolic address depends on\n-   the section that the address refers to.  On these machines,\n-   define the macro 'ENCODE_SECTION_INFO' to store the information\n-   into the 'symbol_ref', and then check for it here.  */\n+   reference whose address is ADDR.  ADDR is an RTL expression.  */\n \n void\n print_operand_address (file, addr)\n@@ -2749,3 +2747,15 @@ xtensa_select_rtx_section (mode, x, align)\n {\n   function_section (current_function_decl);\n }\n+\n+/* If we are referencing a function that is static, make the SYMBOL_REF\n+   special so that we can generate direct calls to it even with -fpic.  */\n+\n+static void\n+xtensa_encode_section_info (decl, first)\n+     tree decl;\n+     int first ATTRIBUTE_UNUSED;\n+{\n+  if (TREE_CODE (decl) == FUNCTION_DECL && ! TREE_PUBLIC (decl))\n+    SYMBOL_REF_FLAG (XEXP (DECL_RTL (decl), 0)) = 1;\n+}"}, {"sha": "3ec7b3f8e660845d41443f8af93606cc0f25b81f", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -1257,14 +1257,6 @@ typedef struct xtensa_args {\n       goto LABEL;\t\t\t\t\t\t\t\\\n   } while (0)\n \n-/* If we are referencing a function that is static, make the SYMBOL_REF\n-   special so that we can generate direct calls to it even with -fpic.  */\n-#define ENCODE_SECTION_INFO(DECL, FIRST)\t\t\t\t\\\n-  do {\t\t\t\t\t\t\t\t\t\\\n-    if (TREE_CODE (DECL) == FUNCTION_DECL && ! TREE_PUBLIC (DECL))\t\\\n-      SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\t\t\t\\\n-  } while (0)\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE (SImode)"}, {"sha": "69515b8033b72066f0de7e85ebc118932b2984a6", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 34, "deletions": 35, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -4767,11 +4767,11 @@ sums that are not marked with  @code{const}.  It assumes that a naked\n naked constant sums as illegitimate addresses, so that none of them will\n be given to @code{PRINT_OPERAND_ADDRESS}.\n \n-@cindex @code{ENCODE_SECTION_INFO} and address validation\n+@cindex @code{TARGET_ENCODE_SECTION_INFO} and address validation\n On some machines, whether a symbolic address is legitimate depends on\n the section that the address refers to.  On these machines, define the\n-macro @code{ENCODE_SECTION_INFO} to store the information into the\n-@code{symbol_ref}, and then check for it here.  When you see a\n+target hook @code{TARGET_ENCODE_SECTION_INFO} to store the information\n+into the @code{symbol_ref}, and then check for it here.  When you see a\n @code{const}, you will have to look inside it to find the\n @code{symbol_ref} in order to determine the section.  @xref{Assembler\n Format}.\n@@ -5766,38 +5766,11 @@ readonly data section is used.\n \n This macro is irrelevant if there is no separate readonly data section.\n \n-@findex ENCODE_SECTION_INFO\n-@item ENCODE_SECTION_INFO (@var{decl}, @var{new_decl_p})\n-Define this macro if references to a symbol or a constant must be\n-treated differently depending on something about the variable or\n-function named by the symbol (such as what section it is in).\n-\n-The macro definition, if any, is executed under two circumstances.  One\n-is immediately after the rtl for @var{decl} that represents a variable\n-or a function has been created and stored in @code{DECL_RTL(@var{decl})}.\n-The value of the rtl will be a @code{mem} whose address is a @code{symbol_ref}.\n-The other is immediately after the rtl for @var{decl} that represents a\n-constant has been created and stored in @code{TREE_CST_RTL (@var{decl})}.\n-The macro is called once for each distinct constant in a source file.\n-\n-The @var{new_decl_p} argument will be true if this is the first time that\n-@code{ENCODE_SECTION_INFO} has been invoked on this decl.  It will\n-be false for subsequent invocations, which will happen for duplicate\n-declarations.  Whether or not anything must be done for the duplicate\n-declaration depends on whether @code{ENCODE_SECTION_INFO} examines\n-@code{DECL_ATTRIBUTES}.\n-\n-@cindex @code{SYMBOL_REF_FLAG}, in @code{ENCODE_SECTION_INFO}\n-The usual thing for this macro to do is to record a flag in the\n-@code{symbol_ref} (such as @code{SYMBOL_REF_FLAG}) or to store a\n-modified name string in the @code{symbol_ref} (if one bit is not\n-enough information).\n-\n @findex STRIP_NAME_ENCODING\n @item STRIP_NAME_ENCODING (@var{var}, @var{sym_name})\n Decode @var{sym_name} and store the real name part in @var{var}, sans\n the characters that encode section info.  Define this macro if\n-@code{ENCODE_SECTION_INFO} alters the symbol's name string.\n+@code{TARGET_ENCODE_SECTION_INFO} alters the symbol's name string.\n @end table\n \n @deftypefn {Target Hook} void TARGET_ASM_SELECT_SECTION (tree @var{exp}, int @var{reloc}, unsigned HOST_WIDE_INT @var{align})\n@@ -5839,6 +5812,32 @@ constants in @code{flag_pic} mode in @code{data_section} and everything\n else in @code{readonly_data_section}.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ENCODE_SECTION_INFO (tree @var{decl}, int @var{new_decl_p})\n+Define this hook if references to a symbol or a constant must be\n+treated differently depending on something about the variable or\n+function named by the symbol (such as what section it is in).\n+\n+The hook is executed under two circumstances.  One is immediately after\n+the rtl for @var{decl} that represents a variable or a function has been\n+created and stored in @code{DECL_RTL(@var{decl})}.  The value of the rtl\n+will be a @code{mem} whose address is a @code{symbol_ref}.  The other is\n+immediately after the rtl for @var{decl} that represents a constant has\n+been created and stored in @code{TREE_CST_RTL (@var{decl})}.  The macro\n+is called once for each distinct constant in a source file.\n+\n+The @var{new_decl_p} argument will be true if this is the first time\n+that @code{ENCODE_SECTION_INFO} has been invoked on this decl.  It will\n+be false for subsequent invocations, which will happen for duplicate\n+declarations.  Whether or not anything must be done for the duplicate\n+declaration depends on whether the hook examines @code{DECL_ATTRIBUTES}.\n+\n+@cindex @code{SYMBOL_REF_FLAG}, in @code{TARGET_ENCODE_SECTION_INFO}\n+The usual thing for this hook to do is to record a flag in the\n+@code{symbol_ref} (such as @code{SYMBOL_REF_FLAG}) or to store a\n+modified name string in the @code{symbol_ref} (if one bit is not\n+enough information).\n+@end deftypefn\n+\n @node PIC\n @section Position Independent Code\n @cindex position independent code\n@@ -6517,7 +6516,7 @@ A C statement (sans semicolon) to output a reference to\n @code{SYMBOL_REF} @var{sym}.  If not defined, @code{assemble_name}\n will be used to output the name of the symbol.  This macro may be used\n to modify the way a symbol is referenced depending on information\n-encoded by @code{ENCODE_SECTION_INFO}.\n+encoded by @code{TARGET_ENCODE_SECTION_INFO}.\n \n @findex ASM_OUTPUT_LABEL_REF\n @item ASM_OUTPUT_LABEL_REF (@var{stream}, @var{buf})\n@@ -7073,10 +7072,10 @@ A C compound statement to output to stdio stream @var{stream} the\n assembler syntax for an instruction operand that is a memory reference\n whose address is @var{x}.  @var{x} is an RTL expression.\n \n-@cindex @code{ENCODE_SECTION_INFO} usage\n+@cindex @code{TARGET_ENCODE_SECTION_INFO} usage\n On some machines, the syntax for a symbolic address depends on the\n-section that the address refers to.  On these machines, define the macro\n-@code{ENCODE_SECTION_INFO} to store the information into the\n+section that the address refers to.  On these machines, define the hook\n+@code{TARGET_ENCODE_SECTION_INFO} to store the information into the\n @code{symbol_ref}, and then check for it here.  @xref{Assembler Format}.\n \n @findex DBR_OUTPUT_SEQEND"}, {"sha": "1ceeef6e7370f9ef42e208936837fbf66767cad9", "filename": "gcc/hooks.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fhooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fhooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -40,3 +40,11 @@ hook_tree_bool_false (a)\n {\n   return false;\n }\n+\n+/* Generic hook that takes (tree, int) and does nothing.  */\n+void\n+hook_tree_int_void (a, b)\n+     tree a ATTRIBUTE_UNUSED;\n+     int b ATTRIBUTE_UNUSED;\n+{\n+}"}, {"sha": "f8f57bca8a749a1a6a853e519b3cedae03c29381", "filename": "gcc/hooks.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fhooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fhooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhooks.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -21,3 +21,4 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n \n bool hook_void_bool_false PARAMS ((void));\n bool hook_tree_bool_false PARAMS ((tree));\n+void hook_tree_int_void PARAMS ((tree, int));"}, {"sha": "49771df1e98b992bdf5ff71882cde6147c70409c", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -4843,7 +4843,8 @@ rtx\n init_one_libfunc (name)\n      const char *name;\n {\n-  /* Create a FUNCTION_DECL that can be passed to ENCODE_SECTION_INFO.  */\n+  /* Create a FUNCTION_DECL that can be passed to\n+     targetm.encode_section_info.  */\n   /* ??? We don't have any type information except for this is\n      a function.  Pretend this is \"int foo()\".  */\n   tree decl = build_decl (FUNCTION_DECL, get_identifier (name),"}, {"sha": "d26515bc60fdfea51d346d6704f9c4c283ddd00a", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -595,7 +595,8 @@ typedef char _Bool;\n \tMERGE_MACHINE_TYPE_ATTRIBUTES MERGE_MACHINE_DECL_ATTRIBUTES\t\\\n \tMD_INIT_BUILTINS MD_EXPAND_BUILTIN ASM_OUTPUT_CONSTRUCTOR\t\\\n \tASM_OUTPUT_DESTRUCTOR SIGNED_CHAR_SPEC MAX_CHAR_TYPE_SIZE\t\\\n-\tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\n+\tWCHAR_UNSIGNED UNIQUE_SECTION SELECT_SECTION SELECT_RTX_SECTION\t\\\n+\tENCODE_SECTION_INFO\n \n /* And other obsolete target macros, or macros that used to be in target\n    headers and were not used, and may be obsolete or may never have"}, {"sha": "557081652ac8aacb67e31443a45ce764204d26a7", "filename": "gcc/target-def.h", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -209,6 +209,10 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n #define TARGET_CANNOT_MODIFY_JUMPS_P hook_void_bool_false\n #define TARGET_IN_SMALL_DATA_P hook_tree_bool_false\n \n+#ifndef TARGET_ENCODE_SECTION_INFO\n+#define TARGET_ENCODE_SECTION_INFO hook_tree_int_void\n+#endif\n+\n /* The whole shebang.  */\n #define TARGET_INITIALIZER\t\t\t\\\n {\t\t\t\t\t\t\\\n@@ -228,7 +232,8 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n   TARGET_HAVE_NAMED_SECTIONS,\t\t\t\\\n   TARGET_HAVE_CTORS_DTORS,\t\t\t\\\n   TARGET_CANNOT_MODIFY_JUMPS_P,\t\t\t\\\n-  TARGET_IN_SMALL_DATA_P\t\t\t\\\n+  TARGET_IN_SMALL_DATA_P,\t\t\t\\\n+  TARGET_ENCODE_SECTION_INFO\t\t\t\\\n }\n \n #include \"hooks.h\""}, {"sha": "97dd6d52bae0acabd71cea0dda0ec2c7b335f772", "filename": "gcc/target.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -243,6 +243,10 @@ struct gcc_target\n \n   /* True if EXP should be placed in a \"small data\" section.  */\n   bool (* in_small_data_p) PARAMS ((tree));\n+\n+  /* Do something target-specific to record properties of the DECL into\n+     the associated SYMBOL_REF.  */\n+  void (* encode_section_info) PARAMS ((tree, int));\n };\n \n extern struct gcc_target targetm;"}, {"sha": "eb57081525334c7316a6720400aac2d2f281312f", "filename": "gcc/varasm.c", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fb49053ffdc69d527d610d2592f562abc8df63e0/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=fb49053ffdc69d527d610d2592f562abc8df63e0", "patch": "@@ -838,9 +838,7 @@ make_decl_rtl (decl, asmspec)\n       /* Let the target reassign the RTL if it wants.\n \t This is necessary, for example, when one machine specific\n \t decl attribute overrides another.  */\n-#ifdef ENCODE_SECTION_INFO\n-      ENCODE_SECTION_INFO (decl, false);\n-#endif\n+      (* targetm.encode_section_info) (decl, false);\n       return;\n     }\n \n@@ -964,9 +962,7 @@ make_decl_rtl (decl, asmspec)\n      such as that it is a function name.\n      If the name is changed, the macro ASM_OUTPUT_LABELREF\n      will have to know how to strip this information.  */\n-#ifdef ENCODE_SECTION_INFO\n-  ENCODE_SECTION_INFO (decl, true);\n-#endif\n+  (* targetm.encode_section_info) (decl, true);\n }\n \n /* Make the rtl for variable VAR be volatile.\n@@ -1501,7 +1497,8 @@ assemble_variable (decl, top_level, at_end, dont_output_data)\n   if (TREE_ASM_WRITTEN (decl))\n     return;\n \n-  /* Make sure ENCODE_SECTION_INFO is invoked before we set ASM_WRITTEN.  */\n+  /* Make sure targetm.encode_section_info is invoked before we set\n+     ASM_WRITTEN.  */\n   decl_rtl = DECL_RTL (decl);\n \n   TREE_ASM_WRITTEN (decl) = 1;\n@@ -3082,20 +3079,18 @@ output_constant_def (exp, defer)\n   /* Optionally set flags or add text to the name to record information\n      such as that it is a function name.  If the name is changed, the macro\n      ASM_OUTPUT_LABELREF will have to know how to strip this information.  */\n-#ifdef ENCODE_SECTION_INFO\n   /* A previously-processed constant would already have section info\n      encoded in it.  */\n   if (! found)\n     {\n-      /* Take care not to invoke ENCODE_SECTION_INFO for constants\n-\t which don't have a TREE_CST_RTL.  */\n+      /* Take care not to invoke targetm.encode_section_info for\n+\t constants which don't have a TREE_CST_RTL.  */\n       if (TREE_CODE (exp) != INTEGER_CST)\n-\tENCODE_SECTION_INFO (exp, true);\n+\t(*targetm.encode_section_info) (exp, true);\n \n       desc->rtl = rtl;\n       desc->label = XSTR (XEXP (desc->rtl, 0), 0);\n     }\n-#endif\n \n #ifdef CONSTANT_AFTER_FUNCTION_P\n   if (current_function_decl != 0"}]}