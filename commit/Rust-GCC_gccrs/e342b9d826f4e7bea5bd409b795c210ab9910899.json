{"sha": "e342b9d826f4e7bea5bd409b795c210ab9910899", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0MmI5ZDgyNmY0ZTdiZWE1YmQ0MDliNzk1YzIxMGFiOTkxMDg5OQ==", "commit": {"author": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-01T14:01:10Z"}, "committer": {"name": "Kelvin Nilsen", "email": "kelvin@gcc.gnu.org", "date": "2016-06-01T14:01:10Z"}, "message": "altivec.h (vec_slv): New macro.\n\ngcc/ChangeLog:\n\n2016-06-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* config/rs6000/altivec.h (vec_slv): New macro.\n\t(vec_srv): New macro.\n\t* config/rs6000/altivec.md (UNSPEC_VSLV): New value.\n\t(UNSPEC_VSRV): New value.\n\t(vslv): New insn.\n\t(vsrv): New insn.\n\t* config/rs6000/rs6000-builtin.def (vslv): New builtin definition.\n\t(vsrv): New builtin definition.\n\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VSLV): Macro expansion to\n\tdefine argument types for new builtin.\n\t(P9V_BUILTIN_VSRV): Macro expansion to define argument types for\n\tnew builtin.\n\t* doc/extend.texi: Document the new vec_vslv and vec_srv built-in\n\tfunctions. \n\ngcc/testsuite/ChangeLog:\n\n2016-06-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n\n\t* gcc.target/powerpc/vslv-0.c: New test.\n\t* gcc.target/powerpc/vslv-1.c: New test.\n\t* gcc.target/powerpc/vsrv-0.c: New test.\n\t* gcc.target/powerpc/vsrv-1.c: New test.\n\nFrom-SVN: r236992", "tree": {"sha": "d3c058d0e569e3388ddb7c5d17a23931eb285bd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c058d0e569e3388ddb7c5d17a23931eb285bd0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e342b9d826f4e7bea5bd409b795c210ab9910899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e342b9d826f4e7bea5bd409b795c210ab9910899", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e342b9d826f4e7bea5bd409b795c210ab9910899", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e342b9d826f4e7bea5bd409b795c210ab9910899/comments", "author": null, "committer": null, "parents": [{"sha": "4bdf739d7146908d64d9a2020df5263a10bedb9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bdf739d7146908d64d9a2020df5263a10bedb9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bdf739d7146908d64d9a2020df5263a10bedb9c"}], "stats": {"total": 160, "additions": 158, "deletions": 2}, "files": [{"sha": "19c9679af5ed0b6eaa1e09de0138d654a22f400d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -1,3 +1,20 @@\n+2016-06-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* config/rs6000/altivec.h (vec_slv): New macro.\n+\t(vec_srv): New macro.\n+\t* config/rs6000/altivec.md (UNSPEC_VSLV): New value.\n+\t(UNSPEC_VSRV): New value.\n+\t(vslv): New insn.\n+\t(vsrv): New insn.\n+\t* config/rs6000/rs6000-builtin.def (vslv): New builtin definition.\n+\t(vsrv): New builtin definition.\n+\t* config/rs6000/rs6000-c.c (P9V_BUILTIN_VSLV): Macro expansion to\n+\tdefine argument types for new builtin.\n+\t(P9V_BUILTIN_VSRV): Macro expansion to define argument types for\n+\tnew builtin.\n+\t* doc/extend.texi: Document the new vec_vslv and vec_srv built-in\n+\tfunctions. \n+\n 2016-06-01  Uros Bizjak  <ubizjak@gmail.com>\n \t    Jocelyn Mayer  <l_indien@magic.fr>\n "}, {"sha": "7e42aefe4c60ce6b1c74eb18605d8409512a6bfd", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -400,6 +400,9 @@\n #ifdef _ARCH_PPC64\n #define vec_vprtybq __builtin_vec_vprtybq\n #endif\n+\n+#define vec_slv __builtin_vec_vslv\n+#define vec_srv __builtin_vec_vsrv\n #endif\n \n /* Predicates."}, {"sha": "d081bd1afbd1da8bbcd29e079c70e712252d018f", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -114,6 +114,8 @@\n    UNSPEC_STVLXL\n    UNSPEC_STVRX\n    UNSPEC_STVRXL\n+   UNSPEC_VSLV\n+   UNSPEC_VSRV\n    UNSPEC_VMULWHUB\n    UNSPEC_VMULWLUB\n    UNSPEC_VMULWHSB\n@@ -1631,6 +1633,24 @@\n   \"vslo %0,%1,%2\"\n   [(set_attr \"type\" \"vecperm\")])\n \n+(define_insn \"vslv\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+         UNSPEC_VSLV))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vslv %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_insn \"vsrv\"\n+  [(set (match_operand:V16QI 0 \"register_operand\" \"=v\")\n+\t(unspec:V16QI [(match_operand:V16QI 1 \"register_operand\" \"v\")\n+\t\t       (match_operand:V16QI 2 \"register_operand\" \"v\")]\n+         UNSPEC_VSRV))]\n+  \"TARGET_P9_VECTOR\"\n+  \"vsrv %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n (define_insn \"*altivec_vsl<VI_char>\"\n   [(set (match_operand:VI2 0 \"register_operand\" \"=v\")\n         (ashift:VI2 (match_operand:VI2 1 \"register_operand\" \"v\")"}, {"sha": "35a2e130ef46546e19e9d5f9dfab99cc18ed7648", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -1749,6 +1749,14 @@ BU_P8V_OVERLOAD_3 (VADDEUQM,\t\"vaddeuqm\")\n BU_P8V_OVERLOAD_3 (VSUBECUQ,\t\"vsubecuq\")\n BU_P8V_OVERLOAD_3 (VSUBEUQM,\t\"vsubeuqm\")\n \n+/* ISA 3.0 vector overloaded 2-argument functions. */\n+BU_P9V_AV_2 (VSLV,\t\t\"vslv\",\t\t\tCONST, vslv)\n+BU_P9V_AV_2 (VSRV,\t\t\"vsrv\",\t\t\tCONST, vsrv)\n+\n+/* ISA 3.0 vector overloaded 2-argument functions. */\n+BU_P9V_OVERLOAD_2 (VSLV,\t\"vslv\")\n+BU_P9V_OVERLOAD_2 (VSRV,\t\"vsrv\")\n+\n \f\n /* 2 argument extended divide functions added in ISA 2.06.  */\n BU_P7_MISC_2 (DIVWE,\t\t\"divwe\",\tCONST,\tdive_si)"}, {"sha": "79ac1158c76fc4719d0f57c61fd916476bba99ca", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -4488,6 +4488,13 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { P8V_BUILTIN_VEC_VGBBD, P8V_BUILTIN_VGBBD,\n     RS6000_BTI_unsigned_V16QI, 0, 0, 0 },\n \n+  { P9V_BUILTIN_VEC_VSLV, P9V_BUILTIN_VSLV,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+  { P9V_BUILTIN_VEC_VSRV, P9V_BUILTIN_VSRV,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, 0 },\n+\n   /* Crypto builtins.  */\n   { CRYPTO_BUILTIN_VPERMXOR, CRYPTO_BUILTIN_VPERMXOR_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,"}, {"sha": "b2190d6d75afd00b1f6b22602c7a308e3141a2e2", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -14686,8 +14686,8 @@ The @code{__builtin_divde}, @code{__builtin_divdeo},\n 64-bit environment support ISA 2.06 or later.\n \n The following built-in functions are available for the PowerPC family\n-of processors, starting with ISA 3.0 or later (@option{-mcpu=power9}\n-or @option{-mmodulo}):\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n+or with @option{-mmodulo}:\n @smallexample\n long long __builtin_darn (void);\n long long __builtin_darn_raw (void);\n@@ -17341,6 +17341,40 @@ vector __int128_t vec_vprtybq (vector __int128_t);\n vector __uint128_t vec_vprtybd (vector __uint128_t);\n @end smallexample\n \n+The following built-in vector functions are available for the PowerPC family\n+of processors, starting with ISA 3.0 or later (@option{-mcpu=power9})\n+or with @option{-mpower9-vector}:\n+@smallexample\n+__vector unsigned char\n+vec_slv (__vector unsigned char src, __vector unsigned char shift_distance);\n+__vector unsigned char\n+vec_srv (__vector unsigned char src, __vector unsigned char shift_distance);\n+@end smallexample\n+\n+The @code{vec_slv} and @code{vec_srv} functions operate on\n+all of the bytes of their @code{src} and @code{shift_distance}\n+arguments in parallel.  The behavior of the @code{vec_slv} is as if\n+there existed a temporary array of 17 unsigned characters\n+@code{slv_array} within which elements 0 through 15 are the same as\n+the entries in the @code{src} array and element 16 equals 0.  The\n+result returned from the @code{vec_slv} function is a\n+@code{__vector} of 16 unsigned characters within which element\n+@code{i} is computed using the C expression\n+@code{0xff & (*((unsigned short *)(slv_array + i)) << (0x07 &\n+shift_distance[i]))},\n+with this resulting value coerced to the @code{unsigned char} type.\n+The behavior of the @code{vec_srv} is as if\n+there existed a temporary array of 17 unsigned characters\n+@code{srv_array} within which element 0 equals zero and\n+elements 1 through 16 equal the elements 0 through 15 of\n+the @code{src} array.  The\n+result returned from the @code{vec_srv} function is a\n+@code{__vector} of 16 unsigned characters within which element\n+@code{i} is computed using the C expression\n+@code{0xff & (*((unsigned short *)(srv_array + i)) >>\n+(0x07 & shift_distance[i]))},\n+with this resulting value coerced to the @code{unsigned char} type.\n+\n If the cryptographic instructions are enabled (@option{-mcrypto} or\n @option{-mcpu=power8}), the following builtins are enabled.\n "}, {"sha": "cb6e4871dd9da3667024b5d9fbc7ca65b0b55bff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -1,3 +1,10 @@\n+2016-06-01  Kelvin Nilsen  <kelvin@gcc.gnu.org>\n+\n+\t* gcc.target/powerpc/vslv-0.c: New test.\n+\t* gcc.target/powerpc/vslv-1.c: New test.\n+\t* gcc.target/powerpc/vsrv-0.c: New test.\n+\t* gcc.target/powerpc/vsrv-1.c: New test.\n+\n 2016-06-01  Nathan Sidwell  <nathan@acm.org>\n \n \t* c-c++-common/torture/pr57945.c: Add expected PTX error."}, {"sha": "1414be107f8ac35291c7491006640d783f7192d3", "filename": "gcc/testsuite/gcc.target/powerpc/vslv-0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-0.c?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doCharShiftLeft (__vector unsigned char *p, __vector unsigned char *q)\n+{\n+  __vector unsigned char result, input, shift_distance;\n+  result = __builtin_vec_vslv (input, shift_distance);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vslv\" } } */"}, {"sha": "293f6d4e54b14a3d0dfd523bf64eeb4231dcd3cc", "filename": "gcc/testsuite/gcc.target/powerpc/vslv-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvslv-1.c?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doCharShiftLeft (__vector unsigned char *p, __vector unsigned char *q)\n+{\n+  __vector unsigned char result, input, shift_distance;\n+  result = vec_slv (input, shift_distance);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vslv\" } } */"}, {"sha": "29e7716566b8658558010181ceffde34931fe51e", "filename": "gcc/testsuite/gcc.target/powerpc/vsrv-0.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-0.c?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doCharShiftLeft (__vector unsigned char *p, __vector unsigned char *q)\n+{\n+  __vector unsigned char result, input, shift_distance;\n+  result = __builtin_vec_vsrv (input, shift_distance);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vsrv\" } } */"}, {"sha": "fd743220c3bdfc4532e8ec4675b7f4f917582fbb", "filename": "gcc/testsuite/gcc.target/powerpc/vsrv-1.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e342b9d826f4e7bea5bd409b795c210ab9910899/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsrv-1.c?ref=e342b9d826f4e7bea5bd409b795c210ab9910899", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power9\" } } */\n+/* { dg-options \"-mcpu=power9\" } */\n+\n+#include <altivec.h>\n+\n+__vector unsigned char\n+doCharShiftLeft (__vector unsigned char *p, __vector unsigned char *q)\n+{\n+  __vector unsigned char result, input, shift_distance;\n+  result = vec_srv (input, shift_distance);\n+  return result;\n+}\n+\n+/* { dg-final { scan-assembler \"vsrv\" } } */"}]}