{"sha": "35291c7ddaae25735f7d22370b6c7a23f577e68b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUyOTFjN2RkYWFlMjU3MzVmN2QyMjM3MGI2YzdhMjNmNTc3ZTY4Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2014-12-11T17:50:56Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2014-12-11T17:50:56Z"}, "message": "Document gccjit::context::set_str_option\n\ngcc/jit/ChangeLog:\n\t* docs/cp/topics/contexts.rst (gccjit::context::set_str_option):\n\tDocument new function.\n\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n\nFrom-SVN: r218636", "tree": {"sha": "05e5f04309d2edfeb6ce994e3b5775b2cfc0c90a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05e5f04309d2edfeb6ce994e3b5775b2cfc0c90a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35291c7ddaae25735f7d22370b6c7a23f577e68b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35291c7ddaae25735f7d22370b6c7a23f577e68b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35291c7ddaae25735f7d22370b6c7a23f577e68b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35291c7ddaae25735f7d22370b6c7a23f577e68b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "faa542268c86dcaebfd6f988f47c95b8005445bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/faa542268c86dcaebfd6f988f47c95b8005445bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/faa542268c86dcaebfd6f988f47c95b8005445bd"}], "stats": {"total": 328, "additions": 180, "deletions": 148}, "files": [{"sha": "e89ff4e2147914b1a82f57fbbf7f9576f137a75f", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=35291c7ddaae25735f7d22370b6c7a23f577e68b", "patch": "@@ -1,3 +1,9 @@\n+2014-12-11  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* docs/cp/topics/contexts.rst (gccjit::context::set_str_option):\n+\tDocument new function.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\n 2014-12-10  David Malcolm  <dmalcolm@redhat.com>\n \n \t* docs/cp/index.rst: New file."}, {"sha": "72feecd1f3beab85b6996fcab3a055f5ee369d46", "filename": "gcc/jit/docs/_build/texinfo/libgccjit.texi", "status": "modified", "additions": 162, "deletions": 145, "changes": 307, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2F_build%2Ftexinfo%2Flibgccjit.texi?ref=35291c7ddaae25735f7d22370b6c7a23f577e68b", "patch": "@@ -19,7 +19,7 @@\n \n @copying\n @quotation\n-libgccjit 5.0.0 (experimental 20141210), December 10, 2014\n+libgccjit 5.0.0 (experimental 20141211), December 11, 2014\n \n David Malcolm\n \n@@ -273,6 +273,7 @@ Compilation contexts\n \n Options\n \n+* String Options: String Options<2>. \n * Boolean options: Boolean options<2>. \n * Integer options: Integer options<2>. \n \n@@ -6627,6 +6628,7 @@ Compilation contexts\n \n Options\n \n+* String Options: String Options<2>. \n * Boolean options: Boolean options<2>. \n * Integer options: Integer options<2>. \n \n@@ -9986,6 +9988,7 @@ Compilation contexts\n \n Options\n \n+* String Options: String Options<2>. \n * Boolean options: Boolean options<2>. \n * Integer options: Integer options<2>. \n \n@@ -10196,17 +10199,31 @@ code in a debugger.\n @subsubsection Options\n \n \n-@c FIXME: gccjit::context::set_str_option doesn't seem to exist yet in the\n-@c C++ API\n-\n @menu\n+* String Options: String Options<2>. \n * Boolean options: Boolean options<2>. \n * Integer options: Integer options<2>. \n \n @end menu\n \n-@node Boolean options<2>,Integer options<2>,,Options<4>\n-@anchor{cp/topics/contexts boolean-options}@anchor{100}\n+@node String Options<2>,Boolean options<2>,,Options<4>\n+@anchor{cp/topics/contexts string-options}@anchor{100}\n+@subsubsection String Options\n+\n+\n+@geindex gccjit;;context;;set_str_option (C++ function)\n+@anchor{cp/topics/contexts gccjit context set_str_option__enum cCP}@anchor{101}\n+@deffn {C++ Function} void gccjit::context::set_str_option (enum gcc_jit_str_option, const char* value)\n+\n+Set a string option of the context.\n+\n+This is a thin wrapper around the C API\n+@pxref{56,,gcc_jit_context_set_str_option()}; the options have the same\n+meaning.\n+@end deffn\n+\n+@node Boolean options<2>,Integer options<2>,String Options<2>,Options<4>\n+@anchor{cp/topics/contexts boolean-options}@anchor{102}\n @subsubsection Boolean options\n \n \n@@ -10222,7 +10239,7 @@ meaning.\n @end deffn\n \n @node Integer options<2>,,Boolean options<2>,Options<4>\n-@anchor{cp/topics/contexts integer-options}@anchor{101}\n+@anchor{cp/topics/contexts integer-options}@anchor{103}\n @subsubsection Integer options\n \n \n@@ -10255,18 +10272,18 @@ meaning.\n @c <http://www.gnu.org/licenses/>.\n \n @node Objects<2>,Types<2>,Compilation contexts<2>,Topic Reference<2>\n-@anchor{cp/topics/objects objects}@anchor{102}@anchor{cp/topics/objects doc}@anchor{103}\n+@anchor{cp/topics/objects objects}@anchor{104}@anchor{cp/topics/objects doc}@anchor{105}\n @subsection Objects\n \n \n @geindex gccjit;;object (C++ class)\n-@anchor{cp/topics/objects gccjit object}@anchor{104}\n+@anchor{cp/topics/objects gccjit object}@anchor{106}\n @deffn {C++ Class} gccjit::object\n @end deffn\n \n Almost every entity in the API (with the exception of\n @pxref{f6,,gccjit;;context} and @pxref{16,,gcc_jit_result *}) is a\n-\"contextual\" object, a @pxref{104,,gccjit;;object}.\n+\"contextual\" object, a @pxref{106,,gccjit;;object}.\n \n A JIT object:\n \n@@ -10302,10 +10319,10 @@ The C++ class hierarchy within the @code{gccjit} namespace looks like this:\n \n @noindent\n \n-The @pxref{104,,gccjit;;object} base class has the following operations:\n+The @pxref{106,,gccjit;;object} base class has the following operations:\n \n @geindex gccjit;;object;;get_context (C++ function)\n-@anchor{cp/topics/objects gccjit object get_contextC}@anchor{105}\n+@anchor{cp/topics/objects gccjit object get_contextC}@anchor{107}\n @deffn {C++ Function} gccjit::context gccjit::object::get_context () const\n \n Which context is the obj within?\n@@ -10352,16 +10369,16 @@ obj: 4.0 * (float)i\n @c <http://www.gnu.org/licenses/>.\n \n @node Types<2>,Expressions<2>,Objects<2>,Topic Reference<2>\n-@anchor{cp/topics/types doc}@anchor{106}@anchor{cp/topics/types types}@anchor{107}\n+@anchor{cp/topics/types doc}@anchor{108}@anchor{cp/topics/types types}@anchor{109}\n @subsection Types\n \n \n @geindex gccjit;;type (C++ class)\n-@anchor{cp/topics/types gccjit type}@anchor{108}\n+@anchor{cp/topics/types gccjit type}@anchor{10a}\n @deffn {C++ Class} gccjit::type\n \n gccjit::type represents a type within the library.  It is a subclass\n-of @pxref{104,,gccjit;;object}.\n+of @pxref{106,,gccjit;;object}.\n @end deffn\n \n Types can be created in several ways:\n@@ -10391,7 +10408,7 @@ See @pxref{b,,gcc_jit_context_get_type()} for the available types.\n \n @item \n derived types can be accessed by using functions such as\n-@pxref{109,,gccjit;;type;;get_pointer()} and @pxref{10a,,gccjit;;type;;get_const()}:\n+@pxref{10b,,gccjit;;type;;get_pointer()} and @pxref{10c,,gccjit;;type;;get_const()}:\n \n @example\n gccjit::type const_int_star = int_type.get_const ().get_pointer ();\n@@ -10412,7 +10429,7 @@ by creating structures (see below).\n @end menu\n \n @node Standard types<2>,Pointers const and volatile<2>,,Types<2>\n-@anchor{cp/topics/types standard-types}@anchor{10b}\n+@anchor{cp/topics/types standard-types}@anchor{10d}\n @subsubsection Standard types\n \n \n@@ -10425,14 +10442,14 @@ Access a specific type.  This is a thin wrapper around\n @end deffn\n \n @geindex gccjit;;context;;get_int_type (C++ function)\n-@anchor{cp/topics/types gccjit context get_int_type__s i}@anchor{10c}\n+@anchor{cp/topics/types gccjit context get_int_type__s i}@anchor{10e}\n @deffn {C++ Function} gccjit::type gccjit::context::get_int_type (size_t num_bytes, int is_signed)\n \n Access the integer type of the given size.\n @end deffn\n \n @geindex gccjit;;context;;get_int_type<T> (C++ function)\n-@anchor{cp/topics/types gccjit context get_int_type T}@anchor{10d}\n+@anchor{cp/topics/types gccjit context get_int_type T}@anchor{10f}\n @deffn {C++ Function} gccjit::type gccjit::context::get_int_type<T> ()\n \n Access the given integer type.  For example, you could map the\n@@ -10446,12 +10463,12 @@ gccjit::type t = ctxt.get_int_type <unsigned short> ();\n @end deffn\n \n @node Pointers const and volatile<2>,Structures and unions<2>,Standard types<2>,Types<2>\n-@anchor{cp/topics/types pointers-const-and-volatile}@anchor{10e}\n+@anchor{cp/topics/types pointers-const-and-volatile}@anchor{110}\n @subsubsection Pointers, @cite{const}, and @cite{volatile}\n \n \n @geindex gccjit;;type;;get_pointer (C++ function)\n-@anchor{cp/topics/types gccjit type get_pointer}@anchor{109}\n+@anchor{cp/topics/types gccjit type get_pointer}@anchor{10b}\n @deffn {C++ Function} gccjit::type gccjit::type::get_pointer ()\n \n Given type \"T\", get type \"T*\".\n@@ -10460,53 +10477,53 @@ Given type \"T\", get type \"T*\".\n @c FIXME: get_const doesn't seem to exist\n \n @geindex gccjit;;type;;get_const (C++ function)\n-@anchor{cp/topics/types gccjit type get_const}@anchor{10a}\n+@anchor{cp/topics/types gccjit type get_const}@anchor{10c}\n @deffn {C++ Function} gccjit::type gccjit::type::get_const ()\n \n Given type \"T\", get type \"const T\".\n @end deffn\n \n @geindex gccjit;;type;;get_volatile (C++ function)\n-@anchor{cp/topics/types gccjit type get_volatile}@anchor{10f}\n+@anchor{cp/topics/types gccjit type get_volatile}@anchor{111}\n @deffn {C++ Function} gccjit::type gccjit::type::get_volatile ()\n \n Given type \"T\", get type \"volatile T\".\n @end deffn\n \n @geindex gccjit;;context;;new_array_type (C++ function)\n-@anchor{cp/topics/types gccjit context new_array_type__gccjit type i gccjit location}@anchor{110}\n+@anchor{cp/topics/types gccjit context new_array_type__gccjit type i gccjit location}@anchor{112}\n @deffn {C++ Function} gccjit::type gccjit::context::new_array_type (gccjit::type element_type, int num_elements, gccjit::location loc)\n \n Given type \"T\", get type \"T[N]\" (for a constant N).\n Param \"loc\" is optional.\n @end deffn\n \n @node Structures and unions<2>,,Pointers const and volatile<2>,Types<2>\n-@anchor{cp/topics/types structures-and-unions}@anchor{111}\n+@anchor{cp/topics/types structures-and-unions}@anchor{113}\n @subsubsection Structures and unions\n \n \n @geindex gccjit;;struct_ (C++ class)\n-@anchor{cp/topics/types gccjit struct_}@anchor{112}\n+@anchor{cp/topics/types gccjit struct_}@anchor{114}\n @deffn {C++ Class} gccjit::struct_\n @end deffn\n \n A compound type analagous to a C @cite{struct}.\n \n-@pxref{112,,gccjit;;struct_} is a subclass of @pxref{108,,gccjit;;type} (and thus\n-of @pxref{104,,gccjit;;object} in turn).\n+@pxref{114,,gccjit;;struct_} is a subclass of @pxref{10a,,gccjit;;type} (and thus\n+of @pxref{106,,gccjit;;object} in turn).\n \n @geindex gccjit;;field (C++ class)\n-@anchor{cp/topics/types gccjit field}@anchor{113}\n+@anchor{cp/topics/types gccjit field}@anchor{115}\n @deffn {C++ Class} gccjit::field\n @end deffn\n \n-A field within a @pxref{112,,gccjit;;struct_}.\n+A field within a @pxref{114,,gccjit;;struct_}.\n \n-@pxref{113,,gccjit;;field} is a subclass of @pxref{104,,gccjit;;object}.\n+@pxref{115,,gccjit;;field} is a subclass of @pxref{106,,gccjit;;object}.\n \n-You can model C @cite{struct} types by creating @pxref{112,,gccjit;;struct_} and\n-@pxref{113,,gccjit;;field} instances, in either order:\n+You can model C @cite{struct} types by creating @pxref{114,,gccjit;;struct_} and\n+@pxref{115,,gccjit;;field} instances, in either order:\n \n \n @itemize *\n@@ -10562,14 +10579,14 @@ node.set_fields (fields);\n @c FIXME: the above API doesn't seem to exist yet\n \n @geindex gccjit;;context;;new_field (C++ function)\n-@anchor{cp/topics/types gccjit context new_field__gccjit type cCP gccjit location}@anchor{114}\n+@anchor{cp/topics/types gccjit context new_field__gccjit type cCP gccjit location}@anchor{116}\n @deffn {C++ Function} gccjit::field gccjit::context::new_field (gccjit::type type, const char* name, gccjit::location loc)\n \n Construct a new field, with the given type and name.\n @end deffn\n \n @geindex gccjit;;context;;new_struct_type (C++ function)\n-@anchor{cp/topics/types gccjit context new_struct_type__ssCR std vector field R gccjit location}@anchor{115}\n+@anchor{cp/topics/types gccjit context new_struct_type__ssCR std vector field R gccjit location}@anchor{117}\n @deffn {C++ Function} gccjit::struct_ gccjit::context::new_struct_type (const std::string& name, std::vector<field>& fields, gccjit::location loc)\n \n @quotation\n@@ -10579,7 +10596,7 @@ Construct a new struct type, with the given name and fields.\n @end deffn\n \n @geindex gccjit;;context;;new_opaque_struct (C++ function)\n-@anchor{cp/topics/types gccjit context new_opaque_struct__ssCR gccjit location}@anchor{116}\n+@anchor{cp/topics/types gccjit context new_opaque_struct__ssCR gccjit location}@anchor{118}\n @deffn {C++ Function} gccjit::struct_ gccjit::context::new_opaque_struct (const std::string& name, gccjit::location loc)\n \n Construct a new struct type, with the given name, but without\n@@ -10606,7 +10623,7 @@ size of the struct is not known), or later specified using\n @c <http://www.gnu.org/licenses/>.\n \n @node Expressions<2>,Creating and using functions<2>,Types<2>,Topic Reference<2>\n-@anchor{cp/topics/expressions expressions}@anchor{117}@anchor{cp/topics/expressions doc}@anchor{118}\n+@anchor{cp/topics/expressions expressions}@anchor{119}@anchor{cp/topics/expressions doc}@anchor{11a}\n @subsection Expressions\n \n \n@@ -10632,17 +10649,17 @@ Lvalues\n \n \n @node Rvalues<2>,Lvalues<2>,,Expressions<2>\n-@anchor{cp/topics/expressions rvalues}@anchor{119}\n+@anchor{cp/topics/expressions rvalues}@anchor{11b}\n @subsubsection Rvalues\n \n \n @geindex gccjit;;rvalue (C++ class)\n-@anchor{cp/topics/expressions gccjit rvalue}@anchor{11a}\n+@anchor{cp/topics/expressions gccjit rvalue}@anchor{11c}\n @deffn {C++ Class} gccjit::rvalue\n @end deffn\n \n-A @pxref{11a,,gccjit;;rvalue} is an expression that can be computed.  It is a\n-subclass of @pxref{104,,gccjit;;object}, and is a thin wrapper around\n+A @pxref{11c,,gccjit;;rvalue} is an expression that can be computed.  It is a\n+subclass of @pxref{106,,gccjit;;object}, and is a thin wrapper around\n @pxref{13,,gcc_jit_rvalue *} from the C API.\n \n It can be simple, e.g.:\n@@ -10688,7 +10705,7 @@ Every rvalue has an associated type, and the API will check to ensure\n that types match up correctly (otherwise the context will emit an error).\n \n @geindex gccjit;;rvalue;;get_type (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue get_type}@anchor{11b}\n+@anchor{cp/topics/expressions gccjit rvalue get_type}@anchor{11d}\n @deffn {C++ Function} gccjit::type gccjit::rvalue::get_type ()\n \n Get the type of this rvalue.\n@@ -10705,7 +10722,7 @@ Get the type of this rvalue.\n @end menu\n \n @node Simple expressions<2>,Unary Operations<2>,,Rvalues<2>\n-@anchor{cp/topics/expressions simple-expressions}@anchor{11c}\n+@anchor{cp/topics/expressions simple-expressions}@anchor{11e}\n @subsubsection Simple expressions\n \n \n@@ -10732,7 +10749,7 @@ ctxt.new_rvalue (numeric_type, 0)\n @end deffn\n \n @geindex gccjit;;context;;one (C++ function)\n-@anchor{cp/topics/expressions gccjit context one__gccjit typeC}@anchor{11d}\n+@anchor{cp/topics/expressions gccjit context one__gccjit typeC}@anchor{11f}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::one (gccjit::type numeric_type) const\n \n Given a numeric type (integer or floating point), get the rvalue for\n@@ -10746,35 +10763,35 @@ ctxt.new_rvalue (numeric_type, 1)\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type doubleC}@anchor{11e}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type doubleC}@anchor{120}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type numeric_type, double value) const\n \n Given a numeric type (integer or floating point), build an rvalue for\n the given constant value.\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type voidPC}@anchor{11f}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__gccjit type voidPC}@anchor{121}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (gccjit::type pointer_type, void* value) const\n \n Given a pointer type, build an rvalue for the given address.\n @end deffn\n \n @geindex gccjit;;context;;new_rvalue (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_rvalue__ssCRC}@anchor{120}\n+@anchor{cp/topics/expressions gccjit context new_rvalue__ssCRC}@anchor{122}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_rvalue (const std::string& value) const\n \n Generate an rvalue of type @code{GCC_JIT_TYPE_CONST_CHAR_PTR} for\n the given string.  This is akin to a string literal.\n @end deffn\n \n @node Unary Operations<2>,Binary Operations<2>,Simple expressions<2>,Rvalues<2>\n-@anchor{cp/topics/expressions unary-operations}@anchor{121}\n+@anchor{cp/topics/expressions unary-operations}@anchor{123}\n @subsubsection Unary Operations\n \n \n @geindex gccjit;;context;;new_unary_op (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_unary_op__enum gccjit type gccjit rvalue gccjit location}@anchor{122}\n+@anchor{cp/topics/expressions gccjit context new_unary_op__enum gccjit type gccjit rvalue gccjit location}@anchor{124}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_unary_op (enum gcc_jit_unary_op, gccjit::type result_type, gccjit::rvalue rvalue, gccjit::location loc)\n \n Build a unary operation out of an input rvalue.\n@@ -10790,7 +10807,7 @@ There are shorter ways to spell the various specific kinds of unary\n operation:\n \n @geindex gccjit;;context;;new_minus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit location}@anchor{123}\n+@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit location}@anchor{125}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_minus (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Negate an arithmetic value; for example:\n@@ -10811,7 +10828,7 @@ builds the equivalent of this C expression:\n @end deffn\n \n @geindex new_bitwise_negate (C++ function)\n-@anchor{cp/topics/expressions new_bitwise_negate__gccjit type gccjit rvalue gccjit location}@anchor{124}\n+@anchor{cp/topics/expressions new_bitwise_negate__gccjit type gccjit rvalue gccjit location}@anchor{126}\n @deffn {C++ Function} gccjit::rvalue new_bitwise_negate (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Bitwise negation of an integer value (one's complement); for example:\n@@ -10832,7 +10849,7 @@ builds the equivalent of this C expression:\n @end deffn\n \n @geindex new_logical_negate (C++ function)\n-@anchor{cp/topics/expressions new_logical_negate__gccjit type gccjit rvalue gccjit location}@anchor{125}\n+@anchor{cp/topics/expressions new_logical_negate__gccjit type gccjit rvalue gccjit location}@anchor{127}\n @deffn {C++ Function} gccjit::rvalue new_logical_negate (gccjit::type result_type, gccjit::rvalue a, gccjit::location loc)\n \n Logical negation of an arithmetic or pointer value; for example:\n@@ -10855,7 +10872,7 @@ builds the equivalent of this C expression:\n The most concise way to spell them is with overloaded operators:\n \n @geindex operator- (C++ function)\n-@anchor{cp/topics/expressions sub-operator__gccjit rvalue}@anchor{126}\n+@anchor{cp/topics/expressions sub-operator__gccjit rvalue}@anchor{128}\n @deffn {C++ Function} gccjit::rvalue operator- (gccjit::rvalue a)\n \n @example\n@@ -10866,7 +10883,7 @@ gccjit::rvalue negpi = -pi;\n @end deffn\n \n @geindex operator~ (C++ function)\n-@anchor{cp/topics/expressions inv-operator__gccjit rvalue}@anchor{127}\n+@anchor{cp/topics/expressions inv-operator__gccjit rvalue}@anchor{129}\n @deffn {C++ Function} gccjit::rvalue operator~ (gccjit::rvalue a)\n \n @example\n@@ -10877,7 +10894,7 @@ gccjit::rvalue mask = ~a;\n @end deffn\n \n @geindex operator! (C++ function)\n-@anchor{cp/topics/expressions not-operator__gccjit rvalue}@anchor{128}\n+@anchor{cp/topics/expressions not-operator__gccjit rvalue}@anchor{12a}\n @deffn {C++ Function} gccjit::rvalue operator! (gccjit::rvalue a)\n \n @example\n@@ -10888,7 +10905,7 @@ gccjit::rvalue guard = !cond;\n @end deffn\n \n @node Binary Operations<2>,Comparisons<2>,Unary Operations<2>,Rvalues<2>\n-@anchor{cp/topics/expressions binary-operations}@anchor{129}\n+@anchor{cp/topics/expressions binary-operations}@anchor{12b}\n @subsubsection Binary Operations\n \n \n@@ -10909,59 +10926,59 @@ There are shorter ways to spell the various specific kinds of binary\n operation:\n \n @geindex gccjit;;context;;new_plus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_plus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12a}\n+@anchor{cp/topics/expressions gccjit context new_plus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12c}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_plus (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_minus (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12b}\n+@anchor{cp/topics/expressions gccjit context new_minus__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12d}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_minus (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_mult (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_mult__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12c}\n+@anchor{cp/topics/expressions gccjit context new_mult__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12e}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_mult (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_divide (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_divide__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12d}\n+@anchor{cp/topics/expressions gccjit context new_divide__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12f}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_divide (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_modulo (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_modulo__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12e}\n+@anchor{cp/topics/expressions gccjit context new_modulo__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{130}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_modulo (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_and (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{12f}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{131}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_and (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_xor (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_xor__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{130}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_xor__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{132}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_xor (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_bitwise_or (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_bitwise_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{131}\n+@anchor{cp/topics/expressions gccjit context new_bitwise_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{133}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_bitwise_or (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_logical_and (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_logical_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{132}\n+@anchor{cp/topics/expressions gccjit context new_logical_and__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{134}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_logical_and (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_logical_or (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_logical_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{133}\n+@anchor{cp/topics/expressions gccjit context new_logical_or__gccjit type gccjit rvalue gccjit rvalue gccjit location}@anchor{135}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_logical_or (gccjit::type result_type, gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n The most concise way to spell them is with overloaded operators:\n \n @geindex operator+ (C++ function)\n-@anchor{cp/topics/expressions add-operator__gccjit rvalue gccjit rvalue}@anchor{134}\n+@anchor{cp/topics/expressions add-operator__gccjit rvalue gccjit rvalue}@anchor{136}\n @deffn {C++ Function} gccjit::rvalue operator+ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -10972,7 +10989,7 @@ gccjit::rvalue sum = a + b;\n @end deffn\n \n @geindex operator- (C++ function)\n-@anchor{cp/topics/expressions sub-operator__gccjit rvalue gccjit rvalue}@anchor{135}\n+@anchor{cp/topics/expressions sub-operator__gccjit rvalue gccjit rvalue}@anchor{137}\n @deffn {C++ Function} gccjit::rvalue operator- (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -10983,7 +11000,7 @@ gccjit::rvalue diff = a - b;\n @end deffn\n \n @geindex operator* (C++ function)\n-@anchor{cp/topics/expressions mul-operator__gccjit rvalue gccjit rvalue}@anchor{136}\n+@anchor{cp/topics/expressions mul-operator__gccjit rvalue gccjit rvalue}@anchor{138}\n @deffn {C++ Function} gccjit::rvalue operator* (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -10994,7 +11011,7 @@ gccjit::rvalue prod = a * b;\n @end deffn\n \n @geindex operator/ (C++ function)\n-@anchor{cp/topics/expressions div-operator__gccjit rvalue gccjit rvalue}@anchor{137}\n+@anchor{cp/topics/expressions div-operator__gccjit rvalue gccjit rvalue}@anchor{139}\n @deffn {C++ Function} gccjit::rvalue operator/ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11005,7 +11022,7 @@ gccjit::rvalue result = a / b;\n @end deffn\n \n @geindex operator% (C++ function)\n-@anchor{cp/topics/expressions mod-operator__gccjit rvalue gccjit rvalue}@anchor{138}\n+@anchor{cp/topics/expressions mod-operator__gccjit rvalue gccjit rvalue}@anchor{13a}\n @deffn {C++ Function} gccjit::rvalue operator% (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11016,7 +11033,7 @@ gccjit::rvalue mod = a % b;\n @end deffn\n \n @geindex operator& (C++ function)\n-@anchor{cp/topics/expressions and-operator__gccjit rvalue gccjit rvalue}@anchor{139}\n+@anchor{cp/topics/expressions and-operator__gccjit rvalue gccjit rvalue}@anchor{13b}\n @deffn {C++ Function} gccjit::rvalue operator& (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11027,7 +11044,7 @@ gccjit::rvalue x = a & b;\n @end deffn\n \n @geindex operator^ (C++ function)\n-@anchor{cp/topics/expressions xor-operator__gccjit rvalue gccjit rvalue}@anchor{13a}\n+@anchor{cp/topics/expressions xor-operator__gccjit rvalue gccjit rvalue}@anchor{13c}\n @deffn {C++ Function} gccjit::rvalue operator^ (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11038,7 +11055,7 @@ gccjit::rvalue x = a ^ b;\n @end deffn\n \n @geindex operator| (C++ function)\n-@anchor{cp/topics/expressions or-operator__gccjit rvalue gccjit rvalue}@anchor{13b}\n+@anchor{cp/topics/expressions or-operator__gccjit rvalue gccjit rvalue}@anchor{13d}\n @deffn {C++ Function} gccjit::rvalue operator| (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11049,7 +11066,7 @@ gccjit::rvalue x = a | b;\n @end deffn\n \n @geindex operator&& (C++ function)\n-@anchor{cp/topics/expressions sand-operator__gccjit rvalue gccjit rvalue}@anchor{13c}\n+@anchor{cp/topics/expressions sand-operator__gccjit rvalue gccjit rvalue}@anchor{13e}\n @deffn {C++ Function} gccjit::rvalue operator&& (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11060,7 +11077,7 @@ gccjit::rvalue cond = a && b;\n @end deffn\n \n @geindex operator|| (C++ function)\n-@anchor{cp/topics/expressions sor-operator__gccjit rvalue gccjit rvalue}@anchor{13d}\n+@anchor{cp/topics/expressions sor-operator__gccjit rvalue gccjit rvalue}@anchor{13f}\n @deffn {C++ Function} gccjit::rvalue operator|| (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11083,7 +11100,7 @@ gccjit::rvalue discriminant = (b * b) - (four * a * c);\n @end quotation\n \n @node Comparisons<2>,Function calls<2>,Binary Operations<2>,Rvalues<2>\n-@anchor{cp/topics/expressions comparisons}@anchor{13e}\n+@anchor{cp/topics/expressions comparisons}@anchor{140}\n @subsubsection Comparisons\n \n \n@@ -11104,39 +11121,39 @@ There are shorter ways to spell the various specific kinds of binary\n operation:\n \n @geindex gccjit;;context;;new_eq (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_eq__gccjit rvalue gccjit rvalue gccjit location}@anchor{13f}\n+@anchor{cp/topics/expressions gccjit context new_eq__gccjit rvalue gccjit rvalue gccjit location}@anchor{141}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_eq (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_ne (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_ne__gccjit rvalue gccjit rvalue gccjit location}@anchor{140}\n+@anchor{cp/topics/expressions gccjit context new_ne__gccjit rvalue gccjit rvalue gccjit location}@anchor{142}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_ne (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_lt (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_lt__gccjit rvalue gccjit rvalue gccjit location}@anchor{141}\n+@anchor{cp/topics/expressions gccjit context new_lt__gccjit rvalue gccjit rvalue gccjit location}@anchor{143}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_lt (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_le (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_le__gccjit rvalue gccjit rvalue gccjit location}@anchor{142}\n+@anchor{cp/topics/expressions gccjit context new_le__gccjit rvalue gccjit rvalue gccjit location}@anchor{144}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_le (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_gt (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_gt__gccjit rvalue gccjit rvalue gccjit location}@anchor{143}\n+@anchor{cp/topics/expressions gccjit context new_gt__gccjit rvalue gccjit rvalue gccjit location}@anchor{145}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_gt (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n @geindex gccjit;;context;;new_ge (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_ge__gccjit rvalue gccjit rvalue gccjit location}@anchor{144}\n+@anchor{cp/topics/expressions gccjit context new_ge__gccjit rvalue gccjit rvalue gccjit location}@anchor{146}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_ge (gccjit::rvalue a, gccjit::rvalue b, gccjit::location loc)\n @end deffn\n \n The most concise way to spell them is with overloaded operators:\n \n @geindex operator== (C++ function)\n-@anchor{cp/topics/expressions eq-operator__gccjit rvalue gccjit rvalue}@anchor{145}\n+@anchor{cp/topics/expressions eq-operator__gccjit rvalue gccjit rvalue}@anchor{147}\n @deffn {C++ Function} gccjit::rvalue operator== (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11147,7 +11164,7 @@ gccjit::rvalue cond = (a == ctxt.zero (t_int));\n @end deffn\n \n @geindex operator!= (C++ function)\n-@anchor{cp/topics/expressions neq-operator__gccjit rvalue gccjit rvalue}@anchor{146}\n+@anchor{cp/topics/expressions neq-operator__gccjit rvalue gccjit rvalue}@anchor{148}\n @deffn {C++ Function} gccjit::rvalue operator!= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11158,7 +11175,7 @@ gccjit::rvalue cond = (i != j);\n @end deffn\n \n @geindex operator< (C++ function)\n-@anchor{cp/topics/expressions lt-operator__gccjit rvalue gccjit rvalue}@anchor{147}\n+@anchor{cp/topics/expressions lt-operator__gccjit rvalue gccjit rvalue}@anchor{149}\n @deffn {C++ Function} gccjit::rvalue operator< (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11169,7 +11186,7 @@ gccjit::rvalue cond = i < n;\n @end deffn\n \n @geindex operator<= (C++ function)\n-@anchor{cp/topics/expressions lte-operator__gccjit rvalue gccjit rvalue}@anchor{148}\n+@anchor{cp/topics/expressions lte-operator__gccjit rvalue gccjit rvalue}@anchor{14a}\n @deffn {C++ Function} gccjit::rvalue operator<= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11180,7 +11197,7 @@ gccjit::rvalue cond = i <= n;\n @end deffn\n \n @geindex operator> (C++ function)\n-@anchor{cp/topics/expressions gt-operator__gccjit rvalue gccjit rvalue}@anchor{149}\n+@anchor{cp/topics/expressions gt-operator__gccjit rvalue gccjit rvalue}@anchor{14b}\n @deffn {C++ Function} gccjit::rvalue operator> (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11191,7 +11208,7 @@ gccjit::rvalue cond = (ch > limit);\n @end deffn\n \n @geindex operator>= (C++ function)\n-@anchor{cp/topics/expressions gte-operator__gccjit rvalue gccjit rvalue}@anchor{14a}\n+@anchor{cp/topics/expressions gte-operator__gccjit rvalue gccjit rvalue}@anchor{14c}\n @deffn {C++ Function} gccjit::rvalue operator>= (gccjit::rvalue a, gccjit::rvalue b)\n \n @example\n@@ -11204,12 +11221,12 @@ gccjit::rvalue cond = (score >= ctxt.new_rvalue (t_int, 100));\n @c TODO: beyond this point\n \n @node Function calls<2>,Type-coercion<2>,Comparisons<2>,Rvalues<2>\n-@anchor{cp/topics/expressions function-calls}@anchor{14b}\n+@anchor{cp/topics/expressions function-calls}@anchor{14d}\n @subsubsection Function calls\n \n \n @geindex gcc_jit_context_new_call (C++ function)\n-@anchor{cp/topics/expressions gcc_jit_context_new_call__gcc_jit_contextP gcc_jit_locationP gcc_jit_functionP i gcc_jit_rvaluePP}@anchor{14c}\n+@anchor{cp/topics/expressions gcc_jit_context_new_call__gcc_jit_contextP gcc_jit_locationP gcc_jit_functionP i gcc_jit_rvaluePP}@anchor{14e}\n @deffn {C++ Function} gcc_jit_rvalue* gcc_jit_context_new_call (gcc_jit_context* ctxt, gcc_jit_location* loc, gcc_jit_function* func, int numargs, gcc_jit_rvalue** args)\n \n Given a function and the given table of argument rvalues, construct a\n@@ -11218,14 +11235,14 @@ call to the function, with the result as an rvalue.\n @cartouche\n @quotation Note \n @code{gccjit::context::new_call()} merely builds a\n-@pxref{11a,,gccjit;;rvalue} i.e. an expression that can be evaluated,\n+@pxref{11c,,gccjit;;rvalue} i.e. an expression that can be evaluated,\n perhaps as part of a more complicated expression.\n The call @emph{won't} happen unless you add a statement to a function\n that evaluates the expression.\n \n For example, if you want to call a function and discard the result\n (or to call a function with @code{void} return type), use\n-@pxref{14d,,gccjit;;block;;add_eval()}:\n+@pxref{14f,,gccjit;;block;;add_eval()}:\n \n @example\n /* Add \"(void)printf (arg0, arg1);\".  */\n@@ -11238,12 +11255,12 @@ block.add_eval (ctxt.new_call (printf_func, arg0, arg1));\n @end deffn\n \n @node Type-coercion<2>,,Function calls<2>,Rvalues<2>\n-@anchor{cp/topics/expressions type-coercion}@anchor{14e}\n+@anchor{cp/topics/expressions type-coercion}@anchor{150}\n @subsubsection Type-coercion\n \n \n @geindex gccjit;;context;;new_cast (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_cast__gccjit rvalue gccjit type gccjit location}@anchor{14f}\n+@anchor{cp/topics/expressions gccjit context new_cast__gccjit rvalue gccjit type gccjit location}@anchor{151}\n @deffn {C++ Function} gccjit::rvalue gccjit::context::new_cast (gccjit::rvalue rvalue, gccjit::type type, gccjit::location loc)\n \n Given an rvalue of T, construct another rvalue of another type.\n@@ -11268,24 +11285,24 @@ P*  <-> Q*, for pointer types P and Q\n @end deffn\n \n @node Lvalues<2>,Working with pointers structs and unions<2>,Rvalues<2>,Expressions<2>\n-@anchor{cp/topics/expressions lvalues}@anchor{150}\n+@anchor{cp/topics/expressions lvalues}@anchor{152}\n @subsubsection Lvalues\n \n \n @geindex gccjit;;lvalue (C++ class)\n-@anchor{cp/topics/expressions gccjit lvalue}@anchor{151}\n+@anchor{cp/topics/expressions gccjit lvalue}@anchor{153}\n @deffn {C++ Class} gccjit::lvalue\n @end deffn\n \n An lvalue is something that can of the @emph{left}-hand side of an assignment:\n a storage area (such as a variable).  It is a subclass of\n-@pxref{11a,,gccjit;;rvalue}, where the rvalue is computed by reading from the\n+@pxref{11c,,gccjit;;rvalue}, where the rvalue is computed by reading from the\n storage area.\n \n It iss a thin wrapper around @pxref{24,,gcc_jit_lvalue *} from the C API.\n \n @geindex gccjit;;lvalue;;get_address (C++ function)\n-@anchor{cp/topics/expressions gccjit lvalue get_address__gccjit location}@anchor{152}\n+@anchor{cp/topics/expressions gccjit lvalue get_address__gccjit location}@anchor{154}\n @deffn {C++ Function} gccjit::rvalue gccjit::lvalue::get_address (gccjit::location loc)\n \n Take the address of an lvalue; analogous to:\n@@ -11307,24 +11324,24 @@ Parameter \"loc\" is optional.\n @end menu\n \n @node Global variables<2>,,,Lvalues<2>\n-@anchor{cp/topics/expressions global-variables}@anchor{153}\n+@anchor{cp/topics/expressions global-variables}@anchor{155}\n @subsubsection Global variables\n \n \n @geindex gccjit;;context;;new_global (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_global__gccjit type cCP gccjit location}@anchor{154}\n+@anchor{cp/topics/expressions gccjit context new_global__gccjit type cCP gccjit location}@anchor{156}\n @deffn {C++ Function} gccjit::lvalue gccjit::context::new_global (gccjit::type type, const char* name, gccjit::location loc)\n \n Add a new global variable of the given type and name to the context.\n @end deffn\n \n @node Working with pointers structs and unions<2>,,Lvalues<2>,Expressions<2>\n-@anchor{cp/topics/expressions working-with-pointers-structs-and-unions}@anchor{155}\n+@anchor{cp/topics/expressions working-with-pointers-structs-and-unions}@anchor{157}\n @subsubsection Working with pointers, structs and unions\n \n \n @geindex gccjit;;rvalue;;dereference (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue dereference__gccjit location}@anchor{156}\n+@anchor{cp/topics/expressions gccjit rvalue dereference__gccjit location}@anchor{158}\n @deffn {C++ Function} gccjit::lvalue gccjit::rvalue::dereference (gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *}, dereferencing the pointer,\n@@ -11357,7 +11374,7 @@ gccjit::lvalue content = *ptr;\n Field access is provided separately for both lvalues and rvalues:\n \n @geindex gccjit;;lvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{157}\n+@anchor{cp/topics/expressions gccjit lvalue access_field__gccjit field gccjit location}@anchor{159}\n @deffn {C++ Function} gccjit::lvalue gccjit::lvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an lvalue of struct or union type, access the given field,\n@@ -11373,7 +11390,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;access_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{158}\n+@anchor{cp/topics/expressions gccjit rvalue access_field__gccjit field gccjit location}@anchor{15a}\n @deffn {C++ Function} gccjit::rvalue gccjit::rvalue::access_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of struct or union type, access the given field\n@@ -11389,7 +11406,7 @@ in C.\n @end deffn\n \n @geindex gccjit;;rvalue;;dereference_field (C++ function)\n-@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{159}\n+@anchor{cp/topics/expressions gccjit rvalue dereference_field__gccjit field gccjit location}@anchor{15b}\n @deffn {C++ Function} gccjit::lvalue gccjit::rvalue::dereference_field (gccjit::field field, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *} where T is of struct or union\n@@ -11405,7 +11422,7 @@ in C, itself equivalent to @code{(*EXPR).FIELD}.\n @end deffn\n \n @geindex gccjit;;context;;new_array_access (C++ function)\n-@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{15a}\n+@anchor{cp/topics/expressions gccjit context new_array_access__gccjit rvalue gccjit rvalue gccjit location}@anchor{15c}\n @deffn {C++ Function} gccjit::lvalue gccjit::context::new_array_access (gccjit::rvalue ptr, gccjit::rvalue index, gccjit::location loc)\n \n Given an rvalue of pointer type @code{T *}, get at the element @cite{T} at\n@@ -11464,7 +11481,7 @@ gccjit::lvalue element = array[0];\n @c <http://www.gnu.org/licenses/>.\n \n @node Creating and using functions<2>,Source Locations<2>,Expressions<2>,Topic Reference<2>\n-@anchor{cp/topics/functions doc}@anchor{15b}@anchor{cp/topics/functions creating-and-using-functions}@anchor{15c}\n+@anchor{cp/topics/functions doc}@anchor{15d}@anchor{cp/topics/functions creating-and-using-functions}@anchor{15e}\n @subsection Creating and using functions\n \n \n@@ -11477,12 +11494,12 @@ gccjit::lvalue element = array[0];\n @end menu\n \n @node Params<2>,Functions<2>,,Creating and using functions<2>\n-@anchor{cp/topics/functions params}@anchor{15d}\n+@anchor{cp/topics/functions params}@anchor{15f}\n @subsubsection Params\n \n \n @geindex gccjit;;param (C++ class)\n-@anchor{cp/topics/functions gccjit param}@anchor{15e}\n+@anchor{cp/topics/functions gccjit param}@anchor{160}\n @deffn {C++ Class} gccjit::param\n \n A @cite{gccjit::param} represents a parameter to a function.\n@@ -11496,17 +11513,17 @@ In preparation for creating a function, create a new parameter of the\n given type and name.\n @end deffn\n \n-@pxref{15e,,gccjit;;param} is a subclass of @pxref{151,,gccjit;;lvalue} (and thus\n-of @pxref{11a,,gccjit;;rvalue} and @pxref{104,,gccjit;;object}).  It is a thin\n+@pxref{160,,gccjit;;param} is a subclass of @pxref{153,,gccjit;;lvalue} (and thus\n+of @pxref{11c,,gccjit;;rvalue} and @pxref{106,,gccjit;;object}).  It is a thin\n wrapper around the C API's @pxref{25,,gcc_jit_param *}.\n \n @node Functions<2>,Blocks<2>,Params<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions functions}@anchor{15f}\n+@anchor{cp/topics/functions functions}@anchor{161}\n @subsubsection Functions\n \n \n @geindex gccjit;;function (C++ class)\n-@anchor{cp/topics/functions gccjit function}@anchor{160}\n+@anchor{cp/topics/functions gccjit function}@anchor{162}\n @deffn {C++ Class} gccjit::function\n \n A @cite{gccjit::function} represents a function - either one that we're\n@@ -11524,15 +11541,15 @@ This is a wrapper around the C API's @pxref{11,,gcc_jit_context_new_function()}.\n @end deffn\n \n @geindex gccjit;;context;;get_builtin_function (C++ function)\n-@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{161}\n+@anchor{cp/topics/functions gccjit context get_builtin_function__cCP}@anchor{163}\n @deffn {C++ Function} gccjit::function gccjit::context::get_builtin_function (const char* name)\n \n This is a wrapper around the C API's\n @pxref{b1,,gcc_jit_context_get_builtin_function()}.\n @end deffn\n \n @geindex gccjit;;function;;get_param (C++ function)\n-@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{162}\n+@anchor{cp/topics/functions gccjit function get_param__iC}@anchor{164}\n @deffn {C++ Function} gccjit::param gccjit::function::get_param (int index) const\n \n Get the param of the given index (0-based).\n@@ -11554,19 +11571,19 @@ name.\n @end deffn\n \n @node Blocks<2>,Statements<2>,Functions<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions blocks}@anchor{163}\n+@anchor{cp/topics/functions blocks}@anchor{165}\n @subsubsection Blocks\n \n \n @geindex gccjit;;block (C++ class)\n-@anchor{cp/topics/functions gccjit block}@anchor{164}\n+@anchor{cp/topics/functions gccjit block}@anchor{166}\n @deffn {C++ Class} gccjit::block\n \n A @cite{gccjit::block} represents a basic block within a function  i.e. a\n sequence of statements with a single entry point and a single exit\n point.\n \n-@pxref{164,,gccjit;;block} is a subclass of @pxref{104,,gccjit;;object}.\n+@pxref{166,,gccjit;;block} is a subclass of @pxref{106,,gccjit;;object}.\n \n The first basic block that you create within a function will\n be the entrypoint.\n@@ -11579,7 +11596,7 @@ one function.\n @end deffn\n \n @geindex gccjit;;function;;new_block (C++ function)\n-@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{165}\n+@anchor{cp/topics/functions gccjit function new_block__cCP}@anchor{167}\n @deffn {C++ Function} gccjit::block gccjit::function::new_block (const char* name)\n \n Create a basic block of the given name.  The name may be NULL, but\n@@ -11589,12 +11606,12 @@ messages.\n @end deffn\n \n @node Statements<2>,,Blocks<2>,Creating and using functions<2>\n-@anchor{cp/topics/functions statements}@anchor{166}\n+@anchor{cp/topics/functions statements}@anchor{168}\n @subsubsection Statements\n \n \n @geindex gccjit;;block;;add_eval (C++ function)\n-@anchor{cp/topics/functions gccjit block add_eval__gccjit rvalue gccjit location}@anchor{14d}\n+@anchor{cp/topics/functions gccjit block add_eval__gccjit rvalue gccjit location}@anchor{14f}\n @deffn {C++ Function} void gccjit::block::add_eval (gccjit::rvalue rvalue, gccjit::location loc)\n \n Add evaluation of an rvalue, discarding the result\n@@ -11691,7 +11708,7 @@ block, boolval, on_true, and on_false must be non-NULL.\n @end deffn\n \n @geindex gccjit;;block;;end_with_jump (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{167}\n+@anchor{cp/topics/functions gccjit block end_with_jump__gccjit block gccjit location}@anchor{169}\n @deffn {C++ Function} void gccjit::block::end_with_jump (gccjit::block target, gccjit::location loc)\n \n Terminate a block by adding a jump to the given target block.\n@@ -11706,7 +11723,7 @@ goto target;\n @end deffn\n \n @geindex gccjit;;block;;end_with_return (C++ function)\n-@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{168}\n+@anchor{cp/topics/functions gccjit block end_with_return__gccjit rvalue gccjit location}@anchor{16a}\n @deffn {C++ Function} void gccjit::block::end_with_return (gccjit::rvalue rvalue, gccjit::location loc)\n \n Terminate a block.\n@@ -11757,7 +11774,7 @@ return;\n @c <http://www.gnu.org/licenses/>.\n \n @node Source Locations<2>,Compilation results<2>,Creating and using functions<2>,Topic Reference<2>\n-@anchor{cp/topics/locations source-locations}@anchor{169}@anchor{cp/topics/locations doc}@anchor{16a}\n+@anchor{cp/topics/locations source-locations}@anchor{16b}@anchor{cp/topics/locations doc}@anchor{16c}\n @subsection Source Locations\n \n \n@@ -11800,7 +11817,7 @@ location.\n @end menu\n \n @node Faking it<2>,,,Source Locations<2>\n-@anchor{cp/topics/locations faking-it}@anchor{16b}\n+@anchor{cp/topics/locations faking-it}@anchor{16d}\n @subsubsection Faking it\n \n \n@@ -11838,27 +11855,27 @@ file, giving you @emph{something} you can step through in the debugger.\n @c <http://www.gnu.org/licenses/>.\n \n @node Compilation results<2>,,Source Locations<2>,Topic Reference<2>\n-@anchor{cp/topics/results compilation-results}@anchor{16c}@anchor{cp/topics/results doc}@anchor{16d}\n+@anchor{cp/topics/results compilation-results}@anchor{16e}@anchor{cp/topics/results doc}@anchor{16f}\n @subsection Compilation results\n \n \n @geindex gcc_jit_result (C++ type)\n-@anchor{cp/topics/results gcc_jit_result}@anchor{16e}\n+@anchor{cp/topics/results gcc_jit_result}@anchor{170}\n @deffn {C++ Type} gcc_jit_result\n \n A @cite{gcc_jit_result} encapsulates the result of compiling a context.\n @end deffn\n \n @geindex gccjit;;context;;compile (C++ function)\n @anchor{cp/topics/results gccjit context compile}@anchor{cf}\n-@deffn {C++ Function} @pxref{16e,,gcc_jit_result*} gccjit::context::compile ()\n+@deffn {C++ Function} @pxref{170,,gcc_jit_result*} gccjit::context::compile ()\n \n This calls into GCC and builds the code, returning a\n @cite{gcc_jit_result *}.\n @end deffn\n \n @geindex gcc_jit_result_get_code (C++ function)\n-@anchor{cp/topics/results gcc_jit_result_get_code__gcc_jit_resultP cCP}@anchor{16f}\n+@anchor{cp/topics/results gcc_jit_result_get_code__gcc_jit_resultP cCP}@anchor{171}\n @deffn {C++ Function} void* gcc_jit_result_get_code (gcc_jit_result* result, const char* funcname)\n \n Locate a given function within the built machine code.\n@@ -11867,7 +11884,7 @@ correct type before it can be called.\n @end deffn\n \n @geindex gcc_jit_result_release (C++ function)\n-@anchor{cp/topics/results gcc_jit_result_release__gcc_jit_resultP}@anchor{170}\n+@anchor{cp/topics/results gcc_jit_result_release__gcc_jit_resultP}@anchor{172}\n @deffn {C++ Function} void gcc_jit_result_release (gcc_jit_result* result)\n \n Once we're done with the code, this unloads the built .so file.\n@@ -11893,7 +11910,7 @@ valid to use the result.\n @c <http://www.gnu.org/licenses/>.\n \n @node Internals,Indices and tables,C++ bindings for libgccjit,Top\n-@anchor{internals/index internals}@anchor{171}@anchor{internals/index doc}@anchor{172}\n+@anchor{internals/index internals}@anchor{173}@anchor{internals/index doc}@anchor{174}\n @chapter Internals\n \n \n@@ -11906,7 +11923,7 @@ valid to use the result.\n @end menu\n \n @node Working on the JIT library,Running the test suite,,Internals\n-@anchor{internals/index working-on-the-jit-library}@anchor{173}\n+@anchor{internals/index working-on-the-jit-library}@anchor{175}\n @section Working on the JIT library\n \n \n@@ -11943,7 +11960,7 @@ gcc/libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV),\n Here's what those configuration options mean:\n \n @geindex command line option; --enable-host-shared\n-@anchor{internals/index cmdoption--enable-host-shared}@anchor{174}\n+@anchor{internals/index cmdoption--enable-host-shared}@anchor{176}\n @deffn {Option} --enable-host-shared\n \n Configuring with this option means that the compiler is built as\n@@ -11952,15 +11969,15 @@ but it necessary for a shared library.\n @end deffn\n \n @geindex command line option; --enable-languages=jit\n-@anchor{internals/index cmdoption--enable-languages}@anchor{175}\n+@anchor{internals/index cmdoption--enable-languages}@anchor{177}\n @deffn {Option} --enable-languages=jit\n \n This specifies which frontends to build.  The JIT library looks like\n a frontend to the rest of the code.\n @end deffn\n \n @geindex command line option; --disable-bootstrap\n-@anchor{internals/index cmdoption--disable-bootstrap}@anchor{176}\n+@anchor{internals/index cmdoption--disable-bootstrap}@anchor{178}\n @deffn {Option} --disable-bootstrap\n \n For hacking on the \"jit\" subdirectory, performing a full\n@@ -11970,7 +11987,7 @@ the compiler can still bootstrap itself.\n @end deffn\n \n @geindex command line option; --enable-checking=release\n-@anchor{internals/index cmdoption--enable-checking}@anchor{177}\n+@anchor{internals/index cmdoption--enable-checking}@anchor{179}\n @deffn {Option} --enable-checking=release\n \n The compile can perform extensive self-checking as it runs, useful when\n@@ -11981,7 +11998,7 @@ disable this self-checking.\n @end deffn\n \n @node Running the test suite,Environment variables,Working on the JIT library,Internals\n-@anchor{internals/index running-the-test-suite}@anchor{178}\n+@anchor{internals/index running-the-test-suite}@anchor{17a}\n @section Running the test suite\n \n \n@@ -12044,7 +12061,7 @@ and once a test has been compiled, you can debug it directly:\n @end menu\n \n @node Running under valgrind,,,Running the test suite\n-@anchor{internals/index running-under-valgrind}@anchor{179}\n+@anchor{internals/index running-under-valgrind}@anchor{17b}\n @subsection Running under valgrind\n \n \n@@ -12092,15 +12109,15 @@ When running under valgrind, it's best to have configured gcc with\n various known false positives.\n \n @node Environment variables,Overview of code structure,Running the test suite,Internals\n-@anchor{internals/index environment-variables}@anchor{17a}\n+@anchor{internals/index environment-variables}@anchor{17c}\n @section Environment variables\n \n \n When running client code against a locally-built libgccjit, three\n environment variables need to be set up:\n \n @geindex environment variable; LD_LIBRARY_PATH\n-@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{17b}\n+@anchor{internals/index envvar-LD_LIBRARY_PATH}@anchor{17d}\n @deffn {Environment Variable} LD_LIBRARY_PATH\n \n @quotation\n@@ -12122,7 +12139,7 @@ libgccjit.so.0.0.1: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux),\n @end deffn\n \n @geindex environment variable; PATH\n-@anchor{internals/index envvar-PATH}@anchor{17c}\n+@anchor{internals/index envvar-PATH}@anchor{17e}\n @deffn {Environment Variable} PATH\n \n The library uses a driver executable for converting from .s assembler\n@@ -12141,7 +12158,7 @@ of development.\n @end deffn\n \n @geindex environment variable; LIBRARY_PATH\n-@anchor{internals/index envvar-LIBRARY_PATH}@anchor{17d}\n+@anchor{internals/index envvar-LIBRARY_PATH}@anchor{17f}\n @deffn {Environment Variable} LIBRARY_PATH\n \n The driver executable invokes the linker, and the latter needs to locate\n@@ -12177,7 +12194,7 @@ hello world\n @noindent\n \n @node Overview of code structure,,Environment variables,Internals\n-@anchor{internals/index overview-of-code-structure}@anchor{17e}\n+@anchor{internals/index overview-of-code-structure}@anchor{180}\n @section Overview of code structure\n \n \n@@ -12441,7 +12458,7 @@ run.\n @end quotation\n \n @node Indices and tables,Index,Internals,Top\n-@anchor{index indices-and-tables}@anchor{17f}\n+@anchor{index indices-and-tables}@anchor{181}\n @unnumbered Indices and tables\n \n "}, {"sha": "4becd51aa9d296c26bdacedae1c2fbf786cd599c", "filename": "gcc/jit/docs/cp/topics/contexts.rst", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35291c7ddaae25735f7d22370b6c7a23f577e68b/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fdocs%2Fcp%2Ftopics%2Fcontexts.rst?ref=35291c7ddaae25735f7d22370b6c7a23f577e68b", "patch": "@@ -148,9 +148,18 @@ Debugging\n Options\n -------\n \n-..\n-  FIXME: gccjit::context::set_str_option doesn't seem to exist yet in the\n-  C++ API\n+String Options\n+**************\n+\n+.. function:: void \\\n+              gccjit::context::set_str_option (enum gcc_jit_str_option, \\\n+                                               const char *value)\n+\n+   Set a string option of the context.\n+\n+   This is a thin wrapper around the C API\n+   :c:func:`gcc_jit_context_set_str_option`; the options have the same\n+   meaning.\n \n Boolean options\n ***************"}]}