{"sha": "dbe4e3f44abdd929d7149ce596805f659114417c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJlNGUzZjQ0YWJkZDkyOWQ3MTQ5Y2U1OTY4MDVmNjU5MTE0NDE3Yw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-09-01T16:54:53Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-09-01T16:54:53Z"}, "message": "combine: Fix for PR82024\n\nWith the testcase in the PR, with all the command line options mentioned\nthere, a (comparison) instruction becomes dead in fwprop1 but is not\ndeleted until all the way in rtl_dce.\n\nBefore combine this insn look like:\n\n20: flags:CC=cmp(r106:DI,0xffffffffffffffff)\n      REG_DEAD r106:DI\n      REG_UNUSED flags:CC\n      REG_EQUAL cmp(0,0xffffffffffffffff)\n\n(note the only output is unused).\n\nCombining some earlier insns gives\n\n13: r106:DI=0\n14: r105:DI=r101:DI+r103:DI\n\n14+13+20 then gives\n\n(parallel [\n        (set (reg:CC 17 flags)\n            (compare:CC (const_int 0 [0])\n                (const_int -1 [0xffffffffffffffff])))\n        (set (reg:DI 105)\n            (plus:DI (reg/v:DI 101 [ e ])\n                (reg:DI 103)))\n    ])\n\nwhich doesn't match; but the set of flags is dead, so combine makes the\nset of r105 the whole new instruction, which it then places at i3.  But\nthat is wrong, because r105 is used after i2 but before i3!  We forget\nto check for that in this case.\n\nThis patch fixes it.\n\n\n\tPR rtl-optimization/82024\n\t* combine.c (try_combine): If the combination result is a PARALLEL,\n\tand we only need to retain the SET in there that would be placed\n\tat I2, check that we can place that at I3 instead, before doing so.\n\nFrom-SVN: r251607", "tree": {"sha": "585be0d65fd36e6254d91cdead3e6381175d9f2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/585be0d65fd36e6254d91cdead3e6381175d9f2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbe4e3f44abdd929d7149ce596805f659114417c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe4e3f44abdd929d7149ce596805f659114417c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbe4e3f44abdd929d7149ce596805f659114417c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbe4e3f44abdd929d7149ce596805f659114417c/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bff0050a4ee85782d8f43a2aa660aad5f466f67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bff0050a4ee85782d8f43a2aa660aad5f466f67a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bff0050a4ee85782d8f43a2aa660aad5f466f67a"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "3f632ca31c2e42fcb68303b524973a8b308dc8e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe4e3f44abdd929d7149ce596805f659114417c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe4e3f44abdd929d7149ce596805f659114417c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbe4e3f44abdd929d7149ce596805f659114417c", "patch": "@@ -1,3 +1,10 @@\n+2017-09-01  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/82024\n+\t* combine.c (try_combine): If the combination result is a PARALLEL,\n+\tand we only need to retain the SET in there that would be placed\n+\tat I2, check that we can place that at I3 instead, before doing so.\n+\n 2017-09-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/81766"}, {"sha": "c748c92d2eda7f8a35de905a6d02fec43fe41986", "filename": "gcc/combine.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbe4e3f44abdd929d7149ce596805f659114417c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbe4e3f44abdd929d7149ce596805f659114417c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=dbe4e3f44abdd929d7149ce596805f659114417c", "patch": "@@ -3488,7 +3488,10 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n      i3, and one from i2.  Combining then splitting the parallel results\n      in the original i2 again plus an invalid insn (which we delete).\n      The net effect is only to move instructions around, which makes\n-     debug info less accurate.  */\n+     debug info less accurate.\n+\n+     If the remaining SET came from I2 its destination should not be used\n+     between I2 and I3.  See PR82024.  */\n \n   if (!(added_sets_2 && i1 == 0)\n       && is_parallel_of_n_reg_sets (newpat, 2)\n@@ -3517,11 +3520,17 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t       && insn_nothrow_p (i3)\n \t       && !side_effects_p (SET_SRC (set0)))\n \t{\n-\t  newpat = set1;\n-\t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\t  rtx dest = SET_DEST (set1);\n+\t  if (GET_CODE (dest) == SUBREG)\n+\t    dest = SUBREG_REG (dest);\n+\t  if (!reg_used_between_p (dest, i2, i3))\n+\t    {\n+\t      newpat = set1;\n+\t      insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n \n-\t  if (insn_code_number >= 0)\n-\t    changed_i3_dest = 1;\n+\t      if (insn_code_number >= 0)\n+\t\tchanged_i3_dest = 1;\n+\t    }\n \t}\n \n       if (insn_code_number < 0)"}]}