{"sha": "124a8ce610d0f8d315d491810e4b69b686c9c6a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTI0YThjZTYxMGQwZjhkMzE1ZDQ5MTgxMGU0YjY5YjY4NmM5YzZhOA==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-03T16:16:34Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2010-09-03T16:16:34Z"}, "message": "re PR fortran/45159 (Unnecessary temporaries)\n\n2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* dependency.c (gfc_deb_compare_expr):  Compare equal for equal\n\targlists for pure user functions, or for those intrinsic\n\tfunctions which are also pure.\n\t* intrinsics.c (add_conv):  Mark conversion functions as pure.\n\t(add_char_conversions):  Likewise.\n\n2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/45159\n\t* gfortran.dg/dependency_34.f90:  New test.\n\nFrom-SVN: r163834", "tree": {"sha": "d3c6397f966daac6bd61fbe8c22f79abd5d5a9e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3c6397f966daac6bd61fbe8c22f79abd5d5a9e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/124a8ce610d0f8d315d491810e4b69b686c9c6a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124a8ce610d0f8d315d491810e4b69b686c9c6a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/124a8ce610d0f8d315d491810e4b69b686c9c6a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/124a8ce610d0f8d315d491810e4b69b686c9c6a8/comments", "author": null, "committer": null, "parents": [{"sha": "de3f621b74e14f646a8e077adbed31f05f27fa2b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de3f621b74e14f646a8e077adbed31f05f27fa2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de3f621b74e14f646a8e077adbed31f05f27fa2b"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "a5de32af4ab21b10825ac402f21ec607a9a67561", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=124a8ce610d0f8d315d491810e4b69b686c9c6a8", "patch": "@@ -1,3 +1,12 @@\n+2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* dependency.c (gfc_deb_compare_expr):  Compare equal for equal\n+\targlists for pure user functions, or for those intrinsic\n+\tfunctions which are also pure.\n+\t* intrinsics.c (add_conv):  Mark conversion functions as pure.\n+\t(add_char_conversions):  Likewise.\n+\n 2010-09-03  Daniel Kraft  <d@domob.eu>\n \n \tPR fortran/34162"}, {"sha": "960155e04e3a568f91098eb85f31aa45d910146c", "filename": "gcc/fortran/dependency.c", "status": "modified", "additions": 21, "deletions": 28, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2Fdependency.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2Fdependency.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdependency.c?ref=124a8ce610d0f8d315d491810e4b69b686c9c6a8", "patch": "@@ -353,39 +353,32 @@ gfc_dep_compare_expr (gfc_expr *e1, gfc_expr *e2)\n       return -2;\n \n     case EXPR_FUNCTION:\n-      /* We can only compare calls to the same intrinsic function.  */\n-      if (e1->value.function.isym == 0 || e2->value.function.isym == 0\n-\t  || e1->value.function.isym != e2->value.function.isym)\n-\treturn -2;\n-\n-      args1 = e1->value.function.actual;\n-      args2 = e2->value.function.actual;\n \n-      /* We should list the \"constant\" intrinsic functions.  Those\n-\t without side-effects that provide equal results given equal\n-\t argument lists.  */\n-      switch (e1->value.function.isym->id)\n+      /* PURE functions can be compared for argument equality.  */\n+      if ((e1->value.function.esym && e2->value.function.esym\n+\t   && e1->value.function.esym == e2->value.function.esym\n+\t   && e1->value.function.esym->result->attr.pure)\n+\t  || (e1->value.function.isym && e2->value.function.isym\n+\t      && e1->value.function.isym == e2->value.function.isym\n+\t      && e1->value.function.isym->pure))\n \t{\n+\t  args1 = e1->value.function.actual;\n+\t  args2 = e2->value.function.actual;\n \n-\tcase GFC_ISYM_REAL:\n-\tcase GFC_ISYM_LOGICAL:\n-\tcase GFC_ISYM_DBLE:\n-\t  break;\n-\n-\tdefault:\n-\t  return -2;\n+\t  /* Compare the argument lists for equality.  */\n+\t  while (args1 && args2)\n+\t    {\n+\t      if (gfc_dep_compare_expr (args1->expr, args2->expr) != 0)\n+\t\treturn -2;\n+\t      args1 = args1->next;\n+\t      args2 = args2->next;\n+\t    }\n+\t  return (args1 || args2) ? -2 : 0;\n \t}\n+      else\n+\treturn -2;\n+      break;\n \n-      /* Compare the argument lists for equality.  */\n-      while (args1 && args2)\n-\t{\n-\t  if (gfc_dep_compare_expr (args1->expr, args2->expr) != 0)\n-\t    return -2;\n-\t  args1 = args1->next;\n-\t  args2 = args2->next;\n-\t}\n-      return (args1 || args2) ? -2 : 0;\n-      \n     default:\n       return -2;\n     }"}, {"sha": "817603564a46b9482aaaf1ccba8b65332e93ed91", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=124a8ce610d0f8d315d491810e4b69b686c9c6a8", "patch": "@@ -3060,6 +3060,7 @@ add_conv (bt from_type, int from_kind, bt to_type, int to_kind, int standard)\n   sym->simplify.cc = gfc_convert_constant;\n   sym->standard = standard;\n   sym->elemental = 1;\n+  sym->pure = 1;\n   sym->conversion = 1;\n   sym->ts = to;\n   sym->id = GFC_ISYM_CONVERSION;\n@@ -3210,6 +3211,7 @@ add_char_conversions (void)\n \tchar_conversions[n].simplify.cc = gfc_convert_char_constant;\n \tchar_conversions[n].standard = GFC_STD_F2003;\n \tchar_conversions[n].elemental = 1;\n+\tchar_conversions[n].pure = 1;\n \tchar_conversions[n].conversion = 0;\n \tchar_conversions[n].ts = to;\n \tchar_conversions[n].id = GFC_ISYM_CONVERSION;"}, {"sha": "9fae7d7032244dfa8f6942fa75a62b8b1a3cd606", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=124a8ce610d0f8d315d491810e4b69b686c9c6a8", "patch": "@@ -1,3 +1,8 @@\n+2010-09-03  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/45159\n+\t* gfortran.dg/dependency_34.f90:  New test.\n+\n 2010-09-03  Steve Ellcey  <sje@cup.hp.com>\n \n \t* gcc.dg/torture/pr44806.c: Add -std=c99 to access uint32_t."}, {"sha": "82d286ebbcdf0a61c5cb2ee6053dca501df85faf", "filename": "gcc/testsuite/gfortran.dg/dependency_34.f90", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_34.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/124a8ce610d0f8d315d491810e4b69b686c9c6a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_34.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdependency_34.f90?ref=124a8ce610d0f8d315d491810e4b69b686c9c6a8", "patch": "@@ -0,0 +1,22 @@\n+! { dg-do compile }\n+! { dg-options \"-Warray-temporaries\" }\n+module foo\n+  implicit none\n+contains\n+  integer pure  function bar(i,j)\n+    integer, intent(in) :: i,j\n+    bar = 3 - i + 1 * abs(i) + j\n+  end function bar\n+end module foo\n+\n+program main\n+  use foo\n+  implicit none\n+  real a(10)\n+  integer :: i\n+  read (*,*) a, i\n+  a(i:abs(i)) = a(i:abs(i))\n+  a(bar(i,i+2):2) = a(bar(i,i+2):2)\n+  a(int(i,kind=2):5) = a(int(i,kind=2)+1:6)\n+end program main\n+! { dg-final { cleanup-modules \"foo\" } }"}]}