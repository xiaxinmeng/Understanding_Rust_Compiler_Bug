{"sha": "cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiNjM0ZjJlOWE1MTVkZTg0YjljNTlhNTY0YjVkZjNiY2U3Y2Q0YQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-06-18T06:46:35Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-06-18T06:46:35Z"}, "message": "Warning fixes:\n\n        * Makefile.in (c-lang.o): Depend on output.h.\n        * c-lang.c: Include output.h.\n        * sparc.c (sparc_builtin_saveregs): Remove unused variable `fntype'.\n        * except.c (expand_builtin_eh_stub): Likewise for variable `jump_to'.\n        * genrecog.c (write_subroutine): When writing insn-recog.c, mark\n        variables `insn', `pnum_clobbers', `x[0 .. max_depth]' and `tem'\n        with ATTRIBUTE_UNUSED.\n        * regmove.c (copy_src_to_dest): Make function static to match its\n        prototype.\n        * reload1.c Include hard-reg-set.h before rtl.h to get macro\n        HARD_CONST.  Include machmode.h before hard-reg-set.h.\n        * rtl.h: Prototype `retry_global_alloc' and wrap with macro\n        HARD_CONST to protect usage of typedef HARD_REG_SET.\n        * tree.c: Prototype `_obstack_allocated_p'.\n        * varasm.c: Wrap prototype of `asm_output_aligned_bss' in macro\n        BSS_SECTION_ASM_OP.\n\nFrom-SVN: r20556", "tree": {"sha": "4334db70cb4ef1c631d87aca6ef618a4e9b9efda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4334db70cb4ef1c631d87aca6ef618a4e9b9efda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/comments", "author": null, "committer": null, "parents": [{"sha": "264a8100d1daa1d3528449cc227969ffcdf85bcb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/264a8100d1daa1d3528449cc227969ffcdf85bcb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/264a8100d1daa1d3528449cc227969ffcdf85bcb"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "31bc065021af513a88010fc4411de6b84f7da125", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -1,3 +1,31 @@\n+Thu Jun 18 09:36:50 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (c-lang.o): Depend on output.h.\n+\n+\t* c-lang.c: Include output.h.\n+\n+\t* sparc.c (sparc_builtin_saveregs): Remove unused variable `fntype'.\n+\n+\t* except.c (expand_builtin_eh_stub): Likewise for variable `jump_to'.\n+\n+\t* genrecog.c (write_subroutine): When writing insn-recog.c, mark\n+\tvariables `insn', `pnum_clobbers', `x[0 .. max_depth]' and `tem'\n+\twith ATTRIBUTE_UNUSED.\n+\n+\t* regmove.c (copy_src_to_dest): Make function static to match its\n+\tprototype.\n+\n+\t* reload1.c Include hard-reg-set.h before rtl.h to get macro\n+\tHARD_CONST.  Include machmode.h before hard-reg-set.h.\n+\n+\t* rtl.h: Prototype `retry_global_alloc' and wrap with macro\n+\tHARD_CONST to protect usage of typedef HARD_REG_SET.\n+\n+\t* tree.c: Prototype `_obstack_allocated_p'.\n+\n+\t* varasm.c: Wrap prototype of `asm_output_aligned_bss' in macro\n+\tBSS_SECTION_ASM_OP.\n+\n Thu Jun 18 09:20:47 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* pa.c: Include system.h and toplev.h.  Remove redundant code."}, {"sha": "10fab132028b910b3ac2014bf3e071b094c95316", "filename": "gcc/Makefile.in", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -1262,7 +1262,8 @@ c-decl.o : c-decl.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h flags.h \\\n     output.h toplev.h\n c-typeck.o : c-typeck.c $(CONFIG_H) system.h $(TREE_H) c-tree.h flags.h \\\n     output.h expr.h insn-codes.h $(RTL_H) toplev.h\n-c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h toplev.h\n+c-lang.o : c-lang.c $(CONFIG_H) system.h $(TREE_H) c-tree.h c-lex.h toplev.h \\\n+    output.h\n c-lex.o : c-lex.c $(CONFIG_H) system.h $(TREE_H) $(RTL_H) c-lex.h c-tree.h \\\n     $(srcdir)/c-parse.h input.h flags.h $(srcdir)/c-gperf.h c-pragma.h \\\n     toplev.h output.h"}, {"sha": "918bf6ae4b2e1574e821cd0309f584768a518efe", "filename": "gcc/c-lang.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fc-lang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fc-lang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lang.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -26,6 +26,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-tree.h\"\n #include \"c-lex.h\"\n #include \"toplev.h\"\n+#include \"output.h\"\n \n /* Each of the functions defined here\n    is an alternative to a function in objc-actions.c.  */"}, {"sha": "204162ec1e10c6e6ef9d7c7e2fa36d0ab29ef0d7", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -4669,7 +4669,6 @@ rtx\n sparc_builtin_saveregs (arglist)\n      tree arglist;\n {\n-  tree fntype = TREE_TYPE (current_function_decl);\n   int first_reg = current_function_args_info.words;\n   rtx address;\n   int regno;"}, {"sha": "9d89dd1c8df47987b11e255a35bf950820aa1d9b", "filename": "gcc/except.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexcept.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -2446,7 +2446,7 @@ expand_builtin_eh_stub ()\n   rtx stub_start = gen_label_rtx ();\n   rtx after_stub = gen_label_rtx ();\n   rtx handler, offset;\n-  rtx jump_to, temp;\n+  rtx temp;\n \n   emit_jump (after_stub);\n   emit_label (stub_start);"}, {"sha": "a4b14e33c194159204311dbca6ae2f0e8bfc0340", "filename": "gcc/genrecog.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fgenrecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fgenrecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenrecog.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -1003,19 +1003,19 @@ write_subroutine (tree, type)\n     printf (\", pnum_clobbers\");\n \n   printf (\")\\n\");\n-  printf (\"     register rtx x0;\\n     rtx insn;\\n\");\n+  printf (\"     register rtx x0;\\n     rtx insn ATTRIBUTE_UNUSED;\\n\");\n   if (type == RECOG)\n-    printf (\"     int *pnum_clobbers;\\n\");\n+    printf (\"     int *pnum_clobbers ATTRIBUTE_UNUSED;\\n\");\n \n   printf (\"{\\n\");\n   printf (\"  register rtx *ro = &recog_operand[0];\\n\");\n \n   printf (\"  register rtx \");\n   for (i = 1; i < max_depth; i++)\n-    printf (\"x%d, \", i);\n+    printf (\"x%d ATTRIBUTE_UNUSED, \", i);\n \n-  printf (\"x%d;\\n\", max_depth);\n-  printf (\"  %s tem;\\n\", type == SPLIT ? \"rtx\" : \"int\");\n+  printf (\"x%d ATTRIBUTE_UNUSED;\\n\", max_depth);\n+  printf (\"  %s tem ATTRIBUTE_UNUSED;\\n\", type == SPLIT ? \"rtx\" : \"int\");\n   write_tree (tree, \"\", NULL_PTR, 1, type);\n   printf (\" ret0: return %d;\\n}\\n\\n\", type == SPLIT ? 0 : -1);\n }"}, {"sha": "027f70a3c28f4067fa5c8ce3d3cdd5076da644df", "filename": "gcc/regmove.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -535,7 +535,7 @@ optimize_reg_copy_3 (insn, dest, src)\n /* If we were not able to update the users of src to use dest directly, try\n    instead moving the value to dest directly before the operation.  */\n \n-void\n+static void\n copy_src_to_dest (insn, src, dest, loop_depth)\n      rtx insn;\n      rtx src;"}, {"sha": "2373f8864f1fbca4f201ee269d3f93888610e0b3", "filename": "gcc/reload1.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -21,6 +21,9 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"config.h\"\n #include \"system.h\"\n+\n+#include \"machmode.h\"\n+#include \"hard-reg-set.h\"\n #include \"rtl.h\"\n #include \"obstack.h\"\n #include \"insn-config.h\"\n@@ -29,7 +32,6 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"expr.h\"\n #include \"regs.h\"\n-#include \"hard-reg-set.h\"\n #include \"reload.h\"\n #include \"recog.h\"\n #include \"basic-block.h\""}, {"sha": "f8d23fa45cc44ae274dde8a08faf68d91f04c146", "filename": "gcc/rtl.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -1422,6 +1422,9 @@ extern void mark_elimination\t\tPROTO ((int, int));\n extern int global_alloc\t\t\tPROTO ((FILE *));\n extern void dump_global_regs\t\tPROTO ((FILE *));\n #endif\n+#ifdef HARD_CONST\n+extern void retry_global_alloc\t\tPROTO ((int, HARD_REG_SET));\n+#endif\n \n /* In regclass.c */\n extern int reg_classes_intersect_p\tPROTO ((enum reg_class, enum reg_class));"}, {"sha": "f388cea7a24833e302c163bb6af974c102a63c02", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -50,6 +50,8 @@ Boston, MA 02111-1307, USA.  */\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n+/* obstack.[ch] explicitly declined to prototype this. */\n+extern int _obstack_allocated_p PROTO ((struct obstack *h, GENERIC_PTR obj));\n \n /* Tree nodes of permanent duration are allocated in this obstack.\n    They are the identifier nodes, and everything outside of"}, {"sha": "cd65c904bcdfdcea9c89165e8c013e12779eb242", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab634f2e9a515de84b9c59a564b5df3bce7cd4a/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=cab634f2e9a515de84b9c59a564b5df3bce7cd4a", "patch": "@@ -164,9 +164,11 @@ static void output_constructor\t\tPROTO((tree, int));\n #ifdef ASM_OUTPUT_BSS\n static void asm_output_bss\t\tPROTO((FILE *, tree, char *, int, int));\n #endif\n+#ifdef BSS_SECTION_ASM_OP\n #ifdef ASM_OUTPUT_ALIGNED_BSS\n static void asm_output_aligned_bss\tPROTO((FILE *, tree, char *, int, int));\n #endif\n+#endif /* BSS_SECTION_ASM_OP */\n \f\n static enum in_section { no_section, in_text, in_data, in_named\n #ifdef BSS_SECTION_ASM_OP"}]}