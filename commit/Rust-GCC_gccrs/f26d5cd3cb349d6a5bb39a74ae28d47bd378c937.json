{"sha": "f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjI2ZDVjZDNjYjM0OWQ2YTViYjM5YTc0YWUyOGQ0N2JkMzc4YzkzNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-19T10:47:49Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-19T10:47:49Z"}, "message": "[multiple changes]\n\n2009-06-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* i-vxwoio.ads: Add comments\n\n2009-06-19  Thomas Quinot  <quinot@adacore.com>\n\n\t* socket.c, g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n\tg-socthi-vxworks.ads, g-socthi-mingw.adb, g-socthi-mingw.ads,\n\tg-socthi.adb, g-socthi.ads, g-socket.adb, g-sothco.ads\n\t(GNAT.Sockets.Thin.C_Ioctl): Rename to Socket_Ioctl.\n\t(GNAT.Sockets.Thin.Socket_Ioctl): Use new function\n\tThin_Common.Socket_Ioctl.\n\t(GNAT.Sockets.Thin_Common.Socket_Ioctl): Binding to new C wrapper\n\t__gnat_socket_ioctl.\n\t(__gnat_socket_ioctl): Wrapper for ioctl(2) called with a single int*\n\targument after the file descriptor and request code.\n\n2009-06-19  Robert Dewar  <dewar@adacore.com>\n\n\t* checks.adb: Minor reformatting\n\nFrom-SVN: r148694", "tree": {"sha": "31da1477689d9bd7c842a6bbc41616f2437f5d87", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/31da1477689d9bd7c842a6bbc41616f2437f5d87"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/comments", "author": null, "committer": null, "parents": [{"sha": "1abad480e041d8f50044e3c64968957746507e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1abad480e041d8f50044e3c64968957746507e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1abad480e041d8f50044e3c64968957746507e3f"}], "stats": {"total": 198, "additions": 113, "deletions": 85}, "files": [{"sha": "af67e51be2ac03404c5d25c4dc65cfe6189dd0f9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -1,3 +1,24 @@\n+2009-06-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* i-vxwoio.ads: Add comments\n+\n+2009-06-19  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* socket.c, g-socthi-vms.adb, g-socthi-vms.ads, g-socthi-vxworks.adb,\n+\tg-socthi-vxworks.ads, g-socthi-mingw.adb, g-socthi-mingw.ads,\n+\tg-socthi.adb, g-socthi.ads, g-socket.adb, g-sothco.ads\n+\t(GNAT.Sockets.Thin.C_Ioctl): Rename to Socket_Ioctl.\n+\t(GNAT.Sockets.Thin.Socket_Ioctl): Use new function\n+\tThin_Common.Socket_Ioctl.\n+\t(GNAT.Sockets.Thin_Common.Socket_Ioctl): Binding to new C wrapper\n+\t__gnat_socket_ioctl.\n+\t(__gnat_socket_ioctl): Wrapper for ioctl(2) called with a single int*\n+\targument after the file descriptor and request code.\n+\n+2009-06-19  Robert Dewar  <dewar@adacore.com>\n+\n+\t* checks.adb: Minor reformatting\n+\n 2009-06-19  Jose Ruiz  <ruiz@adacore.com>\n \n \t* env.c (__gnat_environ): RTX does not support this functionality."}, {"sha": "cb4405ed6ca2257c3869eb3ef91086674bd9ad5f", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -3324,7 +3324,7 @@ package body Checks is\n             case Attribute_Name (N) is\n \n                --  For Pos/Val attributes, we can refine the range using the\n-               --  possible range of values of the attribute expression\n+               --  possible range of values of the attribute expression.\n \n                when Name_Pos | Name_Val =>\n                   Determine_Range"}, {"sha": "b15f52fdcfaaeaf755c3186422d17b71f0139962", "filename": "gcc/ada/g-socket.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socket.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socket.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socket.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -707,10 +707,8 @@ package body GNAT.Sockets is\n             null;\n       end case;\n \n-      Res := C_Ioctl\n-        (C.int (Socket),\n-         Requests (Request.Name),\n-         Arg'Unchecked_Access);\n+      Res := Socket_Ioctl\n+               (C.int (Socket), Requests (Request.Name), Arg'Unchecked_Access);\n \n       if Res = Failure then\n          Raise_Socket_Error (Socket_Errno);"}, {"sha": "7c0e7f6ef7fa8d292ca4a6bc030831c913881990", "filename": "gcc/ada/g-socthi-mingw.adb", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -247,6 +247,19 @@ package body GNAT.Sockets.Thin is\n       return Res;\n    end C_Connect;\n \n+   ------------------\n+   -- Socket_Ioctl --\n+   ------------------\n+\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int\n+   is\n+   begin\n+      return C_Ioctl (S, Req, Arg);\n+   end Socket_Ioctl;\n+\n    ---------------\n    -- C_Recvmsg --\n    ---------------"}, {"sha": "42783e5f734af90b66fc8b2920ee3c8b3c6b4da3", "filename": "gcc/ada/g-socthi-mingw.ads", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-mingw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-mingw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-mingw.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -120,10 +120,10 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function C_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int;\n \n    function C_Listen\n      (S       : C.int;\n@@ -234,7 +234,6 @@ private\n    pragma Import (Stdcall, C_Getpeername, \"getpeername\");\n    pragma Import (Stdcall, C_Getsockname, \"getsockname\");\n    pragma Import (Stdcall, C_Getsockopt, \"getsockopt\");\n-   pragma Import (Stdcall, C_Ioctl, \"ioctlsocket\");\n    pragma Import (Stdcall, C_Listen, \"listen\");\n    pragma Import (Stdcall, C_Recv, \"recv\");\n    pragma Import (Stdcall, C_Recvfrom, \"recvfrom\");"}, {"sha": "cb2b211d2aae3b84e8443005469537e59c5805a0", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -74,12 +74,6 @@ package body GNAT.Sockets.Thin is\n       Namelen : C.int) return C.int;\n    pragma Import (C, Syscall_Connect, \"connect\");\n \n-   function Syscall_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n-   pragma Import (C, Syscall_Ioctl, \"ioctl\");\n-\n    function Syscall_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -153,11 +147,11 @@ package body GNAT.Sockets.Thin is\n         and then R /= Failure\n       then\n          --  A socket inherits the properties of its server, especially\n-         --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n+         --  the FIONBIO flag. Do not use Socket_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Discard := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n       end if;\n \n       return R;\n@@ -220,26 +214,24 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end C_Connect;\n \n-   -------------\n-   -- C_Ioctl --\n-   -------------\n+   ------------------\n+   -- Socket_Ioctl --\n+   ------------------\n \n-   function C_Ioctl\n+   function Socket_Ioctl\n      (S   : C.int;\n       Req : C.int;\n       Arg : access C.int) return C.int\n    is\n    begin\n-      if not SOSC.Thread_Blocking_IO\n-        and then Req = SOSC.FIONBIO\n-      then\n+      if not SOSC.Thread_Blocking_IO and then Req = SOSC.FIONBIO then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n          end if;\n       end if;\n \n-      return Syscall_Ioctl (S, Req, Arg);\n-   end C_Ioctl;\n+      return C_Ioctl (S, Req, Arg);\n+   end Socket_Ioctl;\n \n    ------------\n    -- C_Recv --\n@@ -405,10 +397,10 @@ package body GNAT.Sockets.Thin is\n       if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n-         --  Do not use C_Ioctl as this subprogram tracks sockets set\n+         --  Do not use Socket_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Discard := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n          Set_Non_Blocking_Socket (R, False);\n       end if;\n "}, {"sha": "3032b0ec72b096934c42a4e0d9478f88d4838310", "filename": "gcc/ada/g-socthi-vms.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vms.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vms.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -123,10 +123,10 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function C_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int;\n \n    function C_Listen\n      (S       : C.int;"}, {"sha": "67e6c25eeb8ce733298d288e492c3898b6569978", "filename": "gcc/ada/g-socthi-vxworks.adb", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vxworks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vxworks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -80,12 +80,6 @@ package body GNAT.Sockets.Thin is\n       Namelen : C.int) return C.int;\n    pragma Import (C, Syscall_Connect, \"connect\");\n \n-   function Syscall_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n-   pragma Import (C, Syscall_Ioctl, \"ioctl\");\n-\n    function Syscall_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -161,11 +155,11 @@ package body GNAT.Sockets.Thin is\n         and then R /= Failure\n       then\n          --  A socket inherits the properties of its server especially\n-         --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n+         --  the FIONBIO flag. Do not use Socket_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Res := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Res := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n          --  Is it OK to ignore result ???\n       end if;\n \n@@ -230,26 +224,24 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end C_Connect;\n \n-   -------------\n-   -- C_Ioctl --\n-   -------------\n+   ------------------\n+   -- Socket_Ioctl --\n+   ------------------\n \n-   function C_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int\n    is\n    begin\n-      if not SOSC.Thread_Blocking_IO\n-        and then Req = SOSC.FIONBIO\n-      then\n+      if not SOSC.Thread_Blocking_IO and then Req = SOSC.FIONBIO then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n          end if;\n       end if;\n \n-      return Syscall_Ioctl (S, Req, Arg);\n-   end C_Ioctl;\n+      return C_Ioctl (S, Req, Arg);\n+   end Socket_Ioctl;\n \n    ------------\n    -- C_Recv --\n@@ -399,10 +391,10 @@ package body GNAT.Sockets.Thin is\n       if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n-         --  Do not use C_Ioctl as this subprogram tracks sockets set\n+         --  Do not use Socket_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Res := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Res := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n          --  Is it OK to ignore result ???\n          Set_Non_Blocking_Socket (R, False);\n       end if;"}, {"sha": "08fac05d5550e987c58e34e58d542745331ca00d", "filename": "gcc/ada/g-socthi-vxworks.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vxworks.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -121,10 +121,10 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function C_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int;\n \n    function C_Listen\n      (S       : C.int;"}, {"sha": "b232378fab649779f5819eb2df56ca2592da6540", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -76,12 +76,6 @@ package body GNAT.Sockets.Thin is\n       Namelen : C.int) return C.int;\n    pragma Import (C, Syscall_Connect, \"connect\");\n \n-   function Syscall_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n-   pragma Import (C, Syscall_Ioctl, \"ioctl\");\n-\n    function Syscall_Recv\n      (S     : C.int;\n       Msg   : System.Address;\n@@ -165,11 +159,11 @@ package body GNAT.Sockets.Thin is\n         and then R /= Failure\n       then\n          --  A socket inherits the properties ot its server especially\n-         --  the FIONBIO flag. Do not use C_Ioctl as this subprogram\n+         --  the FIONBIO flag. Do not use Socket_Ioctl as this subprogram\n          --  tracks sockets set in non-blocking mode by user.\n \n          Set_Non_Blocking_Socket (R, Non_Blocking_Socket (S));\n-         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Discard := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n       end if;\n \n       Disable_SIGPIPE (R);\n@@ -235,26 +229,24 @@ package body GNAT.Sockets.Thin is\n       end if;\n    end C_Connect;\n \n-   -------------\n-   -- C_Ioctl --\n-   -------------\n+   ------------------\n+   -- Socket_Ioctl --\n+   ------------------\n \n-   function C_Ioctl\n+   function Socket_Ioctl\n      (S   : C.int;\n       Req : C.int;\n       Arg : access C.int) return C.int\n    is\n    begin\n-      if not SOSC.Thread_Blocking_IO\n-        and then Req = SOSC.FIONBIO\n-      then\n+      if not SOSC.Thread_Blocking_IO and then Req = SOSC.FIONBIO then\n          if Arg.all /= 0 then\n             Set_Non_Blocking_Socket (S, True);\n          end if;\n       end if;\n \n-      return Syscall_Ioctl (S, Req, Arg);\n-   end C_Ioctl;\n+      return C_Ioctl (S, Req, Arg);\n+   end Socket_Ioctl;\n \n    ------------\n    -- C_Recv --\n@@ -404,10 +396,10 @@ package body GNAT.Sockets.Thin is\n       if not SOSC.Thread_Blocking_IO\n         and then R /= Failure\n       then\n-         --  Do not use C_Ioctl as this subprogram tracks sockets set\n+         --  Do not use Socket_Ioctl as this subprogram tracks sockets set\n          --  in non-blocking mode by user.\n \n-         Discard := Syscall_Ioctl (R, SOSC.FIONBIO, Val'Access);\n+         Discard := C_Ioctl (R, SOSC.FIONBIO, Val'Access);\n          Set_Non_Blocking_Socket (R, False);\n       end if;\n       Disable_SIGPIPE (R);"}, {"sha": "eb690c5b4a88abaf319b247b3e8936e5b77affea", "filename": "gcc/ada/g-socthi.ads", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-socthi.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -122,10 +122,10 @@ package GNAT.Sockets.Thin is\n       Optval  : System.Address;\n       Optlen  : not null access C.int) return C.int;\n \n-   function C_Ioctl\n-     (S    : C.int;\n-      Req  : C.int;\n-      Arg  : access C.int) return C.int;\n+   function Socket_Ioctl\n+     (S   : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int;\n \n    function C_Listen\n      (S       : C.int;"}, {"sha": "c5636a8f1e35b7c89f1fc00290de4b0409c44b08", "filename": "gcc/ada/g-sothco.ads", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-sothco.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fg-sothco.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-sothco.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                       Copyright (C) 2008, AdaCore                        --\n+--                     Copyright (C) 2008-2009, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -321,12 +321,18 @@ package GNAT.Sockets.Thin_Common is\n       Cp  : C.Strings.chars_ptr;\n       Inp : System.Address) return C.int;\n \n+   function C_Ioctl\n+     (Fd  : C.int;\n+      Req : C.int;\n+      Arg : access C.int) return C.int;\n+\n private\n    pragma Import (C, Get_Socket_From_Set, \"__gnat_get_socket_from_set\");\n    pragma Import (C, Is_Socket_In_Set, \"__gnat_is_socket_in_set\");\n    pragma Import (C, Last_Socket_In_Set, \"__gnat_last_socket_in_set\");\n    pragma Import (C, Insert_Socket_In_Set, \"__gnat_insert_socket_in_set\");\n    pragma Import (C, Remove_Socket_From_Set, \"__gnat_remove_socket_from_set\");\n    pragma Import (C, Reset_Socket_Set, \"__gnat_reset_socket_set\");\n+   pragma Import (C, C_Ioctl, \"__gnat_socket_ioctl\");\n    pragma Import (C, Inet_Pton, SOSC.Inet_Pton_Linkname);\n end GNAT.Sockets.Thin_Common;"}, {"sha": "dc6954696922b7127215776ef3685593630e5d32", "filename": "gcc/ada/i-vxwoio.ads", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fi-vxwoio.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fi-vxwoio.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fi-vxwoio.ads?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -53,8 +53,8 @@ package Interfaces.VxWorks.IO is\n    type IOOPT is mod 2 ** int'Size;\n    --  Type of the option codes in ioctl\n \n-   --  ioctl function codes\n-   --  For more information see ioLib.h\n+   --  ioctl function codes (for more information see ioLib.h)\n+   --  These values could be generated automatically in System.OS_Constants???\n \n    FIONREAD       : constant FUNCODE := 1;\n    FIOFLUSH       : constant FUNCODE := 2;\n@@ -129,6 +129,9 @@ package Interfaces.VxWorks.IO is\n    function ioctl (Fd : int; Function_Code : FUNCODE; Arg : IOOPT) return int;\n    pragma Import (C, ioctl, \"ioctl\");\n    --  Binding to the C routine ioctl\n+   --\n+   --  Note: we are taking advantage of the fact that on currently supported\n+   --  VxWorks targets, it is fine to directly bind to a variadic C function.\n \n    ------------------------------\n    -- Control of Get_Immediate --"}, {"sha": "df3b1206428ea138c46bd5cb343d8d49ee92d978", "filename": "gcc/ada/socket.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fsocket.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f26d5cd3cb349d6a5bb39a74ae28d47bd378c937/gcc%2Fada%2Fsocket.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsocket.c?ref=f26d5cd3cb349d6a5bb39a74ae28d47bd378c937", "patch": "@@ -73,6 +73,7 @@ extern fd_set *__gnat_new_socket_set (fd_set *);\n extern void __gnat_remove_socket_from_set (fd_set *, int);\n extern void __gnat_reset_socket_set (fd_set *);\n extern int  __gnat_get_h_errno (void);\n+extern int  __gnat_socket_ioctl (int, int, int *);\n #if defined (__vxworks) || defined (_WIN32)\n extern int  __gnat_inet_pton (int, const char *, void *);\n #endif\n@@ -409,6 +410,17 @@ __gnat_get_h_errno (void) {\n #endif\n }\n \n+/* Wrapper for ioctl(2), which is a variadic function */\n+\n+int\n+__gnat_socket_ioctl (int fd, int req, int *arg) {\n+#if defined (_WIN32)\n+  return ioctlsocket (fd, req, arg);\n+#else\n+  return ioctl (fd, req, arg);\n+#endif\n+}\n+\n #ifndef HAVE_INET_PTON\n \n #ifdef VMS"}]}