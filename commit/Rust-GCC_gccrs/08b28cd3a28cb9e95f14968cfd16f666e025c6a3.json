{"sha": "08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhiMjhjZDNhMjhjYjllOTVmMTQ5NjhjZmQxNmY2NjZlMDI1YzZhMw==", "commit": {"author": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T08:01:42Z"}, "committer": {"name": "Doug Evans", "email": "dje@gnu.org", "date": "1994-06-15T08:01:42Z"}, "message": "Initial revision\n\nFrom-SVN: r7489", "tree": {"sha": "0b0833758d40559a379561176c99f17fdece6ced", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b0833758d40559a379561176c99f17fdece6ced"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08b28cd3a28cb9e95f14968cfd16f666e025c6a3/comments", "author": null, "committer": null, "parents": [{"sha": "5181669e0718cb2ecd72f5dc4aaabf665f078967", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5181669e0718cb2ecd72f5dc4aaabf665f078967", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5181669e0718cb2ecd72f5dc4aaabf665f078967"}], "stats": {"total": 241, "additions": 241, "deletions": 0}, "files": [{"sha": "9118ad07b1abf0c7fe6811c1eb05e63a0695118c", "filename": "gcc/genmultilib", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08b28cd3a28cb9e95f14968cfd16f666e025c6a3/gcc%2Fgenmultilib", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08b28cd3a28cb9e95f14968cfd16f666e025c6a3/gcc%2Fgenmultilib", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenmultilib?ref=08b28cd3a28cb9e95f14968cfd16f666e025c6a3", "patch": "@@ -0,0 +1,241 @@\n+#!/bin/sh \n+# Generates multilib.h.\n+#   Copyright (C) 1994 Free Software Foundation, Inc.\n+\n+#This file is part of GNU CC.\n+\n+#GNU CC is free software; you can redistribute it and/or modify\n+#it under the terms of the GNU General Public License as published by\n+#the Free Software Foundation; either version 2, or (at your option)\n+#any later version.\n+\n+#GNU CC is distributed in the hope that it will be useful,\n+#but WITHOUT ANY WARRANTY; without even the implied warranty of\n+#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+#GNU General Public License for more details.\n+\n+#You should have received a copy of the GNU General Public License\n+#along with GNU CC; see the file COPYING.  If not, write to\n+#the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.\n+\n+# This shell script produces a header file which the gcc driver\n+# program uses to pick which library to use based on the machine\n+# specific options that it is given.\n+\n+# The first argument is a list of sets of options.  The elements in\n+# the list are separated by spaces.  Within an element, the options\n+# are separated by slashes.  No leading dash is used on the options.\n+# Each option in a set is mutually incompatible with all other options\n+# in the set.\n+\n+# The optional second argument is a list of subdirectory names.  If\n+# the second argument is non-empty, there must be as many elements in\n+# the second argument as there are options in the first argument.  The\n+# elements in the second list are separated by spaces.  If the second\n+# argument is empty, the option names will be used as the directory\n+# names.\n+\n+# The optional third argument is a list of options which are\n+# identical.  The elements in the list are separated by spaces.  Each\n+# element must be of the form OPTION=OPTION.  The first OPTION should\n+# appear in the first argument, and the second should be a synonym for\n+# it.\n+\n+# The output looks like\n+#   #define MULTILIB_MATCHES \"\\\n+#   SUBDIRECTORY OPTIONS;\\\n+#   ...\n+#   \"\n+# The SUBDIRECTORY is the subdirectory to use.  The OPTIONS are\n+# multiple options separated by spaces.  Each option may start with an\n+# exclamation point.  gcc will consider each line in turn.  If none of\n+# the options beginning with an exclamation point are present, and all\n+# of the other options are present, that subdirectory will be used.\n+# The order of the subdirectories is such that they can be created in\n+# order; that is, a subdirectory is preceded by all its parents.\n+\n+# Here is a example (this is simplified from the actual 680x0 case):\n+#   genmultilib \"m68000/m68020 msoft-float\" \"m68000 m68020 msoft-float\"\n+#\t\t\"m68000=mc68000\"\n+# This produces:\n+#   #define MULTILIB_MATCHES \"\\\n+#   m68000/msoft-float m68000 msoft-float;\\\n+#   m68000/msoft-float mc68000 msoft-float;\\\n+#   m68020/msoft-float m68020 msoft-float;\\\n+#   msoft-float !m68000 !mc68000 !m68020 msoft-float;\\\n+#   m68000 m68000 !msoft-float;\\\n+#   m68000 mc60000 !msoft-float;\\\n+#   m68020 m68020 !msoft-float;\\\n+#   . !m68000 !mc68000 !m68020 !msoft-float;\\\n+#   \"\n+# The effect is that `gcc -msoft-float' (for example) will append\n+# msoft-float to the directory name when searching for libraries or\n+# startup files, and `gcc -m68000 -msoft-float' (for example) will\n+# append m68000/msoft-float.\n+\n+# Copy the positional parameters into variables.\n+options=$1\n+dirnames=$2\n+matches=$3\n+\n+# What we want to do is select all combinations of the sets in\n+# options.  Each combination which includes a set of mutually\n+# exclusive options must then be output multiple times, once for each\n+# item in the set.  Selecting combinations is a recursive process.\n+# Since not all versions of sh support functions, we achieve recursion\n+# by creating a temporary shell script which invokes itself.\n+rm -f tmpmultilib\n+cat >tmpmultilib <<\\EOF\n+#!/bin/sh\n+# This recursive script basically outputs all combinations of its\n+# input arguments, handling mutually exclusive sets of options by\n+# repetition.  When the script is called, ${initial} is the list of\n+# options which should appear before all combinations this will\n+# output.  The output looks like a list of subdirectory names with\n+# leading and trailing slashes.\n+if [ \"$#\" != \"0\" ]; then\n+  first=$1\n+  shift\n+  for opt in `echo $first | sed -e 's|/| |'g`; do\n+    echo ${initial}${opt}/\n+  done\n+  ./tmpmultilib $@\n+  for opt in `echo $first | sed -e 's|/| |'g`; do\n+    initial=\"${initial}${opt}/\" ./tmpmultilib $@\n+  done\n+fi\n+EOF\n+chmod +x tmpmultilib\n+\n+combinations=`initial=/ ./tmpmultilib ${options}`\n+\n+rm -f tmpmultilib\n+\n+# Construct a sed pattern which will convert option names to directory\n+# names.\n+todirnames=\n+if [ -n \"${dirnames}\" ]; then\n+  set x ${dirnames}\n+  shift\n+  for set in ${options}; do\n+    for opt in `echo ${set} | sed -e 's|/| |'g`; do\n+      if [ \"$1\" != \"${opt}\" ]; then\n+        todirnames=\"${todirnames} -e s|/${opt}/|/${1}/|g\"\n+      fi\n+      shift\n+    done\n+  done\n+fi\n+\n+# Construct a sed pattern which will add negations based on the\n+# matches.  The semicolons are easier than getting the shell to accept\n+# quoted spaces when expanding a variable.\n+matchnegations=\n+for i in ${matches}; do\n+  l=`echo $i | sed -e 's/=.*$//'`\n+  r=`echo $i | sed -e 's/^.*=//'`\n+  matchnegations=\"${matchnegations} -e s/;!${l};/;!${l};!${r};/\"\n+done\n+\n+# We need another recursive shell script to correctly handle positive\n+# matches.  If we are invoked as\n+#   genmultilib \"opt1 opt2\" \"\" \"opt1=nopt1 opt2=nopt2\"\n+# we must output\n+#   opt1/opt2 opt1 opt2\n+#   opt1/opt2 nopt1 opt2\n+#   opt1/opt2 opt1 nopt2\n+#   opt1/opt2 nopt1 nopt2\n+# In other words, we must output all combinations of matches.\n+rm -f tmpmultilib2\n+cat >tmpmultilib2 <<\\EOF\n+#!/bin/sh\n+# The positional parameters are a list of matches to consider.\n+# ${dirout} is the directory name and ${optout} is the current list of\n+# options.\n+if [ \"$#\" = \"0\" ]; then\n+  echo \"${dirout} ${optout};\\\\\"\n+else\n+  first=$1\n+  shift\n+  dirout=\"${dirout}\" optout=\"${optout}\" ./tmpmultilib2 $@\n+  l=`echo ${first} | sed -e 's/=.*$//'`\n+  r=`echo ${first} | sed -e 's/^.*=//'`\n+  case \" ${optout} \" in\n+  *\" ${l} \"*)\n+    newopt=`echo \" ${optout} \" | sed -e \"s/ ${l} / ${r} /\" -e 's/^ //' -e 's/ $//'`\n+    dirout=\"${dirout}\" optout=\"${newopt}\" ./tmpmultilib2 $@\n+    ;;\n+  esac\n+fi\n+EOF\n+chmod +x tmpmultilib2\n+\n+# We are ready to start output.\n+echo '#define MULTILIB_SELECT \"\\'\n+\n+# Start with the current directory, which includes only negations.\n+optout=\n+for set in ${options}; do\n+  for opt in `echo ${set} | sed -e 's|/| |'g`; do\n+    optout=\"${optout} !${opt}\"\n+  done\n+done\n+optout=`echo ${optout} | sed -e 's/^ //'`\n+if [ -n \"${matchnegations}\" ]; then\n+  optout=`echo \";${optout};\" | sed -e 's/ /;/g' ${matchnegations} -e 's/^;//' -e 's/;$//' -e 's/;/ /g'`\n+fi\n+echo \". ${optout};\\\\\"\n+\n+# Work over the list of combinations.  We have to translate each one\n+# to use the directory names rather than the option names, we have to\n+# include the information in matches, and we have to generate the\n+# correct list of options and negations.\n+for combo in ${combinations}; do\n+  # Use the directory names rather than the option names.\n+  if [ -n \"${todirnames}\" ]; then\n+    dirout=`echo ${combo} | sed ${todirnames}`\n+  else\n+    dirout=${combo}\n+  fi\n+  # Remove the leading and trailing slashes.\n+  dirout=`echo ${dirout} | sed -e 's|^/||' -e 's|/$||g'`\n+\n+  # Look through the options.  We must output each option that is\n+  # present, and negate each option that is not present.  If an\n+  # element of a set is present, we need not negate the other elements\n+  # of the set.\n+  optout=\n+  for set in ${options}; do\n+    setopts=`echo ${set} | sed -e 's|/| |g'`\n+    found=\n+    for opt in ${setopts}; do\n+      case \"${combo}\" in\n+      *\"/${opt}/\"*)\n+\toptout=\"${optout} ${opt}\"\n+\tfound=yes\n+\t;;\n+      esac\n+    done\n+    if [ \"${found}\" = \"\" ]; then\n+      for opt in ${setopts}; do\n+\toptout=\"${optout} !${opt}\"\n+      done\n+    fi\n+  done\n+  optout=`echo ${optout} | sed -e 's/^ //'`\n+\n+  # Add any negations of matches.\n+  if [ -n \"${matchnegations}\" ]; then\n+    optout=`echo \";${optout};\" | sed -e 's/ /;/g' ${matchnegations} -e 's/^;//' -e 's/;$//' -e 's/;/ /g'`\n+  fi\n+\n+  # Output the line with all appropriate matches.\n+  dirout=\"${dirout}\" optout=\"${optout}\" ./tmpmultilib2 ${matches}\n+done\n+\n+rm -f tmpmultilib2\n+\n+# That's it.\n+echo '\"'\n+\n+exit 0"}]}