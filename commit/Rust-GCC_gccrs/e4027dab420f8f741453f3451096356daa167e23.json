{"sha": "e4027dab420f8f741453f3451096356daa167e23", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQwMjdkYWI0MjBmOGY3NDE0NTNmMzQ1MTA5NjM1NmRhYTE2N2UyMw==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@redhat.com", "date": "2001-03-15T11:02:20Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2001-03-15T11:02:20Z"}, "message": "Fix scheduling abort; stop bits must have selector in range 1..3.\n\nFrom-SVN: r40497", "tree": {"sha": "fd9ec527045a1cd9c48f7473376d2429b748a3d0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9ec527045a1cd9c48f7473376d2429b748a3d0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4027dab420f8f741453f3451096356daa167e23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4027dab420f8f741453f3451096356daa167e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4027dab420f8f741453f3451096356daa167e23", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4027dab420f8f741453f3451096356daa167e23/comments", "author": null, "committer": null, "parents": [{"sha": "d1d617880cbc2a399e9b98302cf11b45dd2cbcbe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1d617880cbc2a399e9b98302cf11b45dd2cbcbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1d617880cbc2a399e9b98302cf11b45dd2cbcbe"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "b1f390ccfba7a5707d063139f8681d4e250d1a34", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4027dab420f8f741453f3451096356daa167e23/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4027dab420f8f741453f3451096356daa167e23/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e4027dab420f8f741453f3451096356daa167e23", "patch": "@@ -1,3 +1,11 @@\n+2001-03-15  Bernd Schmidt  <bernds@redhat.com>\n+\n+\t* config/ia64/ia64.c (maybe_rotate): New function, broken out of\n+\tia64_sched_reorder.\n+\t(ia64_sched_reorder): Call maybe_rotate; also rotate after\n+\tscheduling a stop bit.\n+\t(ia64_emit_nops): Correctly handle ASMs.\n+\n 2001-03-15  Mark Mitchell  <mark@codesourcery.com>\n \n \t* varasm.c (assemble_variable): Use DECL_RTL_SET_P."}, {"sha": "03f977a95d49e6c938616eb1a36b5abb4fb1f2ae", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4027dab420f8f741453f3451096356daa167e23/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4027dab420f8f741453f3451096356daa167e23/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=e4027dab420f8f741453f3451096356daa167e23", "patch": "@@ -5650,6 +5650,20 @@ schedule_stop (dump)\n     dump_current_packet (dump);\n }\n \n+/* If necessary, perform one or two rotations on the scheduling state.  \n+   This should only be called if we are starting a new cycle.  */\n+\n+static void\n+maybe_rotate (dump)\n+     FILE *dump;\n+{\n+  if (sched_data.cur == 6)\n+    rotate_two_bundles (dump);\n+  else if (sched_data.cur >= 3)\n+    rotate_one_bundle (dump);\n+  sched_data.first_slot = sched_data.cur;\n+}\n+\n /* We are about to being issuing insns for this clock cycle.\n    Override the default sort algorithm to better slot instructions.  */\n \n@@ -5673,13 +5687,7 @@ ia64_sched_reorder (dump, sched_verbose, ready, pn_ready, reorder_type)\n     }\n \n   if (reorder_type == 0)\n-    {\n-      if (sched_data.cur == 6)\n-\trotate_two_bundles (sched_verbose ? dump : NULL);\n-      else if (sched_data.cur >= 3)\n-\trotate_one_bundle (sched_verbose ? dump : NULL);\n-      sched_data.first_slot = sched_data.cur;\n-    }\n+    maybe_rotate (sched_verbose ? dump : NULL);\n \n   /* First, move all USEs, CLOBBERs and other crud out of the way.  */\n   highest = ready[n_ready - 1];\n@@ -5697,12 +5705,17 @@ ia64_sched_reorder (dump, sched_verbose, ready, pn_ready, reorder_type)\n \t      {\n \t\tschedule_stop (sched_verbose ? dump : NULL);\n \t\tsched_data.last_was_stop = 1;\n+\t\tmaybe_rotate (sched_verbose ? dump : NULL);\n+\t\tif (dump)\n+\t\t  fprintf (dump, \"// UNKNOWN insn; group barrier needed.\\n\");\n \t      }\n \t    else if (GET_CODE (PATTERN (insn)) == ASM_INPUT\n \t\t     || asm_noperands (PATTERN (insn)) >= 0)\n \t      {\n \t\t/* It must be an asm of some kind.  */\n \t\tcycle_end_fill_slots (sched_verbose ? dump : NULL);\n+\t\tif (dump)\n+\t\t  fprintf (dump, \"// UNKNOWN (asm).\\n\");\n \t      }\n \t    return 1;\n \t  }\n@@ -5728,6 +5741,7 @@ ia64_sched_reorder (dump, sched_verbose, ready, pn_ready, reorder_type)\n \t{\n \t  schedule_stop (sched_verbose ? dump : NULL);\n \t  sched_data.last_was_stop = 1;\n+\t  maybe_rotate (sched_verbose ? dump : NULL);\n \t  if (reorder_type == 1)\n \t    return 0;\n \t}\n@@ -6082,6 +6096,17 @@ ia64_emit_nops ()\n       if (b && INSN_P (insn))\n \t{\n \t  t = ia64_safe_type (insn);\n+\t  if (asm_noperands (PATTERN (insn)) >= 0\n+\t      || GET_CODE (PATTERN (insn)) == ASM_INPUT)\n+\t    {\n+\t      while (bundle_pos < 3)\n+\t\t{\n+\t\t  emit_insn_before (gen_nop_type (b->t[bundle_pos]), insn);\n+\t\t  bundle_pos++;\n+\t\t}\n+\t      continue;\n+\t    }\n+\n \t  if (t == TYPE_UNKNOWN)\n \t    continue;\n \t  while (bundle_pos < 3)"}]}