{"sha": "cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZiNmI0YjhjM2MwMWJlNWExZDQzNjk1YzlkMjk4ODgzOGYyMjU0YQ==", "commit": {"author": {"name": "Ranjit Mathew", "email": "rmathew@hotmail.com", "date": "2004-06-17T13:45:23Z"}, "committer": {"name": "Ranjit Mathew", "email": "rmathew@gcc.gnu.org", "date": "2004-06-17T13:45:23Z"}, "message": "re PR java/13948 (GCJ segmentation fault while compiling GL4Java .class files)\n\n\tFixes PR java/13948\n\t* parse.y (java_layout_seen_class_methods): Ensure class is loaded\n\tbefore trying to lay out its methods.\n\t* jcf-parse.c (read_class): Track parsed files using canonical paths\n\tobtained via lrealpath from libiberty.\n\t(java_parse_file): Likewise.\n\t(parse_source_file_1): Rename formal parameter to reflect its\n\tmodified purpose. Minor formatting fix.\n\nFrom-SVN: r83292", "tree": {"sha": "e9e1192174fd464acc4c3c8b496859d2d296a690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9e1192174fd464acc4c3c8b496859d2d296a690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/comments", "author": null, "committer": null, "parents": [{"sha": "794c3bee303760a10e5442d23cda23b6c71ed5ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/794c3bee303760a10e5442d23cda23b6c71ed5ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/794c3bee303760a10e5442d23cda23b6c71ed5ea"}], "stats": {"total": 62, "additions": 48, "deletions": 14}, "files": [{"sha": "3c2b1a2cf18901acde1aaba8ae2754d59deb232c", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "patch": "@@ -1,3 +1,14 @@\n+2004-06-17  Ranjit Mathew  <rmathew@hotmail.com>\n+\n+\tFixes PR java/13948\n+\t* parse.y (java_layout_seen_class_methods): Ensure class is loaded\n+\tbefore trying to lay out its methods.\n+\t* jcf-parse.c (read_class): Track parsed files using canonical paths\n+\tobtained via lrealpath from libiberty.\n+\t(java_parse_file): Likewise.\n+\t(parse_source_file_1): Rename formal parameter to reflect its\n+\tmodified purpose. Minor formatting fix.\n+\n 2004-06-15  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* class.c (emit_register_classes): Make the function uninlinable,"}, {"sha": "c948a1ab9dae8ee4e586af4223654f59ed446fc9", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "patch": "@@ -494,27 +494,33 @@ read_class (tree name)\n   if (current_jcf->java_source)\n     {\n       const char *filename = current_jcf->filename;\n-      tree file;\n+      tree given_file, real_file;\n       FILE *finput;\n       int generate;\n \n       java_parser_context_save_global ();\n       java_push_parser_context ();\n-      BUILD_FILENAME_IDENTIFIER_NODE (file, filename);\n-      generate = IS_A_COMMAND_LINE_FILENAME_P (file);\n+\n+      BUILD_FILENAME_IDENTIFIER_NODE (given_file, filename);\n+      real_file = get_identifier (lrealpath (filename));\n+\n+      generate = IS_A_COMMAND_LINE_FILENAME_P (given_file);\n       if (wfl_operator == NULL_TREE)\n \twfl_operator = build_expr_wfl (NULL_TREE, NULL, 0, 0);\n-      EXPR_WFL_FILENAME_NODE (wfl_operator) = file;\n+      EXPR_WFL_FILENAME_NODE (wfl_operator) = given_file;\n       input_filename = ggc_strdup (filename);\n       output_class = current_class = NULL_TREE;\n       current_function_decl = NULL_TREE;\n-      if (!HAS_BEEN_ALREADY_PARSED_P (file))\n+\n+      if (! HAS_BEEN_ALREADY_PARSED_P (real_file))\n \t{\n-\t  if (!(finput = fopen (input_filename, \"r\")))\n+\t  if (! (finput = fopen (input_filename, \"r\")))\n \t    fatal_error (\"can't reopen %s: %m\", input_filename);\n-\t  parse_source_file_1 (file, finput);\n+\n+\t  parse_source_file_1 (real_file, finput);\n \t  parse_source_file_2 ();\n \t  parse_source_file_3 ();\n+\n \t  if (fclose (finput))\n \t    fatal_error (\"can't close %s: %m\", input_filename);\n \t}\n@@ -798,11 +804,12 @@ parse_class_file (void)\n /* Parse a source file, as pointed by the current value of INPUT_FILENAME. */\n \n static void\n-parse_source_file_1 (tree file, FILE *finput)\n+parse_source_file_1 (tree real_file, FILE *finput)\n {\n   int save_error_count = java_error_count;\n-  /* Mark the file as parsed */\n-  HAS_BEEN_ALREADY_PARSED_P (file) = 1;\n+\n+  /* Mark the file as parsed.  */\n+  HAS_BEEN_ALREADY_PARSED_P (real_file) = 1;\n \n   jcf_dependency_add_file (input_filename, 0);\n \n@@ -1015,9 +1022,11 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n       unsigned char magic_string[4];\n       uint32 magic = 0;\n       tree name = TREE_VALUE (node);\n+      tree real_file;\n \n       /* Skip already parsed files */\n-      if (HAS_BEEN_ALREADY_PARSED_P (name))\n+      real_file = get_identifier (lrealpath (IDENTIFIER_POINTER (name)));\n+      if (HAS_BEEN_ALREADY_PARSED_P (real_file))\n \tcontinue;\n       \n       /* Close previous descriptor, if any */\n@@ -1075,7 +1084,8 @@ java_parse_file (int set_yydebug ATTRIBUTE_UNUSED)\n \t  JAVA_FILE_P (node) = 1;\n \t  java_push_parser_context ();\n \t  java_parser_context_save_global ();\n-\t  parse_source_file_1 (name, finput);\n+\n+\t  parse_source_file_1 (real_file, finput);\n \t  java_parser_context_restore_global ();\n \t  java_pop_parser_context (1);\n \t}"}, {"sha": "dd52a39359d57f659639bb8cba698983d06b4d71", "filename": "gcc/java/parse.y", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfb6b4b8c3c01be5a1d43695c9d2988838f2254a/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=cfb6b4b8c3c01be5a1d43695c9d2988838f2254a", "patch": "@@ -7574,7 +7574,10 @@ add_stmt_to_block (tree b, tree type, tree stmt)\n   return c;\n }\n \n-void java_layout_seen_class_methods (void)\n+/* Lays out the methods for the classes seen so far.  */\n+\n+void\n+java_layout_seen_class_methods (void)\n {\n   tree previous_list = all_class_list;\n   tree end = NULL_TREE;\n@@ -7584,7 +7587,17 @@ void java_layout_seen_class_methods (void)\n     {\n       for (current = previous_list;\n \t   current != end; current = TREE_CHAIN (current))\n-\tlayout_class_methods (TREE_TYPE (TREE_VALUE (current)));\n+        {\n+          tree cls = TREE_TYPE (TREE_VALUE (current));\n+\n+          if (! CLASS_LOADED_P (cls))\n+            load_class (cls, 0);\n+\n+          layout_class_methods (cls);\n+        }\n+\n+      /* Note that new classes might have been added while laying out\n+         methods, changing the value of all_class_list.  */\n \n       if (previous_list != all_class_list)\n \t{"}]}