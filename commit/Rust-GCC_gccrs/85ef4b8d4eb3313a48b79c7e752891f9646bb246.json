{"sha": "85ef4b8d4eb3313a48b79c7e752891f9646bb246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVlZjRiOGQ0ZWIzMzEzYTQ4Yjc5YzdlNzUyODkxZjk2NDZiYjI0Ng==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-27T18:07:46Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-04-27T18:07:46Z"}, "message": "libstdc++: Fix up lambda in join_view::_Iterator::operator++ [PR100290]\n\nCurrently, the return type of this lambda is decltype(auto), so the\nlambda ends up returning a copy of _M_parent->_M_inner rather than a\nreference to it when _S_ref_glvalue is false.  This means _M_inner and\nranges::end(__inner_range) are respectively an iterator and sentinel for\ndifferent ranges, so comparing them is undefined.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/100290\n\t* include/std/ranges (join_view::_Iterator::operator++): Correct\n\tthe return type of the lambda to avoid returning a copy of\n\t_M_parent->_M_inner.\n\t* testsuite/std/ranges/adaptors/join.cc (test10): New test.", "tree": {"sha": "dd8c1523f84bc420366f16f48c5d019c1ebb25fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd8c1523f84bc420366f16f48c5d019c1ebb25fb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85ef4b8d4eb3313a48b79c7e752891f9646bb246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ef4b8d4eb3313a48b79c7e752891f9646bb246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85ef4b8d4eb3313a48b79c7e752891f9646bb246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85ef4b8d4eb3313a48b79c7e752891f9646bb246/comments", "author": null, "committer": null, "parents": [{"sha": "c605a8bf92708e81d771426a87b3baddc32082dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c605a8bf92708e81d771426a87b3baddc32082dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c605a8bf92708e81d771426a87b3baddc32082dd"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "09115e9b45f9918dbc8905bece44bb1baeab58b1", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ef4b8d4eb3313a48b79c7e752891f9646bb246/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ef4b8d4eb3313a48b79c7e752891f9646bb246/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=85ef4b8d4eb3313a48b79c7e752891f9646bb246", "patch": "@@ -2389,7 +2389,7 @@ namespace views::__adaptor\n \t  constexpr _Iterator&\n \t  operator++()\n \t  {\n-\t    auto&& __inner_range = [this] () -> decltype(auto) {\n+\t    auto&& __inner_range = [this] () -> auto&& {\n \t      if constexpr (_S_ref_is_glvalue)\n \t\treturn *_M_outer;\n \t      else"}, {"sha": "e6c71d771ded919d3e08db59cc4e15af93291867", "filename": "libstdc++-v3/testsuite/std/ranges/adaptors/join.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85ef4b8d4eb3313a48b79c7e752891f9646bb246/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85ef4b8d4eb3313a48b79c7e752891f9646bb246/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fadaptors%2Fjoin.cc?ref=85ef4b8d4eb3313a48b79c7e752891f9646bb246", "patch": "@@ -160,6 +160,16 @@ test09()\n   static_assert(!requires { 0 | join; });\n }\n \n+void\n+test10()\n+{\n+  // PR libstdc++/100290\n+  auto v = views::single(0)\n+    | views::transform([](const auto& s) { return views::single(s); })\n+    | views::join;\n+  VERIFY( ranges::next(v.begin()) == v.end() );\n+}\n+\n int\n main()\n {\n@@ -172,4 +182,5 @@ main()\n   test07();\n   test08();\n   test09();\n+  test10();\n }"}]}