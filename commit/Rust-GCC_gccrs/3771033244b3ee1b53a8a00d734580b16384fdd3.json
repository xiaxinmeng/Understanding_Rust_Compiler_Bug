{"sha": "3771033244b3ee1b53a8a00d734580b16384fdd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mzc3MTAzMzI0NGIzZWUxYjUzYThhMDBkNzM0NTgwYjE2Mzg0ZmRkMw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-11-14T19:24:21Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-11-14T19:24:21Z"}, "message": "Tweak gcc.dg/vect/bb-slp-4[01].c (PR92366)\n\ngcc.dg/vect/bb-slp-40.c was failing on some targets because the\nexplicit dg-options overrode things like -maltivec.  This patch\nuses dg-additional-options instead.\n\nAlso, it seems safer not to require exactly 1 instance of each message,\nsince that depends on the target vector length.\n\ngcc.dg/vect/bb-slp-41.c contained invariant constructors that are\nvectorised on AArch64 (foo) and constructors that aren't (bar).\nThis meant that the number of times we print \"Found vectorizable\nconstructor\" depended on how many vector sizes we try, since we'd\nprint it for each failed attempt.\n\nIn foo, we create invariant { b[0], ... } and { b[1], ... },\nand the test is making sure that the two separate invariant vectors\ncan be fed from the same vector load at b.  This is a different case\nfrom bb-slp-40.c, where the constructors are naturally separate.\n(The expected count is 4 rather than 2 because we can vectorise the\nepilogue too.)\n\nHowever, due to limitations in the loop vectoriser, we still do the\naddition of { b[0], ... } and { b[1], ... } in the loop.  Hopefully\nthat'll be fixed at some point, so this patch adds an alternative test\nthat directly needs 4 separate invariant constructors.  E.g. with Joel's\nSLP optimisation, the new test generates:\n\n        ldr     q4, [x1]\n        dup     v7.4s, v4.s[0]\n        dup     v6.4s, v4.s[1]\n        dup     v5.4s, v4.s[2]\n        dup     v4.4s, v4.s[3]\n\ninstead of the somewhat bizarre:\n\n        ldp     s6, s5, [x1, 4]\n        ldr     s4, [x1, 12]\n        ld1r    {v7.4s}, [x1]\n        dup     v6.4s, v6.s[0]\n        dup     v5.4s, v5.s[0]\n        dup     v4.4s, v4.s[0]\n\nThe patch then disables vectorisation of the original foo in\nbb-vect-slp-41.c, so that we get the same correctness testing\nfor bar but don't need to test for specific counts.\n\n2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/testsuite/\n\tPR testsuite/92366\n\t* gcc.dg/vect/bb-slp-40.c: Use dg-additional-options instead\n\tof dg-options.  Remove expected counts.\n\t* gcc.dg/vect/bb-slp-41.c: Remove dg-options and explicit\n\tdg-do run.  Suppress vectorization of foo.\n\t* gcc.dg/vect/bb-slp-42.c: New test.\n\nFrom-SVN: r278262", "tree": {"sha": "1fe1a16992571020b09ea7909c104ef2c6a12c21", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1fe1a16992571020b09ea7909c104ef2c6a12c21"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3771033244b3ee1b53a8a00d734580b16384fdd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3771033244b3ee1b53a8a00d734580b16384fdd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3771033244b3ee1b53a8a00d734580b16384fdd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3771033244b3ee1b53a8a00d734580b16384fdd3/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "bbc85eb9cfdfbbd6e81b2a98e3bddc90e0863497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbc85eb9cfdfbbd6e81b2a98e3bddc90e0863497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbc85eb9cfdfbbd6e81b2a98e3bddc90e0863497"}], "stats": {"total": 73, "additions": 64, "deletions": 9}, "files": [{"sha": "668444818f2b63fff93db31aa692d57bb538791a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3771033244b3ee1b53a8a00d734580b16384fdd3", "patch": "@@ -1,3 +1,12 @@\n+2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR testsuite/92366\n+\t* gcc.dg/vect/bb-slp-40.c: Use dg-additional-options instead\n+\tof dg-options.  Remove expected counts.\n+\t* gcc.dg/vect/bb-slp-41.c: Remove dg-options and explicit\n+\tdg-do run.  Suppress vectorization of foo.\n+\t* gcc.dg/vect/bb-slp-42.c: New test.\n+\n 2019-11-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.dg/vect/bb-slp-div-2.c: New test."}, {"sha": "ecdaf830c12d60b0c1470175dfcecaad27972e47", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-40.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-40.c?ref=3771033244b3ee1b53a8a00d734580b16384fdd3", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O3 -fdump-tree-slp-all\" } */\n+/* { dg-additional-options \"-fvect-cost-model=dynamic\" } */\n /* { dg-require-effective-target vect_int } */\n \n char g_d[1024], g_s1[1024], g_s2[1024];\n@@ -30,5 +30,5 @@ void foo(void)\n }\n \n /* See that we vectorize an SLP instance.  */\n-/* { dg-final { scan-tree-dump-times \"Found vectorizable constructor\" 1 \"slp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 1 \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"Found vectorizable constructor\" \"slp1\" } } */\n+/* { dg-final { scan-tree-dump \"vectorizing stmts using SLP\" \"slp1\" } } */"}, {"sha": "7de5ed1f5be33497aee2db0587e4100caf8631bf", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-41.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-41.c?ref=3771033244b3ee1b53a8a00d734580b16384fdd3", "patch": "@@ -1,10 +1,9 @@\n-/* { dg-do run } */\n-/* { dg-options \"-O3 -fdump-tree-slp-all -fno-vect-cost-model\" } */\n /* { dg-require-effective-target vect_int } */\n \n #define ARR_SIZE 1000\n \n-void foo (int *a, int *b)\n+void __attribute__((optimize (0)))\n+foo (int *a, int *b)\n {\n   int i;\n   for (i = 0; i < (ARR_SIZE - 2); ++i)\n@@ -56,6 +55,4 @@ int main ()\n   return 0;\n \n }\n-/* See that we vectorize an SLP instance.  */\n-/* { dg-final { scan-tree-dump-times \"Found vectorizable constructor\" 12 \"slp1\" } } */\n-/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"slp1\" } } */\n+/* { dg-final { scan-tree-dump-not \"vectorizing stmts using SLP\" \"slp1\" } } */"}, {"sha": "091a273d2afe64e8e68c322bb875737a9f62e547", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-42.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3771033244b3ee1b53a8a00d734580b16384fdd3/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-42.c?ref=3771033244b3ee1b53a8a00d734580b16384fdd3", "patch": "@@ -0,0 +1,49 @@\n+/* { dg-require-effective-target vect_int } */\n+/* { dg-require-effective-target vect_perm } */\n+\n+#include \"tree-vect.h\"\n+\n+#define ARR_SIZE 1024\n+\n+void __attribute__((noipa))\n+foo (int a[][ARR_SIZE], int *b)\n+{\n+  int i;\n+  for (i = 0; i < ARR_SIZE; ++i)\n+    {\n+      a[0][i] += b[0];\n+      a[1][i] += b[1];\n+      a[2][i] += b[2];\n+      a[3][i] += b[3];\n+    }\n+}\n+\n+int\n+main ()\n+{\n+  int a[4][ARR_SIZE];\n+  int b[4];\n+\n+  check_vect ();\n+\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      b[i] = 20 * i;\n+      for (int j = 0; j < ARR_SIZE; ++j)\n+\ta[i][j] = (i + 1) * ARR_SIZE - j;\n+    }\n+\n+  foo (a, b);\n+\n+  for (int i = 0; i < 4; ++i)\n+    for (int j = 0; j < ARR_SIZE; ++j)\n+      if (a[i][j] != (i + 1) * ARR_SIZE - j + 20 * i)\n+\t__builtin_abort ();\n+\n+  return 0;\n+\n+}\n+\n+/* See that we vectorize an SLP instance.  */\n+/* { dg-final { scan-tree-dump \"Found vectorizable constructor\" \"slp1\" { target { ! vect_fully_masked } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorizing stmts using SLP\" 4 \"slp1\" { target { ! vect_fully_masked } } } } */"}]}