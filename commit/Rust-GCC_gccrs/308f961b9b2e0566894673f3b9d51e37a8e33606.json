{"sha": "308f961b9b2e0566894673f3b9d51e37a8e33606", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzA4Zjk2MWI5YjJlMDU2Njg5NDY3M2YzYjlkNTFlMzdhOGUzMzYwNg==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-02-14T22:13:26Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2013-02-14T22:13:26Z"}, "message": "re PR fortran/56224 (gfortran -fopenmp cannot find omp_lib.h)\n\n2013-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/56224\n\t* gfortran.h (gfc_add_include_path):  Add boolean argument\n\tfor warn.\n\t* scanner.c (gfc_add_include_path):  Pass along warn argument\n\tto add_path_to_list.\n\t* options.c (gfc_post_options):  Add true warn argument to\n\tgfc_add_include_path.\n\t(gfc_handle_module_path_options):  Likewise.\n\t(gfc_handle_option): Also gfc_add_include_path for intrinsic\n\tmodules, without warning.\n\nFrom-SVN: r196058", "tree": {"sha": "b7448e76189c5ab9dda84e7e0e477eace20755e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b7448e76189c5ab9dda84e7e0e477eace20755e4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/308f961b9b2e0566894673f3b9d51e37a8e33606", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308f961b9b2e0566894673f3b9d51e37a8e33606", "html_url": "https://github.com/Rust-GCC/gccrs/commit/308f961b9b2e0566894673f3b9d51e37a8e33606", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/308f961b9b2e0566894673f3b9d51e37a8e33606/comments", "author": null, "committer": null, "parents": [{"sha": "bb3accfa6fd67cb6f61d06c3cce1805754d28666", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb3accfa6fd67cb6f61d06c3cce1805754d28666", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb3accfa6fd67cb6f61d06c3cce1805754d28666"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "1375d0e37850c6ff26fe47db8ccc3d98e6abb41b", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=308f961b9b2e0566894673f3b9d51e37a8e33606", "patch": "@@ -1,3 +1,16 @@\n+2013-02-14  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/56224\n+\t* gfortran.h (gfc_add_include_path):  Add boolean argument\n+\tfor warn.\n+\t* scanner.c (gfc_add_include_path):  Pass along warn argument\n+\tto add_path_to_list.\n+\t* options.c (gfc_post_options):  Add true warn argument to\n+\tgfc_add_include_path.\n+\t(gfc_handle_module_path_options):  Likewise.\n+\t(gfc_handle_option): Also gfc_add_include_path for intrinsic\n+\tmodules, without warning.\n+\n 2013-02-14  Paul Thomas  <pault@gcc.gnu.org>\n \t    Tobias Burnus  <burnus@net-b.de>\n "}, {"sha": "44d5c911b9e5b4341c123a4ef39d693422c257fc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=308f961b9b2e0566894673f3b9d51e37a8e33606", "patch": "@@ -2381,7 +2381,7 @@ match gfc_match_char_spec (gfc_typespec *);\n void gfc_scanner_done_1 (void);\n void gfc_scanner_init_1 (void);\n \n-void gfc_add_include_path (const char *, bool, bool);\n+void gfc_add_include_path (const char *, bool, bool, bool);\n void gfc_add_intrinsic_modules_path (const char *);\n void gfc_release_include_path (void);\n FILE *gfc_open_included_file (const char *, bool, bool);"}, {"sha": "fba1a3f3a88bf1df4416e4ed36e6efffbf440b2d", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=308f961b9b2e0566894673f3b9d51e37a8e33606", "patch": "@@ -337,10 +337,10 @@ gfc_post_options (const char **pfilename)\n       source_path = (char *) alloca (i + 1);\n       memcpy (source_path, canon_source_file, i);\n       source_path[i] = 0;\n-      gfc_add_include_path (source_path, true, true);\n+      gfc_add_include_path (source_path, true, true, true);\n     }\n   else\n-    gfc_add_include_path (\".\", true, true);\n+    gfc_add_include_path (\".\", true, true, true);\n \n   if (canon_source_file != gfc_source_file)\n     free (CONST_CAST (char *, canon_source_file));\n@@ -498,7 +498,7 @@ gfc_handle_module_path_options (const char *arg)\n   gfc_option.module_dir = XCNEWVEC (char, strlen (arg) + 2);\n   strcpy (gfc_option.module_dir, arg);\n \n-  gfc_add_include_path (gfc_option.module_dir, true, false);\n+  gfc_add_include_path (gfc_option.module_dir, true, false, true);\n \n   strcat (gfc_option.module_dir, \"/\");\n }\n@@ -844,6 +844,13 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n \n     case OPT_fintrinsic_modules_path:\n     case OPT_fintrinsic_modules_path_:\n+\n+      /* This is needed because omp_lib.h is in a directory together\n+\t with intrinsic modules.  Do no warn because during testing\n+\t without an installed compiler, we would get lots of bogus\n+\t warnings for a missing include directory.  */\n+      gfc_add_include_path (arg, false, false, false);\n+\n       gfc_add_intrinsic_modules_path (arg);\n       break;\n \n@@ -978,7 +985,7 @@ gfc_handle_option (size_t scode, const char *arg, int value,\n       break;\n \n     case OPT_I:\n-      gfc_add_include_path (arg, true, false);\n+      gfc_add_include_path (arg, true, false, true);\n       break;\n \n     case OPT_J:"}, {"sha": "f714ed01a549fcfc8c1f9f1188c8eca872960718", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/308f961b9b2e0566894673f3b9d51e37a8e33606/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=308f961b9b2e0566894673f3b9d51e37a8e33606", "patch": "@@ -375,9 +375,10 @@ add_path_to_list (gfc_directorylist **list, const char *path,\n \n \n void\n-gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir)\n+gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir,\n+\t\t      bool warn)\n {\n-  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, true);\n+  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, warn);\n \n   /* For '#include \"...\"' these directories are automatically searched.  */\n   if (!file_dir)"}]}