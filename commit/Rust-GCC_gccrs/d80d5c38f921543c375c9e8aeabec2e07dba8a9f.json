{"sha": "d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDgwZDVjMzhmOTIxNTQzYzM3NWM5ZThhZWFiZWMyZTA3ZGJhOGE5Zg==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2017-09-25T17:32:36Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2017-09-25T17:32:36Z"}, "message": "re PR tree-optimization/82163 (ICE on valid code at -O3 on x86_64-linux-gnu: in check_loop_closed_ssa_use, at tree-ssa-loop-manip.c:707)\n\n\tPR tree-optimization/82163\n\t* tree-ssa-loop-manip.h (verify_loop_closed_ssa): New parameter.\n\t(checking_verify_loop_closed_ssa): New parameter.\n\t* tree-ssa-loop-manip.c (check_loop_closed_ssa_use): Delete.\n\t(check_loop_closed_ssa_stmt): Delete.\n\t(check_loop_closed_ssa_def, check_loop_closed_ssa_bb): New functions.\n\t(verify_loop_closed_ssa): Check loop closed ssa form for LOOP.\n\t(tree_transform_and_unroll_loop): Check loop closed ssa form only for\n\tchanged loops.\n\n\tgcc/testsuite\n\t* gcc.dg/tree-ssa/pr82163.c: New test.\n\nFrom-SVN: r253161", "tree": {"sha": "46fa93e2e0fa8b863fe7b992492d01123b9b98ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46fa93e2e0fa8b863fe7b992492d01123b9b98ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/comments", "author": null, "committer": null, "parents": [{"sha": "c02bffe38a706d8251442cf01095563c1bdcd61f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c02bffe38a706d8251442cf01095563c1bdcd61f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c02bffe38a706d8251442cf01095563c1bdcd61f"}], "stats": {"total": 134, "additions": 94, "deletions": 40}, "files": [{"sha": "6fbab0123e1acc0bdc6ecf72f86392922d3172dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "patch": "@@ -1,3 +1,15 @@\n+2017-09-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/82163\n+\t* tree-ssa-loop-manip.h (verify_loop_closed_ssa): New parameter.\n+\t(checking_verify_loop_closed_ssa): New parameter.\n+\t* tree-ssa-loop-manip.c (check_loop_closed_ssa_use): Delete.\n+\t(check_loop_closed_ssa_stmt): Delete.\n+\t(check_loop_closed_ssa_def, check_loop_closed_ssa_bb): New functions.\n+\t(verify_loop_closed_ssa): Check loop closed ssa form for LOOP.\n+\t(tree_transform_and_unroll_loop): Check loop closed ssa form only for\n+\tchanged loops.\n+\n 2017-09-25  Pekka Jaaskelainen <pekka@parmance.com>\n \n \t* brig-builtins.def: Treat HSAIL barrier builtins as"}, {"sha": "8ab2312e527337b63722709674a34ad3b4376183", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "patch": "@@ -1,3 +1,8 @@\n+2017-09-25  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/82163\n+\t* gcc.dg/tree-ssa/pr82163.c: New test.\n+\n 2017-09-25  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \t* gfortran.dg/do_subscript_1.f90: New test."}, {"sha": "389d5c393c9e99862b84cf53c57304057043e069", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr82163.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82163.c?ref=d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O3\" } */\n+\n+int a, b, c[4], d, e, f, g;\n+\n+void h ()\n+{\n+  for (; a; a++)\n+    {\n+      c[a + 3] = g;\n+      if (b)\n+        c[a] = f;\n+      else\n+        {\n+          for (; d; d++)\n+            c[d + 3] = c[d];\n+          for (e = 1; e == 2; e++)\n+            ;\n+          if (e)\n+            break;\n+        }\n+    }\n+}"}, {"sha": "b08b8b9b92c9f800b2b3971e0ebcb0697094485a", "filename": "gcc/tree-ssa-loop-manip.c", "status": "modified", "additions": 51, "deletions": 37, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftree-ssa-loop-manip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftree-ssa-loop-manip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.c?ref=d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "patch": "@@ -690,48 +690,59 @@ rewrite_virtuals_into_loop_closed_ssa (struct loop *loop)\n   rewrite_into_loop_closed_ssa_1 (NULL, 0, SSA_OP_VIRTUAL_USES, loop);\n }\n \n-/* Check invariants of the loop closed ssa form for the USE in BB.  */\n+/* Check invariants of the loop closed ssa form for the def in DEF_BB.  */\n \n static void\n-check_loop_closed_ssa_use (basic_block bb, tree use)\n+check_loop_closed_ssa_def (basic_block def_bb, tree def)\n {\n-  gimple *def;\n-  basic_block def_bb;\n+  use_operand_p use_p;\n+  imm_use_iterator iterator;\n+  FOR_EACH_IMM_USE_FAST (use_p, iterator, def)\n+    {\n+      if (is_gimple_debug (USE_STMT (use_p)))\n+\tcontinue;\n \n-  if (TREE_CODE (use) != SSA_NAME || virtual_operand_p (use))\n-    return;\n+      basic_block use_bb = gimple_bb (USE_STMT (use_p));\n+      if (is_a <gphi *> (USE_STMT (use_p)))\n+\tuse_bb = EDGE_PRED (use_bb, PHI_ARG_INDEX_FROM_USE (use_p))->src;\n \n-  def = SSA_NAME_DEF_STMT (use);\n-  def_bb = gimple_bb (def);\n-  gcc_assert (!def_bb\n-\t      || flow_bb_inside_loop_p (def_bb->loop_father, bb));\n+      gcc_assert (flow_bb_inside_loop_p (def_bb->loop_father, use_bb));\n+    }\n }\n \n-/* Checks invariants of loop closed ssa form in statement STMT in BB.  */\n+/* Checks invariants of loop closed ssa form in BB.  */\n \n static void\n-check_loop_closed_ssa_stmt (basic_block bb, gimple *stmt)\n+check_loop_closed_ssa_bb (basic_block bb)\n {\n-  ssa_op_iter iter;\n-  tree var;\n+  for (gphi_iterator bsi = gsi_start_phis (bb); !gsi_end_p (bsi);\n+       gsi_next (&bsi))\n+    {\n+      gphi *phi = bsi.phi ();\n \n-  if (is_gimple_debug (stmt))\n-    return;\n+      if (!virtual_operand_p (PHI_RESULT (phi)))\n+\tcheck_loop_closed_ssa_def (bb, PHI_RESULT (phi));\n+    }\n \n-  FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_USE)\n-    check_loop_closed_ssa_use (bb, var);\n+  for (gimple_stmt_iterator bsi = gsi_start_nondebug_bb (bb); !gsi_end_p (bsi);\n+       gsi_next_nondebug (&bsi))\n+    {\n+      ssa_op_iter iter;\n+      tree var;\n+      gimple *stmt = gsi_stmt (bsi);\n+\n+      FOR_EACH_SSA_TREE_OPERAND (var, stmt, iter, SSA_OP_DEF)\n+\tcheck_loop_closed_ssa_def (bb, var);\n+    }\n }\n \n /* Checks that invariants of the loop closed ssa form are preserved.\n-   Call verify_ssa when VERIFY_SSA_P is true.  */\n+   Call verify_ssa when VERIFY_SSA_P is true.  Note all loops are checked\n+   if LOOP is NULL, otherwise, only LOOP is checked.  */\n \n DEBUG_FUNCTION void\n-verify_loop_closed_ssa (bool verify_ssa_p)\n+verify_loop_closed_ssa (bool verify_ssa_p, struct loop *loop)\n {\n-  basic_block bb;\n-  edge e;\n-  edge_iterator ei;\n-\n   if (number_of_loops (cfun) <= 1)\n     return;\n \n@@ -740,20 +751,22 @@ verify_loop_closed_ssa (bool verify_ssa_p)\n \n   timevar_push (TV_VERIFY_LOOP_CLOSED);\n \n-  FOR_EACH_BB_FN (bb, cfun)\n+  if (loop == NULL)\n     {\n-      for (gphi_iterator bsi = gsi_start_phis (bb); !gsi_end_p (bsi);\n-\t   gsi_next (&bsi))\n-\t{\n-\t  gphi *phi = bsi.phi ();\n-\t  FOR_EACH_EDGE (e, ei, bb->preds)\n-\t    check_loop_closed_ssa_use (e->src,\n-\t\t\t\t       PHI_ARG_DEF_FROM_EDGE (phi, e));\n-\t}\n+      basic_block bb;\n \n-      for (gimple_stmt_iterator bsi = gsi_start_bb (bb); !gsi_end_p (bsi);\n-\t   gsi_next (&bsi))\n-\tcheck_loop_closed_ssa_stmt (bb, gsi_stmt (bsi));\n+      FOR_EACH_BB_FN (bb, cfun)\n+\tif (bb->loop_father && bb->loop_father->num > 0)\n+\t  check_loop_closed_ssa_bb (bb);\n+    }\n+  else\n+    {\n+      basic_block *bbs = get_loop_body (loop);\n+\n+      for (unsigned i = 0; i < loop->num_nodes; ++i)\n+\tcheck_loop_closed_ssa_bb (bbs[i]);\n+\n+      free (bbs);\n     }\n \n   timevar_pop (TV_VERIFY_LOOP_CLOSED);\n@@ -1405,7 +1418,8 @@ tree_transform_and_unroll_loop (struct loop *loop, unsigned factor,\n \n   checking_verify_flow_info ();\n   checking_verify_loop_structure ();\n-  checking_verify_loop_closed_ssa (true);\n+  checking_verify_loop_closed_ssa (true, loop);\n+  checking_verify_loop_closed_ssa (true, new_loop);\n }\n \n /* Wrapper over tree_transform_and_unroll_loop for case we do not"}, {"sha": "3f5b3eecde662a9884b7d9defe8de029e7833122", "filename": "gcc/tree-ssa-loop-manip.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftree-ssa-loop-manip.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d80d5c38f921543c375c9e8aeabec2e07dba8a9f/gcc%2Ftree-ssa-loop-manip.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-manip.h?ref=d80d5c38f921543c375c9e8aeabec2e07dba8a9f", "patch": "@@ -28,13 +28,13 @@ extern void rewrite_into_loop_closed_ssa_1 (bitmap, unsigned, int,\n \t\t\t\t\t    struct loop *);\n extern void rewrite_into_loop_closed_ssa (bitmap, unsigned);\n extern void rewrite_virtuals_into_loop_closed_ssa (struct loop *);\n-extern void verify_loop_closed_ssa (bool);\n+extern void verify_loop_closed_ssa (bool, struct loop * = NULL);\n \n static inline void\n-checking_verify_loop_closed_ssa (bool verify_ssa_p)\n+checking_verify_loop_closed_ssa (bool verify_ssa_p, struct loop *loop = NULL)\n {\n   if (flag_checking)\n-    verify_loop_closed_ssa (verify_ssa_p);\n+    verify_loop_closed_ssa (verify_ssa_p, loop);\n }\n \n extern basic_block split_loop_exit_edge (edge);"}]}