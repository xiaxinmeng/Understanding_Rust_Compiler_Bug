{"sha": "17555e7e367ff3b334e7eae368e5c3a9b4485579", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTc1NTVlN2UzNjdmZjNiMzM0ZTdlYWUzNjhlNWMzYTliNDQ4NTU3OQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-02-13T12:42:39Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2010-02-13T12:42:39Z"}, "message": "re PR fortran/41113 (spurious  _gfortran_internal_pack)\n\n2010-02-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41113\n\tPR fortran/41117\n\t* trans-array.c (gfc_conv_array_parameter): Use\n\tgfc_full_array_ref_p to detect full and contiguous variable\n\tarrays. Full array components and contiguous arrays do not need\n\tinternal_pack and internal_unpack.\n\n2010-02-13  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/41113\n\tPR fortran/41117\n\t* gfortran.dg/internal_pack_6.f90: New test.\n\nFrom-SVN: r156749", "tree": {"sha": "bd94b6f2656e80971481f28a74ece91687210157", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd94b6f2656e80971481f28a74ece91687210157"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/17555e7e367ff3b334e7eae368e5c3a9b4485579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17555e7e367ff3b334e7eae368e5c3a9b4485579", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17555e7e367ff3b334e7eae368e5c3a9b4485579", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17555e7e367ff3b334e7eae368e5c3a9b4485579/comments", "author": null, "committer": null, "parents": [{"sha": "97d22c8a230e4ce8cf557f6a84f529a473d10b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97d22c8a230e4ce8cf557f6a84f529a473d10b2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97d22c8a230e4ce8cf557f6a84f529a473d10b2d"}], "stats": {"total": 113, "additions": 108, "deletions": 5}, "files": [{"sha": "0c1066d95d4b83ee8f7b7b0b126da24a9843a5b9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=17555e7e367ff3b334e7eae368e5c3a9b4485579", "patch": "@@ -1,3 +1,12 @@\n+2010-02-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41113\n+\tPR fortran/41117\n+\t* trans-array.c (gfc_conv_array_parameter): Use\n+\tgfc_full_array_ref_p to detect full and contiguous variable\n+\tarrays. Full array components and contiguous arrays do not need\n+\tinternal_pack and internal_unpack.\n+\n 2010-02-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/43030"}, {"sha": "ae39aed1c58e1ec657a573f46eff6e45a8cc2cab", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 36, "deletions": 5, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=17555e7e367ff3b334e7eae368e5c3a9b4485579", "patch": "@@ -5468,17 +5468,27 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n   tree tmp = NULL_TREE;\n   tree stmt;\n   tree parent = DECL_CONTEXT (current_function_decl);\n-  bool full_array_var, this_array_result;\n+  bool full_array_var;\n+  bool this_array_result;\n+  bool contiguous;\n   gfc_symbol *sym;\n   stmtblock_t block;\n+  gfc_ref *ref;\n+\n+  for (ref = expr->ref; ref; ref = ref->next)\n+    if (ref->next == NULL)\n+      break;\n+\n+  full_array_var = false;\n+  contiguous = false;\n+\n+  if (expr->expr_type == EXPR_VARIABLE && ref)\n+    full_array_var = gfc_full_array_ref_p (ref, &contiguous);\n \n-  full_array_var = (expr->expr_type == EXPR_VARIABLE\n-\t\t    && expr->ref->type == REF_ARRAY\n-\t\t    && expr->ref->u.ar.type == AR_FULL);\n   sym = full_array_var ? expr->symtree->n.sym : NULL;\n \n   /* The symbol should have an array specification.  */\n-  gcc_assert (!sym || sym->as);\n+  gcc_assert (!sym || sym->as || ref->u.ar.as);\n \n   if (expr->expr_type == EXPR_ARRAY && expr->ts.type == BT_CHARACTER)\n     {\n@@ -5501,6 +5511,14 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n \n       if (sym->ts.type == BT_CHARACTER)\n \tse->string_length = sym->ts.u.cl->backend_decl;\n+\n+      if (sym->ts.type == BT_DERIVED && !sym->as)\n+\t{\n+\t  gfc_conv_expr_descriptor (se, expr, ss);\n+\t  se->expr = gfc_conv_array_data (se->expr);\n+\t  return;\n+\t}\n+\n       if (!sym->attr.pointer && sym->as->type != AS_ASSUMED_SHAPE \n           && !sym->attr.allocatable)\n         {\n@@ -5514,6 +5532,7 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n \t    array_parameter_size (tmp, expr, size);\n \t  return;\n         }\n+\n       if (sym->attr.allocatable)\n         {\n \t  if (sym->attr.dummy || sym->attr.result)\n@@ -5528,6 +5547,18 @@ gfc_conv_array_parameter (gfc_se * se, gfc_expr * expr, gfc_ss * ss, int g77,\n         }\n     }\n \n+  if (contiguous && g77 && !this_array_result\n+\t&& !expr->symtree->n.sym->attr.dummy)\n+    {\n+      gfc_conv_expr_descriptor (se, expr, ss);\n+      if (expr->ts.type == BT_CHARACTER)\n+\tse->string_length = expr->ts.u.cl->backend_decl;\n+      if (size)\n+\tarray_parameter_size (se->expr, expr, size);\n+      se->expr = gfc_conv_array_data (se->expr);\n+      return;\n+    }\n+\n   if (this_array_result)\n     {\n       /* Result of the enclosing function.  */"}, {"sha": "157d79cb4c8abf882cf383bf5299dca60097f58a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=17555e7e367ff3b334e7eae368e5c3a9b4485579", "patch": "@@ -1,3 +1,9 @@\n+2010-02-13  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/41113\n+\tPR fortran/41117\n+\t* gfortran.dg/internal_pack_6.f90: New test.\n+\n 2010-02-12  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/43054"}, {"sha": "c02f7c9bec5e7617976a03ea55ccfc1d3c76ccdf", "filename": "gcc/testsuite/gfortran.dg/internal_pack_6.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/17555e7e367ff3b334e7eae368e5c3a9b4485579/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Finternal_pack_6.f90?ref=17555e7e367ff3b334e7eae368e5c3a9b4485579", "patch": "@@ -0,0 +1,57 @@\n+! { dg-do run }\n+! { dg-options \"-fdump-tree-original\" }\n+!\n+! Test the fix for PR41113 and PR41117, in which unnecessary calls\n+! to internal_pack and internal_unpack were being generated.\n+!\n+! Contributed by Joost VandeVondele <jv244@cam.ac.uk>\n+!!\n+MODULE M1\n+ TYPE T1\n+   REAL :: data(10) = [(i, i = 1, 10)]\n+ END TYPE T1\n+CONTAINS\n+ SUBROUTINE S1(data, i, chksum)\n+   REAL, DIMENSION(*) :: data\n+   integer :: i, j\n+   real :: subsum, chksum\n+   subsum = 0\n+   do j = 1, i\n+     subsum = subsum + data(j)\n+   end do\n+   if (abs(subsum - chksum) > 1e-6) call abort\n+ END SUBROUTINE S1\n+END MODULE\n+\n+SUBROUTINE S2\n+ use m1\n+ TYPE(T1) :: d\n+\n+ real :: data1(10) = [(i, i = 1, 10)]\n+ REAL :: data(-4:5,-4:5) = reshape ([(real(i), i = 1, 100)], [10,10])\n+\n+! PR41113\n+ CALL S1(d%data, 10, sum (d%data))\n+ CALL S1(data1, 10, sum (data1))\n+\n+! PR41117\n+ DO i=-4,5\n+    CALL S1(data(:,i), 10, sum (data(:,i)))\n+ ENDDO\n+! Being non-contiguous, this is the only time that _internal_pack is called\n+ DO i=-4,5\n+    CALL S1(data(-2:,i), 8, sum (data(-2:,i)))\n+ ENDDO\n+ DO i=-4,4\n+    CALL S1(data(:,i:i+1), 20, sum (reshape (data(:,i:i+1), [20])))\n+ ENDDO\n+ DO i=-4,5\n+    CALL S1(data(2,i), 1, data(2,i))\n+ ENDDO\n+END SUBROUTINE S2\n+\n+ call s2\n+end\n+! { dg-final { cleanup-modules \"M1\" } }\n+! { dg-final { scan-tree-dump-times \"_gfortran_internal_pack\" 1 \"original\" } }\n+! { dg-final { cleanup-tree-dump \"original\" } }"}]}