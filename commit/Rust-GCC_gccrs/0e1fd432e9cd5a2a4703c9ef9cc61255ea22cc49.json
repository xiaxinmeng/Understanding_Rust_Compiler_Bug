{"sha": "0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGUxZmQ0MzJlOWNkNWEyYTQ3MDNjOWVmOWNjNjEyNTVlYTIyY2M0OQ==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-21T16:12:58Z"}, "committer": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2021-05-26T14:38:41Z"}, "message": "arm: Auto-vectorization for MVE: vaddv\n\nThis patch adds support for the reduc_plus_scal optab with MVE, which\nmaps to the vaddv instruction.\n\nIt moves the reduc_plus_scal_<mode> expander from neon.md to\nvec-common.md and adds support for MVE to it.\n\nSince vaddv uses a 32-bits accumulator, we have to truncate it's\nresult.\n\nFor instance:\nint32_t test__s8x16 (int8_t *a) {\n  int i;\n  int8_t result = 0;\n  for (i=0; i<16; i++) {\n    result += a[i];\n  }\n  return result;\n}\nis compiled into:\n  vldrb.8 q3, [r0]\n  vaddv.s8        r0, q3\n  sxtb    r0, r0\n  bx      lr\n\nIf we used uint8_t instead of int8_t, we still use vaddv.s8        r0, q3,\nbut truncate with uxtb    r0, r0.\n\n2021-05-25  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\tgcc/\n\t* config/arm/mve.md (mve_vaddvq_<supf><mode>): Prefix with '@'.\n\t* config/arm/neon.md (reduc_plus_scal_<mode>): Move to ..\n\t* config/arm/vec-common.md: .. here. Add support for MVE.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/simd/mve-vaddv-1.c: New test.", "tree": {"sha": "7db8bc562688d86aa64f87d23a95cd5c59205bfa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db8bc562688d86aa64f87d23a95cd5c59205bfa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/comments", "author": null, "committer": null, "parents": [{"sha": "76898cec437561a5e74d92b98f4631b80300409d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76898cec437561a5e74d92b98f4631b80300409d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76898cec437561a5e74d92b98f4631b80300409d"}], "stats": {"total": 67, "additions": 53, "deletions": 14}, "files": [{"sha": "0a6ba80c99dbb5fe3cbaa23b08f5ff6f02e9e7d4", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "patch": "@@ -464,7 +464,7 @@\n ;;\n ;; [vaddvq_s, vaddvq_u])\n ;;\n-(define_insn \"mve_vaddvq_<supf><mode>\"\n+(define_insn \"@mve_vaddvq_<supf><mode>\"\n   [\n    (set (match_operand:SI 0 \"s_register_operand\" \"=Te\")\n \t(unspec:SI [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]"}, {"sha": "6a6573317cf7b80b15bb4d5d53633b9a105ba50c", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "patch": "@@ -1161,19 +1161,6 @@\n   DONE;\n })\n \n-(define_expand \"reduc_plus_scal_<mode>\"\n-  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n-   (match_operand:VQ 1 \"s_register_operand\")]\n-  \"ARM_HAVE_NEON_<MODE>_ARITH && !BYTES_BIG_ENDIAN\"\n-{\n-  rtx step1 = gen_reg_rtx (<V_HALF>mode);\n-\n-  emit_insn (gen_quad_halves_plus<mode> (step1, operands[1]));\n-  emit_insn (gen_reduc_plus_scal_<V_half> (operands[0], step1));\n-\n-  DONE;\n-})\n-\n (define_expand \"reduc_plus_scal_v2di\"\n   [(match_operand:DI 0 \"nonimmediate_operand\")\n    (match_operand:V2DI 1 \"s_register_operand\")]"}, {"sha": "8e35151da46780d4d6243d4245ea1e1fadb454ae", "filename": "gcc/config/arm/vec-common.md", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fvec-common.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Fconfig%2Farm%2Fvec-common.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvec-common.md?ref=0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "patch": "@@ -539,3 +539,29 @@\n     emit_insn (gen_mve_vst4q<mode> (operands[0], operands[1]));\n   DONE;\n })\n+\n+(define_expand \"reduc_plus_scal_<mode>\"\n+  [(match_operand:<V_elem> 0 \"nonimmediate_operand\")\n+   (match_operand:VQ 1 \"s_register_operand\")]\n+  \"ARM_HAVE_<MODE>_ARITH\n+   && !(TARGET_HAVE_MVE && FLOAT_MODE_P (<MODE>mode))\n+   && !BYTES_BIG_ENDIAN\"\n+{\n+  if (TARGET_NEON)\n+    {\n+      rtx step1 = gen_reg_rtx (<V_HALF>mode);\n+\n+      emit_insn (gen_quad_halves_plus<mode> (step1, operands[1]));\n+      emit_insn (gen_reduc_plus_scal_<V_half> (operands[0], step1));\n+    }\n+  else\n+    {\n+      /* vaddv generates a 32 bits accumulator.  */\n+      rtx op0 = gen_reg_rtx (SImode);\n+\n+      emit_insn (gen_mve_vaddvq (VADDVQ_S, <MODE>mode, op0, operands[1]));\n+      emit_move_insn (operands[0], gen_lowpart (<V_elem>mode, op0));\n+    }\n+\n+  DONE;\n+})"}, {"sha": "b6b0bc368f52d3d320a65f13e85e475a2d9c43c8", "filename": "gcc/testsuite/gcc.target/arm/simd/mve-vaddv-1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vaddv-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vaddv-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fsimd%2Fmve-vaddv-1.c?ref=0e1fd432e9cd5a2a4703c9ef9cc61255ea22cc49", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O3\" } */\n+\n+#include <stdint.h>\n+\n+#define FUNC(SIGN, TYPE, BITS, NB)\t\t\t\t\t\\\n+  TYPE##32_t test_ ##_ ## SIGN ## BITS ## x ## NB (TYPE##BITS##_t *a) { \\\n+    int i;\t\t\t\t\t\t\t\t\\\n+    TYPE##BITS##_t result = 0;\t\t\t\t\t\t\\\n+    for (i=0; i<NB; i++) {\t\t\t\t\t\t\\\n+      result += a[i];\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n+    return result;\t\t\t\t\t\t\t\\\n+}\n+\n+/* 128-bit vectors.  */\n+FUNC(s, int, 8, 16)\n+FUNC(u, uint, 8, 16)\n+FUNC(s, int, 16, 8)\n+FUNC(u, uint, 16, 8)\n+FUNC(s, int, 32, 4)\n+FUNC(u, uint, 32, 4)\n+\n+/* { dg-final { scan-assembler-times {vaddv\\.s} 6 } } */"}]}