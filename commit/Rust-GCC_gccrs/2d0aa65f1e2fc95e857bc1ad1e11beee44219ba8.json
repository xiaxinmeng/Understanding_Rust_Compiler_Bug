{"sha": "2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQwYWE2NWYxZTJmYzk1ZTg1N2JjMWFkMWUxMWJlZWU0NDIxOWJhOA==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargls@comcast.net", "date": "2005-04-14T16:29:31Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2005-04-14T16:29:31Z"}, "message": "gfortran.h (gfc_real_info): Add subnormal struct member.\n\n* gfortran.h (gfc_real_info): Add subnormal struct member.\n* arith.c (gfc_arith_init_1): Set it.\n  (gfc_check_real_range): Use it.\n* simplify.c (gfc_simplify_nearest): Fix nearest(0.,1.).\n\nFrom-SVN: r98141", "tree": {"sha": "91ef8649fbc7ae8aff33dfc61c5c29331b64cf22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ef8649fbc7ae8aff33dfc61c5c29331b64cf22"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/comments", "author": null, "committer": null, "parents": [{"sha": "6cecb0aa9673e3dcbb45de4d8050674f405dc958", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6cecb0aa9673e3dcbb45de4d8050674f405dc958", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6cecb0aa9673e3dcbb45de4d8050674f405dc958"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "e1b1097812874b71988d36bbd3831b8a11275e5c", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "patch": "@@ -1,3 +1,10 @@\n+2005-04-14  Steven G. Kargl  <kargls@comcast.net>\n+\n+\t* gfortran.h (gfc_real_info): Add subnormal struct member.\n+\t* arith.c (gfc_arith_init_1): Set it.\n+\t(gfc_check_real_range): Use it.\n+\t* simplify.c (gfc_simplify_nearest): Fix nearest(0.,1.).\n+\n 2005-04-12  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* simplify.c: Fix a comment typo."}, {"sha": "ef19217ae04a115c72ae1d8ad38773e998b11cda", "filename": "gcc/fortran/arith.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Farith.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Farith.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Farith.c?ref=2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "patch": "@@ -259,6 +259,14 @@ gfc_arith_init_1 (void)\n       mpfr_init (real_info->tiny);\n       mpfr_set (real_info->tiny, b, GFC_RND_MODE);\n \n+      /* subnormal (x) = b**(emin - digit + 1) */\n+      mpfr_set_ui (b, real_info->radix, GFC_RND_MODE);\n+      mpfr_pow_si (b, b, real_info->min_exponent - real_info->digits + 1,\n+\t\t   GFC_RND_MODE);\n+\n+      mpfr_init (real_info->subnormal);\n+      mpfr_set (real_info->subnormal, b, GFC_RND_MODE);\n+\n       /* epsilon(x) = b**(1-p) */\n       mpfr_set_ui (b, real_info->radix, GFC_RND_MODE);\n       mpfr_pow_si (b, b, 1 - real_info->digits, GFC_RND_MODE);\n@@ -374,7 +382,7 @@ gfc_check_real_range (mpfr_t p, int kind)\n     retval = ARITH_OK;\n   else if (mpfr_cmp (q, gfc_real_kinds[i].huge) > 0)\n       retval = ARITH_OVERFLOW;\n-  else if (mpfr_cmp (q, gfc_real_kinds[i].tiny) < 0)\n+  else if (mpfr_cmp (q, gfc_real_kinds[i].subnormal) < 0)\n     retval = ARITH_UNDERFLOW;\n   else\n     retval = ARITH_OK;"}, {"sha": "330cedae26920cec5a82f384ebd2c64f9c7a2175", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "patch": "@@ -1146,7 +1146,7 @@ extern gfc_logical_info gfc_logical_kinds[];\n \n typedef struct\n {\n-  mpfr_t epsilon, huge, tiny;\n+  mpfr_t epsilon, huge, tiny, subnormal;\n   int kind, radix, digits, min_exponent, max_exponent;\n   int range, precision;\n "}, {"sha": "fa6c2c6aa7c8708c510b06ffef953292d4fbb51f", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=2d0aa65f1e2fc95e857bc1ad1e11beee44219ba8", "patch": "@@ -2293,21 +2293,10 @@ gfc_simplify_nearest (gfc_expr * x, gfc_expr * s)\n \n       if (direction > 0)\n \tmpfr_add (result->value.real,\n-\t\t  x->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n+\t\t  x->value.real, gfc_real_kinds[k].subnormal, GFC_RND_MODE);\n       else\n \tmpfr_sub (result->value.real,\n-\t\t  x->value.real, gfc_real_kinds[k].tiny, GFC_RND_MODE);\n-\n-#if 0\n-      /* FIXME: This gives an arithmetic error because we compare\n-\t against tiny when range-checking.  Also, it doesn't give the\n-\t right value.  */\n-      /* TINY is the smallest model number, we want the smallest\n-\t machine representable number.  Therefore we have to shift the\n-\t value to the right by the number of digits - 1.  */\n-      mpfr_div_2ui (result->value.real, result->value.real,\n-\t\t    gfc_real_kinds[k].precision - 1, GFC_RND_MODE);\n-#endif\n+\t\t  x->value.real, gfc_real_kinds[k].subnormal, GFC_RND_MODE);\n     }\n   else\n     {"}]}